<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPBatchProdReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPBatchProdReportDP</c> class is the report data provider class
///     for the <c>PIPBatchProdReport</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(PIPBatchProdReportContract))]
public class PIPBatchProdReportDP extends SRSReportDataProviderBase
{
    Name                        aotProperty;
    Name                        propertyVal;
    boolean                     incNoValue;

    Set                         producedItems;
    Set                         ingredients;
    Set                         trackingDimensionValues;

    ProdTable                   prodTable;
    InventTable                 inventTable;

    ProdTable                   prodTableTmp;
    PmfProdCoBy                 pmfProdCoByTmp;
    ProdJournalBOM              prodJournalBOMTmp;
    ProdJournalRoute            prodJournalRouteTmp;
    ProdBOM                     prodBOMTmp;
    ProdRoute                   prodRouteTmp;
    InventQualityOrderTable     inventQualityOrderTableTmp;
    PdsBatchAttribByItem        pdsBatchAttribByItemTmp;
    PdsVendBatchInfo            pdsVendBatchInfoTmp;

    PIPBatchProdId              batchProdId;
    ProdId                      prodId;
    ItemId                      itemId;
    InventQualityOrderId        qualityOrderId;

    PIPProdJournalProdTmp       pipProdJournalProdTmp;
    PIPProdJournalBOMTmp        pipProdJournalBOMTmp;
    PIPProdJournalRouteTmp      pipProdJournalRouteTmp;
    PIPProdBOMTmp               pipProdBOMTmp;
    PIPProdRouteTmp             pipProdRouteTmp;
    PIPBatchAttributesTmp       pipBatchAttributesTmp;
    PIPProdBatchesTmp           pipProdBatchesTmp;
    PIPVendBatchDetailsTmp      pipVendBatchDetailsTmp;
    PIPInventQualityOrderTmp    pipInventQualityOrderTmp;
    PIPProdDetailTmp            pipProdDetail;
    PIPInventTransTmp           pipInventTransTmp;
    
    InventDimParm               inventDimParm;
    boolean                     showBatchExpDate;

    List                        DimListProductsAndInventLocation;
    List                        DimListTrackingAndSite;
    List                        DimListProductsAndSite;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    private void createData(PIPBatchProdReportContract _contract)
    {
        boolean showBatchAttribIngredients;
        boolean showBatchAttribProducedItems;
        boolean showQOIngredients;
        boolean showQOProducedItems;
        boolean showVendBatchDetails;

        boolean includePostProductionQuality;
    
        showBatchAttribIngredients      = _contract.parmShowBatchIngredient();
        showBatchAttribProducedItems    = _contract.parmShowBatchProduced();
        showQOIngredients               = _contract.parmShowQualityIngredient();
        showQOProducedItems             = _contract.parmShowQualityProduced();
        showVendBatchDetails            = _contract.parmShowVendBatch();

        includePostProductionQuality    = _contract.parmIncludePostProductionQuality();

        showBatchExpDate                = _contract.parmShowBatchExp();
    
        producedItems                   = new Set(Types::String);
        ingredients                     = new Set(Types::String);
        // The value in this set is a container with 2 values: tracking dimension field id and the dimension value
        trackingDimensionValues         = new Set(Types::Container);

        inventDimParm                   = _contract.parmInventDimViewContract().parmInventDimParm();

        DimListProductsAndInventLocation = List::create(InventDim::dimProductDimFieldList().pack());
        DimListProductsAndInventLocation.addStart(fieldName2Id(tableName2Id(tableStr(InventDim)), fieldStr(InventDim, InventLocationId )));

        DimListTrackingAndSite = List::create(InventDim::dimTrackingDimFieldList().pack());
        DimListTrackingAndSite.addStart(fieldName2Id(tableName2Id(tableStr(InventDim)), fieldStr(InventDim, InventSiteId)));

        DimListProductsAndSite = List::create(InventDim::dimProductDimFieldList().pack());
        DimListProductsAndSite.addEnd(fieldName2Id(tableName2Id(tableStr(InventDim)), fieldStr(InventDim, InventSiteId)));
    
        this.setProduction();
        this.setProductionDetails();
        this.setTransactions();
        this.setBOMversion();
        this.setRouteVersion();
    
        if (showBatchAttribIngredients || showBatchAttribProducedItems || showVendBatchDetails || showQOIngredients || showQOProducedItems)
        {
            this.setProductionTrackingDimensions();
        }
        if (showBatchAttribIngredients || showBatchAttribProducedItems)
        {
            this.setBatchAttributes();
        }
        if (showVendBatchDetails)
        {
            this.setVendorBatchDetails();
        }
        if (showQOIngredients || showQOProducedItems)
        {
            this.setQualityOrderDetails(includePostProductionQuality);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchAttributesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPBatchAttributesTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPBatchAttributesTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPBatchAttributesTmp))]
    public PIPBatchAttributesTmp getBatchAttributesTmp()
    {
        select pipBatchAttributesTmp;
        return pipBatchAttributesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdBOMTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPProdBOMTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPProdBOMTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPProdBOMTmp))]
    public PIPProdBOMTmp getProdBOMTmp()
    {
        select pipProdBOMTmp;
        return pipProdBOMTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPProdDetailTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPProdDetailTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPProdDetailTmp))]
    public PIPProdDetailTmp getProdDetails()
    {
        select pipProdDetail;
        return pipProdDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdJournalBOMTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPProdJournalBOMTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPProdJournalBOMTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPProdJournalBOMTmp))]
    public PIPProdJournalBOMTmp getProdJournalBOMTmp()
    {
        select pipProdJournalBOMTmp;
        return pipProdJournalBOMTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdJournalProdTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPProdJournalProdTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPProdJournalProdTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPProdJournalProdTmp))]
    public PIPProdJournalProdTmp getProdJournalProdTmp()
    {
        select pipProdJournalProdTmp;
        return pipProdJournalProdTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdJournalRouteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPProdJournalRouteTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPProdJournalRouteTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPProdJournalRouteTmp))]
    public PIPProdJournalRouteTmp getProdJournalRouteTmp()
    {
        select pipProdJournalRouteTmp;
        return pipProdJournalRouteTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdRouteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPProdRouteTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPProdRouteTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPProdRouteTmp))]
    public PIPProdRouteTmp getProdRouteTmp()
    {
        select pipProdRouteTmp;
        return pipProdRouteTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>ProdTable</c> record for the report header.
    /// </summary>
    /// <returns>
    ///     The data from the <c>ProdTable</c> record.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ProdTable))]
    public ProdTable getProdTable()
    {
        select prodTableTmp;
        return prodTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQualityOrderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPInventQualityOrderTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPInventQualityOrderTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPInventQualityOrderTmp))]
    public PIPInventQualityOrderTmp getQualityOrderTmp()
    {
        select pipInventQualityOrderTmp;
        return pipInventQualityOrderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPInventTransTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPInventTransTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPInventTransTmp))]
    public PIPInventTransTmp getTransactions()
    {
        select pipInventTransTmp;
        return pipInventTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBatchDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches data from the <c>PIPVendBatchDetailsTmp</c> table.
    /// </summary>
    /// <returns>
    ///     The data from the <c>PIPVendBatchDetailsTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PIPVendBatchDetailsTmp))]
    public PIPVendBatchDetailsTmp getVendBatchDetailsTmp()
    {
        select pipVendBatchDetailsTmp;
        return pipVendBatchDetailsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///     This method is used to process the report business logic, which is used by
    ///     the <c>PIPBatchProdReport</c> report.
    /// </remarks>
    public void processReport()
    {
        PIPBatchProdReportContract  contract;
        PIPBatchProdId              bpId;
    
        contract = this.parmDataContract() as PIPBatchProdReportContract;
    
        bpId = contract.parmBatchProdId();
    
        select firstOnly prodTable
            where prodTable.PIPBatchProdId == bpId;
    
        if (prodTable)
        {
            prodId = prodTable.ProdId;
            itemId = prodTable.ItemId;
    
            // BP Deviation documented
            prodTableTmp.setTmp();
            prodTableTmp.clear();
            prodTableTmp.data(prodTable);
            prodTableTmp.doInsert();
    
            this.createData(contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPBatchAttributesTmp</c> table.
    /// </summary>
    private void setBatchAttributes()
    {
        PdsBatchAttributes  pdsBatchAttributes;
    
        while select pipProdBatchesTmp
        {
            while select pdsBatchAttributes
                where pdsBatchAttributes.ItemId         == pipProdBatchesTmp.ItemId
                    && pdsBatchAttributes.InventBatchId == pipProdBatchesTmp.InventBatchId
            {
                pipBatchAttributesTmp.clear();

                this.loadBatchAttributesTmp(pdsBatchAttributes);
    
                pipBatchAttributesTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadBatchAttributesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPBatchAttributesTmp</c> table.
    /// </summary>
    /// <param name = "_pdsBatchAttributes">A record from the <c>PDSBatchAttributes</c> table with the source data.</param>
    protected void loadBatchAttributesTmp(PdsBatchAttributes _pdsBatchAttributes)
    {
        pipBatchAttributesTmp.ItemId                        = _pdsBatchAttributes.ItemId;
        PIPBatchAttributesTmp.ProductName                   = InventTable::find(_pdsBatchAttributes.ItemId).itemName();
        pipBatchAttributesTmp.PdsBatchAttribId              = _pdsBatchAttributes.PdsBatchAttribId;
        pipBatchAttributesTmp.PdsBatchAttribTarget          = _pdsBatchAttributes.getAttributeDefinedOrOverrideTargetValue();
        pipBatchAttributesTmp.PdsBatchAttribMin             = _pdsBatchAttributes.pdsBatchAttribMin();
        pipBatchAttributesTmp.PdsBatchAttribMax             = _pdsBatchAttributes.pdsBatchAttribMax();
        pipBatchAttributesTmp.InventBatchId                 = _pdsBatchAttributes.InventBatchId;
        pipBatchAttributesTmp.PdsBatchAttribQualityOrderId  = _pdsBatchAttributes.PdsBatchAttribQualityOrderId;
        pipBatchAttributesTmp.PdsBatchAttribValue           = _pdsBatchAttributes.batchAttribValue();
    
        if (pipProdBatchesTmp.ReferenceCategory == InventTransType::ProdLine)
        {
            pipBatchAttributesTmp.ProdItemType = PIPProdItemType::Ingredient;
        }
        else
        {
            pipBatchAttributesTmp.ProdItemType = PIPProdItemType::Produced;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBOMversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPProdBOMTmp</c> table.
    /// </summary>
    private void setBOMversion()
    {
        BOMVersion  bomVersion;
        ProdBOM     prodBOM;
        InventDim   inventDimBOMVersion;
        InventDim   inventDim;
        BOM         bom;
    
        pipProdBOMTmp.clear();
    
        bomVersion = prodTable.bomVersion();
        this.initProdBOMTmpFromBOMVersion(bomVersion);
    
        while select prodBOM
            where prodBOM.ProdId == prodId
            join inventDim
                where inventDim.InventDimId == prodBOM.InventDimId
            outer join bom
                where bom.RecId == prodBOM.BOMRefRecId
        {
            this.loadProdBOMTmp(prodBOM, inventDim);         
    
            // Prior to applying the update for bug 14657 work instructions were only being created at the Formula level and were not not being created at the
            // Production/Batch order level. The update fixed this but only showing the Production/Batch order would have left orders from before the update
            // without any instructions. It was decided for those orders to continue to show work instructions from the Formula level, even though they could
            // potentially have incorrect information.
            DocuRef docuRef;
            if (DocuRef::exist(prodBOM.dataAreaId, prodBOM.TableId, prodBOM.RecId))
            {
                while select docuRef
                    where docuRef.RefRecId      == prodBOM.RecId
                        && docuRef.RefTableId   == prodBOM.TableId
                        && docuRef.RefCompanyId == prodBOM.dataAreaId
                {
                    pipProdBOMTmp.DocuName      = docuRef.Name;
                    pipProdBOMTmp.DocuTypeId    = docuRef.TypeId;
                    pipProdBOMTmp.DocuNotes     = docuRef.Notes;

                    pipProdBOMTmp.DocuRefRecId  = docuRef.RefRecId ;
                    
                    pipProdBOMTmp.insert();
                }
            }
            else if (DocuRef::exist(bom.dataAreaId, bom.TableId, bom.RecId))
            {
                while select docuRef
                    where docuRef.RefRecId      == bom.RecId
                        && docuRef.RefTableId   == bom.TableId
                        && docuRef.RefCompanyId == bom.dataAreaId
                {
                    pipProdBOMTmp.DocuName      = docuRef.Name;
                    pipProdBOMTmp.DocuTypeId    = docuRef.TypeId;
                    pipProdBOMTmp.DocuNotes     = docuRef.Notes;

                    pipProdBOMTmp.DocuRefRecId  = docuRef.RefRecId ;
                    
                    pipProdBOMTmp.insert();
                }
            }
            else
            {
                pipProdBOMTmp.DocuName      = '';
                pipProdBOMTmp.DocuTypeId    = '';
                pipProdBOMTmp.DocuNotes     = '';

                pipProdBOMTmp.DocuRefRecId  = prodBOM.RecId;

                pipProdBOMTmp.insert();
            }

            ingredients.add(pipProdBOMTmp.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdBOMTmpFromBOMVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PIPProdBOMTmp</c> table buffer from a record in the <c>BOMVersion</c> table.
    /// </summary>
    /// <param name="_bomVersion">The record in the <c>BOMVersion</c> table.</param>
    protected void initProdBOMTmpFromBOMVersion(BOMVersion _bomVersion)
    {
        pipProdBOMTmp.BOMId                     = _bomVersion.BOMId;
        pipProdBOMTmp.Name                      = _bomVersion.Name;
        pipProdBOMTmp.FromDate                  = _bomVersion.FromDate;
        pipProdBOMTmp.ToDate                    = _bomVersion.ToDate;
        pipProdBOMTmp.PmfBatchSize              = _bomVersion.PmfBatchSize;
        pipProdBOMTmp.PdsCWSize                 = _bomVersion.PdsCWSize;
        pipProdBOMTmp.FromQty                   = _bomVersion.FromQty;
        pipProdBOMTmp.PdsCWFromQty              = _bomVersion.PdsCWFromQty;
        pipProdBOMTmp.PmfYieldPct               = _bomVersion.PmfYieldPct;
        pipProdBOMTmp.Active                    = _bomVersion.Active;
        pipProdBOMTmp.Approved                  = _bomVersion.Approved;
        pipProdBOMTmp.ApproverPersonnelNumber   = _bomVersion.approverPersonnelNumber();
        pipProdBOMTmp.Signer                    = PIPSIGSignatureLogHelper::pipSignee(_bomVersion.TableId, _bomVersion.RecId);

        InventDim inventDim = InventDim::find(_bomVersion.InventDimId);
        pipProdBOMTmp.BOMInventSiteId           = inventDim.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdBOMTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPProdBOMTmp</c> table.
    /// </summary>
    /// <param name = "_prodBOM">A record from <c>ProdBOM</c> table with source data.</param>
    /// <param name = "_inventDim">The record in <c>InventDim</c> table with the inventory dimensions for the <c>ProdBOM</c> table record.</param>
    protected void loadProdBOMTmp(ProdBOM _prodBOM, InventDim _inventDim)
    {
        pipProdBOMTmp.ItemId            = _prodBOM.ItemId;
        pipProdBOMTmp.ItemName          = _prodBOM.itemName();
        pipProdBOMTmp.QtyBOMCalc        = _prodBOM.QtyBOMCalc;
        pipProdBOMTmp.UnitId            = _prodBOM.UnitId;
        pipProdBOMTmp.BOMQtySerie       = _prodBOM.BOMQtySerie;
        pipProdBOMTmp.PdsCWQty          = _prodBOM.PdsCWQty;
        pipProdBOMTmp.PdsCWUnitId       = _prodBOM.pdsCWUnitId();
        pipProdBOMTmp.PDSIngredientType = _prodBOM.PDSIngredientType;

        pipProdBOMTmp.InventSiteId      = _inventDim.InventSiteId;
        pipProdBOMTmp.InventLocationId  = _inventDim.InventLocationId;
        pipProdBOMTmp.configId          = _inventDim.configId;
        pipProdBOMTmp.InventSizeId      = _inventDim.InventSizeId;
        pipProdBOMTmp.InventColorId     = _inventDim.InventColorId;

        pipProdBOMTmp.InventDimStr      = this.inventDimStr(_prodBOM.ItemId, _inventDim, DimListProductsAndInventLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>OnLoadProdJournalBOMTmp</Name>
				<Source><![CDATA[
    delegate void OnLoadProdJournalBOMTmp(Object _sender, ProdJournalBOM _prodJournalBOM, PIPProdJournalBOMTmp _pipProdJournalBOMTmp) { }

]]></Source>
			</Method>
			<Method>
				<Name>setProduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPProdJournalBOMTmp</c> and <c>PIPProdJournalRouteTmp</c> tables.
    /// </summary>
    private void setProduction()
    {
        ProdJournalTable        prodJournalTable;
        ProdJournalProd         prodJournalProd;
        ProdJournalBOM          prodJournalBOM;
        ProdJournalRoute        prodJournalRoute;
        InventDim               inventDim;
    
        ttsBegin;
    
        while select prodJournalProd
            where prodJournalProd.ProdId == prodId
            join inventDim
                where inventDim.InventDimId == prodJournalProd.InventDimId
            join prodJournalTable
                where prodJournalTable.JournalId == prodJournalProd.JournalId
        {
            pipProdJournalProdTmp.clear();
    
            this.loadProdJournalProdTmp(prodJournalProd, inventDim, prodJournalTable);
    
            pipProdJournalProdTmp.insert();
        }
    
        while select prodJournalBOM
            where prodJournalBOM.ProdId == prodId
            join inventDim
                where inventDim.InventDimId == prodJournalBOM.InventDimId
            join prodJournalTable
                where prodJournalTable.JournalId == prodJournalBOM.JournalId
        {
            pipProdJournalBOMTmp.clear();
    
            this.loadProdJournalBOMTmp(prodJournalBOM, inventDim, prodJournalTable);
            this.OnLoadProdJournalBOMTmp(this, prodJournalBOM, pipProdJournalBOMTmp);

            pipProdJournalBOMTmp.insert();
        }
    
        while select prodJournalRoute
            where prodJournalRoute.ProdId == prodId
            join prodJournalTable
                where prodJournalTable.JournalId == prodJournalRoute.JournalId
        {
            pipProdJournalRouteTmp.clear();
            
            this.loadProdJournalRouteTmp(prodJournalRoute, prodJournalTable);
    
            pipProdJournalRouteTmp.insert();
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdJournalProdTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPProdJournalProdTmp</c> table.
    /// </summary>
    /// <param name = "_prodJournalProd">A record from <c>ProdJournalProd</c> table with source data.</param>
    /// <param name = "_inventDim">The record in <c>InventDim</c> table with the inventory dimensions for the <c>ProdJournalProd</c> table record.</param>
    /// <param name = "_prodJournalTable">The related record in the <c>ProdJournalTable</c> table.</param>
    protected void loadProdJournalProdTmp(ProdJournalProd _prodJournalProd, InventDim _inventDim, ProdJournalTable _prodJournalTable)
    {
        pipProdJournalProdTmp.JournalId         = _prodJournalProd.JournalId;
        pipProdJournalProdTmp.TransDate         = _prodJournalProd.TransDate;
        pipProdJournalProdTmp.InventTransId     = _prodJournalProd.InventTransId;
        pipProdJournalProdTmp.ItemID            = _prodJournalProd.ItemId;
        pipProdJournalProdTmp.ItemName          = _prodJournalProd.itemName();
        pipProdJournalProdTmp.PmfProductType    = _prodJournalProd.PmfProductType;
        pipProdJournalProdTmp.QtyGood           = _prodJournalProd.QtyGood;
        pipProdJournalProdTmp.QtyError          = _prodJournalProd.QtyError;
        pipProdJournalProdTmp.PdsCWBatchGood    = _prodJournalProd.PdsCWBatchGood;
        pipProdJournalProdTmp.PdsCWBatchErr     = _prodJournalProd.PdsCWBatchErr;
        pipProdJournalProdTmp.Unit              = InventTableModule::find(_prodJournalProd.ItemId, ModuleInventPurchSales::Invent).UnitId;
        pipProdJournalProdTmp.PdsCWUnitId       = PdsCatchWeight::cwUnitId(_prodJournalProd.ItemId);
        pipProdJournalProdTmp.ProdFinished      = _prodJournalProd.ProdFinished;
    
        pipProdJournalProdTmp.InventColorId     = _inventDim.InventColorId;
        pipProdJournalProdTmp.InventSizeId      = _inventDim.InventSizeId;
        pipProdJournalProdTmp.configId          = _inventDim.configId;
        pipProdJournalProdTmp.InventSiteId      = _inventDim.InventSiteId;
        pipProdJournalProdTmp.InventLocationId  = _inventDim.InventLocationId;
        pipProdJournalProdTmp.wMSLocationId     = _inventDim.wMSLocationId;
        pipProdJournalProdTmp.inventBatchId     = _inventDim.inventBatchId;
        pipProdJournalProdTmp.InventBatchExpDate = InventBatch::find(_inventDim.inventBatchId, _prodJournalProd.ItemId).expDate;
        pipProdJournalProdTmp.inventSerialId    = _inventDim.inventSerialId;

        pipProdJournalProdTmp.InventDimStr      = this.inventDimStr(_prodJournalProd.ItemId, _inventDim, DimListProductsAndSite);
    
        // get signature from RAF journal posting process and if not found, from the RAF update process
        PIPSigner reportFinishedSignee = PIPSIGSignatureLogHelper::pipSignee(_prodJournalTable.TableId, _prodJournalTable.RecId);
    
        if (!reportFinishedSignee)
        {
            SIGReportFinished sigReportFinished;

            select firstOnly TableId, RecId from sigReportFinished
                order by sigReportFinished.createdDateTime desc
                where sigReportFinished.ProdId  == prodId
                    && sigReportFinished.ItemId == itemId;
    
            reportFinishedSignee                = PIPSIGSignatureLogHelper::pipSignee(sigReportFinished.TableId, sigReportFinished.RecId);
        }
    
        pipProdJournalProdTmp.Signer            = reportFinishedSignee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdJournalBOMTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPProdJournalBOMTmp</c> table.
    /// </summary>
    /// <param name = "_prodJournalBOM">A record from <c>prodJournalBOM</c> table with source data.</param>
    /// <param name = "_inventDim">The record in <c>InventDim</c> table with the inventory dimensions for the <c>ProdJournalProd</c> table record.</param>
    /// <param name = "_prodJournalTable">The related record in the <c>ProdJournalTable</c> table.</param>
    protected void loadProdJournalBOMTmp(ProdJournalBOM _prodJournalBOM, InventDim _inventDim, ProdJournalTable _prodJournalTable)
    {
        pipProdJournalBOMTmp.JournalId                  = _prodJournalBOM.JournalId;
        pipProdJournalBOMTmp.LineNum                    = _prodJournalBOM.LineNum;
        pipProdJournalBOMTmp.TransDate                  = _prodJournalBOM.TransDate;
        pipProdJournalBOMTmp.InventTransId              = _prodJournalBOM.InventTransId;
        pipProdJournalBOMTmp.ItemId                     = _prodJournalBOM.ItemId;
        pipProdJournalBOMTmp.ItemName                   = _prodJournalBOM.itemName();
        pipProdJournalBOMTmp.BOMProposal                = _prodJournalBOM.BOMProposal;
        pipProdJournalBOMTmp.BOMConsump                 = _prodJournalBOM.BOMConsump;
        pipProdJournalBOMTmp.BOMUnitId                  = _prodJournalBOM.BOMUnitId;
        pipProdJournalBOMTmp.PdsCWInventProposal        = _prodJournalBOM.PdsCWInventProposal;
        pipProdJournalBOMTmp.PdsCWInventConsump         = _prodJournalBOM.PdsCWInventConsump;
        pipProdJournalBOMTmp.PdsCWUnitId                = _prodJournalBOM.pdsCWUnitId();

        pipProdJournalBOMTmp.InventSiteId               = _inventDim.InventSiteId;
        pipProdJournalBOMTmp.inventBatchId              = _inventDim.inventBatchId;
        pipProdJournalBOMTmp.InventBatchExpDate         = InventBatch::find(_inventDim.inventBatchId, _prodJournalBOM.ItemId).expDate;
        pipProdJournalBOMTmp.InventSerialId             = _inventDim.inventSerialId;

        pipProdJournalBOMTmp.Signer                     = PIPSIGSignatureLogHelper::pipSignee(_prodJournalTable.TableId, _prodJournalTable.RecId);
        
        pipProdJournalBOMTmp.InventDimStr               = this.inventDimStr(_prodJournalBOM.ItemId, _inventDim, DimListTrackingAndSite);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdJournalRouteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPProdJournalRouteTmp</c> table.
    /// </summary>
    /// <param name = "_prodJournalRoute">A record from <c>ProdJournalRoute</c> table with source data.</param>
    /// <param name = "_prodJournalTable">The related record in the <c>ProdJournalTable</c> table.</param>
    protected void loadProdJournalRouteTmp(ProdJournalRoute _prodJournalRoute, ProdJournalTable _prodJournalTable)
    {
        pipProdJournalRouteTmp.JournalId            = _prodJournalRoute.JournalId;
        pipProdJournalRouteTmp.OprNum               = _prodJournalRoute.OprNum;
        pipProdJournalRouteTmp.TransDate            = _prodJournalRoute.TransDate;
        pipProdJournalRouteTmp.OprPriority          = _prodJournalRoute.OprPriority;
        pipProdJournalRouteTmp.WrkCtrId             = _prodJournalRoute.WrkCtrId;
        pipProdJournalRouteTmp.WrkCtrTypeDisplay    = _prodJournalRoute.displayWrkCtrType();
        pipProdJournalRouteTmp.JobType              = _prodJournalRoute.JobType;
        pipProdJournalRouteTmp.Hours                = _prodJournalRoute.Hours;
        pipProdJournalRouteTmp.QtyGood              = _prodJournalRoute.QtyGood;
        pipProdJournalRouteTmp.PdsCWQtyGood         = _prodJournalRoute.PdsCWQtyGood;
        pipProdJournalRouteTmp.QtyError             = _prodJournalRoute.QtyError;
        pipProdJournalRouteTmp.PdsCWQtyError        = _prodJournalRoute.PdsCWQtyError;
        pipProdJournalRouteTmp.OprFinished          = _prodJournalRoute.OprFinished;
    
        pipProdJournalRouteTmp.JobId                = _prodJournalRoute.JobId;
        pipProdJournalRouteTmp.HcmPersonnelNumberId = _prodJournalRoute.workerPersonnelNumber();
        pipProdJournalRouteTmp.FromTime             = _prodJournalRoute.FromTime;
        pipProdJournalRouteTmp.ToTime               = _prodJournalRoute.ToTime;
        pipProdJournalRouteTmp.Hours                = _prodJournalRoute.Hours;
        pipProdJournalRouteTmp.JobFinished          = _prodJournalRoute.JobFinished;

        pipProdJournalRouteTmp.Signer               = PIPSIGSignatureLogHelper::pipSignee(_prodJournalTable.TableId, _prodJournalTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductionDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPProdDetailTmp</c> table.
    /// </summary>
    private void setProductionDetails()
    {
        this.loadProdDetailFromProdTable(prodTable);

        pipProdDetail.insert();
    
        producedItems.add(pipProdDetail.ItemId);
    
        PmfProdCoBy pmfProdCoBy;
        while select pmfProdCoBy
            where pmfProdCoBy.ProdId == prodId
        {
            this.loadProdDetailFromProdCoBy(pmfProdCoBy);

            pipProdDetail.insert();
    
            producedItems.add(pipProdDetail.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdDetailFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads data into a <c>PIPProdDetailTmp</c> table from the given record in the <c>ProdTable</c> table.
    /// </summary>
    /// <param name = "_prodTable">The record in the <c>ProdTable</c> table with the source data.</param>
    protected void loadProdDetailFromProdTable(ProdTable _prodTable)
    {
        pipProdDetail.BatchProdId       = _prodTable.PIPBatchProdId;
        pipProdDetail.ItemId            = _prodTable.ItemId;
        pipProdDetail.Name              = _prodTable.Name;
        pipProdDetail.ProductType       = InventTable::find(itemId).PmfProductType;
        pipProdDetail.Qty               = _prodTable.QtySched;
        pipProdDetail.Unit              = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
        pipProdDetail.PdsCWBatchSched   = _prodTable.PdsCWBatchSched;
        pipProdDetail.PdsCWUnitId       = _prodTable.pdsCWUnitId();
        pipProdDetail.PmfYieldPct       = _prodTable.PmfYieldPct;
        pipProdDetail.InventSiteId      = _prodTable.inventDim().InventSiteId;
        pipProdDetail.SchedStart        = _prodTable.SchedStart;
        pipProdDetail.DlvDate           = _prodTable.DlvDate;
        pipProdDetail.FinishedDate      = _prodTable.FinishedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdDetailFromProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads data into a <c>PIPProdDetailTmp</c> table from the given record in the <c>PmfProdCoBy</c> table.
    /// </summary>
    /// <param name = "_pmfProdCoBy">The record in the <c>PmfProdCoBy</c> table with the source data.</param>
    protected void loadProdDetailFromProdCoBy(PmfProdCoBy _pmfProdCoBy)
    {
        pipProdDetail.BatchProdId       = prodTable.PIPBatchProdId;
        pipProdDetail.ItemId            = _pmfProdCoBy.ItemId;
        pipProdDetail.Name              = _pmfProdCoBy.itemName();
        pipProdDetail.ProductType       = _pmfProdCoBy.ProductType;
        pipProdDetail.Qty               = _pmfProdCoBy.QtyCoByCalc;
        pipProdDetail.Unit              = _pmfProdCoBy.inventUnit();
        pipProdDetail.PdsCWBatchSched   = _pmfProdCoBy.PdsCWInventCalc;
        pipProdDetail.PdsCWUnitId       = _pmfProdCoBy.pdsCWUnitId();
        pipProdDetail.InventSiteId      = _pmfProdCoBy.inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductionTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPProdBatchesTmp</c> table and stores all tracking dimensions invloved in the production process.
    /// </summary>
    private void setProductionTrackingDimensions()
    {
        Query query = new Query();
        QueryBuildDataSource dsInventTransOrigin = query.addDataSource(tableNum(InventTransOrigin));
        dsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ItemId));
        dsInventTransOrigin.addSelectionField(fieldNum(InventTransOrigin, ReferenceCategory));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::value(InventTransType::Production));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceCategory)).value(SysQuery::value(InventTransType::ProdLine));
        dsInventTransOrigin.addRange(fieldNum(InventTransOrigin, ReferenceId)).value(SysQuery::value(prodId));

        QueryBuildDataSource dsInventDim = dsInventTransOrigin.addDataSource(tableNum(InventDim));
        dsInventDim.joinMode(JoinMode::InnerJoin);
        List trackingDimList = InventDim::dimTrackingDimFieldList();
        ListEnumerator trackingDimEnumerator = trackingDimList.getEnumerator();
        while (trackingDimEnumerator.moveNext())
        {
            dsInventDim.addSelectionField(trackingDimEnumerator.current());
            // Use the same field for all ranges added here so that these are OR'd together (e.g. InventBatchId <> '' OR InventSerialId <> '' OR ...)
            dsInventDim.addRange(fieldNum(InventDim, InventBatchId)).value(strFmt('(%1 <> "")', fieldId2Name(tableNum(InventDim), trackingDimEnumerator.current())));
        }

        QueryBuildDataSource dsInventTrans = dsInventDim.addDataSource(tableNum(InventTrans));
        dsInventTrans.joinMode(JoinMode::ExistsJoin);
        dsInventTrans.addLink(fieldNum(InventDim, InventDimId), fieldNum(InventTrans, InventDimId), dsInventDim.name());
        dsInventTrans.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin), dsInventTransOrigin.name());

        QueryRun qr = new QueryRun(query);
        while (qr.next())
        {
            InventDim inventDim = qr.get(tableNum(InventDim));

            if (inventDim.InventBatchId)
            {
                InventTransOrigin inventTransOrigin = qr.get(tableNum(InventTransOrigin));

                pipProdBatchesTmp.clear();

                this.loadProdBatchesTmp(inventDim, inventTransOrigin);
    
                pipProdBatchesTmp.insert();
            }

            trackingDimEnumerator = trackingDimList.getEnumerator();
            while (trackingDimEnumerator.moveNext())
            {
                FieldId trackingDimId = trackingDimEnumerator.current();
                if (inventDim.(trackingDimId))
                {
                    trackingDimensionValues.add([trackingDimId, inventDim.(trackingDimId)]);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdBatchesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPProdBatchesTmp</c> table.
    /// </summary>
    /// <param name = "_inventDim">The inventory dimensions.</param>
    /// <param name = "_inventTransOrigin">The record in <c>InventTransOrigin</c> for the production transaction.</param>
    protected void loadProdBatchesTmp(InventDim _inventDim, InventTransOrigin _inventTransOrigin)
    {
        pipProdBatchesTmp.ItemId              = _inventTransOrigin.ItemId;
        pipProdBatchesTmp.inventBatchId       = _inventDim.InventBatchId;
        pipProdBatchesTmp.ReferenceCategory   = _inventTransOrigin.ReferenceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQualityOrderDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPInventQualityOrderTmp</c> table.
    /// </summary>
    private void setQualityOrderDetails(boolean _includePostProductionQuality)
    {
        this.addQualityOrderProdJournalProd(_includePostProductionQuality);

        ProdJournalBOM prodJournalBom;

        while select prodJournalBom
            where prodJournalBom.ProdId == prodId
        {
            this.addQualityOrderItemId(prodJournalBom.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQualityOrderItemId</Name>
				<Source><![CDATA[
    private void addQualityOrderItemId(ItemId _itemId)
    {
        if (trackingDimensionValues.elements())
        {
            Query query = new Query();
            QueryBuildDataSource dsQuality = query.addDataSource(tableNum(InventQualityOrderTable));
            dsQuality.addRange(fieldNum(InventQualityOrderTable, ReferenceType)).value(SysQuery::valueNot(InventTestReferenceType::Production) + ',' + SysQuery::valueNot(InventTestReferenceType::RouteOpr) + ',' + SysQuery::valueNot(InventTestReferenceType::PmfProdCoBy));
            dsQuality.addRange(fieldNum(InventQualityOrderTable, ItemId)).value(_itemId);
            QueryBuildDataSource dsInventDim = dsQuality.addDataSource(tableNum(InventDim));
            dsInventDim.joinMode(JoinMode::ExistsJoin);
            dsInventDim.addLink(fieldNum(InventQualityOrderTable, InventDimId), fieldNum(InventDim, InventDimId));
            dsInventDim.addRange(fieldNum(InventDim, InventBatchId)).value(SysQuery::valueEmptyString());

            SetEnumerator dimValuesEnumerator = trackingDimensionValues.getEnumerator();
            while (dimValuesEnumerator.moveNext())
            {
                container fieldAndValue = dimValuesEnumerator.current();
                FieldId dimId;
                str value;
                [dimId, value] = fieldAndValue;
                dsInventDim.addRange(dimId).value(value);
            }

            QueryRun qr = new QueryRun(query);
            while (qr.next())
            {
                InventQualityOrderTable inventQualityOrderTable = qr.get(tableNum(InventQualityOrderTable));
                this.addQualityOrder(inventQualityOrderTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQualityOrderProdJournalProd</Name>
				<Source><![CDATA[
    private void addQualityOrderProdJournalProd(boolean _includePostProductionQuality)
    {
        ProdJournalProd prodJournalProd;

        while select prodJournalProd
            where prodJournalProd.ProdId == prodId
        {
            Query query = new Query();
            QueryBuildDataSource dsQuality = query.addDataSource(tableNum(InventQualityOrderTable));
            dsQuality.addRange(fieldNum(InventQualityOrderTable, ItemId)).value(prodJournalProd.ItemId);

            if (_includePostProductionQuality)
            {
                dsQuality.addRange(fieldnum(InventQualityOrderTable, InventRefId)).value(strFmt('((%1 == "%2") || (%3 == 0))',
                    fieldId2Name(tableNum(InventQualityOrderTable), fieldnum(InventQualityOrderTable, InventRefId)),
                    prodJournalProd.ProdId,
                    fieldId2Name(tableNum(InventQualityOrderTable), fieldnum(InventQualityOrderTable, ReferenceType))));
            }
            else
            {
                dsQuality.addRange(fieldNum(InventQualityOrderTable, InventRefId)).value(prodId);
            }

            QueryBuildDataSource dsInventDim = dsQuality.addDataSource(tableNum(InventDim));
            dsInventDim.joinMode(JoinMode::ExistsJoin);
            dsInventDim.addLink(fieldNum(InventQualityOrderTable, InventDimId), fieldNum(InventDim, InventDimId));

            this.addTrackingDimensionsToRange(dsInventDim, prodJournalProd.InventTransId);

            QueryRun qr = new QueryRun(query);
            while (qr.next())
            {
                InventQualityOrderTable inventQualityOrderTable = qr.get(tableNum(InventQualityOrderTable));
                this.addQualityOrder(inventQualityOrderTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrackingDimensionsToRange</Name>
				<Source><![CDATA[
    private void addTrackingDimensionsToRange(QueryBuildDataSource _dsInventDim, InventTransId _inventTransId)
    {
        boolean hasEmptySerialInRange = false;

        InventTransOrigin transOrigin;
        InventTrans inventTrans;
        InventDim inventDim;

        while select InventBatchId, InventSerialId from inventDim
            exists join inventTrans
                where inventTrans.InventDimId == inventDim.InventDimId
            exists join transOrigin
                where transOrigin.RecId == inventTrans.InventTransOrigin
                    && transOrigin.InventTransId == _inventTransId
        {
            _dsInventDim.addRange(fieldNum(InventDim, InventBatchId)).value(inventDim.InventBatchId);
        
            if (inventDim.InventSerialId)
            {
                if (!hasEmptySerialInRange)
                {
                    _dsInventDim.addRange(fieldNum(InventDim, InventSerialId)).value(SysQuery::valueEmptyString());
                    hasEmptySerialInRange = true;
                }

                _dsInventDim.addRange(fieldNum(InventDim, InventSerialId)).value(inventDim.InventSerialId);
            }
        }

        _dsInventDim.addRange(fieldNum(InventDim, InventBatchId)).value(SysQuery::valueEmptyString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQualityOrder</Name>
				<Source><![CDATA[
    private void addQualityOrder(InventQualityOrderTable _qualityOrderTable)
    {
        pipInventQualityOrderTmp.clear();

        this.initInventQualityOrderTmpFromQualityOrderTable(_qualityOrderTable);
    
        InventQualityOrderLine inventQualityOrderLine;
        while select inventQualityOrderLine
            where inventQualityOrderLine.QualityOrderId == _qualityOrderTable.QualityOrderId
        {
            this.loadInventQualityOrderTmp(inventQualityOrderLine);
                    
            if (DocuRef::exist(inventQualityOrderLine.dataAreaId, inventQualityOrderLine.TableId, inventQualityOrderLine.RecId))
            {
                DocuRef docuRef;
                while select docuRef
                    where docuRef.RefCompanyId  == inventQualityOrderLine.dataAreaId
                        && docuRef.RefRecId     == inventQualityOrderLine.recid
                        && docuRef.RefTableId   == inventQualityOrderLine.TableId
                {
                    pipInventQualityOrderTmp.DocuName   = docuRef.Name;
                    pipInventQualityOrderTmp.DocuTypeId = docuRef.TypeId;
                    pipInventQualityOrderTmp.DocuNotes  = docuRef.Notes;

                    pipInventQualityOrderTmp.insert();
                }
            }
            else
            {
                pipInventQualityOrderTmp.DocuName   = '';
                pipInventQualityOrderTmp.DocuTypeId = '';
                pipInventQualityOrderTmp.DocuNotes  = '';

                pipInventQualityOrderTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventQualityOrderTmpFromQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record in the <c>PIPInventQualityOrderTmp</c> table from a quality order.
    /// </summary>
    /// <param name = "_qualityOrderTable">The record in the <c>InventQualityOrderTable</c> table.</param>
    protected void initInventQualityOrderTmpFromQualityOrderTable(InventQualityOrderTable _qualityOrderTable)
    {
        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(_qualityOrderTable.InventTransId);
    
        if (producedItems.in(_qualityOrderTable.ItemId))
        {
            pipInventQualityOrderTmp.ProdItemType   = PIPProdItemType::Produced;
        }
        else if (ingredients.in(_qualityOrderTable.ItemId))
        {
            pipInventQualityOrderTmp.ProdItemType   = PIPProdItemType::Ingredient;
        }
    
        pipInventQualityOrderTmp.QualityOrderId     = _qualityOrderTable.QualityOrderId;
        pipInventQualityOrderTmp.ItemId             = _qualityOrderTable.ItemId;
        pipInventQualityOrderTmp.OrderStatus        = _qualityOrderTable.OrderStatus;
        pipInventQualityOrderTmp.PdsCWQty           = _qualityOrderTable.PdsCWQty;
        pipInventQualityOrderTmp.Qty                = _qualityOrderTable.Qty;
        pipInventQualityOrderTmp.ReferenceType      = _qualityOrderTable.ReferenceType;
        pipInventQualityOrderTmp.ReferenceTypeStr   = enum2Str(_qualityOrderTable.ReferenceType);
        pipInventQualityOrderTmp.TestGroupId        = _qualityOrderTable.TestGroupId;
        pipInventQualityOrderTmp.Signer             = PIPSIGSignatureLogHelper::pipSignee(_qualityOrderTable.TableId, _qualityOrderTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInventQualityOrderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPInventQualityOrderTmp</c> table.
    /// </summary>
    /// <param name = "_qualityOrderLine">The record in the <c>InventQualityOrderLine</c> table.</param>
    protected void loadInventQualityOrderTmp(InventQualityOrderLine _qualityOrderLine)
    {
        pipInventQualityOrderTmp.LowerLimit         = _qualityOrderLine.LowerLimit;
        pipInventQualityOrderTmp.PdsAttribValue     = _qualityOrderLine.PdsAttribValue;
        pipInventQualityOrderTmp.PdsBatchAttribId   = _qualityOrderLine.PdsBatchAttribId;
        pipInventQualityOrderTmp.StandardValue      = _qualityOrderLine.StandardValue;
        pipInventQualityOrderTmp.TestId             = _qualityOrderLine.TestId;
        pipInventQualityOrderTmp.TestResult         = _qualityOrderLine.TestResult;
        pipInventQualityOrderTmp.TestSequence       = _qualityOrderLine.TestSequence;
        pipInventQualityOrderTmp.UpperLimit         = _qualityOrderLine.UpperLimit;
        pipInventQualityOrderTmp.SkipTest           = _qualityOrderLine.PIPSkipTest;

        if (_qualityOrderLine.PdsOrderLineResult)
        {
            pipInventQualityOrderTmp.OrderLineResult = _qualityOrderLine.PdsBatchAttribOverride ? _qualityOrderLine.pdsBatchAttribValue(false, '') : _qualityOrderLine.pdsSetOrderLineResult(false, '');

            if (!pipInventQualityOrderTmp.OrderLineResult)
            {
                pipInventQualityOrderTmp.OrderLineResult = _qualityOrderLine.PdsOrderLineResult;
            }
        }
        else
        {
            pipInventQualityOrderTmp.OrderLineResult = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRouteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPProdRouteTmp</c> table.
    /// </summary>
    private void setRouteVersion()
    {
        RouteVersion                routeVersion;
        ProdRoute                   prodRoute;
        DocuRef                     docuRef;
    
        pipProdRouteTmp.clear();
    
        routeVersion = RouteVersion::findActive(prodTable.ItemId, prodTable.BOMDate, prodTable.QtySched, prodTable.inventDim());
    
        this.initProdRouteTmpFromRouteVersion(routeVersion);
    
        while select prodRoute
            where prodRoute.ProdId == prodId
        {
            this.loadProdRouteTmp(prodRoute);

            if (DocuRef::exist(prodRoute.dataAreaId, prodRoute.TableId, prodRoute.RecId))
            {
                while select docuRef
                    where docuRef.RefCompanyId  == prodRoute.dataAreaId
                        && docuRef.RefTableId   == prodRoute.TableId
                        && docuRef.RefRecId     == prodRoute.RecId
                {
                    pipProdRouteTmp.DocuName    = docuRef.Name;
                    pipProdRouteTmp.DocuTypeId  = docuRef.TypeId;
                    pipProdRouteTmp.DocuNotes   = docuRef.Notes;

                    pipProdRouteTmp.insert();
                }
            }
            else
            {
                pipProdRouteTmp.DocuName    = '';
                pipProdRouteTmp.DocuTypeId  = '';
                pipProdRouteTmp.DocuNotes   = '';

                pipProdRouteTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdRouteTmpFromRouteVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record in the <c>PIPProdRouteTmp</c> table from a record in the <c>RouteVersion</c> table.
    /// </summary>
    /// <param name = "_routeVersion">The record in the <c>RouteVersion</c> table.</param>
    protected void initProdRouteTmpFromRouteVersion(RouteVersion _routeVersion)
    {
        pipProdRouteTmp.RouteId                 = _routeVersion.RouteId;
        pipProdRouteTmp.Name                    = _routeVersion.Name;
        pipProdRouteTmp.RouteInventSiteId       = InventDim::find(_routeVersion.InventDimId).InventSiteId;
        pipProdRouteTmp.FromDate                = _routeVersion.FromDate;
        pipProdRouteTmp.ToDate                  = _routeVersion.ToDate;
        pipProdRouteTmp.FromQty                 = _routeVersion.FromQty;
        pipProdRouteTmp.Active                  = _routeVersion.Active;
        pipProdRouteTmp.Approved                = _routeVersion.Approved;
        pipProdRouteTmp.ApproverPersonnelNumber = _routeVersion.approverPersonnelNumber();
        pipProdRouteTmp.Signer                  = PIPSIGSignatureLogHelper::pipSignee(_routeVersion.TableId, _routeVersion.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProdRouteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPProdRouteTmp</c> table.
    /// </summary>
    /// <param name = "_prodRoute">A record in the <c>ProdRoute</c> table with the source data.</param>
    protected void loadProdRouteTmp(ProdRoute _prodRoute)
    {
        WrkCtrActivityRequirement wrkCtrActivityRequirement = WrkCtrActivityRequirement::pipFindByActivityRequirementSet(_prodRoute.activityRequirementSet().RecId);
    
        pipProdRouteTmp.OprNum              = _prodRoute.OprNum;
        pipProdRouteTmp.OprId               = _prodRoute.OprId;
        pipProdRouteTmp.CalcProc            = _prodRoute.CalcProc;
        pipProdRouteTmp.CalcQty             = _prodRoute.CalcQty;
        pipProdRouteTmp.OprNumNext          = _prodRoute.OprNumNext;
        pipProdRouteTmp.RelationshipType    = wrkCtrActivityRequirement.RelationshipType;
        pipProdRouteTmp.WrkCtrTypeDisplay   = enum2str(wrkCtrActivityRequirement.RelationshipType);
        pipProdRouteTmp.WrkCtrIdDisplay     = wrkCtrActivityRequirement.RecId ? wrkCtrActivityRequirement.requirementEdit() : '';
        pipProdRouteTmp.Notes               = DocuRef::find(_prodRoute.dataAreaId, _prodRoute.RecId).Notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPInventTransTmp</c> table.
    /// </summary>
    private void setTransactions()
    {
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventDim           inventDim;
    
        while select inventTrans
            join inventTransOrigin
                where inventTransOrigin.RecId                   == inventTrans.InventTransOrigin
            join inventDim
                where inventTrans.inventDimId                   == inventDim.inventDimId
                    && inventTransOrigin.ReferenceId            == prodId
                    && (inventTransOrigin.ReferenceCategory     == InventTransType::Production
                        || inventTransOrigin.ReferenceCategory  == InventTransType::PmfProdCoBy
                        || inventTransOrigin.ReferenceCategory  == InventTransType::ProdLine)
        {
            pipInventTransTmp.clear();

            this.loadInventTransTmp(inventTrans, inventDim, inventTransOrigin);
    
            pipInventTransTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInventTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPInventTransTmp</c> table.
    /// </summary>
    /// <param name = "_inventTrans">A record in the <c>InventTrans</c> table.</param>
    /// <param name = "_inventDim">The record in the <c>InventDim</c> table with the inventory dimensions for the <c>InventTrans</c> table record.</param>
    /// <param name = "_inventTransOrigin">The related record in the <c>InventTransOrigin</c> table.</param>
    protected void loadInventTransTmp(InventTrans _inventTrans, InventDim _inventDim, InventTransOrigin _inventTransOrigin)
    {
        pipInventTransTmp.ItemId            = _inventTrans.ItemId;
        pipInventTransTmp.DateFinancial     = _inventTrans.DateFinancial;
        pipInventTransTmp.DatePhysical      = _inventTrans.DatePhysical;
        pipInventTransTmp.StatusIssue       = _inventTrans.StatusIssue;
        pipInventTransTmp.StatusReceipt     = _inventTrans.StatusReceipt;
        pipInventTransTmp.Qty               = _inventTrans.Qty;
        pipInventTransTmp.PdsCWQty          = _inventTrans.PdsCWQty;
        pipInventTransTmp.CostAmountValue   = _inventTrans.costValue();
        pipInventTransTmp.ReferenceCategory = enum2str(_inventTransOrigin.ReferenceCategory);
        pipInventTransTmp.ReferenceId       = _inventTransOrigin.ReferenceId;
        pipInventTransTmp.InventSiteId      = _inventDim.InventSiteId;
        pipInventTransTmp.InventColorId     = _inventDim.InventColorId;
        pipInventTransTmp.configId          = _inventDim.ConfigId;
        pipInventTransTmp.InventSizeId      = _inventDim.InventSizeId;
        pipInventTransTmp.InventLocationId  = _inventDim.InventLocationId;
        pipInventTransTmp.wMSLocationId     = _inventDim.WMSLocationId;
        pipInventTransTmp.inventBatchId     = _inventDim.InventBatchId;
        pipInventTransTmp.InventBatchExpDate = InventBatch::find(_inventDim.inventBatchId, _inventTrans.ItemId).expDate;
        pipInventTransTmp.inventSerialId    = _inventDim.InventSerialId;

        pipInventTransTmp.InventDimStr      = this.inventDimStr(_inventTrans.ItemId, _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendorBatchDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts records into the <c>PIPVendBatchDetailsTmp</c> table.
    /// </summary>
    private void setVendorBatchDetails()
    {
        while select pipProdBatchesTmp
            where pipProdBatchesTmp.ReferenceCategory == InventTransType::ProdLine
        {
            pipVendBatchDetailsTmp.clear();

            this.loadVendBatchDetailsTmp(pipProdBatchesTmp);
    
            pipVendBatchDetailsTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadVendBatchDetailsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads a record in the <c>PIPVendBatchDetailsTmp</c> record.
    /// </summary>
    /// <param name = "_prodBatchesTmp">A record in the <c>PIPProdBatchesTmp</c> table for a batch that will be on the report.</param>
    protected void loadVendBatchDetailsTmp(PIPProdBatchesTmp _prodBatchesTmp)
    {
        InventBatch inventBatch = InventBatch::find(pipProdBatchesTmp.inventBatchId, pipProdBatchesTmp.ItemId);
    
        pipVendBatchDetailsTmp.ItemId           = inventBatch.ItemId;
        pipVendBatchDetailsTmp.ProductName      = InventTable::find(inventBatch.ItemId).itemName();
        pipVendBatchDetailsTmp.InventBatchId    = inventBatch.InventBatchId;
        pipVendBatchDetailsTmp.prodDate         = inventBatch.ProdDate;
        pipVendBatchDetailsTmp.expDate          = inventBatch.ExpDate;
        pipVendBatchDetailsTmp.VendBatchDate    = inventBatch.PdsVendBatchDate;
        pipVendBatchDetailsTmp.UseVendBatchDate = inventBatch.PdsUseVendBatchDate;
        pipVendBatchDetailsTmp.VendExpiryDate   = inventBatch.PdsVendExpiryDate;
        pipVendBatchDetailsTmp.UseVendBatchExp  = inventBatch.PdsUseVendBatchExp;
        pipVendBatchDetailsTmp.CountryOfOrigin1 = inventBatch.PdsCountryOfOrigin1;
        pipVendBatchDetailsTmp.CountryOfOrigin2 = inventBatch.PdsCountryOfOrigin2;
        pipVendBatchDetailsTmp.VendBatchId      = inventBatch.PdsVendBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimStr</Name>
				<Source><![CDATA[
    private str inventDimStr(ItemId _itemId, InventDim _inventDim, List _dimFields = InventDim::dimFieldsList(), str _fieldSeparator = ',', str _nameValueSeparator = '=')
    {
        ListEnumerator  enumerator  = _dimFields ? _dimFields.getEnumerator() : null;
        str             text;
        FieldId         inventDimFieldId;

        if (enumerator)
        {
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            _inventDim.checkInvalidFieldAccess(false);

            while (enumerator.moveNext())
            {
                inventDimFieldId = enumerator.current();
                if (_inventDim.(inventDimFieldId) && inventDimParm.isFieldIdEnabled(inventDimFieldId))
                {
                    text = this.addText(text, new DictField(tableNum(InventDim),inventDimFieldId).label(), _inventDim.dimValue2str(inventDimFieldId), _fieldSeparator, _nameValueSeparator);

                    if (inventDimFieldId == fieldNum(InventDim, inventBatchId) && showBatchExpDate)
                    {
                        InventBatch inventBatch = InventBatch::find(_inventDim.inventBatchId, _itemId);

                        if (inventBatch.expDate)
                        {
                            text = this.addText(text, '@MCR30853', 
                                date2Str(inventBatch.expDate, 123, DateDay::Digits1or2, DateSeparator::Hyphen, DateMonth::Digits1or2, DateSeparator::Hyphen, DateYear::Digits4),
                                _fieldSeparator, _nameValueSeparator);
                        }
                    }
                }
            }
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addText</Name>
				<Source><![CDATA[
    private str addText(str _text, str _label, str _value, str _fieldSeparator, str _nameValueSeparator)
    {
        return (_text ? _text + _fieldSeparator : '') + _label + _nameValueSeparator + _value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>