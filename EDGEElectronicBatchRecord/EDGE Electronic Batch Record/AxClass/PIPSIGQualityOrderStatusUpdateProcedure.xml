<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPSIGQualityOrderStatusUpdateProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPSIGQualityOrderStatusUpdateProcedure</c> handles the quality order validation/reopening process.
/// </summary>
class PIPSIGQualityOrderStatusUpdateProcedure extends PIPSIGProcedureProviderBase
{
    PIPSIGQualityOrderStatusUpdateProvider  qualityOrderStatusUpdateProvider;
    InventQualityOrderTable                 inventQualityOrderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>captureDelayedSignature</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Captures a signature that was initiated prior to updating the status on the specified quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    ///     The quality order to be signed for.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The specified quality order does not match the quality order that was used when initiating the signature process prior to status update.
    /// </exception>
    public void captureDelayedSignature(InventQualityOrderTable _inventQualityOrderTable)
    {
        container       fields;
        ListEnumerator  listEnumerator;
        SIGBaseDocument doc;

        if (inventQualityOrderTable.RecId != _inventQualityOrderTable.RecId)
        {
            throw error("@PIP489");
        }

        inventQualityOrderTable = _inventQualityOrderTable;

        fields          = SIGBaseDocument::buildFieldList(DatabaseLogType::Update, inventQualityOrderTable, inventQualityOrderTable.orig());
        listEnumerator  = docList.getEnumerator();

        while (listEnumerator.moveNext())
        {
            doc = listEnumerator.current();
            if (doc.getRefTableId() == inventQualityOrderTable.TableId && doc.getRefRecId() == inventQualityOrderTable.RecId)
            {
                doc.initFieldList(DatabaseLogType::Update, fields, inventQualityOrderTable.TableId, inventQualityOrderTable.RecId);
                doc.setSigneeId(signeeId);
            }
        }

        signed = qualityOrderStatusUpdateProvider.signDataList(docList, qualityOrderStatusUpdateProvider.getValidCertificate(signeeId));
        if (signed)
        {
            SIGBaseDocument::addListToCache(docList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of the signature controlled fields for this procedure.
    /// </summary>
    /// <returns>
    ///    A list of the fields that are required for this quality order status update procedure.
    /// </returns>
    public container getAuditFieldList()
    {
        return [
                [DatabaseLogType::Update, tablenum(InventQualityOrderTable), fieldNum(InventQualityOrderTable, OrderStatus)],
                [DatabaseLogType::Update, tablenum(InventQualityOrderTable), fieldNum(InventQualityOrderTable, ValidatedByWorker)]
               ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSigningProvider</Name>
				<Source><![CDATA[
    protected SIGSigningProvider getSigningProvider()
    {
        if (!qualityOrderStatusUpdateProvider)
        {
            qualityOrderStatusUpdateProvider = super();
        }
    
        return qualityOrderStatusUpdateProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQualityOrder</Name>
				<Source><![CDATA[
    public InventQualityOrderTable parmQualityOrder(InventQualityOrderTable _inventQualityOrderTable = null)
    {
        if (!prmisDefault(_inventQualityOrderTable))
        {
            inventQualityOrderTable = _inventQualityOrderTable;
    
            docList = new List(Types::Class);

            if (this.signatureRequired())
            {
                docList.addEnd(SIGBaseDocument::newDatabaseLog(DatabaseLogType::Update,inventQualityOrderTable));
            }
        }
    
        return inventQualityOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preferredProviderId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the class ID of the preferred signature provider.
    /// </summary>
    /// <returns>
    ///     The class ID of the preferred signature provider.
    /// </returns>
    protected ClassId preferredProviderId()
    {
        return classNum(PIPSIGQualityOrderStatusUpdateProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAllowed</Name>
				<Source><![CDATA[
    public boolean setupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureRequired</Name>
				<Source><![CDATA[
    public boolean signatureRequired()
    {
        boolean ret;
        ClassId classId = classidget(this);
    
        ret = SIGProcSetup::classIdEnabled(classId);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPSIGQualityOrderStatusUpdateProcedure construct()
    {
        return new PIPSIGQualityOrderStatusUpdateProcedure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@PIP428";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of this class by using a <c>InventQualityOrderTable</c> record.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    ///    The record to use to create the instance.
    /// </param>
    /// <returns>
    ///    The new instance.
    /// </returns>
    public static PIPSIGQualityOrderStatusUpdateProcedure newQualityOrder(InventQualityOrderTable _inventQualityOrderTable)
    {
        PIPSIGQualityOrderStatusUpdateProcedure procedure = PIPSIGQualityOrderStatusUpdateProcedure::construct();
    
        procedure.parmQualityOrder(_inventQualityOrderTable);
    
        return procedure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsDelaySigned</Name>
				<Source><![CDATA[
    public boolean pipIsDelaySigned()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>