<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdParameters_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ProdParameters))]
public final class PIPProdParameters_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipNumRefBatchProdId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number sequence of the batch production ID.
    /// </summary>
    /// <returns>
    /// A number sequence reference of the batch production ID.
    /// </returns>
    public static NumberSequenceReference pipNumRefBatchProdId()
    {
        return NumberSeqReference::findReference(extendedTypeNum(PIPBatchProdId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preModifiedFieldValueHandler</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(ProdParameters), tableMethodStr(ProdParameters, modifiedFieldValue))]
    /// <summary>
    ///     Executes logic in the modified event for the <c>ProdParameters</c> <see cref="modifiedFieldValue method"/> method.
    /// </summary>
    /// <param name="_args">
    ///     The arguments passed by the event hanlder.
    /// </param>
    public static void preModifiedFieldValueHandler(XppPrePostArgs _args)
    {
        ProdParameters  prodParameters  = _args.getThis();
        FieldName       fieldName       = _args.getArg('_fieldName');
    
        switch (fieldName)
        {
            case fieldId2name(tableNum(ProdParameters), fieldNum(ProdParameters, PIPUseEBR)):
    
                if (prodParameters.PIPUseEBR && Box::okCancel(strFmtLB("@PIP535"), DialogButton::Cancel) != DialogButton::Ok)
                {
                    prodParameters.PIPUseEBR = false;
                }
                else if (!prodParameters.PIPUseEBR && Box::okCancel(strFmtLB("@PIP536"), DialogButton::Cancel) == DialogButton::Cancel)
                {
                    prodParameters.PIPUseEBR = true;
                }
    
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdParameters_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when the <c>onUpdated</c> event is triggered on the <c>ProdParameters</c> table.
    /// </summary>
    /// <param name="sender">The sending record buffer, which should be a record in the <c>ProdParameters</c> table.</param>
    /// <param name="e">The envent arguments.</param>
    [DataEventHandler(tableStr(ProdParameters), DataEventType::Updated)]
    public static void ProdParameters_onUpdated(Common sender, DataEventArgs e)
    {
        ProdParameters::checkUpdateBOMParameters(sender as ProdParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdParameters_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes when the <c>onInserted</c> event is triggered on the <c>ProdParameters</c> table.
    /// </summary>
    /// <param name="sender">The sending record buffer, which should be a record in the <c>ProdParameters</c> table.</param>
    /// <param name="e">The envent arguments.</param>
    [DataEventHandler(tableStr(ProdParameters), DataEventType::Inserted)]
    public static void ProdParameters_onInserted(Common sender, DataEventArgs e)
    {
        ProdParameters::checkUpdateBOMParameters(sender as ProdParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateBOMParameters</Name>
				<Source><![CDATA[
    private static void checkUpdateBOMParameters(ProdParameters _prodParameters)
    {
        if (_prodParameters.PIPUseEBR)
        {
            ttsBegin;

            BOMParameters bomParameters = BOMParameters::find(true);
            if (!bomParameters.BlockEditing)
            {
                bomParameters.BlockEditing = true;
                bomParameters.update();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>