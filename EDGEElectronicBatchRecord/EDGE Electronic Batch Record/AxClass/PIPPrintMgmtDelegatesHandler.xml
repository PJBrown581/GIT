<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPPrintMgmtDelegatesHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPPrintMgmtDelegatesHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructPrintMgmtHierarchyDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the constructPrintMgmtHierarchyDelegate method of the <c>PrintMgmtDelegates</c> class.
    /// </summary>
    /// <param name = "_nodeType"><c>PrintMgmtHierarchyType</c> value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDelegates), delegatestr(PrintMgmtDelegates, constructPrintMgmtHierarchyDelegate))]
    public static void constructPrintMgmtHierarchyDelegate(PrintMgmtHierarchyType _hierarchyType, EventHandlerResult _result)
    {
        // if another event handler has constructued the node, pass it up
        if (_result.result() != null)
            return;

        _result.result(PIPPrintMgmtDelegatesHandler::constructPrintMgmtHierarchy(_hierarchyType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintMgmtHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>PrintMgmtHierarchy</c> object given a <c>PrintMgmtHierarchyType</c> value.
    /// </summary>
    /// <param name = "_hierarchyType">The <c>PrintMgmtHierarchyType</c> value.</param>
    /// <returns>The <c>PrintMgmtHierarchy</c> object.</returns>
    private static PrintMgmtHierarchy constructPrintMgmtHierarchy(PrintMgmtHierarchyType _hierarchyType)
    {
        switch (_hierarchyType)
        {
            case PrintMgmtHierarchyType::PIPProd:
                return new PIPPrintMgmtHierarchy_Prod();

            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintMgmtNodeDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the constructPrintMgmtNodeDelegate method of the <c>PrintMgmtDelegates</c> class.
    /// </summary>
    /// <param name = "_nodeType"><c>PrintMgmtNodeType</c> value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDelegates), delegatestr(PrintMgmtDelegates, constructPrintMgmtNodeDelegate))]
    public static void constructPrintMgmtNodeDelegateHandler(PrintMgmtNodeType _nodeType, EventHandlerResult _result)
    {
        // if another event handler has constructued the node, pass it up
        if (_result.result() != null)
            return;

        _result.result(PIPPrintMgmtDelegatesHandler::constructPrintMgmtNode(_nodeType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPrintMgmtNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>PrintMgmtNode</c> object given a <c>PrintMgmtNodeType</c> value.
    /// </summary>
    /// <param name = "_nodeType">The <c>PrintMgmtNodeType</c> value.</param>
    /// <returns>The <c>PrintMgmtNode</c> object.</returns>
    private static PrintMgmtNode constructPrintMgmtNode(PrintMgmtNodeType _nodeType)
    {
        switch (_nodeType)
        {
            case PrintMgmtNodeType::PIPProd:
                return new PIPPrintMgmtNode_Prod();

            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRangeFieldsDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getQueryRangeFieldsDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getQueryRangeFieldsDelegate))]
    public static void getQueryRangeFieldsDelegateHandler(PrintMgmtDocumentType _docType, EventHandlerResult _result)
    {
        //if another delegate handler has already set a value, pass it up
        List resultList = _result.result();
        if (resultList != null && resultList.elements())
            return;

        _result.result(PIPPrintMgmtDelegatesHandler::getQueryRangeFields(_docType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRangeFields</Name>
				<Source><![CDATA[
    private static List getQueryRangeFields(PrintMgmtDocumentType _docType)
    {
        List fields = new List(Types::Integer);

        switch (_docType)
        {
            case PrintMgmtDocumentType::PIPBatchProdRecord:
                if (#PIPEBREnabled)
                {
                    fields.addEnd(fieldNum(ProdTable, PIPBatchProdId));
                }
                break;
        }

        return fields.elements() ? fields : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryTableIdDelegateHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate handler for the getQueryTableIdDelegate method of the <c>PrintMgmtDocType</c> class.
    /// </summary>
    /// <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    /// <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getQueryTableIdDelegate))]
    public static void getQueryTableIdDelegateHandler(PrintMgmtDocumentType _docType, EventHandlerResult _result)

    {
        //if another delegate handler has already set a value, pass it up
        if (_result.result() > 0)
            return;
        
        _result.result(PIPPrintMgmtDelegatesHandler::getQueryTableId(_docType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table that is used to define queries for the document type.
    /// </summary>
    /// <returns>
    ///    The table ID of the table this document type queries at runtime.
    /// </returns>
    private static int getQueryTableId(PrintMgmtDocumentType _docType)
    {
        int tableId = -1;

        switch (_docType)
        {
            case PrintMgmtDocumentType::PIPBatchProdRecord:
                tableId = tableNum(ProdTable);
                break;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>OnDetermineReportName</Name>
				<Source><![CDATA[
    static delegate void OnDetermineReportName(PrintMgmtDocumentType _docType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultReportFormatDelegateHandler</Name>
				<Source><![CDATA[
    // <summary>
    // Delegate handler for the getDefaultReportFormatDelegate method of the <c>PrintMgmtDocType</c> class.
    // </summary>
    // <param name = "_docType"><c>PrintMgmtDocumentType</c> enumeration value.</param>
    // <param name = "_result">The <c>EventHandlerResult</c> object.</param>
    [SubscribesTo(classstr(PrintMgmtDocType), delegatestr(PrintMgmtDocType, getDefaultReportFormatDelegate))]
    public static void getDefaultReportFormatDelegateHandler(PrintMgmtDocumentType _docType, EventHandlerResult _result)
    {
        //if another delegate handler has already set a value, pass it up
        if (_result.result() != null)
            return;

        switch (_docType)
        {
            case PrintMgmtDocumentType::PIPBatchProdRecord:
                EventHandlerResult delegateResult = new EventHandlerResult();
                PIPPrintMgmtDelegatesHandler::OnDetermineReportName(_docType, delegateResult);
                if (delegateResult.result())
                {
                    _result.result(delegateResult.result());
                }
                else
                {
                    _result.result(ProdParameters::find().PIPUseUpdatedEBRReport ? ssrsReportStr(PIPBatchProdReport, ReportV2) : ssrsReportStr(PIPBatchProdReport, Report));
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>