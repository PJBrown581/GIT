<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdJournalCreateProd</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPProdJournalCreateProd</c> class creates a Report as finished journal.
///     with lines for all produced items.
/// </summary>
class PIPProdJournalCreateProd
{
    ProdMultiReportFinished     prodMultiReportFinished;
    ProdParmReportFinished      prodParmReportFinished;
    ProdJournalTable            prodJournalTable;
    ProdTable                   prodTable;
    ParmId                      parmId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method comtains the code to create a new Report as finished production journal.
    /// </summary>
    public void createJournal()
    {
        ProdJournalCreateProd   prodJournalCreateProd;
    
        ttsBegin;
    
        this.createLineMainItem();
        this.createLinesCoByProducts();
    
        if (prodParmReportFinished)
        {
            prodJournalCreateProd = ProdJournalCreateProd::newReportFinished(prodParmReportFinished,
                                                                                prodParmReportFinished.QtyGood,
                                                                                prodParmReportFinished.QtyError);
    
            prodJournalCreateProd.runOperation();
    
            prodJournalTable = prodJournalCreateProd.usedProdJournalTable();
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineMainItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a journal line for the main item.
    /// </summary>
    public void createLineMainItem()
    {
        parmId = RunBaseMultiParm::getSysParmId();
    
        prodParmReportFinished.initParmDefault();
        prodParmReportFinished.initReportFinishProd();
        prodParmReportFinished.initFromProdTable(prodTable);
        prodParmReportFinished.LineNum              = this.lastLineNum() + 1;
        prodParmReportFinished.ParmId               = parmId;
        prodParmReportFinished.ErrorCause           = ProdErrorCause::None;
        prodParmReportFinished.ReportFinishProd     = NoYes::Yes;
        prodParmReportFinished.TransDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    
        prodParmReportFinished.ProdJournalNameId    = ProdJournalName::standardJournalName(ProdJournalType::ReportFinished, prodTable.ProdId);
    
        if (!#PmfEnabled || prodTable.inventTable().PmfProductType != PmfProductType::MainItem)
        {
            prodParmReportFinished.QtyGood  = ProdUpdReportFinished::proposalQtyGood(prodTable.ProdId);
            prodParmReportFinished.QtyError = ProdUpdReportFinished::proposalQtyError(prodTable.ProdId);
    
            if (PdsGlobal::pdsIsCWItem(prodTable.ItemId))
            {
                prodParmReportFinished.PdsCWBatchGood = ProdUpdReportFinished::pdsCWProposalQtyGood(prodTable.ProdId);
                prodParmReportFinished.PdsCWBatchErr  = ProdUpdReportFinished::pdsCWProposalQtyError(prodTable.ProdId);
            }
        }
        else
        {
            prodParmReportFinished.QtyGood  = 0;
            prodParmReportFinished.QtyError = 0;
    
            if (PdsGlobal::pdsIsCWItem(prodTable.ItemId))
            {
                prodParmReportFinished.PdsCWBatchGood = 0;
                prodParmReportFinished.PdsCWBatchErr  = 0;
            }
        }
    
        prodParmReportFinished.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesCoByProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates journal lines for co-products/ by-products.
    /// </summary>
    public void createLinesCoByProducts()
    {
        ProdParmReportFinished  coByParmBuffer;
        PmfProdCoBy             prodCoBy;
    
        coByParmBuffer.LineNum = this.lastLineNum();
    
        RecordInsertList coByParmInserter = new RecordInsertList(tableNum(ProdParmReportFinished));
        while select prodCoBy
            where prodCoBy.ProdId == prodTable.ProdId
        {
            coByParmBuffer.LineNum++;
    
            coByParmBuffer.initParmDefault();
            coByParmBuffer.initReportFinishProd();
            coByParmBuffer.pmfInitFromProdCoBy(prodCoBy);
            coByParmBuffer.ErrorCause       = ProdErrorCause::None;
            coByParmBuffer.ReportFinishProd = NoYes::No;
            coByParmBuffer.EndJob           = prodParmReportFinished.EndJob;
            coByParmBuffer.ParmId           = parmId;
            coByParmBuffer.TransDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    
            coByParmInserter.add(coByParmBuffer);
        }
        coByParmInserter.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmReportFinished::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdTable</Name>
				<Source><![CDATA[
    public ProdTable parmProdTable(ProdTable _prodTable = prodTable)
    {
        if (!prmisDefault(_prodTable))
        {
            prodTable.data(_prodTable);
        }
    
        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the RAF production journal record.
    /// </summary>
    /// <returns>
    ///     A record from the <c>ProdJournalTable</c> table.
    /// </returns>
    public ProdJournalTable prodJournalTable()
    {
        return prodJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    server static PIPProdJournalCreateProd construct()
    {
        return new PIPProdJournalCreateProd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProdTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>PIPProdJournalCreateProd</c> class.
    /// </summary>
    /// <param name="_prodTable">
    ///    The <c>ProdTable</c> record to be used for journal creation.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PIPProdJournalCreateProd</c> class.
    /// </returns>
    public static PIPProdJournalCreateProd newFromProdTable(ProdTable _prodTable)
    {
        PIPProdJournalCreateProd pipProdJournalCreateProd = PIPProdJournalCreateProd::construct();
    
        pipProdJournalCreateProd.parmProdTable(_prodTable);
    
        return pipProdJournalCreateProd;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>