<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPBatchProdReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPBatchProdReportController</c> class is the controller class for the <c>PIPBatchProdReport</c> report.
/// </summary>
class PIPBatchProdReportController extends SrsPrintMgmtController
{
    PIPBatchProdReportContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        contract.parmIsCWEnabled(#PdsCatchWeightEnabled);
        contract.parmShowBatchExp(ProdParameters::find().PIPBPRReportBatchExp);
        contract.parmShowEmptyNotes(ProdParameters::find().PIPSuppressWorkInstructionsEBRIfBlank);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        ProdTable prodTable = this.parmArgs().record();
        
        if (prodTable)
        {
            contract = this.parmReportContract().parmRdpContract() as PIPBatchProdReportContract;
            contract.parmBatchProdId(prodTable.PIPBatchProdId);

            List batchProdList = new List(Types::String);
            batchProdList.addEnd(prodTable.PIPBatchProdId);
            
            contract.parmBatchProdIdList(batchProdList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        SRSPrintDestinationSettings srsPrintDestSettings = this.parmReportContract().parmPrintSettings();
        
        contract            = this.parmReportContract().parmRdpContract() as PIPBatchProdReportContract;
        printMgmtReportRun  = PrintMgmtReportRun::construct(PrintMgmtHierarchyType::PIPProd, PrintMgmtNodeType::PIPProd, PrintMgmtDocumentType::PIPBatchProdRecord);
        
        printMgmtReportRun.parmReportRunController(this);
        
        printMgmtReportRun.load(this.parmArgs().record(), this.parmArgs().record(), currentUserLanguage());
    
        if (!contract.parmUsePrintManagement())
        {
            this.setSettingDetail(srsPrintDestSettings);
        }

        if (printMgmtReportRun.more())
        {
            this.outputReports();
        }
        else
        {
            warning("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the print destination settings on the report.
    /// </summary>
    /// <param name="_printSettings">
    ///     The print destination settings that need to be used for the report.
    /// </param>
    /// <param name="_documentKeyValue">
    ///     A human readable value that uniquely identifies the document to be printed.
    /// </param>
    public void setSettingDetail(SRSPrintDestinationSettings _printSettings, str _documentKeyValue = '')
    {
        PrintMgmtPrintSettingDetail printSettingDetail      = new PrintMgmtPrintSettingDetail();
        PrintMgmtReportFormat       printMgmtReportFormat   = PrintMgmtReportFormat::findSystem(PrintMgmtDocumentType::PIPBatchProdRecord);
        
        contract = this.parmReportContract().parmRdpContract() as PIPBatchProdReportContract;
        if (contract.parmUsePrintManagement())
        {
            printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
        }
        else
        {
            printSettingDetail.parmReportFormatName(this.parmReportContract().parmReportName());
        }
        printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);
        
        // Since this will be reported to the screen, one copy should be shown
        printSettingDetail.parmNumberOfCopies(1);
        
        printSettingDetail.parmPrintJobSettings(_printSettings);
        
        printMgmtReportRun.loadSettingDetail(printSettingDetail, _documentKeyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>OnDetermineReportName</Name>
				<Source><![CDATA[
    static delegate void OnDetermineReportName(Args _args, EventHandlerResult _result) { }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // *************************************************************************************************************************
    // ** IMPORTANT! Any changes made to the Batch Production Record report design MUST be made as well to the version of the **
    // ** report in the EDGE EBR Dispensing model. Please see class PIPBatchReportReportHandler in that model for details.    **
    // *************************************************************************************************************************

    public static void main(Args _args)
    {
        PIPBatchProdReportController controller = new PIPBatchProdReportController();
    
        controller.parmArgs(_args);
        EventHandlerResult reportNameResult = new EventHandlerResult();
        PIPBatchProdReportController::OnDetermineReportName(_args, reportNameResult);
        if (reportNameResult.hasResult())
        {
            controller.parmReportName(reportNameResult.result());
        }
        else
        {
            controller.parmReportName(ProdParameters::find().PIPUseUpdatedEBRReport ? ssrsReportStr(PIPBatchProdReport, ReportV2) : ssrsReportStr(PIPBatchProdReport, Report));
        }
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    public void runReport()
    {
        List IdList = contract.parmBatchProdIdList();
        ListEnumerator idListEnumerator = IdList.getEnumerator();

        if (ProdParameters::find().PIPAllowEBRMulitSelect)
        {
            while (idListEnumerator.moveNext())
            {
                contract.parmBatchProdId(idListEnumerator.current());

                super();
            }
        }
        else
        {
            IdList.addEnd(contract.parmBatchProdId());
            contract.parmBatchProdIdList(IdList);
            
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>