<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIIntegrationsGlobalWizardFileExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GGIIntegrationsGlobalWizardFileExport extends RunBase 
{     
    const str caption = "Global Wizard Export";
    

    DialogField fieldSalesOrder;
    DialogField fieldCustAccount;
    DialogField fieldProducts;
    DialogField fieldConsignee;

    SalesId      salesId;
    SalesTable   salesTable;
    SalesLine    salesLine;
    SalesOrderHeaderV2Entity    salesOrderHeaderV2Entity;
    SalesOrderLineV2Entity      salesOrderLineV2Entity;
    EcoResProductSpecificUnitOfMeasureConversionEntity    productSpecificUnitOfMeasureConversionEntity;
    AccountNum   custAccount;
    CustPurchaseOrder purchOrderFormNum;
    NoYes        productsEnabled;
    NoYes        consigneeEnabled;
    NoYes        isHaz;
    Name         commodity;
    Notes        productDescripition;
    
    str          fileName,fileContent;


    GGIIntegrationsGlobalWizardConfiguration config;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesId _salesId)
    {
        salesTable = SalesTable::find(_salesId);
        this.parmSalesId(salesTable.SalesId);
        this.parmPurchOrderFormNum(salesTable.PurchOrderFormNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
    SalesId parmSalesId(SalesId _salesId = salesId)
    {
        salesId = _salesId;
        return salesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchOrderFormNum</Name>
				<Source><![CDATA[
    CustPurchaseOrder parmPurchOrderFormNum(CustPurchaseOrder _purchOrderFormNum = purchOrderFormNum)
    {
        purchOrderFormNum = _purchOrderFormNum;
        return purchOrderFormNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dialog</Name>
				<Source><![CDATA[
    Object Dialog()
    {
        Dialog dialog;

        dialog = super();        

        dialog.caption(caption);
        
        fieldSalesOrder = dialog.addField(extendedTypeStr(SalesId), 'Sales order number');
        fieldCustAccount = dialog.addField(extendedTypeStr(CustVendAC), 'Customer requisition');

        fieldProducts = dialog.addField(extendedTypeStr(NoYesId), 'Products');
        fieldConsignee = dialog.addField(extendedTypeStr(NoYesId), 'Ultimate consignee');

        fieldSalesOrder.value(this.parmSalesId());
        fieldCustAccount.value(this.parmPurchOrderFormNum());
        fieldSalesOrder.enabled(false);
        fieldCustAccount.enabled(false);

        return dialog;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {  
        salesId = fieldSalesOrder.value(); 
        //custAccount = fieldCustAccount.value();
        purchOrderFormNum = fieldCustAccount.value();
        productsEnabled = fieldProducts.value();
        consigneeEnabled = fieldConsignee.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        config = GGIIntegrationsGlobalWizardConfiguration::find();
        this.fileExport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if(_args.dataset() == tableNum(SalesTable))
        {
            SalesTable salesTable = _args.record(); 
            //salesTable = SalesTable::find("S026519");//Change this to test
            if(salesTable.PurchOrderFormNum == "")
            {
                throw Global::warning("Customer requisition is required.");
            }
            else
            {
                GGIIntegrationsGlobalWizardFileExport salesShipmentDialog = new GGIIntegrationsGlobalWizardFileExport(salesTable.SalesId);
                if(salesShipmentDialog.prompt())
                {
                    salesShipmentDialog.run();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExport</Name>
				<Source><![CDATA[
    private void fileExport()
    {
        try
        {              
            System.IO.Stream sourceStream = this.exportRecords();           

            /*the below code retrieves the encrypted password saved in the conatiner field passwordSFTP*/
            //Password sftpPassword = cryptoblob2str(WinAPIServer::cryptUnProtectData(sftpConfigParams.SFTPPasswordEncrypted));
            
            str success = this.exportSFTPFile(sourceStream);
            if(success == 'pass')
            {
                Info(strFmt('File successfuly sent to SFTP'));
            }
            else
            {
                Error('Error in sending file to SFTP due to incorrect Host/Port/User Credential');
            }
            
        }
        catch
        {
            Info(infolog.text());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportSFTPFile</Name>
				<Source><![CDATA[
    private str exportSFTPFile(System.IO.Stream _sourceStream)
    {
        System.IO.Stream                    ioStream;
        System.IO.StreamReader              ioStreamReader;
        System.String                       strReadLine;
        container                           conFTPFilesDownload;
        ListIterator                        ftpFilesListIterator;
        Renci.SshNet.Sftp.SftpFile          sftpFile;
        System.IO.StreamReader              reader;
        System.String                       line;

        System.ObjectDisposedException                  error_ObjectDisposedException;
        System.InvalidOperationException                error_InvalidOperationException;
        System.Net.Sockets.SocketException              error_SocketException;
        Renci.SshNet.Common.SshConnectionException      error_SshConnectionException;
        Renci.SshNet.Common.SshAuthenticationException  error_SshAuthenticationException;
        Renci.SshNet.Common.ProxyException              error_ProxyException;
        System.ArgumentNullException                    error_ArgumentNullException;
        Renci.SshNet.Common.SftpPathNotFoundException   error_SftpPathNotFoundException;
 
        ClrObject list = new ClrObject("System.Collections.Generic.List`1[Renci.SshNet.Sftp.SftpFile]");
        
 
        GGI.Integrations.FileHandling.SFTPConnection sftp = new GGI.Integrations.FileHandling.SFTPConnection();
        GGIIntegrationsGlobalWizardConfiguration parameters = GGIIntegrationsGlobalWizardConfiguration::find();
        
         using (Renci.SshNet.SftpClient sftpConnection = sftp.OpenSFTPConnection(parameters.SFTPHost, parameters.SFTPPort, parameters.SFTPUser, parameters.sftpPasswordEdit(false,'')))
        {
            try
            {  
                sftp.uploadFile(sftpConnection, _sourceStream, config.SFTPFileExportPath, filename);
            }       
                        
            catch (error_ArgumentNullException)
            {
                throw error("Path is null.");
            }
            catch (error_SshConnectionException)
            {
                throw error("Client is not connected.");
            }
            catch (error_SftpPathNotFoundException)
            {
                throw error("The specified path is invalid, or its directory was not found on the remote host.");
            }
            catch (error_ObjectDisposedException)
            {
                throw error("The method was called after the client was disposed.");
            } 
            catch (error_ObjectDisposedException)
            {
                throw error("The method was called after the client was disposed.. ");
            }
            catch (error_InvalidOperationException)
            {
                throw error("The client is already connected.");
            }
            catch (error_SocketException)
            {
                throw error("Socket connection to the SSH server or proxy server could not be established or an error occurred while resolving the hostname.");
            }
            catch (error_SshConnectionException)
            {
                throw error("SSH session could not be established.");
            }
            catch (error_SshAuthenticationException)
            {
                throw error("Authentication of SSH session failed.");
            }
            catch (error_ProxyException)
            {
                throw error("Failed to establish proxy connection.");
            }
            finally
            {
                if(sftpConnection.IsConnected)
                    sftpConnection.Disconnect();
            }
        }   
        return 'pass';
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportRecords</Name>
				<Source><![CDATA[
    private System.IO.Stream exportRecords()
    {
        System.IO.Stream stream;

        fileName = CompanyInfo::findRecId(CompanyInfo::current()).DataArea + '_' + salesId + '_' + DateTimeUtil::toFormattedStr(DateTimeUtil::utcNow(),231,DateDay::Digits2,DateSeparator::Hyphen,  DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4, TimeSeparator::Colon, TimeSeparator::Colon, DateFlags::None) +'_Local.csv';
        fileName = strRem(strRem(fileName," "), ':');
        CommaStreamIo line = CommaStreamIo ::constructForWrite();
        try
        {
            select firstonly salesOrderHeaderV2Entity
                where salesOrderHeaderV2Entity.SalesOrderNumber == salesId;
            if (salesOrderHeaderV2Entity)
            {
                if(config.Headers)
                {
                    line.writeExp(
                        ['Shipment'
                        , 'Invoice number'
                        , 'Shipment number'
                        , 'Shipment type'
                        , 'Invoice date'
                        , 'Commodity'
                        , 'Hazardous'
                        , 'Shipper reference'
                        , 'Additional shipper references'
                        , 'Ultimate consignee reference'
                        , 'Additional ultimate consignee references'
                        , 'Weight/Dimensions/Cube'
                        , 'ITAR Controlled'
                        , 'Payment Terms'
                        , 'Export Country *'
                        , 'Import Country *'
                        , 'Shipment Currency'
                        , 'Payment Currency'
                        , 'Conversion Factor'
                        , 'Incoterms'
                        , 'Incoterms Named Place'
                        , 'Forwarder Referencee'
                        , 'Forwarder to File AES'
                        , 'Return Material Authorization'
                        , 'ITN'
                        , 'Cargo Routed'
                        , 'Transshipments Allowed'
                        , 'Original ITN'
                        , 'Routing'
                        , 'Stuffing'
                        , 'Freight Charges'
                        , 'Other Shipment Charges'
                        , 'Client Entry/Quotation Check Date'
                        , 'Order Entry Check Date'
                        , 'Pre Shipment Check Date'
                        , 'Shipment Created'
                        , 'Ultimate Consignee Reference']);
                }
                int i = 1;
                isHaz = NoYes::No;
                while select salesLine where SalesLine.SalesId == salesOrderHeaderV2Entity.SalesOrderNumber
                {
                    if(InventTable::find(salesLine.ItemId).HMIMIndicator == NoYes::Yes)
                    {
                        isHaz = NoYes::Yes;
                    }
                    if(i == 1)
                    {
                        commodity = SalesLine.itemName();
                    }
                    else
                    {
                        commodity += ', ' + SalesLine.itemName();
                    }
                    i++;
                    
                }
                
                str invoiceDate = datetime2Str(salesOrderHeaderV2Entity.OrderCreationDateTime);
                //invoiceDate = strDel(invoiceDate, strFind(invoiceDate, 'Z', 0, 100), 100);
                //invoiceDate = strDel(invoiceDate, strFind(invoiceDate, 'T', 0, 100), 1);
                select firstonly salesLine where salesLine.SalesId == salesOrderHeaderV2Entity.SalesOrderNumber;
                line.writeExp(
                    ['shipment'                                                     //Shipment
                    , salesOrderHeaderV2Entity.CustomerRequisitionNumber            //Invoice number
                    , ''                                                            //Shipment number
                    , config.ShipmentType                                           //Shipment type
                    , invoiceDate                                                   //Invoice Date
                    , subStr(commodity,1,40)                                        //Commodity
                    , enum2Str(isHaz)                                               //Hazardous
                    , salesOrderHeaderV2Entity.SalesOrderNumber                     /*Shipper reference*/
                    , ''                                                            /*Additional shipper references*/
                    , salesOrderHeaderV2Entity.CustomerRequisitionNumber            /*Ultimate consignee reference*/
                    , ''                                                            /*Additional ultimate consignee references*/
                    , config.WeightDimCube                                          /*Weight/Dimensions/Cube*/
                    , config.ITARControlled                                         /*ITAR Controlled*/
                    , salesOrderHeaderV2Entity.PaymentTermsName                     /*Payment Terms*/
                    , config.CountryOfOrigin                                        /*Export Country **/
                    , salesOrderHeaderV2Entity.DeliveryAddressCountryRegionISOCode  /*Import Country **/
                    , salesOrderHeaderV2Entity.CurrencyCode                         /*Shipment Currency*/
                    , salesOrderHeaderV2Entity.CurrencyCode                         /*Payment Currency*/
                    , config.ConversionFactor                                       /*Conversion Factor*/
                    , subStr(salesOrderHeaderV2Entity.DeliveryTermsCode,1,3)        /*Incoterms*/
                    , ''                                                            /*Incoterms Named Place*/
                    , ''                                                            /*Forwarder Referencee*/
                    , config.forwardToFileAES                                       /*Forwarder to File AES*/
                    , ''                                                            /*Return Material Authorization*/ 
                    , ''                                                            /*ITN*/
                    , ''                                                            /*Cargo Routed*/ 
                    , config.TransShipmentsAllowed                                  /*Transshipments Allowed*/
                    , ''                                                            /*Original ITN*/ 
                    , ''                                                            /*Routing*/
                    , ''                                                            /*Stuffing*/ 
                    , ''                                                            /*Freight Charges*/
                    , ''                                                            /*Other Shipment Charges*/ 
                    , ''                                                            /*Client Entry/Quotation Check Date*/ 
                    , ''                                                            /*Order Entry Check Date*/ 
                    , ''                                                            /*Pre Shipment Check Date*/ 
                    , ''                                                            /*Shipment Created*/ 
                    , salesOrderHeaderV2Entity.CustomerRequisitionNumber            /*Ultimate Consignee Reference*/
                ]);

                //Start conditional rows
                if(consigneeEnabled)
                {
                    if(config.Headers)
                    {
                        line.writeExp(
                            ['Entity'
                            , 'Invoice number'
                            , 'Shipment number'
                            , 'Entity role'
                            , 'Entity name'
                            , 'Code number'
                            , 'Company name'
                            , 'Address1'
                            , 'Address2'
                            , 'City'
                            , 'State code'
                            , 'State/Province'
                            , 'Region'
                            , 'Postal code'
                            , 'Country'
                            , 'Address3'
                            , 'Address4'
                            , 'Address5'
                            , 'EIN'
                            , 'Social security number'
                            , 'Canadian business number'
                            , 'DUNS number'
                            , 'VAT number'
                            , 'VAT country'
                            , 'Contact name'
                            , 'Title'
                            , 'Phone'
                            , 'Fax'
                            , 'Email']);
                    }
                    select firstonly salesLine where salesLine.SalesId == salesOrderHeaderV2Entity.SalesOrderNumber;
                    
                    line.writeExp(
                        [/*Entity*/ 'entity'
                        ,/*Invoice number*/  salesOrderHeaderV2Entity.CustomerRequisitionNumber
                        ,/*Shipment number*/ ''
                        ,/*Entity role*/   config.EntityRole
                        ,/*Entity name*/  salesOrderHeaderV2Entity.SalesOrderName
                        ,/*Code number*/  salesOrderHeaderV2Entity.DeliveryAddressLocationId
                        ,/*Company name*/ salesOrderHeaderV2Entity.DeliveryAddressName
                        ,/*Address1*/ subStr(salesOrderHeaderV2Entity.DeliveryAddressStreet,1,35) //TODO: Ensure max 35 chars
                        ,/*Address2*/ subStr(salesOrderHeaderV2Entity.DeliveryAddressStreet,36,35)  //TODO: Ensure max 35 chars and pick up where Address1 left off
                        ,/*City*/  salesOrderHeaderV2Entity.DeliveryAddressCity
                        ,/*State code*/ salesOrderHeaderV2Entity.DeliveryAddressStateId
                        ,/*State/Province*/  LogisticsAddressState::find(salesOrderHeaderV2Entity.DeliveryAddressCountryRegionId,salesOrderHeaderV2Entity.DeliveryAddressStateId).Name
                        ,/*Region*/ salesOrderHeaderV2Entity.DeliveryaddressCountryRegionISOCode
                        ,/*Postal code*/  salesOrderHeaderV2Entity.DeliveryAddressZipCode
                        ,/*Country*/ salesOrderHeaderV2Entity.DeliveryaddressCountryRegionISOCode
                        ,/*Address3*/ ''
                        ,/*Address4*/ ''
                        ,/*Address5*/  ''
                        ,/*EIN*/  ''
                        ,/*Social security number*/ ''
                        ,/*Canadian business number*/ ''
                        ,/*DUNS number*/ ''
                        ,/*VAT number*/ ''
                        ,/*VAT country*/ ''
                        ,/*Contact name*/''
                        ,/*Title*/ ContactPerson::find(salesOrderHeaderV2Entity.ContactPersonId).Title
                        ,/*Phone*/ ContactPerson::find(salesOrderHeaderV2Entity.ContactPersonId).phone()
                        ,/*Fax*/  ContactPerson::find(salesOrderHeaderV2Entity.ContactPersonId).telefax()
                        ,/*Email*/ salesOrderHeaderV2Entity.Email
                        ]);
                    
                }
                if(productsEnabled)
                {
                    if(config.Headers)
                    {
                        line.writeExp(
                            ['Product'
                            , 'Invoice number'
                            , 'Shipment number'
                            , 'Part number'
                            , 'Quantity'
                            , 'Unit of measure'
                            , 'Product description'
                            , 'License type'
                            , 'License #'
                            , 'License date'
                            , 'License value'
                            , 'Country of orgiin'
                            , 'Hazardous'
                            , 'Foreign military sales'
                            , 'Schedule B'
                            , 'Quantity 1'
                            , 'Quantity 2'
                            , 'ECCN'
                            , 'Per unit price'
                            , 'Per unit weight'
                            , 'Per unit net weight'
                            , 'Item clause'
                            , 'Measurement'
                            , 'Empty'
                            , 'Empty'
                            , 'Total']);
                    }
                    while select salesLine where salesLine.SalesId == salesId
                    {
                        
                        select firstonly salesOrderLineV2Entity 
                            where salesOrderLineV2Entity.SalesOrderNumber == salesLine.SalesId
                              && salesOrderLineV2Entity.ItemNumber == salesLine.ItemId;
                        str legacyCat = (EcoResProduct::findByProductNumber(salesLine.ItemId).GGINAVLegacyCatalogId);
                        if(legacyCat != "")
                        {
                            legacyCat = '/CAT #:' + legacyCat;
                        }
                        str wineGallons;
                        str conversionGal2L;
                        str conversionLB2KG;
                        real uom2GAL = 0;
                        real uom2LB = 0;
                        if(salesOrderLineV2Entity.TTBWineGallon > 0)
                        {
                            wineGallons = "/Wine Gal: " + any2Str(salesOrderLineV2Entity.TTBWineGallon);
                        }

                        try
                        {
                            //BUG_16845_PJB_05302023
                            //Global wizard - product description  - incorrect values for kilograms and pounds on product description
                            //OOB class EcoResProductUnitConverter is rounding with less percision than needed                             
                            uom2GAL = decRound(EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId
                                                                                    , salesLine.InventDimId
                                                                                    , salesLine.SalesQty
                                                                                    , salesLine.SalesUnit
                                                                                    , "GAL"
                                                                                    , NoYes::Yes
                                                                                    , NoYes::No),20);

                            uom2LB = decRound(EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId
                                                                                    , salesLine.InventDimId
                                                                                    , salesLine.SalesQty
                                                                                    , salesLine.SalesUnit
                                                                                    , "LB"
                                                                                    , NoYes::Yes
                                                                                    , NoYes::No),20);
                            
                            /*
                            select firstonly productSpecificUnitOfMeasureConversionEntity 
                                where productSpecificUnitOfMeasureConversionEntity.ToUnitSymbol == 'GAL'
                                &&  productSpecificUnitOfMeasureConversionEntity.FromUnitSymbol == salesLine.SalesUnit
                                &&  productSpecificUnitOfMeasureConversionEntity.ProductNumber == salesLine.ItemId;
                            
                            uom2GAL = (decRound((productSpecificUnitOfMeasureConversionEntity.Factor*any2Real(salesLine.SalesQty)), 20));

                            select firstonly productSpecificUnitOfMeasureConversionEntity
                                where productSpecificUnitOfMeasureConversionEntity.ToUnitSymbol == 'LB'
                                &&  productSpecificUnitOfMeasureConversionEntity.FromUnitSymbol == salesLine.SalesUnit
                                &&  productSpecificUnitOfMeasureConversionEntity.ProductNumber == salesLine.ItemId;

                            uom2LB = (decRound((productSpecificUnitOfMeasureConversionEntity.Factor*any2Real(salesLine.SalesQty)), 20));
                            */

                            //end BUG_16845_PJB_05302023
                            
                        }
                        catch
                        {
                            //squash, there is no convertion
                        }
                        conversionGal2L = '';
                        conversionLB2KG = '';
                        //BUG_16972_PJB_05172023
                        //We do not need this conversion for Ireland
                        if(CompanyInfo::findRecId(CompanyInfo::current()).DataArea != '300')
                        {
                            if(uom2GAL > 0)
                            {
                                conversionGal2L = "/US Gal to l: " + any2Str(salesLine.SalesQty) + " " + any2Str(salesLine.SalesUnit) + " = "  + any2Str(decRound((uom2GAL*3.78541), 4)) + " l";
                            
                            }
                        
                            if(uom2LB > 0)
                            {
                                conversionLB2KG = "/LB to KG: " + any2Str(salesLine.SalesQty) + " " + any2Str(salesLine.SalesUnit) + " = "  + any2Str(decRound((uom2LB*0.453592), 4)) + " KG";
                            }
                        }                        
                        
                        productDescripition = salesLine.itemName() + legacyCat + '/Item #:' + salesLine.ItemId + wineGallons + conversionGal2L + conversionLB2KG;
                        
                        line.writeExp(
                            [/*Product*/ 'product'
                            , /*Invoice number*/ salesOrderHeaderV2Entity.CustomerRequisitionNumber
                            , /*Shipment number*/ ''
                            , /*Part number*/  salesLine.ItemId
                            , /*Quantity*/  salesLine.QtyOrdered
                            , /*Unit of measure*/ salesLine.SalesUnit
                            , /*Product description*/ productDescripition
                            , /*License type*/   ''
                            , /*License #*/    ''
                            , /*License date*/   ''
                            , /*License value*/   ''
                            , /*Country of orgiin*/  config.CountryOfOrigin
                            , /*Hazardous*/    enum2Str(InventTable::find(salesLine.ItemId).HMIMIndicator)
                            , /*Foreign military sales*/  'no'
                            , /*Schedule B*/  ''
                            , /*Quantity 1*/ ''
                            , /*Quantity 2*/  ''
                            , /*ECCN*/   ''
                            , /*Per unit price*/  salesLine.SalesPrice
                            , /*Per unit weight*/  InventTable::find(salesLine.ItemId).grossWeight()
                            , /*Per unit net weight*/  InventTable::find(salesLine.ItemId).NetWeight
                            , /*Item clause*/ ''
                            , /*Measurement*/  ''
                            , /*Empty*/   ''
                            , /*Empty*/  ''
                            , /*Total*/ salesLine.LineAmount
                            ]);
                    }
                }

                line.outFieldDelimiter(',');
                
            }

            stream = line.getStream();
            stream.Position = 0;
            System.IO.StreamReader sReader = new System.IO.StreamReader(stream);
            fileContent = sReader.ReadToEnd();
            /*Save file to local if you want to check the file in your system as SFTP locations are hard to access if you dont have the proper permissions*/
            File::SendStringAsFileToUser(fileContent, fileName, System.Text.Encoding::get_UTF8());
            //File::SendStringAsFileToUser(str content, str fileName, System.Text.Encoding encoding = System.Text.Encoding::get_UTF8(), ClassName fileUploadStrategyClassName = classstr(FileUploadTemporaryStorageStrategy))
 

            info('Exporting data completed');

        }
        catch(Exception::Error)
        {
            error('Error generating file');
        }

        return stream;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>