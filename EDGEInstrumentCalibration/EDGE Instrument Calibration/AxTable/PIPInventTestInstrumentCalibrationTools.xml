<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestInstrumentCalibrationTools</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventTestInstrumentCalibrationTools extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instrumentDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the description for the test instrument.
    /// </summary>
    /// <returns>
    ///     The test instrument description.
    /// </returns>
    public display PIPInstrumentDescription instrumentDescription()
    {
        return this.inventTestInstrumentToolUsedFor().testInstrumentType().Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTestInstrument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the test instrument type being referenced.
    /// </summary>
    /// <returns>
    ///     The related record from the <c>InventTestInstrument</c> table.
    /// </returns>
    public InventTestInstrument inventTestInstrument()
    {
        return InventTestInstrument::find(this.TestInstrumentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTestInstrumentToolUsedFor</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the test instrument tag record for the tools that are being assigned.
    /// </summary>
    /// <returns>
    ///     The related record from the <c>PIPInventTestInstrumentTag</c> table.
    /// </returns>
    public PIPInventTestInstrumentTag inventTestInstrumentToolUsedFor()
    {
        return PIPInventTestInstrumentTag::findByInstrumentTag(this.TestInstrumentId, this.TestInstrumentTagNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastCalibrationDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the last calibration date for the test instrument.
    /// </summary>
    /// <returns>
    ///     The last last calibration date for the test instrument.
    /// </returns>
    public display PIPCalibrationApprovedDate lastCalibrationDate()
    {
        return this.inventTestInstrumentToolUsedFor().CalibrationApprovedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
    
        switch(_fieldId)
        {
            case fieldNum(PIPInventTestInstrumentCalibrationTools, TestInstrumentId) :
                if (this.TestInstrumentId
                    && PIPInventTestInstrumentTag::existByTestInstrumentType(this.TestInstrumentId)
                    && !PIPInventTestInstrumentTag::existUsableTagForCalibrationTool(this.TestInstrumentId))
                {
                    this.TestInstrumentId = '';
                    throw error("@PIP806");
                }
                if (this.TestInstrumentId
                    && this.inventTestInstrument().PIPIsTagNumRequired
                    && !PIPInventTestInstrumentTag::existByTestInstrumentType(this.TestInstrumentId))
                {
                    this.TestInstrumentId = '';
                    throw error("@PIP812");
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tagNumDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the description for the test instrument tag number.
    /// </summary>
    /// <returns>
    ///     The test instrument tag number description.
    /// </returns>
    public display PIPTagDescription tagNumDescription()
    {
        return this.inventTestInstrumentToolUsedFor().Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if (!this.TestInstrumentTagNumber && PIPInventTestInstrumentTag::existUsableTagForCalibrationTool(this.TestInstrumentId))
        {
            return checkFailed(strFmt("@PIP746", fieldPName(PIPInventTestInstrumentCalibrationTools, TestInstrumentTagNumber)));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>PIPInventTestInstrumentCalibrationTools</c> table exists.
    /// </summary>
    /// <param name="_testInstrumentCalibrationToolsRecId">
    ///    The surrogate record id for the instrument calibration tool record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PIPTestInstrumentCalibrationToolsRecId _testInstrumentCalibrationToolsRecId)
    {
        return _testInstrumentCalibrationToolsRecId
            && (select firstonly PIPInventTestInstrumentCalibrationTools
                    where PIPInventTestInstrumentCalibrationTools.RecId == _testInstrumentCalibrationToolsRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCalibration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether any calibration tools exist for the given calibration record.
    /// </summary>
    /// <param name="_testInstrumentCalibrationRecId">
    ///    The surrogate record id for the instrument calibration record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByCalibration(PIPTestInstrumentCalibrationRecId _testInstrumentCalibrationRecId)
    {
        return _testInstrumentCalibrationRecId
            && (select PIPInventTestInstrumentCalibrationTools
                    where PIPInventTestInstrumentCalibrationTools.TestInstrumentCalibration == _testInstrumentCalibrationRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PIPInventTestInstrumentCalibrationTools</c> table.
    /// </summary>
    /// <param name="_testInstrumentCalibrationToolsRecId">
    ///    The surrogate key value to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PIPInventTestInstrumentCalibrationTools</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentCalibrationTools find(PIPTestInstrumentCalibrationToolsRecId _testInstrumentCalibrationToolsRecId, boolean _forUpdate = false)
    {
        PIPInventTestInstrumentCalibrationTools  testInstrumentCalibrationTools;
    
        testInstrumentCalibrationTools.selectForUpdate(_forUpdate);
    
        if (_testInstrumentCalibrationToolsRecId)
        {
            select firstonly testInstrumentCalibrationTools
                where testInstrumentCalibrationTools.RecId == _testInstrumentCalibrationToolsRecId;
        }
    
        return testInstrumentCalibrationTools;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPTIC</ConfigurationKey>
	<DeveloperDocumentation>@PIP712</DeveloperDocumentation>
	<Label>@PIP711</Label>
	<TitleField1>TestInstrumentCalibration</TitleField1>
	<TitleField2>TestInstrumentTagNumber</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentCalibration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentTagNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentCalibration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentTagNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TestInstrumentCalibration</Name>
			<ExtendedDataType>PIPTestInstrumentCalibrationRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestInstrumentId</Name>
			<ExtendedDataType>InventTestInstrumentId</ExtendedDataType>
			<Label>@PIP716</Label>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestInstrumentTagNumber</Name>
			<ExtendedDataType>PIPTestInstrumentTagNumber</ExtendedDataType>
			<Label>@PIP717</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTestInstrumentCalibrationTool</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TestInstrumentCalibration</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TestInstrumentId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TestInstrumentTagNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestInstrument</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTestInstrument</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PIPIsUsedForCalibration</Name>
					<RelatedField>PIPIsUsedForCalibration</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestInstrumentId</Name>
					<SourceEDT>InventTestInstrumentId</SourceEDT>
					<Field>TestInstrumentId</Field>
					<RelatedField>TestInstrumentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TestInstrumentIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPInventTestInstrumentCalibration</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PIPInventTestInstrumentCalibration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestInstrumentCalibration</Name>
					<Field>TestInstrumentCalibration</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PIPInventTestInstrumentTag</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PIPInventTestInstrumentTag</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>UsageStatus</Name>
					<RelatedField>UsageStatus</RelatedField>
					<Value>2</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>UsageStatus_1</Name>
					<RelatedField>UsageStatus</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestInstrumentId</Name>
					<Field>TestInstrumentId</Field>
					<RelatedField>TestInstrumentId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestInstrumentTagNumber</Name>
					<Field>TestInstrumentTagNumber</Field>
					<RelatedField>TagNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>