<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestInstrumentTag</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventTestInstrumentTag extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copy attachments from associated calibration procedure.
    /// </summary>
    private void copyAttachments()
    {
        DocuRef                         docuRef;
        PIPInventCalibrationProcedure   calibrationProcedure = PIPInventCalibrationProcedure::find(this.CalibrationProcedure);
    
        if (calibrationProcedure)
        {
            if (DocuRef::exist(curext(), this.TableId, this.RecId) && DocuRef::exist(curext(), calibrationProcedure.TableId, calibrationProcedure.RecId))
            {
                info("@PIP821");
            }
    
            while select * from docuRef
                where docuRef.RefCompanyId  == curext()
                    && docuRef.RefTableId   == calibrationProcedure.TableId
                    && docuRef.RefRecId     == calibrationProcedure.RecId
            {
                DocuRef::createFromDocuRef(docuRef, this.RecId, this.TableId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDependentAndOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if any open Calibration records or Quality orders exist that reference the specified Test instrument tag.
    /// </summary>
    /// <param name="_testInstrumentTagOrig">
    ///     A record in <c>PIPInventTestInstrumentTag</c> table.
    /// </param>
    /// <returns>
    ///    true if the open and dependent records exist; otherwise, false.
    /// </returns>
    private boolean existDependentAndOpenTransactions(PIPInventTestInstrumentTag _testInstrumentTagOrig)
    {
        if (PIPInventTestInstrumentCalibration::existOpenCalibrationRecord(_testInstrumentTagOrig.TestInstrumentId, _testInstrumentTagOrig.TagNumber)
            || InventQualityOrderTable::pipExistOpenOrderWithInstrument(_testInstrumentTagOrig.TestInstrumentId, _testInstrumentTagOrig.TagNumber))
        {
            return true;
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDependentTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if any dependent Calibration records or Quality orders exist that reference the specified Test instrument tag.
    /// </summary>
    /// <param name="_testInstrumentTagOrig">
    ///     A record in <c>PIPInventTestInstrumentTag</c> table.
    /// </param>
    /// <returns>
    ///     true if dependent records exist; otherwise, false.
    /// </returns>
    private boolean existDependentTransactions(PIPInventTestInstrumentTag _testInstrumentTagOrig)
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration;
        InventQualityOrderTable             qualityOrderTable;
        InventQualityOrderLine              qualityOrderLine;
        InventQualityOrderLineResults       qualityOrderLineResults;
    
        if (_testInstrumentTagOrig.TestInstrumentId && _testInstrumentTagOrig.TagNumber)
        {
            select firstOnly testInstrumentCalibration
                where testInstrumentCalibration.InventTestInstrument            == _testInstrumentTagOrig.TestInstrumentId
                    && testInstrumentCalibration.TestInstrumentTagNumber        == _testInstrumentTagOrig.TagNumber;
    
            if (testInstrumentCalibration)
            {
                return true;
            }
    
            select firstOnly qualityOrderTable
                exists join qualityOrderLine
                    where qualityOrderLine.QualityOrderId                       == qualityOrderTable.QualityOrderId
                exists join qualityOrderLineResults
                    where qualityOrderLineResults.QualityOrderId                == qualityOrderTable.QualityOrderId
                        && ((qualityOrderLine.TestInstrumentId                  == _testInstrumentTagOrig.TestInstrumentId
                            && qualityOrderLine.PIPTestInstrumentTagNumber      == _testInstrumentTagOrig.TagNumber)
                        ||  qualityOrderLineResults.PIPTestInstrumentTagNumber  == _testInstrumentTagOrig.TagNumber);
    
            if (qualityOrderTable)
            {
                return true;
            }
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        InventParameters inventParameters   = InventParameters::find();
        this.CalibrationCheck               = inventParameters.PIPTestInstrumentCalibrationCheck;
        this.UsageStatus                    = PIPTestInstrumentUsageStatus::Available;
        this.SkipCheckTestInstrumentOnOrder = inventParameters.PIPSkipCheckTestInstrumentOnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    
        this.copyAttachments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCalibrationGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the calibration group information associated with the tag.
    /// </summary>
    /// <returns>
    ///     A record from the <c>PIPInventCalibrationGroup</c> table.
    /// </returns>
    public PIPInventCalibrationGroup inventCalibrationGroup()
    {
        return PIPInventCalibrationGroup::find(this.CalibrationGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        PIPInventTestInstrumentTag  testInstrumentTag_Orig  = this.orig();
        PIPInventCalibrationGroup   calibrationGroup        = this.inventCalibrationGroup();
    
        super(_fieldId);
    
        switch(_fieldId)
        {
            case fieldNum(PIPInventTestInstrumentTag, TestInstrumentId) :
                if (this.RecId && this.TestInstrumentId != testInstrumentTag_Orig.TestInstrumentId && this.existDependentTransactions(testInstrumentTag_Orig))
                {
                    this.TestInstrumentId = testInstrumentTag_Orig.TestInstrumentId;
                    throw error(strFmt("@PIP810", fieldId2pname(this.TableId, _fieldId)));
                }
                if (this.TestInstrumentId)
                {
                    this.WMSInputAreaId = this.testInstrumentType().WMSInputAreaId;
                }
                break;
            case fieldNum(PIPInventTestInstrumentTag, TagNumber) :
                if (this.RecId && this.TagNumber != testInstrumentTag_Orig.TagNumber && this.existDependentTransactions(testInstrumentTag_Orig))
                {
                    this.TagNumber = testInstrumentTag_Orig.TagNumber;
                    throw error(strFmt("@PIP810", fieldId2pname(this.TableId, _fieldId)));
                }
                break;
            case fieldNum(PIPInventTestInstrumentTag, CalibrationGroup) :
                if (this.RecId && this.CalibrationGroup != testInstrumentTag_Orig.CalibrationGroup)
                {
                    if (this.existDependentAndOpenTransactions(testInstrumentTag_Orig))
                    {
                        this.CalibrationGroup = testInstrumentTag_Orig.CalibrationGroup;
                        throw error(strFmt("@PIP809", fieldId2pname(this.TableId, _fieldId)));
                    }
    
                    this.CalibrationNextDate = dateNull();
                }
                if (this.CalibrationGroup)
                {
                    this.CalibrationMethod = calibrationGroup.CalibrationMethod;
                    this.setNextDateForCalibration();
                }
                break;
            case fieldNum(PIPInventTestInstrumentTag, CalibrationStartDate) :
                if (this.CalibrationStartDate && this.CalibrationStartDate != testInstrumentTag_Orig.CalibrationStartDate)
                {
                    this.setNextDateForCalibration();
                }
                break;
            case fieldNum(PIPInventTestInstrumentTag, CalibrationProcedure) :
                if (this.CalibrationProcedure != testInstrumentTag_Orig.CalibrationProcedure )
                {
                    if (this.existDependentAndOpenTransactions(testInstrumentTag_Orig))
                    {
                        this.CalibrationProcedure = testInstrumentTag_Orig.CalibrationProcedure;
                        throw error(strFmt("@PIP809", fieldId2pname(this.TableId, _fieldId)));
                    }
                    this.copyAttachments();
                }
                break;
            case fieldNum(PIPInventTestInstrumentTag, LifetimeUsageCount) :
                if (this.LifetimeUsageCount
                        && calibrationGroup.MaxUsageLifetime
                        && this.LifetimeUsageCount >= calibrationGroup.MaxUsageLifetime)
                {
                    this.UsageStatus = PIPTestInstrumentUsageStatus::OutOfService;
                }
                break;
            case fieldNum(PIPInventTestInstrumentTag, CalibrationRequired) :
                if (!this.CalibrationRequired)
                {
                    if (Box::okCancel("@PIP805", DialogButton::Cancel) == DialogButton::Ok)
                    {
                        this.CalibrationStartDate           = dateNull();
                        this.CalibrationStartedDate         = dateNull();
                        this.CalibrationStartedDate         = dateNull();
                        this.CalibrationCompletedDate       = dateNull();
                        this.CalibrationApprovedDate        = dateNull();
                        this.CalibrationNextDate            = dateNull();
                        this.CalibrationCompletionAssignee  = '';
                        this.CalibrationProcedure           = '';
                        this.CalibrationApprovalAssignee    = '';
                        this.CalibrationGroup               = '';
                        this.UsageCountSinceLastCalibration = 0;
                        this.LifetimeUsageCount             = 0;
                        this.CalibrationResult              = "";
                    }
                    else
                    {
                        this.CalibrationRequired = true;
                    }
                }
                else
                {
                    this.CalibrationStartDate           = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextDateForCalibration</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the next date for calibration.
    /// </summary>
    /// <remarks>
    ///     The approved date is used for calulation during the calibration approval process and the start date is used
    ///     when the tag record is being created.
    /// </remarks>
    public void setNextDateForCalibration()
    {
        #TimeConstants
        date                        initialDate;
        PIPInventCalibrationGroup   inventCalibrationGroup = this.inventCalibrationGroup();
    
        initialDate = (this.CalibrationApprovedDate) ? this.CalibrationApprovedDate : this.CalibrationStartDate;
    
        if (inventCalibrationGroup
                && inventCalibrationGroup.CalibrationMethod == PIPCalibrationMethod::Periodic
                && inventCalibrationGroup.CalibrationPeriod
                && inventCalibrationGroup.PeriodFrequency)
        {
            switch (inventCalibrationGroup.CalibrationPeriod)
            {
                case PIPCalibrationPeriod::Day :
                    this.CalibrationNextDate = initialDate + inventCalibrationGroup.PeriodFrequency;
                    break;
                case PIPCalibrationPeriod::Month :
                    this.CalibrationNextDate = dateMthFwd(initialDate, inventCalibrationGroup.PeriodFrequency);
                    break;
                case PIPCalibrationPeriod::Year :
                    this.CalibrationNextDate = dateMthFwd(initialDate, #monthsPerYear * inventCalibrationGroup.PeriodFrequency);
                    break;
            }
        }
        else
        {
            this.CalibrationNextDate = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>testInstrumentDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the description from the test instrument type.
    /// </summary>
    /// <returns>
    ///     The test innstrument description.
    /// </returns>
    public display PIPDescription testInstrumentDescription()
    {
        return this.testInstrumentType().Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testInstrumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the associated Test instrument record.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record from the <c>InventTestInstrument</c> table.
    /// </returns>
    public InventTestInstrument testInstrumentType(boolean _forUpdate = false)
    {
        return InventTestInstrument::find(this.TestInstrumentId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>testPrecision</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the test precision for the associated test instrument.
    /// </summary>
    /// <returns>
    ///     The test precision for the associated test instrument.
    /// </returns>
    public display InventTestPrecision testPrecision()
    {
        return this.testInstrumentType().TestPrecision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the Unit ID of the associated test instrument.
    /// </summary>
    /// <returns>
    ///     The Unit ID of the associated test instrument.
    /// </returns>
    public display UnitOfMeasureSymbol unit()
    {
        return this.testInstrumentType().Unit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateUsageStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the usage status on the test instrument tag.
    /// </summary>
    /// <param name="_usageStatus">
    ///     The usage status to be updated to.
    /// </param>
    public void updateUsageStatus(PIPTestInstrumentUsageStatus _usageStatus)
    {
        PIPInventCalibrationGroup calibrationGroup = this.inventCalibrationGroup();
    
        ttsBegin;
    
        switch(_usageStatus)
        {
            case PIPTestInstrumentUsageStatus::Available :
                if (Box::okCancel("@PIP752", DialogButton::Cancel) == DialogButton::Ok)
                {
                    if (calibrationGroup)
                    {
                        if (this.UsageCountSinceLastCalibration && calibrationGroup.MaxUsage && this.UsageCountSinceLastCalibration >= calibrationGroup.MaxUsage)
                        {
                            throw error("@PIP822");
                        }
                        if (this.LifetimeUsageCount && calibrationGroup.MaxUsageLifetime && this.LifetimeUsageCount >= calibrationGroup.MaxUsageLifetime)
                        {
                            throw error("@PIP823");
                        }
                    }
    
                    this.UsageStatus = PIPTestInstrumentUsageStatus::Available;
                }
                break;
            case PIPTestInstrumentUsageStatus::OutOfService :
                if (Box::okCancel("@PIP753", DialogButton::Cancel) == DialogButton::Ok)
                {
                    this.UsageStatus = PIPTestInstrumentUsageStatus::OutOfService;
                }
                break;
        }
    
        this.selectForUpdate(true);
        this.update();
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if (this.CalibrationRequired && !this.CalibrationStartDate)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldPName(PIPInventTestInstrumentTag, CalibrationStartDate)));
        }
    
        if (ret && this.CalibrationRequired && !this.CalibrationGroup)
        {
            ret = checkFailed(strFmt("@SYS84753", fieldPName(PIPInventTestInstrumentTag, CalibrationGroup)));
        }
        if (ret && this.UsageCountSinceLastCalibration > this.LifetimeUsageCount)
        {
            ret = checkFailed(strFmt("@SYS113786", fieldPName(PIPInventTestInstrumentTag, LifetimeUsageCount), fieldPName(PIPInventTestInstrumentTag, UsageCountSinceLastCalibration)));
        }
    
        if (ret && !this.CalibrationNextDate && this.CalibrationStartDate)
        {
            this.setNextDateForCalibration();
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>PIPInventTestInstrumentTag</c> table exists.
    /// </summary>
    /// <param name="_inventTestInstrumentTagRecId">
    ///    The surrogate record id for the test instrument tag record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PIPInventTestInstrumentTagRecId _inventTestInstrumentTagRecId)
    {
        return _inventTestInstrumentTagRecId
            && (select firstonly PIPInventTestInstrumentTag
                    where PIPInventTestInstrumentTag.RecId == _inventTestInstrumentTagRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByCalibrationGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>PIPInventTestInstrumentTag</c> table exists
    ///     based on the calibration group.
    /// </summary>
    /// /// <param name="_calibrationgroup">
    ///     The calibration group reference to look for.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByCalibrationGroup(PIPCalibrationGroup _calibrationgroup)
    {
        return _calibrationgroup
            && (select firstonly PIPInventTestInstrumentTag
                    where PIPInventTestInstrumentTag.CalibrationGroup   == _calibrationgroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByInstrumentTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>PIPInventTestInstrumentTag</c> table exists
    ///     based on the test instrument ID and tag number.
    /// </summary>
    /// /// <param name="_testInstrumentId">
    ///     The test instrument ID of the record to find.
    /// </param>
    /// <param name="_testInstrumentTagNumber">
    ///     The tag number of the record to find.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByInstrumentTag(
        InventTestInstrumentId      _testInstrumentId,
        PIPTestInstrumentTagNumber  _testInstrumentTagNumber)
    {
        return (_testInstrumentId && _testInstrumentTagNumber)
            && (select firstonly PIPInventTestInstrumentTag
                    where PIPInventTestInstrumentTag.TestInstrumentId   == _testInstrumentId
                        && PIPInventTestInstrumentTag.TagNumber         == _testInstrumentTagNumber).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByTestInstrumentType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the specified record in the <c>PIPInventTestInstrumentTag</c> table exists
    ///     based on the test instrument type.
    /// </summary>
    /// /// <param name="_invenTestInstrumentId">
    ///     The test instrument type to find.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByTestInstrumentType(InventTestInstrumentId _invenTestInstrumentId)
    {
        return _invenTestInstrumentId &&
            (select firstonly PIPInventTestInstrumentTag
                where PIPInventTestInstrumentTag.TestInstrumentId == _invenTestInstrumentId).RecId !=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUsableTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a usable test instrument tag exists based on the test instrument type.
    /// </summary>
    /// <param name="_inventQualityOrderLine">
    ///     The quality order line record whose values will be used to find the correct tag.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existUsableTag(InventQualityOrderLine _inventQualityOrderLine)
    {
        PIPInventTestInstrumentTag      inventTestInstrumentTag;

        if (_inventQualityOrderLine.TestInstrumentId && _inventQualityOrderLine.QualityOrderId)
        {
            select firstOnly RecId from inventTestInstrumentTag
                where inventTestInstrumentTag.TestInstrumentId  == _inventQualityOrderLine.TestInstrumentId
                    && inventTestInstrumentTag.UsageStatus      == PIPTestInstrumentUsageStatus::Available;
        }

        return inventTestInstrumentTag.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existUsableTagForCalibrationTool</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a test instrument tag exists for use as a calibration tool based on the test instrument type.
    /// </summary>
    /// /// <param name="_invenTestInstrumentId">
    ///     The test instrument type to find.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existUsableTagForCalibrationTool(InventTestInstrumentId _invenTestInstrumentId)
    {
        InventTestInstrument        inventTestInstrument;
        PIPInventTestInstrumentTag  inventTestInstrumentTag;
    
        if (_invenTestInstrumentId)
        {
            select firstOnly RecId from inventTestInstrumentTag
                exists join inventTestInstrument
                    where inventTestInstrumentTag.TestInstrumentId      == inventTestInstrument.TestInstrumentId
                        && inventTestInstrument.TestInstrumentId        == _invenTestInstrumentId
                        && inventTestInstrumentTag.UsageStatus          != PIPTestInstrumentUsageStatus::OutOfService
                        && inventTestInstrument.PIPIsUsedForCalibration;
        }
    
        return inventTestInstrumentTag.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PIPInventTestInstrumentTag</c> table.
    /// </summary>
    /// <param name="_inventTestInstrumentTagRecId">
    ///    The surrogate key value to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PIPInventTestInstrumentTag</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentTag find(PIPInventTestInstrumentTagRecId _inventTestInstrumentTagRecId, boolean _forUpdate = false)
    {
        PIPInventTestInstrumentTag  pipInventTestInstrumentTag;
    
        pipInventTestInstrumentTag.selectForUpdate(_forUpdate);
    
        if (_inventTestInstrumentTagRecId)
        {
            select firstonly pipInventTestInstrumentTag
                where   pipInventTestInstrumentTag.RecId == _inventTestInstrumentTagRecId;
        }
    
        return pipInventTestInstrumentTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInstrumentTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>PIPInventTestInstrumentTag</c> table
    ///     using the test instrument ID and tag number.
    /// </summary>
    /// <param name="_testInstrumentId">
    ///     The test instrument ID of the record to find.
    /// </param>
    /// <param name="_testInstrumentTagNumber">
    ///     The tag number of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPInventTestInstrumentTag</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentTag findByInstrumentTag(
        InventTestInstrumentId      _testInstrumentId,
        PIPTestInstrumentTagNumber  _testInstrumentTagNumber,
        boolean                     _forUpdate = false)
    {
        PIPInventTestInstrumentTag  pipInventTestInstrumentTag;
    
        pipInventTestInstrumentTag.selectForUpdate(_forUpdate);
    
        if (_testInstrumentId && _testInstrumentTagNumber)
        {
            select firstonly pipInventTestInstrumentTag
                where pipInventTestInstrumentTag.TestInstrumentId   == _testInstrumentId
                    && pipInventTestInstrumentTag.TagNumber         == _testInstrumentTagNumber;
        }
    
        return pipInventTestInstrumentTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUsableTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a usable test instrument tag for assignment on quality order line and results using the test instrument ID.
    /// </summary>
    /// <param name="_inventTestInstrumentId">
    ///     The test instrument type to be used to find the correct tag.
    /// </param>
    /// <param name="_qualityOrderId">
    ///     The quality order Id of the quality order to which tag needs to be assigned.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPInventTestInstrumentTag</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentTag getUsableTag(InventTestInstrumentId _inventTestInstrumentId, InventQualityOrderId _qualityOrderId)
    {
        PIPInventTestInstrumentTag      inventTestInstrumentTag;
        PIPInventTestInstrumentTag      usableTag;
        PIPInventCalibrationGroup       inventCalibrationGroup;
        PIPInventCalibrationTagsInUse   tagsInUse;
    
        if (_inventTestInstrumentId && _qualityOrderId)
        {
            while select * from inventTestInstrumentTag
                order by TagNumber
                where inventTestInstrumentTag.TestInstrumentId  == _inventTestInstrumentId
                    && inventTestInstrumentTag.UsageStatus      == PIPTestInstrumentUsageStatus::Available
                notExists join tagsInUse
                where inventTestInstrumentTag.TestInstrumentId  == tagsInUse.TestInstrumentId
                    && inventTestInstrumentTag.TagNumber        == tagsInUse.TagNumber
                    && tagsInUse.QualityOrderId                 != _qualityOrderId
            {
                inventCalibrationGroup = inventTestInstrumentTag.inventCalibrationGroup();
    
                if (inventCalibrationGroup && inventCalibrationGroup.CalibrationMethod == PIPCalibrationMethod::Usage)
                {
                    if ((inventCalibrationGroup.MaxUsage
                            && inventTestInstrumentTag.UsageCountSinceLastCalibration   < inventCalibrationGroup.MaxUsage
                            && !inventCalibrationGroup.MaxUsageLifetime)
                        || (inventCalibrationGroup.MaxUsageLifetime
                            && inventTestInstrumentTag.LifetimeUsageCount               < inventCalibrationGroup.MaxUsageLifetime
                            && !inventCalibrationGroup.MaxUsage)
                        || (inventCalibrationGroup.MaxUsage
                            && inventCalibrationGroup.MaxUsageLifetime
                            && inventTestInstrumentTag.UsageCountSinceLastCalibration   < inventCalibrationGroup.MaxUsage
                            && inventTestInstrumentTag.LifetimeUsageCount               < inventCalibrationGroup.MaxUsageLifetime))
                    {
                        usableTag   = inventTestInstrumentTag;
                        break;
                    }
                }
                else
                {
                    usableTag   = inventTestInstrumentTag;
                    break;
                }
            }
        }
    
        return usableTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTagsForAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a lookup for the <c>PIPInventTestInstrumentTag</c> table showing only tags
    ///     that can be assigned to a quality order line or results.
    /// </summary>
    /// <param name="_ctrl">
    ///     The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_testInstrumentId">
    ///     The test instrument ID to be used as a filter.
    /// </param>
    public static client void lookupTagsForAssignment(FormStringControl _ctrl, InventTestInstrumentId _testInstrumentId)
    {
    
        SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(PIPInventTestInstrumentTag),_ctrl);
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(PIPInventTestInstrumentTag));
    
        sysTableLookup.addLookupfield(fieldNum(PIPInventTestInstrumentTag,TagNumber));
        sysTableLookup.addLookupfield(fieldNum(PIPInventTestInstrumentTag,Description));
    
        queryBuildDataSource.addRange(fieldNum(PIPInventTestInstrumentTag,TestInstrumentId)).value(SysQuery::value(_testInstrumentId));
        queryBuildDataSource.addRange(fieldNum(PIPInventTestInstrumentTag,UsageStatus)).value(SysQuery::valueNot(PIPTestInstrumentUsageStatus::OutOfService));
    
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupUsableTagsForCalibration</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a lookup for the <c>PIPInventTestInstrumentTag</c> table showing only tags
    ///     usable for calibration of given test instrument.
    /// </summary>
    /// <param name="_ctrl">
    ///     The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_testInstrumentId">
    ///     The test instrument ID to be used as a filter.
    /// </param>
    public static client void lookupUsableTagsForCalibration(FormStringControl _ctrl, InventTestInstrumentId _testInstrumentId)
    {
    
        SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(PIPInventTestInstrumentTag),_ctrl);
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(PIPInventTestInstrumentTag));
    
        sysTableLookup.addLookupfield(fieldNum(PIPInventTestInstrumentTag,TagNumber));
        sysTableLookup.addLookupfield(fieldNum(PIPInventTestInstrumentTag,Description));
    
        queryBuildDataSource.addRange(fieldNum(PIPInventTestInstrumentTag,TestInstrumentId)).value(SysQuery::value(_testInstrumentId));
        queryBuildDataSource.addRange(fieldNum(PIPInventTestInstrumentTag,UsageStatus)).value(SysQuery::valueNot(PIPTestInstrumentUsageStatus::OutOfService));
    
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCertificatePrintDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the calibration certificate printed date to the cuurent date.
    /// </summary>
    /// <param name="_calibrationRecId">
    ///     The surrogate key of the calibration record which will be used to look up the applicable test instrument tag.
    /// </param>
    public static void setCertificatePrintDate(PIPTestInstrumentCalibrationRecId _calibrationRecId)
    {
        PIPInventTestInstrumentTag testInstrumentTag = PIPInventTestInstrumentCalibration::find(_calibrationRecId).inventTestInstrumentTag(true);
    
        if (testInstrumentTag)
        {
            ttsBegin;
            testInstrumentTag.CalibrationCertificatePrintDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            testInstrumentTag.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPTIC</ConfigurationKey>
	<DeveloperDocumentation>@PIP655</DeveloperDocumentation>
	<FormRef>PIPInventTestInstrumentTag</FormRef>
	<Label>@PIP654</Label>
	<TitleField1>TestInstrumentId</TitleField1>
	<TitleField2>TagNumber</TitleField2>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ReplacementKey>InventTestInstrumentIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TagNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationCheck</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsageStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsForRestrcitedUse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TagNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationCheck</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsageStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsForRestrcitedUse</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TagNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalibrationDetails</Name>
			<Label>@PIP669</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalibrationRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationProcedure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsageCountSinceLastCalibration</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LifetimeUsageCount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationCompletionAssignee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationApprovalAssignee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationStartedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationCompletedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationApprovedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationNextDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationCertificatePrintDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationResult</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@PIP689</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SerialNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Owner</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AcquisitionDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSInputAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestDepartment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ManufacturerData</Name>
			<Label>@PIP666</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Manufacturer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManufacturerPartNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModelNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ManufactureDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarrantyNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WarrantyExpiryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Notes</Name>
			<Label>@SYS81105</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TestProcedure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Specification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>AcquisitionDate</Name>
			<ExtendedDataType>PIPTestInstrumentAcquisitionDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<ExtendedDataType>AssetId</ExtendedDataType>
			<HelpText>@PIP1053</HelpText>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationApprovalAssignee</Name>
			<ExtendedDataType>UserId</ExtendedDataType>
			<HelpText>@PIP1050</HelpText>
			<Label>@PIP652</Label>
			<StringSize>8</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationApprovedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPCalibrationApprovedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationCertificatePrintDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPCalibrationCertificatePrintDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalibrationCheck</Name>
			<HelpText>@PIP1051</HelpText>
			<EnumType>PIPTestInstrumentCalibrationCheck</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationCompletedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPCalibrationCompletedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationCompletionAssignee</Name>
			<ExtendedDataType>UserId</ExtendedDataType>
			<HelpText>@PIP1049</HelpText>
			<Label>@PIP653</Label>
			<StringSize>8</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationGroup</Name>
			<ExtendedDataType>PIPCalibrationGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalibrationMethod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>PIPCalibrationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationNextDate</Name>
			<ExtendedDataType>PIPCalibrationNextDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationProcedure</Name>
			<ExtendedDataType>PIPCalibrationProcedureName</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalibrationRequired</Name>
			<ExtendedDataType>PIPTestInstrumentCalibrationRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationResult</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPInventTestCalibrationResultTag</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationStartDate</Name>
			<ExtendedDataType>PIPCalibrationStartDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationStartedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPCalibrationStartedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustTable</Name>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>PIPDescription</ExtendedDataType>
			<HelpText>@PIP691</HelpText>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsForRestrcitedUse</Name>
			<ExtendedDataType>PIPTestInstrumentIsForRestrcitedUse</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LifetimeUsageCount</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPLifetimeUsageCount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ManufactureDate</Name>
			<ExtendedDataType>PIPTestInstrumentManufactureDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Manufacturer</Name>
			<ExtendedDataType>PIPTestInstrumentManufacturer</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ManufacturerPartNumber</Name>
			<ExtendedDataType>PIPTestInstrumentManufacturerPartNumber</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelNumber</Name>
			<ExtendedDataType>PIPTestInstrumentModelNumber</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Note</Name>
			<ExtendedDataType>PIPTestInstrumentNote</ExtendedDataType>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Owner</Name>
			<ExtendedDataType>PIPTestInstrumentOwner</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SerialNumber</Name>
			<ExtendedDataType>PIPTestInstrumentSerialNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Specification</Name>
			<ExtendedDataType>PIPTestInstrumentSpecification</ExtendedDataType>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TagNumber</Name>
			<ExtendedDataType>PIPTestInstrumentTagNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestDepartment</Name>
			<ExtendedDataType>PIPInventTestDeptName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestInstrumentId</Name>
			<ExtendedDataType>InventTestInstrumentId</ExtendedDataType>
			<Label>@PIP604</Label>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestLocation</Name>
			<ExtendedDataType>PIPInventTestLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestProcedure</Name>
			<ExtendedDataType>PIPInventTestProcedure</ExtendedDataType>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>UsageCountSinceLastCalibration</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPUsageCountSinceLastCalibration</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UsageStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>Yes</Mandatory>
			<EnumType>PIPTestInstrumentUsageStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendTable</Name>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>WarrantyExpiryDate</Name>
			<ExtendedDataType>PIPTestInstrumentWarrantyExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WarrantyNumber</Name>
			<ExtendedDataType>PIPTestInstrumentWarrantyNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSInputAreaId</Name>
			<ExtendedDataType>WMSInputAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
			<Label>@SYS113636</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SkipCheckTestInstrumentOnOrder</Name>
			<ExtendedDataType>PIPSkipCheckTestInstrumentOnOrder</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTestInstrumentIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TagNumber</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TestInstrumentId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTable</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestInstrument</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventTestInstrument</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PIPIsTagNumRequired</Name>
					<RelatedField>PIPIsTagNumRequired</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestInstrumentId</Name>
					<SourceEDT>InventTestInstrumentId</SourceEDT>
					<Field>TestInstrumentId</Field>
					<RelatedField>TestInstrumentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TestInstrumentIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPInventCalibrationGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PIPInventCalibrationGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalibrationGroup</Name>
					<Field>CalibrationGroup</Field>
					<RelatedField>Group</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventCalibrationGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPInventCalibrationProcedure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PIPInventCalibrationProcedure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CalibrationProcedure</Name>
					<Field>CalibrationProcedure</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalibrationProcedureNameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPInventTestDepartment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PIPInventTestDepartment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestDepartment</Name>
					<Field>TestDepartment</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTestDeptNameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPInventTestLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PIPInventTestLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestLocation</Name>
					<Field>TestLocation</Field>
					<RelatedField>LocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTestLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTable</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WMSStoreArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WMSStoreArea</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSInputAreaId</Name>
					<Field>WMSInputAreaId</Field>
					<RelatedField>storeAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>storeAreaType</Name>
					<RelatedField>storeAreaType</RelatedField>
					<ValueStr>WMSStoreAreaType::Input</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>