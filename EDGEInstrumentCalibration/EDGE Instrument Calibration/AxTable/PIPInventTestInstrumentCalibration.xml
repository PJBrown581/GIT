<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestInstrumentCalibration</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventTestInstrumentCalibration extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calibrationProcedure</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the Calibration procedure record associated with the current buffer.
    /// </summary>
    /// <returns>
    ///     A record from the <c>PIPInventCalibrationProcedure</c> table.
    /// </returns>
    public PIPInventCalibrationProcedure calibrationProcedure()
    {
        return PIPInventCalibrationProcedure::find(this.InventCalibrationProcedure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Copies all attachments to the current record from the specified buffer.
    /// </summary>
    /// <param name="_common">
    ///     The relevant table buffer.
    /// </param>
    private void copyAttachments(Common _common)
    {
        DocuRef  docuRef;
    
        if (this.RecId && _common && DocuRef::exist(curext(), this.TableId, this.RecId) && DocuRef::exist(curext(), _common.TableId, _common.RecId))
        {
            info("@PIP819");
        }
    
        while select * from docuRef
            where docuRef.RefCompanyId  == curext()
                && docuRef.RefTableId   == _common.TableId
                && docuRef.RefRecId     == _common.RecId
        {
            DocuRef::createFromDocuRef(docuRef, this.RecId, this.TableId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        PIPInventTestInstrumentTag  inventTestInstrumentTag = this.inventTestInstrumentTag(true);
    
        super();
        if (this.isInOpenState())
        {
            ttsBegin;
            inventTestInstrumentTag.UsageStatus = PIPTestInstrumentUsageStatus::Available;
            inventTestInstrumentTag.update();
            ttsCommit;
        }
        else
        {
            throw error("@PIP818");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayInstrumentDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the test instrument description.
    /// </summary>
    /// <returns>
    ///     The associated test instrument's description.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPInstrumentDescription displayInstrumentDescription()
    {
        return this.inventTestInstrumentTag().testInstrumentType().Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProcedureDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the procedure description from the test procedure name.
    /// </summary>
    /// <returns>
    ///     The associated test procedure name.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPDescription displayProcedureDescription()
    {
        return this.calibrationProcedure().Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProcedureNote</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the procedure note from the test procedure name.
    /// </summary>
    /// <returns>
    ///     The associated test procedure note.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPCalibrationProcedureNote displayProcedureNote()
    {
        return this.calibrationProcedure().Procedure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTagDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the test instrument tag description.
    /// </summary>
    /// <returns>
    ///     The associated test instrument tag's description.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display PIPTagDescription displayTagDescription()
    {
        return this.inventTestInstrumentTag().Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTestInstrumentTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes values for the current buffer from the <c>PIPInventTestInstrumentTag</c> table.
    /// </summary>
    public void initFromInventTestInstrumentTag()
    {
        PIPInventTestInstrumentTag  inventTestInstrumentTag = this.inventTestInstrumentTag();
    
        if (inventTestInstrumentTag)
        {
            this.InventCalibrationProcedure     = inventTestInstrumentTag.CalibrationProcedure;
            this.TestProcedure                  = inventTestInstrumentTag.TestProcedure;
            this.CalibrationCompletionAssignee  = inventTestInstrumentTag.CalibrationCompletionAssignee;
            this.CalibrationApprovalAssignee    = inventTestInstrumentTag.CalibrationApprovalAssignee;
            this.Specification                  = inventTestInstrumentTag.Specification;
            this.Note                           = inventTestInstrumentTag.Note;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        PIPInventTestInstrumentTag  inventTestInstrumentTag = this.inventTestInstrumentTag(true);
    
        super();
    
        this.copyAttachments(inventTestInstrumentTag);
    
        inventTestInstrumentTag.UsageStatus         = PIPTestInstrumentUsageStatus::Calibration;
        inventTestInstrumentTag.CalibrationNextDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        inventTestInstrumentTag.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTestInstrumentTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the Test instrument tag record associated with the current buffer.
    /// </summary>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record from the <c>PIPInventTestInstrumentTag</c> table.
    /// </returns>
    public PIPInventTestInstrumentTag inventTestInstrumentTag(boolean _forUpdate = false)
    {
        return PIPInventTestInstrumentTag::findByInstrumentTag(
                                            this.InventTestInstrument,
                                            this.TestInstrumentTagNumber,
                                            _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInOpenState</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether current calibration record is open.
    /// </summary>
    /// <returns>
    ///     true if the open; otherwise, false.
    /// </returns>
    public boolean isInOpenState()
    {
        return (this.CalibrationResult == PIPInventTestCalibrationResult::Open
                || (this.CalibrationResult == PIPInventTestCalibrationResult::Pass
                    || this.CalibrationResult == PIPInventTestCalibrationResult::LimitedPass
                    && !this.CalibrationApprovedDate
                    && !this.CalibrationApprovedBy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        PIPInventTestInstrumentCalibration calibrationRecordOrig = this.orig();
    
        super(_fieldId);
    
        switch(_fieldId)
        {
            case fieldNum(PIPInventTestInstrumentCalibration, TestInstrumentTagNumber) :
                if (this.TestInstrumentTagNumber && this.TestInstrumentTagNumber != calibrationRecordOrig.TestInstrumentTagNumber)
                {
                    this.initFromInventTestInstrumentTag();
                    this.copyAttachments(this.inventTestInstrumentTag());
                }
                break;
            case fieldNum(PIPInventTestInstrumentCalibration, InventCalibrationProcedure) :
                if (this.InventCalibrationProcedure && this.InventCalibrationProcedure != calibrationRecordOrig.InventCalibrationProcedure)
                {
                    this.copyAttachments(this.calibrationProcedure());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        PIPInventTestInstrumentTag  inventTestInstrumentTag = this.inventTestInstrumentTag();
        boolean                     ret;
    
        ret = super();
    
        if (ret && !this.RecId && PIPInventTestInstrumentCalibration::existOpenCalibrationRecord(this.InventTestInstrument, this.TestInstrumentTagNumber))
        {
            ret = checkFailed(strFmt("@PIP767", this.InventTestInstrument, this.TestInstrumentTagNumber));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>PIPInventTestInstrumentCalibration</c> table exists.
    /// </summary>
    /// <param name="_testInstrumentCalibrationRecId">
    ///    The surrogate record id for the test instrument calibration record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PIPTestInstrumentCalibrationRecId _testInstrumentCalibrationRecId)
    {
        return _testInstrumentCalibrationRecId
            && (select firstonly PIPInventTestInstrumentCalibration
                    where PIPInventTestInstrumentCalibration.RecId == _testInstrumentCalibrationRecId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existClosedCalibrationRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether any closed calibration records exist based on the test instrument ID and the tag number.
    /// </summary>
    /// <param name="_inventTestInstrumentId">
    ///     The test instrument ID to look for.
    /// </param>
    /// <param name="_testInstrumentTagNumber">
    ///     The test instrument tag number to look for.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existClosedCalibrationRecord(
        InventTestInstrumentId      _inventTestInstrumentId,
        PIPTestInstrumentTagNumber  _testInstrumentTagNumber)
    {
        return (_inventTestInstrumentId && _testInstrumentTagNumber)
            && (select firstonly PIPInventTestInstrumentCalibration
                    where PIPInventTestInstrumentCalibration.InventTestInstrument               == _inventTestInstrumentId
                        && PIPInventTestInstrumentCalibration.TestInstrumentTagNumber           == _testInstrumentTagNumber
                        && (PIPInventTestInstrumentCalibration.CalibrationResult                == PIPInventTestCalibrationResult::Fail
                            || (PIPInventTestInstrumentCalibration.CalibrationResult            == PIPInventTestCalibrationResult::Pass
                                || PIPInventTestInstrumentCalibration.CalibrationResult         == PIPInventTestCalibrationResult::LimitedPass
                                && PIPInventTestInstrumentCalibration.CalibrationApprovedDate))).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenCalibrationRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether an open calibration record exists based on the test instrument ID and the tag number.
    /// </summary>
    /// <param name="_inventTestInstrumentId">
    ///     The test instrument ID to look for.
    /// </param>
    /// <param name="_testInstrumentTagNumber">
    ///     The test instrument tag number to look for.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existOpenCalibrationRecord(
        InventTestInstrumentId      _inventTestInstrumentId,
        PIPTestInstrumentTagNumber  _testInstrumentTagNumber)
    {
        return (_inventTestInstrumentId && _testInstrumentTagNumber)
            && (select firstonly PIPInventTestInstrumentCalibration
                    where PIPInventTestInstrumentCalibration.InventTestInstrument               == _inventTestInstrumentId
                        && PIPInventTestInstrumentCalibration.TestInstrumentTagNumber           == _testInstrumentTagNumber
                        && (PIPInventTestInstrumentCalibration.CalibrationResult                == PIPInventTestCalibrationResult::Open
                            || (PIPInventTestInstrumentCalibration.CalibrationResult            == PIPInventTestCalibrationResult::Pass
                                || PIPInventTestInstrumentCalibration.CalibrationResult         == PIPInventTestCalibrationResult::LimitedPass
                                && !PIPInventTestInstrumentCalibration.CalibrationApprovedDate))).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PIPInventTestInstrumentCalibration</c> table.
    /// </summary>
    /// <param name="_testInstrumentCalibrationRecId">
    ///    The surrogate key value to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PIPInventTestInstrumentCalibration</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentCalibration find(PIPTestInstrumentCalibrationRecId _testInstrumentCalibrationRecId, boolean _forUpdate = false)
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration;
    
        testInstrumentCalibration.selectForUpdate(_forUpdate);
    
        if (_testInstrumentCalibrationRecId)
        {
            select firstonly testInstrumentCalibration
                where testInstrumentCalibration.RecId == _testInstrumentCalibrationRecId;
        }
    
        return testInstrumentCalibration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCalibrationByTestInstrumentTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in the <c>PIPInventTestInstrumentCalibration</c> table based on
    ///     the test instrument ID and the tag number.
    /// </summary>
    /// <param name="_inventTestInstrumentId">
    ///     The test instrument ID to look for.
    /// </param>
    /// <param name="_testInstrumentTagNumber">
    ///     The test instrument tag number to look for.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPInventTestInstrumentCalibration</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentCalibration findCalibrationByTestInstrumentTag(
        InventTestInstrumentId      _inventTestInstrumentId,
        PIPTestInstrumentTagNumber  _testInstrumentTagNumber,
        boolean                     _forUpdate = false)
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration;
    
        testInstrumentCalibration.selectForUpdate(_forUpdate);
    
        if (_inventTestInstrumentId && _testInstrumentTagNumber)
        {
            select firstonly testInstrumentCalibration
                order by ModifiedDateTime desc, CalibrationApprovedDate desc, CalibrationCompletedDate desc
                where testInstrumentCalibration.InventTestInstrument        == _inventTestInstrumentId
                    && testInstrumentCalibration.TestInstrumentTagNumber    == _testInstrumentTagNumber;
        }
    
        return testInstrumentCalibration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastFailedCalibrationRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the last failed calibration record based on the test instrument ID and the tag number.
    /// </summary>
    /// <param name="_inventTestInstrumentId">
    ///     The test instrument ID to look for.
    /// </param>
    /// <param name="_testInstrumentTagNumber">
    ///     The test instrument tag number to look for.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPInventTestInstrumentCalibration</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentCalibration findLastFailedCalibrationRecord(
        InventTestInstrumentId      _inventTestInstrumentId,
        PIPTestInstrumentTagNumber  _testInstrumentTagNumber,
        boolean                     _forUpdate = false)
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration;
    
        testInstrumentCalibration.selectForUpdate(_forUpdate);
    
        if (_inventTestInstrumentId && _testInstrumentTagNumber)
        {
            select firstonly testInstrumentCalibration
                order by CalibrationCompletedDate desc
                where testInstrumentCalibration.InventTestInstrument        == _inventTestInstrumentId
                    && testInstrumentCalibration.TestInstrumentTagNumber    == _testInstrumentTagNumber
                    && testInstrumentCalibration.CalibrationResult          == PIPInventTestCalibrationResult::Fail
                    && testInstrumentCalibration.CalibrationCompletedDate
                    && testInstrumentCalibration.CalibrationCompletedBy;
        }
    
        return testInstrumentCalibration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenCalibrationRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds an open test instrument calibration record based on the test instrument ID and the tag number.
    /// </summary>
    /// <param name="_inventTestInstrumentId">
    ///     The test instrument ID to look for.
    /// </param>
    /// <param name="_testInstrumentTagNumber">
    ///     The test instrument tag number to look for.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPInventTestInstrumentCalibration</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentCalibration findOpenCalibrationRecord(
        InventTestInstrumentId              _inventTestInstrumentId,
        PIPTestInstrumentTagNumber          _testInstrumentTagNumber,
        boolean                             _forUpdate = false)
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration;
    
        testInstrumentCalibration.selectForUpdate(_forUpdate);
    
        if (_inventTestInstrumentId && _testInstrumentTagNumber)
        {
            select firstonly testInstrumentCalibration
                where testInstrumentCalibration.InventTestInstrument        == _inventTestInstrumentId
                    && testInstrumentCalibration.TestInstrumentTagNumber    == _testInstrumentTagNumber
                    && (testInstrumentCalibration.CalibrationResult         == PIPInventTestCalibrationResult::Open
                        || (testInstrumentCalibration.CalibrationResult     == PIPInventTestCalibrationResult::Pass
                            || testInstrumentCalibration.CalibrationResult  == PIPInventTestCalibrationResult::LimitedPass
                            && !testInstrumentCalibration.CalibrationApprovedDate));
        }
    
        return testInstrumentCalibration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOlderCalibrationRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retreives an older calibration record for the same test instrument tag, if one exists.
    /// </summary>
    /// <param name="_currentCalibrationRecord">
    ///     The current calibration record to be used as reference.
    /// </param>
    /// <returns>
    ///     A record in the <c>PIPInventTestInstrumentCalibration</c> table; otherwise, an empty record.
    /// </returns>
    public static PIPInventTestInstrumentCalibration getOlderCalibrationRecord(PIPInventTestInstrumentCalibration _currentCalibrationRecord)
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration;
    
        if (_currentCalibrationRecord)
        {
            select firstonly testInstrumentCalibration
                order by CalibrationApprovedDate desc, CalibrationCompletedDate desc
                where testInstrumentCalibration.InventTestInstrument        == _currentCalibrationRecord.InventTestInstrument
                    && testInstrumentCalibration.TestInstrumentTagNumber    == _currentCalibrationRecord.TestInstrumentTagNumber
                    && testInstrumentCalibration.RecId                      != _currentCalibrationRecord.RecId
                    && testInstrumentCalibration.CalibrationApprovedDate;
        }
    
        return testInstrumentCalibration;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPTIC</ConfigurationKey>
	<DeveloperDocumentation>@PIP701</DeveloperDocumentation>
	<Label>@PIP710</Label>
	<TitleField1>InventTestInstrument</TitleField1>
	<TitleField2>TestInstrumentTagNumber</TitleField2>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalibrationApprovedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationCompletedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationStartedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventCalibrationProcedure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTestInstrument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentTagNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalibrationApprovalData</Name>
			<Label>@PIP709</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalibrationApprovalAssignee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationApprovedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationApprovedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalibrationCompletionData</Name>
			<Label>@PIP708</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalibrationCompletionAssignee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationCompletedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationCompletedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationResult</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalibrationProcess</Name>
			<Label>@PIP706</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventCalibrationProcedure</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayProcedureDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayProcedureNote</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CalibrationStartData</Name>
			<Label>@PIP707</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalibrationStartedBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalibrationStartedDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InstrumentData</Name>
			<Label>@PIP705</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTestInstrument</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayInstrumentDescription</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestInstrumentTagNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayTagDescription</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Notes</Name>
			<Label>@SYS81105</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Specification</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Note</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TestProcedure</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationApprovalAssignee</Name>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@PIP652</Label>
			<StringSize>8</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationApprovedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@PIP702</Label>
			<StringSize>8</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationApprovedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPCalibrationApprovedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationCompletedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@PIP703</Label>
			<StringSize>8</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationCompletedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPCalibrationCompletedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationCompletionAssignee</Name>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@PIP653</Label>
			<StringSize>8</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalibrationResult</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>PIPInventTestCalibrationResult</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CalibrationStartedBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@PIP704</Label>
			<StringSize>8</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalibrationStartedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PIPCalibrationStartedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventCalibrationProcedure</Name>
			<ExtendedDataType>PIPCalibrationProcedureName</ExtendedDataType>
			<StringSize>30</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTestInstrument</Name>
			<ExtendedDataType>InventTestInstrumentId</ExtendedDataType>
			<Label>@PIP604</Label>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Note</Name>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@PIP677</Label>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Specification</Name>
			<ExtendedDataType>Notes</ExtendedDataType>
			<Label>@SYS17781</Label>
			<StringSize>-1</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestInstrumentTagNumber</Name>
			<ExtendedDataType>PIPTestInstrumentTagNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TestProcedure</Name>
			<ExtendedDataType>PIPInventTestProcedure</ExtendedDataType>
			<StringSize>-1</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTestInstrument</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>InventTestInstrument</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>PIPIsTagNumRequired</Name>
					<RelatedField>PIPIsTagNumRequired</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTestInstrument</Name>
					<SourceEDT>InventTestInstrumentId</SourceEDT>
					<Field>InventTestInstrument</Field>
					<RelatedField>TestInstrumentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TestInstrumentIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPInventCalibrationProcedure</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PIPInventCalibrationProcedure</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventCalibrationProcedure</Name>
					<Field>InventCalibrationProcedure</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CalibrationProcedureNameIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PIPInventTestInstrumentTag</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PIPInventTestInstrumentTag</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTestInstrument</Name>
					<Field>InventTestInstrument</Field>
					<RelatedField>TestInstrumentId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TestInstrumentTagNumber</Name>
					<Field>TestInstrumentTagNumber</Field>
					<RelatedField>TagNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>