<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPCalibrationLabelCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPCalibrationLabelCreator</c> class creates sample calibration labels given an XML text.
/// </summary>
public class PIPCalibrationLabelCreator
{
    str             templateXML;
    XmlDocument     templateXMLDocument;

    #define.DocumentName("CalibrationSampleLabels")
    #define.ElementRecord("CalibrationLabelRecord")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLabel</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a calibration label layout.
    /// </summary>
    /// <param name="_recordNode">
    ///     The XML node from the source XML document containing the label record.
    /// </param>
    private void createLabel(XmlNode _recordNode)
    {
        XmlNodeList                     xmlFieldList  = _recordNode.childNodes();
        XmlNode                         xmlField;
        PIPInventCalibrationLabelLayout labelLayout;
        PIPLabelLayoutId                labelLayoutId;
        DictTable                       dictTable = new DictTable(tableNum(PIPInventCalibrationLabelLayout));
        int                             i;
        boolean                         existsLabel;
        #define.FieldLabelLayoutId("LabelLayoutId")
    
        ttsBegin;
    
        for (i = 0; i < xmlFieldList.length(); i++)
        {
            xmlField = xmlFieldList.item(i);
    
            if (xmlField.name() == #FieldLabelLayoutId)
            {
                labelLayoutId   = xmlField.innerText();
                existsLabel     = PIPInventCalibrationLabelLayout::exist(labelLayoutId);
                if (existsLabel)
                {
                    break;
                }
            }
    
            labelLayout.(dictTable.fieldName2Id(xmlField.name())) = xmlField.innerText();
        }
    
        if (!existsLabel)
        {
            labelLayout.insert();
        }
    
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateXml</Name>
				<Source><![CDATA[
    public str parmTemplateXml(str _templateXml = templateXml)
    {
        templateXml = _templateXml;
    
        return templateXml;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        XmlNodeList                     templateNodes;
        XmlNode                         templateNode;
        int                             i;
        Map                             templateNodeMap = new Map(Types::String, Types::Class);
    
        templateNodes = this.templateXmlDocument().documentElement().childNodes();
    
        for (i = 0; i < templateNodes.length(); i++)
        {
            templateNode = templateNodes.item(i);
    
            if (templateNode.name() == #ElementRecord)
            {
                this.createLabel(templateNode);
            }
            else
            {
                throw error(strFmt("@PIP472", templateNode.name(), this.templateXmlDocument().documentElement().name()));
            }
        }

        info("@PIP3048");
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateXmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>XmlDocument</c> for the given template XML text.
    /// </summary>
    /// <returns>
    ///    The <c>XmlDocument</c> for the given template XMl text.
    /// </returns>
    private XmlDocument templateXmlDocument()
    {
        if (!templateXmlDocument)
        {
            templateXmlDocument = XmlDocument::newXml(templateXml, true);
        }
    
        return templateXmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the XML template has been defined and is valid XML.
    /// </summary>
    /// <returns>
    ///    true if the XML template has defined and is valid XML; otherwise, false.
    /// </returns>
    private boolean validateTemplate()
    {
        boolean         ret = true;
        XmlParseError   parseError;
    
        if (ret && !templateXml)
        {
            ret = checkFailed("@PIP481");
        }
    
        if (ret)
        {
            parseError = this.templateXmlDocument().parseError();
            if (parseError.line())
            {
                ret = checkFailed(strFmt("@PIP482", parseError.line(), parseError.linePos()));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPCalibrationLabelCreator construct()
    {
        return new PIPCalibrationLabelCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPCalibrationLabelCreator  creator = PIPCalibrationLabelCreator::construct();
    
        str predefinedTemplate;
    
        [predefinedTemplate] = SysResource::getResourceNodeData(SysResource::getResourceNode(resourceStr(PIPInstrumentCalibrationSampleLabel)));
    
        creator.parmTemplateXml(predefinedTemplate);
    
        if (creator.validateTemplate())
        {
            creator.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>