<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestCalibrationLabel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventTestCalibrationLabel</c> class is responsible for printing calibration labels from test instrument tags
///     or calibration records based on a label layout defined on the test instrument.
/// </summary>
class PIPInventTestCalibrationLabel extends RunBase
{
    RecordSortedList                    list;

    PIPInventTestInstrumentCalibration  testInstrumentCalibration;
    PIPInventTestInstrumentTag          testInstrumentTag;
    PIPInventCalibrationLabelLayout     labelLayout;
    boolean                             useCustomFieldName;

    PIPLabelPrintDestination            labelPrintDestination;
    boolean                             downloadAsFile;
    PrinterName                         labelPrinterName;

    DialogField                         fieldPrintDestination;
    DialogField                         fieldDownloadAsFile;
    DialogField                         fieldPrinterName;

    int                                 len;
   
    // label file format for ZPL printers
    #define.zpl('.zpl')
    #file

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendNameIfUserId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Appends the field value with the user name.
    /// </summary>
    /// <param name="_tableField">
    ///     The field marker
    /// </param>
    /// <param name="_fieldValue">
    ///     The field value to be appended to.
    /// </param>
    /// <returns>
    ///     A string with user id followed by the user name; otherwise same field value as was passes to the method.
    /// </returns>
    private str appendNameIfUserId(TmpSysTableField _tableField, str _fieldValue)
    {
        SysUserInfo sysUserInfo;
        UserInfo    userInfo;
        str         replacementStr = _fieldValue;
    
        switch (_tableField.FieldName)
        {
            case fieldId2name(tableNum(PIPInventTestInstrumentCalibration), fieldNum(PIPInventTestInstrumentCalibration, CalibrationApprovalAssignee))  :
            case fieldId2name(tableNum(PIPInventTestInstrumentCalibration), fieldNum(PIPInventTestInstrumentCalibration, CalibrationApprovedBy))        :
            case fieldId2name(tableNum(PIPInventTestInstrumentCalibration), fieldNum(PIPInventTestInstrumentCalibration, CalibrationCompletedBy))       :
            case fieldId2name(tableNum(PIPInventTestInstrumentCalibration), fieldNum(PIPInventTestInstrumentCalibration, CalibrationCompletionAssignee)):
            case fieldId2name(tableNum(PIPInventTestInstrumentCalibration), fieldNum(PIPInventTestInstrumentCalibration, CalibrationStartedBy))         :
            case fieldId2name(tableNum(PIPInventTestInstrumentTag), fieldNum(PIPInventTestInstrumentTag, CalibrationApprovalAssignee))                  :
            case fieldId2name(tableNum(PIPInventTestInstrumentTag), fieldNum(PIPInventTestInstrumentTag, CalibrationCompletionAssignee))                :
                sysUserInfo = SysUserInfo::find(replacementStr);
                if (sysUserInfo)
                {
                    select firstOnly Name from userInfo
                        where userInfo.id == sysUserInfo.Id;
    
                    replacementStr += ", " + userInfo.name;
                    return replacementStr;
                }
                break;
        }
    
        return _fieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        Object          fieldPrintDestControl;
    
        InventParameters parameters = InventParameters::find();
        labelPrintDestination   = parameters.PIPLabelPrintDestination;
        labelPrinterName        = parameters.PIPLabelPrinterName;
        
        dialog.caption("@PIP1030");
    
        fieldPrintDestination   = dialog.addFieldValue(enumStr(PIPLabelPrintDestination), labelPrintDestination);
        fieldPrinterName        = dialog.addFieldValue(extendedTypeStr(Name), labelPrinterName);
    
        fieldPrintDestControl   = fieldPrintDestination.control();
    
        fieldPrinterName.enabled(labelPrintDestination == PIPLabelPrintDestination::Printer);
    
        fieldPrintDestination.control().registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(PIPInventTestCalibrationLabel, fieldPrintDestination_modified),
            this);
    
        fieldPrinterName.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(PIPInventTestCalibrationLabel, fieldPrinterName_lookup),
            this);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldPrintDestination_modified</Name>
				<Source><![CDATA[
    private boolean fieldPrintDestination_modified(FormComboBoxControl _ctrl)
    {
        boolean ret = _ctrl.modified();
        boolean sendToPrinter;
    
        labelPrintDestination   = fieldPrintDestination.value();
    
        sendToPrinter = (labelPrintDestination == PIPLabelPrintDestination::Printer);
    
        if (!sendToPrinter)
        {
            fieldPrinterName.value("");
        }
    
        fieldPrinterName.enabled(sendToPrinter);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldPrinterName_lookup</Name>
				<Source><![CDATA[
    private void fieldPrinterName_lookup(FormStringControl _ctrl)
    {
        WHSDocumentRoutingLine::lookupPrinters(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldList</Name>
				<Source><![CDATA[
    public RecordSortedList getFieldList()
    {
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = true;

        labelPrintDestination   = fieldPrintDestination.value();
        labelPrinterName        = fieldPrinterName.value();

        if (labelPrintDestination == PIPLabelPrintDestination::Printer)
        {
            if (labelPrinterName)
            {
                if (!PIPInventTestCalibrationLabel::isActivePrinter(labelPrinterName))
                {
                    ret = checkFailed("@PIP1043");
                }
            }
            else
            {
                ret = checkFailed("@PIP1042");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReplacementString</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Replaces field markers in the calibration label with the appropriate field label and value.
    /// </summary>
    /// <param name="tmpField">
    ///     The field marker to be replaced.
    /// </param>
    /// <param name="originalStr">
    ///     The original string representation of the calibration label with field markers.
    /// </param>
    /// <returns>
    ///     The final string that will be part of the label for the given field marker.
    /// </returns>
    private str getReplacementString(TmpSysTableField tmpField, str originalStr)
    {
        str replacementStr, outputstr, fieldValue;
    
        switch(tmpField.TableName)
        {
            case tableStr(PIPInventTestInstrumentCalibration):
                fieldValue = testInstrumentCalibration.(tmpField.FieldId);
                fieldValue = this.appendNameIfUserId(tmpField, fieldValue);
                fieldValue = this.getValueIfEnum(tmpField, fieldValue);
                if (useCustomFieldName)
                {
                    replacementStr = strFmt(' %1', fieldValue);
                }
                else
                {
                    replacementStr = strFmt('%1: %2', tmpField.FieldLabel, fieldValue);
                }
                break;

            case tableStr(PIPInventTestInstrumentTag):
                fieldValue = testInstrumentTag.(tmpField.FieldId);
                fieldValue = this.appendNameIfUserId(tmpField, fieldValue);
                fieldValue = this.getValueIfEnum(tmpField, fieldValue);
                if (useCustomFieldName)
                {
                    replacementStr = strFmt(' %1', fieldValue);
                }
                else
                {
                    replacementStr = strFmt('%1: %2', tmpField.FieldLabel, fieldValue);
                }
                break;
        }
    
        outputStr = strReplace(originalStr, strFmt('$%1$', tmpField.FieldName), replacementStr);
    
        return outputstr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueIfEnum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the correct string enum value if field is an enumerator.
    /// </summary>
    /// <param name="_tableField">
    ///     The field marker.
    /// </param>
    /// <param name="_fieldValue">
    ///     The field value to be cheked for being an enumerator.
    /// </param>
    /// <returns>
    ///     A string enum value.
    /// </returns>
    private str getValueIfEnum(TmpSysTableField _tableField, str _fieldValue)
    {
        str enumValue;
    
        switch (_tableField.TableName)
        {
            case tableStr(PIPInventTestInstrumentCalibration):
                if (_tableField.FieldName == fieldId2name(tableNum(PIPInventTestInstrumentCalibration), fieldNum(PIPInventTestInstrumentCalibration, CalibrationResult)))
                {
                    enumValue = enum2str(testInstrumentCalibration.(_tableField.FieldId));
                }
                break;

            case tableStr(PIPInventTestInstrumentTag):
                switch(_tableField.FieldName)
                {
                    case fieldId2name(tableNum(PIPInventTestInstrumentTag), fieldNum(PIPInventTestInstrumentTag, CalibrationMethod)):
                    case fieldId2name(tableNum(PIPInventTestInstrumentTag), fieldNum(PIPInventTestInstrumentTag, IsForRestrcitedUse)):
                    case fieldId2name(tableNum(PIPInventTestInstrumentTag), fieldNum(PIPInventTestInstrumentTag, CalibrationRequired)):
                    case fieldId2name(tableNum(PIPInventTestInstrumentTag), fieldNum(PIPInventTestInstrumentTag, UsageStatus)):
                        enumValue = enum2str(testInstrumentTag.(_tableField.FieldId));
                }
                break;
        }
    
        if (enumValue)
        {
            return enumValue;
        }
        else
        {
            return _fieldValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMenuFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds a list of fields from a given table for a pop-up menu.
    /// </summary>
    /// <param name="_tableId">
    ///     Table Id for the table whose fields need to be included in the pop-up menu.
    /// </param>
    /// <returns>
    ///     A record sorted list containing all fields from the given table.
    /// </returns>
    RecordSortedList initMenuFields(TableId _tableId)
    {
        TmpSysTableField    tmpField;
        DictField           dictField;
        DictTable           dictTable   = new DictTable(_tableId);
        int                 length      = dictTable.fieldCnt();
        int                 i;
    
        for (i = 1; i <= length; ++i)
        {
            dictField = new DictField(_tableId, dictTable.fieldCnt2Id(i));
    
            if (!dictField.isSystem())
            {
                tmpField.TableName  = dictTable.name();
                tmpField.FieldId    = dictField.id();
                tmpField.FieldName  = dictField.name();
                tmpField.FieldLabel = dictField.label();
    
                list.ins(tmpField);
            }
        }
    
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    
        list = new RecordSortedList(tableNum(TmpSysTableField));
        list.sortOrder(fieldNum(TmpSysTableField, FieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalibrationRecord</Name>
				<Source><![CDATA[
    public PIPInventTestInstrumentCalibration parmCalibrationRecord(PIPInventTestInstrumentCalibration _testInstrumentCalibration = testInstrumentCalibration)
    {
        testInstrumentCalibration = _testInstrumentCalibration;
        return testInstrumentCalibration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTestInstrumentTag</Name>
				<Source><![CDATA[
    public PIPInventTestInstrumentTag parmTestInstrumentTag(PIPInventTestInstrumentTag _testInstrumentTag = testInstrumentTag)
    {
        testInstrumentTag = _testInstrumentTag;
        return testInstrumentTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prints the calibration label by sending the ZPL string to the printer or saving it to a file.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     Thrown when label layout is not defined on the test instrument.
    /// </exception>
    public void printDocument()
    {
        str finalStr;
    
        labelLayout = PIPInventCalibrationLabelLayout::find(testInstrumentTag.testInstrumentType().PIPInventCalibrationLabelLayout);
    
        if (labelLayout)
        {
            finalStr = this.translate(labelLayout.zpl);
    
            if (labelPrinterName)
            {
                WhsDocumentRouting::printLabelToPrinter(labelPrinterName, finalStr);
            }
            else
            {
                this.writeToFile(finalStr);
            }
        }
        else
        {
            throw error("@PIP1035");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.initMenuFields(tableNum(PIPInventTestInstrumentCalibration));
        this.initMenuFields(tableNum(PIPInventTestInstrumentTag));
    
        this.parmCalibrationRecord(testInstrumentCalibration);
        this.parmTestInstrumentTag(testInstrumentTag);
    
        this.printDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>translate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Translates the ZPL string containing field markers into a ZPL string with the appropriate field names and field values
    ///     from the records.
    /// </summary>
    /// <param name="_inputStr">
    ///     The ZPL string containing field markers from the label layout.
    /// </param>
    /// <returns>
    ///     The translated ZPL string with the field names and values.
    /// </returns>
    str translate(str _inputStr)
    {
        TmpSysTableField    tmpField;
        FieldLabel          label;
        str                 outputStr;
    
        outputStr           = _inputStr;
        useCustomFieldName  = !labelLayout.UseFieldName;
    
        list.first(tmpField);
    
        while (tmpField.FieldLabel != '')
        {
            outputStr           = this.getReplacementString(tmpField, outputStr);
            label               = tmpField.FieldLabel;
    
            tmpField.clear();
    
            list.next(tmpField);
    
            if (label == tmpField.FieldLabel)
            {
                break;
            }
        }
    
        return outputStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActivePrinter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if the given printer exists and is active.
    /// </summary>
    /// <param name = "_labelPrinterName">The name of the printer to check.</param>
    /// <returns>true if <paramref name="_labelPrinterName"/> exists and is active; otherwise, false.</returns>
    public static boolean isActivePrinter(Name _labelPrinterName)
    {
        return (select SysCorpNetPrinters where SysCorpNetPrinters.PrinterName == _labelPrinterName
                    && SysCorpNetPrinters.PrinterPath != ""
                    && SysCorpNetPrinters.Active == NoYesCombo::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToFile</Name>
				<Source><![CDATA[
    private void writeToFile(str label)
    {
        str fileName = testInstrumentCalibration.InventTestInstrument + '-' + testInstrumentTag.TagNumber + #zpl;
        System.IO.Stream labelStream = new System.IO.MemoryStream(System.Text.Encoding::UTF8.GetBytes(label));
        File::SendFileToUser(labelStream, fileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventTestCalibrationLabel construct()
    {
        return new PIPInventTestCalibrationLabel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration;
        PIPInventTestInstrumentTag          testInstrumentTag;
        PIPInventTestCalibrationLabel       calibrationLabel = PIPInventTestCalibrationLabel::construct();
    
        if (_args.dataset())
        {
            switch(_args.dataset())
            {
                case tableNum(PIPInventTestInstrumentCalibration) :
                    testInstrumentCalibration   = _args.record();
                    testInstrumentTag           = testInstrumentCalibration.inventTestInstrumentTag();
                    calibrationLabel.parmCalibrationRecord(testInstrumentCalibration);
                    calibrationLabel.parmTestInstrumentTag(testInstrumentCalibration.inventTestInstrumentTag());
                    break;
                case tableNum(PIPInventTestInstrumentTag) :
                    testInstrumentTag           = _args.record();
                    testInstrumentCalibration   = PIPInventTestInstrumentCalibration::findCalibrationByTestInstrumentTag(testInstrumentTag.TestInstrumentId, testInstrumentTag.TagNumber);
                    break;
            }
        }
        else
        {
            throw error(error::missingRecord(tableStr(PIPInventTestInstrumentCalibration)));
        }
    
        if (calibrationLabel.prompt())
        {
            calibrationLabel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCommon</Name>
				<Source><![CDATA[
    public static PIPInventTestCalibrationLabel newFromCommon(Common _common)
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration;
        PIPInventTestInstrumentTag          testInstrumentTag;
    
        PIPInventTestCalibrationLabel       calibrationLabel = new PIPInventTestCalibrationLabel();
    
        switch(_common.TableId)
        {
            case tableNum(PIPInventTestInstrumentCalibration) :
                testInstrumentCalibration   = _common;
                testInstrumentTag           = testInstrumentCalibration.inventTestInstrumentTag();
                calibrationLabel.parmCalibrationRecord(testInstrumentCalibration);
                calibrationLabel.parmTestInstrumentTag(testInstrumentCalibration.inventTestInstrumentTag());
                break;

            case tableNum(PIPInventTestInstrumentTag) :
                testInstrumentTag           = _common;
                testInstrumentCalibration   = PIPInventTestInstrumentCalibration::findCalibrationByTestInstrumentTag(testInstrumentTag.TestInstrumentId, testInstrumentTag.TagNumber);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
    
        calibrationLabel.parmCalibrationRecord(testInstrumentCalibration);
        calibrationLabel.parmTestInstrumentTag(testInstrumentTag);

        return calibrationLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>