<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventCalibrationAnalyticsDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PIPInventCalibrationAnalyticsDataProvider
{
    StartDate       startDate;
    EndDate         endDate;
    utcdatetime     startDateTime;
    utcdatetime     endDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        endDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        startDate       = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), endDate);
        startDateTime   = datetobeginUtcDateTime(startDate, DateTimeUtil::getUserPreferredTimeZone());
        endDateTime     = datetoendUtcDateTime(endDate, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventCalibrationAnalyticsDataProvider construct()
    {
        return new PIPInventCalibrationAnalyticsDataProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public StartDate parmStartDate(StartDate _startDate = startDate)
    {
        startDate       = _startDate;
        startDateTime   = datetobeginUtcDateTime(startDate, DateTimeUtil::getUserPreferredTimeZone());

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public EndDate parmEndDate(EndDate _endDate = endDate)
    {
        endDate     = _endDate;
        endDateTime = datetoendUtcDateTime(endDate, DateTimeUtil::getUserPreferredTimeZone());
        
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpenCalibrationCountByStatus</Name>
				<Source><![CDATA[
    public container getOpenCalibrationCountByStatus()
    {
        PIPInventCalibrationAnalytics       calibrationAnalytics;          
        List                                result  = new List(Types::Container);
        percent                             value;

        while select count(RecId), CalibrationStatus from calibrationAnalytics
            group by CalibrationStatus
            where calibrationAnalytics.CreatedDateAndTime   >= startDateTime
                && calibrationAnalytics.CreatedDateAndTime  <= endDateTime
                && calibrationAnalytics.CalibrationStatus   != enum2Str(PIPCalibrationStatusFilter::Approved)
                && calibrationAnalytics.CalibrationStatus   != enum2Str(PIPCalibrationStatusFilter::CompletedAsFail)
        {
            result.addEnd([calibrationAnalytics.CalibrationStatus, any2Int(calibrationAnalytics.RecId)]);
        }       
       
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalibrationCountByResult</Name>
				<Source><![CDATA[
    public container getCalibrationCountByResult()
    {
        PIPInventCalibrationAnalytics       calibrationAnalytics;        
        List                                result  = new List(Types::Container);
        percent                             value;

        while select count(RecId), CalibrationResult from calibrationAnalytics
            group by CalibrationResult    
            where calibrationAnalytics.CreatedDateAndTime   >= startDateTime
                && calibrationAnalytics.CreatedDateAndTime  <= endDateTime
        {
            result.addEnd([enum2Str(calibrationAnalytics.CalibrationResult), any2Int(calibrationAnalytics.RecId)]);
        }
        
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFailedCalibrationPercentageByMonth</Name>
				<Source><![CDATA[
    public container getFailedCalibrationPercentageByMonth()
    {
        PIPInventCalibrationAnalytics       calibrationAnalytics;
        PIPInventCalibrationAnalytics       inventCalibrationAnalytics;
        List                                result  = new List(Types::Container);
        percent                             value;
        int                                 completedCalibrationCount;
        int                                 failedCalibrationCount;
        date                                dateForAnalytics;
        Days                                timePeriod = endDate - startDate;

        #define.DaysInMonth(30)

        if (timePeriod > #DaysInMonth)
        {
            while select count(RecId), CalibrationResult, CompletedYear, CompletedMonth from calibrationAnalytics
                group by CalibrationResult, CompletedYear, CompletedMonth
                where calibrationAnalytics.CreatedDateAndTime   >= startDateTime
                    && calibrationAnalytics.CreatedDateAndTime  <= endDateTime
                    && calibrationAnalytics.CalibrationResult   == PIPInventTestCalibrationResult::Fail
            {
                failedCalibrationCount  = any2Int(calibrationAnalytics.RecId);

                select count(RecId) from inventCalibrationAnalytics                    
                    where inventCalibrationAnalytics.CreatedDateAndTime     >= startDateTime
                        && inventCalibrationAnalytics.CreatedDateAndTime    <= endDateTime
                        && inventCalibrationAnalytics.CalibrationResult     !=  PIPInventTestCalibrationResult::Open
                        && inventCalibrationAnalytics.CompletedYear         ==  calibrationAnalytics.CompletedYear
                        && inventCalibrationAnalytics.CompletedMonth        ==  calibrationAnalytics.CompletedMonth;

                completedCalibrationCount   = any2Int(inventCalibrationAnalytics.RecId);
                value                       = decRound((failedCalibrationCount/completedCalibrationCount * 100), 2);
                dateForAnalytics            = mkDate(1, calibrationAnalytics.CompletedMonth, calibrationAnalytics.CompletedYear);

                result.addEnd([dateForAnalytics, value]);                
            }
        }
        else
        {
            while select count(RecId), CalibrationResult, CompletedMonth, CompletedWeek from calibrationAnalytics
                group by CalibrationResult, CompletedMonth, CompletedWeek
                where calibrationAnalytics.CreatedDateAndTime   >= startDateTime
                    && calibrationAnalytics.CreatedDateAndTime  <= endDateTime
                    && calibrationAnalytics.CalibrationResult   == PIPInventTestCalibrationResult::Fail
            {
                failedCalibrationCount  = any2Int(calibrationAnalytics.RecId);

                select count(RecId) from inventCalibrationAnalytics
                    where inventCalibrationAnalytics.CreatedDateAndTime     >= startDateTime
                        && inventCalibrationAnalytics.CreatedDateAndTime    <= endDateTime
                        && inventCalibrationAnalytics.CalibrationResult     !=  PIPInventTestCalibrationResult::Open
                        && inventCalibrationAnalytics.CompletedMonth        ==  calibrationAnalytics.CompletedMonth
                        && inventCalibrationAnalytics.CompletedWeek         ==  calibrationAnalytics.CompletedWeek;

                completedCalibrationCount   = any2Int(inventCalibrationAnalytics.RecId);
                value                       = decRound((failedCalibrationCount/completedCalibrationCount * 100), 2);
                dateForAnalytics            = mkDate(1, calibrationAnalytics.CompletedMonth, calibrationAnalytics.CompletedYear);
               
                result.addEnd([dateForAnalytics, value]);
            }
        }

        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTagCountByUsageStatus</Name>
				<Source><![CDATA[
    public container getTagCountByUsageStatus()
    {
        PIPInventTestInstrumentTag  testInstrumentTag;
        List                        result  = new List(Types::Container);     

        while select count(RecId), UsageStatus from testInstrumentTag
            group by testInstrumentTag.UsageStatus
        {
            result.addEnd([enum2Str(testInstrumentTag.UsageStatus), any2Int(testInstrumentTag.RecId)]);
        }
        
        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTagCountByCalibrationMethod</Name>
				<Source><![CDATA[
    public container getTagCountByCalibrationMethod()
    {
        PIPInventTestInstrumentTag  testInstrumentTag;
        List                        result  = new List(Types::Container);     

        while select count(RecId), CalibrationMethod from testInstrumentTag
            group by testInstrumentTag.CalibrationMethod
        {
            result.addEnd([enum2Str(testInstrumentTag.CalibrationMethod), any2Int(testInstrumentTag.RecId)]);
        }
        
        return result.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>