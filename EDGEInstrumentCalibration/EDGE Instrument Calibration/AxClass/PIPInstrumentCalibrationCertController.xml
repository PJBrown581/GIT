<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInstrumentCalibrationCertController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInstrumentCalibrationCertController</c> class is a controller class used to generate test instrument calibration certificates.
/// </summary>
public class PIPInstrumentCalibrationCertController extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInstrumentCalibrationContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>PIPInstrumentCalibrationCertContract</c> object of the controller class.
    /// </summary>
    /// <returns>
    ///     An object of the <c>PIPInstrumentCalibrationCertContract</c> class.
    /// </returns>
    public PIPInstrumentCalibrationCertContract getInstrumentCalibrationContract()
    {
        return this.getDataContractObject('_calibrationCertContract') as PIPInstrumentCalibrationCertContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDialogCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies whether user has cancelled further execution of batch tasks by cancellation of the batch parameters dialog.
    /// </summary>
    /// <returns>
    ///     true if the user has cancelled further processing; otherwise, false.
    /// </returns>
    public boolean isDialogCancelled()
    {
        return dialogCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
    
        this.parmClassName(classStr(PIPInstrumentCalibrationCertTaskService));
        this.parmMethodName(methodStr(PIPInstrumentCalibrationCertTaskService, process));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Makes the print controls visible on the dialog.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean showPrintSettings()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean                                 isValid;
        PIPInstrumentCalibrationCertContract    calibrationCertContract;
    
        isValid = super();
    
        calibrationCertContract = this.getInstrumentCalibrationContract();
        isValid                 = isValid && this.validateReportPrintSetting();
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReportPrintSetting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if the report print settings are correct.
    /// </summary>
    /// <returns>
    ///     true if the print settings are valid; otherwise, false.
    /// </returns>
    private boolean validateReportPrintSetting()
    {
        boolean                     isValid = true;
        SRSPrintDestinationSettings printSettings;
    
        if (this.batchInfo() && this.batchInfo().parmBatchExecute())
        {
            printSettings = this.getDataContractObject('SRSPrintDestinationSettings') as SRSPrintDestinationSettings;
    
            if (printSettings && printSettings.printMediumType() == SRSPrintMediumType::Screen)
            {
                 isValid = checkFailed("@SYS329665");
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInstrumentCalibrationCertController construct()
    {
        return new PIPInstrumentCalibrationCertController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Intializes the report controller with the given data contract
    ///     and runs the SSRS Report <c>PIPInstrumentCalibrationCertificate</c> with the given print settings.
    /// </summary>
    /// <param name="_calibrationCerContract">
    ///     Reference of the <c>PIPInstrumentCalibrationCertContract</c> contract.
    /// </param>
    /// <param name="_srsPrintDestinationSettings">
    ///     Reference of the <c>SRSPrintDestinationSettings</c> contract.
    /// </param>
    /// <param name="_launch">
    ///     True by default, determines whether the report should be launched or not.
    /// </param>
    public static void launchReport(
        PIPInstrumentCalibrationCertContract _calibrationCerContract,
        SRSPrintDestinationSettings          _srsPrintDestinationSettings,
        boolean                              _launch = true)
    {
        Args                                        args = new Args();
        SrsReportDataContract                       srsContract;
        PIPInstrumentCalibrationCertRprtContract    rdpContract;
        PIPInstrumentCalibrationController          srsController;
    
        args.record(PIPInventTestInstrumentCalibration::find(_calibrationCerContract.parmCalibrationRecId()));
        args.menuItemName(menuItemOutputStr(PIPInstrumentCalibrationCertificateBatch));
    
        srsController  = PIPInstrumentCalibrationController::newFromArgs(args);
        srsController.parmReportName(ssrsReportStr(PIPInstrumentCalibrationCertificate, Report));
        srsController.parmDialogCaption("@PIP672");
        srsContract = srsController.parmReportContract();
    
        rdpContract = srsContract.parmRdpContract() as PIPInstrumentCalibrationCertRprtContract;
        rdpContract.parmCalibrationRecId(_calibrationCerContract.parmCalibrationRecId());
    
        srsContract.parmPrintSettings(_srsPrintDestinationSettings);
        srsController.parmShowDialog(false);
    
        SrsReportDataProviderPreProcess::disableLockEscalation(tableNum(PIPInstrumentCalibrationCertTmp));
    
        if (_launch)
        {
            srsController.runReport();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Query                                   query;
        QueryRun                                queryRun;
        PIPInstrumentCalibrationCertContract    calibrationCertContract;
        SRSPrintDestinationSettings             srsPrintDestinationSettings;
        PIPInventTestInstrumentCalibration      calibrationRecord;
        PIPInstrumentCalibrationCertController  calibrationCertController = PIPInstrumentCalibrationCertController::construct();
    
        calibrationCertController.parmDialogCaption("@PIP771");
        calibrationCertController.parmExecutionMode(SysOperationExecutionMode::ReliableAsynchronous);
        calibrationCertController.prompt();
    
        if (!calibrationCertController.isDialogCancelled())
        {
            calibrationCertContract = calibrationCertController.getInstrumentCalibrationContract();
    
            query       = new Query(SysOperationHelper::base64Decode(calibrationCertContract.parmQuery()));
            queryRun    = new QueryRun(query);
    
            if (!SysQuery::countTotal(queryRun))
            {
                throw error("@PIP807");
            }
    
            while(queryRun.next())
            {
                if (calibrationCertController.parmExecutionMode() != SysOperationExecutionMode::ScheduledBatch)
                {
                    calibrationRecord = queryRun.get(tableNum(PIPInventTestInstrumentCalibration));
                    calibrationCertContract.parmCalibrationRecId(calibrationRecord.RecId);
    
                    sRSPrintDestinationSettings = calibrationCertController.getDataContractObject('SRSPrintDestinationSettings') as SRSPrintDestinationSettings;
                    PIPInstrumentCalibrationCertController::launchReport(calibrationCertContract, sRSPrintDestinationSettings);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>