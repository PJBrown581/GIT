<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInstrumentCalibrationCertDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInstrumentCalibrationCertDP</c> class pre-processes and inserts data into the temp table for the SSRS report <c>PIPInstrumentCalibrationCertificate</c>.
/// </summary>
[
    SRSReportParameterAttribute(classStr(PIPInstrumentCalibrationCertRprtContract)),
    SRSReportQueryAttribute(queryStr(PIPInstrumentCalibrationCertificate))
]
public class PIPInstrumentCalibrationCertDP extends SrsReportDataProviderPreProcess
{
    PIPInstrumentCalibrationCertTmp instrumentCalibrationCertTmp;
    CreatedTransactionId            createdTransactionId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCreatedTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the created transaction ID from the current user connection.
    /// </summary>
    /// <returns>
    ///     A <c>CreatedTransactionId</c> value.
    /// </returns>
    private CreatedTransactionId getCreatedTransactionId()
    {
        PIPInstrumentCalibrationCertTmp transTmp;
    
        // The kernel currently doesn't provide a way to get the createdtransactionid value when
        // set on a secondary userconnection. The only workaround is to physically insert a record
        // and see what value it received, then delete that record.
        this.setUserConnection(transTmp);
    
        transTmp.insert();
        createdTransactionId = transTmp.CreatedTransactionId;
    
        transTmp.delete();
    
        return createdTransactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstrumentCalibrationCertTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the data for the report from the temporary table.
    /// </summary>
    /// <returns>
    ///     The temporary table <c>PIPInstrumentCalibrationCertTmp</c>.
    /// </returns>
    [
         SRSReportDataSetAttribute('PIPInstrumentCalibrationCertTmp')
    ]
    public PIPInstrumentCalibrationCertTmp getInstrumentCalibrationCertTmp()
    {
        new SkipAOSValidationPermission().assert();
    
        select instrumentCalibrationCertTmp
            where instrumentCalibrationCertTmp.createdTransactionId == this.parmCreatedTransactionId();
    
        CodeAccessPermission::revertAssert();
    
        return instrumentCalibrationCertTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCertificateData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the temp table from the calibration record.
    /// </summary>
    /// <param name="_calibrationRecId">
    ///     The surrogate key from table <c>PIPInventTestInstrumentCalibration</c>.
    /// </param>
    private void populateCertificateData(PIPTestInstrumentCalibrationRecId _calibrationRecId)
    {
        PIPInventTestInstrumentCalibration      instrumentCalibration   = PIPInventTestInstrumentCalibration::find(_calibrationRecId);
        PIPInventTestInstrumentTag              testInstrumentTag       = instrumentCalibration.inventTestInstrumentTag();
        PIPInventCalibrationProcedure           calibrationProcedure    = instrumentCalibration.calibrationProcedure();
        PIPInventTestInstrumentCalibrationTools calibrationTools;
    
        instrumentCalibrationCertTmp.clear();
    
        // header
        instrumentCalibrationCertTmp.TestInstrumentId               = instrumentCalibration.InventTestInstrument;
        instrumentCalibrationCertTmp.InstrumentDescription          = testInstrumentTag.testInstrumentDescription();
        instrumentCalibrationCertTmp.TagNumber                      = instrumentCalibration.TestInstrumentTagNumber;
        instrumentCalibrationCertTmp.TagDescription                 = testInstrumentTag.Description;
        instrumentCalibrationCertTmp.SerialNumber                   = testInstrumentTag.SerialNumber;
        instrumentCalibrationCertTmp.Owner                          = testInstrumentTag.Owner;
        instrumentCalibrationCertTmp.AcquisitionDate                = testInstrumentTag.AcquisitionDate;
        instrumentCalibrationCertTmp.TestPrecision                  = testInstrumentTag.testPrecision();
        instrumentCalibrationCertTmp.Unit                           = testInstrumentTag.unit();
        instrumentCalibrationCertTmp.UsageStatus                    = testInstrumentTag.UsageStatus;
        instrumentCalibrationCertTmp.WMSInputAreaId                 = testInstrumentTag.WMSInputAreaId;
        instrumentCalibrationCertTmp.TestDepartment                 = testInstrumentTag.TestDepartment;
        instrumentCalibrationCertTmp.TestLocation                   = testInstrumentTag.TestLocation;
    
        // calibration details
        instrumentCalibrationCertTmp.ProcedureName                  = instrumentCalibration.InventCalibrationProcedure;
        instrumentCalibrationCertTmp.ProcedureDescription           = calibrationProcedure.Description;
        instrumentCalibrationCertTmp.ProcedureNote                  = calibrationProcedure.Procedure;
        instrumentCalibrationCertTmp.ExternalCalibratingVendor      = calibrationProcedure.ExternalCalibratingVendor;
        instrumentCalibrationCertTmp.ExternalVendName               = VendTable::find(instrumentCalibrationCertTmp.ExternalCalibratingVendor).name();
    
        instrumentCalibrationCertTmp.Manufacturer                   = testInstrumentTag.Manufacturer;
        instrumentCalibrationCertTmp.ModelNumber                    = testInstrumentTag.ModelNumber;
    
        instrumentCalibrationCertTmp.CalibrationStartedBy           = instrumentCalibration.CalibrationStartedBy;
        instrumentCalibrationCertTmp.CalibrationStartedDate         = instrumentCalibration.CalibrationStartedDate;
    
        instrumentCalibrationCertTmp.CalibrationCompletionAssignee  = instrumentCalibration.CalibrationCompletionAssignee;
        instrumentCalibrationCertTmp.CalibrationCompletedBy         = instrumentCalibration.CalibrationCompletedBy;
        instrumentCalibrationCertTmp.CalibrationCompletedDate       = instrumentCalibration.CalibrationCompletedDate;
        instrumentCalibrationCertTmp.CalibrationResult              = instrumentCalibration.CalibrationResult;
    
        instrumentCalibrationCertTmp.CalibrationApprovalAssignee    = instrumentCalibration.CalibrationApprovalAssignee;
        instrumentCalibrationCertTmp.CalibrationApprovedBy          = instrumentCalibration.CalibrationApprovedBy;
        instrumentCalibrationCertTmp.CalibrationApprovedDate        = instrumentCalibration.CalibrationApprovedDate;
    
        instrumentCalibrationCertTmp.TestProcedure                  = instrumentCalibration.TestProcedure;
        instrumentCalibrationCertTmp.Specification                  = instrumentCalibration.Specification;
        instrumentCalibrationCertTmp.Note                           = instrumentCalibration.Note;
    
        if (PIPInventTestInstrumentCalibrationTools::existByCalibration(_calibrationRecId))
        {
            RecordInsertList insertList = new RecordInsertList(instrumentCalibrationCertTmp.TableId);

            while select calibrationTools
                where calibrationTools.TestInstrumentCalibration == _calibrationRecId
            {
                instrumentCalibrationCertTmp.ToolTestInstrumentId               = calibrationTools.TestInstrumentId;
                instrumentCalibrationCertTmp.ToolTagNumber                      = calibrationTools.TestInstrumentTagNumber;
                instrumentCalibrationCertTmp.ToolInstrumentDescription          = calibrationTools.inventTestInstrument().Description;
                instrumentCalibrationCertTmp.ToolTagDescription                 = calibrationTools.tagNumDescription();
                instrumentCalibrationCertTmp.ToolLastCalibrationApprovedDate    = calibrationTools.lastCalibrationDate();
    
                insertList.add(instrumentCalibrationCertTmp);
            }

            insertList.insertDatabase();
        }
        else
        {
            instrumentCalibrationCertTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the record based on the selected criteria and populates the data into <c>PIPInstrumentCalibrationCertTmp</c> table of the report.
    /// </summary>
    public void processReport()
    {
        PIPInstrumentCalibrationCertRprtContract    contract;
    
        this.setUserConnection(instrumentCalibrationCertTmp);
        createdTransactionId = this.getCreatedTransactionId();
        this.parmCreatedTransactionId(createdTransactionId);
    
        contract = this.parmDataContract() as PIPInstrumentCalibrationCertRprtContract;
    
        this.populateCertificateData(contract.parmCalibrationRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserConnection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the user connection.
    /// </summary>
    /// <param name="_common">
    ///     The buffer record on which to set the connection.
    /// </param>
    private void setUserConnection(Common _common)
    {
        // If the DP is launched from a caller other than SRS then the user connection may not be set
        // In these cases the buffers should use the default connection
        // and this code should not set the connection.
        UserConnection con = this.parmUserConnection();
        if (con)
        {
            _common.setConnection(con);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>