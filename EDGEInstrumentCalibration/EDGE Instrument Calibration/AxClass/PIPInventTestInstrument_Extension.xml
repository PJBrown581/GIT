<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestInstrument_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventTestInstrument))]
public final class PIPInventTestInstrument_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventTestInstrument_onValidatedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(InventTestInstrument), DataEventType::ValidatedField)]
    public static void InventTestInstrument_onValidatedField(Common sender, DataEventArgs e)
    {
        ValidateFieldEventArgs validateFieldArgs = e as ValidateFieldEventArgs;
        InventTestInstrument record = sender as InventTestInstrument;

        switch (validateFieldArgs.parmFieldId())
        {
            case fieldNum(InventTestInstrument, PIPIsTagNumRequired):
                if (!record.PIPIsTagNumRequired && PIPInventTestInstrumentTag::existByTestInstrumentType(record.TestInstrumentId))
                {
                    validateFieldArgs.parmValidateResult(checkFailed("@PIP813"));
                }
                break;

            case fieldNum(InventTestInstrument, PIPIsUsedForCalibration) :
                if (!record.PIPIsUsedForCalibration)
                {
                    PIPInventTestInstrumentCalibrationTools calibrationTools;

                    select firstOnly calibrationTools
                        where calibrationTools.TestInstrumentId == record.TestInstrumentId;
    
                    if (calibrationTools)
                    {
                        validateFieldArgs.parmValidateResult(checkFailed("@PIP814"));
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTestInstrument_onModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(InventTestInstrument), DataEventType::ModifiedField)]
    public static void InventTestInstrument_onModifiedField(Common sender, DataEventArgs e)
    {
        ModifyFieldEventArgs modifyFieldArgs = e as ModifyFieldEventArgs;
        InventTestInstrument record = sender as InventTestInstrument;

        switch(modifyFieldArgs.parmFieldId())
        {
            case fieldNum(InventTestInstrument, PIPIsTagNumRequired) :
                if (record.PIPIsTagNumRequired)
                {
                    record.PIPInventCalibrationLabelLayout = InventParameters::find().PIPCalibrationLabelLayout;
                }
                else
                {
                    record.PIPInventCalibrationLabelLayout = "";
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>