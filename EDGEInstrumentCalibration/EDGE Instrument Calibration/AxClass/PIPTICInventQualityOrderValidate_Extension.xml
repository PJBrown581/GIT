<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPTICInventQualityOrderValidate_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventQualityOrderValidate))]
public final class PIPTICInventQualityOrderValidate_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipUpdateTagWithUsage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the related <c>PIPInventTestInstrumentTag</c> table record with usage
    ///     as recorded by validation of the quality order.
    /// </summary>
    private void pipUpdateTagWithUsage()
    {
        InventQualityOrderLine          inventQualityOrderLine;
        InventQualityOrderLineResults   inventQualityOrderLineResults;
        PIPInventTestInstrumentTag      testInstrumentTag;
    
        while select inventQualityOrderLineResults
            where inventQualityOrderLineResults.QualityOrderId == inventQualityOrderId
                && inventQualityOrderLineResults.PIPTestInstrumentTagNumber
                && inventQualityOrderLineResults.PIPTestInstrumentUsageIncrement
            join TestInstrumentId from inventQualityOrderLine
                where inventQualityOrderLine.QualityOrderId     == inventQualityOrderLineResults.QualityOrderId
                        && inventQualityOrderLine.TestId        == inventQualityOrderLineResults.TestId
                        && inventQualityOrderLine.TestSequence  == inventQualityOrderLineResults.TestSequence
                        && inventQualityOrderLine.PIPSkipTest   == NoYes::No
        {
            testInstrumentTag       = PIPInventTestInstrumentTag::findByInstrumentTag(inventQualityOrderLine.TestInstrumentId,
                                            inventQualityOrderLineResults.PIPTestInstrumentTagNumber,
                                            true);
    
            if (testInstrumentTag.CalibrationMethod == PIPCalibrationMethod::Usage && inventQualityOrderLineResults.TestResultQuantity)
            {
                ttsBegin;
                testInstrumentTag.UsageCountSinceLastCalibration  += inventQualityOrderLineResults.PIPTestInstrumentUsageIncrement;
                testInstrumentTag.LifetimeUsageCount              += inventQualityOrderLineResults.PIPTestInstrumentUsageIncrement;
                testInstrumentTag.update();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipValidateTagAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates if tag numbers have been assigned to result lines if valid tags exist.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     Valid tag numbers exist but have not been assigned to result lines.
    /// </exception>
    private void pipValidateTagAssignment()
    {
        InventTestInstrument            inventTestInstrument;
        InventQualityOrderLine          inventQualityOrderLine;
        InventQualityOrderLineResults   inventQualityOrderLineResults;
    
        select firstOnly TestId from inventQualityOrderLine
            where inventQualityOrderLine.PIPSkipTest                == NoYes::No
            exists join inventQualityOrderLineResults
                where inventQualityOrderLineResults.QualityOrderId  == inventQualityOrderLine.QualityOrderId
                    && inventQualityOrderLineResults.TestSequence   == inventQualityOrderLine.TestSequence
                    && inventQualityOrderLineResults.QualityOrderId == inventQualityOrderId
            exists join inventTestInstrument
                where inventTestInstrument.TestInstrumentId         == inventQualityOrderLine.TestInstrumentId
                    && inventTestInstrument.PIPIsTagNumRequired
                    && !inventQualityOrderLineResults.PIPTestInstrumentTagNumber;
    
        if (inventQualityOrderLine.TestId)
        {
            throw error(strFmt("@PIP828", inventQualityOrderLine.TestId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom)
    {
        boolean ret = next validate(_calledFrom);

        if (ret && #PIPTICEnabled && InventQualityOrderTable::find(inventQualityOrderId).OrderStatus == InventTestOrderStatus::Open)
        {
            this.pipValidateTagAssignment();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderValidate_Post_run</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(InventQualityOrderValidate), methodStr(InventQualityOrderValidate, run))]
    public static void InventQualityOrderValidate_Post_run(XppPrePostArgs args)
    {
        if (#PIPTICEnabled)
        {
            InventQualityOrderValidate _this = args.getThis() as InventQualityOrderValidate;
            _this.pipUpdateTagWithUsage();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>