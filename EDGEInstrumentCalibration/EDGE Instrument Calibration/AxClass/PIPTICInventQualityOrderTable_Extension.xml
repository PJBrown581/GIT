<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPTICInventQualityOrderTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventQualityOrderTable))]
public final class PIPTICInventQualityOrderTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipExistOpenOrderWithInstrument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a record in the <c>InventQualityOrderTable</c> table exists for a given
    ///    test instrument and tag number combination.
    /// </summary>
    /// <param name="_inventTestInstrumentId">
    ///    The test instrument ID to search for.
    /// </param>
    /// <param name="_testInstrumentTagNumber">
    ///    The test instrument tag number to search for.
    /// </param>
    /// <param name="_qualityOrderId">
    ///    The quality order ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean pipExistOpenOrderWithInstrument(
        InventTestInstrumentId      _inventTestInstrumentId,
        PIPTestInstrumentTagNumber  _testInstrumentTagNumber,
        InventQualityOrderId        _qualityOrderId = '')
    {
        return _inventTestInstrumentId
            && _testInstrumentTagNumber
            && (select firstonly  PIPInventCalibrationTagsInUse
                    where  PIPInventCalibrationTagsInUse.TestInstrumentId       == _inventTestInstrumentId
                        && PIPInventCalibrationTagsInUse.TagNumber              == _testInstrumentTagNumber
                        && (!_qualityOrderId
                            || (_qualityOrderId
                                && PIPInventCalibrationTagsInUse.QualityOrderId != _qualityOrderId))).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCreateInventQualityOrderLinesPostHandler</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes logic in the post event for the <c>InventQualityOrderLineResults</c> <see cref="createInventQualityOrderLines method"/> method.
    /// </summary>
    /// <param name="_args">
    ///     The arguments passed by the event.
    /// </param>
    [PostHandlerFor(tableStr(InventQualityOrderTable), tableMethodStr(InventQualityOrderTable, createInventQualityOrderLines))]
    public static void pipCreateInventQualityOrderLinesPostHandler(XppPrePostArgs _args)
    {
        InventQualityOrderTable inventQualityOrderTable = _args.getThis();

        InventQualityOrderTable::pipAssignTagNumbers(inventQualityOrderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderTable_Post_createInventQualityOrderLinesWithConnection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes logic in the post event for the <c>InventQualityOrderLineResults</c> <see cref="createInventQualityOrderLinesWithConnection method"/> method.
    /// </summary>
    /// <param name="_args">
    ///     The arguments passed by the event.
    /// </param>
    [PostHandlerFor(tableStr(InventQualityOrderTable), tableMethodStr(InventQualityOrderTable, createInventQualityOrderLinesWithConnection))]
    public static void InventQualityOrderTable_Post_createInventQualityOrderLinesWithConnection(XppPrePostArgs _args)
    {
        InventQualityOrderTable inventQualityOrderTable = _args.getThis();

        InventQualityOrderTable::pipAssignTagNumbers(inventQualityOrderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipAssignTagNumbers</Name>
				<Source><![CDATA[
    private static void pipAssignTagNumbers(InventQualityOrderTable _inventQualityOrderTable)
    {
        InventQualityOrderLine          inventQualityOrderLine;
        InventQualityOrderLineResults   inventQualityOrderLineResults;
        PIPInventTestInstrumentTag      inventTestInstrumentTag;
        boolean                         assignmentFailed;
    
        if (!#PIPTICEnabled || !InventParameters::find().PIPAssignTagNumAutomatically)
        {
            return;
        }
    
        while select forUpdate inventQualityOrderLine
            where inventQualityOrderLine.QualityOrderId == _inventQualityOrderTable.QualityOrderId
        {
            if (PIPInventTestInstrumentTag::existByTestInstrumentType(inventQualityOrderLine.TestInstrumentId))
            {
                inventTestInstrumentTag = PIPInventTestInstrumentTag::getUsableTag(inventQualityOrderLine.TestInstrumentId, inventQualityOrderLine.QualityOrderId);
    
                if (inventTestInstrumentTag)
                {
                    inventQualityOrderLine.PIPTestInstrumentTagNumber   = inventTestInstrumentTag.TagNumber;
                    inventQualityOrderLine.PIPTestInstrumentUsageCount  = inventTestInstrumentTag.UsageCountSinceLastCalibration;
                    inventQualityOrderLine.update();
    
                    while select forUpdate inventQualityOrderLineResults
                        where inventQualityOrderLineResults.QualityOrderId == inventQualityOrderLine.QualityOrderId
                            && inventQualityOrderLineResults.TestSequence  == inventQualityOrderLine.TestSequence
                    {
                        inventQualityOrderLineResults.PIPTestInstrumentTagNumber = inventQualityOrderLine.PIPTestInstrumentTagNumber;
                        inventQualityOrderLineResults.pipSetUsageIncrement();
                        inventQualityOrderLineResults.update();
                    }
                }
                else
                {
                    assignmentFailed = true;
                }
            }
        }
    
        if (assignmentFailed)
        {
            warning("@PIP754");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>