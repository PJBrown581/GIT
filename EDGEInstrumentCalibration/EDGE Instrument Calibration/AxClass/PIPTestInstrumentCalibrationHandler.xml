<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPTestInstrumentCalibrationHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPTestInstrumentCalibrationHandler</c> handles the different calibration actions
///     available for a test instrument.
/// </summary>
class PIPTestInstrumentCalibrationHandler extends RunBase
{
    PIPInventTestInstrumentCalibration  inventTestInstrumentCalibration;
    PIPInstrumentCalibrationAction      instrumentCalibrationAction;
    PIPInventTestCalibrationResult      calibrationResult;
    PIPSIGCalibrationApproveProcedure   sigProcedure;

    DialogEnumComboBox                  dialogEnumComboBox;
    DialogField                         dialogCalibrationResult;
    DialogField                         dialogUpdateTag;
    DialogField                         dialogReopenComment;
    PIPComment                          reopenComment;
    boolean                             updateTag;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Set         enumSet = new Set(Types::Enum);
        DialogText  reopenText;
        
        Dialog      dialog  = super();
        
        dialog.caption("@PIP719");
        #define.fixedHeight(3)
        #define.fixedLength(150)
        
        switch(instrumentCalibrationAction)
        {
            case PIPInstrumentCalibrationAction::Start :
                dialog.addText("@PIP682");
                break;
            case PIPInstrumentCalibrationAction::Complete :
                dialogCalibrationResult = new DialogField(dialog, enumStr(PIPInventTestCalibrationResult));
                dialog.addCtrlDialogField(dialogCalibrationResult.name());
                dialogCalibrationResult.init(dialog);
                dialogCalibrationResult.value();
                
                enumSet.add(PIPInventTestCalibrationResult::Pass);
                enumSet.add(PIPInventTestCalibrationResult::LimitedPass);
                enumSet.add(PIPInventTestCalibrationResult::Fail);
                dialogEnumComboBox = DialogEnumComboBox::newParameters(null, dialogCalibrationResult.control().id(), enumNum(PIPInventTestCalibrationResult), enumSet, dialog.form());
                
                dialogUpdateTag = dialog.addField(extendedTypeStr(PIPUpdateTagToOutOfService));
                dialogUpdateTag.allowEdit(false);
                
                dialog.addText("@PIP683");
                dialog.allowUpdateOnSelectCtrl(true);
                break;
            case PIPInstrumentCalibrationAction::Approve :
                dialog.addText("@PIP684");
                break;
            case PIPInstrumentCalibrationAction::Reopen :
                reopenText = dialog.addText(strFmtLB("@PIP815"));
                reopenText.displayHeight(#fixedHeight);
                reopenText.displayLengthValue(#fixedLength);
                dialogReopenComment = dialog.addField(extendedTypeStr(PIPComment));
                break;
        }
        
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase dialog)
    {
        super(dialog);
        
        if (instrumentCalibrationAction == PIPInstrumentCalibrationAction::Complete)
        {
            dialog.dialogForm().formRun().controlMethodOverload(true);
            dialog.dialogForm().formRun().controlMethodOverloadObject(this);
            dialog.formRun().controlMethodOverload(true);
            dialog.formRun().controlMethodOverloadObject(this);
            
            if (dialogEnumComboBox)
            {
                dialogEnumComboBox.parmFormRun(dialog.dialogForm().formRun());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    public void dialogSelectCtrl()
    {
        super();
        
        if (instrumentCalibrationAction == PIPInstrumentCalibrationAction::Complete)
        {
            calibrationResult = dialogEnumComboBox.selection();
            
            if (calibrationResult == PIPInventTestCalibrationResult::Fail)
            {
                dialogUpdateTag.allowEdit(true);
            }
            else
            {
                dialogUpdateTag.value(NoYes::No);
                dialogUpdateTag.allowEdit(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        
        ret = super();
        
        if (ret)
        {
            switch (instrumentCalibrationAction)
            {
                case PIPInstrumentCalibrationAction::Complete :
                    if (dialogEnumComboBox)
                    {
                        calibrationResult = dialogEnumComboBox.selection();
                    }
                    updateTag = dialogUpdateTag.value();
                    break;
                case PIPInstrumentCalibrationAction::Reopen :
                    if (dialogReopenComment)
                    {
                        reopenComment = dialogReopenComment.value();
                    }
                    break;
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSignatureOnApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the e-signature on approval of Test instrument calibration record.
    /// </summary>
    private void getSignatureOnApproval()
    {
        PIPSIGCalibrationApproveProcedure procedure = PIPSIGCalibrationApproveProcedure::newInventTestInstrumentCalibration(inventTestInstrumentCalibration);
        
        procedure.parmCalibrationAction(instrumentCalibrationAction);
        
        if (procedure.signatureRequired())
        {
            if (procedure.sign())
            {
                return;
            }
            else
            {
                throw error("@PIP831");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalibrationApproveProcedure</Name>
				<Source><![CDATA[
    public PIPSIGCalibrationApproveProcedure parmCalibrationApproveProcedure(PIPSIGCalibrationApproveProcedure _sigProcedure = sigProcedure)
    {
        sigProcedure = _sigProcedure;

        return sigProcedure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTestInstrumentCalibrationAction</Name>
				<Source><![CDATA[
    public PIPInstrumentCalibrationAction parmTestInstrumentCalibrationAction(PIPInstrumentCalibrationAction _instrumentCalibrationAction = instrumentCalibrationAction)
    {
        instrumentCalibrationAction = _instrumentCalibrationAction;
        
        return instrumentCalibrationAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTestInstrumentCalibrationRecord</Name>
				<Source><![CDATA[
    public PIPInventTestInstrumentCalibration parmTestInstrumentCalibrationRecord(PIPInventTestInstrumentCalibration _inventTestInstrumentCalibration = inventTestInstrumentCalibration)
    {
        inventTestInstrumentCalibration = _inventTestInstrumentCalibration;
        
        return inventTestInstrumentCalibration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proceedWithApproval</Name>
				<Source><![CDATA[
    private boolean proceedWithApproval()
    {
        return (inventTestInstrumentCalibration.CalibrationResult == PIPInventTestCalibrationResult::Pass
                    || inventTestInstrumentCalibration.CalibrationResult == PIPInventTestCalibrationResult::LimitedPass
                    && inventTestInstrumentCalibration.CalibrationCompletedDate
                    && !inventTestInstrumentCalibration.CalibrationApprovedDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (!this.validate())
        {
            return;
        }

        try
        {
            ttsBegin;

            inventTestInstrumentCalibration = PIPInventTestInstrumentCalibration::find(inventTestInstrumentCalibration.RecId, true);

            switch(instrumentCalibrationAction)
            {
                case PIPInstrumentCalibrationAction::Start :
                    inventTestInstrumentCalibration.CalibrationStartedBy        = curUserId();
                    inventTestInstrumentCalibration.CalibrationStartedDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    break;
                case PIPInstrumentCalibrationAction::Complete :
                    inventTestInstrumentCalibration.CalibrationCompletedBy      = curUserId();
                    inventTestInstrumentCalibration.CalibrationCompletedDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    if (!inventTestInstrumentCalibration.CalibrationStartedDate)
                    {
                        inventTestInstrumentCalibration.CalibrationStartedBy    = curUserId();
                        inventTestInstrumentCalibration.CalibrationStartedDate  = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    }
                    inventTestInstrumentCalibration.CalibrationResult           = calibrationResult;
                    break;
                case PIPInstrumentCalibrationAction::Approve :
                if (!inventTestInstrumentCalibration.CalibrationApprovedDate)
                    {
                        inventTestInstrumentCalibration.CalibrationApprovedBy       = curUserId();
                        inventTestInstrumentCalibration.CalibrationApprovedDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    }
                    break;
                case PIPInstrumentCalibrationAction::Reopen :
                if (inventTestInstrumentCalibration.CalibrationCompletedDate)
                    {
                        PIPInventTestCalibrationReopenHistory::createLog(inventTestInstrumentCalibration, reopenComment);

                        inventTestInstrumentCalibration.CalibrationCompletedBy      = '';
                        inventTestInstrumentCalibration.CalibrationCompletedDate    = dateNull();
                        inventTestInstrumentCalibration.CalibrationApprovedBy       = '';
                        inventTestInstrumentCalibration.CalibrationApprovedDate     = dateNull();
                        inventTestInstrumentCalibration.CalibrationResult           = PIPInventTestCalibrationResult::Open;
                    }
                    break;
            }

            if (sigProcedure
            && (instrumentCalibrationAction == PIPInstrumentCalibrationAction::Approve
                || instrumentCalibrationAction == PIPInstrumentCalibrationAction::Reopen))
            {
                sigProcedure.captureDelayedSignature(inventTestInstrumentCalibration);
            }

            inventTestInstrumentCalibration.update();
            this.updateTag();

            ttsCommit;
        }
        catch
        {
            throw error("@PIP1106");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the fields on test instrument based on the calibration action.
    /// </summary>
    private void updateTag()
    {
        PIPInventTestInstrumentTag          inventTestInstrumentTag = inventTestInstrumentCalibration.inventTestInstrumentTag(true);
        PIPInventTestInstrumentCalibration  oldCalibrationrecord;
        
        switch(instrumentCalibrationAction)
        {
            case PIPInstrumentCalibrationAction::Complete :
                if (inventTestInstrumentCalibration.CalibrationResult   == PIPInventTestCalibrationResult::Fail)
                {
                    inventTestInstrumentTag.CalibrationStartedDate      = inventTestInstrumentCalibration.CalibrationStartedDate;
                    inventTestInstrumentTag.CalibrationCompletedDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    inventTestInstrumentTag.CalibrationResult           = enum2str(PIPInventTestCalibrationResult::Fail);
                    inventTestInstrumentTag.CalibrationApprovedDate     = dateNull();
                    if (updateTag)
                    {
                        inventTestInstrumentTag.UsageStatus             = PIPTestInstrumentUsageStatus::OutOfService;
                    }
                }
                break;
            case PIPInstrumentCalibrationAction::Approve :
                inventTestInstrumentTag.CalibrationStartedDate          = inventTestInstrumentCalibration.CalibrationStartedDate;
                inventTestInstrumentTag.CalibrationCompletedDate        = inventTestInstrumentCalibration.CalibrationCompletedDate;
                inventTestInstrumentTag.UsageStatus                     = PIPTestInstrumentUsageStatus::Available;
                inventTestInstrumentTag.CalibrationApprovedDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                inventTestInstrumentTag.UsageCountSinceLastCalibration  = 0;
                inventTestInstrumentTag.CalibrationResult               = enum2Value(inventTestInstrumentCalibration.CalibrationResult);
                inventTestInstrumentTag.setNextDateForCalibration();
                break;
            case PIPInstrumentCalibrationAction::Reopen :
                inventTestInstrumentTag.UsageStatus                     = PIPTestInstrumentUsageStatus::Calibration;
                inventTestInstrumentTag.CalibrationNextDate             = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                oldCalibrationrecord                                    = PIPInventTestInstrumentCalibration::getOlderCalibrationRecord(inventTestInstrumentCalibration);
                if (oldCalibrationrecord)
                {
                    inventTestInstrumentTag.CalibrationStartedDate      = oldCalibrationrecord.CalibrationStartedDate;
                    inventTestInstrumentTag.CalibrationCompletedDate    = oldCalibrationrecord.CalibrationCompletedDate;
                    inventTestInstrumentTag.CalibrationApprovedDate     = oldCalibrationrecord.CalibrationApprovedDate;
                    inventTestInstrumentTag.CalibrationResult           = enum2str(oldCalibrationrecord.CalibrationResult);
                }
                else
                {
                    inventTestInstrumentTag.CalibrationStartedDate      = dateNull();
                    inventTestInstrumentTag.CalibrationCompletedDate    = dateNull();
                    inventTestInstrumentTag.CalibrationApprovedDate     = dateNull();
                    inventTestInstrumentTag.CalibrationResult           = "";
                }
                break;
        }
        
        inventTestInstrumentTag.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the required parameters have been set.
    /// </summary>
    /// <param name="calledFrom">
    ///    The object that called this class; optional.
    /// </param>
    /// <returns>
    ///    true if the requires parameters have been set; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;
        
        ret = super(calledFrom);
        
        if (!inventTestInstrumentCalibration)
        {
            ret = checkFailed(strFmt("@SYS134996",tableStr(PIPInventTestInstrumentCalibration)));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPTestInstrumentCalibrationHandler construct()
    {
        return new PIPTestInstrumentCalibrationHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPTestInstrumentCalibrationHandler handler = PIPTestInstrumentCalibrationHandler::construct();
        PIPInventTestInstrumentCalibration  calibrationRecord;
        PIPInventTestInstrumentCalibration  openCalibrationRecord;
        PIPInstrumentCalibrationAction      calibrationAction;
        PIPSIGCalibrationApproveProcedure   procedure;
        boolean                             signatureRequiredOnApproval;
        FormRun                             formRun = _args.caller();
        #Task

        if (_args.dataset() != tableNum(PIPInventTestInstrumentCalibration))
        {
            throw error(error::missingRecord(tableStr(PIPInventTestInstrumentCalibration)));
        }
        if (_args.parmEnumType() != enumNum(PIPInstrumentCalibrationAction) || _args.parmEnum() == PIPInstrumentCalibrationAction::None)
        {
            throw error("@SYS319560");
        }

        calibrationRecord           = _args.record();
        calibrationAction           = _args.parmEnum();
        signatureRequiredOnApproval = #PIPTICEnabled && isConfigurationkeyEnabled(configurationKeyNum(PIPSIG02));

        if (calibrationAction == PIPInstrumentCalibrationAction::Approve && !calibrationRecord.CalibrationCompletedDate)
        {
            handler.parmTestInstrumentCalibrationRecord(calibrationRecord);
            handler.parmTestInstrumentCalibrationAction(PIPInstrumentCalibrationAction::Complete);

            if (handler.prompt())
            {
                handler.runOperation();
            }

            if (handler.proceedWithApproval())
            {
                calibrationRecord = handler.parmTestInstrumentCalibrationRecord();

                handler = PIPTestInstrumentCalibrationHandler::construct();

                handler.parmTestInstrumentCalibrationRecord(calibrationRecord);
                handler.parmTestInstrumentCalibrationAction(PIPInstrumentCalibrationAction::Approve);

                if (signatureRequiredOnApproval)
                {
                    procedure = PIPSIGCalibrationApproveProcedure::newInventTestInstrumentCalibration(calibrationRecord);

                    if (procedure.signatureRequired())
                    {
                        if (!procedure.sign())
                        {
                            return;
                        }

                        handler.parmCalibrationApproveProcedure(procedure);
                    }
                }

                if (handler.prompt())
                {
                    handler.runOperation();
                }
            }
        }
        else
        {
            openCalibrationRecord = PIPInventTestInstrumentCalibration::findOpenCalibrationRecord(calibrationRecord.InventTestInstrument, calibrationRecord.TestInstrumentTagNumber);

            if (openCalibrationRecord
            && calibrationAction == PIPInstrumentCalibrationAction::Reopen
            && openCalibrationRecord != calibrationRecord)
            {
                throw error("@PIP845");
            }

            handler.parmTestInstrumentCalibrationRecord(calibrationRecord);
            handler.parmTestInstrumentCalibrationAction(calibrationAction);

            if (signatureRequiredOnApproval
            && (calibrationAction == PIPInstrumentCalibrationAction::Reopen
                || calibrationAction == PIPInstrumentCalibrationAction::Approve))
            {
                procedure = PIPSIGCalibrationApproveProcedure::newInventTestInstrumentCalibration(calibrationRecord);

                if (procedure.signatureRequired())
                {
                    if (!procedure.sign())
                    {
                        return;
                    }

                    handler.parmCalibrationApproveProcedure(procedure);
                }
            }

            if (handler.prompt())
            {
                handler.runOperation();
            }
        }

        if (formRun)
        {
            formRun.task(#taskF5);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>