<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInstrumentCalibrationSchedController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPInstrumentCalibrationSchedController</c> class is the controller class for the <c>PIPInstrumentCalibrationScheduleReport</c> report.
/// </summary>
public class PIPInstrumentCalibrationSchedController extends SrsReportRunController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves ranges from a query as a string.
    /// </summary>
    /// <param name="_query">
    ///     The query to get ranges from.
    /// </param>
    /// <returns>
    ///     A concatenated string with all query range values.
    /// </returns>
    private str getRanges(Query _query)
    {
        str                     rangeValue;
        str                     queryRange;
        int                     rangeCounter;
        QueryBuildRange         qbr;
        QueryBuildDataSource    qbds        = _query.dataSourceTable(tableNum(PIPInventTestInstrumentTag));
        int                     rangeCount  = qbds.rangeCount();
    
        if (rangeCount)
        {
            for (rangeCounter = 1; rangeCounter <= rangeCount; rangeCounter++)
            {
                qbr = qbds.range(rangeCounter);
    
                if (qbr.value())
                {
                    rangeValue = fieldId2pname(tableNum(PIPInventTestInstrumentTag), qbr.field()) + " : " + qbr.value();
    
                    queryRange = queryRange? (queryRange + ", " + rangeValue) : (queryRange + rangeValue);
                }
            }
        }
    
        queryRange = "@PIP970" + queryRange;
        return queryRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        QueryBuildRange         qbr;
        QueryBuildDataSource    qbdsTag;
        str                     queryRangeCriteria;
    
        #define.parameterShowAllDueToday('Boolean_ShowAllDueToday')
        #define.parameterReportFilterCriteria('ReportFilterCriteria')
    
        SrsReportRdlDataContract        contract            = this.parmReportContract().parmRdlContract();
        boolean                         showAllDueToday     = contract.getParameter(#parameterShowAllDueToday).getValueTyped();
        Query                           query               = this.getFirstQuery();
        date                            fromDate            = dateNull() + 1;
    
        qbdsTag = query.dataSourceTable(tableNum(PIPInventTestInstrumentTag));
        qbr     = qbdsTag.findRange(fieldNum(PIPInventTestInstrumentTag, CalibrationNextDate));
    
        if (showAllDueToday)
        {
            SrsReportHelper::addFromAndToDateRangeToQuery(query,
                                fromDate,
                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                tableNum(PIPInventTestInstrumentTag),
                                fieldNum(PIPInventTestInstrumentTag, CalibrationNextDate));
        }
        else if (qbr.value() == strFmt('"%1" .. "%2"', fromDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                || qbr.value() == strFmt('%1..%2', fromDate, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())))
        {
            qbdsTag.clearRange(fieldNum(PIPInventTestInstrumentTag, CalibrationNextDate));
        }
    
        queryRangeCriteria = this.getRanges(query);
    
        contract.setValue(#parameterReportFilterCriteria, queryRangeCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInstrumentCalibrationSchedController construct(Args _args)
    {
        #define.ReportName('PIPInstrumentCalibrationScheduleReport.Report')
    
        PIPInstrumentCalibrationSchedController controller = new PIPInstrumentCalibrationSchedController();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PIPInstrumentCalibrationSchedController controller = PIPInstrumentCalibrationSchedController::construct(args);
    
        controller.parmReportName(ssrsReportStr(PIPInstrumentCalibrationScheduleReport, Report));
        controller.parmArgs(args);
        controller.parmLoadFromSysLastValue(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>