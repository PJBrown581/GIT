<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrderLineResults_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventQualityOrderLineResults))]
public final class PIPInventQualityOrderLineResults_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipSetUsageIncrement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the usage increment value.
    /// </summary>
    /// <param name="_inventQualityOrderLine">
    ///     The quality order line to be used to get the correct test instrument tag.
    /// </param>
    public void pipSetUsageIncrement(InventQualityOrderLine _inventQualityOrderLine = null)
    {
        PIPInventCalibrationGroup       inventCalibrationGroup;
        InventQualityOrderLineResults   orderLineResult;
        InventQualityOrderLine          inventQualityOrderLine = _inventQualityOrderLine;
    
        if (!inventQualityOrderLine)
        {
            inventQualityOrderLine = this.inventQualityOrderLine();
        }
    
        inventCalibrationGroup = PIPInventTestInstrumentTag::findByInstrumentTag(inventQualityOrderLine.TestInstrumentId, this.PIPTestInstrumentTagNumber).inventCalibrationGroup();
    
        if (inventCalibrationGroup.CalibrationMethod == PIPCalibrationMethod::Usage)
        {
            switch(inventCalibrationGroup.UsageUpdateMethod)
            {
                case PIPCalibrationUsageUpdateMethod::TestQuantity :
                    this.PIPTestInstrumentUsageIncrement = any2int(this.TestResultQuantity);
                    break;

                case PIPCalibrationUsageUpdateMethod::FixedIncrement :
                    select firstOnly RecId from orderLineResult
                        where orderLineResult.QualityOrderId                == this.QualityOrderId
                            && orderLineResult.TestSequence                 == this.TestSequence
                            && orderLineResult.PIPTestInstrumentTagNumber   == this.PIPTestInstrumentTagNumber
                            && orderLineResult.LineNum                      != this.LineNum
                            && orderLineResult.PIPTestInstrumentUsageIncrement;
    
                    if (!orderLineResult.RecId)
                    {
                        this.PIPTestInstrumentUsageIncrement = inventCalibrationGroup.UsageIncrement;
                    }
                    break;
            }
        }
        else
        {
            this.PIPTestInstrumentUsageIncrement = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_Post_initFromInventQualityOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(tableStr(InventQualityOrderLineResults), tableMethodStr(InventQualityOrderLineResults, initFromInventQualityOrderLine))]
    public static void InventQualityOrderLineResults_Post_initFromInventQualityOrderLine(XppPrePostArgs args)
    {
        InventQualityOrderLineResults   _this                   = args.getThis() as InventQualityOrderLineResults;
        InventQualityOrderLine          inventQualityOrderLine  = args.getArg('_inventQualityOrderLine');

        if (#PIPTICEnabled && InventParameters::find().PIPAssignTagNumAutomatically)
        {
            _this.PIPTestInstrumentTagNumber = inventQualityOrderLine.PIPTestInstrumentTagNumber;
            _this.pipSetUsageIncrement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_Post_modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(tableStr(InventQualityOrderLineResults), tableMethodStr(InventQualityOrderLineResults, modifiedField))]
    public static void InventQualityOrderLineResults_Post_modifiedField(XppPrePostArgs args)
    {
        InventQualityOrderLineResults   _this       = args.getThis() as InventQualityOrderLineResults;
        InventQualityOrderLineResults   resultsOrig = _this.orig();
        FieldId                         fieldId     = args.getArg('_fieldId');

        switch(fieldId)
        {
            case fieldNum(InventQualityOrderLineResults, TestResultQuantity):
                if (_this.TestResultQuantity != resultsOrig.TestResultQuantity)
                {
                    _this.pipSetUsageIncrement();
                }
                break;

            case fieldNum(InventQualityOrderLineResults, PIPTestInstrumentTagNumber):
                _this.pipSetUsageIncrement();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTestResultPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(InventQualityOrderLineResults), tableMethodStr(InventQualityOrderLineResults, setTestResult))]
    /// <summary>
    ///     Executes logic in the post event for the <c>InventQualityOrderLineResults</c> <see cref="setTestResultPost method"/> method.
    /// </summary>
    /// <param name="_args">
    ///     The arguments passed by the event hanlder.
    /// </param>
    public static void setTestResultPost(XppPrePostArgs _args)
    {
        InventQualityOrderLineResults           inventQualityOrderLineResults   = _args.getThis();
        boolean                                 showWarning                     = _args.getArg("_showWarning");
        InventQualityOrderLineResults           orderLineResultsOrig            = inventQualityOrderLineResults.orig();
        
        PIPInventTestInstrumentTag              inventTestInstrumentTag;
        InventQualityOrderLine                  inventQualityOrderLine;
        PIPInventQualityTagAssignmentValidator  tagAssignmentValidator;
        
        inventQualityOrderLine  = inventQualityOrderLineResults.inventQualityOrderLine();
        
        if (inventQualityOrderLineResults.PIPTestInstrumentTagNumber != orderLineResultsOrig.PIPTestInstrumentTagNumber)
        {
            showWarning = true;
        }
        
        if (showWarning
                && #PIPTICEnabled
                && InventParameters::find().PIPAssignTagNumAutomatically
                && inventQualityOrderLine.TestInstrumentId
                && !inventQualityOrderLineResults.PIPTestInstrumentTagNumber
                && PIPInventTestInstrumentTag::existUsableTag(inventQualityOrderLine))
        {
            inventQualityOrderLineResults.data(orderLineResultsOrig);
            throw error(strFmt("@PIP824",inventQualityOrderLine.TestInstrumentId));
        }
        
        if (showWarning && #PIPTICEnabled && inventQualityOrderLineResults.PIPTestInstrumentTagNumber)
        {
            inventTestInstrumentTag = PIPInventTestInstrumentTag::findByInstrumentTag(
                                                inventQualityOrderLine.TestInstrumentId,
                                                inventQualityOrderLineResults.PIPTestInstrumentTagNumber,
                                                true);
            
            if (!inventTestInstrumentTag.SkipCheckTestInstrumentOnOrder
                    && InventQualityOrderTable::pipExistOpenOrderWithInstrument(
                        inventQualityOrderLine.TestInstrumentId,
                        inventQualityOrderLineResults.PIPTestInstrumentTagNumber,
                        inventQualityOrderLineResults.QualityOrderId))
            {
                warning(strFmt("@PIP827", inventQualityOrderLine.TestInstrumentId, inventQualityOrderLineResults.TestId));
            }
            
            // validate tag usage status
            tagAssignmentValidator  = PIPInventQualityTagAssignmentValidator::newFromTestInstrumentTag(inventTestInstrumentTag);
            if (!tagAssignmentValidator.validateTag())
            {
                inventQualityOrderLineResults.PIPTestInstrumentTagNumber = orderLineResultsOrig.PIPTestInstrumentTagNumber;
            }
            
            // assign/reset usage increment
            if (inventQualityOrderLineResults.PIPTestInstrumentTagNumber != orderLineResultsOrig.PIPTestInstrumentTagNumber)
            {
                inventQualityOrderLineResults.pipSetUsageIncrement();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>