<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrderLineHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventQualityOrderLineHandler</c> class provides method event subscription handlers for the
///     <c>InventQualityOrderLine</c> table.
/// </summary>
public class PIPInventQualityOrderLineHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedFieldPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(InventQualityOrderLine), tableMethodStr(InventQualityOrderLine, modifiedField))]
    /// <summary>
    ///     Executes logic in the post event for the <c>InventQualityOrderLine</c> <see cref="modifiedField method"/> method.
    /// </summary>
    /// <param name="_args">
    ///     The arguments passed by the event hanlder.
    /// </param>
    public static void modifiedFieldPost(XppPrePostArgs _args)
    {
        InventQualityOrderLine  inventQualityOrderLine  = _args.getThis();
        InventQualityOrderLine  qualityOrderLineOrig    = inventQualityOrderLine.orig();
        FieldId                 fieldId                 = _args.getArg('_fieldId');
    
        switch (fieldId)
        {
            case fieldNum(InventQualityOrderLine, TestInstrumentId) :
                if (inventQualityOrderLine.TestInstrumentId != qualityOrderLineOrig.TestInstrumentId)
                {
                    inventQualityOrderLine.PIPTestInstrumentTagNumber   = '';
                    inventQualityOrderLine.PIPTestInstrumentUsageCount  = 0;
                    inventQualityOrderLine.update();
    
                    InventQualityOrderLineResults qualityOrderLineResults;
                    update_recordSet qualityOrderLineResults
                        setting
                            PIPTestInstrumentTagNumber      = "",
                            PIPTestInstrumentUsageIncrement = 0
                        where qualityOrderLineResults.QualityOrderId    == inventQualityOrderLine.QualityOrderId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWritePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(InventQualityOrderLine), tableMethodStr(InventQualityOrderLine, validateWrite))]
    /// <summary>
    ///     Executes logic in the post event for the <c>InventQualityOrderLine</c> <see cref="validateWrite method"/> method.
    /// </summary>
    /// <param name="_args">
    ///     The arguments passed by the event hanlder.
    /// </param>
    public static void validateWritePost(XppPrePostArgs _args)
    {
        InventQualityOrderLine                  inventQualityOrderLine  = _args.getThis();
        boolean                                 ret                     = _args.getReturnValue();
        inventQualityOrderLine                  orderLineOrig           = inventQualityOrderLine.orig();
    
        PIPInventTestInstrumentTag              inventTestInstrumentTag;
        PIPInventQualityTagAssignmentValidator  tagAssignmentValidator;

        if (inventQualityOrderLine.PIPSkipTest == NoYes::Yes)
        {
            return;
        }
    
        if (ret
            && #PIPTICEnabled
            && InventParameters::find().PIPAssignTagNumAutomatically
            && inventQualityOrderLine.TestInstrumentId
            && !inventQualityOrderLine.PIPTestInstrumentTagNumber
            && InventTestInstrument::find(inventQualityOrderLine.TestInstrumentId).PIPIsTagNumRequired)
        {
            inventTestInstrumentTag = PIPInventTestInstrumentTag::getUsableTag(inventQualityOrderLine.TestInstrumentId, inventQualityOrderLine.QualityOrderId);
    
            if (inventTestInstrumentTag)
            {
                inventQualityOrderLine.PIPTestInstrumentTagNumber   = inventTestInstrumentTag.TagNumber;
                inventQualityOrderLine.PIPTestInstrumentUsageCount  = inventTestInstrumentTag.UsageCountSinceLastCalibration;
            }
            else if (!inventQualityOrderLine.RecId)
            {
                warning("@PIP754");
            }
            return;
        }
    
        if (ret && #PIPTICEnabled && inventQualityOrderLine.TestInstrumentId && inventQualityOrderLine.PIPTestInstrumentTagNumber)
        {
            inventTestInstrumentTag = PIPInventTestInstrumentTag::findByInstrumentTag(
                                            inventQualityOrderLine.TestInstrumentId,
                                            inventQualityOrderLine.PIPTestInstrumentTagNumber);
    
            if (!inventTestInstrumentTag.SkipCheckTestInstrumentOnOrder
                && InventQualityOrderTable::pipExistOpenOrderWithInstrument(
                    inventQualityOrderLine.TestInstrumentId,
                    inventQualityOrderLine.PIPTestInstrumentTagNumber,
                    inventQualityOrderLine.QualityOrderId))
            {
                warning(strFmt("@PIP827", inventQualityOrderLine.TestInstrumentId, inventQualityOrderLine.TestId));
            }
    
            if (ret)
            {
                tagAssignmentValidator  = PIPInventQualityTagAssignmentValidator::newFromTestInstrumentTag(inventTestInstrumentTag);
                ret                     = tagAssignmentValidator.validateTag();
            }
            else if (ret && inventTestInstrumentTag.UsageStatus == PIPTestInstrumentUsageStatus::OutOfService)
            {
                inventQualityOrderLine.PIPTestInstrumentTagNumber = '';
                ret = checkFailed(strFmt("@PIP817", inventTestInstrumentTag.TagNumber));
            }
            if (ret && inventQualityOrderLine.PIPTestInstrumentTagNumber != orderLineOrig.PIPTestInstrumentTagNumber)
            {
                inventQualityOrderLine.PIPTestInstrumentUsageCount  = inventTestInstrumentTag.UsageCountSinceLastCalibration;
            }
        }
    
        _args.setReturnValue(ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>