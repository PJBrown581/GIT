<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInstrumentCalibrationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PIPInstrumentCalibrationController</c> class opens the <c>PIPInstrumentCalibrationCertificate</c> report.
/// </summary>
public class PIPInstrumentCalibrationController extends SrsReportRunController
{
    PIPTestInstrumentCalibrationRecId   calibrationRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the dialog if the report viewer form is not being shown for print management.
    /// </summary>
    /// <remarks>
    /// This method is overridden to let you view multiple copies of the same report under print management
    /// settings.
    /// </remarks>
    protected void dialogClose()
    {
        if(!useReportViewerForm)
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogShow</Name>
				<Source><![CDATA[
    protected void dialogShow()
    {
        SysOperationDialog sysOperationDialog;
        FormRun formRun;
    
        if(useReportViewerForm)
        {
            sysOperationDialog = dialog as SysOperationDialog;

            sysOperationDialog.run();
            this.dialogPostRun();
    
            // Get formrun and detach the formrun object, so not blocking.
            formRun = sysOperationDialog.formRun();
            formRun.detach();
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        PIPInventTestInstrumentCalibration          inventTestInstrumentCalibration;
        PIPInstrumentCalibrationCertRprtContract    rdpContract;
    
        if(classIdGet(this.parmArgs().caller()) == classNum(PIPInstrumentCalibrationCertController))
        {
            super();
        }
    
        rdpContract = this.parmReportContract().parmRdpContract();
    
        if (this.parmArgs().dataset() == tableNum(PIPInventTestInstrumentCalibration))
        {
            inventTestInstrumentCalibration = this.parmArgs().record();
            calibrationRecId                = inventTestInstrumentCalibration.RecId;
    
            rdpContract.parmCalibrationRecId(calibrationRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportViewerRefreshComplete</Name>
				<Source><![CDATA[
    public void reportViewerRefreshComplete(SRSReportExecutionInfo _executionInfo, SrsReportDataContract _reportContract = null)
    {
        PIPInstrumentCalibrationCertRprtContract rdpContract = this.parmReportContract().parmRdpContract();
    
        super(_executionInfo, _reportContract);
    
        if (_executionInfo.parmIsSuccessful())
        {
            PIPInventTestInstrumentTag::setCertificatePrintDate(rdpContract.parmCalibrationRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInstrumentCalibrationController construct()
    {
        return new PIPInstrumentCalibrationController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPInstrumentCalibrationController controller = PIPInstrumentCalibrationController::newFromArgs(_args);
    
        controller.parmReportName(ssrsReportStr(PIPInstrumentCalibrationCertificate, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.parmLoadFromSysLastValue(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>PIPInstrumentCalibrationController</c> class.
    /// </summary>
    /// <param name="_args">
    ///     The input arguments.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>PIPInstrumentCalibrationController</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///     The method has been called with the wrong table.
    /// </exception>
    public static PIPInstrumentCalibrationController newFromArgs(Args _args)
    {
        PIPInstrumentCalibrationController controller;
    
        if (!_args || !(_args.record() is PIPInventTestInstrumentCalibration))
        {
            throw(error(strFmt("@SYS113735", classStr(PIPInstrumentCalibrationController), tableStr(PIPInventTestInstrumentCalibration))));
        }
    
        controller = PIPInstrumentCalibrationController::construct();
        controller.parmReportName(ssrsReportStr(PIPInstrumentCalibrationCertificate, Report));
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>