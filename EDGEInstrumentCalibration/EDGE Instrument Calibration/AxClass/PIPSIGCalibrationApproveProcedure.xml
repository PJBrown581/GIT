<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPSIGCalibrationApproveProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPSIGCalibrationApproveProcedure</c> handles the instrument calibration approval process.
/// </summary>
class PIPSIGCalibrationApproveProcedure extends PIPSIGProcedureProviderBase
{
    PIPSIGCalibrationApproveProvider    calibrationApproveprovider;
    PIPInventTestInstrumentCalibration  inventTestInstrumentCalibration;
    PIPInstrumentCalibrationAction      calibrationAction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>captureDelayedSignature</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Captures a signature that was initiated prior to updating the status on the specified calibration record.
    /// </summary>
    /// <param name="_instrumentCalibration">
    ///     The calibration record to be signed for.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The specified calibration record does not match thecalibration record that was used when initiating the signature process prior to status update.
    /// </exception>
    public void captureDelayedSignature(PIPInventTestInstrumentCalibration _instrumentCalibration)
    {
        container       fields;
        ListEnumerator  listEnumerator;
        SIGBaseDocument doc;

        if (inventTestInstrumentCalibration.RecId != _instrumentCalibration.RecId)
        {
            throw error("@PIP489");
        }

        inventTestInstrumentCalibration = _instrumentCalibration;

        fields          = SIGBaseDocument::buildFieldList(DatabaseLogType::Update, inventTestInstrumentCalibration, inventTestInstrumentCalibration.orig());
        listEnumerator  = docList.getEnumerator();

        while (listEnumerator.moveNext())
        {
            doc = listEnumerator.current();
            if (doc.getRefTableId() == inventTestInstrumentCalibration.TableId && doc.getRefRecId() == inventTestInstrumentCalibration.RecId)
            {
                doc.initFieldList(DatabaseLogType::Update, fields, inventTestInstrumentCalibration.TableId, inventTestInstrumentCalibration.RecId);
                doc.setSigneeId(signeeId);
            }
        }

        signed = calibrationApproveprovider.signDataList(docList, calibrationApproveprovider.getValidCertificate(signeeId));
        if (signed)
        {
            SIGBaseDocument::addListToCache(docList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAuditFieldList</Name>
				<Source><![CDATA[
    public container getAuditFieldList()
    {
        return [
                [DatabaseLogType::Update,tableNum(PIPInventTestInstrumentCalibration),fieldNum(PIPInventTestInstrumentCalibration,  CalibrationApprovedBy)],
                [DatabaseLogType::Update,tableNum(PIPInventTestInstrumentCalibration),fieldNum(PIPInventTestInstrumentCalibration,  CalibrationApprovedDate)]
               ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSigningProvider</Name>
				<Source><![CDATA[
    protected SIGSigningProvider getSigningProvider()
    {
        if (!calibrationApproveprovider)
        {
            calibrationApproveprovider = super();
        }

        return calibrationApproveprovider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalibrationAction</Name>
				<Source><![CDATA[
    public PIPInstrumentCalibrationAction parmCalibrationAction(PIPInstrumentCalibrationAction _calibrationAction = calibrationAction)
    {
        calibrationAction = _calibrationAction;
        return calibrationAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTestInstrumentCalibration</Name>
				<Source><![CDATA[
    public PIPInventTestInstrumentCalibration parmInventTestInstrumentCalibration(PIPInventTestInstrumentCalibration _inventTestInstrumentCalibration = null)
    {
        if (!prmisDefault(_inventTestInstrumentCalibration))
        {
            inventTestInstrumentCalibration = _inventTestInstrumentCalibration;

            docList = new List(Types::Class);

            // MSBUG: Cannot create the base document in CLR due to a Microsoft bug in SIGXMLDocument; don't initialize the document unless it is needed and e-signature cannot work in CLR
            if (this.signatureRequired())
            {
                docList.addEnd(SIGBaseDocument::newDatabaseLog(DatabaseLogType::Update, inventTestInstrumentCalibration));
            }
        }

        return inventTestInstrumentCalibration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsDelaySigned</Name>
				<Source><![CDATA[
    public boolean pipIsDelaySigned()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preferredProviderId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the class ID of the preferred signature provider.
    /// </summary>
    /// <returns>
    ///     The class ID of the preferred signature provider.
    /// </returns>
    protected ClassId preferredProviderId()
    {
        return classNum(PIPSIGCalibrationApproveProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupAllowed</Name>
				<Source><![CDATA[
    public boolean setupAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>signatureRequired</Name>
				<Source><![CDATA[
    public boolean signatureRequired()
    {
        boolean ret;
        ClassId classId = classidget(this);
    
        ret = SIGProcSetup::classIdEnabled(classId);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPSIGCalibrationApproveProcedure construct()
    {
        return new PIPSIGCalibrationApproveProcedure();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@PIP748";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTestInstrumentCalibration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of this class by using a <c>PIPInventTestInstrumentCalibration</c> record.
    /// </summary>
    /// <param name="_testInstrumentCalibration">
    ///    The record to be used to create the instance.
    /// </param>
    /// <returns>
    ///    The new instance.
    /// </returns>
    public static PIPSIGCalibrationApproveProcedure newInventTestInstrumentCalibration(
        PIPInventTestInstrumentCalibration _testInstrumentCalibration)
    {
        PIPSIGCalibrationApproveProcedure procedure = PIPSIGCalibrationApproveProcedure::construct();
    
        procedure.parmInventTestInstrumentCalibration(_testInstrumentCalibration);
    
        return procedure;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>