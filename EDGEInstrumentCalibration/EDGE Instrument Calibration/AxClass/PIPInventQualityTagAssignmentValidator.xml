<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityTagAssignmentValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventQualityTagAssignmentValidator</c> validates the assignment of tag numbers
///     on quality order lines and results.
/// </summary>
public class PIPInventQualityTagAssignmentValidator
{
    PIPInventTestInstrumentTag      inventTestInstrumentTag;
    str                             message;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCalibrationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the appropriate message to be displayed based on the calibration status of the instrument.
    /// </summary>
    private void checkCalibrationStatus()
    {
        PIPInventTestInstrumentCalibration  testInstrumentCalibration = PIPInventTestInstrumentCalibration::findOpenCalibrationRecord(inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber);
    
        if (!testInstrumentCalibration)
        {
            testInstrumentCalibration = PIPInventTestInstrumentCalibration::findLastFailedCalibrationRecord(inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber);
        }
    
        if (testInstrumentCalibration.CalibrationCompletedBy && !testInstrumentCalibration.CalibrationApprovedBy)
        {
            if (testInstrumentCalibration.CalibrationResult == PIPInventTestCalibrationResult::Pass || testInstrumentCalibration.CalibrationResult == PIPInventTestCalibrationResult::LimitedPass)
            {
                message = strFmt("@PIP756", inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber);
            }
            else if (testInstrumentCalibration.CalibrationResult == PIPInventTestCalibrationResult::Fail)
            {
                message = strFmt("@PIP960", inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber);
            }
        }
        else if (testInstrumentCalibration && !testInstrumentCalibration.CalibrationCompletedBy)
        {
            message = strFmt("@PIP755", inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTestInstrumentTag</Name>
				<Source><![CDATA[
    public PIPInventTestInstrumentTag parmInventTestInstrumentTag(PIPInventTestInstrumentTag _inventTestInstrumentTag = inventTestInstrumentTag)
    {
        inventTestInstrumentTag = _inventTestInstrumentTag;
    
        return inventTestInstrumentTag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the current instrument calibration check result.
    /// </summary>
    /// <returns>
    ///     true if there are no problems or the problems were non-fatal; otherwise, false.
    /// </returns>
    public boolean validateTag()
    {
        PIPInventCalibrationGroup   inventCalibrationGroup  = inventTestInstrumentTag.inventCalibrationGroup();
        boolean                     ret                     = true;
    
        // check status on calibration if tag is currently being calibrated
        if (inventTestInstrumentTag.UsageStatus == PIPTestInstrumentUsageStatus::Calibration)
        {
            this.checkCalibrationStatus();
    
            switch (inventTestInstrumentTag.CalibrationCheck)
            {
                case PIPTestInstrumentCalibrationCheck::WarningOnly :
                    warning(message);
                    break;
                case PIPTestInstrumentCalibrationCheck::NotAllowed  :
                    ret = false;
                    error(message);
                    break;
            }
        }
        else if (inventTestInstrumentTag.UsageStatus != PIPTestInstrumentUsageStatus::Available)
        {
            ret = false;
            error(strFmt("@PIP817", inventTestInstrumentTag.TagNumber));
        }
    
        // check if maximum usage before calibration has been exceeded
        if (ret
            && inventCalibrationGroup.MaxUsage
            && inventTestInstrumentTag.UsageCountSinceLastCalibration >= inventCalibrationGroup.MaxUsage)
        {
            switch(InventParameters::find().PIPTagAssignmentCheckMaxUsage)
            {
                case PIPTagAssignmentCheckMaxUsage::WarningOnly :
                    warning(strFmt("@PIP841", inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber));
                    break;
                case PIPTagAssignmentCheckMaxUsage::NotAllowed  :
                    ret = false;
                    error(strFmt("@PIP841", inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber));
                    break;
            }
        }
    
        // check if lifetime usage maximum has been exceeded
        if (inventCalibrationGroup.MaxUsageLifetime
            && inventTestInstrumentTag.LifetimeUsageCount >= inventCalibrationGroup.MaxUsageLifetime)
        {
            switch(InventParameters::find().PIPTagAssignmentCheckLifetimeMaxUsage)
            {
                case PIPTagAssignmentCheckLifetimeMaxUsage::WarningOnly :
                    warning(strFmt("@PIP842", inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber));
                    break;
                case PIPTagAssignmentCheckLifetimeMaxUsage::NotAllowed  :
                    ret = false;
                    error(strFmt("@PIP842", inventTestInstrumentTag.TestInstrumentId, inventTestInstrumentTag.TagNumber));
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPInventQualityTagAssignmentValidator construct()
    {
        return new PIPInventQualityTagAssignmentValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTestInstrumentTag</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of a subclass of <c>PIPInventQualityTagAssignmentValidator</c> from the record passed in.
    /// </summary>
    /// <param name="_inventTestInstrumentTag">
    ///     A record from the <c>PIPInventTestInstrumentTag</c> table.
    /// </param>
    /// /// <returns>
    ///     A <c>PIPInventQualityTagAssignmentValidator</c> class object.
    /// </returns>
    public static PIPInventQualityTagAssignmentValidator newFromTestInstrumentTag(PIPInventTestInstrumentTag _inventTestInstrumentTag)
    {
        PIPInventQualityTagAssignmentValidator validator = PIPInventQualityTagAssignmentValidator::construct();
    
        validator.parmInventTestInstrumentTag(_inventTestInstrumentTag);
    
        return validator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>