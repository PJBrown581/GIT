<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventCalibrationUtilityDataService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventCalibrationUtilityDataService</c> class validates the test instrument tags
///     and creates Calibration records if needed.
/// </summary>
class PIPInventCalibrationUtilityDataService
{
    PIPInventTestInstrumentTag  inventTestInstrumentTag;
    int                         calibrationRecordsCreated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCalibrationRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a record in the <c>PIPInventTestInstrumentCalibration</c> table.
    /// </summary>
    private void createCalibrationRecord()
    {
        PIPInventTestInstrumentCalibration  inventTestInstrumentCalibration;
    
        inventTestInstrumentCalibration.InventTestInstrument    = inventTestInstrumentTag.TestInstrumentId;
        inventTestInstrumentCalibration.TestInstrumentTagNumber = inventTestInstrumentTag.TagNumber;
        inventTestInstrumentCalibration.initFromInventTestInstrumentTag();
        inventTestInstrumentCalibration.insert();
    
        calibrationRecordsCreated++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCalibration</Name>
				<Source><![CDATA[
    /// <summary>
    ///      Iterates through selected test instrument tags and creates Calibration records
    ///      based on the usage status of instrument tags.
    /// </summary>
    /// <param name="_inventCalibrationUtilityDataContract">
    ///     An instance of the <c>PIPInventCalibrationUtilityDataContract</c> class.
    /// </param>
    public void runCalibration(PIPInventCalibrationUtilityDataContract _inventCalibrationUtilityDataContract)
    {
        PIPInventCalibrationGroup   inventCalibrationGroup;
        QueryRun                    queryRun;
        boolean                     existsOpenCalibrationRecord;
    
        queryRun = new queryRun(_inventCalibrationUtilityDataContract.getQuery());
    
        if (!SysQuery::countTotal(queryRun))
        {
            throw error("@PIP772");
        }
    
        ttsBegin;
        while(queryRun.next())
        {
            inventTestInstrumentTag = queryRun.get(tableNum(PIPInventTestInstrumentTag));
    
            inventTestInstrumentTag.selectForUpdate(true);
    
            inventCalibrationGroup          = PIPInventCalibrationGroup::find(inventTestInstrumentTag.CalibrationGroup);
            existsOpenCalibrationRecord     = PIPInventTestInstrumentCalibration::existOpenCalibrationRecord(
                                                    inventTestInstrumentTag.TestInstrumentId,
                                                    inventTestInstrumentTag.TagNumber);
    
            switch (inventTestInstrumentTag.CalibrationMethod)
            {
                case PIPCalibrationMethod::Usage :
                    if (inventCalibrationGroup.MaxUsageLifetime && inventTestInstrumentTag.LifetimeUsageCount >= inventCalibrationGroup.MaxUsageLifetime)
                    {
                        inventTestInstrumentTag.UsageStatus = PIPTestInstrumentUsageStatus::OutOfService;
                        inventTestInstrumentTag.update();
                        break;
                    }
                    if (!existsOpenCalibrationRecord && inventCalibrationGroup.UsageCountTrigger && inventTestInstrumentTag.UsageCountSinceLastCalibration >= inventCalibrationGroup.UsageCountTrigger)
                    {
                        this.createCalibrationRecord();
                    }
                    break;
                case PIPCalibrationMethod::Manual   :
                case PIPCalibrationMethod::Periodic :
                    if (!existsOpenCalibrationRecord && inventTestInstrumentTag.CalibrationNextDate && inventTestInstrumentTag.CalibrationNextDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                    {
                        this.createCalibrationRecord();
                    }
                    break;
            }
        }
        ttsCommit;
    
        info(strFmt("@PIP773", calibrationRecordsCreated));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>