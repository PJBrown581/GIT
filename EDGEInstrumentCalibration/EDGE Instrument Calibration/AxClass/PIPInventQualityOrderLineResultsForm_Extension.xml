<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrderLineResultsForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(PIPInventQualityOrderLineResults))]
public final class PIPInventQualityOrderLineResultsForm_Extension
{
    private static readonly DictClass extClass = new DictClass(classNum(PIPInventQualityOrderLineResultsForm_Extension));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventQualityOrderLineResults_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(PIPInventQualityOrderLineResults), FormEventType::Initialized)]
    public void InventQualityOrderLineResults_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        // Important! This event subscription was added here because the AX7 Update 3 compiler builtin formControlStr does not recognize field names added to a field group through a table extension so the event cannot be declartive subscribed to.
        FormStringControl generalTagNumberControl = PIPEventHelper::findInControlGroup(this.design().controlName(formControlStr(PIPInventQualityOrderLineResults, General)) as FormGroupControl, fieldStr(InventQualityOrderLineResults, PIPTestInstrumentTagNumber)) as FormStringControl;
        generalTagNumberControl.OnLookup += eventhandler(PIPInventQualityOrderLineResultsForm_Extension::tagNumberLookupStatic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_PIPTestInstrumentTagNumber_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // MSBUG Commented because formControlStr cannot reference a field in a data group (field group assigned to the form) for fields added to that field group in a table extension
    //[FormControlEventHandler(formControlStr(PIPInventQualityOrderLineResults, General_PIPTestInstrumentTagNumber), FormControlEventType::Lookup)]
    //public void General_PIPTestInstrumentTagNumber_OnLookup(FormControl sender, FormControlEventArgs e)
    //{
    //    this.doTagNumberLookup(sender, e);
    //}

    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PIPInventQualityOrderLineResults, InventQualityOrderLineResults_PIPTestInstrumentTagNumber), FormControlEventType::Lookup)]
    public void InventQualityOrderLineResults_PIPTestInstrumentTagNumber_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        this.doTagNumberLookup(sender, e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tagNumberLookupStatic</Name>
				<Source><![CDATA[
    private static void tagNumberLookupStatic(FormControl sender, FormControlEventArgs e)
    {
        extClass.callStatic(methodStr(PIPInventQualityOrderLineResultsForm_Extension, doTagNumberLookup), sender.formRun(), sender, e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTagNumberLookup</Name>
				<Source><![CDATA[
    private void doTagNumberLookup(FormControl sender, FormControlEventArgs e)
    {
        InventTestInstrumentId testInstrumentId = inventQualityOrderLineResults.inventQualityOrderLine().TestInstrumentId;
                
        if (testInstrumentId)
        {
            PIPInventTestInstrumentTag::lookupTagsForAssignment(sender, testInstrumentId);
        }

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(PIPInventQualityOrderLineResults, InventQualityOrderLineResults), FormDataSourceEventType::Activated)]
    public void InventQualityOrderLineResults_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        InventQualityOrderLine  orderLine               = inventQualityOrderLineResults.inventQualityOrderLine();
        PIPCalibrationMethod    calibrationMethod       = PIPInventTestInstrumentTag::findByInstrumentTag(
                                                                orderLine.TestInstrumentId,
                                                                inventQualityOrderLineResults.PIPTestInstrumentTagNumber).CalibrationMethod;
        boolean                 existTagsForInstrument  = PIPInventTestInstrumentTag::existByTestInstrumentType(orderLine.TestInstrumentId);
            
        enableDSField(this.dataSource(), fieldNum(InventQualityOrderLineResults, PIPTestInstrumentTagNumber), existTagsForInstrument);
        enableDSField(this.dataSource(), fieldNum(InventQualityOrderLineResults, PIPTestInstrumentUsageIncrement), (calibrationMethod == PIPCalibrationMethod::Usage));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>