<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPSIGCalibrationApproveProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPSIGCalibrationApproveProvider</c> class provides definitions and values for
///    the calibration approval/re-opening provider.
/// </summary>
class PIPSIGCalibrationApproveProvider extends SIGSigningProvider_SQLServer
{
    SIGPassphrase       passphrase;
    PIPSIGPrintedName   printedName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPSIGCalibrationApproveProvider construct()
    {
        return new PIPSIGCalibrationApproveProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>signDataList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Signs a list of documents with the specified certificate.
    /// </summary>
    /// <param name="_documentList">
    ///    The list of documents to sign.
    /// </param>
    /// <param name="_id">
    ///    The <c>CertificateId</c> value of the certificate to use to sign the document.
    /// </param>
    /// <returns>
    ///    true if documents were signed; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_id" /> parameter could not be converted to an integer.
    /// </exception>
    public boolean signDataList(List _documentList, SIGCertificateId _id)
    {
        SIGPassphraseDialog dialog;
        SIGSignableDocument document;
        ListEnumerator      iteration;
        boolean             ret = false;
        str                 signature;

        if (!str2IntOk(_id))
        {
            throw error("@SYS138112");
        }

        if (!passphrase)
        {
            dialog = SIGPassphraseDialog::construct();
            if (dialog.prompt())
            {
                // Immediately attempt to sign a test value to ensure the passphrase is valid
                signature = provider.signDataSQL('Test value', _id, dialog.getPassphrase());
                if (signature)
                {
                    passphrase  = dialog.getPassphrase();
                    printedName = dialog.getPrintedName();
                    ret = true;
                }
            }
        }
        else
        {
            iteration = _documentList.getEnumerator();
            ret = true;
            while (ret && iteration.moveNext())
            {
                document = iteration.current();
                signature = provider.signDataSQL(document.getSignableDocument(), _id, passphrase);
                if (signature)
                {
                    document.parmSignature(signature);
                    document.parmSigningCertificateId(_id);
                    document.parmSignatureDateTime(DateTimeUtil::getSystemDateTime());
                    document.setSigningProviderId(classidget(this));

                    // Note: The original implementation we added setPrintedName to the SIGSignableDocument interface but with extensions this is not possible; currently (as of AX7 U3) the only known implementation is SIGBaseDocument which we have extended with the new setter method
                    SIGBaseDocument baseDoc = document as SIGBaseDocument;
                    if (baseDoc)
                    {
                        baseDoc.setPrintedName(printedName);
                    }
                }
                else
                {
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>