<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPTICInventQualityOrderLineResultsForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventQualityOrderLineResults))]
public final class PIPTICInventQualityOrderLineResultsForm_Extension
{
    private InventQualityOrderLine inventQualityOrderLine;
    private static readonly DictClass extClass = new DictClass(classNum(PIPTICInventQualityOrderLineResultsForm_Extension));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipUpdateCalibrationFields</Name>
				<Source><![CDATA[
    public void pipUpdateCalibrationFields()
    {
        PIPCalibrationMethod    calibrationMethod       = PIPInventTestInstrumentTag::findByInstrumentTag(
                                                                inventQualityOrderLine.TestInstrumentId,
                                                                inventQualityOrderLineResults.PIPTestInstrumentTagNumber).CalibrationMethod;
        boolean                 existTagsForInstrument  = PIPInventTestInstrumentTag::existByTestInstrumentType(inventQualityOrderLine.TestInstrumentId);
    
        inventQualityOrderLineResults_ds.object(fieldNum(InventQualityOrderLineResults,PIPTestInstrumentTagNumber)).enabled(existTagsForInstrument);
        inventQualityOrderLineResults_ds.object(fieldNum(InventQualityOrderLineResults,PIPTestInstrumentUsageIncrement)).allowEdit(calibrationMethod == PIPCalibrationMethod::Usage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(InventQualityOrderLineResults), FormEventType::Initializing)]
    public void InventQualityOrderLineResults_OnInitializing(xFormRun sender, FormEventArgs e)
    {
        if (this.args().dataset() == tableNum(InventQualityOrderLine))
        {
            inventQualityOrderLine = this.args().record() as InventQualityOrderLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(InventQualityOrderLineResults), FormEventType::Initialized)]
    public void InventQualityOrderLineResults_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        // Important! This event subscription was added here because the AX7 Update 3 compiler builtin formControlStr does not recognize field names added to a field group through a table extension so the event cannot be declartive subscribed to.
        FormStringControl generalTagNumberControl = PIPEventHelper::findInControlGroup(this.design().controlName(formControlStr(InventQualityOrderLineResults, General)) as FormGroupControl, fieldStr(InventQualityOrderLineResults, PIPTestInstrumentTagNumber)) as FormStringControl;
        generalTagNumberControl.OnLookup += eventhandler(PIPTICInventQualityOrderLineResultsForm_Extension::tagNumberLookupStatic);
        FormStringControl overviewTagNumberControl = PIPEventHelper::findInControlGroup(this.design().controlName(formControlStr(InventQualityOrderLineResults, Overview)) as FormGroupControl, fieldStr(InventQualityOrderLineResults, PIPTestInstrumentTagNumber)) as FormStringControl;
        overviewTagNumberControl.OnLookup += eventhandler(PIPTICInventQualityOrderLineResultsForm_Extension::tagNumberLookupStatic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventQualityOrderLineResults, InventQualityOrderLineResults), FormDataSourceEventType::Activated)]
    public void InventQualityOrderLineResults_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (#PIPTICEnabled)
        {
            this.pipUpdateCalibrationFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPTestInstrumentTagNumber_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(InventQualityOrderLineResults, InventQualityOrderLineResults, PIPTestInstrumentTagNumber), FormDataFieldEventType::Modified)]
    public void PIPTestInstrumentTagNumber_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        this.pipUpdateCalibrationFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tagNumberLookupStatic</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // MSBUG Commented because formControlStr cannot reference a field in a data group (field group assigned to the form) for fields added to that field group in a table extension
    //[FormControlEventHandler(formControlStr(InventQualityOrderLineResults, Overview_PIPTestInstrumentTagNumber), FormControlEventType::Lookup)]
    //public void Overview_PIPTestInstrumentTagNumber_OnLookup(FormControl sender, FormControlEventArgs e)
    //{
    //    this.lookupTagNumber(sender, e);
    //}

    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // MSBUG Commented because formControlStr cannot reference a field in a data group (field group assigned to the form) for fields added to that field group in a table extension
    //[FormControlEventHandler(formControlStr(InventQualityOrderLineResults, General_PIPTestInstrumentTagNumber), FormControlEventType::Lookup)]
    //public void General_PIPTestInstrumentTagNumber_OnLookup(FormControl sender, FormControlEventArgs e)
    //{
    //    this.lookupTagNumber(sender, e);
    //}

    private static void tagNumberLookupStatic(FormControl sender, FormControlEventArgs e)
    {
        extClass.callStatic(methodStr(PIPTICInventQualityOrderLineResultsForm_Extension, lookupTagNumber), sender.formRun(), sender, e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTagNumber</Name>
				<Source><![CDATA[
    private void lookupTagNumber(FormControl _formControl, FormControlEventArgs e)
    {
        InventTestInstrumentId testInstrumentId = inventQualityOrderLineResults.inventQualityOrderLine().TestInstrumentId;
            
        if (testInstrumentId)
        {
            PIPInventTestInstrumentTag::lookupTagsForAssignment(_formControl, testInstrumentId);
        }

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>