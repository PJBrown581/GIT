<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventNonConformanceTableCreateForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventNonConformanceTableCreate))]
public final class PIPInventNonConformanceTableCreateForm_Extension
{
    private static readonly DictClass extClass = new DictClass(classNum(PIPInventNonConformanceTableCreateForm_Extension));
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventNonConformanceTableCreate_Post_setAvailFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(InventNonConformanceTableCreate), formMethodStr(InventNonConformanceTableCreate, setAvailFields))]
    public static void InventNonConformanceTableCreate_Post_setAvailFields(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        extClass.callStatic(methodStr(PIPInventNonConformanceTableCreateForm_Extension, pipSetAvailableFields), formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSetAvailableFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// When called with a production order reference, makes the <c>InventNonConformanceType</c> editable and if the non conformance type changes
    /// from production to any other value, makes the <c>ItemId</c> field editable.
    /// </summary>
    public void pipSetAvailableFields()
    {
        if (this.args().dataset() == tableNum(ProdTable))
        {
            inventNonConformanceTable_DS.object(fieldNum(InventNonConformanceTable, InventNonConformanceType)).allowEdit(true);
            inventNonConformanceTable_DS.object(fieldNum(InventNonConformanceTable, ItemId)).allowEdit(inventNonConformanceTable.InventNonConformanceType != InventNonConformanceType::Production);                  
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventNonConformanceTable_OnValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventNonConformanceTableCreate, InventNonConformanceTable), FormDataSourceEventType::ValidatedWrite)]
    public static void InventNonConformanceTable_OnValidatedWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        InventNonConformanceTable   inventNonConformanceTable   = sender.cursor() as InventNonConformanceTable;
        FormStringControl           nonConformanceNote          = sender.formRun().design().controlName(formControlStr(InventNonConformanceTableCreate, DocuRef_Notes)) as FormStringControl;
              
        if (!nonConformanceNote.valueStr())
        {
            throw error("@PIP5035");
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventNonConformanceTableRelatedRecords</Name>
				<Source><![CDATA[
    protected void insertInventNonConformanceTableRelatedRecords()
    {
        #define.note("Note")

        next insertInventNonConformanceTableRelatedRecords();

        FormStringControl nonConformanceNote = this.design().controlName(formControlStr(InventNonConformanceTableCreate, DocuRef_Notes)) as FormStringControl;

        ttsbegin;
        DocuRef docuRef;

        docuRef.RefRecId        = InventNonConformanceTable.RecId;
        docuRef.RefTableId      = InventNonConformanceTable.TableId;
        docuRef.RefCompanyId    = InventNonConformanceTable.DataAreaId;
        docuRef.TypeId          = DocuType::find(#note).TypeId;
        docuRef.Notes           = nonConformanceNote.valueStr();

        docuRef.insert();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>