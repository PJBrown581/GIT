<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrderStatsTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventQualityOrderStatsTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the quality order statistics for quality order analytics in this temporary table.
    /// </summary>    
    /// <param name="_category">
    /// The category to populate statistics for; optional.
    /// </param>
    public void populateData(PIPInventQualityAnalyticsCategory _category = PIPInventQualityAnalyticsCategory::ReferenceType)
    {
        PIPInventQualityOrderTableAnalytics qualityOrderTableAnalytics;
        InventQualityOrderTable             inventQualityOrderTable;
        InventQualityOrderLine              inventQualityOrderLine;
        InventTestTable                     inventTestTable;
        int                                 qualityOrderCount; 
        
        delete_from this;

        select count(RecId) from inventQualityOrderTable 
            where inventQualityOrderTable.OrderStatus != InventTestOrderStatus::Open;

        qualityOrderCount = any2int(inventQualityOrderTable.RecId);

        switch(_category)
        {
            case PIPInventQualityAnalyticsCategory::ReferenceType:
                while select ReferenceType, count(RecId) from inventQualityOrderTable
                    group by ReferenceType
                    where inventQualityOrderTable.OrderStatus == InventTestOrderStatus::Fail
                {
                    this.CategoryId     = enum2Str(inventQualityOrderTable.ReferenceType);
                    this.RecordCount    = any2Int(inventQualityOrderTable.RecId); 
                    this.Percentage     = decRound((this.RecordCount/qualityOrderCount * 100), 2);
                    this.insert();
                }
                break;
            
            case PIPInventQualityAnalyticsCategory::Customer:
                while select CustAccount, count(RecId) from qualityOrderTableAnalytics
                    group by CustAccount
                    where qualityOrderTableAnalytics.CustAccount
                        && qualityOrderTableAnalytics.OrderStatus == InventTestOrderStatus::Fail
                {
                    this.CategoryId     = qualityOrderTableAnalytics.CustAccount;
                    this.RecordCount    = any2Int(qualityOrderTableAnalytics.RecId);
                    this.Percentage     = decRound((this.RecordCount/qualityOrderCount * 100), 2);
                    this.insert();
                }
                break;

            case PIPInventQualityAnalyticsCategory::Vendor:
                while select VendAccount, count(RecId) from qualityOrderTableAnalytics
                    group by VendAccount
                    where qualityOrderTableAnalytics.VendAccount
                        && qualityOrderTableAnalytics.OrderStatus == InventTestOrderStatus::Fail
                {
                    this.CategoryId     = qualityOrderTableAnalytics.VendAccount;
                    this.RecordCount    = any2Int(qualityOrderTableAnalytics.RecId);
                    this.Percentage     = decRound((this.RecordCount/qualityOrderCount * 100), 2);
                    this.insert();
                }
                break;

            case PIPInventQualityAnalyticsCategory::Product:
                while select ItemId, count(RecId) from qualityOrderTableAnalytics
                    group by ItemId  
                    where qualityOrderTableAnalytics.OrderStatus == InventTestOrderStatus::Fail
                {
                    this.CategoryId     = qualityOrderTableAnalytics.ItemId;
                    this.RecordCount    = any2Int(qualityOrderTableAnalytics.RecId);
                    this.Percentage     = decRound((this.RecordCount/qualityOrderCount * 100), 2);
                    this.insert();
                }
                break;

            case PIPInventQualityAnalyticsCategory::Test:   
                while select count(RecId) from inventQualityOrderTable
                    group by inventTestTable.TestId
                    where inventQualityOrderTable.OrderStatus           == InventTestOrderStatus::Fail
                    join TestId from inventTestTable
                    exists join inventQualityOrderLine
                        where inventQualityOrderTable.QualityOrderId    == inventQualityOrderLine.QualityOrderId
                            && inventQualityOrderLine.TestId            == inventTestTable.TestId
                {
                    if (inventQualityOrderTable.RecId)
                    {
                        this.CategoryId     = inventTestTable.TestId;
                        this.RecordCount    = any2Int(inventQualityOrderTable.RecId);
                        this.Percentage     = decRound((this.RecordCount/qualityOrderCount * 100), 2);
                        this.insert();
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@PIP3003</Label>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferenceType</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>InventTestReferenceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidatedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS113829</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OrderStatus</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>InventTestOrderStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>RecordCount</Name>
			<Label>@SYS62581</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<Label>Category identification</Label>
			<StringSize>100</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percentage</Name>
			<Label>Percentage</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>