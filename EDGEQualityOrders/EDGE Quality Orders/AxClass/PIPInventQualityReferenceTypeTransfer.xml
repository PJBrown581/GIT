<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityReferenceTypeTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PIPInventQualityReferenceTypeTransfer</c> class is a transfer reference document.
/// </summary>
[
    InventQualityReferenceTableName(tableStr(InventTransferLine)), 
    InventQualityReferenceTableName(tableStr(InventTransferParmLine)),
    InventTestReferenceTypeFactory(InventTestReferenceType::PIPTransfer)
]
class PIPInventQualityReferenceTypeTransfer extends InventQualityReferenceType
{
    InventTransferParmLine  inventTransferParmLine;
    InventTransferLine      inventTransferLine;
    InventSiteId            inventSiteId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bufferForRefQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record buffer for the source document
    /// that defines inventory quantities for the referenced document.
    /// </summary>
    /// <returns>
    /// The record buffer for the source document
    /// that defines inventory quantities for the referenced document.
    /// </returns>
    protected Common bufferForRefQty()
    {
        if (inventTransferParmLine)
        {
            return inventTransferParmLine;
        }
        else
        {
            return inventTransferLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventQualityOrderTable</c> buffer.
    /// </summary>
    /// <param name="_orderTable">
    ///    An <c>InventQualityOrderTable</c> buffer.
    /// </param>
    protected void initFromQualityOrder(InventQualityOrderTable _orderTable)
    {
        this.parmBuffer(InventTransferLine::findTransIdShip(_orderTable.InventRefTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDirection</c> for this reference type.
    /// </summary>
    /// <returns>
    /// An <c>InventDirection</c> value.
    /// </returns>
    protected InventDirection inventDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventRefId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventRefId</c> value.
    /// </returns>
    public InventRefId inventRefId()
    {
        return inventTransferLine.TransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventSiteId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventSiteId</c> value.
    /// </returns>
    public InventSiteId inventSiteId()
    {
        if (inventSiteId == '')
        {
            InventTransferTable inventTransferTable = InventTransferTable::find(inventTransferLine.TransferId);

            if (InventTransferTable.TransferStatus == InventTransferStatus::Shipped
                || InventTransferTable.TransferStatus == InventTransferStatus::Received)
            {
                inventSiteId = InventTrans::findTransId(inventTransferLine.InventTransIdReceive).inventDim().InventSiteId;
            }
            else
            {
                inventSiteId = InventTrans::findTransId(inventTransferLine.InventTransId).inventDim().InventSiteId;
            }
        }
    
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTransId</c>  value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTransId</c> value.
    /// </returns>
    public InventTransId inventTransId()
    {
        return inventTransferLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = inventTransferLine)
    {
        if (inventTransferParmLine)
        {
            _buffer = inventTransferParmLine;
        }

        if (_buffer is InventTransferParmLine)
        {
            inventTransferParmLine  = _buffer as inventTransferParmLine;
            inventTransferLine      = inventTransferParmLine.inventTransferLine();
            inventDimId             = inventTransferParmLine.InventDimId;
        }
        else
        {
            inventTransferLine = _buffer as InventTransferLine;
            inventDimId       = inventTransferLine.InventDimId;
        }

        itemId            = inventTransferLine.ItemId;
    
        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query to iterate all referred inventory transactions.
    /// </summary>
    /// <param name="_inventTestDocumentStatus">
    /// A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    /// A test execution value.
    /// </param>
    /// <param name="_discriminatingInventoryDimensions">
    /// An integer that represents discriminating inventory dimensions.
    /// </param>
    /// <returns>
    /// A query to retrieve referred inventory transactions.
    /// </returns>
    public Query queryInventTrans(
        InventTestDocumentStatus            _inventTestDocumentStatus,
        InventTestExecution                 _inventTestExecution,
        InventTestDiscriminatingInventDims  _discriminatingInventoryDimensions)
    {
        Query                   query;
        QueryBuildDataSource    qbdsInventTransOrigin;
        QueryBuildDataSource    qbdsInventTrans;
        QueryBuildDataSource    qbdsInventDim;
    
        query = new Query();
    
        qbdsInventTransOrigin = query.addDataSource(tablenum(InventTransOrigin));
        qbdsInventTransOrigin.addRange(fieldnum(InventTransOrigin, InventTransId)).value(queryValue(this.inventTransId()));
    
        qbdsInventTrans = qbdsInventTransOrigin.addDataSource(tablenum(InventTrans));
        qbdsInventTrans.relations(true);
        qbdsInventTrans.joinMode(JoinMode::InnerJoin);
        qbdsInventTrans.fetchMode(QueryFetchMode::One2One);
        qbdsInventTrans.addRange(fieldnum(InventTrans, ValueOpen)).value(queryValue(NoYes::Yes));
        this.setTransChildTypeRangeValue(qbdsInventTrans.addRange(fieldnum(InventTrans, TransChildType)),
            _inventTestDocumentStatus,
            _inventTestExecution);
    
        this.setStatusIssueRangeValue(
            qbdsInventTrans.addRange(fieldnum(InventTrans, StatusIssue)),
            _inventTestDocumentStatus,
            _inventTestExecution);
    
        this.setStatusReceiptRangeValue(
            qbdsInventTrans.addRange(fieldnum(InventTrans, StatusReceipt)),
            _inventTestDocumentStatus,
            _inventTestExecution);
    
        qbdsInventDim = qbdsInventTrans.addDataSource(tablenum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);
        this.setInventDimRange(qbdsInventDim, _inventTestExecution);
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestReferenceType</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTestReferenceType</c> value.
    /// </returns>
    public InventTestReferenceType referenceType()
    {
        return InventTestReferenceType::PIPTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusIssueRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a range value for the <c>StatusIssue</c> field on the data source of the <c>InventTrans</c>
    ///    table that is based on the document status and test execution values.
    /// </summary>
    /// <param name="_qbrStatusIssue">
    ///    A query build range object.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    protected void setStatusIssueRangeValue(
        QueryBuildRange             _qbrStatusIssue,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        if (_inventTestDocumentStatus == InventTestDocumentStatus::PickingList
            && _inventTestExecution == InventTestExecution::After
            && InventTable::find(this.itemId()).whsItemIsWHSControlled()
            && InventLocation::find(InventDim::find(this.inventDimId()).InventLocationId).WHSEnabled)
        {
            _qbrStatusIssue.value(queryValue(StatusIssue::Picked));
            
        }
        else if (_inventTestDocumentStatus == InventTestDocumentStatus::PIPShipTransfer)
        {
            _qbrStatusIssue.value(strFmt('((StatusIssue == %1) || (StatusIssue == %2) || (StatusIssue == %3))', 
                any2Int(StatusIssue::Picked), any2Int(StatusIssue::OnOrder), any2Int(StatusIssue::ReservPhysical)));
        }
        else if (_inventTestDocumentStatus == InventTestDocumentStatus::PickingList)
        {
            _qbrStatusIssue.value(SysQuery::range(StatusIssue::ReservPhysical, StatusIssue::OnOrder));
        }
        else
        {
            _qbrStatusIssue.value(queryValue(StatusIssue::Sold));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransChildTypeRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a range value for the <c>StatusIssue</c> field on the data source of the <c>InventTrans</c>
    ///    table that is based on the document status and test execution values.
    /// </summary>
    /// <param name="_qbrStatusIssue">
    ///    A query build range object.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    private void setTransChildTypeRangeValue(QueryBuildRange _qbrStatusIssue, InventTestDocumentStatus _inventTestDocumentStatus, InventTestExecution _inventTestExecution)
    {
        if (_inventTestDocumentStatus == InventTestDocumentStatus::PickingList
            && _inventTestExecution == InventTestExecution::After
            && (!InventTable::find(this.itemId()).whsItemIsWHSControlled()
                || !InventLocation::find(InventDim::find(this.inventDimId()).InventLocationId).WHSEnabled))
        {
            _qbrStatusIssue.value(queryValue(InventTransChildType::WMSOrder));
        }
        else
        {
            _qbrStatusIssue.value(queryValue(InventTransChildType::None));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimRange</Name>
				<Source><![CDATA[
    protected void setInventDimRange(QueryBuildDataSource _qbsInventDim, InventTestExecution _inventTestExecution)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsInventoryBlocking</Name>
				<Source><![CDATA[
    public boolean supportsInventoryBlocking()
    {
        if (InventParameters::find().PIPQualityTransferInventoryBlocking)
        {
            return super();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditQuarantineOnFailure</Name>
				<Source><![CDATA[
    public boolean allowEditQuarantineOnFailure()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constuct</Name>
				<Source><![CDATA[
    public static PIPInventQualityReferenceTypeTransfer constuct()
    {
        return new PIPInventQualityReferenceTypeTransfer();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>