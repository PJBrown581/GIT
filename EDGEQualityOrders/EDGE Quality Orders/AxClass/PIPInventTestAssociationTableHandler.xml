<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventTestAssociationTableHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventTestAssociationTableHandler</c> class provides method event subscription handlers for the
///     <c>InventTestAssociationTable</c> table.
/// </summary>
public class PIPInventTestAssociationTableHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventTestAssociationTable_isEligibleForBlockProcessDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="_inventTestAssociationTable"></param>
    /// <param name="_blockProcess"></param>
    /// <param name="_eventHandlerResult"></param>
    [SubscribesTo(tableStr(InventTestAssociationTable), delegateStr(InventTestAssociationTable, isEligibleForBlockProcessDelegate))]
    public static void InventTestAssociationTable_isEligibleForBlockProcessDelegate(InventTestAssociationTable _inventTestAssociationTable, InventTestBlockProcess _blockProcess, EventHandlerResult _eventHandlerResult)
    {
        switch (_inventTestAssociationTable.OrderType)
        {
            case InventTestReferenceType::PIPTransfer:
                switch (_inventTestAssociationTable.DocumentType)
                {
                    case InventTestDocumentStatus::PickingList:
                        if ((_blockProcess == InventTestBlockProcess::PickingList && _inventTestAssociationTable.TestExecution == InventTestExecution::Before)
                            || _blockProcess == InventTestBlockProcess::PIPShipTransfer
                            || _blockProcess == InventTestBlockProcess::PIPReceive)
                        {
                            _eventHandlerResult.booleanResult(true);
                        }
                        break;
                    case InventTestDocumentStatus::PIPShipTransfer:
                        if (_blockProcess == InventTestBlockProcess::PIPShipTransfer
                            || _blockProcess == InventTestBlocKProcess::PIPReceive)
                        {
                            _eventHandlerResult.booleanResult(true);
                        }
                        break;
                    case InventTestDocumentStatus::PIPReceive:
                        if ((_blockProcess == InventTestBlockProcess::PIPReceive && _inventTestAssociationTable.TestExecution == InventTestExecution::Before))
                        {
                            _eventHandlerResult.booleanResult(true);
                        }
                        break;
                }
                break;
            case InventTestReferenceType::PIPReturn:
                switch (_inventTestAssociationTable.DocumentType)
                {
                    case InventTestDocumentStatus::PackingSlip:
                        if ((_blockProcess == InventTestBlockProcess::PackingSlip && _inventTestAssociationTable.TestExecution == InventTestExecution::Before)
                            || _blockProcess == InventTestBlockProcess::Invoice)
                        {
                            _eventHandlerResult.booleanResult(true);
                        }
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOrderTypeAndDocStatusConsistentPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(InventTestAssociationTable), tableStaticMethodStr(InventTestAssociationTable, isOrderTypeAndDocumentStatusConsistent))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="isOrderTypeAndDocStatusConsistent method"/> on this class.
    /// </summary>
    /// <param name="_ppArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void isOrderTypeAndDocStatusConsistentPost(XppPrePostArgs _ppArgs)
    {
        InventTestReferenceType     referenceType   = _ppArgs.getArg('_referenceType');
        InventTestDocumentStatus    documentStatus  = _ppArgs.getArg('_documentStatus');
    
        switch (referenceType)
        {
            case InventTestReferenceType::PIPReturn :
                _ppArgs.setReturnValue(documentStatus == InventTestDocumentStatus::PackingSlip);
                break;
            case InventTestReferenceType::PIPTransfer :
                _ppArgs.setReturnValue(documentStatus == InventTestDocumentStatus::PickingList
                    || documentStatus == InventTestDocumentStatus::PIPShipTransfer
                    || documentStatus == InventTestDocumentStatus::PIPReceive);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>