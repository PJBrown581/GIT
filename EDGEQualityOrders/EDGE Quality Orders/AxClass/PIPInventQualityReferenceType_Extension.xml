<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityReferenceType_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventQualityReferenceType))]
public final class PIPInventQualityReferenceType_Extension
{
    public const str SharedVarTransferReceiveBlocking  = 'InventQualityReferenceType.TransferReceiveBlocking';
    public const str SharedVarIsReceive = 'InventQualityReferenceType.IsReceive';
    public const str SharedVarIsWhs = 'InventQualityReferenceType.IsWhs';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipNewFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventQualityReferenceType</c> class that is based
    /// on a table buffer that contains a reference document.
    /// </summary>
    /// <param name="_buffer">
    /// A <c>Common</c> table buffer that contains the reference document.
    /// </param>
    /// <param name="_isTransferReceiveAfter">
    /// Determines if the quality order is being processed for a transfer order after receipt; optional.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventQualityReferenceType</c> class.
    /// </returns>
    public static InventQualityReferenceType pipNewFromBuffer(Common _buffer, boolean _isTransferReceive = false)
    {
        InventQualityReferenceType referenceType;

        switch (_buffer.TableId)
        {
            case tableNum(InventTransferParmLine) :
            case tableNum(InventTransferLine) :
                if (_isTransferReceive)
                {
                    referenceType = PIPInventQualityRefTypeTransferReceive::constuct();
                }
                break;
        }

        if (referenceType)
        {
            referenceType.parmBuffer(_buffer);
        }
        else
        {
            referenceType = InventQualityReferenceType::newFromBuffer(_buffer);
        }

        return referenceType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityReferenceType_Post_newFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(InventQualityReferenceType), staticMethodStr(InventQualityReferenceType, newFromBuffer))]
    public static void InventQualityReferenceType_Post_newFromBuffer(XppPrePostArgs _args)
    {
        Common buffer = _args.getArg('_buffer');

        InventQualityReferenceType ret;
        SalesLine salesLine;
        switch (buffer.TableId)
        {
            case tablenum(SalesParmLine) :
                SalesParmLine salesParmLine = buffer as SalesParmLine;
    
                salesLine = salesParmLine.salesLine();
            //fall through
            case tablenum(SalesLine) :
                if (!salesLine)
                    salesLine = buffer as SalesLine;
    
                if (salesLine.QtyOrdered <= 0)
                {
                    ret = PIPInventQualityReferenceTypeReturn::construct();
                }
                break;

            case tableNum(InventTransferParmLine) :
            case tableNum(InventTransferLine) :
                boolean isTransferReceive = PIPThreadVariable::get(SharedVarIsReceive);
                if (isTransferReceive)
                {
                    ret = PIPInventQualityRefTypeTransferReceive::constuct();
                }
                break;
        }

        if (ret)
        {
            ret.parmBuffer(buffer);

            _args.setReturnValue(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipNewFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventQualityReferenceType</c> class that is based
    /// on a quality order.
    /// </summary>
    /// <param name="_orderTable">
    /// An <c>InventQualityOrderTable</c> buffer.
    /// </param>
    /// <param name="_isTransferReceiveAfter">
    /// Determines if the quality order is being processed for a transfer order after receipt; optional.
    /// </param>
    /// <param name="_sFromForm">
    /// Determines if the quality order is begin processed in a form; optional.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventQualityReferenceType</c> class.
    /// </returns>
    public static InventQualityReferenceType pipNewFromQualityOrder(InventQualityOrderTable _orderTable, boolean _isTransferReceive = false, boolean _isFromForm = false)
    {
        InventQualityReferenceType ret;

        switch (_orderTable.ReferenceType)
        {
            case InventTestReferenceType::PIPTransfer:
                if (_isTransferReceive)
                {
                    ret = PIPInventQualityRefTypeTransferReceive::constuct();
                }
                else
                {
                    ret = PIPInventQualityReferenceTypeTransfer::constuct();
                }
                break;

            case InventTestReferenceType::PIPReturn:
                ret = PIPInventQualityReferenceTypeReturn::newFromForm(_isFromForm);
                break;
        }

        if (ret)
        {
            ret.initFromQualityOrder(_orderTable);
        }
        else
        {
            ret = InventQualityReferenceType::newFromQualityOrder(_orderTable);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>