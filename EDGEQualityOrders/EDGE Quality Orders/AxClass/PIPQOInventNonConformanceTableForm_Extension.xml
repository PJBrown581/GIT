<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPQOInventNonConformanceTableForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventNonConformanceTable))]
public final class PIPQOInventNonConformanceTableForm_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initInventNonConformanceTableQuery</Name>
				<Source><![CDATA[
    protected void initInventNonConformanceTableQuery()
    {
        next initInventNonConformanceTableQuery();

        switch (this.args().dataset())
        {
            case tableNum(SalesTable):
                SalesTable salesTable = this.args().record() as salesTable;
        
                if (salesTable.SalesType == SalesType::ReturnItem)
                {
                    QueryBuildDataSource qbds = inventNonConformanceTable_ds.query().dataSourceTable(tableNum(InventNonConformanceTable));
                    qbds.clearRanges();
                    qbds.clearDynalinks();
                    QueryBuildDataSource qbdsOrigin = qbds.addDataSource(tableNum(InventNonConformanceOrigin));
                    qbdsOrigin.joinMode(JoinMode::ExistsJoin);
                    qbdsOrigin.relations(true);
                    QueryBuildDataSource qbdsQuality = qbdsOrigin.addDataSource(tableNum(InventQualityOrderTable));
                    qbdsQuality.joinMode(JoinMode::ExistsJoin);
                    qbdsQuality.addRange(fieldNum(InventQualityOrderTable, ReferenceType)).value(queryValue(InventTestReferenceType::PIPReturn));
                    qbdsQuality.addRange(fieldNum(InventQualityOrderTable, InventRefId)).value(salesTable.SalesId);
                }
                break;

            case tableNum(InventTransferTable):
                InventTransferTable inventTransferTable = this.args().record();
                QueryBuildDataSource qbds = inventNonConformanceTable_ds.query().dataSourceTable(tablenum(InventNonConformanceTable));
                qbds.clearRanges();
                qbds.clearDynalinks();
                QueryBuildDataSource qbdsOrigin = qbds.addDataSource(tableNum(InventNonConformanceOrigin));
                qbdsOrigin.joinMode(JoinMode::ExistsJoin);
                qbdsOrigin.relations(true);
                QueryBuildDataSource qbdsQuality = qbdsOrigin.addDataSource(tableNum(InventQualityOrderTable));
                qbdsQuality.joinMode(JoinMode::ExistsJoin);
                qbdsQuality.addRange(fieldNum(InventQualityOrderTable, ReferenceType)).value(queryValue(InventTestReferenceType::PIPTransfer));
                qbdsQuality.addRange(fieldNum(InventQualityOrderTable, InventRefId)).value(inventTransferTable.TransferId);
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>