<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityManagementCreateHandler_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventQualityManagementCreateHandler))]
public final class PIPInventQualityManagementCreateHandler_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipSalesReturnAfter</Name>
				<Source><![CDATA[
    public static void pipSalesReturnAfter(SalesFormLetter _formLetter)
    {
        SalesParmLine            parmLine;
        SalesLine                line;
        SalesParmTable           formletterParmTable;
        ParmId                   parmId               = _formLetter.parmId();
        DocumentStatus           documentStatus       = _formLetter.documentStatus();
        InventTestDocumentStatus testDocStatus;
        QueryRun                 queryTransact;
    
        if (documentStatus == DocumentStatus::PackingSlip)
        {
            testDocStatus = InventTestDocumentStatus::PackingSlip;
        }
        else
        {
            return;
        }
    
        while select formletterParmTable
            where formletterParmTable.ParmId        == parmId
               && formletterParmTable.ParmJobStatus == ParmJobStatus::Executed
        {
            queryTransact = new QueryRun(formletterParmTable.querySalesParmLine());
            while (queryTransact.next() && queryTransact.changed(tableNum(SalesParmLine)))
            {
                parmLine = queryTransact.get(tableNum(SalesParmLine));
                line     = parmLine.salesLine();
                InventQualityManagementCreate::createPerQualityAssociations(
                    line,
                    testDocStatus,
                    InventTestExecution::After,
                    parmLine.InventNow,
                    parmLine.PdsCWDeliverNow,
                    InventDim::find(line.inventDimId).InventSiteId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipTransferOrderPickingListAfter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles quality order generation after the creation of the picking list.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///    A <c>InventTransferParmTable</c> buffer.
    /// </param>
    public static void pipTransferOrderPickingListAfter(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLine  inventTransferParmLine;
        InventTransferLine      inventTransferLine;
    
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }
    
        while select InventTransId from inventTransferParmLine
            index ParmLineIdx
            where inventTransferParmLine.ParmId     == _inventTransferParmTable.ParmId &&
                  inventTransferParmLine.TransferId == _inventTransferParmTable.TransferId
        {
            inventTransferLine = InventTransferLine::findTransIdShip(inventTransferParmLine.InventTransId);
    
            InventQualityManagementCreate::createPerQualityAssociations(
                inventTransferLine,
                InventTestDocumentStatus::PickingList,
                InventTestExecution::After,
                inventTransferLine.QtyTransfer,
                inventTransferLine.PdsCWQtyTransfer,
                InventDim::find(InventTrans::findTransId(inventTransferLine.InventTransId).inventDimId).InventSiteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipTransferOrderPickingListBefore</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles quality order generation prior to the creation of the picking list.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///    A <c>InventTransferParmTable</c> buffer.
    /// </param>
    public static void pipTransferOrderPickingListBefore(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLine  inventTransferParmLine;
        InventTransferLine      inventTransferLine;
    
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }
    
        while select InventTransId from inventTransferParmLine
            index ParmLineIdx
            where inventTransferParmLine.ParmId     == _inventTransferParmTable.ParmId &&
                  inventTransferParmLine.TransferId == _inventTransferParmTable.TransferId
        {
            inventTransferLine = InventTransferLine::findTransIdShip(inventTransferParmLine.InventTransId);
    
            InventQualityManagementCreate::createPerQualityAssociations(
                inventTransferLine,
                InventTestDocumentStatus::PickingList,
                InventTestExecution::Before,
                inventTransferLine.QtyTransfer,
                inventTransferLine.PdsCWQtyTransfer,
                InventDim::find(InventTrans::findTransId(inventTransferLine.InventTransId).inventDimId).InventSiteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipTransferOrderReceiveAfter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles quality order generation after reciept of order.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///    A <c>InventTransferParmTable</c> buffer.
    /// </param>
    public static void pipTransferOrderReceiveAfter(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLine  inventTransferParmLine;
        InventTransferLine      inventTransferLine;
    
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }
    
        while select inventTransferParmLine
            index ParmLineIdx
            where inventTransferParmLine.ParmId     == _inventTransferParmTable.ParmId &&
                  inventTransferParmLine.TransferId == _inventTransferParmTable.TransferId
        {
            InventQualityManagementCreate::createPerQualityAssociations(
                inventTransferParmLine,
                InventTestDocumentStatus::PIPReceive,
                InventTestExecution::After,
                inventTransferParmLine.QtyReceiveNow,
                inventTransferParmLine.PdsCWQtyReceiveNow,
                InventDim::find(inventTransferParmLine.inventDimId).InventSiteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipTransferOrderReceiveBefore</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles quality order generation prior to reciept of order.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///    A <c>InventTransferParmTable</c> buffer.
    /// </param>
    public static void pipTransferOrderReceiveBefore(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLine  inventTransferParmLine;
        InventTransferLine      inventTransferLine;
    
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }
    
        while select inventTransferParmLine
            index ParmLineIdx
            where inventTransferParmLine.ParmId     == _inventTransferParmTable.ParmId &&
                  inventTransferParmLine.TransferId == _inventTransferParmTable.TransferId
        {
            InventQualityManagementCreate::createPerQualityAssociations(
                inventTransferParmLine,
                InventTestDocumentStatus::PIPReceive,
                InventTestExecution::Before,
                inventTransferParmLine.QtyReceiveNow,
                inventTransferParmLine.PdsCWQtyReceiveNow,
                InventDim::find(inventTransferParmLine.inventDimId).InventSiteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipTransferOrderAutoReceive</Name>
				<Source><![CDATA[
    public static void pipTransferOrderAutoReceive(InventTransferParmTable _inventTransferParmTable, InventTestExecution _inventTestExecution)
    {
        InventTransferParmLine  inventTransferParmLine;
        
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }
    
        while select InventTransId, QtyShipNow, PdsCWQtyShipNow from inventTransferParmLine
            index ParmLineIdx
            where inventTransferParmLine.ParmId     == _inventTransferParmTable.ParmId &&
                  inventTransferParmLine.TransferId == _inventTransferParmTable.TransferId
        {
            InventTransferLine inventTransferLine = InventTransferLine::findTransIdShip(inventTransferParmLine.InventTransId);

            InventQualityManagementCreate::createPerQualityAssociations(
                inventTransferLine,
                InventTestDocumentStatus::PIPReceive,
                _inventTestExecution,
                inventTransferParmLine.QtyShipNow,
                inventTransferParmLine.PdsCWQtyShipNow,
                inventTransferLine.inventDimTransitTo().InventSiteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipTransferOrderShip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles quality order generation for the shipment of a transfer order.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///    A <c>InventTransferParmTable</c> buffer.
    /// </param>
    public static void pipTransferOrderShip(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLine  inventTransferParmLine;
    
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        while select inventTransferParmLine
            index ParmLineIdx
            where inventTransferParmLine.ParmId     == _inventTransferParmTable.ParmId &&
                  inventTransferParmLine.TransferId == _inventTransferParmTable.TransferId
        {
            InventQualityManagementCreate::createPerQualityAssociations(
                inventTransferParmLine,
                InventTestDocumentStatus::PIPShipTransfer,
                InventTestExecution::Before,
                inventTransferParmLine.QtyShipNow,
                inventTransferParmLine.PdsCWQtyShipNow,
                InventDim::find(inventTransferParmLine.inventDimId).InventSiteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCreateTransferPickingListWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles order creation during work creation for outbound transfer process.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// A <c>InventTransferLine</c> table buffer.
    /// </param>
    /// <param name="_qty">
    /// Inventory quantity.
    /// </param>
    /// <param name="_cwQty">
    /// Catch weight quantity.
    /// </param>
    public static void pipCreateTransferPickingListWork(
        InventTransferLine  _inventTransferLine,
        InventQty           _qty,
        PdsCWInventQty      _cwQty)
    {
        if (!InventParameters::find().UseQualityManagement)
        {
            return;
        }

        InventQualityManagementCreate::createPerQualityAssociations(
            _inventTransferLine,
            InventTestDocumentStatus::PickingList,
            InventTestExecution::Before,
            _qty,
            _cwQty);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>