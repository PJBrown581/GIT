<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityRefTypeTransferReceive</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PIPInventQualityRefTypeTransferReceive extends PIPInventQualityReferenceTypeTransfer
{
    private InventItemSampling inventItemSampling;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromQualityOrder</Name>
				<Source><![CDATA[
    protected void initFromQualityOrder(InventQualityOrderTable _orderTable)
    {
        this.parmBuffer(InventTransferLine::findTransIdReceive(_orderTable.InventRefTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        if (PIPThreadVariable::get(InventQualityReferenceType::SharedVarTransferReceiveBlocking))
        {
            return inventTransferLine.InventTransId;
        }

        return inventTransferLine.InventTransIdReceive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId inventSiteId()
    {
        if (inventSiteId == '')
        {
            InventTransferTable inventTransferTable = InventTransferTable::find(inventTransferLine.TransferId);

            if (PIPThreadVariable::get(InventQualityReferenceType::SharedVarTransferReceiveBlocking))
            {
                inventSiteId = InventTrans::findTransId(inventTransferLine.InventTransId).inventDim().InventSiteId;
            }
            else 
            {
                inventSiteId = super();
            }
        }
    
        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = inventTransferLine)
    {
        super(_buffer);

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusIssueRangeValue</Name>
				<Source><![CDATA[
    protected void setStatusIssueRangeValue(QueryBuildRange _qbrStatusIssue, InventTestDocumentStatus _inventTestDocumentStatus, InventTestExecution _inventTestExecution)
    {
        _qbrStatusIssue.value(queryValue(StatusIssue::None));

        boolean isWhs = PIPThreadVariable::get(InventQualityReferenceType::SharedVarIsWhs);
        
        if (_inventTestExecution == InventTestExecution::After && isWhs)
        {
            _qbrStatusIssue.value(strFmt('((StatusIssue == %1) || (StatusIssue == %2))',
                    any2Int(StatusIssue::None), any2Int(StatusIssue::Sold)));
        }
        else
        {
            _qbrStatusIssue.value(queryValue(StatusIssue::None));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReceiptRangeValue</Name>
				<Source><![CDATA[
    protected void setStatusReceiptRangeValue(QueryBuildRange _qbrStatusReceipt, InventTestDocumentStatus _inventTestDocumentStatus, InventTestExecution _inventTestExecution)
    {
        boolean isWhs = PIPThreadVariable::get(InventQualityReferenceType::SharedVarIsWhs);
        
        if (_inventTestExecution == InventTestExecution::Before)
        {
            if (isWhs)
            {
                _qbrStatusReceipt.value(strFmt('((StatusReceipt == %1) || (StatusReceipt == %2))',
                        any2Int(StatusReceipt::Registered), any2Int(StatusReceipt::Ordered)));
            }
            else
            {
                _qbrStatusReceipt.value(queryValue(StatusReceipt::Ordered));
            }
        }
        else
        {
            if (isWhs)
            {
                _qbrStatusReceipt.value(strFmt('((StatusReceipt == %1) || (StatusReceipt == %2))',
                    any2Int(StatusReceipt::Purchased), any2Int(StatusReceipt::Ordered)));
            }
            else
            {
                _qbrStatusReceipt.value(queryValue(StatusReceipt::Purchased));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constuct</Name>
				<Source><![CDATA[
    public static PIPInventQualityRefTypeTransferReceive constuct()
    {
        return new PIPInventQualityRefTypeTransferReceive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimRange</Name>
				<Source><![CDATA[
    protected void setInventDimRange(QueryBuildDataSource _qbsInventDim, InventTestExecution _inventTestExecution)
    {
        boolean isWhs = PIPThreadVariable::get(InventQualityReferenceType::SharedVarIsWhs);
        
        if (isWhs)
        {
            _qbsInventDim.addRange(fieldNum(InventDim, inventDimId)).value(queryValue(inventDimId));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>