<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPQOInventQualityOrderLineResults_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventQualityOrderLineResultsHandler</c> class provides method event subscription handlers for the
///     <c>InventQualityOrderLineResults</c> table.
/// </summary>
[ExtensionOf(tableStr(InventQualityOrderLineResults))]
public final class PIPQOInventQualityOrderLineResults_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipResetTestResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets test result to there default values.
    /// </summary>
    public void pipResetTestResults()
    {
        this.selectForUpdate(true);
    
        ttsBegin;
        if (this.inventQualityOrderLine().VariableOutcomeIdStandard)
        {
            this.TestResultValueOutcome = this.inventQualityOrderLine().VariableOutcomeIdStandard;
        }
        
        this.TestResultValueReal = 0;
        this.PIPTestResultsExist = NoYes::No;
        this.TestResult = InventTestOutcomeStatus::Fail;
        this.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventQualityOrderLinePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(InventQualityOrderLineResults), tableMethodStr(InventQualityOrderLineResults, validateWrite))]
    /// <summary>
    ///     Executes logic in the post event for the <c>InventQualityOrderLineResults</c> <see cref="initFromInventQualityOrderLine method"/> method.
    /// </summary>
    /// <param name="_args">
    ///     The arguments passed by the event hanlder.
    /// </param>
    public static void initFromInventQualityOrderLinePost(XppPrePostArgs _args)    
    {
        InventQualityOrderLineResults   inventQualityOrderLineResults   = _args.getThis();
        InventQualityOrderTable         inventQualityOrderTable         = inventQualityOrderLineResults.inventQualityOrderTable();
        boolean                         isCWItem                        = PdsGlobal::pdsIsCWItem(inventQualityOrderTable.ItemId);
        
        if (#PIPQualityQuickResultsEntryEnabled)      
        {
            if (isCWItem && !inventQualityOrderLineResults.PdsCWTestResultQuantity)            
            {
                inventQualityOrderLineResults.PdsCWTestResultQuantity    = conPeek(inventQualityOrderLineResults.pdsSumOfResultsQtyPair(), 2);
                inventQualityOrderLineResults.TestResultQuantity         = PdsCatchWeight::minInventQty(inventQualityOrderTable.ItemId, inventQualityOrderLineResults.PdsCWTestResultQuantity);
            }
            else if (!inventQualityOrderLineResults.TestResultQuantity)           
            {
                inventQualityOrderLineResults.TestResultQuantity = inventQualityOrderLineResults.sumOfResultsQty();                
            }            
        }     
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_Post_modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(tableStr(InventQualityOrderLineResults), tableMethodStr(InventQualityOrderLineResults, modifiedField))]
    public static void InventQualityOrderLineResults_Post_modifiedField(XppPrePostArgs args)
    {
        InventQualityOrderLineResults   _this       = args.getThis() as InventQualityOrderLineResults;
        InventQualityOrderLineResults   resultsOrig = _this.orig();
        FieldId                         fieldId     = args.getArg('_fieldId');

        switch(fieldId)
        {
            case fieldNum(InventQualityOrderLineResults, TestResultValueOutcome):
                _this.PIPTestResultsExist = NoYes::Yes;
                break;

            case fieldNum(InventQualityOrderLineResults, TestResultValueReal):
                _this.PIPTestResultsExist = NoYes::Yes;
                break;        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipOutcomeStatusDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the outcome description for display.
    /// </summary>
    /// <returns>
    ///    The outcome description value for display; or blank if the quality order line result is defined to use a test with an outcome variable.
    /// </returns>
    // Do not cache this display method as the form control needs to update when the outcome status result value is changed; not when the record is saved.
    public display Description pipOutcomeStatusDescription()
    {
        InventQualityOrderLine  qualityOrderLine = this.inventQualityOrderLine();
        InventTestTable         inventTestTable = InventTestTable::find(qualityOrderLine.TestId);

        if (inventTestTable.canHaveOutcome())
        {
            return InventTestVariableOutcome::find(qualityOrderLine.VariableId, this.TestResultValueOutcome).Description;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSkipTest</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a the skip test value for the related quality order line.
    /// </summary>
    /// <returns>
    ///    The skip test value for the related quality order line.
    /// </returns>
    // todo This display method should be in 'Overview' fieldgroup
    [SysClientCacheDataMethod]
    public display PIPSkipTest pipSkipTest()
    {
        return this.inventQualityOrderLine().PIPSkipTest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDecimal</Name>
				<Source><![CDATA[
    // MSBUG When decimal precision for UOM is 0 the inputed value is not being rounded, bug report to be submitted to MS
    // will remove fix once standard has been updated.
    public void setDecimal()
    {
        next setDecimal();

        InventQualityOrderLine  qualityOrderLine = this.inventQualityOrderLine();
        UnitOfMeasureSymbol     unitSymbol = qualityOrderLine.TestUnitId == null ?
            InventTestTable::find(qualityOrderLine.TestId).TestUnitId :
            qualityOrderLine.TestUnitId;

        UnitOfMeasureDecimalPrecision decimalPrecision = UnitOfMeasure::unitOfMeasureDecimalPrecision(
            UnitOfMeasure::unitOfMeasureIdBySymbol(unitSymbol));

        if (decimalPrecision > -1)
        {
            this.TestResultValueReal = decRound(this.TestResultValueReal, decimalPrecision);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>