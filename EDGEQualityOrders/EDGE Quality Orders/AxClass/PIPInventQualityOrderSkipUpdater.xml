<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrderSkipUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPInventQualityOrderSkipUpdater extends RunBase
{
    InventQualityOrderLine      inventQualityOrderLine;
    PIPSkipTest                 skipTest;
    MultiSelectionHelper        multiSelectionHelper;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        skipTest
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAllSelectedLinesSameSkipSetting</Name>
				<Source><![CDATA[
    private boolean isAllSelectedLinesSameSkipSetting()
    {
        boolean                 ret = true;
        InventQualityOrderLine  orderLine;
        PIPSkipTest             skip;

        if (multiSelectionHelper)
        {
            orderLine = multiSelectionHelper.getFirst();
            skip = orderLine.PIPSkipTest;
            while (orderLine.RecId)
            {
                if (skip != orderLine.PIPSkipTest)
                {
                    ret = false;
                    break;
                }

                orderLine = multiSelectionHelper.getNext();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQualityOrderLine</Name>
				<Source><![CDATA[
    public InventQualityOrderLine parmInventQualityOrderLine(InventQualityOrderLine _inventQualityOrderLine = inventQualityOrderLine)
    {
        inventQualityOrderLine = _inventQualityOrderLine;

        return inventQualityOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipTest</Name>
				<Source><![CDATA[
    public PIPSkipTest parmSkipTest(PIPSkipTest _skipTest = skipTest)
    {
        skipTest = _skipTest;

        return skipTest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        InventQualityOrderLine  orderLine;

        if (!this.validate())
        {
            return;
        }

        ttsBegin;

        if (multiSelectionHelper)
        {
            orderLine = multiSelectionHelper.getFirst();
            while (orderLine.RecId)
            {
                this.updateSkipTest(orderLine);
                orderLine = multiSelectionHelper.getNext();
            }
        }
        else
        {
            this.updateSkipTest(inventQualityOrderLine);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSkipTest</Name>
				<Source><![CDATA[
    private void updateSkipTest(InventQualityOrderLine _orderLine)
    {
        _orderLine.selectForUpdate(true);

        // Microsoft made a change in 10.0.17 so that InventQualityOrderLineResults.setTestResult() sometimes (if quality line has a batch attribute and set to update batch attributes) this will
        // read a fresh copy of the quality order line and update the database record (calling inventQualityOrderLine.doUpdate()). Unfortunately InventQualityOrderLine.validateWrite() calls this setTestResult() method.
        // Our workararound here is to redo the work after calling validateWrite() so we know at least that our changes are valid -- not ideal but what we are stuck with (or a buf2buf copy but that could potentially
        // destory the changes validateWrite() call had made to the record).
        this.updateSkipTestAfterLock(_orderLine);

        if (_orderLine.validateWrite())
        {
            _orderLine.reread();
            this.updateSkipTestAfterLock(_orderLine);
            _orderLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSkipTestAfterLock</Name>
				<Source><![CDATA[
    private void updateSkipTestAfterLock(InventQualityOrderLine _orderLine)
    {
        _orderLine.PIPSkipTest = skipTest;

        if (skipTest)
        {
            _orderLine.IncludeResults               = NoYes::No;
            _orderLine.PdsUpdateBatchAttributes     = NoYes::No;
            _orderLine.CertificateOfAnalysisReport  = NoYes::No;
        }
        else
        {
            _orderLine.IncludeResults               = NoYes::Yes;
            _orderLine.CertificateOfAnalysisReport  = _orderLine.inventTestGroupMember().CertificateOfAnalysis;
        }

        _orderLine.pipResetTestResults(!skipTest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        InventQualityOrderLine  orderLine;
        PIPSkipTest             skip;
        boolean                 ret = true;
        boolean                 hasResults = false;

        if (inventQualityOrderLine.isFormDataSource())
        {
            multiSelectionHelper = MultiSelectionHelper::construct();
            multiSelectionHelper.parmDatasource(inventQualityOrderLine.dataSource());
        }

        if (multiSelectionHelper)
        {
            orderLine = multiSelectionHelper.getFirst();
            skip = orderLine.PIPSkipTest;
            while (orderLine.RecId)
            {
                if (skip != orderLine.PIPSkipTest)
                {
                    ret = checkFailed("@PIP1157");
                    break;
                }

                if (skipTest)
                {
                    hasResults = hasResults || orderLine.pipInventTestOrderLineResultsExist();
                }

                orderLine = multiSelectionHelper.getNext();
            }
        }
        else
        {
            hasResults = inventQualityOrderLine.pipInventTestOrderLineResultsExist();
        }

        if (ret && hasResults && Box::okCancel("@PIP1155", DialogButton::Cancel) == DialogButton::Cancel)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventQualityOrderSkipUpdater construct()
    {
        return new PIPInventQualityOrderSkipUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPInventQualityOrderSkipUpdater    skipUpdater = PIPInventQualityOrderSkipUpdater::construct();
        InventQualityOrderLine              orderLine;
        InventQualityOrderLineResults       orderLineResults;

        switch (_args.dataset())
        {
            case tableNum(InventQualityOrderLine):
                orderLine = _args.record();
                break;

            case tableNum(InventQualityOrderLineResults):
                orderLineResults = _args.record();
                orderLine = orderLineResults.inventQualityOrderLine();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        skipUpdater.parmInventQualityOrderLine(orderLine);
        skipUpdater.parmSkipTest(!orderLine.PIPSkipTest);

        skipUpdater.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>