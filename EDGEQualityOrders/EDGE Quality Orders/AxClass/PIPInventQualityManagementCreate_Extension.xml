<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityManagementCreate_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(InventQualityManagementCreate))]
public final class PIPInventQualityManagementCreate_Extension
{
    public static str SharedVarQualityOrderTableTransferReceive = 'InventQualityOrderTable.transferReceive';
    public static str SharedVarQualityOrderTableFromForm = 'InventQualityOrderTable.fromForm';
    public static str SharedVarQualityOrderTableRef2TransTypeInventRefId = 'InventQualityOrder.referenceType2TransType._inventRefId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createQualityOrder</Name>
				<Source><![CDATA[
    protected void createQualityOrder(
        InventTestAssociationTable  _inventTestAssociationTable,
        InventQty                   _quantityToSample,
        InventDimId                 _inventDimId,
        PdsCWInventQty              _cwQuantityToSample)
    {
        try
        {
            PIPThreadVariable::save(SharedVarQualityOrderTableTransferReceive, this.parmReferenceType() is PIPInventQualityRefTypeTransferReceive);
        
            next createQualityOrder(_inventTestAssociationTable, _quantityToSample, _inventDimId, _cwQuantityToSample);
        }
        finally
        {
            PIPThreadVariable::remove(SharedVarQualityOrderTableTransferReceive);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQuantitiesToSample</Name>
				<Source><![CDATA[
    protected PmfQtyDataCarrier calculateQuantitiesToSample()
    {
        PmfQtyDataCarrier qty = next calculateQuantitiesToSample();

        if (referenceType.ReferenceType() == InventTestReferenceType::PIPReturn)
        {
            qty.parmInventQty(abs(qty.parmInventQty()));
            qty.parmCwQty(abs(qty.parmCwQty()));
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPerQualityAssociations</Name>
				<Source><![CDATA[
    public static void createPerQualityAssociations(
        Common                      _buffer,
        InventTestDocumentStatus    _documentStatus,
        InventTestExecution         _execution,
        InventQty                   _updatedQuantity,
        PdsCWInventQty              _cwUpdatedQuantity,
        InventSiteId                _inventSiteId)
    {
        try
        {
            PIPThreadVariable::save(InventQualityReferenceType::SharedVarIsReceive, (_buffer is InventTransferLine || _buffer is InventTransferParmLine) && _documentStatus == InventTestDocumentStatus::PIPReceive);

            next createPerQualityAssociations(_buffer, _documentStatus, _execution, _updatedQuantity, _cwUpdatedQuantity, _inventSiteId);
        }
        finally 
        {
            PIPThreadVariable::remove(InventQualityReferenceType::SharedVarIsReceive);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNeedToGenerateQualityOrders</Name>
				<Source><![CDATA[
    protected boolean checkNeedToGenerateQualityOrders(InventTestAssociationTable _inventTestAssociationTable)
    {
        boolean ret = next checkNeedToGenerateQualityOrders(_inventTestAssociationTable);

        if (ret && (referenceType.referenceType() == InventTestReferenceType::PIPTransfer || 
                    referenceType.referenceType() == InventTestReferenceType::PIPReturn))
        {
            if (this.existsQualityOrderForAssociation(_inventTestAssociationTable))
            {
                ret = false;
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsQualityOrderForAssociation</Name>
				<Source><![CDATA[
    protected boolean existsQualityOrderForAssociation(InventTestAssociationTable _inventTestAssociationTable)
    {
        boolean ret = next existsQualityOrderForAssociation(_inventTestAssociationTable);
     
        boolean isWhs = PIPThreadVariable::get(InventQualityReferenceType::SharedVarIsWhs);

        if (isWhs && referenceType.referenceType() == InventTestReferenceType::PIPTransfer)
        {     
            if (ret && !(InventQualityOrderTable::pipFindLastClosedQualityOrderForAssociationIncludeDim(
                        _inventTestAssociationTable,
                        referenceType.inventRefId(),
                        referenceType.inventTransId(),
                        referenceType.itemId(),
                        referenceType.referenceType(),
                        referenceType.inventDimId(),
                        referenceType.routeOprId(),
                        referenceType.oprNum())
                ||  InventQualityOrderTable::pipFindOpenQualityOrderForAssociationIncludeDim(
                        _inventTestAssociationTable,
                        referenceType.inventRefId(),
                        referenceType.inventTransId(),
                        referenceType.itemId(),
                        referenceType.referenceType(),
                        referenceType.inventDimId(),
                        referenceType.routeOprId(),
                        referenceType.oprNum())))
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatedCWQuantity</Name>
				<Source><![CDATA[
    protected PdsCWInventQty parmUpdatedCWQuantity(PdsCWInventQty _updatedCWQuantity)
    {
        updatedCWQuantity = next parmUpdatedCWQuantity(_updatedCWQuantity);

        if (referenceType.ReferenceType() == InventTestReferenceType::PIPReturn)
        {
            updatedCWQuantity = abs(_updatedCWQuantity);
        }

        return updatedCWQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdatedQuantity</Name>
				<Source><![CDATA[
    protected InventQty parmUpdatedQuantity(InventQty _updatedQuantity)
    {
        updatedQuantity = next parmUpdatedQuantity(_updatedQuantity);

        if (referenceType.ReferenceType() == InventTestReferenceType::PIPReturn)
        {
            updatedQuantity = abs(_updatedQuantity);
        }

        return updatedQuantity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>