<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPQOInventQualityOrderLine_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventQualityOrderLine))]
public final class PIPQOInventQualityOrderLine_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipLookupOrderLinesFromTestSequence</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a lookup for the <c>InventQualityOrderLine</c> table.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///     The form string control object with which to perform the lookup.
    /// </param>
    /// <param name="_qualityOrderId">
    ///     The quality order ID of the record(s) to find.
    /// </param>
    public static void pipLookupOrderLinesFromTestSequence(FormIntControl _lookupCtrl, InventQualityOrderId _qualityOrderId)
    {
        SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventQualityOrderLine), _lookupCtrl);
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventQualityOrderLine));
        QueryBuildRange         queryBuildRange         = queryBuildDataSource.addRange(fieldNum(InventQualityOrderLine, QualityOrderId));
        
        if (_qualityOrderId)
        {
            queryBuildRange.value(queryValue(_qualityOrderId));
        }

        sysTableLookup.addLookupfield(fieldNum(InventQualityOrderLine, TestSequence), true);
        sysTableLookup.addLookupfield(fieldNum(InventQualityOrderLine, TestId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipLookupOrderLinesFromTestId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a lookup for the <c>InventQualityOrderLine</c> table.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///     The form integer control object with which to perform the lookup.
    /// </param>
    /// <param name="_qualityOrderId">
    ///     The quality order ID of the record(s) to find.
    /// </param>
    public static void pipLookupOrderLinesFromTestId(FormStringControl _lookupCtrl, InventQualityOrderId _qualityOrderId)
    {
        SysTableLookup          sysTableLookup          = SysTableLookup::newParameters(tableNum(InventQualityOrderLine), _lookupCtrl);
        Query                   query                   = new Query();
        QueryBuildDataSource    queryBuildDataSource    = query.addDataSource(tableNum(InventQualityOrderLine));
        QueryBuildRange         queryBuildRange         = queryBuildDataSource.addRange(fieldNum(InventQualityOrderLine, QualityOrderId));
        
        if (_qualityOrderId)
        {
            queryBuildRange.value(queryValue(_qualityOrderId));
        }

        sysTableLookup.addLookupfield(fieldNum(InventQualityOrderLine, TestId), true);
        sysTableLookup.addLookupfield(fieldNum(InventQualityOrderLine, TestSequence));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipInventTestOrderLineResultsExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the value of test result exist field.
    /// </summary>
    /// <returns>
    ///   The value of the test result field.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display PIPTestResultsExist pipInventTestOrderLineResultsExist()
    {
        InventQualityOrderLineResults lineResults;

        select firstonly PIPTestResultsExist from lineResults
                where lineResults.QualityOrderId == this.QualityOrderId
                    && lineResults.TestSequence == this.TestSequence
                    && lineResults.PIPTestResultsExist == NoYes::Yes;

        return lineResults.PIPTestResultsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipTestDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the test ID for display purposes.
    /// </summary>
    /// <returns>
    /// The description of the test ID.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display Description pipTestDescription()
    {
        return InventTestTable::find(this.TestId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipResetTestResults</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the test results for this order line.
    /// </summary>
    /// <param name="_includeResults">
    ///    Determines if the single result record that is left (though cleared) should be set to include results.
    /// </param>
    public void pipResetTestResults(boolean _includeResults)
    {
        InventQualityOrderLineResults   lineResults;
        InventQualityOrderTable         qualityOrder;
        boolean                         first           = true;
        boolean                         resultsSplit    = false;

        while select forUpdate lineResults
            order by LineNum
            where lineResults.QualityOrderId    == this.QualityOrderId
                && lineResults.TestSequence     == this.TestSequence
    
        {
            if (first)
        
            {
                lineResults.pipResetTestResults();
                if (lineResults.IncludeResults != _includeResults)
            
                {
                    lineResults.IncludeResults = _includeResults;
                    lineResults.update();
            
                }
                first = false;
        
            }
            else
            {
                resultsSplit = true;
                lineResults.delete();
            }
        }

        if (resultsSplit)
        {
            select firstOnly forUpdate lineResults
                order by LineNum
                where lineResults.QualityOrderId    == this.QualityOrderId
                    && lineResults.TestSequence     == this.TestSequence;

            qualityOrder = lineResults.inventQualityOrderTable();
            lineResults.PdsCWTestResultQuantity = qualityOrder.PdsCWQty;
            lineResults.TestResultQuantity      = qualityOrder.Qty;
            lineResults.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayResultImage</Name>
				<Source><![CDATA[
    public display container displayResultImage()
    {
        container res = next displayResultImage();

        if (this.PIPSkipTest)
        {
            res = ImageReference::constructForSymbol(ImageReferenceSymbol::NotAvailable).pack();
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTestGroupMember</Name>
				<Source><![CDATA[
    public void initFromInventTestGroupMember(InventTestGroupMember _inventTestGroupMember)
    {
        next initFromInventTestGroupMember(_inventTestGroupMember);
        this.setBatchAttributeRangeDefaults(_inventTestGroupMember);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBatchAttributeRangeDefaults</Name>
				<Source><![CDATA[
    public void setBatchAttributeRangeDefaults(InventTestGroupMember _inventTestGroupMember)
    {
        InventQualityOrderTable inventQualityOrderTable = this.inventQualityOrderTable();
        ItemId itemId = inventQualityOrderTable.ItemId;

        if (_inventTestGroupMember.PIPBatchAttributeRangeDefaultMethod != PIPBatchAttributeRangeDefaultMethod::TestGroupOnly)
        {
            SalesTable salesTable = SalesTable::find(inventQualityOrderTable.InventRefId);

            PdsBatchAttribByItemCustomer attribByItemCustomer;

            if (_inventTestGroupMember.PIPBatchAttributeRangeDefaultMethod == PIPBatchAttributeRangeDefaultMethod::ProductAndCustomerSpecific
                    && inventQualityOrderTable.ReferenceType == InventTestReferenceType::Sales)
            {
                attribByItemCustomer = PdsBatchAttribByItemCustomer::pipFindByItemId(itemId,
                                                                    this.PdsBatchAttribId,
                                                                    TableGroupAll::Table,
                                                                    salesTable.custTable_CustAccount());
            }
            
            PdsBatchAttribByItem attribByItem = PdsBatchAttribByItem::findItemId(itemId, this.PdsBatchAttribId, TableGroupAll::Table);
            PdsBatchAttribByAttribGroup attribByAttribGroup = PdsBatchAttribByItem::getAttribFromGroup(itemId, this.PdsBatchAttribId);
            
            if (attribByItemCustomer)
            {
                this.LowerLimit = attribByItemCustomer.PdsBatchAttribMin;
                this.UpperLimit = attribByItemCustomer.PdsBatchAttribMax;
            }
            else if (attribByItem)
            {
                this.LowerLimit = attribByItem.PdsBatchAttribMin;
                this.UpperLimit = attribByItem.PdsBatchAttribMax;
            }
            else if (attribByAttribGroup)
            {
                this.LowerLimit = attribByAttribGroup.PdsBatchAttribMin;
                this.UpperLimit = attribByAttribGroup.PdsBatchAttribMax;
            }

            if (attribByItem)
            {
                this.StandardValue = str2Num(attribByItem.PdsBatchAttribTarget);
            }
            else if (attribByAttribGroup)
            {
                this.StandardValue = str2Num(attribByAttribGroup.PdsBatchAttribTarget);
            }
        }

        this.setLowerTolerance();
        this.setUpperTolerance();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>