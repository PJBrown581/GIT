<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrderLineResultSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PIPInventQualityOrderLineResultSplit</c> class builds the dialog for handling the
///     splitting of quality order line results.
/// </summary>
public class PIPInventQualityOrderLineResultSplit extends RunBase
{
    InventQualityOrderLineResults   orderLineResults;
    InventQualityOrderTable         orderTable;
    InventQualityOrderLine          orderLine;
    InventTestResultQuantity        splitQty;
    InventTestResultQuantity        qtyPerLine;
    PdsCWInventTestResultQuantity   cwSplitQty;
    PdsCWInventTestResultQuantity   cwQtyPerLine;
    Lines                           lines;
    boolean                         splitMultipleLines;
    boolean                         isCWItem;

    DialogEnumComboBox              dialogEnumComboBox;

    DialogField                     testSequenceField;
    DialogField                     testIdField;
    DialogField                     qtyField;
    DialogField                     cwQtyField;
    DialogField                     dialogSplitQty;
    DialogField                     cwDialogSplitQty;
    DialogField                     dialogQtyPerLine;
    DialogField                     cwDialogQtyPerLine;
    DialogField                     dialogSplitLines;
    DialogField                     dialogSplitType;

    DialogGroup                     groupSingleLine;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        orderLineResults,
        orderTable,
        splitQty,
        cwSplitQty,
        qtyPerLine,
        cwQtyPerLine,
        lines,
        splitMultipleLines,
        isCWItem
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog   dialog = super();
        
        isCWItem = PdsGlobal::pdsIsCWItem(orderTable.ItemId);
        
        if (!splitMultipleLines)
        {
            testSequenceField = dialog.addFieldValue(extendedTypeStr(InventTestSequence), orderLineResults.TestSequence);
            testSequenceField.enabled(false);
            
            testIdField = dialog.addFieldValue(extendedTypeStr(InventTestId), orderLineResults.TestId);
            testIdField.enabled(false);
        }
        
        qtyField = dialog.addField(extendedTypeStr(InventTestResultQuantity));
        qtyField.value(orderLineResults.TestResultQuantity);
        qtyField.enabled(false);
        
        if (isCWItem)
        {
            cwQtyField = dialog.addField(extendedTypeStr(PdsCWInventTestResultQuantity));
            cwQtyField.value(orderLineResults.PdsCWTestResultQuantity);
            cwQtyField.active(false);
        }
        
        dialog.addGroup("@PIP1088", groupSingleLine);
        
        if (isCWItem)
        {
            cwDialogSplitQty = dialog.addFieldValue(extendedTypeStr(PdsCWInventTestResultQuantity), cwSplitQty, "@PDS561", "@PIP1102");
        }
        else
        {
            dialogSplitQty = dialog.addFieldValue(extendedTypeStr(InventTestResultQuantity), splitQty, "@SYS19602", "@PIP1103");
        }
        
        dialog.addGroup("@PIP1089");
        if (isCWItem)
        {
            cwDialogQtyPerLine = dialog.addFieldValue(extendedTypeStr(PdsCWInventTestResultQuantity), cwQtyPerLine, "@PIP1090", "@PIP1104");
            
            cwDialogQtyPerLine.registerOverrideMethod(
                    methodStr(FormRealControl, modified),
                    methodStr(PIPInventQualityOrderLineResultSplit, qtyPerLineModified),
                    this);
        }
        else
        {
            dialogQtyPerLine = dialog.addFieldValue(extendedTypeStr(InventTestResultQuantity), qtyPerLine, "@PIP1091", "@PIP1105");
            
            dialogQtyPerLine.registerOverrideMethod(
                    methodStr(FormRealControl, modified),
                    methodStr(PIPInventQualityOrderLineResultSplit, qtyPerLineModified),
                    this);
        }
        
        dialogSplitLines    = dialog.addFieldValue(extendedTypeStr(Lines), lines, "@PIP1092", "@PIP1106");
        dialogSplitLines.enabled(false);
        
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        lines = dialogSplitLines.value();
        
        if (isCWItem)
        {
            cwSplitQty      = cwDialogSplitQty.value();
            cwQtyPerLine    = cwDialogQtyPerLine.value();
        }
        else
        {
            splitQty        = dialogSplitQty.value();
            qtyPerLine      = dialogQtyPerLine.value();
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>RunBase.unpack</c> method returns false, the
    ///    <c>RunBase.initParmDefault</c> method will be called. Normally this method should not be overridden.
    /// </remarks>
    public void getLast()
    {
        // We do not want to call super here as we do not want to get the record from SysLastValue.
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderLine</Name>
				<Source><![CDATA[
    public InventQualityOrderLine parmOrderLine(InventQualityOrderLine _orderLine = orderLine)
    {
        orderLine = _orderLine;
        return orderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderLineResults</Name>
				<Source><![CDATA[
    public InventQualityOrderLineResults parmOrderLineResults(InventQualityOrderLineResults _orderLineResults = orderLineResults)
    {
        orderLineResults = _orderLineResults;
        return orderLineResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderTable</Name>
				<Source><![CDATA[
    public InventQualityOrderTable parmOrderTable(InventQualityOrderTable _orderTable = orderTable)
    {
        orderTable = _orderTable;
        return orderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitLines</Name>
				<Source><![CDATA[
    public Lines parmSplitLines(Lines _lines = lines)
    {
        lines = _lines;
        return lines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitMultipleLines</Name>
				<Source><![CDATA[
    public boolean parmSplitMultipleLines(boolean _splitMultipleLines = splitMultipleLines)
    {
        splitMultipleLines = _splitMultipleLines;
        
        return splitMultipleLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPerLineModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles the modified event on a dialog field.
    /// </summary>
    /// <param name="_callerControl">
    ///     The caller object.
    /// </param>
    /// <returns>
    ///     true if the value in the field can be modified; otherwise, false.
    /// </returns>
    public boolean qtyPerLineModified(Object _callerControl)
    {
        real  potentialLines;
        
        if ((isCWItem
                    && !cwDialogQtyPerLine.value())
                ||  (!isCWItem
                    && !dialogQtyPerLine.value()))
        {
            dialogSplitLines.value(0);
            return true;
        }
        
        potentialLines  = (isCWItem) ? orderLineResults.PdsCWTestResultQuantity/cwDialogQtyPerLine.value() : orderLineResults.TestResultQuantity/dialogQtyPerLine.value();
        
        lines           = (potentialLines == any2int(potentialLines)) ? any2int(potentialLines) : any2int(potentialLines) + 1;
        
        dialogSplitLines.value(lines);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
            
        setprefix(PIPInventQualityOrderLineResultSplit::description());
        
        try
        {
            ttsbegin;
            
            if (!this.validate())
            {
                throw error("@SYS18447");
            }
            
            this.splitLines();
            
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>RunBase.pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not ordinarily be overridden.
    /// </remarks>
    public void saveLast()
    {
        // We do not want to call super here as we do not want to save the record to SysLastValue.
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the actual splitting of quality order line results.
    /// </summary>
    private void splitLines()
    {
        InventQualityOrderLineResults   orderLineResultsCopy;
        InventQualityOrderLineResults   inventQualityOrderLineResults;
        int                             counter;
        
        orderLine               = orderLineResults.inventQualityOrderLine();
        
        orderLineResultsCopy    = InventQualityOrderLineResults::find(orderLineResults.QualityOrderId,
                                            orderLineResults.TestId,
                                            orderLineResults.TestSequence,
                                            orderLineResults.LineNum,
                                            true);
        
        inventQualityOrderLineResults.initFromInventQualityOrderLine(orderLine);
        
        // split into single line
        if (splitQty || cwSplitQty)
        {
            if (isCwItem)
            {
                orderLineResultsCopy.PdsCWTestResultQuantity    = orderLineResults.PdsCWTestResultQuantity - cwSplitQty;
                orderLineResultsCopy.TestResultQuantity         = PdsCatchWeight::minInventQty(orderTable.ItemId, orderLineResultsCopy.PdsCWTestResultQuantity);
            }
            else
            {
                orderLineResultsCopy.TestResultQuantity         = orderLineResults.TestResultQuantity - splitQty;
            }
            orderLineResultsCopy.update();
            
            if (isCwItem)
            {
                inventQualityOrderLineResults.PdsCWTestResultQuantity   = cwSplitQty;
                inventQualityOrderLineResults.TestResultQuantity        = PdsCatchWeight::minInventQty(orderTable.ItemId, cwSplitQty);
            }
            else
            {
                inventQualityOrderLineResults.TestResultQuantity        = splitQty;
            }

            inventQualityOrderLineResults.insert();
        }
        
        // split into multiple lines
        if (lines && (qtyPerLine || cwQtyPerLine))
        {
            if (isCwItem)
            {
                orderLineResultsCopy.PdsCWTestResultQuantity    = (cwQtyPerLine)? orderLineResults.PdsCWTestResultQuantity - (cwQtyPerLine * (lines - 1)) : orderLineResultsCopy.PdsCWTestResultQuantity;
                orderLineResultsCopy.TestResultQuantity         = PdsCatchWeight::minInventQty(orderTable.ItemId, orderLineResultsCopy.PdsCWTestResultQuantity);
            }
            else
            {
                orderLineResultsCopy.TestResultQuantity         = (qtyPerLine)? orderLineResults.TestResultQuantity - (qtyPerLine * (lines - 1)) : orderLineResultsCopy.TestResultQuantity ;
            }
            orderLineResultsCopy.update();
            
            if (isCwItem)
            {
                inventQualityOrderLineResults.PdsCWTestResultQuantity   = cwQtyPerLine;
                inventQualityOrderLineResults.TestResultQuantity        = PdsCatchWeight::minInventQty(orderTable.ItemId, cwQtyPerLine);
            }
            else
            {
                inventQualityOrderLineResults.TestResultQuantity        = qtyPerLine;
            }
    
            RecordInsertList lineInserter = new RecordInsertList(tableNum(InventQualityOrderLineResults));
            for (counter = 1; counter < lines; counter++)
            {
                lineInserter.add(inventQualityOrderLineResults);
            }
            lineInserter.insertDatabase();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the quality order line result can be split.
    /// </summary>
    /// <param name="calledFrom">
    ///     The caller object.
    /// </param>
    /// <returns>
    ///     true if the quality order line result can be split; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom =  null)
    {
        boolean ret = true;
        
        if (!orderLineResults)
        {
            return false;
        }

        if (orderLine.PIPSkipTest)
        {
            ret = checkFailed("@PIP1156");
        }
        
        if (ret && isCWItem)
        {
            if (!cwSplitQty && !cwQtyPerLine)
            {
                ret = checkFailed(strFmt("@PIP1101", "@PDS561", "@PIP1090"));
            }
            
            if (cwSplitQty && cwQtyPerLine)
            {
                ret = checkFailed("@PIP1095");
            }
            
            if (cwSplitQty && (cwSplitQty <= 0 || cwSplitQty >= orderLineResults.PdsCWTestResultQuantity))
            {
                ret = checkFailed(strFmt("@PIP1093", "@PDS561", fieldPName(InventQualityOrderLineResults, PdsCWTestResultQuantity)));
            }
            
            if (cwQtyPerLine && (cwQtyPerLine <= 0 || cwQtyPerLine >= orderLineResults.PdsCWTestResultQuantity))
            {
                ret = checkFailed(strFmt("@PIP1093", "@PIP1090", fieldPName(InventQualityOrderLineResults, PdsCWTestResultQuantity)));
            }
        }
        else if (ret)
        {
            if (!splitQty && !qtyPerLine)
            {
                ret = checkFailed(strFmt("@PIP1101", "@SYS19602", "@PIP1091"));
            }
            
            if (splitQty && qtyPerLine)
            {
                ret = checkFailed("@PIP1094");
            }
            
            if (splitQty && (splitQty <= 0 || splitQty >= orderLineResults.TestResultQuantity))
            {
                ret = checkFailed(strFmt("@PIP1093", "@SYS19602", fieldPName(InventQualityOrderLineResults, TestResultQuantity)));
            }
            
            if (qtyPerLine && (qtyPerLine <= 0 || qtyPerLine >= orderLineResults.TestResultQuantity))
            {
                ret = checkFailed(strFmt("@PIP1093", "@PIP1091", fieldPName(InventQualityOrderLineResults, TestResultQuantity)));
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventQualityOrderLineResultSplit construct()
    {
        return new PIPInventQualityOrderLineResultSplit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PIP1096";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args args)
    {
        PIPInventQualityOrderLineResultSplit    orderLineResultSplit;
        InventQualityOrderLineResults           orderLineResults;
        FormDataSource                          formDS;
        Object                                  callerForm;
        int                                     selectedRecords;
        boolean                                 first;
        MultiSelectionHelper                    helper = MultiSelectionHelper::construct();
        
        if (!args.caller() || args.dataset() != tableNum(InventQualityOrderLineResults))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }
        
        formDS                  = FormDataUtil::getFormDataSource(args.record());
        selectedRecords         = formDS.recordsMarked().lastIndex();
        
        orderLineResultSplit    = PIPInventQualityOrderLineResultSplit::construct();
        
        if (selectedRecords > 1)
        {
            helper.parmDatasource(formDS);
            helper.parmCacheRecords(true);
            
            orderLineResultSplit.parmSplitMultipleLines(true);
            
            orderLineResults    = helper.getFirst();
            first               = true;
            
            while (orderLineResults)
            {
                orderLineResultSplit.parmOrderLineResults(orderLineResults);
                orderLineResultSplit.parmOrderLine(orderLineResults.inventQualityOrderLine());
                orderLineResultSplit.parmOrderTable(orderLineResults.inventQualityOrderTable());
                
                if (first && !orderLineResultSplit.prompt())
                {
                    return;
                }
                
                if (!orderLineResultSplit.parmOrderLine().PIPSkipTest)
                {
                    orderLineResultSplit.runOperation();
                }
                
                orderLineResults    = helper.getNext();
                first               = false;
            }
        }
        else
        {
            orderLineResults = args.record();
            
            orderLineResultSplit.parmOrderLineResults(orderLineResults);
            orderLineResultSplit.parmOrderLine(orderLineResults.inventQualityOrderLine());
            orderLineResultSplit.parmOrderTable(orderLineResults.inventQualityOrderTable());
            
            if (!orderLineResultSplit.prompt())
            {
                return;
            }
            
            orderLineResultSplit.runOperation();
        }
        
        callerForm = args.caller();
        callerForm.doRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>