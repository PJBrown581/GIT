<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPQOInventQualityOrderTableForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventQualityOrderTable))]
public final class PIPQOInventQualityOrderTableForm_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerDatasourceOnQueryingEvent</Name>
				<Source><![CDATA[
    public void registerDatasourceOnQueryingEvent()
    {
        next registerDatasourceOnQueryingEvent();

        InventQualityOrderTable_DS.OnQueryExecuting += eventhandler(this.parmFilterFormQueryEventHandler().applyFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderTable_Post_executeOnActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(InventQualityOrderTable), formMethodStr(InventQualityOrderTable, executeOnActive))]
    public static void InventQualityOrderTable_Post_executeOnActive(XppPrePostArgs args)
    {
        FormRun                 formRun                     = args.getThis() as FormRun;
        FormDataSource          inventQualityOrderTable_ds  = formRun.dataSource(formDataSourceStr(InventQualityOrderTable, InventQualityOrderTable)) as FormDataSource;
        InventQualityOrderTable inventQualityOrderTable     = inventQualityOrderTable_ds.cursor() as InventQualityOrderTable;
        FormControl             inventDimTrackingDimTracing = formRun.design(0).controlName(formControlStr(InventQualityOrderTable, InventTrackingDimTracing));

        inventDimTrackingDimTracing.enabled(inventQualityOrderTable.inventDim().anyTrackingDimensionSpecified());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipFindOrderLineRecord</Name>
				<Source><![CDATA[
    public void pipFindOrderLineRecord(InventQualityOrderLine _inventQualityOrderLine)
    {
        InventQualityOrderLine_DS.positionToRecord(_inventQualityOrderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynaLinkForInventDimFields</Name>
				<Source><![CDATA[
    private void addDynaLinkForInventDimFields(List _dimFieldIdList, QueryBuildDataSource _dsInventDim, InventDim _inventDim)
    {
        ListEnumerator fieldListEnumerator = _dimFieldIdList.getEnumerator();
        while (fieldListEnumerator.moveNext())
        {
            FieldId fieldId = fieldListEnumerator.current();
            if (_inventDim.(fieldId))
            {
                _dsInventDim.addDynalink(fieldId, _inventDim, fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventQualityOrderTable, InventQualityOrderTable), FormDataSourceEventType::Initialized)]
    public void InventQualityOrderTable_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        QueryBuildDataSource qbds = sender.queryBuildDataSource();
        if (this.args())
        {
            switch(this.args().dataset())
            {
                case tableNum(ProdJournalProd):
                    qbds.clearDynalinks();
                    qbds.clearRanges();
                    qbds.addDynalink(fieldnum(InventQualityOrderTable, ItemId), this.args().record(), fieldnum(ProdJournalProd, ItemId));
                    if (PIPInventQualityOrderTableFormHelper::useProdIdDynaLinkOnQualityOrders(this))
                    {
                        qbds.addDynalink(fieldnum(InventQualityOrderTable, InventRefId), this.args().record(), fieldnum(ProdJournalProd, ProdId));
                    }
                    else
                    {
                        ProdJournalProd prodJournalProd = this.args().record();
                        
                        qbds.addRange(fieldnum(InventQualityOrderTable, InventRefId)).value(strFmt('((%1 == "%2") || (%3 == 0))',
                                fieldId2Name(tableNum(InventQualityOrderTable), fieldnum(InventQualityOrderTable, InventRefId)),
                                prodJournalProd.ProdId,
                                fieldId2Name(tableNum(InventQualityOrderTable), fieldnum(InventQualityOrderTable, ReferenceType))));
                    }
                    break;
                // MSBUG Because the sales return relationship is in the table extension and another relationship to SalesTable, we have to manually set  the 
                // ReferenceType when looking for sales returns.
                case tableNum(SalesTable):
                    SalesTable salesTable = this.args().record();
                    if (salesTable.SalesType == SalesType::ReturnItem)
                    {
                        SysQuery::findOrCreateRange(qbds, fieldNum(InventQualityOrderTable, ReferenceType)).value(queryValue(InventTestReferenceType::PIPReturn));
                    }
                    break;
                case tableNum(ProdJournalBOM):
                    qbds.clearDynalinks();
                    qbds.addDynalink(fieldnum(InventQualityOrderTable, ItemId), this.args().record(), fieldnum(ProdJournalBOM, ItemId));
                    break;
            }
        }

        pdsFormCtrl_Line.parmPIPInQualityOrderForm(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDim_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventQualityOrderTable, InventDim), FormDataSourceEventType::Initialized)]
    public void InventDim_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (this.args())
        {
            InventDim inventDim;

            switch(this.args().dataset())
            {
                case tableNum(InventDim):
                    inventDim = this.args().record();
                    this.setInventDimDynaLinks(sender, inventDim);
                    break;
                case tableNum(ProdJournalBOM):
                    ProdJournalBOM prodJouralBOM = this.args().record();
                    inventDim = prodJouralBOM.inventDim();
                    this.setInventDimDynaLinks(sender, inventDim);
                    break;
                case tableNum(ProdJournalProd):
                    ProdJournalProd prodJournalProd = this.args().record();
                    
                    QueryBuildDataSource qbds = sender.queryBuildDataSource();
                    qbds.clearDynalinks();
                    qbds.clearRanges();
                    
                    this.addDynaLinkForInventDimFields(InventDim::dimProductDimFieldList(), qbds, prodJournalProd.inventDim());

                    InventTransOrigin transOrigin;
                    InventTrans inventTrans;

                    while select transOrigin
                        where transOrigin.InventTransId == prodJournalProd.InventTransId
                        join inventTrans 
                            where inventTrans.InventTransOrigin == transOrigin.RecId
                    {
                        this.addTrackingRange(qbds, inventTrans.ItemId, inventTrans.inventDim());
                    }
                    qbds.addRange(fieldNum(InventDim, inventBatchId)).value(SysQuery::valueEmptyString());
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTrackingRange</Name>
				<Source><![CDATA[
    private void addTrackingRange(QueryBuildDataSource _qbds, ItemId _itemId, InventDim _inventDim)
    {
        _qbds.addRange(fieldNum(InventDim, inventBatchId)).value(_inventDim.inventBatchId);
        
        if (_inventDim.inventSerialId)
        {
            _qbds.addRange(fieldNum(InventDim, inventSerialId)).value(SysQuery::valueEmptyString());
            _qbds.addRange(fieldNum(InventDim, inventSerialId)).value(_inventDim.inventSerialId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimDynaLinks</Name>
				<Source><![CDATA[
    private void setInventDimDynaLinks(FormDataSource _sender, InventDim _inventDim)
    {        
        QueryBuildDataSource qbds = _sender.queryBuildDataSource();
        qbds.clearDynalinks();

        this.addDynaLinkForInventDimFields(InventDim::dimTrackingDimFieldList(), qbds, _inventDim);
        this.addDynaLinkForInventDimFields(InventDim::dimProductDimFieldList(), qbds, _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipResearchLine</Name>
				<Source><![CDATA[
    public void pipResearchLine()
    {
        InventQualityOrderLine_ds.refresh();
        InventQualityOrderLine_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLine_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(InventQualityOrderTable, InventQualityOrderLine), FormDataSourceEventType::Activated)]
    public static void InventQualityOrderLine_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        // In D365 cannot run at the end of active() method (after other active logic); instead the after call is done in PIPPmfFormCtrl_InventQOTable_QOLine_Extension
        FormRun formRun = sender.FormRun();
        formRun.pipUpdateControlsForSkipTest(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipUpdateControlsForSkipTest</Name>
				<Source><![CDATA[
    public void pipUpdateControlsForSkipTest(boolean _preActive)
    {
        DictTable       dictTable = new dictTable(tableNum(InventQualityOrderLine));
        FieldId         fieldId;
        int             i;

        if (_preActive ? !InventQualityOrderLine.PIPSkipTest : InventQualityOrderLine.PIPSkipTest)
        {
            for (i = 1; i <= dictTable.fieldCnt(); i++)
            {
                fieldId = dictTable.fieldCnt2Id(i);
                if (isSysId(fieldId) || fieldId == fieldNum(InventQualityOrderLine, CertificateOfAnalysisReport))
                {
                    continue;
                }

                InventQualityOrderLine_ds.object(fieldId).enabled(!InventQualityOrderLine.PIPSkipTest);
            }
        }

        if (!_preActive)
        {
            PIPSkipTestButton.enabled(InventQualityOrderTable.OrderStatus == InventTestOrderStatus::Open);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activateForm</Name>
				<Source><![CDATA[
    public void activateForm(boolean _enable)
    {
        next activateForm(_enable);

        InventQualityOrderLineResults.enabled(_enable && !inventQualityOrderLine.PIPSkipTest);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PIPSkipTestButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(InventQualityOrderTable, PIPSkipTestButton), FormControlEventType::Clicked)]
    public static void PIPSkipTestButton_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.FormRun();
        formRun.pipSkipTestButtonClicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSkipTestButtonClicked</Name>
				<Source><![CDATA[
    private void pipSkipTestButtonClicked()
    {
        if (InventQualityOrderLine_ds.recordsMarked().lastIndex())
        {
            InventQualityOrderLine_ds.research(true);
        }
        else
        {
            InventQualityOrderLine_ds.reread();
            InventQualityOrderLine_ds.active();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRefresh</Name>
				<Source><![CDATA[
    public void doRefresh()
    {
        this.pipResearchLine();
        next doRefresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>