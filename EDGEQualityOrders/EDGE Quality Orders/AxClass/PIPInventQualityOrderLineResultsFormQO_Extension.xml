<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrderLineResultsFormQO_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(PIPInventQualityOrderLineResults))]
public final class PIPInventQualityOrderLineResultsFormQO_Extension
{
    private boolean callerHasResearchLineMethod;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PIPInventQualityOrderLineResults_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormEventHandler(formStr(PIPInventQualityOrderLineResults), FormEventType::Initialized)]
    public static void PIPInventQualityOrderLineResults_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormRun formRun = sender as FormRun;
        formRun.pipInit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipInit</Name>
				<Source><![CDATA[
    private void pipInit()
    {
        FormRun callerForm = this.args().caller() as FormRun;
        if (callerForm)
        {
            callerHasResearchLineMethod = formHasMethod(callerForm, 'pipResearchLine');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_TestId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PIPInventQualityOrderLineResults, InventQualityOrderLineResults_TestId), FormControlEventType::Lookup)]
    public void InventQualityOrderLineResults_TestId_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        this.doTestIdLookup(sender, e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Identification_TestId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PIPInventQualityOrderLineResults, Identification_TestId), FormControlEventType::Lookup)]
    public void Identification_TestId_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        this.doTestIdLookup(sender, e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTestIdLookup</Name>
				<Source><![CDATA[
    private void doTestIdLookup(FormControl sender, FormControlEventArgs e)
    {
        InventQualityOrderLine::pipLookupOrderLinesFromTestId(sender, this.qualityOrderId());

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Identification_TestSequence_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PIPInventQualityOrderLineResults, Identification_TestSequence), FormControlEventType::Lookup)]
    public void Identification_TestSequence_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        this.doTestSequenceLookup(sender, e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_TestSequence_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PIPInventQualityOrderLineResults, InventQualityOrderLineResults_TestSequence), FormControlEventType::Lookup)]
    public void InventQualityOrderLineResults_TestSequence_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        this.doTestSequenceLookup(sender, e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTestSequenceLookup</Name>
				<Source><![CDATA[
    private void doTestSequenceLookup(FormControl sender, FormControlEventArgs e)
    {
        InventQualityOrderLine::pipLookupOrderLinesFromTestSequence(sender, this.qualityOrderId());

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ResetTestResults_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PIPInventQualityOrderLineResults, ResetTestResults), FormControlEventType::Clicked)]
    public static void ResetTestResults_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        InventQualityOrderLineResults orderLineResults = sender.formRun().dataSource(formDataSourceStr(PIPInventQualityOrderLineResults, InventQualityOrderLineResults)).cursor();
        orderLineResults.pipResetTestResults();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SkipButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(PIPInventQualityOrderLineResults, SkipButton), FormControlEventType::Clicked)]
    public static void SkipButton_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.FormRun();
        formRun.pipSkipButtonClicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSkipButtonClicked</Name>
				<Source><![CDATA[
    private void pipSkipButtonClicked()
    {
        InventQualityOrderLineResults_ds.research(true);
        FormRun callerForm = this.callerForm;
        if (callerForm && callerHasResearchLineMethod)
        {
            callerForm.pipResearchLine();
            callerForm.refreshResult();
        }
        else
        {
            this.updateLineTestResults();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(PIPInventQualityOrderLineResults, InventQualityOrderLineResults), FormDataSourceEventType::Activated)]
    public void InventQualityOrderLineResults_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        this.enableSplitButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSplitButton</Name>
				<Source><![CDATA[
    private void enableSplitButton()
    {
        InventQualityOrderLine          orderLine;
        InventQualityOrderLineResults   orderLineResults;
        int                             countOrderLines;
        int                             countOrderLineResults;
        int                             selectedRows = inventQualityOrderLineResults_ds.recordsMarked().lastIndex();
            
        if (selectedRows > 1)
        {
            if (this.isOrderStatusOpen() && !InventQualityOrderLineResults.pipSkipTest())
            {
                select count(RecId) from orderLineResults
                    where orderLineResults.QualityOrderId           == this.qualityOrderId()
                        && orderLineResults.PdsCWTestResultQuantity == this.inventQualityOrderTable().PdsCWQty
                        && orderLineResults.TestResultQuantity      == this.inventQualityOrderTable().Qty;
    
                select count(RecId) from orderLine
                    where orderLine.QualityOrderId == this.inventQualityOrderTable().QualityOrderId;
        
                countOrderLineResults   = any2int(orderLineResults.RecId);
                countOrderLines         = any2int(orderLine.RecId);
            
                SplitButton.enabled(countOrderLineResults == countOrderLines);
            }
            else
            {
                SplitButton.enabled(false);
            }
        }
        else
        {
            SplitButton.enabled(this.isOrderStatusOpen() && !InventQualityOrderLineResults.pipSkipTest());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    public void updateDesign()
    {
        next updateDesign();

        boolean skipTestOrClosed = InventQualityOrderLineResults.pipSkipTest() || !isOrderStatusOpen;
        inventQualityOrderLineResults_ds.allowEdit(!skipTestOrClosed);
        ValidateButton.enabled(!skipTestOrClosed);
        ResetTestResults.enabled(!skipTestOrClosed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderLineResults_OnPostLinkActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(PIPInventQualityOrderLineResults, InventQualityOrderLineResults), FormDataSourceEventType::PostLinkActive)]
    public static void InventQualityOrderLineResults_OnPostLinkActive(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.FormRun();
        formRun.pipPostLinkActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipPostLinkActive</Name>
				<Source><![CDATA[
    private void pipPostLinkActive()
    {
        SkipButton.enabled(isOrderStatusOpen);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>