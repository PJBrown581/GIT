<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityAnalyticsDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPInventQualityAnalyticsDataProvider</c> class provides the analytics graph data for 
///    different quality order analytics.
/// </summary>
class PIPInventQualityAnalyticsDataProvider
{
    StartDate                           startDate;
    EndDate                             endDate;
    utcdatetime                         startDateTime;
    utcdatetime                         endDateTime;  
    PIPInventQualityAnalyticsCategory   analyticsCategory;
    #define.TopTen(10)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        endDate         = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        startDate       = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), endDate);
        startDateTime   = datetobeginUtcDateTime(startDate, DateTimeUtil::getUserPreferredTimeZone());
        endDateTime     = datetoendUtcDateTime(endDate, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPInventQualityAnalyticsDataProvider construct()
    {
        return new PIPInventQualityAnalyticsDataProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public StartDate parmStartDate(StartDate _startDate = startDate)
    {
        startDate       = _startDate;
        startDateTime   = datetobeginUtcDateTime(startDate, DateTimeUtil::getUserPreferredTimeZone());

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public EndDate parmEndDate(EndDate _endDate = endDate)
    {
        endDate     = _endDate;
        endDateTime = datetoendUtcDateTime(endDate, DateTimeUtil::getUserPreferredTimeZone());
        
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAnalyticsCategory</Name>
				<Source><![CDATA[
    public PIPInventQualityAnalyticsCategory parmAnalyticsCategory(PIPInventQualityAnalyticsCategory _analyticsCategory = analyticsCategory)
    {
        analyticsCategory = _analyticsCategory;

        return analyticsCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFailurePercentageByReferenceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the Percentage of failed quality orders by reference chart.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the category name and count of
    ///    entries per category.
    /// </returns>
    public container getFailurePercentageByReferenceType()
    {
        PIPInventQualityOrderTableAnalytics qualityOrderTableAnalytics;
        InventQualityOrderTable             inventQualityOrderTable;      
        int                                 closedOrderCount;
        int                                 failedOrderCount;
        List                                result  = new List(Types::Container);
        percent                             value;                    
      
        while select ReferenceType, count(RecId) from qualityOrderTableAnalytics
            group by ReferenceType
            where qualityOrderTableAnalytics.CreatedDateAndTime     >= startDateTime
                && qualityOrderTableAnalytics.CreatedDateAndTime    <= endDateTime
                && qualityOrderTableAnalytics.OrderStatus           == InventTestOrderStatus::Fail
        {
            failedOrderCount = any2Int(qualityOrderTableAnalytics.RecId);

            if (failedOrderCount)
            {
                select count(RecId) from inventQualityOrderTable
                    where inventQualityOrderTable.CreatedDateTime   >= startDateTime
                        && inventQualityOrderTable.CreatedDateTime  <= endDateTime
                        && inventQualityOrderTable.OrderStatus      != InventTestOrderStatus::Open
                        && inventQualityOrderTable.ReferenceType    == qualityOrderTableAnalytics.ReferenceType;

                closedOrderCount    = any2Int(inventQualityOrderTable.RecId);
                if (closedOrderCount == 0)
                {
                    closedOrderCount = failedOrderCount;
                }
                value               = decRound((failedOrderCount/closedOrderCount * 100), 2);

                result.addEnd([enum2Str(qualityOrderTableAnalytics.ReferenceType), value]);
            }   
        }

        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFailurePercentageByCustomers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the Percentage of failed quality orders by customers.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the category name and count of
    ///    entries per category.
    /// </returns>
    public container getFailurePercentageByCustomers()
    {
        PIPInventQualityOrderTableAnalytics qualityOrderTableAnalytics;
        InventQualityOrderTable             inventQualityOrderTable;  
        GraphicsTmpData                     graphicTmpData;   
        int                                 closedOrderCount;
        int                                 failedOrderCount;
        int                                 counter = 1;
        List                                result  = new List(Types::Container);
        percent                             value;

        while select CustAccount, count(RecId) from qualityOrderTableAnalytics
            group by CustAccount
            where qualityOrderTableAnalytics.CreatedDateAndTime     >= startDateTime
                && qualityOrderTableAnalytics.CreatedDateAndTime    <= endDateTime
                && qualityOrderTableAnalytics.OrderStatus           == InventTestOrderStatus::Fail
                && qualityOrderTableAnalytics.CustAccount
        {
            failedOrderCount = any2Int(qualityOrderTableAnalytics.RecId);

            if (failedOrderCount)
            {
                select count(RecId) from inventQualityOrderTable
                    where inventQualityOrderTable.CreatedDateTime       >= startDateTime
                        && inventQualityOrderTable.CreatedDateTime      <= endDateTime
                        && inventQualityOrderTable.OrderStatus          != InventTestOrderStatus::Open
                        && inventQualityOrderTable.AccountRelation      == qualityOrderTableAnalytics.CustAccount;

                closedOrderCount    = any2Int(inventQualityOrderTable.RecId);
                if (closedOrderCount == 0)
                {
                    closedOrderCount = failedOrderCount;
                }
                value               = decRound((failedOrderCount/closedOrderCount * 100), 2);

                graphicTmpData.CategorySort = counter;              
                graphicTmpData.Category     = qualityOrderTableAnalytics.CustAccount;                
                graphicTmpData.Value        = value;
                graphicTmpData.insert();
              
                counter++;               
            }         
        }

        counter = 1;
        while select graphicTmpData
            order by Value desc  
        {
            if (counter == #TopTen)
            {
                break;
            }
            result.addEnd([graphicTmpData.Category, graphicTmpData.Value]);
            counter++;
        }

        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFailurePercentageByVendors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the Percentage of failed quality orders by vendors chart.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the category name and count of
    ///    entries per category.
    /// </returns>
    public container getFailurePercentageByVendors()
    {
        PIPInventQualityOrderTableAnalytics qualityOrderTableAnalytics;
        InventQualityOrderTable             inventQualityOrderTable;   
        GraphicsTmpData                     graphicTmpData;
        int                                 closedOrderCount;
        int                                 failedOrderCount;
        int                                 counter = 1;
        List                                result  = new List(Types::Container);
        percent                             value;

        while select VendAccount, count(RecId) from qualityOrderTableAnalytics
            group by VendAccount
            where qualityOrderTableAnalytics.CreatedDateAndTime     >= startDateTime
                && qualityOrderTableAnalytics.CreatedDateAndTime    <= endDateTime
                && qualityOrderTableAnalytics.OrderStatus           == InventTestOrderStatus::Fail
                && qualityOrderTableAnalytics.VendAccount
        {
            failedOrderCount = any2Int(qualityOrderTableAnalytics.RecId);

            if (failedOrderCount)
            {
                select count(RecId) from inventQualityOrderTable
                    where inventQualityOrderTable.CreatedDateTime       >= startDateTime
                        && inventQualityOrderTable.CreatedDateTime      <= endDateTime
                        && inventQualityOrderTable.OrderStatus          != InventTestOrderStatus::Open
                        && inventQualityOrderTable.AccountRelation      == qualityOrderTableAnalytics.VendAccount;

                closedOrderCount    = any2Int(inventQualityOrderTable.RecId);
                if (closedOrderCount == 0)
                {
                    closedOrderCount = failedOrderCount;
                }
                value               = decRound((failedOrderCount/closedOrderCount * 100), 2);

                graphicTmpData.CategorySort = counter;
                graphicTmpData.Category     = qualityOrderTableAnalytics.VendAccount;
                graphicTmpData.Value        = value;
                graphicTmpData.insert();
                
                counter++;
            }          
        }

        counter = 1;
        while select graphicTmpData
            order by Value desc
        {
            if (counter == #TopTen)
            {
                break;
            }
            result.addEnd([graphicTmpData.Category, graphicTmpData.Value]);
            counter++;
        }

        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFailurePercentageByProducts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the Percentage of failed quality orders by products chart.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the category name and count of
    ///    entries per category.
    /// </returns>
    public container getFailurePercentageByProducts()
    {
        PIPInventQualityOrderTableAnalytics qualityOrderTableAnalytics;
        InventQualityOrderTable             inventQualityOrderTable;   
        GraphicsTmpData                     graphicTmpData;
        int                                 closedOrderCount;
        int                                 failedOrderCount;
        int                                 counter = 1;
        List                                result  = new List(Types::Container);
        percent                             value;

        while select ItemId, count(RecId) from qualityOrderTableAnalytics
            group by ItemId
            where qualityOrderTableAnalytics.CreatedDateAndTime     >= startDateTime
                && qualityOrderTableAnalytics.CreatedDateAndTime    <= endDateTime
                && qualityOrderTableAnalytics.OrderStatus           == InventTestOrderStatus::Fail
        {
            failedOrderCount = any2Int(qualityOrderTableAnalytics.RecId);

            if (failedOrderCount)
            {
                select count(RecId) from inventQualityOrderTable
                    where inventQualityOrderTable.CreatedDateTime   >= startDateTime
                        && inventQualityOrderTable.CreatedDateTime  <= endDateTime
                        && inventQualityOrderTable.OrderStatus      != InventTestOrderStatus::Open
                        && inventQualityOrderTable.ItemId           == qualityOrderTableAnalytics.ItemId;

                closedOrderCount    = any2Int(inventQualityOrderTable.RecId);
                if (closedOrderCount == 0)
                {
                    closedOrderCount = failedOrderCount;
                }
                value               = decRound((failedOrderCount/closedOrderCount * 100), 2);

                graphicTmpData.CategorySort = counter;
                graphicTmpData.Category     = qualityOrderTableAnalytics.ItemId;
                graphicTmpData.Value        = value;
                graphicTmpData.insert();
                
                counter++;
            }        
        }

        counter = 1;
        while select graphicTmpData
            order by Value desc
        {
            if (counter == #TopTen)
            {
                break;
            }
            result.addEnd([graphicTmpData.Category, graphicTmpData.Value]);
            counter++;
        }

        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFailurePercentageByTests</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the Percentage of failed quality orders by tests chart.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the category name and count of
    ///    entries per category.
    /// </returns>
    public container getFailurePercentageByTests()
    {
        PIPInventQualityOrderLineView       qualityOrderLineView;
        PIPInventQualityOrderLineView       orderLineView;  
        GraphicsTmpData                     graphicTmpData;
        int                                 closedOrderCount;
        int                                 failedOrderCount;
        int                                 counter = 1;
        List                                result  = new List(Types::Container);
        percent                             value;

        while select count(RecId) from qualityOrderLineView
            group by TestId
            where qualityOrderLineView.ValidatedDateTime    >= startDateTime
                && qualityOrderLineView.ValidatedDateTime   <= endDateTime 
                && qualityOrderLineView.OrderStatus         == InventTestOrderStatus::Fail
        {
            failedOrderCount = any2Int(qualityOrderLineView.RecId);

            if (failedOrderCount)
            {
                select count(RecId) from orderLineView
                    where orderLineView.CreatedDateAndTime  >= startDateTime
                        && orderLineView.CreatedDateAndTime <= endDateTime
                        && orderLineView.OrderStatus        != InventTestOrderStatus::Open
                        && orderLineView.TestId             == qualityOrderLineView.TestId;

                closedOrderCount    = any2Int(orderLineView.RecId);
                if (closedOrderCount == 0)
                {
                    closedOrderCount = failedOrderCount;
                }
                value               = decRound((failedOrderCount/closedOrderCount * 100), 2);

                graphicTmpData.CategorySort = counter;
                graphicTmpData.Category     = qualityOrderLineView.TestId;
                graphicTmpData.Value        = value;
                graphicTmpData.insert();
                
                counter++;
            }          
        }  
        
        counter = 1;
        while select graphicTmpData
            order by Value desc
        {
            if (counter == #TopTen)
            {
                break;
            }
            result.addEnd([graphicTmpData.Category, graphicTmpData.Value]);
            counter++;
        }

        return result.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFailureTrendingOverTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a packed container with the data for the Percentage of failed quality orders by reference over time.
    /// </summary>
    /// <returns>
    ///    A packed container for a <c>List</c> where each element is a container with the date, category name and count of
    ///    entries per category.
    /// </returns>
    public container getFailureTrendingOverTime()
    {
        PIPInventQualityOrderFailureOverTime    inventQualityFailureOverTime;
        PIPInventQualityOrderFailureOverTime    qualityOrderFailure;       
        int                                     closedOrderCount;
        int                                     failedOrderCount;
        List                                    result  = new List(Types::Container);
        percent                                 value;
        Days                                    timePeriod = endDate - startDate;
        date                                    dateForAnalytics;  
        int                                     currentYear = year(endDate);    

        #define.DaysInMonth(30)

        if (timePeriod > #DaysInMonth)
        {
            while select count(RecId), ReferenceType, ValidatedYear, ValidatedMonth  from inventQualityFailureOverTime
                group by ReferenceType, ValidatedYear, ValidatedMonth
                where inventQualityFailureOverTime.OrderStatus          == InventTestOrderStatus::Fail
                    && inventQualityFailureOverTime.CreatedDateAndTime  >= startDateTime
                    && inventQualityFailureOverTime.CreatedDateAndTime  <= endDateTime            
            {
                failedOrderCount = any2Int(inventQualityFailureOverTime.RecId);

                while select count(RecId) from qualityOrderFailure
                    group by ReferenceType, ValidatedYear, ValidatedMonth
                    where qualityOrderFailure.OrderStatus           != InventTestOrderStatus::Open
                        && qualityOrderFailure.CreatedDateAndTime   >= startDateTime
                        && qualityOrderFailure.CreatedDateAndTime   <= endDateTime
                        && qualityOrderFailure.ValidatedYear        == inventQualityFailureOverTime.ValidatedYear
                        && qualityOrderFailure.ValidatedMonth       == inventQualityFailureOverTime.ValidatedMonth
                        && qualityOrderFailure.ReferenceType        == inventQualityFailureOverTime.ReferenceType
                {
                    closedOrderCount    = any2Int(qualityOrderFailure.RecId);
                    if (closedOrderCount == 0)
                    {
                        closedOrderCount = failedOrderCount;
                    }
                    value               = decRound((failedOrderCount/closedOrderCount * 100), 2);
                    dateForAnalytics    = mkDate(1, inventQualityFailureOverTime.ValidatedMonth, inventQualityFailureOverTime.ValidatedYear);                  

                    result.addEnd([dateForAnalytics, enum2Str(inventQualityFailureOverTime.ReferenceType), value]);
                }
            }
        }
        else
        {
            while select count(RecId), ReferenceType, ValidatedMonth, ValidatedWeek, ValidatedYear  from inventQualityFailureOverTime
                group by ReferenceType, ValidatedMonth, ValidatedWeek
                where inventQualityFailureOverTime.OrderStatus          == InventTestOrderStatus::Fail
                    && inventQualityFailureOverTime.CreatedDateAndTime  >= startDateTime
                    && inventQualityFailureOverTime.CreatedDateAndTime  <= endDateTime
            {
                failedOrderCount = any2Int(inventQualityFailureOverTime.RecId);

                while select count(RecId) from qualityOrderFailure
                    group by ReferenceType, ValidatedYear, ValidatedMonth
                    where qualityOrderFailure.OrderStatus           != InventTestOrderStatus::Open
                        && qualityOrderFailure.CreatedDateAndTime   >= startDateTime
                        && qualityOrderFailure.CreatedDateAndTime   <= endDateTime
                        && qualityOrderFailure.ValidatedMonth       == inventQualityFailureOverTime.ValidatedMonth
                        && qualityOrderFailure.ValidatedWeek        == inventQualityFailureOverTime.ValidatedWeek
                        && qualityOrderFailure.ReferenceType        == inventQualityFailureOverTime.ReferenceType
                {
                    closedOrderCount    = any2Int(qualityOrderFailure.RecId);
                    if (closedOrderCount == 0)
                    {
                        closedOrderCount = failedOrderCount;
                    }
                    value               = decRound((failedOrderCount/closedOrderCount * 100), 2);
                    dateForAnalytics    = mkDate(1, inventQualityFailureOverTime.ValidatedMonth, currentYear);

                    result.addEnd([dateForAnalytics, enum2Str(inventQualityFailureOverTime.ReferenceType), value]);
                }
            }
        }
       
        return result.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>