<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPInventQualityOrderTableCreateForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(InventQualityOrderTableCreate))]
public final class PIPInventQualityOrderTableCreateForm_Extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventQualityOrderTableReferences_InventRefTransId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(InventQualityOrderTableCreate, InventQualityOrderTableReferences_InventRefTransId), FormControlEventType::Lookup)]
    public  void InventQualityOrderTableReferences_InventRefTransId_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        InventQualityOrderTable inventQualityOrderTable = sender.dataSourceObject().cursor();

        FormControlCancelableSuperEventArgs ce = e as FormControlCancelableSuperEventArgs;

        switch (inventQualityOrderTable.ReferenceType)
        {
            case InventTestReferenceType::PIPTransfer:
                InventQualityOrderTable::pipLookupTransferOrderTransId(sender, InventQualityOrderTable.InventRefId);
                ce.CancelSuperCall();
                break;

            case InventTestReferenceType::PIPReturn:
                InventQualityOrderTable::pipLookupSalesReturnLineTransId(sender, InventQualityOrderTable.InventRefId);
                ce.CancelSuperCall();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderTableCreate_Post_allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(InventQualityOrderTableCreate), formMethodStr(InventQualityOrderTableCreate, allowEdit))]
    public static void InventQualityOrderTableCreate_Post_allowEdit(XppPrePostArgs args)
    {   
        FormRun                 formRun                 = args.getThis();
        FormDataSource          formDataSource          = formRun.dataSource(formDataSourceStr(InventQualityOrderTable, InventQualityOrderTable));
        InventQualityOrderTable inventQualityOrderTable = formDataSource.cursor();
        
        boolean isPurchSalesType    = inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch
                                    || inventQualityOrderTable.ReferenceType == InventTestReferenceType::Sales
                                    || inventQualityOrderTable.ReferenceType == InventTestReferenceType::PIPReturn
                                    || inventQualityOrderTable.ReferenceType == InventTestReferenceType::PIPTransfer;
        boolean isCoProdType        = inventQualityOrderTable.ReferenceType == InventTestReferenceType::PmfProdCoBy;

        enableDSField(formDataSource, fieldNum(InventQualityOrderTable, InventRefTransId), isPurchSalesType && !isCoProdType);
        formDataSource.object(fieldNum(InventQualityOrderTable, InventRefTransId)).visible(isPurchSalesType && !isCoProdType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRefreshCaller</Name>
				<Source><![CDATA[
    protected boolean shouldRefreshCaller()
    {
        boolean ret = next shouldRefreshCaller();

        ret = ret || (this.args()
            && this.args().dataset() == tableNum(InventTransferLine));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReferenceTypeNotEditable</Name>
				<Source><![CDATA[
    protected boolean isReferenceTypeNotEditable(Common _callerRecordActual)
    {
        return next isReferenceTypeNotEditable(_callerRecordActual) && _callerRecordActual.TableId != tableNum(CaseDetailBase);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>