<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPQOInventTestAssociationTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventTestAssociationTable))]
public final class PIPQOInventTestAssociationTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipCheckForBlockingLoop</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to ensure that the current quality association setup will not create a blocking loop.
    /// </summary>
    /// <param name="_blockProcess">
    /// The block process that needs to be checked to ensure it does not cause a blocking loop.
    /// </param>
    /// <returns>
    /// true if the quality association setup will not cause a blocking loop; otherwise false.
    /// </returns>
    private boolean pipCheckForBlockingLoop(InventTestBlockProcess _blockProcess = InventTestBlockProcess::None)
    {
        InventItemSampling  inventItemSampling;
    
        inventItemSampling = this.inventItemSampling();
    
        if (inventItemSampling.CreatePerUpdatedQuantity
            && (this.OrderType == InventTestReferenceType::PIPTransfer
                || this.OrderType == InventTestReferenceType::PIPReturn))
        {
            if (this.TestExecution == InventTestExecution::Before
                && ((this.DocumentType == InventTestDocumentStatus::PIPShipTransfer && (this.BlockProcess == InventTestBlockProcess::PIPShipTransfer || _blockProcess == InventTestBlockProcess::PIPShipTransfer))
                    || (this.DocumentType == InventTestDocumentStatus::PIPReceive && (this.BlockProcess == InventTestBlockProcess::PIPReceive || _blockProcess == InventTestBlockProcess::PIPShipTransfer))
                    || (this.DocumentType == InventTestDocumentStatus::PackingSlip && (this.BlockProcess == InventTestBlockProcess::PackingSlip || _blockProcess == InventTestBlockProcess::PIPShipTransfer))
                    || (this.DocumentType == InventTestDocumentStatus::PickingList && (this.BlockProcess == InventTestBlockProcess::PickingList || _blockProcess == InventTestBlockProcess::PickingList))))
            {
                return checkFailed("@PIP1013");
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemSampling</Name>
				<Source><![CDATA[
    public boolean checkItemSampling()
    {
        boolean ret = next checkItemSampling();

        ret = ret && this.pipCheckForBlockingLoop();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTestAssociationTable_checkDocumentTypeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="_inventTestAssociationTable"></param>
    /// <param name="_result"></param>
    [SubscribesTo(tableStr(InventTestAssociationTable), delegateStr(InventTestAssociationTable, checkDocumentTypeDelegate))]
    public static void InventTestAssociationTable_checkDocumentTypeDelegate(InventTestAssociationTable _inventTestAssociationTable, EventHandlerAcceptResult _result)
    {
        InventTestAssociationTable _this = _inventTestAssociationTable;

        switch(_this.DocumentType)
        {
            case InventTestDocumentStatus::PickingList:
                if (_this.OrderType == InventTestReferenceType::PIPTransfer)
                {
                    _result.accept();
                }
                break;
    
            case InventTestDocumentStatus::PackingSlip:
                if (_this.OrderType == InventTestReferenceType::PIPReturn)
                {
                    _result.accept();
                }
                break;
    
            case InventTestDocumentStatus::PIPShipTransfer:
            case InventTestDocumentStatus::PIPReceive:
                if (_this.OrderType == InventTestReferenceTYpe::PIPTransfer)
                {
                    _result.accept();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountRelationForTable</Name>
				<Source><![CDATA[
    protected boolean checkAccountRelationForTable()
    {
        boolean ret = next checkAccountRelationForTable();

        if (!ret)
        {
            switch (this.OrderType)
            {
                case InventTestReferenceType::PIPReturn:
                    ret = CustTable::exist(this.AccountRelation);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountRelationForGroupId</Name>
				<Source><![CDATA[
    protected boolean checkAccountRelationForGroupId()
    {
        boolean ret = next checkAccountRelationForGroupId();

        if (!ret)
        {
            switch (this.OrderType)
            {
                case InventTestReferenceType::PIPReturn:
                    ret = CustGroup::exist(this.AccountRelation);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditQuarantineOnFailure</Name>
				<Source><![CDATA[
    public boolean allowEditQuarantineOnFailure()
    {
        boolean ret = next allowEditQuarantineOnFailure();

        if (ret)
        {
            switch (this.OrderType)
            {
                case InventTestReferenceType::PIPReturn,
                     InventTestReferenceType::PIPTransfer:
                        ret = false;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priorityDescription</Name>
				<Source><![CDATA[
    public display Description priorityDescription()
    {
        return PIPInventQualityOrderPriority::find(this.PIPPriorityRecId).Description;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>