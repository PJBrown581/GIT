<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPWHSLoadLineAllocationProcessor_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(WHSLoadLineAllocationProcessor))]
public final class PIPWHSLoadLineAllocationProcessor_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createQualityOrders</Name>
				<Source><![CDATA[
    protected void createQualityOrders(WHSTmpWorkLine  _tmpWorkLine, Qty _qtyToCreateWorkFor)
    {
        next createQualityOrders(_tmpWorkLine, _qtyToCreateWorkFor);

        if (inventParameters.UseQualityManagement
            &&  _tmpWorkLine.WorkTransType == WHSWorkTransType::TransferIssue)
        {
            Set qualityOrdersBefore = this.getExistingQualityOrdersForTransferLine(_tmpWorkLine.InventTransId, _tmpWorkLine.OrderNum);

            this.setValueInTransferCache(WHSLoadLineAllocationProcessor::transactionScopeCacheKey(_tmpWorkLine.InventTransId, _tmpWorkLine.DataAreaId), _tmpWorkLine.InventDimId);
            
            WHSWorkQualityOrderCreator::construct().createQualityOrderForTransferPicking(_tmpWorkLine.WorkTransType, _tmpWorkLine.InventTransId, _qtyToCreateWorkFor);

            this.removeValueInTransferCache(WHSLoadLineAllocationProcessor::transactionScopeCacheKey(_tmpWorkLine.InventTransId, _tmpWorkLine.DataAreaId));

            Set qualityOrdersAfter = this.getExistingQualityOrdersForTransferLine(_tmpWorkLine.InventTransId, _tmpWorkLine.OrderNum);

            if (!qualityOrdersAfter.empty())
            {
                this.trackNewQualityOrders(Set::difference(qualityOrdersAfter, qualityOrdersBefore));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExistingQualityOrdersForTransferLine</Name>
				<Source><![CDATA[
    private Set getExistingQualityOrdersForTransferLine(
        InventTransId  _inventTransId,
        InventTransferId _transferId)
    {
        InventQualityOrderTable qualityOrder;
        Set                     qoSet= new Set(Types::String);

        while select QualityOrderId from qualityOrder
            where qualityOrder.ReferenceType    == InventTestReferenceType::PIPTransfer
            &&    qualityOrder.InventRefTransId == _inventTransId
            &&    qualityOrder.InventRefId == _transferId
        {
            qoSet.add(qualityOrder.QualityOrderId);
        }

        return qoSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueInTransferCache</Name>
				<Source><![CDATA[
    private void setValueInTransferCache(str _transactionScopeCacheKey, inventDimId _cacheValue)
    {
        SysGlobalCache transactionCache = appl.transactionScope().parmTransactionScopeCache();
        if (!transactionCache.isSet(classStr(WHSLoadLineAllocationProcessor), _transactionScopeCacheKey))
        {
            transactionCache.set(classStr(WHSLoadLineAllocationProcessor), _transactionScopeCacheKey, _cacheValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeValueInTransferCache</Name>
				<Source><![CDATA[
    private void removeValueInTransferCache(str _transactionScopeCacheKey)
    {
        SysGlobalCache transactionCache = appl.transactionScope().parmTransactionScopeCache();
        if (transactionCache.isSet(classStr(WHSLoadLineAllocationProcessor), _transactionScopeCacheKey))
        {
            transactionCache.remove(classStr(WHSLoadLineAllocationProcessor), _transactionScopeCacheKey);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>