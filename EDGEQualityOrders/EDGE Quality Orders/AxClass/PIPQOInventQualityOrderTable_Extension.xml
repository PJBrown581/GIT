<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPQOInventQualityOrderTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(InventQualityOrderTable))]
public final class PIPQOInventQualityOrderTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipLookupTransferOrderTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a lookup for transfer order lines to select the inventory transaction ID.
    /// </summary>
    /// <param name = "_control">The form control for the inventory transaction ID.</param>
    /// <param name = "_transferId">An inventory transfer order ID.</param>
    public static void pipLookupTransferOrderTransId(FormStringControl _control, InventTransferId _transferId)
    {
        Query                   query;
        QueryBuildDataSource    dsTransferLine;
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tableNum(InventTransferLine), _control);

        query = new Query();
        dsTransferLine = query.addDataSource(tableNum(InventTransferLine));
        dsTransferLine.addRange(fieldNum(InventTransferLine, TransferId)).value(queryValue(_transferId));
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(InventTransferLine, TransferId));
        sysTableLookup.addLookupfield(fieldNum(InventTransferLine, InventTransId), true);
        sysTableLookup.addLookupfield(fieldNum(InventTransferLine, ItemId));
        sysTableLookup.addLookupfield(fieldNum(InventTransferLine, LineNum));
        sysTableLookup.addLookupfield(fieldNum(InventTransferLine, QtyTransfer));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipLookupSalesReturnLineTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows a lookup for sales order return lines to select the inventory transaction ID.
    /// </summary>
    /// <param name = "_control">The form control for the inventory transaction ID.</param>
    /// <param name = "_transferId">A return sales order ID.</param>
    public static void pipLookupSalesReturnLineTransId(FormStringControl _control, SalesId _salesId)
    {
        Query                   query;
        QueryBuildDataSource    dsSalesLine;
        SysTableLookup          sysTableLookup  = SysTableLookup::newParameters(tableNum(SalesLine), _control);

        query = new Query();
        dsSalesLine = query.addDataSource(tableNum(SalesLine));
        dsSalesLine.addRange(fieldNum(SalesLine, SalesId)).value(queryValue(_salesId));
        dsSalesLine.addRange(fieldNum(SalesLine, SalesType)).value(queryValue(SalesType::ReturnItem));
        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(SalesLine, SalesId));
        sysTableLookup.addLookupfield(fieldNum(SalesLine, InventTransId), true);
        sysTableLookup.addLookupfield(fieldNum(SalesLine, ItemId));
        sysTableLookup.addLookupfield(fieldNum(SalesLine, LineNum));
        sysTableLookup.addLookupfield(fieldNum(SalesLine, QtyOrdered));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTestResultQuantityDefault</Name>
				<Source><![CDATA[
    protected InventQty initializeTestResultQuantityDefault()
    {
        InventQty qty = next initializeTestResultQuantityDefault();

        if (!qty && #PIPQualityQuickResultsEntryEnabled)
        {
            qty = this.Qty;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializePdsCWTestResultQuantityDefault</Name>
				<Source><![CDATA[
    protected PdsCWInventQty initializePdsCWTestResultQuantityDefault()
    {
        PdsCWInventQty cwQty = next initializePdsCWTestResultQuantityDefault();

        if (!cwQty && #PIPQualityQuickResultsEntryEnabled)
        {
            cwQty = this.PdsCWQty;
        }
        
        return cwQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipInventTestReferenceType2InventTransTypeConverting</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="_referenceType"></param>
    /// <param name="_result"></param>
    [SubscribesTo(tableStr(InventQualityOrderTable), staticDelegateStr(InventQualityOrderTable, inventTestReferenceType2InventTransTypeExtensionConverting))]
    public static void pipInventTestReferenceType2InventTransTypeConverting(InventTestReferenceType _referenceType, EventHandlerResult _result)
    {
        if (_result.hasResult())
        {
            return;
        }

        switch (_referenceType)
        {
            case InventTestReferenceType::PIPReturn:
                _result.result(InventTransType::Sales);
                break;

            case InventTestReferenceType::PIPTransfer:
                InventRefId inventRefId = PIPThreadVariable::get(InventQualityManagementCreate::SharedVarQualityOrderTableRef2TransTypeInventRefId, true);
                if (InventTransferTable::find(inventRefId).TransferStatus == InventTransferStatus::Received)
                {
                    _result.result(InventTransType::TransferOrderReceive);
                }
                else
                {
                    _result.result(InventTransType::TransferOrderShip);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromForm</Name>
				<Source><![CDATA[
    public InventDimId insertFromForm(InventDim _inventDim)
    {
        PIPThreadVariable::save(InventQualityManagementCreate::SharedVarQualityOrderTableFromForm, true);
        try
        {
            return next insertFromForm(_inventDim);
        }
        finally
        {
            PIPThreadVariable::remove(InventQualityManagementCreate::SharedVarQualityOrderTableFromForm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert(NoYes _dropEstimated, NoYes _updateReservation, InventQualityOrderTableValidator _inventQualityOrderTableValidator)
    {
        InventQualityOrderTableValidator validator = _inventQualityOrderTableValidator;

        boolean transferReceive = PIPThreadVariable::get(InventQualityManagementCreate::SharedVarQualityOrderTableTransferReceive, true);
        boolean fromForm = PIPThreadVariable::get(InventQualityManagementCreate::SharedVarQualityOrderTableFromForm, true);
        if (!validator && (fromForm || transferReceive))
        {
            validator = InventQualityOrderTableValidator::pipNewFromQualityOrderTable(this, transferReceive, fromForm);
        }

        next insert(_dropEstimated, _updateReservation, validator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldNotSetInventRef</Name>
				<Source><![CDATA[
    protected boolean shouldNotSetInventRef(InventTestReferenceType _inventTestReferenceType)
    {
        boolean ret = next shouldNotSetInventRef(_inventTestReferenceType);

        if (!ret && ((_inventTestReferenceType == InventTestReferenceType::PIPReturn
                    || _inventTestReferenceType == InventTestReferenceType::PIPTransfer)
                && (!this.InventRefId || !this.InventRefTransId)))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBlockingQty</Name>
				<Source><![CDATA[
    public void initBlockingQty(InventQualityReferenceType _referenceType)
    {
        next initBlockingQty(_referenceType);

        // MSBUG - cwRefQty was always 0 here as it was previously not initialized
        if (this.CompleteBlocking && PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            PdsCWInventQty cwRefQty = _referenceType.pdsCWInventRefQty();
            this.PdsCWBlockingQty   = cwRefQty;
            this.BlockingQty        = PdsCatchWeight::minInventQty(this.ItemId, cwRefQty);

            if (this.TestDestructive)
            {
                // Don't block the quantity being destroyed
                this.BlockingQty -= this.Qty;
                this.PdsCWBlockingQty -= this.PdsCWQty;
            }

            this.BlockingQty      = max(0, this.BlockingQty);       // Don't allow blocking of negative quanties
            this.PdsCWBlockingQty = max(0, this.PdsCWBlockingQty);  // Don't allow blocking of negative quanties
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventQualityOrderLinesFromTestGroupMember</Name>
				<Source><![CDATA[
    protected void createInventQualityOrderLinesFromTestGroupMember(utcdatetime _currentTime)
    {
        next createInventQualityOrderLinesFromTestGroupMember(_currentTime);

        InventQualityOrderLine inventQualityOrderLine;

        while select forupdate inventQualityOrderLine
            where inventQualityOrderLine.QualityOrderId == this.QualityOrderId
        {
            inventQualityOrderLine.setBatchAttributeRangeDefaults(
                InventTestGroupMember::findCurrentActiveTest(this.TestGroupId, inventQualityOrderLine.TestId));
            inventQualityOrderLine.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>