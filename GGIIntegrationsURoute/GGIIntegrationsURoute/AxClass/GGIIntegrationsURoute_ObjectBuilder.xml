<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIIntegrationsURoute_ObjectBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using GGI.Integrations.URoute;  

public class GGIIntegrationsURoute_ObjectBuilder
{     
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buidQuoteRequest</Name>
				<Source><![CDATA[
    public static GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteRequest buidQuoteRequest(SalesTable _salesTable, str _caller = "", GGIIntegrationsURouteParameters _uRouteParms = GGIIntegrationsURouteParameters::find())
    {
        GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteRequest quoteRequest = new GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteRequest();
        GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteItem item = new GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteItem();
        GGI.Integrations.URoute.GGIIntegrationsURoute_EquipmentType equipmentType = new GGI.Integrations.URoute.GGIIntegrationsURoute_EquipmentType();
        System.Collections.ArrayList items = new System.Collections.ArrayList();
        System.Collections.ArrayList equipmentTypes = new System.Collections.ArrayList();
       
        SalesOrderHeaderV2Entity salesOrderHeaderV2Entity;
        SalesLine salesLine;
        SalesLine palletSalesLine;
        GGIIntegrationsURouteSalesTableAccessorials accessorialTable;
        
        EcoResProduct ecoResProduct;
        EcoResReleasedProductV2Entity ecoResReleasedProductV2Entity;
        InventTable inventTable;
        InventTable palletInventTable;
        InventItemGroupItem palletInventItemGroupItem;
        DataAreaId itemDataAreaId = curExt2dataareaid(tableNum(InventTable));
        //InventItemGroup palletInventItemGroup;
        WHSInventTable whsInventTable;

        LogisticsPostalAddress originAddress;
        ///real totalSalesWeight;
        real totalCalculatedPallets;
        real qtyPerPallet;

       

        if(_salesTable)
        {
            select firstonly salesOrderHeaderV2Entity where salesOrderHeaderV2Entity.SalesOrderNumber == _salesTable.SalesId;
            originAddress = InventLocation::find(_salesTable.InventLocationId).logisticsPostalAddress();
            accessorialTable = GGIIntegrationsURouteSalesTableAccessorials::find(_salesTable.SalesId,true);

            
            if (InventLocation::find(_salesTable.InventLocationId).GGIURouteLocationId == 0)
            {
                throw Error(strFmt("@GGIIntegrationsURoute:URouteInventLocationURouteLocationIdError",_salesTable.InventLocationId));

                ///Error('The inventory location %1 does not have assigned Uroute Location Id.',_salesTable.InventLocationId);
            }
            
            //quoteRequest.originCity = InventLocation::find(_salesTable.InventLocationId).;
            //quoteRequest.originState = salesOrderHeaderV2Entity.DeliveryAddressStateId;
            //quoteRequest.originZip = salesOrderHeaderV2Entity.DeliveryAddressZipCode;
            if(strLen(quoteRequest.originZip) > 5)
            {
                quoteRequest.originZip = subStr(quoteRequest.originZip, 1, 5);
            }

            LogisticsPostalAddress logisticsPostalAddress = InventLocation::find(_salesTable.InventLocationId).logisticsPostalAddress();              
            quoteRequest.originCity = logisticsPostalAddress.city;
            quoteRequest.originState = logisticsPostalAddress.state;
            quoteRequest.originZip = logisticsPostalAddress.zipCode;
            if(strLen(quoteRequest.originZip) > 5)
            {
                quoteRequest.originZip = subStr(quoteRequest.originZip, 1, 5);
            }

            quoteRequest.destCity = salesOrderHeaderV2Entity.DeliveryAddressCity;
            quoteRequest.destState = salesOrderHeaderV2Entity.DeliveryAddressStateId;
            quoteRequest.destZip = salesOrderHeaderV2Entity.DeliveryAddressZipCode;
            //BUG_16634_INC136168_SFGetShippingWarehouseId - PJB_03282023
            //Adding Delivery address to the quote request
            quoteRequest.destAddress = salesOrderHeaderV2Entity.DeliveryAddressStreet;
            //end BUG_16634_INC136168_SFGetShippingWarehouseId_Issue
            if (salesOrderHeaderV2Entity.DeliveryAddressCountryRegionId == "CAN")
            {
                if(strLen(quoteRequest.destZip) > 7)
                {
                    quoteRequest.destZip = subStr(quoteRequest.destZip, 1, 7);
                }
            }
            else
            {
                if(strLen(quoteRequest.destZip) > 5)
                {
                    quoteRequest.destZip = subStr(quoteRequest.destZip, 1, 5);
                }
            }

            
            if(accessorialTable.Liftgate)
            {
                quoteRequest.liftGate = true;
            }

            if(accessorialTable.InsideDelivery)
            {
                quoteRequest.insideDelivery = true;
            }

            if(accessorialTable.DestinationAppointment)
            {
                quoteRequest.destAppt = true;
            }
            
            if(accessorialTable.LimtedAccess)
            {
                quoteRequest.limitedAccess = true;
            }
            
            //what to do if the ShippingDateRequested is blank?
            quoteRequest.pickupDate = _salesTable.ShippingDateRequested;
            //quoteRequest.dropoffDate = ?
            quoteRequest.testTransaction = true;
            quoteRequest.shipmentType = _uRouteParms.ConstShipmentType;
           
                       
            select firstonly palletSalesLine
                    where (palletSalesLine.SalesId == _salesTable.SalesId) && (salesLine.SalesCategory == 0)
                    exists join palletInventTable
                        where (palletInventTable.itemId == palletSalesLine.ItemId)
                    exists join palletInventItemGroupItem
                        where (palletInventItemGroupItem.ItemId == palletInventTable.ItemId) &&
                              (palletInventItemGroupItem.ItemDataAreaId   == itemDataAreaId) &&
                              (palletInventItemGroupItem.ItemGroupId == "RM-SHIP");

            //         exists join  palletInventItemGroup
            //             where (palletInventItemGroup.ItemGroupId   == palletInventItemGroupItem.ItemGroupId) &&
                      
            if (palletSalesLine.RecId != 0)
            {
                palletInventTable = InventTable::find(palletSalesLine.ItemId);                
            }

            select firstonly salesLine where (salesLine.SalesId == _salesTable.SalesId) && (salesLine.SalesCategory == 0) && (salesLine.RecId != palletSalesLine.RecId);
            if (salesLine.RecId == 0)
            {
                throw error("@GGIIntegrationsURoute:URouteNoItemsAssignedError");
                ///error("There are no items assigned to this order.");
                     
            }

            while select salesLine where (salesLine.SalesId == _salesTable.SalesId) && (salesLine.SalesCategory == 0) && (salesLine.RecId != palletSalesLine.RecId)
            {
                //inventTable = InventTable::find(salesLine.ItemId);
                //totalSalesWeight += salesLine.QtyOrdered * inventTable.grossWeight();
                
                select firstonly ecoResReleasedProductV2Entity where ecoResReleasedProductV2Entity.ProductNumber == salesLine.ItemId;
                qtyPerPallet= str2Num(ecoResReleasedProductV2Entity.FirstProductFilterCode);
                
                if (qtyPerPallet != 0)
                {
                    totalCalculatedPallets +=salesLine.QtyOrdered/ qtyPerPallet;
                }

            }


            while select salesLine where (salesLine.SalesId == _salesTable.SalesId) && (salesLine.SalesCategory == 0) && (salesLine.RecId != palletSalesLine.RecId)
            {
                inventTable = InventTable::find(salesLine.ItemId);

                if (accessorialTable.HazardousMaterial == NoYes::No)
                {
                    if (inventTable.HMIMIndicator)
                    {
                        accessorialTable.HazardousMaterial = NoYes::Yes;
                        accessorialTable.update();

                    }
                }

                whsInventTable = WHSInventTable::find(salesLine.ItemId);
                select firstonly ecoResReleasedProductV2Entity where ecoResReleasedProductV2Entity.ProductNumber == salesLine.ItemId;
                item = new GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteItem();
                
                item.shipmentItemId = 0;
                item.itemQuantity = salesLine.QtyOrdered;
                item.itemUnit = salesLine.SalesUnit;
           
                //      if (palletInventTable.RecId !=0 && totalSalesWeight !=0 && inventTable.grossWeight()!=0 && palletSalesLine.QtyOrdered!=0)
                qtyPerPallet= str2Num(ecoResReleasedProductV2Entity.FirstProductFilterCode);
                if ((palletInventTable.RecId !=0 && palletSalesLine.QtyOrdered!=0 && totalCalculatedPallets != 0 && qtyPerPallet != 0))
                {                     
                    //item.volumeQuantity = decRound(palletSalesLine.QtyOrdered * salesLine.QtyOrdered * inventTable.grossWeight()/totalSalesWeight,3);
                    item.quantity = decRound(salesLine.QtyOrdered/ qtyPerPallet,3);
                    
                    if(InventTable::find(palletSalesLine.itemId).GGINAVLegacyItemId != "")
                    {
                        item.volumeUnit = InventTable::find(palletSalesLine.itemId).GGINAVLegacyItemId;
                    }
                    else
                    {
                        item.volumeUnit = EcoResProduct::findByProductNumber(palletSalesLine.itemId).SearchName;
                    } 
                    
                    item.length = palletInventTable.grossDepth;
                    item.width = palletInventTable.grossWidth;
                    item.height = palletInventTable.grossHeight;
                    //item.volumeStackHeight = 1;
                    //item.volumeWeightUnit = _uRouteParms.ConstVolumeWeightUOM;
                    //item.totalWeight = decRound(salesLine.QtyOrdered * inventTable.grossWeight() +
                    //    decRound(palletSalesLine.QtyOrdered * salesLine.QtyOrdered * inventTable.grossWeight()/totalSalesWeight,3)*palletInventTable.grossWeight(),0);
                    item.weight = decRound(salesLine.QtyOrdered * inventTable.grossWeight() +
                        decRound((salesLine.QtyOrdered/ qtyPerPallet) * (palletSalesLine.QtyOrdered/totalCalculatedPallets),3)*palletInventTable.grossWeight(),0);
                    
                }
                else
                {                    
                    if(_caller == "SF")
                    {
                        item.volumeUnit = "PT-STD";
                        item.quantity = decRound(salesLine.QtyOrdered/ qtyPerPallet,3);
                    }
                    else
                    {
                        item.volumeUnit = salesLine.SalesUnit;
                        item.quantity = decRound(salesLine.QtyOrdered,3);
                    }
                    item.length = inventTable.grossDepth;
                    item.width = inventTable.grossWidth;
                    item.height = inventTable.grossHeight;
                    //item.volumeStackHeight = 1;
                    //item.volumeWeightUnit = _uRouteParms.ConstVolumeWeightUOM;
                    item.weight = decRound(salesLine.QtyOrdered * inventTable.grossWeight(),0);
                }
                item.nmfc = WHSEcoResProductTransportationCodes::findByItemId(salesLine.ItemId).nmfcCode;
                item.freightClass = WHSNMFC::find(item.nmfc).LTLClassCode;
                if (!match("<CLASS_",item.freightClass))
                {
                    while (strFind(item.freightClass,".,",1,strLen(item.freightClass)))
                    {
                        item.freightClass = strPoke(item.freightClass,"_",strFind(item.freightClass,".,",1,strLen(item.freightClass)));
                    }
                    if (item.freightClass != "")
                    {
                        item.freightClass = "CLASS_"+item.freightClass;
                    }
                }
                if (!match("<CLASS_",item.freightClass))
                {
                    item.freightClass = "CLASS_70";
                }

                item.commodity = _uRouteParms.ConstCommodity;
               
                //BUG_16634_INC136168_SFGetShippingWarehouseId - PJB_03282023
                //Changed 2.65 constant to configurable param
                item.freightValue = num2Str(_uRouteParms.ConstFreightValueMultiplier1 * item.Weight,0,2,1,0); //TODO or total lineamount * 2 - starting with the 2.65 until further notice
                                
                items.Add(item);
                item = null;
                

            }
            
            if(accessorialTable.HazardousMaterial)
            {
                quoteRequest.hazmat = true;
            }

            //equipmentType.equipmentType = _uRouteParms.ConstEquipmentType;
            equipmentTypes.Add(_uRouteParms.ConstEquipmentType);

            
            quoteRequest.equipmentTypes = equipmentTypes;
            quoteRequest.items = items;
           
        }
        if(_uRouteParms.ShowDeveloperErrorMessage)
        { 
            Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
            jsonSerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling::Ignore;
           
            info("Quote request.");
            Info(Newtonsoft.Json.JsonConvert::SerializeObject(quoteRequest, jsonSerializerSettings));
        }
           
        return quoteRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLTLOrder</Name>
				<Source><![CDATA[
    public static GGI.Integrations.URoute.GGIIntegrationsURoute_OrderEnvelope createLTLOrder(SalesTable _salesTable, GGIIntegrationsURouteParameters _uRouteParms = GGIIntegrationsURouteParameters::find())
    { 
        GGI.Integrations.URoute.GGIIntegrationsURoute_OrderEnvelope orderEnvelope = new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderEnvelope();
        GGI.Integrations.URoute.GGIIntegrationsURoute_Order uRouteOrder = new GGI.Integrations.URoute.GGIIntegrationsURoute_Order();       
        GGI.Integrations.URoute.GGIIntegrationsURoute_OrderEquipmentType equipmentType = new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderEquipmentType();       
        GGI.Integrations.URoute.GGIIntegrationsURoute_Accessorial accessorial = new GGI.Integrations.URoute.GGIIntegrationsURoute_Accessorial();
        GGI.Integrations.URoute.GGIIntegrationsURoute_OrderItemEnvelope itemEnvelope = new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderItemEnvelope();
        GGI.Integrations.URoute.GGIIntegrationsURoute_OrderItem item = new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderItem();
       
        System.Collections.ArrayList items = new System.Collections.ArrayList();
        System.Collections.ArrayList equipmentTypes = new System.Collections.ArrayList();
        System.Collections.ArrayList accessorials = new System.Collections.ArrayList();
        
        SalesOrderHeaderV2Entity salesOrderHeaderV2Entity;
        SalesLine salesLine;
        SalesLine palletSalesLine;
        GGIIntegrationsURouteSalesTableAccessorials accessorialTable;
        
        EcoResProduct ecoResProduct;
        EcoResReleasedProductV2Entity ecoResReleasedProductV2Entity;
        InventTable inventTable;
        InventTable palletInventTable;
        InventItemGroupItem palletInventItemGroupItem;
        DataAreaId itemDataAreaId = curExt2dataareaid(tableNum(InventTable));
        //InventItemGroup palletInventItemGroup;
        WHSInventTable whsInventTable;

        LogisticsPostalAddress originAddress;
        ///real totalSalesWeight;
        real totalCalculatedPallets;
        real qtyPerPallet;
        

        if(_salesTable)
        {
            select firstonly salesOrderHeaderV2Entity where salesOrderHeaderV2Entity.SalesOrderNumber == _salesTable.SalesId;
            originAddress = InventLocation::find(_salesTable.InventLocationId).logisticsPostalAddress();
            accessorialTable = GGIIntegrationsURouteSalesTableAccessorials::find(_salesTable.SalesId,true);

            uRouteOrder.id = "0";
            uRouteOrder.externalId = _salesTable.SalesId;
            uRouteOrder.companyType = _uRouteParms.ConstCompanyType;
            uRouteOrder.companyId = _uRouteParms.ConstCompanyId; 
            //uRouteOrder.companyLocationId = _uRouteParms.ConstCompanyLocationId;
            uRouteOrder.companyLocationId = int2Str(InventLocation::find(_salesTable.InventLocationId).GGIURouteLocationId);
            uRouteOrder.referenceNum = _salesTable.SalesId;
            uRouteOrder.referenceNum2 = _salesTable.CustomerRef;
            //uRouteOrder.referenceNum3 = 
            //uRouteOrder.referenceNum4 = 
            //uRouteOrder.referenceNum5 = 
            if (InventLocation::find(_salesTable.InventLocationId).GGIURouteLocationId == 0)
            {
                throw Error(strFmt("@GGIIntegrationsURoute:URouteInventLocationURouteLocationIdError",_salesTable.InventLocationId));

                ///Error('The inventory location %1 does not have assigned Uroute Location Id.',_salesTable.InventLocationId);
            }
            uRouteOrder.originLocationId = int2Str(InventLocation::find(_salesTable.InventLocationId).GGIURouteLocationId);
            uRouteOrder.originCompanyName = CompanyINfo::find().name();//maybe add to the Parms table

            uRouteOrder.destCompanyName = subStr(_salesTable.customerName(),1,45);
            uRouteOrder.destLocationName = subStr(_salesTable.DeliveryName,1,45);
            uRouteOrder.destCity = salesOrderHeaderV2Entity.DeliveryAddressCity;
            uRouteOrder.destContactEmail = _salesTable.customerEmail();
            uRouteOrder.destContactPhone = _salesTable.customerPhone();            
            uRouteOrder.destCountry = salesOrderHeaderV2Entity.DeliveryAddressCountryRegionId;
            uRouteOrder.destState = salesOrderHeaderV2Entity.DeliveryAddressStateId;
            uRouteOrder.destZip = salesOrderHeaderV2Entity.DeliveryAddressZipCode;
            if (salesOrderHeaderV2Entity.DeliveryAddressCountryRegionId == "CAN")
            {
                if(strLen(uRouteOrder.destZip) > 7)
                {
                    uRouteOrder.destZip = subStr(uRouteOrder.destZip, 1, 7);
                }
            }
            else
            {
                if(strLen(uRouteOrder.destZip) > 5)
                {
                    uRouteOrder.destZip = subStr(uRouteOrder.destZip, 1, 5);
                }            
            }
            uRouteOrder.destStreet = salesOrderHeaderV2Entity.DeliveryAddressStreet;
            
            //uRouteOrder.pickupDate = GGI.Integrations.Utilities.DateConverter::appendDateForJavaType(date2Str(_salesTable.ShippingDateRequested,321,DateDay::Digits2,DateSeparator::Hyphen,DateMonth::Digits2,DateSeparator::Hyphen,DateYear::Digits4));
            //uRouteOrder.pickupDate = _salesTable.ShippingDateRequested;
            uRouteOrder.pickupDate = _salesTable.ShippingDateConfirmed;
            
            uRouteOrder.commodity = _uRouteParms.ConstCommodity;
            uRouteOrder.loadProcedure = _uRouteParms.ConstLoadProcedure;
            uRouteOrder.paymentTerms = _uRouteParms.ConstPaymentTerms;
            
            select firstonly palletSalesLine 
                    where (palletSalesLine.SalesId == _salesTable.SalesId) && (salesLine.SalesCategory == 0) 
                    exists join palletInventTable 
                        where (palletInventTable.itemId == palletSalesLine.ItemId) 
                    exists join palletInventItemGroupItem
                        where (palletInventItemGroupItem.ItemId == palletInventTable.ItemId) &&
                              (palletInventItemGroupItem.ItemDataAreaId   == itemDataAreaId) &&
                              (palletInventItemGroupItem.ItemGroupId == "RM-SHIP");

           //         exists join  palletInventItemGroup
           //             where (palletInventItemGroup.ItemGroupId   == palletInventItemGroupItem.ItemGroupId) &&
           

            
            if (palletSalesLine.RecId != 0)
            {
                palletInventTable = InventTable::find(palletSalesLine.ItemId);
                
            }

            select firstonly salesLine where (salesLine.SalesId == _salesTable.SalesId) && (salesLine.SalesCategory == 0) && (salesLine.RecId != palletSalesLine.RecId);
            if (salesLine.RecId == 0)
            {
                throw error("@GGIIntegrationsURoute:URouteNoItemsAssignedError");
                ///error("There are no items assigned to this order.");
                     
            }

            while select salesLine where (salesLine.SalesId == _salesTable.SalesId) && (salesLine.SalesCategory == 0) && (salesLine.RecId != palletSalesLine.RecId)
            {               
                //inventTable = InventTable::find(salesLine.ItemId);
                //totalSalesWeight += salesLine.QtyOrdered * inventTable.grossWeight();
                
                select firstonly ecoResReleasedProductV2Entity where ecoResReleasedProductV2Entity.ProductNumber == salesLine.ItemId;
                qtyPerPallet= str2Num(ecoResReleasedProductV2Entity.FirstProductFilterCode);
                
                if (qtyPerPallet != 0)
                {
                    totalCalculatedPallets +=salesLine.QtyOrdered/ qtyPerPallet;
                }
                

            }


            while select salesLine where (salesLine.SalesId == _salesTable.SalesId) && (salesLine.SalesCategory == 0) && (salesLine.RecId != palletSalesLine.RecId)
            {  
                inventTable = InventTable::find(salesLine.ItemId);

                if (accessorialTable.HazardousMaterial == NoYes::No)
                {
                    if (inventTable.HMIMIndicator)
                    {
                        accessorialTable.HazardousMaterial = NoYes::Yes;
                        accessorialTable.update();

                    }
                }

                whsInventTable = WHSInventTable::find(salesLine.ItemId);
                select firstonly ecoResReleasedProductV2Entity where ecoResReleasedProductV2Entity.ProductNumber == salesLine.ItemId;
                item = new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderItem();
                
                item.itemQuantity = salesLine.QtyOrdered;
                item.itemUnit = salesLine.SalesUnit;
           
          //      if (palletInventTable.RecId !=0 && totalSalesWeight !=0 && inventTable.grossWeight()!=0 && palletSalesLine.QtyOrdered!=0)
                qtyPerPallet= str2Num(ecoResReleasedProductV2Entity.FirstProductFilterCode);
           if (palletInventTable.RecId !=0 && palletSalesLine.QtyOrdered!=0 && totalCalculatedPallets != 0 && qtyPerPallet != 0)
                {
                    
                    //item.volumeQuantity = decRound(palletSalesLine.QtyOrdered * salesLine.QtyOrdered * inventTable.grossWeight()/totalSalesWeight,3);
                    item.volumeQuantity = decRound(salesLine.QtyOrdered/ qtyPerPallet,3);
                    if(InventTable::find(palletSalesLine.itemId).GGINAVLegacyItemId != "")
                    {
                        item.volumeUnit = InventTable::find(palletSalesLine.itemId).GGINAVLegacyItemId;
                    }
                    else
                    {
                        item.volumeUnit = EcoResProduct::findByProductNumber(palletSalesLine.itemId).SearchName;
                    }
                    item.volumeLengthInches = palletInventTable.grossDepth;
                    item.volumeWidthInches = palletInventTable.grossWidth;
                    item.volumeHeightInches = palletInventTable.grossHeight;
                    item.volumeStackHeight = 1;
                    item.volumeWeightUnit = _uRouteParms.ConstVolumeWeightUOM;
                    //item.totalWeight = decRound(salesLine.QtyOrdered * inventTable.grossWeight() + 
                    //    decRound(palletSalesLine.QtyOrdered * salesLine.QtyOrdered * inventTable.grossWeight()/totalSalesWeight,3)*palletInventTable.grossWeight(),0);
                    item.totalWeight = decRound(salesLine.QtyOrdered * inventTable.grossWeight() +
                        decRound((salesLine.QtyOrdered/ qtyPerPallet) * (palletSalesLine.QtyOrdered/totalCalculatedPallets),3)*palletInventTable.grossWeight(),0);
                }
                else
                {
                    item.volumeQuantity = decRound(salesLine.QtyOrdered,3);
                    item.volumeUnit = salesLine.SalesUnit;
                    item.volumeLengthInches = inventTable.grossDepth;
                    item.volumeWidthInches = inventTable.grossWidth;
                    item.volumeHeightInches = inventTable.grossHeight;
                    item.volumeStackHeight = 1;
                    item.volumeWeightUnit = _uRouteParms.ConstVolumeWeightUOM;
                    item.totalWeight = decRound(salesLine.QtyOrdered * inventTable.grossWeight(),0);
                }
                item.nmfc = WHSEcoResProductTransportationCodes::findByItemId(salesLine.ItemId).nmfcCode;
                item.ltlClass = WHSNMFC::find(item.nmfc).LTLClassCode;
                /*          
                while (strFind(item.ltlClass,".,",1,strLen(item.ltlClass)))
                {
                    item.ltlClass = strPoke(item.ltlClass,"_",strFind(item.ltlClass,".,",1,strLen(item.ltlClass)));
                }
                
                if (item.ltlClass == "")
                {
                    item.ltlClass = "70";
                }
                */
                if(InventTable::find(ecoResReleasedProductV2Entity.ProductNumber).GGINAVLegacyItemId != "")
                {
                    item.referenceNumber = strFmt("%1-%2",InventTable::find(ecoResReleasedProductV2Entity.ProductNumber).GGINAVLegacyItemId, num2Str((salesLine.lineNum * 10000),0,0,1,0));
                }
                else
                {
                    item.referenceNumber = strFmt("%1-%2",ecoResReleasedProductV2Entity.ProductNumber, num2Str((salesLine.lineNum * 10000),0,0,1,0));
                }
                item.product = EcoResProduct::findByProductNumber(ecoResReleasedProductV2Entity.ProductNumber).productName();                
                
                //BUG_16634_INC136168_SFGetShippingWarehouseId - PJB_03282023
                //Changed 2.65 constant to configurable param
                item.freightValue = _uRouteParms.ConstFreightValueMultiplier1 * item.totalWeight; 
                                
                itemEnvelope.item = item;
                items.Add(itemEnvelope);
                item = null;
                itemEnvelope = null;
                itemEnvelope = new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderItemEnvelope();

            }
            
            equipmentType.equipmentType = _uRouteParms.ConstEquipmentType;
            equipmentTypes.Add(equipmentType);

            if(accessorialTable.Liftgate)
            {
                accessorial = new GGI.Integrations.URoute.GGIIntegrationsURoute_Accessorial();
                accessorial.accessorialType = "Liftgate";
                accessorials.Add(accessorial);
            }
            if(accessorialTable.InsideDelivery)
            {
                accessorial = new GGI.Integrations.URoute.GGIIntegrationsURoute_Accessorial();
                accessorial.accessorialType = "InsideDelivery";
                accessorials.Add(accessorial);
            }
            if(accessorialTable.DestinationAppointment)
            {
                accessorial = new GGI.Integrations.URoute.GGIIntegrationsURoute_Accessorial();
                accessorial.accessorialType = "DestinationAppointment";
                accessorials.Add(accessorial);
            }            
            if(accessorialTable.LimtedAccess)
            {
                accessorial = new GGI.Integrations.URoute.GGIIntegrationsURoute_Accessorial();
                accessorial.accessorialType = "LimitedAccess";
                accessorials.Add(accessorial);
            }            
            if(accessorialTable.HazardousMaterial)
            {
                accessorial = new GGI.Integrations.URoute.GGIIntegrationsURoute_Accessorial();
                accessorial.accessorialType = "HazardousMaterial";
                accessorials.Add(accessorial);
            }  
          
            if(accessorials)
            {
                orderEnvelope.accessorials = accessorials;
            }
            
            orderEnvelope.equipmentTypes = equipmentTypes;
            orderEnvelope.items = items;
            orderEnvelope.order = uRouteOrder;
        }

        if(_uRouteParms.ShowDeveloperErrorMessage)
        {
            Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
            jsonSerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling::Ignore;
           
            info("LTL order."); 
            Info(Newtonsoft.Json.JsonConvert::SerializeObject(orderEnvelope, jsonSerializerSettings));
           
        }
        return orderEnvelope;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipmentBucket</Name>
				<Source><![CDATA[
    public static GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentBucket createShipmentBucket(SalesTable _salesTable, GGIIntegrationsURouteParameters _uRouteParms = GGIIntegrationsURouteParameters::find())
    {
        GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentBucket shipmentBucket = new GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentBucket();
        GGI.Integrations.URoute.GGIIntegrationsURoute_Bucket bucket = new GGI.Integrations.URoute.GGIIntegrationsURoute_Bucket();
       
        bucket.id = "0";
        bucket.shipperId = GGIIntegrationsURouteParameters::find().ConstCompanyId;
        bucket.locationId = int2Str(InventLocation::find(_salesTable.InventLocationId).GGIURouteLocationId);
        bucket.shipmentType = _uRouteParms.ConstShipmentType;
        bucket.equipmentType = _uRouteParms.ConstEquipmentType;
        bucket.name = _salesTable.SalesId;
        bucket.trackingNumber = subStr(_salesTable.SalesId, 4, strLen(_salesTable.SalesId));//TODO: Remove substr
        
        shipmentBucket.bucket = bucket;
             
        shipmentBucket.legMetaData = null;
        shipmentBucket.orderItemGroups = null;
        shipmentBucket.ordersWithResources = null;

        if(_uRouteParms.ShowDeveloperErrorMessage)
        {
            Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
            jsonSerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling::Ignore;
           
            info("Shipment bucket order.");
            Info(Newtonsoft.Json.JsonConvert::SerializeObject(shipmentBucket, jsonSerializerSettings));
        }

        return shipmentBucket;
       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>