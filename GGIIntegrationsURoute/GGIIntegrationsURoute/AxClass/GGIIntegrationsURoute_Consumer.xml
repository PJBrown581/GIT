<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIIntegrationsURoute_Consumer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using GGI.Integrations.URoute;
using System.Reflection;


public class GGIIntegrationsURoute_Consumer
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>upsertShippment</Name>
				<Source><![CDATA[
    public static void upsertShippment(SalesId _salesId, GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentEnvelope _shipmentEnvelope)
    {
        Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
        jsonSerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling::Ignore;
        
        //URoute Shipment Tables
        GGIIntegrationsURouteBid uRouteBid;
        GGIIntegrationsURouteCarrier uRouteCarrier;
        GGIIntegrationsURouteDestination uRouteDestination;
        GGIIntegrationsURouteItem uRouteItem;
        GGIIntegrationsURouteLocationHistory uRouteLocationHistory;
        GGIIntegrationsURouteShipment uRouteShipment;
        GGIIntegrationsURouteShipper uRouteShipper;
        GGIIntegrationsURouteShipperEquipmentTypes uRouteShipperEquipmentTypes;
        GGIIntegrationsURouteShipperShipmentTypes uRouteShipperShipmentTypes;

        //URoute C# Data Contract classes
        GGI.Integrations.URoute.GGIIntegrationsURoute_Item item;
        GGI.Integrations.URoute.GGIIntegrationsURoute_Carrier carrier;
        GGI.Integrations.URoute.GGIIntegrationsURoute_Destination destination;
        
        System.Collections.ArrayList shipmentTypes = new System.Collections.ArrayList();
        
        SalesTable salesTable = SalesTable::find(_salesId);

        try
        {
            ttsbegin;
            //Shipment
            uRouteShipment = GGI.Integrations.Utilities.TypeConverter::CopyProperties(_shipmentEnvelope.shipment, GGIIntegrationsURouteShipment::find(_shipmentEnvelope.shipment.ShipmentId, true));
            if(uRouteShipment)
            {
                uRouteShipment.update();
            }
            else
            {
                uRouteShipment.SalesId = _salesId;
                uRouteShipment.insert();
            }
            //Shipper
            uRouteShipper = GGI.Integrations.Utilities.TypeConverter::CopyProperties(_shipmentEnvelope.shipper, GGIIntegrationsURouteShipper::find(_shipmentEnvelope.shipment.ShipmentId, true));
            if(uRouteShipper)
            {
                uRouteShipper.update();
            }
            else
            {
                uRouteShipper.ShipmentId = _shipmentEnvelope.shipment.ShipmentId;
                uRouteShipper.insert();
            }
            //Shipper ShipmentTypes
            for (int i = 0; i < _shipmentEnvelope.shipper.shipmentTypes.get_Count(); i++)
            {
                uRouteShipperShipmentTypes.clear();
                uRouteShipperShipmentTypes = GGIIntegrationsURouteShipperShipmentTypes::find(uRouteShipper.ShipmentId, _shipmentEnvelope.shipper.shipmentTypes.get_Item(i), "Shipper", true);
                uRouteShipperShipmentTypes.ShipmentType = _shipmentEnvelope.shipper.shipmentTypes.get_Item(i);
                uRouteShipperShipmentTypes.ShipmentId = uRouteShipper.ShipmentId;
                uRouteShipperShipmentTypes.TypeShipperCarrier = "Shipper";
                if(uRouteShipperShipmentTypes)
                {
                    uRouteShipperShipmentTypes.update();
                }
                else
                {
                    uRouteShipperShipmentTypes.insert();
                }
            }
            //Shipper EquipmentTypes
            for (int i = 0; i < _shipmentEnvelope.shipper.equipmentTypes.get_Count(); i++)
            {
                uRouteShipperEquipmentTypes.clear();
                uRouteShipperEquipmentTypes.EquipmentType = _shipmentEnvelope.shipper.equipmentTypes.get_Item(i);
                if(!GGIIntegrationsURouteShipperEquipmentTypes::exist(uRouteShipper.ShipmentId, uRouteShipperEquipmentTypes.EquipmentType))
                {
                    uRouteShipperEquipmentTypes.ShipmentId = uRouteShipper.ShipmentId;
                    uRouteShipperEquipmentTypes.insert();
                }
            }
            //Carrier
            if(_shipmentEnvelope.carrier != null)
            {
                uRouteCarrier = GGI.Integrations.Utilities.TypeConverter::CopyProperties(_shipmentEnvelope.carrier, GGIIntegrationsURouteCarrier::find(_shipmentEnvelope.shipment.ShipmentId, true));
                if(uRouteCarrier)
                {
                    uRouteCarrier.update();
                }
                else
                {
                    URouteCarrier.ShipmentId = _shipmentEnvelope.shipment.ShipmentId;
                    uRouteCarrier.insert();
                }
                //Carrier ShipmentTypes
                shipmentTypes = _shipmentEnvelope.carrier.shipmentTypes;
                for (int i = 0; i < shipmentTypes.get_Count(); i++)
                {
                    uRouteShipperShipmentTypes.clear();
                    uRouteShipperShipmentTypes.ShipmentType = shipmentTypes.get_Item(i);
                    if(!GGIIntegrationsURouteShipperShipmentTypes::exist(_shipmentEnvelope.shipment.ShipmentId, uRouteShipperShipmentTypes.ShipmentType, "Carrier"))
                    {
                        uRouteShipperShipmentTypes.ShipmentId = _shipmentEnvelope.shipment.ShipmentId;
                        uRouteShipperShipmentTypes.TypeShipperCarrier = "Carrier";
                        uRouteShipperShipmentTypes.insert();
                    }
                }
            }
            //Destinations
            for (int i = 0; i < _shipmentEnvelope.destinations.get_Count(); i++)
            {
                uRouteDestination.clear();
                destination = Newtonsoft.Json.JsonConvert::DeserializeObject(_shipmentEnvelope.destinations.get_Item(i).ToString(), new GGI.Integrations.URoute.GGIIntegrationsURoute_Destination().GetType(), jsonSerializerSettings);
                uRouteDestination = GGI.Integrations.Utilities.TypeConverter::CopyProperties(destination, GGIIntegrationsURouteDestination::find(uRouteShipper.ShipmentId, str2Int(destination.shipmentDestinationId), true));
                if(uRouteDestination)
                {
                    uRouteDestination.update();
                }
                else
                {
                    uRouteDestination.insert();
                }
                for (i = 0; i < destination.items.get_Count(); i++)
                {
                    uRouteItem.clear();
                    item = destination.items.get_Item(i);
                    uRouteItem = GGI.Integrations.Utilities.TypeConverter::CopyProperties(item, GGIIntegrationsURouteItem::find(uRouteShipper.ShipmentId, str2Int(destination.shipmentDestinationId),item.shipmentItemId, true));
                    if(uRouteItem)
                    {
                        uRouteItem.update();
                    }
                    else
                    {
                        uRouteItem.insert();
                    }
                }
            }
            //Winning Bid
            if(_shipmentEnvelope.winningBid != null)
            {
                uRouteBid = GGI.Integrations.Utilities.TypeConverter::CopyProperties(_shipmentEnvelope.winningBid, GGIIntegrationsURouteBid::find(uRouteShipper.ShipmentId, _shipmentEnvelope.winningBid.bidId,true));
                if(uRouteBid)
                {
                    uRouteBid.update();
                }
                else
                {
                    uRouteBid.insert();
                }
            }

            //Populate standard tables
            TMSSalesTable tmsSalesTable;
            SalesLine salesLine;
            MarkupTable markupTable = MarkupTable::find(MarkupModuleType::Cust, "AccFreight");
            MarkupTrans markupTrans;
            TMSCarrier tmsCarrier;
            TMSCarrierService tmsCarrierService;
           
            if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                tmsSalesTable = TMSSalesTable::find(_salesId,true);

                if (tmsSalesTable.RecId == 0)
                {
                    tmsSalesTable.initFromSalesTable(_salesId);
                }

                               
                tmsSalesTable.ModeCode = uRouteShipment.ShipType;

                select firstonly tmsCarrier
                    where tmsCarrier.Name == uRouteCarrier.CompanyName;
                if (tmsCarrier.RecId != 0)
                {
                    tmsSalesTable.CarrierCode = tmsCarrier.CarrierCode;
                }
                else
                {
                    Error(strFmt("@GGIIntegrationsURoute:URouteMissingShippingCarrier",uRouteCarrier.CompanyName));
                }
                select firstonly tmsCarrierService
                    where tmsCarrierService.CarrierCode == tmsCarrier.CarrierCode && tmsCarrierService.CarrierServiceCode == "Standard";
                if (tmsCarrierService.RecId != 0)
                {
                    tmsSalesTable.CarrierServiceCode = tmsCarrierService.CarrierServiceCode;

                }
                else
                {
                    Error(strFmt("@GGIIntegrationsURoute:URouteMissingCarrierService","Standard",uRouteCarrier.CompanyName));
                }
               
                tmsSalesTable.write();

                salesTable.selectForUpdate(true);
                salesTable.DlvMode = tmsCarrierService.DlvModeId;
                salesTable.update();

                while select forupdate salesLine
                    where salesLine.SalesId == salesTable.SalesId
                {
                    salesLine.DlvMode = salesTable.DlvMode;
                    salesLine.update();
                }
               
                
            }
            select forupdate markupTrans where markupTrans.TransTableId == salesTable.TableId
                && markupTrans.TransRecId == salesTable.RecId;
            if(markupTrans.Recid && markupTrans.MarkupCode == markupTable.MarkupCode)
            {
                markupTrans.Value = uRouteshipment.FinalRate;
                markupTrans.update();
            }
            else
            {
                markupTrans.clear();
                markupTrans.MarkupCode = markupTable.MarkupCode;
                markupTrans.initFromSalesTable(SalesTable::find(_salesId));
                markupTrans.initFromMarkupTable(markupTable);
                markupTrans.initValue();
                markupTrans.Value = uRouteshipment.FinalRate;
                
                //markupTrans.insert();
            }
            ttscommit;
            Message::Add(MessageSeverity::Informational,"@GGIIntegrationsURoute:URouteGetUpdateSuccess");///'Successfully updated sales order with URoute Shipment details');
        }
        catch
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteShippment</Name>
				<Source><![CDATA[
    public static void deleteShippment(SalesId _salesId)
    {
        SalesTable salesTable = SalesTable::find(_salesId);
        //URoute Shipment Tables
        GGIIntegrationsURouteBid uRouteBid;
        GGIIntegrationsURouteCarrier uRouteCarrier;
        GGIIntegrationsURouteDestination uRouteDestination;
        GGIIntegrationsURouteItem uRouteItem;
        GGIIntegrationsURouteLocationHistory uRouteLocationHistory;
        GGIIntegrationsURouteShipment uRouteShipment = GGIIntegrationsURouteShipment::find(str2int(salesTable.GGIURouteShipmentId),true);
        GGIIntegrationsURouteShipper uRouteShipper =  GGIIntegrationsURouteShipper::find(str2Int(salesTable.GGIURouteShipmentId),true);
        GGIIntegrationsURouteShipperEquipmentTypes uRouteShipperEquipmentTypes;
        GGIIntegrationsURouteShipperShipmentTypes uRouteShipperShipmentTypes;

        //URoute C# Data Contract classes
        GGI.Integrations.URoute.GGIIntegrationsURoute_Item item;
        GGI.Integrations.URoute.GGIIntegrationsURoute_Carrier carrier;
        GGI.Integrations.URoute.GGIIntegrationsURoute_Destination destination;
        
        System.Collections.ArrayList shipmentTypes = new System.Collections.ArrayList();
        
        try
        {
            ttsbegin;
            //Shipment
            if(uRouteShipment.RecId !=0)
            {
                uRouteShipment.delete();
            }
            
            //Shipper
            if(uRouteShipper.RecId !=0)
            {
                uRouteShipper.delete();
            }
            //Shipper ShipmentTypes
            while select
                forUpdate
                uRouteShipperShipmentTypes
                where (uRouteShipperShipmentTypes.ShipmentId == str2Int(salesTable.GGIUrouteShipmentId))
            {
                uRouteShipperShipmentTypes.delete();
                
            }
            //Shipper EquipmentTypes
            while select
                forUpdate
                uRouteShipperEquipmentTypes
                where (uRouteShipperEquipmentTypes.ShipmentId == str2Int(salesTable.GGIUrouteShipmentId))
            {
            
                uRouteShipperEquipmentTypes.delete();
              
            }
            //Carrier
            while select
                forUpdate
                uRouteCarrier
                where (uRouteCarrier.ShipmentId == str2Int(salesTable.GGIUrouteShipmentId))
            {
           
                uRouteCarrier.delete();
            }
               
            //Carrier ShipmentTypes
            while select
                forUpdate
                uRouteShipperShipmentTypes
                where (uRouteShipperShipmentTypes.ShipmentId == str2Int(salesTable.GGIUrouteShipmentId))
            {
                uRouteShipperShipmentTypes.delete();
                    
            }
            
            //Destinations
            while select
                forUpdate
                uRouteDestination
                where (uRouteDestination.ShipmentId == str2Int(salesTable.GGIUrouteShipmentId))
           
            {
                uRouteDestination.delete();
            }
            //Item
            while select
                forUpdate
                uRouteItem
                where (uRouteItem.ShipmentId == str2Int(salesTable.GGIUrouteShipmentId))
           
            {
                uRouteItem.delete();
            }
               
            //Winning Bid
            while select
                forUpdate
                uRouteBid
                where (uRouteBid.ShipmentId == str2Int(salesTable.GGIUrouteShipmentId))
           
            {
                uRouteBid.delete();
            }

            //clear standard tables
            TMSSalesTable tmsSalesTable;
            MarkupTable markupTable = MarkupTable::find(MarkupModuleType::Cust, "AccFreight");
            MarkupTrans markupTrans;
            TMSCarrier tmsCarrier;
           
            if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                tmsSalesTable = TMSSalesTable::find(_salesId,true);

                if (tmsSalesTable.RecId != 0)
                {
                   
                    tmsSalesTable.CarrierCode = @"";
                    tmsSalesTable.CarrierServiceCode = @"";
                    tmsSalesTable.ModeCode = @"";
                    tmsSalesTable.write();
                }
               
                
            }
            select forupdate markupTrans where markupTrans.TransTableId == salesTable.TableId
                && markupTrans.TransRecId == salesTable.RecId;
            if(markupTrans.Recid && markupTrans.MarkupCode == markupTable.MarkupCode)
            {
                markupTrans.Value = 0;
                markupTrans.update();
            }
            
            ttscommit;
            //Message::Add(MessageSeverity::Informational,"@GGIIntegrationsURoute:URouteGetUpdateSuccess");///'Successfully updated sales order with URoute Shipment details');
        }
        catch
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>