<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIIntegrationsURouteBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using System.Collections;
using GGI.Integrations.URoute;

class GGIIntegrationsURouteBase
{ 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIIntegrationsURouteBase construct()
    {
        GGIIntegrationsURouteBase importEntity = new GGIIntegrationsURouteBase();
        
        return importEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GGIIntegrationsURouteParameters     uRouteParms = GGIIntegrationsURouteParameters::find();
        GGIIntegrationsURouteBase           entityProcessor = GGIIntegrationsURouteBase::construct();
        GGI.Integrations.URoute.URoute      uRoute = new GGI.Integrations.URoute.URoute(uRouteParms.BaseUrl, uRouteParms.UserId, uRouteParms.apiKeyEdit(false,''));
        GGI.Integrations.URoute.GGIIntegrationsURoute_ErrorResponse uRouteError; 
        System.Object                       deserializedURouteResponse;
        SalesTable                          salesTable;
        SalesLine                           salesLine;
        MarkupTable                         markupTable = MarkupTable::find(MarkupModuleType::Cust, "AccFreight");
        MarkupTrans                         markupTrans;
        TMSSalesTable                       tmsSalesTable;
        
        Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
        jsonSerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling::Ignore;
       
        str uRouteJSONResponse;
        boolean isError;

        if(_args.record() && _args.record().TableId == TableNum(SalesTable))
        {
            salesTable = _args.record();
        }
        
        ttsbegin;
        switch(_args.parmEnum())
        {
            case GGIIntegrationsURouteCommandType::SendToURoute:
                
                deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_LTLOrder(), "POST", new GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier().GetType(),GGIIntegrationsURoute_ObjectBuilder::createLTLOrder(salesTable) as System.Object);
                if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier)
                {
                    GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier uRouteOrderId = deserializedURouteResponse;
                    salesTable.selectForUpdate(true);
                    salesTable.GGIURouteOrderId = uRouteOrderId.identifier;                    
                    deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_LTLOrderShipmentBucket(), "POST", new GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier().GetType(),GGIIntegrationsURoute_ObjectBuilder::createShipmentBucket(salesTable) as System.Object);
                    if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier)
                    {
                        //Put the shipment bucket identifier on the SalesTable as well
                        GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier uRouteShipmentId = deserializedURouteResponse;
                        salesTable.GGIURouteOptimizerBucketId = uRouteShipmentId.identifier;
                        salesTable.update();
                        //infolog successful URoute shipment creation
                        //info(strFmt("Successful creation of URoute orderid '%1' and shipment '%2'.", salesTable.GGIURouteOrderId, salesTable.GGIURouteOptimizerBucketId));
                        ///info(strFmt("Successful creation of URoute orderid '%1'.", salesTable.GGIURouteOrderId));
                        info(strFmt("@GGIIntegrationsURoute:URouteOrderCreationSuccess", salesTable.GGIURouteOrderId));
   
                    }
                    else
                    {
                        //read as error and return response to infolog
                        uRouteError = deserializedURouteResponse;
                        info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                        if(uRouteParms.ShowDeveloperErrorMessage)
                        {
                            info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                        }
                        isError = true;                        
                    }
                }
                else
                {
                    //read as error and return response to infolog
                    uRouteError = deserializedURouteResponse;
                    info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                    if(uRouteParms.ShowDeveloperErrorMessage)
                    {
                        info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                    }
                    isError = true;
                }                
                break;
            case GGIIntegrationsURouteCommandType::SendToURouteLTL:
                deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_LTLOrder(), "POST", new GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier().GetType(),GGIIntegrationsURoute_ObjectBuilder::createLTLOrder(salesTable) as System.Object);
                if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier)
                {
                    GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier uRouteOrderId = deserializedURouteResponse;
                    salesTable.selectForUpdate(true);
                    salesTable.GGIURouteOrderId = uRouteOrderId.identifier;
                    deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_LTLOrder(), "POST", new GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier().GetType(),GGIIntegrationsURoute_ObjectBuilder::createShipmentBucket(salesTable) as System.Object);
                    if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier)
                    {
                        //Put the shipment bucket identifier on the SalesTable as well
                        GGI.Integrations.URoute.GGIIntegrationsURoute_Identifier uRouteShipmentId = deserializedURouteResponse;
                        salesTable.GGIURouteOptimizerBucketId = uRouteShipmentId.identifier;
                        salesTable.update();
                        //infolog successful URoute shipment creation
                        //info(strFmt("Successful creation of URoute orderid '%1' and shipment '%2'.", salesTable.GGIURouteOrderId, salesTable.GGIURouteOptimizerBucketId));
                        //info(strFmt("Successful creation of URoute orderid '%1'.", salesTable.GGIURouteOrderId));
                        info(strFmt("@GGIIntegrationsURoute:URouteOrderCreationSuccess", salesTable.GGIURouteOrderId));
   
                    }
                    else
                    {
                        //read as error and return response to infolog
                        uRouteError = deserializedURouteResponse;
                        info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                        if(uRouteParms.ShowDeveloperErrorMessage)
                        {
                            info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                        }
                        isError = true;
                    }
                }
                else
                {
                    //read as error and return response to infolog
                    uRouteError = deserializedURouteResponse;
                    info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                    if(uRouteParms.ShowDeveloperErrorMessage)
                    {
                        info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                    }
                    isError = true;
                }
                break;
            //Read details for a completed shipment
            case GGIIntegrationsURouteCommandType::GetURouteUpdate:
                if(salesTable.GGIURouteOptimizerBucketId != "")
                {
                    //First get the shipment ID
                    deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_ReadOrder(salesTable.SalesId, true), "GET", new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope().GetType(), null);
                    if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope)
                    {                        
                        GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope uRouteOrder = deserializedURouteResponse;
                        GGI.Integrations.URoute.GGIIntegrationsURoute_ItemWGroups itemWGroup = Newtonsoft.Json.JsonConvert::DeserializeObject(uRouteOrder.items.get_Item(0).ToString(), new GGI.Integrations.URoute.GGIIntegrationsURoute_ItemWGroups().GetType(), jsonSerializerSettings);
                        GGI.Integrations.URoute.GGIIntegrationsURoute_Group itemGroup = itemWGroup.groups.get_Item(0);
                        if(itemGroup.shipmentId != null)
                        {
                            //now send the shipment id to get the shipment details
                            deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_ReadShipment(itemGroup.shipmentId), "GET", new GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentEnvelope().GetType(), null);
                        
                            if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentEnvelope)
                            {
                                GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentEnvelope uRouteShipment = deserializedURouteResponse;
                                if(uRouteShipment.shipment == null)
                                {
                                    ///Info("There is no associated shipment returned in the URoute shipment envelope.");
                                    Info("@GGIIntegrationsURoute:URouteNoAssociatedShipmentInEnvelopeError");
                                    isError = true;
                                    break;
                                }
                                if(uRouteShipment.shipper == null)
                                {
                                    ///Info("There is no associated shipper returned in the URoute shipment envelope.");
                                    Info("@GGIIntegrationsURoute:URouteNoAssociatedShipperInEnvelopeError");
                                    isError = true;
                                    break;
                                }
                                salesTable.selectForUpdate(true);
                                salesTable.GGIURouteShipmentId = int2Str(uRouteShipment.shipment.shipmentId);
                                salesTable.update();
                                GGIIntegrationsURoute_Consumer::upsertShippment(salesTable.SalesId, uRouteShipment);
                            }
                            else
                            {
                                //read as error and return response to infolog
                                uRouteError = deserializedURouteResponse;
                                info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                                if(uRouteParms.ShowDeveloperErrorMessage)
                                {
                                    info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                                }
                                isError = true;
                            }
                        }
                        else
                        {
                            ///info("There is currently no URoute shipment related to this order.");
                            info("@GGIIntegrationsURoute:URouteNoRelatedURouteShipmentError");
                            isError = true;
                        }
                    }
                    else
                    {
                        //read as error and return response to infolog
                        uRouteError = deserializedURouteResponse;
                        info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                        if(uRouteParms.ShowDeveloperErrorMessage)
                        {
                            info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                        }
                        isError = true;
                    }
                    
                }
                else
                {
                    ///info("There is currently no URoute shipment related to this order.");
                    info("@GGIIntegrationsURoute:URouteNoRelatedURouteShipmentError");
                    isError = true;
                }
                break;
            case GGIIntegrationsURouteCommandType::GetURouteGetOrderDetailsFile:
                deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_ReadOrder(salesTable.SalesId, true), "GET", new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope().GetType(), null);
                if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope)
                {    
                    //Put the shipment bucket identifier on the SalesTable as well
                    GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope uRouteOrder = deserializedURouteResponse;
                    //TODO:  Where do I put all this crap?
                    //infolog successful URoute shipment creation
                      
                }
                else
                {
                    //read as error and return response to infolog
                    uRouteError = deserializedURouteResponse;
                    info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                    if(uRouteParms.ShowDeveloperErrorMessage)
                    {
                        info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                    }
                    isError = true;
                }
                break;
            case GGIIntegrationsURouteCommandType::GetURouteShowLTLOrder:
                GGIIntegrationsURoute_ObjectBuilder::createLTLOrder(salesTable);
                break;
            case GGIIntegrationsURouteCommandType::GetURouteShowQuote:
                GGIIntegrationsURoute_ObjectBuilder::buidQuoteRequest(salesTable);
                break;
            case GGIIntegrationsURouteCommandType::GetURouteShowShipmentBucket:
                GGIIntegrationsURoute_ObjectBuilder::createShipmentBucket(salesTable);
                break;
                
            case GGIIntegrationsURouteCommandType::ShowURouteInformation:
                deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_ReadOrder(salesTable.SalesId, true), "GET", new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope().GetType(),null);
                if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope)
                {
                    
                }
                else
                {
                    //read as error and return response to infolog
                    isError = true;
                }
                break;
            case GGIIntegrationsURouteCommandType::GetURouteShipmentQuote:  
                real bestRate;
                deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_Quote(GGIIntegrationsURouteParameters::find().ConstCompanyId,"23556"), "POST", new GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteResponseEnvelope().GetType(),GGIIntegrationsURoute_ObjectBuilder::buidQuoteRequest(salesTable) as System.Object);
                if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteResponseEnvelope)
                {
                    GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteResponseEnvelope quoteResponseEnvelope = deserializedURouteResponse;
                    for (int i = 0; i < quoteResponseEnvelope.responses.get_Count(); i++)
                    {
                        GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteResponse quoteResponse = Newtonsoft.Json.JsonConvert::DeserializeObject(quoteResponseEnvelope.responses.get_item(i).ToString(), new GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteRate().GetType(), jsonSerializerSettings);

           

                        if ((quoteResponse.rate.total != "0") && (str2Num(quoteResponse.rate.total) < bestRate))
                        {
                            bestRate = str2Num(quoteResponse.rate.total);
                        }

                    }

                }
                break;
            case GGIIntegrationsURouteCommandType::GetURouteCreateAsShipmentFile: 
                break;
            case GGIIntegrationsURouteCommandType::GetURouteCreateOrderFile:
                break;
            case GGIIntegrationsURouteCommandType::GetURouteGetBestRate:
                break;            
            case GGIIntegrationsURouteCommandType::URouteCancelShipment:
                if (salesTable.GGIURouteOrderId != "")
                {
                    if(salesTable.GGIURouteOptimizerBucketId != "" && salesTable.GGIURouteShipmentId=="")
                    {
                        //First get the shipment ID
                        deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_ReadOrder(salesTable.SalesId, true), "GET", new GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope().GetType(), null);
                        if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope)
                        {
                            GGI.Integrations.URoute.GGIIntegrationsURoute_OrderResponseEnvelope uRouteOrder = deserializedURouteResponse;
                            GGI.Integrations.URoute.GGIIntegrationsURoute_ItemWGroups itemWGroup = Newtonsoft.Json.JsonConvert::DeserializeObject(uRouteOrder.items.get_Item(0).ToString(), new GGI.Integrations.URoute.GGIIntegrationsURoute_ItemWGroups().GetType(), jsonSerializerSettings);
                            GGI.Integrations.URoute.GGIIntegrationsURoute_Group itemGroup = itemWGroup.groups.get_Item(0);
                            if(itemGroup.shipmentId != null)
                            {
                                deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_ReadShipment(itemGroup.shipmentId), "GET", new GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentEnvelope().GetType(), null);
                        
                                if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentEnvelope)
                                {
                                    GGI.Integrations.URoute.GGIIntegrationsURoute_ShipmentEnvelope uRouteShipment = deserializedURouteResponse;
                                    if(uRouteShipment.shipment != null)
                                    {
                                    
                                        salesTable.selectForUpdate(true);
                                        salesTable.GGIURouteShipmentId = int2Str(uRouteShipment.shipment.shipmentId);
                                        salesTable.update();
                                    }
                                
                                }
                            
                            }
                                         
                        }
                    }
                    if(salesTable.GGIURouteShipmentId != "")
                    {
                        //Delete the UROute Shipment
                        deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_CancelShipment(salesTable.GGIURouteShipmentId), "POST", new GGI.Integrations.URoute.GGIIntegrationsURoute_ErrorResponse().GetType(), null);
                        if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_ErrorResponse)
                        {
                            uRouteError = deserializedURouteResponse;
                            
                            info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                            if(uRouteParms.ShowDeveloperErrorMessage)
                            {
                                info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                            }
                            isError = true;
                            
                        }
                        else
                        {
                            GGIIntegrationsURoute_Consumer::deleteShippment(salesTable.SalesId);
                            salesTable.selectForUpdate(true);
                            salesTable.GGIURouteShipmentId = "";
                            salesTable.GGIURouteOptimizerBucketId = "";
                            salesTable.DlvMode = "";
                            salesTable.update();
                        }
                   
                    }
                    if(salesTable.GGIURouteOptimizerBucketId != "" && !isError)
                    {
                        //Delete the Uroute Optimizer Bucket
                        deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_DeleteOptimizerBucket(salesTable.GGIURouteOptimizerBucketId), "DELETE", new GGI.Integrations.URoute.GGIIntegrationsURoute_ErrorResponse().GetType(), null);
                        if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_ErrorResponse)
                        {
                    
                            uRouteError = deserializedURouteResponse;
                            
                            if (uRouteError.statusCode == 404)
                            {
                                salesTable.selectForUpdate(true);
                                salesTable.GGIURouteOptimizerBucketId = "";
                                salesTable.update();

                            }
                            else
                            {
                                info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                                if(uRouteParms.ShowDeveloperErrorMessage)
                                {
                                    info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                                }
                                isError = true;
                            }
                           
                        }
                        else
                        {
                            salesTable.selectForUpdate(true);
                            salesTable.GGIURouteOptimizerBucketId = "";
                            salesTable.update();
                        }
                    
                    }
                    if(salesTable.GGIUrouteOrderId != "" && !isError)
                    {
                        //Delete the Uroute Order
                        deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_DeleteOrder(salesTable.GGIURouteOrderId), "DELETE", new GGI.Integrations.URoute.GGIIntegrationsURoute_ErrorResponse().GetType(), null);
                        if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_ErrorResponse)
                        {
                            uRouteError = deserializedURouteResponse;
                            
                            info(strFmt("@GGIIntegrationsURoute:URouteAPIError", uRouteError.message));
                            if(uRouteParms.ShowDeveloperErrorMessage)
                            {
                                info(strFmt("@GGIIntegrationsURoute:URouteAPIDeveloperMessage", uRouteError.developerMessage));
                            }
                            isError = true;
                           
                        }
                        else
                        {
                            
                            ///info(strFmt("Successful cancellation of URoute orderid '%1'.", salesTable.GGIURouteOrderId));
                            info(strFmt("@GGIIntegrationsURoute:URouteOrderCancellationSuccess", salesTable.GGIURouteOrderId));
                            //GGIIntegrationsURoute_Consumer::deleteShippment(salesTable.SalesId);
                            salesTable.selectForUpdate(true);
                            salesTable.GGIURouteOrderId = "";
                            salesTable.update();
                            
                        }
                   
                    }
                    
                }
                while select forupdate salesLine
                    where salesLine.SalesId == salesTable.SalesId
                {
                    salesLine.DlvMode = salesTable.DlvMode;                    
                    salesLine.update();
                }
                break;
                
            case GGIIntegrationsURouteCommandType::URouteCancelShipmentInURoute:
                break;            
                    
            default:
                error("@GGIIntegrationsURoute:URouteNoIntegrationCodeForTheTypeError");///"No integration code for given type");
                break;
        }  
        if(isError)
        {
            ttsabort;
        }
        else
        {
            ttscommit; 
            //Refresh
            if(_args.record() && _args.record().TableId == TableNum(SalesTable))
            {
                _args.record().dataSource().refresh();
                _args.record().dataSource().research(true);
                _args.record().dataSource().reread();
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEntity</Name>
				<Source><![CDATA[
    public void processEntity(System.Object _deserializedObj, str _apiExtention)
    {  
        List values = new List(Types::String);
        ListEnumerator  value;
        
        //uRoute.processPostRequestObj(GGIIntegrationsURoute_ObjectBuilder::buidQuoteRequest("") as System.Object,"");      
        //uRoute.processPostRequestObj(uRoute.demoQuoteRate(),"");

        //values = FormJsonSerializer::deserializeCollection(classnum(List), uRoute.processSendToURoute(), Types::Class, classStr(GGIIntegrationsResource));
        
        value = values.getEnumerator();
        while(value.moveNext())
        {
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSendToURoute</Name>
				<Source><![CDATA[
    //TODO:  Move conditional switch/case statements logic below
    public void processSendToURoute()
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSendToURouteLTL</Name>
				<Source><![CDATA[
    public void processSendToURouteLTL()
    {
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSendToURouteFTL</Name>
				<Source><![CDATA[
    public void processSendToURouteFTL()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGetURouteUpdate</Name>
				<Source><![CDATA[
    public void processGetURouteUpdate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderDetailsSO</Name>
				<Source><![CDATA[
    public void getOrderDetailsSO()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderDetailsID</Name>
				<Source><![CDATA[
    public void getOrderDetailsID()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGetURouteCreateOrderFile</Name>
				<Source><![CDATA[
    public void processGetURouteCreateOrderFile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGetURouteCreateAsShipmentFile</Name>
				<Source><![CDATA[
    public void processGetURouteCreateAsShipmentFile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGetURouteOrderDetailsFile</Name>
				<Source><![CDATA[
    public void processGetURouteOrderDetailsFile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGetURouteBaseRate</Name>
				<Source><![CDATA[
    public real processGetURouteBaseRate(SalesTable _salesTable, real _multiplier, str _caller = "")
    {
        GGIIntegrationsURouteParameters     uRouteParms = GGIIntegrationsURouteParameters::find();
        GGIIntegrationsURouteBase           entityProcessor = GGIIntegrationsURouteBase::construct();
        GGI.Integrations.URoute.URoute      uRoute = new GGI.Integrations.URoute.URoute(uRouteParms.BaseUrl, uRouteParms.UserId, uRouteParms.apiKeyEdit(false,''));
        GGI.Integrations.URoute.GGIIntegrationsURoute_ErrorResponse uRouteError;
        System.Object                       deserializedURouteResponse;
        
        Newtonsoft.Json.JsonSerializerSettings jsonSerializerSettings = new Newtonsoft.Json.JsonSerializerSettings();
        jsonSerializerSettings.NullValueHandling = Newtonsoft.Json.NullValueHandling::Ignore;
       
        str uRouteJSONResponse;
        boolean isError;

        real bestRate;
        ttsbegin;
        
        //BUG_16634_INC136168_SFGetShippingWarehouseId - PJB_03282023
        //Changed hard coded Uroute location id to: InventLocation::find(_salesTable.InventLocationId).GGIURouteLocationId
        deserializedURouteResponse = uRoute.processAPIRequest(GGIIntegrationsURoute_APIRequestExtender::buildExtention_Quote(GGIIntegrationsURouteParameters::find().ConstCompanyId,int2Str(InventLocation::find(_salesTable.InventLocationId).GGIURouteLocationId)), "POST", new GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteResponseEnvelope().GetType(),GGIIntegrationsURoute_ObjectBuilder::buidQuoteRequest(_salesTable,_caller) as System.Object);
        if(deserializedURouteResponse is GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteResponseEnvelope)
        {
            GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteResponseEnvelope quoteResponseEnvelope = deserializedURouteResponse;
            for (int i = 0; i < quoteResponseEnvelope.responses.get_Count(); i++)
            {
                GGI.Integrations.URoute.GGIIntegrationsURoute_QuoteResponse quoteResponse = quoteResponseEnvelope.responses.get_item(i);

                if (bestRate == 0)
                {
                    bestRate = str2Num(quoteResponse.rate.total);
                }
                else
                {
                    if ((quoteResponse.rate.total != "0") && (str2Num(quoteResponse.rate.total) < bestRate))
                    {
                        bestRate = str2Num(quoteResponse.rate.total);
                    }
                }

            }

        }
        else
        {
            isError = true;
        }
        if(isError)
        {
            ttsabort;
        }
        else
        {
            ttscommit;
        }
        return (bestRate * _multiplier);

    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCancelShipment</Name>
				<Source><![CDATA[
    public void processCancelShipment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCancelShipmentURoute</Name>
				<Source><![CDATA[
    public void processCancelShipmentURoute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShowURouteInformation</Name>
				<Source><![CDATA[
    public void processShowURouteInformation()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>