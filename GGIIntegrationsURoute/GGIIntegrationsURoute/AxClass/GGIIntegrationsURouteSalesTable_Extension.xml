<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIIntegrationsURouteSalesTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     URoute customizations for <c>SalesTable</c> table.
/// </summary>
[ExtensionOf(tableStr(SalesTable))]
final class GGIIntegrationsURouteSalesTable_Extension
{        


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canReleaseToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determine if the Accrued Freight amount has value before the sales order be released to warehouse.
    /// </summary>
    /// <returns>
    ///     true, if the order can be released to the warehouse; otherwise, false.
    /// </returns>
    public boolean canReleaseToWarehouse()
    {
        //CR_9153_URouteReleaseToWarehouse 
        //Remove code checking for the allowance for releasing order based on acrued freight.
        //As we are removing this functionality we are returning value of upstream call
        return next canReleaseToWarehouse();;

        /*        
        MarkupTable markupTable = MarkupTable::find(MarkupModuleType::Cust, "AccFreight");
        MarkupTrans markupTrans;
        boolean allowRelease;
        Batch batch;
        xSession session;

        session = new xSession();
        select firstonly batch where batch.SessionIdx == session.sessionId() &&
            batch.SessionLoginDateTime == session.loginDateTime() &&
            batch.Status == BatchStatus::Executing;
              
        
        select firstonly markupTrans where markupTrans.TransTableId == this.TableId
                && markupTrans.TransRecId == this.RecId;
        
        allowRelease = next canReleaseToWarehouse();
        if(markupTrans.Recid && markupTrans.MarkupCode == markupTable.MarkupCode && markupTrans.Value==0 && allowRelease && InventLocation::find(this.InventLocationId).GGIURouteLocationId!=0)
        {
            
            session = new xSession();
            select firstonly batch where batch.SessionIdx == session.sessionId() &&
                batch.SessionLoginDateTime == session.loginDateTime() &&
                batch.Status == BatchStatus::Executing;

            if(!batch)
            {
                allowRelease = (Box::okCancel("@GGIIntegrationsURoute:URouteAllowWarehouseRelease",DialogButton::Cancel) == DialogButton::Ok);
            }
            else
            {
                allowRelease = false;
            }
         
        }        
        
        return allowRelease;
        */
        
     }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>