<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSLoadListDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWHSLoadListDSP class is a DSP class for the WHSLoadList report.
/// </summary>
class DocWHSLoadListDSP extends DocDataSourceProviderSrsReporting
{
    // Used for placeholders
    WHSLoadListTmp topRecord;
    
    boolean multipleLoads = false;
    boolean multipleShipments = false;

    // Used to detect main group of load
    str lastLoadId;
    // Used to detect sub group of load shipments
    str lastShipmentId;

    // Record builder to be used to add new records
    DocXmlRecordBuilder recordBuilder;

    // Data tree
    DocXmlRecord loadListRecord;
    DocXmlRecord shipmentRecord;

    // DDSP nodes names and labels
    private const str WHSLoadListHeader = 'Load';
    private const str WHSLoadListHeaderLabel = 'Warehouse load lines';
    private const str WHSLoadListHeaderShipments = 'Shipment';
    private const str WHSLoadListHeaderShipmentsLabel = 'Warehouse shipment inside a load lines';
    private const str WHSLoadListShipmentDetailsLines = 'ShipmentDetails';
    private const str WHSLoadListShipmentDetailsLinesLabel = 'Shipment details lines';

    str loadEmailDetails = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Load list DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add to current record Load fields.
    /// </summary>
    /// <param name = "_currentRecord">Adding record</param>
    protected void addLoadFields(DocXmlRecord _currentRecord)
    {
        // NOTE: We are adding fields this way so that we do not extend the table definition with custom labels. Extending the table may affect other implementations
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LoadId)).setFieldLabelId(literalStr('@WAX5732'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, InventLocationId)).setFieldLabelId(literalStr('@SYS4004391'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, InventSiteId)).setFieldLabelId(literalStr('@WAX5731'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LoadSchedShipTime));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LoadSchedShipUTCDateTime)).setFieldLabelId(literalStr('@WAX5733'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, WMSLocationIdLoad)).setFieldLabelId(literalStr('@WAX5744'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LoadFreightPieces)).setFieldLabelId(literalStr('@WAX5737'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LoadWeight)).setFieldLabelId(literalStr('@WAX5738'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LoadVolume)).setFieldLabelId(literalStr('@WAX5739'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, CarrierCode)).setFieldLabelId(literalStr('@WAX5734'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, RouteCode)).setFieldLabelId(literalStr('@WAX5735'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LoadFloorStack)).setFieldLabelId(literalStr('@WAX5736'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LoadNotes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add to current record Shipment fields.
    /// </summary>
    /// <param name = "_currentRecord">Adding record</param>
    protected void addShipmentFields(DocXmlRecord _currentRecord)
    {
        // NOTE: We are adding fields this way so that we do not extend the table definition with custom labels. Extending the table may affect other implementations
        _currentRecord.addField(fieldStr(WHSLoadListTmp, ShipmentId)).setFieldLabelId(literalStr('@WAX5741'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, ShipmentStop)).setFieldLabelId(literalStr('@WAX5740'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, ShipTotalVolume)).setFieldLabelId(literalStr('@WAX5739'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, ShipTotalWeight)).setFieldLabelId(literalStr('@WAX5738'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, DeliveryName)).setFieldLabelId(literalStr('@WAX5742'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, Address));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, ShipFreightPieces)).setFieldLabelId(literalStr('@WAX5737'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, SalesNotes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentDetailsFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add to current record Shipment details fields.
    /// </summary>
    /// <param name = "_currentRecord">Adding record</param>
    protected void addShipmentDetailsFields(DocXmlRecord _currentRecord)
    {
        // NOTE: We are adding fields this way so that we do not extend the table definition with custom labels. Extending the table may affect other implementations
        _currentRecord.addField(fieldStr(WHSLoadListTmp, WorkId));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, LineNum));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, WMSLocationIdLine)).setFieldLabelId(literalStr('@WAX5743'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, ItemId)).setFieldLabelId(literalStr('@WAX1240'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, Name)).setFieldLabelId(literalStr('@SYS319915'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, QtyWork)).setFieldLabelId(literalStr('@SYS105177'));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, UnitId));
        _currentRecord.addField(fieldStr(WHSLoadListTmp, TargetLicensePlateId)).setFieldLabelId(literalStr('@WAX359'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    // We are creating a custom DDSP MainData tree
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        recordBuilder = _recordBuilder;
        //super(_recordBuilder); // We need custom structure generation

        // Get the report table context
        WHSLoadListTmp whsLoadListTmp = this.getReportDataTableContext(tableStr(WHSLoadListTmp));
        // Define the recordered Laod List data table
        WHSLoadListTmp whsLoadListTmpReordered;
        
        // We need to copy all the records into new instance of the same table, so we do not override the query in the background
        while(whsLoadListTmp)
        {
            // Copy current record into new temp table
            whsLoadListTmpReordered.data(whsLoadListTmp);
            // Insert a record into new temp table
            whsLoadListTmpReordered.insert();

            next whsLoadListTmp;
        }

        // only for email placeholder details generation
        container shipmentInformation = conNull();

        // Here we are starting to generate data tree
        while select whsLoadListTmpReordered order by LoadId asc, ShipmentId asc
        {
            WHSLoadListTmp currentRecord = whsLoadListTmpReordered;

            // Do we need a new header line
            if (currentRecord.LoadId != lastLoadId)
            {
                // Need to remember the last Load as we need to group items
                lastLoadId = currentRecord.LoadId;

                if (loadListRecord == null)
                {
                    // First Load record
                    // We need to copy the first record buffer in order to use it in 
                    topRecord = currentRecord.data();
                }
                else
                {
                    // If we are adding a another new record on top level, we need to reset the record builder
                    recordBuilder.goToTopRecord();
                    // If we have more than one Load on this report, we need to remember this for Print Archive
                    multipleLoads = true; // marking that we are dealing with multiple Loads
                }

                // Create a new header item
                loadListRecord = recordBuilder.addRecord(currentRecord);                
                // Rename the record
                loadListRecord.setRecordName(WHSLoadListHeader);
                // Change the label of the record
                loadListRecord.setRecordLabel(WHSLoadListHeaderLabel); // NOTE: use literalStr("@LabelID") instead.
                // Add fields with custom labels
                this.addLoadFields(loadListRecord);

                // Write information for email body
                if (shipmentInformation)
                {
                    loadEmailDetails = loadEmailDetails + '(Shipment:' + con2str(shipmentInformation, ',') + ')\r\n';
                }
                loadEmailDetails = loadEmailDetails + currentRecord.LoadId;
                shipmentInformation = conNull();
            }

            // Do we need a new subheader line
            if (lastShipmentId != currentRecord.ShipmentId)
            {
                if ((shipmentRecord != null) && (multipleShipments == false))
                {
                    multipleShipments = true; // marking that we are dealing with multiple shipments
                }

                // Need to remember the last Shipment as we need to group items
                lastShipmentId = currentRecord.ShipmentId;
                // Create a new record for shipment inside a loadrecord
                shipmentRecord = loadListRecord.addChildRecord(currentRecord);
                // Rename the record
                shipmentRecord.setRecordName(WHSLoadListHeaderShipments);
                // Change the label of the record
                shipmentRecord.setRecordLabel(WHSLoadListHeaderShipmentsLabel); // NOTE: use literalStr("@LabelID") instead.
                // Add fields with custom labels
                this.addShipmentFields(shipmentRecord);

                shipmentInformation += currentRecord.ShipmentId;
            }
            
            DocXmlRecord shipmentDetailRecord = shipmentRecord.addChildRecord(currentRecord);
            // Rename the record
            shipmentDetailRecord.setRecordName(WHSLoadListShipmentDetailsLines);
            // Change the label of the record
            shipmentDetailRecord.setRecordLabel(WHSLoadListShipmentDetailsLinesLabel); // NOTE: use literalStr("@LabelID") instead.
            // Add fields with custom labels
            this.addShipmentDetailsFields(shipmentDetailRecord);
        }
        // New to add the last shipment information
        loadEmailDetails = loadEmailDetails + '(Shipment:' + con2str(shipmentInformation, ',') + ')';
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for Load
    #define.LoadId('LoadId')
    #define.InventLocationId('InventLocationId')
    #define.InventSiteId('InventSiteId')
    #define.LoadSchedShipTime('LoadSchedShipTime')
    #define.LoadSchedShipUTCDateTime('LoadSchedShipUTCDateTime')
    #define.WMSLocationIdLoad('WMSLocationIdLoad')
    #define.LoadFreightPieces('LoadFreightPieces')
    #define.LoadWeight('LoadWeight')
    #define.LoadVolume('LoadVolume')
    #define.CarrierCode('CarrierCode')
    #define.RouteCode('RouteCode')
    #define.LoadFloorStack('LoadFloorStack')
    #define.LoadNotes('LoadNotes')

    // List of defined custom placeholders for Shipment
    #define.ShipmentId('ShipmentId')
    #define.DeliveryName('DeliveryName')
    #define.DeliveryAddress('DeliveryAddress')
    #define.SalesNotes('SalesNotes')

    // List of defined custom placeholders for Account
    #define.CustomerAccountID('CustomerAccountID')

    // List of generated custom placeholders
    #define.LoadEmailDetails('LoadEmailDetails')

    [DocPlaceholderAttribute(#LoadId, 'LL - Load ID'),
     DocPlaceholderAttribute(#InventLocationId, 'LL - Warehouse'),
     DocPlaceholderAttribute(#InventSiteId, 'LL - Site'),
     DocPlaceholderAttribute(#LoadSchedShipTime, 'LL - Scheduled ship time'),
     DocPlaceholderAttribute(#LoadSchedShipUTCDateTime, 'LL - Ship on Date/Time'),
     DocPlaceholderAttribute(#WMSLocationIdLoad, 'LL - Shipping location'),
     DocPlaceholderAttribute(#LoadFreightPieces, 'LL - Total freight pieces'),
     DocPlaceholderAttribute(#LoadWeight, 'LL - Total weight'),
     DocPlaceholderAttribute(#LoadVolume, 'LL - Total volume'),
     DocPlaceholderAttribute(#CarrierCode, 'LL - Carrier'),
     DocPlaceholderAttribute(#RouteCode, 'LL - Route'),
     DocPlaceholderAttribute(#LoadFloorStack, 'LL - Floor stack'),
     DocPlaceholderAttribute(#LoadNotes, 'LL - Load notes'),
     DocPlaceholderAttribute(#ShipmentId, 'LL - Shipment ID'),
     DocPlaceholderAttribute(#DeliveryName, 'LL - Delivery Name'),
     DocPlaceholderAttribute(#DeliveryAddress, 'LL - Delivery Address'),
     DocPlaceholderAttribute(#CustomerAccountID, 'LL - Customer Account ID'),
     DocPlaceholderAttribute(#LoadEmailDetails, 'LL - Load Email details')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
         // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // We need to read shipment information as it contains the Account information
        WHSShipmentTable whsShipmentTable = WHSShipmentTable::find(topRecord.ShipmentId);

        // This report generates a Load with multiple shipments with products being shipped
        // NOTE: Placeholders will contain only the first Load and Shipment information.
        // We need to create placeholders for:
        // - All relevant Load Fields:
        // NOTE: If you want to have data in case of multiple Lods, please modify [multipleLoads ? '*' : field]
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadId, multipleLoads ? DocConstantDSP::MULTIPLE : topRecord.LoadId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventLocationId, multipleLoads ? DocConstantDSP::MULTIPLE : topRecord.InventLocationId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventSiteId, multipleLoads ? DocConstantDSP::MULTIPLE : topRecord.InventSiteId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadSchedShipTime, topRecord.LoadSchedShipTime);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadSchedShipUTCDateTime, topRecord.LoadSchedShipUTCDateTime);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#WMSLocationIdLoad, multipleLoads ? DocConstantDSP::MULTIPLE : topRecord.WMSLocationIdLoad);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadFreightPieces, multipleLoads ? 0 : topRecord.LoadFreightPieces);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadWeight, multipleLoads ? 0 : topRecord.LoadWeight);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadVolume, multipleLoads ? 0 : topRecord.LoadVolume);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CarrierCode, multipleLoads ? DocConstantDSP::MULTIPLE : topRecord.CarrierCode);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RouteCode, multipleLoads ? DocConstantDSP::MULTIPLE : topRecord.RouteCode);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadFloorStack, topRecord.LoadFloorStack);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadNotes, multipleLoads ? DocConstantDSP::MULTIPLE : topRecord.LoadNotes);
        // - All relevant Shipment Fields:
        // NOTE: If you want to have data in case of multiple Shipments, please modify [multipleShipments ? '*' : field]
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipmentId, multipleShipments ? DocConstantDSP::MULTIPLE : topRecord.ShipmentId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryName, multipleShipments ? DocConstantDSP::MULTIPLE : topRecord.DeliveryName);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryAddress, multipleShipments ? DocConstantDSP::MULTIPLE : topRecord.Address);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesNotes, multipleShipments ? DocConstantDSP::MULTIPLE : topRecord.SalesNotes);
        // - All relevant Shipment Account Fields:
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustomerAccountID, multipleShipments ? DocConstantDSP::MULTIPLE : whsShipmentTable.AccountNum);

        // Add information for Print Destination Email
        // NOTE: As it is possible to have multiple Loads and even multiple Shipments inside a Load
        // We need to handle this in the scenario
        if (_reportRunContext.parmPrintDestination() == DocPrintDestination::Email)
        {
            if (DocPlaceholderManager::findPlaceholder(_reportRunContext.emailPrintDestSettings().parmEmailBody(), #LoadEmailDetails))
            {
                // We would like to have more information in email body about the Load and Shipments
                _reportRunContext.emailPrintDestSettings().parmEmailBody(
                    placeholderMng.replacePlaceholderInText(_reportRunContext.emailPrintDestSettings().parmEmailBody(), #LoadEmailDetails, loadEmailDetails)
                );
            }
        }

        // Defining how to write report to Print Archive
        DocArchiveContract archiveContract = _reportRunContext.archiveContract();

        // Add information to Print Archive
        // NOTE: As it is possible to have multiple Loads and even multiple Shipments inside a Load
        // We need to handle this in the scenario
        if (multipleLoads == false)
        {
            archiveContract.setDocument(topRecord.LoadId);
            archiveContract.setWHSLoadId(topRecord.LoadId);
        } 
        else 
        {
            // NOTE: Use literalStr(@Label)
            archiveContract.setDocument('Multiple starting with: ' + topRecord.LoadId);
        }

        if (multipleShipments == false)
        {
            archiveContract.setWHSShipmentId(topRecord.ShipmentId);
        
            // NOTE: Should allways be Sales. Only here as an example
            if (whsShipmentTable.WorkTransType == WHSWorkTransType::Sales)
            {
                _reportRunContext.archiveContract().setCustAccount(whsShipmentTable.AccountNum);
            }
            else if (whsShipmentTable.WorkTransType == WHSWorkTransType::Purch)
            {
                _reportRunContext.archiveContract().setVendAccount(whsShipmentTable.AccountNum);
            }
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>