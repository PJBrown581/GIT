<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTMSCoCCertificateOfOriginDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocTMSCoCCertificateOfOriginDSP class is a DSP class for the TMSCoCCertificateOfOrigin report.
/// </summary>
public class DocTMSCoCCertificateOfOriginDSP extends DocDataSourceProviderSrsReporting
{
    TMSCoCCertificateOfOriginTmp headerTableBuffer;     // Used for placeholders;
    boolean multipleShipments = false;

    // DDSP nodes names
    private const str CertificateHeader = 'CertificateHeader';
    private const str CertificateLine = 'CertificateLine';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>The class description</returns>
    public ClassDescription description()
    {
        return 'CoC Certificate of origin DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCertificateHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a certificate header record.
    /// </summary>
    /// <param name = "_recordBuilder">An instance of DocXmlRecordBuilder class</param>
    /// <param name = "_currentRecord">Current table record</param>
    /// <returns>Added XML record</returns>
    protected DocXmlRecord addCertificateHeader(DocXmlRecordBuilder _recordBuilder, TMSCoCCertificateOfOriginTmp _currentRecord)
    {
        // Add all fields that belong to the header only once.
        DocXmlRecord headerDataRecord = _recordBuilder.addRecord(_currentRecord);
        // Rename the record from 'TMSCoCCertificateOfOriginTmp' to 'CertificateHeader'.
        headerDataRecord.setRecordName(CertificateHeader);
        headerDataRecord.setSingleRecord(true);

        // NOTE: We are adding fields this way so that we do not extend the table definition with custom labels. Extending the table may affect other implementations
        headerDataRecord.addFieldGroup(tableFieldGroupStr(TMSCoCCertificateOfOriginTmp, HeaderFields_DR));

        return headerDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCertificateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a certificate line record.
    /// </summary>
    /// <param name = "_addingRecord">Adding XML record</param>
    /// <param name = "_currentRecord">Current table record</param>
    protected void addCertificateLine(DocXmlRecord _addingRecord, TMSCoCCertificateOfOriginTmp _currentRecord)
    {
        // Rename the record from 'TMSCoCCertificateOfOriginTmp' to 'CertificateLine'.
        _addingRecord.setRecordName(CertificateLine);

        // NOTE: We are adding fields this way so that we do not extend the table definition with custom labels. Extending the table may affect other implementations
        _addingRecord.addFieldGroup(tableFieldGroupStr(TMSCoCCertificateOfOriginTmp, LineFields_DR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overriding generateXmlDataSource method to generate custom structure.
    /// </summary>
    /// <param name = "_recordBuilder">An instance of the DocXmlRecordBuilder class</param>
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        //super(_recordBuilder); // We need custom structure generation

        // Defining header for inserting child lines
        DocXmlRecord certificateHeaderRecord = null;
        DocXmlRecord certificateLineRecord = null;

        // Get the report table context
        TMSCoCCertificateOfOriginTmp tmsCoCCertificateOfOriginTmp = this.getReportDataTableContext(tableStr(TMSCoCCertificateOfOriginTmp));

        str shipmentId = '';

        // Here we are starting to generate data tree
        while select tmsCoCCertificateOfOriginTmp
        {
            // Add header - key is ShipmentId_DR
            if (shipmentId != tmsCoCCertificateOfOriginTmp.ShipmentId_DR)
            {
                // Fill buffer for placeholders
                if (!shipmentId)
                {
                    buf2Buf(tmsCoCCertificateOfOriginTmp, headerTableBuffer);
                }
                else
                {
                    multipleShipments = true; 
                }

                shipmentId = tmsCoCCertificateOfOriginTmp.ShipmentId_DR;

                certificateHeaderRecord = this.addCertificateHeader(_recordBuilder, tmsCoCCertificateOfOriginTmp);
            }

            // Adding line as a child of header
            if (certificateHeaderRecord)
            {
                certificateLineRecord = certificateHeaderRecord.addChildRecord(tmsCoCCertificateOfOriginTmp);
                this.addCertificateLine(certificateLineRecord, tmsCoCCertificateOfOriginTmp);
            }

            // If we are adding the another new record on top level, we need to reset the record builder
            _recordBuilder.goToTopRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    #define.ShipmentDate('ShipmentDate')
    #define.Exporter('Exporter')
    #define.Distributor('Distributor')
    #define.Carrier('Carrier')
    #define.DestinantionName('DestinationName')
    #define.LoadId('LoadId')
    #define.ShipmentId('ShipmentId')

    [DocPlaceholderAttribute(#ShipmentDate, 'CO - Shipment Date'),
     DocPlaceholderAttribute(#Exporter, 'CO - Exporter'),
     DocPlaceholderAttribute(#Distributor, 'CO - Distributor'),
     DocPlaceholderAttribute(#Carrier, 'CO - Carrier'),
     DocPlaceholderAttribute(#DestinantionName, 'CO - Destination Name'),
     DocPlaceholderAttribute(#LoadId, 'CO - Load Id'),
     DocPlaceholderAttribute(#ShipmentId, 'CO - Shipment Id')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace all standard placeholders in the current print destination.
        DocPlaceholderManager placeHolderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ShipmentDate@
        placeHolderMng.replacePlaceholderInCurrentPrintDest(#ShipmentDate, multipleShipments ? dateNull() : headerTableBuffer.ShipmentDate);
        
        // -- Placeholder @ShipmentDate@
        placeHolderMng.replacePlaceholderInCurrentPrintDest(#Exporter, multipleShipments ? DocConstantDSP::MULTIPLE : headerTableBuffer.Exporter);
        
        // -- Placeholder @ShipmentDate@
        placeHolderMng.replacePlaceholderInCurrentPrintDest(#Distributor, multipleShipments ? DocConstantDSP::MULTIPLE : headerTableBuffer.Distributor);
        
        // -- Placeholder @ShipmentDate@
        placeHolderMng.replacePlaceholderInCurrentPrintDest(#Carrier, multipleShipments ? DocConstantDSP::MULTIPLE : headerTableBuffer.Carrier);
        
        // -- Placeholder @ShipmentDate@
        placeHolderMng.replacePlaceholderInCurrentPrintDest(#DestinantionName, multipleShipments ? DocConstantDSP::MULTIPLE : headerTableBuffer.DestinationName);
        
        // -- Placeholder @ShipmentDate@
        placeHolderMng.replacePlaceholderInCurrentPrintDest(#LoadId, multipleShipments ? DocConstantDSP::MULTIPLE : headerTableBuffer.LoadId_DR);
        
        // -- Placeholder @ShipmentDate@
        placeHolderMng.replacePlaceholderInCurrentPrintDest(#ShipmentId, multipleShipments ? DocConstantDSP::MULTIPLE : headerTableBuffer.ShipmentId_DR);

        // Fill the print archive contract.
        _reportRunContext.archiveContract().setDocument(multipleShipments ? '' : headerTableBuffer.ShipmentId_DR);
        _reportRunContext.archiveContract().setWHSShipmentId(multipleShipments ? '' : headerTableBuffer.ShipmentId_DR);
        _reportRunContext.archiveContract().setWHSLoadId(multipleShipments ? '' : headerTableBuffer.LoadId_DR);

        return placeHolderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>