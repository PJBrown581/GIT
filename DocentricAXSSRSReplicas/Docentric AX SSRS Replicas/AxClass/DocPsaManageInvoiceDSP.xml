<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPsaManageInvoiceDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocPsaManageInvoiceDSP extends DocDataSourceProviderSrsProforma
{
    PSAManageInvoiceTmp                     headerTableBuffer;
    PSAProjInvoiceContract                  reportContract;
    LogisticsAddressCountryRegionISOCode    isoCountryCode;
    ProjProposalJour                        projProposalJour;
    boolean                                 multipleProjIds = false;
    DocTableFieldsMetadata                  extensionFieldsMetadata_PSAManageInvoiceTmp = DocTableFieldsMetadata::construct(tableStr(PSAManageInvoiceTmp));


    /* Variables for custom placeholders */
    str      placeholder_invoiceNum;
    date     placeholder_invoiceDate;
    date     placeholder_invoiceDueDate;
    str      placeholder_projContract;
    str      placeholder_projId;
    str      placeholder_custAccount;
    str      placeholder_custName;
    str      placeholder_custContactName;
    str      placeholder_paymTerms;
    str      placeholder_projEmail;

    #ISOCountryRegionCodes

    #define.PSAMInvoiceHeader('PSAMInvoiceHeader')
    #define.PSAMInvoiceLines('PSAMInvoiceLines')
    #define.LocalizationFields('LocalizationFields')
    #define.PSAMInvoiceTax('PSAMInvoiceTax')
    #define.DefaultDimensionField('FinancialDimensions')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'User defined project invoice DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_ProjInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Header section
        _labelMap.insert(literalStr("@SYS14204"), 'Invoice: ');
        _labelMap.insert(literalStr("@SYS7426"), 'Page');
        _labelMap.insert(literalStr("@SYS92595"), 'of');
        _labelMap.insert(literalStr("@SYS4726"), 'Invoice number');
        _labelMap.insert(literalStr("@SYS57610"), 'Invoice date');
        _labelMap.insert(literalStr("@SYS50055"), 'Project contract');
        _labelMap.insert(literalStr("@SYS16716"), 'Customer account number');
        _labelMap.insert(literalStr("@SYS24540"), 'Our account number');
        _labelMap.insert(literalStr("@SYS316143"), 'Payment terms');
        _labelMap.insert(literalStr("@SYS66021"), 'Invoice currency');
        _labelMap.insert(literalStr("@SYS5231"), 'Giro');
        _labelMap.insert(literalStr("@SYS59571"), 'Registration number');
        _labelMap.insert(literalStr("@SYS26946"), 'Tax exempt number');

        // Main table
        _labelMap.insert(literalStr("@SYS10614"), 'Transaction type');
        _labelMap.insert(literalStr("@SYS69410"), 'Category');
        _labelMap.insert(literalStr("@SYS102891"), 'Quantity');
        _labelMap.insert(literalStr("@PSA11492"), 'Rate per quantity');
        _labelMap.insert(literalStr("@SYS3494"), 'Total amount');
        _labelMap.insert(literalStr("@SYS40257"), 'Index');
        _labelMap.insert(literalStr("@SYS58659"), 'Total');
  
        // Tax table
        _labelMap.insert(literalStr("@SYS177544"), 'Sales tax');
        _labelMap.insert(literalStr("@SYS99166"), 'Percent cash discount');
    
        // Totals
        _labelMap.insert(literalStr("@PSA11410"), 'Total invoice');
        _labelMap.insert(literalStr("@SYS6465"), 'Total discount');
        _labelMap.insert(literalStr("@SYS112318"), 'Charges');
        _labelMap.insert(literalStr("@SYS22916"), 'Sales tax');
        _labelMap.insert(literalStr("@PSA11408"), 'Retention amount');
        _labelMap.insert(literalStr("@PSA11407"), 'Net invoice');

        // SEPA section
        _labelMap.insert(literalStr("@SYS4002667"), 'SEPA Notification Header');
        _labelMap.insert(literalStr("@SYS4002672"), 'Payment for this invoice will be made from the following accounts at the earliest of');
        _labelMap.insert(literalStr("@SYS4002628"), 'Mandate ID');
        _labelMap.insert(literalStr("@SYS4002593"), 'Creditor');
        _labelMap.insert(literalStr("@SYS4002595"), 'Creditor ID');
        _labelMap.insert(literalStr("@SYS4002614"), 'Debtor name');
        _labelMap.insert(literalStr("@SYS4002613"), 'Debtor IBAN');
        _labelMap.insert(literalStr("@SYS4002615"), 'Debtor SWIFT Code');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(PSAManageInvoiceTmp))
        {
            PSAManageInvoiceTmp psaManageInvoiceTmp = _rdpTableRecord;
            // Rename the record from 'PSAManageInvoiceTmp' to 'PSAMInvoiceLines'.
            _addingRecord.setRecordName(#PSAMInvoiceLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Invoice lines'); // NOTE: use literalStr("@LabelID") instead.
            
            // Add 'Line fields' and 'Control line fields'.
            _addingRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, LineFields_DR));
            _addingRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, ControlLineFields_DR));
         
            // Add 'Localization line fields' as a child record.
            var childRecord = _addingRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, LocalizationLineFields_DR));
            childRecord.setRecordName(#LocalizationFields);
                      
            // Setting the flag needed for Docentric NextGen.
            childRecord.setSingleRecord(true);

            // Add Extension fields defined on PSAManageInvoiceTmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(psaManageInvoiceTmp, _addingRecord, true, extensionFieldsMetadata_PSAManageInvoiceTmp);


            // TODO: Add here additional fields from the related ProjInvoiceEmpl, ProjInvoiceCost, ProjInvoiceItem,
            // ProjInvoiceOnAcc or ProjInvoiceRevenue table (or some other tables).
            // Use 'keys' fields: psaManageInvoiceTmp.SourceTableId_DR and psaManageInvoiceTmp.SourceRecId_DR.
            // For example:
            //if (psaManageInvoiceTmp.SourceTableId_DR == tableNum(ProjInvoiceEmpl))
            //{
            //    ProjInvoiceEmpl projInvoiceEmpl = this.projInvoiceEmpl(psaManageInvoiceTmp.SourceRecId_DR);
            //    _addingRecord.addCalculatedField('Activity', projInvoiceEmpl.ActivityNumber);
            //    _addingRecord.addCalculatedFieldFromEdt('DefaultDimension', extendedTypeStr(DimensionDefault), projInvoiceEmpl.DefaultDimension);
            //}
        }
        else if (_rdpTableName == tableStr(PSAProjInvoiceTaxTmp))
        {
            // Rename the record from 'PSAProjInvoiceTaxTmp' to 'PSAMInvoiceTax'.
            _addingRecord.setRecordName(#PSAMInvoiceTax);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Invoice tax'); // NOTE: use literalStr("@LabelID") instead.

            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord headerDataRecord;

        void addHeaderFields()
        {
            // NOTE: We will skip adding the company related fields since we already have them
            // in the GeneralData data section at our disposal.
            // All ignored field are located in the IgnoredFields table field group.
         
            //-- Add the 'Header fields'.
            headerDataRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, HeaderFields_DR));

            //-- Add Project email and Customer primary email.
            CustTable custTable = CustTable::find(headerTableBuffer.CustAccountExt);
            headerDataRecord.addCalculatedField('CustomerEmail', custTable.email());
            headerDataRecord.addCalculatedField('ProjectEmail', ProjTable::find(headerTableBuffer.ProjId).Email);
        
            //-- Add Custom Fields defined on CustTable, if any.
            // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable, headerDataRecord);

            //-- Add Financial dimensions.
            ProjInvoiceJour projInvoiceJour = this.projInvoiceJour();
            headerDataRecord.addCalculatedFieldFromEdt(#DefaultDimensionField, extendedTypeStr(DimensionDefault), projInvoiceJour.DefaultDimension);
        
            //-- Add Extension fields defined on PSAManageInvoiceTmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(headerTableBuffer, headerDataRecord, true, extensionFieldsMetadata_PSAManageInvoiceTmp);
        }


        // 1. Add data records with fields representing the lines.
        super(_recordBuilder);

        // 2. Add all fields that belong to the header only once.
        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer).setSingleRecord(true);
        // Rename the record from 'PSAManageInvoiceTmp' to 'PSAMInvoiceHeader'.
        headerDataRecord.setRecordName(#PSAMInvoiceHeader);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Invoice header'); // NOTE: use literalStr("@LabelID") instead.
        // Add all 'header' fields.
        addHeaderFields();


        // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
        // by using the related data to headerTableBuffer (PSAManageInvoiceTmp) or reportContract.
        // For example, get the related ProjInvoiceJour record and add additional data you need:
        //ProjInvoiceJour projInvoiceJour = this.projInvoiceJour();
        //DocXmlRecord jourDataRecord = headerDataRecord.addChildRecord(projInvoiceJour);
        //jourDataRecord.addField(fieldStr(ProjInvoiceJour, DefaultDimension));
        //jourDataRecord.addDisplayMethod(tableMethodStr(ProjInvoiceJour, paymentCondition));
        // Or, add the customer group name:
        //headerDataRecord.addCalculatedField('CustGroup', CustTable::find(headerTableBuffer.CustAccountExt).customerGroup());

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipRdpTableRecord</Name>
				<Source><![CDATA[
    protected boolean skipRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        // Skip each record from the ProjInvoiceLocalizationTmp table if isoCountryCode
        // is not one of the listed countries below.
        // This means that for other than these countries, the ProjInvoiceLocalizationTmp table
        // will not be presented in the report data source.
        if (tableStr(ProjInvoiceLocalizationTmp) == _rdpTableName)
        {
            switch (isoCountryCode)
            {
                case #isoLT, #isoHU, #isoCZ, #isoPL:
                    return false;

                default:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        PSAManageInvoiceTmp currentRecord;

        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(PSAManageInvoiceTmp))
        {
            currentRecord = _rdpTableRecord;

            if (headerTableBuffer.RecId == 0)
            {
                // Copy all fields from the first selected record since the majority of them
                // belong to the report header. We will add them as a separate node in the
                // generateXmlDataSource method.
                buf2Buf(currentRecord, headerTableBuffer);
                headerTableBuffer.RecId = currentRecord.RecId;

                // Store custom placeholders' values.
                placeholder_invoiceNum = currentRecord.InvoiceNum;
                placeholder_invoiceDate = currentRecord.InvoiceDate;
                placeholder_invoiceDueDate = currentRecord.DueDate;
                placeholder_projContract = currentRecord.ContractId;
                placeholder_custAccount = currentRecord.CustAccountExt;
                placeholder_custName = currentRecord.CustCompanyName;
                placeholder_paymTerms = currentRecord.PaymTermId;
                placeholder_projId = currentRecord.ProjId;
                placeholder_projEmail = ProjTable::find(placeholder_projId).Email;
            }
            
            if (!multipleProjIds && (currentRecord.ProjId != placeholder_projId))
            {
                multipleProjIds = true;
                placeholder_projId = DocConstantDSP::MULTIPLE;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();

        isoCountryCode = SysCountryRegionCode::countryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InvoiceNum('InvoiceNum')
    #define.InvoiceDate('InvoiceDate')
    #define.InvoiceDueDate('InvoiceDueDate')
    #define.ProjContract('ProjContract')
    #define.ProjId('ProjId')
    #define.PaymentTerms('PaymentTerms')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.ProjEmail('ProjEmail')

    [DocPlaceholderAttribute(#InvoiceNum, 'PMI - Invoice Number'),
     DocPlaceholderAttribute(#InvoiceDate, 'PMI - Invoice Date'),
     DocPlaceholderAttribute(#InvoiceDueDate, 'PMI - Invoice Due Date'),
     DocPlaceholderAttribute(#ProjContract, 'PMI - Project Contract ID'),
     DocPlaceholderAttribute(#ProjId, 'PMI - Project ID'),
     DocPlaceholderAttribute(#PaymentTerms, 'PMI - Terms of Payment'),
     DocPlaceholderAttribute(#CustAccount, 'PMI - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'PMI - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'PMI - Customer Contact Name'),
     DocPlaceholderAttribute(#ProjEmail, 'PMI - Project Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding projProposalJour. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(this.projProposalJour());

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InvoiceNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceNum, placeholder_invoiceNum);

        // -- Placeholder @InvoiceDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDate, placeholder_invoiceDate);

        // -- Placeholder @InvoiceDueDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDueDate, placeholder_invoiceDueDate);

        // -- Placeholder @ProjContract@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjContract, placeholder_projContract);

        // -- Placeholder @ProjId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjId, placeholder_projId);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_custAccount);

        // -- Placeholder @ProjEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjEmail, placeholder_projEmail);

        // -- Placeholder @PaymentTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentTerms, placeholder_paymTerms);

        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, placeholder_custName);

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::custContactPersonName(placeholder_custAccount));


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_custAccount);
        _reportRunContext.archiveContract().setProjInvoiceProjId(placeholder_projContract);
        _reportRunContext.archiveContract().setDocument(placeholder_invoiceNum, placeholder_invoiceDate);
        _reportRunContext.archiveContract().setJournal(this.projInvoiceJour().RecId, DocJournalType::ProjInvoiceJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceJour</Name>
				<Source><![CDATA[
    protected ProjInvoiceJour projInvoiceJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = ProjInvoiceJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalJour</Name>
				<Source><![CDATA[
    protected ProjProposalJour projProposalJour()
    {
        if (!projProposalJour)
        {
            projProposalJour = ProjProposalJour::find(this.projInvoiceJour().ProposalId);
        }

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceEmpl</Name>
				<Source><![CDATA[
    protected ProjInvoiceEmpl projInvoiceEmpl(RecId _projInvoiceEmplRecId)
    {
        ProjInvoiceEmpl projInvoiceEmpl;
        
        if (this.isProforma())
        {
            projInvoiceEmpl = this.getProformaProjInvoiceEmpl(_projInvoiceEmplRecId);
        }
        else
        {
            projInvoiceEmpl = ProjInvoiceEmpl::findRecId(_projInvoiceEmplRecId);
        }

        return projInvoiceEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceCost</Name>
				<Source><![CDATA[
    protected ProjInvoiceCost projInvoiceCost(RecId _projInvoiceCostRecId)
    {
        ProjInvoiceCost projInvoiceCost;
        
        if (this.isProforma())
        {
            projInvoiceCost = this.getProformaProjInvoiceCost(_projInvoiceCostRecId);
        }
        else
        {
            projInvoiceCost = ProjInvoiceCost::findRecId(_projInvoiceCostRecId);
        }

        return projInvoiceCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceItem</Name>
				<Source><![CDATA[
    protected ProjInvoiceItem projInvoiceItem(RecId _projInvoiceItemRecId)
    {
        ProjInvoiceItem projInvoiceItem;
        
        if (this.isProforma())
        {
            projInvoiceItem = this.getProformaProjInvoiceItem(_projInvoiceItemRecId);
        }
        else
        {
            projInvoiceItem = ProjInvoiceItem::findRecId(_projInvoiceItemRecId);
        }

        return projInvoiceItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceOnAcc</Name>
				<Source><![CDATA[
    protected ProjInvoiceOnAcc projInvoiceOnAcc(RecId _projInvoiceOnAccRecId)
    {
        ProjInvoiceOnAcc projInvoiceOnAcc;
        
        if (this.isProforma())
        {
            projInvoiceOnAcc = this.getProformaProjInvoiceOnAcc(_projInvoiceOnAccRecId);
        }
        else
        {
            projInvoiceOnAcc = ProjInvoiceOnAcc::findRecId(_projInvoiceOnAccRecId);
        }

        return projInvoiceOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceRevenue</Name>
				<Source><![CDATA[
    protected ProjInvoiceRevenue projInvoiceRevenue(RecId _projInvoiceRevenueRecId)
    {
        ProjInvoiceRevenue projInvoiceRevenue;
        
        if (this.isProforma())
        {
            projInvoiceRevenue = this.getProformaProjInvoiceRevenue(_projInvoiceRevenueRecId);
        }
        else
        {
            projInvoiceRevenue = ProjInvoiceRevenue::findRecId(_projInvoiceRevenueRecId);
        }

        return projInvoiceRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PsaManageInvoiceDP_Post_insertTmpPSAManageInvoice_DC</Name>
				<Source><![CDATA[
    /*  Method for filling the missing keys */
    [PostHandlerFor(classStr(PsaManageInvoiceDP), methodStr(PsaManageInvoiceDP, insertTmpPSAManageInvoice))]
    public static void PsaManageInvoiceDP_Post_insertTmpPSAManageInvoice_DC(XppPrePostArgs args)
    {
        PSAManageInvoiceDP      projInvoiceDP = args.getThis();
        Common                  cursor  = args.getArgNum(1);
        PSAManageInvoiceTmp     psaManageInvoiceTmp;
        ProjInvoiceJour         projInvoiceJour;

        if (cursor.RecId)
        {
            RecId jourRecId = projInvoiceDP.parmDataContract().parmProjInvoiceJourRecId();

            psaManageInvoiceTmp.setConnection(projInvoiceDP.parmUserConnection());

            // We are selecting the right record because we are using the user connection.
            select forupdate firstonly psaManageInvoiceTmp
                exists join projInvoiceJour
                where psaManageInvoiceTmp.SourceRecId_DR == 0 && projInvoiceJour.RecId == jourRecId &&
                      psaManageInvoiceTmp.InvoiceNum == projInvoiceJour.ProjInvoiceId && psaManageInvoiceTmp.InvoiceDate == projInvoiceJour.InvoiceDate;

            if (psaManageInvoiceTmp)
            {
                psaManageInvoiceTmp.SourceTableId_DR = cursor.TableId;
                psaManageInvoiceTmp.SourceRecId_DR = cursor.RecId;
                psaManageInvoiceTmp.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>