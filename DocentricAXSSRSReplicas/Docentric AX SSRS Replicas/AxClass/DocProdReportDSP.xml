<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocProdReportDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocProdReportDSP extends DocDataSourceProviderSrsReporting
{
    /* Variable used for custom placeholders */
    ProdTable  prodTableForPlaceholders;
    boolean    multipleProdOrders = false;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Production order report DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method that enables you to add additional data to a report data source
    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);

        if (tableNum(ProdRoute) == _qbds.table())
        {
            utcdatetime fromDateTime;
            utcdatetime toDateTime;

            ProdRoute prodRoute = _common;

            // Add fields with proper date-time format for use in a Docentric report template
            fromDateTime = DateTimeUtil::newDateTime(prodRoute.FromDate, prodRoute.FromTime, DateTimeUtil::getUserPreferredTimeZone());
            toDateTime = DateTimeUtil::newDateTime(prodRoute.ToDate, prodRoute.ToTime, DateTimeUtil::getUserPreferredTimeZone());

            _addingRecord.addCalculatedField('FromDateTime', fromDateTime);
            _addingRecord.addCalculatedField('ToDateTime', toDateTime);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        if (tableNum(ProdTable) == _qbds.table())
        {
            ProdTable prodTable = _common;
            
            if (prodTableForPlaceholders.ProdId == '')
            {
                buf2Buf(prodTable, prodTableForPlaceholders);
            }
            else if (prodTableForPlaceholders.ProdId != prodTable.ProdId)
            {
                multipleProdOrders = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.ProdId('ProdId')
    #define.ItemId('ItemId')
    #define.ItemName('ItemName')
    #define.RefNumber('RefNumber')
    #define.RefName('RefName')
    #define.StartedDate('StartedDate')
    #define.DeliveryDate('DeliveryDate')

    [DocPlaceholderAttribute(#ProdId, 'PO - Prod ID'),
     DocPlaceholderAttribute(#ItemId, 'PO - Item ID'),
     DocPlaceholderAttribute(#ItemName, 'PO - Item Name'),
     DocPlaceholderAttribute(#RefNumber, 'PO - Reference Number'),
     DocPlaceholderAttribute(#RefName, 'PO - Reference Name'),
     DocPlaceholderAttribute(#StartedDate, 'PO - Started Date'),
     DocPlaceholderAttribute(#DeliveryDate, 'PO - Delivery Date')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ProdId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProdId, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTableForPlaceholders.ProdId);
        
        // -- Placeholder @ItemId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemId, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTableForPlaceholders.ItemId);

        // -- Placeholder @ItemName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemName, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTableForPlaceholders.Name);

        // -- Placeholder @RefNumber@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefNumber, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTableForPlaceholders.InventRefId);

        // -- Placeholder @RefName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefName, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTableForPlaceholders.referenceName());

        // -- Placeholder @StartedDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#StartedDate, multipleProdOrders ? dateNull() : prodTableForPlaceholders.StUpDate);

        // -- Placeholder @DeliveryDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryDate, multipleProdOrders ? dateNull() : prodTableForPlaceholders.DlvDate);

        // Fill the Print archive contract.
        if (multipleProdOrders)
        {
            _reportRunContext.archiveContract().setProdId('');
        }
        else
        {
            _reportRunContext.archiveContract().setProdId(prodTableForPlaceholders.ProdId);
            _reportRunContext.archiveContract().setDocument(prodTableForPlaceholders.ProdId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>