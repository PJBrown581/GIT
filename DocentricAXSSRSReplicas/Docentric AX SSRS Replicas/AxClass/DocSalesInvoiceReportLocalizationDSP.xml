<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSalesInvoiceReportLocalizationDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocSalesInvoiceReportLocalizationDSP extends DocSalesInvoiceReportDSP
{
    SalesInvoiceLocalizationTmp     lineWithHeaderFields;
    boolean                         showPrepaidTotalsLoc, showCustPaymSchedLoc;

    const str CONST_SalesInvoiceHeaderLocalizationExt = 'SalesInvoiceLocHeaderExt';
    const str CONST_SalesInvoiceLocalizationLines = 'SalesInvoiceLocLines';
    const str CONST_TaxLines_Loc = 'SalesInvoiceLocLines_Tax';
    const str CONST_PrepayedLines_Loc = 'SalesInvoiceLocLines_Prepayed';
    const str CONST_PaymSchedLines_Loc = 'SalesInvoiceLocLines_PaymSched';
    const str CONST_MarkupLines_Loc = 'SalesInvoiceLocLines_Markup';
    const str CONST_PackingMaterialLines_Loc = 'SalesInvoiceLocLines_PackingMaterial';
    const str CONST_BackorderLines_Loc = 'SalesInvoiceLocLines_Backorder';
    
    // NOTE: Only for isoCountryCode == #isoPL:
    const str CONST_PackageDetailLines_Loc = 'SalesInvoiceLocLines_PackageDetail';
    const str CONST_CreditNoteSummaryLines_Loc = 'SalesInvoiceLocLines_CreditNoteSummary';
    
    #ISOCountryRegionCodes


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Sales Invoice Localization DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLocalizationLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLocalizationLine(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine)
    {
        // (1) Store the first SalesInvoiceLocalizationTmp record into a global variable. It will be used later,
        // in the generateXmlDataSource() method, to add fields that should be 'moved' to the header.
        if (lineWithHeaderFields.RecId == 0)
        {
            buf2Buf(_currentLine, lineWithHeaderFields);
            lineWithHeaderFields.RecId = _currentLine.RecId;
        }

        // (2) Add the needed fields from the SalesInvoiceLocalizationTmp table.
        // NOTE: EXCLUDE all fields you don't need on the report in the methods that
        // follow for the sake of maintenance. From these methods EXCLUDE all unnecessary fields
        // likewise INCLUDE additional fields you may need.

        // Add the data fields that originate from the related CustInvoiceTrans record.
        if (this.sil_addMainLines_Localization(_addingRecord, _currentLine, false))
        {
            return;
        }

        /*****  Fields that represent different types of lines  *****/
        // 1) TaxLines
        if (this.sil_addTaxTransLines_Localization(_addingRecord, _currentLine, false))
        {
            // Only for isoCountryCode == #isoCZ can happen that these are prepayment tax lines
            // and Prepayed lines should be added as well.
            if (_currentLine.ShowCustTrans == false)
            {
                return;
            }
        }

        // 2) PrepayedLines
        if (this.sil_addCustTransLines_Localization(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 3) PaymSchedLines
        if (this.sil_addPaymSchedLines_Localization(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 4) MarkupLines
        if (this.sil_addMarkupLines_Localization(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 5) PackingMaterialLines
        if (this.sil_addPackMaterialLines_Localization(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 6) BackorderLines
        if (this.sil_addBackorderLines_Localization(_addingRecord, _currentLine, false))
        {
            return;
        }

        if (isoCountryCode == #isoPL)
        {
            // 7) PackageDetailLines
            if (this.sil_addPackageDetailLines_Localization(_addingRecord, _currentLine, false))
            {
                return;
            }

            // 8) CreditNoteSummaryLines
            if (this.sil_addCreditNoteSummaryLines_Localization(_addingRecord, _currentLine, false))
            {
                return;
            }
        }


        if (!this.isRuntime())
        {
            _addingRecord.setRecordName('SalesInvoiceLine_UnsupportedType');
            _addingRecord.addAllFields();
            DocGlobalHelper::handleWarning('Unsupported type of the SalesInvoiceLocalizationTmp line');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipRdpTableRecord</Name>
				<Source><![CDATA[
    protected boolean skipRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        // TODO: Remove this method in order to include the SalesInvoiceTmp table
        // into the report data source, if needed.

        // Skip each record from the SalesInvoiceTmp table.
        if (tableStr(SalesInvoiceTmp) == _rdpTableName)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        SalesInvoiceLocalizationTmp   salesInvoiceLocalizationTmpEmptyFields;
        DocXmlRecord                  dataRecordEmptyFields, headerExtDataRecord;


        // Build the internal record tree from the built-in report RDP tables.
        super(_recordBuilder);


        // (1) Add all fields from SalesInvoiceLocalizationTmp which should be moved to the header.
        _recordBuilder.goToTopRecord();
        headerExtDataRecord = _recordBuilder.addRecord(lineWithHeaderFields);
        // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceHeaderLocalizationExt'.
        headerExtDataRecord.setRecordName(CONST_SalesInvoiceHeaderLocalizationExt);
        // Change the label of the record.
        headerExtDataRecord.setRecordLabel('Invoice header extended'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.
        // Add all 'header' fields from the stored line record.
        this.sih_addDataFieldsForHeaderExt_Localization(headerExtDataRecord);

        _recordBuilder.goToTopRecord();

        // (2) If this is design time, add all empty type of lines that haven't been already added.
        if (!this.isRuntime())
        {
            salesInvoiceLocalizationTmpEmptyFields.clear();

            // Main lines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(CONST_SalesInvoiceLocalizationLines) == null)
            {
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addMainLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // TaxLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(CONST_TaxLines_Loc) == null)
            {
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addTaxTransLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // PrepayedLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(CONST_PrepayedLines_Loc) == null)
            {
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addCustTransLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // PaymSchedLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(CONST_PaymSchedLines_Loc) == null)
            {
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addPaymSchedLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // MarkupLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(CONST_MarkupLines_Loc) == null)
            {
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addMarkupLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // PackingMaterialLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(CONST_PackingMaterialLines_Loc) == null)
            {
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addPackMaterialLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // BackorderLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(CONST_BackorderLines_Loc) == null)
            {
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addBackorderLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            if (isoCountryCode == #isoPL)
            {
                // PackageDetailLines
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addPackageDetailLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();

                // CreditNoteSummaryLines
                dataRecordEmptyFields = _recordBuilder.addRecord(salesInvoiceLocalizationTmpEmptyFields);
                this.sil_addCreditNoteSummaryLines_Localization(dataRecordEmptyFields, salesInvoiceLocalizationTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }
        }

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addBackorderLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addBackorderLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                       boolean _forceAddingFields)
    {
        /* Backorder lines */
        if (_forceAddingFields || _currentLine.ShowBackorders)
        {
            // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceLocalization_Backorder'.
            _addingRecord.setRecordName(CONST_BackorderLines_Loc);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Backorder lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the backorder lines.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, BackOrderLineName));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, BackOrderLineItemId));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, BackOrderLineQuantity));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, BackOrderLineSalesUnit));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, BackOrderConfirmedDeliveryDate));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowBackOrderConfirmedDeliveryDate));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowBackorders));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addCustTransLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addCustTransLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                       boolean _forceAddingFields)
    {
        /* Lines with prepaid amounts */
        if (_forceAddingFields || _currentLine.ShowCustTrans)
        {
            // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceLocalization_Prepayed'.
            _addingRecord.setRecordName(CONST_PrepayedLines_Loc);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Prepayed lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the prepaid lines.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CurrencyCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SettledAmountCur));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, Txt));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransDate));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PrePaymentAmountTax));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PrePaymentAmountTaxEuro));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PrePaymentAmountTaxMST));
            if (isoCountryCode == #isoLV)
            {
                _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SpecialFormattedPrePaymentTransDate));
            }

            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowCustTrans));

            // Store the value of the ShowCustTrans flag which has the same meaning the showPrepaidTotalsLoc flag.
            showPrepaidTotalsLoc = _currentLine.ShowCustTrans;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addMainLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addMainLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                  boolean _forceAddingFields)
    {
        DocXmlRecord    packingSlipDataRecord, inventDimDataRecord;


        boolean isCustInvoiceTransLine(SalesInvoiceLocalizationTmp _salesInvoiceLocalization)
        {
            boolean isCustInvoiceTransLine;
            isCustInvoiceTransLine = _salesInvoiceLocalization.ItemId != '' ||
                                     _salesInvoiceLocalization.Name != '' ||
                                     _salesInvoiceLocalization.Qty != 0 ||
                                     _salesInvoiceLocalization.SalesPrice != 0 ||
                                     _salesInvoiceLocalization.LineAmount != 0 ||
                                     _salesInvoiceLocalization.LineAmountInclTax != 0 ||
                                     _salesInvoiceLocalization.DiscPercent != 0 ||
                                     _salesInvoiceLocalization.DiscountAmount != 0;
            return isCustInvoiceTransLine;
        }


        // Check if the current SalesInvoiceLocalizationTmp record is a main invoice line
        // with name, qty, price, amount, etc. and add all corresponidng fields.
        if (_forceAddingFields || isCustInvoiceTransLine(_currentLine))
        {
            // (1) Change the name of the adding record from 'SalesInvoiceLocalizationTmp'
            // to a more readable name, e.g. 'SalesInvoiceLocalization'.
            _addingRecord.setRecordName(CONST_SalesInvoiceLocalizationLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Invoice lines'); // NOTE: use literalStr("@LabelID") instead.

            // (2) Include all fields you need on the main invoice line.
            // NOTE: Exclude all fields you don't need on the report for the sake of maintenance.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ItemId));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ExternalItemId));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, Name));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, Qty));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SalesPrice));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SalesUnitTxt));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineAmountInclTax));

            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineSign));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineNumber));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineTaxAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShipmentDate));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PKWiUCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, IntrastatCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PreviousRunningTotal));

            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DiscPercent));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DiscountAmount));

            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxWriteCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CorrectiveReasonLines));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, Notes));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineHeader));

            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PdsEnabled));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, pdsCWUnitId));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, pdsCWQty));
            
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ReverseChargeLine));


            /* Packing slip fields */
            packingSlipDataRecord = _addingRecord.addChildRecord(_currentLine);
            packingSlipDataRecord.setRecordName('PackingSlip');
            packingSlipDataRecord.setRecordLabel('Packing slip'); // NOTE: use literalStr("@LabelID") instead.
            packingSlipDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackingSlip));
            packingSlipDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowCustPackingSlipTrans));
            //-- Redudant fields (never get filled):
            //packingSlipDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackingSlipDeliveryDate));
            //packingSlipDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackingSlipTransQty));
            //packingSlipDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackingSlipId));


            /* InventDim fields */
            inventDimDataRecord = _addingRecord.addChildRecord(_currentLine);
            inventDimDataRecord.setRecordName('InventDim');
            inventDimDataRecord.setRecordLabel('Inventory dimensions'); // NOTE: use literalStr("@LabelID") instead.
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ConfigId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventSizeId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventColorId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventSiteId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventLocationId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventBatchId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventSerialId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventStyleId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventStatusId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, WMSLocationId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LicensePlateId));

            inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventDimPrint));

            // NOTE: With the July 2017 version this field became obsolete.
            //inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, WMSPalletId));

            /* Redudant fields (never get filled) */
            //_addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PaymentId));
            //_addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ItemInventoryDetails));


            /* COUNTRY REGION SPECIFIC DATA FIELDS */
            switch (isoCountryCode)
            {
                case #isoRU:
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventGTDId_RU));
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventOwnerId_RU));
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventProfileId_RU));
                    break;

                case #isoPL:
                    _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, HideInvoiceLine_PL));
                    break;
            }


            // TODO: Add here all your custom (extension) fields from the SalesInvoiceLocalizationTmp table, if any.
            // For example:
            //_addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, YourCustomFieldName));


            // TODO: Add here additional fields from the related CustInvoiceTrans table.
            //CustInvoiceTrans custInvoiceTrans = this.custInvoiceTrans(_currentLine.JourTransRecId_DR);
            //_addingRecord.addCalculatedField(custInvoiceTrans.OrigSalesId);
            //_addingRecord.addCalculatedField('LineAmountTax', custInvoiceTrans.LineAmountTax);

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addMarkupLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addMarkupLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                    boolean _forceAddingFields)
    {
        // NOTE: These lines never get filled. Use MarkupLines from SalesInvoiceLocalization instead.

        /* Markup lines */
        if (_forceAddingFields || _currentLine.ShowMarkupTrans)
        {
            // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceLocalization_Markup'.
            _addingRecord.setRecordName(CONST_MarkupLines_Loc);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Markup lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the markup lines.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, MarkupCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, MarkupTaxCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, MarkupAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowMarkupTrans));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addPackMaterialLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addPackMaterialLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                          boolean _forceAddingFields)
    {
        /* PackingMaterial lines */
        if (_forceAddingFields || _currentLine.ShowPackingMaterial)
        {
            // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceLocalization_PackingMaterial'.
            _addingRecord.setRecordName(CONST_PackingMaterialLines_Loc);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Packing materials lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the PackingMaterial lines.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackMaterialName));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackagingWeight));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackMaterialUnit));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackMaterialCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackagingMaterialText));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowPackingMaterial));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addPaymSchedLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addPaymSchedLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                       boolean _forceAddingFields)
    {
        /* PaymentSchedule lines */
        if (_forceAddingFields || _currentLine.ShowCustPaymSched)
        {
            // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceLocalization_PaymSched'.
            _addingRecord.setRecordName(CONST_PaymSchedLines_Loc);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Payment scheduled lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the PaymentScheduled lines.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DueDate));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DueAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DiscAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DiscDate));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowCustPaymSchedLine));
            if (isoCountryCode == #isoLV)
            {
                _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SpecialFormattedDiscountDate));
                _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SpecialFormattedDiscountDueDate));
            }

            // Store the value of the ShowCustTrans flag which has the same meaning the showCustPaymSchedLoc flag.
            showCustPaymSchedLoc = _currentLine.ShowCustPaymSched;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addTaxTransLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addTaxTransLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                      boolean _forceAddingFields)
    {
        /* Lines with taxes */
        if (_forceAddingFields || _currentLine.ShowTaxTrans)
        {
            // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceLocalization_Tax'.
            _addingRecord.setRecordName(CONST_TaxLines_Loc);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Taxes'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the tax lines.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, Amount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxAmountMST));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxBaseAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxBaseAmountMST));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CashDiscAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxExemptDescription));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxBaseQty));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PrintCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxAmountExcluded));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxAmountExcludedEuro));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxCurrencyCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxDirective));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxDocumentNumber));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxExcludeFromInvoice));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxValue));
            if (isoCountryCode == #isoCZ)
            {
                _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, OriginalInvoiceId_CZ));
            }

            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowTaxTrans));


            //-- Redudant fields (never get filled):
            //_addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, IsTaxAmountMST));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addPackageDetailLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addPackageDetailLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                           boolean _forceAddingFields)
    {
        /* Lines with package detail */
        if (_forceAddingFields || _currentLine.PackageId != '')
        {
            // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceLocalizationLines_PackageDetailLines'.
            _addingRecord.setRecordName(CONST_PackageDetailLines_Loc);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Package detail lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the tax lines.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackageId));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackageDescription));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackageQuantity));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PackageQuantity));
            
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addCreditNoteSummaryLines_Localization</Name>
				<Source><![CDATA[
    protected boolean sil_addCreditNoteSummaryLines_Localization(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLine,
                                                               boolean _forceAddingFields)
    {
        /* Lines with credit note summary detail */
        if (_forceAddingFields || _currentLine.SummaryLine_PL)
        {
            // Rename the record from 'SalesInvoiceLocalizationTmp' to 'SalesInvoiceLocalizationLines_CreditNoteSummaryLines'.
            _addingRecord.setRecordName(CONST_CreditNoteSummaryLines_Loc);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Credit note summary lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the tax lines.
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SummaryLine_PL));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineNumber));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ItemId));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PKWiUCode));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, Qty));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SalesUnitTxt));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DiscountAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, LineTaxAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxWriteCode));
            
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sih_addDataFieldsForHeaderExt_Localization</Name>
				<Source><![CDATA[
    protected void sih_addDataFieldsForHeaderExt_Localization(DocXmlRecord _headerExtDataRecord)
    {
        DocXmlRecord childRecord;

        /*****  Fields that are moved to the extended invoice header  *****/
        /* IDs */
        _headerExtDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InvoiceId));
        _headerExtDataRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InvoiceName));


        /* Flags */
        childRecord = _headerExtDataRecord.addChildRecord(lineWithHeaderFields);
        childRecord.setRecordName('Flags');
        childRecord.setRecordLabel('Flags');

        // Fix the ShowPrepaidTotals flag since it is set only in the CustTrans ('prepaid') lines.
        // For that use the stored value in the showPrepaidTotalsLoc variable.
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowPrepaidTotals))
               .setFieldValue(showPrepaidTotalsLoc);
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowPrepaidTotalsEuro))
               .setFieldValue(showPrepaidTotalsLoc && lineWithHeaderFields.PrintEuroTotals);

        // Fix the ShowCustPaymSched flag since it is set only in the PaymSchedLines lines.
        // For that use the stored value in the showCustPaymSchedLoc variable.
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowCustPaymSched))
               .setFieldValue(showCustPaymSchedLoc);

        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, IsTaxAmountMSTVisible));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowCashDiscOnInvoiceControls));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowSepaNotification));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowPayment));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowTotals));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowTotalsEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowTotalsTaxBalances));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ShowTotalsTaxBalancesEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ConfigIdFlag));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventColorIdFlag));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventSizeIdFlag));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InventStyleIdFlag));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PrintEuroTotals));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, IsBankExchangeRateEnabled));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PriceIncludeTax));
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxPrintTaxFreeBalance)); -> This field never gets filled.

        /* Add flags from the SalesInvoiceHeaderFooterTmp table */
        // We stored these flags in the addDataFieldsForHeader method into the salesInvoiceHeaderFlagFields variable.
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, CustInvoiceRefNum_FI),
            salesInvoiceHeaderFlagFields.CustInvoiceRefNum_FI ? true : false);
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowCompanyVATNum),
            salesInvoiceHeaderFlagFields.ShowCompanyVATNum ? true : false);
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowCurrencyBankAccount),
            salesInvoiceHeaderFlagFields.ShowCurrencyBankAccount ? true : false);
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowPayer),
            salesInvoiceHeaderFlagFields.ShowPayer ? true : false);
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, IsPaymIdVisible),
            salesInvoiceHeaderFlagFields.IsPaymIdVisible ? true : false);
        //childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, PrintFreeTextInvoiceVATNum),
        //salesInvoiceHeaderFlagFields.PrintFreeTextInvoiceVATNum ? true : false); -> already added from SalesInvoiceLocalizationTmp


        /* Currencies */
        childRecord = _headerExtDataRecord.addChildRecord(lineWithHeaderFields);
        childRecord.setRecordName('Currencies');
        childRecord.setRecordLabel('Currencies');
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CustInvoiceJourCurrencyCode));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, EuroCurrencyCode));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ExchRate));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, StandardCurrency));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, EUROExchangeRate));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SalesTaxExchangeRate));


        /* Dates */
        childRecord = _headerExtDataRecord.addChildRecord(lineWithHeaderFields);
        childRecord.setRecordName('Dates');
        childRecord.setRecordLabel('Dates');
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CustInvoiceJourDueDate));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DateOfCreation));
        if (isoCountryCode == #isoLV)
        {
            childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SpecialFormattedPaymentDueDate));
        }


        /* Amounts */
        childRecord = _headerExtDataRecord.addChildRecord(lineWithHeaderFields);
        childRecord.setRecordName('Amounts');
        childRecord.setRecordLabel('Amounts');
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InvoiceAmount));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InvoiceAmountEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InvoiceAmountMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PrepaidAmount));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PrepaidAmountEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, RemainAmountToBePaid));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, RemainAmountToBePaidEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SalesBalance));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SalesBalanceEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SalesBalanceMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SumTax));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SumTaxEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SumTaxMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, NetAmount));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, NetAmountEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, NetAmountMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, EndDisc));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, EndDiscEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, EndDiscMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SumMarkup));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SumMarkupEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SumMarkupMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InvoiceRoundOff));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InvoiceRoundOffEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, InvoiceRoundOffMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxableBalance));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxableBalanceEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxableBalanceMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxFreeBalance));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxFreeBalanceEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxFreeBalanceMST));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CashDisc));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ReverseChargeJournal));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ReverseChargeAmount));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ReverseChargeAmountEuro));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ReverseChargeBalance));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, ReverseChargeBalanceEuro));


        /* Mandate fields */
        childRecord = _headerExtDataRecord.addChildRecord(lineWithHeaderFields);
        childRecord.setRecordName('MandateFields');
        childRecord.setRecordLabel('Mandate fields');
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, MandateBankIBAN));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, MandateReference));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, MandateSWIFTNo));


        /* Notes and labels */
        childRecord = _headerExtDataRecord.addChildRecord(lineWithHeaderFields);
        childRecord.setRecordName('NotesAndLabels');
        childRecord.setRecordLabel('Notes and labels');
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, HeaderNotes));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, FormLetterRemarksTxt));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CashDiscTxt_LanguageId));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, AmountInWords));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, AmountInWordsEUR));


        /* Transportation document fields */
        childRecord = _headerExtDataRecord.addChildRecord(lineWithHeaderFields);
        childRecord.setRecordName('TransportationDocument');
        childRecord.setRecordLabel('Transportation Document');
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DoPrintTransportationDocument));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DeliveryName));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, DeliveryAddress));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, EconomicActivity));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationCarrierAddress));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationCarrierName));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationContactPersonName));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationContactPersonTitle));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationDataSection));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransPortationIssuedByName));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationIssuedByTitle));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationLoadedAddress));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationLoadedDateTime));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationLoadedName));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationPackageDangerDegree));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationPackageDescription));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationVehicleDescription));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationVehicleDriverName));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationVehiclePlateNumber));
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TransportationVehicleTrailerNumber));
        if (isoCountryCode == #isoLV)
        {
            childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, SpecialFormattedTransportationLoadedDate));
        }


        /* Misc */
        childRecord = _headerExtDataRecord.addChildRecord(lineWithHeaderFields);
        childRecord.setRecordName('Misc');
        childRecord.setRecordLabel('Misc');
        childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PrePrintLevel));
        
        
        /* Redundant fields */
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, JournalRecId));
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, Page));
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PagesTotal));
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, Caption));
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, FooterText));
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, TaxPrintTaxFreeBalance));
        // Already presented in header:
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CorrectiveReasonHeader));
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, CustomerRef));
        //childRecord.addField(fieldStr(SalesInvoiceLocalizationTmp, PaymentReference));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>