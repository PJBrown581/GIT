<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocInventNonConformanceTableDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocInventNonConformanceTableDSP class is a DSP class for the InventNonConformanceTable report.
/// </summary>
class DocInventNonConformanceTableDSP extends DocDataSourceProviderSrsReporting
{
    /* Variables used for custom placeholders */
    InventNonConformanceID      placeholderInventNonConformanceId;
    str                         placeholderInventNonConformanceTypeText;
    InventTestProblemTypeId     placeholderInventTestProblemTypeId;
    ItemId                      placeholderItemId;
    InventTestDefectQty         placeholderInventTestDefectQty;
    ApprovedByName              placeholderApprovedByName;
    RefusedByName               placeholderRefusedByName;
    TransDate                   placeholderNonConformanceDate;
    VendAccount                 placeholderVendAccount;
    CustAccount                 placeholderCustAccount;
    str                         placeholderVendorName;
    str                         placeholderCustomerName;
    boolean                     isMultipleInventNonConformanceIds = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Invent Non Conformance Table';
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overriden method that enables you to store some values from the currently selected
    /// record from a query data source into global class variables.
    /// </summary>
    /// <param name = "_common">Currently selected record from one of the query data sources.</param>
    /// <param name = "_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super(_common, _qbds);

        if (tableNum(InventNonConformanceTable) == _qbds.table())
        {
            InventNonConformanceTable inventNonConformanceTable = _common;

            if (placeholderInventNonConformanceId != inventNonConformanceTable.InventNonConformanceID)
            {
                // Check if there is more than one Invent Non Conformance Id
                isMultipleInventNonConformanceIds = placeholderInventNonConformanceId == '' ? false : true;
                placeholderInventNonConformanceId = inventNonConformanceTable.InventNonConformanceID;
            }

            placeholderInventNonConformanceTypeText = enum2Str(inventNonConformanceTable.InventNonConformanceType);
            placeholderInventTestProblemTypeId = inventNonConformanceTable.InventTestProblemTypeId;
            placeholderItemId = inventNonConformanceTable.ItemId;
            placeholderInventTestDefectQty = inventNonConformanceTable.TestDefectQty;
            placeholderApprovedByName = inventNonConformanceTable.approvedByName();
            placeholderRefusedByName = inventNonConformanceTable.refusedByName();
            placeholderNonConformanceDate = inventNonConformanceTable.NonConformanceDate;

            if (inventNonConformanceTable.VendAccount)
            {
                placeholderVendAccount = inventNonConformanceTable.VendAccount;
                placeholderVendorName = VendTable::find(inventNonConformanceTable.VendAccount).name();
            }

            if (inventNonConformanceTable.CustAccount)
            {
                placeholderCustAccount = inventNonConformanceTable.CustAccount;
                placeholderCustomerName = CustTable::find(inventNonConformanceTable.CustAccount).name();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.InventNonConformanceID('InventNonConformanceID')
    #define.InventNonConformanceTypeText('InventNonConformanceTypeText')
    #define.InventTestProblemTypeId('InventTestProblemTypeId')
    #define.ItemId('ItemId')
    #define.InventTestDefectQty('InventTestDefectQty')
    #define.ApprovedByName('ApprovedByName')
    #define.RefusedByName('RefusedByName')
    #define.TransDate('TransDate')
    #define.VendAccount('VendAccount')
    #define.CustAccount('CustAccount')
    #define.VendName('VendName')
    #define.CustName('CustName')

    [DocPlaceholderAttribute(#InventNonConformanceID, 'NC - Non conformance number '),
     DocPlaceholderAttribute(#InventNonConformanceTypeText, 'NC - Non conformance type'),
     DocPlaceholderAttribute(#InventTestProblemTypeId,  'NC - Problem type'),
     DocPlaceholderAttribute(#ItemId,  'NC - Item number'),
     DocPlaceholderAttribute(#InventTestDefectQty,  'NC - Defective quantity'),
     DocPlaceholderAttribute(#ApprovedByName,  'NC - Approved by'),
     DocPlaceholderAttribute(#RefusedByName,  'NC - Refused by'),
     DocPlaceholderAttribute(#TransDate,  'NC - Date'),
     DocPlaceholderAttribute(#VendAccount,  'NC - Vendor Account'),
     DocPlaceholderAttribute(#CustAccount,  'NC - Customer Account'),
     DocPlaceholderAttribute(#VendName,  'NC - Vendor Name'),
     DocPlaceholderAttribute(#CustName,  'NC - Customer Name')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // @InventNonConformanceID@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventNonConformanceID, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderInventNonConformanceId);
        
        // @InventNonConformanceTypeText@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventNonConformanceTypeText, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderInventNonConformanceTypeText);

        // @InventTestProblemTypeId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventTestProblemTypeId, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderInventTestProblemTypeId);

        // @ItemId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemId, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderItemId);
        
        // @InventTestDefectQty@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventTestDefectQty, isMultipleInventNonConformanceIds ? 0 : placeholderInventTestDefectQty);

        // @ApprovedByName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ApprovedByName, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderApprovedByName);
        
        // @RefusedByName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefusedByName, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderRefusedByName);

        // @TransDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#TransDate, isMultipleInventNonConformanceIds ? dateNull() : placeholderNonConformanceDate);

        // @VendAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendAccount, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderVendAccount);

        // @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderCustAccount);

        // @VendName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendName, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderVendorName);

        // @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, isMultipleInventNonConformanceIds ? DocConstantDSP::MULTIPLE : placeholderCustomerName);

        // Fill the print archive contract
        if (!isMultipleInventNonConformanceIds)
        {
            _reportRunContext.archiveContract().setDocument(placeholderInventNonConformanceId);

            if (placeholderCustAccount)
            {
                _reportRunContext.archiveContract().setCustAccount(placeholderCustAccount);
            }

            if (placeholderVendAccount)
            {
                _reportRunContext.archiveContract().setVendAccount(placeholderVendAccount);
            }
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        _labelMap.insert(literalStr("@SYS121162"), 'Modified by');
        _labelMap.insert(literalStr("@SYS177210"), 'Modified date and time');
        _labelMap.insert(literalStr("@SYS336181"), 'Non conformance');
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');
        _labelMap.insert(literalStr("@SYS11959"), 'Unit');
        _labelMap.insert(literalStr("@SYS5461"), 'Yes');
        _labelMap.insert(literalStr("@SYS2048"), 'No');
        _labelMap.insert(literalStr("@SYS31457"), 'Notes');
        _labelMap.insert(literalStr("@SYS300117"), 'There is no data available.');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>