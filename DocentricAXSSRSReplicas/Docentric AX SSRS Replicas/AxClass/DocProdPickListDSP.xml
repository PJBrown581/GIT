<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocProdPickListDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocProdPickListDSP extends DocDataSourceProviderSrsReporting
{
    ProdPickListTmp headerTableBuffer;     // used for placeholders;
    boolean multipleProdPickLists = false;
    DocTableFieldsMetadata extensionFieldsMetadata_ProdPickListTmp = DocTableFieldsMetadata::construct(tableStr(ProdPickListTmp));

    #define.ProdPickListHeader('PickListHeader')
    #define.ProdPickListLines('PickListLines')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Production picking list DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected DocXmlRecord addHeader(DocXmlRecordBuilder _recordBuilder, ProdPickListTmp _currentRecord)
    {
        // Add all fields that belong to the header only once.
        DocXmlRecord headerDataRecord = _recordBuilder.addRecord(_currentRecord);
        // Rename the record from 'ProdPickListTmp' to 'PickListHeader'.
        headerDataRecord.setRecordName(#ProdPickListHeader);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Pick list header'); // NOTE: use literalStr("@LabelID") instead.
        // Add the 'Header fields'.
        headerDataRecord.addFieldGroup(tableFieldGroupStr(ProdPickListTmp, HeaderFields_DR));

        // Add Extension fields defined on ProdPickListTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentRecord, headerDataRecord, true, extensionFieldsMetadata_ProdPickListTmp);

        return headerDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    protected void addLine(DocXmlRecord _addingRecord, ProdPickListTmp _currentRecord)
    {
        // Rename the record from 'ProdPickListTmp' to 'PickListLines'.
        _addingRecord.setRecordName(#ProdPickListLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Pick list lines'); // NOTE: use literalStr("@LabelID") instead.

        // Add 'Line fields'.
        _addingRecord.addFieldGroup(tableFieldGroupStr(ProdPickListTmp, LineFields_DR));

        // Add Extension fields defined on ProdPickListTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentRecord, _addingRecord, true, extensionFieldsMetadata_ProdPickListTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        // Standard mechanism is replaced by custom DDSP generation
        //super(_recordBuilder);    // skip standard code and fill the datasource from scratch

        SrsReportPreProcessedDetails srsReportPreProcessedDetails;

        DocXmlRecord headerDataRecord;
        DocXmlRecord lineDataRecord;

        ProdPicklistDP   rdp = this.getSrsRdpClassRunningInstance();
        ProdPickListTmp  prodPickListTmp = rdp.getProdPicklistTmp();

        str prodId = '';
        str itemId = '';
        str pickListJournalId = '';
        while select prodPickListTmp 
            order by prodPickListTmp.ProdId, prodPickListTmp.ItemId, prodPickListTmp.PickListJournalId, prodPickListTmp.InventSiteId, prodPickListTmp.InventLocationId
            exists join srsReportPreProcessedDetails
                where srsReportPreProcessedDetails.RecId == this.getPreProcessedId()
                   && srsReportPreProcessedDetails.CreatedTransactionId == prodPickListTmp.CreatedTransactionId
        {
            // Add header - key is ProdId + ItemId + PickListJournalId
            if (prodId != prodPickListTmp.ProdId || itemId != prodPickListTmp.ItemId || pickListJournalId != prodPickListTmp.PickListJournalId)
            {
                // Fill buffer for placeholders
                if (!prodId && !itemId && !pickListJournalId)
                {
                    buf2Buf(prodPickListTmp, headerTableBuffer);
                }
                else
                {
                    multipleProdPickLists = true;
                }

                prodId = prodPickListTmp.ProdId;
                itemId = prodPickListTmp.ItemId;
                pickListJournalId = prodPickListTmp.PickListJournalId;

                headerDataRecord = this.addHeader(_recordBuilder, prodPickListTmp);
            }

            // Add lines
            lineDataRecord = headerDataRecord.addChildRecord(prodPickListTmp);
            this.addLine(lineDataRecord, prodPickListTmp);

            _recordBuilder.goToTopRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.ProdId('ProdId')
    #define.ItemId('ItemId')
    #define.ItemName('ItemName')
    #define.PickListJournalId('PickListJournalId')
    #define.InventRefType('InventRefType')
    #define.InventRefId('InventRefId')
    #define.DlvDate('DlvDate')
    #define.SchedStart('SchedStart')
    #define.SchedEnd('SchedEnd')
    #define.VendorName('VendorName')
    #define.VendorAddress('VendorAddress')
    #define.PurchOrderId('PurchOrderId')
    #define.ProdJournalId('ProdJournalId')

    [DocPlaceholderAttribute(#ProdId, 'RC - Prod ID'),
     DocPlaceholderAttribute(#ItemId, 'RC - Item ID'),
     DocPlaceholderAttribute(#ItemName, 'RC - Item Name'),
     DocPlaceholderAttribute(#PickListJournalId, 'RC - Picking List Journal ID'),
     DocPlaceholderAttribute(#InventRefType, 'RC - Reference Type'),
     DocPlaceholderAttribute(#InventRefId, 'RC - Refrence ID'),
     DocPlaceholderAttribute(#DlvDate, 'RC - Delivery Date'),
     DocPlaceholderAttribute(#SchedStart, 'RC - Scheduled Start'),
     DocPlaceholderAttribute(#SchedEnd, 'RC - Scheduled End'),
     DocPlaceholderAttribute(#VendorName, 'RC - Vendor Name'),
     DocPlaceholderAttribute(#VendorAddress, 'RC - Vendor Address'),
     DocPlaceholderAttribute(#PurchOrderId, 'RC - Purch Order ID'),
     DocPlaceholderAttribute(#ProdJournalId, 'RC - Production Journal ID')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ProdId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProdId, multipleProdPickLists ? DocConstantDSP::MULTIPLE : headerTableBuffer.ProdId);
        
        // -- Placeholder @ItemId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemId, multipleProdPickLists ? DocConstantDSP::MULTIPLE : headerTableBuffer.ItemId);

        // -- Placeholder @ItemName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemName, multipleProdPickLists ? DocConstantDSP::MULTIPLE : headerTableBuffer.Name);

        // -- Placeholder @PickListJournalId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PickListJournalId, multipleProdPickLists ? DocConstantDSP::MULTIPLE : headerTableBuffer.PickListJournalId);

        // -- Placeholder @InventRefType@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventRefType, multipleProdPickLists ? DocConstantDSP::MULTIPLE : enum2Str(headerTableBuffer.InventRefType));

        // -- Placeholder @DlvDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DlvDate, multipleProdPickLists ? dateNull() : headerTableBuffer.DlvDate);

        // -- Placeholder @SchedStart@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SchedStart, multipleProdPickLists ? dateNull() : headerTableBuffer.SchedStart);

        // -- Placeholder @SchedEnd@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SchedEnd, multipleProdPickLists ? dateNull() : headerTableBuffer.SchedEnd);

        // -- Placeholder @VendorName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendorName, multipleProdPickLists ? DocConstantDSP::MULTIPLE : headerTableBuffer.VendorName);

        // -- Placeholder @VendorAddress@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendorAddress, multipleProdPickLists ? DocConstantDSP::MULTIPLE : headerTableBuffer.VendorAddress);

        // -- Placeholder @PurchOrderId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PurchOrderId, multipleProdPickLists ? DocConstantDSP::MULTIPLE : headerTableBuffer.PurchOrderId);

        // -- Placeholder @ProdJournalId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProdJournalId, multipleProdPickLists ? DocConstantDSP::MULTIPLE : headerTableBuffer.ProdJournalId);

        // Fill the Print archive contract.
        if (multipleProdPickLists)
        {
            _reportRunContext.archiveContract().setProdId('');
        }
        else
        {
            _reportRunContext.archiveContract().setProdId(headerTableBuffer.ProdId);
            _reportRunContext.archiveContract().setDocument(headerTableBuffer.ProdId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>