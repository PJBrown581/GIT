<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocBankPaymAdviceVendV2DSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocBankPaymAdviceVendV2DSP extends DocDataSourceProviderSrsReporting
{
    BankPaymAdviceVendV2Tmp  headerTableBuffer;
    DocTableFieldsMetadata   extensionFieldsMetadata_BankPaymAdviceVendV2Tmp = DocTableFieldsMetadata::construct(tableStr(BankPaymAdviceVendV2Tmp));

    /* Variables for custom placeholders */
    str         vendAccount;
    str         ledgerJournalId;
    str         placeholder_vendName;
    date        placeholder_paymAdviceDate;
    str         placeholder_paymRef;
    str         placeholder_paymRefName;
    str         printId;
    

    #define.BankPaymAdviceHeader('BankPaymAdviceHeader')
    #define.BankPaymAdviceLines('BankPaymAdviceLines')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Company information.
        _labelMap.insert(literalStr("@SYS5231"), 'Giro');
        _labelMap.insert(literalStr("@SYS26946"), 'VAT');

        // Document title.
        _labelMap.insert(literalStr("@SYS55191"), 'Payment advice');

        // Pagination.
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');

        // Document header.
        _labelMap.insert(literalStr("@SYS22514"), 'Payment reference'); // Conditionally used as label for PaymRefLabel field.

        // Document lines.
        _labelMap.insert(literalStr("@SYS12128"), 'Invoice'); // Actual label bound to the Invoice field.
        _labelMap.insert(literalStr("@SYS14204"), 'Invoice'); // Used as label for header of Invoice field.
        _labelMap.insert(literalStr("@SYS7354"), 'Invoice date');
        _labelMap.insert(literalStr("@SYS9458"), 'Invoice amount');
        _labelMap.insert(literalStr("@SYS66021"), 'Invoice currency');
        _labelMap.insert(literalStr("@SYS114292"), 'Payment date');
        _labelMap.insert(literalStr("@SYS4376"), 'Cash discount');
        _labelMap.insert(literalStr("@SYS81689"), 'Withholding tax amount');
        _labelMap.insert(literalStr("@SYS1943"), 'Payment amount');
        _labelMap.insert(literalStr("@SYS66023"), 'Payment currency');
        _labelMap.insert(literalStr("@SYS58659"), 'Total');
        _labelMap.insert(literalStr("@SYS300117"), 'There is no data available.'); // Conditionally printed if no lines exist.
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Payment advice V2 DSP - Vendor';
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        BankPaymAdviceVendV2Tmp currentRecord;

        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(BankPaymAdviceVendV2Tmp))
        {
            currentRecord = _rdpTableRecord;

            if (headerTableBuffer.RecId == 0)
            {
                // Copy all fields from the first selected record since the majority of them
                // belong to the report header. We will add them as a separate node in the
                // generateXmlDataSource method.
                buf2Buf(currentRecord, headerTableBuffer);
                headerTableBuffer.RecId = currentRecord.RecId;

                // Store custom placeholders' values.
                placeholder_vendName = headerTableBuffer.VendName;
                placeholder_paymAdviceDate = headerTableBuffer.PaymAdviceDate;
                placeholder_paymRef = headerTableBuffer.PaymentReference;
                placeholder_paymRefName = headerTableBuffer.PaymRefLabel;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(BankPaymAdviceVendV2Tmp))
        {
            BankPaymAdviceVendV2Tmp bankPaymAdviceVendV2Tmp = _rdpTableRecord;
            // Rename the record from 'BankPaymAdviceVendV2Tmp' to 'BankPaymAdviceLines'.
            _addingRecord.setRecordName(#BankPaymAdviceLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Bank payment advice lines'); // NOTE: use literalStr("@LabelID") instead.
            
            // Add 'Line fields'.
            _addingRecord.addFieldGroup(tableFieldGroupStr(BankPaymAdviceVendV2Tmp, LineFields_DR));
        
            // Add Extension fields defined on BankPaymAdviceVendV2Tmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(bankPaymAdviceVendV2Tmp, _addingRecord, true, extensionFieldsMetadata_BankPaymAdviceVendV2Tmp);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord headerDataRecord;

        void addHeaderFields()
        {
            // We will skip adding the company related fields since we already have them
            // in the GeneralData data section at our disposal.
            //headerDataRecord.addField(fieldStr(BankPaymAdviceVendV2Tmp, CompanyPhone));
            //headerDataRecord.addField(fieldStr(BankPaymAdviceVendV2Tmp, CompanyAddress));
            //headerDataRecord.addField(fieldStr(BankPaymAdviceVendV2Tmp, CompanyTeleFax));
            //headerDataRecord.addField(fieldStr(BankPaymAdviceVendV2Tmp, CompanyGiro));
            //headerDataRecord.addField(fieldStr(BankPaymAdviceVendV2Tmp, CompanyCoRegNum));
            //headerDataRecord.addField(fieldStr(BankPaymAdviceVendV2Tmp, Image));

            headerDataRecord.addFieldGroup(tableFieldGroupStr(BankPaymAdviceVendV2Tmp, HeaderFields_DR));
        }


        // 1. Add data records with fields representing the lines.
        super(_recordBuilder);

        
        // 2. Add all fields that belong to the header only once.
        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer).setSingleRecord(true);
        // Rename the record from 'BankPaymAdviceVendV2Tmp' to 'BankPaymAdviceHeader'.
        headerDataRecord.setRecordName(#BankPaymAdviceHeader);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Bank payment advice header'); // NOTE: use literalStr("@LabelID") instead.
        // Add all 'header' fields.
        addHeaderFields();


        // TODO: Add here all your custom (extension) 'header' fields from the BankPaymAdviceVendV2Tmp table, if any.
        // For example:
        //headerDataRecord.addField(fieldStr(BankPaymAdviceVendV2Tmp, YourCustomFieldName));

        // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
        // by using the related data to the headerTableBuffer (BankPaymAdviceVendV2Tmp) or vendAccount.
        var rdpContract = this.getSrsRdpContract();
        vendAccount = rdpContract.parmAccountNum();
        headerDataRecord.addCalculatedField('VendAccount', vendAccount);

        ledgerJournalId = LedgerJournalTrans::findRecId(rdpContract.parmLedgerJournalTransRecId(), false).JournalNum;
        headerDataRecord.addCalculatedField('LedgerJournalId', ledgerJournalId);

        // Add Custom Fields defined on VendTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(VendTable::find(vendAccount), headerDataRecord);

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.VendAccount('VendAccount')
    #define.VendName('VendName')
    #define.PaymAdviceDate('PaymAdviceDate')
    #define.PaymRef('PaymRef')
    #define.PaymRefName('PaymRefName')
    #define.PrintId('PrintId')

    [DocPlaceholderAttribute(#VendAccount, 'BPA - Vendor Account'),
     DocPlaceholderAttribute(#VendName, 'BPA - Vendor Name'),
     DocPlaceholderAttribute(#PaymAdviceDate, 'BPA - Payment Advice Date'),
     DocPlaceholderAttribute(#PaymRef, 'BPA - Payment Reference'),
     DocPlaceholderAttribute(#PaymRefName, 'BPA - Payment Reference Name'),
     DocPlaceholderAttribute(#PrintId, 'BPA - Print ID')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @VendAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendAccount, vendAccount);

        // -- Placeholder @VendName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendName, placeholder_vendName);

        // -- Placeholder @PaymAdviceDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymAdviceDate, placeholder_paymAdviceDate);

        // -- Placeholder @PaymRef@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymRef, placeholder_paymRef);

        // -- Placeholder @PaymRefName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymRefName, placeholder_paymRefName);

        // -- Placeholder @PrintId@
        printId = BankPaymAdviceVendControllerV2_DR::getStoredPrintId_DR();
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PrintId, printId);
        
        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setVendAccount(vendAccount);
        str documentId = placeholder_paymRefName && placeholder_paymRef ? strFmt('%1 %2', placeholder_paymRefName, placeholder_paymRef) : placeholder_paymRef;
        _reportRunContext.archiveContract().setDocument(documentId, placeholder_paymAdviceDate);
        if (ledgerJournalId != '')
        {
            _reportRunContext.archiveContract().setSourceTableId(ledgerJournalId, DocSourceTableType::LedgerJournalTable);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>