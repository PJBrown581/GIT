<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendOutPaym_DR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(CustVendOutPaym))]
final class CustVendOutPaym_DR_Extension
{
    #define.Cheque('Cheque')
    #define.Cheque_StoredPD('Cheque_StoredPD')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPrinterSettings</Name>
				<Source><![CDATA[
    public container getPrinterSettings(PaymDocumentType _documentType)
    {
        CustVendPaymPrinterSettings custVendPaymPrinterSettings = this.custVendPaymPrinterSettings;

        if (_documentType == PaymDocumentType::Document)  // the Cheque report
        {
            BankChequeLayout bankChequeLayout = BankChequeLayout::find(accountID);
            DocReportSRSName srsReportName = ChequeController::getSrsReportNameByChequeFormType_DR(bankChequeLayout.ChequeFormType);
            if (srsReportName)
            {
                custVendPaymPrinterSettings.parmReportDesignName_DR(srsReportName);
                custVendPaymPrinterSettings.parmReportCaption_DR(#Cheque);
            }
            else
            {
                custVendPaymPrinterSettings.parmReportDesignName_DR('');
                custVendPaymPrinterSettings.parmReportCaption_DR('');
            }
        }
        else if (_documentType == PaymDocumentType::PaymAdvice)
        {
            if (this is CustOutPaym)
            {
                if (DocConstantFeature::isFeatureEnabled_BankPaymAdviceReportV2())
                {
                    custVendPaymPrinterSettings.parmReportDesignName_DR(ssrsReportStr(BankPaymAdviceCustV2, Report));
                }
                else
                {
                    custVendPaymPrinterSettings.parmReportDesignName_DR(ssrsReportStr(BankPaymAdviceCust, Report));
                }
                custVendPaymPrinterSettings.parmReportCaption_DR('Payment advice');
            }
            else if (this is VendOutPaym)
            {
                if (DocConstantFeature::isFeatureEnabled_BankPaymAdviceReportV2())
                {
                    custVendPaymPrinterSettings.parmReportDesignName_DR(ssrsReportStr(BankPaymAdviceVendV2, Report));
                }
                else
                {
                    custVendPaymPrinterSettings.parmReportDesignName_DR(ssrsReportStr(BankPaymAdviceVend, Report));
                }
                custVendPaymPrinterSettings.parmReportCaption_DR('Payment advice');
            }
            else
            {
                custVendPaymPrinterSettings.parmReportDesignName_DR('');
                custVendPaymPrinterSettings.parmReportCaption_DR('');
            }
        }
        else if (_documentType == PaymDocumentType::ControlReport)
        {
            if (this is CustOutPaym)
            {
                custVendPaymPrinterSettings.parmReportDesignName_DR(ssrsReportStr(CustOutPaymControl, Report));
                custVendPaymPrinterSettings.parmReportCaption_DR('Control report');
            }
            else if (this is VendOutPaym)
            {
                custVendPaymPrinterSettings.parmReportDesignName_DR(ssrsReportStr(VendOutPaymControl, Report));
                custVendPaymPrinterSettings.parmReportCaption_DR('Control report');
            }
            else
            {
                custVendPaymPrinterSettings.parmReportDesignName_DR('');
                custVendPaymPrinterSettings.parmReportCaption_DR('');
            }
        }
        else
        {
            custVendPaymPrinterSettings.parmReportDesignName_DR('');
            custVendPaymPrinterSettings.parmReportCaption_DR('');
        }

        container srsPrintDestinationSettingsPacked = next getPrinterSettings(_documentType);

        // Store the selected print destination when Generate payments for Cheques.
        // This is a workaround for the method VendOutPaym_Cheque.callPrinterSettings(),
        // where the selected print destination is always set to SSRS Printer.
        if (custVendPaymPrinterSettings.parmReportCaption_DR() == #Cheque)
        {
            SRSPrintDestinationSettings pds = new SRSPrintDestinationSettings(srsPrintDestinationSettingsPacked);
            pds.parmSrsPrintReportSettings_DC().parmCustomSettings([#Cheque_StoredPD, pds.printMediumType()]);
            srsPrintDestinationSettingsPacked = pds.pack();
        }

        return srsPrintDestinationSettingsPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SRSPrintDestinationSettingsDelegates_showSettingsDialog_DC</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(SRSPrintDestinationSettingsDelegates), delegateStr(SRSPrintDestinationSettingsDelegates, showSettingsDialog))]
    public static void SRSPrintDestinationSettingsDelegates_showSettingsDialog_DC(SRSPrintDestinationSettings settings, EventHandlerResult result)
    {
        // This is a workaround for Cheques when Generate payments is performed, when we stored
        // the selected print destination in the CustVendOutPaym_DR_Extension.getPrinterSettings().
        if (settings.parmTmpPrintDestSettings_DC().parmReportCaption() != #Cheque)
        {
            return;
        }

        SRSPrintMediumType selectedPrintDest;
        str Cheque_StoredPD;
        [Cheque_StoredPD, selectedPrintDest] = settings.parmSrsPrintReportSettings_DC().parmCustomSettings();
        if (Cheque_StoredPD != #Cheque_StoredPD)
        {
            return;
        }

        // Restore previously selected print destination.
        settings.printMediumType(selectedPrintDest);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>