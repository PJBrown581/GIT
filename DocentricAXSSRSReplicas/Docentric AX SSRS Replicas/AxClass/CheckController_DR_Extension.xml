<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CheckController_DR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ChequeController))]
final class CheckController_DR_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFieldValue_destination_DR</Name>
				<Source><![CDATA[
    public SRSPrintDestinationSettings getFieldValue_destination_DR()
    {
        return this.printDestinationSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /*** Compilable only for Platform9 and up. ***/
    protected void preRunModifyContract()
    {
        ChequeController checkController = this as ChequeController;
        
        SRSPrintDestinationSettings pds = checkController.getFieldValue_destination_DR();
        SRSPrintMediumType selectedPrintDestBeforeChange;
        if (pds != null)
        {
            selectedPrintDestBeforeChange = pds.printMediumType();
        }


        // Execute the built-in ChequeController.preRunModifyContract() method.
        next preRunModifyContract();

            
        SrsReportDataContract reportContract = this.parmReportRun().parmReportContract();
        pds = reportContract.parmPrintSettings();
        if (pds == null)
        {
            pds = new SRSPrintDestinationSettings();
            reportContract.parmPrintSettings(pds);
        }


        /****** Specific for Checks - BEGIN ******/
        if (DocSrsReportRunUtil::isDocentricPrintDestination(selectedPrintDestBeforeChange))
        {
            pds.printMediumType(selectedPrintDestBeforeChange);
        }
        else if (selectedPrintDestBeforeChange == SRSPrintMediumType::Screen)
        {
            if (DocSrsReportRunUtil::useDocentricPreview(reportContract))
            {
                pds.printMediumType(SRSPrintMediumType::Screen_DC);
                pds.parmSrsPrintReportSettings_DC().parmTemplateId('');
                pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(pds.parmPrintToArchive());
            }
            else if (DocSrsReportRunUtil::useOnlyDocentricPreviewer(reportContract))
            {
                pds.printMediumType(SRSPrintMediumType::Screen_DC);
                pds.parmSrsPrintReportSettings_DC().parmTemplateId(DocConstant::BuiltInSsrsDesignPlaceholder);
                pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(pds.parmPrintToArchive());
            }
        }
        /****** Specific for Checks - END ******/


        // Change the print destination from Screen to Screen_DC if needed.
        if (pds.printMediumType() == SRSPrintMediumType::Screen)
        {
            if (DocSrsReportRunUtil::useDocentricPreview(reportContract))
            {
                pds.printMediumType(SRSPrintMediumType::Screen_DC);
                pds.parmSrsPrintReportSettings_DC().parmTemplateId('');
                pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(pds.parmPrintToArchive());
            }
            else if (DocSrsReportRunUtil::useOnlyDocentricPreviewer(reportContract))
            {
                pds.printMediumType(SRSPrintMediumType::Screen_DC);
                pds.parmSrsPrintReportSettings_DC().parmTemplateId(DocConstant::BuiltInSsrsDesignPlaceholder);
                pds.parmSrsPrintReportSettings_DC().parmSaveToArchive(pds.parmPrintToArchive());
            }
        }

        // Turn off the PrintToArchive flag, if this is a Docentric print destination.
        if (DocSrsReportRunUtil::isDocentricPrintDestination(pds.printMediumType()))
        {
            pds.parmPrintToArchive(false);
        }
                
        // Store the report execution context record.
        if (this.parmArgs() && this.parmArgs().record())
        {
            pds.parmSrsPrintReportSettings_DC().setReportExecutionContextRecord(this.parmArgs().record());
        }
        // Store the report menu item name.
        if (this.parmArgs() && this.parmArgs().menuItemName())
        {
            pds.parmSrsPrintReportSettings_DC().parmReportMenuItemName(this.parmArgs().menuItemName());
            pds.parmSrsPrintReportSettings_DC().parmReportMenuItemType(this.parmArgs().menuItemType());
        }
        
        if (this.isInBatch_DC())
        {
            // Store BatchJobID into the report print destination settings to be used later in the DocPlaceholderManager class.
            Batch currentBatchTask = DocGlobalHelper::getCurrentBatchTask();
            pds.parmSrsPrintReportSettings_DC().parmBatchId(currentBatchTask.RecId); // RecId of the Batch table
            pds.parmSrsPrintReportSettings_DC().parmBatchJobId(currentBatchTask.BatchJobId); // RecId of the BatchJob table
            
            // Change Screen_DC -> Archive_DC in case that the report is running in batch.
            if (pds.printMediumType() == SRSPrintMediumType::Screen_DC)
            {
                pds.printMediumType(SRSPrintMediumType::Archive_DC);
                DocGlobalHelper::handleWarning(strFmt("@DocentricAX:ChangedPrintDestinationFromScreenToArchive",
                reportContract.parmReportCaption() ? reportContract.parmReportCaption() : reportContract.parmReportName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSrsReportNameByChequeFormType_DR</Name>
				<Source><![CDATA[
    public static DocReportSRSName getSrsReportNameByChequeFormType_DR(ChequeFormType _chequeFormType)
    {
        switch (_chequeFormType)
        {
            case ChequeFormType::CAStyle:
                return ssrsReportStr(Cheque_CA, Report);

            case ChequeFormType::DEStyle:
                return ssrsReportStr(Cheque_DE, Report);

            case ChequeFormType::DKStyle:
                return ssrsReportStr(Cheque_DK, Report);

            case ChequeFormType::ESStyle:
                return ssrsReportStr(Cheque_ES, Report);

            case ChequeFormType::UKStyle:
                return ssrsReportStr(Cheque_UK, Report);

            case ChequeFormType::USStyle:
                return ssrsReportStr(Cheque_US, Report);

            case ChequeFormType::MXStyle:
                return ssrsReportStr(Cheque_US, Report);

            case ChequeFormType::BRStyle:
                return ssrsReportStr(Cheque_BR, Report);

            case ChequeFormType::FRStyle:
                return ssrsReportStr(Cheque_FR, Report);

            default:
                return '';
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>