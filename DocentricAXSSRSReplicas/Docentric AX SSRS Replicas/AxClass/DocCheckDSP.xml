<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocCheckDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocCheckDSP extends DocDataSourceProviderSrsReporting
{
    /* Variables used for custom placeholders */
    ChequeTmp       chequeTmp;
    BankChequeTable bankChequeTable;
    boolean         multipleCheques = false;
    AmountCur       placeholderAmountCur = 0;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_addingRecord, _rdpTableRecord, _rdpTableName);
        
        if (_rdpTableName == tableStr(ChequeTmp))
        {
            BankChequePaymTrans bankChequePaymTrans;
            ChequeTmp           origChequeTmp = chequeTmp.data();

            chequeTmp = _rdpTableRecord.data();            
            bankChequeTable = BankChequeTable::find(chequeTmp.AccountId, chequeTmp.ChequeNum);      // used for custom placeholders
            
            if (!bufCmp(chequeTmp, origChequeTmp))
            {
                multipleCheques = true;
            }

            placeholderAmountCur += origChequeTmp.AmountCur;

            int bankChequePaymTransCount = 0;

            // add invoices paid by check
            while select bankChequePaymTrans
                order by bankChequePaymTrans.RecId
                where bankChequePaymTrans.AccountId == chequeTmp.AccountId // BankChequeTable.AccountID
                    && bankChequePaymTrans.ChequeNum == chequeTmp.ChequeNum // BankChequeTable.ChequeNum
            {
                DocXmlRecord slipLineRecord = _addingRecord.addChildRecord(bankChequePaymTrans);
                
                // reverse the sign of amounts
                bankChequePaymTrans.InvoiceAmountCur = -bankChequePaymTrans.InvoiceAmountCur;
                bankChequePaymTrans.PaymentAmountCur = -bankChequePaymTrans.PaymentAmountCur;
                
                slipLineRecord.addAllFields();

                bankChequePaymTransCount++;
            }

            // In design time if no bankChequePaymTrans record exists, add one empty record for the sake of the schema and labels.
            if ((!this.isRuntime()) && (bankChequePaymTransCount == 0))
            {
                bankChequePaymTrans.clear();
                DocXmlRecord slipLineRecord = _addingRecord.addChildRecord(bankChequePaymTrans);
                slipLineRecord.addAllFields();
            }

            _addingRecord.addCalculatedField('BankChequePaymTransCount', bankChequePaymTransCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Check DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.BankAccountId('BankAccountId')
    #define.BankAccountNum('BankAccountNum')
    #define.ChequeNum('ChequeNum')
    #define.AmountCur('AmountCur')
    #define.Currency('Currency')
    #define.RecipientAccountNum('InvoiceAccountNum')
    #define.RecipientName('RecipientName')
    #define.ChequeDate('ChequeDate')
    #define.IsTestCheque('IsTestCheque')
    #define.IsVoidCheque('IsVoidCheque')

    [DocPlaceholderAttribute(#BankAccountId, 'CH - Bank account ID'),
     DocPlaceholderAttribute(#BankAccountNum, 'CH - Bank Account Number'),
     DocPlaceholderAttribute(#ChequeNum, 'CH - Check Number'),
     DocPlaceholderAttribute(#AmountCur, 'CH - Amount'),
     DocPlaceholderAttribute(#Currency, 'CH - Currency'),
     DocPlaceholderAttribute(#RecipientAccountNum, 'CH - Recipient Account Number'),
     DocPlaceholderAttribute(#RecipientName, 'CH - Recipient Name'),
     DocPlaceholderAttribute(#ChequeDate, 'CH - Check Date'),
     DocPlaceholderAttribute(#IsTestCheque, 'CH - Is Test Check'),
     DocPlaceholderAttribute(#IsVoidCheque, 'CH - Is Void Check')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
               
        // Replace custom placeholders:
        // -- Placeholder @BankAccountId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#BankAccountId, multipleCheques ? DocConstantDSP::MULTIPLE : chequeTmp.AccountId);
        
        // -- Placeholder @BankAccountNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#BankAccountNum, multipleCheques ? DocConstantDSP::MULTIPLE : chequeTmp.AccountNum);

        // -- Placeholder @ChequeNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ChequeNum, multipleCheques ? DocConstantDSP::MULTIPLE : chequeTmp.ChequeNum);

        // -- Placeholder @AmountCur@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#AmountCur, placeholderAmountCur);

        // -- Placeholder @Currency@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#Currency, multipleCheques ? DocConstantDSP::MULTIPLE : chequeTmp.CurrencyIndicator);

        // -- Placeholder @RecipientAccountNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RecipientAccountNum, multipleCheques ? DocConstantDSP::MULTIPLE : bankChequeTable.RecipientAccountNum);

        // -- Placeholder @RecipientName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RecipientName, multipleCheques ? DocConstantDSP::MULTIPLE : chequeTmp.RecipientName);

        // -- Placeholder @ChequeDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ChequeDate, multipleCheques ? dateNull() : chequeTmp.ChequeDate);
        
        // -- Placeholder @IsTestCheque@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#IsTestCheque, multipleCheques ? NoYes::No : chequeTmp.IsTestCheque);
        
        // -- Placeholder @IsVoidCheque@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#IsVoidCheque, multipleCheques ? NoYes::No : chequeTmp.Void);
        

        // Fill the Print archive contract.
        if (bankChequeTable.RecipientType == BankChequeRecipientType::Cust)
        {
            _reportRunContext.archiveContract().setCustAccount(bankChequeTable.RecipientAccountNum);
        }
        else if (bankChequeTable.RecipientType == BankChequeRecipientType::Vend)
        {
            _reportRunContext.archiveContract().setVendAccount(bankChequeTable.RecipientAccountNum);
        }
        /*else if (bankChequeTable.RecipientType == BankChequeRecipientType::Bank)
        {
            _reportRunContext.archiveContract().setBankAccount(bankChequeTable.RecipientAccountNum);
        }*/  // Not currently supported.

        _reportRunContext.archiveContract().setDocument(bankChequeTable.ChequeNum);


        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>