<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSalesQuotationConfirmationDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocSalesQuotationConfirmationDSP extends DocDataSourceProviderSrsReporting
{
    SalesQuotationConfirmationContract   reportContract;
    boolean                              transLineAdded, taxLineAdded;
    CustQuotationConfirmJour			 journal;
    RecId								 journalRecId;
    SalesQuotationTable                  salesQuotationTable;
    DocTableFieldsMetadata               extensionFieldsMetadata_SalesQuotationDetailsTmp = DocTableFieldsMetadata::construct(tableStr(SalesQuotationDetailsTmp));

    /* Variables for custom placeholders */
    str         placeholder_salesId;
    str         placeholder_custRef;
    str         placeholder_deliveryName;
    date        placeholder_quotationDate;
    str         placeholder_quotationDocNum;
    str         placeholder_quotationId;


    #define.SalesQuotationConfirmationHeader('SalesQuotationConfirmationHeader')
    #define.SalesQuotationConfirmationLines('SalesQuotationConfirmationLines')
    #define.TaxLines('TaxLines')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/ 
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.
        
        // Addressing information.
        _labelMap.insert(literalStr("@SYS344987"), 'Ship to:');

        // Company information.
        _labelMap.insert(literalStr("@SYS5231"), 'Giro');
        _labelMap.insert(literalStr("@SYS26946"), 'Tax exempt number');
        _labelMap.insert(literalStr("@SYS77429"), 'Enterprise number');

        // Pagination.
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');

        // Document header.
        _labelMap.insert(literalStr("@SYS13864"), 'Number');
        _labelMap.insert(literalStr("@SYS23989"), 'Requisition');
        _labelMap.insert(literalStr("@SYS12056"), 'Your ref.');
        _labelMap.insert(literalStr("@SYS8934"), 'Our ref.');

        // Document lines.
        _labelMap.insert(literalStr("@SYS6303"), 'Description');
        _labelMap.insert(literalStr("@SYS6928"), 'Amount');
        _labelMap.insert(literalStr("@SYS4000721"), 'Catch weight:');

        // Tax information.
        _labelMap.insert(literalStr("@SYS21950"), 'Amount origin');
        _labelMap.insert(literalStr("@SYS22916"), 'Sales tax');

        // Final cost calculation.
        _labelMap.insert(literalStr("@SYS13754"), 'Sales amount');
        _labelMap.insert(literalStr("@SYS8371"), 'Charges');
        _labelMap.insert(literalStr("@SYS5878"), 'Sales tax');
        _labelMap.insert(literalStr("@SYS9242"), 'Total');        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    protected void addDataFieldsForHeader(DocXmlRecord _addingRecord, SalesQuotationHeaderTmp _header)
    {
        void addHeaderFields()
        {
            // Add all fields except the company related fields since we already have them
            // in the GeneralData data section at our disposal.
            _addingRecord.addAllFieldsExcept([
                fieldStr(SalesQuotationHeaderTmp, CompanyName),
                fieldStr(SalesQuotationHeaderTmp, CompanyAddress),
                fieldStr(SalesQuotationHeaderTmp, CompanyPhone),
                fieldStr(SalesQuotationHeaderTmp, CompanyTeleFax),
                fieldStr(SalesQuotationHeaderTmp, CompanyGiro),
                fieldStr(SalesQuotationHeaderTmp, CompanyCoRegNum),
                fieldStr(SalesQuotationHeaderTmp, CompanyLogo),
                fieldStr(SalesQuotationHeaderTmp, CompanyEnterpriseNumber),
                fieldStr(SalesQuotationHeaderTmp, CompanyBankAccountName),
                fieldStr(SalesQuotationHeaderTmp, CompanyBankAccountNum),
                fieldStr(SalesQuotationHeaderTmp, CompanyCommercialRegister),
                fieldStr(SalesQuotationHeaderTmp, CompanyCommercialRegisterInsetNumber),
                fieldStr(SalesQuotationHeaderTmp, CompanyCommercialRegisterSection),
                fieldStr(SalesQuotationHeaderTmp, CompanyEmail),
                fieldStr(SalesQuotationHeaderTmp, CompanyRegNum)
            ]);
        }

        // Setting the flag needed for Docentric NextGen
        _addingRecord.setSingleRecord(true);

        // Rename the record from to 'SalesQuotationHeaderTmp'.
        _addingRecord.setRecordName(#SalesQuotationConfirmationHeader);
        // Change the label of the record if needed.
        //_addingRecord.setRecordLabel('Sales quote confirmation header'); // NOTE: Use literalStr("@LabelID") instead.

        // Add all fields from the SalesQuotationHeaderTmp table.
        addHeaderFields();

        // Add salas administrator name.
        _addingRecord.addCalculatedField('SalesAdministratorName', HcmWorker::findByPersonnelNumber(_header.SalesAdministrator).name());

        // Add Custom Fields defined on the SalesQuotationTable table, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(this.salesQuotationTable(), _addingRecord);
        // NOTE: You don't have to add all Custom Fields but only specific ones:
        //DocCustomFieldsHelper::addCustomFieldsToDataRecord(['CustomFieldName1', 'CustomFieldName2'], salesQuotationTable, _addingRecord);
        //DocCustomFieldsHelper::addCustomFieldToDataRecord('CustomFieldName', salesQuotationTable, _addingRecord);

        // TODO: Add here additional fields (or records) to the single header record by using the related
        // data to the _rdpTableRecord table buffer (SalesQuotationHeaderTmp) or reportContract.
        // For example, get the related CustQuotationConfirmJour record and add additional data you need:
        //CustQuotationConfirmJour custQuotationConfirmJour = this.custQuotationConfirmJour();
        //DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custQuotationConfirmJour);
        //jourDataRecord.addField(fieldStr(CustQuotationConfirmJour, DefaultDimension));
        //jourDataRecord.addDisplayMethod(tableMethodStr(CustQuotationConfirmJour, paymentCode));
        // Or, add the project name:
        //_addingRecord.addCalculatedField('ProjName', SalesTable::find(_header.SalesId).projTable().Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, SalesQuotationDetailsTmp _currentLine)
    {
        if (_currentLine.QuotationTransOrTaxTrans)
        {
            this.addDataFieldsForLine_Trans(_addingRecord, _currentLine);
            transLineAdded = true;
        }
        else
        {
            this.addDataFieldsForLine_Tax(_addingRecord, _currentLine);
            taxLineAdded = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Tax</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_Tax(DocXmlRecord _addingRecord, SalesQuotationDetailsTmp _currentLine)
    {
        // Rename the record from 'SalesQuotationDetailsTmp' to 'SalesConfirmTaxLines'.
        _addingRecord.setRecordName(#TaxLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Taxes'); // NOTE: use literalStr("@LabelID") instead.

        // Add all fields related to the tax lines.
        _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, TaxCode));
        _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, PrintCode));
        _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, TaxBaseAmount));
        _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, TaxBaseQty));
        _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, TaxAmount));
        _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, TaxAmountMST));
        _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, TaxExemptDescription));
        _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, TaxBaseAmountMST));

        //-- Redundant fields.
        //_addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, QuotationTransOrTaxTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Trans</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_Trans(DocXmlRecord _addingRecord, SalesQuotationDetailsTmp _currentLine)
    {
        void addLineFields()
        {
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, CurrencyCode));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, DiscAmount));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, DiscPercent));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, DlvDate));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, ExternalItemId));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, InventDimProduct));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, InventDimQtyPrint));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, ItemId));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, LineAmount));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, LineHeader));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, Name));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, Notes));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, ProjTransType));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, Qty));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, SalesPrice));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, SalesUnitTxt));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, PdsCWQty));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, PdsCWUnitId));
            _addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, PrintCode));

            //-- Redundant fields.
            //_addingRecord.addField(fieldStr(SalesQuotationDetailsTmp, QuotationTransOrTaxTrans));
        }
        

        // Rename the record from 'SalesQuotationDetailsTmp' to 'SalesQuotationConfirmationLines'.
        _addingRecord.setRecordName(#SalesQuotationConfirmationLines);
        // Change the label of the record.
        //_addingRecord.setRecordLabel('Sales quotation confirmation lines'); // NOTE: use literalStr("@LabelID") instead.

        // Add all fields from the SalesQuotationDetailsTmp table related to the transaction data.
        addLineFields();        

        // Add Extension fields defined on SalesQuotationDetailsTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentLine, _addingRecord, true, extensionFieldsMetadata_SalesQuotationDetailsTmp);

        // TODO: Add here additional fields from the related CustQuotationConfirmTrans table (or some other tables).
        //CustQuotationConfirmTrans custQuotationConfirmTrans = this.custQuotationConfirmTrans(_currentLine.CustQuotationConfirmTrans);
        //_addingRecord.addCalculatedField('LineNum', custQuotationConfirmTrans.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(SalesQuotationHeaderTmp))
        {
            this.addDataFieldsForHeader(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(SalesQuotationDetailsTmp))
        {
            this.addDataFieldsForLine(_addingRecord, _rdpTableRecord);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Sales quotation confirmation DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord                emptyLineDataRecord;
        SalesQuotationDetailsTmp    emptyLine;


        // Add the single data record representing the header and add multilpe records representing the lines.
        super(_recordBuilder);

        // If this is design time, add main or tax lines if they haven't been already added.
        _recordBuilder.goToTopRecord();
        if (!this.isRuntime())
        {
            emptyLine.clear();

            // Main lines.
            if (!transLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Trans(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }

            // TaxLines.
            if (!taxLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Tax(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }
        }

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();
        journalRecId = reportContract.parmRecordId();

        transLineAdded = false;
        taxLineAdded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custQuotationConfirmJour</Name>
				<Source><![CDATA[
    protected CustQuotationConfirmJour custQuotationConfirmJour()
    {
        if (!journal)
        {
            journal = CustQuotationConfirmJour::findRecId(journalRecId);
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custQuotationConfirmTrans</Name>
				<Source><![CDATA[
    protected CustQuotationConfirmTrans custQuotationConfirmTrans(RecId _custQuotationConfirmTransRecId)
    {
        CustQuotationConfirmTrans custQuotationConfirmTrans;

        custQuotationConfirmTrans = CustQuotationConfirmTrans::findRecId(_custQuotationConfirmTransRecId);

        return custQuotationConfirmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationTable</Name>
				<Source><![CDATA[
    protected SalesQuotationTable salesQuotationTable()
    {
        if (!salesQuotationTable)
        {
            salesQuotationTable = this.custQuotationConfirmJour().salesQuotationTable();
        }

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns SalesQuotationLine record related to the CustQuotationConfirmTrans record.
    /// </summary>
    /// <param name = "_custQuotationConfirmTrans">
    /// CustQuotationConfirmTrans record.
    /// </param>
    /// <returns>SalesQuotationLine</returns>
    protected SalesQuotationLine salesQuotationLine(CustQuotationConfirmTrans _custQuotationConfirmTrans)
    {
        return SalesQuotationLine::findInventTransId(_custQuotationConfirmTrans.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.QuotationDocNum('QuotationDocNum')
    #define.QuotationId('QuotationId')
    #define.SalesId('SalesId')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.CustRef('CustRef')
    #define.DeliveryName('DeliveryName')
    #define.QuotationDate('QuotationDate')

    [DocPlaceholderAttribute(#QuotationDocNum, 'SQC - Quotation Document Number'),
     DocPlaceholderAttribute(#QuotationId, 'SQC - Quotation ID'),
     DocPlaceholderAttribute(#SalesId, 'SQC - Sales ID'),
     DocPlaceholderAttribute(#CustAccount, 'SQC - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'SQC - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'SQC - Customer Contact Name'),
     DocPlaceholderAttribute(#CustRef, 'SQC - Customer Reference'),
     DocPlaceholderAttribute(#DeliveryName, 'SQC - Delivery Name'),
     DocPlaceholderAttribute(#QuotationDate, 'SQC - Quotation Date')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding salesQuotationTable. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(this.salesQuotationTable());

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @QuotationDocNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#QuotationDocNum, placeholder_quotationDocNum);

        // -- Placeholder @QuotationId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#QuotationId, placeholder_quotationId);
        
        // -- Placeholder @SalesId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesId, placeholder_salesId);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, this.salesQuotationTable().CustAccount);

        // -- Placeholder @CustRef@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustRef, placeholder_custRef);

        // -- Placeholder @DeliveryName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryName, placeholder_deliveryName);

        // -- Placeholder @QuotationDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#QuotationDate, placeholder_quotationDate);

        // -- Placeholder @CustName@
        DirPartyTable   partyTable;
        CustTable       custTable;
        select firstonly Name from partyTable exists join custTable
                where custTable.Party == partyTable.RecId && custTable.AccountNum == this.salesQuotationTable().CustAccount;
        str customerName = partyTable.Name;

        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, customerName);

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::contactPersonName(this.salesQuotationTable().ContactPersonId));


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(this.salesQuotationTable().CustAccount);
        _reportRunContext.archiveContract().setQuotationId(placeholder_quotationId);
        _reportRunContext.archiveContract().setDocument(placeholder_quotationDocNum, placeholder_quotationDate);
        _reportRunContext.archiveContract().setJournal(this.custQuotationConfirmJour().RecId, DocJournalType::CustQuotationConfirmJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(SalesQuotationHeaderTmp))
        {
            SalesQuotationHeaderTmp header = _rdpTableRecord;

            // Store custom placeholders' values.
            placeholder_salesId = header.SalesId;
            placeholder_custRef = header.CustomerRef;
            placeholder_deliveryName = header.DeliveryName;
            placeholder_quotationDate = header.QuotationDate;
            placeholder_quotationDocNum = header.QuotationDocNum;
            placeholder_quotationId = header.QuotationId;

            if (placeholder_quotationId == '')
            {
                placeholder_quotationId = this.salesQuotationTable().QuotationId;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>