<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPsaManageInvoiceGroupedDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocPsaManageInvoiceGroupedDSP class is a DSP class for the PsaManageInvoiceGrouped report.
/// </summary>
class DocPsaManageInvoiceGroupedDSP extends DocDataSourceProviderSrsProforma
{
    PSAManageInvoiceTmp                     headerTableBuffer;
    PSAProjInvoiceContract                  reportContract;
    LogisticsAddressCountryRegionISOCode    isoCountryCode;
    ProjProposalJour                        projProposalJour;


    /* Variables for custom placeholders */
    str      placeholder_invoiceNum;
    date     placeholder_invoiceDate;
    date     placeholder_invoiceDueDate;
    str      placeholder_projContract;
    str      placeholder_projId;
    str      placeholder_custAccount;
    str      placeholder_custName;
    str      placeholder_custContactName;
    str      placeholder_paymTerms;
    str      placeholder_projEmail;

    #ISOCountryRegionCodes

    #define.PSAMInvoiceHeader('PSAMInvoiceHeader')
    #define.PSAMInvoiceLines('PSAMInvoiceLines')
    #define.PSAMInvoiceGroups('PSAMInvoiceGroups')
    #define.LocalizationFields('LocalizationFields')
    #define.PSAMInvoiceTax('PSAMInvoiceTax')


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'User defined project invoice DSP - Grouped';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_ProjInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord                   headerDataRecord;
        SrsReportPreProcessedDetails   srsReportPreProcessedDetails;
        PSAManageInvoiceTmp            psaManageInvoiceTmp;


        void storePlaceholderValues()
        {
            // Store custom placeholders' values.
            placeholder_invoiceNum = headerTableBuffer.InvoiceNum;
            placeholder_invoiceDate = headerTableBuffer.InvoiceDate;
            placeholder_invoiceDueDate = headerTableBuffer.DueDate;
            placeholder_projContract = headerTableBuffer.ContractId;
            placeholder_custAccount = headerTableBuffer.CustAccountExt;
            placeholder_custName = headerTableBuffer.CustCompanyName;
            placeholder_paymTerms = headerTableBuffer.PaymTermId;   
            placeholder_projEmail = ProjTable::find(headerTableBuffer.ProjId).Email;

            // Store the custom ProjId placeholder value.
            ProjId projId;
            int projIdsCount = 0;
            while select ProjId from psaManageInvoiceTmp
                group by ProjId
                exists join CreatedTransactionId from srsReportPreProcessedDetails
                   where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                         psaManageInvoiceTmp.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId
            {
                projIdsCount++;
                projId = psaManageInvoiceTmp.ProjId;
            }
            if (projIdsCount == 1)
            {
                // fill it with the last retrieved ProjId
                placeholder_projId = projId;
            }
            else
            {
                placeholder_projId = '*';
            }
        }

        void addHeader()
        {
            // Select the first record in order to add the single 'header' data record.
            select firstonly headerTableBuffer
            exists join CreatedTransactionId from srsReportPreProcessedDetails
               where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                     headerTableBuffer.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId;

            // Add the header record.
            headerDataRecord = _recordBuilder.addRecord(headerTableBuffer).setSingleRecord(true);
            // Rename the record from 'PSAManageInvoiceTmp' to 'PSAMInvoiceHeader'.
            headerDataRecord.setRecordName(#PSAMInvoiceHeader);
            // Change the label of the record.
            headerDataRecord.setRecordLabel('Invoice header'); // NOTE: use literalStr("@LabelID") instead.
            // Add all 'header' fields.
            headerDataRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, HeaderFields_DR));
            // NOTE: We will skip adding the company related fields since we already have them
            // in the GeneralData data section at our disposal.
            // All ignored field are located in the IgnoredFields table field group.
         
            //-- Add Project email and Customer primary email.
            CustTable custTable = CustTable::find(headerTableBuffer.CustAccountExt);
            headerDataRecord.addCalculatedField('CustomerEmail', custTable.email());
            headerDataRecord.addCalculatedField('ProjectEmail', ProjTable::find(headerTableBuffer.ProjId).Email);

            //-- Add Custom Fields defined on CustTable, if any.
            // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable, headerDataRecord);


            // TODO: Add here all your custom (extension) 'header' fields from the PSAManageInvoiceTmp table, if any.
            // For example:
            //headerDataRecord.addField(fieldStr(PSAManageInvoiceTmp, YourCustomFieldName));

            // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
            // by using the related data to headerTableBuffer (PSAManageInvoiceTmp) or reportContract.
            // For example, get the related ProjInvoiceJour record and add additional data you need:
            //ProjInvoiceJour projInvoiceJour = this.projInvoiceJour();
            //DocXmlRecord jourDataRecord = headerDataRecord.addChildRecord(projInvoiceJour);
            //jourDataRecord.addField(fieldStr(ProjInvoiceJour, DefaultDimension));
            //jourDataRecord.addDisplayMethod(tableMethodStr(ProjInvoiceJour, paymentCondition));
            // Or, add the customer group name:
            //headerDataRecord.addCalculatedField('CustGroup', CustTable::find(headerTableBuffer.CustAccountExt).customerGroup());
        }

        void addSummaryGroup(DocXmlRecord _groupDataRecord, real _manageGroupingOrder)
        {
            PSAManageInvoiceTmp psaManageInvoiceTmpGroup;

            while select ProjType, ProjCategory, sum(Qty), sum(TotalAmount), avg(SalesPrice), // NOTE: SalesPrice can differ per item in the group
                         // We need the following fieds in the buffer, so we are using the maxof() function instead of first()
                         maxof(ProjId), maxof(ProjName), maxof(smaBasePrice), maxof(smaIndex),  // Other line fields.
                         maxof(LineTxt), maxof(InvoiceGrouping), maxof(ManageGroupingOrder)  // Control fields.
                         // NOTE: PackingSlip info and Localization fields are not supported in the summary group scenario.
                         from psaManageInvoiceTmpGroup
            group by ProjType, ProjCategory
                exists join CreatedTransactionId from srsReportPreProcessedDetails
                where psaManageInvoiceTmpGroup.ManageGroupingOrder == _manageGroupingOrder &&
                      srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                      psaManageInvoiceTmpGroup.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId
            {
                // Add the 'line' record.
                DocXmlRecord lineDataRecord = _groupDataRecord.addChildRecord(psaManageInvoiceTmpGroup);
                // Rename the record from 'PSAManageInvoiceTmp' to 'PSAMInvoiceLines'.
                lineDataRecord.setRecordName(#PSAMInvoiceLines);
                // Change the label of the record.
                lineDataRecord.setRecordLabel('Invoice lines'); // NOTE: use literalStr("@LabelID") instead.

                // Add 'Line fields'.
                lineDataRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, LineFields_DR));
                // Add 'Control fields' one more time, to make design process more easy.
                lineDataRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, ControlLineFields_DR));
         
                // Add 'Localization line fields' as an emtpy child record.
                DocXmlRecord childRecord = lineDataRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, LocalizationLineFields_DR));
                childRecord.setRecordName(#LocalizationFields);

                // Setting the flag needed for Docentric NextGen.
                childRecord.setSingleRecord(true);

                // TODO: Add here all your custom (extension) 'line' fields from the PSAManageInvoiceTmp table, if any.
                // For example:
                //lineDataRecord.addField(fieldStr(PSAManageInvoiceTmp, YourCustomFieldName));
                // NOTE: Be aware that this is the summary scenario, and that your fields has to be read from DB first
                // in the while select statement. Also see addDetailGroup() method for more info.
            }
        }

        void addDetailGroup(DocXmlRecord _groupDataRecord, real _manageGroupingOrder)
        {
            PSAManageInvoiceTmp psaManageInvoiceTmpGroup;

            while select psaManageInvoiceTmpGroup
                exists join CreatedTransactionId from srsReportPreProcessedDetails
                where psaManageInvoiceTmpGroup.ManageGroupingOrder == _manageGroupingOrder &&
                      srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                      psaManageInvoiceTmpGroup.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId
            {
                // Add the 'line' record.
                DocXmlRecord lineDataRecord = _groupDataRecord.addChildRecord(psaManageInvoiceTmpGroup);
                // Rename the record from 'PSAManageInvoiceTmp' to 'PSAMInvoiceLines'.
                lineDataRecord.setRecordName(#PSAMInvoiceLines);
                // Change the label of the record.
                lineDataRecord.setRecordLabel('Invoice lines'); // NOTE: use literalStr("@LabelID") instead.

                // Add 'Line fields'.
                lineDataRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, LineFields_DR));
                // Add 'Control fields' one more time, to make design process more easy.
                lineDataRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, ControlLineFields_DR));
         
                // Add 'Localization line fields' as a child record.
                DocXmlRecord childRecord = lineDataRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, LocalizationLineFields_DR));
                childRecord.setRecordName(#LocalizationFields);


                // TODO: Add here all your custom (extension) 'line' fields from the PSAManageInvoiceTmp table, if any.
                // For example:
                //_addingRecord.addField(fieldStr(PSAManageInvoiceTmp, YourCustomFieldName));

                // TODO: Add here additional fields from the related ProjInvoiceEmpl, ProjInvoiceCost, ProjInvoiceItem,
                // ProjInvoiceOnAcc or ProjInvoiceRevenue table (or some other tables).
                // Use 'keys' fields: psaManageInvoiceTmpGroup.SourceTableId_DR and psaManageInvoiceTmpGroup.SourceRecId_DR.
                // For example:
                //if (psaManageInvoiceTmpGroup.SourceTableId_DR == tableNum(ProjInvoiceEmpl))
                //{
                //    ProjInvoiceEmpl projInvoiceEmpl = this.projInvoiceEmpl(psaManageInvoiceTmpGroup.SourceRecId_DR);
                //    lineDataRecord.addCalculatedField('Activity', projInvoiceEmpl.ActivityNumber);
                //    lineDataRecord.addCalculatedFieldFromEdt('DefaultDimension', extendedTypeStr(DimensionDefault), projInvoiceEmpl.DefaultDimension);
                //}
            }
        }

        void addTaxDataRecord(PSAProjInvoiceTaxTmp _psaProjInvoiceTaxTmp)
        {
            // Add the header record.
            DocXmlRecord taxDataRecord = _recordBuilder.addRecord(_psaProjInvoiceTaxTmp);
            // Rename the record from 'PSAProjInvoiceTaxTmp' to 'PSAMInvoiceTax'.
            taxDataRecord.setRecordName(#PSAMInvoiceTax);
            // Change the label of the record.
            taxDataRecord.setRecordLabel('Invoice tax'); // NOTE: use literalStr("@LabelID") instead.
            // Add all fields.
            taxDataRecord.addAllFields();
        }

        void addTax()
        {
            PSAProjInvoiceTaxTmp psaProjInvoiceTaxTmp;

            boolean taxAdded = false;
            while select psaProjInvoiceTaxTmp
            exists join CreatedTransactionId from srsReportPreProcessedDetails
               where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                     psaProjInvoiceTaxTmp.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId
            {
                addTaxDataRecord(psaProjInvoiceTaxTmp);
                taxAdded = true;
            }

            if (!this.isRuntime() && !taxAdded)
            {
                addTaxDataRecord(psaProjInvoiceTaxTmp);
            }
        }


        // We will skip the standard way of building DDSP.
        // super(_recordBuilder);

        // Add the header data record.
        addHeader();

        // Store the custom placeholder values.
        storePlaceholderValues();


        // Group all lines by the LineTxt field and add each group as a new data record.
        // For each group add all lines that belong to this group, and group them if the InvoiceGrouping field is set to Summary.
        while select LineTxt, InvoiceGrouping, ManageGroupingOrder from psaManageInvoiceTmp
        group by LineTxt, InvoiceGrouping, ManageGroupingOrder
            exists join CreatedTransactionId from srsReportPreProcessedDetails
               where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                     psaManageInvoiceTmp.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId
        {
            // Create group data records on the same level as the header data record.
            _recordBuilder.goToParentRecord();

            // Add the 'group' record.
            DocXmlRecord groupDataRecord = _recordBuilder.addRecord(psaManageInvoiceTmp);
            // Rename the record from 'PSAManageInvoiceTmp' to 'PSAMInvoiceGroups'.
            groupDataRecord.setRecordName(#PSAMInvoiceGroups);
            // Change the label of the record.
            groupDataRecord.setRecordLabel('Invoice groups'); // NOTE: use literalStr("@LabelID") instead.
            // Add all 'group' fields, i.e. 'Control line fields'.
            groupDataRecord.addFieldGroup(tableFieldGroupStr(PSAManageInvoiceTmp, ControlLineFields_DR));

            // Add a summary or a detail group.
            if (psaManageInvoiceTmp.InvoiceGrouping == PSAProjInvoiceDetailGrouping::Summary)
            {
                addSummaryGroup(groupDataRecord, psaManageInvoiceTmp.ManageGroupingOrder);
            }
            else
            {
                addDetailGroup(groupDataRecord, psaManageInvoiceTmp.ManageGroupingOrder);
            }
        }
 
        // Add the tax table to the report data source.
        _recordBuilder.goToParentRecord();
        addTax();

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipRdpTableRecord</Name>
				<Source><![CDATA[
    protected boolean skipRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        // Skip each record from the ProjInvoiceLocalizationTmp table if isoCountryCode
        // is not one of the listed countries below.
        // This means that for other than these countries, the ProjInvoiceLocalizationTmp table
        // will not be presented in the report data source.
        if (tableStr(ProjInvoiceLocalizationTmp) == _rdpTableName)
        {
            switch (isoCountryCode)
            {
                case #isoLT, #isoHU, #isoCZ, #isoPL:
                    return false;

                default:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();

        isoCountryCode = SysCountryRegionCode::countryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InvoiceNum('InvoiceNum')
    #define.InvoiceDate('InvoiceDate')
    #define.InvoiceDueDate('InvoiceDueDate')
    #define.ProjContract('ProjContract')
    #define.ProjId('ProjId')
    #define.PaymentTerms('PaymentTerms')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.ProjEmail('ProjEmail')

    [DocPlaceholderAttribute(#InvoiceNum, 'PMI - Invoice Number'),
     DocPlaceholderAttribute(#InvoiceDate, 'PMI - Invoice Date'),
     DocPlaceholderAttribute(#InvoiceDueDate, 'PMI - Invoice Due Date'),
     DocPlaceholderAttribute(#ProjContract, 'PMI - Project Contract ID'),
     DocPlaceholderAttribute(#ProjId, 'PI - Project ID'),
     DocPlaceholderAttribute(#PaymentTerms, 'PMI - Terms of Payment'),
     DocPlaceholderAttribute(#CustAccount, 'PMI - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'PMI - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'PMI - Customer Contact Name'),
     DocPlaceholderAttribute(#ProjEmail, 'PMI - Project Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding projProposalJour. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(this.projProposalJour());

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InvoiceNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceNum, placeholder_invoiceNum);

        // -- Placeholder @InvoiceDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDate, placeholder_invoiceDate);

        // -- Placeholder @InvoiceDueDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDueDate, placeholder_invoiceDueDate);

        // -- Placeholder @ProjContract@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjContract, placeholder_projContract);

        // -- Placeholder @ProjId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjId, placeholder_projId);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_custAccount);

        // -- Placeholder @ProjEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjEmail, placeholder_projEmail);

        // -- Placeholder @PaymentTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentTerms, placeholder_paymTerms);

        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, placeholder_custName);

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::custContactPersonName(placeholder_custAccount));


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_custAccount);
        _reportRunContext.archiveContract().setProjInvoiceProjId(placeholder_projContract);
        _reportRunContext.archiveContract().setDocument(placeholder_invoiceNum, placeholder_invoiceDate);
        _reportRunContext.archiveContract().setJournal(this.projInvoiceJour().RecId, DocJournalType::ProjInvoiceJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceJour</Name>
				<Source><![CDATA[
    protected ProjInvoiceJour projInvoiceJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = ProjInvoiceJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalJour</Name>
				<Source><![CDATA[
    protected ProjProposalJour projProposalJour()
    {
        if (!projProposalJour)
        {
            projProposalJour = ProjProposalJour::find(this.projInvoiceJour().ProposalId);
        }

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceEmpl</Name>
				<Source><![CDATA[
    protected ProjInvoiceEmpl projInvoiceEmpl(RecId _projInvoiceEmplRecId)
    {
        ProjInvoiceEmpl projInvoiceEmpl;
        
        if (this.isProforma())
        {
            projInvoiceEmpl = this.getProformaProjInvoiceEmpl(_projInvoiceEmplRecId);
        }
        else
        {
            projInvoiceEmpl = ProjInvoiceEmpl::findRecId(_projInvoiceEmplRecId);
        }

        return projInvoiceEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceCost</Name>
				<Source><![CDATA[
    protected ProjInvoiceCost projInvoiceCost(RecId _projInvoiceCostRecId)
    {
        ProjInvoiceCost projInvoiceCost;
        
        if (this.isProforma())
        {
            projInvoiceCost = this.getProformaProjInvoiceCost(_projInvoiceCostRecId);
        }
        else
        {
            projInvoiceCost = ProjInvoiceCost::findRecId(_projInvoiceCostRecId);
        }

        return projInvoiceCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceItem</Name>
				<Source><![CDATA[
    protected ProjInvoiceItem projInvoiceItem(RecId _projInvoiceItemRecId)
    {
        ProjInvoiceItem projInvoiceItem;
        
        if (this.isProforma())
        {
            projInvoiceItem = this.getProformaProjInvoiceItem(_projInvoiceItemRecId);
        }
        else
        {
            projInvoiceItem = ProjInvoiceItem::findRecId(_projInvoiceItemRecId);
        }

        return projInvoiceItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceOnAcc</Name>
				<Source><![CDATA[
    protected ProjInvoiceOnAcc projInvoiceOnAcc(RecId _projInvoiceOnAccRecId)
    {
        ProjInvoiceOnAcc projInvoiceOnAcc;
        
        if (this.isProforma())
        {
            projInvoiceOnAcc = this.getProformaProjInvoiceOnAcc(_projInvoiceOnAccRecId);
        }
        else
        {
            projInvoiceOnAcc = ProjInvoiceOnAcc::findRecId(_projInvoiceOnAccRecId);
        }

        return projInvoiceOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceRevenue</Name>
				<Source><![CDATA[
    protected ProjInvoiceRevenue projInvoiceRevenue(RecId _projInvoiceRevenueRecId)
    {
        ProjInvoiceRevenue projInvoiceRevenue;
        
        if (this.isProforma())
        {
            projInvoiceRevenue = this.getProformaProjInvoiceRevenue(_projInvoiceRevenueRecId);
        }
        else
        {
            projInvoiceRevenue = ProjInvoiceRevenue::findRecId(_projInvoiceRevenueRecId);
        }

        return projInvoiceRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PsaManageInvoiceDP_Post_insertTmpPSAManageInvoice_DC</Name>
				<Source><![CDATA[
    /*  Method for filling missing keys */
    [PostHandlerFor(classStr(PsaManageInvoiceDP), methodStr(PsaManageInvoiceDP, insertTmpPSAManageInvoice))]
    public static void PsaManageInvoiceDP_Post_insertTmpPSAManageInvoice_DC(XppPrePostArgs args)
    {
        PSAManageInvoiceDP      projInvoiceDP = args.getThis();
        Common                  cursor = args.getArgNum(1);
        PSAManageInvoiceTmp     psaManageInvoiceTmp;
        ProjInvoiceJour         projInvoiceJour;

        if (cursor.RecId)
        {
            RecId jourRecId = projInvoiceDP.parmDataContract().parmProjInvoiceJourRecId();

            psaManageInvoiceTmp.setConnection(projInvoiceDP.parmUserConnection());

            // We are selecting the right record because we are using the user connection.
            select forupdate firstonly psaManageInvoiceTmp
                exists join projInvoiceJour
                where psaManageInvoiceTmp.SourceRecId_DR == 0 && projInvoiceJour.RecId == jourRecId &&
                      psaManageInvoiceTmp.InvoiceNum == projInvoiceJour.ProjInvoiceId && psaManageInvoiceTmp.InvoiceDate == projInvoiceJour.InvoiceDate;

            if (psaManageInvoiceTmp)
            {
                psaManageInvoiceTmp.SourceTableId_DR = cursor.TableId;
                psaManageInvoiceTmp.SourceRecId_DR = cursor.RecId;
                psaManageInvoiceTmp.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>