<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocITMContainerReceiptsDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class DocITMContainerReceiptsDSP extends DocDataSourceProviderSrsReporting
{
    str placeholderShipContainerId, placeholderShipId, placeholderInventLocationId;
    boolean isMultipleShipContainerIds, isMultipleShipIds, isMultipleInventLocationIds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Load ITMContainerReceipts DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        _labelMap.insert(literalStr("@SYS4465"), 'Received');
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(ITMTmpContainerReceipts))
        {
            ITMTmpContainerReceipts containerReceiptLine = _rdpTableRecord;

            if (placeholderShipContainerId != containerReceiptLine.ShipContainerId)
            {
                isMultipleShipContainerIds = placeholderShipContainerId != '';
                placeholderShipContainerId = containerReceiptLine.ShipContainerId;
            }

            if (placeholderShipId != containerReceiptLine.ShipId)
            {
                isMultipleShipIds = placeholderShipId != '';
                placeholderShipId = containerReceiptLine.ShipId;
            }

            if (placeholderInventLocationId != containerReceiptLine.InventLocationId)
            {
                isMultipleInventLocationIds = placeholderInventLocationId != '';
                placeholderInventLocationId = containerReceiptLine.InventLocationId;
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.ShipContainerId('ShipContainerId')
    #define.ShipId('ShipId')
    #define.InventLocationId('InventLocationId')
   
    [DocPlaceholderAttribute(#ShipContainerId, 'CR - Shipping container'),
     DocPlaceholderAttribute(#ShipId, 'CR - Voyage'),
     DocPlaceholderAttribute(#InventLocationId, 'CR - Warehouse')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ShipContainerId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipContainerId, isMultipleShipContainerIds ? DocConstantDSP::MULTIPLE : placeholderShipContainerId);
        
        // -- Placeholder @ShipId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipId, isMultipleShipIds ? DocConstantDSP::MULTIPLE : placeholderShipId);

        // -- Placeholder @InventLocationId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InventLocationId, isMultipleInventLocationIds ? DocConstantDSP::MULTIPLE : placeholderInventLocationId);

        // Fill the print archive contract
        if (!isMultipleShipIds)
        {
            _reportRunContext.archiveContract().setDocument(placeholderShipId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>