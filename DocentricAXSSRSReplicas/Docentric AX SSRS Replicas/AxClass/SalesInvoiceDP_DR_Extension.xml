<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceDP_DR_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class SalesInvoiceDP_DR_Extension is an extension of the class SalesInvoiceDP.
/// </summary>
[ExtensionOf(classStr(SalesInvoiceDP))]
final class SalesInvoiceDP_DR_Extension
{
    private boolean calledSetTableConnections = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that the <c>createdTransactionId</c> ID of inserted record differs
    /// from default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        calledSetTableConnections = true;

        next setTableConnections();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates data for the report.
    /// We extend this method to call the setTableConnections() method
    /// of the SalesInvoiceDP class, since it is not called for proforma.
    /// </summary>
    public void createData()
    {
        // fill the pre-processed report temp table using user connection, because the cleanup will always run using this connection
        if (!calledSetTableConnections)
        {
            this.setTableConnections();
        }

        next createData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the invoice detail information into the <c>SalesInvoiceTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    protected void populateSalesInvoiceTmp(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        next populateSalesInvoiceTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);

        if (_custInvoiceTrans)
        {
            SalesInvoiceTmp localSalesInvoiceTmp = this.salesInvoiceTmp;
            localSalesInvoiceTmp.JourTransRecId_DR = _custInvoiceTrans.RecId;
            localSalesInvoiceTmp.OrigSalesId_DR    = _custInvoiceTrans.OrigSalesId;
            localSalesInvoiceTmp.SalesLineRecId_DR = _custInvoiceTrans.salesLine().RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the invoice detail information into the <c>SalesInvoiceLocalizationTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    /// <remarks>
    /// This method will insert the invoice details information into the <c>SalesInvoiceLocalizationTmp</c>
    /// table which is only used for Eastern European countries and other countries that need customization
    /// from the SYS layer functionality.
    /// </remarks>
    protected void populateSalesInvoiceLocalizationTmp(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        next populateSalesInvoiceLocalizationTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);

        if (_custInvoiceTrans)
        {
            SalesInvoiceLocalizationTmp localSalesInvoiceLocalizationTmp = this.salesInvoiceLocalizationTmp;
            localSalesInvoiceLocalizationTmp.JourTransRecId_DR = _custInvoiceTrans.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useExistingReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to copy (duplicate) data in the report DS tables using the current user connection.
    /// We extend this method to copy the data for the SysDocuBrandDetailsRegular table,
    /// since this is omitted in the standard logic.
    /// </summary>
    /// <returns>True if data is copied, otherwise False.</returns>
    protected boolean useExistingReportData()
    {
        boolean isDataCreated = next useExistingReportData();

        if (isDataCreated)
        {
            SysDocuBrandDetailsRegular localDocuBrandDetails;
            int64 transactionIdForCurrentSession = appl.curTransactionId();
            CreatedTransactionId createdTransactionId = this.parmDataContract().parmCreatedTransactionId();

            // Copy report data for SysDocuBrandDetailsRegular
            RecordSortedList recordList = new RecordSortedList(tableNum(SysDocuBrandDetailsRegular));
            recordList.sortOrder(fieldNum(SysDocuBrandDetailsRegular, RecId));
  
            while select localDocuBrandDetails
                where localDocuBrandDetails.CreatedTransactionId == createdTransactionId
            {
                recordList.ins(localDocuBrandDetails);
            }

            delete_from localDocuBrandDetails //the created data is copied so it should be deleted.
                where localDocuBrandDetails.CreatedTransactionId == transactionIdForCurrentSession;

            recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.
        }

        return isDataCreated;
    }


    // Uncomment the code below to enable a hotfix for the DB locking problem (SysDocuBrandDetailsRegular blocked by head blocker DocTraceParam).
    // This issue is fixed in D365FO 10.0.17, so the hotfix is just a backport to older versions and does not conflict with the standard fix delivered in 10.0.17.
    /*protected final void setSysDocuBrandDetails(CustInvoiceJour _custInvoiceJour)
    {
        docuBrandDetails.setConnection(this.parmUserConnection());
        
        next setSysDocuBrandDetails(_custInvoiceJour);
    }*/

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>