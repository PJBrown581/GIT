<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWMSPickingList_OrderPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWMSPickingList_OrderPick class is a DSP class for the WMSPickingList_OrderPick report.
/// </summary>
class DocWMSPickingList_OrderPick extends DocDataSourceProviderSrsReporting
{
    WmsPickingList_OrderPickContract    reportContract;
    WMSPickingList_OrderPickTmp         headerTableBuffer;
    DocTableFieldsMetadata              extensionFieldsMetadata_WMSPickingList_OrderPickTmp = DocTableFieldsMetadata::construct(tableStr(WMSPickingList_OrderPickTmp));
    
    #define.WMSPickingListOrderPickHeader('WMSPickingListOrderPickHeader')
    #define.WMSPickingListOrderPickLines('WMSPickingListOrderPickLines')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelsMap)
    {
        super(_labelsMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Header
        _labelsMap.insert(literalStr("@SYS101277"), 'Receipt');
        _labelsMap.insert(literalStr("@SYS104213"), 'Missing line information');

        // Document lines
        _labelsMap.insert(literalStr("@SYS6303"), 'Description');
        _labelsMap.insert(literalStr("@SYS26384"), 'Order unit');
        _labelsMap.insert(literalStr("@SYS180340"), 'Delivery date');
        _labelsMap.insert(literalStr("@SYS15980"), 'Picked');
        
        // Pagination
        _labelsMap.insert(literalStr("@SYS5250"), 'Page');
        _labelsMap.insert(literalStr("@SYS26401"), 'of');
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Sales picking list DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();
        reportContract = this.getSrsRdpContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        WMSPickingList_OrderPickTmp currentRecord;

        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(WMSPickingList_OrderPickTmp))
        {
            currentRecord = _rdpTableRecord;

            if (headerTableBuffer.RecId == 0)
            {
                // Copy all fields from the first selected record since the majority of them
                // belong to the report header. We will add them as a separate node in the
                // generateXmlDataSource method.
                buf2Buf(currentRecord, headerTableBuffer);
                headerTableBuffer.RecId = currentRecord.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(WMSPickingList_OrderPickTmp))
        {
            WMSPickingList_OrderPickTmp  wmsPickingList_OrderPickTmp = _rdpTableRecord;
            // Rename the record from 'WMSPickingList_OrderPickTmp' to 'WMSPickingListOrderPickLines'.
            _addingRecord.setRecordName(#WMSPickingListOrderPickLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Sales picking list lines'); // NOTE: use literalStr("@LabelID") instead.
            
            // Add 'Line fields'.
            _addingRecord.addFieldGroup(tableFieldGroupStr(WMSPickingList_OrderPickTmp, ReportFieldsLine_DR));
            _addingRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(WMSPickingList_OrderPickTmp, InventDim));                                    

            // Add Extension fields defined on WMSPickingList_OrderPickTmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(wmsPickingList_OrderPickTmp, _addingRecord, true, extensionFieldsMetadata_WMSPickingList_OrderPickTmp);

            // TODO: Add here additional fields from the related tables.
            // For example:
            //_addingRecord.addCalculatedField('ItemGroupId', InventTable::find(wmsPickingList_OrderPickTmp.ItemId).itemGroupId());
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord headerDataRecord;

        void addHeaderFields()
        {
            // Add the 'Header fields'.
            headerDataRecord.addFieldGroup(tableFieldGroupStr(WMSPickingList_OrderPickTmp, ReportFieldsHeader_DR));
            headerDataRecord.addFieldGroup(tableFieldGroupStr(WMSPickingList_OrderPickTmp, MCRFieldsHeader_DR));

            // Note: We'll skip the fields from the CompanyInfo field group since those fields we have in the GeneralData data section.
        }


        // 1. Add data records with fields representing the lines.
        super(_recordBuilder);

        // 2. Add all fields that belong to the header only once.
        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer).setSingleRecord(true);
        // Rename the record from 'WMSPickingList_OrderPickTmp' to 'WMSPickingListOrderPickHeader'.
        headerDataRecord.setRecordName(#WMSPickingListOrderPickHeader);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Sales picking list header'); // NOTE: use literalStr("@LabelID") instead.
        // Add all 'header' fields.
        addHeaderFields();
        
        
        // Add Extension fields defined on WMSPickingList_OrderPickTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(headerTableBuffer, headerDataRecord, true, extensionFieldsMetadata_WMSPickingList_OrderPickTmp);

        // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
        // by using the related data to headerTableBuffer (WMSPickingList_OrderPickTmp) or reportContract.
        //WMSPickingRoute pickingRoute = WMSPickingRoute::find(headerTableBuffer.PickingRouteID);
        //headerDataRecord.addCalculatedField('CustAccount', pickingRoute.customer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.PickingRoute('PickingRoute')
    #define.Number('Number')
    #define.ActivationDate('ActivationDate')
    #define.EndDate('EndDate')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.DeliveryName('DeliveryName')
    #define.DeliveryTerms('DeliveryTerms')
    #define.DeliveryMode('DeliveryMode')
    #define.DeliveryDate('DeliveryDate')

    [DocPlaceholderAttribute(#PickingRoute, 'SPL - Picking route ID'),
     DocPlaceholderAttribute(#Number, 'SPL - Number'),
     DocPlaceholderAttribute(#ActivationDate, 'SPL - Activation Date'),
     DocPlaceholderAttribute(#EndDate, 'SPL - End Date'),
     DocPlaceholderAttribute(#CustAccount, 'SPL - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'SPL - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'SPL - Customer Contact Name'),
     DocPlaceholderAttribute(#DeliveryName, 'SPL - Delivery Name'),
     DocPlaceholderAttribute(#DeliveryTerms, 'SPL - Delivery Terms'),
     DocPlaceholderAttribute(#DeliveryMode, 'SPL - Delivery Mode'),
     DocPlaceholderAttribute(#DeliveryDate, 'SPL - Delivery Date')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @PickingRoute@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PickingRoute, headerTableBuffer.PickingRouteID);

        // -- Placeholder @Number@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#Number, headerTableBuffer.TransRefId);

        // -- Placeholder @ActivationDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ActivationDate, headerTableBuffer.ActivationDateTime);

        // -- Placeholder @EndDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#EndDate, headerTableBuffer.EndDateTime);
            
        // -- Placeholder @CustAccount@
        WMSPickingRoute pickingRoute = WMSPickingRoute::find(headerTableBuffer.PickingRouteID);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, pickingRoute.customer);
                        
        // -- Placeholder @CustName@
        CustTable custTable = CustTable::find(pickingRoute.customer);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, custTable.name());

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::contactPersonName(custTable.ContactPersonId));

        // -- Placeholder @DeliveryName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryName, headerTableBuffer.DeliveryName);

        // -- Placeholder @DeliveryTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryTerms, headerTableBuffer.DeliveryTerms);

        // -- Placeholder @DeliveryMode@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryMode, headerTableBuffer.DeliveryMode);

        // -- Placeholder @DeliveryDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryDate, headerTableBuffer.DeliveryDate);


        // Fill the Print archive contract.
        if (pickingRoute.customer != '')
        {
            _reportRunContext.archiveContract().setCustAccount(pickingRoute.customer);
        }
        if (headerTableBuffer.TransType == InventTransType::Sales)
        {
            _reportRunContext.archiveContract().setSalesId(headerTableBuffer.TransRefId);
        }
        _reportRunContext.archiveContract().setDocument(headerTableBuffer.TransRefId, DateTimeUtil::date(headerTableBuffer.ActivationDateTime));
        _reportRunContext.archiveContract().setJournal(pickingRoute.RecId, DocJournalType::WMSPickingRoute);

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>