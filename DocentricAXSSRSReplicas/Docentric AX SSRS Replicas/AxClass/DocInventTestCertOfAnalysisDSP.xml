<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocInventTestCertOfAnalysisDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocInventTestCertOfAnalysisDSP extends DocDataSourceProviderSrsReporting
{
    boolean isOneCertificate;
    InventTestReferenceType referenceType;

    /* Variables for custom placeholders */
    str     placeholder_certId;
    str     placeholder_accountNum;
    str     placeholder_accountName;
    str     placeholder_contactName;
    str     placeholder_itemId;
    str     placeholder_itemName;
    str     placeholder_referenceType;
    str     placeholder_qualityOrderId;
    str     placeholder_referenceLot;
    str     placeholder_routeId;

    #define.CoA('CoA')
    #define.CoAHeader('CoAHeader')
    #define.CoAHeaderNote('CoAHeaderNote')
    #define.CoATest('CoATest')
    #define.CoATestNote('CoATestNote')
    #define.CoATestResult('CoATestResult')
    #define.CoATestResultNote('CoATestResultNote')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Certificate of analysis DSP - Grouped';
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePlaceholders</Name>
				<Source><![CDATA[
    protected void populatePlaceholders(InventTestCertOfAnalysisTmp _header)
    {
        if (isOneCertificate)
        {
            placeholder_certId = _header.InventCertificateOfAnalysisId;
            placeholder_accountNum = _header.AccountRelation;
            placeholder_accountName = _header.CustVendName;
            placeholder_contactName = _header.ContactPersonName;
            placeholder_itemId = _header.ItemId;
            placeholder_itemName = _header.ItemName;
            placeholder_referenceType = enum2Value(_header.ReferenceType);
            placeholder_qualityOrderId = _header.QualityOrderId;
            placeholder_referenceLot = _header.InventRefTransId;
            placeholder_routeId = _header.RouteId;

            referenceType = _header.ReferenceType;
        }
        else
        {
            placeholder_certId = DocConstantDSP::MULTIPLE;
            placeholder_accountNum = DocConstantDSP::MULTIPLE;
            placeholder_accountName = DocConstantDSP::MULTIPLE;
            placeholder_contactName = DocConstantDSP::MULTIPLE;
            placeholder_itemId = DocConstantDSP::MULTIPLE;
            placeholder_itemName = DocConstantDSP::MULTIPLE;
            placeholder_referenceType = DocConstantDSP::MULTIPLE;
            placeholder_qualityOrderId = DocConstantDSP::MULTIPLE;
            placeholder_referenceLot = DocConstantDSP::MULTIPLE;
            placeholder_routeId = DocConstantDSP::MULTIPLE;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    protected void addDataFieldsForHeader(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTmp _header)
    {
        // Rename the record from 'InventTestCertOfAnalysisTmp' to 'CoAHeader'.
        _addingRecord.setRecordName(#CoAHeader);
        // Change the label of the record.
        _addingRecord.setRecordLabel('CoA header');

        // Setting the flag needed for Docentric NextGen.
        _addingRecord.setSingleRecord(true);
        
        _addingRecord.addFields([
                fieldstr(InventTestCertOfAnalysisTmp, InventCertificateOfAnalysisId),
                fieldstr(InventTestCertOfAnalysisTmp, AccountRelation),
                fieldstr(InventTestCertOfAnalysisTmp, CustVendName),
                fieldstr(InventTestCertOfAnalysisTmp, ContactPersonName),
                fieldstr(InventTestCertOfAnalysisTmp, ItemId),
                fieldstr(InventTestCertOfAnalysisTmp, ItemName),
                fieldstr(InventTestCertOfAnalysisTmp, ReferenceType),
                fieldstr(InventTestCertOfAnalysisTmp, InventRefId),
                fieldstr(InventTestCertOfAnalysisTmp, InventRefTransId),
                fieldstr(InventTestCertOfAnalysisTmp, QualityOrderId),
                fieldstr(InventTestCertOfAnalysisTmp, CustVendPhone),
                fieldstr(InventTestCertOfAnalysisTmp, CustVendEmail),
                fieldstr(InventTestCertOfAnalysisTmp, CustVendTeleFax),
                fieldstr(InventTestCertOfAnalysisTmp, InventRefTransId),
                fieldstr(InventTestCertOfAnalysisTmp, RouteId)
            ]);
               
        // TODO: Add here all your custom (extension) 'header' fields from the InventTestCertOfAnalysisTmp table, if any.
        // For example:
        //_addingRecord.addField(fieldStr(InventTestCertOfAnalysisTmp, YourCustomFieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForNotes</Name>
				<Source><![CDATA[
    protected void addDataFieldsForNotes(DocXmlRecord _addingRecord,
                                         str _recordName, str _recordLabel,
                                         DocuTypeId _typeId, Description _name, Notes _notes)
    {
        DocXmlRecord headerNoteDataRecord = _addingRecord.addChildCalculatedRecord(#CoAHeaderNote);
        headerNoteDataRecord.setRecordName(_recordName);
        headerNoteDataRecord.setRecordLabel(_recordLabel);

        headerNoteDataRecord.addCalculatedField('TypeId', _typeId, literalStr("@SYS22564"));
        headerNoteDataRecord.addCalculatedField('Name', _name, literalStr("@SYS7576"));
        headerNoteDataRecord.addCalculatedField('Notes', _notes, literalStr("@SYS13887"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForTest</Name>
				<Source><![CDATA[
    protected void addDataFieldsForTest(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTmp _testSpecification)
    {
        // Rename the record from 'InventTestCertOfAnalysisTmp' to 'CoATest'.
        _addingRecord.setRecordName(#CoATest);
        // Change the label of the record.
        _addingRecord.setRecordLabel('CoA test');
        
        _addingRecord.addFields([
                fieldstr(InventTestCertOfAnalysisTmp, TestId),
                fieldstr(InventTestCertOfAnalysisTmp, TestUnitID),
                fieldstr(InventTestCertOfAnalysisTmp, TestResult),
                fieldstr(InventTestCertOfAnalysisTmp, VariableOutcomeIdStandard),
                fieldstr(InventTestCertOfAnalysisTmp, StandardValue),
                fieldstr(InventTestCertOfAnalysisTmp, TestType),
                fieldstr(InventTestCertOfAnalysisTmp, LowerLimit),
                fieldstr(InventTestCertOfAnalysisTmp, UpperLimit),
                fieldstr(InventTestCertOfAnalysisTmp, LowerTolerance),
                fieldstr(InventTestCertOfAnalysisTmp, UpperTolerance)
            ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForTestResult</Name>
				<Source><![CDATA[
    protected void addDataFieldsForTestResult(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTmp _testResult)
    {
        // Rename the record from 'InventTestCertOfAnalysisTmp' to 'CoATestResult'.
        _addingRecord.setRecordName(#CoATestResult);
        // Change the label of the record.
        _addingRecord.setRecordLabel('CoA test result');

        _addingRecord.addFields([
                fieldstr(InventTestCertOfAnalysisTmp, TestResultQuantity),
                fieldstr(InventTestCertOfAnalysisTmp, TestResultValueOutcome),
                fieldstr(InventTestCertOfAnalysisTmp, TestResultValueReal),
                fieldstr(InventTestCertOfAnalysisTmp, TestResultResult)
            ]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCoADataRecord</Name>
				<Source><![CDATA[
    protected void addCoADataRecord(DocXmlRecordBuilder _recordBuilder, InventCertificateOfAnalysisId _certId, InventTestCertOfAnalysisTmp _certOfAnalysisTmp)
    {
        DocXmlRecord coaRecord, headerDataRecord, testDataRecord, testResultDataRecord;
        InventTestCertOfAnalysisTmp emptyTmp;

        /*  (1) Add the CoA record  */
        _recordBuilder.goToTopRecord();
        coaRecord = _recordBuilder.addCalculatedRecord(#CoA, 'CoA');
        
        /*  (2) Add the header record  */
        select firstonly _certOfAnalysisTmp
                    where _certOfAnalysisTmp.DocuRefCertOfAnalysis == NoYes::No
                        && _certOfAnalysisTmp.DocuRefCertOfAnalysisLine == NoYes::No
                        && _certOfAnalysisTmp.DocuRefCertOfAnalysisResult == NoYes::No
                        && _certOfAnalysisTmp.TestId == ''
                        && _certOfAnalysisTmp.InventCertificateOfAnalysisId == _certId;

        headerDataRecord = _recordBuilder.addRecord(_certOfAnalysisTmp).setSingleRecord(true);
        this.addDataFieldsForHeader(headerDataRecord, _certOfAnalysisTmp);

        // Populate placeholders.
        this.populatePlaceholders(_certOfAnalysisTmp);

            
        /*  (3) Add the header notes records as sub-records of header  */
        boolean headerNotesAdded = false;
        while select TypeId, Name, Notes from _certOfAnalysisTmp
                    where _certOfAnalysisTmp.DocuRefCertOfAnalysis == NoYes::Yes
                        && _certOfAnalysisTmp.TestId == ''
                        && _certOfAnalysisTmp.InventCertificateOfAnalysisId == _certId
        {
            this.addDataFieldsForNotes(headerDataRecord, #CoAHeaderNote, 'CoA header note',
                                       _certOfAnalysisTmp.TypeId, _certOfAnalysisTmp.Name, _certOfAnalysisTmp.Notes);
            headerNotesAdded = true;
        }

        // If no header note exists, make sure to add one empty record.
        if (!headerNotesAdded && !this.isRuntime())
        {
            this.addDataFieldsForNotes(headerDataRecord, #CoAHeaderNote, 'CoA header note', '', '', '');
        }

            
        /*  (4) Add the test specification records, on the same level with header  */
        boolean testSpecAdded = false;
        while select _certOfAnalysisTmp
                    where _certOfAnalysisTmp.DocuRefCertOfAnalysis == NoYes::No
                        && _certOfAnalysisTmp.DocuRefCertOfAnalysisLine == NoYes::No
                        && _certOfAnalysisTmp.DocuRefCertOfAnalysisResult == NoYes::No
                        && _certOfAnalysisTmp.TestId != ''
                        && _certOfAnalysisTmp.CertOfAnalysisResult == NoYes::No
                        && _certOfAnalysisTmp.InventCertificateOfAnalysisId == _certId
        {
            _recordBuilder.goToParentRecord();

            testDataRecord = _recordBuilder.addRecord(_certOfAnalysisTmp);
            this.addDataFieldsForTest(testDataRecord, _certOfAnalysisTmp);
            testSpecAdded = true;
        }


        // Iterate through test specification records and add the related sub-records

        if (testSpecAdded)
        {
            boolean shouldContinue = true;

            while (shouldContinue)
            {
                // Start with the last Test specification record
                testDataRecord = _recordBuilder.currentRecord();
                InventTestId testId = testDataRecord.getField(fieldstr(InventTestCertOfAnalysisTmp, TestId)).getFieldValue();

                       
                /*  (5) Add the test result records as sub-records of test specification  */
                boolean testResultAdded = false;
                while select _certOfAnalysisTmp
                            where _certOfAnalysisTmp.CertOfAnalysisResult == NoYes::Yes
                                && _certOfAnalysisTmp.TestId == testId
                                && _certOfAnalysisTmp.InventCertificateOfAnalysisId == _certId
                {
                    testResultDataRecord = testDataRecord.addChildRecord(_certOfAnalysisTmp);
                    this.addDataFieldsForTestResult(testResultDataRecord, _certOfAnalysisTmp);
                    testResultAdded = true;
                }

                // If no test results exist, make sure to add one empty record
                if (!testResultAdded && !this.isRuntime())
                {
                    emptyTmp.clear();

                    testResultDataRecord = testDataRecord.addChildRecord(emptyTmp);
                    this.addDataFieldsForTestResult(testResultDataRecord, emptyTmp);
                }
                
                /*  (6) Add the test specification notes as sub-records of test specification  */
                boolean testSpecNotesAdded = false;
                while select _certOfAnalysisTmp
                            where _certOfAnalysisTmp.DocuRefCertOfAnalysisLine == NoYes::Yes
                                && _certOfAnalysisTmp.TestId == testId
                                && _certOfAnalysisTmp.InventCertificateOfAnalysisId == _certId
                {
                    this.addDataFieldsForNotes(testDataRecord, #CoATestNote, 'CoA test note',
                                               _certOfAnalysisTmp.TypeId, _certOfAnalysisTmp.Name, _certOfAnalysisTmp.Notes);
                    testSpecNotesAdded = true;
                }

                // If no test specification note exists, make sure to add one empty record
                if (!testSpecNotesAdded && !this.isRuntime())
                {
                    this.addDataFieldsForNotes(testDataRecord, #CoATestNote, 'CoA test note', '', '', '');
                }
                
                /*  (7) Add the test results notes as sub-records of test specification  */
                testSpecNotesAdded = false;
                while select _certOfAnalysisTmp
                            where _certOfAnalysisTmp.DocuRefCertOfAnalysisResult == NoYes::Yes
                                && _certOfAnalysisTmp.TestId == testId
                                && _certOfAnalysisTmp.InventCertificateOfAnalysisId == _certId
                {
                    this.addDataFieldsForNotes(testDataRecord, #CoATestResultNote, 'CoA test result note',
                                               _certOfAnalysisTmp.TypeId, _certOfAnalysisTmp.Name, _certOfAnalysisTmp.Notes);
                    testSpecNotesAdded = true;
                }

                // If no test results notes exist, make sure to add one empty record
                if (!testSpecNotesAdded && !this.isRuntime())
                {
                    this.addDataFieldsForNotes(testDataRecord, #CoATestResultNote, 'CoA test result note', '', '', '');
                }
                    
                // Iterate backwards through Test specification records
                boolean previousSiblingRecordFound = _recordBuilder.goToPreviousSiblingRecord();
                if (!previousSiblingRecordFound || _recordBuilder.currentRecord().getRecordName() != #CoATest)
                {
                    // Stop if we passed the first Test specification record
                    shouldContinue = false;
                }
            }
        }

        // If no test specification record exists, make sure to add one empty record
        // for test specification, one empty sub-record for the note test specification note,
        // one empty sub-record for the test result and one empty sub-record for the test result note.
        if (!testSpecAdded && !this.isRuntime())
        {
            emptyTmp.clear();
                    
            _recordBuilder.goToParentRecord();

            testDataRecord = _recordBuilder.addRecord(emptyTmp);
            this.addDataFieldsForTest(testDataRecord, emptyTmp);
                    
            testResultDataRecord = testDataRecord.addChildRecord(emptyTmp);
            this.addDataFieldsForTestResult(testResultDataRecord, emptyTmp);

            this.addDataFieldsForNotes(testDataRecord, #CoATestNote, 'CoA test note', '', '', '');
            this.addDataFieldsForNotes(testDataRecord, #CoATestResultNote, 'CoA test result note', '', '', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        // Skip the building of the record tree from the built-in report RDP tables in the standard way.
        //super(_recordBuilder);

        InventTestCertOfAnalysisDP rdp = this.getSrsRdpClassRunningInstance();
        InventTestCertOfAnalysisTmp certOfAnalysisTmp = rdp.getInventTestCertOfAnalysisTmp();

        // Report can be executed for multiple CoA documents.
        // First collect all distinct CoA IDs.
        Set certIds = new Set(Types::String);
        while select InventCertificateOfAnalysisId from certOfAnalysisTmp
            group by certOfAnalysisTmp.InventCertificateOfAnalysisId
        {
            certIds.add(certOfAnalysisTmp.InventCertificateOfAnalysisId);
        }

        isOneCertificate = certIds.elements() == 1;

        // Iterate through CoA IDs and build the datasource for each of them.
        SetEnumerator se = certIds.getEnumerator();
        se.reset();

        while (se.moveNext())
        {
            InventCertificateOfAnalysisId certId = se.current();
            this.addCoADataRecord(_recordBuilder, certId, certOfAnalysisTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.CertId('CertId')
    #define.AccountNum('AccountNum')
    #define.AccountName('AccountName')
    #define.ContactName('ContactName')
    #define.ItemId('ItemId')
    #define.ItemName('ItemName')
    #define.ReferenceType('ReferenceType')
    #define.QualityOrderId('QualityOrderId')
    #define.ReferenceLot('ReferenceLot')
    #define.RouteId('RouteId')

    [DocPlaceholderAttribute(#CertId, 'COA - Certificate ID'),
     DocPlaceholderAttribute(#AccountNum, 'COA - Account Number'),
     DocPlaceholderAttribute(#AccountName, 'COA - Account Name'),
     DocPlaceholderAttribute(#ContactName, 'COA - Contact Name'),
     DocPlaceholderAttribute(#ItemId, 'COA - Item ID'),
     DocPlaceholderAttribute(#ItemName, 'COA - Item Name'),
     DocPlaceholderAttribute(#ReferenceType, 'COA - Reference Type'),
     DocPlaceholderAttribute(#QualityOrderId, 'COA - Quality Order ID'),
     DocPlaceholderAttribute(#ReferenceLot, 'COA - Reference Lot'),
     DocPlaceholderAttribute(#RouteId, 'COA - Route ID')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders
        // -- Placeholder @CertId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CertId, placeholder_certId);
        
        // -- Placeholder @AccountNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#AccountNum, placeholder_accountNum);
        
        // -- Placeholder @AccountName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#AccountName, placeholder_accountName);
        
        // -- Placeholder @ContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ContactName, placeholder_contactName);
        
        // -- Placeholder @ItemId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemId, placeholder_itemId);
        
        // -- Placeholder @ItemName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemName, placeholder_itemName);
        
        // -- Placeholder @ReferenceType@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ReferenceType, placeholder_referenceType);
        
        // -- Placeholder @QualityOrderId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#QualityOrderId, placeholder_qualityOrderId);
        
        // -- Placeholder @ReferenceLot@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ReferenceLot, placeholder_referenceLot);
        
        // -- Placeholder @RouteId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RouteId, placeholder_routeId);

        // Fill the Print archive contract.
        if (isOneCertificate)
        {
            switch (referenceType)
            {
                case InventTestReferenceType::Sales:                    
                    _reportRunContext.archiveContract().setCustAccount(placeholder_accountNum);
                    break;
                case InventTestReferenceType::Purch:
                    _reportRunContext.archiveContract().setVendAccount(placeholder_accountNum);
                    break;
            }
            _reportRunContext.archiveContract().setDocument(placeholder_certId);
        }
        
        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>