<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSLoadDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWHSLoadDSP class is a DSP class for the WHSLoad report.
/// </summary>
public class DocWHSLoadDSP extends DocDataSourceProviderSrsReporting
{
    WHSLoadId placeholderLoadId;
    WHSOrderNum placeholderOrderNum;
    CustAccount placeholderCustAccountId;

    boolean multipleLoads = false;
    boolean multipleOrders = false;
    boolean multipleCustomers = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>The class description</returns>
    public ClassDescription description()
    {
        return 'Load details DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// This overridden method adds additional custom labels to the DDSP to use them in template designer.
    /// Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    /// </summary>
    /// <param name = "_labelMap">Label map</param>
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        _labelMap.insert(literalStr("@WAX313"), 'Load details');
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');
        _labelMap.insert(literalStr("@SYS4009737"), 'Order ID:');
        _labelMap.insert(literalStr("@SYS4009738"), 'Customer order #:');
        _labelMap.insert(literalStr("@SYS4009739"), 'Customer account:');
        _labelMap.insert(literalStr("@SYS4009740"), 'Terms of delivery:');
        _labelMap.insert(literalStr("@SYS4009741"), 'Shipped via:');
        _labelMap.insert(literalStr("@SYS4009742"), 'Requested ship date and time:');
        _labelMap.insert(literalStr("@SYS4009743"), 'Order quantity');
        _labelMap.insert(literalStr("@SYS4009744"), 'Order unit');
        _labelMap.insert(literalStr("@SYS4009747"), 'Pieces');
        _labelMap.insert(literalStr("@SYS4009749"), 'Available capacity');
        _labelMap.insert(literalStr("@SYS323111"), 'Yes');
        _labelMap.insert(literalStr("@SYS36159"), 'No');
        _labelMap.insert(literalStr("@SYS181469"), 'Worker');
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overriden method that enables you to store particular data fields
    /// from the currently adding record of the RDP (report data provider) table to the class
    /// global variables. This way you can use them in the this.overrideReportRunSettings() method to
    /// replace custom placeholders or change the selected print destination settings.
    /// </summary>
    /// <param name = "_rdpTableRecord">RDP (report data provider) table record.</param>
    /// <param name = "_rdpTableName">RDP (report data provider) table name.</param>
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(WHSLoadTmp))
        {
            WHSLoadTmp currentRecord = _rdpTableRecord;

            // Store custom placeholders' values.
            if (placeholderLoadId == '')
            {
                placeholderLoadId = currentRecord.LoadId;
            }
            multipleLoads = (placeholderLoadId != currentRecord.LoadId && currentRecord.LoadId);

            if (placeholderOrderNum == '')
            {
                placeholderOrderNum = currentRecord.OrderNum;
            }
            multipleOrders = (placeholderOrderNum != currentRecord.OrderNum && currentRecord.OrderNum);

            if (placeholderCustAccountId == '')
            {
                placeholderCustAccountId = currentRecord.CustAccount;
            }
            multipleCustomers = (placeholderCustAccountId != currentRecord.CustAccount && currentRecord.CustAccount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.LoadId('LoadId')
    #define.OrderNum('OrderNum')
    #define.CustAccountId('CustAccountId')

    [DocPlaceholderAttribute(#LoadId, 'LD - Load ID'),
     DocPlaceholderAttribute(#OrderNum, 'LD - Order ID'),
     DocPlaceholderAttribute(#CustAccountId, 'LD - Customer Account ID')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @LoadId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadId, multipleLoads ? DocConstantDSP::MULTIPLE : placeholderLoadId);
        
        // -- Placeholder @OrderNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderNum, multipleOrders ? DocConstantDSP::MULTIPLE : placeholderOrderNum);

        // -- Placeholder @CustAccountId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccountId, multipleCustomers ? DocConstantDSP::MULTIPLE : placeholderCustAccountId);

        // Defining how to write report to Print Archive
        DocArchiveContract archiveContract = _reportRunContext.archiveContract();

        // Add information to Print Archive
        if (multipleLoads == false)
        {
            archiveContract.setDocument(placeholderLoadId);
            archiveContract.setWHSLoadId(placeholderLoadId);
        }
        else
        {
            // NOTE: Use literalStr(@Label)
            archiveContract.setDocument(strFmt('Multiple starting with: %1', placeholderLoadId));
        }

        if (multipleCustomers == false)
        {
            archiveContract.setCustAccount(placeholderCustAccountId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>