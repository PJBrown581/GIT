<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSWorkDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWHSWorkDSP class is a DSP class for the WHSWork report.
/// </summary>
class DocWHSWorkDSP extends DocDataSourceProviderSrsReporting
{
    /* Variables used for custom placeholders */
    WHSWorkTable whsWorkTable;
    boolean      isMultipleWorkIds = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Work report DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        _labelMap.insert(literalStr("@WAX5784"), 'Item number bar code');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);

        if (tableNum(WHSWorkTable) == _qbds.table())
        {
            // TODO: Add here additional fields related to WHSWorkTable.
            //WHSWorkTable workTable = _common;
            //if (workTable.WorkTransType == WHSWorkTransType::Sales)
            //{
            //    SalesTable salesTable = SalesTable::find(workTable.OrderNum);
            //    _addingRecord.addCalculatedField('CustomerName', salesTable.customerName());
            //}
            //else if (!this.isRuntime())
            //{
            //    // It's not applicable but we'll add it if this executes when DDSP is being produced
            //    // to maintain the uniform data schema.
            //    _addingRecord.addCalculatedField('CustomerName', '');
            //}   
        }
        // Add the display method for showing item name of the line
        else if (tableNum(WHSWorkLine) == _qbds.table())
        {
            _addingRecord.addDisplayMethod(tableMethodStr(WHSWorkLine, displayItemName));
            // TODO: Add here additional fields related to WHSWorkLine.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super (_common, _qbds);

        // Store values for custom placeholders into global variables.
        if (_qbds.table() == tableNum(WHSWorkTable) )
        {
            WHSWorkId   oldWorkId = whsWorkTable.WorkId;

            whsWorkTable = _common.data();

            // Check if more than one Work is printed.
            if (oldWorkId && (whsWorkTable.WorkId != oldWorkId))
            {
                isMultipleWorkIds = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.OrderNum('OrderNum')
    #define.WorkId('WorkID')
    #define.LoadId('LoadID')
    #define.WaveId('WaveID')
    #define.ShipmentId('ShipmentID')
    #define.WorkUserId('WorkUserID')

    [DocPlaceholderAttribute(#OrderNum, 'Work - Order number'),
     DocPlaceholderAttribute(#WorkId, 'Work - Work ID'),
     DocPlaceholderAttribute(#LoadId, 'Work - Load ID'),
     DocPlaceholderAttribute(#ShipmentId, 'Work - Shipment ID'),
     DocPlaceholderAttribute(#WaveId, 'Work - Wave ID'),
     DocPlaceholderAttribute(#WorkUserId, 'Work - User ID')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // -- Placeholder @OrderNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderNum, isMultipleWorkIds ? DocConstantDSP::MULTIPLE : whsWorkTable.OrderNum);
        // -- Placeholder @WorkId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#WorkId, isMultipleWorkIds ? DocConstantDSP::MULTIPLE : whsWorkTable.WorkId);
        // -- Placeholder @LoadId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadId, isMultipleWorkIds ? DocConstantDSP::MULTIPLE : whsWorkTable.LoadId);
        // -- Placeholder @ShipmentId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipmentId, isMultipleWorkIds ? DocConstantDSP::MULTIPLE : whsWorkTable.ShipmentId);
        // -- Placeholder @WaveId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#WaveId, isMultipleWorkIds ? DocConstantDSP::MULTIPLE : whsWorkTable.WaveId);
        // -- Placeholder @WorkUserId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#WorkUserId, isMultipleWorkIds ? DocConstantDSP::MULTIPLE : whsWorkTable.WorkCreatedBy);
        
        // Fill the Print archive contract.
        if (!isMultipleWorkIds)
        {
            _reportRunContext.archiveContract().setDocument(whsWorkTable.WorkId);

            if (whsWorkTable.WorkTransType == WHSWorkTransType::Sales)
            {
                SalesTable salesTable = SalesTable::find(whsWorkTable.OrderNum);
                _reportRunContext.archiveContract().setSalesId(salesTable.SalesId);
                _reportRunContext.archiveContract().setCustAccount(salesTable.CustAccount);
            } 
            else if (whsWorkTable.WorkTransType == WHSWorkTransType::Purch)
            {
                PurchTable purchTable = PurchTable::find(whsWorkTable.OrderNum);
                _reportRunContext.archiveContract().setPurchId(purchTable.PurchId);
                _reportRunContext.archiveContract().setVendAccount(purchTable.OrderAccount);
            }
        }
        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>