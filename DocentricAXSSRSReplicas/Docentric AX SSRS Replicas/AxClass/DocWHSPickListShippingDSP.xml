<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSPickListShippingDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWHSPickListShippingDSP class is a DSP class for the WHSPickListShipping report.
/// </summary>
class DocWHSPickListShippingDSP extends DocDataSourceProviderSrsReporting
{
    /* Variables used for custom placeholders */
    str         placeholderShipmentId, placeholderLoadId, placeholderOrderNumber;
    boolean     isMultipleLoadIds = false;
    boolean     isMultipleShipmentIds = false;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Shipping pick list DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Document title.
        _labelMap.insert(literalStr("@SYS132726"), 'Pick list');

        // Document content.
        _labelMap.insert(literalStr("@WAX479"), 'Work type');
        _labelMap.insert(literalStr("@SYS319915"), 'Item name');
        _labelMap.insert(literalStr("@SYS105177"), 'Qty');
        _labelMap.insert(literalStr("@WAX277"), 'To location');
        _labelMap.insert(literalStr("@SYS17041"), 'Order type');
        
        // Pagination.
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method that enables you to add additional data to a report data source
    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);

        // Add the LineNum field in order to be used on the template for sorting purposes.
        if (tableNum(WHSWorkLine) == _qbds.table())
        {
            _addingRecord.addField(fieldStr(WHSWorkLine, LineNum));
            
            // Add Requested ship date from the related Sales order line.
            WHSWorkLine whsWorkLine = _common;
            WHSLoadLine whsLoadLine = WHSLoadLine::findbyRecId(whsWorkLine.LoadLineRefRecId);
            
            if (whsLoadLine.InventTransType == InventTransType::Sales || !this.isRuntime())
            {
                SalesLine salesLine = whsLoadLine.salesLine();
                _addingRecord.addCalculatedFieldFromEdt('SalesShippingDateRequested', extendedTypeStr(SalesShippingDateRequested), salesLine.ShippingDateRequested);
            }

            // TODO: Add here additional fields related to WHSWorkLine.
        }

        else if (tableNum(WHSWorkTable) == _qbds.table())
        {
            // Add Customer requisition from the related Sales order.
            WHSWorkTable whsWorkTable = _common;

            if (whsWorkTable.WorkTransType == WHSWorkTransType::Sales || !this.isRuntime())
            {
                SalesTable salesTable = SalesTable::find(whsWorkTable.OrderNum);
                _addingRecord.addCalculatedFieldFromEdt('CustomerRequisition', extendedTypeStr(CustPurchaseOrder), salesTable.PurchOrderFormNum);
            }
            
            // Setting the flag needed for Docentric NextGen.
            _addingRecord.setSingleRecord(true);

            // TODO: Add here additional fields related to WHSWorkTable.
            //WHSWorkTable workTable = _common;
            //if (workTable.WorkTransType == WHSWorkTransType::Sales)
            //{
            //    SalesTable salesTable = SalesTable::find(workTable.OrderNum);
            //    _addingRecord.addCalculatedField('CustomerName', salesTable.customerName());
            //}
            //else if (!this.isRuntime())
            //{
            //    // It's not applicable but we'll add it if this executes when DDSP is being produced
            //    // to maintain the uniform data schema.
            //    _addingRecord.addCalculatedField('CustomerName', '');
            //}
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super (_common, _qbds);

        // Store values for custom placeholders into global variables.
        if (tableNum(WHSWorkLine) == _qbds.table())
        {
            WHSWorkLine whsWorkLine = _common;

            // Check if there are more than one Shipment IDs.
            if (placeholderShipmentId != whsWorkLine.ShipmentId)
            {
                isMultipleShipmentIds = placeholderShipmentId == '' ? false : true;
                placeholderShipmentId = whsWorkLine.ShipmentId;
            }
           
            // Check if there are more than one Load IDs.
            if (placeholderLoadId != whsWorkLine.LoadId)
            {
                isMultipleLoadIds = placeholderLoadId == '' ? false : true;
                placeholderLoadId = whsWorkLine.LoadId;
            }

            placeholderOrderNumber = whsWorkLine.OrderNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.ShipmentId('ShipmentId')
    #define.LoadId('LoadId')
    #define.OrderNum('OrderNum')

    [DocPlaceholderAttribute(#LoadId, 'PLS - Load ID'),
     DocPlaceholderAttribute(#ShipmentId, 'PLS - Shipment ID'),
     DocPlaceholderAttribute(#OrderNum, 'PLS - Order number')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ShipmentId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipmentId, isMultipleShipmentIds ? DocConstantDSP::MULTIPLE : placeholderShipmentId);

        // -- Placeholder @LoadId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadId, isMultipleLoadIds ? DocConstantDSP::MULTIPLE : placeholderLoadId);
        
        // -- Placeholder @OrderNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderNum, isMultipleShipmentIds || isMultipleLoadIds ? DocConstantDSP::MULTIPLE : placeholderOrderNumber);

        // Fill the Print archive contract.
        if (!isMultipleShipmentIds)
        {
            _reportRunContext.archiveContract().setDocument(placeholderOrderNumber);
            _reportRunContext.archiveContract().setWHSShipmentId(placeholderShipmentId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>