<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocProdRouteJobReportDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocProdRouteJobReportDSP class is a DSP class for the ProdRouteJob report.
/// </summary>
public class DocProdRouteJobReportDSP extends DocDataSourceProviderSrsReporting
{
    // Variables used for custom placeholders
    ProdTable prodTable;
    boolean multipleProdOrders = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>The class description</returns>
    public ClassDescription description()
    {
        return 'Production route job DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// This overridden method adds additional custom labels to the DDSP to use them in template designer.
    /// Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    /// </summary>
    /// <param name = "_labelMap">Label map</param>
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        _labelMap.insert(literalStr("@PRO2083"), 'Production or batch order');
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');
        _labelMap.insert(literalStr("@SYS1066"), 'Job');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is overriden to add additional data such as data fields,
    /// display methods or even additional data records to the adding record.
    /// </summary>
    /// <param name="_addingRecord">Adding data record based on the currently selected record.</param>
    /// <param name="_common">Currently selected record from one of the query data sources.</param>
    /// <param name="_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);

        if (tableNum(ProdRouteJob) == _qbds.table())
        {
            ProdRouteJob prodRouteJobLocal = _common;
            _addingRecord.addCalculatedField('FromDateTimeUTC', DateTimeUtil::newDateTime(prodRouteJobLocal.FromDate, prodRouteJobLocal.FromTime, DateTimeUtil::getUserPreferredTimeZone()), 'UTC start date/time');
            _addingRecord.addCalculatedField('ToDateTimeUTC', DateTimeUtil::newDateTime(prodRouteJobLocal.ToDate, prodRouteJobLocal.toTime, DateTimeUtil::getUserPreferredTimeZone()), 'UTC end date/time');
            _addingRecord.addCalculatedField('FromDateTime', DateTimeUtil::newDateTime(prodRouteJobLocal.FromDate, prodRouteJobLocal.FromTime), 'Start date/time');
            _addingRecord.addCalculatedField('ToDateTime', DateTimeUtil::newDateTime(prodRouteJobLocal.ToDate, prodRouteJobLocal.toTime), 'End date/time');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is overriden to store some values from the currently selected
    /// record from a query data source into global class variables.
    /// </summary>
    /// <param name="_common">Currently selected record from one of the query data sources.</param>
    /// <param name="_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super(_common, _qbds);

        // Store values for custom placeholders into global variables.
        if (_qbds.table() == tableNum(ProdTable) )
        {
            ProdId oldProdId = prodTable.ProdId;

            prodTable = _common.data();

            // Check if more than one Production order is printed.
            if (oldProdId && (prodTable.ProdId != oldProdId))
            {
                multipleProdOrders = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.ProdId('ProdId')
    #define.ItemId('ItemId')
    #define.ItemName('ItemName')
    #define.RefNumber('RefNumber')
    #define.RefName('RefName')
    #define.StartedDate('StartedDate')
    #define.DeliveryDate('DeliveryDate')

    [DocPlaceholderAttribute(#ProdId, 'RJ - Prod ID'),
     DocPlaceholderAttribute(#ItemId, 'RJ - Item ID'),
     DocPlaceholderAttribute(#ItemName, 'RJ - Item Name'),
     DocPlaceholderAttribute(#RefNumber, 'RJ - Reference Number'),
     DocPlaceholderAttribute(#RefName, 'RJ - Reference Name'),
     DocPlaceholderAttribute(#StartedDate, 'RJ - Started Date'),
     DocPlaceholderAttribute(#DeliveryDate, 'RJ - Delivery Date')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ProdId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProdId, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTable.ProdId);
        
        // -- Placeholder @ItemId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemId, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTable.ItemId);

        // -- Placeholder @ItemName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemName, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTable.Name);

        // -- Placeholder @RefNumber@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefNumber, multipleProdOrders ? DocConstantDSP::MULTIPLE : prodTable.InventRefId);

        // -- Placeholder @RefName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefName, multipleProdOrders ? DocConstantDSP::MULTIPLE : enum2Str(prodTable.InventRefType));

        // -- Placeholder @StartedDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#StartedDate, multipleProdOrders ? dateNull() : prodTable.StUpDate);

        // -- Placeholder @DeliveryDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryDate, multipleProdOrders ? dateNull() : prodTable.DlvDate);

        // Fill the Print archive contract.
        if (multipleProdOrders)
        {
            _reportRunContext.archiveContract().setProdId('');
        }
        else
        {
            _reportRunContext.archiveContract().setProdId(prodTable.ProdId);
            _reportRunContext.archiveContract().setDocument(prodTable.ProdId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>