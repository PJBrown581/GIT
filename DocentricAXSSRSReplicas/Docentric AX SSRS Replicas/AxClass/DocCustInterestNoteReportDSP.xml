<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocCustInterestNoteReportDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocCustInterestNoteReportDSP extends DocDataSourceProviderSrsReporting
{
    CustInterestNoteTmp            headerTableBuffer;
    CustInterestNoteContract       reportContract;
    boolean                        transLineAdded, taxLineAdded;
    CustInterestJour               journal;
    RecId                          journalRecId;
    DocTableFieldsMetadata         extensionFieldsMetadata_CustInterestNoteTmp = DocTableFieldsMetadata::construct(tableStr(CustInterestNoteTmp));

    /* Variables for custom placeholders */
    str         placeholder_interestNoteNum;
    date        placeholder_interestNoteDate;
    str         placeholder_custAccount;
    str         placeholder_custName;
    str         placeholder_paymentTerms;
    date        placeholder_interestFromDate;
    date        placeholder_interestToDate;


    #define.InterestNoteHeader('InterestNoteHeader')
    #define.InterestNoteLines_Trans('InterestNoteLines')
    #define.InterestNoteLines_TransPaymSlip('PaymentSlip')
    #define.InterestNoteLines_Tax('InterestNoteLines_Tax')

    #define.BillingClassification('BillingClassification')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Company information.
        _labelMap.insert(literalStr("@SYS180888"), 'Giro');
        _labelMap.insert(literalStr("@SYS67100"), 'Our tax exempt No.');

        // Pagination.
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS92595"), 'of');

        // Document header.
        _labelMap.insert(literalStr("@SYS8298"), 'Interest note'); // Document title.
        _labelMap.insert(literalStr("@SYS13864"), 'Number');
        _labelMap.insert(literalStr("@GLS113019"), 'Note issue date'); // Conditionally used for date label field.
        _labelMap.insert(literalStr("@SYS128610"), 'Interest note date'); // Conditionally used for date label field.
        _labelMap.insert(literalStr("@SYS182387"), 'Account');
        _labelMap.insert(literalStr("@SYS77797"), 'Last interest date');
        _labelMap.insert(literalStr("@GLS113032"), 'Reference');

        // Document lines.
        _labelMap.insert(literalStr("@SYS15191"), 'Transaction');
        _labelMap.insert(literalStr("@SYS179622"), 'Amount');
        _labelMap.insert(literalStr("@SYS177514"), 'Balance');
        _labelMap.insert(literalStr("@SYS128214"), 'Interest from date');
        _labelMap.insert(literalStr("@SYS128215"), 'Interest to date');
        _labelMap.insert(literalStr("@SYS181895"), 'Days');
        _labelMap.insert(literalStr("@SYS128219"), 'Interest amount');
        _labelMap.insert(literalStr("@GLS223117"), 'Number of tax interest days');
        _labelMap.insert(literalStr("@GLS110929"), 'Tax interest');

        // Final price calculation.
        _labelMap.insert(literalStr("@SYS302694"), 'Interest total');
        _labelMap.insert(literalStr("@SYS25394"), 'Interest fee');
        _labelMap.insert(literalStr("@SYS22646"), 'Sales tax amount');
        _labelMap.insert(literalStr("@SYS9242"), 'Total');

        // Reference information.
        _labelMap.insert(literalStr("@SYS302693"), 'Transaction text references');

        // Fee information.
        _labelMap.insert(literalStr("@SYS302695"), 'Fee detail');
        _labelMap.insert(literalStr("@SYS14578"), 'Quantity');
        _labelMap.insert(literalStr("@SYS128994"), 'Sales tax amount in company currency');

        // Misc.
        _labelMap.insert(literalStr("@SYS77429"), 'Enterprise number');
        _labelMap.insert(literalStr("@SYS177345"), 'Amount');
        _labelMap.insert(literalStr("@GLS223107"), 'No value selected');
        _labelMap.insert(literalStr("@ApplicationSuite_Localization:SalesTaxAmount"), 'Sales tax amount');
        _labelMap.insert(literalStr("@SYS179596"), 'Total');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, CustInterestNoteTmp _currentLine)
    {
        if (_currentLine.IsTaxLine == NoYes::No)
        {
            this.addDataFieldsForLine_Trans(_addingRecord, _currentLine);
            transLineAdded = true;
        }
        else // if (_currentLine.IsTaxLine == NoYes::Yes)
        {
            this.addDataFieldsForLine_Tax(_addingRecord, _currentLine);
            taxLineAdded = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Tax</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_Tax(DocXmlRecord _addingRecord, CustInterestNoteTmp _currentLine)
    {
        // Rename the record from 'CustInterestNoteTmp' to 'InterestNoteLines_Tax'.
        _addingRecord.setRecordName(#InterestNoteLines_Tax);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Taxes'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the tax lines.
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, ShowTaxAmountMST));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxAmountMST));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxAmountTotal));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxBaseAmount));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxBaseQty));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxCode));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxExemptDescription));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxWriteCode));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxAmount));

        // Redundant field.
        //_addingRecord.addField(fieldStr(CustInterestNoteTmp, IsTaxLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Trans</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_Trans(DocXmlRecord _addingRecord, CustInterestNoteTmp _currentLine)
    {
        DocXmlRecord  dataRecord;

        // Rename the record from 'CustInterestNoteTmp' to 'InterestNoteLines'.
        _addingRecord.setRecordName(#InterestNoteLines_Trans);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Transactions'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields from the CustInterestNoteTmp table related to the transactions.
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, CustInterestTransLineNum));  // NOTE: Available from the July 2017 version.
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, InterestAmount));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, RemainAmount));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, BalanceAmount));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, InterestAmountInCurr));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, InterestPercent));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, InterestFromDate));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, InterestToDate));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, InterestDays));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TransDate));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, DueDate));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, Invoice));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TransTxt));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, InterestLanguageText));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, CurrencyCode));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, RefCount));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxInterestAmount));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, TaxInterestDays));

        // Redundant field.
        //_addingRecord.addField(fieldStr(CustInterestNoteTmp, IsTaxLine));

        // Add all 'line' fields from the CustInterestNoteTmp table related to the transaction lines.
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, LineNum));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, LineInterestAmountInCurr));
        _addingRecord.addField(fieldStr(CustInterestNoteTmp, ColumnHeading));

        // Redundant fields - never gets filled.
        //_addingRecord.addField(fieldStr(CustInterestNoteTmp, LineInvoiceAmount));
        //_addingRecord.addField(fieldStr(CustInterestNoteTmp, LineInterestAmount));
        //_addingRecord.addField(fieldStr(CustInterestNoteTmp, LineRemainAmount));

        // Add fields for payment slip that depends on Invoice Id, i.e. on a CustInterestNoteTmp record.
        if (!this.isRuntime() ||                              // If it's design time
            _currentLine.GiroType == PaymentStub::FIK751 ||   // or some of the following giro types.
            _currentLine.GiroType == PaymentStub::FIK752 ||
            _currentLine.GiroType == PaymentStub::Finnish)
        {
            dataRecord = _addingRecord.addChildRecord(_currentLine);
            dataRecord.setRecordName(#InterestNoteLines_TransPaymSlip);
            dataRecord.addField(fieldStr(CustInterestNoteTmp, PaymentId));
            dataRecord.addField(fieldStr(CustInterestNoteTmp, OcrField));
            dataRecord.addField(fieldStr(CustInterestNoteTmp, OcrLine_FI));
            dataRecord.addField(fieldStr(CustInterestNoteTmp, InvoiceReferenceNumberFI));
            
            // Setting the flag needed for Docentric NextGen.
            dataRecord.setSingleRecord(true);
        }

        // Add Extension fields defined on CustInterestNoteTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentLine, _addingRecord, true, extensionFieldsMetadata_CustInterestNoteTmp);


        // TODO: Add here additional fields from the related CustInterestTrans table (or some other tables).
        //CustInterestTrans custInterestTrans = this.custInterestTrans(_currentLine.CustInterestTransLineNum);
        //_addingRecord.addCalculatedField('ReferenceNumber', custInterestTrans.referenceNumber());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(CustInterestNoteTmp))
        {
            this.addDataFieldsForLine(_addingRecord, _rdpTableRecord);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        List             billingClassificationList;
        ListEnumerator   billingClassificationEnum;
        DocXmlRecord     billingClassificationDataRecord;
        Counter          i;
        str              billingClassificationFieldName, billingClassificationFieldValue;


        // Add all parameters except the BillingClassification parameter.
        // This parameter is of the List data type, and serialization the List data type
        // to XML List is not supported out-of-the-box by Docentric AX Framework.
        // That's why we will serialize it manually.
        super(_recordBuilderParameters);

        // For the BillingClassification parameter add a new data record.
        billingClassificationDataRecord = _recordBuilderParameters.addCalculatedRecord(#BillingClassification);

        billingClassificationList = reportContract.parmBillingClassification();
        if (billingClassificationList == null)
        {
            return;
        }

        // Add each element of the list that represents the BillingClassification
        // parameter as a separate data field.
        billingClassificationEnum = billingClassificationList.getEnumerator();
        i = 0;
        while (billingClassificationEnum.moveNext())
        {
            i++;
            billingClassificationFieldName = strFmt('%1_%2', #BillingClassification, i);
            billingClassificationFieldValue = billingClassificationEnum.current();
            if (billingClassificationFieldValue == "@GLS223107")
            {
                billingClassificationDataRecord.addCalculatedField(
                billingClassificationFieldName, 'No value selected');
            }
            else
            {
                billingClassificationDataRecord.addCalculatedField(
                billingClassificationFieldName, billingClassificationFieldValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Interest note DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord                headerDataRecord, emptyLineDataRecord;
        CustInterestNoteTmp         emptyLine;


        void addHeaderFields()
        {
            // We will skip adding the company related fields since we already have them
            // in the GeneralData data section at our disposal.
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, CompanyVATNum));
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, ShowCompanyVATNum));
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, PostalAddress));
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, CompanyPhone));
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, CompanyFax));
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, Giro));
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, RegNum));
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, Image));
            //headerDataRecord.addField(fieldStr(CustInterestNoteTmp, CompanyName));

            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, PostalAddress)).setFieldName('CompanyAddressTranslatedCountry');      //NOTE: Translated with DirUtility::replaceAddressTokenLanguage().
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, InterestNote));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNum));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, Status));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, Printed));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, InvoiceAmount));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, LastInterestNoteDate));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, InterestFee));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, FeeLanguageText));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, InterestCode));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, PaymentTerms));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, CustomerAddress));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, CompanyRegNum));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, InvoiceAmountDecimals));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, InvoiceAmountNoDecimals));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, FICreditorID_DK));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, GiroType));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AmountCheckId));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AmountNoDecimals_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AmountDecimals_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNo1_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, PaymentId2_PaymentId3_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, OcrLine_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, BankGroupIdName_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, BankZipCode_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, Description_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, PaymentRef1_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, PaymentRef2_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, BankAccountTable_AccountNum_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, BankAccountTable_Clearing_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, LayoutCode_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNo2_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, currencyCodeISO_CH));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNum1_FI));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNum2_FI));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNum4_FI));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNum6_FI));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNum3_FI));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, AccountNum5_FI));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, CustomerName));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, PaymentReferenceBE));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, InfoMessage));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, InterestNoteDate));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, BillingClassification));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, CustCurrencyCode));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, Enterpriseregister_NO));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, FormLetterRemarksTxt));
            headerDataRecord.addField(fieldStr(CustInterestNoteTmp, TaxInterestNoteDocument));
        }


        // (1) Add data records with fields representing the lines.
        super(_recordBuilder);


        // (2) Add all fields that belong to the header only once.
        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer).setSingleRecord(true);
        // Rename the record from 'CustInterestNoteTmp' to 'InterestNoteHeader'.
        headerDataRecord.setRecordName(#InterestNoteHeader);
        // Change the label of the record.
        //headerDataRecord.setRecordLabel('Interest note header'); // NOTE: use literalStr("@LabelID") instead.
        // Add all 'header' fields.
        addHeaderFields();


        // (3) Add Custom Fields defined on CustTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(CustTable::find(placeholder_custAccount), headerDataRecord);
        
        
        // (4) Add Extension fields defined on CustInterestNoteTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(headerTableBuffer, headerDataRecord, true, extensionFieldsMetadata_CustInterestNoteTmp);


        // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
        // by using the related data to headerTableBuffer (CustInterestNoteTmp) or reportContract.
        // For example, get the related CustInterestJour record and add additional data you need:
        //CustInterestJour custInterestJour = this.custInterestJour();
        //DocXmlRecord jourDataRecord = headerDataRecord.addChildRecord(custInterestJour);
        //jourDataRecord.addField(fieldStr(CustInterestJour, DefaultDimension));
        // Or, add the customer VAT number:
        //headerDataRecord.addCalculatedField('CustVATNum',
        //    CustTable::find(headerTableBuffer.AccountNum).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, headerTableBuffer.InterestNoteDate));

        
        // If this is design time, add main or tax lines if they haven't been already added.
        _recordBuilder.goToTopRecord();
        if (!this.isRuntime())
        {
            emptyLine.clear();

            // Main lines.
            if (!transLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Trans(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }

            // TaxLines.
            if (!taxLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Tax(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }
        }


        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        CustInterestNoteTmp currentRecord;

        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName != tableStr(CustInterestNoteTmp))
        {
            return;
        }

        currentRecord = _rdpTableRecord;

        if (headerTableBuffer.RecId == 0 && !currentRecord.IsTaxLine)
        {
            // Copy all fields from the first selected non-tax record since the majority of them
            // belong to the report header. We will add them as a separate node in the
            // generateXmlDataSource method.
            buf2Buf(currentRecord, headerTableBuffer);
            headerTableBuffer.RecId = currentRecord.RecId;

            // Store custom placeholders' values.
            placeholder_interestNoteNum = headerTableBuffer.InterestNote;
            placeholder_interestNoteDate = headerTableBuffer.InterestNoteDate;
            placeholder_custAccount = headerTableBuffer.AccountNum;
            placeholder_custName = headerTableBuffer.CustomerName;
            placeholder_paymentTerms = headerTableBuffer.PaymentTerms;
            placeholder_interestFromDate = headerTableBuffer.InterestFromDate;
            placeholder_interestToDate = headerTableBuffer.InterestToDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();
        journalRecId = reportContract.parmRecordId();

        transLineAdded = false;
        taxLineAdded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInterestJour</Name>
				<Source><![CDATA[
    protected CustInterestJour custInterestJour()
    {
        if (!journal)
        {
            journal = CustInterestJour::findRecId(journalRecId);
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInterestTrans</Name>
				<Source><![CDATA[
    protected CustInterestTrans custInterestTrans(real _custInterestTransLineNum)
    {
        CustInterestTrans custInterestTrans;

        // Initialize the journal record.
        this.custInterestJour();

        select custInterestTrans
        where custInterestTrans.InterestNote == journal.InterestNote &&
              custInterestTrans.LineNum == _custInterestTransLineNum;

        return custInterestTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInterestTransLine</Name>
				<Source><![CDATA[
    protected CustInterestTransLine custInterestTransLine(real _custInterestTransLineLineNum)
    {
        CustInterestTransLine custInterestTransLine;

        // Initialize the journal record.
        this.custInterestJour();

        custInterestTransLine = CustInterestTransLine::findByLineNumInterestNote(_custInterestTransLineLineNum, journal.InterestNote);

        return custInterestTransLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InterestNoteNum('InterestNoteNum')
    #define.InterestNoteDate('InterestNoteDate')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.PaymentTerms('PaymentTerms')
    #define.InterestFromDate('InterestFromDate')
    #define.InterestToDate('InterestToDate')

    [DocPlaceholderAttribute(#InterestNoteNum, 'IN - Interest Note Number'),
     DocPlaceholderAttribute(#InterestNoteDate, 'IN - Interest Note Date'),
     DocPlaceholderAttribute(#CustAccount, 'IN - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'IN - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'IN - Customer Contact Name'),
     DocPlaceholderAttribute(#InterestFromDate, 'IN - Interest From Date'),
     DocPlaceholderAttribute(#InterestToDate, 'IN - Interest To Date'),
     DocPlaceholderAttribute(#PaymentTerms, 'IN - Payment Terms')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InterestNoteNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InterestNoteNum, placeholder_interestNoteNum);

        // -- Placeholder @InterestNoteDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InterestNoteDate, placeholder_interestNoteDate);

        // -- Placeholder @InterestFromDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InterestFromDate, placeholder_interestFromDate);

        // -- Placeholder @InterestToDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InterestToDate, placeholder_interestToDate);

        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_custAccount);

        // -- Placeholder @PaymentTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentTerms, placeholder_paymentTerms);

        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, placeholder_custName);

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::custContactPersonName(placeholder_custAccount));


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_custAccount);
        _reportRunContext.archiveContract().setDocument(placeholder_interestNoteNum, placeholder_interestNoteDate);
        _reportRunContext.archiveContract().setJournal(this.custInterestJour().RecId, DocJournalType::CustInterestJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>