<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSalesConfirmDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocSalesConfirmDSP extends DocDataSourceProviderSrsProforma
{
    SalesConfirmContract     reportContract;
    boolean                  transLineAdded, taxLineAdded;
    SalesTable               salesTable;
    DocTableFieldsMetadata   extensionFieldsMetadata_SalesConfirmDetailsTmp = DocTableFieldsMetadata::construct(tableStr(SalesConfirmDetailsTmp));

    /* Variable used for custom placeholders */
    SalesConfirmHeaderTmp    header;


    #define.SalesConfirmHeader('SalesConfirmHeader')
    #define.SalesConfirmLines('SalesConfirmLines')
    #define.SalesConfirmTaxLines('SalesConfirmTaxLines')
    #define.DefaultDimensionField('FinancialDimensions')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Shipping information.
        _labelMap.insert(literalStr("@SYS344987"), 'Ship to:');

        // Document header.
        _labelMap.insert(literalStr("@SYS180816"), 'Giro');
        _labelMap.insert(literalStr("@SYS77429"), 'Enterprise number');
        _labelMap.insert(literalStr("@SYS13864"), 'Number');
        _labelMap.insert(literalStr("@SYS23989"), 'Requisition');
        _labelMap.insert(literalStr("@SYS12056"), 'Your ref.');
        _labelMap.insert(literalStr("@SYS8934"), 'Our ref.');

        // Document lines.
        _labelMap.insert(literalStr("@SYS6303"), 'Description');
        _labelMap.insert(literalStr("@SYS7813"), 'Discount percent');

        // Pagination
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');

        // Tax lines.
        _labelMap.insert(literalStr("@SYS10946"), 'Cash discount amount'); // Conditionally used for CashDiscAmount header field.
        _labelMap.insert(literalStr("@SYS99166"), 'Percent cash discount'); // Conditionally used for CashDiscAmount header field.
        _labelMap.insert(literalStr("@SYS22646"), 'Sales tax amount'); // Used for TaxAmount and TaxAmountMST header fields.

        // Final cost calculation.
        _labelMap.insert(literalStr("@SYS464"), 'Sales subtotal amount');
        _labelMap.insert(literalStr("@SYS6901"), 'Net amount');
        _labelMap.insert(literalStr("@SYS5878"), 'Sales tax');
        _labelMap.insert(literalStr("@SYS9242"), 'Total');

        // Misc.
        _labelMap.insert(literalStr("@SYS24699"), 'RMA number');
        _labelMap.insert(literalStr("@SYS80056"), 'Date');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    protected void addDataFieldsForHeader(DocXmlRecord _addingRecord, SalesConfirmHeaderTmp _header)
    {
        void addHeaderFields()
        {
            // Add all fields except the company related fields since we already have them
            // in the GeneralData data section at our disposal.
            _addingRecord.addAllFieldsExcept([
                fieldStr(SalesConfirmHeaderTmp, CompanyName),
                fieldStr(SalesConfirmHeaderTmp, CompanyAddress),
                fieldStr(SalesConfirmHeaderTmp, CompanyPhone),
                fieldStr(SalesConfirmHeaderTmp, CompanyTeleFax),
                fieldStr(SalesConfirmHeaderTmp, CompanyGiro),
                fieldStr(SalesConfirmHeaderTmp, CompanyCoRegNum),
                fieldStr(SalesConfirmHeaderTmp, CompanyLogo),
                fieldStr(SalesConfirmHeaderTmp, CompanyEnterpriseNumber),
                fieldStr(SalesConfirmHeaderTmp, CompanyBankAccountName),
                fieldStr(SalesConfirmHeaderTmp, CompanyBankAccountNum),
                fieldStr(SalesConfirmHeaderTmp, CompanyCommercialRegister),
                fieldStr(SalesConfirmHeaderTmp, CompanyCommercialRegisterInsetNumber),
                fieldStr(SalesConfirmHeaderTmp, CompanyCommercialRegisterSection),
                fieldStr(SalesConfirmHeaderTmp, CompanyEmail),
                fieldStr(SalesConfirmHeaderTmp, CompanyRegNum)
            ]);
        }
        _addingRecord.addField(fieldStr(SalesConfirmHeaderTmp, CompanyAddress)).setFieldName('CompanyAddressTranslatedCountry');      //NOTE: Translated with DirUtility::replaceAddressTokenLanguage().
        
        // Setting the flag needed for Docentric NextGen.
        _addingRecord.setSingleRecord(true);

        // (1) Rename the record from 'SalesConfirmHeaderTmp' to 'SalesConfirmHeader'.
        _addingRecord.setRecordName(#SalesConfirmHeader);
        // Change the label of the record if needed.
        //_addingRecord.setRecordLabel('Sales confirmation header'); // NOTE: Use literalStr("@LabelID") instead.

        // (2) Add all fields from the SalesConfirmHeaderTmp table.
        addHeaderFields();

        // (3) Add Sales order email and Customer primary email.
        _addingRecord.addCalculatedField('OrderEmail', salesTable.Email);
        CustTable custTable_OrderAccount = salesTable.custTable_CustAccount();
        _addingRecord.addCalculatedField('CustomerEmail', custTable_OrderAccount.email());
        // See the references to the Account field of the CustVendAccountMap map for the explanation.

        // (4) Add Custom Fields defined on SalesTable and CustTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(salesTable, _addingRecord);
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable_OrderAccount, _addingRecord);
        
        // (5) Add Financial dimensions.
        _addingRecord.addCalculatedFieldFromEdt(#DefaultDimensionField, extendedTypeStr(DimensionDefault), this.custConfirmJour().DefaultDimension);


        // NOTE: You don't have to add all Custom Fields but only specific ones:
        //DocCustomFieldsHelper::addCustomFieldsToDataRecord(['CustomFieldName1', 'CustomFieldName2'], salesTable, _addingRecord);
        //DocCustomFieldsHelper::addCustomFieldToDataRecord('CustomFieldName', salesTable, _addingRecord);


        // TODO: Add here additional fields (or records) to the single header record by using the related
        // data to the _header table buffer (SalesConfirmHeaderTmp) or reportContract.
        // For example, get the related CustInvoiceJour record and add additional data you need:
        //CustConfirmJour custConfirmJour = this.custConfirmJour();
        //DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custConfirmJour);
        //jourDataRecord.addField(fieldStr(CustConfirmJour, Payment));
        //jourDataRecord.addDisplayMethod(tableMethodStr(CustConfirmJour, paymentCondition));
        // Or, add the project name:
        //_addingRecord.addCalculatedField('ProjName', SalesTable::find(_header.SalesId).projTable().Name);


        /***------------------------------------------------------------------------------***/
        /***   QUICK TUTORIAL ON HOW TO ADD ADDITIONAL DATA. PLEASE UNCOMMENT AND TEST.   ***/
        /***------------------------------------------------------------------------------***/
        /*
        // NOTE: salesTable is a global variable initialized in the onSelectedRdpTableRecord() method.
        // (1) Add additional (calculated) field.
        _addingRecord.addCalculatedField('DeliveryPhone', salesTable.deliveryPhone());

        // (2) Add a child (table buffer based) record.
        LogisticsPostalAddress deliveryAddress = salesTable.deliveryAddress();
        DocXmlRecord deliveryAddressDataRecord = _addingRecord.addChildRecord(deliveryAddress);
        // Add all fields from this record.
        // deliveryAddressDataRecord.addAllFields();
        // Or add only particular fields, display methods or field groups.
        deliveryAddressDataRecord.addDisplayMethod(tableMethodStr(LogisticsPostalAddress, isEffective));
        deliveryAddressDataRecord.addField(fieldStr(LogisticsPostalAddress, City));
        deliveryAddressDataRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(LogisticsPostalAddress, Timezone));
        deliveryAddressDataRecord.addFieldGroup(tableFieldGroupStr(LogisticsPostalAddress, ContactLookup));

        // (3) Add another child (calculated) record but calculated.
        // Calculated records are not table buffer based so we can add to it only calculated fields.
        DocXmlRecord miscDataRecord = _addingRecord.addChildCalculatedRecord('Misc');
        // Add calculated field.
        ProjTable projTable = ProjTable::find(salesTable.ProjId);
        miscDataRecord.addCalculatedField('ProjName', projTable.Name);
        // Add child (table buffer based) record.
        CustTable custTable = CustTable::find(salesTable.InvoiceAccount);
        DocXmlRecord custTableDataRecord = miscDataRecord.addChildRecord(custTable);
        custTableDataRecord.addFieldGroup(tableFieldGroupStr(CustTable, Delivery));
        custTableDataRecord.addField(fieldStr(CustTable, InvoiceAddress));

        // (4) Add more than one child records, e.g. charges related to the header.
        // Note that the same method can be used for each line as well.
        this.addMarkupTrans(_addingRecord, salesTable);

        // (5) To add additional data from the related journal record, be aware of the proforma scenario, when during report execution
        // the journal record is only temporarily created, the SSRS RDP tables (e.g. SalesConfirmHeaderTmp) get filled, and afterwards
        // the journal record is deleted and is not available at the moment of executing this method, i.e. Docentric DSP class.
        // That's why each of Docentric DSP class for a report supporting the proforma scenario such as Sales Order Confirmation, Sales Invoice, etc.
        // extends the DocDataSourceProviderSrsProforma class, which stores in proforma scenario already deleted journal and journal line records.
        // You can get them by invoking the this.custConfirmJour() and this.custConfirmTrans() methods.
        CustConfirmJour custConfirmJour = this.custConfirmJour();
        DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custConfirmJour);
        jourDataRecord.addField(fieldStr(CustConfirmJour, Payment));
        jourDataRecord.addDisplayMethod(tableMethodStr(CustConfirmJour, paymentCondition));
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupTrans</Name>
				<Source><![CDATA[
    protected void addMarkupTrans(DocXmlRecord _dataRecord, Common _tableRecord)
    {
        void addMarkupTransDataRecord(MarkupTrans _markupTrans)
        {
            DocXmlRecord markupTransDataRecord = _dataRecord.addChildRecord(_markupTrans);
            markupTransDataRecord.addField(fieldStr(MarkupTrans, LineNum));

            markupTransDataRecord.addField(fieldStr(MarkupTrans, MarkupCode));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, Txt));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, Value));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, CurrencyCode));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, TaxGroup));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, TaxItemGroup));
        }

        MarkupTrans markupTrans;
        boolean markupTransDataRecordAdded = false;

        while select markupTrans
              where markupTrans.TransRecId == _tableRecord.RecId &&
                    markupTrans.TransTableId == _tableRecord.TableId &&
                    !markupTrans.IsDeleted
        {
            addMarkupTransDataRecord(markupTrans);
            markupTransDataRecordAdded = true;
        }

        // Add an empty record but only at design time, if no markup record exists.
        if (!this.isRuntime() && !markupTransDataRecordAdded)
        {
            markupTrans.clear();
            addMarkupTransDataRecord(markupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, SalesConfirmDetailsTmp _currentLine)
    {
        if (_currentLine.ConfirmTransOrTax)
        {
            this.addDataFieldsForLine_Trans(_addingRecord, _currentLine);
            transLineAdded = true;
        }
        else
        {
            this.addDataFieldsForLine_Tax(_addingRecord, _currentLine);
            taxLineAdded = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Tax</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_Tax(DocXmlRecord _addingRecord, SalesConfirmDetailsTmp _currentLine)
    {
        // Rename the record from 'SalesConfirmDetailsTmp' to 'SalesConfirmTaxLines'.
        _addingRecord.setRecordName(#SalesConfirmTaxLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Taxes'); // NOTE: use literalStr("@LabelID") instead.

        // Add all fields related to the tax lines.
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxCode));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, PrintCode));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxBaseAmount));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxBaseQty));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxAmount));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxAmountMST));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxExemptDescription));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxBaseAmountMST));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, Amount));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, CashDiscAmount));

        //-- Redundant fields.
        //_addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, ConfirmTransOrTax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Trans</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_Trans(DocXmlRecord _addingRecord, SalesConfirmDetailsTmp _currentLine)
    {
        void addLineFields()
        {
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, CurrencyCode));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, DiscAmount));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, DiscPercent));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, DlvDate));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, ExternalItemId));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, InventDimPrint));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, InventDimProduct));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, ItemId));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, LineAmount));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, LineHeader));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, Name));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, Notes));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, PdsCWQty));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, PdsCWUnitId));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, PrintCode));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, Qty));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, SalesPrice));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, SalesUnitTxt));

            /* The InventDimPrint field unpacked into the InventoryDimensions records */
            // Uncomment the following code to add InventoryDimensions data records containing the corresponding inventory dimension fields.
            //DocInventDimHelper::addInventoryDimensionsRecords(_addingRecord, InventReportDimHistoryLogType::SalesConfirm,
            //    this.custConfirmTrans(_currentLine.CustConfirmTrans).InventTransId, this.custConfirmJour().ConfirmId);
            
            //-- Redundant fields.
            //_addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, JournalRecId));
            //_addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, ConfirmTransOrTax));
        }


        // Rename the record from 'SalesConfirmDetailsTmp' to 'SalesConfirmLines'.
        _addingRecord.setRecordName(#SalesConfirmLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Sales confirm lines'); // NOTE: use literalStr("@LabelID") instead.

        // Add all fields from the SalesConfirmDetailsTmp table related to the transaction data.
        addLineFields();                          
        
        // Add Extension fields defined on SalesConfirmDetailsTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentLine, _addingRecord, true, extensionFieldsMetadata_SalesConfirmDetailsTmp);

        // TODO: Add here additional fields from the related CustConfirmTrans table (or some other tables).
        //CustConfirmTrans custConfirmTrans = this.custConfirmTrans(_currentLine.CustConfirmTrans);
        //_addingRecord.addCalculatedField('LineNum', custConfirmTrans.LineNum);
        //_addingRecord.addCalculatedField('OrigSalesId', custConfirmTrans.OrigSalesId);
        // You can also add charges for the corresponding salesLine.
        //SalesLine salesLine = custConfirmTrans.salesLine();
        //this.addMarkupTrans(_addingRecord, salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(SalesConfirmHeaderTmp))
        {
            this.addDataFieldsForHeader(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(SalesConfirmDetailsTmp))
        {
            this.addDataFieldsForLine(_addingRecord, _rdpTableRecord);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Sales order confirmation DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_SalesConfirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custConfirmJour</Name>
				<Source><![CDATA[
    protected CustConfirmJour custConfirmJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = CustConfirmJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custConfirmTrans</Name>
				<Source><![CDATA[
    protected CustConfirmTrans custConfirmTrans(RecId _custConfirmTransRecId)
    {
        CustConfirmTrans custConfirmTrans;

        if (this.isProforma())
        {
            custConfirmTrans = this.getProformaTransLine(_custConfirmTransRecId);
        }
        else
        {
            custConfirmTrans = CustConfirmTrans::findRecId(_custConfirmTransRecId);
        }

        return custConfirmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord                emptyLineDataRecord;
        SalesConfirmDetailsTmp      emptyLine;


        // Add the single data record representing the header and add multiple records representing the lines.
        super(_recordBuilder);

        // If this is design time, add main or tax lines if they haven't been already added.
        _recordBuilder.goToTopRecord();
        if (!this.isRuntime())
        {
            emptyLine.clear();

            // Main lines.
            if (!transLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Trans(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }

            // TaxLines.
            if (!taxLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Tax(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }
        }

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();

        transLineAdded = false;
        taxLineAdded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.SalesId('SalesId')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.CustRef('CustRef')
    #define.DeliveryName('DeliveryName')
    #define.ConfirmDate('ConfirmDate')
    #define.ConfirmDocNum('ConfirmDocNum')
    #define.SalesTakerName('SalesTakerName')
    #define.SalesTakerImage('SalesTakerImage')
    #define.OrderEmail('OrderEmail')
    #define.SalesTakerImageBase64('SalesTakerImageBase64')

    [DocPlaceholderAttribute(#SalesId, 'SO - Sales ID'),
     DocPlaceholderAttribute(#CustAccount, 'SO - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'SO - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'SO - Contact Name'),
     DocPlaceholderAttribute(#CustRef, 'SO - Customer Reference'),
     DocPlaceholderAttribute(#DeliveryName, 'SO - Delivery Name'),
     DocPlaceholderAttribute(#ConfirmDate, 'SO - Confirm Date'),
     DocPlaceholderAttribute(#ConfirmDocNum, 'SO - Confirm Document Number'),
     DocPlaceholderAttribute(#SalesTakerName, 'SO - Sales Taker Name'),
     DocPlaceholderImageAttribute(#SalesTakerImage, 'SO - Sales Taker Picture', 80, 80),
     DocPlaceholderImageBase64Attribute(#SalesTakerImageBase64, 'SO - Sales Taker Picture Base64', 'jpeg', 80, 80),
     DocPlaceholderAttribute(#OrderEmail, 'SO - Sales Order Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding salesTable. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(salesTable);

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
               
        // Replace custom placeholders:
        // -- Placeholder @SalesId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesId, salesTable.SalesId);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, salesTable.CustAccount);

        // -- Placeholder @CustRef@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustRef, header.CustomerRef);

        // -- Placeholder @DeliveryName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryName, header.DeliveryName);

        // -- Placeholder @ConfirmDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ConfirmDate, header.ConfirmDate);

        // -- Placeholder @ConfirmDocNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ConfirmDocNum, header.ConfirmDocNum);

        // -- Placeholder @SalesTakerName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesTakerName, HcmWorker::find(this.custConfirmJour().WorkerSalesTaker).name());

        // -- Placeholder @OrderEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderEmail, salesTable.Email);

        // -- Placeholder @CustName@
        DirPartyTable partyTable;
        CustTable custTable;
        select firstonly Name from partyTable exists join custTable
            where custTable.Party == partyTable.RecId && custTable.AccountNum == salesTable.CustAccount;
        str customerName = partyTable.Name;
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, customerName);

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::contactPersonName(salesTable.ContactPersonId));

        // For image placeholders first check if Email is the currently selected print destination.
        // NOTE: Remove this condition if it's not true:
        if (_reportRunContext.parmPrintDestination() == DocPrintDestination::Email)
        {
            /*** Replace a custom placeholder image ***/
            // -- Placeholder @SalesTakerImage@
            if (DocPlaceholderManager::findPlaceholder(_reportRunContext.emailPrintDestSettings().parmEmailBody(), #SalesTakerImage))
            {
                HcmWorker worker = HcmWorker::find(this.custConfirmJour().WorkerSalesTaker);
                if (worker)
                {
                    Bitmap workerImage = worker.personImageOrNull_DC();
                    if (workerImage)
                    {
                        placeholderMng.replacePlaceholderImage(#SalesTakerImage, workerImage);
                    }
                }
            }

            /*** Replace a custom placeholder which represents image as Base64 encoded string ***/
            // -- Placeholder @SalesTakerImageBase64@
            if (DocPlaceholderManager::findPlaceholder(_reportRunContext.emailPrintDestSettings().parmEmailBody(), #SalesTakerImageBase64))
            {
                HcmWorker worker = HcmWorker::find(this.custConfirmJour().WorkerSalesTaker);
                if (worker)
                {
                    Bitmap workerImage = worker.personImageOrNull_DC();
                    if (workerImage)
                    {
                        str workerImageBase64 = DocGlobalHelper::convertToBase64String(DocGlobalHelper::convertContainerToBytes(workerImage));
                        if (workerImageBase64)
                        {
                            placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesTakerImageBase64, workerImageBase64);
                        }
                    }
                }
            }
        }


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(salesTable.CustAccount);
        _reportRunContext.archiveContract().setSalesId(salesTable.SalesId);
        _reportRunContext.archiveContract().setDocument(header.ConfirmDocNum, header.ConfirmDate);
        _reportRunContext.archiveContract().setJournal(this.custConfirmJour().RecId, DocJournalType::CustConfirmJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(SalesConfirmHeaderTmp))
        {
            // Store data used for custom placeholders.
            header = _rdpTableRecord.data();
            salesTable = SalesTable::find(header.SalesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// -- When to use this method?
    /// If you want to quickly generate DDSP for a sample journal record.
    /// -- How to run it?
    /// Set up this class as the startup object in your project.
    /// -- NOTE
    /// Please verify all TODOs in the method and make changes if needed.
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    public static void main(Args _args)
    {
        CustConfirmJour custConfirmJour;

        // TODO: (1) Select the sample journal record.
        select firstonly custConfirmJour;

        // Add it as the context record, which is going to be printed.
        Args args = new Args();
        args.record(custConfirmJour);

        SalesConfirmController controller = SalesConfirmController::construct();

        // TODO: (2) Change the name SSRS Report Design if needed.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderConfirmation).getDefaultReportFormat());
        controller.parmArgs(args);
        
        SalesConfirmContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmRecordId(custConfirmJour.RecId);
        rdpContract.parmTableId(custConfirmJour.TableId);

        // Set the Docentric Generate DS print destination settings.
        SRSPrintDestinationSettings pds = controller.parmReportContract().parmPrintSettings();
        pds.printMediumType(SRSPrintMediumType::GenerateDataSource_DC);

        // TODO: (3) Set Design and Preview languages if needed.
        pds.parmGenerateDSPrintDestSettings_DC().parmLanguageId(custConfirmJour.LanguageId);
        pds.parmGenerateDSPrintDestSettings_DC().parmPreviewLanguages('fr,de,it,es');

        // Initalize SalesConfirmJournalPrint class instance because there is no other way
        // NOT to use Print Management.
        SalesConfirmJournalPrint salesConfirmJournalPrint = SalesConfirmJournalPrint::construct();
        salesConfirmJournalPrint.parmPrintFormletter(NoYes::Yes);
        salesConfirmJournalPrint.parmUsePrintManagement(false);
        salesConfirmJournalPrint.parmPrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack());
        
        args.caller(salesConfirmJournalPrint);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::OriginalPrint);

        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>