<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocSalesPackingSlipDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocSalesPackingSlipDSP extends DocDataSourceProviderSrsProforma
{
    SalesPackingSlipContract    reportContract;
    CustPackingSlipVersion      custPackingSlipVersion;
    SalesTable                  salesTable;

    /* Variables for custom placeholders */
    str placeholder_packingSlipId;
    str placeholder_salesId;
    str placeholder_custAccount;
    str placeholder_custRef;
    str placeholder_deliveryName;
    date placeholder_deliveryDate;

    #define.DefaultDimensionField('FinancialDimensions')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Addressing information.
        _labelMap.insert(literalStr("@SYS344987"), 'Ship to:');
        _labelMap.insert(literalStr("@SYS344988"), 'Bill to:');

        // Company information.
        _labelMap.insert(literalStr("@SYS26946"), 'VAT'); // Tax exempt number
        _labelMap.insert(literalStr("@SYS77429"), 'Enterprise number');

        // Pagination.
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');

        // Document header.
        _labelMap.insert(literalStr("@SYS13864"), 'Number');
        _labelMap.insert(literalStr("@SYS23989"), 'Requisition');
        _labelMap.insert(literalStr("@SYS12056"), 'Your ref.');
        _labelMap.insert(literalStr("@SYS8934"), 'Our ref.');
        _labelMap.insert(literalStr("@SYS177275"), 'Customer account');

        // Document lines.
        _labelMap.insert(literalStr("@SYS80470"), 'Description');
        _labelMap.insert(literalStr("@SYS16279"), 'Ordered');
        _labelMap.insert(literalStr("@PDS1"), 'CW quantity');
        _labelMap.insert(literalStr("@SYS1316"), 'Delivered');
        _labelMap.insert(literalStr("@SYS10197"), 'Remaining quantity');

        // Backorder lines.
        _labelMap.insert(literalStr("@SYS54557"), 'Backorder');
        _labelMap.insert(literalStr("@SYS6303"), 'Description');
        
        // Carrier information.
        _labelMap.insert(literalStr("@SYS333412"), 'Contractor');
        _labelMap.insert(literalStr("@SYS333406"), 'Loader');
        _labelMap.insert(literalStr("@SYS333407"), 'Owner');
        
        // Receipt information.
        _labelMap.insert(literalStr("@SYS101277"), 'Receipt');
        _labelMap.insert(literalStr("@SYS335007"), 'Place and date');
        _labelMap.insert(literalStr("@SYS72785"), 'Compiler');
        _labelMap.insert(literalStr("@SYS50950"), 'Signature');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(SalesPackingSlipHeaderTmp))
        {
            /* COMPANY RELATED DATA */
            // NOTE: The company data are excluded since we have them in the GeneralData data section.
            _addingRecord.addAllFieldsExcept([
                fieldStr(SalesPackingSlipHeaderTmp, CompanyName),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyAddress),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyPhone),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyTeleFax),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyGiro),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyCoRegNum),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyLogo),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyEnterpriseNumber),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyBankAccountName),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyBankAccountNum),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyBankAccountRegNum),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyEnterpriseCode),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyCommercialRegister),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyCommercialRegisterInsetNumber),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyCommercialRegisterSection),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyEmail),
                fieldStr(SalesPackingSlipHeaderTmp, CompanyRegNum)
            ]);

            _addingRecord.addField(fieldStr(SalesPackingSlipHeaderTmp, CompanyAddress)).setFieldName('CompanyAddressTranslatedCountry');      //NOTE: Translated with DirUtility::replaceAddressTokenLanguage().

            // Setting the flag needed for Docentric NextGen
            _addingRecord.setSingleRecord(true);

            //-- Add Sales order email and Customer primary email.
            _addingRecord.addCalculatedField('OrderEmail', salesTable.Email);
            CustTable custTable_OrderAccount = salesTable.custTable_CustAccount();
            _addingRecord.addCalculatedField('CustomerEmail', custTable_OrderAccount.email());
            // See the references to the Account field of the CustVendAccountMap map for the explanation.

            //-- Add Custom Fields defined on SalesTable and CustTable, if any.
            // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(salesTable, _addingRecord);
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable_OrderAccount, _addingRecord);

            //-- Add Financial dimensions.
            _addingRecord.addCalculatedFieldFromEdt(#DefaultDimensionField, extendedTypeStr(DimensionDefault), this.custPackingSlipJour().DefaultDimension);
            

            // TODO: Add here additional fields (or records) to the single header record by using the related
            // data to the _rdpTableRecord table buffer (SalesPackingSlipHeaderTmp) or reportContract.
            // For example, get the related CustPackingSlipJour record and add additional data you need:
            //CustPackingSlipJour custPackingSlipJour = this.custPackingSlipJour();
            //DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custPackingSlipJour);
            //jourDataRecord.addField(fieldStr(CustPackingSlipJour, DefaultDimension));
            //jourDataRecord.addDisplayMethod(tableMethodStr(CustPackingSlipJour, deliveryDateTime));
            // Or, add the project name:
            //SalesPackingSlipHeaderTmp salesPackingSlipHeaderTmp = _rdpTableRecord;
            //_addingRecord.addCalculatedField('ProjName', SalesTable::find(salesPackingSlipHeaderTmp.SalesId).projTable().Name);
        }

        else if (_rdpTableName == tableStr(SalesPackingSlipDetailsTmp))
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);

            // TODO: Add here additional fields from the related CustPackingSlipTrans table (or some other tables).
            //SalesPackingSlipDetailsTmp salesPackingSlipDetailsTmp = _rdpTableRecord;
            //CustPackingSlipTrans custPackingSlipTrans = this.custPackingSlipTrans(salesPackingSlipDetailsTmp.CustPackingSlipTrans);
            //_addingRecord.addCalculatedField('LineNum', custPackingSlipTrans.LineNum);
        }

        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Sales order packing slip DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_SalesPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPackingSlipJour</Name>
				<Source><![CDATA[
    protected CustPackingSlipJour custPackingSlipJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                // Note: journalRecId == reportContract.parmRecordId()
                if (reportContract.parmTableId() == tableNum(CustPackingSlipJour))
                {
                    journal = CustPackingSlipJour::findRecId(journalRecId);
                }
                else if (reportContract.parmTableId() == tableNum(CustPackingSlipVersion))
                {
                    journal = CustPackingSlipJour::findRecId(CustPackingSlipVersion::find(journalRecId).CustPackingSlipJour);
                }
                else
                {
                    throw error(strFmt('Unexpected table (%1) in the method (%2)', tableId2Name(reportContract.parmTableId()), funcName()));
                }
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPackingSlipVersion</Name>
				<Source><![CDATA[
    protected CustPackingSlipVersion custPackingSlipVersion()
    {
        if (!custPackingSlipVersion)
        {
            if (this.isProforma())
            {
                custPackingSlipVersion = this.getProformaPackingSlipVersion();
            }
            else
            {
                // Note: journalRecId == reportContract.parmRecordId()
                if (reportContract.parmTableId() == tableNum(CustPackingSlipJour))
                {
                    custPackingSlipVersion = CustPackingSlipVersion::findLatest(journalRecId);
                }
                else if (reportContract.parmTableId() == tableNum(CustPackingSlipVersion))
                {
                    custPackingSlipVersion = CustPackingSlipVersion::find(journalRecId);
                }
                else
                {
                    throw error(strFmt('Unexpected table (%1) in the method (%2)', tableId2Name(reportContract.parmTableId()), funcName()));
                }
            }
        }

        return custPackingSlipVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPackingSlipTrans</Name>
				<Source><![CDATA[
    protected CustPackingSlipTrans custPackingSlipTrans(RecId _custPackingSlipTransRecId)
    {
        CustPackingSlipTrans custPackingSlipTrans;

        if (this.isProforma())
        {
            custPackingSlipTrans = this.getProformaTransLine(_custPackingSlipTransRecId);
        }
        else
        {
            custPackingSlipTrans = CustPackingSlipTrans::findRecId(_custPackingSlipTransRecId);
        }

        return custPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPackingSlipTransHistory</Name>
				<Source><![CDATA[
    protected CustPackingSlipTransHistory custPackingSlipTransHistory(RecId _custPackingSlipTransRecId)
    {
        CustPackingSlipTransHistory custPackingSlipTransHistory;

        if (this.isProforma())
        {
            custPackingSlipTransHistory = this.getProformaPackingSlipTransHistoryLine(_custPackingSlipTransRecId);
        }
        else
        {
            custPackingSlipTransHistory = CustPackingSlipTransHistory::find(_custPackingSlipTransRecId);
        }

        return custPackingSlipTransHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.PackingSlipId('PackingSlipId')
    #define.SalesId('SalesId')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.CustRef('CustRef')
    #define.DeliveryName('DeliveryName')
    #define.DeliveryDate('DeliveryDate')
    #define.OrderEmail('OrderEmail')
    
    [DocPlaceholderAttribute(#PackingSlipId, 'SPS - Packing Slip ID'),
     DocPlaceholderAttribute(#SalesId, 'SPS - Sales ID'),
     DocPlaceholderAttribute(#CustAccount, 'SPS - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'SPS - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'SPS - Contact Name'),
     DocPlaceholderAttribute(#CustRef, 'SPS - Customer Reference'),
     DocPlaceholderAttribute(#DeliveryName, 'SPS - Delivery Name'),
     DocPlaceholderAttribute(#DeliveryDate, 'SPS - Delivery Date'),
     DocPlaceholderAttribute(#OrderEmail, 'SPS - Sales Order Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding salesTable. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(salesTable);

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @PackingSlipId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PackingSlipId, placeholder_packingSlipId);

        // -- Placeholder @SalesId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesId, placeholder_salesId);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_custAccount);

        // -- Placeholder @CustRef@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustRef, placeholder_custRef);

        // -- Placeholder @DeliveryName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryName, placeholder_deliveryName);

        // -- Placeholder @DeliveryDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryDate, placeholder_deliveryDate);

        // -- Placeholder @OrderEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderEmail, salesTable.Email);

        // -- Placeholder @CustName@
        DirPartyTable   partyTable;
        CustTable       custTable;
        select firstonly Name from partyTable exists join custTable
                where custTable.Party == partyTable.RecId && custTable.AccountNum == placeholder_custAccount;
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, partyTable.Name);

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::contactPersonName(salesTable.ContactPersonId));


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_custAccount);
        _reportRunContext.archiveContract().setSalesId(placeholder_salesId);
        _reportRunContext.archiveContract().setDocument(placeholder_packingSlipId, placeholder_deliveryDate);
        _reportRunContext.archiveContract().setJournal(this.custPackingSlipJour().RecId, DocJournalType::CustPackingSlipJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(SalesPackingSlipHeaderTmp))
        {
            SalesPackingSlipHeaderTmp header = _rdpTableRecord;

            // Store custom placeholders' values.
            placeholder_custRef = header.CustomerRef;
            placeholder_deliveryName = header.DeliveryName;
            placeholder_deliveryDate = header.DeliveryDate;
            placeholder_packingSlipId = header.PackingSlipId;
            placeholder_salesId = header.SalesId;
            placeholder_custAccount = header.OrderAccount;

            salesTable = SalesTable::find(header.SalesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// -- When to use this method?
    /// If you want to quickly generate DDSP for a sample journal record.
    /// -- How to run it?
    /// Set up this class as the startup object in your project.
    /// -- NOTE
    /// Please verify all TODOs in the method and make changes if needed.
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    public static void main(Args _args)
    {
        CustPackingSlipJour custPackingSlipJour;

        // TODO: (1) Select the sample journal record.
        select firstonly custPackingSlipJour;

        // Add it as the context record, which is going to be printed.
        Args args = new Args();
        args.record(custPackingSlipJour);

        SalesPackingSlipController controller = SalesPackingSlipController::construct();

        // TODO: (2) Change the name SSRS Report Design if needed.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderPackingSlip).getDefaultReportFormat());
        controller.parmArgs(args);
        
        SalesPackingSlipContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmRecordId(custPackingSlipJour.RecId);
        rdpContract.parmTableId(custPackingSlipJour.TableId);

        // Set the Docentric Generate DS print destination settings.
        SRSPrintDestinationSettings pds = controller.parmReportContract().parmPrintSettings();
        pds.printMediumType(SRSPrintMediumType::GenerateDataSource_DC);

        // TODO: (3) Set Design and Preview languages if needed.
        pds.parmGenerateDSPrintDestSettings_DC().parmLanguageId(custPackingSlipJour.LanguageId);
        pds.parmGenerateDSPrintDestSettings_DC().parmPreviewLanguages('fr,de,it,es');

        // Initalize SalesPackingSlipJournalPrint class instance because there is no other way
        // NOT to use Print Management.
        SalesPackingSlipJournalPrint salesPackingSlipJournalPrint = SalesPackingSlipJournalPrint::construct();
        salesPackingSlipJournalPrint.parmPrintFormletter(NoYes::Yes);
        salesPackingSlipJournalPrint.parmUsePrintManagement(false);
        salesPackingSlipJournalPrint.parmPrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack());

        args.caller(salesPackingSlipJournalPrint);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::OriginalPrint);

        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>