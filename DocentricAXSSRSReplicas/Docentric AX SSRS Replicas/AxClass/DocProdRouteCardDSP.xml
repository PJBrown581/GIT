<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocProdRouteCardDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocProdRouteCardDSP extends DocDataSourceProviderSrsReporting
{
    ProdRouteCardTmp headerTableBuffer;     // used for placeholders;
    boolean multipleProdOrders = false;
    DocTableFieldsMetadata extensionFieldsMetadata_ProdRouteCardTmp = DocTableFieldsMetadata::construct(tableStr(ProdRouteCardTmp));

    #define.ProdRouteCardHeader('RouteCardHeader')
    #define.ProdRouteCardLines('RouteCardLines')
    #define.ProdRouteCardLineDetails('RouteCardLineDetails')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Production route card DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected DocXmlRecord addHeader(DocXmlRecordBuilder _recordBuilder, ProdRouteCardTmp _currentRecord)
    {
        // Add all fields that belong to the header only once.
        DocXmlRecord headerDataRecord = _recordBuilder.addRecord(_currentRecord);
        // Rename the record from 'ProdRouteCardTmp' to 'RouteCardHeader'.
        headerDataRecord.setRecordName(#ProdRouteCardHeader);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Route card header'); // NOTE: use literalStr("@LabelID") instead.
        // Add the 'Header fields'.
        headerDataRecord.addFieldGroup(tableFieldGroupStr(ProdRouteCardTmp, HeaderFields_DR));

        // Add Extension fields defined on ProdRouteCardTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentRecord, headerDataRecord, true, extensionFieldsMetadata_ProdRouteCardTmp);

        return headerDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    protected void addLine(DocXmlRecord _addingRecord, ProdRouteCardTmp _currentRecord)
    {
        // Rename the record from 'ProdRouteCardTmp' to 'RouteCardLines'.
        _addingRecord.setRecordName(#ProdRouteCardLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Route card lines'); // NOTE: use literalStr("@LabelID") instead.

        // Add 'Line fields'.
        _addingRecord.addFieldGroup(tableFieldGroupStr(ProdRouteCardTmp, LineFields_DR));

        // Add fields with proper date-time format for use in a Docentric report template
        utcdatetime fromDateTime = DateTimeUtil::newDateTime(_currentRecord.FromDate, _currentRecord.FromTime, DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime toDateTime = DateTimeUtil::newDateTime(_currentRecord.ToDate, _currentRecord.ToTime, DateTimeUtil::getUserPreferredTimeZone());

        _addingRecord.addCalculatedField('FromDateTime', fromDateTime);
        _addingRecord.addCalculatedField('ToDateTime', toDateTime);        

        // Add Extension fields defined on ProdRouteCardTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentRecord, _addingRecord, true, extensionFieldsMetadata_ProdRouteCardTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineDetails</Name>
				<Source><![CDATA[
    protected void addLineDetails(DocXmlRecord _addingRecord, ProdRouteCardTmp _currentRecord)
    {
        // Rename the record from 'ProdRouteCardTmp' to 'RouteCardLineDetails'.
        _addingRecord.setRecordName(#ProdRouteCardLineDetails);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Route card line details'); // NOTE: use literalStr("@LabelID") instead.

        // Add 'Line details fields'.
        _addingRecord.addFieldGroup(tableFieldGroupStr(ProdRouteCardTmp, LineDetailFields_DR));

        // TODO: Add here all your custom (extension) 'line detail' fields from the ProdRouteCardTmp table, if any.
        // For example:
        //_addingRecord.addField(fieldStr(ProdRouteCardTmp, YourCustomFieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        // Standard mechanism is replaced by custom DDSP generation
        //super(_recordBuilder);    // skip standard code and fill the datasource from scratch

        DocXmlRecord headerDataRecord;
        DocXmlRecord lineDataRecord;
        DocXmlRecord lineDetailsDataRecord;

        ProdRouteCardDP   rdp = this.getSrsRdpClassRunningInstance();
        ProdRouteCardTmp  prodRouteCardTmp = rdp.getProdRouteCardTmp();

        str prodId = '';
        str cardNo = '';
        int oprNum = -1;
        int oprPriority = -1;
        boolean isHeaderAdded = false;

        while select prodRouteCardTmp
            order by prodRouteCardTmp.ProdId, prodRouteCardTmp.CardNo, prodRouteCardTmp.OprNum, prodRouteCardTmp.OprPriority
        {
            // Add header - key is ProdId + CardNo
            if (prodId != prodRouteCardTmp.ProdId || cardNo != prodRouteCardTmp.CardNo)
            {
                // Fill buffer for placeholders
                if (!prodId && !cardNo)
                {
                    buf2Buf(prodRouteCardTmp, headerTableBuffer);
                }
                else
                {
                    multipleProdOrders = true;
                }

                prodId = prodRouteCardTmp.ProdId;
                cardNo = prodRouteCardTmp.CardNo;
                isHeaderAdded = true;

                headerDataRecord = this.addHeader(_recordBuilder, prodRouteCardTmp);
            }

            // Add lines
            if (isHeaderAdded || (oprNum != prodRouteCardTmp.OprNum || oprPriority != prodRouteCardTmp.OprPriority))
            {
                isHeaderAdded = false;
                oprNum = prodRouteCardTmp.OprNum;
                oprPriority = prodRouteCardTmp.OprPriority;

                DocGlobalHelper::assert(headerDataRecord != null);
                lineDataRecord = headerDataRecord.addChildRecord(prodRouteCardTmp);
                this.addLine(lineDataRecord, prodRouteCardTmp);
            }

            // Add line details
            if (lineDataRecord)
            {
                lineDetailsDataRecord = lineDataRecord.addChildRecord(prodRouteCardTmp);
                this.addLineDetails(lineDetailsDataRecord, prodRouteCardTmp);
            }

            _recordBuilder.goToTopRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.ProdId('ProdId')
    #define.ItemId('ItemId')
    #define.ItemName('ItemName')
    #define.RefNumber('RefNumber')
    #define.RefName('RefName')
    #define.StartedDate('StartedDate')
    #define.DeliveryDate('DeliveryDate')

    [DocPlaceholderAttribute(#ProdId, 'RC - Prod ID'),
     DocPlaceholderAttribute(#ItemId, 'RC - Item ID'),
     DocPlaceholderAttribute(#ItemName, 'RC - Item Name'),
     DocPlaceholderAttribute(#RefNumber, 'RC - Reference Number'),
     DocPlaceholderAttribute(#RefName, 'RC - Reference Name'),
     DocPlaceholderAttribute(#StartedDate, 'RC - Started Date'),
     DocPlaceholderAttribute(#DeliveryDate, 'RC - Delivery Date')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ProdId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProdId, multipleProdOrders ? DocConstantDSP::MULTIPLE : headerTableBuffer.ProdId);
        
        // -- Placeholder @ItemId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemId, multipleProdOrders ? DocConstantDSP::MULTIPLE : headerTableBuffer.ItemId);

        // -- Placeholder @ItemName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemName, multipleProdOrders ? DocConstantDSP::MULTIPLE : headerTableBuffer.Name);

        // -- Placeholder @RefNumber@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefNumber, multipleProdOrders ? DocConstantDSP::MULTIPLE : headerTableBuffer.InventRefId);

        // -- Placeholder @RefName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefName, multipleProdOrders ? DocConstantDSP::MULTIPLE : headerTableBuffer.ReferenceName);

        // -- Placeholder @StartedDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#StartedDate, multipleProdOrders ? dateNull() : headerTableBuffer.StUpDate);

        // -- Placeholder @DeliveryDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryDate, multipleProdOrders ? dateNull() : headerTableBuffer.DlvDate);

        // Fill the Print archive contract.
        if (multipleProdOrders)
        {
            _reportRunContext.archiveContract().setProdId('');
        }
        else
        {
            _reportRunContext.archiveContract().setProdId(headerTableBuffer.ProdId);
            _reportRunContext.archiveContract().setDocument(headerTableBuffer.ProdId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>