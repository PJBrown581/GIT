<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocCustAccountStatementExtReportDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocCustAccountStatementExtReportDSP class is a DSP class for the CustAccountStatementExt report.
/// </summary>
class DocCustAccountStatementExtReportDSP extends DocDataSourceProviderSrsReporting
{
    boolean openingBalanceLinesAdded, closingBalanceLinesAdded;
    boolean custTransLinesAdded, dueLinesAdded, agingLinesAdded;
    CustAccountStatementExtContract reportContract;
    RecId createdTransactionId;
    DocTableFieldsMetadata extensionFieldsMetadata_CustAccountStatementExtTmp = DocTableFieldsMetadata::construct(tableStr(CustAccountStatementExtTmp));

    /* Variables for custom placeholders */
    str placeholder_paymTerms;
    str placeholder_custAccount;
    str placeholder_custName;
    str placeholder_custContactName;


    #define.Header('Header')
    #define.Customer('Customer')
    #define.CustomerInfo('CustomerInfo')
    #define.OpeningBalanceLines('OpeningBalanceLines')
    #define.ClosingBalanceLines('ClosingBalanceLines')
    #define.CustTransLines('CustTransLines')
    #define.CustTrans_InvoiceLines('CustTrans_InvoiceLines')
    #define.AgingLines('AgingLines')
    #define.DueLines('DueLines')
    #define.PaymSchedLines('PaymSchedLines')
    #define.DocumentBranding('DocumentBranding')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap) 
    {
        super(_labelMap);

        // Header section
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');
        _labelMap.insert(literalStr("@SYS121179"), 'Date and time');
        _labelMap.insert(literalStr("@SYS5231"), 'Giro');
        _labelMap.insert(literalStr("@SYS26946"), 'Tax exempt number');

        _labelMap.insert(literalStr("@SYS335752"), 'Account statement');
        _labelMap.insert(literalStr("@SYS23346"), 'Terms of payment');
        _labelMap.insert(literalStr("@SYS7572"), 'Currency');
        _labelMap.insert(literalStr("@SYS2922"), 'Credit available');
        _labelMap.insert(literalStr("@SYS23346"), 'Terms of payment');
        _labelMap.insert(literalStr("@SYS13342"), 'Company');

        //Main table
        _labelMap.insert(literalStr("@SYS80056"), 'Date');
        _labelMap.insert(literalStr("@SYS14204"), 'Invoice');
        _labelMap.insert(literalStr("@SYS14021"), 'Due');
        _labelMap.insert(literalStr("@SYS7572"), 'Currency');
        _labelMap.insert(literalStr("@SYS41268"), 'Debit');
        _labelMap.insert(literalStr("@SYS7084"), 'Credit');
        _labelMap.insert(literalStr("@SYS76086"), 'Balance');
        _labelMap.insert(literalStr("@CreditCollections:OpeningBalance"), 'Opening balance');
        _labelMap.insert(literalStr("@SYS939"), 'Opening');
        _labelMap.insert(literalStr("@SYS60610"), 'Detail');
        _labelMap.insert(literalStr("@SYS78137"), 'Paym. Sched.');
        _labelMap.insert(literalStr("@CreditCollections:ClosingBalance"), 'Closing balance');
        _labelMap.insert(literalStr("@SYS15867"), 'Closing');

        _labelMap.insert(literalStr("@SYS67766"), '* = Payment schedule exists');
        _labelMap.insert(literalStr("@SYS78235"), 'Due per');
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Customer account statement DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();

        openingBalanceLinesAdded = false;
        closingBalanceLinesAdded = false;
        custTransLinesAdded = false;
        dueLinesAdded = false;
        agingLinesAdded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine_Aging</Name>
				<Source><![CDATA[
    protected void addLine_Aging(DocXmlRecord _addingRecord, CustAccountStatementExtTmp _currentLine)
    {
        // Rename the record from 'CustAccountStatementExtTmp' to 'AgingLines'.
        _addingRecord.setRecordName(#AgingLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Aging'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the aging lines.
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, BalanceCurrencyCode));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Balance01));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Balance02));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Balance03));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Balance04));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Balance05));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Balance06));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Balance07));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine_ClosingBalance</Name>
				<Source><![CDATA[
    protected void addLine_ClosingBalance(DocXmlRecord _addingRecord, CustAccountStatementExtTmp _currentLine)
    {
        // Rename the record from 'CustAccountStatementExtTmp' to 'ClosingBalanceLines'.
        _addingRecord.setRecordName(#ClosingBalanceLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Closing balance'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the closing balance lines.
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, ClosingBalance));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, ClosingCurrency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine_CustTrans</Name>
				<Source><![CDATA[
    protected void addLine_CustTrans(DocXmlRecord _addingRecord, CustAccountStatementExtTmp _currentLine)
    {
        // Rename the record from 'CustAccountStatementExtTmp' to 'CustTransLines'.
        _addingRecord.setRecordName(#CustTransLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Customer transactions'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the customer transaction lines.
        // FlagMainData == 19 -> Transactions
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_TransDate));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_Invoice));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_Txt));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_DueDate));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_markForPaymentSchedule));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_CurrencyCode));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_Debit));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_Balance));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTrans_Credit));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, DueDateTxt));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, PaymReference));
        
        // FlagMainData == 20 -> Open transactions
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTransOpen_DueDate));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTransOpen_AmountCur));

        if (_currentLine.FlagMainData == 20)
        {
            // This is an open transaction line.
            _addingRecord.addCalculatedField('IsOpenTransaction', true);
        }
        else // if (_currentLine.FlagMainData == 19)
        {
            // This is a transaction line.
            _addingRecord.addCalculatedField('IsOpenTransaction', false);
        }

        // TODO: Uncomment this if you want to add the related invoice and invoice lines.
        //this.addLine_CustTrans_InvoiceLines(_addingRecord, _currentLine);

        // Add Extension fields defined on CustAccountStatementExtTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentLine, _addingRecord, true, extensionFieldsMetadata_CustAccountStatementExtTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine_CustTrans_InvoiceLines</Name>
				<Source><![CDATA[
    protected void addLine_CustTrans_InvoiceLines(DocXmlRecord _addingRecord, CustAccountStatementExtTmp _currentLine)
    {
        CustInvoiceTrans    custInvoiceTrans;
        CustTrans           custTrans;
        CustInvoiceJour     custInvoiceJour;
        RecId               custInvoiceJourRecId;

        custTrans = CustTrans::find(_currentLine.CustTrans_RecId_DR);
        
        // Get all transactions that are related to Free Text Invoices/Credit note.
        // In the same way you can add transactions of any other type.
        if (custTrans.TransType == LedgerTransType::Cust)
        {
            custInvoiceJourRecId = 0;
            while select custInvoiceJour index hint InvoiceAccountIdx
                where custInvoiceJour.InvoiceId == custTrans.Invoice &&
                      custInvoiceJour.InvoiceAccount == custTrans.AccountNum &&
                      custInvoiceJour.InvoiceDate == custTrans.TransDate &&
                      custInvoiceJour.LedgerVoucher == custTrans.Voucher
                outer join custInvoiceTrans
                    where custInvoiceTrans.SalesId == custInvoiceJour.SalesId &&
                          custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId &&
                          custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate &&
                          custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup
            {
                // Add related invoice
                if (custInvoiceJourRecId != custInvoiceJour.RecId)
                {
                    // TODO: Add here particular fields from the CustInvoiceJour table like already added field InvoiceAmount below.
                    _addingRecord.addCalculatedField(strFmt('%1_%2', tableStr(CustInvoiceJour), fieldStr(CustInvoiceJour, InvoiceAmount)), custInvoiceJour.InvoiceAmount, fieldId2PName(tableNum(CustInvoiceJour), fieldNum(CustInvoiceJour, InvoiceAmount)));

                    custInvoiceJourRecId = custInvoiceJour.RecId;
                }

                // Add related invoice lines
                if (custInvoiceTrans)
                {
                    DocXmlRecord custInvoiceLineFields = _addingRecord.addChildRecord(custInvoiceTrans);
                    custInvoiceLineFields.setRecordName(#CustTrans_InvoiceLines);
                    
                    // TODO: Add here particular fields from the CustInvoiceTrans table.
                    // For example:
                    // custInvoiceLineFields.addField(fieldStr(CustInvoiceTrans, YourCustomFieldName));
                    // or extend container below with desired field(s).
                    // To add all fields from CustInvoiceTrans table use: custInvoiceLineFields.addAllFields();
                    custInvoiceLineFields.addFields([
                        fieldStr(CustInvoiceTrans, Qty),
                        fieldStr(CustInvoiceTrans, LineAmount),
                        fieldStr(CustInvoiceTrans, PriceUnit)]);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine_Due</Name>
				<Source><![CDATA[
    protected void addLine_Due(DocXmlRecord _addingRecord, CustAccountStatementExtTmp _currentLine)
    {
        // Rename the record from 'CustAccountStatementExtTmp' to 'DueLines'.
        _addingRecord.setRecordName(#DueLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Due lines'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the due lines.
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Tmp_DueDate));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Tmp_TransDate));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Tmp_Invoice));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Tmp_Currency));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Tmp_Amount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine_OpeningBalance</Name>
				<Source><![CDATA[
    protected void addLine_OpeningBalance(DocXmlRecord _addingRecord, CustAccountStatementExtTmp _currentLine)
    {
        // Rename the record from 'CustAccountStatementExtTmp' to 'OpeningBalanceLines'.
        _addingRecord.setRecordName(#OpeningBalanceLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Openining balance'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the opening balance lines.
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, OpeningBalance));
        _addingRecord.addField(fieldStr(CustAccountStatementExtTmp, Currency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    protected void addLine(DocXmlRecord _addingRecord, CustAccountStatementExtTmp _currentLine)
    {
        // Control fields.
        // NOTE: Learn more about control flags FlagMainData and Flag in the
        // CustAccountStatementExtController.insertCustAccountStatementExtTmp() method.

        // FlagMainData == 19 or FlagMainData == 20
        if (_currentLine.FlagMainData == 19 || _currentLine.FlagMainData == 20)
        {
            this.addLine_CustTrans(_addingRecord, _currentLine);
            custTransLinesAdded = true;
        }

        // FlagMainData == 17
        else if (_currentLine.FlagMainData == 17)
        {
            this.addLine_OpeningBalance(_addingRecord, _currentLine);
            openingBalanceLinesAdded = true;
        }

        // FlagMainData == 18
        else if (_currentLine.FlagMainData == 18)
        {
            this.addLine_ClosingBalance(_addingRecord, _currentLine);
            closingBalanceLinesAdded = true;
        }

        // FlagMainData == 0, Flag == 3
        else if (_currentLine.Flag == 3)
        {
            this.addLine_Aging(_addingRecord, _currentLine);
            agingLinesAdded = true;
        }

        // FlagMainData == 0, Flag == 25
        else if (_currentLine.Flag == 25)
        {
            this.addLine_Due(_addingRecord, _currentLine);
            dueLinesAdded = true;
        }

        // FlagMainData == 0, Flag == 10
        else if (_currentLine.Flag == 10)
        {
            // NOTE: There are lines related to Payment schedule, but they are not visible on SSRS report.
            // Because the line is already added, we will not any field but only rename it to PaymSchedLines.
            _addingRecord.setRecordName(#PaymSchedLines);
            _addingRecord.setRecordLabel('Payment Schedule');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected void addHeader(DocXmlRecordBuilder _recordBuilder, CustAccountStatementExtTmp _casTmpTable)
    {
        CustAccountStatementExtTmp headerTableBuffer;
        DocXmlRecord headerDataRecord;

        void addHeaderFields()
        {
            // We will add the company related fields because in the case of intercompany
            // customers we need to get the company data from the legal entity of the customer
            // and not from the legal entity of the report execution
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyPhone));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyLogo));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyName));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyAddress));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyTeleFax));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyGiro));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyCoRegNum));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyVATNum));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CompanyEnterpriseNumber));

            // Add all of the rest header fields to the header data record.
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, FromDate));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, ToDate));

            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading01));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading02));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading03));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading04));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading05));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading06));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading07));

            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, HeadingCurrencyCode));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading041));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading011));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading021));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading031));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading061));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading051));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading071));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading012));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading022));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading032));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading042));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading052));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading062));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Heading072));

            // We should add these fields to CustTrans, Opening and Closing lines but it seems they don't have a purpose.
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_TransDate));
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_Invoice));
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_Txt));
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_MarkForPayment));
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_Duedate));
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_CurrencyCode));
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_Debit));
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_Credit));
            //headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Header_Balance));

            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, DueToDate));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, PaymentScheduleText));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, FormLetterRemarks_Txt));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, DateOfCreation));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, FICreditorId));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, PaymentId));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CustName_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CustAddress_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, OCRField));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, IsInvoiceAmount));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, InvoiceAmount));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, InvoiceAmountDecimals));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, InvoiceAmountNODecimals));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, BankGroupIdName_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, BankZipCode_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, BankAccountTable_AccountNum_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, BankAccountTable_Clearing_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Description_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, PaymentRef1_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, PaymentRef2_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, AmountNoDecimals_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, AccountNo1_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, PaymentId2_PaymentId3_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, AmountDecimals_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, LayoutCode_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, AccountNo2_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, currencyCodeISO_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, OcrLine_CH));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, AmountCheckId));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, PrintLogo));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, GiroType));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Enterpriseregister_NO));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, RDPCopy));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, ShowBalance));
            headerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, ShowCompanyVATNum));
        }


        select firstonly _casTmpTable where _casTmpTable.CreatedTransactionId == createdTransactionId;
        
        buf2Buf(_casTmpTable, headerTableBuffer);

        select firstonly _casTmpTable where _casTmpTable.FlagMainData == 0 && _casTmpTable.Flag == 4 &&
                                            _casTmpTable.CreatedTransactionId == createdTransactionId;
        if (_casTmpTable)
        {
            headerTableBuffer.Heading011 = _casTmpTable.Heading011;
            headerTableBuffer.Heading021 = _casTmpTable.Heading021;
            headerTableBuffer.Heading031 = _casTmpTable.Heading031;
            headerTableBuffer.Heading041 = _casTmpTable.Heading041;
            headerTableBuffer.Heading051 = _casTmpTable.Heading051;
            headerTableBuffer.Heading061 = _casTmpTable.Heading061;
            headerTableBuffer.Heading071 = _casTmpTable.Heading071;
            headerTableBuffer.Heading012 = _casTmpTable.Heading012;
            headerTableBuffer.Heading022 = _casTmpTable.Heading022;
            headerTableBuffer.Heading032 = _casTmpTable.Heading032;
            headerTableBuffer.Heading042 = _casTmpTable.Heading042;
            headerTableBuffer.Heading052 = _casTmpTable.Heading052;
            headerTableBuffer.Heading062 = _casTmpTable.Heading062;
            headerTableBuffer.Heading072 = _casTmpTable.Heading072;
        }

        select firstonly _casTmpTable where _casTmpTable.FlagMainData == 0 && _casTmpTable.Flag == 7 &&
                                            _casTmpTable.CreatedTransactionId == createdTransactionId;
        if (_casTmpTable)
        {
            headerTableBuffer.Heading01 = _casTmpTable.Heading01;
            headerTableBuffer.Heading02 = _casTmpTable.Heading02;
            headerTableBuffer.Heading03 = _casTmpTable.Heading03;
            headerTableBuffer.Heading04 = _casTmpTable.Heading04;
            headerTableBuffer.Heading05 = _casTmpTable.Heading05;
            headerTableBuffer.Heading06 = _casTmpTable.Heading06;
            headerTableBuffer.Heading07 = _casTmpTable.Heading07;
        }

        select firstonly _casTmpTable where _casTmpTable.IsInvoiceAmount == true &&
                                            _casTmpTable.CreatedTransactionId == createdTransactionId;
        if (_casTmpTable)
        {
            headerTableBuffer.IsInvoiceAmount = true;
            headerTableBuffer.InvoiceAmount = _casTmpTable.InvoiceAmount;
            headerTableBuffer.InvoiceAmountDecimals = _casTmpTable.InvoiceAmountDecimals;
            headerTableBuffer.InvoiceAmountNODecimals = _casTmpTable.InvoiceAmountNODecimals;
        }

        // NOTE: Check also for other fields from header if they need a special select.

        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer).setSingleRecord(true);
        // Rename the record from 'CustAccountStatementExtTmp' to 'Header'.
        headerDataRecord.setRecordName(#Header);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Customer Account Statement Header'); // NOTE: use literalStr("@LabelID") instead.
        // Add all 'header' fields.
        addHeaderFields();                

        // Add Extension fields defined on CustAccountStatementExtTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        select firstonly _casTmpTable where _casTmpTable.CreatedTransactionId == createdTransactionId;
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_casTmpTable, headerDataRecord, true, extensionFieldsMetadata_CustAccountStatementExtTmp);


        // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
        // by using the related data to the headerTableBuffer table buffer (CustAccountStatementExtTmp) or reportContract.


        _recordBuilder.goToParentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomerFields</Name>
				<Source><![CDATA[
    protected void addCustomerFields(DocXmlRecord _currentCustomerDataRecord, CustAccountStatementExtTmp _casTmpTable)
    {
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, AccountNum));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTable_Name));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Contactperson));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTable_Address));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTable_AccountNum));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, PaymentTxt));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CustTable_Currency));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CreditLimit));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, CreditAvailable));

        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, MultiCompanyCustName));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, MultiCompanyCustPaymTermDesc));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, MultiCompanyCustCreditLimit));
        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, MultiCompanyCustCreditAvailable));

        _currentCustomerDataRecord.addField(fieldStr(CustAccountStatementExtTmp, Flag));


        //-- Store custom placeholders' values (only once).
        if (placeholder_custAccount == '')
        {
            placeholder_custAccount = _casTmpTable.AccountNum;
            placeholder_custName = _casTmpTable.CustTable_Name;
            placeholder_custContactName = _casTmpTable.Contactperson;
            placeholder_paymTerms = _casTmpTable.PaymentTxt;
        }


        //-- Add Custom Fields defined on CustTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        CustTable custTable;
        if (!_casTmpTable.MultiCompanyCustName)
        {
            custTable = CustTable::find(_casTmpTable.AccountNum);
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable, _currentCustomerDataRecord);
        }
        else
        {
            CompanyInfo custCompany;
            select firstonly custCompany where custCompany.Name == _casTmpTable.MultiCompanyCustName;
            changecompany(custCompany.DataArea)
            {
                custTable = CustTable::find(_casTmpTable.AccountNum);
                DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable, _currentCustomerDataRecord);
            }
        }


        // TODO: Add here additional fields (or records) to the current _currentCustomerDataRecord data record
        // by using the related data to the _casTmpTable table buffer (CustAccountStatementExtTmp).
        // For example, get the related CustTable record and add additional data you need:
        //CustTable custTable;
        //if (!_casTmpTable.MultiCompanyCustName)
        //{
        //    custTable = CustTable::find(_casTmpTable.AccountNum);
        //    _currentCustomerDataRecord.addCalculatedField('CustomerGroup', custTable.customerGroup());
        //}
        //else
        //{
        //    CompanyInfo custCompany;
        //    select firstonly custCompany where custCompany.Name == _casTmpTable.MultiCompanyCustName;
        //    changecompany(custCompany.DataArea)
        //    {
        //        custTable = CustTable::find(_casTmpTable.AccountNum);
        //        _currentCustomerDataRecord.addCalculatedField('CustomerGroup', custTable.customerGroup());
        //    }
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        // Get the sqlTempDbName and createdTransactionId.
        str sqlTempDbName;
        [sqlTempDbName, createdTransactionId] = this.getSqlTempDbNameAndCreatedTransactionId();

        DocXmlRecord currentCustomerDataRecord, addingLineDataRecord;
        CustAccountStatementExtTmp casTmpTable, casTmpTable2;

        casTmpTable.useExistingTempDBTable(sqlTempDbName);
        casTmpTable2.useExistingTempDBTable(sqlTempDbName);

        // Add the report header line.
        this.addHeader(_recordBuilder, casTmpTable);

        // Add the first customer - in case of multicompany customer.
        // Otherwise, this will be the only one customer.
        select firstonly AccountNum from casTmpTable
        where casTmpTable.CreatedTransactionId == createdTransactionId;
        str firstToShowCustomer = casTmpTable.AccountNum;

        // Add the first customer.
        select firstonly casTmpTable
        where casTmpTable.AccountNum == firstToShowCustomer && casTmpTable.FlagMainData == 16 &&
              casTmpTable.CreatedTransactionId == createdTransactionId;
        
        currentCustomerDataRecord = _recordBuilder.addRecord(casTmpTable);
        currentCustomerDataRecord.setRecordName(#Customer);
        this.addCustomerFields(currentCustomerDataRecord, casTmpTable);
        _recordBuilder.goToParentRecord();

        // Add all statement lines for the first customer.
        while select casTmpTable
            //order by FlagMainData, Flag
            where casTmpTable.AccountNum == firstToShowCustomer &&
                  casTmpTable.FlagMainData != 16 &&
                  casTmpTable.Flag != 4 && casTmpTable.Flag != 7 &&
                  casTmpTable.CreatedTransactionId == createdTransactionId
        {
            addingLineDataRecord = currentCustomerDataRecord.addChildRecord(casTmpTable);
            this.addLine(addingLineDataRecord, casTmpTable);
        }


        // Add the rest of the customers.
        while select casTmpTable
            order by MultiCompanyCustName, AccountNum
            where casTmpTable.AccountNum != firstToShowCustomer && casTmpTable.FlagMainData == 16 &&
                  casTmpTable.CreatedTransactionId == createdTransactionId
        {
            currentCustomerDataRecord = _recordBuilder.addRecord(casTmpTable);
            currentCustomerDataRecord.setRecordName(#Customer);
            this.addCustomerFields(currentCustomerDataRecord, casTmpTable);
            _recordBuilder.goToParentRecord();

            // Add all statement lines for the current customer.
            while select casTmpTable2
            //order by FlagMainData, Flag
            where casTmpTable2.AccountNum == casTmpTable.AccountNum &&
                  casTmpTable2.FlagMainData != 16 &&
                  casTmpTable2.Flag != 4 && casTmpTable2.Flag != 7 &&
                  casTmpTable2.CreatedTransactionId == createdTransactionId
            {
                addingLineDataRecord = currentCustomerDataRecord.addChildRecord(casTmpTable2);
                this.addLine(addingLineDataRecord, casTmpTable2);
            }
        }


        if (!this.isRuntime())
        {
            DocXmlRecord emptyLineDataRecord;
            CustAccountStatementExtTmp emptyLineTableBuff;
            emptyLineTableBuff.clear();

            // CustTransLines.
            if (!custTransLinesAdded)
            {
                emptyLineDataRecord = currentCustomerDataRecord.addChildRecord(emptyLineTableBuff);
                this.addLine_CustTrans(emptyLineDataRecord, emptyLineTableBuff);
            }

            // OpeningBalanceLines.
            if (!openingBalanceLinesAdded)
            {
                emptyLineDataRecord = currentCustomerDataRecord.addChildRecord(emptyLineTableBuff);
                this.addLine_OpeningBalance(emptyLineDataRecord, emptyLineTableBuff);
            }

            // ClosingBalanceLines.
            if (!closingBalanceLinesAdded)
            {
                emptyLineDataRecord = currentCustomerDataRecord.addChildRecord(emptyLineTableBuff);
                this.addLine_ClosingBalance(emptyLineDataRecord, emptyLineTableBuff);
            }

            // AgingLines.
            if (!agingLinesAdded)
            {
                emptyLineDataRecord = currentCustomerDataRecord.addChildRecord(emptyLineTableBuff);
                this.addLine_Aging(emptyLineDataRecord, emptyLineTableBuff);
            }

            // DueLines.
            if (!dueLinesAdded)
            {
                emptyLineDataRecord = currentCustomerDataRecord.addChildRecord(emptyLineTableBuff);
                this.addLine_Due(emptyLineDataRecord, emptyLineTableBuff);
            }
        }

        // Add the DocumentBranding record if configured so.
        this.addDocumentBranding(_recordBuilder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocumentBranding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the DocumentBranding record if the IncludeDocuBrandingInDSSRS option in Docentric report setup is turned on.
    /// </summary>
    /// <param name = "_recordBuilder">Record builder of the MainData data section.</param>
    protected void addDocumentBranding(DocXmlRecordBuilder _recordBuilder)
    {
        if (reportTable.IncludeDocuBrandingInDSSRS)
        {
            _recordBuilder.goToTopRecord();

            SysDocuBrandDetailsTmp sysDocuBrandDetails = this.getReportDataTableContext(tableStr(SysDocuBrandDetailsTmp));

            _recordBuilder.addRecord(sysDocuBrandDetails)
                          .setSingleRecord(true)
                          .setRecordName(#DocumentBranding).setRecordLabelId(literalStr("@DocentricAX:DocumentBrandingDetails"))
                          .addAllFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSqlTempDbNameAndCreatedTransactionId</Name>
				<Source><![CDATA[
    protected container getSqlTempDbNameAndCreatedTransactionId()
    {
        SrsReportPreProcessedDetails                srsReportPreProcessedDetails;
        container                                   tempDBNamesContainer;
        int                                         tempDBNamesContainerLen, idx;
        str                                         aotTempDbName, sqlTempDbName;
    
    
        select firstOnly srsReportPreProcessedDetails
        where srsReportPreProcessedDetails.RecId == preProcessedId;
    
        if (!srsReportPreProcessedDetails)
        {
            DocGlobalHelper::handleException(funcName(),
                strFmt('For report (%1) and PreProcessId (%2) there is no record in the SrsReportPreProcessedDetails table',
                       this.parmParamsReporting().parmReportId(), preProcessedId));
        }
    
        tempDBNamesContainer = srsReportPreProcessedDetails.TempDBNames;
        tempDBNamesContainerLen = conLen(tempDBNamesContainer);
    
        if(tempDBNamesContainerLen < 2)
        {
            DocGlobalHelper::handleException(funcName(),
                    strFmt('For SSRS RDP PreProcessed TempDB reports, SrsReportPreProcessedDetails.TempDBNames has to be a container of at least 2 elements. ' +
                           'For the report (%1) and PreProcessId (%2) this is not the case.',
                           this.parmParamsReporting().parmReportId(), preProcessedId));
        }
        else
        {
            for(idx = 1; idx <= tempDBNamesContainerLen ; idx += 2)
            {
                // AOT TempDBName, SQL tempDB name
                aotTempDbName = conPeek(tempDBNamesContainer, idx);
                sqlTempDbName = conPeek(tempDBNamesContainer, idx + 1);
    
                if (tableStr(CustAccountStatementExtTmp) == aotTempDbName)
                {
                    return [sqlTempDbName, srsReportPreProcessedDetails.CreatedTransactionId];
                }
            }
    
            DocGlobalHelper::handleException(funcName(),
                        strFmt('For the report (%1) and PreProcessId (%2) there is no entry in the SrsReportPreProcessedDetails.TempDBNames container ' +
                               'for the report temporary table (%3)',
                                this.parmParamsReporting().parmReportId(), preProcessedId, tableStr(CustAccountStatementExtTmp)));
        }
        
        return ['', 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.FromDate('FromDate')
    #define.ToDate('ToDate')
    #define.PaymentTerms('PaymentTerms')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')

    [DocPlaceholderAttribute(#FromDate, 'CAS - From Date'),
     DocPlaceholderAttribute(#ToDate, 'CAS - To Date'),
     DocPlaceholderAttribute(#PaymentTerms, 'CAS - Terms of Payment'),
     DocPlaceholderAttribute(#CustAccount, 'CAS - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'CAS - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'CAS - Customer Contact Name')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @FromDate@
        date parameter_fromDate = reportContract.parmFromDate();
        placeholderMng.replacePlaceholderInCurrentPrintDest(#FromDate, parameter_fromDate);

        // -- Placeholder @ToDate@
        date parameter_toDate = reportContract.parmToDate();
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ToDate, parameter_toDate);

        // -- Placeholder @PaymentTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentTerms, placeholder_paymTerms);

        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_custAccount);
    
        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, placeholder_custName);

        // -- Placeholder @CustContactName@
        if (!placeholder_custContactName)
        {
            placeholder_custContactName = DocDspHelper::SirMadam;
        }
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, placeholder_custContactName);


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_custAccount);
        _reportRunContext.archiveContract().setDocument(placeholder_custAccount, parameter_toDate);

        //>>> Uncomment this code block to send report in an Excel format as additional email attachment <<<///
        //if (_reportRunContext.parmPrintDestination() == DocPrintDestination::Email)
        //{
        //    container additionalEmailAttachmentCont;
        //    container additionalEmailAttachments = _reportRunContext.emailPrintDestSettings().parmEmailAdditionalAttachments();
        //    int additionalEmailAttachmentsCount = conLen(additionalEmailAttachments);

        //    // Get additional email attachment content.
        //    container additionalEmailAttachmentContent =  this.printToMemory_SsrsReportDesign(_reportRunContext, SRSReportFileFormat::Excel);

        //    if (additionalEmailAttachmentContent != conNull())
        //    {
        //        // Create additonal email attachment container.
        //        additionalEmailAttachmentCont = conIns(additionalEmailAttachmentCont, 1, 'Customer account statement.xlsx');
        //        additionalEmailAttachmentCont = conIns(additionalEmailAttachmentCont, 2, additionalEmailAttachmentContent);
        //        additionalEmailAttachments = conIns(additionalEmailAttachments, additionalEmailAttachmentsCount + 1, additionalEmailAttachmentCont);

        //        // Set additional email attachment container to current email print destination settings.
        //        _reportRunContext.emailPrintDestSettings().parmEmailAdditionalAttachments(additionalEmailAttachments);
        //    }
        //}

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// -- When to use this method?
    /// If you want to quickly generate DDSP for a sample customer record.
    /// -- How to run it?
    /// Set up this class as the startup object in your project.
    /// -- NOTE
    /// Please verify all TODOs in the method and make changes if needed.
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    public static void main(Args _args)
    {
        CustTable custTable;
    
        // TODO: (1) Select the sample customer record.
        select firstonly custTable where custTable.AccountNum == 'US-003';

        // Add it as the context record, for which report is going to be printed.
        Args args = new Args();
        args.record(custTable);

        // Set the report menu item.
        args.menuItemType(MenuItemType::Output);
        args.menuItemName(menuItemOutputStr(CustAccountStatementExt));

        // Initialize the report controller.
        CustAccountStatementExtController controller = new CustAccountStatementExtController();

        // TODO: (2) Change the name SSRS Report Design if needed.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::CustAccountStatement).getDefaultReportFormat());
        controller.parmLoadFromSysLastValue(false);
        controller.parmArgs(args);
        
        // Get the report contract and set Criteria parameters
        CustAccountStatementExtContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmFromDate(mkDate(15,08,2020));
        rdpContract.parmToDate(mkDate(28,02,2022));
        rdpContract.parmOnlyOpen(false);
        rdpContract.parmIncludeReversed(false);
        rdpContract.parmPrintNonZero(true);
        rdpContract.parmPrintPaymentSchedule(false);
        rdpContract.parmPrintCreditLimit(false);
        rdpContract.parmUsePrintManagement(false);

        // Set the Docentric Generate DS print destination settings.
        SRSPrintDestinationSettings pds = controller.parmReportContract().parmPrintSettings();
        pds.printMediumType(SRSPrintMediumType::GenerateDataSource_DC);

        // TODO: (3) Set Design and Preview languages if needed.
        pds.parmGenerateDSPrintDestSettings_DC().parmLanguageId(custTable.languageId());
        pds.parmGenerateDSPrintDestSettings_DC().parmPreviewLanguages('fr,de,it,es');

        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToMemory_SsrsReportDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a report in an Excel output format as a byte array using a SSRS report design.
    /// </summary>
    /// <param name = "_reportRunContext">The report run context.</param>
    /// <param name = "_ssrsOutputFileFormat">The SSRS report output file format.</param>
    /// <returns>Report content as container.</returns>
    protected container printToMemory_SsrsReportDesign(DocReportRunContext _reportRunContext, SRSReportFileFormat _ssrsOutputFileFormat = SRSReportFileFormat::Excel)
    {
        CustAccountStatementExtContract currentContract = this.getSrsRdpContract();

        // Select the sample Customer record.
        CustTable custTable;
        select firstonly custTable where custTable.AccountNum == currentContract.parmCustAccount();
        
        // Initialize Args.
        Args args = new Args();
        args.record(custTable);
        args.menuItemType(MenuItemType::Output);
        args.menuItemName(menuItemOutputStr(CustAccountStatementExt));

        // Initialize the report controller.
        CustAccountStatementExtController controller = new CustAccountStatementExtController();
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::CustAccountStatement).getDefaultReportFormat());

        // The report format set using controller.parmReportName()
        // will be later overriden in the CustAccountStatementExtController.populateReportSettingsByCustomer() method
        // and the report format selected in print management will be used.
        //controller.parmSsrsReportFormat_DC(ssrsReportStr(CustAccountStatementExt, ReportScheduleLines)); //>>> Uncomment this line of code on D365FO 10.0.21 version or newer
        controller.parmSsrsReportFormat_DC('CustAccountStatementExt.Report');
        controller.parmArgs(args);
 
        // Get the report contract and set Criteria parameters
        CustAccountStatementExtContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmFromDate(currentContract.parmFromDate());
        rdpContract.parmToDate(currentContract.parmToDate());
        rdpContract.parmOnlyOpen(currentContract.parmOnlyOpen());
        rdpContract.parmIncludeReversed(currentContract.parmIncludeReversed());
        rdpContract.parmPrintNonZero(currentContract.parmPrintNonZero());
        rdpContract.parmPrintPaymentSchedule(currentContract.parmPrintPaymentSchedule());
        rdpContract.parmPrintCreditLimit(currentContract.parmPrintCreditLimit());
        rdpContract.parmUsePrintManagement(false); // Do not change this flag.

        // Initialize DocSrsReportGenerator.
        DocSrsReportGenerator reportGenerator = new DocSrsReportGenerator(controller);
        reportGenerator.setPrintDestinationSettings_SsrsReport(_ssrsOutputFileFormat);
        
        // Get the report as a container.
        container generatedReport = reportGenerator.generateReport();

        return generatedReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printToMemory_DocentricTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates and sends to user (downloads in the browser) a report in an PDF output format as a byte array using Docentric report design.
    /// </summary>
    /// <param name = "_docentricOutputFileFormat">The Docentric report output file format.</param>
    public static void printToMemory_DocentricTemplate(DocOutputFileFormat _docentricOutputFileFormat = DocOutputFileFormat::PDF)
    {
        // Select the sample Customer record.
        CustTable custTable;
        select firstonly custTable where custTable.AccountNum == 'DE-001';
        
        // Initialize Args.
        Args args = new Args();
        args.record(custTable);
        args.menuItemType(MenuItemType::Output);
        args.menuItemName(menuItemOutputStr(CustAccountStatementExt));

        // Initialize the report controller.
        CustAccountStatementExtController controller = new CustAccountStatementExtController();
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::CustAccountStatement).getDefaultReportFormat());
        
        // The report format set using controller.parmReportName() 
        // will be later overriden in the CustAccountStatementExtController.populateReportSettingsByCustomer() method
        // and the report format selected in print management will be used.
        //controller.parmSsrsReportFormat_DC(ssrsReportStr(CustAccountStatementExt, ReportScheduleLines)); //>>> Uncomment this line of code on D365FO 10.0.21 version or newer
        controller.parmSsrsReportFormat_DC('CustAccountStatementExt.Report');
        controller.parmArgs(args);
 
        // Get the report contract and set Criteria parameters
        CustAccountStatementExtContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmFromDate(mkDate(01,01,2015));
        rdpContract.parmToDate(mkDate(31,08,2017));
        rdpContract.parmOnlyOpen(false);
        rdpContract.parmIncludeReversed(true);
        rdpContract.parmPrintNonZero(false);
        rdpContract.parmPrintPaymentSchedule(true);
        rdpContract.parmPrintCreditLimit(false);
        rdpContract.parmUsePrintManagement(false);

        // Initialize DocSrsReportGenerator.
        DocSrsReportGenerator reportGenerator = new DocSrsReportGenerator(controller);
        reportGenerator.setPrintDestinationSettings_DocentricReport(_docentricOutputFileFormat);
        
        // Get the report as a container.
        container generatedReport = reportGenerator.generateReport();

        if (generatedReport == conNull())
        {
            DocGlobalHelper::handleWarning('The Customer account statement report was not generated because no data is available.');
            return;
        }

        // Convert a report container to a memory stream and download the PDF document in the browser.
        using (System.IO.MemoryStream reportMemoryStream = DocGlobalHelper::convertContainerToMemoryStream(generatedReport))
        {
            DocFileMngHelper::sendFileToUser(reportMemoryStream, 'Customer account statement.pdf');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>