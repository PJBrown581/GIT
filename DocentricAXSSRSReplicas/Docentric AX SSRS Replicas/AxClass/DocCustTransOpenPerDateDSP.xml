<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocCustTransOpenPerDateDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocCustTransOpenPerDateDSP extends DocDataSourceProviderSrsReporting
{
    CustTransOpenPerDateContract    reportContract;
    str                             firstCustAccountNum;
    str                             firstCustName;
    boolean                         isMultiCustomer;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Customer open transactions DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();
        reportContract = this.getSrsRdpContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (tableStr(CustTransOpenPerDateTmp) == _rdpTableName)
        {
            CustTransOpenPerDateTmp custTransOpenPerDateTmp = _rdpTableRecord;
            if (firstCustAccountNum == '')
            {
                firstCustAccountNum = custTransOpenPerDateTmp.AccountNum;
                firstCustName = custTransOpenPerDateTmp.Name;
            }
            else if (firstCustAccountNum != custTransOpenPerDateTmp.AccountNum)
            {
                isMultiCustomer = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (tableStr(CustTransOpenPerDateTmp) == _rdpTableName)
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);

            CustTransOpenPerDateTmp custTransOpenPerDateTmp = _rdpTableRecord;
            
            // Add the deep link for AccountNum.
            Map custFormFields = new Map(Types::String, Types::String);
            custFormFields.insert(fieldStr(CustTable, AccountNum), custTransOpenPerDateTmp.AccountNum);
            str accountNumUrl = DocGlobalHelper::generateRecordUrl(menuItemDisplayStr(CustTable), MenuItemType::Display,
                formDataSourceStr(CustTable, CustTable), custFormFields);
            
            _addingRecord.addCalculatedField('AccountNumUrl', accountNumUrl);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        super(_recordBuilder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.PerDate('PerDate')

    [DocPlaceholderAttribute(#CustAccount, 'COT - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'COT - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'COT - Customer Contact Name'),
     DocPlaceholderAttribute(#PerDate, 'COT - Per Date')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, isMultiCustomer? DocConstantDSP::MULTIPLE : firstCustAccountNum);

        // -- Placeholder @PerDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PerDate, reportContract.parmPerDate());
        
        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, isMultiCustomer? 'Multiple customers' : firstCustName);

        // -- Placeholder @CustContactName@
        CustTable custTable;
        if (!isMultiCustomer)
        {
            custTable = CustTable::find(firstCustAccountNum);
        }
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::contactPersonName(custTable.ContactPersonId));


        // Fill the Print archive contract.
        if (!isMultiCustomer)
        {
            _reportRunContext.archiveContract().setCustAccount(firstCustAccountNum);
            _reportRunContext.archiveContract().setDocument(firstCustAccountNum, reportContract.parmPerDate());
        }
        else
        {
            _reportRunContext.archiveContract().setCustAccount('');
            _reportRunContext.archiveContract().setDocument('', reportContract.parmPerDate());
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        List            billingClassificationList;
        ListEnumerator  billingClassificationEnum;
        DocXmlRecord    billingClassificationDataRecord;
        str             billingClassificationFieldValue;

        // Add all parameters except the BillingClassification parameter.
        // This parameter is of the List data type, and serialization the List data type
        // to XML List is not supported out-of-the-box by Docentric AX Framework.
        // That's why we will serialize it manually.
        super(_recordBuilderParameters);

        billingClassificationList = reportContract.parmBillingClassification();
        if (billingClassificationList == null || billingClassificationList.empty())
        {
            billingClassificationDataRecord = _recordBuilderParameters.addCalculatedRecord('BillingClassification');
            billingClassificationDataRecord.addCalculatedField('Value', 'No value selected');
            return;
        }

        // Add each element of the list that represents the BillingClassification
        // parameter as a separate data field.
        billingClassificationEnum = billingClassificationList.getEnumerator();
        while (billingClassificationEnum.moveNext())
        {
            // For the BillingClassification parameter add a new data record.
            billingClassificationDataRecord = _recordBuilderParameters.addCalculatedRecord('BillingClassification');
            billingClassificationFieldValue = billingClassificationEnum.current();
            if (billingClassificationFieldValue == "@GLS223107" || billingClassificationFieldValue == '')
            {
                billingClassificationDataRecord.addCalculatedField('Value', 'No value selected');
            }
            else
            {
                billingClassificationDataRecord.addCalculatedField('Value', billingClassificationFieldValue);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>