<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWMSBillOfLadingDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWMSBillOfLadingDSP class is a DSP class for the WMSBillOflading report.
/// </summary>
class DocWMSBillOfLadingDSP extends DocDataSourceProviderSrsReporting
{
    WMSBillOfLadingTmp      header;     // used for placeholders
    boolean                 customerOrderInformationAdded = false, carrierInformationAdded = false;

    #define.BillOfLadingHeader          ('BillOfLading')
    #define.CarrierInformation          ('CarrierInformation')
    #define.CustomerOrderInformation    ('CustomerOrderInformation')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'WMS Bill of lading DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>singleLineStreet</Name>
				<Source><![CDATA[
    LogisticsAddressStreet singleLineStreet(LogisticsAddressStreet _street)
    {
        _street = strReplace(_street, '\n', ', ');
        _street = strReplace(_street, '\r', '');
        _street = strReplace(_street, '\t', ' ');

        return _street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomerOrderInformation</Name>
				<Source><![CDATA[
    protected void addCustomerOrderInformation(DocXmlRecordBuilder _recordBuilder, WMSBillOfLadingTmp _wmsBillOfLadingTmp)
    {
        DocXmlRecord orderDataRecord = _recordBuilder.addRecord(_wmsBillOfLadingTmp);
        orderDataRecord.setRecordName(#CustomerOrderInformation);
        orderDataRecord.setRecordLabel('Customer order information');
        orderDataRecord.addField(fieldStr(WMSBillOfLadingTmp, InventTransRefId)).setFieldName('PurchOrderFormNum');
        orderDataRecord.addField(fieldStr(WMSBillOfLadingTmp, OrderQty)).setFieldName('CustOrderPackQty');
        orderDataRecord.addField(fieldStr(WMSBillOfLadingTmp, OrderWeight)).setFieldName('CustOrderWeight');
        orderDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CircleY));
        orderDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CircleN));
        orderDataRecord.addField(fieldStr(WMSBillOfLadingTmp, OrderAdditionalInfo)).setFieldName('AdditionalInfo');
        customerOrderInformationAdded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCarrierInformation</Name>
				<Source><![CDATA[
    protected void addCarrierInformation(DocXmlRecordBuilder _recordBuilder, WMSBillOfLadingTmp _wmsBillOfLadingTmp)
    {
        DocXmlRecord carrierDataRecord = _recordBuilder.addRecord(_wmsBillOfLadingTmp);
        carrierDataRecord.setRecordName(#CarrierInformation);
        carrierDataRecord.setRecordLabel('Carrier information');
        carrierDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CarrierHandlingQty)).setFieldName('LineQty');
        carrierDataRecord.addCalculatedField('DefaultHandlingType', enum2Str(_wmsBillOfLadingTmp.CarrierHandlingPackageType));
        carrierDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CarrierPackageQty)).setFieldName('Qty');
        carrierDataRecord.addCalculatedField('PackingType', enum2Str(_wmsBillOfLadingTmp.CarrierPackagePackageType));
        carrierDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CarrierWeight)).setFieldName('grossWeight');
        carrierDataRecord.addField(fieldStr(WMSBillOfLadingTmp, HazardousMaterial));
        carrierDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CarrierAdditionalInfo)).setFieldName('nmfcName');
        // nmfcCode and LTLClassCode are not defined on WMSBillOfLading
        carrierInformationAdded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        // Standard mechanism is replaced by custom DDSP generation        
        //super(_recordBuilder);    // skip standard code and fill the datasource from scratch

        // DDSP is based on DDSP for WHSBillOfLading (fields not defined for WMSBillOfLading are skiped)
        
        WMSBillOfLadingDP   rdp = this.getSrsRdpClassRunningInstance();
        WMSBillOfLadingTmp  wmsBillOfLadingTmp = rdp.getWMSBillOfLadingTmp();

        // WMSBillOfLadingTmp is a single temporary table (filled by class WMSBillOfLadingDP) that contains header and lines

        // Header
        select firstOnly wmsBillOfLadingTmp;
        //wmsBillOfLadingTmp.FromStreet = this.singleLineStreet(wmsBillOfLadingTmp.FromStreet);
        //wmsBillOfLadingTmp.ToStreet   = this.singleLineStreet(wmsBillOfLadingTmp.ToStreet);

        DocXmlRecord headerDataRecord = _recordBuilder.addRecord(wmsBillOfLadingTmp.data());     // each line contains header data
        headerDataRecord.setRecordName(#BillOfLadingHeader);
        headerDataRecord.setRecordLabel('Bill Of Lading');

        // Setting the flag needed for Docentric NextGen.
        headerDataRecord.setSingleRecord(true);

        WMSBillOfLading billOfLading = WMSBillOfLading::find_RU(wmsBillOfLadingTmp.BillOfLadingId);
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, BillOfLadingId));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, ShipmentId));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CustAccount));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CarrierName)).setFieldName('Name');
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, TrailerId)).setFieldName('TrailerNumber');
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, SealId)).setFieldName('SealNum');
        // SCAC, ProNumShipment and Notes are not defined on WMSBillOfLading
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, FreightPrepaid));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, FreightCollect));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, FreightThirdParty));
        headerDataRecord.addCalculatedFieldFromEnum('MasterBOL', enumStr(boolean), billOfLading.masterBOL);
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, MasterBOLId)).setFieldName('MasterBillOfLadingId');
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, SubBOLIds));
        
        // Add Extension fields defined on WMSBillOfLadingTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(wmsBillOfLadingTmp, headerDataRecord, true);
        
        // Split addresses in multiple fields and convert multiline street into single line
        LogisticsPostalAddress fromAddress = LogisticsPostalAddress::findRecId(billOfLading.ShippingPostalAddress);
        headerDataRecord.addCalculatedFieldFromEdt('ShipFromName', extendedTypeStr(WMSShippingName), wmsBillOfLadingTmp.ShippingName);
        headerDataRecord.addCalculatedFieldFromEdt('FromStreet', extendedTypeStr(LogisticsAddressStreet), this.singleLineStreet(fromAddress.Street));
        headerDataRecord.addCalculatedFieldFromEdt('FromCity', extendedTypeStr(LogisticsAddressCityName), fromAddress.City);
        headerDataRecord.addCalculatedFieldFromEdt('FromState', extendedTypeStr(LogisticsAddressStateId), fromAddress.State);
        headerDataRecord.addCalculatedFieldFromEdt('FromZipCode', extendedTypeStr(LogisticsAddressZipCodeId), fromAddress.ZipCode);
        headerDataRecord.addCalculatedFieldFromEdt('FromCountry', extendedTypeStr(LogisticsAddressCountryRegionId), fromAddress.CountryRegionId);

        LogisticsPostalAddress toAddress = LogisticsPostalAddress::findRecId(billOfLading.DeliveryPostalAddress);
        headerDataRecord.addCalculatedFieldFromEdt('ShipToName', extendedTypeStr(CustName), wmsBillOfLadingTmp.Name2);
        headerDataRecord.addCalculatedFieldFromEdt('ToStreet', extendedTypeStr(LogisticsAddressStreet), this.singleLineStreet(toAddress.Street));
        headerDataRecord.addCalculatedFieldFromEdt('ToCity', extendedTypeStr(LogisticsAddressCityName), toAddress.City);
        headerDataRecord.addCalculatedFieldFromEdt('ToState', extendedTypeStr(LogisticsAddressStateId), toAddress.State);
        headerDataRecord.addCalculatedFieldFromEdt('ToZipCode', extendedTypeStr(LogisticsAddressZipCodeId), toAddress.ZipCode);
        headerDataRecord.addCalculatedFieldFromEdt('ToCountry', extendedTypeStr(LogisticsAddressCountryRegionId), toAddress.CountryRegionId);

        LogisticsPostalAddress thirdPartyAddress = LogisticsPostalAddress::findRecId(billOfLading.ThirdPartyPostalAddress);
        headerDataRecord.addCalculatedFieldFromEdt('CompanyName', extendedTypeStr(CustName), wmsBillOfLadingTmp.Name3);
        headerDataRecord.addCalculatedFieldFromEdt('ThirdPartyCity', extendedTypeStr(LogisticsAddressCityName), thirdPartyAddress.City);
        headerDataRecord.addCalculatedFieldFromEdt('ThirdPartyStreet', extendedTypeStr(LogisticsAddressStreet), this.singleLineStreet(thirdPartyAddress.Street));
        headerDataRecord.addCalculatedFieldFromEdt('ThirdPartyState', extendedTypeStr(LogisticsAddressStateId), thirdPartyAddress.State);
        headerDataRecord.addCalculatedFieldFromEdt('ThirdPartyZipCode', extendedTypeStr(LogisticsAddressZipCodeId), thirdPartyAddress.ZipCode);
        headerDataRecord.addCalculatedFieldFromEdt('ThirdPartyCountry', extendedTypeStr(LogisticsAddressCountryRegionId), thirdPartyAddress.CountryRegionId);
                
        // Customer orders
        while select wmsBillOfLadingTmp where
            wmsBillOfLadingTmp.InventTransRefId ||
            wmsBillOfLadingTmp.OrderQty ||
            wmsBillOfLadingTmp.OrderWeight ||
            wmsBillOfLadingTmp.CircleY ||
            wmsBillOfLadingTmp.CircleN ||
            wmsBillOfLadingTmp.OrderAdditionalInfo
        {
            _recordBuilder.goToParentRecord();
            this.addCustomerOrderInformation(_recordBuilder, wmsBillOfLadingTmp);            
        }

        if ((!this.isRuntime()) && (!customerOrderInformationAdded))
        {
            _recordBuilder.goToParentRecord();
            this.addCustomerOrderInformation(_recordBuilder, null);     // in design time add empty record if no records found
        }

        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, GrandTotalQtyCustomer)).setFieldName('TotalQty');
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, GrandTotalWeightCustomer)).setFieldName('TotalWeight');

        // Carrier items
        while select wmsBillOfLadingTmp where
            wmsBillOfLadingTmp.CarrierHandlingQty ||
            wmsBillOfLadingTmp.CarrierHandlingPackageType ||
            wmsBillOfLadingTmp.CarrierPackageQty ||
            wmsBillOfLadingTmp.CarrierPackagePackageType ||
            wmsBillOfLadingTmp.CarrierWeight ||
            wmsBillOfLadingTmp.HazardousMaterial ||
            wmsBillOfLadingTmp.CarrierAdditionalInfo
        {
            _recordBuilder.goToParentRecord();
            this.addCarrierInformation(_recordBuilder, wmsBillOfLadingTmp);            
        }

        if ((!this.isRuntime()) && (!carrierInformationAdded))
        {
            _recordBuilder.goToParentRecord();
            this.addCarrierInformation(_recordBuilder, null);           // in design time add empty record if no records found
        }

        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, GrandTotalHandlingQtyCarrier)).setFieldName('TotalHandlingQty');
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, GrandTotalPackageQtyCarrier)).setFieldName('TotalPackingQty');
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, GrandTotalWeightCarrier)).setFieldName('TotalCarrierWeight');

        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, LoadedByShipperValue));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, LoadedByDriverValue));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CountedByShipperValue));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CountedByDriver1Value));
        headerDataRecord.addField(fieldStr(WMSBillOfLadingTmp, CountedByDriver2Value));
        
        // Store the header to use it in overrideReportRunSettings()
        header = headerDataRecord.getCommon();
        
        // Export generated XML to a string or a file to check the resulting report DS.
        //_recordBuilder.exportToXmlFile('WMSBillOfLadingDs.xml');
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // Custom placeholders
    #define.BillOfLadingId('BillOfLadingId')
    #define.ShipFromName('ShipFromName')
    #define.ShipmentId('ShipmentId')
    #define.ShipToName('ShipToName')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.CompanyName('CompanyName')
    #define.CarrierName('CarrierName')
    #define.TrailerNumber('TrailerNumber')
    #define.SealNum('SealNum')
    #define.MasterBOL('MasterBOL')
    #define.MasterBillOfLadingId('MasterBillOfLadingId')
    #define.TotalHandlingQty('TotalHandlingQty')
    #define.TotalPackageQty('TotalPackageQty')
    #define.TotalWeight('TotalWeight')
    // CarrierCode, SCAC, ProNumShipment and Notes are not defined on WMSBillOfLading
    // for SessionDate use standard CurrentDate placeholder
    
    [DocPlaceholderAttribute(#BillOfLadingId, 'BOL - Bill of Lading ID'),
     DocPlaceholderAttribute(#ShipFromName, 'BOL - Ship From Name'),
     DocPlaceholderAttribute(#ShipmentId, 'BOL - Shipment ID'),
     DocPlaceholderAttribute(#ShipToName, 'BOL - Ship To Name'),
     DocPlaceholderAttribute(#CustAccount, 'BOL - Customer Account'),
     DocPlaceholderAttribute(#CustName, 'BOL - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'BOL - Customer Contact Name'),
     DocPlaceholderAttribute(#CompanyName, 'BOL - Company Name'),
     DocPlaceholderAttribute(#CarrierName, 'BOL - Carrier Name'),
     DocPlaceholderAttribute(#TrailerNumber, 'BOL - Trailer Number'),
     DocPlaceholderAttribute(#SealNum, 'BOL - Seal Number'),
     DocPlaceholderAttribute(#MasterBOL, 'BOL - Master Bill of Lading'),
     DocPlaceholderAttribute(#MasterBillOfLadingId, 'BOL - Master Bill of Lading ID'),
     DocPlaceholderAttribute(#TotalHandlingQty, 'BOL - Total Handlig Qty'),
     DocPlaceholderAttribute(#TotalPackageQty, 'BOL - Total Package Qty'),
     DocPlaceholderAttribute(#TotalWeight, 'BOL - Total Weight')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders. 
        CustTable custTable = CustTable::find(header.CustAccount);

        placeholderMng.replacePlaceholderInCurrentPrintDest(#BillOfLadingId, header.BillOfLadingId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipFromName, header.ShippingName);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipmentId, header.ShipmentId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipToName, header.Name2);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, header.CustAccount);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, custTable.name());
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::contactPersonName(custTable.ContactPersonId));
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CompanyName, header.Name3);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CarrierName, header.CarrierName);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#TrailerNumber, header.TrailerId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SealNum, header.SealId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#MasterBOL, (header.MasterBOL != '' ? 'Yes' : 'No'));
        placeholderMng.replacePlaceholderInCurrentPrintDest(#MasterBillOfLadingId, header.MasterBOLId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#TotalHandlingQty, header.GrandTotalHandlingQtyCarrier);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#TotalPackageQty, header.GrandTotalPackageQtyCarrier);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#TotalWeight, header.GrandTotalWeightCarrier);

        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(header.CustAccount);
        _reportRunContext.archiveContract().setWMSShipmentId(header.ShipmentId);
        _reportRunContext.archiveContract().setDocument(header.BillOfLadingId);

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>