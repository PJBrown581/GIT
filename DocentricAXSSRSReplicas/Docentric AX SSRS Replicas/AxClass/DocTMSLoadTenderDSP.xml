<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTMSLoadTenderDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocTMSLoadTenderDSP extends DocDataSourceProviderSrsReporting
{
    /* Variables used for custom placeholders */
    str         placeholderLoadId, placeholderOrderNumber, placeholderContactName, placeholderContactEmail, placeholderCustAccount;
    CustTable   custTable;
    boolean     isMultipleLoadIds, isMultipleCustomers, isMultipleOrders;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Load tender DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);
        _labelMap.insert(literalStr("@TRX2666"), 'Booking request form');
        _labelMap.insert(literalStr("@SYS27874"), 'Customer name');
        _labelMap.insert(literalStr("@SYS16717"), 'Customer address');
        _labelMap.insert(literalStr("@TRX2655"), 'Customer phone');
        _labelMap.insert(literalStr("@TRX2656"), 'Customer fax');
        _labelMap.insert(literalStr("@TRX2657"), 'Customer email');
        _labelMap.insert(literalStr("@TRX2658"), 'Customer po');
        _labelMap.insert(literalStr("@TRX2659"), 'Order reference');
        _labelMap.insert(literalStr("@SYS5280"), 'Terms');
        _labelMap.insert(literalStr("@SYS14559"), 'Contact');
        _labelMap.insert(literalStr("@SYS36310"), 'Phone');
        _labelMap.insert(literalStr("@TRX2660"), 'email');
        _labelMap.insert(literalStr("@TRX2661"), 'Pick up location');
        _labelMap.insert(literalStr("@WAX258"), 'Load ID');
        _labelMap.insert(literalStr("@TRX2662"), 'Load date / time');
        _labelMap.insert(literalStr("@TRX2663"), 'Container size');
        _labelMap.insert(literalStr("@SYS308696"), 'Total miles');
        _labelMap.insert(literalStr("@WAX901"), 'Load weight');
        _labelMap.insert(literalStr("@TRX2665"), 'Express release bol');
        _labelMap.insert(literalStr("@SYS2048"), 'No');
        _labelMap.insert(literalStr("@TRX2703"), 'Please notify');
        _labelMap.insert(literalStr("@TRX2702"), 'Express release bol notification');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method enables you to add additional data to a report data source

    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);
        
        // WHSLoadTable -> WHSLoadLine -> SalesLine -> SalesTable -> CustTable
        // Add here additional fields to data records.

        if (tableNum(WHSLoadLine) == _qbds.table())
        {
            // We need to add Load ID to WHSLoadLine to enable reshaping data in the template.
            _addingRecord.addField(fieldStr(WHSLoadLine, LoadId));
        }
        else if (tableNum(WHSLoadTable) == _qbds.table())
        {
            Notes loadNotes;
            WHSLoadTable whsLoadTable = _common;
            loadNotes = whsLoadTable.displayLoadNotes();

            // Remove empty new line added in WHSLoadTable.displayLoadNotes() method.
            if (strEndsWith(loadNotes, '\n'))
            {
                loadNotes = subStr(loadNotes, 1, strLen(loadNotes)-1);
            }
            
            // Remove the DisplayLoadNotes field added in super()
            _addingRecord.removeField(tableMethodStr(WHSLoadTable, displayLoadNotes));

            // Add a new calculated field with the same name as the removed one.
            _addingRecord.addCalculatedField('DisplayLoadNotes', loadNotes);
        }
        else if (tableNum(SalesTable) == _qbds.table())
        {
            SalesTable salesTable = _common;
            ContactPerson contactPerson = salesTable.contactPerson();

            _addingRecord.addCalculatedField('ContactPersonName', contactPerson.personName());
            _addingRecord.addCalculatedField('ContactPersonPhone', contactPerson.phone());
            _addingRecord.addCalculatedField('ContactPersonEmail', contactPerson.email());
        }

        // Set the flag needed for Docentric NextGen.
        if (tableNum(SalesLine) == _qbds.table() || tableNum(SalesTable) == _qbds.table() || tableNum(CustTable) == _qbds.table())
        {
            _addingRecord.setSingleRecord(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super (_common, _qbds);

        // Store values for custom placeholders into global variables.
        if (tableNum(WHSLoadLine) == _qbds.table())
        {
            WHSLoadLine whsLoadLine = _common;
            
            if (placeholderLoadId != whsLoadLine.LoadId)
            {
                // Check if there are more than one load.
                isMultipleLoadIds = placeholderLoadId == '' ? false : true;
                placeholderLoadId = whsLoadLine.LoadId;
            }
            
            if (placeholderOrderNumber != whsLoadLine.OrderNum)
            {
                // Check if there are more than one order.
                isMultipleOrders = placeholderOrderNumber == '' ? false : true;
                placeholderOrderNumber = whsLoadLine.OrderNum;
            }
        } 
        else if (tableNum(CustTable) == _qbds.table())
        {
            custTable = _common.data();
        }
        else if (tableNum(SalesTable) == _qbds.table())
        {
            SalesTable salesTable = _common;
            ContactPerson contactPerson = salesTable.contactPerson();

            if (placeholderCustAccount != salesTable.CustAccount)
            {
                // Check if there is more than one customer
                isMultipleCustomers = placeholderCustAccount == '' ? false : true;
                
                placeholderCustAccount = salesTable.CustAccount;
                placeholderContactName = contactPerson.personName();
                placeholderContactEmail = contactPerson.email();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.LoadId('LoadId')
    #define.OrderNum('OrderNum')
    #define.CustAccount('CustAccount')
    #define.CustomerName('CustomerName')
    #define.CustomerAddress('CustomerAddress')
    #define.CustomerEmail('CustomerEmail')
    #define.ContactName('ContactName')
    #define.ContactEmail('ContactEmail')

    [DocPlaceholderAttribute(#LoadId, 'LT - Load ID'),
     DocPlaceholderAttribute(#OrderNum, 'LT - Order number'),
     DocPlaceholderAttribute(#CustAccount, 'LT - Customer account'),
     DocPlaceholderAttribute(#CustomerName, 'LT - Customer name'),
     DocPlaceholderAttribute(#CustomerAddress, 'LT - Customer address'),
     DocPlaceholderAttribute(#CustomerEmail, 'LT - Customer email'),
     DocPlaceholderAttribute(#ContactName, 'LT - Contact name'),
     DocPlaceholderAttribute(#ContactEmail, 'LT - Contact email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @LoadId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadId, isMultipleLoadIds ? DocConstantDSP::MULTIPLE : placeholderLoadId);
        
        // -- Placeholder @OrderNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderNum, isMultipleOrders ? DocConstantDSP::MULTIPLE : placeholderOrderNumber);

        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, isMultipleCustomers ? DocConstantDSP::MULTIPLE : placeholderCustAccount);

        // -- Placeholder @CustomerName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustomerName, isMultipleCustomers ? DocConstantDSP::MULTIPLE : custTable.name());

        // -- Placeholder @CustomerAddress@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustomerAddress, isMultipleCustomers ? DocConstantDSP::MULTIPLE : custTable.address());

        // -- Placeholder @CustomerEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustomerEmail, isMultipleCustomers ? DocConstantDSP::MULTIPLE : custTable.email());

        // -- Placeholder @ContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ContactName, isMultipleCustomers ? DocConstantDSP::MULTIPLE : placeholderContactName);

        // -- Placeholder @ContactEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ContactEmail, isMultipleCustomers ? DocConstantDSP::MULTIPLE : placeholderContactEmail);

        // Fill the Print archive contract.
        if (!isMultipleLoadIds)
        {
            _reportRunContext.archiveContract().setWHSLoadId(placeholderLoadId);
        }
        if (!isMultipleOrders)
        {
            _reportRunContext.archiveContract().setDocument(placeholderOrderNumber);
        }
        if (!isMultipleCustomers)
        {
            _reportRunContext.archiveContract().setCustAccount(placeholderCustAccount);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>