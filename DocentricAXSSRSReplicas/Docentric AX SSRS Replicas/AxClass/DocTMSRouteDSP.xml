<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTMSRouteDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocTMSRouteDSP extends DocDataSourceProviderSrsReporting
{
    // Varibles used for custom placeholders.
    TMSMiles            placeholderMiles = 0;
    str                 placeholderRouteCode;
    str                 placeholderCarrierCode;
    str                 placeholderCarrierName;
    TMSRouteGuideCode   placeholderRouteGuide;
    TMSDescription      placeholderDescription;
    utcdatetime         placeholderAppointmentDateTime;
    utcdatetime         placeholderShipmentDateTime;
    utcdatetime         placeholderDeliveryDateTime;
    boolean             isMultipleRouteCodes = false;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Route DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method that enables you to add additional data to a report data source
    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);

        // Add CurrencyCode field and diplay methods for showing TotalMiles and routeCarrier from TMSRoute table.
        if (tableNum(TMSRoute) == _qbds.table())
        {
            _addingRecord.addDisplayMethod(tableMethodStr(TMSRoute, displayTotalMiles));
            _addingRecord.addDisplayMethod(tableMethodStr(TMSRoute, routeCarrier));

            // TODO: Add here additional fields related to TMSRoute.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super (_common, _qbds);

        // Store values for custom placeholders into global variables.
        if (tableNum(TMSRoute) == _qbds.table())
        {
            TMSRoute tmsRoute = _common;
            
            placeholderCarrierCode          = tmsRoute.routeCarrier();
            placeholderRouteGuide           = TMSRouteGuide::findByRecId(tmsRoute.RouteGuideRecId).RouteGuideCode;
            placeholderDescription          = tmsRoute.Description;
            placeholderAppointmentDateTime  = tmsRoute.ApptUTCDateTime;
            placeholderShipmentDateTime     = tmsRoute.ShipUTCDateTime;
            placeholderDeliveryDateTime     = tmsRoute.DeliveryUTCDateTime;

            placeholderMiles += tmsRoute.displayTotalMiles();

            if (placeholderCarrierCode)
            {
                placeholderCarrierName = TMSCarrier::find(placeholderCarrierCode).Name;
            }

            if (placeholderRouteCode != tmsRoute.RouteCode)
            {
                // Check if there is more than one route code.
                isMultipleRouteCodes    =   placeholderRouteCode == '' ? false : true;
                placeholderRouteCode    =   tmsRoute.RouteCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.Miles('Miles')
    #define.RouteCode('RouteCode')
    #define.RouteCarrierCode('RouteCarrier')
    #define.RouteCarrierName('RouteCarrierName')
    #define.RouteGuide('RouteGuide')
    #define.Description('Description')
    #define.AppointmentDateTime('AppointmentDateTime')
    #define.ShipmentDateTime('ShipmentDateTime')
    #define.DeliveryDateTime('DeliveryDateTime')

    [DocPlaceholderAttribute(#Miles, 'RO - Total miles'),
     DocPlaceholderAttribute(#RouteCode,'RO - Route code'),
     DocPlaceholderAttribute(#RouteCarrierCode,'RO - Route carrier code'),
     DocPlaceholderAttribute(#RouteCarrierName,'RO - Route carrier name'),
     DocPlaceholderAttribute(#RouteGuide, 'RO - Route guide'),
     DocPlaceholderAttribute(#Description, 'RO - Description'),
     DocPlaceholderAttribute(#AppointmentDateTime, 'RO - Appointment date and time'),
     DocplaceholderAttribute(#ShipmentDateTime, 'RO - Shipment date and time'),
     DocPlaceholderAttribute(#DeliveryDateTime, 'RO - Delivery date and time')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // @RouteCode@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RouteCode, isMultipleRouteCodes ? DocConstantDSP::MULTIPLE : placeholderRouteCode);

        // @RouteCarrierCode@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RouteCarrierCode, isMultipleRouteCodes ? DocConstantDSP::MULTIPLE : placeholderCarrierCode);

        // @RouteCarrierName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RouteCarrierName, isMultipleRouteCodes ? DocConstantDSP::MULTIPLE : placeholderCarrierName);

        // @RouteGuide@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RouteGuide, isMultipleRouteCodes ? DocConstantDSP::MULTIPLE : placeholderRouteGuide);

        // @Description@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#Description, isMultipleRouteCodes ? DocConstantDSP::MULTIPLE : placeholderDescription);

        // @Miles@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#Miles, placeholderMiles);
        
        // @AppointmentDateTime@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#AppointmentDateTime, isMultipleRouteCodes ? utcDateTimeNull() : placeholderAppointmentDateTime);

        // @ShipmentDateTime@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipmentDateTime, isMultipleRouteCodes ? utcDateTimeNull() : placeholderShipmentDateTime);

        // @DeliveryDateTime@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryDateTime, isMultipleRouteCodes ? utcDateTimeNull() : placeholderDeliveryDateTime);

        // Fill the print archive contract
        if (!isMultipleRouteCodes)
        {
            _reportRunContext.archiveContract().setDocument(placeholderRouteCode);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>