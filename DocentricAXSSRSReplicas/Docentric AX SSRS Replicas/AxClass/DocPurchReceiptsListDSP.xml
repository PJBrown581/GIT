<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPurchReceiptsListDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocPurchReceiptsListDSP class is a DSP class for the PurchReceiptsList report.
/// </summary>
class DocPurchReceiptsListDSP extends DocDataSourceProviderSrsProforma
{
    TradeDocumentReportContract     reportContract;
    PurchTable                      purchTable;

    /* Variables for custom placeholders */
    str     placeholder_purchId;
    str     placeholder_deliveryName;
    str     placeholder_deliveryAddress;
    str     placeholder_deliveryTerms;
    date    placeholder_receiptsListDate;

    #define.PODefaultDimensionField('POFinancialDimensions')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Pagination.
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');

        // Document header.
        _labelMap.insert(literalStr("@SYS77429"), 'VAT'); // Enterprise number
        _labelMap.insert(literalStr("@SYS26946"), 'Tax exempt number');

        // Document lines.
        _labelMap.insert(literalStr("@SYS80470"), 'Description');
        _labelMap.insert(literalStr("@SYS12489"), 'In stock');

        // Receipt line.
        _labelMap.insert(literalStr("@SYS101277"), 'Receipt');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(PurchReceiptsListHeaderTmp))
        {
            /* COMPANY RELATED DATA */
            // NOTE: The company data are excluded since we have them in the GeneralData data section.
            _addingRecord.addAllFieldsExcept([
                fieldStr(PurchReceiptsListHeaderTmp, CompanyName),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyAddress),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyPhone),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyTeleFax),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyGiro),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyCoRegNum),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyLogo),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyEnterpriseNumber),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyBankAccountName),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyBankAccountNum),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyBankAccountRoutingNum),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyCommercialRegister),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyCommercialRegisterInsetNumber),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyCommercialRegisterSection),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyEmail),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyRegNum),
                fieldStr(PurchReceiptsListHeaderTmp, CompanyVATNum)
            ]);

            // Translating Company Address field to the Language set on vendReceiptsListJour
            // NOTE: DirUtility compares country value from the address with either short name or long name defined in D365 Country/Region
            _addingRecord.addCalculatedFieldFromEdt('CompanyAddressTranslatedCountry',extendedTypeStr(Addressing),
                DirUtility::replaceAddressTokenLanguage(CompanyInfo::find().postalAddress(), this.vendReceiptsListJour().LanguageId));

            // Setting the flag needed for Docentric NextGen.
            _addingRecord.setSingleRecord(true);

            //-- Add Purchase order email and Vendor primary email.
            _addingRecord.addCalculatedField('OrderEmail', purchTable.Email);
            VendTable vendTable_OrderAccount = purchTable.vendTable_OrderAccount();
            _addingRecord.addCalculatedField('VendorEmail', vendTable_OrderAccount.email());
            VendTable vendTable_InvoiceAccount = purchTable.vendTable_InvoiceAccount();
            _addingRecord.addCalculatedField('InvoiceAccountEmail', vendTable_InvoiceAccount.email());
            // See the references to the Account field of the CustVendAccountMap map for the explanation.

            // -- Add Custom Fields defined on PurchTable and VendTable, if any.
            // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(purchTable, _addingRecord);
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(vendTable_OrderAccount, _addingRecord);

            // Add Financial dimensions.
            _addingRecord.addCalculatedFieldFromEdt(#PODefaultDimensionField, extendedTypeStr(DimensionDefault), purchTable.DefaultDimension);


            // TODO: Add here additional fields (or records) to the single header record by using the related
            // data to the _rdpTableRecord table buffer (PurchReceiptsListHeaderTmp) or reportContract.
            // For example, add additional data related to the vendor:
            //PurchReceiptsListHeaderTmp purchReceiptsListHeaderTmp = _rdpTableRecord;
            //VendReceiptsListJour vendReceiptsListJour = this.vendReceiptsListJour();
            //_addingRecord.addCalculatedField('VendAccount', vendReceiptsListJour.VendAccount);
            //_addingRecord.addCalculatedField('VendName', VendTable::find(vendReceiptsListJour.VendAccount).name());
        }

        else if (_rdpTableName == tableStr(PurchReceiptsListDetailsTmp))
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);

            // TODO: Add here additional fields from the related VendReceiptsListTrans table (or some other tables).
            //PurchReceiptsListDetailsTmp purchReceiptsListDetailsTmp = _rdpTableRecord;
            //VendReceiptsListTrans vendReceiptsListTrans = this.vendReceiptsListTrans(purchReceiptsListDetailsTmp.VendReceiptsListTrans);
            //_addingRecord.addCalculatedField('LineNum', vendReceiptsListTrans.LineNum);
        }

        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_PurchReceiptsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Purchase order receipts list DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendReceiptsListJour</Name>
				<Source><![CDATA[
    protected VendReceiptsListJour vendReceiptsListJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = VendReceiptsListJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendReceiptsListTrans</Name>
				<Source><![CDATA[
    protected VendReceiptsListTrans vendReceiptsListTrans(RecId _vendReceiptsListTransRecId)
    {
        VendReceiptsListTrans vendReceiptsListTrans;

        if (this.isProforma())
        {
            vendReceiptsListTrans = this.getProformaTransLine(_vendReceiptsListTransRecId);
        }
        else
        {
            select firstonly vendReceiptsListTrans where vendReceiptsListTrans.RecId == _vendReceiptsListTransRecId;
        }

        return vendReceiptsListTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.PurchId('PurchId')
    #define.VendAccount('VendAccount')
    #define.VendName('VendName')
    #define.VendContactName('VendContactName')
    #define.DeliveryName('DeliveryName')
    #define.DeliveryAddress('DeliveryAddress')
    #define.DeliveryTerms('DeliveryTerms')
    #define.ReceiptsListDate('ReceiptsListDate')
    #define.OrderEmail('OrderEmail')

    [DocPlaceholderAttribute(#PurchId, 'PRL - Purch ID'),
     DocPlaceholderAttribute(#VendAccount, 'PRL - Vendor Account ID'),
     DocPlaceholderAttribute(#VendName, 'PRL - Vendor Name'),
     DocPlaceholderAttribute(#VendContactName, 'PRL - Contact Name'),
     DocPlaceholderAttribute(#DeliveryName, 'PRL - Delivery Name'),
     DocPlaceholderAttribute(#DeliveryAddress, 'PRL - Delivery Address'),
     DocPlaceholderAttribute(#DeliveryTerms, 'PRL - Delivery Terms'),
     DocPlaceholderAttribute(#ReceiptsListDate, 'PRL - Receipts List Date'),
     DocPlaceholderAttribute(#OrderEmail, 'PRL - Purch Order Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding purchTable. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(purchTable);

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @PurchId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PurchId, placeholder_purchId);
        
        // -- Placeholder @VendAccount@
        str vendAccount = this.vendReceiptsListJour().VendAccount;
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendAccount, vendAccount);

        // -- Placeholder @ReceiptsListDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ReceiptsListDate, placeholder_receiptsListDate);

        // -- Placeholder @OrderEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderEmail, purchTable.Email);

        // -- Placeholder @DeliveryName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryName, placeholder_deliveryName);

        // -- Placeholder @DeliveryTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryTerms, placeholder_deliveryTerms);

        // -- Placeholder @VendName@
        str vendName = VendTable::find(vendAccount).name();
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendName, vendName);

        // -- Placeholder @VendContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendContactName, DocDspHelper::contactPersonName(purchTable.ContactPersonId));

        // -- Placeholder @DeliveryAddress@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryAddress, placeholder_deliveryAddress);


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setVendAccount(vendAccount);
        _reportRunContext.archiveContract().setPurchId(placeholder_purchId);
        _reportRunContext.archiveContract().setDocument(placeholder_purchId, placeholder_receiptsListDate);
        _reportRunContext.archiveContract().setJournal(this.vendReceiptsListJour().RecId, DocJournalType::VendReceiptsListJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(PurchReceiptsListHeaderTmp))
        {
            PurchReceiptsListHeaderTmp header = _rdpTableRecord;

            // Store custom placeholders' values.
            placeholder_purchId = header.PurchId;
            placeholder_deliveryName = header.DeliveryName;
            placeholder_deliveryAddress = header.DeliveryAddress;
            placeholder_deliveryTerms = header.DeliveryTerms;
            placeholder_receiptsListDate = header.ReceiptsListDate;

            purchTable = PurchTable::find(header.PurchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// -- When to use this method?
    /// If you want to quickly generate DDSP for a sample journal record.
    /// -- How to run it?
    /// Set up this class as the startup object in your project.
    /// -- NOTE
    /// Please verify all TODOs in the method and make changes if needed.
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    public static void main(Args _args)
    {
        VendReceiptsListJour vendReceiptsListJour;

        // TODO: (1) Select the sample journal record.
        select firstonly vendReceiptsListJour;

        // Add it as the context record, which is going to be printed.
        Args args = new Args();
        args.record(vendReceiptsListJour);

        PurchReceiptsListController controller  = PurchReceiptsListController::construct();

        // TODO: (2) Change the name SSRS Report Design if needed.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderReceiptsList).getDefaultReportFormat());
        controller.parmArgs(args);
        
        PurchReceiptsListContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmRecordId(vendReceiptsListJour.RecId);
        rdpContract.parmTableId(vendReceiptsListJour.TableId);

        // Set the Docentric Generate DS print destination settings.
        SRSPrintDestinationSettings pds = controller.parmReportContract().parmPrintSettings();
        pds.printMediumType(SRSPrintMediumType::GenerateDataSource_DC);

        // TODO: (3) Set Design and Preview languages if needed.
        pds.parmGenerateDSPrintDestSettings_DC().parmLanguageId(vendReceiptsListJour.LanguageId);
        pds.parmGenerateDSPrintDestSettings_DC().parmPreviewLanguages('fr,de,it,es');

        // Initalize PurchReceiptListJournalPrint class instance because there is no other way
        // NOT to use Print Management.
        PurchReceiptListJournalPrint purchReceiptListJournalPrint = PurchReceiptListJournalPrint::construct();
        purchReceiptListJournalPrint.parmPrintFormletter(NoYes::Yes);
        purchReceiptListJournalPrint.parmUsePrintManagement(false);
        purchReceiptListJournalPrint.parmPrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack());
        
        args.caller(purchReceiptListJournalPrint);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::OriginalPrint);

        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmShowDialog(false);
        controller.startOperation();
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>