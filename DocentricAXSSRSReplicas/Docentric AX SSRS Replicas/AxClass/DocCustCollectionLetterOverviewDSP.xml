<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocCustCollectionLetterOverviewDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocCustCollectionLetterOverviewDSP extends DocDataSourceProviderSrsReporting
{
    /* Variable used for custom placeholders */
    AccountNum              placeholder_accountNum;
    boolean                 multiple_accountNum = false;
    CollectionLetterNum     placeholder_collectionLetterNum;
    boolean                 multiple_collectionLetterNum = false;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Collection letter overview DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method that enables you to add additional data to a report data source
    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        if (_qbds.table() == tableNum(CustCollectionLetterJour))
        {
            // Add the deep link for AccountNum.
            CustCollectionLetterJour custCollectionRecordJour = _common;
            Map custFormFields = new Map(Types::String, Types::String);
            custFormFields.insert(fieldStr(CustTable, AccountNum), custCollectionRecordJour.AccountNum);
            str accountNumUrl = DocGlobalHelper::generateRecordUrl(menuItemDisplayStr(CustTable), MenuItemType::Display,
                formDataSourceStr(CustTable, CustTable), custFormFields);
            
            _addingRecord.addCalculatedField('AccountNumUrl', accountNumUrl, 'D365 url to Customer');

            // TODO: Add additional header fields if required.
        }
        else if (_qbds.table() == tableNum(CustCollectionLetterTrans))
        {
            _addingRecord.getField(fieldStr(CustCollectionLetterTrans, CalculationAmount)).setFieldLabelId(literalStr('@SYS179586'));
            _addingRecord.getField(fieldStr(CustCollectionLetterTrans, RemainAmount)).setFieldLabelId(literalStr('@SYS96103'));
        }
        else if (_qbds.table() == tableNum(CustTrans))
        {
            // Add display methods.
            _addingRecord.addDisplayMethod(tableMethodStr(CustTrans, getBillingClassification));
            _addingRecord.addDisplayMethod(tableMethodStr(CustTrans, remainAmountCur));
        }
        else if (_qbds.table() == tableNum(CustTable) || _qbds.table() == tableNum(DirPartyTable))
        {
            // Setting the flag needed for Docentric NextGen.
            _addingRecord.setSingleRecord(true);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (tableStr(CustCollectionLetterJour) == _rdpTableName)
        {
            CustCollectionLetterJour custCollectionRecordJour = _rdpTableRecord;
            
            if (!placeholder_accountNum)
            {
                placeholder_accountNum = custCollectionRecordJour.AccountNum;
            }
            else if (placeholder_accountNum != custCollectionRecordJour.AccountNum)
            {
                multiple_accountNum = true;
            }

            if (!placeholder_collectionLetterNum)
            {
                placeholder_collectionLetterNum = custCollectionRecordJour.CollectionLetterNum;
            }
            else if (placeholder_collectionLetterNum != custCollectionRecordJour.CollectionLetterNum)
            {
                multiple_collectionLetterNum = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')

    [DocPlaceholderAttribute(#CustAccount, 'CCLO - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'CCLO - Customer Name')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholders @CustAccount@ and @CustName@
        if (!multiple_accountNum)
        {
            placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_accountNum);
            placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, CustTable::find(placeholder_accountNum).name());
        }


        // Fill the Print archive contract if printed for only one customer
        if (placeholder_accountNum && (!multiple_accountNum))
        {
            _reportRunContext.archiveContract().setCustAccount(placeholder_accountNum);

            if (placeholder_collectionLetterNum && (!multiple_collectionLetterNum))
            {
                _reportRunContext.archiveContract().setJournal(CustCollectionLetterJour::find(placeholder_collectionLetterNum, placeholder_accountNum).RecId,
                                                               DocJournalType::CustCollectionLetterJour);
            }
        }


        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>