<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTMSUsmcaCertificateOfOriginDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocTMSUsmcaCertificateOfOriginDSP class is a DSP class for the TMSUsmcaCertificateOfOrigin report.
/// </summary>
public class DocTMSUsmcaCertificateOfOriginDSP extends DocDataSourceProviderSrsReporting
{
    DocTableFieldsMetadata extensionFieldsMetadata_TMSUsmcaCertificateOfOriginTmp = DocTableFieldsMetadata::construct(tableStr(TMSUsmcaCertificateOfOriginTmp));
    str placeholderCertifierName;
    str placeholderCertifierEmail;
    str placeholderExporterName;
    str placeholderExporterEmail;
    str placeholderImporterName;
    str placeholderImporterEmail;
    str placeholderProducerName;
    str placeholderProducerEmail;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>The class description</returns>
    public ClassDescription description()
    {
        return 'USMCA Certificate of origin DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overriden method that enables you to store particular data fields
    /// from the currently adding record of the RDP (report data provider) table to the class
    /// global variables. This way you can use them in the this.overrideReportRunSettings() method to
    /// replace custom placeholders or change the selected print destination settings.
    /// </summary>
    /// <param name = "_rdpTableRecord">RDP (report data provider) table record.</param>
    /// <param name = "_rdpTableName">RDP (report data provider) table name.</param>
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(TMSUsmcaCertificateOfOriginTmp))
        {
            TMSUsmcaCertificateOfOriginTmp currentRecord = _rdpTableRecord;

            // Store custom placeholders' values
            if (placeholderCertifierName == '')
            {
                placeholderCertifierName = currentRecord.CertifierName;
            }

            if (placeholderCertifierEmail == '')
            {
                placeholderCertifierEmail = currentRecord.CertifierEmail;
            }

            if (placeholderExporterName == '')
            {
                placeholderExporterName = currentRecord.ExporterName;
            }

            if (placeholderExporterEmail == '')
            {
                placeholderExporterEmail = currentRecord.ExporterEmail;
            }

            if (placeholderImporterName == '')
            {
                placeholderImporterName = currentRecord.ImporterName;
            }

            if (placeholderImporterEmail == '')
            {
                placeholderImporterEmail = currentRecord.ImporterEmail;
            }

            if (placeholderProducerName == '')
            {
                placeholderProducerName = currentRecord.ProducerName;
            }

            if (placeholderProducerEmail == '')
            {
                placeholderProducerEmail = currentRecord.ProducerEmail;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method in order to exclude particular fields from the currently adding record of the RDP table
    /// to the report data source (DDSP), by using the _addingRecord.addAllFieldsExcept() method.
    /// Extend this method in order to add additional data to the currently adding record.
    /// Use the methods: _addingRecord.addField(), _addingRecord.addCalculatedFieldXXX(), _addingRecord.addDisplayMethod(), etc.
    /// </summary>
    /// <param name = "_addingRecord">Data record in the record tree based on the currently adding RDP record table buffer.</param>
    /// <param name = "_rdpTableRecord">RDP (report data provider) table record.</param>
    /// <param name = "_rdpTableName">RDP (report data provider) table name.</param>
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(TMSUsmcaCertificateOfOriginTmp))
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);

            // Add Extension fields defined on TMSCertificateOfOriginTmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_rdpTableRecord, _addingRecord, true, extensionFieldsMetadata_TMSUsmcaCertificateOfOriginTmp);

        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.CertifierName('CertifierName')
    #define.CertifierEmail('CertifierEmail')
    #define.ExporterName('ExporterName')
    #define.ExporterEmail('ExporterEmail')
    #define.ImporterName('ImporterName')
    #define.ImporterEmail('ImporterEmail')
    #define.ProducerName('ProducerName')
    #define.ProducerEmail('ProducerEmail')

    [DocPlaceholderAttribute(#CertifierName, 'USMCACO - Certifier Name'),
     DocPlaceholderAttribute(#CertifierEmail, 'USMCACO - Ceritifer Email'),
     DocPlaceholderAttribute(#ExporterName, 'USMCACO - Exporter Name'),
     DocPlaceholderAttribute(#ExporterEmail, 'USMCACO - Exporter Email'),
     DocPlaceholderAttribute(#ImporterName, 'USMCACO - Importer Name'),
     DocPlaceholderAttribute(#ImporterEmail, 'USMCACO - Importer Email'),
     DocPlaceholderAttribute(#ProducerName, 'USMCACO - Producer Name'),
     DocPlaceholderAttribute(#ProducerEmail, 'USMCACO - Producer Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @CertifierName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CertifierName, placeholderCertifierName);

        // -- Placeholder @CertifierEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CertifierEmail, placeholderCertifierEmail);

        // -- Placeholder @ExporterName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ExporterName, placeholderExporterName);

        // -- Placeholder @ExporterEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ExporterEmail, placeholderExporterEmail);

        // -- Placeholder @ImporterName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ImporterName, placeholderImporterName);

        // -- Placeholder @ImporterEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ImporterEmail, placeholderImporterEmail);

        // -- Placeholder @ProducerName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProducerName, placeholderProducerName);

        // -- Placeholder @ProducerEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProducerEmail, placeholderProducerEmail);

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>