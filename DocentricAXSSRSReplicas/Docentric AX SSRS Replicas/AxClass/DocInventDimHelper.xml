<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocInventDimHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for getting individual dimensions that appear in inventDimPrint.
/// </summary>
public class DocInventDimHelper
{
    private const str RecordName_InventoryDimensions = 'InventoryDimensions';
    private static Map logTypeToDocumentStatusMap = new Map(Types::Enum, Types::Enum);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initLogTypeToDocumentStatusMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes map with inventReportDimHistoryLogType enum values and links them with appropriate document statuses.
    /// </summary>
    protected static void initLogTypeToDocumentStatusMap()
    {
        if (logTypeToDocumentStatusMap.empty())
        {
            logTypeToDocumentStatusMap.insert(InventReportDimHistoryLogType::SalesQuotation, DocumentStatus::Quotation);
            logTypeToDocumentStatusMap.insert(InventReportDimHistoryLogType::SalesPackingSlip, DocumentStatus::PackingSlip);
            logTypeToDocumentStatusMap.insert(InventReportDimHistoryLogType::SalesInvoice, DocumentStatus::Invoice);
            logTypeToDocumentStatusMap.insert(InventReportDimHistoryLogType::SalesConfirm, DocumentStatus::Confirmation);
            logTypeToDocumentStatusMap.insert(InventReportDimHistoryLogType::PurchPurchaseOrder, DocumentStatus::PurchaseOrder);
            logTypeToDocumentStatusMap.insert(InventReportDimHistoryLogType::PurchReceiptList, DocumentStatus::ReceiptsList);
            logTypeToDocumentStatusMap.insert(InventReportDimHistoryLogType::PurchPackingSlip, DocumentStatus::PackingSlip);
            logTypeToDocumentStatusMap.insert(InventReportDimHistoryLogType::PurchInvoice, DocumentStatus::Invoice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryDimensionsRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve Inventory dimensions for the provided Inventory related parameters and adds these data as child data records
    /// of the _parentRecord data record provided as a parameter, named as InventoryDimensions.
    /// </summary>
    /// <param name = "_parentRecord">Data record to which the new inventory dimensions data records will be added to.</param>
    /// <param name = "_inventReportDimHistoryLogType">Enum that specifies document type used in inventReportDimHistory.</param>
    /// <param name = "_inventTransId">AKA Lot ID.</param>
    /// <param name = "_inventTransRefId">Unique ID for a given table (e.g. CustInvoiceTrans.InvoiceId).</param>
    /// <returns>True, if at least one data record with Inventory dimensions is added to the _parentRecord, otherwise returns False.</returns>
    /// <remarks>
    /// More specific methods should be used if applicable (e.g. addInventDimRecordSalesInvoice for Sales invoices).
    /// </remarks>
    public static boolean addInventoryDimensionsRecords(DocXmlRecord _parentRecord,
        InventReportDimHistoryLogType _inventReportDimHistoryLogType, InventTransId _inventTransId, InventTransRefId _inventTransRefId)
    {
        DocXmlRecord inventDimRecord;
        InventDim inventDim;
        InventReportDimHistory inventReportDimHistory;

        DocInventDimHelper::initLogTypeToDocumentStatusMap();
        container inventDimActiveFields = DocInventDimHelper::getInventDimActiveFields(_inventReportDimHistoryLogType);

        while select inventDim
                join inventReportDimHistory
                where inventDim.inventDimId == inventReportDimHistory.InventDimId
                    && inventReportDimHistory.InventTransId == _inventTransId
                    && inventReportDimHistory.TransRefId == _inventTransRefId
                    && inventReportDimHistory.TransactionLogType == _inventReportDimHistoryLogType
        {
            inventDimRecord = _parentRecord.addChildRecord(inventDim);
            inventDimRecord.setRecordName(RecordName_InventoryDimensions);
            inventDimRecord.setRecordLabelId(literalStr("@SYS53630"));

            for (int i = 1; i <= conLen(inventDimActiveFields); i++)
            {
                inventDimRecord.addField(fieldId2Name(tableNum(InventDim), conPeek(inventDimActiveFields, i)));
            }

            inventDimRecord.addCalculatedField(fieldId2Name(tableNum(InventReportDimHistory), fieldNum(InventReportDimHistory, Qty)), inventReportDimHistory.Qty, literalStr("@SYS14578"));
        }

        return inventDimRecord != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryDimensionsRecords_SalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve Inventory dimensions for the provided Inventory related parameters and adds these data as child data records
    /// of the _parentRecord data record provided as a parameter, named as InventoryDimensions.
    /// Use this method for the Sales invoice report.
    /// </summary>
    /// <param name = "_parentRecord">Data record to which the new inventory dimensions data records will be added to.</param>
    /// <param name = "_custInvoiceTrans">Customer invoice line table record</param>
    /// <returns>True, if at least one data record with Inventory dimensions is added to the _parentRecord, otherwise returns False.</returns>
    public static boolean addInventoryDimensionsRecords_SalesInvoice(DocXmlRecord _parentRecord, CustInvoiceTrans _custInvoiceTrans)
    {
        return DocInventDimHelper::addInventoryDimensionsRecords(_parentRecord, InventReportDimHistoryLogType::SalesInvoice,
            _custInvoiceTrans.InventTransId, _custInvoiceTrans.InvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryDimensionsRecords_PurchInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve Inventory dimensions for the provided Inventory related parameters and adds these data as child data records
    /// of the _parentRecord data record provided as a parameter, named as InventoryDimensions.
    /// Use this method for the Vendor invoice report.
    /// </summary>
    /// <param name = "_parentRecord">Data record to which the new inventory dimensions data records will be added to.</param>
    /// <param name = "_vendInvoiceTrans">Vendor invoice line table record</param>
    /// <returns>True, if at least one data record with Inventory dimensions is added to the _parentRecord, otherwise returns False.</returns>
    public static boolean addInventoryDimensionsRecords_PurchInvoice(DocXmlRecord _parentRecord, VendInvoiceTrans _vendInvoiceTrans)
    {
        return DocInventDimHelper::addInventoryDimensionsRecords(_parentRecord, InventReportDimHistoryLogType::PurchInvoice,
            _vendInvoiceTrans.InventTransId, _vendInvoiceTrans.InternalInvoiceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimActiveFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets appropriate active fields based on document status.
    /// </summary>
    /// <param name = "_inventReportDimHistoryLogType">Enum that specifies document type used to find document status.</param>
    /// <returns>Container of field ids for active InventDim fields</returns>
    protected static container getInventDimActiveFields (InventReportDimHistoryLogType _inventReportDimHistoryLogType)
    {
        container inventDimActiveFields;
        container inventDimActiveProductFields;

        switch(_inventReportDimHistoryLogType)
        {
            case InventReportDimHistoryLogType::PurchInvoice:
            case InventReportDimHistoryLogType::PurchPackingSlip:
            case InventReportDimHistoryLogType::PurchPurchaseOrder:
            case InventReportDimHistoryLogType::PurchReceiptList:
                    
                InventDimCtrl_Rep_Purch inventDimCtrlRepPurch = InventDimCtrl_Rep_Purch::construct();
                inventDimCtrlRepPurch.parmDocumentStatus(logTypeToDocumentStatusMap.lookup(_inventReportDimHistoryLogType));
                
                inventDimCtrlRepPurch.initDimParmVisible();
                inventDimActiveFields = inventDimCtrlRepPurch.dimFieldsActive(inventDimCtrlRepPurch.parmDimParmVisible());

                inventDimCtrlRepPurch.initProductDimParmVisible();
                inventDimActiveProductFields = inventDimCtrlRepPurch.dimFieldsActive(inventDimCtrlRepPurch.parmDimParmVisible());
                
                inventDimActiveFields = conUnion(inventDimActiveFields, inventDimActiveProductFields);
                break;

            case InventReportDimHistoryLogType::SalesConfirm:
            case InventReportDimHistoryLogType::SalesInvoice:
            case InventReportDimHistoryLogType::SalesPackingSlip:
            case InventReportDimHistoryLogType::SalesQuotation:
                    
                InventDimCtrl_Rep_Sales inventDimCtrlRepSales = InventDimCtrl_Rep_Sales::construct();
                inventDimCtrlRepSales.parmDocumentStatus(logTypeToDocumentStatusMap.lookup(_inventReportDimHistoryLogType));
                
                inventDimCtrlRepSales.initDimParmVisible();
                inventDimActiveFields = inventDimCtrlRepSales.dimFieldsActive(inventDimCtrlRepSales.parmDimParmVisible());

                inventDimCtrlRepSales.initProductDimParmVisible();
                inventDimActiveProductFields = inventDimCtrlRepSales.dimFieldsActive(inventDimCtrlRepSales.parmDimParmVisible());

                inventDimActiveFields = conUnion(inventDimActiveFields, inventDimActiveProductFields);
                break;
        }

        return inventDimActiveFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>