<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWMSJournalTransDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWMSJournalTransDSP class is a DSP class for the WMSJournalTrans report.
/// </summary>
public class DocWMSJournalTransDSP extends DocDataSourceProviderSrsReporting
{
    WMSJournalId                    placeholderJournalId = '';
    boolean                         isMultipleJournalId = false;
    JournalTransDate                placeholderJournalDate = dateNull();
    boolean                         isMultipleJournalDate = false;
    ItemIdInventoried               placeholderItemId;
    boolean                         isMultipleItemId = false;
    InventLocationId                placeholderWarehouse;
    boolean                         isMultipleWarehouse = false;
    private const str               parameterShowLog = 'ShowLog';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>The class description</returns>
    public ClassDescription description()
    {
        return 'WMS Journal Trans DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// This overridden method adds additional custom labels to the DDSP to use them in template designer.
    /// Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    /// </summary>
    /// <param name = "_labelMap">
    /// Label map: Map(labelCode, labelName).
    /// When adding labels to label map, use literalStr(labelCode), for example:
    /// _labelMap.insert(literalStr("@TRX2666"), 'Booking request form');
    /// </param>
    protected void addCustomLabels(Map _labelMap)
    {
        super (_labelMap);

        _labelMap.insert(literalStr("@SYS24048"), 'Journal lines, inventory');
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overridden method that enables you to add additional data to a report data source
    /// which is an AX query, without changing the query itself. You can also add display method
    /// to any of data source tables from the query.
    /// </summary>
    /// <param name = "_addingRecord">
    /// Adding data record based on the currently selected record (_common). Use this object to add
    /// the provided field, e.g. _addingRecord.addField(fieldName), or to add additional data.
    /// </param>
    /// <param name="_common">Currently selected record from one of the query data sources.</param>
    /// <param name="_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super (_addingRecord, _common, _qbds);

        // Add CountingReasonCode field and display method for showing item batch number disposition code
        if (tableNum(WMSJournalTrans) == _qbds.table())
        {
            // In design time, if the 'ShowLog' report parameter is not enabled, add empty JournalError child record.
            if (!this.isRuntime() && !this.getParameter(parameterShowLog).getValueTyped())
            {
                this.addEmptyJournalErrorRecord(_addingRecord);
            }

            // TODO: Add here additional fields related to WMSJournalTrans.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEmptyJournalErrorRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked in the design time to add an empty JournalError record,
    /// if the 'ShowLog' report parameter is not enabled.
    /// </summary>
    /// <param name = "_addingRecord">Adding data record based on the currently selected record.</param>
    private void addEmptyJournalErrorRecord(DocXmlRecord _addingRecord)
    {
        JournalError journalError;

        DocXmlRecord journalErrorRecord = _addingRecord.addChildRecord(journalError);

        journalErrorRecord.addField(fieldStr(JournalError, JournalId));
        journalErrorRecord.addField(fieldStr(JournalError, LineNum));
        journalErrorRecord.addDisplayMethod(tableMethodStr(JournalError, logText));
        journalErrorRecord.addField(fieldStr(JournalError, RefTableId));
        journalErrorRecord.addField(fieldStr(JournalError, Exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overriden method that enables you to store some values from the currently selected
    /// record from a query data source into global class variables.
    /// </summary>
    /// <param name = "_common">Currently selected record from one of the query data sources.</param>
    /// <param name = "_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super (_common, _qbds);

        // Store values for custom placeholders into global variables.
        if (_qbds.table() == tableNum(WMSJournalTrans))
        {
            WMSJournalTrans wmsJournalTrans = _common;

            if (placeholderJournalId != wmsJournalTrans.journalId)
            {
                // Check if there is more than one journal
                isMultipleJournalId = placeholderJournalId == '' ? false : true;
                placeholderJournalId = wmsJournalTrans.journalId;
            }

            if (placeholderJournalDate != wmsJournalTrans.transDate)
            {
                // Check if there are different transaction dates
                isMultipleJournalDate = placeholderJournalDate == dateNull() ? false : true;
                placeholderJournalDate = wmsJournalTrans.transDate;
            }

            if (placeholderItemId != wmsJournalTrans.itemId)
            {
                // Check if there are different items
                isMultipleItemId = placeholderItemId == '' ? false : true;
                placeholderItemId = wmsJournalTrans.itemId;
            }
        }

        if (_qbds.table() == tableNum(InventDim))
        {
            InventDim inventDim = _common;

            if (placeholderWarehouse != inventDim.InventLocationId)
            {
                // Check if there are different warehouses
                isMultipleWarehouse = placeholderWarehouse == '' ? false : true;
                placeholderWarehouse = inventDim.InventLocationId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAddingQbdsField</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overriden method that handles a particular table buffer's (_common) field of
    /// the currently processed query data source (_qbds) in your own way, e.g. to add some additional
    /// related info. Return true if you want to skip adding of this field in the standard way.
    /// </summary>
    /// <param name = "_fieldName">Adding table buffer field from the currently selected record (_common)</param>
    /// <param name="_addingRecord">
    /// Adding data record based on the currently selected record (_common). Use this object to add
    /// the provided field, e.g. _addingRecord.addField(fieldName), or to add additional data.
    /// </param>
    /// <param name="_common">Currently selected record from one of the query data sources.</param>
    /// <param name="_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    /// <returns>True if you want to skip adding the given field in the standard way</returns>

    protected boolean handleAddingQbdsField(FieldName _fieldName, DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        // Skip adding the Infolog field to the _addingRecord because it is an unsupported container
        if (_qbds.table() == tableNum(JournalError) && _fieldName == fieldStr(JournalError, Infolog))
        {
            return true;
        }
        return super(_fieldName, _addingRecord, _common, _qbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.JournalId('JournalID')
    #define.JournalDate('JournalDate')
    #define.ItemId('ItemID')
    #define.Warehouse('Warehouse')

    [DocPlaceholderAttribute(#JournalId, 'WMSJT - Journal ID'),
     DocPlaceholderAttribute(#JournalDate, 'WMSJT - Journal Date'),
     DocPlaceholderAttribute(#ItemId, 'WMSJT - Item ID'),
     DocPlaceholderAttribute(#Warehouse, 'WMSJT - Warehouse')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // @JournalId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#JournalId, isMultipleJournalId ? DocConstantDSP::MULTIPLE : placeholderJournalId);

        // @JournalDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#JournalDate, isMultipleJournalDate ? dateNull() : placeholderJournalDate);

        // @ItemId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemId, isMultipleItemId ? DocConstantDSP::MULTIPLE : placeholderItemId);

        //@Warehouse@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#Warehouse, isMultipleWarehouse ? DocConstantDSP::MULTIPLE : placeholderWarehouse);

        // Fill the print archive contract
        if (!isMultipleJournalId)
        {
            _reportRunContext.archiveContract().setDocument(placeholderJournalId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>