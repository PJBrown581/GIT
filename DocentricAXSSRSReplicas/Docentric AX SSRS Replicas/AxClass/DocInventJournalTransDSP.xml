<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocInventJournalTransDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocInventJournalTransDSP class is a DSP class for the InventJournalTrans report.
/// </summary>
public class DocInventJournalTransDSP extends DocDataSourceProviderSrsReporting
{
    InventJournalId                 placeholderJournalId;
    InventJournalIdOrignal          placeholderJournalIdOriginal;
    JournalNumOfLines               placeholderTotalJournalLines;
    JournalPostedDateTime           placeholderJournalPostedDateTime;
    JournalPostedUserId             placeholderJournalPostedByUser;
    InventCountingReasonCodeId      placeholderCountingReasonCode;
    boolean                         isMultipleCountingReasonCode = false;
    private const str               parameterShowLog = 'ShowLog';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the class description.
    /// </summary>
    /// <returns>The class description</returns>
    public ClassDescription description()
    {
        return 'Inventory journal lines DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// This overridden method adds additional custom labels to the DDSP to use them in template designer.
    /// Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    /// </summary>
    /// <param name = "_labelMap">
    /// Label map: Map(labelCode, labelName).
    /// When adding labels to label map, use literalStr(labelCode), for example:
    /// _labelMap.insert(literalStr("@TRX2666"), 'Booking request form');
    /// </param>
    protected void addCustomLabels(Map _labelMap)
    {
        super (_labelMap);

        _labelMap.insert(literalStr("@SYS133863"), 'Product number');
        _labelMap.insert(literalStr("@SYS50039"), 'Category');
        _labelMap.insert(literalStr("@SYS8343"), 'Ledger account');
        _labelMap.insert(literalStr("@SYS4705"), 'Worker');
        _labelMap.insert(literalStr("@SYS58659"), 'Total');
        _labelMap.insert(literalStr("@SYS50753"), 'Grand total');
        _labelMap.insert(literalStr("@SYS25623"), 'Counting');
        _labelMap.insert(literalStr("@SYS22126"), 'Inventory journal lines');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overridden method that enables you to add additional data to a report data source
    /// which is an AX query, without changing the query itself. You can also add display method
    /// to any of data source tables from the query.
    /// </summary>
    /// <param name = "_addingRecord">
    /// Adding data record based on the currently selected record (_common). Use this object to add
    /// the provided field, e.g. _addingRecord.addField(fieldName), or to add additional data.
    /// </param>
    /// <param name="_common">Currently selected record from one of the query data sources.</param>
    /// <param name="_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super (_addingRecord, _common, _qbds);

        // Add CountingReasonCode field and display method for showing item batch number disposition code
        if (tableNum(InventJournalTrans) == _qbds.table())
        {
            InventJournalTrans inventJournalTrans = _common;
            _addingRecord.addDisplayMethod(tableMethodStr(InventJournalTrans, pdsDispositionStatus));
            _addingRecord.addCalculatedField('CountingReasonCode', inventJournalTrans.CountingReasonCode);

            // In design time, if the 'ShowLog' report parameter is not enabled, add empty JournalError child record.
            if (!this.isRuntime() && !this.getParameter(parameterShowLog).getValueTyped())
            {
                this.addEmptyJournalErrorRecord(_addingRecord);
            }

            // TODO: Add here additional fields related to InventJournalTrans.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEmptyJournalErrorRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is invoked in the design time to add an empty JournalError record,
    /// if the 'ShowLog' report parameter is not enabled.
    /// </summary>
    /// <param name = "_addingRecord">Adding data record based on the currently selected record.</param>
    private void addEmptyJournalErrorRecord(DocXmlRecord _addingRecord)
    {
        JournalError journalError;

        DocXmlRecord journalErrorRecord = _addingRecord.addChildRecord(journalError);

        journalErrorRecord.addField(fieldStr(JournalError, JournalId));
        journalErrorRecord.addField(fieldStr(JournalError, LineNum));
        journalErrorRecord.addDisplayMethod(tableMethodStr(JournalError, logText));
        journalErrorRecord.addField(fieldStr(JournalError, RefTableId));
        journalErrorRecord.addField(fieldStr(JournalError, Exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overriden method that enables you to store some values from the currently selected
    /// record from a query data source into global class variables.
    /// </summary>
    /// <param name = "_common">Currently selected record from one of the query data sources.</param>
    /// <param name = "_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super (_common, _qbds);

        // Store values for custom placeholders into global variables.
        if (_qbds.table() == tableNum(InventJournalTable))
        {
            InventJournalTable inventJournalTable = _common;

            placeholderJournalId                = inventJournalTable.JournalId;
            placeholderJournalIdOriginal        = inventJournalTable.JournalIdOrignal;
            placeholderTotalJournalLines        = inventJournalTable.NumOfLines;
            placeholderJournalPostedDateTime    = inventJournalTable.PostedDateTime;
            placeholderJournalPostedByUser      = inventJournalTable.PostedUserId;
        }
        else if (_qbds.table() == tableNum(InventJournalTrans))
        {
            InventJournalTrans inventJournalTrans = _common;

            if (placeholderCountingReasonCode != inventJournalTrans.CountingReasonCode)
            {
                // Check if there are different reason codes
                isMultipleCountingReasonCode = placeholderCountingReasonCode == '' ? false : true;
                placeholderCountingReasonCode = inventJournalTrans.CountingReasonCode;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAddingQbdsField</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overriden method that handles a particular table buffer's (_common) field of
    /// the currently processed query data source (_qbds) in your own way, e.g. to add some additional
    /// related info. Return true if you want to skip adding of this field in the standard way.
    /// </summary>
    /// <param name = "_fieldName">Adding table buffer field from the currently selected record (_common)</param>
    /// <param name="_addingRecord">
    /// Adding data record based on the currently selected record (_common). Use this object to add
    /// the provided field, e.g. _addingRecord.addField(fieldName), or to add additional data.
    /// </param>
    /// <param name="_common">Currently selected record from one of the query data sources.</param>
    /// <param name="_qbds">Query data source (QueryBuildDataSource) of the currently selected record.</param>
    /// <returns>True if you want to skip adding the given field in the standard way</returns>

    protected boolean handleAddingQbdsField(FieldName _fieldName, DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        // Skip adding the Infolog field to the _addingRecord because it is an unsupported container
        if (_qbds.table() == tableNum(JournalError) && _fieldName == fieldStr(JournalError, Infolog))
        {
            return true;
        }
        return super(_fieldName, _addingRecord, _common, _qbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.JournalId('JournalID')
    #define.JournalIdOriginal('OriginalJournalID')
    #define.TotalJournalLines('TotalJournalLines')
    #define.JournalPostedDateTime('JournalPostedDateTime')
    #define.JournalPostedByUser('JournalPostedByUser')
    #define.CountingReasonCode('CountingReasonCode')

    [DocPlaceholderAttribute(#JournalId, 'IJT - Journal ID'),
     DocPlaceholderAttribute(#JournalIdOriginal, 'IJT - Original journal ID'),
     DocPlaceholderAttribute(#TotalJournalLines, 'IJT - Total journal lines'),
     DocPlaceholderAttribute(#JournalPostedDateTime, 'IJT - Journal posted date and time'),
     DocPlaceholderAttribute(#JournalPostedByUser, 'IJT - Journal posted by user'),
     DocPlaceholderAttribute(#CountingReasonCode, 'IJT - Counting reason code')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // @JournalId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#JournalId, placeholderJournalId);

        // @JournalIdOriginal@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#JournalIdOriginal, placeholderJournalIdOriginal);

        // @TotalJournalLines@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#TotalJournalLines, placeholderTotalJournalLines);

        // @JournalPostedDateTime@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#JournalPostedDateTime, placeholderJournalPostedDateTime);

        // @JournalPostedByUser@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#JournalPostedByUser, placeholderJournalPostedByUser);

        // @CountingReasonCode@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CountingReasonCode, isMultipleCountingReasonCode ? DocConstantDSP::MULTIPLE : placeholderCountingReasonCode);

        // Fill the print archive contract
        _reportRunContext.archiveContract().setDocument(placeholderJournalId);

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>