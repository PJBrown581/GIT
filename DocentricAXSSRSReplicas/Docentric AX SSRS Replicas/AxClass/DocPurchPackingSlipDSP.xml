<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPurchPackingSlipDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocPurchPackingSlipDSP extends DocDataSourceProviderSrsProforma
{
    TradeDocumentReportContract     reportContract;
    VendPackingSlipVersion          vendPackingSlipVersion;
    PurchTable                      purchTable;

    /* Variables for custom placeholders */
    str      placeholder_packingSlipId;
    str      placeholder_purchId;
    str      placeholder_vendName;
    str      placeholder_deliveryName;
    str      placeholder_deliveryAddress;
    date     placeholder_deliveryDate;

    #define.PODefaultDimensionField('POFinancialDimensions')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Labels in order of appearance on document from top to bottom, left to right.

        // Addressing information.
        _labelMap.insert(literalStr("@SYS107382"), 'Attention information');

        // Company information.
        _labelMap.insert(literalStr("@SYS5231"), 'Giro');
        _labelMap.insert(literalStr("@SYS77429"), 'Enterprise number');
        _labelMap.insert(literalStr("@SYS26946"), 'Tax exempt number');

        // Pagination.
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');

        // Document header.
        _labelMap.insert(literalStr("@SYS55152"), 'Internal product receipt');
        _labelMap.insert(literalStr("@SYS7924"), 'Delivery address');

        // Document lines.
        _labelMap.insert(literalStr("@SYS12836"), 'Item number');
        _labelMap.insert(literalStr("@SYS80470"), 'Description');
        _labelMap.insert(literalStr("@SYS16279"), 'Ordered');
        _labelMap.insert(literalStr("@SYS11959"), 'Unit');
        _labelMap.insert(literalStr("@SYS4465"), 'Received');
        _labelMap.insert(literalStr("@SYS7108"), 'Remaining quantity');        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(PurchPackingSlipHeaderTmp))
        {
            /* COMPANY RELATED DATA */
            // NOTE: The company data are excluded since we have them in the GeneralData data section.
            _addingRecord.addAllFieldsExcept([
                fieldStr(PurchPackingSlipHeaderTmp, CompanyName),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyAddress),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyPhone),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyTeleFax),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyGiro),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyCoRegNum),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyLogo),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyEnterpriseNumber),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyBankAccountName),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyBankAccountNum),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyBankAccountRegNum),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyCommercialRegister),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyCommercialRegisterInsetNumber),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyCommercialRegisterSection),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyEmail),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyRegNum),
                fieldStr(PurchPackingSlipHeaderTmp, CompanyVATNum)
            ]);

            // Translating country in Company Address to the Language set on Vendor packing slip journal
            // NOTE: DirUtility compares country value from the address with either short name or long name defined in D365 Country/Region
            _addingRecord.addCalculatedFieldFromEdt('CompanyAddressTranslatedCountry', extendedTypeStr(Addressing),
                DirUtility::replaceAddressTokenLanguage(CompanyInfo::find().postalAddress(), this.vendPackingSlipJour().LanguageId));

            // Setting the flag needed for Docentric NextGen.
            _addingRecord.setSingleRecord(true);

            //-- Add Purchase order email and Vendor primary email.
            _addingRecord.addCalculatedField('OrderEmail', purchTable.Email);
            VendTable vendTable_OrderAccount = purchTable.vendTable_OrderAccount();
            _addingRecord.addCalculatedField('VendorEmail', vendTable_OrderAccount.email());
            // To work the same as the @@ email token in Print management, use purchTable.InvoiceAccount instead:
            VendTable vendTable_InvoiceAccount = purchTable.vendTable_InvoiceAccount();
            _addingRecord.addCalculatedField('InvoiceAccountEmail', vendTable_InvoiceAccount.email());
            // See the references to the Account field of the CustVendAccountMap map for the explanation.

            // -- Add Custom Fields defined on PurchTable and VendTable, if any.
            // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(purchTable, _addingRecord);
            DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(vendTable_OrderAccount, _addingRecord);

            //-- Add Financial dimensions.
            _addingRecord.addCalculatedFieldFromEdt(#PODefaultDimensionField, extendedTypeStr(DimensionDefault), purchTable.DefaultDimension);


            // TODO: Add here additional fields (or records) to the single header record by using the related
            // data to the _rdpTableRecord table buffer (PurchPackingSlipHeaderTmp) or reportContract.
            // For example, get the related VendPackingSlipJour record and add additional data you need:
            //VendPackingSlipJour vendPackingSlipJour = this.vendPackingSlipJour();
            //DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(vendPackingSlipJour);
            //jourDataRecord.addField(fieldStr(VendPackingSlipJour, OrderAccount));
            //jourDataRecord.addDisplayMethod(tableMethodStr(VendPackingSlipJour, deliveryDateTime));
            // Or, add the project name:
            //PurchPackingSlipHeaderTmp purchPackingSlipHeaderTmp = _rdpTableRecord;
            //_addingRecord.addCalculatedField('ProjName', PurchTable::find(purchPackingSlipHeaderTmp.PurchId).projTable().Name);
        }

        else if (_rdpTableName == tableStr(PurchPackingSlipTmp))
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);

            // TODO: Add here additional fields from the related VendPackingSlipTrans table (or some other tables).
            //PurchPackingSlipTmp purchPackingSlipTmp = _rdpTableRecord;
            //VendPackingSlipTrans vendPackingSlipTrans = this.vendPackingSlipTrans(purchPackingSlipTmp.VendPackingSlipTrans);
            //_addingRecord.addCalculatedField('LineNum', vendPackingSlipTrans.LineNum);
        }

        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Purchase order packing slip DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_PurchPackingSlip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPackingSlipJour</Name>
				<Source><![CDATA[
    protected VendPackingSlipJour vendPackingSlipJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                // Note: journalRecId == reportContract.parmRecordId()
                if (reportContract.parmTableId() == tableNum(VendPackingSlipJour))
                {
                    journal = VendPackingSlipJour::findRecId(journalRecId);
                }
                else if (reportContract.parmTableId() == tableNum(VendPackingSlipVersion))
                {
                    journal = VendPackingSlipJour::findRecId(VendPackingSlipVersion::find(journalRecId).VendPackingSlipJour);
                }
                else
                {
                    throw error(strFmt('Unexpected table (%1) in the method (%2)', tableId2Name(reportContract.parmTableId()), funcName()));
                }
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPackingSlipVersion</Name>
				<Source><![CDATA[
    protected VendPackingSlipVersion vendPackingSlipVersion()
    {
        if (!vendPackingSlipVersion)
        {
            if (this.isProforma())
            {
                vendPackingSlipVersion = this.getProformaPackingSlipVersion();
            }
            else
            {
                // Note: journalRecId == reportContract.parmRecordId()
                if (reportContract.parmTableId() == tableNum(VendPackingSlipJour))
                {
                    vendPackingSlipVersion = VendPackingSlipVersion::findLatest(journalRecId);
                }
                else if (reportContract.parmTableId() == tableNum(VendPackingSlipVersion))
                {
                    vendPackingSlipVersion = VendPackingSlipVersion::find(journalRecId);
                }
                else
                {
                    throw error(strFmt('Unexpected table (%1) in the method (%2)', tableId2Name(reportContract.parmTableId()), funcName()));
                }
            }
        }

        return vendPackingSlipVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPackingSlipTrans</Name>
				<Source><![CDATA[
    protected VendPackingSlipTrans vendPackingSlipTrans(RecId _vendPackingSlipTransRecId)
    {
        VendPackingSlipTrans vendPackingSlipTrans;

        if (this.isProforma())
        {
            vendPackingSlipTrans = this.getProformaTransLine(_vendPackingSlipTransRecId);
        }
        else
        {
            vendPackingSlipTrans = VendPackingSlipTrans::findRecId(_vendPackingSlipTransRecId);
        }

        return vendPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPackingSlipTransHistory</Name>
				<Source><![CDATA[
    protected VendPackingSlipTransHistory vendPackingSlipTransHistory(RecId _vendPackingSlipTransRecId)
    {
        VendPackingSlipTransHistory vendPackingSlipTransHistory;

        if (this.isProforma())
        {
            vendPackingSlipTransHistory = this.getProformaPackingSlipTransHistoryLine(_vendPackingSlipTransRecId);
        }
        else
        {
            vendPackingSlipTransHistory = VendPackingSlipTransHistory::find(_vendPackingSlipTransRecId);
        }

        return vendPackingSlipTransHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.PackingSlipId('PackingSlipId')
    #define.PurchId('PurchId')
    #define.VendAccount('VendAccount')
    #define.VendName('VendName')
    #define.VendContactName('VendContactName')
    #define.DeliveryName('DeliveryName')
    #define.DeliveryAddress('DeliveryAddress')
    #define.DeliveryDate('DeliveryDate')
    #define.OrderEmail('OrderEmail')

    [DocPlaceholderAttribute(#PackingSlipId, 'PPS - Packing Slip ID'),
     DocPlaceholderAttribute(#PurchId, 'PPS - Purch ID'),
     DocPlaceholderAttribute(#VendAccount, 'PPS - Vendor Account ID'),
     DocPlaceholderAttribute(#VendName, 'PPS - Vendor Name'),
     DocPlaceholderAttribute(#VendContactName, 'PPS - Contact Name'),
     DocPlaceholderAttribute(#DeliveryName, 'PPS - Delivery Name'),
     DocPlaceholderAttribute(#DeliveryAddress, 'PPS - Delivery Address'),
     DocPlaceholderAttribute(#DeliveryDate, 'PPS - Delivery Date'),
     DocPlaceholderAttribute(#OrderEmail, 'PPS - Purch Order Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding purchTable. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(purchTable);

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @PackingSlipId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PackingSlipId, placeholder_packingSlipId);

        // -- Placeholder @PurchId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PurchId, placeholder_purchId);
        
        // -- Placeholder @VendName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendName, placeholder_vendName);

        // -- Placeholder @DeliveryDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryDate, placeholder_deliveryDate);

        // -- Placeholder @VendAccount@
        str vendAccount = this.vendPackingSlipJour().OrderAccount;
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendAccount, vendAccount);

        // -- Placeholder @OrderEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderEmail, purchTable.Email);

        // -- Placeholder @DeliveryName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryName, placeholder_deliveryName);

        // -- Placeholder @VendContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendContactName, DocDspHelper::contactPersonName(purchTable.ContactPersonId));

        // -- Placeholder @DeliveryAddress@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryAddress, placeholder_deliveryAddress);
        

        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setVendAccount(vendAccount);
        _reportRunContext.archiveContract().setPurchId(placeholder_purchId);
        _reportRunContext.archiveContract().setDocument(placeholder_packingSlipId, placeholder_deliveryDate);
        _reportRunContext.archiveContract().setJournal(this.vendPackingSlipJour().RecId, DocJournalType::VendPackingSlipJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(PurchPackingSlipHeaderTmp))
        {
            PurchPackingSlipHeaderTmp header = _rdpTableRecord;

            // Store custom placeholders' values.
            placeholder_purchId = header.PurchId;
            placeholder_packingSlipId = header.PackingSlipId;
            placeholder_vendName = header.VendName;
            placeholder_deliveryName = header.DeliveryName;
            placeholder_deliveryAddress = header.DeliveryAddress;
            placeholder_deliveryDate = header.DeliveryDate;

            purchTable = PurchTable::find(header.PurchId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// -- When to use this method?
    /// If you want to quickly generate DDSP for a sample journal record.
    /// -- How to run it?
    /// Set up this class as the startup object in your project.
    /// -- NOTE
    /// Please verify all TODOs in the method and make changes if needed.
    /// </summary>
    /// <param name = "_args">An instance of the Args class</param>
    public static void main(Args _args)
    {
        VendPackingSlipJour vendPackingSlipJour;

        // TODO: (1) Select the sample journal record.
        select firstonly vendPackingSlipJour;

        // Add it as the context record, which is going to be printed.
        Args args = new Args();
        args.record(vendPackingSlipJour);

        PurchPackingSlipController      controller  = PurchPackingSlipController::construct();

        // TODO: (2) Change the name SSRS Report Design if needed.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderPackingSlip).getDefaultReportFormat());
        controller.parmArgs(args);
        
        PurchPackingSlipContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmRecordId(vendPackingSlipJour.RecId);
        rdpContract.parmTableId(vendPackingSlipJour.TableId);

        // Set the Docentric Generate DS print destination settings.
        SRSPrintDestinationSettings pds = controller.parmReportContract().parmPrintSettings();
        pds.printMediumType(SRSPrintMediumType::GenerateDataSource_DC);

        // TODO: (3) Set Design and Preview languages if needed.
        pds.parmGenerateDSPrintDestSettings_DC().parmLanguageId(vendPackingSlipJour.LanguageId);
        pds.parmGenerateDSPrintDestSettings_DC().parmPreviewLanguages('fr,de,it,es');

        // Initalize PurchPackingSlipJournalPrint class instance because there is no other way
        // NOT to use Print Management.
        PurchPackingSlipJournalPrint purchPackingSlipJournalPrint = PurchPackingSlipJournalPrint::construct();
        purchPackingSlipJournalPrint.parmPrintFormletter(NoYes::Yes);
        purchPackingSlipJournalPrint.parmUsePrintManagement(false);
        purchPackingSlipJournalPrint.parmPrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack());
        
        args.caller(purchPackingSlipJournalPrint);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::OriginalPrint);

        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>