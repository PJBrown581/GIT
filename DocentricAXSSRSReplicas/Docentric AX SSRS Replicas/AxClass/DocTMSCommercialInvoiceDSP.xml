<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTMSCommercialInvoiceDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocTMSCommercialInvoiceDSP extends DocDataSourceProviderSrsReporting
{
    TMSCommercialInvoiceTmp   headerTableBuffer;
    DocTableFieldsMetadata    extensionFieldsMetadata_TMSCommercialInvoiceTmp = DocTableFieldsMetadata::construct(tableStr(TMSCommercialInvoiceTmp));

    /* Variables for custom placeholders */
    str      placeholder_invoiceNum;
    str      placeholder_custName;
    str      placeholder_paymTerms;
    str      placeholder_dlvTerms;
    str      placeholder_billOfLading;
    str      placeholder_shipmentMode;

    WHSShipmentTable    whsShipmentTable;
    WHSLoadTable        whsLoadTable;

    #define.TMSCommercialInvoiceHeader('InvoiceHeader')
    #define.TMSCommercialInvoiceLines('InvoiceLines')

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Commercial invoice DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        TMSCommercialInvoiceTmp currentRecord;

        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(TMSCommercialInvoiceTmp))
        {
            currentRecord = _rdpTableRecord;

            if (headerTableBuffer.RecId == 0)
            {
                // Copy all fields from the first selected record since the majority of them
                // belong to the report header. We will add them as a separate node in the
                // generateXmlDataSource method.
                buf2Buf(currentRecord, headerTableBuffer);
                headerTableBuffer.RecId = currentRecord.RecId;

                // Store custom placeholders' values.
                placeholder_invoiceNum = currentRecord.ShipmentId;
                placeholder_custName = currentRecord.CustomerName;
                placeholder_paymTerms = currentRecord.TermsOfPayment;
                placeholder_dlvTerms = currentRecord.DlvTermId;
                placeholder_billOfLading = currentRecord.BillOfLadingId;
                placeholder_shipmentMode = currentRecord.CarrierServiceCode;

                whsShipmentTable = WHSShipmentTable::find(placeholder_invoiceNum);
                whsLoadTable = whsShipmentTable.whsLoadTable();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(TMSCommercialInvoiceTmp))
        {
            TMSCommercialInvoiceTmp tmsCommercialInvoiceTmp = _rdpTableRecord;
            // Rename the record from 'TMSCommercialInvoiceTmp' to 'InvoiceLines'.
            _addingRecord.setRecordName(#TMSCommercialInvoiceLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Invoice lines'); // NOTE: use literalStr("@LabelID") instead.
            
            // Add 'Line fields'.
            _addingRecord.addFieldGroup(tableFieldGroupStr(TMSCommercialInvoiceTmp, LineFields_DR));                   
        
            // Add Extension fields defined on TMSCommercialInvoiceTmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(tmsCommercialInvoiceTmp, _addingRecord, true, extensionFieldsMetadata_TMSCommercialInvoiceTmp);


            // TODO: Add here additional fields from the related WHSLoadLine, SalesLine, SalesTable, MarkupTrans, or some other tables.
            // Use 'keys' fields: tmsCommercialInvoiceTmp.WHSLoadLineRecId_DR and tmsCommercialInvoiceTmp.SalesLineRecId_DR.
            // For example:
            //WHSLoadLine whsLoadLine = WHSLoadLine::findbyRecId(tmsCommercialInvoiceTmp.WHSLoadLineRecId_DR);
            //_addingRecord.addCalculatedField('InventLocationId', whsLoadLine.warehouse());
            //SalesLine salesLine = SalesLine::findRecId(tmsCommercialInvoiceTmp.SalesLineRecId_DR);
            //_addingRecord.addCalculatedField('SalesLinLineNum', salesLine.LineNum);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        // Document header
        _labelMap.insert(literalStr("@TRX1682"), 'Commercial invoice');
        _labelMap.insert(literalStr("@SYS4081840"), 'Seller');
        _labelMap.insert(literalStr("@SYS23428"), 'Invoice No.');
        _labelMap.insert(literalStr("@SYS7402"), 'Date');
        _labelMap.insert(literalStr("@TRX2643"), 'Customer reference no');
        _labelMap.insert(literalStr("@TRX2641"), 'Sold to');
        _labelMap.insert(literalStr("@TRX2644"), 'Terms of sale');
        _labelMap.insert(literalStr("@SYS48"), 'Terms of payment');
        _labelMap.insert(literalStr("@TRX2642"), 'Ship to -if different than sold to');
        _labelMap.insert(literalStr("@TRX2645"), 'Currency of settlement');
        _labelMap.insert(literalStr("@TRX2646"), 'Mode of shipment');
        _labelMap.insert(literalStr("@TRX2647"), 'Bill of lading-AWB');

        // Document lines
        _labelMap.insert(literalStr("@SYS105177"), 'Qty');
        _labelMap.insert(literalStr("@SYS6303"), 'Description');
        _labelMap.insert(literalStr("@TRX2654"), 'Unit of');
        _labelMap.insert(literalStr("@SYS67271"), 'Measure');
        _labelMap.insert(literalStr("@SYS11959"), 'Unit');
        _labelMap.insert(literalStr("@SYS11865"), 'Price');
        _labelMap.insert(literalStr("@SYS809"), 'Total');
        _labelMap.insert(literalStr("@TRX2648"), 'Package marks');
        _labelMap.insert(literalStr("@TRX1763"), 'Total Commercial Value');
        _labelMap.insert(literalStr("@TRX2640"), 'Misc. charges - packing, insurance,etc');
        _labelMap.insert(literalStr("@TRX1691"), 'Total Invoice Value');

        // Document Footer
        _labelMap.insert(literalStr("@SYS184348"), 'Certifications');
        _labelMap.insert(literalStr("@TRX2649"), 'I certify that the stated export prices and description of');
        _labelMap.insert(literalStr("@TRX2650"), 'Goods are true and correct');
        _labelMap.insert(literalStr("@TRX2652"), 'signed');
        _labelMap.insert(literalStr("@TRX2653"), 'Title');
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS26401"), 'of');
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord headerDataRecord;

        void addHeaderFields()
        {
            // Add the 'Header fields'.
            headerDataRecord.addFieldGroup(tableFieldGroupStr(TMSCommercialInvoiceTmp, HeaderFields_DR));

            // Note: We'll skip the fields from the NeverUsedFields_DR field group since those fields never get filled.
        }


        // (1) Add data records with fields representing the lines.
        super(_recordBuilder);

        // (2) Add all fields that belong to the header only once.
        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer).setSingleRecord(true);
        // Rename the record from 'TMSCommercialInvoiceTmp' to 'InvoiceHeader'.
        headerDataRecord.setRecordName(#TMSCommercialInvoiceHeader);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Invoice header'); // NOTE: use literalStr("@LabelID") instead.
        // Add all 'header' fields.
        addHeaderFields();

        // (3) Add Custom Fields defined on WHSShipmentTable, WHSLoadTable and CustTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(whsShipmentTable, headerDataRecord);
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(whsLoadTable, headerDataRecord);
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(CustTable::find(whsShipmentTable.AccountNum), headerDataRecord);
        // NOTE: You don't have to add all Custom Fields but only specific ones:
        //DocCustomFieldsHelper::addCustomFieldsToDataRecord(['CustomFieldName1', 'CustomFieldName2'], whsShipmentTable, headerDataRecord);
        //DocCustomFieldsHelper::addCustomFieldToDataRecord('CustomFieldName', whsShipmentTable, headerDataRecord);
        
        // (4) Add Extension fields defined on TMSCommercialInvoiceTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(headerTableBuffer, headerDataRecord, true, extensionFieldsMetadata_TMSCommercialInvoiceTmp);


        // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
        // by using the related data to headerTableBuffer (TMSCommercialInvoiceTmp) or reportContract.
        // For example, get the related WHSShipmentTable or SalesTable record and add additional data you need:
        //WHSShipmentTable whsShipmentTable = WHSShipmentTable::find(headerTableBuffer.ShipmentId);
        //headerDataRecord.addCalculatedField('CustAccount', whsShipmentTable.AccountNum);
        //headerDataRecord.addCalculatedField('CarrierName', whsShipmentTable.carrierName());

        //SalesTable salesTable = SalesTable::find(headerTableBuffer.SalesId_DR);
        //headerDataRecord.addCalculatedField('CustContactName', salesTable.contactPersonName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InvoiceNum('InvoiceNum')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.PaymentTerms('PaymentTerms')
    #define.DeliveryTerms('DeliveryTerms')
    #define.BillOfLading('BillOfLading')
    #define.ShipmentMode('ShipmentMode')

    [DocPlaceholderAttribute(#InvoiceNum, 'CI - Invoice Number'),
     DocPlaceholderAttribute(#CustAccount, 'CI - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'CI - Customer Name'),
     DocPlaceholderAttribute(#PaymentTerms, 'CI - Terms of Payment'),
     DocPlaceholderAttribute(#DeliveryTerms, 'CI - Terms of Sales'),
     DocPlaceholderAttribute(#BillOfLading, 'CI - Bill of Lading'),
     DocPlaceholderAttribute(#ShipmentMode, 'CI - Mode of Shipment')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InvoiceNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceNum, placeholder_invoiceNum);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, whsShipmentTable.AccountNum);

        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, placeholder_custName);

        // -- Placeholder @PaymentTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentTerms, placeholder_paymTerms);

        // -- Placeholder @DeliveryTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryTerms, placeholder_dlvTerms);

        // -- Placeholder @BillOfLading@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#BillOfLading, placeholder_billOfLading);

        // -- Placeholder @ShipmentMode@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipmentMode, placeholder_shipmentMode);


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(whsShipmentTable.AccountNum);
        _reportRunContext.archiveContract().setWHSShipmentId(placeholder_invoiceNum);
        _reportRunContext.archiveContract().setDocument(placeholder_invoiceNum);

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>