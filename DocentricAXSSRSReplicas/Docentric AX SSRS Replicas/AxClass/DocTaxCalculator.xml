<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocTaxCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for tax calculations.
/// </summary>
class DocTaxCalculator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLineTaxAmount</Name>
				<Source><![CDATA[
    /********************************************************************************************************************/
    /*                          POSTED TAXES: JOURNAL AND JOURNAL LINE TAX AMOUNTS                                      */
    /********************************************************************************************************************/

    /// <summary>
    /// Calculates the total tax amount for the provided journal line record.
    /// </summary>
    /// <param name = "_lineTableId">Table Id of the journal line record.</param>
    /// <param name = "_lineRecId">RecId of the journal line record for which tax amount is calculating.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    /// <returns>The total tax amount included for the journal line record.</returns>
    /// <remarks>
    /// Use this method for CustInvoiceJournal (SalesInvoice and FreeTextInvoice reports), VendPurchOrderJour (PurchPurchaseOrder report)
    /// and ProjInvoiceJour (PSAProjeInvoice and PSAManageInvoice reports) journals.
    /// </remarks>
    public static AmountCur getLineTaxAmount(TableId _lineTableId, RecId _lineRecId, boolean _includeMarkupTax = true)
    {
        AmountCur lineTaxAmount = 0;
        TaxTrans taxTrans;
        
        select sum(TaxAmount) from taxTrans
            where taxTrans.SourceTableId == _lineTableId &&
                  taxTrans.SourceRecId == _lineRecId;

        lineTaxAmount = abs(taxTrans.TaxAmount);

        if (_includeMarkupTax)
        {
            MarkupTrans markupTrans;
            taxTrans.clear();

            select sum(TaxAmount) from markupTrans
                where markupTrans.TransTableId == _lineTableId &&
                      markupTrans.TransRecId == _lineRecId &&
                      !markupTrans.IsDeleted
                exists join taxTrans
                    where taxTrans.SourceTableId == tableNum(MarkupTrans) &&
                          taxTrans.SourceRecId == markupTrans.RecId;

            lineTaxAmount += abs(markupTrans.TaxAmount);
        }
        return lineTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total tax amount for the provided journal record. By default Markup tax amount will be included.
    /// </summary>
    /// <param name = "_voucher">Ledger voucher of the journal header.</param>
    /// <param name = "_date">Invoice date of the journal header.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    /// <returns>The total tax amount for the provided journal</returns>
    /// <remarks>
    /// Use this method for CustInvoiceJournal (SalesInvoice and FreeTextInvoice reports), VendPurchOrderJour (PurchPurchaseOrder report)
    /// and ProjInvoiceJour (PSAProjeInvoice and PSAManageInvoice reports) journals.
    /// </remarks>
    public static AmountCur getJournalTaxAmount(Voucher _voucher, Date _date, boolean _includeMarkupTax = true)
    {
        TaxTrans taxTrans;
        
        if (_includeMarkupTax)
        {
            select sum(TaxAmount) from taxTrans
                where taxTrans.TransDate == _date &&
                      taxTrans.Voucher == _voucher;
        }
        else
        {
            select sum(TaxAmount) from taxTrans
                where taxTrans.TransDate == _date &&
                      taxTrans.Voucher == _voucher &&
                      taxTrans.SourceTableId != tableNum(MarkupTrans);
        }

        return abs(taxTrans.TaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineTaxAmountForPurchSalesConfirmationQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total tax amount for the provided journal line record.
    /// </summary>
    /// <param name = "_headerTableId">Table Id of the journal header record (example CustQuotationJour, CustConfirmJour).</param>
    /// <param name = "_headerRecId">RecId of the journal header record.</param>
    /// <param name = "_inventTransId">ID of the inventory transaction (Lot ID) that is a unique identifier of the journal line record.</param>
    /// <returns>The total tax amount included in the journal line record.</returns>
    /// <remarks>Use this method for Purchase order confirmations, Sales order confirmations, Quotation journal and Quotation confirmation journal.</remarks>
    public static AmountCur getLineTaxAmountForPurchSalesConfirmationQuotation(TableId _headerTableId, RecId _headerRecId, InventTransId _inventTransId)
    {
        RecordLinkList recordListTaxTrans = DocTaxCalculator::getLinePostedTaxForPurchSalesConfirmationQuotation(_headerTableId, _headerRecId, _inventTransId);
       
        boolean toIterate;
        TaxJournalTrans taxJournalTrans;
        AmountCur lineTaxAmount = 0;

        toIterate = recordListTaxTrans.first();

        while (toIterate)
        {
            taxJournalTrans = recordListTaxTrans.peek();
            lineTaxAmount += abs(taxJournalTrans.TaxAmount);
            toIterate = recordListTaxTrans.next();
        }

        return lineTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTaxAmountForPurchSalesConfirmationQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total tax amount for the provided journal record. By default Markup tax amount will be included.
    /// </summary>
    /// <param name = "_headerTableId">Table Id of the journal header record (example CustQuotationJour, CustConfirmJour).</param>
    /// <param name = "_headerRecId">RecId of the journal header record.</param>
    /// <returns>The total tax amount for the provided journal</returns>
    /// <remarks>Use this method for Purchase order confirmations, Sales order confirmations, Quotation journal and Quotation confirmation journal.</remarks>
    public static AmountCur getJournalTaxAmountForPurchSalesConfirmationQuotation(TableId _headerTableId, RecId _headerRecId)
    {
        TaxJournalTrans taxJournalTrans;
   
        select sum(TaxAmount) from taxJournalTrans
            where taxJournalTrans.TransTableId == _headerTableId &&
                  taxJournalTrans.TransRecId == _headerRecId;

        return abs(taxJournalTrans.TaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalPostedTax</Name>
				<Source><![CDATA[
    /********************************************************************************************************************/
    /*                          POSTED TAXES: JOURNAL AND JOURNAL LINE TAX RECORDS                                      */
    /********************************************************************************************************************/

    /// <summary>
    /// Gets all <c>TaxTrans</c> records linked to the provided journal record.
    /// </summary>
    /// <param name = "_voucher">Ledger voucher of the journal header.</param>
    /// <param name = "_date">Invoice date of the journal header.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    /// <remarks>
    /// Use this method for CustInvoiceJournal (SalesInvoice and FreeTextInvoice reports), VendPurchOrderJour (PurchPurchaseOrder report)
    /// and ProjInvoiceJour (PSAProjeInvoice and PSAManageInvoice reports) journals.
    /// </remarks>
    public static RecordLinkList getJournalPostedTax(Voucher _voucher, Date _date, boolean _includeMarkupTax = true)
    {
        TaxTrans taxTrans;
        RecordLinkList recordList = new RecordLinkList();

        while select taxTrans
            where taxTrans.TransDate == _date &&
                  taxTrans.Voucher == _voucher
        {
            // All taxes for the journal header are stored into the TaxTrans table (including taxes for charges).
            // To exlcude charges taxes, need to check if the selected TaxTrans exists in MarkupTrans table.
            if (!_includeMarkupTax && taxTrans.SourceTableId == tableNum(MarkupTrans))
            {            
                continue;
            }
            else
            {
                recordList.ins(taxTrans);
            }
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePostedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TaxTrans</c> records linked to the provided journal line record.
    /// </summary>
    /// <param name = "_lineTableId">Table Id of the journal line record.</param>
    /// <param name = "_lineRecId">RecId of the journal line record for which tax amount is calculating.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    /// <remarks>
    /// Use this method for CustInvoiceJournal (SalesInvoice and FreeTextInvoice reports), VendPurchOrderJour (PurchPurchaseOrder report)
    /// and ProjInvoiceJour (PSAProjeInvoice and PSAManageInvoice reports) journals.
    /// </remarks>
    public static RecordLinkList getLinePostedTax(TableId _lineTableId, RecId _lineRecId, boolean _includeMarkupTax = true)
    {
        TaxTrans taxTrans;
        RecordLinkList recordList = new RecordLinkList();

        while select taxTrans
            where taxTrans.SourceTableId == _lineTableId &&
                  taxTrans.SourceRecId == _lineRecId
        {
            recordList.ins(taxTrans);
        }

        if (_includeMarkupTax)
        {
            MarkupTrans markupTrans;
            taxTrans.clear();

            while select TransTableId, TransRecId from markupTrans
                where markupTrans.TransTableId == _lineTableId &&
                       markupTrans.TransRecId == _lineRecId &&
                       !markupTrans.IsDeleted
                join taxTrans
                    where taxTrans.SourceTableId == tableNum(MarkupTrans) &&
                          taxTrans.SourceRecId == markupTrans.RecId
            {
                recordList.ins(taxTrans);
            }
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalPostedTaxForPurchSalesConfirmationQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TaxJournalTrans</c> records linked to the journal.
    /// </summary>
    /// <param name = "_journalTableId">Table Id of the journal header record (example CustQuotationJour, CustConfirmJour).</param>
    /// <param name = "_journalRecId">RecId of the journal header record.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    /// <remarks>Use this method for Purchase order confirmations, Sales order confirmations, Quotation journal and Quotation confirmation journal.</remarks>
    public static RecordLinkList getJournalPostedTaxForPurchSalesConfirmationQuotation(TableId _journalTableId, RecId _journalRecId, boolean _includeMarkupTax = true)
    {
        TaxJournalTrans taxJournalTrans;
        RecordLinkList recordList = new RecordLinkList();

        if (!_includeMarkupTax && (_journalTableId == 0 || _journalRecId == 0))
        {
            DocGlobalHelper::handleException(funcName(), 'To exclude markup tax, both parameters _journalTableId and _journalRecId should be provided');
        }

        while select taxJournalTrans
            where taxJournalTrans.TransRecId == _journalRecId   &&
                  taxJournalTrans.TransTableId == _journalTableId
        {
            // All taxes for the journal header are stored into the TaxJournalTrans table (including taxes for charges).
            // To exlcude charges taxes, need to check if the selected TaxJournalTrans exists in MarkupTrans table.
            if (!_includeMarkupTax && MarkupTrans::exist(_journalTableId, _journalRecId))
            {
                continue;
            }
            else
            {
                recordList.ins(taxJournalTrans);
            }
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinePostedTaxForPurchSalesConfirmationQuotation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TaxJournalTrans</c> records linked to the journal line record provided via the _inventTransId parameter.
    /// </summary>
    /// <param name = "_headerTableId">Table Id of the journal header record (example CustQuotationJour, CustConfirmJour).</param>
    /// <param name = "_headerRecId">RecId of the journal header record.</param>
    /// <param name = "_inventTransId">ID of the inventory transaction (Lot ID) that is a unique identifier of the journal line record</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    /// <remarks>Use this method for Purchase order confirmations, Sales order confirmations, Quotation journal and Quotation confirmation journal.</remarks>
    public static RecordLinkList getLinePostedTaxForPurchSalesConfirmationQuotation(TableId _headerTableId, RecId _headerRecId, InventTransId _inventTransId)
    {
        TaxJournalTrans taxJournalTrans;
        RecordLinkList recordList = new RecordLinkList();

        while select taxJournalTrans
            where taxJournalTrans.InventTransId == _inventTransId &&
                  taxJournalTrans.TransRecId == _headerRecId      &&
                  taxJournalTrans.TransTableId == _headerTableId
        {
            recordList.ins(taxJournalTrans);
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJournalPostedTax</Name>
				<Source><![CDATA[
    /********************************************************************************************************************/
    /*                          POSTED TAXES: ADDING TO DDSP                                                            */
    /********************************************************************************************************************/

    /// <summary>
    /// Adds posted tax records related to the provided journal record.
    /// </summary>
    /// <param name = "_dataRecord">Data record in the record tree based on the currently adding RDP record table buffer.</param>
    /// <param name = "_voucher">Ledger voucher of the journal header.</param>
    /// <param name = "_date">Invoice date of the journal header.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    public static void addJournalPostedTax(DocXmlRecord _dataRecord, Voucher _voucher, Date _date, boolean _includeMarkupTax = true)
    {
        TaxTrans taxTransRecord;
        RecordLinkList recordListTaxTrans = DocTaxCalculator::getJournalPostedTax(_voucher, _date, _includeMarkupTax);
        
        boolean toIterate = recordListTaxTrans.first();

        while (toIterate)
        {
            taxTransRecord = recordListTaxTrans.peek();
            DocTaxCalculator::addPostedTaxRecord(_dataRecord, taxTransRecord);

            toIterate = recordListTaxTrans.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLinePostedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds posted tax records from the provided journal line record.
    /// </summary>
    /// <param name = "_dataRecord">Data record in the record tree based on the currently adding RDP record table buffer.</param>
    /// <param name = "_lineTableId">Table Id of the journal line record.</param>
    /// <param name = "_lineRecId">RecId of the journal line record for which tax amount is calculating.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    public static void addLinePostedTax(DocXmlRecord _dataRecord, TableId _lineTableId, RecId _lineRecId, boolean _includeMarkupTax = true)
    {
        TaxTrans taxTransRecord;
        RecordLinkList recordListTaxTrans = DocTaxCalculator::getLinePostedTax(_lineTableId, _lineRecId, _includeMarkupTax);
        boolean toIterate = recordListTaxTrans.first();

        while (toIterate)
        {
            taxTransRecord = recordListTaxTrans.peek();
            DocTaxCalculator::addPostedTaxRecord(_dataRecord, taxTransRecord);

            toIterate = recordListTaxTrans.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPostedTaxRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the TaxTrans record as a child record of _dataRecord.
    /// </summary>
    /// <param name = "_dataRecord">Data record in the record tree based on the currently adding tax record table buffer.</param>
    /// <param name = "_taxTrans">table buffer</param>
    public static void addPostedTaxRecord(DocXmlRecord _dataRecord, TaxTrans _taxTrans)
    {
        // This method performs the same logic as it is on TaxTrans dataSource of TaxTrans form.
        int taxChangeDisplaySign(TaxDirection _taxDirection, TaxReverseCharge _taxReverseCharge = NoYes::No, boolean _changeSignForReverseCharge = true, boolean _changeDisplaySign = true)
        {
            if (_changeDisplaySign && (_taxReverseCharge == NoYes::No || _changeSignForReverseCharge))
            {
                return Tax::changeDisplaySign(_taxDirection);
            }
            else
            {
                return 1;
            }
        }


        DocXmlRecord postedTaxRecord = _dataRecord.addChildRecord(_taxTrans);
        postedTaxRecord.addFields([
                fieldStr(TaxTrans, TaxCode),
                fieldStr(TaxTrans, TaxGroup),
                fieldStr(TaxTrans, TaxItemGroup),
                fieldStr(TaxTrans, CurrencyCode),
                fieldStr(TaxTrans, TaxBaseAmount)]);

        // Add calculated fields.
        TaxAmount   taxCalculatedAmount = _taxTrans.TaxAmount * taxChangeDisplaySign(_taxTrans.TaxDirection, _taxTrans.ReverseCharge_W, Tax::changeSignForReverseCharge(_taxTrans));
        TaxBaseCur  taxSourceBaseAmount = _taxTrans.SourceBaseAmountCur * taxChangeDisplaySign(_taxTrans.TaxDirection, _taxTrans.ReverseCharge_W, Tax::changeSignForReverseCharge(_taxTrans));
        
        postedTaxRecord.addCalculatedField('CalculatedSalesTaxAmount', taxCalculatedAmount, literalStr("@SYS23012"));
        postedTaxRecord.addCalculatedField('AmountOrigin', taxSourceBaseAmount, literalStr("@SYS21950"));
            
        // Add display methods.
        postedTaxRecord.addDisplayMethod(tableMethodStr(TaxTrans, calculatedTaxValue));
        postedTaxRecord.addDisplayMethod(tableMethodStr(TaxTrans, taxCodeCurrencyChargeAmount));
        postedTaxRecord.addDisplayMethod(tableMethodStr(TaxTrans, taxCodeCurrencyTaxAmount));
        postedTaxRecord.addDisplayMethod(tableMethodStr(TaxTrans, taxOnlyBaseAmountCur));
        postedTaxRecord.addDisplayMethod(tableMethodStr(TaxTrans, totalTaxAmountCur));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxSalesInvoiceLineAmount</Name>
				<Source><![CDATA[
    /********************************************************************************************************************/
    /*                                       PROFORMA TAXES                                                             */
    /********************************************************************************************************************/

    /// <summary>
    /// Calculates TaxAmount related to the provided proforma invoice line.
    /// </summary>
    /// <param name = "_custInvoiceJour">Customer invoice proforma journal.</param>
    /// <param name = "_custInvoiceTrans">Customer invoice proforma transaction line.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    /// <returns>Total TaxAmount related to proforma line.</returns>
    public static TaxAmountCur getProformaTaxSalesInvoiceLineAmount(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans, boolean _includeMarkupTax = true)
    {
        RecId salesLineRecId = _custInvoiceTrans.salesLine().RecId;
        TaxAmountCur totalTaxAmountForLine = 0;
        SalesParmTable salesParmTable = SalesParmTable::findSalesId(_custInvoiceJour.SalesId, _custInvoiceJour.ParmId);
        SalesParmUpdate salesParmUpdate = salesParmTable.salesParmUpdate();
        
        SalesTotals salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, DocumentStatus::Invoice);
        salesTotals.calc();
        TaxSales taxSales = salesTotals.tax();
        taxSales.showTaxesSourceSingleLine(_custInvoiceTrans.TableId, _custInvoiceTrans.RecId, true);
        TmpTaxWorkTrans tmpTaxWorkTrans = taxSales.tmpTaxWorkTrans();

        // Calculate the sum of the tax amount of the invoice line proforma that does not include the taxes for the markup.
        select sum(TaxAmount) from tmpTaxWorkTrans
            where tmpTaxWorkTrans.SourceTableId == tableNum(SalesLine) &&
                  tmpTaxWorkTrans.SourceRecId == salesLineRecId;

        totalTaxAmountForLine = abs(tmpTaxWorkTrans.TaxAmount);

        if (_includeMarkupTax)
        {
            MarkupTrans  localMarkUpTrans;
            // Add the sum of the markup trans tax amount.
            select sum(TaxAmount) from tmpTaxWorkTrans
                exists join localMarkUpTrans
                where tmpTaxWorkTrans.SourceRecId == localMarkUpTrans.RecId &&
                      localMarkUpTrans.TransTableId != tableNum(SalesTable) &&
                      localMarkUpTrans.TransRecId == salesLineRecId &&
                      !localMarkUpTrans.IsDeleted;

            totalTaxAmountForLine += abs(tmpTaxWorkTrans.TaxAmount);
        }

        return totalTaxAmountForLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxSalesInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TmpTaxWorkTrans</c> records linked with proforma invoice Journal.
    /// </summary>
    /// <param name = "_custInvoiceJour">Customer invoice proforma journal.</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    public static RecordLinkList getProformaTaxSalesInvoice(CustInvoiceJour _custInvoiceJour)
    {
        SalesParmTable salesParmTable = SalesParmTable::findSalesId(_custInvoiceJour.SalesId, _custInvoiceJour.ParmId);
        SalesParmUpdate salesParmUpdate = salesParmTable.salesParmUpdate();
        SalesTotals salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, DocumentStatus::Invoice);
        salesTotals.calc();
        TaxSales taxSales = salesTotals.tax();
        TmpTaxWorkTrans tmpTaxWorkTrans = taxSales.tmpTaxWorkTrans();
        RecordLinkList recordList = new RecordLinkList();

        while select tmpTaxWorkTrans
        {
            recordList.ins(tmpTaxWorkTrans);
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxSalesInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TmpTaxWorkTrans</c> records linked to sales proforma invoice line.
    /// </summary>
    /// <param name = "_custInvoiceJour">Customer invoice proforma journal.</param>
    /// <param name = "_custInvoiceTrans">Customer proforma invoice transaction line.</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    public static RecordLinkList getProformaTaxSalesInvoiceLine(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans, boolean _includeMarkupTax = true)
    {
        SalesParmTable salesParmTable = SalesParmTable::findSalesId(_custInvoiceJour.SalesId, _custInvoiceJour.ParmId);
        SalesParmUpdate salesParmUpdate = salesParmTable.salesParmUpdate();
        SalesTotals salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, DocumentStatus::Invoice);
        RecordLinkList recordList = new RecordLinkList();
        salesTotals.calc();
        
        TaxSales taxSales = salesTotals.tax();
        taxSales.showTaxesSourceSingleLine(_custInvoiceTrans.TableId, _custInvoiceTrans.RecId, true);
        TmpTaxWorkTrans tmpTaxWorkTrans = taxSales.tmpTaxWorkTrans();
       
        RecId salesLineRecId = _custInvoiceTrans.salesLine().RecId;

        while select tmpTaxWorkTrans
            where tmpTaxWorkTrans.SourceTableId == tableNum(SalesLine) &&
                  tmpTaxWorkTrans.SourceRecId == salesLineRecId
        {
            recordList.ins(tmpTaxWorkTrans);
        }
        
        // Gets Markup tax trans
        if (_includeMarkupTax)
        {
            MarkupTrans localMarkUpTrans;

            while select tmpTaxWorkTrans
                exists join localMarkUpTrans
                where tmpTaxWorkTrans.SourceRecId == localMarkUpTrans.RecId &&
                      localMarkUpTrans.TransTableId != tableNum(SalesTable) &&
                      localMarkUpTrans.TransRecId == salesLineRecId &&
                      !localMarkUpTrans.IsDeleted
            {
                recordList.ins(tmpTaxWorkTrans);
            }
        }
        
        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxFreeTextInvoiceLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates TaxAmount for related proforma free text invoice line.
    /// </summary>
    /// <param name = "_custInvoiceTrans">Customer free text invoice transaction line.</param>
    /// <returns>Total tax amount of the proforma free text invoice line.</returns>
    public static TaxAmountCur getProformaTaxFreeTextInvoiceLineAmount(CustInvoiceTrans _custInvoiceTrans)
    {
        CustInvoiceLine custInvoiceLine;
        RefRecId sourceDocumentLine_custTrans = _custInvoiceTrans.SourceDocumentLine;

        select firstonly custInvoiceLine 
            where custInvoiceLine.SourceDocumentLine == sourceDocumentLine_custTrans;

        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceLine);
        custFreeInvoiceCalcTotals.calc();
        
        // Calculate tax line summary for the proforma line
        TaxAmountCur totalTaxAmountForLine = custFreeInvoiceCalcTotals.tax().taxPrLine(tableNum(CustInvoiceLine), custInvoiceLine.RecId);
        
        return totalTaxAmountForLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxFreeTextInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TmpTaxWorkTrans</c> records linked to current proforma Free Text Invoice.
    /// </summary>
    /// <param name = "_custInvoiceTable">Customer free text invoice proforma journal.</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    public static RecordLinkList getProformaTaxFreeTextInvoice(CustInvoiceTable _custInvoiceTable)
    {
        RecordLinkList recordList = new RecordLinkList();
        
        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(_custInvoiceTable);
        custFreeInvoiceCalcTotals.calc();
               
        TmpTaxWorkTrans tmpTaxWorkTrans = custFreeInvoiceCalcTotals.tax().tmpTaxWorkTrans();
        while select tmpTaxWorkTrans
        {
            recordList.ins(tmpTaxWorkTrans);
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxFreeTextInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TmpTaxWorkTrans</c> records linked to proforma Free Text Line record.
    /// </summary>
    /// <param name = "_custInvoiceTrans">customer free text invoice transaction line.</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    public static RecordLinkList getProformaTaxFreeTextInvoiceLine(CustInvoiceTrans _custInvoiceTrans)
    {
        CustInvoiceLine custInvoiceLine;
        RecordLinkList recordList = new RecordLinkList();
        RefRecId sourceDocumentLine_custTrans = _custInvoiceTrans.SourceDocumentLine;

        select firstonly custInvoiceLine 
            where custInvoiceLine.SourceDocumentLine == sourceDocumentLine_custTrans;

        CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals = new CustFreeInvoiceCalcTotals(custInvoiceLine);
        custFreeInvoiceCalcTotals.calc();
         
        TmpTaxWorkTrans tmpTaxWorkTrans = custFreeInvoiceCalcTotals.tax().tmpTaxWorkTrans();
        while select tmpTaxWorkTrans
            where tmpTaxWorkTrans.SourceTableId == tableNum(CustInvoiceLine) &&
                  tmpTaxWorkTrans.SourceRecId == custInvoiceLine.RecId
        {
            recordList.ins(tmpTaxWorkTrans);
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxProjectInvoiceLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates TaxAmount for related proforma invoice line.
    /// </summary>
    /// <param name = "_projProposalJour">Project invoice proforma journal.</param>
    /// <param name = "_tableId">Table Id of the source document.</param>
    /// <param name = "_recId">RecId of the record for which tax amount is calculating.</param>
    /// <returns>Total TaxAmount related to proforma line.</returns>
    public static TaxAmountCur getProformaTaxProjectInvoiceLineAmount(ProjProposalJour _projProposalJour, TableId _tableId, RecId _recId)
    {
        ProjProposalTotals projTotals = new ProjProposalTotals(_projProposalJour);
        projTotals.calc();
        TaxProj taxSales = projTotals.tax();
        taxSales.showTaxesSourceSingleLine(_tableId, _recId, true);

        // NOTE: To get all records, use this method:
        //TmpTaxWorkTrans tmpTaxWorkTrans = taxSales.tmpTaxWorkTrans();

        // Calculate tax line summary for the proforma line
        TaxAmountCur totalTaxAmountForLine = taxSales.taxPrLine(_tableId, _recId);
        
        return totalTaxAmountForLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxSalesJournal</Name>
				<Source><![CDATA[
    /********************************************************************************************************************/
    /*                            GET PROFORMA TAXES FOR SALES REPORTS VIA COMMON TABLE                                 */
    /********************************************************************************************************************/

    /// <summary>
    /// Gets all <c>TmpTaxWorkTrans</c> records linked with Sales proforma journal.
    /// </summary>
    /// <param name = "_journalTable">Proforma journal header table (example in case of Sales invoice the journal table is CustInvoiceJour).</param>
    /// <param name = "_documentStatus">Document that is executing (example Invoice, Confirmation, Quotation).</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    public static RecordLinkList getProformaTaxSalesJournal(Common _journalTable, DocumentStatus _documentStatus)
    {
        SalesParmTable salesParmTable;

        if (_journalTable.tableId == tableNum(CustInvoiceJour))
        {
            CustInvoiceJour custInoviceJour = _journalTable;
            salesParmTable = SalesParmTable::findSalesId(custInoviceJour.SalesId, custInoviceJour.ParmId);
        }
        else if (_journalTable.tableId == tableNum(CustConfirmJour))
        {
            CustConfirmJour custConfirmJour = _journalTable;
            salesParmTable = SalesParmTable::findSalesId(custConfirmJour.SalesId, custConfirmJour.ParmId);
        }
        else
        {
            DocGlobalHelper::handleError('No journal proforma record was found. Please check if the journal record exists.');
        }

        SalesParmUpdate salesParmUpdate = salesParmTable.salesParmUpdate();
        SalesTotals salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, _documentStatus);
        salesTotals.calc();
        TaxSales taxSales = salesTotals.tax();
        TmpTaxWorkTrans tmpTaxWorkTrans = taxSales.tmpTaxWorkTrans();
        RecordLinkList recordList = new RecordLinkList();

        while select tmpTaxWorkTrans
        {
            recordList.ins(tmpTaxWorkTrans);
        }
       
        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProformaTaxSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all <c>TmpTaxWorkTrans</c> records linked to Sales proforma line.
    /// </summary>
    /// <param name = "_journalTable">Proforma journal header table (example in case of Sales invoice is CustInvoiceJour).</param>
    /// <param name = "_journalLineTable">Proforma transaction line table (example in case of Sales invoice is CustInvoiceTrans).</param>
    /// <param name = "_salesLineRecId">Rec id of underlying sales line.</param>
    /// <param name = "_documentStatus">Document that is executing (example Invoice, Confirmation, Quotation).</param>
    /// <param name = "_includeMarkupTax">If true, taxes on the Markup will be taken into account, otherwise not.</param>
    /// <returns><c>RecordLinkList</c> containing all found records.</returns>
    public static RecordLinkList getProformaTaxSalesLine(Common _journalTable, Common _journalLineTable, RecId _salesLineRecId, DocumentStatus _documentStatus, boolean _includeMarkupTax = true)
    {
        SalesParmTable salesParmTable;

        if (_journalTable.tableId == tableNum(CustInvoiceJour))
        {
            CustInvoiceJour custInoviceJour = _journalTable;
            salesParmTable = SalesParmTable::findSalesId(custInoviceJour.SalesId, custInoviceJour.ParmId);
        }
        else if (_journalTable.tableId == tableNum(CustConfirmJour))
        {
            CustConfirmJour custConfirmJour = _journalTable;
            salesParmTable = SalesParmTable::findSalesId(custConfirmJour.SalesId, custConfirmJour.ParmId);
        }
        else
        {
            DocGlobalHelper::handleError('No journal proforma record was found. Please check if the journal record exists.');
        }

        SalesParmUpdate salesParmUpdate = salesParmTable.salesParmUpdate();
        SalesTotals salesTotals = SalesTotals::construct(salesParmTable, salesParmUpdate.SpecQty, salesParmUpdate.SumBy, salesParmUpdate.ParmId, salesParmUpdate.SumSalesId, _documentStatus);
        RecordLinkList recordList = new RecordLinkList();
        salesTotals.calc();
        
        TaxSales taxSales = salesTotals.tax();
        taxSales.showTaxesSourceSingleLine(_journalLineTable.TableId, _journalLineTable.RecId, true);
        TmpTaxWorkTrans tmpTaxWorkTrans = taxSales.tmpTaxWorkTrans();
       
        while select tmpTaxWorkTrans
            where tmpTaxWorkTrans.SourceTableId == tableNum(SalesLine) &&
                  tmpTaxWorkTrans.SourceRecId == _salesLineRecId
        {
            recordList.ins(tmpTaxWorkTrans);
        }
        
        // Gets Markup tax trans
        if (_includeMarkupTax)
        {
            MarkupTrans localMarkUpTrans;

            while select tmpTaxWorkTrans
                exists join localMarkUpTrans
                where tmpTaxWorkTrans.SourceRecId == localMarkUpTrans.RecId &&
                      localMarkUpTrans.TransTableId != tableNum(SalesTable) &&
                      localMarkUpTrans.TransRecId == _salesLineRecId &&
                      !localMarkUpTrans.IsDeleted
            {
                recordList.ins(tmpTaxWorkTrans);
            }
        }
        
        return recordList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>