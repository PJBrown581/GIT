<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocVendInvoiceDocumentDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocVendInvoiceDocumentDSP extends DocDataSourceProviderSrsProforma
{
    VendInvoiceDocumentTmp                  headerTableBuffer;
    VendInvoiceDocumentContract             reportContract;
    boolean                                 transLineAdded, taxLineAdded, paymSchedLinesAdded, prePaymLinesAdded;
    LogisticsAddressCountryRegionISOCode    isoCountryCode;
    PurchTable                              purchTable;
    DocTableFieldsMetadata                  extensionFieldsMetadata_VendInvoiceDocumentTmp = DocTableFieldsMetadata::construct(tableStr(VendInvoiceDocumentTmp));

    /* Variables for custom placeholders */
    str      placeholder_invoiceNum;
    date     placeholder_invoiceDate;
    str      placeholder_paymentDate;
    str      placeholder_purchId;
    str      placeholder_vendName;
    

    #ISOCountryRegionCodes

    #define.VendInvoiceHeader('VendInvoiceHeader')
    #define.VendInvoiceLines('VendInvoiceLines')
    #define.VendInvoiceTaxLines('VendInvoiceTaxLines')
    #define.VendInvoicePaymSchedLines('VendInvoicePaymSchedLines')
    #define.VendInvoicePrePaymLines('VendInvoicePrePaymLines')
    #define.DefaultDimensionField('FinancialDimensions')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, VendInvoiceDocumentTmp _currentLine)
    {
        if(_currentLine.PurchInvoiceTransOrTaxTrans == true && _currentLine.VendPaymSched == false)
        {
            this.addDataFieldsForLine_Trans(_addingRecord, _currentLine);
            transLineAdded = true;
            return;
        }

        if( _currentLine.ShowTaxBalance == true)
        {
            this.addDataFieldsForLine_Tax(_addingRecord, _currentLine);
            taxLineAdded = true;
            return;
        }

        if( _currentLine.ShowVendPaym == true)
        {
            this.addDataFieldsForLine_PaymSched(_addingRecord, _currentLine);
            paymSchedLinesAdded = true;
            return;
        }

        if( _currentLine.ShowPrePaymentDeductionSection == true)
        {
            this.addDataFieldsForLine_PrePaym(_addingRecord, _currentLine);
            paymSchedLinesAdded = true;
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_PaymSched</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_PaymSched(DocXmlRecord _addingRecord, VendInvoiceDocumentTmp _currentLine)
    {
        // Rename the record from 'VendInvoiceDocumentTmp' to 'VendInvoicePaymSchedLines'.
        _addingRecord.setRecordName(#VendInvoicePaymSchedLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Scheduled payments'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the tax lines.
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, SchedDiscAmount));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, SchedDiscDate));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, SchedDiscDateStr));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, SchedDueAmount));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, SchedDueDate));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, SchedDueDateStr));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowVendPaym));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_PrePaym</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_PrePaym(DocXmlRecord _addingRecord, VendInvoiceDocumentTmp _currentLine)
    {
        // Rename the record from 'VendInvoiceDocumentTmp' to 'VendInvoicePrePaymLines'.
        _addingRecord.setRecordName(#VendInvoicePrePaymLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Prepayments'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the tax lines.
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowPrePaymentDeductionSection));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendTransTransDate));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendTransTxt));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendTransCurrencyCode));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendTransInvoiceCurrencyCode));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendTransSettledAmountOriginCur));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendTransSettledAmountCur));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Tax</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_Tax(DocXmlRecord _addingRecord, VendInvoiceDocumentTmp _currentLine)
    {
        // Rename the record from 'VendInvoiceDocumentTmp' to 'VendInvoiceTaxLines'.
        _addingRecord.setRecordName(#VendInvoiceTaxLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Taxes'); // NOTE: use literalStr("@LabelID") instead.

        // Add all 'line' fields related to the tax lines.
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowTaxBalance));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, Amount));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, AmountInWords));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, AmountInWordsSection));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, CashDiscAmount));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ExcludeInTaxTransSection));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxAmount));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxAmountMST));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxBaseAmount));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxBaseAmountMST));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxBaseCurrencyCode));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxBaseQty));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxCode));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxExemptDescription));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalTaxAmountExcludedCur));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalTaxAmountExcludedMST));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, PrintCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Trans</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine_Trans(DocXmlRecord _addingRecord, VendInvoiceDocumentTmp _currentLine)
    {
        // Rename the record from 'VendInvoiceDocumentTmp' to 'VendInvoiceLines'.
        _addingRecord.setRecordName(#VendInvoiceLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Vendor invoice lines'); // NOTE: use literalStr("@LabelID") instead.

        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, CorrectiveReasonLines));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, DiscAmount));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, DiscPercent));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ExternalItemNum));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, InventDimPrint));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, InventDimProduct));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ItemIdOnly));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, LineAmount));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, Name));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, PdsCwStr));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, PurchPrice));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, PurchUnitTxt));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, Qty));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowInventDimColor));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowInventDimConfigId));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowInventDimSize));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowInventDimStyleId));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxWriteCode));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendInvoiceTransLineNum));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ItemId));
        _addingRecord.addField(fieldStr(VendInvoiceDocumentTmp, ReverseChargeLine));


        // Add Extension fields defined on VendInvoiceDocumentTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentLine, _addingRecord, true, extensionFieldsMetadata_VendInvoiceDocumentTmp);


        // TODO: Add here additional fields from the related VendInvoiceTrans table (or some other tables).
        //VendInvoiceTrans vendInvoiceTrans = this.vendInvoiceTrans(_currentLine.JourTransRecId_DR);
        //_addingRecord.addCalculatedField('OrigPurchId', vendInvoiceTrans.OrigPurchId);
        //_addingRecord.addCalculatedField('LineAmountTax', vendInvoiceTrans.LineAmountTax);
        //_addingRecord.addCalculatedField('LineNum', vendInvoiceTrans.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(VendInvoiceDocumentTmp))
        {
            this.addDataFieldsForLine(_addingRecord, _rdpTableRecord);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Vendor invoice DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_VendInvoiceDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceJour</Name>
				<Source><![CDATA[
    protected VendInvoiceJour vendInvoiceJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = VendInvoiceJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceTrans</Name>
				<Source><![CDATA[
    protected VendInvoiceTrans vendInvoiceTrans(RecId _vendInvoiceTransRecId)
    {
        VendInvoiceTrans vendInvoiceTrans;

        if (this.isProforma())
        {
            vendInvoiceTrans = this.getProformaTransLine(_vendInvoiceTransRecId);
        }
        else
        {
            vendInvoiceTrans = VendInvoiceTrans::findRecId(_vendInvoiceTransRecId);
        }

        return vendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord                headerDataRecord, emptyLineDataRecord;
        VendInvoiceDocumentTmp      emptyLine;

        void addHeaderFields()
        {
            // We will skip adding the company related fields since we already have them
            // in the GeneralData data section at our disposal.
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyName));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyAddress));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyPhone));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyTeleFax));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyGiro));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyCoRegNum));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyEnterpriseNumber));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyVATNum));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CurrencyCodeCompany));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyBankAccountName));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyBankAccountNum));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyBankAccountRegNum));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyCommercialRegister));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyCommercialRegisterInsetNumber));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyCommercialRegisterSection));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyCurrencyCode));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyEmail));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyEnterpriseCode));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyLogo));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CompanyRegNum));


            // Redundant fields (flags):
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PurchInvoiceTransOrTaxTrans));
            //headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendPaymSched));
            

            // Country specific fields.
            if (isoCountryCode == #isoMY)
            {
                headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, GSTApprovalNumber_MY));
                headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, GSTSummaryText_MY));
                headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceType_MY));
            }

            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalAppliedAmount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CashDisc));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CashDiscOnInvoice));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CashDiscPercent));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CashDiscTxt));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ConfigID));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CorrectedInvoiceIdCtrl));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CorrectiveReason));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CurrencyCode));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CurrencyCodeCompany));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, CurrencyCodeMain));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, Discount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, DoPricesIncludeTax));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, DoPrintSalesTaxExchRateSection));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, EndDisc));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, EndDiscAmountMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, EnterpriseNumber));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ExchRate));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, Footer));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, AmountInWordsInCompanyCurrency));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InternalInvoiceId));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, IntracomInvoiceAmount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, IntracomSumTax));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, IntracomVAT));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InventColorId));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InventSizeId));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InventStyleId));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceAmount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceAmountMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceDate));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceDateStr));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceDueDate));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceDueDateStr));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceReturnByList));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceRoundOff));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceRoundOffAmountMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceText));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, InvoiceWordingUK));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, IsProforma));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, IsTaxInvoice));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, JournalRecId));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, LanguageTxtText));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, LanguageTxtTextSection));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, LocalCurrencyAmount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, MiscCharges));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, NetAmount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, NetAmountMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, Payment));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PaymentSched));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PdsEnabled));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PrintExternalItemNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PrintFooter));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PrintIntracomVAT));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PrintInvoiceVATNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PrintLogo));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ProcurementCategoryName));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PurchBalance));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PurchNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PurchTax));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, PurchaseLineLineNumber));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SalesBalance));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SalesBalanceMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SalesTaxExchRate));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SellerEnterpriseCode));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SellerName));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ServiceTaxReverseChargeOriginAmount_IN));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowAccountingCurrencyAmounts));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowCopy));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowEnterpriseNumber));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowGiroField));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ShowSeller));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, StandardCurrency));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SumMarkup));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SumMarkupAmountMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SumTaxMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxDocumentNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxFreeBalance));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxFreeBalanceAmountMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxInvoicePurchId));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxPercent));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxPrintTaxFreeBalance));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxSpecPrintLevel));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxableBalance));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TaxableBalanceAmountMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalDiscount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalGrand));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalMiscCharges));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalPrepaidAmount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalRoundOff));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalSalesBalance));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalSalesTax));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalsSumTax));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotalsSumTaxAmountMST));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, TotaltaxBaseAmount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VatDueDate));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendAddress));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendBankAccountName));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendBankAccountNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendBankAccountRegNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendBankConstantSymbol));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendBankSpecificSymbol));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendCreditInvoicing));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendInvoiceJourDueDate));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendName));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendPurchReceiptDate));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendRegNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendVATNum));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, VendorEnterpriseCode));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, pdsCWQty));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, pdsCWUnitId));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, SellerAddress));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ReverseChargeAmount));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ReverseChargeBalance));
            headerDataRecord.addField(fieldStr(VendInvoiceDocumentTmp, ReverseChargeJournal));

            // Translating Country in Company Address field to the Language set on Vendor invoice journal
            // NOTE: DirUtility compares country value from the address with either short name or long name defined in D365 Country/Region
            headerDataRecord.addCalculatedFieldFromEdt('CompanyAddressTranslatedCountry', extendedTypeStr(Addressing),
                DirUtility::replaceAddressTokenLanguage(CompanyInfo::find().postalAddress(), this.vendInvoiceJour().LanguageId));

            /* Transportation document fields */
            DocXmlRecord childRecord = headerDataRecord.addChildRecord(headerTableBuffer).setSingleRecord(true);
            childRecord.setRecordName('TransportationDocument');
            childRecord.setRecordLabel('Transportation Document');
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, DoPrintTransportationDocument));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, DeliveryName));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, DeliveryAddress));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransPortationIssuedByName));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationCarrierAddress));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationCarrierName));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationContactPersonName));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationContactPersonTitle));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationDataSection));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationIssuedByTitle));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationLoadedAddress));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationLoadedDateStr));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationLoadedDateTime));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationLoadedName));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationPackageDangerDegree));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationPackageDescription));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationVehicleDescription));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationVehicleDriverName));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationVehiclePlateNumber));
            childRecord.addField(fieldStr(VendInvoiceDocumentTmp, TransportationVehicleTrailerNumber));
        }

        // (1) Add data records with fields representing the lines.
        super(_recordBuilder);

        // (2) Add all fields that belong to the header only once.
        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer).setSingleRecord(true);
        // Rename the record from 'VendInvoiceDocumentTmp' to 'VendInvoiceHeader'.
        headerDataRecord.setRecordName(#VendInvoiceHeader);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Vendor invoice header'); // NOTE: use literalStr("@LabelID") instead.
        // Add all 'header' fields.
        addHeaderFields();
        
        // (3) Add Purchase order email and Vendor primary email.
        headerDataRecord.addCalculatedField('OrderEmail', purchTable.Email);
        VendTable vendTable_InvoiceAccount = VendTable::find(this.vendInvoiceJour().InvoiceAccount);
        headerDataRecord.addCalculatedField('VendorEmail', vendTable_InvoiceAccount.email());

        // (4) Add Custom Fields defined on PurchTable and VendTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(purchTable, headerDataRecord);
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(vendTable_InvoiceAccount, headerDataRecord);

        // (5) Add Financial Dimensions from journal
        headerDataRecord.addCalculatedFieldFromEdt(#DefaultDimensionField, extendedTypeStr(DimensionDefault), this.vendInvoiceJour().DefaultDimension);
                
        // (6) Add Extension fields defined on VendInvoiceDocumentTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(headerTableBuffer, headerDataRecord, true, extensionFieldsMetadata_VendInvoiceDocumentTmp);


        // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
        // by using the related data to headerTableBuffer (VendInvoiceDocumentTmp) or reportContract.
        // For example, get the related VendInvoiceJour record and add additional data you need:
        //VendInvoiceJour vendInvoiceJour = this.vendInvoiceJour();
        //DocXmlRecord jourDataRecord = headerDataRecord.addChildRecord(vendInvoiceJour);
        //jourDataRecord.addField(fieldStr(VendInvoiceJour, InvoiceAccount));
        //jourDataRecord.addDisplayMethod(tableMethodStr(VendInvoiceJour, paymentCondition));
        // Or, add the payment schedule description:
        //headerDataRecord.addCalculatedField('PaymentSchedDescription', PaymSched::find(headerTableBuffer.PaymentSched).Description);


        // If this is design time, add all type of lines if they haven't been already added.
        _recordBuilder.goToTopRecord();
        if (!this.isRuntime())
        {
            emptyLine.clear();

            // Main transaction lines.
            if (!transLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Trans(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }

            // TaxLines.
            if (!taxLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Tax(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }

            // VendInvoicePaymSchedLines.
            if (!paymSchedLinesAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_PaymSched(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }

            // VendInvoicePrePaymLines.
            if (!prePaymLinesAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_PrePaym(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }
        }

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        VendInvoiceDocumentTmp currentRecord;

        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(VendInvoiceDocumentTmp))
        {
            currentRecord = _rdpTableRecord;

            if (headerTableBuffer.RecId == 0)
            {
                // Copy all fields from the first selected record since the majority of them
                // belong to the report header. We will add them as a separate node in the
                // generateXmlDataSource method.
                buf2Buf(currentRecord, headerTableBuffer);
                headerTableBuffer.RecId = currentRecord.RecId;

                // Store custom placeholders' values.
                placeholder_invoiceNum = currentRecord.InvoiceNum;
                placeholder_invoiceDate = currentRecord.InvoiceDate;
                placeholder_paymentDate = currentRecord.Payment;
                placeholder_purchId = currentRecord.PurchNum;
                placeholder_vendName = currentRecord.VendName;

                purchTable = PurchTable::find(placeholder_purchId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();

        isoCountryCode = SysCountryRegionCode::countryInfo();

        transLineAdded = false;
        taxLineAdded = false;
        paymSchedLinesAdded = false;
        prePaymLinesAdded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InvoiceNum('InvoiceNum')
    #define.InvoiceDate('InvoiceDate')
    #define.PaymentDate('PaymentDate')
    #define.PurchId('PurchId')
    #define.VendAccount('VendAccount')
    #define.VendName('VendName')
    #define.VendContactName('VendContactName')
    #define.PurchOrderEmail('PurchOrderEmail')
    #define.VendContactEmail('VendContactEmail')

    [DocPlaceholderAttribute(#InvoiceNum, 'INV - Invoice Number'),
     DocPlaceholderAttribute(#InvoiceDate, 'INV - Invoice Date'),
     DocPlaceholderAttribute(#PaymentDate, 'INV - Payment Date'),
     DocPlaceholderAttribute(#PurchId, 'INV - Purch ID'),
     DocPlaceholderAttribute(#VendAccount, 'INV - Vendor Account ID'),
     DocPlaceholderAttribute(#VendName, 'INV - Vendor Name'),
     DocPlaceholderAttribute(#VendContactName, 'INV - Vendor Contact Name'),
     DocPlaceholderAttribute(#PurchOrderEmail, 'INV - Purch Order Email'),
     DocPlaceholderAttribute(#VendContactEmail, 'INV - Vendor Contact Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        if (purchTable)
        {
            // Set the report execution context record to the corresponding purchTable. This will affect:
            // (1) Standard placeholders
            // (2) Saving to Attachments -> Record type: Context record
            // (3) Additional Attachments -> Load from: Context record
            _reportRunContext.setReportExecutionContextRecord(purchTable);
        }

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InvoiceNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceNum, placeholder_invoiceNum);

        // -- Placeholder @InvoiceDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDate, placeholder_invoiceDate);

        // -- Placeholder @PaymentDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentDate, placeholder_paymentDate);

        // -- Placeholder @PurchId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PurchId, placeholder_purchId);
        
        // -- Placeholder @VendName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendName, placeholder_vendName);

        // -- Placeholder @VendAccount@
        str vendAccount = this.vendInvoiceJour().OrderAccount;
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendAccount, vendAccount);

        // -- Placeholder @PurchOrderEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PurchOrderEmail, purchTable.Email);

        // -- Placeholder @VendContactEmail@
        ContactPerson contactPerson = ContactPerson::find(VendTable::find(vendAccount).ContactPersonId);
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendContactEmail, contactPerson ? contactPerson.email() : '');

        // -- Placeholder @VendContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#VendContactName, DocDspHelper::contactPersonName(contactPerson.ContactPersonId));


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setVendAccount(vendAccount);
        _reportRunContext.archiveContract().setPurchId(placeholder_purchId);
        _reportRunContext.archiveContract().setDocument(placeholder_invoiceNum, placeholder_invoiceDate);
        _reportRunContext.archiveContract().setJournal(this.vendInvoiceJour().RecId, DocJournalType::VendInvoiceJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>