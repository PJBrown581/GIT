<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPsaProjInvoiceGroupedDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocPsaProjInvoiceGroupedDSP extends DocDataSourceProviderSrsProforma
{
    PSAProjInvoiceContract                  reportContract;
    LogisticsAddressCountryRegionISOCode    isoCountryCode;
    ProjProposalJour                        projProposalJour;
    boolean                                 multipleProjIds = false;


    /* Variables for custom placeholders */
    str      placeholder_invoiceNum;
    date     placeholder_invoiceDate;
    date     placeholder_invoiceDueDate;
    str      placeholder_projContract;
    str      placeholder_projId;
    str      placeholder_custAccount;
    str      placeholder_custName;
    str      placeholder_custContactName;
    str      placeholder_paymTerms;
    str      placeholder_projEmail;

    #ISOCountryRegionCodes
    
    #define.InvoiceHeader('InvoiceHeader')
    #define.Taxes('Taxes')

    #define.Project('Project')
    #define.TransType('TransType')
    #define.TransLine('TransLine')

    #define.Hour('Hour')
    #define.Expense('Expense')
    #define.Item('Item')
    #define.Fee('Fee')
    #define.OnAccount('OnAccount')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        _labelMap.insert(literalStr("@SYS77429"), 'VAT');
        _labelMap.insert(literalStr("@SYS4726"), 'Invoice number');
        _labelMap.insert(literalStr("@SYS180072"), 'Date');
        _labelMap.insert(literalStr("@SYS177301"), 'Quantity');
        _labelMap.insert(literalStr("@PSA3463"), 'Sub total');
        _labelMap.insert(literalStr("@SYS7391"), 'Total');
        _labelMap.insert(literalStr("@SYS179500"), 'Grand total');
        _labelMap.insert(literalStr("@SYS54087"), 'Transaction type');
        _labelMap.insert(literalStr("@SYS139022"), 'Project name');
        _labelMap.insert(literalStr("@PSA2040"), 'Project ID');
        _labelMap.insert(literalStr("@SYS177345"), 'Amount');
        _labelMap.insert(literalStr("@SYS99166"), 'Percent cash discount');
        _labelMap.insert(literalStr("@SYS21950"), 'Amount origin');
        _labelMap.insert(literalStr("@SYS62373"), 'Non-taxable');
        _labelMap.insert(literalStr("@SYS55140"), 'Taxable');
        _labelMap.insert(literalStr("@SYS4004251"), 'Sales subtotal amount');
        _labelMap.insert(literalStr("@SYS6465"), 'Total discount');
        _labelMap.insert(literalStr("@SYS304436"), 'Charges');
        _labelMap.insert(literalStr("@PSA11276"), 'Retained amount');
        _labelMap.insert(literalStr("@SYS180832"), 'Net amount');
        _labelMap.insert(literalStr("@SYS180808"), 'Round-off');
        _labelMap.insert(literalStr("@SYS4002667"), 'SEPA Notification Header');
        _labelMap.insert(literalStr("@SYS4002672"), 'Payment for this invoice will be made from the following accounts at the earliest of');
        _labelMap.insert(literalStr("@SYS4002628"), 'Mandate ID');
        _labelMap.insert(literalStr("@SYS4002593"), 'Creditor');
        _labelMap.insert(literalStr("@SYS4002595"), 'Creditor ID');
        _labelMap.insert(literalStr("@SYS4002614"), 'Debtor name');
        _labelMap.insert(literalStr("@SYS4002613"), 'Debtor IBAN');
        _labelMap.insert(literalStr("@SYS4002615"), 'Debtor SWIFT Code');
        _labelMap.insert(literalStr("@PSA11410"), 'Total invoice');
        _labelMap.insert(literalStr("@SYS112318"), 'charges');
        _labelMap.insert(literalStr("@SYS22916"), 'Sales tax');
        _labelMap.insert(literalStr("@PSA11408"), 'Retention amount');
        _labelMap.insert(literalStr("@PSA11407"), 'Net invoice');
        _labelMap.insert(literalStr("@SYS32702"), 'Miss');
        _labelMap.insert(literalStr("@SYS184283"), 'Invoice due date');
        _labelMap.insert(literalStr("@SYS66021"), 'Invoice currency');
        _labelMap.insert(literalStr("@SYS177501"), 'Telephone');
        _labelMap.insert(literalStr("@SYS26946"), 'Tax exempt number');
        _labelMap.insert(literalStr("@SYS5250"), 'Page');
        _labelMap.insert(literalStr("@SYS181441"), 'Category');
        _labelMap.insert(literalStr("@SYS181024"), 'Description');
        _labelMap.insert(literalStr("@SYS181441"), 'Category');
        _labelMap.insert(literalStr("@SYS58659"), 'Total');
        _labelMap.insert(literalStr("@SYS26401"), 'of');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Project invoice without billing rules DSP - Grouped';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_ProjInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();

        isoCountryCode = SysCountryRegionCode::countryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InvoiceNum('InvoiceNum')
    #define.InvoiceDate('InvoiceDate')
    #define.InvoiceDueDate('InvoiceDueDate')
    #define.ProjContract('ProjContract')
    #define.ProjId('ProjId')
    #define.PaymentTerms('PaymentTerms')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.ProjEmail('ProjEmail')

    [DocPlaceholderAttribute(#InvoiceNum, 'PI - Invoice Number'),
     DocPlaceholderAttribute(#InvoiceDate, 'PI - Invoice Date'),
     DocPlaceholderAttribute(#InvoiceDueDate, 'PI - Invoice Due Date'),
     DocPlaceholderAttribute(#ProjContract, 'PI - Project Contract ID'),
     DocPlaceholderAttribute(#ProjId, 'PI - Project ID'),
     DocPlaceholderAttribute(#PaymentTerms, 'PI - Terms of Payment'),
     DocPlaceholderAttribute(#CustAccount, 'PI - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'PI - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'PI - Customer Contact Name'),
     DocPlaceholderAttribute(#ProjEmail, 'PI - Project Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding projProposalJour. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(this.projProposalJour());

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InvoiceNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceNum, placeholder_invoiceNum);

        // -- Placeholder @InvoiceDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDate, placeholder_invoiceDate);

        // -- Placeholder @InvoiceDueDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDueDate, placeholder_invoiceDueDate);

        // -- Placeholder @ProjContract@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjContract, placeholder_projContract);

        // -- Placeholder @ProjId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjId, placeholder_projId);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_custAccount);

        // -- Placeholder @ProjEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjEmail, placeholder_projEmail);

        // -- Placeholder @PaymentTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentTerms, placeholder_paymTerms);

        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, placeholder_custName);

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::custContactPersonName(placeholder_custAccount));


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_custAccount);
        _reportRunContext.archiveContract().setProjInvoiceProjId(placeholder_projContract);
        _reportRunContext.archiveContract().setDocument(placeholder_invoiceNum, placeholder_invoiceDate);
        _reportRunContext.archiveContract().setJournal(this.projInvoiceJour().RecId, DocJournalType::ProjInvoiceJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipRdpTableRecord</Name>
				<Source><![CDATA[
    protected boolean skipRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        // Skip each record from the ProjInvoiceLocalizationTmp table if isoCountryCode
        // is not one of the listed countries below.
        // This means that for these countries, the ProjInvoiceLocalizationTmp table
        // will not be presented in the report data source.
        if (tableStr(ProjInvoiceLocalizationTmp) == _rdpTableName)
        {
            switch (isoCountryCode)
            {
                case #isoLT, #isoHU, #isoCZ, #isoPL:
                    return false;

                default:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceJour</Name>
				<Source><![CDATA[
    protected ProjInvoiceJour projInvoiceJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = ProjInvoiceJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalJour</Name>
				<Source><![CDATA[
    protected ProjProposalJour projProposalJour()
    {
        if (!projProposalJour)
        {
            projProposalJour = ProjProposalJour::find(this.projInvoiceJour().ProposalId);
        }

        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceEmpl</Name>
				<Source><![CDATA[
    protected ProjInvoiceEmpl projInvoiceEmpl(RecId _projInvoiceEmplRecId)
    {
        ProjInvoiceEmpl projInvoiceEmpl;
        
        if (this.isProforma())
        {
            projInvoiceEmpl = this.getProformaProjInvoiceEmpl(_projInvoiceEmplRecId);
        }
        else
        {
            projInvoiceEmpl = ProjInvoiceEmpl::findRecId(_projInvoiceEmplRecId);
        }

        return projInvoiceEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceCost</Name>
				<Source><![CDATA[
    protected ProjInvoiceCost projInvoiceCost(RecId _projInvoiceCostRecId)
    {
        ProjInvoiceCost projInvoiceCost;
        
        if (this.isProforma())
        {
            projInvoiceCost = this.getProformaProjInvoiceCost(_projInvoiceCostRecId);
        }
        else
        {
            projInvoiceCost = ProjInvoiceCost::findRecId(_projInvoiceCostRecId);
        }

        return projInvoiceCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceItem</Name>
				<Source><![CDATA[
    protected ProjInvoiceItem projInvoiceItem(RecId _projInvoiceItemRecId)
    {
        ProjInvoiceItem projInvoiceItem;
        
        if (this.isProforma())
        {
            projInvoiceItem = this.getProformaProjInvoiceItem(_projInvoiceItemRecId);
        }
        else
        {
            projInvoiceItem = ProjInvoiceItem::findRecId(_projInvoiceItemRecId);
        }

        return projInvoiceItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceOnAcc</Name>
				<Source><![CDATA[
    protected ProjInvoiceOnAcc projInvoiceOnAcc(RecId _projInvoiceOnAccRecId)
    {
        ProjInvoiceOnAcc projInvoiceOnAcc;
        
        if (this.isProforma())
        {
            projInvoiceOnAcc = this.getProformaProjInvoiceOnAcc(_projInvoiceOnAccRecId);
        }
        else
        {
            projInvoiceOnAcc = ProjInvoiceOnAcc::findRecId(_projInvoiceOnAccRecId);
        }

        return projInvoiceOnAcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceRevenue</Name>
				<Source><![CDATA[
    protected ProjInvoiceRevenue projInvoiceRevenue(RecId _projInvoiceRevenueRecId)
    {
        ProjInvoiceRevenue projInvoiceRevenue;
        
        if (this.isProforma())
        {
            projInvoiceRevenue = this.getProformaProjInvoiceRevenue(_projInvoiceRevenueRecId);
        }
        else
        {
            projInvoiceRevenue = ProjInvoiceRevenue::findRecId(_projInvoiceRevenueRecId);
        }

        return projInvoiceRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    protected void addDataFieldsForHeader(DocXmlRecord _addingRecord, PSAProjInvoiceHeaderTmp _header)
    {
        // Rename the record from 'PSAProjInvoiceHeaderTmp' to 'InvoiceHeader'.
        _addingRecord.setRecordName(#InvoiceHeader);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Invoice header'); // NOTE: use literalStr("@LabelID")

        // Setting the flag needed for Docentric NextGen.
        _addingRecord.setSingleRecord(true);

        _addingRecord.addAllFieldsExcept([
                fieldstr(PSAProjInvoiceHeaderTmp, CompanyAddress),  // we have company data in the GeneralData data section
                fieldstr(PSAProjInvoiceHeaderTmp, CompanyLogo),     // we have company data in the GeneralData data section
                fieldstr(PSAProjInvoiceHeaderTmp, AuthorizedSignatory_BR),
                fieldstr(PSAProjInvoiceHeaderTmp, City_BR),
                fieldstr(PSAProjInvoiceHeaderTmp, CNPJCPFNum_BR),
                fieldstr(PSAProjInvoiceHeaderTmp, DesignationSignatory_BR),
                fieldstr(PSAProjInvoiceHeaderTmp, Narration_BR),
                fieldstr(PSAProjInvoiceHeaderTmp, CashAccountingRegime_ES),
                fieldstr(PSAProjInvoiceHeaderTmp, Enterpriseregister_NO),
                fieldstr(PSAProjInvoiceHeaderTmp, PaymentReference_BE),
                fieldstr(PSAProjInvoiceHeaderTmp, GSTReliefClause_MY),
                fieldstr(PSAProjInvoiceHeaderTmp, InvoiceType_MY),
                fieldstr(PSAProjInvoiceHeaderTmp, GSTReasonCode_MY),
                fieldstr(PSAProjInvoiceHeaderTmp, DeliveryAddress_TH),
                fieldstr(PSAProjInvoiceHeaderTmp, InvoiceBranch_TH),
                fieldstr(PSAProjInvoiceHeaderTmp, InvoiceTaxNatureOfAddress_TH),
                fieldstr(PSAProjInvoiceHeaderTmp, InvoiceTaxRegNumber_TH),
                fieldstr(PSAProjInvoiceHeaderTmp, RefInvoiceId_TH),
                fieldstr(PSAProjInvoiceHeaderTmp, InvoiceBranchName_TH),
                fieldstr(PSAProjInvoiceHeaderTmp, RemarkTxt_TH),
                fieldstr(PSAProjInvoiceHeaderTmp, AdjustmentDetailsTxt_TH)
            ]);

        /* COUNTRY REGION RELATED DATA */
        switch (isoCountryCode)
        {
            case #isoBR:
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, AuthorizedSignatory_BR));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, City_BR));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, CNPJCPFNum_BR));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, DesignationSignatory_BR));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, Narration_BR));
                break;

            case #isoES:
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, CashAccountingRegime_ES));
                break;

            case #isoNO:
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, Enterpriseregister_NO));
                break;

            case #isoBE:
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, PaymentReference_BE));
                break;

            case #isoMY:
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, GSTReliefClause_MY));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, InvoiceType_MY));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, GSTReasonCode_MY));
                break;

            case #isoTH:
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, DeliveryAddress_TH));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, InvoiceBranch_TH));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, InvoiceTaxNatureOfAddress_TH));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, InvoiceTaxRegNumber_TH));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, RefInvoiceId_TH));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, InvoiceBranchName_TH));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, RemarkTxt_TH));
                _addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, AdjustmentDetailsTxt_TH));
                break;
        }

        //-- Add Customer primary email.
        CustTable custTable = CustTable::find(_header.CustAccountNum);
        _addingRecord.addCalculatedField('CustomerEmail', custTable.email());
        
        //-- Add Custom Fields defined on CustTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable, _addingRecord);

        
        // TODO: Add here all your custom (extension) 'header' fields from the PSAManageInvoiceTmp table, if any.
        // For example:
        //_addingRecord.addField(fieldStr(PSAProjInvoiceHeaderTmp, YourCustomFieldName));


        // TODO: Add here additional fields (or records) to the header record
        // by using the related data to _header table buffer (PSAProjInvoiceHeaderTmp) or reportContract.
        // For example, get the related ProjInvoiceJour record and add additional data you need:
        //ProjInvoiceJour projInvoiceJour = this.projInvoiceJour();
        //DocXmlRecord jourDataRecord = headerDataRecord.addChildRecord(projInvoiceJour);
        //jourDataRecord.addField(fieldStr(ProjInvoiceJour, DefaultDimension));
        //jourDataRecord.addDisplayMethod(tableMethodStr(ProjInvoiceJour, paymentCondition));
        // Or, add the customer group name:
        //_addingRecord.addCalculatedField('CustGroup', CustTable::find(_header.CustAccountNum).customerGroup());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForTax</Name>
				<Source><![CDATA[
    protected void addDataFieldsForTax(DocXmlRecord _addingRecord, PSAProjInvoiceTaxTmp _taxLine)
    {
        // Rename the record from 'PSAProjInvoiceTaxTmp' to 'Taxes'.
        _addingRecord.setRecordName(#Taxes);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Taxes'); // NOTE: use literalStr("@LabelID")
            
        _addingRecord.addAllFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForProject</Name>
				<Source><![CDATA[
    protected void addDataFieldsForProject(DocXmlRecord _addingRecord, PSAProjInvoiceTmp _transLine)
    {
        _addingRecord.addFieldGroup(tableFieldGroupStr(PSAProjInvoiceTmp, ProjFields_DR));

        // TODO: Add here additional data related to the project. Use the _transLine.ProjId to determine the current project.
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, PSAProjInvoiceTmp _transLine)
    {
        // *** Add all fields from the TransFields_DR table field group.
        _addingRecord.addFieldGroup(tableFieldGroupStr(PSAProjInvoiceTmp, TransFields_DR));

        // *** Add additional fields: Activity and Resource.

        // Use 'keys' fields: psaProjInvoiceTmp.SourceTableId_DR and psaProjInvoiceTmp.SourceRecId_DR.
        // Note that those fields are filled using the extension of the PSAProjInvoiceDP class: PSAProjInvoiceDP_DR_Extension
        // that is provided only for app version 8.0 and up, because in earlier app versions PSAProjInvoiceDP is not extensible.

        // Determine activity and resource.
        ProjTrans projTrans;

        // -- Hour
        if (_transLine.SourceTableId_DR == tableNum(ProjInvoiceEmpl))
        {
            ProjInvoiceEmpl projInvoiceEmpl = this.projInvoiceEmpl(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjInvoiceEmpl(projInvoiceEmpl);
        }
        else if (_transLine.SourceTableId_DR == tableNum(ProjProposalEmpl))  // proforma
        {
            ProjProposalEmpl projProposalEmpl = ProjProposalEmpl::findRecId(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjProposalEmpl(projProposalEmpl);
        }

        // -- Expense
        else if (_transLine.SourceTableId_DR == tableNum(ProjInvoiceCost))
        {
            ProjInvoiceCost projInvoiceCost = this.projInvoiceCost(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjInvoiceCost(projInvoiceCost);
        }
        else if (_transLine.SourceTableId_DR == tableNum(ProjProposalCost))  // proforma
        {
            ProjProposalCost projProposalCost = ProjProposalCost::findRecId(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjProposalCost(projProposalCost);
        }

        // -- Item
        else if (_transLine.SourceTableId_DR == tableNum(ProjInvoiceItem))
        {
            ProjInvoiceItem projInvoiceItem = this.projInvoiceItem(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjInvoiceItem(projInvoiceItem);
        }
        else if (_transLine.SourceTableId_DR == tableNum(ProjProposalItem))  // proforma
        {
            ProjProposalItem projProposalItem = ProjProposalItem::findRecId(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjProposalItem(projProposalItem);
        }

        // -- Fee
        else if (_transLine.SourceTableId_DR == tableNum(ProjInvoiceRevenue))
        {
            ProjInvoiceRevenue projInvoiceRevenue = this.projInvoiceRevenue(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjInvoiceRevenue(projInvoiceRevenue);
        }
        else if (_transLine.SourceTableId_DR == tableNum(ProjProposalRevenue))  // proforma
        {
            ProjProposalRevenue projProposalRevenue = ProjProposalRevenue::findRecId(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjProposalRevenue(projProposalRevenue);
        }

        // -- On-account
        else if (_transLine.SourceTableId_DR == tableNum(ProjInvoiceOnAcc))
        {
            ProjInvoiceOnAcc projInvoiceOnAcc = this.projInvoiceOnAcc(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjInvoiceOnAcc(projInvoiceOnAcc);
        }
        else if (_transLine.SourceTableId_DR == tableNum(ProjProposalOnAcc))  // proforma
        {
            ProjProposalOnAcc projProposalOnAcc = ProjProposalOnAcc::findRecId(_transLine.SourceRecId_DR);
            projTrans = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);
        }

        // Get the Activity and Resource info.
        smmActivities smmActivities;
        ResourceView resource;
        if (projTrans)
        {
            str activityNumber = projTrans.activityNumber();
            RecId resourceRecId = projTrans.resource();
            smmActivities = smmActivities::find(activityNumber);
            resource = ResourceView::find(resourceRecId);
        }

        // Add Activity and Resource info to the transaction data record.
        _addingRecord.addCalculatedField('ActivityNumber', smmActivities.ActivityNumber);
        _addingRecord.addCalculatedField('Activity', smmActivities.Purpose);
        _addingRecord.addCalculatedField('ResourceId', resource.ResourceId);
        _addingRecord.addCalculatedField('ResourceName', resource.Name);

        // TODO: Add here additional data related to the trans line.
        // Note that projTrans can be null because this method is called also when
        // an empty line is being added for the purpose of generating the DDSP.
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransTypeLines</Name>
				<Source><![CDATA[
    protected void addTransTypeLines(str _projId, TableId _tableId, DocXmlRecord _transTypeDataRecord)
    {
        PSAProjInvoiceTmp psaProjInvoiceLine, psaProjInvoiceLineStored;
        SrsReportPreProcessedDetails srsReportPreProcessedDetails;

        boolean isAtLeastOneLineAdded = false;

        while select psaProjInvoiceLine
              exists join CreatedTransactionId from srsReportPreProcessedDetails
              where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                    psaProjInvoiceLine.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId &&
                    psaProjInvoiceLine.ProjId == _projId &&
                    psaProjInvoiceLine.TransTableId == _tableId
        {
            DocXmlRecord transLineDataFields = _transTypeDataRecord.addChildRecord(psaProjInvoiceLine);
            transLineDataFields.setRecordName(#TransLine);
            transLineDataFields.setRecordLabel(#TransLine);
            this.addDataFieldsForLine(transLineDataFields, psaProjInvoiceLine);

            if (!psaProjInvoiceLineStored)
            {
                psaProjInvoiceLineStored.data(psaProjInvoiceLine);
            }

            isAtLeastOneLineAdded = true;
        }
        
        // Add the TransTableId, TransTableLabel and TransactionOrigin fields to the parent TransactionType data record.
        _transTypeDataRecord.addCalculatedFieldFromEdt('TransTableId', extendedTypeStr(RefTableId), psaProjInvoiceLineStored.TransTableId);
        _transTypeDataRecord.addCalculatedField('TransTableLabel', psaProjInvoiceLineStored.TransTableLabel);
        _transTypeDataRecord.addCalculatedFieldFromEnum('TransactionOrigin', enumStr(ProjTransactionOrigin), psaProjInvoiceLineStored.TransactionOrigin);


        // If no line is added and we are generating the DDSP for designing purpose, add one empty line.
        if (!isAtLeastOneLineAdded && !this.isRuntime())
        {
            psaProjInvoiceLine.clear();
            DocXmlRecord transLineDataFields = _transTypeDataRecord.addChildRecord(psaProjInvoiceLine);
            transLineDataFields.setRecordName(#TransLine);
            transLineDataFields.setRecordLabel(#TransLine);
            this.addDataFieldsForLine(transLineDataFields, psaProjInvoiceLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStructure_ProjTrans</Name>
				<Source><![CDATA[
    protected void createStructure_ProjTrans(str _projId, DocXmlRecord _parentDataRecord, Map _transTypeMap)
    {
        SrsReportPreProcessedDetails srsReportPreProcessedDetails;
        PSAProjInvoiceTmp psaProjInvoiceLine_projHeader;
    
        // *** Add the project data record.
        // Locate the first line record containing the given proj ID.
        select firstonly psaProjInvoiceLine_projHeader
            exists join CreatedTransactionId from srsReportPreProcessedDetails
               where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                     psaProjInvoiceLine_projHeader.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId &&
                     psaProjInvoiceLine_projHeader.ProjId == _projId;

        // Add the project data record and rename it.
        DocXmlRecord projDataRecord = _parentDataRecord.addChildRecord(psaProjInvoiceLine_projHeader);
        projDataRecord.setRecordName(#Project);
        projDataRecord.setRecordLabel(#Project);

        // Add all needed data fields.
        this.addDataFieldsForProject(projDataRecord, psaProjInvoiceLine_projHeader);

        // *** Add the transaction types.
        MapEnumerator transTypeMapEnum = _transTypeMap.getEnumerator();
        while (transTypeMapEnum.moveNext())
        {
            TableId transTypeTableId = transTypeMapEnum.currentKey();
            str transType = transTypeMapEnum.currentValue();
            
            DocXmlRecord transTypeDataRecord = projDataRecord.addChildCalculatedRecord(#TransType);
            transTypeDataRecord.addCalculatedField('Type', transType);

            this.addTransTypeLines(_projId, transTypeTableId, transTypeDataRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        SrsReportPreProcessedDetails srsReportPreProcessedDetails;
        PSAProjInvoiceTmp psaProjInvoiceLine, psaProjInvoiceLine_fieldsForHeader;
        PSAProjInvoiceHeaderTmp psaProjInvoiceHeader;
        PSAProjInvoiceTaxTmp psaProjInvoiceTax;
        DocXmlRecord headerDataRecord, topDataRecord;
        str errorMsg = 'Error occurred in the overridden generateXmlDataSource() method';

        // Skip the building of the record tree from the built-in report RDP tables in the standard way.
        // super(_recordBuilder);

        try
        {
            topDataRecord = _recordBuilder.topRecord();

            /*  (1) Add the header record  */
            _recordBuilder.goToTopRecord();

            select firstonly psaProjInvoiceHeader
            exists join CreatedTransactionId from srsReportPreProcessedDetails
               where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                     psaProjInvoiceHeader.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId;
        
            headerDataRecord = _recordBuilder.addRecord(psaProjInvoiceHeader).setSingleRecord(true);
            this.addDataFieldsForHeader(headerDataRecord, psaProjInvoiceHeader);
            
            // Store custom placeholders' values.
            // (super() is skipped, so onSelectedRdpTableRecord() isn't executed)
            placeholder_invoiceNum = psaProjInvoiceHeader.InvoiceNum;
            placeholder_invoiceDate = psaProjInvoiceHeader.InvoiceDate;
            placeholder_invoiceDueDate = psaProjInvoiceHeader.DueDate;
            placeholder_projContract = psaProjInvoiceHeader.ProjectContract;
            placeholder_custAccount = psaProjInvoiceHeader.CustAccountNum;
            placeholder_custName = psaProjInvoiceHeader.CustName;
            placeholder_paymTerms = psaProjInvoiceHeader.Payment;

            // Add fields from the line table record which belong to the invoice header.
            select firstonly DocumentHeader, DocuRefHeaderVisibility, InvoiceAccountVATNum, InvoiceVATNumVisibility
            from psaProjInvoiceLine_fieldsForHeader
            exists join CreatedTransactionId from srsReportPreProcessedDetails
               where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                     psaProjInvoiceLine_fieldsForHeader.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId;
        
            headerDataRecord.addCalculatedField('DocumentHeader', psaProjInvoiceLine_fieldsForHeader.DocumentHeader);
            headerDataRecord.addCalculatedFieldFromEnum('DocuRefHeaderVisibility', enumStr(boolean), psaProjInvoiceLine_fieldsForHeader.DocuRefHeaderVisibility);
            headerDataRecord.addCalculatedField('InvoiceAccountVATNum', psaProjInvoiceLine_fieldsForHeader.InvoiceAccountVATNum);
            headerDataRecord.addCalculatedFieldFromEnum('InvoiceVATNumVisibility', enumStr(boolean), psaProjInvoiceLine_fieldsForHeader.InvoiceVATNumVisibility);
            headerDataRecord.addCalculatedField('IsProforma', this.projInvoiceJour().isProforma());


            /*  (2) Add tax records  */
            _recordBuilder.goToTopRecord();

            boolean atLeastOneTaxDataRecordAdded = false;
            while select psaProjInvoiceTax
            exists join CreatedTransactionId from srsReportPreProcessedDetails
               where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                     psaProjInvoiceTax.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId
            {
                DocXmlRecord taxDataRecord = _recordBuilder.addRecord(psaProjInvoiceTax);
                this.addDataFieldsForTax(taxDataRecord, psaProjInvoiceTax);
        
                atLeastOneTaxDataRecordAdded = true;
            }

            // If we are generating the DDSP for designing purposes only,
            // we will add an empty tax line in case that taxes aren't filled by the PSAProjInvoiceDP class.
            if (!atLeastOneTaxDataRecordAdded && !this.isRuntime())
            {
                DocXmlRecord taxDataRecord = _recordBuilder.addRecord(psaProjInvoiceTax);
                this.addDataFieldsForTax(taxDataRecord, psaProjInvoiceTax);
            }

        
            /* (3) Create a set of all included projects  */
            ProjId projId;
            Set projSet = new Set(Types::String);
            while select ProjId from psaProjInvoiceLine
            group by ProjId
            exists join CreatedTransactionId from srsReportPreProcessedDetails
               where srsReportPreProcessedDetails.RecId == this.getPreProcessedId() &&
                     psaProjInvoiceLine.CreatedTransactionId == srsReportPreProcessedDetails.CreatedTransactionId
            {
                projSet.add(psaProjInvoiceLine.ProjId);
                projId = psaProjInvoiceLine.ProjId;
            }
            // ProjId placeholder
            if (projSet.elements() == 1)
            {
                // fill it with the last retrieved ProjId
                placeholder_projId = projId;
            }
            else
            {
                placeholder_projId = DocConstantDSP::MULTIPLE;
            }
            
            // Store the email of the last project as a placeholder.
            placeholder_projEmail = ProjTable::find(projId).Email;

            // Add it also to the header data record.
            headerDataRecord.addCalculatedField('ProjectEmail', placeholder_projEmail);


            /*  (4) Create a helping map with transaction types: Hour, Expense, Item, Fee, On-Account  */
            Map transTypeMap = new Map(Types::Integer, Types::String);
            transTypeMap.insert(tableNum(ProjInvoiceEmpl), #Hour);
            transTypeMap.insert(tableNum(ProjInvoiceCost), #Expense);
            transTypeMap.insert(tableNum(ProjInvoiceItem), #Item);
            transTypeMap.insert(tableNum(ProjInvoiceRevenue), #Fee);
            transTypeMap.insert(tableNum(ProjInvoiceOnAcc), #OnAccount);


            /*  (5) Iterate through the projects and create structured data  */
            SetEnumerator projSetEnum = projSet.getEnumerator();
            while (projSetEnum.moveNext())
            {
                str currentProjId = projSetEnum.current();
            
                // Create structure: Project -> TransType -> TransLine
                this.createStructure_ProjTrans(currentProjId, topDataRecord, transTypeMap);
            }
        }

        catch (Exception::CLRError)
        {
            DocGlobalHelper::handleClrException(funcName(), errorMsg);
        }

        catch
        {
            DocGlobalHelper::handleException(funcName(), errorMsg);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>