<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocPSAContractLineInvoiceDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocPSAContractLineInvoiceDSP extends DocDataSourceProviderSrsProforma
{
    PSAContractLineInvoiceTmp               contractLineInvoice;
    PSAProjInvoiceHeaderTmp                 projInvoiceHeader;
    PSAProjInvoiceContract                  reportContract;
    LogisticsAddressCountryRegionISOCode    isoCountryCode;
    ProjProposalJour                        projProposalJour;
    ProjProposalId                          proposalId;
    ProjInvoiceJour                         projInvoiceJour;
    AmountMST                               totalRetainageAmount;
    boolean                                 taxAdded = false;
    Set                                     projIds;
    Set                                     billingRules;
    DocTableFieldsMetadata                  extensionFieldsMetadata_PSAContractLineInvoiceTmp = DocTableFieldsMetadata::construct(tableStr(PSAContractLineInvoiceTmp));


    /* Variables for custom placeholders */
    str      placeholder_invoiceNum;
    date     placeholder_invoiceDate;
    date     placeholder_invoiceDueDate;
    str      placeholder_projContract;
    str      placeholder_custAccount;
    str      placeholder_custName;
    str      placeholder_custContactName;
    str      placeholder_paymTerms;
    str      placeholder_projId;
    str      placeholder_projEmail;

    #ISOCountryRegionCodes
    
    #define.PSAProjInvoiceHeader('PSAProjInvoiceHeader')
    #define.PSAContractLineInvoice('PSAContractLineInvoice')
    #define.PSAContractLineDetail('PSAContractLineDetail')
    #define.PSAProjInvoiceTax('PSAProjInvoiceTax')
    #define.DefaultDimensionField('FinancialDimensions')
    #define.Projects('PSAProjects')
    #define.BillingRules('PSAContractBillingRules')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extend/Override this method in order to add additional parameters to the report data source.
    /// </summary>
    /// <param name = "_recordBuilderParameters">Record builder for the Parameters data section.</param>
    protected void addParameters(DocXmlRecordBuilder _recordBuilderParameters)
    {
        super(_recordBuilderParameters);

        // Add the Original/Copy print information to the Parameters data section of DDSP
        DocPrintMgmtOriginalCopyType printMgmtOriginalCopyType = this.parmParamsReporting().parmOriginalCopyType();
        DocDspHelper::addPrintMgmtOriginalCopyField(_recordBuilderParameters.topRecord(), printMgmtOriginalCopyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Project invoice with billing rules DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_ContractLineInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        PSAContractLineInvoiceTmp   currentRecordLine;

        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(PSAContractLineInvoiceTmp))
        {
            currentRecordLine = _rdpTableRecord;
            
            // While processing the first line, store some header-related information.
            if (placeholder_invoiceNum == '')
            {
                // Store custom placeholders' values.
                placeholder_invoiceNum = currentRecordLine.InvoiceNum;
                placeholder_invoiceDate = currentRecordLine.InvoiceDate;
                placeholder_invoiceDueDate = currentRecordLine.DueDate;
                placeholder_projContract = currentRecordLine.ContractId;
                placeholder_custAccount = currentRecordLine.CustAccountExt;
                placeholder_custName = currentRecordLine.CustCompanyName;
                placeholder_paymTerms = currentRecordLine.PaymTermId;
                
                // Fetch invoice journal and proposal.
                projInvoiceJour = this.projInvoiceJour();
                projProposalJour = this.projProposalJour();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();

        isoCountryCode = SysCountryRegionCode::countryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InvoiceNum('InvoiceNum')
    #define.InvoiceDate('InvoiceDate')
    #define.InvoiceDueDate('InvoiceDueDate')
    #define.ProjContract('ProjContract')
    #define.PaymentTerms('PaymentTerms')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.ProjId('ProjId')
    #define.ProjEmail('ProjEmail')

    [DocPlaceholderAttribute(#InvoiceNum, 'CLI - Invoice Number'),
     DocPlaceholderAttribute(#InvoiceDate, 'CLI - Invoice Date'),
     DocPlaceholderAttribute(#InvoiceDueDate, 'CLI - Invoice Due Date'),
     DocPlaceholderAttribute(#ProjContract, 'CLI - Project Contract ID'),
     DocPlaceholderAttribute(#ProjId, 'CLI - Project ID'),
     DocPlaceholderAttribute(#ProjEmail, 'CLI - Project Email'),
     DocPlaceholderAttribute(#PaymentTerms, 'CLI - Terms of Payment'),
     DocPlaceholderAttribute(#CustAccount, 'CLI - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'CLI - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'CLI - Customer Contact Name')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding projProposalJour. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(this.projProposalJour());

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InvoiceNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceNum, placeholder_invoiceNum);

        // -- Placeholder @InvoiceDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDate, placeholder_invoiceDate);

        // -- Placeholder @InvoiceDueDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDueDate, placeholder_invoiceDueDate);

        // -- Placeholder @ProjContract@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjContract, placeholder_projContract);

        // -- Placeholder @ProjId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjId, projIds.elements() == 1 ? projIds.toString() : DocConstantDSP::MULTIPLE);

        // -- Placeholder @ProjEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProjEmail, projIds.elements() == 1 ? ProjTable::find(projIds.toString()).Email : '');
       
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_custAccount);

        // -- Placeholder @PaymentTerms@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentTerms, placeholder_paymTerms);

        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, placeholder_custName);

        // -- Placeholder @CustContactName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, DocDspHelper::custContactPersonName(placeholder_custAccount));

        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_custAccount);
        _reportRunContext.archiveContract().setProjInvoiceProjId(placeholder_projContract);
        _reportRunContext.archiveContract().setDocument(placeholder_invoiceNum, placeholder_invoiceDate);
        _reportRunContext.archiveContract().setJournal(this.projInvoiceJour().RecId, DocJournalType::ProjInvoiceJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineDetail</Name>
				<Source><![CDATA[
    protected void addLineDetail(DocXmlRecord _addingRecord, PSAContractLineInvoiceTmp _currentLine)
    {
        PSAProjProposalProj proposalTransaction;
        PSAContractLineItems billingRule;
        ProjInvoiceTransUnion unionView;
        int cnt = 0;

        // Loop through all proposal transactions for this proposal and same billing rule
        // as on this datasource line.
        while select InvoicedNow, ProjId, ContractLineNum from proposalTransaction
            where proposalTransaction.ProjProposalId == projProposalJour.ProposalId
                && proposalTransaction.ContractLineNum == _currentLine.ContractLineNum
            join LineType, LineDesc, ContractLineNum from billingRule
                where billingRule.ContractLineNum == proposalTransaction.ContractLineNum
        {
            cnt++;

            // Store all billing rules used for this invoice
            billingRules.add(billingRule.ContractLineNum);

            // Add more info to the original line
            if (cnt == 1)
            {
                _addingRecord.addCalculatedField('BillingRuleDescription', billingRule.LineDesc, 'Billing rule description');
            }

            if (billingRule.LineType == PSAContractLineType::LumpSum        // Milestone
                || billingRule.LineType == PSAContractLineType::Progress    // Progress
                || billingRule.LineType == PSAContractLineType::UOD)        // Unit of delivery
            {                
                // Add subrecord with line details.
                DocXmlRecord lineDetails = _addingRecord.addChildCalculatedRecord(#PSAContractLineDetail);
                lineDetails.setRecordLabel('Line detail');
                
                lineDetails.addCalculatedField('Qty', 0.0, 'Qty');
                lineDetails.addCalculatedField('SalesPrice', 0.0, 'Sales price');
                lineDetails.addCalculatedField('LineAmount', proposalTransaction.InvoicedNow, 'Line amount');
                
                lineDetails.addCalculatedField('ProjId', proposalTransaction.ProjId, 'Project ID');
                lineDetails.addCalculatedField('CategoryId', '', 'Category');

                // Get the matching OnAcc transaction and its details
                ProjInvoiceOnAcc onAccTrans;
                select firstonly Txt from unionView
                    where unionView.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    exists join onAccTrans
                        where onAccTrans.TransId == unionView.ProjTransId
                            && unionView.SourceTableId == tableNum(ProjInvoiceOnAcc)
                            && onAccTrans.PsaContractLineNum == proposalTransaction.ContractLineNum
                            && onAccTrans.ProjInvoiceId == projInvoiceJour.ProjInvoiceId;
                lineDetails.addCalculatedField('Description', unionView.Txt, 'Description');
                
                // Add the project ID to a Set. We will later add all project IDs
                // to a final datasource as a new dataset.
                projIds.add(proposalTransaction.ProjId);
                
                // There is a bug in standard.
                // If there is more than 1 proposal transaction for this proposal and the same billing rule, 
                // datasource contains a line based on only the first of them.
                // We will Update the Line amount with the sum of all related transaction amounts.
                if (cnt == 1)
                {
                    PSAProjProposalProj proposalTransactionSum;
                    select sum(InvoicedNow) from proposalTransactionSum
                        where proposalTransactionSum.ProjProposalId == projProposalJour.ProposalId
                            && proposalTransactionSum.ContractLineNum == _currentLine.ContractLineNum;

                    if (proposalTransactionSum.InvoicedNow != _currentLine.InvoiceAmount)
                    {
                        _addingRecord.getField(fieldStr(PSAContractLineInvoiceTmp, InvoiceAmount)).setFieldValue(proposalTransactionSum.InvoicedNow);
                    }
                }
            }
            else if (billingRule.LineType == PSAContractLineType::TAndM)    // Time and material
            {
                // For this billing rule we might have several Employee, Cost, Item and Revenue transactions
                // summarized in one datasource line. Identify them and insert additional records for them.
                ProjInvoiceItem itemTrans;
                ProjInvoiceEmpl emplTrans;
                ProjInvoiceCost costTrans;
                ProjInvoiceRevenue revenueTrans;

                while select Qty, SalesPrice, LineAmount from unionView 
                    where unionView.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    outer join RecId, ProjId, CategoryId from itemTrans
                        where itemTrans.ProjTransId == unionView.ProjTransId
                            && unionView.SourceTableId == tableNum(ProjInvoiceItem)
                            && itemTrans.PsaContractLineNum == proposalTransaction.ContractLineNum
                            && itemTrans.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    outer join RecId, ProjId, CategoryId from emplTrans
                        where emplTrans.TransId == unionView.ProjTransId
                            && unionView.SourceTableId == tableNum(ProjInvoiceEmpl)
                            && emplTrans.PsaContractLineNum == proposalTransaction.ContractLineNum
                            && emplTrans.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    outer join RecId, ProjId, CategoryId from costTrans
                        where costTrans.TransId == unionView.ProjTransId
                            && unionView.SourceTableId == tableNum(ProjInvoiceCost)
                            && costTrans.PsaContractLineNum == proposalTransaction.ContractLineNum
                            && costTrans.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                    outer join RecId, ProjId, CategoryId from revenueTrans
                        where revenueTrans.TransId == unionView.ProjTransId
                            && unionView.SourceTableId == tableNum(ProjInvoiceRevenue)
                            && revenueTrans.PsaContractLineNum == proposalTransaction.ContractLineNum
                            && revenueTrans.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
                {
                    str projId, categoryId;
                    if (itemTrans.RecId)
                    {
                        projId = itemTrans.ProjId;
                        categoryId = itemTrans.CategoryId;
                    }
                    else if (emplTrans.RecId)
                    {
                        projId = emplTrans.ProjId;
                        categoryId = emplTrans.CategoryId;
                    }
                    else if (costTrans.RecId)
                    {
                        projId = costTrans.ProjId;
                        categoryId = costTrans.CategoryId;
                    }
                    else if (revenueTrans.RecId)
                    {
                        projId = revenueTrans.ProjId;
                        categoryId = revenueTrans.CategoryId;
                    }
                    else
                    {
                        // On-account transaction, skip it, because we handle it under the other
                        // billing rules
                        continue;
                    }

                    // Add subrecord with line details.
                    DocXmlRecord lineDetails = _addingRecord.addChildCalculatedRecord(#PSAContractLineDetail);
                    lineDetails.setRecordLabel('Line detail');

                    lineDetails.addCalculatedField('Qty', unionView.Qty, 'Qty');
                    lineDetails.addCalculatedField('SalesPrice', unionView.SalesPrice, 'Sales price');
                    lineDetails.addCalculatedField('LineAmount', unionView.LineAmount, 'Line amount');                  
                
                    lineDetails.addCalculatedField('ProjId', projId, 'Project ID');
                    lineDetails.addCalculatedField('CategoryId', categoryId, 'Category');
                    lineDetails.addCalculatedField('Description', '', 'Description');

                    projIds.add(projId);
                }

            }
            else    // Fee
            {
                // Do nothing - leave the Fee transactions as they are
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, PSAContractLineInvoiceTmp _currentLine)
    {
        if (contractLineInvoice.RecId == 0)
        {
            // This is the first line. Store it in the global variable, which will be used later 
            // in the generateXmlDataSource() method to add the header-related fields to the header.
            buf2Buf(_currentLine, contractLineInvoice);
            contractLineInvoice.RecId = _currentLine.RecId;

            // Do other one-time actions.
            projIds = new Set(Types::String);
            billingRules = new Set(Types::String);
        }

        // Update total retainage sum
        totalRetainageAmount += _currentLine.RetainageAmount;

        // Rename the record from 'PSAContractLineInvoiceTmp' to 'PSAContractLineInvoice'.
        _addingRecord.setRecordName(#PSAContractLineInvoice);
        // Change the label of the record if needed.
        //_addingRecord.setRecordLabel('Project invoice line'); // NOTE: Use literalStr("@LabelID") instead.
       
        // Add the line-related fields
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, ContractLineNum));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, DocumentLine));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoiceAmount));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoicedToDate));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, LineDesc));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, LineType));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, LineValue), 'Contracted value');
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, PackingSlipInfo));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, PackingSlipInfoVisibility));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, PercentRetainage));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, RetainageAmount));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SMABasePrice));
        _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SMAIndex));

        /* COUNTRY REGION RELATED DATA */
        switch (isoCountryCode)
        {
            case #isoMY:
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, Amount_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CashDiscAmount_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, GSTSummaryText_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoiceType_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, IsGSTSummary_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxAmount_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxBaseAmount_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, GSTReasonCode_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, RefInvoiceDate_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, RefInvoiceID_MY));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxBaseQty_MY));
                break;

            case #isoAE:
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, VATAmount_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxWriteCode_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxCode_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, VATPercent_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxBaseAmount_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxAmount_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SalesBalance_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SumTax_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SumMarkup_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoiceRoundOff_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TotalInvoiceAmount_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CurrencyCode_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, ShowReportingCurTotals_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxRegistrationNumber_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, ExchRate_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TotalDisc_AE));
                _addingRecord.addField(fieldStr(PSAContractLineInvoiceTmp, OriginalInvoice_AE));
                break;
        }

        // Add Extension fields defined on PSAContractLineInvoiceTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentLine, _addingRecord, true, extensionFieldsMetadata_PSAContractLineInvoiceTmp);

        // Add line details, store Project IDs, fix platform bug.
        this.addLineDetail(_addingRecord, _currentLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    protected void addDataFieldsForHeader(DocXmlRecord _headerDataRecord)
    {
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CompanyGiro));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CompanyDebitDirectId));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, ContractId));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CurrencyCode));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CustAccountExt));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CustCompanyAddress));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CustCompanyName));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CustCompanyPhone));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, CustCompanyTelefax));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, DeliveryAddress));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, DeliveryName));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, DocumentHeader));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, DueDate));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoiceAccountVATNum));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoiceVATNumVisibility));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoiceDate));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoiceNum));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, InvoiceRoundOff));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, MandateBankIBAN));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, MandateReference));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, MandateSWIFTNo));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, NetAmount));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, OurAccountNum));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, PaymTermId));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, PrePrintLevelShow));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SalesBalance));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, ShowSepaNotification));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SMASpecIndexCalc));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SumMarkup));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, SumTax));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxableBalance));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TaxFreeBalance));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, Total));
        _headerDataRecord.addField(fieldStr(PSAContractLineInvoiceTmp, TotalDisc));

        // Add some other useful information.
        _headerDataRecord.addCalculatedField('TotalRetainageAmount', totalRetainageAmount);   
        _headerDataRecord.addCalculatedFieldFromEnum('InvoiceFormat', enumStr(PSAInvoiceFormats), projInvoiceJour.PSAInvoiceFormats);
        
        //-- Add Customer primary email.
        CustTable custTable = CustTable::find(contractLineInvoice.CustAccountExt);
        _headerDataRecord.addCalculatedField('CustomerEmail', custTable.email());

        //-- Add Custom Fields defined on CustTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable, _headerDataRecord);

        //-- Add Financial dimensions.
        _headerDataRecord.addCalculatedFieldFromEdt(#DefaultDimensionField, extendedTypeStr(DimensionDefault), projInvoiceJour.DefaultDimension);

        // Add Extension fields defined on PSAProjInvoiceHeaderTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(projInvoiceHeader, _headerDataRecord, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(PSAProjInvoiceHeaderTmp))
        {
            // DO NOTHING
            // PSAProjInvoiceHeaderTmp is not populated by psaContractLineInvoiceDP. We will 
            // later create a new XML record for the header.
            projInvoiceHeader = _rdpTableRecord;
        }
        else if (_rdpTableName == tableStr(PSAContractLineInvoiceTmp))
        {
            this.addDataFieldsForLine(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(PSAProjInvoiceTaxTmp))
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);

            _addingRecord.setRecordName(#PSAProjInvoiceTax);
            _addingRecord.setRecordLabel('Taxes');
            taxAdded = true;
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipRdpTableRecord</Name>
				<Source><![CDATA[
    protected boolean skipRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        // Skip PSAProjInvoiceHeaderTmp record as we will create a new Dataset for the header
        if (tableStr(PSAProjInvoiceHeaderTmp) == _rdpTableName)
        {
            return true;
        }

        // Skip each record from the ProjInvoiceLocalizationTmp table if isoCountryCode
        // is not one of the listed countries below.
        // This means that for these countries, the ProjInvoiceLocalizationTmp table
        // will not be presented in the report data source.
        if (tableStr(ProjInvoiceLocalizationTmp) == _rdpTableName)
        {
            switch (isoCountryCode)
            {
                case #isoLT, #isoHU, #isoCZ, #isoPL:
                    return false;

                default:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord            headerDataRecord, emptyLineDataRecord, projectsRecord, billingRuleRecord;
        PSAProjInvoiceTaxTmp    emptyLine;

        // Build the internal record tree from the built-in report RDP tables.
        super(_recordBuilder);

        // Add fields from PSAContractLineInvoiceTmp which should be moved to the header
        if (contractLineInvoice.RecId != 0)
        {
            // do not add new record
            // use a new DocXmlRecord class variable instead of headerRecord and populate it

            _recordBuilder.goToTopRecord();
            headerDataRecord = _recordBuilder.addRecord(contractLineInvoice).setSingleRecord(true);

            // Rename the record to PSAProjInvoiceHeader
            headerDataRecord.setRecordName(#PSAProjInvoiceHeader);

            // Change the record label
            headerDataRecord.setRecordLabel('Project Invoice header');
           
            // Add "header" fields from the stored line record
            this.addDataFieldsForHeader(headerDataRecord);
        }

        // If this is design time, add tax line if they haven't been already added.
        _recordBuilder.goToTopRecord();
        if (!this.isRuntime())
        {
            emptyLine.clear();

            if (!taxAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine).setRecordLabel('Taxes');
                emptyLineDataRecord.addAllFields();
                _recordBuilder.goToTopRecord();
            }
        }

        // Add Projects Dataset
        _recordBuilder.goToTopRecord();
        SetEnumerator se = projIds.getEnumerator();
        while (se.moveNext())
        {
            projectsRecord = _recordBuilder.addCalculatedRecord(#Projects);
            projectsRecord.addCalculatedField('ProjId', se.current(), 'Project ID');
        }

        // Add Billing rules Dataset
        _recordBuilder.goToTopRecord();        
        PSAContractLineItems billingRule;
        while select ContractLineNum, LineType, LineDesc, LineValue from billingRule
            where billingRule.ProjInvoiceProjId == projInvoiceJour.ProjInvoiceProjId
        {
            billingRuleRecord = _recordBuilder.addCalculatedRecord(#BillingRules);

            billingRuleRecord.addCalculatedField('BillingRule', billingRule.ContractLineNum, 'Billing rule');
            billingRuleRecord.addCalculatedField('Description', billingRule.LineDesc, 'Description');
            billingRuleRecord.addCalculatedFieldFromEnum('LineType', enumStr(PSAContractLineType), billingRule.LineType, 'Line type');
            billingRuleRecord.addCalculatedField('Value', billingRule.LineValue, 'Value');
            
            Amount invoicedAmount = PSAContractLineItemsServer::getContractLineInvoicedAmounts(billingRule.ContractLineNum);
            Amount remainingAmount = billingRule.LineValue - invoicedAmount;
            if (remainingAmount < 0)
            {
                remainingAmount = 0.0;
            }
            PSAPercent percentComplete;
            if (billingRule.LineValue == 0)
            {
                percentComplete = 0.0;
            }
            else
            {
                percentComplete = 100 * invoicedAmount / billingRule.LineValue;
            }
            billingRuleRecord.addCalculatedField('Invoiced', invoicedAmount, 'Invoiced');
            billingRuleRecord.addCalculatedField('Remaining', remainingAmount, 'Remaining');
            billingRuleRecord.addCalculatedField('PercentageComplete', percentComplete, 'Percentage complete');

            billingRuleRecord.addCalculatedFieldFromEnum('IsOnThisInvoice', enumStr(boolean), billingRules.in(billingRule.ContractLineNum), 'Is used on this invoice');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceJour</Name>
				<Source><![CDATA[
    protected ProjInvoiceJour projInvoiceJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = ProjInvoiceJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projProposalJour</Name>
				<Source><![CDATA[
    protected ProjProposalJour projProposalJour()
    {
        if (!projProposalJour)
        {
            projProposalJour = ProjProposalJour::find(this.projInvoiceJour().ProposalId);
        }

        return projProposalJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>