<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocProdJobCardDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocProdJobCardDSP extends DocDataSourceProviderSrsReporting
{
    ProdJobCardTmp prodJobCardTmp;
    DocTableFieldsMetadata extensionFieldsMetadata_ProdJobCardTmp = DocTableFieldsMetadata::construct(tableStr(ProdJobCardTmp));
       
    boolean multipleProdOrders = false;
    boolean multipleProdJobs = false;
    str placeholder_jobId, placeholder_prodId;
    str placeholder_itemId, placeholder_itemName;
    str placeholder_refNumber, placeholder_refName;
    date placeholder_startedDate, placeholder_deliveryDate;
        
    #define.JobCards('JobCards')
    #define.ProdOrder('ProdOrder')
    #define.ProdRoute('ProdRoute')
    #define.ProdRouteNotes('ProdRouteNotes')
    #define.JobCardHeader('JobCardHeader')
    #define.JobCardLines('JobCardLines')


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Production job card DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds default XML Data Source for an SRS report.
    /// </summary>
    /// <param name="_recordBuilder">
    /// Record builder of the MainData data section. Enables quick building of XML Data Source tree.
    /// </param>
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        // Standard mechanism is replaced by custom DDSP generation
        // super(_recordBuilder);    // skip standard code and fill the datasource from scratch

        ProdJobCardDP rdp = this.getSrsRdpClassRunningInstance();
        prodJobCardTmp = rdp.getAgreementFollowUpTmp();

        Set jobCardSet = new Set(Types::String);

        while select prodJobCardTmp
            group by prodJobCardTmp.JobId
        {
            jobCardSet.add(prodJobCardTmp.JobId);

            placeholder_jobId = prodJobCardTmp.JobId;
        }

        if (jobCardSet.elements() > 1)
        {
            placeholder_jobId = DocConstantDSP::MULTIPLE;
            multipleProdJobs = true;
        }

        DocXmlRecord topDataRecord = _recordBuilder.topRecord();

        SetEnumerator jobCardSetEnum = jobCardSet.getEnumerator();
        while (jobCardSetEnum.moveNext())
        {
            str currentJobId = jobCardSetEnum.current();
            this.addJobCard(currentJobId, topDataRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds custom XML structure.
    /// </summary>
    /// <param name = "_jobId">
    /// Job identification.
    /// </param>
    /// <param name = "_topDataRecord">
    /// Route record in the record tree.
    /// </param>
    protected void addJobCard(str _jobId, DocXmlRecord _topDataRecord)
    {
        DocXmlRecord jobCardDataRecord = _topDataRecord.addChildCalculatedRecord(#JobCards, 'Job cards');

        // Add JobCardHeader child single record.
        this.addJobCardHeader(_jobId, jobCardDataRecord);

        // Add JobCardLines child records.
        this.addJobCardLines(_jobId, jobCardDataRecord);

        // Add ProdOrder child single record.
        this.addProdOrder(_jobId, jobCardDataRecord);

        // Add ProdRoute child single record.
        this.addProdRoute(_jobId, jobCardDataRecord);

        // Add Extension fields defined on ProdJobCardTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        select firstonly prodJobCardTmp where prodJobCardTmp.JobId == _jobId;
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(prodJobCardTmp, jobCardDataRecord, true, extensionFieldsMetadata_ProdJobCardTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Production order data record.
    /// </summary>
    /// <param name = "_jobId">
    /// Job identification.
    /// </param>
    /// <param name = "_jobCardDataRecord">
    /// Current record in the record tree.
    /// Child record of the route record.
    /// </param>
    /// <returns>
    /// Child DocXMLRecord of the current record.
    /// </returns>
    protected DocXmlRecord addProdOrder(str _jobId, DocXmlRecord _jobCardDataRecord)
    {
        select firstonly prodJobCardTmp where prodJobCardTmp.JobId == _jobId;

        DocXmlRecord prodOrderDataRecord =
            _jobCardDataRecord.addChildRecord(prodJobCardTmp)
                              .setRecordName(#ProdOrder)           // Rename the record from 'ProdJobCardTmp' to 'ProdOrder'.
                              .setRecordLabel('Production order')  // NOTE: use literalStr("@LabelID") instead.
                              .setSingleRecord(true);              // Set the flag needed for Docentric NextGen.

        // Add Production order related fields.
        prodOrderDataRecord.addFieldGroup(tableFieldGroupStr(ProdJobCardTmp, ProdOrder_DR));

        // Set values for Production order related placeholders.
        if (placeholder_prodId != '' && placeholder_prodId != prodJobCardTmp.ProdId)
        {
            placeholder_prodId = DocConstantDSP::MULTIPLE;
            multipleProdOrders = true;
        }
        else
        {
            placeholder_prodId = prodJobCardTmp.ProdId;
        }

        placeholder_itemId = multipleProdOrders ? DocConstantDSP::MULTIPLE : prodJobCardTmp.ItemId;
        placeholder_itemName = multipleProdOrders ? DocConstantDSP::MULTIPLE : prodJobCardTmp.ItemName;
        placeholder_refNumber = multipleProdOrders ? DocConstantDSP::MULTIPLE : prodJobCardTmp.InventRefId;
        placeholder_refName = multipleProdOrders ? DocConstantDSP::MULTIPLE : prodJobCardTmp.ReferenceName;
        placeholder_startedDate = multipleProdOrders ? dateNull() : prodJobCardTmp.StUpDate;
        placeholder_deliveryDate = multipleProdOrders ? dateNull() : prodJobCardTmp.DlvDate;

        return prodOrderDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add Production order route data record.
    /// </summary>
    /// <param name = "_jobId">
    /// Job identification.
    /// </param>
    /// <param name = "_jobCardDataRecord">
    /// Current record in the record tree.
    /// </param>
    /// <returns>
    /// Child DocXMLRecord of the current record.
    /// </returns>
    protected DocXmlRecord addProdRoute(str _jobId, DocXmlRecord _jobCardDataRecord)
    {
        select firstonly prodJobCardTmp where prodJobCardTmp.JobId == _jobId;

        DocXmlRecord prodRouteDataRecord = 
            _jobCardDataRecord.addChildRecord(prodJobCardTmp)
                              .setRecordName(#ProdRoute)                 // Rename the record from 'ProdJobCardTmp' to 'ProdRoute'.
                              .setRecordLabel('Production order route')  // NOTE: use literalStr("@LabelID") instead.
                              .setSingleRecord(true);                    // Set the flag needed for Docentric NextGen.

        // Add ProdRoute related fields.
        prodRouteDataRecord.addFieldGroup(tableFieldGroupStr(ProdJobCardTmp, ProdRoute_DR));

        // Add ProdRoute notes.
        this.addProdRouteNotes(_jobId, prodRouteDataRecord);
      
        return prodRouteDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdRouteNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the Productio order route notes data record.
    /// </summary>
    /// <param name = "_jobId">
    /// Job identification.
    /// </param>
    /// <param name = "_prodRouteDataRecord">
    /// Production order route data record.
    /// </param>
    protected void addProdRouteNotes(str _jobId, DocXmlRecord _prodRouteDataRecord)
    {
        void addNoteRecord(ProdJobCardTmp _prodJobCardTmp)
        {
            DocXmlRecord prodRouteNotesDataRecord =
                _prodRouteDataRecord.addChildRecord(_prodJobCardTmp)
                                    .setRecordName(#ProdRouteNotes)                       // Rename the record from 'DocuRef' to 'ProdRouteNotes'.
                                    .setRecordLabel('Production order route notes');      // NOTE: use literalStr("@LabelID") instead.

            prodRouteNotesDataRecord.addField(fieldStr(ProdJobCardTmp, DocuRef_Name));
            prodRouteNotesDataRecord.addField(fieldStr(ProdJobCardTmp, DocuRef_Notes));
            prodRouteNotesDataRecord.addField(fieldStr(ProdJobCardTmp, DocuRef_TypeId));
        }

        boolean prodRouteNotesAdded = false;
        while select prodJobCardTmp
            group by prodJobCardTmp.DocuRef_RecId_DR
            where prodJobCardTmp.JobId == _jobId
        {
            addNoteRecord(prodJobCardTmp);
            prodRouteNotesAdded = true;
        }

        // If there is no note, add at least one empty prodRouteNotesDataRecord if DDSP is generated.
        if (!prodRouteNotesAdded && !this.isRuntime())
        {
            prodJobCardTmp.clear();
            addNoteRecord(prodJobCardTmp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobCardHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the Job card header data record.
    /// </summary>
    /// <param name = "_jobId">
    /// Job identification.
    /// </param>
    /// <param name = "_jobCardDataRecord">
    /// Current record in the record tree.
    /// </param>
    /// <returns>
    /// Child DocXMLRecord of the current record.
    /// </returns>
    protected DocXmlRecord addJobCardHeader(str _jobId, DocXmlRecord _jobCardDataRecord)
    {
        select firstonly prodJobCardTmp where prodJobCardTmp.JobId == _jobId;

        DocXmlRecord jobCardHeaderDataRecord = 
            _jobCardDataRecord.addChildRecord(prodJobCardTmp)
                              .setRecordName(#JobCardHeader)      // Rename the record from 'ProdJobCardTmp' to 'JobCardHeader'.
                              .setRecordLabel('Job card header')  // NOTE: use literalStr("@LabelID") instead.
                              .setSingleRecord(true);             // Set the flag needed for Docentric NextGen.

        // Add Job card header fields.
        jobCardHeaderDataRecord.addFieldGroup(tableFieldGroupStr(ProdJobCardTmp, JobCardHeader_DR));

        // Add fields with proper date-time format for use in a Docentric report template
        utcdatetime fromDateTime = DateTimeUtil::newDateTime(prodJobCardTmp.FromDate, prodJobCardTmp.FromTime, DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime toDateTime = DateTimeUtil::newDateTime(prodJobCardTmp.ToDate, prodJobCardTmp.ToTime, DateTimeUtil::getUserPreferredTimeZone());

        jobCardHeaderDataRecord.addCalculatedField('FromDateTime', fromDateTime);
        jobCardHeaderDataRecord.addCalculatedField('ToDateTime', toDateTime);

        // We have to remove the '*' character from the Barcode field to get the correct barcode data for use in a Docentric report template
        BarCodeString cleanBC = strRem(prodJobCardTmp.Barcode, '*');
        jobCardHeaderDataRecord.addCalculatedField('Barcode_Clean', cleanBC);

        return jobCardHeaderDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobCardLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iterates through all ProdJobCardTmp table records.
    /// </summary>
    /// <param name = "_jobId">
    /// Job identification.
    /// </param>
    /// <param name = "_jobCardDataRecord">
    /// Current record in the record tree.
    /// </param>
    protected void addJobCardLines(str _jobId, DocXmlRecord _jobCardDataRecord)
    {        
        boolean jobCardLinesAdded = false;

        while select prodJobCardTmp
            group by prodJobCardTmp.ProdJournalRoute_JournalId_DR, prodJobCardTmp.ProdJournalRoute_LineNum_DR
            where prodJobCardTmp.JobId == _jobId
        {
            this.addJobCardLine(prodJobCardTmp, _jobCardDataRecord);
            jobCardLinesAdded = true;
        }
        
        // If there is no line, add at least one empty jobCardLineDataRecord if DDSP is generated.
        if (!jobCardLinesAdded && !this.isRuntime())
        {
            prodJobCardTmp.clear();
            this.addJobCardLine(prodJobCardTmp, _jobCardDataRecord);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJobCardLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the Job card line data records.
    /// </summary>
    /// <param name = "_jobLine">
    /// Current ProdJObCardTmp table record.
    /// </param>
    /// <param name = "_jobCardDataRecord">
    /// Current record in the record tree.
    /// </param>
    /// <returns>
    /// Child DocXMLRecord of the current record.
    /// </returns>
    protected DocXmlRecord addJobCardLine(ProdJobCardTmp _jobLine, DocXmlRecord _jobCardDataRecord)
    {
        // Add here each of the records using field group, because we want to add JournalId and LineNum as well.
        DocXmlRecord jobCardLineDataRecord =
                _jobCardDataRecord.addChildRecord(_jobLine)
                                  .setRecordName(#JobCardLines)         // Rename the record from 'ProdJournalRoute' to 'JobCardLines'.
                                  .setRecordLabel('Job card lines');    // NOTE: use literalStr("@LabelID") instead.

        // Add Job card line fields
        jobCardLineDataRecord.addFieldGroup(tableFieldGroupStr(ProdJobCardTmp, ProdJournalRoute_DR));

        // Add fields with proper date-time format for use in a Docentric report template
        utcdatetime fromDateTime = DateTimeUtil::newDateTime(
                                                        _jobLine.ProdJournalRoute_TransDate,
                                                        _jobLine.ProdJournalRoute_FromTime,
                                                        DateTimeUtil::getUserPreferredTimeZone());

        utcdatetime toDateTime = DateTimeUtil::newDateTime(
                                                        _jobLine.ProdJournalRoute_TransDate,
                                                        _jobLine.ProdJournalRoute_ToTime,
                                                        DateTimeUtil::getUserPreferredTimeZone());

        jobCardLineDataRecord.addCalculatedField('FromDateTime', fromDateTime);
        jobCardLineDataRecord.addCalculatedField('ToDateTime', toDateTime);

        // Add Extension fields defined on ProdJobCardTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_jobLine, jobCardLineDataRecord, true, extensionFieldsMetadata_ProdJobCardTmp);

        return jobCardLineDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.ProdId('ProdId')
    #define.JobId('JobId')
    #define.ItemId('ItemId')
    #define.ItemName('ItemName')
    #define.RefNumber('RefNumber')
    #define.RefName('RefName')
    #define.StartedDate('StartedDate')
    #define.DeliveryDate('DeliveryDate')

    [DocPlaceholderAttribute(#ProdId, 'JC - Prod Id'),
     DocPlaceholderAttribute(#JobId, 'JC - Job Id'),
     DocPlaceholderAttribute(#ItemId, 'JC - Item Id'),
     DocPlaceholderAttribute(#ItemName, 'JC - Item Name'),
     DocPlaceholderAttribute(#RefNumber, 'JC - Reference Number'),
     DocPlaceholderAttribute(#RefName, 'JC - Reference Name'),
     DocPlaceholderAttribute(#StartedDate, 'JC - Started Date'),
     DocPlaceholderAttribute(#DeliveryDate, 'JC - Delivery Date')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ProdId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ProdId, placeholder_prodId);

        // -- Placeholder @JobId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#JobId, placeholder_jobId);

        // -- Placeholder @ItemId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemId, placeholder_itemId);

        // -- Placeholder @ItemName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ItemName, placeholder_itemName);

        // -- Placeholder @RefNumber@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefNumber, placeholder_refNumber);

        // -- Placeholder @RefName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RefName, placeholder_refName);

        // -- Placeholder @StartedDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#StartedDate, placeholder_startedDate);

        // -- Placeholder @DeliveryDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryDate, placeholder_deliveryDate);

        // Fill the Print archive contract.
        if (multipleProdOrders)
        {
            _reportRunContext.archiveContract().setProdId('');
        }
        else
        {
            _reportRunContext.archiveContract().setProdId(placeholder_prodId);
            _reportRunContext.archiveContract().setDocument(placeholder_prodId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>