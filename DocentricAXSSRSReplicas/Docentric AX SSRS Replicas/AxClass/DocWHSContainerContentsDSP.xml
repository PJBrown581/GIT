<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSContainerContentsDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocWHSContainerContentsDSP extends DocDataSourceProviderSrsReporting
{
    /* Variables used for custom placeholders */
    boolean                 isMultipleContainerIds = false;
    boolean                 isMultipleShipmentIds = false;
    boolean                 isMultipleAccountNums = false;
    boolean                 isMultipleOrderNums = false;
    boolean                 isInbound = false;
    WHSContainerId          placeholderContainerId;
    WHSShipmentId           placeholderShipmentId;
    AccountNum              placeholderAccountNum;
    str                     placeholderOrderNum;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Container contents DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method that enables you to add additional data to a report data source
    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);

        if (tableNum(InventTable) == _qbds.table() ||
            tableNum(InventLocation) == _qbds.table() || 
            tableNum(InventSite) == _qbds.table() ||
            tableNum(LogisticsPostalAddress) == _qbds.table() ||  
            tableNum(InventSiteLogisticsLocation) == _qbds.table() ||
            tableNum(WHSShipmentTable) == _qbds.table())
        {
            // Setting the flag needed for Docentric NextGen.
            _addingRecord.setSingleRecord(true);
        }

        // TODO: Add here additional fields you need that are related to WHSContainerTable or WHSContainerLine.
        //if (tableNum(WHSContainerTable) == _qbds.table())
        //{
        //    _addingRecord.addField(fieldStr(WHSContainerTable, ContainerTypeCode));
        //    WHSContainerTable containerTable = _common;
        //    WHSContainerType containerType = WHSContainerType::find(containerTable.ContainerTypeCode);
        //    _addingRecord.addCalculatedField('ContainerTypeDescription', containerType.Description);
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super (_common, _qbds);

        if (tableNum(WHSContainerTable) == _qbds.table())
        {
            WHSContainerTable whsContainerTable = _common;

            if (placeholderContainerId != whsContainerTable.ContainerId)
            {
                // Check if there is more than one Container Id.
                isMultipleContainerIds = placeholderContainerId == '' ? false : true;
                placeholderContainerId = whsContainerTable.ContainerId;
            }

            if (placeholderShipmentId != whsContainerTable.ShipmentId)
            {
                // Check if there is more than one Shipment Id.
                isMultipleShipmentIds = placeholderShipmentId == '' ? false : true;
                placeholderShipmentId = whsContainerTable.ShipmentId;
            }
        }
        else if (tableNum(WHSShipmentTable) == _qbds.table())
        {
            WHSShipmentTable whsShipmentTable = _common;

            if (placeholderAccountNum != whsShipmentTable.AccountNum)
            {
                // Check if there is more than one Account number.
                isMultipleAccountNums = placeholderAccountNum == '' ? false : true;
                placeholderAccountNum = whsShipmentTable.AccountNum;
            }

            if (placeholderOrderNum != whsShipmentTable.OrderNum)
            {
                isMultipleOrderNums = placeholderOrderNum == '' ? false : true;
                placeholderOrderNum = whsShipmentTable.OrderNum;
            }

            // Check if this is the inbound load direction (inbound = purchase, outbound = sales)
            // Note that this report is printed only for the outbound process.
            isInbound = whsShipmentTable.LoadDirection == WHSLoadDirection::Inbound ? true : false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.ContainerId('ContainerId')
    #define.ShipmentId('ShipmentId')
    #define.AccountNum('AccountNum')
    #define.OrderNum('OrderNum')

    [DocPlaceholderAttribute(#ContainerId, 'CC - Container ID'),
     DocPlaceholderAttribute(#ShipmentId,  'CC - Shipment ID'),
     DocPlaceholderAttribute(#AccountNum,  'CC - Account number'),
     DocPlaceholderAttribute(#OrderNum,  'CC - Order number')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @ContainerId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ContainerId, isMultipleContainerIds ? DocConstantDSP::MULTIPLE : placeholderContainerId);
        
        // -- Placeholder @ShipmentId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipmentId, isMultipleShipmentIds ? DocConstantDSP::MULTIPLE : placeholderShipmentId);
        
        // -- Placeholder @AccountNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#AccountNum, isMultipleAccountNums ? DocConstantDSP::MULTIPLE : placeholderAccountNum);

        // -- Placeholder @OrderNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderNum, isMultipleOrderNums ? DocConstantDSP::MULTIPLE : placeholderOrderNum);
        
        // Fill the Print archive contract.
        if (!isMultipleContainerIds)
        {
            _reportRunContext.archiveContract().setDocument(placeholderContainerId);
        }
        
        placeholderShipmentId = isMultipleShipmentIds  ? '' : placeholderShipmentId;
        _reportRunContext.archiveContract().setWHSShipmentId(placeholderShipmentId);

        if (!isInbound) // Should never happen.
        {
            placeholderAccountNum = isMultipleAccountNums ? '' : placeholderAccountNum;
            _reportRunContext.archiveContract().setCustAccount(placeholderAccountNum);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>