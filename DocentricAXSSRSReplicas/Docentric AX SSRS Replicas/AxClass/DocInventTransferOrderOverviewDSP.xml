<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocInventTransferOrderOverviewDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class DocInventTransferOrderOverviewDSP extends DocDataSourceProviderSrsReporting
{
    /* Variables for custom placeholders */
    InventTransferOrderOverviewTmp header;
    InventLocation  fromInventLocation, toInventLocation;
    boolean         multipleRecords = false;

    #define.TransferOrderHeader('TransferOrderHeader')
    #define.TransferOrderLines('TransferOrderLines')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Transfer orders DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeader</Name>
				<Source><![CDATA[
    protected DocXmlRecord addHeader(DocXmlRecordBuilder _recordBuilder, InventTransferOrderOverviewTmp _currentRecord)
    {
        // Add all fields that belong to the header only once.
        DocXmlRecord headerDataRecord = _recordBuilder.addRecord(_currentRecord);

        // Rename the record from 'InventTransferOrderOverviewTmp' to 'TransferOrderHeader'.
        headerDataRecord.setRecordName(#TransferOrderHeader);

        // Change the label of the record.
        headerDataRecord.setRecordLabel('Transfer order header');
        
        // Add the 'Header fields'.
        headerDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, TransferId));
        headerDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventLocationIdFrom));
        headerDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, LocationNameFrom));
        headerDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventLocationIdTo));
        headerDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, LocationNameTo));
        headerDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, ShipDate));
        headerDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, ReceiveDate));
        headerDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, TransferStatus));

        return headerDataRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    protected void addLine(DocXmlRecord _addingRecord, InventTransferOrderOverviewTmp _currentRecord)
    {
        DocXmlRecord    inventDimDataRecord;

        InventTransferOrderOverviewTmp inventTransferOrderOverviewTmp = _currentRecord;
        // Rename the record from 'InventTransferOrderOverviewTmp' to 'TransferOrderLines'.
        _addingRecord.setRecordName(#TransferOrderLines);
        // Change the label of the record.
        _addingRecord.setRecordLabelID(literalStr("@SYS78296"));
            
        // Add 'Line fields'.
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, ItemId));
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, ItemName));
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, QtyTransfer));
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, QtyShipped));
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, QtyShipNow));
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, LineShipDate));
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, StatusIssue));
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, Quantity));
        _addingRecord.addField(fieldStr(InventTransferOrderOverviewTmp, TransferId));

        /* InventDim fields */
        inventDimDataRecord = _addingRecord.addChildRecord(inventTransferOrderOverviewTmp).setSingleRecord(true);
        inventDimDataRecord.setRecordName('InventDim');
        inventDimDataRecord.setRecordLabelID(literalStr("@SYS53627"));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, ConfigId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventSizeId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventColorId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventStyleId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventSiteId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, WMSLocationId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventBatchId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventLocationId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventSerialId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, InventStatusId));
        inventDimDataRecord.addField(fieldStr(InventTransferOrderOverviewTmp, LicensePlateId));

        // Add Extension fields defined on InventTransferOrderOverviewTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentRecord, _addingRecord, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        // Standard mechanism is replaced by custom DDSP generation
        //super(_recordBuilder);    // skip standard code and fill the datasource from scratch

        DocXmlRecord headerDataRecord;
        DocXmlRecord lineDataRecord;

        InventTransferOrderOverviewDP   rdp = this.getSrsRdpClassRunningInstance();
        InventTransferOrderOverviewTmp  inventTransferOrderOverviewTmp = rdp.getInventTransferOrderOverviewtmp();

        InventTransferId transferId = '';
        boolean          isHeaderAdded = false;

        while select inventTransferOrderOverviewTmp
            order by inventTransferOrderOverviewTmp.TransferId
        {
            // Add header
            if (transferId != inventTransferOrderOverviewTmp.TransferId)
            {
                // Fill buffer for placeholders
                if (!transferId)
                {
                    header = inventTransferOrderOverviewTmp.data();
                    fromInventLocation = InventLocation::find(header.InventLocationIdFrom);
                    toInventLocation   = InventLocation::find(header.InventLocationIdTo);
                }
                else
                {
                    multipleRecords = true;
                }

                transferId = inventTransferOrderOverviewTmp.TransferId;
                isHeaderAdded = true;

                headerDataRecord = this.addHeader(_recordBuilder, inventTransferOrderOverviewTmp);
            }

            // Add line
            lineDataRecord = headerDataRecord.addChildRecord(inventTransferOrderOverviewTmp);
            this.addLine(lineDataRecord, inventTransferOrderOverviewTmp);
            
            _recordBuilder.goToTopRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.TransferId('TransferId')
    #define.FromWarehouse('FromWarehouse')
    #define.FromWarehouseName('FromWarehouseName')
    #define.ToWarehouse('ToWarehouse')
    #define.ToWarehouseName('ToWarehouseName')
    #define.ShipDate('ShipDate')
    #define.ReceiptDate('ReceiptDate')

    [DocPlaceholderAttribute(#TransferId, 'TO - Transfer order number'),
     DocPlaceholderAttribute(#FromWarehouse,'TO - From warehouse'),
     DocPlaceholderAttribute(#FromWarehouseName,'TO - From warehouse name'),
     DocPlaceholderAttribute(#ToWarehouse,'TO - To warehouse'),
     DocPlaceholderAttribute(#ToWarehouseName, 'TO - To warehouse name' ),
     DocPlaceholderAttribute(#ShipDate, 'TO - Ship date'),
     DocPlaceholderAttribute(#ReceiptDate, 'TO - Receipt date')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @TransferId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#TransferId, multipleRecords ? DocConstantDSP::MULTIPLE : header.TransferId);

        // -- Placeholder @FromWarehouse@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#FromWarehouse, multipleRecords ? DocConstantDSP::MULTIPLE : header.InventLocationIdFrom);

        // -- Placeholder @FromWarehouseName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#FromWarehouseName, multipleRecords ? DocConstantDSP::MULTIPLE : fromInventLocation.Name);

        // -- Placeholder @ToWarehouse@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ToWarehouse, multipleRecords? DocConstantDSP::MULTIPLE : header.InventLocationIdFrom);

        // -- Placeholder @ToWarehouseName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ToWarehousename, multipleRecords ? DocConstantDSP::MULTIPLE : toInventLocation.Name);

        // -- Placeholder @ShipDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipDate, multipleRecords ? dateNull() : header.ShipDate);

        // -- Placeholder @ReceiptDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ReceiptDate, multipleRecords ? dateNull() : header.ReceiveDate);

        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setDocument(multipleRecords ? '' : header.TransferId);

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>