<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DocWHSPickListProductionDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The DocWHSPickListProductionDSP class is a DSP class for the WHSPickListProduction report.
/// </summary>
class DocWHSPickListProductionDSP extends DocDataSourceProviderSrsReporting
{
    /* Variables used for custom placeholders */
    str         placeholderShipmentId, placeholderLoadId, placeholderOrderNumber;
    boolean     isMultipleLoadIds = false;
    boolean     isMultipleShipmentIds = false;
    boolean     isMultipleOrderNum = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Production pick list DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCustomLabels</Name>
				<Source><![CDATA[
    // This overridden method adds additional custom labels to the DDSP to use them in template designer.
    // Learn more: https://ax.docentric.com/d365-how-to-manuals/d365-miscellaneous/d365-how-to-add-missing-labels-to-multilingual-reports/
    protected void addCustomLabels(Map _labelMap)
    {
        super(_labelMap);

        //Labels in order of appearance on document from top to bottom, left to right

        // Document header
        _labelMap.insert(literalStr("@WAX1388"), 'Pick list');

        //Document lines
        _labelMap.insert(literalStr("@SYS319915"), 'Item name');
        _labelMap.insert(literalStr("@SYS23602"), 'Order number');
        _labelMap.insert(literalStr("@SYS105177"), 'Qty');

        // Pagination
        _labelMap.insert(literalStr("@SYS7426"), 'Page');
        _labelMap.insert(literalStr("@SYS92595"), 'of');
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method that enables you to add additional data to a report data source
    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);

        // Add the LineNum field in order to be used on the template for sorting purposes.
        if (tableNum(WHSWorkLine) == _qbds.table())
        {
            _addingRecord.addField(fieldStr(WHSWorkLine, LineNum));
            
            WHSWorkLine whsWorkLine = _common;
           
            // TODO: Add here additional fields related to WHSWorkLine.
        }
        else if (tableNum(WHSWorkTable) == _qbds.table())
        {
            WHSWorkTable whsWorkTable = _common;
                       
            // Setting the flag needed for Docentric NextGen.
            _addingRecord.setSingleRecord(true);

            // TODO: Add here additional fields related to WHSWorkTable.
        }
        else if (tableNum(ProdTable) == _qbds.table())
        {
            ProdTable prodTable = _common;
            // TODO: Add here additional fields related to ProdTable.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedQueryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// This is an overridden method that enables you to store some values from the currently selected query record,
    /// for example, to store values for custom placeholders into global variables.
    /// </summary>
    /// <param name = "_common">
    /// Currently selected record from one of the query data sources.
    /// </param>
    /// <param name = "_qbds">
    /// Query data source (QueryBuildDataSource) of the currently selected record.
    /// </param>
    protected void onSelectedQueryRecord(Common _common, QueryBuildDataSource _qbds)
    {
        super (_common, _qbds);

        if (tableNum(WHSWorkLine) == _qbds.table())
        {
            WHSWorkLine whsWorkLine = _common;

            // Check if there are more than one Shipment IDs.
            if (placeholderShipmentId != whsWorkLine.ShipmentId)
            {
                isMultipleShipmentIds = placeholderShipmentId == '' ? false : true;
                placeholderShipmentId = whsWorkLine.ShipmentId;
            }
           
            // Check if there are more than one Load IDs.
            if (placeholderLoadId != whsWorkLine.LoadId)
            {
                isMultipleLoadIds = placeholderLoadId == '' ? false : true;
                placeholderLoadId = whsWorkLine.LoadId;
            }

            // Display first Order number
            if (!placeholderOrderNumber)
            {
                placeholderOrderNumber = whsWorkLine.OrderNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of custom placeholders defined for the report:
    #define.ShipmentId('ShipmentId')
    #define.LoadId('LoadId')
    #define.OrderNum('OrderNum')

    [DocPlaceholderAttribute(#LoadId, 'PLP - Load ID'),
     DocPlaceholderAttribute(#ShipmentId, 'PLP - Shipment ID'),
     DocPlaceholderAttribute(#OrderNum, 'PLP - Order number')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);

        // Replace custom placeholders:
        // -- Placeholder @ShipmentId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ShipmentId, isMultipleShipmentIds ? DocConstantDSP::MULTIPLE : placeholderShipmentId);

        // -- Placeholder @LoadId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#LoadId, isMultipleLoadIds ? DocConstantDSP::MULTIPLE : placeholderLoadId);
        
        // -- Placeholder @OrderNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderNum, isMultipleShipmentIds || isMultipleLoadIds ? DocConstantDSP::MULTIPLE : placeholderOrderNumber);

        // Fill the Print archive contract.
        if (!isMultipleShipmentIds)
        {
            _reportRunContext.archiveContract().setDocument(placeholderOrderNumber);
            _reportRunContext.archiveContract().setWHSShipmentId(placeholderShipmentId);
        }

        if (!isMultipleLoadIds)
        {
            _reportRunContext.archiveContract().setDocument(placeholderOrderNumber);
            _reportRunContext.archiveContract().setWHSLoadId(placeholderLoadId);
        }

        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>