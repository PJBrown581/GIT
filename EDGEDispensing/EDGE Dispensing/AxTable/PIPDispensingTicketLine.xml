<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPDispensingTicketLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PIPDispensingTicketLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSign</Name>
				<Source><![CDATA[
    private boolean checkSign(FieldId _fieldId)
    {
        boolean ret = true;
    
        if (this.(_fieldId) && sign(this.(_fieldId)) != sign(this.dispensingTicket().prodJournalBOM().BOMProposal))
        {
            ret = checkFailed(strFmt("@PIP911", fieldId2pname(tableNum(PIPDispensingTicketLine), _fieldId), fieldPName(ProdJournalBOM, BOMProposal)));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispensingTicket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the related record from the <c>PIPDispensingTicket</c> table.
    /// </summary>
    /// <param name="_forUpdate">
    ///    Determines if the record should be locked for updating; optional.
    /// </param>
    /// <returns>
    ///    The related record in the <c>PIPDispensingTicket</c> table.
    /// </returns>
    public PIPDispensingTicket dispensingTicket(boolean _forUpdate = false)
    {
        return PIPDispensingTicket::find(this.PIPDispensingTicket, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    
        this.IncludeInValidation = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.updateDispensedQuantities();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.updateDispensedQuantities();
    
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDispensedQuantities</Name>
				<Source><![CDATA[
    private void updateDispensedQuantities()
    {
        PIPDispensingTicketLine ticketLineOrig = this.orig();

        // If the user changed the Net quantity--which is the key here, then back compute the gross quantity to match; otherwise compute net from gross/tare
        if (this.DispensedQty != ticketLineOrig.DispensedQty)
        {
            this.DispensedGrossQty = this.DispensedQty + this.DispensedTareQty;
        }
        else
        {
            this.DispensedQty = this.DispensedGrossQty - this.DispensedTareQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
    
        ret = super(_fieldIdToCheck);
    
        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PIPDispensingTicketLine, DispensedQty):
                case fieldNum(PIPDispensingTicketLine, DispensedCWQty):
                case fieldNum(PIPDispensingTicketLine, DispensedTareQty):
                case fieldNum(PIPDispensingTicketLine, DispensedGrossQty):
                    ret = this.checkSign(_fieldIdToCheck);
                    break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();
    
        if (ret && (this.DispensedGrossQty || this.DispensedTareQty))
        {
            if (this.DispensedGrossQty < this.DispensedTareQty)
            {
                ret = checkFailed("@PIP934");
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWeightDataFromFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets weight data from the next file in the incoming weights folder.
    /// </summary>
    /// <returns>
    ///    A container with the weight values from the next file or a null container if there was no
    ///    such file or the data could not be parsed. The container holds up to 2 values:
    ///    <list type="bullet">
    ///       <item><description>A string with the scale ID that must be listed in the Test Instrument table.</description></item>
    ///       <item><description>A real value representing the quantity/weight.</description></item>
    ///    </list>
    /// </returns>
    /// <remarks>
    ///    It is up to the caller to ensure the weight value matches a particular unit or purpose.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///    Thrown if there is no incoming weight folder defined in the production control parameters.
    /// </exception>
    public static container getWeightDataFromFile()
    {
        ProdParameters  parameters = ProdParameters::find();
    
        str                     weightFileName;
        TextStreamIo            textio;
        container               data;
        container               results = conNull();
    
        System.Array            files;
        int                     fileCount;
        InventTestInstrumentId  scaleId;
    
        #File
        #define.InstrumentIdPos(1)
        #define.WeightValuePos(2)
        #define.WeightUnitPos(3)
    
        if (!parameters.PIPWeightInputFolder)
        {
            throw error("@PIP935");
        }
    
        new InteropPermission(InteropKind::ClrInterop).assert();
    
        if (System.IO.Directory::Exists(parameters.PIPWeightInputFolder))
        {
            files = System.IO.Directory::GetFiles(parameters.PIPWeightInputFolder, #AllFilesName, System.IO.SearchOption::TopDirectoryOnly);
            fileCount = files.Length;
            if (fileCount > 0)
            {
                weightFileName = files.GetValue(0);
            }
        }
    
        CodeAccessPermission::revertAssert();
    
        if (weightFileName)
        {
            new FileIOPermission(weightFileName, #io_read).assert();
    
            System.IO.Stream readStream = new System.IO.FileStream(weightFileName, System.IO.FileMode::Open);
            try 
            {
                textio = TextStreamIo::constructForRead(readStream);
                data = textio.read();
    
                if (conLen(data) < #WeightValuePos || conLen(data) > #WeightUnitPos || str2num(conPeek(data, #WeightValuePos)) == 0)
                {
                    warning(strFmt("@PIP936", weightFileName));
                }
                else
                {
                    scaleId = conPeek(data, #InstrumentIdPos);
                    if (PIPScalesDevice::exist(scaleId))
                    {
                        results = [scaleId, str2num(conPeek(data, #WeightValuePos)), conPeek(data, #WeightUnitPos)];
                    }
                    else
                    {
                        error(strFmt("@PIP937", scaleId));
                    }
                }
            }
            finally
            {
                readStream.Close();

                CodeAccessPermission::revertAssert();
                
                new FileIOPermission(weightFileName, #io_write).assert();
                WinAPIServer::deleteFile(weightFileName);
                CodeAccessPermission::revertAssert();
            }
        }
        else
        {
            warning("@PIP938");
        }
    
        return results;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PIPDispensing</ConfigurationKey>
	<DeveloperDocumentation>@PIP896</DeveloperDocumentation>
	<Label>@PIP895</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>PIPDispensingTicket</TitleField1>
	<TitleField2>IncludeInValidation</TitleField2>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeInValidation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispensedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispensedCWQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Control</Name>
			<Label>@SYS25627</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeInValidation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ScalesDeviceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS53631</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PIPDispensingTicket</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantities</Name>
			<Label>@PIP901</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispensedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispensedCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispensedGrossQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispensedTareQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>User</Name>
			<Label>@SYS16181</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>modifiedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>modifiedBy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DispensedCWQty</Name>
			<ExtendedDataType>PIPDispensedCWQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DispensedGrossQty</Name>
			<ExtendedDataType>PIPDispensedGrossQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DispensedQty</Name>
			<ExtendedDataType>PIPDispensedQty</ExtendedDataType>
			<Label>@PIP932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DispensedTareQty</Name>
			<ExtendedDataType>PIPDispensedTareQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeInValidation</Name>
			<ExtendedDataType>PIPIncludeInValidation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ScalesDeviceId</Name>
			<ExtendedDataType>PIPScalesDeviceId</ExtendedDataType>
			<Label>@PIP933</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PIPDispensingTicket</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTestInstrumentId</Name>
			<ExtendedDataType>InventTestInstrumentId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DispensingTicketIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PIPDispensingTicket</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPDispensingTicket</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PIPDispensingTicket</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PIPDispensingTicket</Name>
					<Field>PIPDispensingTicket</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PIPScalesDevice</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>PIPScalesDevice</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ScalesDeviceId</Name>
					<SourceEDT>PIPScalesDeviceId</SourceEDT>
					<Field>ScalesDeviceId</Field>
					<RelatedField>DeviceId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>