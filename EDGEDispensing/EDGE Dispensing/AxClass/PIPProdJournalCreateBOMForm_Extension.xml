<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdJournalCreateBOMForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(ProdJournalCreateBOM))]
public final class PIPProdJournalCreateBOMForm_Extension
{
    private static readonly DictClass extClass = new DictClass(classNum(PIPProdJournalCreateBOMForm_Extension));
    
    private UnknownNoYes isDispensingJournal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPIPIsDispensingJournalForm</Name>
				<Source><![CDATA[
    // Note that this method should be called 'parmPIPIsDispensingJournal'; however, the current X++ compiler complains that this is a duplicate method name -- but the other method of the same name is in the table extension class 'PIPProdJournalCreateBOM_Extension'.
    public UnknownNoYes parmPIPIsDispensingJournalForm(UnknownNoYes _isDispensingJournal = isDispensingJournal)
    {
        isDispensingJournal = _isDispensingJournal;

        return isDispensingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProdJournalNameIdBOM_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(ProdJournalCreateBOM, ctrlProdJournalNameIdBOM), FormControlEventType::Lookup)]
    public void ctrlProdJournalNameIdBOM_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        if (isDispensingJournal != UnknownNoYes::Unknown)
        {
            ProdJournalName::pipLookupJournalName(sender, ProdJournalType::Picklist, isDispensingJournal == UnknownNoYes::Yes);

            var ce = e as FormControlCancelableSuperEventArgs;
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlProdJournalNameIdBOM_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(ProdJournalCreateBOM, ctrlProdJournalNameIdBOM), FormControlEventType::Validated)]
    public void ctrlProdJournalNameIdBOM_OnValidated(FormControl sender, FormControlEventArgs e)
    {
        ProdJournalName prodJournalName;

        if (#PIPDispensingEnabled && isDispensingJournal != UnknownNoYes::Unknown)
        {
            FormStringControl nameIdControl = sender as FormStringControl;
            prodJournalName = prodJournalName::find(nameIdControl.text());
            if (prodJournalName.PIPIsDispensingJournal != (isDispensingJournal == UnknownNoYes::Yes))
            {
                if (isDispensingJournal == UnknownNoYes::Yes)
                {
                    checkFailed(strFmt("@PIP943", nameIdControl.text()));
                }
                else
                {
                    checkFailed(strFmt("@PIP944", nameIdControl.text()));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdJournalCreateBOM_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(ProdJournalCreateBOM), formMethodStr(ProdJournalCreateBOM, init))]
    public static void ProdJournalCreateBOM_Post_init(XppPrePostArgs _args)
    {
        extClass.callStatic(methodStr(PIPProdJournalCreateBOMForm_Extension, pipDetermineShowNameId), _args.getThis());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDetermineShowNameId</Name>
				<Source><![CDATA[
    private void pipDetermineShowNameId()
    {
        if (prodJournalNameIdBOM
            && isDispensingJournal != UnknownNoYes::Unknown
            && ProdJournalName::find(prodJournalNameIdBOM).PIPIsDispensingJournal != (isDispensingJournal == UnknownNoYes::Yes))
        {
            ctrlProdJournalNameIdBOM.text('');
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>