<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPDispProdJournalFormTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdJournalFormTable))]
public final class PIPDispProdJournalFormTable_Extension
{
    private FormControl dispensingButton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    public void enableFieldsActive()
    {
        next enableFieldsActive();

        if (this.journalTable_ds())
        {
            boolean showDispensingFields = this.journalTable().JournalType == any2int(ProdJournalType::Picklist) && ProdParametersDim::pipAnyDispensingEnabled();
    
            this.journalTable_ds().object(fieldNum(ProdJournalTable, PIPIsDispensingJournal)).visible(showDispensingFields);
            if (showDispensingFields)
            {
                this.journalTable_ds().object(fieldNum(ProdJournalTable, PIPIsDispensingJournal)).enabled(!ProdJournalBOM::pipExistForJournalId(this.journalTable().JournalId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPIPDispensingButton</Name>
				<Source><![CDATA[
    public FormControl parmPIPDispensingButton(FormControl _dispensingButton = dispensingButton)
    {
        dispensingButton = _dispensingButton;
    
        return dispensingButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDatasourceExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes logic at the beginning of the form data source <c>executeQuery</c> method.
    /// </summary>
    private void pipDatasourceExecuteQueryPre()
    {
        if (#PIPDispensingEnabled
            && this.formRun().args().parmEnumType() == enumNum(ProdJournalType)
            && this.formRun().args().parmEnum() == enum2int(ProdJournalType::Picklist))
        {
            SysQuery::findOrCreateRange(this.journalTable_ds().queryBuildDataSource(), fieldNum(ProdJournalTable, PIPIsDispensingJournal)).value(queryValue(this.pipIsDispensingJournal()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDispEnableButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disable buttons when the active data source changes.
    /// </summary>
    private void pipDispEnableButtonsActive()
    {
        ProdJournalTable prodJournalTable = this.journalTable() as ProdJournalTable;
        if (dispensingButton && dispensingButton.visible())
        {
            dispensingButton.enabled(prodJournalTable.PIPIsDispensingJournal && prodJournalTable.pipHasDispensingControlledItem());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsDispensingJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a value indicating if the current journal is for a dispensing ticket.
    /// </summary>
    /// <returns>
    ///     true if the current journal is for a dispensing ticket; otherwise, false.
    /// </returns>
    public PIPIsDispensingJournal pipIsDispensingJournal()
    {
        return #PIPDispensingEnabled
            && this.formRun().args().menuItemName() == menuitemDisplayStr(PIPDispensingJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDispOnInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes logic on form initialization.
    /// </summary>
    private void pipDispOnInit()
    {
        if (dispensingButton)
        {
            dispensingButton.visible((!journalTypeFixed || this.journalTypeId() == ProdJournalType::Picklist) && ProdParametersDim::pipAnyDispensingEnabled());
        }
    
        if (this.formRun().args().menuItemName() == menuitemDisplayStr(PIPDispensingJournal))
        {
            this.formRun().design().caption("@PIP3002");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsJournalTypeFixed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the journal type has been fixed by the caller such the journal form may only create or show journals of the given type.
    /// </summary>
    /// <returns>
    ///    true if the journal type has been fixed; otherwise, false.
    /// </returns>
    public boolean pipIsJournalTypeFixed()
    {
        return journalTypeFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDatasourceExecuteQueryPrePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProdJournalFormTable), methodStr(ProdJournalFormTable, datasourceExecuteQueryPre))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="datasourceExecuteQueryPre method"/> on this class.
    /// </summary>
    /// <param name="_args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void pipDatasourceExecuteQueryPrePost(XppPrePostArgs _args)
    {
        ProdJournalFormTable prodJournalFormTable = _args.getThis();
    
        prodJournalFormTable.pipDatasourceExecuteQueryPre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDispEnableButtonsActivePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProdJournalFormTable), methodStr(ProdJournalFormTable, enableButtonsActive))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="enableButtonsActive method"/> on this class.
    /// </summary>
    /// <param name="_args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void pipDispEnableButtonsActivePost(XppPrePostArgs _args)
    {
        ProdJournalFormTable prodJournalFormTable = _args.getThis();
    
        prodJournalFormTable.pipDispEnableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDispFormInitPostPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProdJournalFormTable), methodStr(ProdJournalFormTable, formInitPost))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="formInitPost method"/> on this class.
    /// </summary>
    /// <param name="_args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void pipDispFormInitPostPost(XppPrePostArgs _args)
    {
        ProdJournalFormTable prodJournalFormTable = _args.getThis();
    
        prodJournalFormTable.pipDispOnInit();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>