<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPDispensingEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPDispensingEventHandlers</c> class provides table method event handlers for
///    dispensing processing.
/// </summary>
public class PIPDispensingEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomInitFromInventTablePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(BOM), tableMethodStr(BOM, initFromInventTable))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <c>BOM</c> table <see cref="BOM.initFromInventTable method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void bomInitFromInventTablePost(XppPrePostArgs _prePostArgs)
    {
        BOM                 bom         = _prePostArgs.getThis();
        InventTable         inventTable = _prePostArgs.getArg('_inventTable');
    
        PIPDispensingEventHandlers::initBOMFromItem(bom, inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomModifiedFieldPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes additional logic in the post-method event for the <c>BOM</c> table <see cref="BOM.modifiedField method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    [PostHandlerFor(tableStr(BOM), tableMethodStr(BOM, modifiedField))]
    public static void bomModifiedFieldPost(XppPrePostArgs _args)
    {
        BOM     bom     = _args.getThis();
        FieldId fieldId = _args.getArg("_fieldId");

        switch (fieldId)
        {
            case fieldNum(BOM, ItemId):
                if (bom.ItemId)
                {
                    PIPDispensingEventHandlers::initBOMFromItem(bom, bom.inventTable());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMFromItem</Name>
				<Source><![CDATA[
    private static void initBOMFromItem(BOM _bom, InventTable _inventTable)
    {
        if (#PIPDispensingEnabled)
        {
            ProdParametersDim prodParametersDim = ProdParametersDim::find(_bom.InventDimId);
            
            _bom.PIPAllowOverDispensing = prodParametersDim.PIPAllowOverDispensing;
            _bom.PIPOverDispensePct     = _inventTable.PIPOverDispensePct;
            _bom.PIPUnderDispensePct    = _inventTable.PIPUnderDispensePct;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableModifiedFieldValuePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(InventTable), tableMethodStr(InventTable, modifiedField))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <c>InventTable</c> table <see cref="InventTable.modifiedFieldValue method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void inventTableModifiedFieldValuePost(XppPrePostArgs _prePostArgs)
    {
        InventTable inventTable = _prePostArgs.getThis();
        FieldId     fieldId     = _prePostArgs.getArg('_fieldId');
    
        switch (fieldId)
        {
            case fieldNum(InventTable, PIPDispensingControl):
                if (!inventTable.PIPDispensingControl)
                {
                    inventTable.PIPAuthorizedPersonnel = NoYes::No;
                    inventTable.PIPOverDispensePct = 0;
                    inventTable.PIPUnderDispensePct = 0;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalBOMValidateFieldValuePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(ProdJournalBOM), tableMethodStr(ProdJournalBOM, validateFieldValue))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <c>ProdJournalBOM</c> table <see cref="ProdJournalBOM.validateFieldValue method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodJournalBOMValidateFieldValuePost(XppPrePostArgs _prePostArgs)
    {
        ProdJournalBOM      prodJournalBOM  = _prePostArgs.getThis();
        FieldName           fieldName       = _prePostArgs.getArg('_fieldName');
        boolean             ret             = _prePostArgs.getReturnValue();
        ProdJournalTable    prodJournalTable;
    
        if (ret && #PIPDispensingEnabled)
        {
            switch (fieldName)
            {
                case fieldStr(prodJournalBOM, ProdId):
                    prodJournalTable = ProdJournalTable::find(prodJournalBOM.JournalId);
                    if (!prodJournalTable.ProdId && prodJournalTable.PIPIsDispensingJournal && !ProdTable::find(prodJournalBOM.ProdId).pipIsDispensingEnabled())
                    {
                        ret = checkFailed(strFmt("@PIP906", prodJournalBOM.ProdId));
                    }
                    break;
    
                case fieldStr(ProdJournalBOM, InventTransId):
                    ret = prodJournalBOM.pipCheckDispensingItem(prodJournalBOM.prodBOM().inventTable());
                    break;
    
                case fieldStr(ProdJournalBOM, ItemId):
                    ret = prodJournalBOM.pipCheckDispensingItem();
                    break;
            }
        }
    
        _prePostArgs.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalBOMValidateWritePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(ProdJournalBOM), tableMethodStr(ProdJournalBOM, validateWrite))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <c>ProdJournalBOM</c> table <see cref="ProdJournalBOM.validateWrite method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodJournalBOMValidateWritePost(XppPrePostArgs _prePostArgs)
    {
        ProdJournalBOM  prodJournalBOM  = _prePostArgs.getThis();
        boolean         ret             = _prePostArgs.getReturnValue();
    
        ret = ret && prodJournalBOM.pipCheckDispensingItem();
    
        if (ret && prodJournalBOM.PIPDispensedQty)
        {
            if (sign(prodJournalBOM.PIPDispensedQty) != sign(prodJournalBOM.BOMConsump))
            {
                ret = checkFailed(strFmt("@PIP911", fieldPName(ProdJournalBOM, PIPDispensedQty), fieldPName(ProdJournalBOM, BOMConsump)));
            }
            else if (abs(prodJournalBOM.PIPDispensedQty) > abs(prodJournalBOM.BOMConsump))
            {
                ret = checkFailed(strFmt("@PIP912", fieldPName(ProdJournalBOM, PIPDispensedQty), fieldPName(ProdJournalBOM, BOMConsump)));
            }
        }
    
        if (ret && prodJournalBOM.PIPDispensedCWQty)
        {
            if (sign(prodJournalBOM.PIPDispensedCWQty) != sign(prodJournalBOM.PdsCWInventConsump))
            {
                ret = checkFailed(strFmt("@PIP911", fieldPName(ProdJournalBOM, PIPDispensedCWQty), fieldPName(ProdJournalBOM, PdsCWInventConsump)));
            }
            else if (abs(prodJournalBOM.PIPDispensedCWQty) > abs(prodJournalBOM.PdsCWInventConsump))
            {
                ret = checkFailed(strFmt("@PIP912", fieldPName(ProdJournalBOM, PIPDispensedCWQty), fieldPName(ProdJournalBOM, PdsCWInventConsump)));
            }
        }
    
        _prePostArgs.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalTableDeletePre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(ProdJournalTable), tableMethodStr(ProdJournalTable, delete))]
    /// <summary>
    ///    Executes additional logic in the pre-method event for the <c>ProdJournalTable</c> table <see cref="ProdJournalTable.delete method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodJournalTableDeletePre(XppPrePostArgs _prePostArgs)
    {
        ProdJournalTable prodJournalTable = _prePostArgs.getThis();
    
        if (prodJournalTable.pipIsRecordSigned())
        {
            throw error(strFmt("@PIP951", prodJournalTable.JournalId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalTableInsertPre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(ProdJournalTable), tableMethodStr(ProdJournalTable, insert))]
    /// <summary>
    ///    Executes additional logic in the pre-method event for the <c>ProdJournalTable</c> table <see cref="ProdJournalTable.insert method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodJournalTableInsertPre(XppPrePostArgs _prePostArgs)
    {
        ProdJournalTable prodJournalTable = _prePostArgs.getThis();
    
        if (#PIPDispensingEnabled && !prodJournalTable.PIPProdGenerationSource && prodJournalTable.ProdId)
        {
            prodJournalTable.PIPProdGenerationSource = ProdTable::find(prodJournalTable.ProdId).ProdStatus == ProdStatus::Released ? PIPProdGenerationSource::Released : PIPProdGenerationSource::StartedUp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalTransDeletePre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(ProdJournalBOM), tableMethodStr(ProdJournalBOM, delete)), PreHandlerFor(tableStr(ProdJournalProd), tableMethodStr(ProdJournalProd, delete)), PreHandlerFor(tableStr(ProdJournalRoute), tableMethodStr(ProdJournalRoute, delete))]
    /// <summary>
    ///    Executes additional logic in the pre-method event for any of the production journal line table delete method.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodJournalTransDeletePre(XppPrePostArgs _prePostArgs)
    {
        JournalTransMap journalTransMap = _prePostArgs.getThis();
    
        if (SIGSignatureLog::pipExistRecord(JournalTransMap))
        {
            throw error(strFmt("@PIP957", journalTransMap.JournalId, journalTransMap.LineNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodParametersDimModifiedFieldPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(ProdParametersDim), tableMethodStr(ProdParametersDim, modifiedField))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <c>ProdParametersDim</c> table <see cref="ProdParametersDim.modifiedField method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodParametersDimModifiedFieldPost(XppPrePostArgs _prePostArgs)
    {
        ProdParametersDim   prodParametersDim   = _prePostArgs.getThis();
        FieldId             fieldId             = _prePostArgs.getArg('_fieldId');
    
        switch (fieldId)
        {
            case fieldNum(ProdParametersDim, PIPDispensingEnabled):
                if (!prodParametersDim.PIPDispensingEnabled)
                {
                    prodParametersDim.PIPAllowOverDispensing = NoYes::No;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodParmReleaseInitParmDefaultPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(ProdParmRelease), tableMethodStr(ProdParmRelease, initParmDefault))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <c>ProdParmRelease</c> table <see cref="ProdParmRelease.initParmDefault method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodParmReleaseInitParmDefaultPost(XppPrePostArgs _prePostArgs)
    {
        ProdParmRelease prodParmRelease = _prePostArgs.getThis();
        ProdParameters  prodParameters  = ProdParameters::find();
    
        prodParmRelease.PIPEndPicklist     = NoYes::No;
        prodParmRelease.PIPPostNowBOM      = NoYes::Yes;
        prodParmRelease.PIPDrawNegative    = prodParameters.BOMJournalDrawNegative;
        prodParmRelease.PIPReducePhysical  = prodParameters.BOMJournalReducePhysical;
        prodParmRelease.PIPBOMAutoConsump  = BOMAutoConsump::FlushingPrincip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodParmReleaseInsertPre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(ProdParmRelease), tableMethodStr(ProdParmRelease, insert))]
    /// <summary>
    ///    Executes additional logic in the pre-method event for the <c>ProdParmRelease</c> table <see cref="ProdParmRelease.insert method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodParmReleaseInsertPre(XppPrePostArgs _prePostArgs)
    {
        ProdParmRelease prodParmRelease = _prePostArgs.getThis();
    
        prodParmRelease.pipSetDispensingDependentFields();
        prodParmRelease.pipSetPotencyDepFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodProdParmStartUpInsertPre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(ProdParmStartUp), tableMethodStr(ProdParmStartUp, insert))]
    /// <summary>
    ///    Executes additional logic in the pre-method event for the <c>ProdParmStartUp</c> table <see cref="ProdParmStartUp.insert method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void prodProdParmStartUpInsertPre(XppPrePostArgs _prePostArgs)
    {
        ProdParmStartUp prodParmStartUp = _prePostArgs.getThis();
    
        prodParmStartUp.pipSetDispensingDependentFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysUserInfoDeletePost</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(SysUserInfo), tableMethodStr(SysUserInfo, delete))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <c>SysUserInfo</c> table <see cref="SysUserInfo.delete method"/>.
    /// </summary>
    /// <param name="_prePostArgs">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void sysUserInfoDeletePost(XppPrePostArgs _prePostArgs)
    {
        SysUserInfo sysUserInfo = _prePostArgs.getThis();
        PIPUserInfo pipUserInfo;
    
        if (#PIPDispensingEnabled)
        {
            ttsBegin;
            delete_from pipUserInfo where pipUserInfo.UserId == sysUserInfo.Id;
            ttsCommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>