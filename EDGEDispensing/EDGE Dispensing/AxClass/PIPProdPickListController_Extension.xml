<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdPickListController_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdPickListController))]
public final class PIPProdPickListController_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected boolean initFromArgs()
    {
        boolean ret = next initFromArgs();

        Args args = this.parmArgs();

        if (!ret)
        {
            if (args.caller() is ProdUpdRelease)
            {
                Query query = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

                QueryBuildDataSource queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(ProdJournalBOM));
                QueryBuildRange queryBuildRangeProd = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(ProdJournalBOM,ProdId));
                QueryBuildRange queryBuildRangeJournal = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(ProdJournalBOM,JournalId));
            
                ProdUpdRelease prodUpdRelease = args.caller();
                ProdParmRelease prodParmRelease = prodUpdRelease.parmParmBuffer();
    
                queryBuildRangeProd.value(prodParmRelease.ProdId);
                queryBuildRangeJournal.value(prodUpdRelease.parmPIPPrintJournalId());
                this.parmShowDialog(!args.parmEnum());

                ret = true;
            }
            else if (args.dataset() == tableNum(ProdParmRelease))
            {
                ProdParmRelease prodParmRelease = args.record();
    
                if (prodParmRelease.PIPSetupPrintPickList)
                {
                    this.getPackedParameters(prodParmRelease.PIPSetupPrintPickList);
                }
    
                if (args.menuItemName() == menuitemOutputStr(ProdPicklist))
                {
                    this.parmShowDialog(false);
                }

                ret = true;
            }
        }

        if (args && args.menuItemName() == menuItemOutputStr(ProdPicklist) && #PIPDispensingEnabled)
        {
            this.parmReportContract().parmReportName(ssrsReportStr(PIPProdPicklist, Report));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        next preRunModifyContract();

        if (this.parmArgs() && this.parmArgs().dataset() && this.parmArgs().dataset() == tableNum(ProdParmRelease))
        {
            ProdPicklistContract contract = this.parmReportContract().parmRdpContract() as ProdPicklistContract;
            container savedParms;

            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmShowTransactions());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmUseDeliveryLayout());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmUseQuantity());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewConfigId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventBatchId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventColorId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventLocationId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventSerialId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventSiteId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventSizeId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewWMSLocationId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewWMSPalletId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, this.parmReportContract().parmPrintSettings().pack());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmInventDimViewContract().parmViewInventStyleId());
            savedParms = conIns(savedParms, conLen(savedParms)+1, contract.parmShowQtyOnHand());
    
            ProdParmRelease prodParmRelease = this.parmArgs().record();
            prodParmRelease.PIPSetupPrintPickList = savedParms;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>