<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPBOM_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(BOM))]
public final class PIPBOM_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipCheckDispensingTolerances</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the given dispense quantity is within the dispensing tolerances for the item.
    /// </summary>
    /// <param name="_proposal">
    ///    The proposed quantity to compare against.
    /// </param>
    /// <param name="_dispensed">
    ///    The dispensed quantity to check the tolerance of.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimensions to use when determine the production parameters; optional.
    /// </param>
    /// <returns>
    ///    true if the dispensed quantity is within the tolerance of the proposed quantity allowed for the item.
    /// </returns>
    public boolean pipCheckDispensingTolerances(Qty _proposal, Qty _dispensed, InventDimId _inventDimId = this.InventDimId)
    {
        real    pct;
        boolean ret = true;
        
        #define.PctBasis(100)
        
        if (!this.pipIsDispensingControlledItem(_inventDimId))
        {
            return true;
        }
        
        if (_proposal > 0)
        {
            if (!_dispensed)
            {
                ret = checkFailed("@PIP928");
            }
            else if (_dispensed > _proposal)
            {
                if (this.PIPAllowOverDispensing)
                {
                    pct = (_dispensed - _proposal) / _proposal * #PctBasis;
                    if (pct > this.PIPOverDispensePct)
                    {
                        ret = checkFailed(strFmt("@PIP929", pct, this.PIPOverDispensePct));
                    }
                }
                else
                {
                    ret = checkFailed("@PIP930");
                }
            }
            else if (_dispensed < _proposal)
            {
                pct = (_proposal - _dispensed) / _proposal * #PctBasis;
                if (pct > this.PIPUnderDispensePct)
                {
                    ret = checkFailed(strFmt("@PIP931", pct, this.PIPUnderDispensePct));
                }
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsDispensingControlledItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the item on this BOM line is a dispensed controlled item.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The inventory dimensions to use when determine the production parameters; optional.
    /// </param>
    /// <returns>
    ///    true if the item is a dispense controlled item; otherwise, false.
    /// </returns>
    public boolean pipIsDispensingControlledItem(InventDimId _inventDimId = this.InventDimId)
    {
        return #PIPDispensingEnabled
            && ProdParametersDim::find(_inventDimId).PIPDispensingEnabled
            && this.inventTable().PIPDispensingControl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>