<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPPotencyActiveCacheEntry</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPPotencyActiveCacheEntry</c> class contains cached inventory and potency active quantities
///    for a specific inventory summary and inventory dimension combination.
/// </summary>
public class PIPPotencyActiveCacheEntry implements SysPackable
{
    PDSActiveQty        activeQty;
    InventQty           inventQty;
    PDSBaseValueNum     baseValue;
    PDSBaseAttributeId  baseAttributeId;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        activeQty,
        inventQty,
        baseValue,
        baseAttributeId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activeQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the potent active quantity.
    /// </summary>
    /// <returns>
    ///    The potent active quantity.
    /// </returns>
    public PDSActiveQty activeQty()
    {
        return activeQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAttributeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the potency base attribute ID for the associated item.
    /// </summary>
    /// <returns>
    ///    The potency base aqttribute ID.
    /// </returns>
    public PDSBaseAttributeId baseAttributeId()
    {
        return baseAttributeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the potency base attribute value.
    /// </summary>
    /// <returns>
    ///    The potency base attribute value.
    /// </returns>
    public PDSBaseValueNum baseValue()
    {
        return baseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the inventory quantity.
    /// </summary>
    /// <returns>
    ///    The inventory quantity.
    /// </returns>
    public InventQty qty()
    {
        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the internal values for the cache entry.
    /// </summary>
    /// <param name="_inventQty">
    ///    The inventory quantity.
    /// </param>
    /// <param name="_activeQty">
    ///    The potency active quantity.
    /// </param>
    /// <param name="_baseAttributeId">
    ///    The potency base attribute ID.
    /// </param>
    /// <param name="_baseValue">
    ///    The potency base attribute value.
    /// </param>
    private void setValues(
        InventQty           _inventQty,
        PDSActiveQty        _activeQty,
        PDSBaseAttributeId  _baseAttributeId,
        PDSBaseValueNum     _baseValue)
    {
        inventQty       = _inventQty;
        activeQty       = _activeQty;
        baseAttributeId = _baseAttributeId;
        baseValue       = _baseValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
    
            default :
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeAggregateActiveQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the aggregate active ingredient quantity.
    /// </summary>
    /// <param name="_inventTable">
    ///    The record in the <c>InventTable</c> table for the item.
    /// </param>
    /// <param name="_inventDimCriteria">
    ///    The record in the <c>InventDim</c> table for the dimension values to put in the query.
    /// </param>
    /// <returns>
    ///    The aggregated active quantity.
    /// </returns>
    private static PDSActiveQty computeAggregateActiveQty(InventTable _inventTable, InventDim _inventDimCriteria)
    {
        QueryRun                queryRun;
        Query                   query;
        QueryBuildDataSource    dsInventSum;
        QueryBuildDataSource    dsInventDim;
        QueryBuildDataSource    dsBatchAttributes;
    
        InventDimParm           inventDimParm;
        InventDimParm           groupByBatch;
        InventSum               inventSum;
        PdsBatchAttributes      batchAttributes;
    
        PDSActiveQty            totalActive;
    
        inventDimParm = _inventDimCriteria.toDimParm();
        inventDimParm.ItemIdFlag = NoYes::Yes;
    
        groupByBatch.ItemIdFlag = NoYes::Yes;
        groupByBatch.InventBatchIdFlag = NoYes::Yes;
    
        query = InventSum::newQuery(null, _inventTable.ItemId, _inventDimCriteria, inventDimParm, groupByBatch);
        dsInventSum = query.dataSourceTable(tableNum(InventSum));
        dsInventDim = query.dataSourceTable(tableNum(InventDim));
        dsBatchAttributes = dsInventDim.addDataSource(tableNum(PdsBatchAttributes));
        dsBatchAttributes.fetchMode(QueryFetchMode::One2One);
        dsBatchAttributes.addGroupByField(fieldNum(PdsBatchAttributes, PdsBatchAttribValue));
        dsBatchAttributes.addLink(fieldNum(InventDim, InventBatchId), fieldNum(PdsBatchAttributes, InventBatchId));
        dsBatchAttributes.addLink(fieldNum(InventSum, ItemId), fieldNum(PdsBatchAttributes, ItemId), dsInventSum.name());
        dsBatchAttributes.addRange(fieldNum(PdsBatchAttributes, PdsBatchAttribId)).value(queryValue(_inventTable.PDSBaseAttributeId));
    
        queryRun = new QueryRun(query);
        while (queryRun.next())
        {
            inventSum = queryRun.get(tableNum(InventSum));
            batchAttributes = queryRun.get(tableNum(PdsBatchAttributes));
    
            totalActive += batchAttributes.pipActiveQty(inventSum.physicalInventCalculated(), _inventTable.ItemId);
        }
    
        return totalActive;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPPotencyActiveCacheEntry construct()
    {
        return new PIPPotencyActiveCacheEntry();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventSumDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PIPPotencyActiveCacheEntry</c> class.
    /// </summary>
    /// <param name="_inventSum">
    ///    A record in the <c>InventSum</c> table containing for which to compute the active ingredient quantity. This buffer may
    ///    be summarized but it must have a valid item ID.
    /// </param>
    /// <param name="_inventDim">
    ///    A record in the <c>InventDim</c> table containing the dimensions for the given <paramref name="_inventSum"/>, particularly
    ///    important if <paramref name="_inventSum"/> contains aggregate data.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PIPPotencyActiveCacheEntry</c> class with the computed values.
    /// </returns>
    public static PIPPotencyActiveCacheEntry newInventSumDim(InventSum _inventSum, InventDim _inventDim)
    {
        PIPPotencyActiveCacheEntry  entry = PIPPotencyActiveCacheEntry::construct();
    
        InventTable                 inventTable     = _inventSum.inventTable();
        PdsBatchAttributes          batchAttributes;
    
        InventQty                   qty;
        PDSActiveQty                activeQty;
        PDSBaseValueNum             baseValue;
    
        if (inventTable.PDSBaseAttributeId)
        {
            qty = _inventSum.physicalInventCalculated();
    
            if (_inventDim.InventBatchId)
            {
                batchAttributes = PdsBatchAttributes::find(inventTable.ItemId, _inventDim.InventBatchId, inventTable.PDSBaseAttributeId);
    
                if (batchAttributes)
                {
                    activeQty   = batchAttributes.pipActiveQty(qty, inventTable.ItemId);
                    baseValue   = batchAttributes.pipAttribBaseValue();
    
                    entry.setValues(qty, activeQty, inventTable.PDSBaseAttributeId, baseValue);
                }
            }
            else
            {
                activeQty = PIPPotencyActiveCacheEntry::computeAggregateActiveQty(inventTable, _inventDim);
    
                baseValue = activeQty / qty * 100;
    
                entry.setValues(qty, activeQty, inventTable.PDSBaseAttributeId, baseValue);
            }
        }
    
        return entry;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>