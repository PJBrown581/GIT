<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdParmRelease_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ProdParmRelease))]
public final class PIPProdParmRelease_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipSetDispensingDependentFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets values of the dispensing specific fields.
    /// </summary>
    public void pipSetDispensingDependentFields()
    {
        if (#PIPDispensingEnabled && this.prodTable().pipHasDispensingControlledItem())
        {
            this.PIPPostNowBOM      = NoYes::No;
            this.PIPEndPicklist     = NoYes::No;
            this.PIPReducePhysical  = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipSetPotencyDepFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets value of the potency depending fields.
    /// </summary>
    // This was copied verbatim from <see cref="ProdParmStartUp.pipSetPotencyDepFields method"/>.
    public void pipSetPotencyDepFields()
    {
        if (#PDSPotencyEnabled)
        {
            if (!this.prodTable().pipAllowPostNow())
            {
                this.PIPPostNowBOM                 = false;
                this.PIPCompletePickListJournal    = false;
                this.PIPbomAutoConsump             = BOMAutoConsump::Never;
                this.PIPEndPicklist                = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdParmRelease_onInitializedRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(ProdParmRelease), DataEventType::InitializedRecord)]
    public static void ProdParmRelease_onInitializedRecord(Common sender, DataEventArgs e)
    {
        ProdParmRelease prodParmRelease = sender as ProdParmRelease;
        prodParmRelease.PIPPostDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        prodParmRelease.PIPJournalShowInfo = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdParmRelease_onUpdating</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(ProdParmRelease), DataEventType::Updating)]
    public static void ProdParmRelease_onUpdating(Common sender, DataEventArgs e)
    {
        ProdParmRelease prodParmRelease = sender as ProdParmRelease;
        prodParmRelease.PIPDrawNegative = prodParmRelease.PIPReducePhysical ? NoYes::No : prodParmRelease.PIPDrawNegative;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>