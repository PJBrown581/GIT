<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPPotencyActiveCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPPotencyActiveCache</c> class is a cache for on-hand potency active ingredient information.
/// </summary>
public class PIPPotencyActiveCache
{
    Map         activeCache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes this cache to a state where it contains no entries.
    /// </summary>
    public void init()
    {
        activeCache = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>PIPPotencyActiveCacheEntry</c> for the given inventory summary and inventory dimension data source.
    /// </summary>
    /// <param name="_inventSum">
    ///    A record in the <c>InventSum</c> table containing for which to compute the active ingredient quantity. This buffer may
    ///    be summarized but it must have a valid item ID.
    /// </param>
    /// <param name="_inventDimFormDataSource">
    ///    The related form data source for the <c>InventDim</c> table related to <paramref name="_inventSum"/> from which
    ///    to get the record in the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PIPPotencyActiveCacheEntry</c> class with the active ingredient information for the given record buffers.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if the related record in the <c>InventDim</c> table could not be located.
    /// </exception>
    public PIPPotencyActiveCacheEntry lookup(InventSum _inventSum, FormDataSource _inventDimFormDataSource)
    {
        PIPPotencyActiveCacheEntry  entry;
        InventDim                   inventDimJoined = formJoinedRecord(_inventSum, _inventDimFormDataSource) as InventDim;
        str                         cacheKey;
    
        if (inventDimJoined.TableId != tableNum(InventDim))
        {
            throw error(strFmt("@SYS22828", funcName()));
        }
    
        cacheKey = this.makeCacheKey(_inventSum.ItemId, inventDimJoined.InventBatchId);
    
        if (activeCache.exists(cacheKey))
        {
            entry = activeCache.lookup(cacheKey);
        }
        else
        {
            entry = PIPPotencyActiveCacheEntry::newInventSumDim(_inventSum, inventDimJoined);
            activeCache.insert(cacheKey, entry);
        }
    
        return entry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the key for the cache entry.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_inventBatchId">
    ///    The inventory batch ID.
    /// </param>
    /// <returns>
    ///    The key to use for the cache entry.
    /// </returns>
    private str makeCacheKey(ItemId _itemId, InventBatchId _inventBatchId)
    {
        return _itemId + '#' + _inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPPotencyActiveCache construct()
    {
        return new PIPPotencyActiveCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>