<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdUpdRelease_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdUpdRelease))]
public final class PIPProdUpdRelease_Extension
{
    private ProdJournalId      printJournalId;
    private List               listBOMJournalId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        listBOMJournalId =  new List(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipPrintoutPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProdUpdRelease), methodStr(ProdUpdRelease, printout))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="printout method"/> on this class.
    /// </summary>
    /// <param name="_args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void pipPrintoutPost(XppPrePostArgs _args)
    {
        ProdUpdRelease prodUpdRelease = _args.getThis();
    
        prodUpdRelease.pipPrintoutPickList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipUpdateProdBOMPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProdUpdRelease), methodStr(ProdUpdRelease, updateProdBOM))]
    /// <summary>
    ///    Executes additional logic in the post-method event for the <see cref="updateProdBOMPost method"/> on this class.
    /// </summary>
    /// <param name="_args">
    ///    The standard pre-/post- arguments for a static method event handler.
    /// </param>
    public static void pipUpdateProdBOMPost(XppPrePostArgs _args)
    {
        ProdUpdRelease prodUpdRelease = _args.getThis();
    
        prodUpdRelease.pipUpdateBOMConsumption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPIPPrintJournalId</Name>
				<Source><![CDATA[
    public ProdJournalId parmPIPPrintJournalId(ProdJournalId _journalId = printJournalId)
    {
        printJournalId  = _journalId;
        return printJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetListOfBOMJournals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of groups of production order BOM lines for each production order picking list journal to create based on the
    ///    release parameter settings.
    /// </summary>
    /// <returns>
    ///    A list of zero or more instances of a <c>RecordLinkList</c>, each containing one or more records in the
    ///    <c>ProdBOM</c> table. The records in each <c>RecordLinkList</c> are the group of production BOM lines
    ///    that should be put in a single production order picking list.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if a production order BOM is included more than one time in any of the record groups.
    /// </exception>
    protected List pipGetListOfBOMJournals()
    {
        // IMPORTANT: Release parameters customization does not (yet) have operation number ranges.
        return ProdUpdRelease::pipGetListOfBOMJournalsWithDispensing(this.prodTable(), prodParmRelease.PIPBOMJournalSplit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipGetListOfBOMJournalsWithDispensing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of groups of production order BOM lines for each production order picking list journal to create based on the
    ///    release parameter settings.
    /// </summary>
    /// <param name="_prodTable">
    ///    The record from the <c>ProdTable</c> table for the production order.
    /// </param>
    /// <param name="_split">
    ///    Determines how to split up the production order BOM lines.
    /// </param>
    /// <param name="_fromOprNum">
    ///    Identifies the first operation number in the operation range; optional.
    /// </param>
    /// <param name="_toOprNum">
    ///    Identifies the last operation number in the operation range; optional. This may be zero to indicate all operations after <paramref name="_fromOprNum"/>.
    /// </param>
    /// <returns>
    ///    A list of zero or more instances of a <c>RecordLinkList</c>, each containing one or more records in the
    ///    <c>ProdBOM</c> table. The records in each <c>RecordLinkList</c> are the group of production BOM lines
    ///    that should be put in a single production order picking list.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Thrown if a production order BOM is included more than one time in any of the record groups.
    /// </exception>
    // This method was copied from <see cref="ProdUpdStartUp.getListOfBOMJournals method"/> with some minor modifications and additions for dispensing.
    public static List pipGetListOfBOMJournalsWithDispensing(ProdTable _prodTable, ProdBOMJournalSplit _split, OprNumBOM _fromOprNum = 0, OprNumBOM _toOprNum = 0)
    {
        ProdBOM                 prodBOM;
        ProdBOM                 prodBOMGrpOprNum;
        ProdRoute               prodRoute;
        InventTable             inventTable;
        RecordLinkList          recListProdBOM;
        List                    listBOMJournals  = new List(Types::Class);
        Set                     setInventTransId = new Set(Types::String);
        SysInfoAction_Formrun   infoActionProdBOM;
        int                     loop;
        boolean                 dispensingRequired = _prodTable.pipHasDispensingControlledItem();

        if (_split == ProdBOMJournalSplit::No)
        {
            recListProdBOM = new RecordLinkList();
    
            while select forupdate prodBOM
                    where prodBOM.ProdId    == _prodTable.ProdId
                        && prodBOM.OprNum   >= _fromOprNum
                        && (prodBOM.OprNum  <= _toOprNum
                            || !_toOprNum)
                        exists join InventTable
                            where inventTable.ItemId                == prodBOM.ItemId
                                && inventTable.PIPDispensingControl == NoYes::No
            {
                recListProdBOM.ins(prodBOM);
            }
    
            if (recListProdBOM.len())
            {
                listBOMJournals.addEnd(recListProdBOM);
            }

            if (dispensingRequired)
            {
                recListProdBOM = new RecordLinkList();
    
                while select forupdate prodBOM
                        where prodBOM.ProdId    == _prodTable.ProdId
                            && prodBOM.OprNum   >= _fromOprNum
                            && (prodBOM.OprNum  <= _toOprNum
                                || !_toOprNum)
                            exists join InventTable
                                where inventTable.ItemId                == prodBOM.ItemId
                                    && inventTable.PIPDispensingControl == NoYes::Yes
                {
                    recListProdBOM.ins(prodBOM);
                }
    
                if (recListProdBOM.len())
                {
                    listBOMJournals.addEnd(recListProdBOM);
                }
            }
        }
        else if (_split == ProdBOMJournalSplit::RouteType)
        {
            loop = 1;

            while(loop < 3)
            {
                recListProdBOM = new RecordLinkList();

                RouteOprType routeOprType = loop == 1 ? RouteOprType::Standard : RouteOprType::Vendor;
    
                while select forupdate prodBOM
                        where prodBOM.ProdId        == _prodTable.ProdId
                           && prodBOM.OprNum        >= _fromOprNum
                           && (prodBOM.OprNum       <= _toOprNum
                                || !_toOprNum)
                           exists join OprNum from prodRoute
                        where prodRoute.ProdId      == prodBOM.ProdId
                           && prodRoute.OprNum      == prodBOM.OprNum
                           && prodRoute.RouteType   == routeOprType
                        exists join InventTable
                            where inventTable.ItemId                == prodBOM.ItemId
                                && inventTable.PIPDispensingControl == NoYes::No
                {
                    if(!setInventTransId.add(prodBOM.InventTransId))
                    {
                        infoActionProdBOM = SysInfoAction_Formrun::newFormname(formStr(ProdBOM));
                        infoActionProdBOM.parmCallerBuffer(_prodTable);
                        throw error(strFmt("@SYS88785", prodBOM.ItemId),'', infoActionProdBOM);
                    }
    
                    recListProdBOM.ins(prodBOM);
                }

                if (recListProdBOM.len())
                {
                    listBOMJournals.addEnd(recListProdBOM);
                }
                
                if (dispensingRequired)
                {
                    recListProdBOM = new RecordLinkList();
                    
                    while select forupdate prodBOM
                            where prodBOM.ProdId        == _prodTable.ProdId
                                && prodBOM.OprNum       >= _fromOprNum
                                && (prodBOM.OprNum      <= _toOprNum
                                    || !_toOprNum)
                                exists join OprNum from prodRoute
                            where prodRoute.ProdId      == prodBOM.ProdId
                                && prodRoute.OprNum     == prodBOM.OprNum
                                && prodRoute.RouteType  == routeOprType
                            exists join InventTable
                                where inventTable.ItemId                == prodBOM.ItemId
                                    && inventTable.PIPDispensingControl == NoYes::Yes
                    {
                        if(!setInventTransId.add(prodBOM.InventTransId))
                        {
                            infoActionProdBOM = SysInfoAction_Formrun::newFormname(formStr(ProdBOM));
                            infoActionProdBOM.parmCallerBuffer(_prodTable);
                            throw error(strFmt("@SYS88785", prodBOM.ItemId),'', infoActionProdBOM);
                        }
    
                        recListProdBOM.ins(prodBOM);
                    }
                    
                    if (recListProdBOM.len())
                    {
                        listBOMJournals.addEnd(recListProdBOM);
                    }
                }
    
                loop++;
            }
        }
        else if (_split == ProdBOMJournalSplit::Operation)
        {
            while select OprNum from prodBOMGrpOprNum
                group by OprNum
                where prodBOMGrpOprNum.ProdId    == _prodTable.ProdId
            {
                recListProdBOM = new RecordLinkList();

                while select forupdate prodBOM
                    where prodBOM.ProdId    == _prodTable.ProdId
                       && prodBOM.OprNum    >= _fromOprNum
                       && (prodBOM.OprNum   <= _toOprNum
                            || !_toOprNum)
                       && prodBOM.OprNum    == prodBOMGrpOprNum.OprNum
                    exists join InventTable
                        where inventTable.ItemId                == prodBOM.ItemId
                            && inventTable.PIPDispensingControl == NoYes::No
                {
                    if(!setInventTransId.add(prodBOM.InventTransId))
                    {
                        infoActionProdBOM = SysInfoAction_Formrun::newFormname(formStr(ProdBOM));
                        infoActionProdBOM.parmCallerBuffer(prodBOM);
                        throw error(strFmt("@SYS88785", prodBOM.ItemId),'', infoActionProdBOM);
                    }
                    recListProdBOM.ins(prodBOM);
                }
    
                if (recListProdBOM.len())
                {
                    listBOMJournals.addEnd(recListProdBOM);
                }

                if (dispensingRequired)
                {
                    recListProdBOM = new RecordLinkList();
                    
                    while select forupdate prodBOM
                        where prodBOM.ProdId    == _prodTable.ProdId
                            && prodBOM.OprNum    >= _fromOprNum
                            && (prodBOM.OprNum   <= _toOprNum
                                || !_toOprNum)
                            && prodBOM.OprNum    == prodBOMGrpOprNum.OprNum
                        exists join InventTable
                            where inventTable.ItemId                == prodBOM.ItemId
                                && inventTable.PIPDispensingControl == NoYes::Yes
                    {
                        if(!setInventTransId.add(prodBOM.InventTransId))
                        {
                            infoActionProdBOM = SysInfoAction_Formrun::newFormname(formStr(ProdBOM));
                            infoActionProdBOM.parmCallerBuffer(prodBOM);
                            throw error(strFmt("@SYS88785", prodBOM.ItemId),'', infoActionProdBOM);
                        }
                        recListProdBOM.ins(prodBOM);
                    }
    
                    if (recListProdBOM.len())
                    {
                        listBOMJournals.addEnd(recListProdBOM);
                    }
                }
            }
        }
    
        return listBOMJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipPrintoutPickList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the production picking list if the release parameters request it.
    /// </summary>
    // This method was copied verbatim from <see cref="ProdUpdStartUp.printout method"/> with some minor modifications.
    public void pipPrintoutPickList()
    {
        ListEnumerator listEnumerator;
    
        if (prodParmRelease.PIPPrintPickList == NoYes::Yes)
        {
            if (listBOMJournalId.empty())
            {
                info("@SYS95082");
                info(strFmt("@SYS58533", "@SYS77792"));
                return;
            }
    
            listEnumerator = listBOMJournalId.getEnumerator();
            while (listEnumerator.moveNext())
            {
                this.parmPIPPrintJournalId(listEnumerator.current());
    
                ProdUpd::printoutReportFromMenuItem(menuitemOutputStr(ProdPicklist), this, this.parmParmBuffer());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipUpdateBOMConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the production order picking list journal(s) based on the release parameters.
    /// </summary>
    /// <remarks>
    ///    <para>This only creates production order picking list journals for production orders that have dispensed items.</para>
    /// </remarks>
    // Initially copied from class ProdUpdStartUp.updateBOMConsumption
    public void pipUpdateBOMConsumption()
    {
        ProdBOM                     prodBOM;
        BOMCalcData                 bomCalcData     = BOMCalcData::newProdTable(prodTable.QtySched, prodTable);
    
        ProdJournalTable            prodJournalTable;
        ProdJournalBOM              prodJournalBOM;
    
        Map                         mapJournalTable = new Map(Types::String, Types::Record);
        boolean                     checkPosting = true;
        boolean                     addRefPurch = true;
        #ISOCountryRegionCodes
    
        setPrefix("@SYS28536");
    
        // Skip if dispensing is not used for this production order or not creating a pick list at release (this happens when a later status run before doing release)
        if (prodParmRelease.PIPBOMJournalNameId == "" || prodParmRelease.PIPBOMAutoConsump == BOMAutoConsump::Never || !this.prodTable().pipHasDispensingControlledItem())
        {
            return;
        }
    
        // "Start" logic here checks ProdTable.QtyStUp to determine if this is for ::Reversed or ::Qty; do not use that as QtyStUp is always 0 at release time
        ProdBOMConsumpProposal consumpProposal = ProdBOMConsumpProposal::Qty;
    
        List listBOMJournals = this.pipGetListOfBOMJournals();
        ListEnumerator listEnumerator = listBOMJournals.getEnumerator();
    
        while(listEnumerator.moveNext())
        {
            RecordLinkList recListProdBOM = listEnumerator.current();

            ProdJournalTableData prodJournalTableData = JournalTableData::newTable(prodJournalTable);
            ProdJournalTransData prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM,prodJournalTableData);
    
            ProdJournalNameId journalNameId = prodParmRelease.PIPBOMJournalNameId;
            // If the first item in the list of ProdBOMs is a dispensing controlled item then all the items will be and we need to use the Dispensing Ticket journal name
            recListProdBOM = listEnumerator.current();
            boolean loop = recListProdBOM.first();
            if (loop)
            {
                prodBOM = recListProdBOM.peek();
                if (prodBOM.inventTable().PIPDispensingControl)
                {
                    journalNameId = prodParmRelease.PIPDispensingJournalNameId;
                }
            }
            prodJournalTableData.initBuffer(journalNameId, prodParmRelease.ProdId, ProdJournalType::Picklist);
    
            prodJournalTable.ReducePhysical          = prodParmRelease.PIPReducePhysical;
            prodJournalTable.DrawNegative            = prodParmRelease.PIPDrawNegative;
            prodJournalTable.PIPProdGenerationSource = PIPProdGenerationSource::Released;
            OprNum operNum = 0;

            // create journal lines
            while(loop)
            {
                prodBOM = recListProdBOM.peek();
    
                if(!prodBOM.RecId)
                {
                    loop = recListProdBOM.next();
                    continue;
                }
    
                prodBOM.selectForUpdate(true);
    
                ProdBOMCalc prodBOMCalc = ProdBOMCalc::newBOMCalcData(bomCalcData,
                                                          prodBOM,
                                                          consumpProposal,
                                                          prodParmRelease.PIPBOMAutoConsump,
                                                          !prodBOM.ConstantReleased,
                                                          NoYes::No,
                                                          true,
                                                          false,
                                                          prodParmRelease.PIPCompletePickListJournal);
    
                if (   prodBOMCalc.bomConsump()
                    || prodBOMCalc.inventConsump()
                    || prodParmRelease.PIPCompletePickListJournal
                    || (prodParmRelease.PIPEndPicklist
                    &&  prodBOM.BackorderStatus == ProdBackStatus::Release))
                {
                    prodJournalBOM.clear();
                    prodJournalBOM.initValue();
                    prodJournalBOM.initFromProdBOM(prodBOM);
    
                    prodJournalBOM.TransDate      = prodParmRelease.PIPPostDate;
                    prodJournalBOM.EndConsump     = prodParmRelease.PIPEndPicklist;
    
                    prodBOMCalc.setProdJournalBOM(prodJournalBOM);
    
    
                    prodJournalTableData.initJournalId();
                    prodJournalTransData.initFromJournalTable();
    
                    prodBOM.ConstantReleased    = NoYes::Yes;
    
                    // <GIN>
                    if (TaxParameters::isExciseEnable_IN())
                    {
                        TransTaxInformation transTaxInformation_Current = TransTaxInformationHelper::findOrCreateTransTaxInformation(prodJournalBOM.TableId, prodJournalBOM.RecId, true);
                        TransTaxInformation transTaxInformation_Origin = TransTaxInformationHelper::findOrCreateTransTaxInformation(prodBOM.prodTable().TableId, prodBOM.prodTable().RecId);

                        transTaxInformation_Current.CompanyLocation = transTaxInformation_Origin.CompanyLocation;
                        transTaxInformation_Current.TaxInformation  = transTaxInformation_Origin.TaxInformation;
                        TransTaxInformationHelper::initFromTaxInformation(transTaxInformation_Current);
                        transTaxInformation_Current.ExciseType = ExciseType_IN::Manufacturer;
                        ttsbegin;
                        transTaxInformation_Current.Update();
                        ttscommit;
                    }
                    // </GIN>
    
                    prodJournalBOM.insertJournalCreate(prodJournalTransData,prodBOM);
    
                    if(prodBOM.ConstantReleased != prodBOM.orig().ConstantReleased)
                    {
                        prodBOM.doUpdate();
                    }
    
                    if(     (operNum
                        &&   operNum != prodBOM.OprNum)
                        || !prodBOM.OprNum)
                    {
                        addRefPurch = false;
                    }
    
                    operNum = prodBOM.OprNum;
                }
    
                loop = recListProdBOM.next();
            }
    
            if (prodJournalTable.JournalId)
            {
                if(addRefPurch)
                {
                    if(ProdRoute::find(prodParmRelease.ProdId, operNum, RouteOprPriority::Primary).RouteType == RouteOprType::Vendor)
                    {
                        prodJournalTable.RefPurchId = ProdBOM::findVendorRefPurchId(prodParmRelease.ProdId, operNum);
                    }
                }
    
                prodJournalTable.write();
    
                if(!mapJournalTable.exists(prodJournalTable.JournalId))
                {
                    mapJournalTable.insert(prodJournalTable.JournalId, prodJournalTable);
                }
    
                if (prodParmRelease.PIPPrintPickList == NoYes::Yes)
                {
                    listBOMJournalId.addEnd(prodJournalTable.JournalId);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>