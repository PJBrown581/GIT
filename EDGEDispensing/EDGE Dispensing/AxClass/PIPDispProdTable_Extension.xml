<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPDispProdTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ProdTable))]
public final class PIPDispProdTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipAllowPostNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value indicating if picking list consumption can be posted automatically.
    /// </summary>
    /// <returns>
    /// true if consumption can be posted automatically; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A BOM with active ingredient cannot use auto consumption.
    /// </remarks>
    // This was copied verbatim from <see cref="ProdParmStartUp.pdsAllowPostNow method"/>.
    public boolean pipAllowPostNow()
    {
        ProdBOM prodBOM;
    
        if (!#PDSPotencyEnabled)
        {
            return true;
        }
    
        select firstonly RecId
            from prodBOM
            where prodBOM.ProdId                    == this.ProdId
                && (prodBOM.PDSIngredientType       == PDSIngredientTypeEnum::Active
                    || prodBOM.PDSIngredientType    == PDSIngredientTypeEnum::Compensating);
    
        return !prodBOM.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDispensingTicketStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if there is at least one dispensing ticket open for this production order.
    /// </summary>
    /// <returns>
    ///    A value for display showing if there is at least one open dispensing ticket for this production order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display PIPDispensingTicketStatusDisplay pipDispensingTicketStatusDisplay()
    {
        return ProdJournalBOM::pipJournalStatusDisplay(this.ProdId, NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipHasDispensingControlledItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the production order has any item that is dispensing controlled.
    /// </summary>
    /// <returns>
    ///    true if the production order has at least one item that is dispensing controlled; otherwise, false.
    /// </returns>
    public boolean pipHasDispensingControlledItem()
    {
        ProdBOM     prodBOM;
        InventTable inventTable;
        boolean     ret = false;
    
        if (this.pipIsDispensingEnabled())
        {
            select firstOnly RecId from prodBOM
                where prodBOM.prodId                        == this.ProdId
                exists join inventTable
                    where inventTable.ItemId                == prodBOM.ItemId
                        && InventTable.PIPDispensingControl == NoYes::Yes;
    
            ret = prodBOM.RecId != 0;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipHasNonDispensingControlledItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the production order has any item that is not dispensing controlled.
    /// </summary>
    /// <returns>
    ///    true if the production order has at least one item that is not dispensing controlled; otherwise, false.
    /// </returns>
    public boolean pipHasNonDispensingControlledItem()
    {
        ProdBOM     prodBOM;
        InventTable inventTable;
    
        select firstOnly RecId from prodBOM
            where prodBOM.prodId                        == this.ProdId
            exists join inventTable
                where inventTable.ItemId                == prodBOM.ItemId
                    && InventTable.PIPDispensingControl == NoYes::No;
    
        return prodBOM.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsDispensingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if dispensing is enabled for this production order.
    /// </summary>
    /// <returns>
    ///    true if dispensing is enabled for this production order; otherwise, false.
    /// </returns>
    public boolean pipIsDispensingEnabled()
    {
        return #PIPDispensingEnabled && this.prodParametersDim().PIPDispensingEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipPickListStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if there is at least one pick list open for this production order.
    /// </summary>
    /// <returns>
    ///    A value for display showing if there is at least one open pick list for this production order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display PIPPickListStatusDisplay pipPickListStatusDisplay()
    {
        return ProdJournalBOM::pipJournalStatusDisplay(this.ProdId, NoYes::No);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>