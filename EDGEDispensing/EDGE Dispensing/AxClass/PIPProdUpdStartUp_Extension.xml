<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdUpdStartUp_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdUpdStartUp))]
public final class PIPProdUpdStartUp_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getListOfBOMJournals</Name>
				<Source><![CDATA[
    List getListOfBOMJournals()
    {
        List bomJournals = next getListOfBOMJournals();

        // If there are any dispensing item on the production order, then scan the BOM journals records and split apart the lists into non-dispensed and dispensed
        if (this.prodTable().pipHasDispensingControlledItem())
        {
            Set dispensedItems = new Set(Types::String);
            Set nonDispensedItems = new Set(Types::String);

            List newBomJournals = new List(Types::Class);

            ProdBOM prodBom;
            ListEnumerator linkListEnumerator = bomJournals.getEnumerator();
            while (linkListEnumerator.moveNext())
            {
                RecordLinkList dispensed = new RecordLinkList();

                RecordLinkList original = linkListEnumerator.current();
                boolean loop = original.first();
                while (loop)
                {
                    original.get(prodBom);
                    if (prodBom.RecId)
                    {
                        // Determine if this is a dispensed item
                        if (!dispensedItems.in(prodBom.ItemId) && !nonDispensedItems.in(prodBom.ItemId))
                        {
                            InventTable inventTable;
                            if ((select inventTable where inventTable.ItemId == prodBom.ItemId).PIPDispensingControl == NoYes::Yes)
                            {
                                dispensedItems.add(prodBom.ItemId);
                            }
                            else
                            {
                                nonDispensedItems.add(prodBom.ItemId);
                            }
                        }

                        // Move the dispensed items to a new list
                        if (dispensedItems.in(prodBom.ItemId))
                        {
                            dispensed.ins(prodBom);
                            original.del();
                        }
                    }

                    loop = original.next();
                }

                if (original.len())
                {
                    newBomJournals.addEnd(original);
                }

                if (dispensed.len())
                {
                    newBomJournals.addEnd(dispensed);
                }
            }

            bomJournals = newBomJournals;
        }

        return bomJournals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdJournalTableDataForUpdateBOMConsumption</Name>
				<Source><![CDATA[
    protected void initProdJournalTableDataForUpdateBOMConsumption(ProdJournalTableData _prodJournalTableData,
                                                                   ProdJournalNameId _journalNameId,
                                                                   ProdId _prodId,
                                                                   ProdJournalType _journalType,
                                                                   RecordLinkList _recListProdBOM)
    {
        // If the first item in the list of ProdBOMs is a dispensing controlled item then all the items will be and we need to use the Dispensing Ticket journal name
        ProdJournalNameId journalNameId = _journalNameId;
        if (this.prodTable().pipHasDispensingControlledItem() && _recListProdBOM.first())
        {
            ProdBOM prodBOM = _recListProdBOM.peek();
            if (prodBOM.inventTable().PIPDispensingControl)
            {
                ProdParmStartUp prodParmStartUp = this.prodParmStartUp;
                journalNameId = prodParmStartUp.PIPDispensingJournalNameId;
            }
        }

        next initProdJournalTableDataForUpdateBOMConsumption(_prodJournalTableData, journalNameId, _prodId, _journalType, _recListProdBOM);

        ProdJournalTable prodJournalTable = _prodJournalTableData.journalTable();
        prodJournalTable.PIPProdGenerationSource = PIPProdGenerationSource::StartedUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdBOMCalcForUpdateBOMConsumption</Name>
				<Source><![CDATA[
    protected ProdBOMCalc initProdBOMCalcForUpdateBOMConsumption(
        ProdBOM                 _prodBOM,
        BOMCalcData             _bomCalcData,
        ProdBOMConsumpProposal  _consumpProposal)
    {
        ProdBOMCalc calc = next initProdBOMCalcForUpdateBOMConsumption(_prodBOM, _bomCalcData, _consumpProposal);

        if (#PIPDispensingEnabled)
        {
            PIPProdReleaseBOM prodReleaseBOM = PIPProdReleaseBOM::findProdBOM(_prodBOM.RecId);

            if (prodReleaseBOM.RecId)
            {
                // Since this cannot be done in the above as the ProdBOMCalc consruction method automatically calls init(), set the property now and initialize again
                calc.parmPIPDeductReleasedProposal(true);
                calc.init();
            }
        }

        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdJournalCheckPostBOM</Name>
				<Source><![CDATA[
    protected ProdJournalCheckPostBOM createProdJournalCheckPostBOM(ProdJournalTable _prodJournalTable, ProdBOMConsumpProposal _consumpProposal)
    {
        ProdJournalCheckPostBOM checkPostBOM = next createProdJournalCheckPostBOM(_prodJournalTable, _consumpProposal);

        checkPostBOM.parmPIPSkipDispenseProcessing(_consumpProposal == ProdBOMConsumpProposal::Reversed);

        return checkPostBOM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>