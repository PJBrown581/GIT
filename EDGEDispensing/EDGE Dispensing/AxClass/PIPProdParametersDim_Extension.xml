<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdParametersDim_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ProdParametersDim))]
public final class PIPProdParametersDim_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipAnyDispensingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if any effective production parameters record shows that dispensing is enabled.
    /// </summary>
    /// <param name="_crossCompany">
    ///     Determines if the production control parameters for all companies should be checked; optional.
    /// </param>
    /// <param name="_ignoreRecId">
    ///     The record ID of the parameter record to ignore in this check; useful for forms where the parameter
    ///     record is being edited.
    /// </param>
    /// <returns>
    ///    true if dispensing is enabled in any effective production parameters record; otherwise, false.
    /// </returns>
    public static boolean pipAnyDispensingEnabled(boolean _crossCompany = false, RecId _ignoreRecId = 0)
    {
        ProdParameters      prodParameters;
        ProdParametersDim   prodParametersDim;
        InventDim           inventDim;
        inventDim           inventDimCrit;
        InventDimParm       inventDimParm;
        DataArea            dataArea;
        boolean             ret;
    
        if (!#PIPDispensingEnabled)
        {
            return false;
        }
    
        if (_crossCompany)
        {
            // Search all default parameters
            inventDimCrit = InventDim::findOrCreateBlank();
            inventDimParm.setAllInventDim();
            select firstOnly crossCompany RecId from prodParametersDim
                where prodParametersDim.PIPDispensingEnabled == NoYes::Yes
                    && prodParametersDim.RecId               != _ignoreRecId
                #InventDimExistsJoin(prodParametersDim.InventDimId, inventDim, inventDimCrit, inventDimParm);
    
            // Search all site-specific parameters
            if (!prodParametersDim.RecId)
            {
                // Using DataArea table here is required as the kernel will not generate a join condition on the DataAreaId field
                // because there is no explict field joining ProdParametersDim with ProdParameters; however, the X++ compiler does
                // not allow this use to prodParameter.dataAreaId == prodParametersDim.dataAreaId (which should be legal in this context).
                select firstOnly crossCompany RecId from prodParametersDim
                    where prodParametersDim.PIPDispensingEnabled == NoYes::Yes
                        && prodParametersDim.RecId               != _ignoreRecId
                    exists join dataArea
                        where dataArea.id == prodParametersDim.dataAreaId
                    exists join prodParameters
                        where prodParameters.dataAreaId == dataArea.Id
                            && prodParameters.ProdParamInventDimLookup == ProdParamInventDimLookup::Site;
            }
    
            ret = prodParametersDim.RecId != 0;
        }
        else if (ProdParameters::find().ProdParamInventDimLookup == ProdParamInventDimLookup::Company)
        {
            prodParametersDim = ProdParametersDim::findDefault();
            ret = prodParametersDim.RecId != _ignoreRecId && prodParametersDim.PIPDispensingEnabled;
        }
        else
        {
            ret = (select ProdParametersDim
                    where ProdParametersDim.PIPDispensingEnabled == NoYes::Yes
                        && prodParametersDim.RecId               != _ignoreRecId).RecId != 0;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = next validateField(_fieldId);

        if (ret)
        {
            switch (_fieldId)
            {
                case fieldNum(ProdParametersDim, BOMJournalNameId):
                    if (this.BOMJournalNameId && ProdJournalName::find(this.BOMJournalNameId).PIPIsDispensingJournal)
                    {
                        ret = checkFailed(strFmt("@PIP5037",
                            fieldId2pname(tableNum(ProdParametersDim), fieldNum(ProdParametersDim, PIPDispensingJournalNameId)),
                            fieldId2pname(tableNum(ProdParametersDim), fieldNum(ProdParametersDim, BOMJournalNameId))));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>