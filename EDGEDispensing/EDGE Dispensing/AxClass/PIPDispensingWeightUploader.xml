<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPDispensingWeightUploader</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PIPDispensingWeightUploader</c> class manages uploading individual files and file packages (ZIP) contain weight data for
/// dispensing processing.
/// </summary>
/// <remarks>
/// This is mostly intended for demonstration purposes and an interface to a real weighing device should be implemented when that is available.
/// </remarks>
public class PIPDispensingWeightUploader extends RunBase
{
    DialogRunbase   dialog;

    boolean         clearWeightFolder;

    DialogField     clearWeightFolderField;

    Filename        filename;

    private const str OkButtonName = 'OkButton';
    private const str FileUploadName = 'FileUpload';
    private const str ZipArchiveExt = '.zip';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FileUpload fileUploadControl = this.getFormControl(dialog, FileUploadName);

        FileUploadResultBase result = fileUploadControl.getFileUploadResult();
        if (result != null)
        {
            str weightFolder = ProdParameters::find().PIPWeightInputFolder;
            if (!System.IO.Directory::Exists(weightFolder))
            {
                System.IO.Directory::CreateDirectory(weightFolder);
            }

            if (clearWeightFolder)
            {
                this.clearFolderContent(weightFolder);
            }

            str fullpath = System.IO.Path::Combine(weightFolder, filename);
            this.saveUploadedFile(fileUploadControl.getUploadedFile(true), fullpath);

            if (this.isZipArchive(filename))
            {
                this.extractPackage(fullpath, weightFolder);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearFolderContent</Name>
				<Source><![CDATA[
    private void clearFolderContent(str _folder)
    {
        #File

        System.Array filenames = System.IO.Directory::GetFiles(_folder, #AllFilesName, System.IO.SearchOption::TopDirectoryOnly);
        for (int i = 0; i < filenames.Length; i++)
        {
            System.IO.File::Delete(filenames.GetValue(i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveUploadedFile</Name>
				<Source><![CDATA[
    private void saveUploadedFile(System.IO.Stream _stream, str _filename)
    {
        System.IO.Stream fileOutputStream = null;
        try
        {
            fileOutputStream = new System.IO.FileStream(_filename, System.IO.FileMode::Create);
            _stream.CopyTo(fileOutputStream);
        }
        finally
        {
            if (fileOutputStream != null)
                fileOutputStream.Close();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isZipArchive</Name>
				<Source><![CDATA[
    private boolean isZipArchive(str _fileName)
    {
        return strEndsWith(_fileName, ZipArchiveExt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackage</Name>
				<Source><![CDATA[
    private void extractPackage(str _packageFileName, str _folder)
    {
        try
        {
            System.IO.Compression.ZipFile::ExtractToDirectory(_packageFileName, _folder);
        }
        finally
        {
            System.IO.File::Delete(_packageFileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogGroup      dialogGroup;
        FormBuildControl formBuildControl;
        FileUploadBuild  dialogFileUpload;

        dialog = new DialogRunbase("@PIP3055", this);

        clearWeightFolderField = dialog.addField(extendedTypeStr(NoYesId), "@PIP3056", "@PIP3057");

        dialogGroup = dialog.addGroup("@PIP3058");
        formBuildControl = dialog.formBuildDesign().control(dialogGroup.name());
        
        dialogFileUpload = formBuildControl.addControlEx(classstr(FileUpload), FileUploadName);
        dialogFileUpload.style(FileUploadStyle::MinimalWithFilename);
        dialogFileUpload.baseFileUploadStrategyClassName(classstr(FileUploadTemporaryStorageStrategy));
        dialogFileUpload.fileNameLabel("@SYS308842");
        
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = true;

        clearWeightFolder = clearWeightFolderField.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        FileUpload fileUpload = this.getFormControl(_dialog, FileUploadName);
        fileUpload.notifyUploadCompleted += eventhandler(this.uploadCompleted);
        this.setDialogOkButtonEnabled(_dialog, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadCompleted</Name>
				<Source><![CDATA[
    protected void uploadCompleted()
    {
        FileUpload fileUpload = this.getFormControl(dialog, FileUploadName);
        fileUpload.notifyUploadCompleted -= eventhandler(this.UploadCompleted);

        filename = fileUpload.fileName();

        this.setDialogOkButtonEnabled(dialog, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormControl</Name>
				<Source><![CDATA[
    protected FormControl getFormControl(DialogRunbase _dialog, str _controlName)
    {
        return _dialog.formRun().control(_dialog.formRun().controlId( _controlName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDialogOkButtonEnabled</Name>
				<Source><![CDATA[
    protected void setDialogOkButtonEnabled(DialogRunbase _dialog, boolean _isEnabled)
    {
        FormControl okButtonControl = this.getFormControl(_dialog, OkButtonName);

        if (okButtonControl)
        {
            okButtonControl.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PIPDispensingWeightUploader construct()
    {
        return new PIPDispensingWeightUploader();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PIPDispensingWeightUploader uploader = PIPDispensingWeightUploader::construct();

        if (!ProdParameters::find().PIPWeightInputFolder)
        {
            throw error("@PIP935");
        }
        
        if (uploader.validate() && uploader.prompt())
        {
            uploader.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>