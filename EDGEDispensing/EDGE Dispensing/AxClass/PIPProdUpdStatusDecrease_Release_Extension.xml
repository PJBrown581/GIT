<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdUpdStatusDecrease_Release_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdUpdStatusDecrease_Release))]
public final class PIPProdUpdStatusDecrease_Release_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    public void cleanUp()
    {
        next cleanUp();

        this.pipReverseBOMJournalRelease();

        // Reread the prodTable record since it might have been updated by the previous cleanup calls
        ProdTable prodTable = this.prodTable();
        prodTable.reread();
        prodTable.ReleasedDate = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipReverseBOMJournalRelease</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses any items picked at release time.
    /// </summary>
    private void pipReverseBOMJournalRelease()
    {
        ProdJournalCreateBOM        prodJournalCreate;
        ProdJournalCheckPostBOM     prodJournalCheckPostBOM;
        ProdJournalTable            prodJournalTable;

        ProdTable prodTable = this.prodTable();
    
        if (prodTable.pipIsDispensingEnabled())
        {
            ProdJournalTable::pipDeleteProdIdReferences(prodTable.ProdId, PIPProdGenerationSource::Released);
    
            if (prodTable.pipHasNonDispensingControlledItem())
            {
                prodJournalCreate = ProdJournalCreateBOM::newStatusDecrease(prodTable.ProdId);
                prodJournalCreate.parmPIPProdGenerationSource(PIPProdGenerationSource::Released);
                prodJournalCreate.parmPIPDeductReleasedProposal(false);
                prodJournalCreate.runOperation();
    
                prodJournalTable = prodJournalCreate.usedProdJournalTable();
    
                if (prodJournalTable.RecId && prodJournalTable.JournalId)
                {
                    prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(prodJournalTable.JournalId, true);
                    prodJournalCheckPostBOM.parmPIPSkipDispenseProcessing(true);
                    prodJournalCheckPostBOM.runOperation();
                }
            }
    
            if (prodTable.pipHasDispensingControlledItem())
            {
                prodJournalCreate = ProdJournalCreateBOM::newStatusDecrease(prodTable.ProdId);
                prodJournalCreate.parmPIPProdGenerationSource(PIPProdGenerationSource::Released);
                prodJournalCreate.parmPIPDeductReleasedProposal(false);
                ProdJournalCreate.parmJournalNameId(prodTable.prodParametersDim().PIPDispensingJournalNameId);
                prodJournalCreate.runOperation();
    
                prodJournalTable = prodJournalCreate.usedProdJournalTable();
    
                if (prodJournalTable.RecId && prodJournalTable.JournalId)
                {
                    prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(prodJournalTable.JournalId, true);
                    prodJournalCheckPostBOM.parmPIPSkipDispenseProcessing(true);
                    prodJournalCheckPostBOM.runOperation();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>