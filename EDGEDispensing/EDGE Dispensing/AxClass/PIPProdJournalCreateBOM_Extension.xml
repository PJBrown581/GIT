<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdJournalCreateBOM_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdJournalCreateBOM))]
public final class PIPProdJournalCreateBOM_Extension
{
    private PIPProdGenerationSource     generationSource;
    private UnknownNoYes                isDispensingJournal;
    private boolean                     deductReleasedProposal;
    private PIPProdJournalCreateBOMBase pipProdJournalCreateBOM;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPIPDeductReleasedProposal</Name>
				<Source><![CDATA[
    public boolean parmPIPDeductReleasedProposal(boolean _deductReleasedProposal = deductReleasedProposal)
    {
        deductReleasedProposal = _deductReleasedProposal;
    
        return deductReleasedProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPIPIsDispensingJournal</Name>
				<Source><![CDATA[
    public UnknownNoYes parmPIPIsDispensingJournal(UnknownNoYes _isDispensingJournal = isDispensingJournal)
    {
        isDispensingJournal = _isDispensingJournal;
    
        return isDispensingJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPIPProdGenerationSource</Name>
				<Source><![CDATA[
    public PIPProdGenerationSource parmPIPProdGenerationSource(PIPProdGenerationSource _generationSource = generationSource)
    {
        generationSource = _generationSource;
    
        return generationSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStatusDecrease</Name>
				<Source><![CDATA[
    public static ProdJournalCreateBOM newStatusDecrease(ProdId _prodId)
    {
        var prodJournalCreateBOM = next newStatusDecrease(_prodId);

        // Default properties as though this were running from StartUp
        if (#PIPDispensingEnabled)
        {
            prodJournalCreateBOM.parmPIPProdGenerationSource(PIPProdGenerationSource::StartedUp);

            ProdTable prodTable = ProdTable::find(_prodId);

            if (prodTable.pipHasDispensingControlledItem())
            {
                prodJournalCreateBOM.parmPIPDeductReleasedProposal(true);
            }
        }

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalTableForm</Name>
				<Source><![CDATA[
    public static ProdJournalCreateBOM newProdJournalTableForm(Args _args)
    {
        ProdJournalCreateBOM prodJournalCreateBOM = next newProdJournalTableForm(_args);

        prodJournalCreateBOM.pipProdJournalCreateBOM().setDefaultProperties(prodJournalCreateBOM, _args);

        return prodJournalCreateBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransOriginCreateLinesRanges</Name>
				<Source><![CDATA[
    protected void addInventTransOriginCreateLinesRanges(QueryBuildDataSource _inventTransOriginQueryBuildDS)
    {
        next addInventTransOriginCreateLinesRanges(_inventTransOriginQueryBuildDS);

        this.pipProdJournalCreateBOM().createLinesInventTransInitQuery(_inventTransOriginQueryBuildDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeBOMProposalForInventTrans</Name>
				<Source><![CDATA[
    protected boolean mustIncludeBOMProposalForInventTrans(ProdJournalCreateInventTransVerificationParameters _parameters)
    {
        boolean ret = next mustIncludeBOMProposalForInventTrans(_parameters);

        if (ProdTable::find(this.prodId).pipHasDispensingControlledItem())
        {
            ret = ret && this.pipProdJournalCreateBOM().deductReleasedFromInventTrans(_parameters.inventTrans, _parameters.prodBOM);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProdBOMCreateLinesRanges</Name>
				<Source><![CDATA[
    protected void addProdBOMCreateLinesRanges(QueryBuildDataSource _prodBOMQueryBuildDS)
    {
        next addProdBOMCreateLinesRanges(_prodBOMQueryBuildDS);

        this.pipProdJournalCreateBOM().createLinesProdBOMInitQuery(_prodBOMQueryBuildDS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdCOMCalc</Name>
				<Source><![CDATA[
    protected ProdBomCalc createProdCOMCalc(BOMCalcData _bomCalcData, ProdBOM _prodBOM)
    {
        return this.pipProdJournalCreateBOM().createProdBOMCalc(_bomCalcData, _prodBOM, consumpProposal, bomAutoConsump, !_prodBOM.ConstantReleased, skipAccError, isStart, isFinish);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotMissingPosting</Name>
				<Source><![CDATA[
    protected boolean checkNotMissingPosting()
    {
        boolean ret = this.pipProdJournalCreateBOM().checkNotMissingPosting(prodId);

        // CoC requires calling base method and which may give warning for journals that can be ignored with Dispensing enabled
        // Temporarily change the prodId so that it will not match any records
        ProdId saveProdId = prodId;
        prodId = '';

        next checkNotMissingPosting();

        prodId = saveProdId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogParameters</Name>
				<Source><![CDATA[
    protected void initDialogParameters()
    {
        next initDialogParameters();

        this.pipProdJournalCreateBOM().initDialogProperties(dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipProdJournalCreateBOM</Name>
				<Source><![CDATA[
    public PIPProdJournalCreateBOMBase pipProdJournalCreateBOM()
    {
        if (!pipProdJournalCreateBOM)
        {
            pipProdJournalCreateBOM = PIPPluginFactory::InstanceFromModel(classStr(PIPProdJournalCreateBOMBase), PIPPluginFactory::FeatureDispensing) as PIPProdJournalCreateBOMBase;
            pipProdJournalCreateBOM.parmProdJournalCreateBOM(this);
        }

        return pipProdJournalCreateBOM;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>