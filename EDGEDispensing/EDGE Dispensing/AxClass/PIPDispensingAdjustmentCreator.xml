<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPDispensingAdjustmentCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PIPDispensingAdjustmentCreator</c> class creates a new dispensing adjustment
///    production order journal BOM (picking list).
/// </summary>
public class PIPDispensingAdjustmentCreator
{
    ProdParametersDim   prodParametersDim;
    ProdId              prodIdForParametersDim;

    JournalTableData    journalTableData;
    JournalTableData    adjJournalTableData;
    ProdJournalTable    adjJournalTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAddJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks a journal line from the existing journal that is being posted adds a new dispensing
    ///    journal adjustment line if one should be created in the dispensing adjustment journal.
    /// </summary>
    /// <param name="_journalTransData">
    ///    An instance of the <c>ProdJournalTransData</c> class with the existing production order journal
    ///    BOM line to check.
    /// </param>
    public void checkAddJournalLine(ProdJournalTransData _journalTransData)
    {
        ProdJournalBOM      prodJournalBOM;
    
        ProdJournalBOM      adjJournalBOM;
        JournalTransData    adjJournalTransData;
    
        InventTable         inventTable;
    
        if (!this.prodParametersDim(_journalTransData.prodId()).PIPDispensingEnabled)
        {
            return;
        }
    
        prodJournalBOM = _journalTransData.journalTrans();
        if (prodJournalBOM.BOMProposal > 0
            && (prodJournalBOM.PIPDispensedQty > 0 && prodJournalBOM.BOMConsump > prodJournalBOM.PIPDispensedQty)
                || (prodJournalBOM.PIPDispensedCWQty > 0 && prodJournalBOM.PdsCWInventConsump > prodJournalBOM.PIPDispensedCWQty))
        {
            if (!adjJournalTableData)
            {
                this.createAdjustmentJournalTable();
            }
    
            inventTable = prodJournalBOM.inventTable();
    
            adjJournalBOM = null;
            adjJournalBOM.data(prodJournalBOM);
            adjJournalBOM.JournalId             = adjJournalTable.JournalId;
            adjJournalBOM.RecId                 = 0;
            adjJournalBOM.LineNum               = 0;
            adjJournalBOM.Voucher               = "";
            adjJournalBOM.BOMProposal           = prodJournalBOM.PIPDispensedQty - prodJournalBOM.BOMConsump;
            adjJournalBOM.InventProposal        = inventTable.pipToUnit(adjJournalBOM.BOMProposal, prodJournalBOM.BOMUnitId);
            adjJournalBOM.BOMConsump            = 0;
            adjJournalBOM.InventConsump         = 0;
            // The CW quantity tolerances for a CW item are validated in ProdJournalCheckPostBOM.pipCheckDispensing; we can assume they will be correct here.
            adjJournalBOM.PdsCWInventProposal   = prodJournalBOM.PIPDispensedCWQty - prodJournalBOM.PdsCWInventConsump;
            adjJournalBOM.PdsCWInventConsump    = 0;
            adjJournalBOM.PIPDispensedQty       = 0;
            adjJournalBOM.PIPDispensedCWQty     = 0;
            adjJournalBOM.InventControlProposal = NoYes::Yes;
    
            adjJournalTransData = ProdJournalTransData::newTransTable(adjJournalBOM, adjJournalTableData);
            adjJournalTransData.insert();
    
            info(strFmt("@PIP904", prodJournalBOM.ItemId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAdjustmentJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the new production journal BOM table record for the dispensing adjustment journal.
    /// </summary>
    protected void createAdjustmentJournalTable()
    {
        ProdJournalTable prodJournalTable = journalTableData.journalTable();
    
        adjJournalTable.data(prodJournalTable);
        adjJournalTable.JournalId               = "";
        adjJournalTable.NumOfLines              = 0;
        adjJournalTable.DrawNegative            = NoYes::Yes;
        adjJournalTable.ReducePhysical          = NoYes::No;
        adjJournalTable.SystemBlocked           = NoYes::No;
        adjJournalTable.Posted                  = NoYes::No;
        adjJournalTable.InventControlProposal   = NoYes::Yes;
        adjJournalTable.Description             = strFmt("@PIP914", prodJournalTable.JournalId);
        adjJournalTable.insert();
    
        adjJournalTableData = JournalTableData::newTable(adjJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finishes the dispensing adjustment production order journal that was created, if any.
    /// </summary>
    /// <remarks>
    ///    The calling logic must call this method sometime after all potential lines have been processed
    ///    for the adjustment journal.
    /// </remarks>
    public void finish()
    {
        SysInfoAction_MenuFunction action;
    
        if (adjJournalTableData)
        {
            adjJournalTable.update();
    
            action = SysInfoAction_MenuFunction::newMenuItem(menuitemDisplayStr(PIPDispensingJournal), MenuItemType::Display);
            action.parmCallerBuffer(adjJournalTable);
            action.parmDescription("@PIP915");
            info(strFmt("@PIP916", adjJournalTable.JournalId, adjJournalTable.NumOfLines), "", action);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTableData</Name>
				<Source><![CDATA[
    public ProdJournalTableData parmJournalTableData(JournalTableData _journalTableData = journalTableData)
    {
        journalTableData = _journalTableData;
    
        return journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodParametersDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the record in the <c>ProdParametersDim</c> table appropriate for a specific production order.
    /// </summary>
    /// <param name="_prodId">
    ///    The production order ID.
    /// </param>
    /// <returns>
    ///    The record in the <c>ProdParametersDim</c> table appropriate for production order <paramref name="_prodId"/>.
    /// </returns>
    protected ProdParametersDim prodParametersDim(ProdId _prodId)
    {
        if (!prodParametersDim || prodIdForParametersDim != _prodId)
        {
            prodIdForParametersDim = _prodId;
            prodParametersDim = ProdTable::find(_prodId).prodParametersDim();
        }
    
        return prodParametersDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static PIPDispensingAdjustmentCreator construct()
    {
        return new PIPDispensingAdjustmentCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalTableData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PIPDispensingAdjustmentCreator</c> class for a given production
    ///    order journal.
    /// </summary>
    /// <param name="_journalTableData">
    ///    An instance of the <c>ProdJournalTableData</c> class with the production order journal data
    ///    for the journal to possible create a dispensing adjustment journal for.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PIPDispensingAdjustmentCreator</c> class.
    /// </returns>
    public static PIPDispensingAdjustmentCreator newJournalTableData(ProdJournalTableData _journalTableData)
    {
        PIPDispensingAdjustmentCreator  adjustmentJournal = PIPDispensingAdjustmentCreator::construct();
    
        adjustmentJournal.parmJournalTableData(_journalTableData);
    
        return adjustmentJournal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>