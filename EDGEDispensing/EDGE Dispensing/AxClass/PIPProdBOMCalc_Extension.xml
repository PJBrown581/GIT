<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdBOMCalc_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdBOMCalc))]
public final class PIPProdBOMCalc_Extension
{
    private boolean deductReleasedProposal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPIPDeductReleasedProposal</Name>
				<Source><![CDATA[
    public boolean parmPIPDeductReleasedProposal(boolean _deductReleasedProposal = deductReleasedProposal)
    {
        deductReleasedProposal = _deductReleasedProposal;
    
        return deductReleasedProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProposal</Name>
				<Source><![CDATA[
    void setProposal()
    {
        next setProposal();

        if (deductReleasedProposal && !this.skipProposal())
        {
            PIPProdReleaseBOM pipProdReleaseBOM = PIPProdReleaseBOM::findProdBOM(prodBOM.RecId);

            if (pipProdReleaseBOM.RecId)
            {
                if (prodBOMConsumpProposal == ProdBOMConsumpProposal::Reversed)
                {
                    // The computed quantities above are negative so add the positive values to deduct.
                    inventProposal += pipProdReleaseBOM.InventQty;
                    bomProposal += pipProdReleaseBOM.BOMQty;
                    cwInventProposal += pipProdReleaseBOM.CWInventQty;
                }
                else
                {
                    inventProposal = min(inventProposal - pipProdReleaseBOM.InventQty, 0);
                    cwInventProposal = min(cwInventProposal - pipProdReleaseBOM.CWInventQty, 0);

                    bomProposal = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodBOM.ItemId,
                                                                                                        prodBOM.InventDimId,
                                                                                                        inventProposal,
                                                                                                        InventTableModule::find(prodBOM.ItemId,ModuleInventPurchSales::Invent).UnitId,
                                                                                                        prodBOM.UnitId,
                                                                                                        NoYes::Yes);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipNewBOMCalcData</Name>
				<Source><![CDATA[
    public static ProdBOMCalc pipNewBOMCalcData(
        BOMCalcData             _bomCalcData,
        ProdBOM                 _prodBOM,
        ProdBOMConsumpProposal  _consumpProposal,
        BOMAutoConsump          _autoConsump,
        NoYes                   _includeConstantConsump,
        NoYes                   _skipAccError               = NoYes::No,
        boolean                 _isStart                    = false,
        boolean                 _isReportAsFinished         = false,
        NoYes                   _completePickListJournal    = NoYes::No)
    {
        ProdBOMCalc prodBOMCalc = new ProdBOMCalc();

        prodBOMCalc.parmAutoConsump(_autoConsump);
        prodBOMCalc.parmBOMCalcData(_bomCalcData);
        prodBOMCalc.parmConsumpProposal(_consumpProposal);
        prodBOMCalc.parmProdBOM(_prodBOM);
        prodBOMCalc.parmSkipAccError(_skipAccError);
        prodBOMCalc.parmQtyCalc(_bomCalcData.seriesSize());
        prodBOMCalc.parmIncludeConstantConsump(_includeConstantConsump);
        prodBOMCalc.parmIsStart(_isStart);
        prodBOMCalc.parmIsReportAsFinished(_isReportAsFinished);
        prodBOMCalc.parmCompletePickListJournal(_completePickListJournal);

        return prodBOMCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>