<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdJournalCreateBOMImpl</Name>
	<SourceCode>
		<Declaration><![CDATA[
[PIPFeature('Dispensing')]
public class PIPProdJournalCreateBOMImpl extends PIPProdJournalCreateBOMBase
{
    private Map deductRemainingMap;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLinesInventTransInitQuery</Name>
				<Source><![CDATA[
    public void createLinesInventTransInitQuery(QueryBuildDataSource _dsWithInventTableRelation)
    {
        if (prodJournalCreateBOM.parmPIPDeductReleasedProposal())
        {
            deductRemainingMap = new Map(Types::Int64, Types::Class);
        }

        this.addDispensingFilter(_dsWithInventTableRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinesProdBOMInitQuery</Name>
				<Source><![CDATA[
    public void createLinesProdBOMInitQuery(QueryBuildDataSource _dsWithInventTableRelation)
    {
        this.addDispensingFilter(_dsWithInventTableRelation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDispensingFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a filter condition to an existing query data source to select dispensed items or non-dispensed items only depending on the current journal and dispensing enablement.
    /// </summary>
    /// <param name="_dsWithInventTableRelation">
    ///    A data source for a table that has a relation defined to the <c>InventTable</c> table.
    /// </param>
    private void addDispensingFilter(QueryBuildDataSource _dsWithInventTableRelation)
    {
        QueryBuildDataSource    dsInventTable;
        NoYes                   dispensingRequired;
    
        if (#PIPDispensingEnabled)
        {
            dispensingRequired = prodJournalCreateBOM.usedProdJournalTable().PIPIsDispensingJournal && ProdTable::find(prodJournalCreateBOM.parmProdId()).pipIsDispensingEnabled();
    
            dsInventTable = _dsWithInventTableRelation.addDataSource(tableNum(InventTable));
            dsInventTable.joinMode(JoinMode::ExistsJoin);
            dsInventTable.relations(true);
            dsInventTable.addRange(fieldNum(InventTable, PIPDispensingControl)).value(queryValue(dispensingRequired));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductReleasedFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deducts the inventory quantity that was put on the journal at release time from the given record in the <c>InventTrans</c> table.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The record in the <c>InventTrans</c> table to deduct from. This record should be an inventory deduction of some type, so the quantities are negative.
    /// </param>
    /// <param name="_prodBOM">
    ///    The record in the <c>ProdBOM</c> table for the transaction that is being reversed.
    /// </param>
    /// <returns>
    ///    true if the resulting inventory transaction should be applied to the reversing BOM journal; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This methods will break up any release quantities based on the first found inventory transactions. There is no
    ///    attempt to exactly match a release quantity to a specific inventory transaction (inventory dimension set).
    /// </remarks>
    public boolean deductReleasedFromInventTrans(InventTrans _inventTrans, ProdBOM _prodBOM)
    {
        PIPProdReleaseBOM   pipProdReleaseBOM;
        PmfQtyDataCarrier   deductRemaining;
        InventQty           qtyToDeduct;
        PdsCWQty            cwQtyToDeduct;

        if (!deductRemainingMap)
        {
            return true;
        }
    
        if (deductRemainingMap.exists(_prodBOM.RecId))
        {
            deductRemaining = deductRemainingMap.lookup(_prodBOM.RecId);
        }
        else
        {
            pipProdReleaseBOM = PIPProdReleaseBOM::findProdBOM(_prodBOM.RecId);
    
            if (pipProdReleaseBOM.RecId)
            {
                deductRemaining = PmfQtyDataCarrier::newStandard(pipProdReleaseBOM.InventQty, pipProdReleaseBOM.CWInventQty);
            }
            else
            {
                deductRemaining = null;
            }
    
            deductRemainingMap.insert(_prodBOM.RecId, deductRemaining);
        }
    
        if (deductRemaining)
        {
            qtyToDeduct   = min(-_inventTrans.Qty, deductRemaining.parmInventQty());
            cwQtyToDeduct = min(-_inventTrans.PdsCWQty, deductRemaining.parmCwQty());
    
            _inventTrans.Qty      += qtyToDeduct;
            _inventTrans.PdsCWQty += cwQtyToDeduct;
    
            deductRemaining.parmInventQty(deductRemaining.parmInventQty() - qtyToDeduct);
            deductRemaining.parmCwQty(deductRemaining.parmCwQty() - cwQtyToDeduct);
        }
    
        return !(_inventTrans.Qty == 0 && _inventTrans.PdsCWQty == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdBOMCalc</Name>
				<Source><![CDATA[
    public ProdBOMCalc createProdBOMCalc(
        BOMCalcData             _bomCalcData,
        ProdBOM                 _prodBOM,
        ProdBOMConsumpProposal  _consumpProposal,
        BOMAutoConsump          _autoConsump,
        NoYes                   _includeConstantConsump,
        NoYes                   _skipAccError               = NoYes::No,
        boolean                 _isStart                    = false,
        boolean                 _isReportAsFinished         = false,
        NoYes                   _completePickListJournal    = NoYes::No)
    {
        var calc = ProdBOMCalc::pipNewBOMCalcData(_bomCalcData, _prodBOM, _consumpProposal, _autoConsump, _includeConstantConsump, _skipAccError, _isStart, _isReportAsFinished, _completePickListJournal);
        calc.parmPIPDeductReleasedProposal(prodJournalCreateBOM.parmPIPDeductReleasedProposal());
        calc.init();
        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDialogProperties</Name>
				<Source><![CDATA[
    public void initDialogProperties(Object _dialog)
    {
        DictClass dictClass = new DictClass(classNum(PIPProdJournalCreateBOMForm_Extension));
        dictClass.callStatic(methodStr(PIPProdJournalCreateBOMForm_Extension, parmPIPIsDispensingJournalForm), _dialog, prodJournalCreateBOM.parmPIPIsDispensingJournal());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotMissingPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_prodId"></param>
    /// <returns></returns>
    public boolean checkNotMissingPosting(ProdId _prodId)
    {
        return ProdJournalBOM::pipCheckNotMissingPosting(_prodId, prodJournalCreateBOM.parmPIPProdGenerationSource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultProperties</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_prodJournalCreateBOM"></param>
    public void setDefaultProperties(ProdJournalCreateBOM _prodJournalCreateBOM, Args _args)
    {
        _prodJournalCreateBOM.parmPIPIsDispensingJournal(PIPProdJournalCreateBOMImpl::callerIsDispensingJournal(_args));
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerIsDispensingJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the caller is a production journal form for a dispensing journal or a regular pick list journal.
    /// </summary>
    /// <param name="_args">
    ///    The arguments passed in to this class when it is run.
    /// </param>
    /// <returns>
    ///    <c>UnknownNoYes::Yes</c> if the caller is a dispensing ticket journal, <c>UnknownNoYes::No</c> if the caller is a
    ///    regular (non-dispensing ticket) picking list journal, or <c>UnknownNoYes::Unknown</c> if the caller is any
    ///    other journal type or a journal form that allows multiple different kinds of journals -- including both
    ///    dispensing ticket and pick list journal types.
    /// </returns>
    private static UnknownNoYes callerIsDispensingJournal(Args _args)
    {
        FormRun                 caller;
        Object                  callerObject;
        ProdJournalFormTable    prodJournalFormTable;
        UnknownNoYes            ret = UnknownNoYes::Unknown;
    
        caller = _args.caller() as FormRun;
        if (caller)
        {
            if (formHasMethod(caller, 'journalForm'))
            {
                callerObject = caller;
                // Caller may be a journal transaction form in AX7 instead of the journal header form so check for that first            
                if (callerObject.journalForm() is JournalFormTrans)
                {
                    JournalFormTrans journalFormTrans = callerObject.journalForm();
                    prodJournalFormTable = journalFormTrans.parmJournalFormTable();
                }
                else
                {
                    prodJournalFormTable = callerObject.journalForm();
                }
                if (prodJournalFormTable && prodJournalFormTable.pipIsJournalTypeFixed())
                {
                    ret = prodJournalFormTable.pipIsDispensingJournal() ? UnknownNoYes::Yes : UnknownNoYes::No;
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>