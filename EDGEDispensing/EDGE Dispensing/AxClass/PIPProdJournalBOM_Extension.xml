<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdJournalBOM_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(ProdJournalBOM))]
public final class PIPProdJournalBOM_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pipCheckDispensingItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if an item is allowed on the production journal BOM based on the dispensing status of the item.
    /// </summary>
    /// <param name="_inventTable">
    ///    A record in the <c>InventTable</c> table to check; optional. If not given this gets a record for the current item on this line.
    /// </param>
    /// <returns>
    ///    true if the item is allowed on the journal line based on the dispensing status of the item; otherwise, false.
    /// </returns>
    public boolean pipCheckDispensingItem(InventTable _inventTable = this.inventTable())
    {
        boolean dispensingJournal;
        boolean ret = true;
    
        dispensingJournal = ProdJournalTable::find(this.JournalId).PIPIsDispensingJournal;
        if (dispensingJournal && !_inventTable.pipIsDispensingControlled(this.ProdId))
        {
            ret = checkFailed(strFmt("@PIP939", _inventTable.ItemId));
        }
        else if (!dispensingJournal && _inventTable.pipIsDispensingControlled(this.ProdId))
        {
            ret = checkFailed(strFmt("@PIP940", _inventTable.ItemId));
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsDispensedItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if the item on this production journal BOM line is dispense controlled.
    /// </summary>
    /// <returns>
    ///    true if the item on this production journal BOM line is dispensed controlled; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display PIPDispensedItem pipIsDispensedItem()
    {
        return #PIPDispensingEnabled && this.inventTable().pipIsDispensingControlled(this.ProdId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipIsRecordSigned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value suitable for display indicating if this production journal line record has been electronically signed.
    /// </summary>
    /// <returns>
    ///    true if this production journal line has been electronically signed; otherwise, false.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display PIPSigningStatus pipIsRecordSigned()
    {
        return SIGSignatureLog::pipExistRecord(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipExistForJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if a production journal BOM line exists for the given journal ID.
    /// </summary>
    /// <param name="_journalId">
    ///    The journal ID to check.
    /// </param>
    /// <returns>
    ///    true if there is at least one production journal BOM line for the journal; otherwise, false.
    /// </returns>
    public static boolean pipExistForJournalId(ProdJournalId _journalId)
    {
        return _journalId
            && (select ProdJournalBOM
                where ProdJournalBOM.JournalId == _journalId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipJournalStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a value indicating if there is an open production BOM journal.
    /// </summary>
    /// <param name="_prodId">
    ///    The production order ID.
    /// </param>
    /// <param name="_forDispensing">
    ///    Determines if this should check for open dispensing tickets.
    /// </param>
    /// <returns>
    ///    A display value indicating if there are any open production BOM journals for the given parameters.
    /// </returns>
    public static PIPProdJournalStatusDisplay pipJournalStatusDisplay(ProdId _prodId, PIPIsDispensingJournal _forDispensing)
    {
        ProdJournalTable    prodJournalTable;
        ProdJournalBOM      prodJournalBOM;
    
        if (#PIPDispensingEnabled)
        {
            select firstOnly RecId from prodJournalBOM
                where prodJournalBOM.ProdId                         == _prodId
                exists join prodJournalTable
                    where prodJournalTable.JournalId                == prodJournalBOM.JournalId
                        && prodJournalTable.Posted                  == NoYes::No
                        && prodJournalTable.PIPIsDispensingJournal  == _forDispensing;
        }
    
        return prodJournalBOM.RecId ? PIPProdJournalStatusDisplay::Open : PIPProdJournalStatusDisplay::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipCheckNotMissingPosting</Name>
				<Source><![CDATA[
    public static boolean pipCheckNotMissingPosting(ProdId _prodId, PIPProdGenerationSource _generationSource)
    {
        ProdJournalTable    prodJournalTable;
        ProdJournalBOM      prodJournalBOM;
    
        boolean             ok = true;
    
        while select forceplaceholders prodJournalBOM
            group by ProdId, JournalId
            where prodJournalBOM.ProdId == _prodId
        exists join prodJournalTable
            where prodJournalTable.JournalId == prodJournalBOM.JournalId         
                && prodJournalTable.Posted   == NoYes::No
                && (prodJournalTable.PIPProdGenerationSource    == _generationSource
                    || prodJournalTable.PIPProdGenerationSource == PIPProdGenerationSource::None)
        {
            ok = checkFailed(strFmt("@SYS69105", ProdJournalType::Picklist, prodJournalBOM.JournalId));
        }
    
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pipDeleteProdIdLines</Name>
				<Source><![CDATA[
    public static void pipDeleteProdIdLines(ProdId _prodId, PIPProdGenerationSource _generationSource)
    {
        ProdJournalTable        prodJournalTable;
        ProdJournalTableData    prodJournalTableData = JournalTableData::newTable(prodJournalTable);
    
        ProdJournalBOM          prodJournalBOM;
        ProdJournalTransData    prodJournalTransData;
    
        ttsbegin;
    
        while select forupdate forceplaceholders prodJournalBOM
            where prodJournalBOM.ProdId == _prodId
        join forupdate prodJournalTable
            where prodJournalTable.JournalId    == prodJournalBOM.JournalId         
                && prodJournalTable.Posted      == NoYes::No
                && (prodJournalTable.PIPProdGenerationSource    == _generationSource
                    || prodJournalTable.PIPProdGenerationSource == PIPProdGenerationSource::None)
        {
            if (! prodJournalTransData)
            {
                prodJournalTransData = prodJournalTableData.journalStatic().newJournalTransData(prodJournalBOM,prodJournalTableData);
            }
    
            prodJournalTransData.delete();
            prodJournalTableData.journalTable().update();
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        boolean autoSetProposal = PIPThreadVariable::get(PDSBatchBalanceConfirm::SharedVarAutoSetProposal);
        if (autoSetProposal && this.BOMProposal == 0 && this.InventProposal == 0)
        {
            this.BOMProposal = this.BOMConsump;
            this.InventProposal = this.InventConsump;
        }

        next insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>