<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB80_PIPDispensing</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReleaseUpdateDB80_PIPDispensing extends ReleaseUpdateDB
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moduleName</Name>
				<Source><![CDATA[
    public ReleaseUpdateModule moduleName()
    {
        return "@PIP893";
    }

]]></Source>
			</Method>
			<Method>
				<Name>myVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// The script runs in any system with the source version earlier than D365 8.0.
    /// </summary>
    /// <returns>The script version.</returns>
    public sysReleasedVersion myVersion()
    {
        return sysReleasedVersion::v80;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTestAssociationMandatoryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the test instrument id to the scales device field and creates new scale devices for each unique test instrument id used as a scales device.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@PIP5094"),
    UpgradeScriptConfigKeyAttribute(configurationKeyStr(PIPDispensing)),
    UpgradeScriptStage(ReleaseUpdateScriptStage::PostSync),
    UpgradeScriptType(ReleaseUpdateScriptType::StandardScript),
    UpgradeScriptTableAttribute(tableStr(PIPDispensingTicketLine), false, true, true, false),
    UpgradeScriptTableAttribute(tableStr(PIPScalesDevice), true, false, false, false)]
    public void updateInventTestAssociationMandatoryFields()
    {
        PIPDispensingTicketLine dispensingTicketLine;
        PIPScalesDevice scalesDevice;

        // Create unique scales devices
        RecordInsertList scalesDeviceList = new RecordInsertList(tableNum(PIPScalesDevice), true);
        while select InventTestInstrumentId from dispensingTicketLine
            group by InventTestInstrumentId
            notexists join scalesDevice
                where scalesDevice.DeviceId == dispensingTicketLine.InventTestInstrumentId
        {
            InventTestInstrument inventTestInstrument = InventTestInstrument::find(dispensingTicketLine.InventTestInstrumentId);

            PIPScalesDevice insertScalesDevice;
            insertScalesDevice.initValue();
            insertScalesDevice.DeviceId = dispensingTicketLine.InventTestInstrumentId;
            insertScalesDevice.Description = inventTestInstrument.Description;
            scalesDeviceList.add(insertScalesDevice);
        }
        scalesDeviceList.insertDatabase();

        dispensingTicketLine.skipDataMethods(true);

        // Transfer content from the old field to the new field
        update_recordset dispensingTicketLine
            setting ScalesDeviceId = dispensingTicketLine.InventTestInstrumentId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>