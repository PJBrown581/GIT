<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PIPProdUpdStatusDecrease_StartUp_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(ProdUpdStatusDecrease_StartUp))]
public final class PIPProdUpdStatusDecrease_StartUp_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reverseBOMStartUp</Name>
				<Source><![CDATA[
    public void reverseBOMStartUp()
    {
        ProdJournalCreateBOM        prodJournalCreate;
        ProdJournalCheckPostBOM     prodJournalCheckPostBOM;
        ProdJournalTable            prodJournalTable;

        ProdTable prodTable = this.prodTable();

        // Reverse any dispensing controlled items on a dispensing picking list
        if (prodTable.pipHasDispensingControlledItem())
        {
            prodJournalCreate = ProdJournalCreateBOM::newStatusDecrease(prodTable.ProdId);
            prodJournalCreate.parmPIPProdGenerationSource(PIPProdGenerationSource::StartedUp);
            ProdJournalCreate.parmJournalNameId(prodTable.prodParametersDim().PIPDispensingJournalNameId);
            prodJournalCreate.parmPIPDeductReleasedProposal(true);
            prodJournalCreate.runOperation();
    
            prodJournalTable = prodJournalCreate.usedProdJournalTable();
    
            if (prodJournalTable.RecId && prodJournalTable.JournalId)
            {
                prodJournalCheckPostBOM = ProdJournalCheckPostBOM::newPostJournal(prodJournalTable.JournalId, true);
                prodJournalCheckPostBOM.parmPIPSkipDispenseProcessing(true);
                prodJournalCheckPostBOM.runOperation();
            }
        }
    
        // The base method with reverse any non-dispensing controlled items and do the remainder of the processing
        next reverseBOMStartUp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>