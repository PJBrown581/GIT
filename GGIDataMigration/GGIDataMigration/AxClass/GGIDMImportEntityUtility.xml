<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDMImportEntityUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.ExcelPackage;
using OfficeOpenXml.ExcelRange;
public static class GGIDMImportEntityUtility
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>removeString</Name>
				<Source><![CDATA[
    public static str removeString(str _mainString, str _removeString)
    {
        return strDel(_mainString,
                  strFind(_mainString, _removeString, 0, strLen(_removeString)),
                  strLen(_removeString));
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultDimension</Name>
				<Source><![CDATA[
     static DimensionDefault generateDefaultDimension(container _attr, container _value, boolean _createIfNotFound = true)
    {
        DimensionAttributeValueSetStorage valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionDefault result;
        int i;
        DimensionAttribute dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;
        //_attr is dimension name in table DimensionAttribute
        container conAttr = _attr;
        container conValue = _value;
        str dimValue;

        for (i = 1; i <= conLen(conAttr); i++)
        {
            dimensionAttribute = dimensionAttribute::findByName(conPeek(conAttr,i));

            if (dimensionAttribute.RecId == 0)
            {
                continue;
            }

            dimValue = conPeek(conValue,i);

            if (dimValue != "")
            {
                // _createIfNotFound is "true". A dimensionAttributeValue record will be created if not found.
                dimensionAttributeValue=
                dimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,dimValue,false,_createIfNotFound);

                // Add the dimensionAttibuteValue to the default dimension
                valueSetStorage.addItem(dimensionAttributeValue);
            }
        }
        result = valueSetStorage.save();
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMapper</Name>
				<Source><![CDATA[
    public static System.IO.Stream getMapper(str _fileName)
    {
        container record;
        str url = @"https://greenfieldethanol.sharepoint.com";
        str siteName = "/sites/ERPI0003/";
        str documentFolder = "Shared%20Documents/Data%20Migration/Maps/";
        str fileName = _fileName;
        //str fileName = "ProductSpecificTrackingDim.xlsx";
        //[url, siteName, documentFolder, fileName] = _parms;//If we create a parms container
        System.Byte[] reportBytes = new System.Byte[0]();
        System.UriBuilder builder = new System.UriBuilder(url);
        str extId = xUserInfo::getExternalId();
        Microsoft.Dynamics.AX.Framework.FileManagement.SharePointDocumentStorageProvider provider;
        Microsoft.Dynamics.AX.Framework.FileManagement.DocumentContents documentContents;
        Microsoft.Dynamics.AX.Framework.FileManagement.DocumentLocation documentLocation = new Microsoft.Dynamics.AX.Framework.FileManagement.DocumentLocation();
        provider = new Microsoft.Dynamics.AX.Framework.FileManagement.SharePointDocumentStorageProvider("greenfieldethanol.sharepoint.com", siteName, documentFolder, extId);
        System.Uri uri = new System.Uri(url + "" + siteName + "" + documentFolder + "" + fileName);
        System.Uri uri1 = new System.Uri(url + "" + siteName + "_api/Web/GetFileByServerRelativePath(decodedurl='" + siteName + documentFolder + fileName + "')");
        
        //WriteFile
        //Microsoft.Dynamics.AX.Framework.FileManagement.DocumentLocation location = provider.SaveFile(newGuid(), "PJB.xls", "application/vnd.ms-excel", _fileStream);
         
        documentLocation.NavigationUri = uri;
        documentLocation.AccessUri = uri1;
        
        System.Uri uriHere =   provider.GetExternalUri(documentLocation);
        documentContents = provider.GetFile(documentLocation);
                
        System.IO.Stream stream;
       
        if (documentContents)
        {
            System.IO.MemoryStream memoryStream2 = new System.IO.MemoryStream();
            System.IO.Stream stream12 = documentContents.Content;
            stream12.CopyTo(memoryStream2);
            System.Byte[] bytes112 = new System.Byte[0]();
            bytes112 = memoryStream2.ToArray();
            System.IO.MemoryStream memoryStream122 = new System.IO.MemoryStream(bytes112);
            container containerGet = Binary::constructFromMemoryStream(memoryStream2).getContainer();
            stream = Binary::constructFromContainer(containerGet).getMemoryStream();
        }

        return stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFiles</Name>
				<Source><![CDATA[
    public static void readFiles()
    {
        container record;
        str url = @"https://greenfieldethanol.sharepoint.com";
        str siteName = "/sites/ERPI0003/";
        str documentFolder = "Shared%20Documents/Data%20Migration/Maps/";        
        
        System.Byte[] reportBytes = new System.Byte[0]();
        System.UriBuilder builder = new System.UriBuilder(url);
        str extId = xUserInfo::getExternalId();
        Microsoft.Dynamics.AX.Framework.FileManagement.SharePointDocumentStorageProvider provider;
        Microsoft.Dynamics.AX.Framework.FileManagement.DocumentContents documentContents;
        Microsoft.Dynamics.AX.Framework.FileManagement.DocumentLocation documentLocation = new Microsoft.Dynamics.AX.Framework.FileManagement.DocumentLocation();
        provider = new Microsoft.Dynamics.AX.Framework.FileManagement.SharePointDocumentStorageProvider("greenfieldethanol.sharepoint.com", siteName, documentFolder, extId);
        System.Uri uri = new System.Uri(url + "" + siteName + "" + documentFolder);
        System.Uri uri1 = new System.Uri(url + "" + siteName + "_api/Web/GetFileByServerRelativePath(decodedurl='" + siteName + documentFolder + "')");
        
        
        documentLocation.NavigationUri = uri;
        documentLocation.AccessUri = uri1;
        //provider.
        
        documentContents = provider.GetFile(documentLocation);
                
        System.IO.Stream stream;
       
        if (documentContents)
        {
            System.IO.MemoryStream memoryStream2 = new System.IO.MemoryStream();
            System.IO.Stream stream12 = documentContents.Content;
            stream12.CopyTo(memoryStream2);
            System.Byte[] bytes112 = new System.Byte[0]();
            bytes112 = memoryStream2.ToArray();
            System.IO.MemoryStream memoryStream122 = new System.IO.MemoryStream(bytes112);
            container containerGet = Binary::constructFromMemoryStream(memoryStream2).getContainer();
            stream = Binary::constructFromContainer(containerGet).getMemoryStream();
        }

        //return stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductStagingFile</Name>
				<Source><![CDATA[
    public static System.IO.Stream getProductStagingFile(str _fileName = "D365%20Staging%20Sheet.xlsx")
    {
        return GGIDMImportEntityUtility::getTeamsFile(_fileName, "Products");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImportFile</Name>
				<Source><![CDATA[
    public static System.IO.Stream getImportFile(str _fileName)
    {
        return GGIDMImportEntityUtility::getTeamsFile(_fileName, @"Import%20Files");   
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductMappings</Name>
				<Source><![CDATA[
    public static System.IO.Stream getProductMappings(str _fileName = "ProductMappings.xlsx")
    {
        return GGIDMImportEntityUtility::getTeamsFile(_fileName, "Maps");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationCodesMappings</Name>
				<Source><![CDATA[
    public static System.IO.Stream getLocationCodesMappings(str _fileName = "Warehouses.xlsx")
    {
        return GGIDMImportEntityUtility::getTeamsFile(_fileName, "Maps");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorMappings</Name>
				<Source><![CDATA[
    public static System.IO.Stream getVendorMappings(str _fileName = "Vendors.xlsx")
    {
        return GGIDMImportEntityUtility::getTeamsFile(_fileName, "Maps");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerMappings</Name>
				<Source><![CDATA[
    public static System.IO.Stream getCustomerMappings(str _fileName = "Customers.xlsx")
    {
        return GGIDMImportEntityUtility::getTeamsFile(_fileName, "Maps");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWarehouseMappings</Name>
				<Source><![CDATA[
    public static System.IO.Stream getWarehouseMappings(str _fileName = "Warehouses.xlsx")
    {
        return GGIDMImportEntityUtility::getTeamsFile(_fileName, "Maps");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQualityMappings</Name>
				<Source><![CDATA[
    public static System.IO.Stream getQualityMappings(str _fileName = "QualityMissingItems.xlsx")
    {
        return GGIDMImportEntityUtility::getTeamsFile(_fileName, "Products/Quality");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTeamsFile</Name>
				<Source><![CDATA[
    public static System.IO.Stream getTeamsFile(str _fileName, str _directory)
    {
        container record;
        str url = @"https://greenfieldethanol.sharepoint.com";
          str siteName = "/sites/ERPI0003/";
        str documentFolder = "Shared%20Documents/Build%20Phase/Data%20Migration/"+_directory+"/";
        str fileName = _fileName;
        System.Byte[] reportBytes = new System.Byte[0]();
        System.UriBuilder builder = new System.UriBuilder(url);
        str extId = xUserInfo::getExternalId();
        Microsoft.Dynamics.AX.Framework.FileManagement.SharePointDocumentStorageProvider provider;
        Microsoft.Dynamics.AX.Framework.FileManagement.DocumentContents documentContents;
        Microsoft.Dynamics.AX.Framework.FileManagement.DocumentLocation documentLocation = new Microsoft.Dynamics.AX.Framework.FileManagement.DocumentLocation();
        provider = new Microsoft.Dynamics.AX.Framework.FileManagement.SharePointDocumentStorageProvider("greenfieldethanol.sharepoint.com", siteName, documentFolder, extId);
        System.Uri uri = new System.Uri(url + "" + siteName + "" + documentFolder + "" + fileName);
        System.Uri uri1 = new System.Uri(url + "" + siteName + "_api/Web/GetFileByServerRelativePath(decodedurl='" + siteName + documentFolder + fileName + "')");
        
        //WriteFile
        //Microsoft.Dynamics.AX.Framework.FileManagement.DocumentLocation location = provider.SaveFile(newGuid(), "PJB.xls", "application/vnd.ms-excel", _fileStream);
         
        documentLocation.NavigationUri = uri;
        documentLocation.AccessUri = uri1;
        
        documentContents = provider.GetFile(documentLocation);
                
        System.IO.Stream stream;
       
        if (documentContents)
        {
            System.IO.MemoryStream memoryStream2 = new System.IO.MemoryStream();
            System.IO.Stream stream12 = documentContents.Content;
            stream12.CopyTo(memoryStream2);
            System.Byte[] bytes112 = new System.Byte[0]();
            bytes112 = memoryStream2.ToArray();
            System.IO.MemoryStream memoryStream122 = new System.IO.MemoryStream(bytes112);
            container containerGet = Binary::constructFromMemoryStream(memoryStream2).getContainer();
            stream = Binary::constructFromContainer(containerGet).getMemoryStream();
        }

        return stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMap</Name>
				<Source><![CDATA[
    public static Map populateMap(ExcelWorksheet  _worksheet)
    {
        OfficeOpenXml.ExcelRange mapRange;
        System.ArgumentException ex;
        Map valueMap = new Map(Types::String, Types::String);
        int rowcount;

        mapRange  = _worksheet.Cells;
        rowCount  = _worksheet.Dimension.End.Row - _worksheet.Dimension.Start.Row + 1;
            
        for (int y = 2; y<= rowCount; y++)
        {
            valueMap.insert(strLTrim(strRTrim(any2Str(mapRange.get_Item(y,1).Value))), strLTrim(strRTrim(any2Str(mapRange.get_Item(y,2).Value))));
        }

        return valueMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>