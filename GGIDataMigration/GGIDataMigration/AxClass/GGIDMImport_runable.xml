<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDMImport_runable</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.ExcelPackage;
using OfficeOpenXml.ExcelRange;
using Microsoft.Dynamics.Platform.Integration.SharePoint;

class GGIDMImport_runable
{ 

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {   
        GGICustomerLegacyAddressRelation custAddressRelation;
        DocuRef docuRef;
        FreeNotesTable_IT freeNotesTable;
        CustVendExternalItem custVendExternalItem;
        BOM bom;

        ttsbegin;
        while select forupdate custVendExternalItem where custVendExternalItem.InventDimId == ''
        {
            custVendExternalItem.InventDimId = 'AllBlank';
            custVendExternalItem.update();
        }
        ttscommit;

        ttsbegin;
        while select forupdate freeNotesTable where freeNotesTable.ItemCode == 0 && freeNotesTable.CustVendCode == 2 &&   freeNotesTable.CustVendRelation == ''
        {
            freeNotesTable.HeaderLines = 1;
            freeNotesTable.update();
        }
        ttscommit;
                           

        ttsbegin;
        while select forupdate bom 
        {
            bom.PDSInheritEndItemShelfLife = NoYes::No;
            bom.update();
        }
        ttscommit;

    
  
        //Customer Tax Groups
        //GGIDMImportEntity_CustomerTaxSetup importCustomerTaxSetup = GGIDMImportEntity_CustomerTaxSetup::construct();
        //importCustomerTaxSetup.processEntity();

        //Customer Advanced Notes
        //GGIDMImportEntity_ProductNotesAdvanced importCustomerNotesAdvanced = GGIDMImportEntity_ProductNotesAdvanced::construct();
        //importCustomerNotesAdvanced.processEntity();

        //Customer Invoice Contacts
        //GGIDMImportEntity_CustomerContacts importCustomerContactsInvoice = GGIDMImportEntity_CustomerContacts::construct(GGIDMImportEntityUtility::getImportFile("InvoiceEmails.xlsx"), "Invoice");
        //importCustomerContactsInvoice.processEntity();

        //Permits/Documents
        //GGIDMImportEntity_CustTemp importTemp = GGIDMImportEntity_CustTemp::construct();
        //importTemp.processEntity();      


        //Pricing - Trade Agreements
        //GGIDMImportEntity_ProductPricing importPricing = GGIDMImportEntity_ProductPricing::construct();
        //importPricing.processEntity();

        //Customer Addresses
        //GGIDMImportEntity_CustomerAddressAdd importCustomerAddresses = GGIDMImportEntity_CustomerAddressAdd::construct();
        //importCustomerAddresses.processEntity();

        //Customer Mods
        //GGIDMImportEntity_CustomerV2_Mod importCustomers = GGIDMImportEntity_CustomerV2_Mod::construct(GGIDMImportEntityUtility::getImportFile("Customers.xlsx"));
        //importCustomers.processEntity();

        //Customer Addresse Mods
        //GGIDMImportEntity_CustomerAddress_Mod importCustomerAddresseMods = GGIDMImportEntity_CustomerAddress_Mod::construct();
        //importCustomerAddresseMods.processEntity();

        //Permits
        //GGIDMImportEntity_Permits importPermits = GGIDMImportEntity_Permits::construct(GGIDMImportEntityUtility::getImportFile("Permits.xlsx"));
        //importPermits.processEntity();
        
        //Permits/Documents
        //GGIDMImportEntity_PermitsDocuments importPermitDocuments = GGIDMImportEntity_PermitsDocuments::construct();
        //importPermitDocuments.processEntity();

        //Customer AuthBuyer Contacts
        //GGIDMImportEntity_CustomerContacts importCustomerContactsAuthBuyer = GGIDMImportEntity_CustomerContacts::construct(GGIDMImportEntityUtility::getImportFile("CustomersAuthorizedBuyers.xlsx"), "Authorized buyer (DEA)");
        //importCustomerContactsAuthBuyer.processEntity();

        //Customer CoA Contacts
        //GGIDMImportEntity_CustomerContacts importCustomerContactsCOA = GGIDMImportEntity_CustomerContacts::construct(GGIDMImportEntityUtility::getImportFile("CustomerContactsCOA.xlsx"), "CofA");
        //importCustomerContactsCOA.processEntity();

        //Customer Items
        //GGIDMImportEntity_CustomerItemNumbers importCustomerItems = GGIDMImportEntity_CustomerItemNumbers::construct(GGIDMImportEntityUtility::getImportFile("CustomerItems.xlsx"));
        //importCustomerItems.processEntity();

         /*
        //Customer Notes
        GGIDMImportEntity_CustomerNotes importCustomerNotes = GGIDMImportEntity_CustomerNotes::construct(GGIDMImportEntityUtility::getImportFile("CustomerNotes.xlsx"));
        importCustomerNotes.processEntity();
        importCustomerNotes = GGIDMImportEntity_CustomerNotes::construct(GGIDMImportEntityUtility::getImportFile("CustomerNotesSpecialProcedures.xlsx"));
        importCustomerNotes.processEntity();
        importCustomerNotes = GGIDMImportEntity_CustomerNotes::construct(GGIDMImportEntityUtility::getImportFile("CustomerNotesComments.xlsx"));
        importCustomerNotes.processEntity();
        */

            
     
       
        //GGIDMImportEntity_CustomerNotes importCustomerNotes = GGIDMImportEntity_CustomerNotes::construct(GGIDMImportEntityUtility::getImportFile("CustomerNotesSpecialProcedures.xlsx"));
        //importCustomerNotes.processEntity();

        //RailCars
        //GGIDMImportEntity_RailCars importEntityRailCars = GGIDMImportEntity_RailCars::construct();
        //importEntityRailCars.processEntity();

        //RailCars
        //GGIDMImportEntity_RailCarGuage importEntityRailCarGauge = GGIDMImportEntity_RailCarGuage::construct();
        //importEntityRailCarGauge.processEntity();


     
        /*
        
        Args argsVendor, argsVendorBanking, argsVendorEmployeeBanking,  //Vendors
            argsCustomers, argsCustomerAddresses, argsCustomerContactsAuthBuyer, argsPermits, argsCustomerNotes, argsCustomerNotesSpecialProcedures, argsCustomerNotesComments, argsCustomerNotesAdvanced,//Customers
            argsProducts, argsUOM, argsHAZ, argsCategories, //Products
            argsCOA, argsQualityGroups, argsQualityAssociation, argsQualityProductSpecificBatchAttributes, //Quality              
            argsFormula, argsFormulaLines, //Formuals
            argsSKUS, //SKUS
            argsRoutes, //Routes
            argsOpenSales, //Sales
            argsOpenPurch; //Purch
        BatchHeader batchHeaderFull,
            batchHeaderVendors,
            batchHeaderCustomer,
            batchHeaderCustomerAddOns,
            batchHeaderCustomerPermits,
            batchHeaderProducts,
            batchHeaderQuality,
            batchHeaderFormulas, 
            batchHeaderSKUs,  
            batchHeaderRoutes,
            batchHeaderOpenSales,
            batchHeaderOpenPurch;
        BatchJob batchJob;
        SysOperationServiceController controllerVendor, controllerVendorBanking, controllerVendorEmployeeBanking, //vendors
            controllerCustomers, controllerCustomerAddresses, controllerCustomerContactsAuthBuyer, controllerPermits, controllerCustomerNotes, controllerCustomerNotesSpecialProcedures, controllerCustomerNotesComments, controllerCustomerNotesAdvanced, //Customers
            controllerProducts, controllerUOM, controllerHAZ, controllerCategories, //Products
            controllerCOA, controllerQualityAssociation, controllerQualityGroups, controllerQualityProductSpecificBatchAttributes, //Quality             
            controllerFormula, controllerFormulaLines, //Formuals
            controllerSKUs,   //SKUs
            controllerRoutes, //Routes
            controllerOpenSales,  //Sales
            controllerOpenPurch;  //Purch

        batchHeaderFull = BatchHeader::construct();
        batchHeaderFull.parmCaption("Data migration batch processing (Entirety of static master data)");
        batchHeaderFull.parmBatchGroup("DM");

        batchHeaderVendors = BatchHeader::construct();
        batchHeaderVendors.parmCaption("Data migration batch processing (Vendors)");
        batchHeaderVendors.parmBatchGroup("DM");
        
        batchHeaderCustomer = BatchHeader::construct();
        batchHeaderCustomer.parmCaption("Data migration batch processing (Customers)");
        batchHeaderCustomer.parmBatchGroup("DM");

        batchHeaderCustomerAddOns = BatchHeader::construct();
        batchHeaderCustomerAddOns.parmCaption("Data migration batch processing (Customer AddOns)");
        batchHeaderCustomerAddOns.parmBatchGroup("DM");

        batchHeaderCustomerPermits = BatchHeader::construct();
        batchHeaderCustomerPermits.parmCaption("Data migration batch processing (Customer Permits)");
        batchHeaderCustomerPermits.parmBatchGroup("DM");

        batchHeaderProducts = BatchHeader::construct();
        batchHeaderProducts.parmCaption("Data migration batch processing (Products)");
        batchHeaderProducts.parmBatchGroup("DM");      
   
        batchHeaderQuality = BatchHeader::construct();
        batchHeaderQuality.parmCaption("Data migration batch processing (Quality)");
        batchHeaderQuality.parmBatchGroup("DM");

        batchHeaderFormulas = BatchHeader::construct();
        batchHeaderFormulas.parmCaption("Data migration batch processing (Formulas)");
        batchHeaderFormulas.parmBatchGroup("DM");         
         
        batchHeaderSKUs = BatchHeader::construct();
        batchHeaderSKUs.parmCaption("Data migration batch processing (SKUs)");
        batchHeaderSKUs.parmBatchGroup("DM");

        batchHeaderRoutes = BatchHeader::construct();
        batchHeaderRoutes.parmCaption("Data migration batch processing (Routes)");
        batchHeaderRoutes.parmBatchGroup("DM");

        batchHeaderOpenSales = BatchHeader::construct();
        batchHeaderOpenSales.parmCaption("Data migration batch processing (Open Sales)");
        batchHeaderOpenSales.parmBatchGroup("DM");

        batchHeaderOpenPurch = BatchHeader::construct();
        batchHeaderOpenPurch.parmCaption("Data migration batch processing (Open Purch)");
        batchHeaderOpenPurch.parmBatchGroup("DM");

        //Batch Tasks
        //Vendor
        argsVendor = new Args();
        argsVendor.parmEnum(GGIDMImportEntityType::Vendors);
        controllerVendor = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerVendor.parmLoadFromSysLastValue(false); 
        controllerVendor.parmArgs(argsVendor);
        controllerVendor.parmDialogCaption("Vendor import");

        //Vendor banking        
        argsVendorBanking = new Args();
        argsVendorBanking.parmEnum(GGIDMImportEntityType::VendorBankAccount);
        controllerVendorBanking = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerVendorBanking.parmLoadFromSysLastValue(false); 
        controllerVendorBanking.parmArgs(argsVendorBanking);
        controllerVendorBanking.parmDialogCaption("Vendor banking import");

        argsVendorEmployeeBanking = new Args();
        argsVendorEmployeeBanking.parmEnum(GGIDMImportEntityType::VendorEmployeeBankAccount);
        controllerVendorEmployeeBanking = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerVendorEmployeeBanking.parmLoadFromSysLastValue(false);
        controllerVendorEmployeeBanking.parmArgs(argsVendorEmployeeBanking);
        controllerVendorEmployeeBanking.parmDialogCaption("Vendor employee banking import");         
        
        //Customers
        argsCustomers = new Args();
        argsCustomers.parmEnum(GGIDMImportEntityType::Customers);
        controllerCustomers = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCustomers.parmLoadFromSysLastValue(false);
        controllerCustomers.parmArgs(argsCustomers);
        controllerCustomers.parmDialogCaption("Customer import");

        argsCustomerAddresses = new Args();
        argsCustomerAddresses.parmEnum(GGIDMImportEntityType::CustomerAddresses);
        controllerCustomerAddresses = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCustomerAddresses.parmLoadFromSysLastValue(false);
        controllerCustomerAddresses.parmArgs(argsCustomerAddresses);
        controllerCustomerAddresses.parmDialogCaption("Customer address import");

        argsCustomerContactsAuthBuyer = new Args();
        argsCustomerContactsAuthBuyer.parmEnum(GGIDMImportEntityType::CustomerContactAuthBuyer);
        controllerCustomerContactsAuthBuyer = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCustomerContactsAuthBuyer.parmLoadFromSysLastValue(false);
        controllerCustomerContactsAuthBuyer.parmArgs(argsCustomerContactsAuthBuyer);
        controllerCustomerContactsAuthBuyer.parmDialogCaption("Customer authorized buyer import");

        argsPermits = new Args();
        argsPermits.parmEnum(GGIDMImportEntityType::Permits);
        controllerPermits = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerPermits.parmLoadFromSysLastValue(false);
        controllerPermits.parmArgs(argsPermits);
        controllerPermits.parmDialogCaption("Customer permit import");

        argsCustomerNotes = new Args();
        argsCustomerNotes.parmEnum(GGIDMImportEntityType::CustomerNotes);
        controllerCustomerNotes = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCustomerNotes.parmLoadFromSysLastValue(false);
        controllerCustomerNotes.parmArgs(argsCustomerNotes);
        controllerCustomerNotes.parmDialogCaption("Customer notes import");

        argsCustomerNotesAdvanced = new Args();
        argsCustomerNotesAdvanced.parmEnum(GGIDMImportEntityType::CustomerNotesAdvanced);
        controllerCustomerNotesAdvanced = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCustomerNotesAdvanced.parmLoadFromSysLastValue(false);
        controllerCustomerNotesAdvanced.parmArgs(argsCustomerNotesAdvanced);
        controllerCustomerNotesAdvanced.parmDialogCaption("Customer advanced notes import");

        argsCustomerNotesComments = new Args();
        argsCustomerNotesComments.parmEnum(GGIDMImportEntityType::CustomerNotesComments);
        controllerCustomerNotesComments = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCustomerNotesComments.parmLoadFromSysLastValue(false);
        controllerCustomerNotesComments.parmArgs(argsCustomerNotesComments);
        controllerCustomerNotesComments.parmDialogCaption("Customer note comments import");

        argsCustomerNotesSpecialProcedures = new Args();
        argsCustomerNotesSpecialProcedures.parmEnum(GGIDMImportEntityType::CustomerNotesSpecialProceedures);
        controllerCustomerNotesSpecialProcedures = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCustomerNotesSpecialProcedures.parmLoadFromSysLastValue(false);
        controllerCustomerNotesSpecialProcedures.parmArgs(argsCustomerNotesSpecialProcedures);
        controllerCustomerNotesSpecialProcedures.parmDialogCaption("Customer note comments import");

        //Products
        argsProducts = new Args();
        argsProducts.parmEnum(GGIDMImportEntityType::Products);
        controllerProducts = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerProducts.parmLoadFromSysLastValue(false);
        controllerProducts.parmArgs(argsProducts);
        controllerProducts.parmDialogCaption("Product import");

        argsUOM = new Args();
        argsUOM.parmEnum(GGIDMImportEntityType::UOM);
        controllerUOM = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerUOM.parmLoadFromSysLastValue(false);
        controllerUOM.parmArgs(argsUOM);
        controllerUOM.parmDialogCaption("Product UOM import");

        argsHAZ = new Args();
        argsHAZ.parmEnum(GGIDMImportEntityType::ProductHAZ);
        controllerHAZ = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerHAZ.parmLoadFromSysLastValue(false);
        controllerHAZ.parmArgs(argsHAZ);
        controllerHAZ.parmDialogCaption("Product HAZ import");

        argsCategories = new Args();
        argsCategories.parmEnum(GGIDMImportEntityType::ProductCategories);
        controllerCategories = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCategories.parmLoadFromSysLastValue(false);
        controllerCategories.parmArgs(argsCategories);
        controllerCategories.parmDialogCaption("Product Catagory import");         

        //Quality
        argsCOA = new Args();
        argsCOA.parmEnum(GGIDMImportEntityType::QualityCOA);
        controllerCOA = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerCOA.parmLoadFromSysLastValue(false);
        controllerCOA.parmArgs(argsCOA);
        controllerCOA.parmDialogCaption("Quality COA import");

        argsQualityAssociation = new Args();
        argsQualityAssociation.parmEnum(GGIDMImportEntityType::QualityAssociations);
        controllerQualityAssociation = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerQualityAssociation.parmLoadFromSysLastValue(false);
        controllerQualityAssociation.parmArgs(argsQualityAssociation);
        controllerQualityAssociation.parmDialogCaption("Quality Association import");

        argsQualityGroups = new Args();
        argsQualityGroups.parmEnum(GGIDMImportEntityType::QualityGroups);
        controllerQualityGroups = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerQualityGroups.parmLoadFromSysLastValue(false);
        controllerQualityGroups.parmArgs(argsQualityGroups);
        controllerQualityGroups.parmDialogCaption("Quality Groups import");

        argsQualityProductSpecificBatchAttributes = new Args();
        argsQualityProductSpecificBatchAttributes.parmEnum(GGIDMImportEntityType::QualityBatchAttributes);
        controllerQualityProductSpecificBatchAttributes = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerQualityProductSpecificBatchAttributes.parmLoadFromSysLastValue(false);
        controllerQualityProductSpecificBatchAttributes.parmArgs(argsQualityProductSpecificBatchAttributes);
        controllerQualityProductSpecificBatchAttributes.parmDialogCaption("Quality Product Specific Batch Attribute import");
        
        //Formulas
        argsFormula = new Args();
        argsFormula.parmEnum(GGIDMImportEntityType::Permits);
        controllerFormula = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerFormula.parmLoadFromSysLastValue(false);
        controllerFormula.parmArgs(argsFormula);
        controllerFormula.parmDialogCaption("Formulas header import");

        argsFormulaLines = new Args();
        argsFormulaLines.parmEnum(GGIDMImportEntityType::Permits);
        controllerFormulaLines = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerFormulaLines.parmLoadFromSysLastValue(false);
        controllerFormulaLines.parmArgs(argsFormulaLines);
        controllerFormulaLines.parmDialogCaption("Formulas lines import");

        //SKUs
        argsSKUs = new Args();
        argsSKUs.parmEnum(GGIDMImportEntityType::ProductSKUs);
        controllerSKUs = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerSKUs.parmLoadFromSysLastValue(false);
        controllerSKUs.parmArgs(argsSKUs);
        controllerSKUs.parmDialogCaption("Product SKU import");

        //Routes
        argsRoutes = new Args();
        argsRoutes.parmEnum(GGIDMImportEntityType::Permits);
        controllerRoutes = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controllerRoutes.parmLoadFromSysLastValue(false);
        controllerRoutes.parmArgs(argsRoutes);
        controllerRoutes.parmDialogCaption("Routes import");

        //

        /*Template
        args... = new Args();
        args....parmEnum(GGIDMImportEntityType::);
        controller... = new SysOperationServiceController(
        classStr(GGIDMImportEntityBaseService),
        methodStr(GGIDMImportEntityBaseService, processOperation),
        SysOperationExecutionMode::Synchronous);
        controller......parmLoadFromSysLastValue(false); 
        controller.....parmArgs(args...);
        controller.....parmDialogCaption("");
        */
        
        
        
        //add the batch tasks to the batch header
        //ALL
        batchHeaderFull.addTask(controllerVendor);
        batchHeaderFull.addTask(controllerVendorBanking);
        batchHeaderFull.addTask(controllerVendorEmployeeBanking);
        batchHeaderFull.addDependency(controllerVendorBanking, controllerVendor,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerVendorEmployeeBanking, controllerVendor,BatchDependencyStatus::Finished);
        batchHeaderFull.addTask(controllerProducts);
        batchHeaderFull.addTask(controllerUOM);
        batchHeaderFull.addTask(controllerHAZ);
        batchHeaderFull.addTask(controllerCategories);
        batchHeaderFull.addDependency(controllerProducts, controllerVendor,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerUOM, controllerProducts,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerCategories, controllerProducts,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerHAZ, controllerProducts,BatchDependencyStatus::Finished);
        batchHeaderFull.addTask(controllerCOA);
        batchHeaderFull.addTask(controllerQualityAssociation);
        batchHeaderFull.addTask(controllerQualityGroups);
        batchHeaderFull.addTask(controllerQualityProductSpecificBatchAttributes);
        batchHeaderFull.addDependency(controllerCOA, controllerProducts,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerQualityAssociation, controllerProducts,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerQualityGroups, controllerQualityAssociation,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerQualityProductSpecificBatchAttributes, controllerQualityGroups,BatchDependencyStatus::Finished);
        batchHeaderFull.addTask(controllerFormula);
        batchHeaderFull.addTask(controllerFormulaLines);
        batchHeaderFull.addDependency(controllerFormula, controllerQualityProductSpecificBatchAttributes,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerFormulaLines, controllerFormula,BatchDependencyStatus::Finished);
        batchHeaderFull.addTask(controllerSKUs);
        batchHeaderFull.addDependency(controllerSKUs, controllerFormulaLines,BatchDependencyStatus::Finished);
        batchHeaderFull.addTask(controllerRoutes);
        batchHeaderFull.addDependency(controllerRoutes, controllerSKUs,BatchDependencyStatus::Finished);
        batchHeaderFull.addTask(controllerCustomers);
        batchHeaderFull.addTask(controllerCustomerAddresses);
        batchHeaderFull.addTask(controllerCustomerContactsAuthBuyer);
        batchHeaderFull.addTask(controllerCustomerNotes);
        batchHeaderFull.addTask(controllerCustomerNotesComments);
        batchHeaderFull.addTask(controllerCustomerNotesSpecialProcedures);
        batchHeaderFull.addTask(controllerCustomerNotesAdvanced);
        //batchHeaderFull.addTask(controllerPermits);
        batchHeaderFull.addDependency(controllerCustomers, controllerSKUs,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerCustomerAddresses, controllerCustomers,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerCustomerContactsAuthBuyer, controllerCustomerAddresses,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerCustomerNotes, controllerCustomerAddresses,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerCustomerNotesComments, controllerCustomerAddresses,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerCustomerNotesSpecialProcedures, controllerCustomerAddresses,BatchDependencyStatus::Finished);
        batchHeaderFull.addDependency(controllerCustomerNotesAdvanced, controllerCustomerAddresses,BatchDependencyStatus::Finished);
        //batchHeaderFull.addDependency(controllerPermits, controllerCustomerAddresses,BatchDependencyStatus::Finished);
   
       
         
        //Vendor
        batchHeaderVendors.addTask(controllerVendor);
        batchHeaderVendors.addTask(controllerVendorBanking);
        batchHeaderVendors.addTask(controllerVendorEmployeeBanking);
        batchHeaderVendors.addDependency(controllerVendorBanking, controllerVendor,BatchDependencyStatus::Finished);
        batchHeaderVendors.addDependency(controllerVendorEmployeeBanking, controllerVendorBanking,BatchDependencyStatus::Finished);

        //Customers          
        batchHeaderCustomer.addTask(controllerCustomers);
        batchHeaderCustomerAddOns.addTask(controllerCustomerAddresses);
        batchHeaderCustomerAddOns.addTask(controllerCustomerContactsAuthBuyer);
        batchHeaderCustomerAddOns.addTask(controllerCustomerNotes);
        batchHeaderCustomerAddOns.addTask(controllerCustomerNotesComments);
        batchHeaderCustomerAddOns.addTask(controllerCustomerNotesSpecialProcedures);
        batchHeaderCustomerAddOns.addTask(controllerCustomerNotesAdvanced);       
        batchHeaderCustomerAddOns.addDependency(controllerCustomerContactsAuthBuyer, controllerCustomerAddresses,BatchDependencyStatus::Finished);
        batchHeaderCustomerAddOns.addDependency(controllerCustomerNotes, controllerCustomerContactsAuthBuyer,BatchDependencyStatus::Finished);
        batchHeaderCustomerAddOns.addDependency(controllerCustomerNotesComments, controllerCustomerNotes,BatchDependencyStatus::Finished);
        batchHeaderCustomerAddOns.addDependency(controllerCustomerNotesSpecialProcedures, controllerCustomerNotesComments,BatchDependencyStatus::Finished);
        batchHeaderCustomerAddOns.addDependency(controllerCustomerNotesAdvanced, controllerCustomerAddresses,BatchDependencyStatus::Finished);
        batchHeaderCustomerPermits.addTask(controllerPermits);
       
        //Products
        batchHeaderProducts.addTask(controllerProducts);         
        batchHeaderProducts.addTask(controllerUOM);
        batchHeaderProducts.addTask(controllerHAZ);
        batchHeaderProducts.addTask(controllerCategories); 
        batchHeaderProducts.addDependency(controllerUOM, controllerProducts,BatchDependencyStatus::Finished);
        batchHeaderProducts.addDependency(controllerCategories, controllerUOM,BatchDependencyStatus::Finished);
        batchHeaderProducts.addDependency(controllerHAZ, controllerCategories,BatchDependencyStatus::Finished);
       
        //Quality
        batchHeaderQuality.addTask(controllerCOA);
        batchHeaderQuality.addTask(controllerQualityAssociation);
        batchHeaderQuality.addTask(controllerQualityGroups);
        batchHeaderQuality.addTask(controllerQualityProductSpecificBatchAttributes);   
        batchHeaderQuality.addDependency(controllerQualityAssociation, controllerCOA,BatchDependencyStatus::Finished);
        batchHeaderQuality.addDependency(controllerQualityGroups, controllerQualityAssociation,BatchDependencyStatus::Finished);
        batchHeaderQuality.addDependency(controllerQualityProductSpecificBatchAttributes, controllerQualityGroups,BatchDependencyStatus::Finished);        
        
        //Formulas
        batchHeaderFormulas.addTask(controllerFormula);
        batchHeaderFormulas.addTask(controllerFormulaLines);        
        batchHeaderFormulas.addDependency(controllerFormulaLines, controllerFormula,BatchDependencyStatus::Finished);

        //SKUs
        batchHeaderSKUs.addTask(controllerSKUs);

        //Routes
        batchHeaderRoutes.addTask(controllerRoutes);        
           
        //save the batch
        batchHeaderFull.save();
        batchHeaderVendors.save();
        batchHeaderCustomer.save();
        batchHeaderCustomerAddOns.save();
        batchHeaderCustomerPermits.save();
        batchHeaderProducts.save();
        batchHeaderFormulas.save();
        batchHeaderQuality.save();
        batchHeaderSKUs.save();
        batchHeaderRoutes.save();
        

        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderFull.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }
        
        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderVendors.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }

        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderCustomer.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }

        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderCustomerAddOns.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }

        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderCustomerPermits.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }

        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderProducts.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }

        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderQuality.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }
        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderFormulas.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }

        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderSKUs.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }

        select forupdate firstOnly batchJob where batchJob.RecId == batchHeaderRoutes.parmBatchHeaderId();

        if(batchJob)
        {
            ttsbegin;
            batchJob.Status = BatchStatus::Hold;
            batchJob.update();
            ttscommit;
        }
        */
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>