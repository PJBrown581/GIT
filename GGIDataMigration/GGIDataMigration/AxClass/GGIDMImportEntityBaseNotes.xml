<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDMImportEntityBaseNotes</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.ExcelPackage;
using OfficeOpenXml.ExcelRange;

class GGIDMImportEntityBaseNotes
{  
    System.IO.Stream            stream;
    ExcelSpreadsheetName        sheet;       
    Map                         csvHeaderMap = new Map(Types::Enum, Types::Int64);
    Map                         csvHeaderMapInt = new Map(Types::Int64, Types::Int64);
    container                   csvRecord;
    anytype                     entityType;
    container                   dimAttribute, dimValue;  
   
    public SysDictEnum                 sysDictEnum;
    public System.IO.Stream            fileStream;  
    public boolean              hasMultipleSheets;
    public Map mapSTCC, mapChargesGroup, mapUOM, mapNMFC, mapSDA, mapCDA, mapSerial, mapComponentType, mapProductLine, mapPackageSegment, mapIsUnitCostVariantSpecific, mapTTBArticleType, mapProductLegacyId;
    public Set setProductLegacyId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processEntity</Name>
				<Source><![CDATA[
    public void processEntity()
    {
        container               record;
        
        using (ExcelPackage Package = new ExcelPackage(fileStream))
        {
            int rowCount, i;
            ExcelWorksheet  worksheet;
            OfficeOpenXml.ExcelRange range;
            
            Package.Load(fileStream);
            for(int y=1; y<=package.get_Workbook().get_Worksheets().Count; y++)
            {
                worksheet       = package.get_Workbook().get_Worksheets().get_Item(y);
                range  = worksheet.Cells;
                rowCount = worksheet.Dimension.End.Row - worksheet.Dimension.Start.Row + 1;
                record = conNull();
                for(i = 1; i <= worksheet.Dimension.End.Column; i++)
                {
                    record += [range.get_Item(1,i).Value];
                    /*
                    if(worksheet.Column(i).Hidden == 0)
                    {
                        record += [range.get_Item(1,i).Value]; // 1 = First Row, i = Column Number
                    }
                    */
                }
                if(this.sysDictEnum)
                {
                    this.validateTemplate(record, this.sysDictEnum);
                }
                try
                {
                    if((y==1 || this.hasMultipleSheets == NoYes::Yes) && !(worksheet.Name like '*NotImporting*') && worksheet.Hidden == 0)
                    {
                        this.processWorkSheet(worksheet);
                    }
                }
                catch
                {
                    error(CLRInterop::getLastException().tostring());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWorkSheet</Name>
				<Source><![CDATA[
    public void processWorkSheet(ExcelWorksheet  _worksheet)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTemplate</Name>
				<Source><![CDATA[
    protected void validateTemplate(container _record, SysDictEnum _dictEnum)
    {        
        str errorFields;
        int cnt = _dictEnum.values();

        int colLocation;

        for (int i=0;i<cnt;i++)
        {
            colLocation = conFind(_record,_dictEnum.index2Symbol(i));
            if(colLocation)
            {
                csvHeaderMap.insert(_dictEnum.symbol2Value(_dictEnum.index2Symbol(i)), colLocation);
            }
            else
            {
                errorFields += _dictEnum.index2Symbol(i) + ' ,';
            }
        }

        if(errorFields != "")
        {
            //info(strFmt("Required fields %1", errorFields));
            //throw error(strFmt("Required fields %1", errorFields));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProductMaps</Name>
				<Source><![CDATA[
    protected void loadProductMaps()
    {
        ExcelWorksheet          worksheet;
        container               record;
        System.IO.Stream        fileStreamTeams = GGIDMImportEntityUtility::getProductMappings();

        using (ExcelPackage Package = new ExcelPackage(fileStreamTeams))
        {
            Package.Load(fileStreamTeams);
            for (int y = 1; y<= Package.get_Workbook().get_Worksheets().Count; y++)
            {
                worksheet            = package.get_Workbook().get_Worksheets().get_Item(y);
                switch(worksheet.Name)
                {
                    case "NMFC":
                        info(strFmt("Loading %1 mappings.", "NMFC"));
                        mapNMFC = this.populateMap(worksheet);
                        break;
                    case "UOM":
                        info(strFmt("Loading %1 mappings.", "UOM"));
                        mapUOM = this.populateMap(worksheet);
                        break;
                    case "Serial":
                        info(strFmt("Loading %1 mappings.", "Serial"));
                        mapSerial = this.populateMap(worksheet);
                        break;
                    case "SDA":
                        info(strFmt("Loading %1 mappings.", "SDA"));
                        mapSDA = this.populateMap(worksheet);
                        break;
                    case "CDA":
                        info(strFmt("Loading %1 mappings.", "CDA"));
                        mapCDA = this.populateMap(worksheet);
                        break;
                    case "ProductSegment":
                        info(strFmt("Loading %1 mappings.", "ProductSegment"));
                        mapPackageSegment = this.populateMap(worksheet);
                        break;
                    case "ProductLine":
                        info(strFmt("Loading %1 mappings.", "ProductLine"));
                        mapProductLine = this.populateMap(worksheet);
                        break;
                    case "ComponentType":
                        info(strFmt("Loading %1 mappings.", "ComponentType"));
                        mapComponentType = this.populateMap(worksheet);
                        break;
                    case "ISUNITCOSTPRODUCTVARIANTSPEC":
                        info(strFmt("Loading %1 mappings.", "ISUNITCOSTPRODUCTVARIANTSPEC"));
                        mapIsUnitCostVariantSpecific = this.populateMap(worksheet);
                        break;
                    case "PurchaseChargeProductGroupID":
                        info(strFmt("Loading %1 mappings.", "PurchaseChargeProductGroupID"));
                        mapChargesGroup = this.populateMap(worksheet);
                        break;
                    case "TTBArticleTypes":
                        info(strFmt("Loading %1 mappings.", "TTBArticleTypes"));
                        mapTTBArticleType = this.populateMap(worksheet);
                        break;
                    case "LegacyIdRelation":
                        info(strFmt("Loading %1 mappings.", "Legacy Id"));
                        mapProductLegacyId = this.populateMap(worksheet);
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMap</Name>
				<Source><![CDATA[
    protected Map populateMap(ExcelWorksheet  _worksheet, int _valueColumn = 2)
    {
        OfficeOpenXml.ExcelRange mapRange;
        System.ArgumentException ex;
        Map valueMap = new Map(Types::String, Types::String);

        mapRange  = _worksheet.Cells;
        int rowCount  = _worksheet.Dimension.End.Row - _worksheet.Dimension.Start.Row + 1;
            
        
        if(_worksheet.Name == 'StagedForReference')
        {
            for (int y = 2; y<= rowCount; y++)
            {
                if(any2Str(mapRange.get_Item(y,3).Value) == 'No' || any2Str(mapRange.get_Item(y,3).Value) == 'Na')
                {
                    valueMap.insert(strLTrim(strRTrim(any2Str(mapRange.get_Item(y,1).Value))), strLTrim(strRTrim(any2Str(mapRange.get_Item(y,3).Value))));
                }
            }
        }
        else
        {
            for (int y = 2; y<= rowCount; y++)
            {
                if(strLTrim(strRTrim(any2Str(mapRange.get_Item(y,_valueColumn).Value))) != '')
                {
                    valueMap.insert(strLTrim(strRTrim(any2Str(mapRange.get_Item(y,1).Value))), strLTrim(strRTrim(any2Str(mapRange.get_Item(y,_valueColumn).Value))));
                }
            }
       }

        return valueMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>