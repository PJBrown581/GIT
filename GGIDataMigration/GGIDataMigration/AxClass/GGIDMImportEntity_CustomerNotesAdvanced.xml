<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDMImportEntity_CustomerNotesAdvanced</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Linq;
using System.Collections.Generic;
using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.ExcelPackage;
using OfficeOpenXml.ExcelRange;

/// <summary>
/// Main class for building and importing entity into D365
/// </summary>
class GGIDMImportEntity_CustomerNotesAdvanced extends GGIDMImportEntityBaseNotes
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIDMImportEntity_CustomerNotesAdvanced construct(System.IO.Stream _fileStream = GGIDMImportEntityUtility::getImportFile("CustomerNotesAdvanced12.xlsx"))
    {
        GGIDMImportEntity_CustomerNotesAdvanced importEntity = new GGIDMImportEntity_CustomerNotesAdvanced();
        //importEntity.sysDictEnum = new SysDictEnum(enumNum(GGIDMImportEntityCustNotes));
        importEntity.fileStream = _fileStream;  
        importEntity.hasMultipleSheets = NoYes::Yes;
        return importEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWorkSheet</Name>
				<Source><![CDATA[
    public void processWorkSheet(ExcelWorksheet  _worksheet)
    {
        CustTable                   custTable;
        InventTable                 inventTable;
        FreeNotesTable_IT           custVendFreeNotesHeader;
        DocuRef docuRef;
        CustomerPostalAddressEntity custaddressEntity;
        GGICustomerLegacyAddressRelation customerLegacyAddressRelation;
        DirPartyLocationPostalAddressV2Entity dirPartyLocationPostalAddressV2Entity;
        LogisticsLocation logisticsLocation;
        Notes notes, notesOver;
        
               
        int rowCount, rowsImport, rowsError;
       
        OfficeOpenXml.ExcelRange range  = _worksheet.Cells;
        rowCount                        = _worksheet.Dimension.End.Row - _worksheet.Dimension.Start.Row + 1;

        info(strFmt("Importing worksheet %1", _worksheet.Name));
        rowsImport = 0;
        rowsError = 0; 
                      
        info("Importing Customer Notes");          
        
        
        if(_worksheet.Name == "Advanced Notes")
        {
            for (int i = 2; i<= rowCount; i++)
            {
                try
                {
                    select firstonly custaddressEntity where custaddressEntity.NAVLegacyCustomerId == range.get_Item(i, 1).Value;
                    select firstonly dirPartyLocationPostalAddressV2Entity where dirPartyLocationPostalAddressV2Entity.LocationId == custaddressEntity.AddressLocationId;
                    
                    notes = range.get_Item(i, 2).Value;

                    if(dirPartyLocationPostalAddressV2Entity)
                    {  
                        if(notes != "")
                        {
                            if(strLen(notes) > 255)
                            {
                                notesOver = notes;
                                while (strLen(notesOver) > 0)
                                {
                                    ttsbegin;
                                    custVendFreeNotesHeader.clear();
                                    custVendFreeNotesHeader.Text = subStr(notesOver, 0, 254);
                                    custVendFreeNotesHeader.CustVendRelation = custaddressEntity.CustomerAccountNumber;
                                    custVendFreeNotesHeader.CustVendCode = 0;
                                    custVendFreeNotesHeader.GGILogisticsLocationId = custaddressEntity.AddressLocationId;
                                    custVendFreeNotesHeader.GGIBatchRecord = NoYes::Yes;
                                    custVendFreeNotesHeader.GGIOnWavePickList = NoYes::Yes;
                                    custVendFreeNotesHeader.insert();
                                    notesOver = subStr(notesOver, 255, strLen(notesOver));
                                    rowsImport++;
                                    ttscommit;
                                }
                            }
                            else
                            {
                                ttsbegin;
                                custVendFreeNotesHeader.clear();
                                custVendFreeNotesHeader.Text = notes;
                                custVendFreeNotesHeader.CustVendRelation = custaddressEntity.CustomerAccountNumber;
                                custVendFreeNotesHeader.CustVendCode = 0;
                                custVendFreeNotesHeader.GGILogisticsLocationId = custaddressEntity.AddressLocationId;
                                custVendFreeNotesHeader.GGIBatchRecord = NoYes::Yes;
                                custVendFreeNotesHeader.GGIOnWavePickList = NoYes::Yes;
                                custVendFreeNotesHeader.insert();
                                rowsImport++;
                                ttscommit;
                                
                            }
                        }
                    }                     
                    
                    select firstonly customerLegacyAddressRelation where customerLegacyAddressRelation.NAVLegacyCustomerId == range.get_Item(i, 1).Value;
                    select firstonly logisticsLocation where logisticsLocation.LocationId == customerLegacyAddressRelation.LocationId;
                    
                    if(logisticsLocation)
                    {
                        notes = strLRTrim(range.get_Item(i, 2).Value);
                        if(notes != "")
                        {
                            if(notes == ":")
                            {
                                notes = "None";
                            }
                            ttsbegin;
                            docuRef.clear();
                            docuRef.TypeId = 'Legacy Note';
                            docuRef.Name = "Legacy Comments:";
                            docuRef.Notes = notes;
                            docuRef.RefRecId = logisticsLocation.RecId;
                            docuRef.Party = custTable::find(customerLegacyAddressRelation.CustAccount).Party;
                            docuRef.RefCompanyId = 'dat';
                            docuRef.Restriction = DocuRestriction::Internal;
                            docuRef.RefTableId = tableNum(LogisticsLocation);
                            docuRef.RefCompanyId = curext();
                            docuRef.insert();
                            rowsImport++;
                            ttscommit;
                        }
                    }
                     
                }
                catch
                {
                    Info(strFmt("Note: Customer %1", range.get_Item(i, 2)));
                    continue;
                }
            
            }
        }

        if(_worksheet.Name == "Advanced Item Notes")
        {
            for (int i = 2; i<= rowCount; i++)
            {
                try
                {
                    select firstonly inventTable where inventTable.GGINAVLegacyItemId == range.get_Item(i, 6).Value;
                    
                    notes = range.get_Item(i, 7).Value;

                    if(inventTable)
                    {
                        if(notes != "")
                        {
                            if(strLen(notes) > 255)
                            {
                                notesOver = notes;
                                while (strLen(notesOver) > 0)
                                {
                                    ttsbegin;
                                    custVendFreeNotesHeader.clear();
                                    custVendFreeNotesHeader.Text = subStr(notesOver, 0, 254);
                                    custVendFreeNotesHeader.ItemCode = 0;
                                    custVendFreeNotesHeader.CustVendCode = 2;
                                    custVendFreeNotesHeader.ItemRelation = inventTable.ItemId;
                                    custVendFreeNotesHeader.GGIBatchRecord = NoYes::Yes;
                                    custVendFreeNotesHeader.insert();
                                    notesOver = subStr(notesOver, 255, strLen(notesOver));
                                    rowsImport++;
                                    ttscommit;
                                }
                            }
                            else
                            {
                                ttsbegin;
                                custVendFreeNotesHeader.clear();
                                custVendFreeNotesHeader.Text = notes;
                                custVendFreeNotesHeader.ItemCode = 0;
                                custVendFreeNotesHeader.CustVendCode = 2;
                                custVendFreeNotesHeader.ItemRelation = inventTable.ItemId;
                                custVendFreeNotesHeader.GGIBatchRecord = NoYes::Yes;
                                custVendFreeNotesHeader.insert();
                                rowsImport++;
                                ttscommit;
                                
                            }
                        }
                    }                                      
                }
                catch
                {
                    Info(strFmt("Note: Customer %1", range.get_Item(i, 2)));
                    continue;
                }            
            }
        }        
        
        if(_worksheet.Name != "Advanced Notes")
        {
            if(_worksheet.Name != "Advanced Item Notes")
            {
                for (int i = 2; i<= rowCount; i++)
                {
                    try
                    {
                        select firstonly customerLegacyAddressRelation where customerLegacyAddressRelation.NAVLegacyCustomerId == range.get_Item(i, 1).Value;
                        select firstonly logisticsLocation where logisticsLocation.LocationId == customerLegacyAddressRelation.LocationId;
                    
                        if(logisticsLocation)
                        {
                            notes = strLRTrim(range.get_Item(i, 2).Value);
                            if(notes != "")
                            {
                                if(notes == ":")
                                {
                                    notes = "None";
                                }
                                ttsbegin;
                                docuRef.clear();
                                docuRef.TypeId = 'Legacy Note';
                                docuRef.Name = _worksheet.Name +":";
                                docuRef.Notes = notes;
                                docuRef.RefRecId = logisticsLocation.RecId;
                                docuRef.Party = custTable::find(customerLegacyAddressRelation.CustAccount).Party;
                                docuRef.RefCompanyId = 'dat';
                                docuRef.Restriction = DocuRestriction::Internal;
                                docuRef.RefTableId = tableNum(LogisticsLocation);
                                docuRef.RefCompanyId = curext();
                                docuRef.insert();
                                rowsImport++;
                                ttscommit;
                            }
                        }
                    }
                    catch
                    {
                        Info(strFmt("Note: Customer %1", custaddressEntity.CustomerAccountNumber));
                        continue;
                    }
                }
            }
        }
        
        info(strFmt("Customer Notes Imported %1", rowsImport));
        info(strFmt("Customer Notes Errored %1", rowsError));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>