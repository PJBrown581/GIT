<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIExchangeRateProviderBankOfCanadas</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationSuite.FinancialManagement.Currency.Framework;
using Microsoft.Dynamics.Currency.Instrumentation;
using System.Collections;

using System.ComponentModel.Composition;

/// <summary>
/// The <c>ExchangeRateProviderBankOfCanada</c> class is an exchange rate provider for Bank Of Canada.
/// </summary>
[ExportMetadataAttribute(enumStr(ExchangeRateProvider), GGIExchangeRateProviders::BankOfCanada), ExportAttribute('Microsoft.Dynamics.ApplicationSuite.FinancialManagement.Currency.Framework.IExchangeRateProvider')]
class GGIExchangeRateProviderBankOfCanadas implements IExchangeRateProvider
{
    private const URL ServiceURL = 'https://www.bankofcanada.ca/valet/observations/%1/xml?start_date=%2&end_date=%3';
    private const ExchangeRateProviderId ProviderId = 'BankOfCanada';
    private const str BankOfCanadaDateFormat = 'yyyy-MM-dd';

    private const str HttpWebRequestMethod = 'GET';
    private const str HttpWebRequestContentType = 'application/xml';
    private const str HttpHeaderAuthorization = 'Authorization';
    private const str KeyTokenPrefix = 'Bearer ';

    private const str XPathQuote = '//data/observations';
    
    private const str QuoteParameterAverages = 'averages';
    private const str QuoteParameterLows = 'lows';
    private const str QuoteParameterMidPoint = 'midpoint';
    private const str QuoteParameterHighs = 'highs';    
        
    IExchangeRateProviderFrameworkFactory factory;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetConfigurationDefaults</Name>
				<Source><![CDATA[
    public IExchangeRateProviderConfigDefaults GetConfigurationDefaults()
    {
        IExchangeRateProviderConfigDefaults configurationDefaults = factory.CreateExchangeRateProviderConfigDefaults();

        configurationDefaults.addNameValueConfigurationPair("@SYS328923", 'https://www.bankofcanada.ca/valet/observations/');
        configurationDefaults.addNameValueConfigurationPair("@CurrencyExchange:Currency_ConfigField_ServiceTimeout", '5000');       
        configurationDefaults.addNameValueConfigurationPair("@CurrencyExchange:Currency_ConfigField_DecimalPlaces", '5');
        configurationDefaults.addNameValueConfigurationPair("@CurrencyExchange:Currency_ConfigField_QuoteTypeLocked", '1');
        return configurationDefaults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_Name</Name>
				<Source><![CDATA[
    public ExchangeRateProviderName get_Name()
    {
        return "Bank Of Canada Rates";
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_Id</Name>
				<Source><![CDATA[
    public ExchangeRateProviderId get_Id()
    {
        return ProviderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>set_Factory</Name>
				<Source><![CDATA[
    public void set_Factory(IExchangeRateProviderFrameworkFactory _factory)
    {
        factory = _factory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSupportedOptions</Name>
				<Source><![CDATA[
    public IExchangeRateProviderSupportedOptions GetSupportedOptions()
    {
        IExchangeRateProviderSupportedOptions options = factory.CreateExchangeRateProviderSupportedOptions();

        options.set_doesSupportSpecificCurrencyPairs(true);
        options.set_doesSupportSpecificDates(true);
        options.set_fixedBaseIsoCurrency('');
        options.set_singleRateForDateRange(true);                        
        options.set_doesSupportPreventImportOnNationalHoliday(false);
        options.set_DoesSupportExchangeRateFromPreviousDay(false);

        return options;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRate</Name>
				<Source><![CDATA[
    private void readRate(System.Xml.XmlNode _xmlQuoteNode, List _rates)
    {
        System.Xml.XmlNode xmlRateNode;
        CurrencyExchangeRate exchangeRate;
        str value;      

        xmlRateNode = _xmlQuoteNode.FirstChild;

        if (xmlRateNode)
        {
            value = xmlRateNode.get_InnerText();
            exchangeRate = str2num(value);
            if (exchangeRate)
            {
                _rates.addEnd(exchangeRate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processResult</Name>
				<Source><![CDATA[
    private void processResult(str _xmlString, List _rates, List _dates)
    {
        System.Xml.XmlDocument xmlDom = new System.Xml.XmlDocument();
        System.Xml.XmlNode xmlQuoteNode, xmlDateNode;

        ValidFromDate exchangeDate;
        str value;
 
        // Setting XmlResover = null in order to mitigate risk of attack by malicious external entities.
        xmlDom.set_XmlResolver(null);

        xmlDom.LoadXml(_xmlString);

        // Find the Quote
        xmlQuoteNode = xmlDom.SelectSingleNode(XPathQuote);
        if (xmlQuoteNode)
        {
            this.readRate(xmlQuoteNode, _rates);

            // Find the date
            value = xmlQuoteNode.FirstChild.Attributes.GetNamedItem("d").Value;
            if (value)
            {
                // convert the date from UTC to local timezone.
                exchangeDate = System.DateTime::Parse(value, System.Globalization.CultureInfo::get_CurrentUICulture(), System.Globalization.DateTimeStyles::AssumeUniversal);
                if (exchangeDate)
                {
                    _dates.addEnd(exchangeDate);
                }
            }
            else if (!value)
            {
                throw new System.Exception("No date value on XML node");
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetExchangeRates</Name>
				<Source><![CDATA[
    public IExchangeRateResponse GetExchangeRates(IExchangeRateRequest _request, IExchangeRateProviderConfig _config)
    {
        System.Exception exception;

       
        int decimalPlaces = str2Int(_config.GetPropertyValue(this.get_Id(), "@CurrencyExchange:Currency_ConfigField_DecimalPlaces"));

        int serviceTimeout = str2int(_config.getPropertyValue(this.get_Id(), "@CurrencyExchange:Currency_ConfigField_ServiceTimeout"));

        boolean singleRateForDateRange = _request.get_SingleRateForDateRange();

        List rates = new List(Types::Real);
        List dates = new List(Types::Date);

        System.TimeZone localTimeZone = System.TimeZone::get_CurrentTimeZone();

        System.DateTime toUTCDate = localTimeZone.ToUniversalTime(_request.get_ToDate());
        str toDateForRequest = toUTCDate.ToString(BankOfCanadaDateFormat);

        IExchangeRateResponse response = factory.CreateExchangeRateResponse();

        // Iterate over the requested currency pairs. This is only required for providers
        // that support specific currency pairs.
        IEnumerator currencyPairsEnumerator = _request.GetEnumerator();
        while(currencyPairsEnumerator.MoveNext())
        {
            URL BankOfCanadaUrl = ServiceURL;

            // This loop will either execute once if singleRateForDateRange is true; otherwise, it will
            // execute once for each day.  If we make a single request for multiple dates
            // then BankOfCanada will return an average rate for the date range.
            System.DateTime fromDate = _request.get_FromDate();
            int compareResult = fromDate.CompareTo(_request.get_ToDate());
            while (compareResult <= 0)
            {
                IExchangeRateRequestCurrencyPair currencyPairRequest = currencyPairsEnumerator.Current;

                IExchangeRateResponseCurrencyPair currencyPairResponse = factory.CreateExchangeRateResponseCurrencyPair();
                currencyPairResponse.set_FromCurrency(currencyPairRequest.get_FromCurrency());
                currencyPairResponse.set_ToCurrency(currencyPairRequest.get_ToCurrency());

                // All rates are requested with a display factor of 1 for this provider. If the rates
                // internally are represented using a different exchange rate display factor, the
                // framework will make the necessary adjustments when saving the exchange rates.
                currencyPairResponse.set_ExchangeRateDisplayFactor(ExchangeRateDisplayFactor::One);

                // convert to UTC which is required by Bank of Canada
                //System.DateTime fromUTCDate = localTimeZone.ToUniversalTime(fromDate.AddDays(-1));
                System.DateTime fromUTCDate = localTimeZone.ToUniversalTime(fromDate);
                str fromDateForRequest = fromUTCDate.ToString(BankOfCanadaDateFormat);

                // Build the request URL.
                str bankOfCanadaRequestString;
                
                //Invoke the service once for each day.
                //Readdress in future, this is ridiculous making a call for every day
                bankOfCanadaRequestString = strFmt(BankOfCanadaUrl,
                                this.GenerateCurrencyKey(
                                currencyPairRequest.get_FromCurrency(),
                                currencyPairRequest.get_ToCurrency()),
                                fromDateForRequest,
                                fromDateForRequest);
                //when getting an extended date range the last param will be the to date but will require some recoding 
                

                // Configure the request for Bank of Canada.
                System.Net.HttpWebRequest httpWebRequest = System.Net.WebRequest::CreateHttp(bankOfCanadaRequestString);
                httpWebRequest.set_Method(HttpWebRequestMethod);
                httpWebRequest.set_ContentType(HttpWebRequestContentType);
                httpWebRequest.set_Timeout(serviceTimeout);

                // Authentication
                System.Net.WebHeaderCollection webCollection = httpWebRequest.get_Headers();
                
                try
                {
                    // Invoke the service
                    System.Net.WebResponse webResponse;
                    webResponse = httpWebRequest.GetResponse();

                    // Retrieve the XML response.
                    System.IO.Stream stream = webResponse.GetResponseStream();
                    System.IO.StreamReader streamReader = new System.IO.StreamReader(stream);
                    str XMLOut = streamReader.ReadToEnd();

                    // Parse the XML to retrieve the rate and date.
                    this.processResult(XMLOut, rates, dates);

                    ListEnumerator rateEnumerator = rates.getEnumerator();
                    ListEnumerator dateEnumerator = dates.getEnumerator();

                    // Create the Exchange Rate Provider Response.
                    rateEnumerator.moveNext();
                    dateEnumerator.moveNext();
                    CurrencyExchangeRate exchangeRate = rateEnumerator.current();
                    date currentDate = dateEnumerator.current();

                    if (currentDate != dateNull() && exchangeRate)
                    {
                        IExchangeRateResponseExchangeRate exchangeRateResponse = factory.CreateExchangeRateResponseExchangeRate();
                        exchangeRateResponse.set_ValidFrom(currentDate);
                        exchangeRateResponse.set_ExchangeRate(exchangeRate);
                        currencyPairResponse.addExchangeRate(exchangeRateResponse);
                    }
                }
                catch(exception)
                {
                    CurrencyEventSource eventSource = CurrencyEventSource::Log;
                    eventSource.ImportRatesException(exception.Message, Exception.StackTrace);
                }

                response.addOrUpdateCurrencyPair(currencyPairResponse);

                rates = new List(Types::Real);
                dates = new List(Types::Date);

                fromDate = fromDate.AddDays(1);

                compareResult = fromDate.CompareTo(_request.get_ToDate());
                
            }
        }
        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GenerateCurrencyKey</Name>
				<Source><![CDATA[
    private str GenerateCurrencyKey(str fromCurrency, str toCurrency)
    {
        return strFmt("FX%1%2", fromCurrency, toCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateConfigurationDetail</Name>
				<Source><![CDATA[
    public boolean ValidateConfigurationDetail(ExchangeRateProviderPropertyKey _key, ExchangeRateProviderPropertyValue _value)
    {
        boolean result = true;

        switch (_key)
        {
            case "@CurrencyExchange:Currency_ConfigField_DecimalPlaces":
                int decimals = str2Int(_value);

                if ((decimals > 12) || (decimals < 1))
                {
                    CurrencyEventSource eventSource = CurrencyEventSource::Log;
                    eventSource.ImportExchangeRateMark("@CurrencyExchange:Currency_ConfigMessage_DecimalPlacesInvalid");
                    error("@CurrencyExchange:Currency_ConfigMessage_DecimalPlacesInvalid");
                    result = false;
                }
                break;
          
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnumNameForLookup</Name>
				<Source><![CDATA[
    public str EnumNameForLookup(ExchangeRateProviderPropertyKey _key)
    {
        if (_key == "@CurrencyExchange:Currency_ConfigField_QuoteTypeLocked")
        {
            return enumStr(ExchangeRateProviderBankOfCanadaQuoteType);
        }

        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>