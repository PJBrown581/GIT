<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIIntegrationsDayforceImportService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GGIIntegrationsDayforceImportService extends SysOperationServiceBase
{  
    GGIIntegrationsDayforceConfiguration parameters;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processOperation</Name>
				<Source><![CDATA[
    public void processOperation()
    {
        parameters = GGIIntegrationsDayforceConfiguration::find();
        
        info ("Running Dayforce journal import");
        
        this.importSFTPDirFiles();
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFile</Name>
				<Source><![CDATA[
    public void importFile(System.IO.Stream _ioStream,str _fileName = "")
    {
        System.ObjectDisposedException                  error_ObjectDisposedException;
        System.InvalidOperationException                error_InvalidOperationException;
        System.Net.Sockets.SocketException              error_SocketException;
        Renci.SshNet.Common.SshConnectionException      error_SshConnectionException;
        Renci.SshNet.Common.SshAuthenticationException  error_SshAuthenticationException;
        Renci.SshNet.Common.ProxyException              error_ProxyException;
        System.ArgumentNullException                    error_ArgumentNullException;
        
        parameters = GGIIntegrationsDayforceConfiguration::find();
 
        try
        {
            
                            
            if(this.readDayforceCSVFileAndCreateJournal(_ioStream,_fileName))
            {
               
                info(strFmt("File %1 has been successfully imported", _fileName));
            }
            else
            {
                
                info(strFmt("File reading error: %1", _fileName));
            }
        }
        catch (error_ArgumentNullException)
        {
            throw error("Path is null.");
        }
        catch (error_SshConnectionException)
        {
            throw error("Client is not connected.");
        }
        
        catch (error_ObjectDisposedException)
        {
            throw error("The method was called after the client was disposed.");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importSFTPDirFiles</Name>
				<Source><![CDATA[
    private void importSFTPDirFiles()
    {
        System.IO.Stream                    ioStream;
        System.IO.StreamReader              ioStreamReader;
        System.String                       strReadLine;
        container                           conFTPFilesDownload;
        ListIterator                        ftpFilesListIterator;
        Renci.SshNet.Sftp.SftpFile          sftpFile;
        System.IO.StreamReader              reader;
        System.String                       line;

        System.ObjectDisposedException                  error_ObjectDisposedException;
        System.InvalidOperationException                error_InvalidOperationException;
        System.Net.Sockets.SocketException              error_SocketException;
        Renci.SshNet.Common.SshConnectionException      error_SshConnectionException;
        Renci.SshNet.Common.SshAuthenticationException  error_SshAuthenticationException;
        Renci.SshNet.Common.ProxyException              error_ProxyException;
        System.ArgumentNullException                    error_ArgumentNullException;
        Renci.SshNet.Common.SftpPathNotFoundException   error_SftpPathNotFoundException;
 
        ClrObject list = new ClrObject("System.Collections.Generic.List`1[Renci.SshNet.Sftp.SftpFile]");
        
 
        GGI.Integrations.FileHandling.SFTPConnection sftp = new GGI.Integrations.FileHandling.SFTPConnection();
        
        using (Renci.SshNet.SftpClient sftpConnection = sftp.OpenSFTPConnection(parameters.SFTPHost, parameters.SFTPPort, parameters.User, parameters.passwordEdit(false,'')))
        {
            try
            {
                int totalFiles = 0;
                sftpConnection.ChangeDirectory(parameters.SFTPFileImportPath);
                list = sftp.GetFiles(sftpConnection, parameters.SFTPFileImportPath);
                var files = sftp.GetFiles(sftpConnection, parameters.SFTPFileImportPath);
               
                
                ClrObject enumerator = list.getEnumerator();
                
 
                while (enumerator.movenext())
                {
                    sftpFile = enumerator.get_Current();
 
                    if(sftpFile.Name != ".." && sftpFile !=null && sftpFile.Name != "." && sftpFile.Length > 0)
                    {
                        totalFiles ++;
                        try
                        {
                            ioStream = sftp.DownloadFile(sftpConnection, parameters.SFTPFileImportPath + '/'+sftpFile.Name);
                            
                            
                            if(this.readDayforceCSVFileAndCreateJournal(ioStream,sftpFile.Name))
                            {
                                //sftp.MoveFile(sftpConnection, parameters.SFTPFileImportPath  + '/'+sftpFile.Name,   parameters.SFTPFileArchivePath  + '/'+ this.getReturnFileName(sftpFile.Name),false);
                                //nfo(strFmt("File moved to archive folder: %1", sftpFile.Name));
                                sftp.DeleteFile(sftpConnection, parameters.SFTPFileImportPath  + '/'+sftpFile.Name);
                                info(strFmt("File %1 has been successfully imported", sftpFile.Name));
                            }
                            else
                            {
                                sftp.MoveFile(sftpConnection, parameters.SFTPFileImportPath + '/'+sftpFile.Name,   parameters.SFTPFileErrorPath + '/' + this.getReturnFileName(sftpFile.Name),false);
                                info(strFmt("File moved to error folder: %1", sftpFile.Name));
                            }
                        }
                        catch (error_ArgumentNullException)
                        {
                            throw error("Path is null.");
                        }
                        catch (error_SshConnectionException)
                        {
                            throw error("Client is not connected.");
                        }
                        catch (error_SftpPathNotFoundException)
                        {
                            throw error("The specified path is invalid, or its directory was not found on the remote host.");
                        }
                        catch (error_ObjectDisposedException)
                        {
                            throw error("The method was called after the client was disposed.");
                        }
                    }
                }
                if (totalFiles == 0) 
                {
                    info("No file found to process");
                }
            }
            catch (error_ObjectDisposedException)
            {
                throw error("The method was called after the client was disposed.. ");
            }
            catch (error_InvalidOperationException)
            {
                throw error("The client is already connected.");
            }
            catch (error_SocketException)
            {
                throw error("Socket connection to the SSH server or proxy server could not be established or an error occurred while resolving the hostname.");
            }
            catch (error_SshConnectionException)
            {
                throw error("SSH session could not be established.");
            }
            catch (error_SshAuthenticationException)
            {
                throw error("Authentication of SSH session failed.");
            }
            catch (error_ProxyException)
            {
                throw error("Failed to establish proxy connection.");
            }
            finally
            {
                if(sftpConnection.IsConnected)
                    sftpConnection.Disconnect();
            }
        }
        
              
    }

]]></Source>
			</Method>
			<Method>
				<Name>readDayforceCSVFileAndCreateJournal</Name>
				<Source><![CDATA[
    private boolean readDayforceCSVFileAndCreateJournal(System.IO.Stream _fileStream, str _fileName = "") 
    { 
             
        
        System.Exception       ex;
        AsciiStreamIo          file;
        Array                  fileLines;        

        Counter                 fileCounter = 0;  
        Counter                 counter;
        int                     numLines;
        str                     tempHolding;

        container               dimAttribute, dimValue, emptyContainer;        
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalTrans      ledgerJournalTrans,ledgerJournalTransIterator;;
        LedgerJournalId         journalId;        
        Amount                  balance; 
        boolean                 newVoucher;
        str                     expenseType;
        date                    dateNull;
         
        
        #OCCRetryCount

        try
        {   
            //str decrypted = GGI.Integrations.Cryptography.Encryption::
           
            file = AsciiStreamIo::constructForRead(_fileStream);

            if (file)
            {
                if (file.status())
                {
                    throw error("@SYS52680");
                }

                file.inFieldDelimiter(','); 
                file.inRecordDelimiter("\r\n");
            }
            
            container rec;
            counter = 0;

                
                while (file.status() == IO_Status::Ok)
                {
                    rec = file.read();
                    if (conLen(rec) )
                    {
                        counter++;                        
            
                        if (!ledgerJournalTable.RecId)
                        {
                            ledgerJournalTable.clear();
                            ledgerJournalTable.initValue();
                            ledgerJournalTable.JournalName = parameters.LedgerJournalNameId;//"APInvoice";
                            ledgerJournalTable.Name = ledgerJournalTable.Name + _fileName;
                            ledgerJournalTable.initFromLedgerJournalName();
                            ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
                            if (_fileName == "")
                            {
                              ledgerJournalTable.Name = "Dayforce import: " + conPeek(rec, 1);
                            }
                            else
                            {
                                ledgerJournalTable.Name = _fileName;//the journal name includes the file name
                            }
                            ledgerJournalTable.insert();
                            info(strFmt("Journal %1 created", ledgerJournalTable.JournalNum));
                            journalId = ledgerJournalTable.JournalNum;
                        }

                        newVoucher = false;
                    
                        ledgerJournalTrans.clear();
                        ledgerJournalTrans.initValue();
                        ledgerJournalTrans.JournalNum             = ledgerJournalTable.JournalNum;
                        ledgerJournalTrans.TransDate              = str2Date(conPeek(rec, 1),321);//?
                        //Build out financial dimensions
                        dimAttribute = emptyContainer;
                        dimValue = emptyContainer;
                        
                        dimAttribute += ("MAINACCOUNT");
                        dimValue += (conPeek(rec, 2));//Journal Account Code
                        dimAttribute += ("SITES");
                        dimValue += (conPeek(rec, 5));//Location
                        dimAttribute += ("DEPARTMENT");
                        dimValue += (conPeek(rec, 6));//Department
                                                    
                        
                        ledgerJournalTrans.LedgerDimension = GGIIntegrationsDayforceUtility::getLedgerDimension(dimValue);
                        ledgerJournalTrans.AccountType = LedgerJournalACType::Ledger;
                        ledgerJournalTrans.Txt = conPeek(rec, 3);
                        if (ledgerJournalTrans.LedgerDimension == 0)
                        {
                            ledgerJournalTrans.Txt = strFmt("Invalid Account values: ‘%1 – %2 – %3’ - ",conPeek(dimValue,1),conPeek(dimValue,2),conPeek(dimValue,3)) + ledgerJournalTrans.Txt;
                        }
                        
                        ledgerJournalTrans.AmountCurDebit = str2Num(conPeek(rec, 7));
                        ledgerJournalTrans.AmountCurCredit = str2Num(conPeek(rec, 8));
                    
                        ledgerJournalTrans.defaultRow();
                        if (newVoucher)
                        {
                            JournalVoucherNum journalVoucherNum = new JournalVoucherNum(JournalTableData::newTable(LedgerJournalTable::find(ledgerJournalTable.JournalNum)));
                            ledgerJournalTrans.Voucher = journalVoucherNum.getNew(true);
                            journalVoucherNum.used(ledgerJournalTrans.Voucher);
                        }
                        
                        ledgerJournalTrans.Approver = parameters.Approver;
                        ledgerJournalTrans.Approved = parameters.Approved;
                        ledgerJournalTrans.insert();
                        expenseType = conPeek(rec, 4);
                    }
                    
                }
                
                ledgerJournalTransIterator.clear();
                balance = 0;
                

                fileCounter++;
 
            if(fileCounter == 0)
            {
                info("No files processed.");
            }
            info("Operation complete.");
            return true;

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch(Exception::Error)
        {
            info("Error processing file");
            return false;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSummaryCredit</Name>
				<Source><![CDATA[
    private void insertSummaryCredit(LedgerJournalId _journalNum,Voucher _voucher, str _expenseType, CurrencyCode _currencyCode, date _transDate, date _documentDate, Amount _totalDebit)
    {
        LedgerJournalTrans      ledgerJournalTrans;
        VendAccount             vendAccount;
        

        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();
        ledgerJournalTrans.JournalNum             = _journalNum;
        ledgerJournalTrans.Voucher                = _voucher;
        ledgerJournalTrans.TransDate              = _transDate;
       
             
        
        
        try
        {
            ledgerJournalTrans.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(vendAccount,LedgerJournalACType::Vend);
        }
        catch (Exception::Error)
        {
            ledgerJournalTrans.LedgerDimension = 0;
        }
        ledgerJournalTrans.AccountType = LedgerJournalACType::Ledger;
         
        if (ledgerJournalTrans.LedgerDimension == 0)
        {
            ledgerJournalTrans.Txt = strFmt("Invalid Account value: ‘%1’ - ",vendAccount) + ledgerJournalTrans.Txt;
        }
        ledgerJournalTrans.CurrencyCode = _currencyCode;
        ledgerJournalTrans.DocumentDate = _documentDate;
                    
        ledgerJournalTrans.AmountCurCredit = _totalDebit;
                    
        ledgerJournalTrans.defaultRow();
        ledgerJournalTrans.Approver = parameters.Approver;
        ledgerJournalTrans.Approved = parameters.Approved;
        ledgerJournalTrans.insert();        
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnFileName</Name>
				<Source><![CDATA[
    public str getReturnFileName(str filePath)
    {
        str         actualFileName, fileExtension, actualFilePath;
 
        [actualFilePath,actualFileName, fileExtension] = fileNameSplit(filePath);
 
        return strfmt('%1_%2%3',actualFileName,this.TimestampString(),fileExtension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TimestampString</Name>
				<Source><![CDATA[
    public str TimestampString()
    {
        int time;
        str s;
 
        time    = timenow();
        s       = date2Str(today(),
                            321,
                            DateDay::Digits2,
                            DateSeparator::None, // no separator
                            DateMonth::Digits2,
                            DateSeparator::None, // no separator
                            DateYear::Digits4);
 
        return  s + "_" +
                num2str0(time div 3600       ,2,0,0,0) + "_" +
                num2Str0(time mod 3600 div 60,2,0,0,0) + "_" +
                num2Str0(time mod 3600 mod 60,2,0,0,0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>