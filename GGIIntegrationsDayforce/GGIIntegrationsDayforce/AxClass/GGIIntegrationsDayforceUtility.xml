<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIIntegrationsDayforceUtility</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class GGIIntegrationsDayforceUtility
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mapGLAccountCode</Name>
				<Source><![CDATA[
    public static str mapGLAccountCode(str _DayforceExpenseType)
    {
        str glAccount;
        switch(_DayforceExpenseType)
        {
            case "Prepaid Expenses":
                glAccount = "107800";
                break;
            case "US Operations Cost":
                glAccount = "716300";
                break;
            case "GST/HST":
                glAccount = "211800";
                break;
            case "QST/PST":
                glAccount = "212500";
                break;
            case "Plant Supplies":
                glAccount = "417200";
                break;
            case "Recruiting":
                glAccount = "703300";
                break;
            case "Seminar Course Fees":
                glAccount = "703400";
                break;
            case "Tuition/Training Reimbursement":
                glAccount = "703400";
                break;
            case "Safety Boots":
                glAccount = "703600";
                break;
            case "Safety Glasses":
                glAccount = "703600";
                break;
            case "Uniforms":
                glAccount = "703500";
                break;
            case "Plant Safety Supples":
                glAccount = "703600";
                break;
            case "Other Employee Costs":
                glAccount = "716300";
                break;
            case "Vehicle Lease":
                glAccount = "704100";
                break;
            case "Car Maintenance/Repairs":
                glAccount = "704200";
                break;
            case "Air Fare":
                glAccount = "704300";
                break;
            case "Airfare":
                glAccount = "704300";
                break;
            case "Airline Fees":
                glAccount = "704300";
                break;
            case "Booking Fees":
                glAccount = "704300";
                break;
            case "Car Rental":
                glAccount = "704300";
                break;
            case "Currency Exchange Fees":
                glAccount = "704300";
                break;
            case "Fuel":
                glAccount = "704300";
                break;
            case "Hotel":
                glAccount = "704300";
                break;
            case "Hotel Tax":
                glAccount = "704300";
                break;
            case "lncidentals":
                glAccount = "704300";
                break;
            case "Parking":
                glAccount = "704300";
                break;
            case "Passport/Visa Fees":
                glAccount = "704300";
                break;
            case "Personal Car Mieage":
                glAccount = "704300";
                break;
            case "Public Transport":
                glAccount = "704300";
                break;
            case "Taxi":
                glAccount = "704300";
                break;
            case "Tolls/Road Charges":
                glAccount = "704300";
                break;
            case "Trade Show Travel":
                glAccount = "704400";
                break;
            case "Train":
                glAccount = "704300";
                break;
            case "Tube/Subway":
                glAccount = "704300";
                break;
            case "Breakfast":
                glAccount = "704500";
                break;
            case "Business Meal (attendees)":
                glAccount = "704500";
                break;
            case "Dinner":
                glAccount = "704500";
                break;
            case "Lunch":
                glAccount = "704500";
                break;
            case "Snacks/Beverages":
                glAccount = "704500";
                break;
            case "Plant Repairs and Maintenance":
                glAccount = "705400";
                break;
            case "Office Supplies":
                glAccount = "706000";
                break;
            case "Computer Supplies":
                glAccount = "706300";
                break;
            case "Home Telephone/Fax":
                glAccount = "707100";
                break;
            case "Telephone/Fax":
                glAccount = "707100";
                break;
            case "Moblie Phone":
                glAccount = "707100";
                break;
            case "lnternet":
                glAccount = "707200";
                break;
            case "Courier/Shipping/Freight":
                glAccount = "707500";
                break;
            case "Postage":
                glAccount = "707400";
                break;
            case "Subscription":
                glAccount = "710000";
                break;
            case "Professional Subscription/Dues":
                glAccount = "710000";
                break;
            case "Special Events/Activities":
                glAccount = "711200";
                break;
            case "Trade Shows":
                glAccount = "711300";
                break;
            case "Marketing/Promotional Costs":
                glAccount = "711600";
                break;
            case "lnfomation Technology + Web Hosting and Design":
                glAccount = "711800";
                break;
            case "Miscellaneous":
                glAccount = "716300";
                break;            
            //TODO: Change to zero
            default:
                return "704300";
        }
        return glAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapSiteCode</Name>
				<Source><![CDATA[
    public static str mapSiteCode(str _DayforceLocationId)
    {
        str site;
        switch(_DayforceLocationId)
        {
            case "1":
                site = "U001";
                break;
            case "22":
                site = "U002";
                break;            
            default:
                return "0";
        }
        return site;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapDepartmentCode</Name>
				<Source><![CDATA[
    public static str mapDepartmentCode(str _DayforceDepartment)
    {
        str department;
        switch(_DayforceDepartment)
        {
            case "710":
                department = "107800";
                break;
            case "711":
                department = "716300";
                break;
            case "712":
                department = "211800";
                break;
            case "713":
                department = "212500";
                break;
            /*
            case "Maintenance":
                department = "140";
                break;
            case "Energy Centre":
                department = "703300";
                break;
            case "Environmental/Health & Safety":
                department = "703400";
                break;
            */
            
            case "720":
                department = "200";
                break;
            case "730":
                department = "210";
                break;
            case "750":
                department = "300";
                break;
            case "751":
                department = "310";
                break;
            case "770":
                department = "400";
                break;
            case "500":
                department = "500";
                break;
            case "520":
                department = "500";
                break;
            case "525":
                department = "500";
                break;
            case "530":
                department = "500";
                break;
            case "535":
                department = "500";
                break;
            case "540":
                department = "500";
                break;
            case "550":
                department = "500";
                break;
            case "560":
                department = "500";
                break;
            case "570":
                department = "500";
                break;
            case "580":
                department = "500";
                break;
            case "590":
                department = "500";
                break;
            case "760":
                department = "600";
                break;
            case "761":
                department = "610";
                break;
            case "752":
                department = "620";
                break;
            case "780":
                department = "630";
                break;
            case "918":
                department = "640";
                break;
            case "762":
                department = "650";
                break;
            case "910":
                department = "650";
                break;

            //TODO: Temp 740 - this is not true mapping.  Used for testing
            case "740":
                department = "200";
                break;
            
            default:
                return "0";
        }
        return department;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapLegacyVendor</Name>
				<Source><![CDATA[
    public static VendAccount mapLegacyVendor(str _legacyVendorId) 
    {
        VendTable vendTable;

        //select firstonly vendTable where VendTable.GGINAVLegacyVendorId == _legacyVendorId;
        
        return vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultDimension</Name>
				<Source><![CDATA[
    static DimensionDefault generateDefaultDimension(container _attr, container _value, boolean _createIfNotFound = true)
    {
        DimensionAttributeValueSetStorage valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionDefault result;
        int i;
        DimensionAttribute dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;
        //_attr is dimension name in table DimensionAttribute
        container conAttr = _attr;
        container conValue = _value;
        str dimValue;

        for (i = 1; i <= conLen(conAttr); i++)
        {
            dimensionAttribute = dimensionAttribute::findByName(conPeek(conAttr,i));

            if (dimensionAttribute.RecId == 0)
            {
                continue;
            }

            dimValue = conPeek(conValue,i);

            if (dimValue != "")
            {
                // _createIfNotFound is "true". A dimensionAttributeValue record will be created if not found.
                dimensionAttributeValue=
                dimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,dimValue,false,_createIfNotFound);

                // Add the dimensionAttibuteValue to the default dimension
                valueSetStorage.addItem(dimensionAttributeValue);
            }
        }
        result = valueSetStorage.save();
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimension</Name>
				<Source><![CDATA[
    ///

    /// generates lederdimensionRecid dyanmically
    ///
    /// container with dimensions
    /// main account number
    /// Ledger dimension record identification number
    public static DimensionDynamicAccount getLedgerDimension(container _conData)
    {
        try
        {
        int hierarchyCount;
        int hierarchyIdx;
        DimensionDynamicAccount ledgerRecId;
        mainAccountNum mainAccountId = conPeek(_conData, 1);
        MainAccount mainAccount;
        RefRecId recordvalue;
        DimensionAttribute dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionSetSegmentName DimensionSet;
        DimensionStorage dimStorage;
        LedgerAccountContract LedgerAccountContract = new LedgerAccountContract();
        DimensionAttributeValueContract ValueContract;
        List valueContracts = new List(Types::Class);
        dimensionAttributeValueCombination dimensionAttributeValueCombination;

        mainAccount = MainAccount::findByMainAccountId(mainAccountId);
        recordvalue = DimensionHierarchy::getAccountStructure(mainAccount.RecId,Ledger::current());
        hierarchyCount = DimensionHierarchy::getLevelCount(recordvalue);
        DimensionSet = DimensionHierarchyLevel::getDimensionHierarchyLevelNames(recordvalue);
        for(hierarchyIdx = 1;hierarchyIdx<=hierarchyCount;hierarchyIdx++)
        {
            if(hierarchyIdx == 1)
            {
                continue;
            }
            dimensionAttribute = DimensionAttribute::findByLocalizedName(DimensionSet[hierarchyIdx],false, CompanyInfo::find().LanguageId);

            if(dimensionAttribute)
            {
                dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,conPeek(_conData,hierarchyIdx));
                if(dimensionAttributeValue)
                {
                    ValueContract = new DimensionAttributeValueContract();
                    ValueContract.parmName(dimensionAttribute.Name) ;
                    ValueContract.parmValue(dimensionAttributeValue.CachedDisplayValue);
                    valueContracts.addEnd(ValueContract);
                }
                else
                {
                    return 0;
                }
            }
        }
        LedgerAccountContract.parmMainAccount(mainAccountId);
        LedgerAccountContract.parmValues(valueContracts);
        dimStorage = DimensionServiceProvider::buildDimensionStorageForLedgerAccount(LedgerAccountContract);
        dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(dimStorage.save());
        ledgerRecId = dimensionAttributeValueCombination.RecId;
        
        return ledgerRecId;
        }
        catch (Exception::Error)
        {
           return 0;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLedgerDimension</Name>
				<Source><![CDATA[
    public static DimensionDynamicAccount generateLedgerDimension(container _conData, AccountNum _mainAccountNum, InventSiteId _siteId, str _department)
    {

        int hierarchyCount;
        int hierarchyIdx;
        RecId                   dimAttId_MainAccount;
        LedgerRecId            ledgerRecId;
        MainAccount mainAccount;
        RefRecId recordvalue;
        DimensionAttribute     dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionSetSegmentName DimensionSet;
        DimensionStorage         dimStorage;

        LedgerAccountContract LedgerAccountContract = new LedgerAccountContract();

        DimensionAttributeValueContract  ValueContract;

        List valueContracts = new List(Types::Class);

        dimensionAttributeValueCombination dimensionAttributeValueCombination;
      

        //SITES,DEPARTMENT
        //container _conData =["U001","SITES","DEPARTMENT","200"];     

        mainAccount = MainAccount::findByMainAccountId("706000");
        recordvalue = DimensionHierarchy::getAccountStructure(mainAccount.RecId,Ledger::current());
        hierarchyCount = DimensionHierarchy::getLevelCount(recordvalue);
        DimensionSet = DimensionHierarchyLevel::getDimensionHierarchyLevelNames(recordvalue);

        for(hierarchyIdx = 1;hierarchyIdx<=hierarchyCount;hierarchyIdx++)
        {
            if(hierarchyIdx == 1)
            {
                continue;
            }
            dimensionAttribute = DimensionAttribute::findByLocalizedName(DimensionSet[hierarchyIdx],false,"en-us");           

            if(dimensionAttribute)
            {
                dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,conPeek(_conData,hierarchyIdx));

                if(dimensionAttributeValue)
                {
                    ValueContract = new DimensionAttributeValueContract();
                    ValueContract.parmName(dimensionAttribute.Name);
                    ValueContract.parmValue(dimensionAttributeValue.CachedDisplayValue);
                    valueContracts.addEnd(ValueContract);
                }
            }
        }
        LedgerAccountContract.parmMainAccount('400301');
        LedgerAccountContract.parmValues(valueContracts);
        dimStorage = DimensionServiceProvider::buildDimensionStorageForLedgerAccount(LedgerAccountContract);
        dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(dimStorage.save());
        ledgerRecId = dimensionAttributeValueCombination.RecId;

        return ledgerRecId;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>