<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDumpAndBottlingRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class GGIDumpAndBottlingRecord extends common
{
    



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (!this.DBRId && this.InventSiteId)
        {
            this.setDBRId();
        }

        this.OpenedDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        this.OpenedTime = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        GGIDumpAndBottlingRecord currentDBR = GGIDumpAndBottlingRecord::findCurrentForSiteLocation(this.InventSiteId, this.WMSLocationId, true);

        this.initValue();
        
        super();

        if (currentDBR)
        {
            ttsbegin;
            currentDBR.TransferDBRId = this.DBRId;
            currentDBR.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDBRId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the primary key from a number sequence.
    /// </summary>
    private void setDBRId()
    {
        ttsbegin;
        NumberSeq   numSeq = NumberSeq::newGetNumFromId(TTBInventSiteParameters::find(this.InventSiteId).DumpBottlingRecordNumberSequenceTable);
        this.DBRId = numSeq.num();
        numSeq.used();
        ttscommit;      
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a Dump and bottling record exists for a given Dump and bottling record id.
    /// </summary>
    /// <param name = "_dbrId">
    /// The Dump and bottling record Id to be used to find the DBR.
    /// </param>
    /// <returns>
    /// True, if the DBR is found; otherwise, false.
    /// </returns>
    public static boolean exist(GGIDumpAndBottlingRecordId _dbrId)
    {
        return (select RecId from GGIDumpAndBottlingRecord
                    where GGIDumpAndBottlingRecord.DBRId == _dbrId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>GGIDumpAndBottlingRecord</c> table.
    /// </summary>
    /// <param name = "_dbrId">
    /// The Dump and bottling record Id to find the DBR.
    /// </param>
    /// <param name = "_update">
    /// Indicates whether record will be updated.
    /// </param>
    /// <returns>
    /// A <c>GGIDumpAndBottlingRecord</c> table record.
    /// </returns>
    public static GGIDumpAndBottlingRecord find(GGIDumpAndBottlingRecordId _dbrId, boolean _update = false)
    {
        GGIDumpAndBottlingRecord dumpAndBottlingRecord;
    
        dumpAndBottlingRecord.selectForUpdate(_update);
    
        if (_dbrId)
        {
            select firstonly dumpAndBottlingRecord
                where dumpAndBottlingRecord.DBRId == _dbrId;
        }
    
        return dumpAndBottlingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentForSiteLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the most current Dump and bottling record for a given site and location.
    /// </summary>
    /// <param name = "_inventSiteId">
    /// The site for the DBR.
    /// </param>
    /// <param name = "_wmsLocationId">
    /// The location for the DBR.
    /// </param>
    /// <param name = "_update">
    /// Indicates whether record will be updated.
    /// </param>
    /// <returns>
    /// A <c>GGIDumpAndBottlingRecord</c> table record.
    /// </returns>
    public static GGIDumpAndBottlingRecord findCurrentForSiteLocation(InventSiteId _inventSiteId, WMSLocationId _wmsLocationId, boolean _update = false)
    {
        GGIDumpAndBottlingRecord dumpAndBottlingRecord;
    
        dumpAndBottlingRecord.selectForUpdate(_update);
    
        if (_inventSiteId && _wmsLocationId)
        {
            select firstonly dumpAndBottlingRecord
                order by RecId desc
                where dumpAndBottlingRecord.InventSiteId    == _inventSiteId
                    && dumpAndBottlingRecord.WMSLocationId  == _wmsLocationId
                    && dumpAndBottlingRecord.Status         == GGIDumpAndBottlingRecordStatus::Open
                    && !dumpAndBottlingRecord.TransferDBRId;
        }
    
        return dumpAndBottlingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEarliestForSiteLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the earliest, open Dump and bottling record for a given site and location.
    /// </summary>
    /// <param name = "_inventSiteId">
    /// The site for the DBR.
    /// </param>
    /// <param name = "_wmsLocationId">
    /// The location for the DBR.
    /// </param>
    /// <param name = "_update">
    /// Indicates whether record will be updated.
    /// </param>
    /// <returns>
    /// A <c>GGIDumpAndBottlingRecord</c> table record.
    /// </returns>
    public static GGIDumpAndBottlingRecord findEarliestForSiteLocation(InventSiteId _inventSiteId, WMSLocationId _wmsLocationId, boolean _update = false)
    {
        GGIDumpAndBottlingRecord dumpAndBottlingRecord;
    
        dumpAndBottlingRecord.selectForUpdate(_update);
    
        if (_inventSiteId && _wmsLocationId)
        {
            select firstonly dumpAndBottlingRecord
                order by RecId asc
                where dumpAndBottlingRecord.InventSiteId    == _inventSiteId
                    && dumpAndBottlingRecord.WMSLocationId  == _wmsLocationId
                    && dumpAndBottlingRecord.Status         == GGIDumpAndBottlingRecordStatus::Open;                   
        }
    
        return dumpAndBottlingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findEarliestForBatchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the earliest, open Dump and bottling record for a given site, location and batch order no.
    /// </summary>
    /// <param name = "_referenceId">
    /// The batch order no. to look for.
    /// </param>   
    /// <param name = "_inventSiteId">
    /// The site for the DBR.
    /// </param>
    /// <param name = "_wmsLocationId">
    /// The location for the DBR.
    /// </param>  
    /// <param name = "_update">
    /// Indicates whether record will be updated.
    /// </param>
    /// <returns>
    /// A <c>GGIDumpAndBottlingRecord</c> table record.
    /// </returns>
    public static GGIDumpAndBottlingRecord findEarliestForBatchOrder(InventTransRefId _referenceId, InventSiteId _inventSiteId, WMSLocationId _wmsLocationId, boolean _update = false)
    {
        GGIDumpAndBottlingRecord    dumpAndBottlingRecord;
        GGIDumpAndBottlingLine      dumpAndBottlingLine;
    
        dumpAndBottlingRecord.selectForUpdate(_update);
    
        if (_referenceId)
        {
            select firstonly dumpAndBottlingRecord
                order by dumpAndBottlingRecord.RecId asc
                join dumpAndBottlingLine
                where dumpAndBottlingLine.DBRId                 == dumpAndBottlingRecord.DBRId                   
                    && dumpAndBottlingRecord.Status             == GGIDumpAndBottlingRecordStatus::Open
                    && dumpAndBottlingRecord.InventSiteId       == _inventSiteId
                    && dumpAndBottlingRecord.WMSLocationId      == _wmsLocationId
                    && dumpAndBottlingLine.ReferenceId          == _referenceId
                    && dumpAndBottlingLine.ReferenceCategory    == InventTransType::ProdLine;
        }
    
        return dumpAndBottlingRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForSiteLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if a Dump and bottling record exists for a given site and location.
    /// </summary>
    /// <param name = "_inventSiteId">
    /// The  inventoryr site to look for.
    /// </param>
    /// <param name = "_wmsLocationId">
    /// The location to look for.
    /// </param>    
    /// <returns>
    /// True, if a dbr was found; otherwise, false.
    /// </returns>
    public static boolean existsForSiteLocation(InventSiteId _inventSiteId, WMSLocationId _wmsLocationId)
    {       
        return (select firstonly GGIDumpAndBottlingRecord                    
                    where GGIDumpAndBottlingRecord.InventSiteId    == _inventSiteId
                        && GGIDumpAndBottlingRecord.WMSLocationId  == _wmsLocationId
                        && GGIDumpAndBottlingRecord.Status         == GGIDumpAndBottlingRecordStatus::Open).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLines</Name>
				<Source><![CDATA[
    display Lines numOfLines()
    {
        GGIDumpAndBottlingLine  dbrLine;

        select count(RecId) from dbrLine
            where dbrLine.DBRId == this.DBRId;

        return any2Int(dbrLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGallons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates several calculated fields for the DBR based on updates from DBR lines.
    /// </summary>
    public void updateGallons(GGIDumpAndBottlingLine _dbrLine)
    {
        GGIDumpAndBottlingLine  dbrLine;
        TTBWineGallon           balanceWineGallons;
        TTBProofGallon          balanceProofGallons;
        TTBProofGallon          totalDumpedProofGallons;
        TTBProofGallon          totalRemovedProofGallons;
        TTBProofGallon          totalGainLossProofGallons;


        select sum(WineGallon) from dbrLine
            where dbrLine.DBRId == this.DBRId;

        balanceWineGallons = dbrLine.WineGallon;

        select sum(ProofGallon) from dbrLine
            where dbrLine.DBRId == this.DBRId;

        balanceProofGallons = dbrLine.ProofGallon;

        select sum(ProofGallon) from dbrLine
            where dbrLine.DBRId             == this.DBRId
                && dbrLine.ActivityClass    == GGIActivityClass::Dump;

        totalDumpedProofGallons = dbrLine.ProofGallon;

        select sum(ProofGallon) from dbrLine
            where dbrLine.DBRId             == this.DBRId
                && dbrLine.ActivityClass    == GGIActivityClass::Removal;

        totalRemovedProofGallons = dbrLine.ProofGallon;

        select sum(ProofGallon) from dbrLine
            where dbrLine.DBRId             == this.DBRId
                && dbrLine.ActivityClass    == GGIActivityClass::GainLoss;

        totalGainLossProofGallons = dbrLine.ProofGallon;

        this.selectForUpdate(true);
        ttsbegin;
        if (!this.TankGaugingProof)
        {
            this.TankGaugingProof = InventTable::find(this.lastTransaction().ItemId).TTBProof;
        }
        
        this.BalanceProofGallon         += _dbrLine.ProofGallon;
        this.BalanceWineGallon          += _dbrLine.WineGallon;
        this.TotalDumpedProofGallon     = totalDumpedProofGallons;
        this.TotalGainLossProofGallon   = totalGainLossProofGallons;
        this.TotalRemovedProofGallon    = totalRemovedProofGallons;
        this.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDifferentItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if DBR contains more than one item.
    /// </summary>
    /// <returns>
    /// True, if DBR contains more than one item; otherwise, false.
    /// </returns>
    public boolean hasDifferentItems()
    {
        GGIDumpAndBottlingLine  dbrLine;

        select count(RecId) from dbrLine
            group by ItemId
            where dbrLine.DBRId == this.DBRId;

        return dbrLine.RecId!=1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last entry in the Dump and bottling line table for the current DBR.
    /// </summary>
    /// <returns>
    /// A <c>GGIDumpAndBottlingLine</c> table record.
    /// </returns>
    public GGIDumpAndBottlingLine lastTransaction()
    {
        GGIDumpAndBottlingLine  dbrLine;

        select firstonly dbrLine
            order by CreatedDateTime desc
            where dbrLine.DBRId == this.DBRId
                && dbrLine.InventTransRefRecId;

        return dbrLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastTransactionForLocationSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last entry in the Dump and bottling line table for the current DBR.
    /// </summary>
    /// <returns>
    /// A <c>GGIDumpAndBottlingLine</c> table record.
    /// </returns>
    public GGIDumpAndBottlingLine lastTransactionForLocationSite()
    {
        GGIDumpAndBottlingRecord    dbr;
        GGIDumpAndBottlingLine      dbrLine;

        select firstonly dbrLine
            order by CreatedDateTime desc
            where dbrLine.DBRId == this.DBRId
                && dbrLine.InventTransRefRecId;

        return dbrLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDBR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a Dump and bottling record.
    /// </summary>
    /// <param name = "_inventSiteId">
    /// The site for which to create the DBR.
    /// </param>
    /// <param name = "_wmsLocationId">
    /// The location for which to create the DBR.
    /// </param>
    /// <returns>
    /// The <c>GGIDumpAndBottlingRecord</c> recorrd that was created.
    /// </returns>
    public static GGIDumpAndBottlingRecord createDBR(InventSiteId _inventSiteId, WMSLocationId _wmsLocationId)
    {
        GGIDumpAndBottlingRecord dbr;

        if (TTBInventSiteParameters::find(_inventSiteId).DumpBottlingRecordNumberSequenceTable)
        {
            dbr.WMSLocationId   = _wmsLocationId;
            dbr.InventSiteId    = _inventSiteId;
            dbr.insert();
        }

        return dbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGaugeReadings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates gauge related readings on the DBR.
    /// </summary>
    public void updateGaugeReadings()
    {
        TTBInventGaugeTable inventGaugeTable;

        select firstonly inventGaugeTable
            order by CreatedDateTime desc
            where inventGaugeTable.WMSLocationId    == this.WMSLocationId
                && inventGaugeTable.InventSiteId    == this.InventSiteId;

        if (inventGaugeTable)
        {
            this.selectForUpdate(true);
            
            ttsbegin;
            this.TotalGaugingProofGallon    = inventGaugeTable.TotalProofGallon;
            this.TankGaugingWineGallon      = inventGaugeTable.TotalWineGallon;
            this.TankGaugingProof           = inventGaugeTable.Proof;

            this.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>peformJumpRef</Name>
				<Source><![CDATA[
    static void peformJumpRef(GGIDumpAndBottlingRecord  _dbr)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        WMSLocation     wmsLocation;
        InventLocation  inventLocation;

        select firstonly wmsLocation
            where wmsLocation.wMSLocationId     == _dbr.WMSLocationId
            join inventLocation
            where wmsLocation.inventLocationId  == inventLocation.InventLocationId
                && inventLocation.InventSiteId  == _dbr.InventSiteId;
    
        args.record(wmsLocation);
        args.lookupRecord(wmsLocation);
    
        menuFunction = new MenuFunction(menuitemDisplayStr(WHSLocation), MenuItemType::Display);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        GGIDumpAndBottlingRecord dbrOrig = this.orig();

        if (this.TankGaugingWineGallon != dbrOrig.TankGaugingWineGallon)
        {
            this.TotalGaugingProofGallon = TTBUtilHelper::convertWineGallon2Proof(this.TankGaugingWineGallon, this.TankGaugingProof);
        }
        
        super();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId()
    {
        GGIDumpAndBottlingLine  dbrLine;

        select firstonly dbrLine
            order by RecId desc
            where dbrLine.DBRId == this.DBRId 
                && dbrLine.ItemId;

        return dbrLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransactions</Name>
				<Source><![CDATA[
    public boolean hasTransactions()
    {
        GGIDumpAndBottlingLine  dbrLine;

        select firstonly dbrLine
            where dbrLine.DBRId == this.DBRId;                

        return dbrLine.RecId!=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastTransactionForSiteLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last item that was transacted on for a given location and site.
    /// </summary>
    /// <param name = "_wmsLocationId">
    /// The location for which to search transactions.
    /// </param>
    /// <param name = "_inventSiteId">
    /// The site for which to search transactions.
    /// </param>
    /// <param name = "_itemId">
    /// The item no. for which to search transactions.
    /// </param>
    /// <returns>
    /// A record from the <c>InventTable</c> table.
    /// </returns>
    public static GGIDumpAndBottlingLine getLastTransactionForSiteLocation(wMSLocationId _wmsLocationId, InventSiteId _inventSiteId, ItemId _itemId)
    {
        GGIDumpAndBottlingRecord    dbr;
        GGIDumpAndBottlingLine      dbrLine;
        
        select firstonly dbrLine
            order by RecId desc
            join dbr
            where dbrLine.DBRId         == dbr.DBRId
                && dbr.WMSLocationId    == _wmsLocationId
                && dbr.InventSiteId     == _inventSiteId
                && dbrLine.ItemId       == _itemId
                && dbrLine.InventTransRefRecId;

        return dbrLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceWineGallon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance wine gallons in the current state of the DBR.
    /// </summary>
    /// <returns>
    /// The aggregate wine gallons of the DBR.
    /// </returns>
    public TTBWineGallon balanceWineGallon()
    {
        GGIDumpAndBottlingLine  dbrLine;

        select sum(WineGallon) from dbrLine
            where dbrLine.DBRId == this.DBRId;

        return dbrLine.WineGallon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceProofGallon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance proof gallons in the current state of the DBR.
    /// </summary>
    /// <returns>
    /// The aggregate proof gallons of the DBR.
    /// </returns>
    public TTBWineGallon balanceProofGallon()
    {
        GGIDumpAndBottlingLine  dbrLine;

        select sum(ProofGallon) from dbrLine
            where dbrLine.DBRId == this.DBRId;

        return dbrLine.ProofGallon;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GGI:DBRHeaderDevDoc</DeveloperDocumentation>
	<Label>@GGI:DBR</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>DBRId</TitleField1>
	<TitleField2>WMSLocationId</TitleField2>
	<ReplacementKey>DBRIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DBRId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DBRId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Header</Name>
			<Label>@GGI:DBR</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DBRId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OpenedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OpenedTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalDumpedProofGallon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalRemovedProofGallon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalGainLossProofGallon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceProofGallon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceWineGallon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TankGaugingWineGallon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TankGaugingProof</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalGaugingProofGallon</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosedByWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferDBRId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DBRId</Name>
			<ExtendedDataType>GGIDumpAndBottlingRecordId</ExtendedDataType>
			<Label>@SYS2060</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<Label>@SYS79913</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>OpenedDate</Name>
			<ExtendedDataType>GGIDateOpened</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>OpenedTime</Name>
			<ExtendedDataType>GGITimeOpened</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<EnumType>GGIDumpAndBottlingRecordStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ClosedDate</Name>
			<ExtendedDataType>GGIDateClosed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ClosedTime</Name>
			<ExtendedDataType>GGITimeClosed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferDBRId</Name>
			<ExtendedDataType>GGIDumpAndBottlingRecordId</ExtendedDataType>
			<Label>@GGI:TrasnferredToDBR</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalDumpedProofGallon</Name>
			<ExtendedDataType>TTBProofGallon</ExtendedDataType>
			<Label>@GGI:TotalDumpedProofGallon</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalRemovedProofGallon</Name>
			<ExtendedDataType>TTBProofGallon</ExtendedDataType>
			<Label>@GGI:TotalRemovedProofGallon</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalGainLossProofGallon</Name>
			<ExtendedDataType>TTBProofGallon</ExtendedDataType>
			<Label>@GGI:TotalGainLossProofGallon</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BalanceProofGallon</Name>
			<ExtendedDataType>TTBProofGallon</ExtendedDataType>
			<Label>@GGI:BalanceProofGallon</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BalanceWineGallon</Name>
			<ExtendedDataType>TTBWineGallon</ExtendedDataType>
			<Label>@GGI:BalanceWineGallon</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TankGaugingWineGallon</Name>
			<ExtendedDataType>TTBWineGallon</ExtendedDataType>
			<Label>@GGI:TankGaugingWineGallon</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TankGaugingProof</Name>
			<ExtendedDataType>TTBProof</ExtendedDataType>
			<Label>@GGI:TankGaugingProof</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalGaugingProofGallon</Name>
			<ExtendedDataType>TTBProofGallon</ExtendedDataType>
			<Label>@GGI:TotalGaugingProofGallon</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ClosedByWorker</Name>
			<ExtendedDataType>GGIDBRClosedByWorker</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UpdatedFromWork</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DBRIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>DBRId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClosedByWorker</Name>
					<Field>ClosedByWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<SourceEDT>wmsLocationId</SourceEDT>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventSite</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>