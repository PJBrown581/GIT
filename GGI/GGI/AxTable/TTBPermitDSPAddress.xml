<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBPermitDSPAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TTBPermitDSPAddress extends common
{
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record based on its record ID.
    /// </summary>
    /// <param name = "_recId">
    ///     The record ID of the record to find.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the found record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The found record; otherwise, an empty buffer.
    /// </returns>
    public static TTBPermitDSPAddress find(TTBPermitDSPAddressRecId _recId, boolean _forUpdate = false)
    {
        TTBPermitDSPAddress permitDSPAddress;

        permitDSPAddress.selectForUpdate(_forUpdate);
        select firstonly permitDSPAddress
            where permitDSPAddress.RecId == _recId;

        return permitDSPAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a record exists with the specified record ID.
    /// </summary>
    /// <param name = "_recId">
    ///     A record ID.
    /// </param>
    /// <returns>
    ///     true, if a record exists; otherwise, false.
    /// </returns>
    public static boolean exist(TTBPermitDSPAddressRecId _recId)
    {
        return  (select TTBPermitDSPAddress
                    where TTBPermitDSPAddress.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record based on its natural key.
    /// </summary>
    /// <param name = "_permitKey">
    ///     The record ID of a permit.
    /// </param>
    /// <param name = "_inventLocationId">
    ///     The warehouse ID.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the found record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The found record; otherwise, an empty buffer.
    /// </returns>
    public static TTBPermitDSPAddress findNaturalKey(TTBPermitKey _permitKey, InventLocationId _inventLocationId, boolean _forUpdate = false)
    {
        TTBPermitDSPAddress permitDSPAddress;

        permitDSPAddress.selectForUpdate(_forUpdate);
        select firstonly permitDSPAddress
            where permitDSPAddress.InventLocationIdFrom == _inventLocationId
                && permitDSPAddress.PermitTable == _permitKey;

        return permitDSPAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a record identified by its natural key exists.
    /// </summary>
    /// <param name = "_permitKey">
    ///     The record ID of a permit.
    /// </param>
    /// <param name = "_inventLocationId">
    ///     The warehouse ID.
    /// </param>
    /// <returns>
    ///     true, if a record exists; otherwise, false.
    /// </returns>
    public static boolean existNaturalKey(TTBPermitKey _permitKey, InventLocationId _inventLocationId)
    {
        return  (select TTBPermitDSPAddress
                    where TTBPermitDSPAddress.PermitTable == _permitKey
                        && TTBPermitDSPAddress.InventLocationIdFrom == _inventLocationId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttbPermitTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding permit.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the corresponding permit is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding permit; otherwise, an empty buffer.
    /// </returns>
    public TTBPermitTable ttbPermitTable(boolean _forUpdate = false)
    {
        return TTBPermitTable::find(this.PermitTable, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding warehouse.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines in the corresponding warehouse is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding warehouse; otherwise, an empty buffer.
    /// </returns>
    public InventLocation inventLocation(boolean _forUpdate = false)
    {
        return InventLocation::find(this.InventLocationIdFrom, _forUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GGI:TTBpermitDevDoc</DeveloperDocumentation>
	<Label>@GGI:TTBPermitDSPAddressTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>PermitTable</TitleField1>
	<ClusteredIndex>PkIdx</ClusteredIndex>
	<PrimaryIndex>PkIdx</PrimaryIndex>
	<ReplacementKey>PkIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PermitTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PermitTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Approval</Name>
			<Label>@SYS2453</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ApprovalSerialNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TTBApprovalDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PermitTable</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TTBPermitKey</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationIdFrom</Name>
			<ExtendedDataType>InventLocationIdFrom</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ApprovalSerialNum</Name>
			<ExtendedDataType>TTBApprovalSerialNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TTBApprovalDate</Name>
			<ExtendedDataType>TTBApprovalDate</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PkIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PermitTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventLocationIdFrom</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TTBPermitTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TTBPermitTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PermitTable</Name>
					<Field>PermitTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>