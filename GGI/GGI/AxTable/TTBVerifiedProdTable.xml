<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBVerifiedProdTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Verified production header for the verified production report.
/// </summary>
public class TTBVerifiedProdTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record based on its record ID.
    /// </summary>
    /// <param name = "_recId">
    ///     ID of the record to find.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the found record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The found record; otherwise, an empty buffer.
    /// </returns>
    public static TTBVerifiedProdTable find(TTBVerifiedProdTableRecId _recId, boolean _forUpdate = false)
    {
        TTBVerifiedProdTable    vprTable;

        vprTable.selectForUpdate(_forUpdate);
        select firstonly vprTable
            where vprTable.RecId == _recId;

        return vprTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a record specified by its record ID exists.
    /// </summary>
    /// <param name = "_recId">
    ///     The record ID of the record in question.
    /// </param>
    /// <returns>
    ///     true, if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(TTBVerifiedProdTableRecId _recId)
    {
        return (select TTBVerifiedProdTable
                    where TTBVerifiedProdTable.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record based on a RAF journal number.
    /// </summary>
    /// <param name = "_rafJournalId">
    ///     A RAF journal number.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the found record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The found record; otherwise, an empty buffer.
    /// </returns>
    public static TTBVerifiedProdTable findJournalId(ProdJournalId _rafJournalId, boolean _forUpdate = false)
    {
        TTBVerifiedProdTable    vprTable;

        vprTable.selectForUpdate(_forUpdate);
        select firstonly vprTable
            where vprTable.JournalId == _rafJournalId;

        return vprTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a record specified by a RAF journal number exists.
    /// </summary>
    /// <param name = "_rafJournalId">
    ///     A RAF journal number.
    /// </param>
    /// <returns>
    ///     true, if the record exists; otherwise, false.
    /// </returns>
    public static boolean existJournalId(ProdJournalId _rafJournalId)
    {
        return (select TTBVerifiedProdTable
                    where TTBVerifiedProdTable.JournalId == _rafJournalId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProdId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record based on a production order number.
    /// </summary>
    /// <param name = "_prodId">
    ///     A production order number.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the found record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The found record; otherwise, an empty buffer.
    /// </returns>
    public static TTBVerifiedProdTable findProdId(ProdId _prodId, boolean _forUpdate = false)
    {
        TTBVerifiedProdTable    vprTable;

        vprTable.selectForUpdate(_forUpdate);
        select firstonly vprTable
            where vprTable.ProdId == _prodId;

        return vprTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProdId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a record specified by a production order number exists.
    /// </summary>
    /// <param name = "_prodId">
    ///     A production order number.
    /// </param>
    /// <returns>
    ///     true, if the record exists; otherwise, false.
    /// </returns>
    public static boolean existProdId(ProdId _prodId)
    {
        return (select TTBVerifiedProdTable
                    where TTBVerifiedProdTable.ProdId == _prodId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttbVerifiedProdSerialTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding serial number record.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determeines if the serial number record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding serial number record; otherwise, an empty buffer.
    /// </returns>
    public TTBVerifiedProdSerialTable ttbVerifiedProdSerialTable(boolean _forUpdate = false)
    {
        return TTBVerifiedProdSerialTable::find(this.TTBVerifiedProdSerialTable, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateVPRTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds or creates a VPR table record.
    /// </summary>
    /// <param name = "_prodId">
    ///     Production order number.
    /// </param>
    /// <param name = "_vprManager">
    ///     A VPR manager to use in the creation of the VPR table record. Optional.
    /// </param>
    /// <returns>
    ///     The found or created VPR table record.
    /// </returns>
    public static TTBVerifiedProdTable findOrCreateVPRTable(ProdId _prodId, TTBVerifiedProdReportManager _vprManager = TTBVerifiedProdReportManager::newProdId(_prodId))
    {
        TTBVerifiedProdTable    vprTable = TTBVerifiedProdTable::findProdId(_prodId);

        ProdJournalId   rafJournalId = _vprManager.prodJournalTable().JournalId;
        
        if (!vprTable || vprTable.JournalId != rafJournalId)
        {
            ttsbegin;

            if (!vprTable)
            {

                vprTable.initValue();
                vprTable.ProdId                     = _prodId;
                vprTable.TTBVerifiedProdSerialTable = TTBVerifiedProdSerialTable::findOrCreate(DateTimeUtil::date(_vprManager.originalRAFDateTime()), _vprManager.prodTable().inventDim().InventSiteId).RecId;
            }
            else
            {
                vprTable.selectForUpdate(true);
            }

            vprTable.JournalId = rafJournalId;
            vprTable.write();

            ttscommit;
        }

        return vprTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the associated production order.
    /// </summary>
    /// <param name = "_forupdate">
    ///     Determines if the associated production order is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The associated production order; otherwise, an empty buffer.
    /// </returns>
    public ProdTable prodTable(boolean _forupdate = false)
    {
        return ProdTable::find(this.ProdId, _forUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GGI:VerifiedProductionReportHeader</DeveloperDocumentation>
	<Label>@GGI:VerifiedProductionRecordHeader</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>JournalId</TitleField2>
	<ReplacementKey>ProdId_Idx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>JournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TTBVerifiedProdSerialTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalId</Name>
			<ExtendedDataType>ProdJournalId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TTBVerifiedProdSerialTable</Name>
			<ExtendedDataType>TTBVerifiedProdSerialTableRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalId_Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>JournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProdId_Idx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>TTBVerifiedProdSerialTable</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TTBVerifiedProdSerialTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TTBVerifiedProdSerialTable</Name>
					<Field>TTBVerifiedProdSerialTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>