<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBVerifiedProdTransBucket</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Buckets to store relevant totals corresponding to a VPR transaction record.
/// </summary>
public class TTBVerifiedProdTransBucket extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record specified by its record ID.
    /// </summary>
    /// <param name = "_recId">
    ///     The record ID.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the found record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The found record; otherwise, an empty buffer.
    /// </returns>
    public static TTBVerifiedProdTransBucket find(TTBVerifiedProdTransBucketRecId _recId, boolean _forUpdate = false)
    {
        TTBVerifiedProdTransBucket bucket;

        bucket.selectForUpdate(_forUpdate);
        select firstonly bucket
            where bucket.RecId == _recId;

        return bucket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines a record's existence by its record ID.
    /// </summary>
    /// <param name = "_recId">
    ///     The record ID of the record in question.
    /// </param>
    /// <returns>
    ///     true, if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(TTBVerifiedProdTransBucketRecId _recId)
    {
        return  (select TTBVerifiedProdTransBucket
            where TTBVerifiedProdTransBucket.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record specified by its corresponding VPR transaction record ID.
    /// </summary>
    /// <param name = "_recId">
    ///     The record ID of the corresponding VPR transaction record.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the found record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The found record; otherwise, an empty buffer.
    /// </returns>
    public static TTBVerifiedProdTransBucket findNaturalKey(TTBVerifiedProdTransRecId _recId, boolean _forUpdate = false)
    {
        TTBVerifiedProdTransBucket bucket;

        bucket.selectForUpdate(_forUpdate);
        select firstonly bucket
            where bucket.TTBVerifiedProdTrans == _recId;

        return bucket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines a record's existence by its corresponding VPR transaction record ID.
    /// </summary>
    /// <param name = "_recId">
    ///     The record ID of the corresponding VPR transaction record.
    /// </param>
    /// <returns>
    ///     true, if the record exists; otherwise, false.
    /// </returns>
    public static boolean existNaturalKey(TTBVerifiedProdTransRecId _recId)
    {
        return  (select TTBVerifiedProdTransBucket
            where TTBVerifiedProdTransBucket.TTBVerifiedProdTrans == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttbVerifiedProdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding VPR transaction record.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the corresponding record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding VPR transaction record; otherwise, an empty buffer.
    /// </returns>
    public TTBVerifiedProdTrans ttbVerifiedProdTrans(boolean _forUpdate = false)
    {
        return TTBVerifiedProdTrans::find(this.TTBVerifiedProdTrans, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTTBVerifiedProdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes this buffer with a VPR transaction record.
    /// </summary>
    /// <param name = "_vprTrans">
    ///     A VPR transaction record.
    /// </param>
    public void initFromTTBVerifiedProdTrans(TTBVerifiedProdTrans _vprTrans)
    {
        switch(_vprTrans.Type)
        {
            case TTBVerifiedProdRecordType::ArticleSDA:
                this.Type = TTBVerifiedProdRecordBucketType::SDARemoved;
                break;
            case TTBVerifiedProdRecordType::ArticleCDA:
                this.Type = TTBVerifiedProdRecordBucketType::CDARemoved;
                break;
            case TTBVerifiedProdRecordType::CDA:
                this.Type = TTBVerifiedProdRecordBucketType::CDA;
                break;
            case TTBVerifiedProdRecordType::Pure:
                this.Type = TTBVerifiedProdRecordBucketType::Pure;
                break;
            case TTBVerifiedProdRecordType::SDA:
                this.Type = TTBVerifiedProdRecordBucketType::SDA;
                break;
            case TTBVerifiedProdRecordType::SDAArticle:
                this.Type = TTBVerifiedProdRecordBucketType::SDAMade;
                break;
        }

        if (_vprTrans.Tank)
        {
            if ((_vprTrans.Type == TTBVerifiedProdRecordType::ArticleSDA && _vprTrans.RawMaterialAlcoholType == TTBAlcoholType::SDA)
                || (_vprTrans.Type == TTBVerifiedProdRecordType::ArticleCDA && _vprTrans.RawMaterialAlcoholType == TTBAlcoholType::CDA))
            {
                this.WineGallons = _vprTrans.WineGallonConsumed;
            }
            else
            {
                this.WineGallons = _vprTrans.WineGallonProduced;
            }
        }
        else
        {
            this.Type           = TTBVerifiedProdRecordBucketType::SDARemoved;
            this.WineGallons    = TTBUtilHelper::convert2WineGallon(_vprTrans.DenaturantQty, _vprTrans.DenaturantUnitId, _vprTrans.DenaturantItemId);
        }
        
        TTBItemAlcoholTypeView  itemAlcohol = TTBItemAlcoholTypeView::findItem(_vprTrans.ttbVerifiedProdTable().prodTable().ItemId);

        this.UOMClass               = _vprTrans.UOMClass;
        this.ProofGallons           = this.Type == TTBVerifiedProdRecordBucketType::Pure ? TTBUtilHelper::convertWineGallon2Proof(this.WineGallons, itemAlcohol.Proof) : 0;
        this.TTBVerifiedProdTrans   = _vprTrans.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GGI:ThisTableWillHoldTotalsByBucketOrGroup</DeveloperDocumentation>
	<Label>@GGI:VPRBucket</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TitleField1>Type</TitleField1>
	<TitleField2>UOMClass</TitleField2>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOMClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WineGallons</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProofGallons</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TTBVerifiedProdTrans</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bucket</Name>
			<Label>@GGI:Bucket</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Type</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UOMClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WineGallons</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProofGallons</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Type</Name>
			<EnumType>TTBVerifiedProdRecordBucketType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UOMClass</Name>
			<EnumType>TTBUOMClass</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>WineGallons</Name>
			<ExtendedDataType>TTBWineGallon</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProofGallons</Name>
			<ExtendedDataType>TTBProofGallon</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TTBVerifiedProdTrans</Name>
			<ExtendedDataType>TTBVerifiedProdTransRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReferenceIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TTBVerifiedProdTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TTBVerifiedProdTrans</Name>
			<Cardinality>OneMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TTBVerifiedProdTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TTBVerifiedProdTrans</Name>
					<Field>TTBVerifiedProdTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>