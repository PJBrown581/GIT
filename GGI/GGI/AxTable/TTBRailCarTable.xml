<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBRailCarTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TTBRailCarTable extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets a record based on the recId
    /// </summary>
    /// <param name = "_recid">ID of the record to find.</param>
    /// <param name = "_forupdate"> Determines if the found record is selected for update. Optional.</param>
    /// <returns>The found record; otherwise, an empty buffer.</returns>
    public static TTBRailCarTable find(TTBRailCarTAbleRecId _recid, boolean _forupdate =false)
    {
        TTBRailCarTable railCarTable;
        
        railCarTable.selectForUpdate(_forupdate);

        if(_recid)
        {
            select firstonly railCarTable
                where railCarTable.RecId == _recid;
        }

        return railCarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines if a record specified by its record ID exists.
    /// </summary>
    /// <param name = "_recId">The record ID of the record in question.</param>
    /// <returns> true, if the record exists; otherwise, false.</returns>
    public static boolean exists(TTBRailCarTAbleRecId _recId)
    {
        return (select TTBRailCarTable  
            where TTBRailCarTable.recid == _recId).recid !=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRailCarNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record based on the railcar number
    /// </summary>
    /// <param name = "_number">railcar record number</param>
    /// <param name = "_forupdate"> true, if the record exists; otherwise, false.</param>
    /// <returns></returns>
    public static TTBRailCarTable findByRailCarNumber(TTBRailCarNumSeqId _number, boolean _forupdate =false)
    {
        TTBRailCarTable railCarTable;
        
        railCarTable.selectForUpdate(_forupdate);

        if(_number)
        {
            select firstonly railCarTable
                where railCarTable.RailCarRecordNumber == _number;
        }

        return railCarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByQualityOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the railcar record with the given quality order association.
    /// </summary>
    /// <param name = "_qualityOrderId">
    /// The quality order to look for on the railcar records.
    /// </param>
    /// <param name = "_forUpdate">
    /// Indicates whether the record is being updated.
    /// </param>
    /// <returns>
    /// A record from the <c>TTBRailCarTable</c> table.
    /// </returns>
    public static TTBRailCarTable findByQualityOrderId(InventQualityOrderId _qualityOrderId, boolean _forUpdate = false)
    {
        TTBRailCarTable railCarTable;
        
        railCarTable.selectForUpdate(_forupdate);

        if(_qualityOrderId)
        {
            select firstonly railCarTable
                where railCarTable.InventQualityOrderId == _qualityOrderId;
        }

        return railCarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// return the balnce of qty for a railcar record
    /// </summary>
    /// <returns>total qty of transactions</returns>
    public Qty qtyBalance()
    {
        TTBRailCarLine line;

        select sum(Qty) from line
            where line.RailCarTable == this.RecId;
        
        return line.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateClosing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a railcar can be closed
    /// </summary> 
    public void validateClosing()
    {
        if (this.RailcarRecordSubclass != TTBRailcarRecordSubclass::InventoryMovement)
        {
            if (this.InventQualityOrderId)
            {
                if (this.QOStatus() != InventTestOrderStatus::Pass)
                {
                    throw error(strFmt("@GGI:RailcarCloseQOError", this.InventQualityOrderId));
                }
            }
            else
            {
                throw error("@GGI:NoQOFound");
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenRailcar</Name>
				<Source><![CDATA[
    /// <summary>
    /// locates the open railcar to add a transaction record
    /// </summary>
    /// <param name = "_Inventlocation">warehouse to filter by</param>
    /// <param name = "_location">location to filter by</param>
    /// <returns></returns>
    public static TTBRailCarTable findOpenRailcar(InventLocationId _Inventlocation, WMSLocationId _location)
    {
        TTBRailCarTable railCarTable;
        InventDim dim;
        
        select firstonly railCarTable
            order by RecId desc
            join  dim 
            where railCarTable.InventDimId      == dim.inventDimId
                && dim.InventLocationId         == _Inventlocation
                && dim.wmsLocationid            == _location
                && railCarTable.ClosedBy        == 0
                && railCarTable.RailCarStatus   == TTBRailCarStatus::Open;
       
        return railCarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// inventory dimension
    /// </summary>
    /// <returns>record buffer</returns>
    public InventDim InventDim()
    {
        return  InventDim::find(this.InventDimId) ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>QOStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public InventTestOrderStatus QOStatus()
    {
        return InventQualityOrderTable::find(this.InventQualityOrderId).OrderStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the last line from the rail car record.
    /// </summary>
    /// <returns>
    /// A record from the <c>TTBRailCarLine</c> table.
    /// </returns>
    public TTBRailCarLine lastLine()
    {
        TTBRailCarLine  railCarLine;

        select firstonly railCarLine
            order by LineNumber desc
            where railCarLine.RailCarTable == this.RecId;

        return railCarLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proofFromQO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the proof from the related Quality order.
    /// </summary>
    /// <returns>
    /// The proof value from the quality order.
    /// </returns>
    public TTBProof proofFromQO()
    {
        InventQualityOrderTable inventQOTable;
        InventQualityOrderLine  orderline;
        PdsBatchAttrib          pdsBatchAttrib;
        TTBProof                proof = 0;

        if (this.InventQualityOrderId)
        {
            //see if any of the order lines batch attibutes are for proof
            select firstonly orderLine
                    where orderline.QualityOrderId          == this.InventQualityOrderId
                    join pdsBatchAttrib
                    where pdsBatchAttrib.PdsBatchAttribId   == orderline.PdsBatchAttribId
                        && pdsBatchAttrib.TTBInventQualityProof;

            if (orderline)
            {
                proof = str2Num(orderLine.PdsAttribValue);
            }
        }

        return proof;      
    }

]]></Source>
			</Method>
			<Method>
				<Name>netQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns net quantities for lbs, wine gallons and proof gallons from a railcar record.
    /// </summary>
    /// <returns>
    /// A container with the following values (in that sequence): Net qty in inventory UOM, net Wine Gallons, net proof gallons.
    /// </returns>
    public container netQuantities()
    {
        InventQtyJournal    qty;
        TTBWineGallon       wineGallon;
        TTBProofGallon      proofGallon;
        TTBRailCarLine      railcarLine;

        select sum(Qty) from railcarLine
            where railcarLine.RailCarTable == this.RecId;

        qty = railcarLine.Qty;

        select sum(WineGallon) from railcarLine
            where railcarLine.RailCarTable == this.RecId;

        wineGallon = railcarLine.WineGallon;

        select sum(ProofGallon) from railcarLine
            where railcarLine.RailCarTable == this.RecId;

        proofGallon = railcarLine.ProofGallon;

        return [qty, wineGallon, proofGallon];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@GGI:TTBRCRTableDevDoc</DeveloperDocumentation>
	<FormRef>TTBRailCarRecord</FormRef>
	<Label>@GGI:TTBRCRTableRef</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<Tags>TTB008</Tags>
	<TitleField1>RailCarRecordNumber</TitleField1>
	<ReplacementKey>NaturalKeyIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RailCarRecordNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RailCarRecordNumber</Name>
			<ExtendedDataType>TTBRailCarNumSeqId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DateOpened</Name>
			<ExtendedDataType>TTBDateOpened</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DateClosed</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TTBDateClosed</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RailCarStatus</Name>
			<AllowEdit>No</AllowEdit>
			<EnumType>ttbRailCarStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>NumOfLines</Name>
			<ExtendedDataType>JournalNumOfLines</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ClosedBy</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>TTBRCRClosedBy</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RailcarRecordSubclass</Name>
			<EnumType>TTBRailcarRecordSubclass</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WhSWorkTableRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventQualityOrderId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>InventQualityOrderId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Proof</Name>
			<ExtendedDataType>TTBProof</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferToRailCarNum</Name>
			<ExtendedDataType>TTBRailCarNumSeqId</ExtendedDataType>
			<Label>Transferred to Railcar</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NaturalKeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RailCarRecordNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ClosedBy</Name>
					<Field>ClosedBy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>