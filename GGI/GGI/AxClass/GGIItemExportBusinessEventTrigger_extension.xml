<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIItemExportBusinessEventTrigger_extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// event handler extension for tables associated with item export business event
/// </summary>
public static class GGIItemExportBusinessEventTrigger_extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventTable_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// new item triggers business event
    /// </summary>
    /// <param name="sender">Invent table</param>
    /// <param name="e">data event type</param>
    [DataEventHandler(tableStr(InventTable), DataEventType::Inserted)]
    public static void InventTable_onInserted(Common sender, DataEventArgs e)
    {
        InventTable inventTable = sender;
        GGIItemExportBusinessEventHelper helper= new GGIItemExportBusinessEventHelper();
        
        if(helper.isItemSellable(InventTable))
        {
            helper.sendItemEvent(InventTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTable_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// update item trigers business event
    /// </summary>
    /// <param name="sender">IventTable</param>
    /// <param name="e">data event type</param>
    [DataEventHandler(tableStr(InventTable), DataEventType::Updated)]
    public static void InventTable_onUpdated(Common sender, DataEventArgs e)
    {
        InventTable inventTable = sender;
        GGIItemExportBusinessEventHelper helper= new GGIItemExportBusinessEventHelper();
        
        if(helper.isItemSellable(InventTable,true))
        {
            if(helper.validateItemTable(inventTable))
            {
                helper.sendItemEvent(InventTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventItemSalesSetup_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// send business event for salesfroce related fields
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event type</param>
    [DataEventHandler(tableStr(InventItemSalesSetup), DataEventType::Updated)]
    public static void InventItemSalesSetup_onUpdated(Common sender, DataEventArgs e)
    {
        InventItemSalesSetup salesSetup = sender;
        InventTable inventtable = inventtable::find(salesSetup.ItemId );
        GGIItemExportBusinessEventHelper helper= new GGIItemExportBusinessEventHelper();
        if(helper.isItemSellable(InventTable,true))
        {
            if(helper.validateInventItemSalesSetup(salesSetup))
            {
                helper.sendItemEvent(InventTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventItemSetupSupplyType_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// send business event for salesfroce related fields
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event type</param>
    [DataEventHandler(tableStr(InventItemSetupSupplyType), DataEventType::Updated)]
    public static void InventItemSetupSupplyType_onUpdated(Common sender, DataEventArgs e)
    {
        InventItemSetupSupplyType setupSupplyType = sender;
        InventTable inventTable = InventTable::find(setupSupplyType.ItemId);
        GGIItemExportBusinessEventHelper helper= new GGIItemExportBusinessEventHelper();
        
        if(helper.isItemSellable(InventTable,true))
        {
            if(helper.validateInventItemSetupSupplyType(setupSupplyType))
            {
                helper.sendItemEvent(InventTable);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>InventItemPurchSetup_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// send business event for salesfroce related fields
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data type event</param>
    [DataEventHandler(tableStr(InventItemPurchSetup), DataEventType::Updated)]
    public static void InventItemPurchSetup_onUpdated(Common sender, DataEventArgs e)
    {
        InventItemPurchSetup purchSetup = sender;
        InventTable inventTable = InventTable::find(purchSetup.ItemId);
        GGIItemExportBusinessEventHelper helper= new GGIItemExportBusinessEventHelper();
        
        if(helper.isItemSellable(InventTable,true))
        {
            if(helper.validateInventItemPurchSetup(purchSetup))
            {
                helper.sendItemEvent(InventTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTableModule_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// send business event for salesfroce related fields
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data type event</param>
    [DataEventHandler(tableStr(InventTableModule), DataEventType::Updated)]
    public static void InventTableModule_onUpdated(Common sender, DataEventArgs e)
    {
        InventTableModule module = sender;
        InventTable InventTable = InventTable::find(module.ItemId);
        GGIItemExportBusinessEventHelper helper= new GGIItemExportBusinessEventHelper();
        
        if(helper.isItemSellable(InventTable,true))
        {
            if(helper.validateInventTableModule(module))
            {
                helper.sendItemEvent(InventTable);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>