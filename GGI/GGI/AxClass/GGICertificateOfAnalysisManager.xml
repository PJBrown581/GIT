<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGICertificateOfAnalysisManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager for the certificate of analysis.
/// </summary>
class GGICertificateOfAnalysisManager
{
    /// <summary>
    ///     Certificate of analysis number or ID.
    /// </summary>
    public InventCertificateOfAnalysisId    CoAId;

    /// <summary>
    ///     Cache.
    /// </summary>
    protected InventTestCertOfAnalysisTable CoATable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGICertificateOfAnalysisManager construct()
    {
        return new GGICertificateOfAnalysisManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified certificate of analysis ID.
    /// </summary>
    /// <param name = "_id">
    ///     The certificate of analysis ID.
    /// </param>
    /// <returns>
    ///     This object.
    /// </returns>
    public static GGICertificateOfAnalysisManager newId(InventCertificateOfAnalysisId _id)
    {
        GGICertificateOfAnalysisManager coaManager = GGICertificateOfAnalysisManager::construct();

        coaManager.CoAId = _id;

        return coaManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>coaTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current certificate of analysis.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the certificate of analysis is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The current certificate of analysis.
    /// </returns>
    public InventTestCertOfAnalysisTable coaTable(boolean _forUpdate = false)
    {
        if (CoAId != CoATable.InventCertificateOfAnalysisId)
        {
            CoATable = InventTestCertOfAnalysisTable::find(CoAId, _forUpdate);
        }
        else
        {
            CoATable.selectForUpdate(_forUpdate);
        }

        return CoATable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the associated production order from the current certificate of analysis.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the production order is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The associated production order; otherwise, an empty buffer.
    /// </returns>
    public ProdTable prodTable(boolean _forUpdate = false)
    {
        ProdTable prodTable;

        if (this.coaTable().ReferenceType == InventTestReferenceType::Production)
        {
            prodTable = ProdTable::find(this.coaTable().InventRefId, _forUpdate);
        }

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding quality order to the current certificate of analysis.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the quality order is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding quality order to the current certificate of analysis.
    /// </returns>
    public InventQualityOrderTable qualityOrderTable(boolean _forUpdate = false)
    {
        return InventQualityOrderTable::find(this.coaTable().QualityOrderId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quality order line corresponding to the current certificate of analysis.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the quality order line is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The quality order line corresponding to the current certificate of analysis.
    /// </returns>
    /// <remarks>
    ///     Use the next statement to fetch subsequent quality order lines.
    /// </remarks>
    public InventQualityOrderLine qualityOrderLine(boolean _forUpdate = false)
    {
        InventQualityOrderLine  qualityOrderLine;

        qualityOrderLine.selectForUpdate(_forUpdate);

        // Allow the caller to use the next statement for subsequent records. Therefore, do not use firstonly here.
        select qualityOrderLine
            where qualityOrderLine.QualityOrderId == this.coaTable().QualityOrderId;

        return qualityOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderLineResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quality order line result from the specified quality order line.
    /// </summary>
    /// <param name = "_qualityOrderLine">
    ///     A quality order line.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the quality order line result is selected for update. Optioal.
    /// </param>
    /// <returns>
    ///     The quality order line result.
    /// </returns>
    /// <remarks>
    ///     Use the next statement to fetch subsequent quality order line results.
    /// </remarks>
    public InventQualityOrderLineResults qualityOrderLineResult(InventQualityOrderLine _qualityOrderLine, boolean _forUpdate = false)
    {
        InventQualityOrderLineResults   qualityOrderLineResult;

        qualityOrderLineResult.selectForUpdate(_forUpdate);

        // Allow the caller to use the next statement for subsequent records. Therefore, do not use firstonly here.
        select qualityOrderLineResult
            where qualityOrderLineResult.QualityOrderId == _qualityOrderLine.QualityOrderId
                && qualityOrderLineResult.TestId == _qualityOrderLine.TestId
                && qualityOrderLineResult.TestSequence == _qualityOrderLine.TestSequence;

        return qualityOrderLineResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>testVariableOutcome</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the test variable outcome based on the variable ID and-or the variable outcome ID.
    /// </summary>
    /// <param name = "_variableId">
    ///     The variable ID; may be blank.
    /// </param>
    /// <param name = "_variableOutcomeId">
    ///     The variable outcome ID; may be blank.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the variable outcome is selected for update. Optioal.
    /// </param>
    /// <returns>
    ///     The test variable outcome; otherwise, an empty buffer.
    /// </returns>
    /// <remarks>
    ///     Use the next statement to fetch subsequent test variable outcomes.
    ///     At least, _variableId or _variableOutcomeId must be filled. Both cannot be blank.
    /// </remarks>
    public InventTestVariableOutcome testVariableOutcome(InventTestVariableId _variableId, InventTestVariableOutcomeId _variableOutcomeId, boolean _forUpdate = false)
    {
        InventTestVariableOutcome   testVariableOutcome;

        testVariableOutcome.selectForUpdate(_forUpdate);

        if (_variableId || _variableOutcomeId)
        {
            // Allow the caller to use the next statement for subsequent records. Therefore, do not use firstonly here.
            select testVariableOutcome
                where (!_variableId || testVariableOutcome.VariableId == _variableId)
                    && (!_variableOutcomeId || testVariableOutcome.VariableOutcomeId == _variableOutcomeId);
        }

        return testVariableOutcome;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the associate sales order from the current certificate of analysis.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the sales order is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The associated sales order; otherwise, an empty buffer.
    /// </returns>
    public SalesTable salesTable(boolean _forUpdate = false)
    {
        return this.salesLine().salesTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the associated sales line item from the current certificate of analysis.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the sales line item is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The associated sales line item; otherwise, an empty buffer.
    /// </returns>
    public SalesLine salesLine(boolean _forUpdate = false)
    {
        SalesLine salesLine;

        if (this.coaTable().ReferenceType == InventTestReferenceType::Sales)
        {
            salesLine = SalesLine::findInventTransId(this.coaTable().InventRefTransId, _forUpdate);
        }

        return salesLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>