<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIUnitManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager class for unit operations.
/// </summary>
class GGIUnitManager
{
    /// <summary>
    ///     From and To units.
    /// </summary>
    public UnitOfMeasureSymbol FromUnitId;
    public UnitOfMeasureSymbol ToUnitId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIUnitManager construct()
    {
        return new GGIUnitManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromToUnits</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with from and to units.
    /// </summary>
    /// <param name = "_fromUnitId">
    ///     Unit to convert from.
    /// </param>
    /// <param name = "_toUnitId">
    ///     Unit to convert to.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static GGIUnitManager newFromToUnits(UnitOfMeasureSymbol _fromUnitId, UnitOfMeasureSymbol _toUnitId)
    {
        GGIUnitManager  unitManager = GGIUnitManager::construct();

        unitManager.FromUnitId  = _fromUnitId;
        unitManager.ToUnitId    = _toUnitId;

        return unitManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a specified quantity from the current from and to units.
    /// </summary>
    /// <param name = "_qty">
    ///     Quantity to convert.
    /// </param>
    /// <param name = "_itemId">
    ///     Item number the quantity pertains to. Optional.
    /// </param>
    /// <returns>
    ///     The quantity in the current to units.
    /// </returns>
    public Qty convert(Qty _qty, ItemId _itemId = '')
    {
        Qty convertedQty;

        UnitOfMeasureRecId  fromUnitRecId   = UnitOfMeasure::unitOfMeasureIdBySymbol(FromUnitId);
        UnitOfMeasureRecId  toUnitRecId     = UnitOfMeasure::unitOfMeasureIdBySymbol(ToUnitId);

        if (_itemId)
        {
            convertedQty = EcoResProductUnitConverter::convertForReleasedProduct(_itemId, InventTable::getInventDimId(_itemId), _qty, fromUnitRecId, toUnitRecId);
        }
        else
        {
            convertedQty = UnitOfMeasureConverter::convert(_qty, fromUnitRecId, toUnitRecId, NoYes::Yes);
        }

        return convertedQty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>