<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBAlcoholValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Validator for alcohol types.
/// </summary>
class TTBAlcoholValidator
{
    /// <summary>
    ///     The alcohol type to validate.
    /// </summary>
    public  TTBAlcoholType      AlcoholType;
    /// <summary>
    ///     The permit to validate against.
    /// </summary>
    public  TTBPermitManager    PermitManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        PermitManager = TTBPermitManager::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TTBAlcoholValidator construct()
    {
        return new TTBAlcoholValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified item associated with alcohol.
    /// </summary>
    /// <param name = "_itemId">
    ///     The ID of the item.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static TTBAlcoholValidator newItem(ItemId _itemId)
    {
        TTBAlcoholValidator     validator       = TTBAlcoholValidator::construct();
        TTBItemAlcoholTypeView  itemAlhoholType = TTBItemAlcoholTypeView::findItem(_itemId);

        validator.AlcoholType = itemAlhoholType.AlcoholType;

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAlcoholPermit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified alcohol type and permit.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The alcohol type.
    /// </param>
    /// <param name = "_permitKey">
    ///     Record ID of a permit.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static TTBAlcoholValidator newAlcoholPermit(TTBAlcoholType _alcoholType, TTBPermitKey _permitKey)
    {
        TTBAlcoholValidator validator = TTBAlcoholValidator::construct();

        validator.AlcoholType   = _alcoholType;
        validator.PermitManager = TTBPermitManager::newPermit(_permitKey);

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates an alcohol item against the specified permit.
    /// </summary>
    /// <param name = "_itemId">
    ///     ID of an alcohol item.
    /// </param>
    /// <param name = "_qty">
    ///     The quantity in wine or proof gallons.
    /// </param>
    /// <param name = "_permitKey">
    ///     The record ID of a permit.
    /// </param>
    /// <returns>
    ///     true, if valid; otherwise, false.
    /// </returns>
    public static boolean validateItem(ItemId _itemId, TTBGallon _qty, TTBPermitKey _permitKey)
    {
        TTBItemAlcoholTypeView  itemAlcoholType = TTBItemAlcoholTypeView::findItem(_itemId);
        
        return TTBAlcoholValidator::validateAlcohol(itemAlcoholType.AlcoholType, _qty, _permitKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAlcohol</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates an alcohol item against the specified permit.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     Type of alcohol.
    /// </param>
    /// <param name = "_qty">
    ///     The quantity in wine or proof gallons.
    /// </param>
    /// <param name = "_permitKey">
    ///     The record ID of a permit.
    /// </param>
    /// <returns>
    ///     true, if valid; otherwise, false.
    /// </returns>
    public static boolean validateAlcohol(TTBAlcoholType _alcoholType, TTBGallon _qty, TTBPermitKey _permitKey)
    {
        boolean isValid = true;

        if (_permitKey && _alcoholType != TTBAlcoholType::none && _alcoholType != TTBAlcoholType::CDA)
        {
            TTBAlcoholValidator alcoholValidator    = TTBAlcoholValidator::newAlcoholPermit(_alcoholType, _permitKey);
            TTBPermitTable      permitTable         = alcoholValidator.PermitManager.permitTable();

            if (!alcoholValidator.isAlcoholTypeValid())
            {
                isValid = checkFailed(strFmt("@GGI:AlcoholTypeNotValidForPermit", alcoholValidator.AlcoholType, permitTable.PermitId));
            }

            isValid = isValid && alcoholValidator.isQtyAllowed(_qty);
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlcoholTypeValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the current alcohol type is valid against the current permit.
    /// </summary>
    /// <returns>
    ///     true, if valid; otherwise, false.
    /// </returns>
    public boolean isAlcoholTypeValid()
    {
        return this.isPermitManagerValid()
            && (AlcoholType == TTBAlcoholType::none
                || PermitManager.isAlcoholTypeAllowed(AlcoholType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQtyAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the specified quantity is allowed under the current permit.
    /// </summary>
    /// <param name = "_qty">
    ///     The quantity in wine or proof gallons according to the current alcohol type.
    /// </param>
    /// <returns>
    ///     true, if allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     If the current alcohol type is pure, then the quantity must be in proof gallons; otherwise, in wine gallons.
    /// </remarks>
    public boolean isQtyAllowed(TTBGallon _qty)
    {
        boolean isValid = this.isPermitManagerValid();

        if (isValid)
        {
            TTBGallonLimit  gallonLimit = PermitManager.gallonLimit(AlcoholType);

            if (gallonLimit < realMax())
            {
                TTBGallonRemain gallonRemain = PermitManager.calculateRemainingGallons(AlcoholType);

                if (gallonRemain - _qty < 0)
                {
                    isValid = checkFailed(strFmt("@GGI:PermitLimitWillBeExceeded", gallonLimit));
                }
                else
                {
                    Percent percentageToLimit   = (gallonLimit - gallonRemain + _qty) / gallonLimit * 100;

                    if (percentageToLimit >= 90)
                    {
                        // Warning only; non-fatal.
                        checkFailed(strFmt("@GGI:QuantityWillPutRemainingQuantityWithinPermitLimit", '', gallonLimit));
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPermitManagerValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the current permit is valid.
    /// </summary>
    /// <returns>
    ///     true, if valid; otherwise, false.
    /// </returns>
    protected boolean isPermitManagerValid()
    {
        boolean isValid = true;

        if (!PermitManager)
        {
            isValid = checkFailed(strFmt("@GGI:PermitNotAssignedToValidateAgainstAlcoholType", AlcoholType));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>