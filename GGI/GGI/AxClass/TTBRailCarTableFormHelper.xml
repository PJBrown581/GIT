<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBRailCarTableFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TTB08 class to provide support to form processes
/// </summary>
class TTBRailCarTableFormHelper
{

    public const str TTBUOM ='GAL';


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>TransferRailCarRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// process to transfer the open balance to a new reocrd.
    /// </summary>
    /// <param name = "_RCR">railcar record to process</param>
    public void TransferRailCarRecord(TTBRailCarTable _RCR)
    {
        SIGProcedureProvider    procedure;

        InventQualityOrderTable inventQualityOrderTable = InventQualityOrderTable::find(_RCR.InventQualityOrderId);
      
        if (inventQualityOrderTable && inventQualityOrderTable.OrderStatus != InventTestOrderStatus::Pass)
        {
            throw error(strFmt("@GGI:RailcarTransferQOError", inventQualityOrderTable.QualityOrderId));
        }
       
        ttsbegin;
        InventDim   inventdim           =   InventDim::find(_RCR.InventDimId);
        Num         railCarRecordNum    =   NumberSeq::newGetNumFromId(TTBInventSiteParameters::find(inventdim.InventSiteId).RailCarRecordNumberSequenceTable).num();   
        ttscommit;        

        //SIG - start
        if (isConfigurationkeyEnabled(configurationkeynum(SIG)))
        {
            procedure = GGIRailCarClosingProcedure::newRailCar(_RCR);
            if (procedure.signatureRequired())
            {
                if (procedure.sign())
                {
                    // copy lines                 
                    this.TransferRailCarLines(_RCR, railCarRecordNum);
                }
            }
        }
        //SIG - end
        _RCR = TTBRailCarTable::find(_RCR.RecId, true);
        ttsbegin;
        if (procedure && procedure.isSigned())
        {
            _RCR.TransferToRailCarNum = railCarRecordNum;
            _RCR.update();

            info(strFmt("Transferred to Railcar %1.", railCarRecordNum));
        }        
        ttscommit;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRailCarTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// create a railcar record table for the balance
    /// </summary>
    /// <param name = "_RailCarTable">railcar table record buffer</param>
    /// <param name = "_railcarRecord">number of railcar record</param>
    /// <returns>railcar record</returns>
    protected TTBRailCarTable createRailCarTable(TTBRailCarTable _RailCarTable, Num _railcarRecord)
    {
        TTBRailCarTable RailcarTable;

        RailcarTable.RailCarRecordNumber = _railcarRecord;
        RailcarTable.InventDimId = _RailCarTable.InventDimId;
        RailcarTable.DateOpened = DateTimeUtil::utcNow(); 
        RailcarTable.RailCarStatus = TTBRailCarStatus::Open;
        RailcarTable.InventQualityOrderId   = _RailCarTable.InventQualityOrderId;
        RailcarTable.insert();

        return RailcarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TransferRailCarLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// process to transfer railcar line balance.
    /// </summary>
    /// <param name = "_OriginalRailcarTable">current railcar record to be used</param>
    /// <param name = "_newRailcarTable">new railcar record to transfer to</param>
    protected void TransferRailCarLines(TTBRailCarTable _OriginalRailcarTable, Num _railCarRecordNum)
    {
        TTBRailCarLine      newLine;
        TTBRailCarLine      railcarLine;      
        container           netQuantities   = _OriginalRailcarTable.netQuantities();
        InventQtyJournal    qty             = conPeek(netQuantities, 1);
        TTBWineGallon       wineGallon      = conPeek(netQuantities, 2);
        TTBProofGallon      proofGallon     = conPeek(netQuantities, 3);

        if (!qty)
        {
            throw Error("@GGI:RailcarTransferNoInventoryError");
        }
          
        select firstonly railcarLine 
            where railcarLine.RailCarTable  == _OriginalRailcarTable.RecId
                && railcarLine.LineNumber   == 1;
       
        ttsbegin;
        newLine.clear();
        
        newLine.LineNumber          = 1;
        newLine.InventDimId         = railcarLine.InventDimId;
        newLine.transdate           = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        newLine.ItemId              = railcarLine.ItemId;
        newLine.Qty                 = qty;
        newLine.WhSWorkLine         = railcarLine.WhSWorkLine;
        newLine.Proof               = _OriginalRailcarTable.proofFromQO();
        newLine.WineGallon          = wineGallon;
        newLine.ProofGallon         = proofGallon; 
        
        if (!newLine.Proof)
        {
            newLine.Proof = railcarLine.Proof;
        }   

        TTBRailCarTable railCarTable    =  this.CreateRailCarTable(_OriginalRailcarTable, _railCarRecordNum);
        newLine.RailCarTable            = railCarTable.RecId;
        newLine.insert();
        ttscommit;     
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>