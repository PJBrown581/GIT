<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocFreeTextInvoiceReportDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GGIDocFreeTextInvoiceReportDSP extends DocDataSourceProviderSrsReporting
{
    FreeTextInvoiceTmp                      freeTextInvoiceLineWithHeaderFields;
    FreeTextInvoiceHeaderFooterTmp          freeTextInvoiceHeaderFlagFields;
    LogisticsAddressCountryRegionISOCode    isoCountryCode;
    FreeTextInvoiceContract                 freeTextInvoiceContract;
    boolean                                 showPrepaidTotals, showCustPaymSched;
    CustInvoiceJour                         custInvoiceJournal;
    CustInvoiceTable                        custInvoiceTable;

    /* Variables for custom placeholders */
    str         placeholder_invoiceId;
    str         placeholder_invoiceAccount;
    str         placeholder_invoicingName;
    str         placeholder_contactName;
    str         placeholder_custRef;
    date        placeholder_invoiceDate;
    date        placeholder_dueDate;
    str         placeholder_paymentCondition;


    #ISOCountryRegionCodes

    #define.FreeTextInvoiceHeader('FreeTextInvoiceHeader')
    #define.FreeTextInvoiceHeaderExt('FreeTextInvoiceHeaderExt')

    #define.FreeTextInvoiceLines('FreeTextInvoiceLines')
    #define.TaxLines('FreeTextInvoiceLines_Tax')
    #define.TaxWithholdLines('FreeTextInvoiceLines_TaxWithhold')
    #define.PrepayedLines('FreeTextInvoiceLines_Prepayed')
    #define.PaymSchedLines('FreeTextInvoiceLines_PaymSched')
    #define.MarkupLines('FreeTextInvoiceLines_Markup')
    #define.PaymentStub('SalesInvoicePaymentStub')

    #define.FreeTextInvoiceLinesLocalization('FreeTextInvoiceLocalizationLines')

    #define.DefaultDimensionField('FinancialDimensions')


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    protected void addDataFieldsForHeader(DocXmlRecord _addingRecord, FreeTextInvoiceHeaderFooterTmp _header)
    {
        /* This method contains all fields from the FreeTextInvoiceHeaderFooterTmp table */
        void addFieldsFromFreeTextInvoiceHeaderFooterTmp()
        {
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, BankSpecificSymbol));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, BuyerAddress));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, BuyerEnterpriseCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, BuyerName));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, BuyerRegNum_W));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyDebitDirectId));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, ConstantSymbol));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, ContactPersonName));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CorrectedInvoiceId));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CorrectiveReasonHeader));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CustomerBankAccount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CustomerBankName));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CustomerRef));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, DocumentDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, DuplicateDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, DuplicateNum));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, EnterpriseNumber));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, Enterpriseregister_NO));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, Iban));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceAccount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceReferenceNumber));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceTxt));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceTxtSequel));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoicingAddress));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoicingName));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, NotesLine_FR));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, OriginalInvoiceAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, OriginalInvoiceReference));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, OriginalVatAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, PayerEnterpriseCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, PayerRegNum_W));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, PaymentCondition));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, PaymentReference));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, PaymId));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, SalesAdministrator));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, SalesAdministratorEmail));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, SalesAdministratorPhone));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, SalesDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, SpecialFormattedDocumentDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, SpecialFormattedInvoiceDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, SpecialFormattedPrintDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, SwiftNumber));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, TaxLicenseNum));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, VatNum));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CorrectionReason));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CustBillingClassification));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, OriginalInvoice));
            _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, VatDueDate_W));   
          
            /* CONTROL FLEGS AND SPECIAL FORMATTING DATA */
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CustInvoiceRefNum_FI));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, ShowCompanyVATNum));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, ShowCurrencyBankAccount));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, ShowPayer));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, IsPaymIdVisible));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, PrintFreeTextInvoiceVATNum));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, IsCreditInvoicingReportEnabled));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, IsCreditInvoicingReportEnabled_W));

            // Group and add flags to the FreeTextInvoiceHeaderExt record in the generateXmlDataSource() method,
            // with other flags that come from the FreeTextInvoiceTmp table.
            buf2Buf(_header, freeTextInvoiceHeaderFlagFields);


            /* COUNTRY REGION RELATED DATA */
            switch (isoCountryCode)
            {
                case #isoTH:
                    _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceBranch_TH));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceTaxNatureOfAddress_TH));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceTaxRegNumber_TH));
                    break;

                case #isoMY:
                    _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, GSTReasonCode_MY));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, InvoiceType_MY));
                    break;
            }


            /* COMPANY RELATED DATA */
            // NOTE: The company data are excluded since we have them in the GeneralData data section.
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyAddress));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyBankAccount));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyBankName));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyCommercialRegister));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyCommercialRegisterInsetNumber));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyCommercialRegisterSection));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyCoRegNum));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyCurrencyBankAccount));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyCurrencyBankName));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyEmail));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyEnterpriseCode));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyEnterpriseNumber));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyGiro));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyLogo));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyName));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyPhone));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyRegNum));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyTeleFax));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyURL));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CompanyVATNum));
        }


        // Setting the flag needed for Docentric NextGen.
        _addingRecord.setSingleRecord(true);
        
        // (1) Change the name of the adding record from 'FreeTextInvoiceHeaderFooterTmp'
        // to a more readable name, e.g. 'FreeTextInvoiceHeader'.
        _addingRecord.setRecordName(#FreeTextInvoiceHeader);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Invoice header');  // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

        // (2) Add the needed fields from the FreeTextInvoiceHeaderFooterTmp table.
        addFieldsFromFreeTextInvoiceHeaderFooterTmp();

        // (3) Add Customer primary email.
        CustTable custTable_InvoiceAccount = CustTable::find(_header.InvoiceAccount);
        _addingRecord.addCalculatedField('CustomerEmail', custTable_InvoiceAccount.email());
        // See the references to the Account field of the CustVendAccountMap map for the explanation.

        // (4) Add Custom Fields defined on CustTable, if any.
        // Custom Fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        DocCustomFieldsHelper::tryAddAllCustomFieldsToDataRecord(custTable_InvoiceAccount, _addingRecord);

        // (5) Add Financial dimensions.
        _addingRecord.addCalculatedFieldFromEdt(#DefaultDimensionField, extendedTypeStr(DimensionDefault), this.custInvoiceJour().DefaultDimension);       
            
        // (6) Add Extension fields defined on FreeTextInvoiceHeaderFooterTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_header, _addingRecord, true);


        // TODO: Add here additional fields (or records) to the single header record by using the related
        // data from to the _header table buffer (FreeTextInvoiceHeaderFooterTmp) or reportContract.
        // For example, get the related CustInvoiceJour record and add additional data you need:
        //CustInvoiceJour custInvoiceJour = this.custInvoiceJour();
        //DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custInvoiceJour);
        //jourDataRecord.addField(fieldStr(CustInvoiceJour, Payment));
        //jourDataRecord.addDisplayMethod(tableMethodStr(CustInvoiceJour, isSummaryUpdated));
        // Or, add the customer payment type:
        //_addingRecord.addCalculatedField('CustomerPaymentType', CustTable::find(_header.InvoiceAccount).paymentType());

        //GGI - PJB 10/14/2021 - CR_DDSP_9304_FreeTextInvoice_AddShipTo
        CustInvoiceJour custInvoiceJour = this.custInvoiceJour();
        _addingRecord.addCalculatedField('DeliveryName', custInvoiceJour.DeliveryName);
        _addingRecord.addCalculatedField('DeliveryAddress', LogisticsPostalAddress::findRecId(custInvoiceJour.DeliveryPostalAddress).Address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, FreeTextInvoiceTmp _currentLine)
    {
        // (1) Store the first FreeTextInvoiceTmp record into a global variable. It will be used later,
        // in the generateXmlDataSource() method, to add fields that should be 'moved' to the header.
        if (freeTextInvoiceLineWithHeaderFields.RecId == 0)
        {
            buf2Buf(_currentLine, freeTextInvoiceLineWithHeaderFields);
            freeTextInvoiceLineWithHeaderFields.RecId = _currentLine.RecId;
        }

        // (2) Add the needed fields from the FreeTextInvoiceTmp table.
        // NOTE: EXCLUDE all fields you don't need on the report in the methods that
        // follow for the sake of maintenance. From these methods EXCLUDE all unnecessary fields
        // likewise INCLUDE additional fields you may need.

        // Add the data fields that originate from the related CustInvoiceTrans record.
        if (this.ftil_addMainLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        /*****  Fields that represent different types of lines  *****/
        // 1) TaxLines
        if (this.ftil_addTaxTransLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 2) TaxWithholdLines
        if (this.ftil_addTaxWithholdLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 3) PrepayedLines
        if (this.ftil_addCustTransLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 4) PaymSchedLines
        if (this.ftil_addPaymSchedLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 5) MarkupLines
        if (this.ftil_addMarkupLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        if (!this.isRuntime())
        {
            _addingRecord.setRecordName('FreeTextInvoiceLine_UnsupportedType');
            _addingRecord.addAllFields();
            DocGlobalHelper::handleWarning('Unsupported type of the FreeTextInvoiceTmp line');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLocalizationLine</Name>
				<Source><![CDATA[
    protected void addDataFieldsForLocalizationLine(DocXmlRecord _addingRecord, FreeTextInvoiceLocalizationTmp _currentLocalizationLine)
    {
        // Change the name of the adding record from 'FreeTextInvoiceLocalizationTmp'
        // to a more readable name, e.g. 'FreeTextInvoiceLinesLocalization'.
        _addingRecord.setRecordName(#FreeTextInvoiceLinesLocalization);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Invoice localization line');  // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

        // NOTE: FreeTextInvoiceLocalizationTmp is used only for the following countries:
        // #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL.
        // This method never gets executed for a contry outside this list.
        // In that case this method should be removed.

        // Instructions:
        // (1) Exclude fields you don't need on report. This is important thing to do for the sake of maintenance.
        // (2) Reshape the data as it is done with the FreeTextInvoiceTmp table.

        /* All fields from the FreeTextInvoiceLocalizationTmp record are included below */
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, Amount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, AmountInWords));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, AmountInWordsEUR));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, BillingCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, Caption));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CashDisc));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CashDiscAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CashDiscTxt_LanguageId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ConfigId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ConfigIdFlag));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CorrectedInvoiceId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CorrectiveReasonHeader));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CorrectiveReasonLines));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CurrencyCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CustInvoiceJourCurrencyCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CustInvoiceJourDueDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, CustomerRef));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DateOfCreation));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DeliveryAddress));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DeliveryName));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DiscAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DiscDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DiscountAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DiscPercent));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DoPrintTransportationDocument));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DueAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, DueDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, EconomicActivity));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, EndDisc));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, EndDiscEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, EndDiscMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, EuroCurrencyCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, EUROExchangeRate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ExchRate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ExternalItemId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, FooterText));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, HeaderNotes));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, HideInvoiceLine_PL));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, IntrastatCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventBatchId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventColorId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventColorIdFlag));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventDimPrint));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventLocationId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventSerialId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventSiteId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventSizeId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InventSizeIdFlag));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InvoiceAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InvoiceAmountEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InvoiceAmountMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InvoiceId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InvoiceName));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InvoiceRoundOff));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InvoiceRoundOffEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, InvoiceRoundOffMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, IsBankExchangeRateEnabled));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, IsTaxAmountMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, IsTaxAmountMSTVisible));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ItemId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, LineAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, LineAmountInclTax));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, LineHeader));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, LineNumber));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, LineSign));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, LineTaxAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, MandateBankIBAN));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, MandateReference));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, MandateSWIFTNo));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, MarkupAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, MarkupCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, MarkupTaxCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, Name));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, NetAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, NetAmountEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, NetAmountMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, Notes));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, OriginalInvoiceAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, OriginalInvoiceId_CZ));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PaymentId));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PaymentReference));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PKWiUCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrepaidAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrepaidAmountEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrePaymentAmountTax));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrePaymentAmountTaxEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrePaymentAmountTaxMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrePrintLevel));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PreviousRunningTotal));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PriceIncludeTax));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrintCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrintEuroTotals));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, PrintEuroTotals1));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, Qty));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, RemainAmountToBePaid));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, RemainAmountToBePaidEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SalesBalance));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SalesBalanceEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SalesBalanceMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SalesPrice));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SalesTaxExchangeRate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SalesUnitTxt));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SettledAmountCur));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShipmentDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowCashDiscOnInvoiceControls));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowCustPaymSched));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowCustPaymSchedLine));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowCustTrans));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowMarkupTrans));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowPackingMaterial));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowPayment));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowPrepaidTotals));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowPrepaidTotalsEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowSepaNotification));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowTaxTrans));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowTotals));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowTotalsEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowTotalsTaxBalances));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, ShowTotalsTaxBalancesEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SpecialFormattedDiscountDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SpecialFormattedDiscountDueDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SpecialFormattedPaymentDueDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SpecialFormattedPrePaymentTransDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SpecialFormattedTransportationLoadedDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, StandardCurrency));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SumMarkup));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SumMarkupEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SumMarkupMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SummaryLine_PL));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SumTax));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SumTaxEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, SumTaxMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxableBalance));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxableBalanceEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxableBalanceMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxAmountExcluded));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxAmountExcludedEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxAmountMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxBaseAmount));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxBaseAmountMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxBaseQty));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxCurrencyCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxDirective));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxDocumentNumber));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxExcludeFromInvoice));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxExemptDescription));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxFreeBalance));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxFreeBalanceEuro));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxFreeBalanceMST));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxPrintTaxFreeBalance));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxValue));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TaxWriteCode));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransDate));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationCarrierAddress));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationCarrierName));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationContactPersonName));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationContactPersonTitle));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationDataSection));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransPortationIssuedByName));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationIssuedByTitle));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationLoadedAddress));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationLoadedDateTime));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationLoadedName));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationPackageDangerDegree));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationPackageDescription));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationVehicleDescription));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationVehicleDriverName));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationVehiclePlateNumber));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, TransportationVehicleTrailerNumber));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, Txt));
        _addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, WMSLocationId));

        // NOTE: With the July 2017 version this field became obsolete.
        //_addingRecord.addField(fieldStr(FreeTextInvoiceLocalizationTmp, WMSPalletId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(FreeTextInvoiceHeaderFooterTmp))
        {
            this.addDataFieldsForHeader(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(FreeTextInvoiceTmp))
        {
            this.addDataFieldsForLine(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(FreeTextInvoiceLocalizationTmp))
        {
            this.addDataFieldsForLocalizationLine(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(SalesInvoicePaymentStubTmp))
        {
            _addingRecord.setRecordName(#PaymentStub).setSingleRecord(true);
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Free text invoice DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ftih_addDataFieldsForHeaderExt</Name>
				<Source><![CDATA[
    protected void ftih_addDataFieldsForHeaderExt(DocXmlRecord _headerExtDataRecord)
    {
        DocXmlRecord childRecord;

        /*****  Fields that are moved to the extended invoice header  *****/
        /* IDs */
        _headerExtDataRecord.addField(fieldStr(FreeTextInvoiceTmp, InvoiceId));

        /* Flags */
        childRecord = _headerExtDataRecord.addChildRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
        childRecord.setRecordName('Flags');
        childRecord.setRecordLabel('Flags');

        // Fix the ShowPrepaidTotals flag since it is set only in the CustTrans ('prepaid') lines.
        // For that use the stored value in the showPrepaidTotals variable.
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowPrepaidTotals))
               .setFieldValue(showPrepaidTotals);
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowPrepaidTotalsEuro))
               .setFieldValue(showPrepaidTotals && freeTextInvoiceLineWithHeaderFields.PrintEuroTotals);

        // Fix the ShowCustPaymSched flag since it is set only in the PaymSchedLines lines.
        // For that use the stored value in the showCustPaymSched variable.
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowCustPaymSched))
               .setFieldValue(showCustPaymSched);

        childRecord.addField(fieldStr(FreeTextInvoiceTmp, IsTaxAmountMSTVisible));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowCashDiscOnInvoiceControls));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowSepaNotification));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowPayment));

        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowTotals));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowTotalsEuro));

        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowTotalsTaxBalances));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowGiro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowLocalCurAmt));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowTotalsTaxBalancesEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, PrintEuroTotals));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxPrintTaxFreeBalance));

        /* Add flags from the FreeTextInvoiceHeaderFooterTmp table */
        // We stored these flags in the addDataFieldsForHeader method into the freeTextInvoiceHeaderFlagFields variable.
        childRecord.addCalculatedField(fieldStr(FreeTextInvoiceHeaderFooterTmp, CustInvoiceRefNum_FI),
        freeTextInvoiceHeaderFlagFields.CustInvoiceRefNum_FI ? true : false);
        childRecord.addCalculatedField(fieldStr(FreeTextInvoiceHeaderFooterTmp, ShowCompanyVATNum),
        freeTextInvoiceHeaderFlagFields.ShowCompanyVATNum ? true : false);
        childRecord.addCalculatedField(fieldStr(FreeTextInvoiceHeaderFooterTmp, ShowCurrencyBankAccount),
        freeTextInvoiceHeaderFlagFields.ShowCurrencyBankAccount ? true : false);
        childRecord.addCalculatedField(fieldStr(FreeTextInvoiceHeaderFooterTmp, ShowPayer),
        freeTextInvoiceHeaderFlagFields.ShowPayer ? true : false);
        childRecord.addCalculatedField(fieldStr(FreeTextInvoiceHeaderFooterTmp, IsPaymIdVisible),
        freeTextInvoiceHeaderFlagFields.IsPaymIdVisible ? true : false);
        childRecord.addCalculatedField(fieldStr(FreeTextInvoiceHeaderFooterTmp, PrintFreeTextInvoiceVATNum),
        freeTextInvoiceHeaderFlagFields.PrintFreeTextInvoiceVATNum ? true : false);
        childRecord.addCalculatedField(fieldStr(FreeTextInvoiceHeaderFooterTmp, IsCreditInvoicingReportEnabled),
        freeTextInvoiceHeaderFlagFields.IsCreditInvoicingReportEnabled ? true : false);
        childRecord.addCalculatedField(fieldStr(FreeTextInvoiceHeaderFooterTmp, IsCreditInvoicingReportEnabled_W),
        freeTextInvoiceHeaderFlagFields.IsCreditInvoicingReportEnabled_W ? true : false);

        /* Currencies */
        childRecord = _headerExtDataRecord.addChildRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
        childRecord.setRecordName('Currencies');
        childRecord.setRecordLabel('Currencies');
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, CustInvoiceJourCurrencyCode));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, EuroCurrencyCode));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ExchRate));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, StandardCurrency));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, CurrencySymbol));

        /* Dates */
        childRecord = _headerExtDataRecord.addChildRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
        childRecord.setRecordName('Dates');
        childRecord.setRecordLabel('Dates');
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, CustInvoiceJourDueDate));

        /* Amounts */
        childRecord = _headerExtDataRecord.addChildRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
        childRecord.setRecordName('Amounts');
        childRecord.setRecordLabel('Amounts');
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, InvoiceAmount));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, InvoiceAmountEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, InvoiceAmountMST));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, PrepaidAmount));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, PrepaidAmountEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, RemainAmountToBePaid));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, RemainAmountToBePaidEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, SalesBalance));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, SalesBalanceEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, SalesBalanceMST));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, SumTax));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, SumTaxEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, SumTaxMST));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, NetAmount));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, NetAmountEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, EndDisc));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, EndDiscEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, SumMarkup));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, SumMarkupEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, InvoiceRoundOff));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, InvoiceRoundOffEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxableBalance));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxableBalanceEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxFreeBalance));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxFreeBalanceEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, CashDisc));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, CashDiscEuro));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ReverseChargeJournal));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ReverseChargeAmount));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, ReverseChargeAmountEuro));
       

        /* Mandate fields */
        childRecord = _headerExtDataRecord.addChildRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
        childRecord.setRecordName('MandateFields');
        childRecord.setRecordLabel('Mandate fields');
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, MandateBankIBAN));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, MandateReference));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, MandateSWIFTNo));

        /* Notes and labels */
        childRecord = _headerExtDataRecord.addChildRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
        childRecord.setRecordName('NotesAndLabels');
        childRecord.setRecordLabel('Notes and labels');
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, HeaderNotes));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxAmountLabel));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxAmountMSTLabel));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, CashDiscTxt_LanguageId));

        /* Adjustment_TH */
        if (isoCountryCode == #isoTH)
        {
            // NOTE: Available from the July 2017 version.
            childRecord = _headerExtDataRecord.addChildRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
            childRecord.setRecordName('AdjustmentDetails');
            childRecord.setRecordLabel('Adjustment invoice details');
            childRecord.addField(fieldStr(FreeTextInvoiceTmp, AdjustmentDetailsTxt_TH));
            childRecord.addField(fieldStr(FreeTextInvoiceTmp, RemarkTxt_TH));
        }

        /* Misc */
        childRecord = _headerExtDataRecord.addChildRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
        childRecord.setRecordName('Misc');
        childRecord.setRecordLabel('Misc');
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, GiroType));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, PrePrintLevel));
        childRecord.addField(fieldStr(FreeTextInvoiceTmp, CashAccountingRegime_ES));

        /* Redundant fields */
        //childRecord.addField(fieldStr(FreeTextInvoiceTmp, CompanyRegNum));
        //childRecord.addField(fieldStr(FreeTextInvoiceTmp, CompanyBankRegNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ftil_addCustTransLines</Name>
				<Source><![CDATA[
    protected boolean ftil_addCustTransLines(DocXmlRecord _addingRecord, FreeTextInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Lines with prepaid amounts */
        if (_forceAddingFields || _currentLine.ShowCustTrans)
        {
            // Rename the record from 'FreeTextInvoiceTmp' to 'FreeTextInvoiceLines_Prepayed'.
            _addingRecord.setRecordName(#PrepayedLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Prepayed lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the prepaid lines.
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, CurrencyCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, CurrencySymbol));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, SettledAmountCur));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, Txt));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TransDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowCustTrans));

            // Store the value of the ShowCustTrans flag which has the same meaning the showPrepaidTotals flag.
            showPrepaidTotals = _currentLine.ShowCustTrans;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ftil_addMainLines</Name>
				<Source><![CDATA[
    protected boolean ftil_addMainLines(DocXmlRecord _addingRecord, FreeTextInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        boolean isCustInvoiceTransLine(FreeTextInvoiceTmp _freeTextInvoiceTmp)
        {
            boolean isCustInvoiceTransLine;
            isCustInvoiceTransLine = _freeTextInvoiceTmp.Name != '' ||
                                     _freeTextInvoiceTmp.Qty != 0 ||
                                     _freeTextInvoiceTmp.SalesPrice != 0 ||
                                     _freeTextInvoiceTmp.LineAmount != 0 ||
                                     _freeTextInvoiceTmp.LineAmountInclTax != 0;
            return isCustInvoiceTransLine;
        }


        // Check if the current FreeTextInvoiceTmp record is a main invoice line
        // with name, qty, price, amount, etc. and add all corresponidng fields.
        if (_forceAddingFields || isCustInvoiceTransLine(_currentLine))
        {
            // (1) Change the name of the adding record from 'FreeTextInvoiceTmp'
            // to a more readable name, e.g. 'FreeTextInvoiceLines'.
            _addingRecord.setRecordName(#FreeTextInvoiceLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Invoice lines'); // NOTE: use literalStr("@LabelID") instead.

            // (2) Include all fields you need on the main invoice line.
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, Name));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, Qty));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, SalesPrice));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, LineAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, LineAmountInclTax));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxWriteCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, CorrectiveReasonLines));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, Notes));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, LineHeader));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, InventDimPrint));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, BillingCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowGoodsDiscount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ReverseChargeLine));

            // TODO: Add Financial dimensions fields.
            //_addingRecord.addCalculatedFieldFromEdt(#DefaultDimensionField, extendedTypeStr(DimensionDefault), this.custInvoiceTrans(_currentLine.JourTransRecId_DR).DefaultDimension);


            //-- Redudant fields (never get filled):
            //_addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowCustPackingSlipTrans));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceTmp, SessionId));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceTmp, PaymentId));
            //_addingRecord.addField(fieldStr(FreeTextInvoiceTmp, IsTaxAmountVisible));


            /* COUNTRY REGION SPECIFIC DATA FIELDS */
            switch (isoCountryCode)
            {
                case #isoIN:
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowCSTNumber_IN));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, SalesTaxNumber_IN));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowSTCNumber_IN));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, STCNumber_IN));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowECCNumber_IN));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ECCNumber_IN));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ExciseLTUCode_IN));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowTINNumber_IN));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TINNumber_IN));
                    break;

                case #isoMY:
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, RefInvoiceDate_MY));
                    _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, RefInvoiceID_MY));
                    break;
            }

            
            // Add Extension fields defined on FreeTextInvoiceTmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(_currentLine, _addingRecord, true);


            // TODO: Add here additional fields from the related CustInvoiceTrans table (or some other tables).
            //CustInvoiceTrans custInvoiceTrans = this.custInvoiceTrans(_currentLine.JourTransRecId_DR);
            //_addingRecord.addCalculatedField('LineAmountTax', custInvoiceTrans.LineAmountTax);
            //_addingRecord.addCalculatedField('LineNum', custInvoiceTrans.LineNum);
            
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ftil_addMarkupLines</Name>
				<Source><![CDATA[
    protected boolean ftil_addMarkupLines(DocXmlRecord _addingRecord, FreeTextInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Markup lines */
        if (_forceAddingFields || _currentLine.ShowMarkupTrans)
        {
            // Rename the record from 'FreeTextInvoiceTmp' to 'FreeTextInvoiceLines_Markup'.
            _addingRecord.setRecordName(#MarkupLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Markup lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the markup lines.
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, MarkupCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, MarkupTaxCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, MarkupAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowMarkupTrans));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ftil_addPaymSchedLines</Name>
				<Source><![CDATA[
    protected boolean ftil_addPaymSchedLines(DocXmlRecord _addingRecord, FreeTextInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* PaymentSchedule lines */
        if (_forceAddingFields || _currentLine.ShowCustPaymSched)
        {
            // Rename the record from 'FreeTextInvoiceTmp' to 'FreeTextInvoiceLines_PaymSched'.
            _addingRecord.setRecordName(#PaymSchedLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Payment scheduled lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the payment schedule lines.
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, DueDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, DueAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, DiscAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, DiscDate));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowCustPaymSchedLine));

            // Store the value of the ShowCustTrans flag which has the same meaning the showCustPaymSched flag.
            showCustPaymSched = _currentLine.ShowCustPaymSched;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ftil_addTaxTransLines</Name>
				<Source><![CDATA[
    protected boolean ftil_addTaxTransLines(DocXmlRecord _addingRecord, FreeTextInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Lines with taxes */
        if (_forceAddingFields || _currentLine.ShowTaxTrans)
        {
            // Rename the record from 'FreeTextInvoiceTmp' to 'FreeTextInvoiceLines_Tax'.
            _addingRecord.setRecordName(#TaxLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Taxes'); // NOTE: Use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the tax lines.
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, Amount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxAmountMST));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxBaseAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxBaseAmountMST));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, CashDiscAmount));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxExemptDescription));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, PrintCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, TaxCode));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowTaxTrans));

            if (isoCountryCode == #isoMY)
            {
                _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, GSTSummaryText_MY));
            }

            //-- Redudant fields:
            //_addingRecord.addField(fieldStr(FreeTextInvoiceTmp, IsTaxAmountMST));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ftil_addTaxWithholdLines</Name>
				<Source><![CDATA[
    protected boolean ftil_addTaxWithholdLines(DocXmlRecord _addingRecord, FreeTextInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Lines with taxes with hold transactions */
        if (_forceAddingFields || _currentLine.ShowTaxWithholdTrans_IN)
        {
            // Rename the record from 'FreeTextInvoiceTmp' to 'FreeTextInvoiceLines_TaxWithhold'.
            _addingRecord.setRecordName(#TaxWithholdLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Withhold taxes'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the tax withhold lines.
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, SumTaxWithhold_IN));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, SumTaxWithholdEUR_IN));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, SourceBaseAmountCur_IN));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, SourceRegulateAmountCur_IN));
            _addingRecord.addField(fieldStr(FreeTextInvoiceTmp, ShowTaxWithholdTrans_IN));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        FreeTextInvoiceTmp          freeTextInvoiceTmpEmptyFields;
        SalesInvoicePaymentStubTmp  salesInvoicePaymentStubTmpEmptyFields;
        DocXmlRecord                freeTextInvoiceTmpEmptyFieldsDataRecord, headerExtDataRecord;


        // Build the internal record tree from the built-in report RDP tables.
        super(_recordBuilder);


        // (1) Add all fields from FreeTextInvoiceTmp which should be moved to the header.
        _recordBuilder.goToTopRecord();
        headerExtDataRecord = _recordBuilder.addRecord(freeTextInvoiceLineWithHeaderFields).setSingleRecord(true);
        // Rename the record from 'FreeTextInvoiceTmp' to 'FreeTextInvoiceHeaderExt'.
        headerExtDataRecord.setRecordName(#FreeTextInvoiceHeaderExt);
        // Change the label of the record.
        headerExtDataRecord.setRecordLabel('Invoice header extended'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.
        // Add all 'header' fields from the stored line record.
        this.ftih_addDataFieldsForHeaderExt(headerExtDataRecord);

        _recordBuilder.goToTopRecord();

        // (2) If this is design time, add all empty type of lines that haven't been already added.
        if (!this.isRuntime())
        {
            freeTextInvoiceTmpEmptyFields.clear();

            // Main lines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#FreeTextInvoiceLines) == null)
            {
                freeTextInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(freeTextInvoiceTmpEmptyFields);
                this.ftil_addMainLines(freeTextInvoiceTmpEmptyFieldsDataRecord, freeTextInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // TaxLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#TaxLines) == null)
            {
                freeTextInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(freeTextInvoiceTmpEmptyFields);
                this.ftil_addTaxTransLines(freeTextInvoiceTmpEmptyFieldsDataRecord, freeTextInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // TaxWithholdLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#TaxWithholdLines) == null)
            {
                freeTextInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(freeTextInvoiceTmpEmptyFields);
                this.ftil_addTaxWithholdLines(freeTextInvoiceTmpEmptyFieldsDataRecord, freeTextInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // PrepayedLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#PrepayedLines) == null)
            {
                freeTextInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(freeTextInvoiceTmpEmptyFields);
                this.ftil_addCustTransLines(freeTextInvoiceTmpEmptyFieldsDataRecord, freeTextInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // PaymSchedLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#PaymSchedLines) == null)
            {
                freeTextInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(freeTextInvoiceTmpEmptyFields);
                this.ftil_addPaymSchedLines(freeTextInvoiceTmpEmptyFieldsDataRecord, freeTextInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // MarkupLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#MarkupLines) == null)
            {
                freeTextInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(freeTextInvoiceTmpEmptyFields);
                this.ftil_addMarkupLines(freeTextInvoiceTmpEmptyFieldsDataRecord, freeTextInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }
            
            // SalesInvoicePaymentStubTmp
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#PaymentStub) == null)
            {
                _recordBuilder.addRecord(salesInvoicePaymentStubTmpEmptyFields).setRecordName(#PaymentStub).setRecordLabel('Payment stub').setSingleRecord(true).addAllFields();
                _recordBuilder.goToTopRecord();
            }
        }

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        freeTextInvoiceLineWithHeaderFields.clear();
        freeTextInvoiceHeaderFlagFields.clear();
        showPrepaidTotals = false;
        showCustPaymSched = false;

        freeTextInvoiceContract = this.getSrsRdpContract();
        isoCountryCode = SysCountryRegionCode::countryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour</Name>
				<Source><![CDATA[
    protected CustInvoiceJour custInvoiceJour()
    {
        if (!custInvoiceJournal)
        {
            custInvoiceJournal = CustInvoiceJour::findRecId(freeTextInvoiceContract.parmCustInvoiceJourRecId());
        }

        return custInvoiceJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans</Name>
				<Source><![CDATA[
    protected CustInvoiceTrans custInvoiceTrans(RecId _custInvoiceTransRecId)
    {
        CustInvoiceTrans custInvoiceTrans;

        if (_custInvoiceTransRecId)
        {
            custInvoiceTrans = CustInvoiceTrans::findRecId(_custInvoiceTransRecId);
        }

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTable</Name>
				<Source><![CDATA[
    protected CustInvoiceTable custInvoiceTable()
    {
        if (!custInvoiceTable)
        {
            CustInvoiceJour jour = this.custInvoiceJour();
            if (jour.isProforma())
            {
                // When printing a proforma Free Text Invoice ID, the custInvoiceJour.InvoiceId is a concatenation of # and the custInvoiceJour.RecId
                // see FreeTextInvoiceController.invoiceId2RecID()
                select firstOnly custInvoiceTable
                where custInvoiceTable.RecId == str2int64(subStr(jour.InvoiceId, 2, strLen(jour.InvoiceId)));
            }
            else
            {
                custInvoiceTable = jour.custInvoiceTable();
            }
        }

        return custInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipRdpTableRecord</Name>
				<Source><![CDATA[
    protected boolean skipRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        // Skip each record from the FreeTextInvoiceLocalizationTmp table if isoCountryCode
        // is not one of the listed countries below.
        // This means that for these countries, the FreeTextInvoiceLocalizationTmp table
        // will not be presented in the report data source.
        if (tableStr(FreeTextInvoiceLocalizationTmp) == _rdpTableName)
        {
            switch (isoCountryCode)
            {
                case #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL:
                    return false;

                default:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InvoiceId('InvoiceId')
    #define.InvoiceAccount('InvoiceAccount')
    #define.InvoicingName('InvoicingName')
    #define.CustContactName('CustContactName')
    #define.CustRef('CustRef')
    #define.InvoiceDate('InvoiceDate')
    #define.DueDate('DueDate')
    #define.PaymentCondition('PaymentCondition')

    [DocPlaceholderAttribute(#InvoiceId, 'INV - Invoice ID'),
     DocPlaceholderAttribute(#InvoiceAccount, 'INV - Customer Account ID'),
     DocPlaceholderAttribute(#InvoicingName, 'INV - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'INV - Customer Contact Name'),
     DocPlaceholderAttribute(#CustRef, 'INV - Customer Reference'),
     DocPlaceholderAttribute(#InvoiceDate, 'INV - Invoice Date'),
     DocPlaceholderAttribute(#DueDate, 'INV - Due Date'),
     DocPlaceholderAttribute(#PaymentCondition, 'INV - Payment Condition')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding custInvoiceTable. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(this.custInvoiceTable());

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InvoiceId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceId, placeholder_invoiceId);

        // -- Placeholder @InvoiceAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceAccount, placeholder_invoiceAccount);

        // -- Placeholder @InvoicingName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoicingName, placeholder_invoicingName);

        // -- Placeholder @InvoiceDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDate, placeholder_invoiceDate);

        // -- Placeholder @DueDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DueDate, placeholder_dueDate);

        // -- Placeholder @CustContactName@
        if (!placeholder_contactName)
        {
            placeholder_contactName = DocDspHelper::SirMadam;
        }
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, placeholder_contactName);

        // -- Placeholder @CustRef@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustRef, placeholder_custRef);

        // -- Placeholder @PaymentCondition@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentCondition, placeholder_paymentCondition);


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_invoiceAccount);
        _reportRunContext.archiveContract().setCustInvoiceInvoiceId(placeholder_invoiceId);
        _reportRunContext.archiveContract().setDocument(placeholder_invoiceId, placeholder_invoiceDate);
        _reportRunContext.archiveContract().setJournal(this.custInvoiceJour().RecId, DocJournalType::CustInvoiceJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(FreeTextInvoiceHeaderFooterTmp))
        {
            FreeTextInvoiceHeaderFooterTmp header = _rdpTableRecord;

            // Store custom placeholders' values.
            placeholder_invoiceAccount = header.InvoiceAccount;
            placeholder_invoicingName = header.InvoicingName;
            placeholder_custRef = header.CustomerRef;
            placeholder_contactName = header.ContactPersonName;
            placeholder_invoiceDate = header.InvoiceDate;
            placeholder_paymentCondition = header.PaymentCondition;
        }
        else if (_rdpTableName == tableStr(FreeTextInvoiceTmp))
        {
            // Store custom placeholders' values.
            if (!placeholder_invoiceId)
            {
                FreeTextInvoiceTmp line = _rdpTableRecord;
                placeholder_invoiceId = line.InvoiceId;
                placeholder_dueDate = line.CustInvoiceJourDueDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// -- When to use this method?
    /// If you want to quickly generate DDSP for a sample journal record.
    /// -- How to run it?
    /// Set up this class as the startup object in your project.
    /// -- NOTE
    /// Please verify all TODOs in the method and make changes if needed.
    /// </summary>
    /// <param name = "_args"></param>
    public static void main(Args _args)
    {
        CustInvoiceJour custInvoiceJour;

        // TODO: (1) Select the sample Free text invoice journal record.
        select firstonly custInvoiceJour where custInvoiceJour.InvoiceId == 'FTI-00000013';

        Args args = new Args();
        args.record(custInvoiceJour);

        FreeTextInvoiceController controller = new FreeTextInvoiceController();
        
        // TODO: (2) Change the name SSRS Report Design if needed.
        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat());
        controller.parmArgs(args);
        
        FreeTextInvoiceContract rdpContract = controller.parmReportContract().parmRdpContract();
        rdpContract.parmCustInvoiceJourRecId(custInvoiceJour.RecId);
        rdpContract.parmCountryRegionISOCode(SysCountryRegionCode::countryInfo());
        
        // Set the Docentric Generate DS print destination settings.
        SRSPrintDestinationSettings pds = controller.parmReportContract().parmPrintSettings();
        pds.printMediumType(SRSPrintMediumType::GenerateDataSource_DC);
        
        // TODO: (3) Set Design and Preview languages if needed.
        pds.parmGenerateDSPrintDestSettings_DC().parmLanguageId(custInvoiceJour.LanguageId);
        pds.parmGenerateDSPrintDestSettings_DC().parmPreviewLanguages('fr,de,it,es');
        
        SalesFormLetter_FreeText salesFormLetter = SalesFormLetter::construct(DocumentStatus::FreeTextInvoice);
        salesFormLetter.proforma(false);
        salesFormLetter.usePrintManagement(false);
        salesFormLetter.parmUseUserDefinedDestinations(true);
        salesFormLetter.updatePrinterSettingsFormLetter(controller.parmReportContract().parmPrintSettings().pack(), PrintSetupOriginalCopy::Original);

        args.caller(salesFormLetter);
        args.parmEnumType(enumNum(PrintCopyOriginal));
        args.parmEnum(PrintCopyOriginal::Original);

        controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>