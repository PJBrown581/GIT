<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGITTBRailcarVoid</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GGIRailcarVoid</c> class handles the cancellation of the Railcar record.
/// </summary>
public class GGITTBRailcarVoid
{
    TTBRailCarTable     railcarTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// new instance
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// creating new instance
    /// </summary>
    /// <returns><c>GGITTBRailcarVoid</c></returns>
    static GGITTBRailcarVoid construct()
    {
        return new GGITTBRailcarVoid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// entry point of class
    /// </summary>
    /// <param name = "_args">args value</param>
    static void main(Args _args)
    {
        TTBRailCarTable                 railCar;
        FormDataSource                  fdsCaller;
        GGITTBRailcarVoid               railCarVoid; 

        if (_args.dataset() == tableNum(TTBRailCarTable))
        {
            railCar         = _args.record();
            fdsCaller       = FormDataUtil::getFormDataSource(railCar);
            railCarVoid     = GGITTBRailcarVoid::construct();
                     
            railCarVoid.parmRailcarTable(railCar);
            railCarVoid.run();

            fdsCaller.refresh();
            fdsCaller.reread();
            fdsCaller.research(true);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRailcarTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// parm method to get/set <c>GGITTBRailcarVoid</c>
    /// </summary>
    /// <param name = "_railcarTable"><c>GGITTBRailcarVoid</c></param>
    /// <returns><c>TTBRailCarTable</c></returns>
    public TTBRailCarTable parmRailcarTable(TTBRailCarTable _railcarTable = railcarTable)
    {
        railcarTable = _railcarTable;

        return railcarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// to process the logic
    /// </summary>
    private void run()
    {
        SIGProcedureProvider    procedure;
        TTBRailCarTable         railCarLocal;
        //SIG - start
        if (isConfigurationkeyEnabled(configurationkeynum(SIG)))
        {
            procedure = GGIRailCarClosingProcedure::newRailCar(railcarTable);
            if (procedure.signatureRequired())
            {
                procedure.sign();
            }

            if (procedure.isSigned())
            {
                update_recordset railCarLocal
                    setting RailCarStatus = TTBRailCarStatus::Void
                        where railCarLocal.RecId == railcarTable.RecId;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>