<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBUtilHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Utility class of miscellaneous TTB operations.
/// </summary>
class TTBUtilHelper
{
    public const UnitOfMeasureSymbol WineGallonUnit = 'GAL';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convert2WineGallon</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the specified quantity from the specified unit to wine gallons.
    /// </summary>
    /// <param name = "_qty">
    ///     Quantity to convert.
    /// </param>
    /// <param name = "_fromUnitId">
    ///     The unit to convert from.
    /// </param>
    /// <param name = "_ItemId">
    ///     The ID of the item the quantity pertains to.
    /// </param>
    /// <returns>
    ///     The converted quantity in wine gallons.
    /// </returns>
    public static TTBWineGallon convert2WineGallon(Qty _qty, UnitOfMeasureSymbol _fromUnitId, ItemId _ItemId)
    {
        GGIUnitManager  unitManager = GGIUnitManager::construct();

        unitManager.FromUnitId  = _fromUnitId;
        unitManager.ToUnitId    = WineGallonUnit;

        return unitManager.convert(_qty, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWineGallon2Proof</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the specified quantity in wine gallons to proof gallons.
    /// </summary>
    /// <param name = "_qtyInWineGallons">
    ///     Quantity in wine gallons to convert.
    /// </param>
    /// <param name = "_proof">
    ///     Proof.
    /// </param>
    /// <returns>
    ///     The converted quantity in proof gallons.
    /// </returns>
    public static TTBProofGallon convertWineGallon2Proof(Qty _qtyInWineGallons, TTBProof _proof)
    {
        return _qtyInWineGallons * _proof / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTransferBondShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next sequence number for the transfer bond shipment ID.
    /// </summary>
    /// <param name = "_inventSiteId">
    ///     The site the sequence number is based on.
    /// </param>
    /// <returns>
    ///     The next sequence number for the transfer bond shipment ID.
    /// </returns>
    public static Num nextTransferBondShipmentId(InventSiteId _inventSiteId)
    {
        TTBInventSiteParameters parameters = TTBInventSiteParameters::find(_inventSiteId);

        return NumberSeq::newGetNumFromId(parameters.TransferBondShipmentNumberSequenceTable).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextTaxPaidShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next sequence number for the tax paid shipment ID.
    /// </summary>
    /// <param name = "_inventSiteId">
    ///     The site the sequence number is based on.
    /// </param>
    /// <returns>
    ///     The next sequence number for the tax paid shipment ID.
    /// </returns>
    public static Num nextTaxPaidShipmentId(InventSiteId _inventSiteId)
    {
        TTBInventSiteParameters parameters = TTBInventSiteParameters::find(_inventSiteId);

        return NumberSeq::newGetNumFromId(parameters.TaxPaidShipmentNumberSequenceTable).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTransferBondShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Releases the specified transfer bond shipment ID for reuse.
    /// </summary>
    /// <param name = "_transferBondShipmentId">
    ///     The transfer bond shipment ID to release.
    /// </param>
    /// <param name = "_inventSiteId">
    ///     The site the sequence number is based on.
    /// </param>
    /// <returns>
    ///     true, if successful; otherwise, false.
    /// </returns>
    public static boolean releaseTransferBondShipmentId(TTBTransferBondShipmentId _transferBondShipmentId, InventSiteId _inventSiteId)
    {
        TTBInventSiteParameters parameters = TTBInventSiteParameters::find(_inventSiteId);

        return NumberSeq::releaseNumber(parameters.TransferBondShipmentNumberSequenceTable, _transferBondShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatedWineGallons</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Calculates the wine gallons for a given location's outage 
    /// </summary>
    /// <param name = "_wmsLocationId">
    ///		Warehouse location
    /// </param>
    /// <param name = "_inventLocationId">
    ///		Warehouse
    /// </param>
    /// <param name = "_outageGauge">
    ///		Outage gauge value
    ///  </param>
    /// <returns>Calculated wine gallons based on location shell capacity and outage chart</returns>
    public static Qty calculatedWineGallons(WMSLocationId _wmsLocationId, InventLocationId _inventLocationId, TTBOutageGauge _outageGauge)
    {
        TTBWineGallon wineGallons = TTBWMSLocationOutage::findNearestWineGallons(_wmsLocationId, _inventLocationId, _outageGauge);
        WMSLocation wmsLocation = WMSLocation::find(_wmsLocationId, _inventLocationId);
        
        return wmsLocation.TTBShellCapacity - wineGallons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countSerialNumberRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Counts the range of serialIds from a start and end value
    /// </summary>
    /// <param name = "_serialIdStart">
    ///		Starting Serial Id
    /// </param>
    /// <param name = "_serialIdEnd">
    ///		Ending Serial Id
    /// </param>
    /// <param name = "_itemId">
    ///		Item associated to serial
    ///  </param>
    /// <returns>
	///		whole number count of serials that fit in range. Must follow similar number sequence.
	/// </returns>
    public static int countSerialNumberRange(InventSerialId _serialIdStart, InventSerialId _serialIdEnd, ItemId _itemId)
    {
        InventSerial inventSerial;

        select count(RecId) from inventSerial
            index hint ItemSerialIdx
            where inventSerial.ItemId == _itemId
            && inventSerial.InventSerialId >= _serialIdStart
            && inventSerial.InventSerialId <= _serialIdEnd;

        return any2Int(inventSerial.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if serial number exists in InventSerial table
    /// </summary>
    /// <param name = "_serialId">
    ///     The serial Id being requested
    /// </param>
    /// <returns>
    ///     true, if serial id exists in table; otherwise, false.
    /// </returns>
    public static boolean existSerialNumber(InventSerialId  _serialId)
    {
        return (select firstonly RecId from inventSerial
                    index hint SerialIdx
                    where inventSerial.InventSerialId == _serialId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertFromWineGallon</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts wine gallons to another unit.
    /// </summary>
    /// <param name = "_wineGallons">
    ///     Quantity in wine gallons to convert.
    /// </param>
    /// <param name = "_toUnit">
    ///     Units to convert the wine gallons to.
    /// </param>
    /// <param name = "_itemId">
    ///     The item number  associated with _toUnit. Optional.
    /// </param>
    /// <returns>
    ///     The converted quantity.
    /// </returns>
    public static Qty convertFromWineGallon(TTBWineGallon _wineGallons, UnitOfMeasureSymbol _toUnit, ItemId _itemId = '')
    {
        return GGIUnitManager::newFromToUnits(WineGallonUnit, _toUnit).convert(_wineGallons, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTaxPaidShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Releases the specified tax paid shipment ID for reuse.
    /// </summary>
    /// <param name = "_taxPaidShipmentId">
    ///     The tax paid shipment ID to release.
    /// </param>
    /// <param name = "_inventSiteId">
    ///     The site the sequence number is based on.
    /// </param>
    /// <returns>
    ///     true, if successful; otherwise, false.
    /// </returns>
    public static boolean releaseTaxPaidShipmentId(TTBTaxPaidShipmentId _taxPaidShipmentId, InventSiteId _inventSiteId)
    {
        TTBInventSiteParameters parameters = TTBInventSiteParameters::find(_inventSiteId);

        return NumberSeq::releaseNumber(parameters.TaxPaidShipmentNumberSequenceTable, _taxPaidShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomDataFromWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the custom data value from work based on the custom data type.
    /// </summary>
    /// <param name = "_workId">
    /// The work table Id that has the data.
    /// </param>
    /// <param name = "_customDataType">
    /// The custom data type for which value must be retrieved.
    /// </param>
    /// <returns>
    /// The value stored for the custom data type.
    /// </returns>
    public static real getCustomDataFromWork(WHSWorkId _workId, TTBWHSCustomTypeMap _customDataType)
    {
        WHSWorkLine         workLine;
        WHSWorkLineCustom   workLineCustom;

        select firstonly workLineCustom
            join workLine
            where workLineCustom.WorkId         == workLine.WorkId
                && workLineCustom.LineNum       == workLine.LineNum
                && workLine.WorkId              == _workId
                && workLine.TTBWHSCustomTypeMap == _customDataType;

        return str2Num(workLineCustom.Data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOnHandInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns physical on-hand inventory.
    /// </summary>
    /// <param name = "_itemId">
    /// The item for which to find inventory.
    /// </param>
    /// <param name = "_inventDimId">
    /// The inventory dimensions for which to find inventory.
    /// </param>
    /// <returns>
    /// The physical on-hand inventory for the item.
    /// </returns>
    public static InventQtyAvailPhysical findOnHandInventory(ItemId _itemId, InventDimId _inventDimId)
    {
        InventOnhand    inventOnhand;
        InventDim       inventDim = inventDim::find(_inventDimId);
        InventDimParm   inventDimParm;

        inventDimParm.initFromInventDim(inventDim);
        inventOnhand = InventOnhand::newParameters(_itemId, inventDim, inventDimParm);

        return inventOnhand.physicalInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimFromWorkLineTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory dimensions from work line transactions.
    /// </summary>
    /// <param name = "_whsWorkId">
    /// The work id from which to get transactions.
    /// </param>
    /// <returns>
    /// A record from <c>InventDim</c> table.
    /// </returns>
    public static InventDim getDimFromWorkLineTrans(WHSWorkId _whsWorkId)
    {
        WHSWorkInventTrans  whsWorkInventTrans;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        WHSWorkLine         workLine = WHSWorkTable::getLastClosedPutWorkLine(_whsWorkId);

        select * from inventTrans
            join inventTransOrigin
            where inventTrans.InventTransOrigin             == inventTransOrigin.RecId
            join whsWorkInventTrans
            where whsWorkInventTrans.InventTransIdTo        == inventTransOrigin.InventTransId
                && whsWorkInventTrans.WorkId                == workLine.WorkId
                && whsWorkInventTrans.LineNum               == workLine.LineNum;

        return inventTrans.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnitFinshedGood</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns check of Finished good item.
    /// </summary>
    /// <param name = "_unit">
    /// Units to convert the wine gallons to.
    /// </param>
    /// <returns>
    /// true if item is FG, false otherwise.
    /// </returns>
    public static boolean isUnitFinshedGood(UnitOfMeasureSymbol _unit)
    {
        UnitOfMeasure uom = UnitOfMeasure::findBySymbol(_unit);
		
        if (uom.TTBUOMClass == TTBUOMClass::Bottled || uom.TTBUOMClass == TTBUOMClass::Packaged)
        {
            return true;
        }
		else
        {
            return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>