<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIJournalCheckPost_PostHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TTB006D_GaugeReportBreakage - PostHandler for the <c>JournalCheckPost</c> class run method.
/// </summary>
class GGIJournalCheckPost_PostHandler
{
    public const UnitOfMeasureSymbol lbUnit = 'LB';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>JournalCheckPost_Post_run</Name>
				<Source><![CDATA[
    /// <summary>
    ///		When posting the adjustment journal create Gauge record if necessary
    /// </summary>
    /// <param name="args">CoC args object</param>
    [PostHandlerFor(classStr(JournalCheckPost), methodStr(JournalCheckPost, run))]
    public static void JournalCheckPost_Post_run(XppPrePostArgs args)
    {
        JournalCheckPost				inventJournalCheckPost;
        InventJournalTable              inventJournalTable;
        InventJournalTrans              inventJournalTrans;
        Qty								lbQty;
        EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

		inventJournalCheckPost = args.getthis() as JournalCheckPost;

        inventJournalTable = InventJournalTable::find(inventJournalCheckPost.parmJournalId());
        inventJournalTable.reread();

        changecompany(inventJournalTable.company())
        {
            if ((inventJournalTable.JournalNameId == InventParameters::find().GGIAcctBrkJournalNameId
                || inventJournalTable.JournalNameId == InventParameters::find().GGIVolDestJournalNameId)
                && inventJournalTable.Posted
				)
            {
                ttsbegin;
                while select inventJournalTrans
                    where inventJournalTrans.JournalId == inventJournalTable.JournalId
                {
                    lbQty = releasedProductUnitConverter.convert(inventJournalTrans.Qty,
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(inventJournalTrans.ItemId, ModuleInventPurchSales::Invent).UnitId),
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(lbUnit),
                                                    NoYes::No,
                                                    inventJournalTrans.ItemId,
                                                    inventJournalTrans.InventDimId,
                                                    NoYes::No);

                    TTBInventGaugeTableCreate::createFromInventJournalPost(inventJournalTrans, lbQty, lbUnit);
				}
                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>