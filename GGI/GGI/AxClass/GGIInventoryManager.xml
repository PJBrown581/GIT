<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIInventoryManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager for inventory.
/// </summary>
class GGIInventoryManager
{
    public const FieldName InventTransIdName       = 'InventTransId';
    public const FieldName InventTransRefIdName    = 'InventTransRefId';
    
    /// <summary>
    ///     Lot number to obtain inventory information for.
    /// </summary>
    public InventTransId    InventTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIInventoryManager construct()
    {
        return new GGIInventoryManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified record.
    /// </summary>
    /// <param name = "_record">
    ///     An inventory related record with an InventTransId field.
    /// </param>
    /// <param name = "_useReference">
    ///     Determines to look for an InventTransRefId field instead of an InventTransId field. Optional.
    /// </param>
    /// <returns>
    ///     The constructed object.
    /// </returns>
    public static GGIInventoryManager newRecord(Common _record, boolean _useReference = false)
    {
        GGIInventoryManager inventoryManager = GGIInventoryManager::construct();

        inventoryManager.InventTransId  = _record.(fieldName2Id(_record.TableId, _useReference ? InventTransRefIdName : InventTransIdName));

        return inventoryManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the associated <c>InventTransOrigin</c> record.
    /// </summary>
    /// <returns>
    ///     The associated <c>InventTransOrigin</c> record.
    /// </returns>
    public InventTransOrigin inventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets an inventory transaction record.
    /// </summary>
    /// <returns>
    ///     An inventory transaction record.
    /// </returns>
    /// <remarks>
    ///     Use the next statement to obtain additional inventory transaction records.
    /// </remarks>
    public InventTrans inventTrans()
    {
        InventTransOrigin   inventTransOrigin = this.inventTransOrigin();
        InventTrans         inventTrans;

        // Allow the caller to use the next statement, so, do not use firstonly here.
        select inventTrans
            where inventTrans.InventTransOrigin == InventTransOrigin.RecId;

        return InventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetOfSerialNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a collection of serial numbers used in the inventory transactions.
    /// </summary>
    /// <returns>
    ///     A set of serial numbers.
    /// </returns>
    public Set getSetOfSerialNumbers()
    {
        Set serialNumberCollection   = GGIInventoryManager::createSerialNumberSet();

        InventTrans inventTrans;
        InventDim   inventDim;

        while select inventDim
            group by inventDim.inventSerialId
            where inventDim.inventSerialId != ''
            exists join inventTrans
                where inventTrans.inventDimId == inventDim.inventDimId
                    && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId
        {
            serialNumberCollection.add(inventDim.inventSerialId);
        }

        return serialNumberCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortedSetOfSerialNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a collection of serial numbers used in the inventory transactions.
    /// </summary>
    /// <param name="_sortOrder">
    ///     The sort order. Optional.
    /// </param>
    /// <returns>
    ///     A set of serial numbers.
    /// </returns>
    public Set getSortedSetOfSerialNumbers(SortOrder _sortOrder = SortOrder::Ascending)
    {
        Set serialNumberCollection  = GGIInventoryManager::createSerialNumberSet();

        InventTrans inventTrans;
        InventDim   inventDim;

        if (_sortOrder == SortOrder::Ascending)
        {
            select inventDim
                group by inventDim.inventSerialId
                order by inventDim.inventSerialId asc
                where inventDim.inventSerialId != ''
                exists join inventTrans
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId;
        }
        else
        {
            select inventDim
                group by inventDim.inventSerialId
                order by inventDim.inventSerialId desc
                where inventDim.inventSerialId != ''
                exists join inventTrans
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId;
        }

        while (inventDim)
        {
            serialNumberCollection.add(inventDim.inventSerialId);

            next inventDim;
        }

        return serialNumberCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getArrayOfSerialNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a sorted collection of serial numbers used.
    /// </summary>
    /// <returns>
    ///     A sorted array of serial numbers.
    /// </returns>
    public Array getArrayOfSerialNumbers()
    {
        Array   serialNumberCollection  = GGIInventoryManager::createSerialNumberArray();

        InventTrans inventTrans;
        InventDim   inventDim;

        while select inventDim
            group by inventDim.inventSerialId
            order by inventDim.inventSerialId asc
            where inventDim.inventSerialId != ''
            exists join inventTrans
                where inventTrans.inventDimId == inventDim.inventDimId
                    && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId
        {
            serialNumberCollection.value(serialNumberCollection.lastIndex() + 1, inventDim.inventSerialId);
        }

        return serialNumberCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortedSetOfSerialNumbersAnyReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a sorted collection of serial numbers used with any receipt status.
    /// </summary>
    /// <param name="_sortOrder">
    ///     The sort order. Optional.
    /// </param>
    /// <returns>
    ///     A sorted array of serial numbers.
    /// </returns>
    public Set getSortedSetOfSerialNumbersAnyReceipt(SortOrder _sortOrder = SortOrder::Ascending)
    {
        Set serialNumberCollection  = GGIInventoryManager::createSerialNumberSet();

        InventTrans inventTrans;
        InventDim   inventDim;

        if (_sortOrder == SortOrder::Ascending)
        {
            select inventDim
                group by inventDim.inventSerialId
                order by inventDim.inventSerialId asc
                where inventDim.inventSerialId != ''
                exists join inventTrans
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.StatusReceipt != StatusReceipt::None
                        && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId;
        }
        else
        {
            select inventDim
                group by inventDim.inventSerialId
                order by inventDim.inventSerialId desc
                where inventDim.inventSerialId != ''
                exists join inventTrans
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.StatusReceipt != StatusReceipt::None
                        && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId;
        }

        while (inventDim)
        {
            serialNumberCollection.add(inventDim.inventSerialId);

            next inventDim;
        }

        return serialNumberCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortedSetOfSerialNumbersByReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a sorted collection of serial numbers used with any receipt status.
    /// </summary>
    /// <param name="_statusReceipt">
    ///     Receipt status.
    /// </param>
    /// <param name="_sortOrder">
    ///     The sort order. Optional.
    /// </param>
    /// <returns>
    ///     A sorted array of serial numbers.
    /// </returns>
    public Set getSortedSetOfSerialNumbersByReceipt(StatusReceipt _statusReceipt, SortOrder _sortOrder = SortOrder::Ascending)
    {
        Set serialNumberCollection  = GGIInventoryManager::createSerialNumberSet();

        InventTrans inventTrans;
        InventDim   inventDim;

        if (_sortOrder == SortOrder::Ascending)
        {
            select inventDim
                group by inventDim.inventSerialId
                order by inventDim.inventSerialId asc
                where inventDim.inventSerialId != ''
                exists join inventTrans
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.StatusReceipt == _statusReceipt
                        && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId;
        }
        else
        {
            select inventDim
                group by inventDim.inventSerialId
                order by inventDim.inventSerialId desc
                where inventDim.inventSerialId != ''
                exists join inventTrans
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.StatusReceipt == _statusReceipt
                        && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId;
        }

        while (inventDim)
        {
            serialNumberCollection.add(inventDim.inventSerialId);

            next inventDim;
        }

        return serialNumberCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortedSetOfSerialNumbersAnyIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a sorted collection of serial numbers used with any issue status.
    /// </summary>
    /// <param name="_sortOrder">
    ///     The sort order. Optional.
    /// </param>
    /// <returns>
    ///     A sorted array of serial numbers.
    /// </returns>
    public Set getSortedSetOfSerialNumbersAnyIssue(SortOrder _sortOrder = SortOrder::Ascending)
    {
        Set serialNumberCollection  = GGIInventoryManager::createSerialNumberSet();

        InventTrans inventTrans;
        InventDim   inventDim;

        if (_sortOrder == SortOrder::Ascending)
        {
            select inventDim
                group by inventDim.inventSerialId
                order by inventDim.inventSerialId asc
                where inventDim.inventSerialId != ''
                exists join inventTrans
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.StatusIssue != StatusIssue::None
                        && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId;
        }
        else
        {
            select inventDim
                group by inventDim.inventSerialId
                order by inventDim.inventSerialId desc
                where inventDim.inventSerialId != ''
                exists join inventTrans
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.StatusIssue!= StatusIssue::None
                        && inventTrans.InventTransOrigin == this.inventTransOrigin().RecId;
        }

        while (inventDim)
        {
            serialNumberCollection.add(inventDim.inventSerialId);

            next inventDim;
        }

        return serialNumberCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSerialNumberSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an empty set for serial numbers.
    /// </summary>
    /// <returns>
    ///     An empty set for serial numbers.
    /// </returns>
    private static Set createSerialNumberSet()
    {
        return new Set(extendedTypeId2Type(extendedTypeNum(InventSerialId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSerialNumberArray</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an empty set for serial numbers.
    /// </summary>
    /// <returns>
    ///     An empty set for serial numbers.
    /// </returns>
    private static Array createSerialNumberArray()
    {
        return new Array(extendedTypeId2Type(extendedTypeNum(InventSerialId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerialNumberRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a list of serial number records from the corresponding inventory transactions.
    /// </summary>
    /// <returns>
    ///     A list of serial number records.
    /// </returns>
    public RecordLinkList getSerialNumberRecords()
    {
        RecordLinkList  serialNumberList    = new RecordLinkList();
        InventTrans     inventTrans         = this.inventTrans();

        while (inventTrans)
        {
            serialNumberList.ins(InventSerial::find(inventTrans.inventSerialId(), inventTrans.ItemId));

            next inventTrans;
        }

        return serialNumberList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding packing slip transaction.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the packing slip transaction is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The packing slip transaction, if found; otherwise, an empty buffer.
    /// </returns>
    public CustPackingSlipTrans custPackingSlipTrans(boolean _forUpdate = false)
    {
        return CustPackingSlipTrans::findInventTransId_RU(InventTransId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding invoice transaction.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the invoice transaction is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The invoice transaction, if found; otherwise, an empty buffer.
    /// </returns>
    public CustInvoiceTrans custInvoiceTrans(boolean _forUpdate = false)
    {
        return CustInvoiceTrans::findInventTransid(InventTransId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumQtyByReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sums the quantity of the inventory transactions specified by receipt type.
    /// </summary>
    /// <param name = "_statusReceipt">
    ///     The type of receipt.
    /// </param>
    /// <returns>
    ///     The quantity sum or total.
    /// </returns>
    public InventQty sumQtyByReceipt(StatusReceipt _statusReceipt)
    {
        InventTrans inventTrans;

        select sum(Qty)
            from inventTrans
            where inventTrans.InventTransOrigin == this.inventTransOrigin().RecId
                && InventTrans.StatusReceipt == _statusReceipt;

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransByStatusReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets an inventory transaction record.
    /// </summary>
    /// <param name = "_statusReceipt">
    ///     The type of receipt.
    /// </param>
    /// <returns>
    ///     An inventory transaction record.
    /// </returns>
    /// <remarks>
    ///     Use the next statement to obtain additional inventory transaction records.
    /// </remarks>
    public InventTrans inventTransByStatusReceipt(StatusReceipt _statusReceipt)
    {
        InventTransOrigin   inventTransOrigin = this.inventTransOrigin();
        InventTrans         inventTrans;

        // Allow the caller to use the next statement, so, do not use firstonly here.
        select inventTrans
            where inventTrans.InventTransOrigin == InventTransOrigin.RecId
                && inventTrans.StatusReceipt == _statusReceipt;

        return InventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerSerialNumberSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers inventory transactions that correspond to a collection of serial numbers.
    /// </summary>
    /// <param name = "_serialNumberCollection">
    ///     Collection of serial numbers.
    /// </param>
    /// <param name = "_movementRecord">
    ///     The record the serial numbers pertain to.
    /// </param>
    /// <param name = "_inventDim">
    ///     Inventory dimensions the registered transactions should contain (e.g., license plate and location).
    /// </param>
    public static void registerSerialNumberSet(Set _serialNumberCollection, Common _movementRecord, InventDim _inventDim = null)
    {
        GGIInventoryManager inventoryMgr    = GGIInventoryManager::newRecord(_movementRecord);
        InventTrans         inventTrans     = inventoryMgr.inventTransByStatusReceipt(StatusReceipt::Ordered);
        TmpInventTransWMS   tmpInventTrans;

        InventTransWMS_Register inventTransWMS_Register = InventTransWMS_Register::newStandard(tmpInventTrans);

        while (inventTrans)
        {
            if (_serialNumberCollection.in(inventTrans.inventSerialId()))
            {
                tmpInventTrans.clear();
                inventTransWMS_Register.initFromInventTransInventTransOrigin(tmpInventTrans, inventTrans, inventTrans.inventTransOrigin());

                InventDim inventDim = inventTrans.inventDim();
                
                if (_inventDim)
                {
                    if (_inventDim.inventBatchId && _inventDim.InventBatchId != inventDim.InventBatchId)
                    {
                        inventDim.inventBatchId = _inventDim.inventBatchId;
                    }
                    if (_inventDim.wMSLocationId && _inventDim.wMSLocationId != inventDim.wMSLocationId)
                    {
                        inventDim.wMSLocationId = _inventDim.wMSLocationId;
                    }
                    if (_inventDim.LicensePlateId && _inventDim.LicensePlateId != inventDim.LicensePlateId)
                    {
                        inventDim.LicensePlateId = _inventDim.LicensePlateId;
                    }

                    InventDim                   = InventDim::findOrCreate(inventDim);
                    tmpInventTrans.InventDimId  = inventDim.InventDimId;
                }

                tmpInventTrans.insert();

                inventTransWMS_Register.writeTmpInventTransWMS(tmpInventTrans, inventTrans, inventDim);
            }

            next inventTrans;
        }

        inventTransWMS_Register.updateInvent(_movementRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerSerialNumberList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers inventory transactions that correspond to a collection of serial numbers.
    /// </summary>
    /// <param name = "_serialNumberCollection">
    ///     Collection of serial numbers.
    /// </param>
    /// <param name = "_movementRecord">
    ///     The record the serial numbers pertain to.
    /// </param>
    /// <param name = "_inventDim">
    ///     Inventory dimensions the registered transactions should contain (e.g., license plate and location).
    /// </param>
    public static void registerSerialNumberList(List _serialNumberCollection, Common _movementRecord, InventDim _inventDim = null)
    {
        GGIInventoryManager::registerSerialNumberCon(list2Con(_serialNumberCollection), _movementRecord, _inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerSerialNumberCon</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Registers inventory transactions that correspond to a collection of serial numbers.
    /// </summary>
    /// <param name = "_serialNumberCollection">
    ///     Collection of serial numbers.
    /// </param>
    /// <param name = "_movementRecord">
    ///     The record the serial numbers pertain to.
    /// </param>
    /// <param name = "_inventDim">
    ///     Inventory dimensions the registered transactions should contain (e.g., license plate and location).
    /// </param>
    public static void registerSerialNumberCon(container _serialNumberCollection, Common _movementRecord, InventDim _inventDim = null)
    {
        NumberOf    numberOfSerialNumbers   = conLen(_serialNumberCollection);
        Set         serialNumberSet         = new Set(Types::String);

        for (Counter i = 1; i <= numberOfSerialNumbers;  ++i)
        {
            serialNumberSet.add(conPeek(_serialNumberCollection, i));
        }

        GGIInventoryManager::registerSerialNumberSet(serialNumberSet, _movementRecord, _inventDim);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>