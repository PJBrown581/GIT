<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGI_Patch_BUG_9107</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GGI_Patch_BUG_9107
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// GGIDM_BUG_9107_PDSBatchAttribTransfer
    /// Fix for broken referential integrity between formula lines and item specific batch attributes
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        BOMTable bomTable;
        BOM bom;
        BOMVersion bomVersion;
        pdsBatchAttribTransfer pdsBatchAttribTransfer;
        pdsBatchAttribByItem pdsBatchAttribByItem, pdsBatchAttribByItem2;
        ItemId itemId;
        int counter = 0;
          
    
        Info("Remove all PDSBatchAttribTransfer records as the referential integrity between the formula lines and the batch attributes for transfer were broken in data migration");
       
        ttsbegin;
        delete_from pdsBatchAttribTransfer;
        ttscommit;

        ttsbegin;
        Info("Select all Formulas to check formula items against related quality attributes.");        
        while select bomTable
        {
            //All GGI Forumlas were created off of the FG itemID substring as reversed below
            itemId = subStr(bomTable.Name,1,6);
            while select bom where bom.BOMId == bomTable.BOMId
            {
                //Info("Iterate over all batch attributes tied to the FG");
                while select pdsBatchAttribByItem where pdsBatchAttribByItem.PdsBatchAttribItemId == itemId
                {
                    //Find related product specific batch attributes on the raw materials in the formula
                    select firstonly pdsBatchAttribByItem2 where pdsBatchAttribByItem2.PdsBatchAttribItemId == bom.ItemId
                        && pdsBatchAttribByItem2.PdsBatchAttribRelation == pdsBatchAttribByItem.PdsBatchAttribRelation;
                    //if a match exists we will insert into the PDSBatchAttribTransfer table to allow passing of attributes to the FG when the item is produced
                    if(pdsBatchAttribByItem2.RecId != 0)
                    {
                        select firstonly pdsBatchAttribTransfer where pdsBatchAttribTransfer.BOMId ==  bom.BOMId
                            && pdsBatchAttribTransfer.EndItemid == itemId
                            && pdsBatchAttribTransfer.RawItemId == bom.ItemId
                            && pdsBatchAttribTransfer.PdsBatchAttribId == pdsBatchAttribByItem.PdsBatchAttribRelation;
                        pdsBatchAttribTransfer.Active = NoYes::Yes;
                        pdsBatchAttribTransfer.BOMId = bomTable.BOMId;
                        pdsBatchAttribTransfer.BOMRefRecId = bom.RecId;
                        pdsBatchAttribTransfer.EndItemId = itemId;
                        pdsBatchAttribTransfer.PdsBatchAttribId = pdsBatchAttribByItem.PdsBatchAttribRelation;
                        pdsBatchAttribTransfer.RawItemId = bom.ItemId;
                        if(pdsBatchAttribTransfer.RecId == 0)
                        {
                            pdsBatchAttribTransfer.insert();
                            counter++;
                        }
                    }
                }
            }
        }
        ttscommit;

        ttsbegin;
        while select bomTable
        {
            itemId = subStr(bomTable.Name,1,6);
            while select bom where bom.BOMId == bomTable.BOMId
            {
                while select pdsBatchAttribByItem where pdsBatchAttribByItem.PdsBatchAttribItemId == bom.ItemId
                {
                    select firstonly pdsBatchAttribByItem2 where pdsBatchAttribByItem2.PdsBatchAttribItemId == itemId && pdsBatchAttribByItem2.PdsBatchAttribRelation == pdsBatchAttribByItem.PdsBatchAttribRelation;
                    if(pdsBatchAttribByItem2.RecId != 0)
                    {
                        select firstonly pdsBatchAttribTransfer where pdsBatchAttribTransfer.BOMId ==  bom.BOMId
                            && pdsBatchAttribTransfer.EndItemid == itemId
                            && pdsBatchAttribTransfer.RawItemId == bom.ItemId
                            && pdsBatchAttribTransfer.PdsBatchAttribId == pdsBatchAttribByItem.PdsBatchAttribRelation;
                      
                        pdsBatchAttribTransfer.Active = NoYes::Yes;
                        pdsBatchAttribTransfer.BOMId = bomTable.BOMId;
                        pdsBatchAttribTransfer.BOMRefRecId = bom.RecId;
                        pdsBatchAttribTransfer.EndItemId = itemId;
                        pdsBatchAttribTransfer.PdsBatchAttribId = pdsBatchAttribByItem.PdsBatchAttribRelation;
                        pdsBatchAttribTransfer.RawItemId = bom.ItemId;
                        if(pdsBatchAttribTransfer.RecId == 0)
                        {
                            pdsBatchAttribTransfer.insert();
                            counter++;
                        }
                    }
                }
            }
        }
        ttscommit;
        
        //The Quality team wants ALL set to active
        ttsbegin;
        while select forupdate pdsBatchAttribTransfer
        {
            pdsBatchAttribTransfer.Active = NoYes::Yes;
            pdsBatchAttribTransfer.update();
        }
        ttscommit;
        Info(strFmt("%1 batch attribute values matching between raw material and finished good items in formals.", counter));
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>