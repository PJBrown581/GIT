<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocSrsReportRunUtil_Handler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GGIDocSrsReportRunUtil_Handler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DocSrsReportRunUtil_Post_constructPrintManagerFromSrsReportDataContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(DocSrsReportRunUtil), staticMethodStr(DocSrsReportRunUtil, constructPrintManagerFromSrsReportDataContract))]
    public static void DocSrsReportRunUtil_Post_constructPrintManagerFromSrsReportDataContract(XppPrePostArgs args)
    {
        SrsReportDataContract           srsDataContract;
        SRSPrintDestinationSettings     srsPrintDestinationSettings;
        MapEnumerator                   queryMapEnum;
        InventTestCertOfAnalysisTable   coaTable;
        Query                           query;
        DocReportTemplateId             ggiTemplate;
        DocPrintManager                 docPrintManager;
        DocPrintReportSettings          localReportSettings;

        srsDataContract = args.getArg('_srsReportDataContract');
        docPrintManager = args.getReturnValue();

        srsPrintDestinationSettings = srsDataContract.parmPrintSettings();

        if (srsDataContract.parmReportName() == ssrsReportStr(PIPInventTestCustSpecificCOA, Report))
        {
            if (srsDataContract.parmQueryContracts())
            {
                queryMapEnum = srsDataContract.parmQueryContracts().getEnumerator();
                while(queryMapEnum.moveNext())
                {
                    query = queryMapEnum.currentValue();
                }
            }
        
            if (query)
            {
                QueryRun qr = new QueryRun(query);

                while (qr.next())
                {
                    coaTable = qr.get(tableNum(InventTestCertOfAnalysisTable));
                    ggiTemplate = GGIDocTemplateReference::getTemplate(coaTable.PIPCustAccount
                                                                        ,coaTable.ItemId
                                                                        ,coaTable.InventDimId
                                                                        ,coaTable.SalesId);

                    localReportSettings = docPrintManager.parmPrintReportSettings();
                    localReportSettings.parmTemplateId(ggiTemplate);

                    docPrintManager.parmPrintReportSettings(localReportSettings);

                    break;
                }
            }
        
            if (docPrintManager)
            {

                args.setReturnValue(docPrintManager);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>