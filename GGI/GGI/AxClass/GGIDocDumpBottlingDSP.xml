<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocDumpBottlingDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The GGIDocDumpBottlingDSP class provides DDSP data for the GGIDumpBottlingReport
/// </summary>
class GGIDocDumpBottlingDSP extends DocDatasourceProviderSrsReporting
{
    GGIDumpAndBottlingRecord            dumpBottlingHeader;
    GGIDumpAndBottlingLine              ggidumpBottlingLine;
    GGIRailCarRecordTmp                 headerTableBuffer;
    #define.DumpBottlingRecordHeader('DumpBottlingRecordHeader')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Class description.
    /// </summary>
    /// <returns>
    ///     The class description.
    /// </returns>
    public ClassDescription description()
    {
        return 'Dump and Bottling Record DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add data points for the dump and bottling report.
    /// </summary>
    /// <param name = "_recordBuilder">
    ///     Docentric record to contain the rail car record information
    /// </param>
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        GGIDumpBottlingReportDP      dumpBottlingRecordDP       = this.getSrsRdpClassRunningInstance();
        GGIDumpAndBottlingRecord         dumpBottlingRecordQuery;
        QueryRun qr = new QueryRun(dumpBottlingRecordDP.parmQuery());
        DocXmlRecord            headerDataRecord;
        InventDim               inventDim;
        TTBPermitAddress        ttbPermitAddress;
        TTBPermitTable          ttbPermitTable;
        LogisticsPostalAddress  lpa;
        InventSite              inventSite;
        GGIDumpAndBottlingRecord dbr;
        HcmWorker               hcmWorker;
        

        while (qr.next())
        {
            dumpBottlingRecordQuery = qr.get(tablenum(GGIDumpAndBottlingRecord));

            if (dumpBottlingRecordQuery)
            {
                dumpBottlingHeader = dumpBottlingRecordQuery;
                break;
            }
        }

        //select firstonly inventDim
        //    where inventDim.inventDimId == GGIDumpAndBottlingRecord.inventDimId;

        inventSite = inventSite::find(dumpBottlingHeader.InventSiteId);

        lpa = inventSite.logisticsPostalAddress();

        select firstonly TTBPermitAddress
                where TTBPermitAddress.LogisticsPostalAddress == lpa.RecId;

        select firstonly ttbPermitTable
                where ttbPermitTable.RecId == TTBPermitAddress.PermitTable;
        
        select firstonly dbr
            where dbr.TransferDBRId == dumpBottlingHeader.DBRid;

        select firstonly hcmWorker
            where hcmWorker.RecId == dumpBottlingHeader.ClosedByWorker;

        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer);
        headerDataRecord.setRecordName(#DumpBottlingRecordHeader);
        headerDataRecord.setRecordLabel('Dump Bottling Record');
        headerDataRecord.addCalculatedField('DBRid',dumpBottlingHeader.DBRid);
        headerDataRecord.addCalculatedField('OpenedDate',dumpBottlingHeader.OpenedDate);
        headerDataRecord.addCalculatedField('OpenedTime',dumpBottlingHeader.OpenedTime);
        headerDataRecord.addCalculatedFieldFromEnum('Status',enumStr(GGIDumpAndBottlingRecordStatus),dumpBottlingHeader.Status);
        headerDataRecord.addCalculatedField('ClosedDate',dumpBottlingHeader.ClosedDate);
        headerDataRecord.addCalculatedField('ClosedTime',dumpBottlingHeader.ClosedTime);
        headerDataRecord.addCalculatedField('TransferDBRId',dumpBottlingHeader.TransferDBRId);
        headerDataRecord.addCalculatedField('TransferDBRIdFrom',dbr.DBRId);
        headerDataRecord.addCalculatedField('InventSiteId',dumpBottlingHeader.InventSiteId);
        headerDataRecord.addCalculatedField('TotalDumpedProofGallon',dumpBottlingHeader.TotalDumpedProofGallon);
        headerDataRecord.addCalculatedField('TotalRemovedProofGallon',dumpBottlingHeader.TotalRemovedProofGallon);
        headerDataRecord.addCalculatedField('TotalGainLossProofGallon',dumpBottlingHeader.TotalGainLossProofGallon);
        headerDataRecord.addCalculatedField('BalanceProofGallon',dumpBottlingHeader.BalanceProofGallon);
        headerDataRecord.addCalculatedField('BalanceWineGallon',dumpBottlingHeader.BalanceWineGallon);
        headerDataRecord.addCalculatedField('TankGaugingWineGallon',dumpBottlingHeader.TankGaugingWineGallon);
        headerDataRecord.addCalculatedField('TankGaugingProof',dumpBottlingHeader.TankGaugingProof);
        headerDataRecord.addCalculatedField('TotalGaugingProofGallon',dumpBottlingHeader.TotalGaugingProofGallon);
        headerDataRecord.addCalculatedField('ClosedByWorker',hcmWorker.searchName());
        headerDataRecord.addCalculatedFieldFromEnum('UpdatedFromWork',enumStr(NoYes),dumpBottlingHeader.UpdatedFromWork);
        headerDataRecord.addCalculatedField('WMSLocationId',dumpBottlingHeader.WMSLocationId);
        headerDataRecord.addCalculatedField('SitePermitNo', ttbPermitTable.PermitId);

        while select ggidumpBottlingLine
            where ggidumpBottlingLine.DBRId == dumpBottlingHeader.DBRId
        {
            DocXmlRecord    dumpBottlingline = headerDataRecord.addChildCalculatedRecord('DumpBottlingLine');

            select firstonly inventDim
                where inventDim.inventDimId == ggidumpBottlingLine.inventDimId;

            inventSite = inventSite::find(inventDim.InventSiteId);

            lpa = inventSite.logisticsPostalAddress();

            select firstonly TTBPermitAddress
                where TTBPermitAddress.LogisticsPostalAddress == lpa.RecId;

            select firstonly ttbPermitTable
                where ttbPermitTable.RecId == TTBPermitAddress.PermitTable;

            dumpBottlingline.addCalculatedField('DBRid', ggidumpBottlingLine.DBRid);
            dumpBottlingline.addCalculatedField('TransDate', ggidumpBottlingLine.TransDate);
            dumpBottlingline.addCalculatedField('TransTypeTxt', ggidumpBottlingLine.TransTypeTxt);
            dumpBottlingline.addCalculatedField('WineGallon', ggidumpBottlingLine.WineGallon);
            dumpBottlingline.addCalculatedField('Proof', ggidumpBottlingLine.Proof);
            dumpBottlingline.addCalculatedField('ProofGallon', ggidumpBottlingLine.ProofGallon);
            dumpBottlingline.addCalculatedField('ItemId', ggidumpBottlingLine.ItemId);
            dumpBottlingline.addCalculatedField('ReferenceId', ggidumpBottlingLine.ReferenceId);
            dumpBottlingline.addCalculatedFieldFromEnum('ActivityClass', enumStr(GGIActivityClass),ggidumpBottlingLine.ActivityClass);
            dumpBottlingline.addCalculatedFieldFromEnum('ReferenceCategory', enumStr(InventTransType),ggidumpBottlingLine.ReferenceCategory);
            dumpBottlingline.addCalculatedField('InventTransRefRecId', ggidumpBottlingLine.InventTransRefRecId);
            dumpBottlingline.addCalculatedField('VPRSerialId', ggidumpBottlingLine.VPRSerialId);
            dumpBottlingline.addCalculatedField('Qty', ggidumpBottlingLine.Qty);
            dumpBottlingline.addCalculatedField('InventDimId', ggidumpBottlingLine.InventDimId);
            dumpBottlingline.addCalculatedField('InventGaugeId', ggidumpBottlingLine.InventGaugeId);

            dumpBottlingline.addCalculatedField('InventSiteId', inventDim.InventSiteId);
            dumpBottlingline.addCalculatedField('InventLocationId', inventDim.InventLocationId);
            dumpBottlingline.addCalculatedField('wMSLocationId', inventDim.wMSLocationId);
            dumpBottlingline.addCalculatedField('InventStatusId', inventDim.InventStatusId);
            dumpBottlingline.addCalculatedField('LicensePlateId', inventDim.LicensePlateId);
            dumpBottlingline.addCalculatedField('InventBatchId', inventDim.InventBatchId);
            dumpBottlingline.addCalculatedField('InventSerialId', inventDim.InventSerialId);            
            dumpBottlingline.addCalculatedField('SitePermitNo', ttbPermitTable.PermitId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>