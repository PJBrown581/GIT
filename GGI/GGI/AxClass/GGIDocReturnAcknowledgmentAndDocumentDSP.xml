<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocReturnAcknowledgmentAndDocumentDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Replica of the Docentric ReturnAcknowledgmentAndDocument DSP class.
/// </summary>
class GGIDocReturnAcknowledgmentAndDocumentDSP extends DocDataSourceProviderSrsReporting
{
    ReturnAcknowledgmentAndDocumentTmp headerTableBuffer;

    /* Variables for custom placeholders */
    str      placeholder_rmaNumber;
    str      placeholder_custAccount;
    str      placeholder_custRef;
    str      placeholder_salesId;
    str      placeholder_salesTaker;
    str      placeholder_returnTo;
    str      placeholder_returnBy;
    str      placeholder_returnToAddress;
    str      placeholder_returnByAddress;

    #define.ReturnAcknowledgmentAndDocumentHeader('Header')
    #define.ReturnAcknowledgmentAndDocumentLines('Lines')    
    #define.FrtBilled('FrtBilled')
    #define.File('File')
    #define.TandC('TandC')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public ClassDescription description()
    {
        return 'Return order/acknowledgement DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(ReturnAcknowledgmentAndDocumentTmp))
        {
            ReturnAcknowledgmentAndDocumentTmp currentRecord = _rdpTableRecord;

            if (headerTableBuffer.RecId == 0)
            {
                // Copy all fields from the first selected record since the majority of them
                // belong to the report header. We will add them as a separate node in the
                // generateXmlDataSource method.
                buf2Buf(currentRecord, headerTableBuffer);
                headerTableBuffer.RecId = currentRecord.RecId;

                // Store custom placeholders' values.
                placeholder_rmaNumber = currentRecord.ReturnItemNum;
                placeholder_custAccount = currentRecord.CustAccount;
                placeholder_custRef = currentRecord.PurchOrderFormNum;
                placeholder_salesId = currentRecord.SalesId_DR;
                placeholder_salesTaker = currentRecord.SalesTaker;
                placeholder_returnTo = currentRecord.DeliveryName;
                placeholder_returnToAddress = currentRecord.DeliveryAddress;
                placeholder_returnBy = currentRecord.CompanyNameReturnBy;
                placeholder_returnByAddress = currentRecord.CompanyAddressReturnBy;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(ReturnAcknowledgmentAndDocumentTmp))
        {
            ReturnAcknowledgmentAndDocumentTmp returnAcknowledgmentAndDocumentTmp = _rdpTableRecord;
            // Rename the record from 'ReturnAcknowledgmentAndDocumentTmp' to 'Lines'.
            _addingRecord.setRecordName(#ReturnAcknowledgmentAndDocumentLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Return document lines'); // NOTE: use literalStr("@LabelID") instead.
            
            // Add 'Line fields'.
            _addingRecord.addFieldGroup(tableFieldGroupStr(ReturnAcknowledgmentAndDocumentTmp, LineFields_DR));                 

            // Add Extension fields defined on ReturnAcknowledgmentAndDocumentTmp, if any.
            // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
            // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
            DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(returnAcknowledgmentAndDocumentTmp, _addingRecord, true);


            // TODO: Add here additional fields from the related SalesLine or some other tables.
            // Use 'keys' fields: returnAcknowledgmentAndDocumentTmp.SalesLineRecId_DR.
            // For example:
            //SalesLine salesLine = SalesLine::findRecId(returnAcknowledgmentAndDocumentTmp.SalesLineRecId_DR);
            //_addingRecord.addCalculatedField('SalesLinLineNum', salesLine.LineNum);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord headerDataRecord;

        void addHeaderFields()
        {
            // Add the 'Header fields'.
            headerDataRecord.addFieldGroup(tableFieldGroupStr(ReturnAcknowledgmentAndDocumentTmp, HeaderFields_DR));

            // Note: We'll skip the fields from the ExcludedFields_DR field group since those are
            // the current company related fields which are already provided in the GeneralData data section. 
        }


        // (1) Add data records with fields representing the lines.
        super(_recordBuilder);

        // (2) Add all fields that belong to the header only once.
        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer);
        // Rename the record from 'ReturnAcknowledgmentAndDocumentTmp' to 'Header'.
        headerDataRecord.setRecordName(#ReturnAcknowledgmentAndDocumentHeader);
        // Change the label of the record.
        headerDataRecord.setRecordLabel('Return document header'); // NOTE: use literalStr("@LabelID") instead.
        // Add all 'header' fields.
        addHeaderFields();
        
        // (3) Add Extension fields defined on ReturnAcknowledgmentAndDocumentTmp, if any.
        // NOTE: Fields will be added to the child record named ExtensionFields. Change the last parameter to false to add
        // Extension fields on flat. If the result doesn't suit you, add your Extension fields directly using the addField() method.
        DocExtensionFieldsHelper::tryAddAllExtensionFieldsToDataRecord(headerTableBuffer, headerDataRecord, true);


        // TODO: Add here additional fields (or records) to the single header record (headerDataRecord)
        // by using the related data to headerTableBuffer (ReturnAcknowledgmentAndDocumentTmp) or reportContract.
        // For example, get the related SalesTable record and add additional data you need:
        //SalesTable salesTable = SalesTable::find(headerTableBuffer.SalesId_DR);
        //headerDataRecord.addCalculatedField('CustContactName', salesTable.contactPersonName());

        SalesTable salesTable = SalesTable::find(headerTableBuffer.SalesId_DR);
        CustTable custTable = CustTable::find(salesTable.InvoiceAccount);
        ContactPerson contactPerson = ContactPerson::find(custTable.ContactPersonId);
        TMSSalesTable   tmsSalesTable = TMSSalesTable::find(salesTable.SalesId);

        headerDataRecord.addCalculatedField('CustomerEmail', salesTable.customerEmail());
        headerDataRecord.AddCalculatedFieldFromEdt('SoldToName', extendedTypeStr(LogisticsAddressing), salesTable.SalesName);
        headerDataRecord.AddCalculatedFieldFromEdt('SoldToAddress', extendedTypeStr(LogisticsAddressing), custTable.address());
        headerDataRecord.AddCalculatedFieldFromEdt('ShipToName', extendedTypeStr(LogisticsAddressing), salesTable.DeliveryName);
        headerDataRecord.AddCalculatedFieldFromEdt('ShipToAddress', extendedTypeStr(LogisticsAddressing), salesTable.deliveryAddressing());
        headerDataRecord.AddCalculatedFieldFromEdt('ExciseTaxAmount', extendedTypeStr(LineAmount), GGI_ExciseTaxManager::GetExciseTaxAmount(salesTable.SalesId));
        headerDataRecord.AddCalculatedFieldFromEdt('OrderDate', extendedTypeStr(CreationDate), salesTable.createDate());
        headerDataRecord.AddCalculatedFieldFromEdt('FreightCarrier', extendedTypeStr(ShipCarrierAccountCode), tmsSalesTable.carriercode);
        headerDataRecord.AddCalculatedFieldFromEdt('DlvTerm', extendedTypeStr(ShipCarrierAccountCode), salesTable.DlvTerm);
        headerDataRecord.addCalculatedField('SalesDistrict', custTable.SalesDistrictId);
        headerDataRecord.addCalculatedField('PrimaryContact', contactPerson.personName());
        headerDataRecord.addCalculatedField('ContactInfoEmail', salesTable.Email);
        headerDataRecord.addCalculatedField('ContactInfoURL', salesTable.URL);
        headerDataRecord.addCalculatedField('TermsAndConditionsURL', 'https://greenfield.com/wp-content/uploads/2020/12/vE.-US-PO-Terms-and-Conditions-07Dec2020.pdf');
         
        DocXmlRecord subDocumentsDataRecord = headerDataRecord.addChildCalculatedRecord('Subdocuments');
        DocuRef docuRef;

        while select docuRef  where
            docuRef.TypeId == #File &&
                docuRef.CategoryId_DC == #TandC &&
                docuRef.Restriction == docuRestriction::External
        {
            using (System.IO.Stream docuRefStream = DocumentManagement::getAttachmentStream(docuRef))
            {
                using (System.IO.MemoryStream subdocMs = new System.IO.MemoryStream())
                {
                    docuRefStream.CopyTo(subdocMs);
                    subDocumentsDataRecord.addCalculatedField(docuRef.Name,
                        DocGlobalHelper::convertMemoryStreamToContainer(subdocMs));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.RAMNumber('RAMNumber')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.SalesId('SalesId')
    #define.CustomerRef('CustomerRef')
    #define.SalesTaker('SalesTaker')
    #define.ReturnTo('ReturnTo')
    #define.ReturnBy('ReturnBy')
    #define.ReturnToAddress('ReturnToAddress')
    #define.ReturnByAddress('ReturnByAddress')

    [DocPlaceholderAttribute(#RAMNumber, 'RD - RMA Number'),
     DocPlaceholderAttribute(#CustAccount, 'RD - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'RD - Customer Name'),
     DocPlaceholderAttribute(#SalesId, 'RD - Sales ID'),
     DocPlaceholderAttribute(#CustomerRef, 'RD - Customer Reference'),
     DocPlaceholderAttribute(#SalesTaker, 'RD - Sales Taker'),
     DocPlaceholderAttribute(#ReturnTo, 'RD - Return To'),
     DocPlaceholderAttribute(#ReturnToAddress, 'RD - Return To Address'),
     DocPlaceholderAttribute(#ReturnBy, 'RD - Return By'),
     DocPlaceholderAttribute(#ReturnByAddress, 'RD - Return By Address')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @RAMNumber@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#RAMNumber, placeholder_rmaNumber);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, placeholder_custAccount);

        // -- Placeholder @SalesId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesId, placeholder_salesId);

        // -- Placeholder @CustomerRef@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustomerRef, placeholder_custRef);

        // -- Placeholder @CustName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, CustTable::find(placeholder_custAccount).name());
            
        // -- Placeholder @SalesTaker@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesTaker, placeholder_salesTaker);

        // -- Placeholder @ReturnTo@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ReturnTo, placeholder_returnTo);

        // -- Placeholder @ReturnBy@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ReturnBy, placeholder_returnBy);

        // For the rest of placeholders first check if Email is the currently selected print destination.
        // NOTE: Remove this condition if it's not true:
        if (_reportRunContext.parmPrintDestination() == DocPrintDestination::Email)
        {
            // -- Placeholder @ReturnToAddress@
            placeholderMng.replacePlaceholderInCurrentPrintDest(#ReturnToAddress, placeholder_returnToAddress);

            // -- Placeholder @ReturnByAddress@
            placeholderMng.replacePlaceholderInCurrentPrintDest(#ReturnByAddress, placeholder_returnByAddress);
        }


        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_custAccount);
        _reportRunContext.archiveContract().setSalesId(placeholder_salesId);
        _reportRunContext.archiveContract().setDocument(placeholder_rmaNumber);


        return placeholderMng;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>