<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIGlobalAddressBookManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager class for the global address book.
/// </summary>
public class GGIGlobalAddressBookManager
{
    // The record to base the global address book.
    public Common Record;

    // The role type of the logistical information.
    public LogisticsLocationRoleType RoleType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIGlobalAddressBookManager construct()
    {
        return new GGIGlobalAddressBookManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the location.
    /// </summary>
    /// <param name = "_mustBePrimary">
    ///     Determines if the location is to be a primary location. Optional.
    /// </param>
    /// <returns>
    ///     The location; otherwise, an empty buffer.
    /// </returns>
    public LogisticsLocation getLocation(boolean _mustBePrimary = true)
    {
        LogisticsLocation       location;
        LogisticsLocationRole   role;

        switch(Record.TableId)
        {
            case tablenum(InventLocation):
                InventLocationLogisticsLocationRoleView locationRoleView;

                select firstonly location
                    exists join locationRoleView
                        where locationRoleView.Location == location.RecId
                            && (!_mustBePrimary || locationRoleView.IsPrimary)
                            && locationRoleView.InventLocation == Record.RecId
                    exists join role
                        where role.RecId == locationRoleView.LocationRole
                            && (_mustBePrimary || role.Type == RoleType);
                break;
            case tableNum(CompanyInfo):
                DirPartyRecId               party = GGIGlobalAddressBookManager::partyNumber2Party(Record.(fieldNum(CompanyInfo, PartyNumber)));
                DirPartyLocationRolesView   dirPartyLocationRolesView;

                select firstonly location
                    exists join dirPartyLocationRolesView
                        where dirPartyLocationRolesView.Location == location.RecId
                            && dirPartyLocationRolesView.Party == party
                    exists join role
                        where role.RecId == dirPartyLocationRolesView.LocationRole
                            && role.Type == RoleType;
                break;
        }

        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyNumber2Party</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a party number to a party record ID
    /// </summary>
    /// <param name = "_partyNumber">
    ///     Party number.
    /// </param>
    /// <returns>
    ///     Party record ID.
    /// </returns>
    public static DirPartyRecId partyNumber2Party(DirPartyNumber _partyNumber)
    {
        return DirPartyTable::findByNum(_partyNumber).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElectronicAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the electronic address.
    /// </summary>
    /// <param name = "_methodType">
    ///     The type of electronic address.
    /// </param>
    /// <param name = "_mustBePrimary">
    ///     Determines if the electronic address is to be the primary electronic address. Optional.
    /// </param>
    /// <param name = "_location">
    ///     The location the electronic address is based from. Optional.
    /// </param>
    /// <returns>
    ///     The electronic address; otherwise, an empty buffer.
    /// </returns>
    public LogisticsElectronicAddress getElectronicAddress(LogisticsElectronicAddressMethodType _methodType, boolean _mustBePrimary = true, LogisticsLocation _location = this.getLocation())
    {
        LogisticsElectronicAddress  electronicAddress;
        LogisticsLocation           location;
        
        if (_location.RecId)
        {
            select firstonly electronicAddress
                where electronicAddress.Type == _methodType
                    && (!_mustBePrimary
                        || electronicAddress.IsPrimary)
                exists join location
                    where location.RecId == electronicAddress.Location
                        && (location.RecId == _location.RecId
                            || location.ParentLocation == _location.RecId);
        }

        return electronicAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the postal address.
    /// </summary>
    /// <param name = "_mustBePrimary">
    ///     Determines if the postal address is to be the primary postal address. Optional.
    /// </param>
    /// <param name = "_location">
    ///     The location the postal address is based from. Optional.
    /// </param>
    /// <returns>
    ///     The postal address; otherwise, an empty buffer.
    /// </returns>
    public LogisticsPostalAddress getPostalAddress(boolean _mustBePrimary = true, LogisticsLocation _location = this.getLocation(_mustBePrimary))
    {
        LogisticsPostalAddress  postalAddress;

        select firstonly postalAddress
            where postalAddress.Location == _location.RecId;

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the postal address associated with the specified record.
    /// </summary>
    /// <param name = "_record">
    ///     The record to obtain the postal address from.
    /// </param>
    /// <param name = "_mustBePrimary">
    ///     Determines if the postal address should be the primary postal address. Optional.
    /// </param>
    /// <param name = "_roleType">
    ///     The postal address role.
    /// </param>
    /// <returns>
    ///     The postal address.
    /// </returns>
    /// <remarks>
    ///     The _roleType parameter is ignored if the _mustBePrimary parameter is set to true.
    /// </remarks>
    public static LogisticsPostalAddress postalAddress(Common _record, boolean _mustBePrimary = true, LogisticsLocationRoleType _roleType = LogisticsLocationRoleType::None)
    {
        GGIGlobalAddressBookManager gabManager  = GGIGlobalAddressBookManager::construct();

        gabManager.Record   = _record;
        gabManager.RoleType = _roleType;

        return gabManager.getPostalAddress(_mustBePrimary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>electronicAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the electronic address associated with the specified record.
    /// </summary>
    /// <param name = "_record">
    ///     The record to obtain the postal address from.
    /// </param>
    /// <param name = "_methodType">
    ///     The type of electronic address.
    /// </param>
    /// <param name = "_mustBePrimary">
    ///     Determines if the postal address should be the primary postal address. Optional.
    /// </param>
    /// <param name = "_roleType">
    ///     The postal address role.
    /// </param>
    /// <returns>
    ///     The postal address.
    /// </returns>
    /// <remarks>
    ///     The _roleType parameter is ignored if the _mustBePrimary parameter is set to true.
    /// </remarks>
    public static LogisticsElectronicAddress electronicAddress(Common _record, LogisticsElectronicAddressMethodType _methodType, boolean _mustBePrimary = true, LogisticsLocationRoleType _roleType = LogisticsLocationRoleType::None)
    {
        GGIGlobalAddressBookManager gabManager  = GGIGlobalAddressBookManager::construct();

        gabManager.Record   = _record;
        gabManager.RoleType = _roleType;

        return gabManager.getElectronicAddress(_methodType, _mustBePrimary);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>