<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocGaugeRecordDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The GGIDocGaugeRecordDSP class converts the data sheet report DP class to a DSP class
/// </summary>
class GGIDocGaugeRecordDSP extends DocDatasourceProviderSrsReporting
{
    
    TTBInventGaugeTable              ttbInventGaugeTable;
    GGIGaugeRecordTmp                headerTableBuffer;
    #define.GaugeRecordHeader('GaugeRecordHeader')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Class description.
    /// </summary>
    /// <returns>
    ///     The class description.
    /// </returns>
    public ClassDescription description()
    {
        return 'Gauge Record DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add data points for the gauge report.
    /// </summary>
    /// <param name = "_recordBuilder">
    ///     Docentric record to contain the gauge record information
    /// </param>
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        GGIGaugeRecordDP        gaugeRecordDP       = this.getSrsRdpClassRunningInstance();
        TTBInventGaugeTable     gaugeRecordQuery;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventDim               inventDim;
        InventTableModule       inventTableModule;
        InventDistinctProduct   inventDistinctProduct;
        InventDistinctProductExpanded   inventDistinctProductExpanded;
        WHSWorkTable            whsWorkTable;
        WHSWorkLine             whsWorkLine;
        WHSWorkInventTrans      whsWorkInventTrans;
        InventTable             inventTable;
        EcoResProductName       productName;
        InventJournalTable      inventJournalTable;
        PurchTable              purchTable;
        VendTable               vendTable;
        TTBPermitAddress        ttbPermitAddress;
        TTBPermitTable          ttbPermitTable;
        LogisticsLocation       logisticsLocation;
        InventTransferTable     inventTransferTable;
        LogisticsPostalAddress  lpaPurchTable, lpaTransfer;
        QueryRun qr = new QueryRun(gaugeRecordDP.parmQuery());
        DocXmlRecord headerDataRecord;
        HcmWorker               hcmWorker;
        

        while (qr.next())
        {
            gaugeRecordQuery = qr.get(tablenum(TTBInventGaugeTable));

            if (gaugeRecordQuery)
            {
                ttbInventGaugeTable = gaugeRecordQuery;
                break;
            }
        }

        select firstonly hcmWorker
            where hcmWorker.RecId == ttbInventGaugeTable.ClosedByWorker;

        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer);
        headerDataRecord.setRecordName(#GaugeRecordHeader);
        headerDataRecord.setRecordLabel('Gauge Record');    
        headerDataRecord.addCalculatedField('InventGaugeId',ttbInventGaugeTable.InventGaugeId);
        headerDataRecord.addCalculatedField('InventTransId',ttbInventGaugeTable.InventTransId);
        headerDataRecord.addCalculatedField('WorkId',ttbInventGaugeTable.WorkId);
        headerDataRecord.addCalculatedField('ItemId',ttbInventGaugeTable.ItemId);
        headerDataRecord.addCalculatedField('ProductName',ttbInventGaugeTable.productName());
        headerDataRecord.addCalculatedField('FGSerialandBatch',ttbInventGaugeTable.FGSerialandBatch);
        headerDataRecord.addCalculatedField('InventLocationId',ttbInventGaugeTable.InventLocationId);
        headerDataRecord.addCalculatedField('InventSiteId',ttbInventGaugeTable.InventSiteId);
        headerDataRecord.addCalculatedField('WMSLocationId',ttbInventGaugeTable.WMSLocationId);
        headerDataRecord.addCalculatedField('InventSerialId',ttbInventGaugeTable.InventSerialId);
        headerDataRecord.addCalculatedField('InventBatchId',ttbInventGaugeTable.InventBatchId);
        headerDataRecord.addCalculatedFieldFromEnum('WorkTransType', enumStr(WHSWorkTransType),ttbInventGaugeTable.WorkTransType);
        headerDataRecord.addCalculatedField('Qty',ttbInventGaugeTable.Qty);
        headerDataRecord.addCalculatedField('OutageGauge',ttbInventGaugeTable.OutageGauge);
        headerDataRecord.addCalculatedField('Proof',ttbInventGaugeTable.Proof);
        headerDataRecord.addCalculatedField('Temperature',ttbInventGaugeTable.Temperature);
        headerDataRecord.addCalculatedField('UnitId',ttbInventGaugeTable.UnitId);
        headerDataRecord.addCalculatedField('WineGallon',ttbInventGaugeTable.WineGallon);
        headerDataRecord.addCalculatedField('ProofGallon',ttbInventGaugeTable.ProofGallon);
        headerDataRecord.addCalculatedField('TotalProofGallon',ttbInventGaugeTable.TotalProofGallon);
        headerDataRecord.addCalculatedField('TotalWineGallon',ttbInventGaugeTable.TotalWineGallon);
        headerDataRecord.addCalculatedField('ProofDistillation',ttbInventGaugeTable.ProofDistillation);
        headerDataRecord.addCalculatedFieldFromEnum('Status',enumStr(TTBInventGaugeTableStatus),ttbInventGaugeTable.Status);
        headerDataRecord.addCalculatedField('ClosedDate',ttbInventGaugeTable.ClosedDate);
        headerDataRecord.addCalculatedField('ClosedTime',ttbInventGaugeTable.ClosedTime);
        headerDataRecord.addCalculatedField('ClosedByWorker',hcmWorker.searchName());
        headerDataRecord.addCalculatedField('DBRId',ttbInventGaugeTable.DBRId);
        headerDataRecord.addCalculatedField('DSPNumber',ttbInventGaugeTable.DSPNumber);
        headerDataRecord.addCalculatedField('RCRId',ttbInventGaugeTable.RCRId);

        inventTrans = InventTrans::findTransId(ttbInventGaugeTable.InventTransId);
        inventTransOrigin = InventTransOrigin::findByInventTransId(ttbInventGaugeTable.InventTransId);
        InventTableModule = InventTableModule::find(ttbInventGaugeTable.ItemId, ModuleInventPurchSales::Invent);
        
        select firstonly inventDim
            where inventDim.inventDimId == inventTrans.inventDimId;
        
        inventDistinctProduct = InventDistinctProduct::find(ttbInventGaugeTable.ItemId,inventDim.inventDimId);
        inventDistinctProductExpanded = InventDistinctProductExpanded::findByInventDim(ttbInventGaugeTable.ItemId,inventDim);
              
        select firstonly inventJournalTable
            where inventJournalTable.JournalId == inventTransOrigin.ReferenceId;

        purchTable = purchTable::find(inventTransOrigin.ReferenceId);
        vendTable = vendTable::find(purchTable.OrderAccount);
        inventTransferTable = inventTransferTable::find(inventTransOrigin.ReferenceId);
        
        lpaPurchTable = VendTable.deliveryAddress();

        select firstonly lpaTransfer
                where lpaTransfer.RecId == inventTransferTable.FromPostalAddress;

        if (lpaPurchTable)
        {
            select firstonly logisticslocation
                where logisticsLocation.RecId == lpaPurchTable.Location;

            select firstonly TTBPermitAddress
                where TTBPermitAddress.LogisticsPostalAddress == lpaPurchTable.RecId;

            select firstonly ttbPermitTable
                where ttbPermitTable.RecId == TTBPermitAddress.PermitTable;
        }
        else
        {
            select firstonly logisticslocation
                where logisticsLocation.RecId == lpaTransfer.Location;

            select firstonly TTBPermitAddress
                where TTBPermitAddress.LogisticsPostalAddress == lpaTransfer.RecId;

            select firstonly ttbPermitTable
                where ttbPermitTable.RecId == TTBPermitAddress.PermitTable;
        }        
        
        headerDataRecord.addCalculatedField('PermitAddressName',logisticslocation.Description);
        headerDataRecord.addCalculatedField('DSPNumberVendor',ttbPermitTable.PermitId);
        headerDataRecord.addCalculatedField('VendorName',purchTable.PurchName);
        headerDataRecord.addCalculatedField('VendorAccount',purchTable.OrderAccount);
        headerDataRecord.addCalculatedField('TransferOrderSiteName', inventTransferTable.InventLocationIdFrom);

        DocXmlRecord    lotID = headerDataRecord.addChildCalculatedRecord('LotID');

        lotID.addCalculatedField('ActivityNumber', inventTrans.ActivityNumber);
        lotID.addCalculatedField('ItemId', inventTrans.ItemId);
        lotID.addCalculatedField('Qty', inventTrans.Qty);
        lotID.addCalculatedField('inventBatchId', inventDim.inventBatchId);
        lotID.addCalculatedField('Product', inventDistinctProductExpanded.DisplayProductNumber);
        lotID.addCalculatedField('DatePhysical', inventTrans.DatePhysical);
        lotID.addCalculatedField('DateFinancial', inventTrans.DateFinancial);
        lotID.addCalculatedFieldFromEnum('ReferenceCategory', enumStr(InventTransType),inventTransOrigin.ReferenceCategory);
        lotID.addCalculatedField('ReferenceId', inventTransOrigin.ReferenceId);
        lotID.addCalculatedField('JournalNameId', inventJournalTable.JournalNameId);
        lotID.addCalculatedFieldFromEnum('StatusReceipt',enumStr(StatusReceipt), inventTrans.StatusReceipt);
        lotID.addCalculatedFieldFromEnum('StatusIssue',enumStr(StatusIssue), inventTrans.StatusIssue);
        lotID.addCalculatedField('UnitId', InventTableModule.UnitId);
        lotID.addCalculatedField('PdsCWQty', inventTrans.PdsCWQty);
        lotID.addCalculatedField('pdsCWUnitId', inventTrans.pdsCWUnitId());
        lotID.addCalculatedField('costValue', inventTrans.costValue());
        lotID.addCalculatedField('inventSerialId', inventDim.inventSerialId);
        lotID.addCalculatedField('wMSLocationId', inventDim.wMSLocationId);
        lotID.addCalculatedField('InventStatusId', inventDim.InventStatusId);
        lotID.addCalculatedField('LicensePlateId', inventDim.LicensePlateId);

        DocXmlRecord    work = headerDataRecord.addChildCalculatedRecord('Work');
        whsWorkTable = whsWorkTable::find(ttbInventGaugeTable.WorkId);

        work.addCalculatedField('WorkPriority', whsWorkTable.WorkPriority);
        work.addCalculatedField('LockedUser', whsWorkTable.LockedUser);
        work.addCalculatedField('WorkId', whsWorkTable.WorkId);
        work.addCalculatedFieldFromEnum('WorkStatus', enumStr(WHSWorkStatus),whsWorkTable.WorkStatus);
        work.addCalculatedField('InventSiteId', whsWorkTable.InventSiteId);
        work.addCalculatedField('InventLocationId', whsWorkTable.InventLocationId);
        work.addCalculatedField('WorkPoolId', whsWorkTable.WorkPoolId);
        work.addCalculatedField('TargetLicensePlateId', whsWorkTable.TargetLicensePlateId);
        work.addCalculatedFieldFromEnum('WorkTransType', enumStr(WHSWorkTransType),whsWorkTable.WorkTransType);
        work.addCalculatedField('OrderNum', whsWorkTable.OrderNum);
        work.addCalculatedField('TransTxt', whsWorkTable.TransTxt);
        work.addCalculatedFieldFromEnum('Frozen', enumStr(WHSFrozen),whsWorkTable.Frozen);
        work.addCalculatedField('LoadId', whsWorkTable.LoadId);
        work.addCalculatedField('ShipmentId', whsWorkTable.ShipmentId);
        work.addCalculatedField('WaveId', whsWorkTable.WaveId);
        work.addCalculatedField('ContainerId', whsWorkTable.ContainerId);
        work.addCalculatedField('WorkBuildId', whsWorkTable.WorkBuildId);
        work.addCalculatedFieldFromEnum('WorkCreationFailedOnReservation', enumStr(WHSWorkCreationFailedOnReservation),whsWorkTable.WorkCreationFailedOnReservation);
        work.addCalculatedFieldFromEnum('AutoExecute', enumStr(WHSAutoExecute),whsWorkTable.AutoExecute);
        work.addCalculatedFieldFromEnum('UseWorkForWaveReplen', enumStr(WHSUseWorkForWaveReplen),whsWorkTable.UseWorkForWaveReplen);
        work.addCalculatedField('CreatedDateTime', whsWorkTable.CreatedDateTime);        
        work.addCalculatedField('RMANumber', (whsWorkTable.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::RMANumber)));

        while select whsWorkLine
            where whsWorkLine.WorkId == whsWorkTable.WorkId
        {
            DocXmlRecord    workline = work.addChildCalculatedRecord('WorkLine');

            inventTable = InventTable::find(whsWorkline.ItemId);
            productName = inventTable.productName(SystemParameters::getSystemLanguageId());

            select firstonly inventDim
                where inventDim.inventDimId == whsWorkLine.inventDimId;

            workline.addCalculatedFieldFromEnum('WorkStatus', enumStr(WHSWorkStatus),whsWorkline.WorkStatus);
            workline.addCalculatedFieldFromEnum('WorkType', enumStr(WHSWorkType),whsWorkline.WorkType);
            workline.addCalculatedField('WMSLocationId', whsWorkline.WMSLocationId);
            workline.addCalculatedField('ItemId', whsWorkline.ItemId);
            workline.addCalculatedField('ProductName', productName);
            workline.addCalculatedField('QtyWork', whsWorkline.QtyWork);
            workline.addCalculatedField('QtyRemain', whsWorkline.QtyRemain);
            workline.addCalculatedField('UnitId', whsWorkline.UnitId);
            workline.addCalculatedField('UserId', whsWorkline.UserId);
            workline.addCalculatedFieldFromEnum('WorkStop', enumStr(WHSWorkStop),whsWorkline.WorkStop);
            workline.addCalculatedFieldFromEnum('Mandatory', enumStr(WHSMandatory),whsWorkline.Mandatory);
            workline.addCalculatedField('WorkClassId', whsWorkline.WorkClassId);
            workline.addCalculatedField('ConfigId', inventDim.ConfigId);
            workline.addCalculatedField('InventSizeId', inventDim.InventSizeId);
            workline.addCalculatedField('InventColorId', inventDim.InventColorId);
            workline.addCalculatedField('InventStyleId', inventDim.InventStyleId);
            workline.addCalculatedField('InventBatchId', inventDim.InventBatchId);
            workline.addCalculatedField('InventSerialId', inventDim.InventSerialId);

            while select whsWorkInventTrans
                where whsWorkInventTrans.WorkId == whsWorkline.WorkId
                    && whsWorkInventTrans.LineNum == whsWorkline.LineNum
            {
                DocXmlRecord    worklinetrans = workline.addChildCalculatedRecord('WorkLineTrans');
                                
                worklinetrans.addCalculatedField('WorkId', whsWorkInventTrans.WorkId);
                worklinetrans.addCalculatedField('LineNum', whsWorkInventTrans.LineNum);
                worklinetrans.addCalculatedField('ItemId', whsWorkInventTrans.ItemId);
                worklinetrans.addCalculatedField('Qty', whsWorkInventTrans.Qty);
                worklinetrans.addCalculatedField('InventQtyRemain', whsWorkInventTrans.InventQtyRemain);
                worklinetrans.addCalculatedFieldFromEnum('WorkHasReservation', enumStr(WHSWorkHasReservation),whsWorkInventTrans.WorkHasReservation);
                worklinetrans.addCalculatedField('InventTransIdParent', whsWorkInventTrans.InventTransIdParent);
                worklinetrans.addCalculatedField('InventTransIdFrom', whsWorkInventTrans.InventTransIdFrom);
                worklinetrans.addCalculatedField('InventTransIdTo', whsWorkInventTrans.InventTransIdTo);
                worklinetrans.addCalculatedField('TransDateTime', whsWorkInventTrans.TransDateTime);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>