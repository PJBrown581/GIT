<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIInventTrans_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GGIInventTrans_Extension</c> class contains code extensions for table InventTrans.
/// </summary>
[ExtensionOf(tableStr(InventTrans))]
public final class GGIInventTrans_Extension
{   
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ggiPickingListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// For a RAF related transaction, returns the corresponding Picking list transaction.
    /// </summary>
    /// <returns>
    /// A <c>InventTrans</c> tablee record.
    /// </returns>
    public InventTrans ggiPickingListTrans()
    {
        InventTransRefId        referenceId = this.inventTransOrigin().ReferenceId;        
        GGIDumpAndBottlingLine  dbrLinePickingList;

        select firstonly dbrLinePickingList
            order by RecId desc
            where dbrLinePickingList.ReferenceId        == referenceId
                && dbrLinePickingList.ReferenceCategory == InventTransType::ProdLine;

        return InventTrans::findRecId(dbrLinePickingList.InventTransRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiIsLocationDBRControlled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the location forr the transaction is DBR controlled.
    /// </summary>
    /// <returns>
    /// True, if transaction location is DBR controlled; otherwise, false.
    /// </returns>
    public boolean ggiIsLocationDBRControlled()
    {
        return WMSLocation::find(this.wmsLocationId(), this.inventLocationId()).GGIDBRControlled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiUOMClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the UOM class for the inventory transaction.
    /// </summary>
    /// <returns>
    /// A value for <c>TTBUOMClass</c> enum.
    /// </returns>
    public TTBUOMClass ggiUOMClass()
    {
        return UnitOfMeasure::findBySymbol(this.inventUnit()).TTBUOMClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TTBwinegallon</Name>
				<Source><![CDATA[
    /// <summary>
    /// method to display Inventory UOM in wine gallons 
    /// -RPT accounting report
    /// </summary>
    /// <returns>wine gallon calculated value</returns>
    [SysClientCacheDataMethodAttribute(true)]
    display public TTBWineGallon TTBwinegallon()
    {
        TTBWineGallon ret;
        const str TTBWineGallon = 'GAL';
        UnitOfMeasureSymbol inventUnit = this.inventUnit();
        UnitOfMeasureSymbol salesUnit = SalesLine::findInventTransId(this.inventTransOrigin().InventTransId).SalesUnit;

        if(inventUnit == TTBWineGallon && salesUnit == TTBWineGallon)
        {
            ret = this.qtyUnit();
        }
        else
        {
            try
            {
                if (inventUnit != TTBWineGallon)
                {
                    ret = TTBUtilHelper::convert2WineGallon(this.qtyUnit(),inventUnit, this.ItemId);
                }
                else if (salesUnit != TTBWineGallon)
                {
                    ret = TTBUtilHelper::convert2WineGallon(this.qtyUnit(),salesUnit, this.ItemId);
                }
            }
            catch
            {
                ret = 0;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>