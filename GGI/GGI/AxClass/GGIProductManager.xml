<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIProductManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager for products.
/// </summary>
class GGIProductManager
{
    /// <summary>
    ///     Record ID of a product record.
    /// </summary>
    public EcoResProductRecId    ProductRecId;

    /// <summary>
    ///     Cache.
    /// </summary>
    protected EcoResProduct   EcoResProduct;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIProductManager construct()
    {
        return new GGIProductManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProductRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified product record ID.
    /// </summary>
    /// <param name = "_productRecId">
    ///     Record ID of a product.
    /// </param>
    /// <returns>
    ///     This object.
    /// </returns>
    public static GGIProductManager newProductRecId(EcoResProductRecId _productRecId)
    {
        GGIProductManager productManager = GGIProductManager::construct();

        productManager.ProductRecId = _productRecId;

        return productManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified item number.
    /// </summary>
    /// <param name = "_itemId">
    ///     The item number.
    /// </param>
    /// <returns>
    ///     This object.
    /// </returns>
    public static GGIProductManager newItemId(ItemId _itemId)
    {
        GGIProductManager productManager = GGIProductManager::construct();

        productManager.ProductRecId = InventTable::find(_itemId).Product;

        return productManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>product</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current product record.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the product record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The current product record.
    /// </returns>
    protected EcoResProduct product(boolean _forUpdate = false)
    {
        if (ProductRecId != EcoResProduct.RecId)
        {
            EcoResProduct = EcoResProduct::find(ProductRecId, _forUpdate);
        }

        return EcoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the category associated with the current product.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the category is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The associated category.
    /// </returns>
    /// <remarks>
    ///     Use the next statement to get the next product category.
    /// </remarks>
    public EcoResProductCategory findCategory(boolean _forUpdate = false)
    {
        EcoResProductCategory   productCategory;

        productCategory.selectForUpdate(_forUpdate);

        // Allow the caller to use the next statement; therefore, do not use firstonly.
        select productCategory
            where productCategory.Product == ProductRecId;

        return productCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the associated product categories as a collection.
    /// </summary>
    /// <returns>
    ///     A collection of associated product categories in the form of [category hierarchy, category name].
    /// </returns>
    public Map productCategories()
    {
        const Types   hierarchyName = Types::String;
        const Types   categoryName  = Types::String;

        Map productCategories = new Map(hierarchyName, categoryName);

        EcoResProductCategory   productCategory = this.findCategory();

        while (productCategory)
        {
            EcoResCategoryHierarchy hierarchy;
            EcoResCategory          category;

            select hierarchy
                where hierarchy.RecId == productCategory.CategoryHierarchy;

            select category
                where category.RecId == productCategory.Category;

            productCategories.insert(hierarchy.Name, category.Name);

            next productCategory;
        }

        return productCategories;
    }

]]></Source>
			</Method>
			<Method>
				<Name>legacyCatalogUS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the US legacy catalag number.
    /// </summary>
    /// <returns>
    ///     The US legace catalog number.
    /// </returns>
    public FieldValue legacyCatalogUS()
    {
        // For some reason this particular field cannot be referenced directly nor obtained by a call to fieldName2Id.
        // Therefore, manually look it up through the dictianary.

        const FieldName LegacyCatalog = 'LegacyCatalog_Custom';

        FieldValue      value;
        SysDictTable    dictTable = new SysDictTable(EcoResProduct.TableId);

        for (FieldId fieldId = dictTable.fieldNext(0); fieldId; fieldId = dictTable.fieldNext(fieldId))
        {
            SysDictField    field = dictTable.fieldObject(fieldId);

            if (field.name() == LegacyCatalog)
            {
                value = this.product().(fieldId);
                break;
            }
        }
        

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the released product.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the released product is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The released product; otherwise, an empty buffer.
    /// </returns>
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::findByProduct(this.ProductRecId, _forUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>