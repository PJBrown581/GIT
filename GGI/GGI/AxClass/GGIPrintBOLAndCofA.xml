<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIPrintBOLAndCofA</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSWorkExecuteMode(WHSWorkExecuteMode::GGIPrintBOLAndCofA)]
public class GGIPrintBOLAndCofA extends WhsWorkExecuteDisplay
{
    private WHSRFPassthrough    fieldValues     = new WHSRFPassthrough(Types::String, Types::String);
    Private const string255     RFProNum        = 'Scan Pro number';
    Private const string255     RFSealNum       = 'Scan Seal number';
    Private const string255     RFTrailerNum    = 'Scan Trailer number';
    Private const string255     LoadNum         = "Load ID";
    private const int           workPosition    = 1;
    private const int           postion         = 2;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = "")
    {
        container               ret = conNull();
        container               con = _con;
        container               tmpFieldValues = conNull();
        int                     hasError = 0;
        boolean                 error = false;
        WHSLoadTable            wHSLoadTable;
        Args                    args = new Args();
        GGIPrintBOLCOAHelper    printBOLCOAHelper;
        
        pass = WHSRFPassthrough::create(conPeek(_con,postion));

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);

            if (!pass.exists(#InventLocationId))
            {
                pass.insert(#InventLocationId, WHSWorkUserSession::find(userId).InventLocationId);
            }
        }


        switch (step)
        {
            case 0:

                ret = this.buildLoadId(ret);
                step = 1;
                break;

            case 1:
                error = false;

                [con, error] = this.processData(con);
                if(error)
                {
                    ret = con;
                }
                else if(pass.exists(LoadNum) && pass.lookup(LoadNum)  == "")
                {
                    ret = this.buildLoadId(ret);
                }
                else
                {
                    WHSLoadId   loadId = pass.exists(LoadNum) ? pass.lookup(LoadNum) : '';
                    if(loadId != "")
                    {
                        [con, error]  = this.validateLoadId(con, loadId);
                    }
                    if(error)
                    {
                        ret = con;
                    }
                    else
                    {
                        step = 1;
                        ret = this.buildLoadId(ret);

                        printBOLCOAHelper = new GGIPrintBOLCOAHelper();

                        printBOLCOAHelper.printBOLForLoad(loadId);

                        pass.insert(#WorkComplete, workPosition);
                        ret = this.handleWorkCompletedMessage(ret);

                        pass.insert(LoadNum, "");
                    }
                }
        }
        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadId</Name>
				<Source><![CDATA[
    public container validateLoadId(container _con, WHSLoadId _loadId)
    {
        container               con = _con;
        boolean                 multipleLines = false;

        if(!WHSLoadTable::find(_loadId))
        {
            con = this.addErrorLabel(_con, strFmt("@GGI:LoadValidation", _loadId), WHSRFColorText::Error);
        }
        return [con, this.hasError(con)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    private container processData(container _con)
    {
        container con = _con;

        if (this.hasError(con))
        {
            con = this.deleteControlDataFromContainer(con, #RFError);
        }
        container  tmpFieldValues;
        [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);

        return [con, this.hasError(con)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLoadId</Name>
				<Source><![CDATA[
    container buildLoadId(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@GGI:LoadId";

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, LoadNum, "@SYS319515", 1, '', extendedTypeNum(WHSLoadId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWorkCompletedMessage</Name>
				<Source><![CDATA[
    private container handleWorkCompletedMessage(container _con)
    {
        container ret = conNull();
        if (pass.exists(#WorkComplete))
        {
            ret = this.addErrorLabel(ret, "@GGI:SentToPrinter", WHSRFColorText::Success);
            pass.remove(#WorkComplete);
        }
        ret += _con;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>