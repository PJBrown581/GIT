<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGICustomerExportBusinessEventTrigger_extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// events extension to send customer buisness events
/// </summary>
public static class GGICustomerExportBusinessEventTrigger_extension
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustTable_OnInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// new customer records will send business event.
    /// </summary>
    /// <param name = "sender">customer record inserted</param>
    /// <param name = "e">event aruguments</param>
    [DataEventHandler(tablestr(CustTable),DataEventType::Inserted)]
    public static void CustTable_OnInserted(Common sender,DataEventArgs e)
    {
        CustTable custTable = sender;
        GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
        if(businessEvent )
        {
            businessEvent.send();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustTable_OnUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// update salesforce related fields will send business event
    /// </summary>
    /// <param name = "sender">Customer table record</param>
    /// <param name = "e">data event arguments</param>
    [DataEventHandler(tablestr(CustTable),DataEventType::Updated)]
    public static void CustTable_OnUpdated(Common sender,DataEventArgs e)
    {
        CustTable custTable = sender;
        CustTable oldCustTable = custTable.orig();
        
        // send only if salesfroce specific fields have been changeed.
        if( oldCustTable.Currency != custTable.Currency 
            || oldCustTable.InvoiceAccount != custTable.InvoiceAccount 
            || oldCustTable.Blocked != custTable.Blocked 
            || oldCustTable.CreditMax != custTable.CreditMax
            || oldCustTable.DlvMode != custTable.DlvMode 
            || oldCustTable.DlvTerm != custTable.DlvTerm 
            || oldCustTable.CustGroup != custTable.CustGroup 
            || oldCustTable.SegmentId != custTable.SegmentId 
            || oldCustTable.PaymTermId != custTable.PaymTermId 
            || oldCustTable.SalesDistrictId != custTable.SalesDistrictId 
            || oldCustTable.MainContactWorker !=custTable.MainContactWorker 
            || oldCustTable.LineOfBusinessId != custTable.LineOfBusinessId  
            || oldCustTable.SubsegmentId != custTable.SubsegmentId 
            || oldCustTable.PIPPrintCustSpecificCertOfAnalysis != custTable.PIPPrintCustSpecificCertOfAnalysis 
            || oldCustTable.CredManAccountStatusId != custTable.CredManAccountStatusId 
            || oldCustTable.CredManStatusReasonId != custTable.CredManStatusReasonId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsLocation_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// update salesforce related fields will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(LogisticsLocation), DataEventType::Updated)]
    public static void LogisticsLocation_onUpdated(Common sender, DataEventArgs e)
    {
        LogisticsLocation location = sender;
        DirPartyLocation DirPartyLocation;

        select firstonly Party from DirPartyLocation
            where DirPartyLocation.Location == location.RecId;

        CustTable custTable = custTable::findByPartyRecId(DirPartyLocation.Party);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsLocation_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// new address will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(LogisticsLocation), DataEventType::Inserted)]
    public static void LogisticsLocation_onInserted(Common sender, DataEventArgs e)
    {
        LogisticsLocation location = sender;
        DirPartyLocation DirPartyLocation;

        select firstonly Party from DirPartyLocation
            where DirPartyLocation.Location == location.RecId;
        CustTable custTable = custTable::findByPartyRecId(DirPartyLocation.Party);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyLocation_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///  new address will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(DirPartyLocation), DataEventType::Inserted)]
    public static void DirPartyLocation_onInserted(Common sender, DataEventArgs e)
    {
        DirPartyLocation partyLocation = sender;
        CustTable custTable = custtable::findByPartyRecId(partyLocation.Party);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyLocation_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  update salesforce related fields will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(DirPartyLocation), DataEventType::Updated)]
    public static void DirPartyLocation_onUpdated(Common sender, DataEventArgs e)
    {
        DirPartyLocation partyLocation = sender;
        CustTable custTable = custtable::findByPartyRecId(partyLocation.Party);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///  new address will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(LogisticsPostalAddress), DataEventType::Inserted)]
    public static void LogisticsPostalAddress_onInserted(Common sender, DataEventArgs e)
    {
        LogisticsPostalAddress postaladdress = sender;
        LogisticsLocation location = LogisticsLocation::find(postaladdress.Location);
        DirPartyLocation DirPartyLocation;

        select firstonly Party from DirPartyLocation
            where DirPartyLocation.Location == location.RecId;
        
        CustTable custTable = custTable::findByPartyRecId(DirPartyLocation.Party);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// update salesforce related fields will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(LogisticsPostalAddress), DataEventType::Updated)]
    public static void LogisticsPostalAddress_onUpdated(Common sender, DataEventArgs e)
    {
        LogisticsPostalAddress postaladdress = sender;
        LogisticsLocation location = LogisticsLocation::find(postaladdress.Location);
        DirPartyLocation DirPartyLocation;

        select firstonly Party from DirPartyLocation
            where DirPartyLocation.Location == location.RecId;

        CustTable custTable = custTable::findByPartyRecId(DirPartyLocation.Party);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsElectronicAddress_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// update salesforce related fields will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(LogisticsElectronicAddress), DataEventType::Inserted)]
    public static void LogisticsElectronicAddress_onInserted(Common sender, DataEventArgs e)
    {
        LogisticsElectronicAddress electronicAddress = sender;
        LogisticsLocation location = LogisticsLocation::find(electronicAddress.Location);
        DirPartyLocation DirPartyLocation;

        select firstonly Party from DirPartyLocation
            where DirPartyLocation.Location == location.RecId;

        CustTable custTable = custTable::findByPartyRecId(DirPartyLocation.Party);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsElectronicAddress_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// update salesforce related fields will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(LogisticsElectronicAddress), DataEventType::Updated)]
    public static void LogisticsElectronicAddress_onUpdated(Common sender, DataEventArgs e)
    {
        LogisticsElectronicAddress electronicAddress = sender;
        LogisticsLocation location = LogisticsLocation::find(electronicAddress.Location);
        DirPartyLocation DirPartyLocation;

        select firstonly Party from DirPartyLocation
            where DirPartyLocation.Location == location.RecId;

        CustTable custTable = custTable::findByPartyRecId(DirPartyLocation.Party);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DirPartyTable_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(DirPartyTable), DataEventType::Updated)]
    public static void DirPartyTable_onUpdated(Common sender, DataEventArgs e)
    {
        DirPartyTable dirPartyTable = sender;
        DirPartyTable oldPartyTable = dirPartyTable.orig();

        CustTable custTable = custTable::findByPartyRecId(dirPartyTable.RecId);
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>TTBPermitAddress_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///  new permit on address will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(TTBPermitAddress), DataEventType::Inserted)]
    public static void TTBPermitAddress_onInserted(Common sender, DataEventArgs e)
    {
        TTBPermitAddress ttbPermitAddress = sender;
        LogisticsPostalAddress  logisticsPostalAddress;
        DirPartyLocation DirPartyLocation;

        select firstonly  Location from LogisticsPostalAddress
            where LogisticsPostalAddress.RecId == ttbPermitAddress.LogisticsPostalAddress;

        LogisticsLocation location = LogisticsLocation::find(LogisticsPostalAddress.Location);
        

        select firstonly Party from DirPartyLocation
            where DirPartyLocation.Location == location.RecId;

        CustTable custTable = custTable::findByPartyRecId(DirPartyLocation.Party);
        
        
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TTBPermitAddress_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///  new permit on address will send business event
    /// </summary>
    /// <param name="sender">current record</param>
    /// <param name="e">data event arguments</param>
    [DataEventHandler(tableStr(TTBPermitAddress), DataEventType::Deleted)]
    public static void TTBPermitAddress_onDeleted(Common sender, DataEventArgs e)
    {

        TTBPermitAddress ttbPermitAddressDeleted = sender;
        TTBPermitAddress ttbPermitAddress = ttbPermitAddressDeleted.orig() ;
        LogisticsPostalAddress  logisticsPostalAddress;
        DirPartyLocation DirPartyLocation;

        select firstonly  Location from LogisticsPostalAddress
            where LogisticsPostalAddress.RecId == ttbPermitAddress.LogisticsPostalAddress;

        LogisticsLocation location = LogisticsLocation::find(LogisticsPostalAddress.Location);
        

        select firstonly Party from DirPartyLocation
            where DirPartyLocation.Location == location.RecId;

        CustTable custTable = custTable::findByPartyRecId(DirPartyLocation.Party);
        
        
        if(custTable.RecId)
        {
            GGICustomerExportBuisnessEvent businessEvent = GGICustomerExportBuisnessEvent::newFromCustTable(custTable);
            if(businessEvent )
            {
                businessEvent.send();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>