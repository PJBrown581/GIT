<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGI_SalesFormletterParmData_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Extension for TBB001 - Excise Tax Invoice
/// </summary>
[ExtensionOf(classStr(SalesFormletterParmDataInvoice))]
final class GGI_SalesFormletterParmData_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mcrSplitData</Name>
				<Source><![CDATA[
    /// <summary> 
    ///  COC for mcrSplitData
    /// </summary>
    /// <returns>
    ///     boolean true orr false.
    /// </returns>
    public boolean mcrSplitData()
    {
        boolean ret = next mcrSplitData();
        if (ret)
        {
            ret = this.SplitExcise();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SplitExcise</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Splits parm lines that are for Excise Tax
    /// </summary>
    /// <returns>
    ///     true.
    /// </returns>
  
    private boolean SplitExcise()
    {
        SalesParmTable  salesParmTableCreate, salesParmTableOrig;
        SalesParmLine   salesParmLineSelect;
        SalesParmLine   salesparmLineSelectCheck;
        SalesTable      localSalesTable;
        SalesLine       localSalesLine;
        TradeLineRefId  tableRefId;
        GGI_ExciseTaxRates taxRates;
        Boolean         recordFound = false;
        SalesParmTable salesParmTableOriginal;

        void exciseCreateParmTable()
        {
            this.parmTransDate(salesParmTableOriginal.Transdate);     //AL_Support_70828_DatesAreNotAligningOnTheBillingCode_09.29.2023_ByNamitha
            this.createParmTable(localSalesTable,
                                localSalesLine,
                                tableRefId);
        }
        ttsBegin;
        GGI_ExciseTaxManager taxManager = GGI_ExciseTaxManager::construct();
  
        while select salesParmLineSelect
        order by salesParmLineSelect.RecId
            where salesParmLineSelect.ParmId == SalesParmUpdate.ParmId
            &&    salesParmLineSelect.SalesCategory
            && salesParmLineSelect.DeliverNow > 0
        {
        
            TTBWineGallon siteGallons =  taxManager.calculateProofGallonsForSite(salesParmLineSelect.inventDim().InventSiteId);
            if (siteGallons <=0)
            {
                continue;
            }

            select firstonly taxRates
                where taxRates.SalesCategory == salesParmLineSelect.SalesCategory
                &&    taxRates.InventSiteId == salesParmLineSelect.inventDim().InventSiteId ;

            if (!taxRates)
            {
                continue;
            }
        
            // Only init record lists once a record is found.
            if (!recordFound)
            {
                this.initRecordLists();
                //Set boolean to true so that record lists are not initiated again.
                recordFound = true;
            }
            // Get current parm line
            SalesParmLine salesParmLine = salesParmLineSelect;
            salesParmLine.selectForUpdate(true);
            salesParmLine.reread();

            localSalesTable  = salesParmLine.salesTable();

            // Get original tableRefId
            TradeLineRefId tableRefIdOrig = salesParmLine.TableRefId;
            salesParmTableOriginal = salesParmTable::find(salesParmLine.ParmId,salesParmLine.TableRefId);    //AL_Support_70828_DatesAreNotAligningOnTheBillingCode_09.29.2023_ByNamitha

            // Create new table ref Id, to create a new parm table.
            salesParmTableCreate.TableRefId = formletterParmData::getNewTableRefId();
            tableRefId = salesParmTableCreate.TableRefId;

            salesParmLine.TableRefId = salesParmTableCreate.TableRefId;
            salesParmLine.setLineAmount();
            ttsbegin;
            salesParmLine.update();
            ttscommit;

            exciseCreateParmTable();

            // Delete sales parm table that parm line WAS attached to, if the parm
            // table does not have any more parm lines attached.
            select firstonly RecId, TableRefId from salesparmLineSelectCheck
            where salesparmLineSelectCheck.TableRefId == tableRefIdOrig;

            if (!salesparmLineSelectCheck.RecId)
            {
                delete_from salesParmTableOrig
                where salesParmTableOrig.TableRefId == tableRefIdOrig;
            }

        }
        // end of while
        // insert records created during split
        if (recordFound)
        {
            this.insertRecordLists();
        }

        ttsCommit;


        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>