<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocDataSheetDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The GGIDocInventTestCofADSP class converts the data sheet report DP class to a DSP class 
/// </summary>
class GGIDocDataSheetDSP extends DocDatasourceProviderSrsReporting
{
    #define.DataSheetHeader('DataSheetHeader')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Class description.
    /// </summary>
    /// <returns>
    ///     The class description.
    /// </returns>
    public ClassDescription description()
    {
        return 'Data sheet DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for the RDP data source.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the data points.
    /// </param>
    /// <param name = "_rdpTableRecord">
    ///     RDP data source.
    /// </param>
    /// <param name = "_rdpTableName">
    ///     RDP data source name.
    /// </param>
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(ggiDataSheetTmp))
        {
            this.addDataFieldsForHeader(_addingRecord, _rdpTableRecord);
            _addingRecord.addAllFields();
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the data points for the data sheet line.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the sales confirmation line data points.
    /// </param>
    /// <param name = "_header">
    ///     Docentric record to contain the sales confirmation header data points.
    /// </param>
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, ggiDataSheetTmp _header)
    {
        InventQualityOrderTable inventQualityOrderTable;
        InventQualityOrderLine  inventQualityOrderLine;
        InventTestTable         inventTestTable;
                
        inventQualityOrderTable = inventQualityOrderTable::find(_header.QualityOrderId);
        
        if (inventQualityOrderTable)
        {
            while select inventQualityOrderLine
                where inventQualityOrderLine.QualityOrderId == inventQualityOrderTable.QualityOrderId
            {
                DocXmlRecord    docInventQualityOrderLine = _addingRecord.addChildRecord(inventQualityOrderLine);
                docInventQualityOrderLine.addAllFields();
                docInventQualityOrderLine.addDisplayMethod("pipTestDescription");

                DocXmlRecord    docLine = docInventQualityOrderLine.addChildCalculatedRecord('DataSheetLine');
                inventTestTable = inventTestTable::find(inventQualityOrderLine.testid);
            
                docLine.addCalculatedField('Test',inventQualityOrderLine.TestId);
                docLine.addCalculatedField('Monograph',inventTestTable.GGIMonograph);
                docLine.addCalculatedField('TestMethod',inventTestTable.GGITestMethod);
                docLine.addCalculatedField('Specification',inventTestTable.GGISpecifications);
                docLine.addCalculatedField('ReagentLot',inventTestTable.GGIReagentLot);
                docLine.addCalculatedField('Result',inventTestTable.GGIResult);
                docLine.addCalculatedField('Initial','Initial');                
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductCategories</Name>
				<Source><![CDATA[
    private void addProductCategories(DocXmlRecord _addingRecord, InventQualityOrderTable _qualityOrderTable, GGIProductManager _productManager = null)
    {
        GGIProductManager   productManager      = GGIProductManager::newItemId(_qualityOrderTable.ItemId);
        MapEnumerator       productCategories   = productManager.productCategories().getEnumerator();
        
        while (productCategories.moveNext())
        {
            DocXmlRecord docProductCategory = _addingRecord.addChildCalculatedRecord('ProductCategory');

            docProductCategory.addCalculatedField('Hierarchy', productCategories.currentKey(), literalStr("@SYS40832"));
            docProductCategory.addCalculatedField('Name', productCategories.currentValue(), literalStr("@SYS80991"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add data points for the data sheet header.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the header.
    /// </param>
    /// <param name = "_header">
    ///     Native record of the header.
    /// </param>
    protected void addDataFieldsForHeader(DocXmlRecord _addingRecord, ggiDataSheetTmp _header)
    {
        InventQualityOrderTable inventQualityOrderTable;
        EcoResProduct           ecoResProduct;
        EcoResProductCategory   ecoResProductCategory;
        EcoResCategory          ecoResCategory;
        InventDim               inventDim;
        InventSite              inventSite;
        DocXmlRecord            docinventQualityOrderTable;
        GGIDataSheetTable       dataSheetTable;    
        
        // Rename the record from 'datasheetTmp' to 'DataSheetHeader'.
        _addingRecord.setRecordName(#DataSheetHeader);

        // Add all fields from the dataSheetTmp table.
        inventQualityOrderTable = inventQualityOrderTable::find(_header.QualityOrderId);
        ecoResProduct = ecoResProduct::findByDisplayProductNumber(inventQualityOrderTable.ItemId);
        inventDim = inventDim::find(inventQualityOrderTable.InventDimId);
        inventSite = inventQualityOrderTable.inventDim().InventSite();
            
        select firstOnly ecoResProductCategory
            where ecoResProductCategory.Product == EcoResProduct::findByProductNumber(inventQualityOrderTable.itemid).RecId;

        ecoResCategory = ecoResCategory::find(ecoResProductCategory.category);

        select firstonly dataSheetTable
            where dataSheetTable.DataSheetId == _header.DataSheetId;

        if (inventQualityOrderTable)
        {
            docinventQualityOrderTable = _addingRecord.addChildRecord(inventQualityOrderTable);
            docinventQualityOrderTable.addAllFields();

            docinventQualityOrderTable.addChildRecord(inventQualityOrderTable.inventDim()).addAllFields();
            
            _addingRecord.addCalculatedField('QualityControlDataSheet','QUALITY CONTROL DATA SHEET');
            _addingRecord.addCalculatedField('ProductName',ecoResProduct.displayProductName());
            //_addingRecord.addCalculatedField('ProductCategory',ecoResCategory.name);
            _addingRecord.addCalculatedField('ItemNumber',inventQualityOrderTable.itemid);
            _addingRecord.addCalculatedField('BatchNumber','Batch Number #');
            _addingRecord.addCalculatedField('DateofTesting',dataSheetTable.CreatedDateTime);
            _addingRecord.addCalculatedField('SupplierBatch','Supplier Batch #');
            _addingRecord.addCalculatedField('VehicleID','Vehicle ID #');
            _addingRecord.addCalculatedField('Address',InventSite.logisticsPostalAddress().Address);
            _addingRecord.addCalculatedField('Webaddress','www.pharmco.com | www.greenfield.com');
            _addingRecord.addCalculatedField('Batch','Batch #');
            _addingRecord.addCalculatedField('ApprovedforOffload','Approved for Offload:');
        }

        this.addProductCategories(_addingRecord, inventQualityOrderTable);

        this.addDataFieldsForLine(docinventQualityOrderTable, _header);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>