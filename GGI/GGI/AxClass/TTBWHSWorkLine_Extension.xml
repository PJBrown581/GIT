<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBWHSWorkLine_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TTB006_GaugeReport - TTB customizations for the <c>WHSWorkLine</c> table.
/// </summary>
[ExtensionOf(tableStr(WHSWorkLine))]
public final class TTBWHSWorkLine_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///		CoC of insert() method to copy custom type mapping field to newly created workline record
    /// </summary>
    public void insert()
    {
        this.TTBWHSCustomTypeMap = WHSWorkTypeCustom::find(this.WorkTypeCustomCode).TTBWHSCustomTypeMap;
        
        next insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTTBWorkLineProof</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the Proof of whsWorkLine based on type.
    /// </summary>
    /// <returns>
    ///     Captured data from WHSCustomType
    /// </returns>
    TTBProof getTTBWorkLineProof()
    {
        WHSWorkTable		workTable = this.whsWorkTable();
        TTBInventGaugeTable	inventGaugeTablePrev;
        Common				sourceDocumentLine;
        TTBFormluaName		ttbFormulaName = TTBFormluaName::find(InventTable::find(this.ItemId).TTBFormulaID);

        if (ttbFormulaName.AlcoholType == TTBAlcoholType::PURE)
        {
            if (workTable.WorkTransType == WHSWorkTransType::Purch)
            {
                sourceDocumentLine = WHSInvent::getCommonFromWorkTransType(workTable.WorkTransType, this.InventTransId);
                if (sourceDocumentLine is PurchLine)
                {
                    PurchLine purchLine = sourceDocumentLine as PurchLine;
                    if (DlvMode::find(purchLine.purchTable().DlvMode).GGIDeliveryModeTruck)
                    {
                        return purchLine.TTBProof;
                    }
                }
            }
        
            if (workTable.WorkTransType == WHSWorkTransType::TransferReceipt)
            {
                sourceDocumentLine = WHSInvent::getCommonFromWorkTransType(workTable.WorkTransType, this.InventTransId);
                if (sourceDocumentLine is InventTransferLine)
                {
                    InventTransferLine inventTransferLine = sourceDocumentLine as InventTransferLine;
                    if (DlvMode::find(inventTransferLine.inventTransferTable().DlvModeId).GGIDeliveryModeTruck)
                    {
                        return inventTransferLine.TTBProof;
                    }
                }
            }

            if (workTable.WorkTransType == WHSWorkTransType::Invent)
            {
                //get previous gauge record and check source document for Truck mode of delivery
                inventGaugeTablePrev = this.findPreviousGaugeRecord();

                if (inventGaugeTablePrev.RecId)
                {
                    if (inventGaugeTablePrev.WorkTransType == WHSWorkTransType::Purch)
                    {
                        if (DlvMode::find(PurchTable::find(InventTransOrigin::findByInventTransId
                                        (inventGaugeTablePrev.InventTransId).ReferenceId).DlvMode).GGIDeliveryModeTruck)
                        {
                            return this.findProofFromQO();
                        }
                    }
        
                    if (inventGaugeTablePrev.WorkTransType == WHSWorkTransType::TransferReceipt)
                    {
                        if (DlvMode::find(InventTransferTable::find(InventTransOrigin::findByInventTransId
                                        (inventGaugeTablePrev.InventTransId).ReferenceId).DlvModeId).GGIDeliveryModeTruck)
                        {
                            return this.findProofFromQO();
                        }
                    }
                
                    return inventGaugeTablePrev.Proof;
                }
            }
        }

        return InventTable::find(this.ItemId).TTBProof;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTTBWorkLineProofDistil</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the Proof of whsWorkLine based on type.
    /// </summary>
    /// <returns>
    ///     Captured data from WHSCustomType
    /// </returns>
    TTBProof getTTBWorkLineProofDistil()
    {
        WHSWorkTable	workTable = this.whsWorkTable();
        Common			sourceDocumentLine;
        TTBInventGaugeTable	inventGaugeTablePrev;
        TTBFormluaName	ttbFormulaName = TTBFormluaName::find(InventTable::find(this.ItemId).TTBFormulaID);

        if (ttbFormulaName.AlcoholType == TTBAlcoholType::PURE && !TTBUtilHelper::isUnitFinshedGood(this.UnitId))
        {
            if (workTable.WorkTransType == WHSWorkTransType::Purch)
            {
                sourceDocumentLine = WHSInvent::getCommonFromWorkTransType(workTable.WorkTransType, this.InventTransId);
                if (sourceDocumentLine is PurchLine)
                {
                    PurchLine purchLine = sourceDocumentLine as PurchLine;
                    return purchLine.TTBProof;
                }
            }
        
            if (workTable.WorkTransType == WHSWorkTransType::TransferReceipt)
            {
                sourceDocumentLine = WHSInvent::getCommonFromWorkTransType(workTable.WorkTransType, this.InventTransId);
                if (sourceDocumentLine is InventTransferLine)
                {
                    InventTransferLine inventTransferLine = sourceDocumentLine as InventTransferLine;
                    return inventTransferLine.TTBProof;
                }
            }

            if (workTable.WorkTransType == WHSWorkTransType::Invent)
            {
                inventGaugeTablePrev = this.findPreviousGaugeRecord();
                if (inventGaugeTablePrev.RecId)
                {
                    return this.findPreviousGaugeRecord().ProofDistillation;
                }
            }
        }

        return InventTable::find(this.ItemId).TTBProof;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPreviousGaugeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the previous PO/TO gauge record based on item/batch combination of current work line
    /// </summary>
    /// <returns>
    ///     Captured gauge record
    /// </returns>
    public TTBInventGaugeTable findPreviousGaugeRecord()
    {
        TTBInventGaugeTable		inventGaugeTable;
        InventBatchId			inventBatch;

        inventBatch = this.getTTBBatchId();

        select firstonly inventGaugeTable
            order by RecId desc
            where inventGaugeTable.ItemId == this.ItemId
                && inventGaugeTable.InventBatchId == inventBatch
                && (inventGaugeTable.WorkTransType == WHSWorkTransType::TransferReceipt
                    || inventGaugeTable.WorkTransType == WHSWorkTransType::Purch);

        return inventGaugeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTTBBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the TTB InventBatchId regardless of transaction type of current work line
    /// </summary>
    /// <returns>
    ///     Captured data from BatchId
    /// </returns>
    public InventBatchId getTTBBatchId()
    {
        InventBatchId			inventBatch;
        WHSWorkInventTrans		whsWorkInventTrans;

        whsWorkInventTrans = WHSWorkInventTrans::findbyWorkIdLineNumItemIdTransIdParent(this.WorkId, this.LineNum,
                                                                                        this.ItemId, this.InventTransId);

        inventBatch = InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
                this.InventTransId).RecId).inventDim().inventBatchId;

        if (!inventBatch)
        {
            inventBatch = InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
            whsWorkInventTrans.InventTransIdTo).RecId).inventDim().inventBatchId;
        }
        
        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProofFromQO</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the Proof from quality order based on item/batch combination of current work line
    /// </summary>
    /// <returns>
    ///     Captured data from WHSCustomType
    /// </returns>
    TTBProof findProofFromQO()
    {
        TTBProof                proof;
        InventQualityOrderTable qualityOrder;
        InventDim				inventDim;
        InventBatchId			inventBatch;

        inventBatch = this.getTTBBatchId();

        select firstonly qualityOrder
            order by RecId desc
            join inventDim
            where qualityOrder.InventDimId    == inventDim.inventDimId
                && inventDim.inventBatchId    == inventBatch
                && qualityOrder.ItemId        == this.ItemId;

        if (qualityorder.recid)
        {
            InventQualityOrderLine  orderline;
            PdsBatchAttrib          batchattrib;

            //see if any of the order lines batch attibutes are for proof
            while select * from orderLine
                where orderline.QualityOrderId == QualityOrder.QualityOrderId
            {
                batchattrib = PdsBatchAttrib::find(orderline.PdsBatchAttribId);
                if (batchattrib.TTBInventQualityProof)
                {
                    proof = str2Num(orderLine.PdsAttribValue);
                }
            }
        }

        return proof;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>