<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIWorkExecuteDisplay_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TTB005B_DBRTankStartCounting - TTB customizations for the <c>WHSWorkExecuteDisplay</c> class.
/// </summary>
[ExtensionOf(classStr(WHSWorkExecuteDisplay))]
public final class GGIWorkExecuteDisplay_Extension
{
    #WHSRF
    public const UnitOfMeasureSymbol lbUnit = 'LB';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processPutWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Create counting journal for movement from Tank
    /// </summary>
    /// <param name = "_state">The instance of the <c>WhsWorkProcessWorkLineState</c> class.</param>
    /// <param name = "_workExecute">The instance of the <c>WHSWorkExecute</c> class.</param>
    /// <param name = "_buttonClicked">The clicked button.</param>
    /// <param name = "_newLocationId">New location id.</param>
    /// <returns>Work Id</returns>
    protected WHSWorkId processPutWorkLine(WhsWorkProcessWorkLineState _state,
                                           WhsWorkExecute              _workExecute,
                                           str                         _buttonClicked,
                                           WMSLocationId               _newLocationId)
    {
        InventJournalTable		journalTable;
        InventJournalTrans		journalTrans;
        InventJournalTableData	journalTableData;
        InventJournalTransData	journalTransData;

        InventTable				inventTable;
        WMSLocation				wmsLocation;
        TTBFormluaName			ttbFormulaName;
        InventDim				inventDim;
        WHSWorkId				tmpWorkId;
        Qty						calculatedQtyTempFactor;

        WHSRFPassthrough pass = this.pass;

        wmsLocation = WMSLocation::find(pass.lookupStr(#WMSLocationId), pass.lookupStr(#InventLocationId));
        inventTable = InventTable::find(pass.lookupStr(#ItemId));
        ttbFormulaName = TTBFormluaName::find(inventTable.TTBFormulaID);
        
        //if (wmsLocation.GGILocationType == GGIWMSLocationType::Tank
        //    && wmsLocation.GGIDBRControlled
        //    && workTable.WorkTransType == WHSWorkTransType::Invent
        //    && ttbFormulaName.AlcoholType != TTBAlcoholType::none
        //    && workTable.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::TankStartInchLbs)
        //    && workTable.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::TankStartTemp))
        //{
        //    TTBOutageGauge startGauge = str2num(workTable.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::TankStartInchLbs));
        //    TTBTemperature startTemp = str2num(workTable.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::TankStartTemp));

        //    if (workTable.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::VolumetricGauging) == 'n')
        //    {
        //        calculatedQtyTempFactor = startGauge;
        //    }
        //    else
        //    {
        //        TTBWineGallon calculatedWineGallons = TTBWMSLocationOutage::findNearestWineGallons(wmsLocation.WMSLocationId, wmsLocation.InventLocationId, startGauge);
        //        TTBWineGALTempFactor ttbWineGALTempFactor = TTBWineGALTempFactor::findNearest(workLine.getTTBWorkLineProof(), startTemp);
        //        calculatedQtyTempFactor = TTBUtilHelper::convertFromWineGallon(calculatedWineGallons * ttbWineGALTempFactor.WineGALFactor, lbUnit, inventTable.ItemId);
        //    }

        //    journalTableData = JournalTableData::newTable(journalTable);
        //    journalTransData = journalTableData.journalStatic().newJournalTransData(journalTrans, journalTableData);

        //    // init JournalTable
        //    journalTable.clear();
        //    journalTable.JournalId = journalTableData.nextJournalId();
        //    journalTable.JournalType = InventJournalType::Count;
        //    journalTable.JournalNameId = journalTableData.journalStatic().standardJournalNameId(enum2int(journalTable.JournalType));
        //    journalTable.NumOfLines = 1;
        //    journalTable.insert();

        //    journalTableData.initFromJournalName(journalTableData.journalStatic().findJournalName(journalTable.JournalNameId));

        //    journalTrans.clear();
        //    journalTrans.initFromInventJournalTable(journalTable);
        //    journalTrans.initFromInventTable(inventTable);

        //    // build dimensions
        //    inventDim = InventDim::find(pass.lookupStr(#InventDimId));
        //    inventDim.wMSLocationId = wmsLocation.wMSLocationId;
        //    journalTrans.InventDimId = InventDim::findOrCreate(inventDim).inventDimId;

        //    journalTrans.InventOnHand = pass.lookup(#Qty);
        //    journalTrans.Counted = calculatedQtyTempFactor;
        //    journalTrans.Qty = journalTrans.Counted - journalTrans.InventOnHand;

        //    journalTrans.PriceUnit = InventTableModule::find(inventTable.ItemId, ModuleInventPurchSales::Invent).pcsPrice();
        //    journalTrans.CostAmount = journalTrans.Qty * journalTrans.PriceUnit;
        //    journalTrans.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        //    journalTrans.TransDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        //    journalTrans.Voucher = NumberSeq::newGetNumFromId(journalTable.VoucherNumberSequenceTable).num();
        //    journalTrans.insert();

        //    // Call the static method to post the journal
        //    if(InventJournalCheckPost::newPostJournal(journalTable).validate())
        //    {
        //        InventJournalCheckPost::newPostJournal(journalTable).runOperation();
        //    }

        //    WHSWorkTable workTableUpdate = WHSWorkTable::find(workTable.WorkId, true);
        //    ttsbegin;
        //    workTableUpdate.GGIOffloadWineGallon = TTBUtilHelper::convert2WineGallon(calculatedQtyTempFactor, lbUnit, inventTable.ItemId);
        //    workTableUpdate.update();
        //    ttscommit;
        //}

        tmpWorkId = next processPutWorkLine(_state, _workExecute, _buttonClicked, _newLocationId);
        return tmpWorkId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>