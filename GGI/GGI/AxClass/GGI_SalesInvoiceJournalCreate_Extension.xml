<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGI_SalesInvoiceJournalCreate_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Extension for TBB001 - Excise Tax Invoice
/// </summary>
[ExtensionOf(classStr(SalesInvoiceJournalCreate))]
final class GGI_SalesInvoiceJournalCreate_Extension
{
    private const str exSuffix = "E";
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a journal and a voucher number.
    /// </summary>
    /// <returns>
    ///   A <c>Container</c> with a journal and voucher number.
    /// </returns>
    protected container getNumAndVoucher()
    { 
        CustInvoiceJour custInvoiceJour;

        select firstonly custInvoiceJour
            where custInvoiceJour.ParmId == salesParmTable.ParmId;
            
        if (custInvoiceJour)
        {
            journalNumber = custInvoiceJour.InvoiceId + exSuffix;
        }
        [journalNumber, voucher] = next getNumAndVoucher();

        if(!voucher)
        {
            ttsbegin;
            NumberSeq newvoucher = NumberSeq::newGetNum(SalesParameters::numRefSalesInvoiceVoucher());
            ttscommit;
            voucher = newvoucher.num();
        }
        return [journalNumber, voucher];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceHeaderFromSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// DEV002 excise tax line
    /// </summary>
    protected void initInvoiceHeaderFromSourceTable()
    {
        next initInvoiceHeaderFromSourceTable();
        if ( subStr( custInvoiceJour.InvoiceId, strLen(custInvoiceJour.InvoiceId),-1) == exSuffix)
        {
            custInvoiceJour.Payment =  CustTable::find(custInvoiceJour.OrderAccount).TTBExciseTaxPaymTerm;
        }
        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>