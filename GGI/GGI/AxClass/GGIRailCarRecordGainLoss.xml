<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIRailCarRecordGainLoss</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class GGIRailCarRecordGainLoss
{
    TTBInventGaugeTable         inventGaugeTable;
    TTBRailcarRecordSubclass    subClass;
    WHSWorkTable                workTable;
    TTBRailCarTable             railCarTable;
    TTBProof                    proof;
    TTBRailCarLine              lastRailCarLine;
    InventJournalTable          inventJournalTable;
    public const str TTBUOM ='GAL';
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIRailCarRecordGainLoss construct(TTBRailCarTable _railCarTable, WHSWorkTable _workTable, TTBInventGaugeTable _inventGaugeTable, TTBRailcarRecordSubclass _subClass, TTBProof _proof)
    {
        GGIRailCarRecordGainLoss railCarRecordGainLoss = new GGIRailCarRecordGainLoss();

        railCarRecordGainLoss.parmRailCarTable(_railCarTable);
        railCarRecordGainLoss.parmWorkTable(_workTable);
        railCarRecordGainLoss.parmGaugeRecord(_inventGaugeTable);
        railCarRecordGainLoss.parmSubClass(_subClass);
        railCarRecordGainLoss.parmProof(_proof);
    
        return railCarRecordGainLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRailCarTable</Name>
				<Source><![CDATA[
    public TTBRailCarTable parmRailCarTable(TTBRailCarTable _railCarTable)
    {
        railCarTable = _railCarTable;

        return railCarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTable</Name>
				<Source><![CDATA[
    public WHSWorkTable parmWorkTable(WHSWorkTable _workTable)
    {
        workTable = _workTable;

        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGaugeRecord</Name>
				<Source><![CDATA[
    public TTBInventGaugeTable parmGaugeRecord(TTBInventGaugeTable _inventGaugeTable)
    {
        inventGaugeTable = _inventGaugeTable;

        return inventGaugeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubClass</Name>
				<Source><![CDATA[
    public TTBRailcarRecordSubclass parmSubClass(TTBRailcarRecordSubclass _subClass)
    {
        subClass = _subClass;

        return subClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProof</Name>
				<Source><![CDATA[
    public TTBProof parmProof(TTBProof _proof)
    {
        proof = _proof;

        return proof;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    public void initValues()
    {
        select firstonly lastRailCarLine
            order by LineNumber desc
            where lastRailCarLine.RailCarTable == railCarTable.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        TTBRailCarLine profitLossline;

        select firstonly JournalNameId
            from profitLossline
                where profitLossline.JournalNameId == InventParameters::find().TTBRCRInTransitInvAdjJournalNameId
                    && profitLossline.RailCarTable == railCarTable.RecId;

        this.initValues();

        if (lastRailCarLine && !profitLossline.JournalNameId)
        {
            this.createGainLoss(lastRailCarLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGainLoss</Name>
				<Source><![CDATA[
    public void createGainLoss(TTBRailCarLine _line)
    {
        Qty                     balanceQty;
        InventQtyJournal        gainLossQty;
        TTBWineGallon           balanceWineGal;
        TTBProofGallon          balanceProofGal;
        TTBWineGALConversion    wineGallonConversion    = TTBWineGALConversion::find(proof);
        UnitOfMeasure           uom                     = UnitOfMeasure::findBySymbol(InventTable::find(_line.ItemId).inventUnitId());        
        InventTable             inventTable             = InventTable::find(_line.ItemId);  
        WHSWorkLine             workLine                = WHSWorkLine::findByRecId(_line.WhSWorkLine);
        
        if (inventTable.TTBAlcoholType() == TTBAlcoholType::PURE)
        {          
            if (workLine.UnitId == TTBUOM)
            {
                balanceQty = inventGaugeTable.TotalWineGallon;
            }
            else if (wineGallonConversion)
            {
                balanceQty  = inventGaugeTable.TotalWineGallon/wineGallonConversion.WineGALEquivalent;
            }            
        }
        else if (inventTable.ggiIsDenatured())
        {
            balanceQty = TTBUtilHelper::convertFromWineGallon(inventGaugeTable.TotalWineGallon, 'lb', inventTable.ItemId);
        }

        if (balanceQty)
        {            
            gainLossQty     = balanceQty - _line.Qty; 
            if (workLine.UnitId == TTBUOM && uom.Symbol == 'lb' && wineGallonConversion.WineGALEquivalent)
            {
                gainLossQty = gainLossQty/wineGallonConversion.WineGALEquivalent;
            }
            gainLossQty     = decRound(gainLossQty, uom.DecimalPrecision);
            balanceWineGal  = inventGaugeTable.TotalWineGallon - _line.WineGallon;
            balanceProofGal = inventGaugeTable.TotalProofGallon - _line.ProofGallon;

            InventJournalId journalId = this.createJournal(_line, gainLossQty);
            this.createGainLossLine(_line, journalId, gainLossQty, balanceWineGal, balanceProofGal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// create a new journal for loss or gain of materials.
    /// </summary>
    /// <param name = "_line">railcarline record</param>
    /// <param name = "_qty">Qty to create adjustment for.</param>
    /// <param name = "_isMovemsnt"> set to uses a inventy movemsnt journal</param>
    /// <returns>Inventory JournalId created </returns>
    protected InventJournalId createJournal(TTBRailCarLine _line, Qty _qty)
    {
        
        InventJournalTrans          inventJournalTrans;
        InventJournalNameId         inventJournalName;
        InventDim                   inventDim;
        InventTable                 inventTable;
        JournalCheckPost            journalCheckPost;

        inventTable = InventTable::find(_line.ItemId);

        ttsbegin;

        inventJournalName = InventParameters::find().TTBRCRInTransitInvAdjJournalNameId;
    
        inventJournalTable.initFromInventJournalName(InventJournalName::find(inventJournalName));
        inventJournalTable.insert();
        //Creation of Inventory Journal Lines
        inventJournalTrans.clear();
        inventJournalTrans.initFromInventJournalTable(inventJournalTable);
        inventJournalTrans.TransDate = systemDateGet();
        inventJournalTrans.ItemId = _line.ItemId;
        inventJournalTrans.initFromInventTable(InventTable::find(_line.ItemId));
        inventJournalTrans.Qty      = _qty;
        inventJournalTrans.UnitQty  = inventJournalTrans.Qty;
        inventJournalTrans.CostAmount = inventJournalTrans.calcCostAmount(_qty);
       
        inventDim = _line.InventDimId? InventDim::find(_line.InventDimId) : TTBUtilHelper::getDimFromWorkLineTrans(workTable.WorkId);
        inventJournalTrans.InventDimId = inventDim.inventDimId;
        inventJournalTrans.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(inventTable.DefaultDimension, inventDim.inventSite().DefaultDimension);

        inventJournalTrans.insert();
        ttscommit;

        //Posting the journal
        journalCheckPost = InventJournalCheckPost::newPostJournal(inventJournalTable);
        journalCheckPost.run();

        return inventJournalTable.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGainLossLine</Name>
				<Source><![CDATA[
    protected LineNum createGainLossLine(TTBRailCarLine _line, InventJournalId _InventJournalId, Qty _gainLossQty, TTBWineGallon _wineGallon, TTBProofGallon _proofGallon)
    {
        TTBRailCarLine profitLossline;
        
        profitLossline.clear();
        profitLossline.railCarTable     = railCarTable.RecId;
        profitLossline.TransDate        = systemDateGet();
        profitLossline.ItemId           = _line.ItemId;
        profitLossline.InventDimId      = _line.inventDimid;
        profitLossline.Qty              = _gainLossQty;
        profitLossline.WineGallon       = _wineGallon;
        profitLossline.ProofGallon      = _proofGallon;
        profitLossline.LineNumber       = _line.LineNumber + 1 ;        
        profitLossline.TransType        = GGIRailcarTransType::InventLossProfit;
        profitLossline.ReferenceId      = inventJournalTable.JournalId;
        profitLossline.JournalNameId    = inventJournalTable.JournalNameId;
        profitLossline.DSPNumber        = inventGaugeTable.DSPNumber;
        profitLossline.InventGaugeId    = inventGaugeTable.InventGaugeId;
       
        profitLossline.insert();
        return profitLossline.LineNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>