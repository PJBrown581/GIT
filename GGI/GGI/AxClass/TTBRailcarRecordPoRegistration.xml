<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBRailcarRecordPoRegistration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TTB008 subclass for railcar/truck offload
/// </summary>
[TTBRailCarRecordAttribute(TTBRailcarRecordSubclass::PoRegistration)]
class TTBRailcarRecordPoRegistration extends TTBRailCarRecord
{
    PurchLine purchLine;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// process data from mobile device
    /// </summary>
    public void run()
    {
        TTBRailCarLine line;
        this.createRailCarTable();
        line = this.createRailCarLines();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize data
    /// </summary>
    public void init()
    {
        super();
        subClassTYtpe = TTBRailcarRecordSubclass::PoRegistration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRailCarLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// init rialcar record line
    /// </summary>
    /// <param name = "_line">railcarline record</param>
    /// <param name = "_workLine">whsWorkLine record</param>
    protected void initRailCarLine(TTBRailCarLine _line, WHSWorkLine _workLine)
    {
        InventDim inventDim;

        super(_line, _workLine);

        _line.QualityOrderStatus = this.qualityOrderStatus(_workLine.ItemId);
     
        // set proof based on purchse line recipved
        purchLine =PurchLine::findInventTransId(_workLine.InventTransId);
        
        _line.Proof = (RailcarTable.Proof != 0)? RailcarTable.Proof : purchLine.TTBProof;  
    
        if (!purchLine)
        {
            _line.Proof = RailcarTable.InventQualityOrderId? RailcarTable.proofFromQO() : RailcarTable.Proof;
        }

        if (InventTable::find(_line.ItemId).TTBAlcoholType() == TTBAlcoholType::PURE)
        {
            if (_workLine.UnitId == TTBUOM)
            {
                _line.WineGallon = _line.Qty;
            }
            else
            {
                _line.WineGallon = TTBWineGalConversion::find(_line.Proof).WineGALEquivalent * _line.Qty;
            }            
        }
        else
        {
            _line.WineGallon = this.convertWGToInventUOM(_line.Qty, _line.ItemId, ModuleInventPurchSales::Invent);
        }        
       
        _line.ProofGallon = (_line.WineGallon * _line.Proof) / 100;

        inventDim = purchLine.inventDim();
        inventDim.wMSLocationId = _workLine.WMSLocationId;
        inventDim = InventDim::findOrCreate(inventDim);

        _line.InventDimId   = inventDim.InventDimId;
        _line.TransType     = GGIRailcarTransType::Purch;
        _line.ReferenceId   = purchLine.PurchId;        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>