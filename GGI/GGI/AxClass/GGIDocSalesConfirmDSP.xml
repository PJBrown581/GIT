<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocSalesConfirmDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Replica of the Docentric Sales Confirmation DSP class.
/// </summary>
class GGIDocSalesConfirmDSP extends DocDataSourceProviderSrsProforma
{
    SalesConfirmContract     reportContract;
    boolean                  transLineAdded, taxLineAdded;
    SalesTable               salesTable;

    /* Variable used for custom placeholders */
    SalesConfirmHeaderTmp    header;

    #define.SalesConfirmHeader('SalesConfirmHeader')
    #define.SalesConfirmLines('SalesConfirmLines')
    #define.SalesConfirmTaxLines('SalesConfirmTaxLines')
    #define.FrtBilled('FrtBilled')
    #define.File('File')
    #define.TandC('TandC')    
    #define.Hyphon (' - ')

   

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns product categorey information.
    /// </summary>
    /// <param name = "_itemId">
    ///     Order line itemid
    /// </param>
    /// <returns>
    ///     Returns product categorey information
    /// </returns>
    String255 getProductCategory(ItemId _itemId)
    {
        EcoResProductCategory   ecoResProductCategory;
        EcoResCategory          ecoResCategory;
        String255               res = '';
        EcoResCategoryDescription categoryDescription;
        RecId                   productRecid;
        EcoResCategoryHierarchyName hierarchyName;

        productRecid = InventTable::find(_itemId).Product;

        while select EcoResProductCategory
            where EcoResProductCategory.Product == productRecid
        {
            select firstonly EcoResCategory
                where EcoResCategory.RecId == EcoResProductCategory.Category;

            hierarchyName = ecoResCategoryHierarchy::find(EcoResProductCategory.CategoryHierarchy).Name;
            categoryDescription = EcoResCategory.Name;

            if (res)
            {
                res += ', ';
            }
            res += hierarchyName + #Hyphon + categoryDescription;
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add data points for the sales confirmation header.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the header.
    /// </param>
    /// <param name = "_header">
    ///     Native record of the header.
    /// </param>
    protected void addDataFieldsForHeader(DocXmlRecord _addingRecord, SalesConfirmHeaderTmp _header)
    {
        void addHeaderFields()
        {
            // Add all fields except the company related fields since we already have them
            // in the GeneralData data section at our disposal.
            _addingRecord.addAllFieldsExcept([
                fieldStr(SalesConfirmHeaderTmp, CompanyName),
                fieldStr(SalesConfirmHeaderTmp, CompanyAddress),
                fieldStr(SalesConfirmHeaderTmp, CompanyPhone),
                fieldStr(SalesConfirmHeaderTmp, CompanyTeleFax),
                fieldStr(SalesConfirmHeaderTmp, CompanyGiro),
                fieldStr(SalesConfirmHeaderTmp, CompanyCoRegNum),
                fieldStr(SalesConfirmHeaderTmp, CompanyLogo),
                fieldStr(SalesConfirmHeaderTmp, CompanyEnterpriseNumber),
                fieldStr(SalesConfirmHeaderTmp, CompanyBankAccountName),
                fieldStr(SalesConfirmHeaderTmp, CompanyBankAccountNum),
                fieldStr(SalesConfirmHeaderTmp, CompanyCommercialRegister),
                fieldStr(SalesConfirmHeaderTmp, CompanyCommercialRegisterInsetNumber),
                fieldStr(SalesConfirmHeaderTmp, CompanyCommercialRegisterSection),
                fieldStr(SalesConfirmHeaderTmp, CompanyEmail),
                fieldStr(SalesConfirmHeaderTmp, CompanyRegNum)
            ]);
        }

        // Rename the record from 'SalesConfirmHeaderTmp' to 'SalesConfirmHeader'.
        _addingRecord.setRecordName(#SalesConfirmHeader);
        // Change the label of the record if needed.
        //_addingRecord.setRecordLabel('Sales confirmation header'); // NOTE: Use literalStr("@LabelID") instead.

        // Add all fields from the SalesConfirmHeaderTmp table.
        addHeaderFields();

        // Add Sales order Customer Id
        _addingRecord.addCalculatedField('CustomerId', salesTable.CustAccount);
        

        // Add Sales order email and Customer primary email.
        _addingRecord.addCalculatedField('OrderEmail', salesTable.Email);
        _addingRecord.addCalculatedField('CustomerEmail', salesTable.customerEmail());


        // Add here all your custom (extension) fields from the SalesConfirmHeaderTmp table, if any.
        // For example:
        //_addingRecord.addField(fieldStr(SalesConfirmHeaderTmp, YourCustomFieldName));


        // Add here additional fields (or records) to the single header record by using the related
        // data to the _header table buffer (SalesConfirmHeaderTmp) or reportContract.
        // For example, get the related CustInvoiceJour record and add additional data you need:
        //CustConfirmJour custConfirmJour = this.custConfirmJour();
        //DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custConfirmJour);
        //jourDataRecord.addField(fieldStr(CustConfirmJour, Payment));
        //jourDataRecord.addDisplayMethod(tableMethodStr(CustConfirmJour, paymentCondition));
        // Or, add the project name:
        //_addingRecord.addCalculatedField('ProjName', SalesTable::find(_header.SalesId).projTable().Name);


        // Add here custom fields, e.g. for the related SalesTable or CustTable.
        // Custom fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        //DocCustomFieldsHelper::addAllCustomFieldsToDataRecord(salesTable, _addingRecord);
        //DocCustomFieldsHelper::addCustomFieldsToDataRecord(['CustomFieldName1', 'CustomFieldName2'], salesTable, _addingRecord);
        //DocCustomFieldsHelper::addCustomFieldToDataRecord('CustomFieldName', salesTable, _addingRecord);


        /***------------------------------------------------------------------------------***/
        /***   QUICK TUTORIAL ON HOW TO ADD ADDITIONAL DATA. PLEASE UNCOMMENT AND TEST.   ***/
        /***------------------------------------------------------------------------------***/
        /*
        // NOTE: salesTable is a global variable initialized in the onSelectedRdpTableRecord() method.
        // (1) Add additional (calculated) field.
        _addingRecord.addCalculatedField('DeliveryPhone', salesTable.deliveryPhone());

        // (2) Add a child (table buffer based) record.
        LogisticsPostalAddress deliveryAddress = salesTable.deliveryAddress();
        DocXmlRecord deliveryAddressDataRecord = _addingRecord.addChildRecord(deliveryAddress);
        // Add all fields from this record.
        // deliveryAddressDataRecord.addAllFields();
        // Or add only particular fields, display methods or field groups.
        deliveryAddressDataRecord.addDisplayMethod(tableMethodStr(LogisticsPostalAddress, isEffective));
        deliveryAddressDataRecord.addField(fieldStr(LogisticsPostalAddress, City));
        deliveryAddressDataRecord.addChildCalculatedRecordFromFieldGroup(tableFieldGroupStr(LogisticsPostalAddress, Timezone));
        deliveryAddressDataRecord.addFieldGroup(tableFieldGroupStr(LogisticsPostalAddress, ContactLookup));

        // (3) Add another child (calculated) record but calculated.
        // Calculated records are not table buffer based so we can add to it only calculated fields.
        DocXmlRecord miscDataRecord = _addingRecord.addChildCalculatedRecord('Misc');
        // Add calculated field.
        ProjTable projTable = ProjTable::find(salesTable.ProjId);
        miscDataRecord.addCalculatedField('ProjName', projTable.Name);
        // Add child (table buffer based) record.
        CustTable custTable = CustTable::find(salesTable.InvoiceAccount);
        DocXmlRecord custTableDataRecord = miscDataRecord.addChildRecord(custTable);
        custTableDataRecord.addFieldGroup(tableFieldGroupStr(CustTable, Delivery));
        custTableDataRecord.addField(fieldStr(CustTable, InvoiceAddress));

        // (4) Add more than one child records, e.g. charges related to the header.
        // Note that the same method can be used for each line as well.
        this.addMarkupTrans(_addingRecord, salesTable);

        // (5) To add additional data from the related journal record, be aware of the proforma scenario, when during report execution
        // the journal record is only temporarily created, the SSRS RDP tables (e.g. SalesConfirmHeaderTmp) get filled, and afterwards
        // the journal record is deleted and is not available at the moment of executing this method, i.e. Docentric DSP class.
        // That's why each of Docentric DSP class for a report supporting the proforma scenario such as Sales Order Confirmation, Sales Invoice, etc.
        // extends the DocDataSourceProviderSrsProforma class, which stores in proforma scenario already deleted journal and journal line records.
        // You can get them by invoking the this.custConfirmJour() and this.custConfirmTrans() methods.
        CustConfirmJour custConfirmJour = this.custConfirmJour();
        DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custConfirmJour);
        jourDataRecord.addField(fieldStr(CustConfirmJour, Payment));
        jourDataRecord.addDisplayMethod(tableMethodStr(CustConfirmJour, paymentCondition));
        */
        
        TTBPermitTable  permitTable = salesTable.ttbPermitTable();   
        GGICustAuthDisclaimerAddressTable  authTable = salesTable.ggiCustAuthTable();
        CustTable custTable = CustTable::find(salesTable.InvoiceAccount);        
        ContactPerson contactPerson = ContactPerson::find(custTable.ContactPersonId);
        TMSSalesTable   tmsSalesTable = TMSSalesTable::find(salesTable.SalesId);
        DocXmlRecord    docPermit = _addingRecord.addChildCalculatedRecord('Permit');
        DocXmlRecord    docAuth = _addingRecord.addChildCalculatedRecord('Authorisation');

        docPermit.addCalculatedFieldFromEdt('Id', extendedTypeStr(TTBPermitId), permitTable.PermitId);
        docPermit.addCalculatedFieldFromEnum('Type', enumStr(TTBPermitType), permitTable.PermitType);
        docPermit.addCalculatedFieldFromEdt('DSPSerialId', extendedTypeStr(TTBApprovalSerialNum), salesTable.TTBDSPApprovalSerialId);
        docPermit.addCalculatedFieldFromEdt('DSPApprovalDate', extendedTypeStr(TTBApprovalDate), salesTable.TTBDSPApprovalDate);
        docPermit.addCalculatedFieldFromEdt('TransferBondShipmentId', extendedTypeStr(TTBTransferBondShipmentId), salesTable.TTBTransferBondShipmentId);
        docPermit.addCalculatedFieldFromEdt('TaxPaidShipmentId', extendedTypeStr(TTBTaxPaidShipmentId), salesTable.TTBTaxPaidShipmentId);

        docAuth.addCalculatedFieldFromEdt('Code', extendedTypeStr(GGIAuthDisclaimerCode), GGIAuthDisclaimerTable::find(authTable.GGIAuthKey).Code);
        docAuth.addCalculatedFieldFromEdt('Number', extendedTypeStr(Num), authTable.Num);

        _addingRecord.AddCalculatedFieldFromEdt('SoldToName', extendedTypeStr(LogisticsAddressing), salesTable.SalesName);
        _addingRecord.AddCalculatedFieldFromEdt('SoldToAddress', extendedTypeStr(LogisticsAddressing), custTable.address());
        _addingRecord.AddCalculatedFieldFromEdt('ShipToName', extendedTypeStr(LogisticsAddressing), salesTable.DeliveryName);
        _addingRecord.AddCalculatedFieldFromEdt('ShipToAddress', extendedTypeStr(LogisticsAddressing), salesTable.deliveryAddressing());        
        _addingRecord.AddCalculatedFieldFromEdt('ExciseTaxAmount', extendedTypeStr(LineAmount), GGI_ExciseTaxManager::GetExciseTaxAmount(salesTable.SalesId));
        _addingRecord.AddCalculatedFieldFromEdt('OrderDate', extendedTypeStr(CreationDate), salesTable.createDate());
        _addingRecord.AddCalculatedFieldFromEdt('FreightCarrier', extendedTypeStr(ShipCarrierAccountCode), tmsSalesTable.carriercode);
        _addingRecord.AddCalculatedFieldFromEdt('DlvTerm', extendedTypeStr(ShipCarrierAccountCode), salesTable.DlvTerm);
        _addingRecord.addCalculatedField('SalesDistrict', custTable.SalesDistrictId);
        _addingRecord.addCalculatedField('PrimaryContact', contactPerson.personName());
        _addingRecord.addCalculatedField('ContactInfoEmail', salesTable.Email);
        _addingRecord.addCalculatedField('ContactInfoURL', salesTable.URL);
        _addingRecord.addCalculatedField('TermsAndConditionsURL', 'https://greenfield.com/wp-content/uploads/2020/12/vE.-US-PO-Terms-and-Conditions-07Dec2020.pdf');
        
        DocXmlRecord subDocumentsDataRecord = _addingRecord.addChildCalculatedRecord('Subdocuments');
        DocuRef docuRef;

        while select docuRef  where
            docuRef.TypeId == #File &&
                docuRef.CategoryId_DC == #TandC &&
                docuRef.Restriction == docuRestriction::External
        {
            using (System.IO.Stream docuRefStream = DocumentManagement::getAttachmentStream(docuRef))
            {
                using (System.IO.MemoryStream subdocMs = new System.IO.MemoryStream())
                {
                    docuRefStream.CopyTo(subdocMs);
                    subDocumentsDataRecord.addCalculatedField(docuRef.Name,
                        DocGlobalHelper::convertMemoryStreamToContainer(subdocMs));
                }
            }
        }

        this.addMarkupTrans(_addingRecord, salesTable);

       
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the markup transaction data points.
    /// </summary>
    /// <param name = "_dataRecord">
    ///     Docentric record to contain the markup transactions data points.
    /// </param>
    /// <param name = "_tableRecord">
    ///     A buffer to get the corresponding markup transactions from.
    /// </param>
    protected void addMarkupTrans(DocXmlRecord _dataRecord, Common _tableRecord)
    {
        void addMarkupTransDataRecord(MarkupTrans _markupTrans)
        {
            DocXmlRecord markupTransDataRecord = _dataRecord.addChildRecord(_markupTrans);
            markupTransDataRecord.addField(fieldStr(MarkupTrans, LineNum));

            markupTransDataRecord.addField(fieldStr(MarkupTrans, MarkupCode));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, Txt));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, Value));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, CurrencyCode));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, TaxGroup));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, TaxItemGroup));
        }

        MarkupTrans markupTrans;
        boolean markupTransDataRecordAdded = false;

        while select markupTrans
              where markupTrans.TransRecId == _tableRecord.RecId &&
                    markupTrans.TransTableId == _tableRecord.TableId &&
                    !markupTrans.IsDeleted
        {
            addMarkupTransDataRecord(markupTrans);
            markupTransDataRecordAdded = true;
        }

        // Add an empty record but only at design time, if no markup record exists.
        if (!this.isRuntime() && !markupTransDataRecordAdded)
        {
            markupTrans.clear();
            addMarkupTransDataRecord(markupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the data points for the sales confirmation line.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the sales confirmation line data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     A buffer containing the details of the sales confirmation line.
    /// </param>
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, SalesConfirmDetailsTmp _currentLine)
    {
        if (_currentLine.ConfirmTransOrTax)
        {
            this.addDataFieldsForLine_Trans(_addingRecord, _currentLine);
            transLineAdded = true;
        }
        else
        {
            this.addDataFieldsForLine_Tax(_addingRecord, _currentLine);
            taxLineAdded = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Tax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the tax related data points for the sales confirmation line.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the tax data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     A buffer containing the details of the sales confirmation line.
    /// </param>
    protected void addDataFieldsForLine_Tax(DocXmlRecord _addingRecord, SalesConfirmDetailsTmp _currentLine)
    {
        // Rename the record from 'SalesConfirmDetailsTmp' to 'SalesConfirmTaxLines'.
        _addingRecord.setRecordName(#SalesConfirmTaxLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Taxes'); // NOTE: use literalStr("@LabelID") instead.

        // Add all fields related to the tax lines.
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxCode));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, PrintCode));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxBaseAmount));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxBaseQty));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxAmount));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxAmountMST));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxExemptDescription));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, TaxBaseAmountMST));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, Amount));
        _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, CashDiscAmount));

        //-- Redundant fields.
        //_addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, ConfirmTransOrTax));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine_Trans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the data points for the sales confirmation transaction line.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the sales confirmation transaction line data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     A buffer containing the details of the sales confirmation line.
    /// </param>
    protected void addDataFieldsForLine_Trans(DocXmlRecord _addingRecord, SalesConfirmDetailsTmp _currentLine)
    {
        void addLineFields()
        {
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, CurrencyCode));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, DiscAmount));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, DiscPercent));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, DlvDate));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, ExternalItemId));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, InventDimPrint));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, InventDimProduct));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, ItemId));
            _addingRecord.addCalculatedField('LegacyItemId', InventTable::find(_currentLine.ItemId).GGINAVLegacyItemId);             
            _addingRecord.addCalculatedField('ProductCategory', this.getProductCategory(_currentLine.ItemId), 'Product Categories');
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, LineAmount));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, LineHeader));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, Name));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, Notes));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, PdsCWQty));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, PdsCWUnitId));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, PrintCode));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, Qty));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, SalesPrice));
            _addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, SalesUnitTxt));

            //-- Redundant fields.
            //_addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, JournalRecId));
            //_addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, ConfirmTransOrTax));
        }


        // Rename the record from 'SalesConfirmDetailsTmp' to 'SalesConfirmLines'.
        _addingRecord.setRecordName(#SalesConfirmLines);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Sales confirm lines'); // NOTE: use literalStr("@LabelID") instead.

        // Add all fields from the SalesConfirmDetailsTmp table related to the transaction data.
        addLineFields();


        // Add here all your custom (extension) fields from the SalesConfirmDetailsTmp table, if any.
        // For example:
        //_addingRecord.addField(fieldStr(SalesConfirmDetailsTmp, YourCustomFieldName));

        // Add here additional fields from the related CustConfirmTrans table (or some other tables).
        //CustConfirmTrans custConfirmTrans = this.custConfirmTrans(_currentLine.CustConfirmTrans);
        //_addingRecord.addCalculatedField('LineNum', custConfirmTrans.LineNum);
        //_addingRecord.addCalculatedField('OrigSalesId', custConfirmTrans.OrigSalesId);
        // You can also add charges for the corresponding salesLine.
        //SalesLine salesLine = custConfirmTrans.salesLine();
        //this.addMarkupTrans(_addingRecord, salesLine);

        SalesLine   salesLine = CustConfirmTrans::findRecId(_currentLine.CustConfirmTrans).salesLine();

        DocXmlRecord    docPermit = _addingRecord.addChildCalculatedRecord('Permit');

        docPermit.addCalculatedFieldFromEdt('WineGallon', extendedTypeStr(TTBWineGallon), salesLine.TTBWineGallon);
        docPermit.addCalculatedFieldFromEdt('ProofGallon', extendedTypeStr(TTBProofGallon), salesLine.TTBProofGallon);

        //<FS> [implementor] By=”JCP” Spec=”BUG 8448” Date=”07.06.2021”
        _addingRecord.addCalculatedField('SiteName', InventSite::find(InventDim::find(salesLine.InventDimId ).InventSiteId).Name);

        _addingRecord.addCalculatedField('ProductName', InventTable::find(salesLine.ItemId).productName(companyinfo::languageId() ));
        //</FS>
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for the RDP data source.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the data points.
    /// </param>
    /// <param name = "_rdpTableRecord">
    ///     RDP data source.
    /// </param>
    /// <param name = "_rdpTableName">
    ///     RDP data source name.
    /// </param>
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(SalesConfirmHeaderTmp))
        {
            this.addDataFieldsForHeader(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(SalesConfirmDetailsTmp))
        {
            this.addDataFieldsForLine(_addingRecord, _rdpTableRecord);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Class description.
    /// </summary>
    /// <returns>
    ///     The class description.
    /// </returns>
    public ClassDescription description()
    {
        return 'Sales Confirm DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a prefix for a proforma sales confirmation.
    /// </summary>
    /// <returns>
    ///     The prefix for a proforma sales confirmation.
    /// </returns>
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_SalesConfirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custConfirmJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding sales confirmation journal.
    /// </summary>
    /// <returns>
    ///     The corresponding sales confirmation journal.
    /// </returns>
    protected CustConfirmJour custConfirmJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = CustConfirmJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custConfirmTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a sales confirmation journal line record based on the specified record ID.
    /// </summary>
    /// <param name = "_custConfirmTransRecId">
    ///     Record ID of a sales confirmation journal line.
    /// </param>
    /// <returns>
    ///     A sales confirmation journal line record; otherwise, an empty buffer.
    /// </returns>
    protected CustConfirmTrans custConfirmTrans(RecId _custConfirmTransRecId)
    {
        CustConfirmTrans custConfirmTrans;

        if (this.isProforma())
        {
            custConfirmTrans = this.getProformaTransLine(_custConfirmTransRecId);
        }
        else
        {
            custConfirmTrans = CustConfirmTrans::findRecId(_custConfirmTransRecId);
        }

        return custConfirmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the XML data source(s).
    /// </summary>
    /// <param name = "_recordBuilder">
    ///     A record builder cursor.
    /// </param>
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        DocXmlRecord                emptyLineDataRecord;
        SalesConfirmDetailsTmp      emptyLine;


        // Add the single data record representing the header and add multiple records representing the lines.
        super(_recordBuilder);

        // If this is design time, add main or tax lines if they haven't been already added.
        _recordBuilder.goToTopRecord();
        if (!this.isRuntime())
        {
            emptyLine.clear();

            // Main lines.
            if (!transLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Trans(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }

            // TaxLines.
            if (!taxLineAdded)
            {
                emptyLineDataRecord = _recordBuilder.addRecord(emptyLine);
                this.addDataFieldsForLine_Tax(emptyLineDataRecord, emptyLine);
                _recordBuilder.goToTopRecord();
            }
        }

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialization method called before the Docentric data source(s) is generated.
    /// </summary>
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        reportContract = this.getSrsRdpContract();

        transLineAdded = false;
        taxLineAdded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.SalesId('SalesId')
    #define.CustAccount('CustAccount')
    #define.CustName('CustName')
    #define.CustContactName('CustContactName')
    #define.CustRef('CustRef')
    #define.DeliveryName('DeliveryName')
    #define.ConfirmDate('ConfirmDate')
    #define.ConfirmDocNum('ConfirmDocNum')
    #define.SalesTakerName('SalesTakerName')
    #define.SalesTakerImage('SalesTakerImage')
    #define.OrderEmail('OrderEmail')

    /// <summary>
    ///     Overrides the default report settings.
    /// </summary>
    /// <param name = "_reportRunContext">
    ///     The context of the report session.
    /// </param>
    /// <param name = "_replaceStandardPlaceholders">
    ///     Determines whether to replace the standard placeholders. Optional.
    /// </param>
    /// <returns>
    ///     The place holder manager.
    /// </returns>
    [DocPlaceholderAttribute(#SalesId, 'SO - Sales ID'),
     DocPlaceholderAttribute(#CustAccount, 'SO - Customer Account ID'),
     DocPlaceholderAttribute(#CustName, 'SO - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'SO - Contact Name'),
     DocPlaceholderAttribute(#CustRef, 'SO - Customer Reference'),
     DocPlaceholderAttribute(#DeliveryName, 'SO - Delivery Name'),
     DocPlaceholderAttribute(#ConfirmDate, 'SO - Confirm Date'),
     DocPlaceholderAttribute(#ConfirmDocNum, 'SO - Confirm Document Number'),
     DocPlaceholderAttribute(#SalesTakerName, 'SO - Sales Taker Name'),
     DocPlaceholderImageAttribute(#SalesTakerImage, 'SO - Sales Taker Picture', 80, 80),
     DocPlaceholderAttribute(#OrderEmail, 'SO - Sales Order Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding salesTable. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(salesTable);

        // Replace standard placeholders.        
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
               
        // Replace custom placeholders:
        // -- Placeholder @SalesId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesId, salesTable.SalesId);
        
        // -- Placeholder @CustAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustAccount, salesTable.CustAccount);

        // -- Placeholder @CustRef@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#CustRef, header.CustomerRef);

        // -- Placeholder @DeliveryName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DeliveryName, header.DeliveryName);

        // -- Placeholder @ConfirmDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ConfirmDate, header.ConfirmDate);

        // -- Placeholder @ConfirmDocNum@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#ConfirmDocNum, header.ConfirmDocNum);

        // -- Placeholder @SalesTakerName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesTakerName, HcmWorker::find(this.custConfirmJour().WorkerSalesTaker).name());

        // -- Placeholder @OrderEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderEmail, salesTable.Email);

        // For the @CustName@ and @CustContactName@ placeholders first check if they are used
        // in the Email print destination, if it is the currently selected print destination.
        // NOTE: Remove this condition if it's not true:
        if (_reportRunContext.parmPrintDestination() == DocPrintDestination::Email)
        {
            // -- Placeholder @CustName@
            DirPartyTable partyTable;
            CustTable custTable;
            select firstonly Name from partyTable exists join custTable
            where custTable.Party == partyTable.RecId && custTable.AccountNum == salesTable.CustAccount;
            str customerName = partyTable.Name;
            placeholderMng.replacePlaceholderInCurrentPrintDest(#CustName, customerName);

            // -- Placeholder @CustContactName@
            if (DocPlaceholderManager::findPlaceholder(_reportRunContext.emailPrintDestSettings().parmEmailBody(), #CustContactName))
            {
                str custContactPersonName = ContactPerson::name(salesTable.ContactPersonId);
                if (!custContactPersonName)
                {
                    custContactPersonName = "@GGI:SirMadam";
                }
                _reportRunContext.emailPrintDestSettings().parmEmailBody(
                    placeholderMng.replacePlaceholderInText(_reportRunContext.emailPrintDestSettings().parmEmailBody(), #CustContactName, custContactPersonName)
                    );
            }

            /*** Replace a custom placeholder image ***/
            // -- Placeholder @SalesTakerImage@
            if (DocPlaceholderManager::findPlaceholder(_reportRunContext.emailPrintDestSettings().parmEmailBody(), #SalesTakerImage))
            {
                HcmWorker worker = HcmWorker::find(this.custConfirmJour().WorkerSalesTaker);
                if (worker)
                {
                    Bitmap workerImage = worker.personImageOrNull_DC();
                    if (workerImage)
                    {
                        placeholderMng.replacePlaceholderImage(#SalesTakerImage, workerImage);
                    }
                }
            }
        }

        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(salesTable.CustAccount);
        _reportRunContext.archiveContract().setSalesId(salesTable.SalesId);
        _reportRunContext.archiveContract().setDocument(header.ConfirmDocNum, header.ConfirmDate);
        _reportRunContext.archiveContract().setJournal(this.custConfirmJour().RecId, DocJournalType::CustConfirmJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Called when an RDP data source is selected.
    /// </summary>
    /// <param name = "_rdpTableRecord">
    ///     RDP data source.
    /// </param>
    /// <param name = "_rdpTableName">
    ///     RDP data source name.
    /// </param>
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(SalesConfirmHeaderTmp))
        {
            // Store data used for custom placeholders.
            header = _rdpTableRecord.data();
            salesTable = SalesTable::find(header.SalesId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveReportAttachmentRecord</Name>
				<Source><![CDATA[
    //CR_17859_Allow_email_SDS_attach_sales_order_confim
    //Allow SDS product datasheets to be sent to customers when cusotomer records selected on Docentric email attach option
    protected Common resolveReportAttachmentRecord(DocReportRunContext _reportRunContext, DocReportAttachmentRule _currentAttachmentRule)
    {
        // If a _currentAttachmentRule is CustomRecords we need to select and return a PdsMRCDocument table buffer
        if (_currentAttachmentRule.parmLoadFrom() == DocReportAttachmentLoadFrom::CustomRecords)
        {
            PdsMRCDocument pdsMRCDoc;
            SalesLine salesLineLocal;

            select pdsMRCDoc
            where pdsMRCDoc.Active == NoYes::Yes && pdsMRCDoc.EffectiveDate <= today() && pdsMRCDoc.ExpiryDate >= today()
            exists join salesLineLocal where salesLineLocal.ItemId == pdsMRCDoc.ItemId && salesLineLocal.SalesId == salesTable.SalesId;
        
            return pdsMRCDoc;
        }
        else
        {
            return super(_reportRunContext, _currentAttachmentRule);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>