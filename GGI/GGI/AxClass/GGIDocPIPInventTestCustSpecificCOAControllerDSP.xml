<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocPIPInventTestCustSpecificCOAControllerDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GGIDocPIPInventTestCustSpecificCOAControllerDSP extends DocDataSourceProviderSrsReporting
{
    PIPInventTestCustSpecificCOATmp inventTestCustSpecificCOATmp;

    const str CofA = "CofA";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Class description.
    /// </summary>
    /// <returns>
    ///     The class description.
    /// </returns>
    public ClassDescription description()
    {
        return "@GGI:CertificateOfAnalysisDSP";
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for the RDP data source.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the data points.
    /// </param>
    /// <param name = "_rdpTableRecord">
    ///     RDP data source.
    /// </param>
    /// <param name = "_rdpTableName">
    ///     RDP data source name.
    /// </param>
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        InventTestTable inventTestTable;
        UnitOfMeasure   UnitOfMeasure;
        GGILoadIdCOAHelper  ggiLoadIDCOAHelper;
        real            testResultDecimal;
        str             testResultDecimalStrLength, testResultDecimalStrOriginal, testResultDecimalStrFinal, strDecimalsAdd;
        int             strFound = 0, strFound2 = 0, strFound3 = 0, decLength, decLengthAdd;

        if (_rdpTableName == tableStr(PIPInventTestCustSpecificCOATmp))
        {
            PIPInventTestCustSpecificCOATmp inventTestCertOfAnalysisTmp = _rdpTableRecord;
            inventTestTable = inventTestTable::find(InventTestCertOfAnalysisTmp.TestId);

            inventTestCustSpecificCOATmp = _rdpTableRecord;

            select firstonly ggiLoadIdCOAHelper
                where ggiLoadIdCOAHelper.QualityOrderId == inventTestCustSpecificCOATmp.QualityOrderId
                    && ggiLoadIdCOAHelper.InventCertificateOfAnalysisId == inventTestCustSpecificCOATmp.InventCertificateOfAnalysisId;

            if (inventTestTable)
            {
                UnitOfMeasure = UnitOfMeasure::findBySymbol(inventTestTable.TestUnitId);
                testResultDecimalStrOriginal = any2Str(InventTestCertOfAnalysisTmp.TestResultValueReal);
                testResultDecimalStrLength = subStr(testResultDecimalStrOriginal, 1, strFind(testResultDecimalStrOriginal, '.', 1, strLen(testResultDecimalStrOriginal)));
                strFound2 = strscan(testResultDecimalStrLength,'.',strFound,strlen(testResultDecimalStrLength));
                //Bug 8535 produce informations -----------------------------------------------------------------------------------------------
                // get batch number
                InventQualityOrderTable  inventQualityOrderTable = InventQualityOrderTable::find(inventTestCertOfAnalysisTmp.QualityOrderId);

                // get attribute of bacth number
                PdsBatchAttributes  PdsBatchAttributes;
                InventBatchId       InventBatchId =  inventQualityOrderTable.inventDim().inventBatchId;
                const str producer = '*PROD';
                
                select firstonly pdsBatchAttributes
                    where  pdsBatchAttributes.ItemId            == inventQualityOrderTable.itemId
                        && pdsBatchAttributes.InventBatchId     == InventBatchId
                        && pdsBatchAttributes.PdsBatchAttribId  like producer;

                // get custom outcome variables
                InventTestVariableOutcome   InventTestVariableOutcome;
                select firstonly * from InventTestVariableOutcome
                        where InventTestVariableOutcome.VariableOutcomeId == pdsBatchAttributes.PdsBatchAttribValue;

                if(InventTestVariableOutcome)
                { 
                    _addingRecord.addCalculatedField('DESCRIPTIONEXTENDED_CUSTOM',this.ProducerAddress(InventTestVariableOutcome), 'Address of producer.'  ); //address
                    _addingRecord.addCalculatedField('COUNTRYOFORIGIN_CUSTOM',this.ProducerCountryofOrigin(InventTestVariableOutcome),'country of origin.'); // country of orgin
                    _addingRecord.addCalculatedField('ProducerName',InventTestVariableOutcome.Description); //producer name
                }
                //-- end bug 8535--------------------------------------------------------------------------------------------------------------------

                //CR005B - Add additional fields from quality test to CoA
                _addingRecord.addCalculatedField('Monograph',inventTestTable.GGIMonograph);
                _addingRecord.addCalculatedField('Specifications',inventTestTable.GGISpecifications);

                if (UnitOfMeasure.DecimalPrecision == 0 && UnitOfMeasure.RecId != 0)
                {
                    strFound = strscan(testResultDecimalStrLength,'.',strFound,strlen(testResultDecimalStrLength));

                    if (strFound != 0)
                    {
                        testResultDecimalStrFinal = strRem(testResultDecimalStrLength,'.');
                    }
                    else
                    {
                        testResultDecimalStrFinal = testResultDecimalStrOriginal;
                    }
                
                    _addingRecord.addCalculatedField('TestResultValueDecimalPrecision1',testResultDecimalStrFinal);
                    testResultDecimalStrFinal = '';
                }
                else if (UnitOfMeasure.RecId != 0 && UnitOfMeasure.DecimalPrecision != 0)
                {
                    testResultDecimal = decRound(InventTestCertOfAnalysisTmp.TestResultValueReal, UnitOfMeasure.DecimalPrecision);
                    testResultDecimalStrFinal = substr(any2Str(testResultDecimal),0,UnitOfMeasure.DecimalPrecision + strLen(testResultDecimalStrLength));
                    strFound = strscan(testResultDecimalStrFinal,'.',strFound,strlen(testResultDecimalStrFinal));
                    strFound3 = strFind(testResultDecimalStrFinal,'.',1,strlen(testResultDecimalStrFinal));

                    if (strFound != 0)
                    {
                        decLength = strLen(testResultDecimalStrFinal) - strLen(testResultDecimalStrLength);

                        if (decLength == UnitOfMeasure.DecimalPrecision)
                        {
                            _addingRecord.addCalculatedField('TestResultValueDecimalPrecision1',testResultDecimalStrFinal);
                        }
                        else
                        {
                            decLengthAdd = UnitOfMeasure.DecimalPrecision - decLength;

                            switch (decLengthAdd)
                            {
                                case 1:
                                    strDecimalsAdd = '0';
                                    break;
                                case 2:
                                    strDecimalsAdd = '00';
                                    break;
                                case 3:
                                    strDecimalsAdd = '000';
                                    break;
                                case 4:
                                    strDecimalsAdd = '0000';
                                    break;
                                default:
                                    strDecimalsAdd = '';
                                    break;
                            }
                            
                            testResultDecimalStrFinal = testResultDecimalStrFinal + strDecimalsAdd;
                            _addingRecord.addCalculatedField('TestResultValueDecimalPrecision1',testResultDecimalStrFinal);
                        }
                    }
                    else if (InventTestCertOfAnalysisTmp.TestResultResult)
                    {
                        switch (UnitOfMeasure.DecimalPrecision)
                        {
                            case 1:
                                strDecimalsAdd = '.0';
                                break;
                            case 2:
                                strDecimalsAdd = '.00';
                                break;
                            case 3:
                                strDecimalsAdd = '.000';
                                break;
                            case 4:
                                strDecimalsAdd = '.0000';
                                break;
                            default:
                                strDecimalsAdd = '';
                                break;
                        }
                                        
                        testResultDecimalStrFinal = testResultDecimalStrFinal + strDecimalsAdd;
                        _addingRecord.addCalculatedField('TestResultValueDecimalPrecision1',testResultDecimalStrFinal);
                    }
                    testResultDecimalStrFinal = '';
                }
                else if (UnitOfMeasure.RecId == 0  && testResultDecimalStrOriginal != "")
                {
                    _addingRecord.addCalculatedField('TestResultValueDecimalPrecision1',testResultDecimalStrOriginal);
                }
            }

            InventTestCertOfAnalysisTable   coaTable = InventTestCertOfAnalysisTable::find(inventTestCertOfAnalysisTmp.InventCertificateOfAnalysisId);

            this.addBatchAttribute(_addingRecord, coaTable);
            this.addProductInformation(_addingRecord, coaTable);
            this.addSignature(_addingRecord, coaTable);
            
            // Adding recipient email
            _addingRecord.addCalculatedField('GGICofARecipientEmail',this.ggiGetRecipientEmail(SalesTable::find(coaTable.SalesId)));

            GGICertificateOfAnalysisManager coaManager = GGICertificateOfAnalysisManager::newId(coaTable.InventCertificateOfAnalysisId);

            this.addBatchOrder(_addingRecord, coaManager);
            this.addQualityOrder(_addingRecord, coaManager);
            this.addLoadSalesOrder(_addingRecord, ggiLoadIdCOAHelper);


            /*
            Adding batch qty
            */
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDim inventDim;
            SalesLine batchSalesLine;
            //InventTestCertOfAnalysisTable coaTableLocal = InventTestCertOfAnalysisTable::find(_ggiLoadIdCOAHelper.InventCertificateOfAnalysisId);

            InventQualityOrderTable  inventQualityOrderTable = InventQualityOrderTable::find(inventTestCertOfAnalysisTmp.QualityOrderId);
            /*
            Def. not ideal way to get sales line...
            */
            select firstonly batchSalesLine
            where batchSalesLine.SalesId == coaTable.SalesId
                && batchSalesLine.ItemId == inventQualityOrderTable.itemId;
            
            InventBatchId batchId = inventQualityOrderTable.inventDim().inventBatchId;
            
            select sum(Qty)
                from inventTrans
                join inventTransOrigin
                join inventDim
                    group by inventDim.InventBatchId
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                            /*&& (inventTrans.StatusIssue == StatusIssue::Picked
                            || inventTrans.StatusIssue == StatusIssue::Sold
                            || inventTrans.StatusIssue == StatusIssue::Deducted)*/
                            && inventTransOrigin.ReferenceId == batchSalesLine.SalesId
                            && inventDim.InventDimId == inventTrans.InventDimId
                            && inventDim.inventBatchId == batchId;

            Qty batchQty = abs(inventTrans.Qty);
            _addingRecord.addCalculatedField('GGIBatchQty',batchQty);
            _addingRecord.addCalculatedField('GGICustomerRequisition',batchSalesLine.salestable().PurchOrderFormNum);

        }
        
        super(_addingRecord, _rdpTableRecord, _rdpTableName);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated inherited batch attributes, if any.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the inherited batch attributes.
    /// </param>
    /// <param name = "_coaTable">
    ///     The certificate of analysis record.
    /// </param>
    private void addBatchAttribute(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTable _coaTable)
    {
        InventTestTable             inventTestTable;
        DocXmlRecord                docInventTestTable;
        DocXmlRecord                docInventTestTableProducer;
        UnitOfMeasure               UnitOfMeasure;
        boolean                     isProducerTest;
        InventTestVariable          testVariable;
        InventTestVariableOutcome   testVariableOutcome;
        DocXmlRecord                docTestVariableOutcome;
        PdsBatchAttributes          batchAttribute;
        PdsBatchAttribByItem        batchAttribByItem;

        str             testResultDecimalStrLength, testResultDecimalStrOriginal, testResultDecimalStrFinal, strDecimalsAdd;
        int             strFound = 0, strFound2 = 0, strFound3 = 0, decLength, decLengthAdd;

        InventBatch         inventBatch     = InventBatch::find(InventDim::find(_coaTable.InventDimId).inventBatchId, _coaTable.ItemId);
        
        DocXmlRecord    docInventBatch = _addingRecord.addChildRecord(inventBatch);

        docInventBatch.addField(fieldStr(InventBatch, inventBatchId));
        docInventBatch.addField(fieldStr(InventBatch, prodDate));
        docInventBatch.addField(fieldStr(InventBatch, expDate));

        while select batchAttribute
                join GGIAttibuteSequence from batchAttribByItem
                order by GGIAttibuteSequence
                where batchAttribByItem.PdsBatchAttribRelation == batchAttribute.PdsBatchAttribId
                    && batchAttribByItem.PdsBatchAttribCode == TableGroupAll::Table
                    && batchAttribByItem.PdsBatchAttribItemId == batchAttribute.ItemId
                    && batchAttribute.ItemId == _coaTable.ItemId
                    && batchAttribute.InventBatchId == inventBatch.inventBatchId
        {
            isProducerTest = false;

            inventTestTable = InventTestTable::find(batchAttribute.PdsBatchAttribId);

            if(strContains(inventTestTable.Description,"Producer"))
            {
                docInventTestTableProducer = _addingRecord.addChildRecord(inventTestTable,"Producer");
                docInventTestTableProducer.addAllFields();
                isProducerTest = true;
            }
            else
            {
                DocXmlRecord docBatchAttribute = docInventBatch.addChildRecord(batchAttribute);

                docBatchAttribute.addField(fieldStr(PdsBatchAttributes, PdsBatchAttribId));
                docBatchAttribute.addDisplayMethod(tableMethodStr(PdsBatchAttributes, pdsBatchAttribMin));
                docBatchAttribute.addDisplayMethod(tableMethodStr(PdsBatchAttributes, pdsBatchAttribMax));
                docBatchAttribute.addDisplayMethod(tableMethodStr(PdsBatchAttributes, pdsBatchAttribTarget));
                docBatchAttribute.addDisplayMethod(tableMethodStr(PdsBatchAttributes, getBatchAttribValue));

                docInventTestTable = docBatchAttribute.addChildRecord(inventTestTable);
                docInventTestTable.addAllFields();
                docInventTestTable.addCalculatedField('TestAttributeSequence', batchAttribByItem.GGIAttibuteSequence);
            }
                        
            if (inventTestTable)
            {

                select firstonly testVariableOutcome
                    exists join testVariable where testVariable.VariableId == testVariableOutcome.VariableId
                        && testVariable.VariableId == batchAttribute.PdsBatchAttribId
                        && testVariableOutcome.VariableOutcomeId == batchAttribute.getBatchAttribValue();

                if(testVariableOutcome && isProducerTest)
                {
                    docTestVariableOutcome = docInventTestTableProducer.addChildRecord(testVariableOutcome);
                    docTestVariableOutcome.addAllFields();
                }


                UnitOfMeasure = UnitOfMeasure::findBySymbol(inventTestTable.TestUnitId);
                testResultDecimalStrOriginal = any2Str(batchAttribute.getBatchAttribValue());
                testResultDecimalStrLength = subStr(testResultDecimalStrOriginal, 1, strFind(testResultDecimalStrOriginal, '.', 1, strLen(testResultDecimalStrOriginal)));
                strFound2 = strscan(testResultDecimalStrLength,'.',strFound,strlen(testResultDecimalStrLength));

                //CR005B - Add additional fields from quality test to CoA
                if(isProducerTest)
                {
                    docInventTestTableProducer.addCalculatedField('Monograph',inventTestTable.GGIMonograph);
                    docInventTestTableProducer.addCalculatedField('Specifications',inventTestTable.GGISpecifications);
                }
                else
                {
                    docInventTestTable.addCalculatedField('Monograph',inventTestTable.GGIMonograph);
                    docInventTestTable.addCalculatedField('Specifications',inventTestTable.GGISpecifications);
                }

                if (UnitOfMeasure.DecimalPrecision == 0 && UnitOfMeasure.RecId != 0)
                {
                    strFound = strscan(testResultDecimalStrLength,'.',strFound,strlen(testResultDecimalStrLength));

                    if (strFound != 0)
                    {
                        testResultDecimalStrFinal = strRem(testResultDecimalStrLength,'.');
                    }
                    else
                    {
                        testResultDecimalStrFinal = testResultDecimalStrOriginal;
                    }

                    if(isProducerTest)
                    {
                        docInventTestTableProducer.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                    }
                    else
                    {
                        docInventTestTable.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                    }
                    testResultDecimalStrFinal = '';
                }
                else if (UnitOfMeasure.RecId != 0  && UnitOfMeasure.DecimalPrecision != 0)
                {
                    testResultDecimalStrFinal = substr(batchAttribute.getBatchAttribValue(),0,UnitOfMeasure.DecimalPrecision + strLen(testResultDecimalStrLength));
                    strFound = strscan(testResultDecimalStrFinal,'.',strFound,strlen(testResultDecimalStrFinal));
                    strFound3 = strFind(testResultDecimalStrFinal,'.',1,strlen(testResultDecimalStrFinal));

                    if (strFound != 0 || strFound3 != 0)
                    {
                        decLength = strLen(testResultDecimalStrFinal) - strLen(testResultDecimalStrLength);

                        if (decLength == UnitOfMeasure.DecimalPrecision)
                        {
                            if(isProducerTest)
                            {
                                docInventTestTableProducer.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                            }
                            else
                            {
                                docInventTestTable.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                            }
                        }
                        else
                        {
                            decLengthAdd = UnitOfMeasure.DecimalPrecision - decLength;

                            switch (decLengthAdd)
                            {
                                case 1:
                                    strDecimalsAdd = '0';
                                    break;
                                case 2:
                                    strDecimalsAdd = '00';
                                    break;
                                case 3:
                                    strDecimalsAdd = '000';
                                    break;
                                case 4:
                                    strDecimalsAdd = '0000';
                                    break;
                                default:
                                    strDecimalsAdd = '';
                                    break;
                            }
                            
                            testResultDecimalStrFinal = testResultDecimalStrFinal + strDecimalsAdd;
                            if(isProducerTest)
                            {
                                docInventTestTableProducer.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                            }
                            else
                            {
                                docInventTestTable.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                            }
                        }
                    }
                    else if (inventTestCustSpecificCOATmp.TestResultResult)
                    {
                        switch (UnitOfMeasure.DecimalPrecision)
                        {
                            case 1:
                                strDecimalsAdd = '.0';
                                break;
                            case 2:
                                strDecimalsAdd = '.00';
                                break;
                            case 3:
                                strDecimalsAdd = '.000';
                                break;
                            case 4:
                                strDecimalsAdd = '.0000';
                                break;
                            default:
                                strDecimalsAdd = '';
                                break;
                        }
                                        
                        testResultDecimalStrFinal = testResultDecimalStrFinal + strDecimalsAdd;

                        if(isProducerTest)
                        {
                            docInventTestTableProducer.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                        }
                        else
                        {
                            docInventTestTable.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                        }
                    }
                    testResultDecimalStrFinal = '';
                }
                else if (UnitOfMeasure.RecId == 0 && testResultDecimalStrOriginal != "")
                {
                    if(isProducerTest)
                    {
                        docInventTestTableProducer.addCalculatedField('TestResultValueDecimalPrecision', testResultDecimalStrOriginal);
                    }
                    else
                    {
                        docInventTestTable.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrOriginal);
                    }
                    
                }
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add product information to the record.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the inherited batch attributes.
    /// </param>
    /// <param name = "_coaTable">
    ///     The certificate of analysis record.
    /// </param>
    private void addProductInformation(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTable _coaTable)
    {
        CustVendExternalItem    custVendExternalItem;
        GGIDocuManager          docuManager;
        DocuRef                 docuRef;
        DocXmlRecord            docInventTableNotes;

        GGIProductManager   productManager  = GGIProductManager::newItemId(_coaTable.ItemId);
        InventTable         inventTable     = productManager.inventTable();
        EcoResProduct		ecoResProduct	= EcoResProduct::find(productManager.ProductRecId);

		DocXmlRecord    docInventTable = _addingRecord.addChildRecord(inventTable);

        docInventTable.addAllFields();

        docInventTable.addChildRecord(ecoResProduct).addAllFields();

        docInventTable.addCalculatedField('LegacyCatalogUS', productManager.legacyCatalogUS(), "Legacy catalag number (US)");

        docuManager = GGIDocuManager::newRecord(inventTable, DocuType::find("CofA Note").TypeId);

        for (docuRef = docuManager.findFirst(conNull()); docuRef; docuRef = docuManager.findNext())
        {
            docInventTableNotes = docInventTable.addChildRecord(docuRef);
            docInventTableNotes.addAllFields();
        }

        //docInventTable.addCalculatedField('Notes', GGIDocuManager::notes(inventTable), "Notes");

        this.addProductCategories(docInventTable, _coaTable, productManager);

        while select custVendExternalItem
            where custVendExternalItem.ItemId == inventTable.ItemId
            && custVendExternalItem.CustVendRelation == inventTestCustSpecificCOATmp.CustAccount
            && custVendExternalItem.ModuleType == ModuleInventPurchSalesVendCustGroup::Cust
        {
            docInventTable.addChildRecord(custVendExternalItem).addAllFields();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated product categories.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the  product categories.
    /// </param>
    /// <param name = "_coaTable">
    ///     The certificate of analysis record.
    /// </param>
    /// <param name = "_productManager">
    ///     An instance of the product manager corresponding to _coaTable. Optional.
    /// </param>
    private void addProductCategories(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTable _coaTable, GGIProductManager _productManager = null)
    {
        GGIProductManager   productManager      = _productManager ? _productManager : GGIProductManager::newItemId(_coaTable.ItemId);
        MapEnumerator       productCategories   = productManager.productCategories().getEnumerator();
        EcoResCategoryTranslation       localEcoResCategoryTranslation;

        while (productCategories.moveNext())
        {
            DocXmlRecord docProductCategory = _addingRecord.addChildCalculatedRecord('ProductCategory');

            docProductCategory.addCalculatedField('Hierarchy', productCategories.currentKey(), literalStr("@SYS40832"));
            docProductCategory.addCalculatedField('Name', productCategories.currentValue(), literalStr("@SYS80991"));

            localEcoResCategoryTranslation = EcoResCategoryTranslation::find(EcoResCategory::findByName(productCategories.currentValue(), EcoResCategoryHierarchy::findByName(productCategories.currentKey()).RecId).RecId);
            docProductCategory.addCalculatedField('Description', localEcoResCategoryTranslation.Description, 'Description');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated production batch order information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the production batch order.
    /// </param>
    /// <param name = "_coaManager">
    ///     Certificate of analysis manager.
    /// </param>
    private void addBatchOrder(DocXmlRecord _addingRecord, GGICertificateOfAnalysisManager _coaManager)
    {
        ProdTable       prodTable       = _coaManager.prodTable();
        DocXmlRecord    docProdTable    = _addingRecord.addChildRecord(prodTable);

        docProdTable.addField(fieldStr(ProdTable, FinishedDate));
        docProdTable.addField(fieldStr(ProdTable, CreatedDateTime));
        docProdTable.addCalculatedField('Site', prodTable.inventDim().InventSiteId, new SysDictField(tableNum(InventDim), fieldNum(InventDim, InventSiteId)).labelLabel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated quality order information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the quality order.
    /// </param>
    /// <param name = "_coaManager">
    ///     Certificate of analysis manager.
    /// </param>
    private void addQualityOrder(DocXmlRecord _addingRecord, GGICertificateOfAnalysisManager _coaManager)
    {
        InventTestVariableOutcome           testVariableOutcome;
        DocXmlRecord                        docTestVariableOutcome;
        InventQualityOrderTable             qualityOrderTable;
        InventQualityOrderLine              qualityOrderLine;
        DocXmlRecord                        docQualityOrderTable;
        DocXmlRecord                        docQualityOrderLine;
        InventQualityOrderLineResults       qualityOrderLineResult;
        DocXmlRecord                        docQualityOrderLineResult;
        InventTestTable                     inventTestTable;
        DocXmlRecord                        docInventTestTable;
        DocXmlRecord                        docInventSiteTable;
        LogisticsEntityPostalAddressView    logisticsEntityPostalAddressView;
        InventSite                          inventSite;
        DocXmlRecord                        docLogisticsEntityPostalAddressView;
        HcmWorker                           hcmWorker;
        PdsBatchAttribByItem                batchAttribByItem;

        qualityOrderTable   = _coaManager.qualityOrderTable();

        docQualityOrderTable = _addingRecord.addChildRecord(qualityOrderTable);
        docQualityOrderTable.addAllFields();

        select firstonly hcmWorker
            where hcmWorker.RecId == qualityOrderTable.ValidatedByWorker;

        docQualityOrderTable.addCalculatedField('ValidatedByWorkerName',hcmWorker.searchName());
        docQualityOrderTable.addCalculatedField('ValidatedDateWorker',DateTimeUtil::date(qualityOrderTable.ValidatedDateTime));
        docQualityOrderTable.addCalculatedField('ValidatedTimeWorker',time2Str(DateTimeUtil::time(qualityOrderTable.ValidatedDateTime), TimeSeparator::Colon,TimeFormat::AMPM));

        inventSite = qualityOrderTable.inventDim().inventSite();

        docInventSiteTable = docQualityOrderTable.addChildRecord(inventSite);
        docInventSiteTable.addAllFields();

        while select logisticsEntityPostalAddressView
            where logisticsEntityPostalAddressView.EntityType == LogisticsLocationEntityType::Site
                && logisticsEntityPostalAddressView.Entity == inventSite.RecId
        {
            docLogisticsEntityPostalAddressView = docInventSiteTable.addChildRecord(logisticsEntityPostalAddressView);
            docLogisticsEntityPostalAddressView.addAllFields();
        }

        while select qualityOrderLine
            where qualityOrderLine.QualityOrderId == qualityOrderTable.QualityOrderId
        {
            docQualityOrderLine = docQualityOrderTable.addChildRecord(qualityOrderLine);
            docQualityOrderLine.addAllFields();

            docQualityOrderLine.addDisplayMethod("pipTestDescription");
        }

        while select qualityOrderLineResult
                join GGIAttibuteSequence from batchAttribByItem
                order by GGIAttibuteSequence
                where batchAttribByItem.PdsBatchAttribRelation == qualityOrderLineResult.TestId
                    && batchAttribByItem.PdsBatchAttribCode == TableGroupAll::Table
                    && batchAttribByItem.PdsBatchAttribItemId == qualityOrderTable.ItemId
                    && qualityOrderLineResult.QualityOrderId == qualityOrderTable.QualityOrderId
        {
            docQualityOrderLineResult = docQualityOrderTable.addChildRecord(qualityOrderLineResult);
            docQualityOrderLineResult.addAllFields();

            while select inventTestTable
                where inventTestTable.TestId == qualityOrderLineResult.TestId
            {
                docInventTestTable = docQualityOrderLineResult.addChildRecord(inventTestTable);
                docInventTestTable.addAllFields();
                docInventTestTable.addCalculatedField('TestAttributeSequence', batchAttribByItem.GGIAttibuteSequence);
            }

            while select testVariableOutcome
                where testVariableOutcome.VariableOutcomeId == qualityOrderLineResult.TestResultValueOutcome
            {
                docTestVariableOutcome = docQualityOrderLineResult.addChildRecord(testVariableOutcome);
                docTestVariableOutcome.addAllFields();
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addSignature</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated quality order information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the quality order.
    /// </param>
    /// <param name = "_coaTable">
    ///     Certificate of analysis record.
    /// </param>
    private void addSignature(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTable _coaTable)
    {
        GGISignatureManager signatureManager    = GGISignatureManager::newRecord(_coaTable);
        DocXmlRecord        docSignature        = _addingRecord.addChildCalculatedRecord('Signature');

        docSignature.addCalculatedField('DateTime', signatureManager.getDateTime(), "Signature time");
        docSignature.addCalculatedField('Validator', signatureManager.signer(), "Electronic signature");
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated sales line item information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the sales line item.
    /// </param>
    /// <param name = "_coaManager">
    ///     Certificate of analysis manager.
    /// </param>
    private void addLoadSalesOrder(DocXmlRecord _addingRecord, GGILoadIdCOAHelper _ggiLoadIdCOAHelper)
    {
        WHSLoadTable whsLoadTbale = WHSLoadTable::find(_ggiLoadIdCOAHelper.LoadId);
        SalesTable  salesTable = SalesTable::find(whsLoadTbale.OrderNum);
        DocXmlRecord docSalesTable =  _addingRecord.addChildRecord(salestable);
        SalesLine   salesLine;
        real        totalSalesQty;

        docSalesTable.addAllFields();

        while select firstonly salesLine
            where salesLine.SalesId == salestable.SalesId
                && salesLine.ItemId == _ggiLoadIdCOAHelper.ItemId
        {
            DocXmlRecord    docSalesLine    = docSalesTable.addChildRecord(salesLine);
            totalSalesQty += salesLine.SalesQty;
            docSalesLine.addAllFields();
            docSalesLine.addCalculatedField('LineSalesQty', real2int(salesLine.SalesQty));
        }
        docSalesTable.addCalculatedField('TotalSalesQty',totalSalesQty);
        totalSalesQty = 0;


    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated sales line item information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the sales line item.
    /// </param>
    /// <param name = "_coaManager">
    ///     Certificate of analysis manager.
    /// </param>
    private void addSalesOrder(DocXmlRecord _addingRecord, GGICertificateOfAnalysisManager _coaManager)
    {
        SalesLine       salesLine       = _coaManager.salesLine();

        DocXmlRecord docSalesTable =  _addingRecord.addChildRecord(salesLine.salesTable());

        docSalesTable.addAllFields();

        DocXmlRecord    docSalesLine    = docSalesTable.addChildRecord(salesLine);

        docSalesLine.addAllFields();

        //docSalesLine.addAllDisplayMethods();

        //docSalesLine.addField(fieldStr(SalesLine, SalesQty));
        //docSalesLine.addField(fieldStr(SalesLine, SalesUnit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAdditionalDataFieldsForQueryRecord</Name>
				<Source><![CDATA[
    // This is an overridden method that enables you to add additional data to a report data source
    // which is an AX query, without changing the query itself. You can also add display method
    // to any of data source tables from the query.
    protected void addAdditionalDataFieldsForQueryRecord(DocXmlRecord _addingRecord, Common _common, QueryBuildDataSource _qbds)
    {
        super(_addingRecord, _common, _qbds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        DocPlaceholderManager docPlaceholderManager;
        WHSBillOfLadingTmp headerLoc;
        CustTable custTable;
        PIPInventTestCertOfAnalysisCustGroup inventTestCertOfAnalysisCustGroup;
        WHSParameters   whsParameters;
        InventTestCertOfAnalysisTable inventTestCertOfAnalysisTable;

        docPlaceholderManager = super(_reportRunContext, _replaceStandardPlaceholders);

        // Skip this customization when Report executed from form client.
        // This customization required only for mobile client whenre the client type is server.
        // Form - ClientType is Client, Mobile - ClientType is Server
        if(xGlobal::clientKind() == clienttype::Client)
        {
            return docPlaceholderManager;
        }
        
        select firstonly PIPCustAccount from inventTestCertOfAnalysisTable
            where inventTestCertOfAnalysisTable.RecId == _reportRunContext.getReportExecutionContextRecord().RecId;
        
        custTable = CustTable::find(inventTestCertOfAnalysisTable.PIPCustAccount);

        whsParameters = WHSParameters::find();

        if(custTable.PIPPrintCustSpecificCertOfAnalysis)
        {
            inventTestCertOfAnalysisCustGroup = PIPInventTestCertOfAnalysisCustGroup::find(custTable.PIPCertOfAnalysisCustGroup);

            if(inventTestCertOfAnalysisCustGroup && inventTestCertOfAnalysisCustGroup.TemplateId)
            {
                _reportRunContext.parmTemplateId(inventTestCertOfAnalysisCustGroup.TemplateId);
            }
        }

        return docPlaceholderManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProducerAddress</Name>
				<Source><![CDATA[
    public FieldValue ProducerAddress(InventTestVariableOutcome _InventTestVariableOutcome)
    {
        const FieldName address = 'DESCRIPTIONEXTENDED_CUSTOM';

        FieldValue      value;
        SysDictTable    dictTable = new SysDictTable(_InventTestVariableOutcome.TableId);

        for (FieldId fieldId = dictTable.fieldNext(0); fieldId; fieldId = dictTable.fieldNext(fieldId))
        {
            SysDictField    field = dictTable.fieldObject(fieldId);

            if (field.name() == address)
            {
                value = _InventTestVariableOutcome.(fieldId);
                break;
            }
        }
        

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProducerCountryofOrigin</Name>
				<Source><![CDATA[
    public FieldValue ProducerCountryofOrigin(InventTestVariableOutcome _InventTestVariableOutcome)
    {
        const FieldName countryofOrigin = 'COUNTRYOFORIGIN_CUSTOM';

        FieldValue      value;
        SysDictTable    dictTable = new SysDictTable(_InventTestVariableOutcome.TableId);

        for (FieldId fieldId = dictTable.fieldNext(0); fieldId; fieldId = dictTable.fieldNext(fieldId))
        {
            SysDictField    field = dictTable.fieldObject(fieldId);

            if (field.name() == countryofOrigin)
            {
                value = _InventTestVariableOutcome.(fieldId);
                break;
            }
        }
        

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiGetRecipientEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getting the email address from the delivery address contact with purpose CofA
    /// </summary>
    /// <param name = "_salesTable">SalesTable</param>
    /// <returns>Email</returns>
    private Str1260 ggiGetRecipientEmail(SalesTable _salesTable)
    {
        LogisticsLocation               parentLocation, childLocation;
        LogisticsElectronicAddress      electronicAddress;
        LogisticsPostalAddress          postalAddress, deliveryPostalAddress;
        LogisticsElectronicAddressRole  electronicAddressRole;
        LogisticsLocationRole           locRole;
        GGILogisticsPostalAddress       ggiPostalAddress;
        CustTable                       custTable;
        DirPartyLocation                dirPartyLocation;
        str                             ret;

        deliveryPostalAddress = LogisticsPostalAddress::findRecId(_salesTable.DeliveryPostalAddress);

        while select postalAddress
            join parentLocation
            where postalAddress.Location == parentLocation.RecId
                && postalAddress.Location == deliveryPostalAddress.Location
            join childLocation
            where childLocation.ParentLocation == parentLocation.RecId
            join electronicAddress
            where electronicAddress.Location == childLocation.RecId
                && electronicAddress.Type == LogisticsElectronicAddressMethodType::Email
            join electronicAddressRole
            where electronicAddressRole.ElectronicAddress == electronicAddress.RecId
            join locRole
            where locRole.RecId == electronicAddressRole.LocationRole
                && locRole.Name == COfA
            join ggiPostalAddress
            where ggiPostalAddress.LogisticsPostalAddress == postalAddress.RecId
                && ggiPostalAddress.DocTemplateId
        {
            ret += strFmt("%1; ",electronicAddress.Locator);
        }

        select firstonly ggiPostalAddress
            where ggiPostalAddress.LogisticsPostalAddress == _salesTable.DeliveryPostalAddress;

        if (strLen(ggiPostalAddress.EmailAddress) > 1)
        {
            ret += ggiPostalAddress.EmailAddress;
        }

        if (!ret)
        {
            while select custTable
                where custTable.AccountNum == _salesTable.CustAccount
                join dirPartyLocation
                where dirPartyLocation.Party == custTable.Party
                join electronicAddress
                where electronicAddress.Location == dirPartyLocation.Location
                    && electronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                join electronicAddressRole
                where electronicAddressRole.ElectronicAddress == electronicAddress.RecId
                join locRole
                where locRole.RecId == electronicAddressRole.LocationRole
                    && locRole.Name == COfA 
            {
                ret += strFmt("%1; ",electronicAddress.Locator);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>