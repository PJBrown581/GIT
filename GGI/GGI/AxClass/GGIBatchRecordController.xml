<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIBatchRecordController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>GIBatchRecordController</c> class is the controller class for the <c>GGIBatchRecord</c> report.
/// </summary>
class GGIBatchRecordController extends SrsReportRunController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values in the <c>SRSReportParameters</c> table to the report contract.
    /// </summary>
    protected void prePromptModifyContract()
    {
        this.parmShowDialog(!args.parmEnum());
        this.setRange(this.getFirstQuery());
        this.setPrintSettings();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        // This report is only containing dynamic filters and via testing it's been determined
        // that on warm box it performs under 10 seconds with around a 1000 records.
        // The granularity of the query is determined by the join of ProdTable and ProdRoute tables.
        #define.ErrorLimit(100000)
        #define.WarningLimit(1000)

        container               validateResult;
        Query                   firstQuery = this.getFirstQuery();
        int                     rowCount = QueryRun::getQueryRowCount(firstQuery, #ErrorLimit + 1);

        if (rowCount > #ErrorLimit)
        {
            validateResult = [SrsReportPreRunState::Error];
        }
        else if (rowCount > #WarningLimit)
        {
            validateResult = [SrsReportPreRunState::Warning];
        }
        else
        {
            validateResult = super();
        }

        return validateResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print settings.
    /// </summary>
    public void setPrintSettings()
    {
        if (args && (args.caller() is ProdUpdRelease))
        {
            ProdUpdRelease prodUpdRelease = args.caller();
            ProdParmRelease prodParmRelease = prodUpdRelease.parmParmBuffer();

            SrsReportDataContract dataContract = this.parmReportContract();
            dataContract.parmPrintSettings(new SRSPrintDestinationSettings(prodParmRelease.GGISetupPrintBatchRecord));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Microsoft SQL Server Reporting Services Report query range based on the caller.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> report query object.
    /// </param>
    public void setRange(Query _query)
    {
        ProdParmRelease         prodParmRelease;
        ProdId                  prodId;

        QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tablenum(ProdTable));

        if (!queryBuildDataSource)
        {
            queryBuildDataSource = _query.addDataSource(tablenum(ProdTable));
        }

        if (this.parmArgs() && this.parmArgs().dataset())
        {
            switch (this.parmArgs().dataset())
            {
                case tablenum(ProdTable):
                    ProdTable prodTable = this.parmArgs().record();
                    prodId = prodTable.ProdId;
                    break;             
                case tableNum(ProdParmRelease):
                    prodParmRelease = this.parmArgs().record();
                    prodId          = prodParmRelease.ProdId;
                    break;
                default:
                    throw error(strfmt("@SYS23396",funcname()));
            }
        }

        if (this.parmArgs()  &&  (this.parmArgs().caller() is ProdUpdRelease))
        {
            ProdUpdRelease prodUpdRelease = this.parmArgs().caller();
            prodParmRelease = prodUpdRelease.parmParmBuffer();
            prodId = prodParmRelease.ProdId;
        }

        SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(ProdTable, ProdId)).value(prodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GGIBatchRecordController controller = new GGIBatchRecordController();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(GGIBatchRecord, Report));
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>