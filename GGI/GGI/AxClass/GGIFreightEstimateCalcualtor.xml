<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIFreightEstimateCalcualtor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// CR008 marked charge to be allocated to sales lines
/// </summary>
class GGIFreightEstimateCalcualtor
{
    public SalesId salesid;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInvoicing</Name>
				<Source><![CDATA[
    /// <summary>
    /// create a new instance of the class.
    /// </summary>
    /// <param name = "_salesId">saleId on invoice</param>
    /// <returns>new inastance of class</returns>
    public static GGIFreightEstimateCalcualtor newFromInvoicing(SalesId _salesId)
    {
        GGIFreightEstimateCalcualtor calc = new GGIFreightEstimateCalcualtor();
        calc.salesid = _salesId;
        return calc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        MarkupTrans markupTrans;
        SalesTable salesTable = SalesTable::find(salesid);
        Weight totalWeight = this.totalWeight();
        SalesPrice pricePerPound; 

        // find all charges
        while select markupTrans 
            where markupTrans.TransRecId == salesTable.RecId
                && markupTrans.TransTableId == salesTable.TableId
        {
            if(this.isFreightAllocated(markupTrans.MarkupCode))
            {
                pricePerPound = totalWeight? markupTrans.Value/ totalWeight : 0;
                this.calculatesalesLineFreight(pricePerPound);
            }
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatesalesLineFreight</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the freight allocated per line.
    /// </summary>
    /// <param name = "_pricePerPound">the freight cost to be allocated</param>
    private void calculatesalesLineFreight(SalesPrice _pricePerPound)
    {
        SalesLine salesLine;

        ttsbegin;
        while select forupdate salesLine
            where salesLine.SalesId == salesId
        {
            salesLine.GGIFreightEstimate = salesLine.GGIFreightEstimate +( this.salesLineTotalWeight(salesLine) * _pricePerPound);
            salesLine.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the total weight in lb for sales order
    /// </summary>
    /// <returns> total weight</returns>
    private Weight totalWeight()
    {
        Weight      totalWeight;
        SalesLine   salesLine;

        while select SalesLine
            where SalesLine.SalesId == SalesId
        {
            totalWeight = totalWeight +  this.salesLineTotalWeight(SalesLine) ;
        }

        return Totalweight;

    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineTotalWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the total weight per salesline
    /// </summary>
    /// <param name = "_salesLine">salesline to calculate</param>
    /// <returns>the total weight per qty</returns>
    private Weight salesLineTotalWeight(SalesLine _salesLine)
    {
        Weight  lineWeight;
        Qty     lineQty;
        InventTable inventTable = InventTable::find(_salesLine.ItemId) ;
        
        GGIUnitManager unitManager = GGIUnitManager::newFromToUnits(_salesLine.SalesUnit,inventTable.inventUnitId() );
        lineQty = unitManager.convert(_salesLine.SalesQty,_salesLine.ItemId);
        
        lineWeight = inventTable.NetWeight * lineQty;
        
        return lineWeight ;
  
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFreightAllocated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the charge code freight allocation.
    /// </summary>
    /// <param name = "_MarkupCode">charge code to return</param>
    /// <returns>Returns value of freight allocation selection.</returns>
    private boolean isFreightAllocated(MarkupCode _MarkupCode)
    {
        boolean ret;
        MarkupTable markupTable = MarkupTable::find(MarkupModuleType::Cust,_MarkupCode);

        ret = markupTable.GGIFreightAllocationCost;
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>