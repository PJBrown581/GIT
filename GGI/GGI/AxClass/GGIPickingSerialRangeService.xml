<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIPickingSerialRangeService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// support picking by serial number for mobile device
/// </summary>
class GGIPickingSerialRangeService 
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PickLineLPAsync</Name>
				<Source><![CDATA[
    private static void PickLineLPAsync(container _parameters)
    {
        WhsWorkExecute      locworkExecute = WhsWorkExecute::construct();
        WHSLicensePlateId   licensePlateId = conPeek(_parameters,1);
        WHSWorkLine         workLine= conPeek(_parameters,2);
        WHSUserId           userId = conPeek(_parameters,3);
        InventDim           inventDim = conPeek(_parameters,4);
        WHSLicensePlateId   targetLicensePlateId = conPeek(_parameters,5);
        WHSTransWeight      capturedWeight = conPeek(_parameters,6);
        boolean             assignSerial = conPeek(_parameters,7);
        WHSOverrideTargetLP overrideTargetLP = conPeek(_parameters,8);
        boolean             skipValidateLP = conPeek(_parameters,9);
        boolean             handleByLP = conPeek(_parameters,10);

        locworkExecute.pickWorkFromLicensePlate(licensePlateId,
                                                            workLine,
                                                            userId,
                                                            inventDim,                                                            
                                                            targetLicensePlateId,
                                                            capturedWeight,
                                                            assignSerial,
                                                            overrideTargetLP,
                                                            skipValidateLP,
                                                            handleByLP);

    }

]]></Source>
			</Method>
			<Method>
				<Name>doLPAsyc</Name>
				<Source><![CDATA[
    /// <summary>
    ///  pick work by LP as async
    /// </summary>
    /// <param name = "_parameters">container of vlaues required to pick work</param>
    /// <returns>task</returns>
    public static System.Threading.Tasks.Task doLPAsyc(container _parameters)
    {
        System.Threading.Tasks.Task thread;
        System.Threading.CancellationTokenSource tokenSource = new System.Threading.CancellationTokenSource();
            
        thread = runAsync(classNum(GGIPickingSerialRangeService),staticMethodStr(GGIPickingSerialRangeService,PickLineLPAsync),_parameters,tokenSource.Token
            ,classNum(GGIPickingSerialRangeService),staticMethodStr(GGIPickingSerialRangeService,processAsyncResult) );
        
        return thread;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PutAsyc</Name>
				<Source><![CDATA[
    /// <summary>
    /// put work as async
    /// </summary>
    /// <param name = "_parameters">container of required vlaues to put</param>
    /// <returns>task</returns>
    public static System.Threading.Tasks.Task PutAsyc(container _parameters)
    {
        System.Threading.Tasks.Task thread;
        System.Threading.CancellationTokenSource tokenSource = new System.Threading.CancellationTokenSource();

        thread = runAsync(classNum(GGIPickingSerialRangeService),staticMethodStr(GGIPickingSerialRangeService,putWorkAsync),_parameters,tokenSource.Token
            ,classNum(GGIPickingSerialRangeService),staticMethodStr(GGIPickingSerialRangeService,processAsyncResult) );
        
        return thread;
    }

]]></Source>
			</Method>
			<Method>
				<Name>putWorkAsync</Name>
				<Source><![CDATA[
    private static void putWorkAsync(container _parameters)
    {
        WhsWorkExecute      locworkExecute = WhsWorkExecute::construct();
        WHSworkLine         workLineLoc =  WHSworkLine::findByRecId(conPeek(_parameters,1));
        WHSUserId           userId = conPeek(_parameters,2);
        WHSLicensePlateId   licensePlateId = conPeek(_parameters,3);
        WHSLicensePlateId   sourceLP = conPeek(_parameters,4);
        boolean             runNow;

        do
        {
            if(!WHSWorkLine::firstOpenOrInProcessPickLine(workLineLoc.WorkId ))
            {
                sleep(10000);
                runNow = true;
            }
        }
        while ( runNow == false);

        if(runNow == true)
        {
            
            WHSWorkPutFlow workFlowPut = (WHSWorkLine::getPrevOppositeWorkLine(workLineLoc.WorkId, workLineLoc.LineNum, workLineLoc.WorkType).InventQtyWork > workLineLoc.InventQtyWork ? WHSWorkPutFlow::SplitQuantity :WHSWorkPutFlow::MoveAll);

            locworkExecute.putAwayToLocation(workLineLoc.WorkId,
                                                workLineLoc.LineNum,
                                                workLineLoc.WMSLocationId,
                                                workFlowPut,
                                                UserId,
                                                sourceLP,
                                                licensePlateId,
                                                false);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSNAsyc</Name>
				<Source><![CDATA[
    /// <summary>
    /// pick a range of serial number as an async thread
    /// </summary>
    /// <param name = "_parameters">container or vlaues required to pick</param>
    /// <returns>task</returns>
    public static System.Threading.Tasks.Task doSNAsyc(container _parameters)
    {
        System.Threading.Tasks.Task thread;
        System.Threading.CancellationTokenSource tokenSource = new System.Threading.CancellationTokenSource();

        thread = runAsync(classNum(GGIPickingSerialRangeService),staticMethodStr(GGIPickingSerialRangeService,PickLineSNAsync),_parameters,tokenSource.Token
            ,classNum(GGIPickingSerialRangeService),staticMethodStr(GGIPickingSerialRangeService,processAsyncResult) );
        
        return thread;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PickLineSNAsync</Name>
				<Source><![CDATA[
    private static void PickLineSNAsync(container _parameters)
    {
        WhsWorkExecute      locworkExecute = WhsWorkExecute::construct();
       
        WHSWorkLine         workLine = conPeek(_parameters,1);
        container           serialCon = conPeek(_parameters,2);
        WHSUserId           userId = conPeek(_parameters,3);
        WHSLicensePlateId   targetLicensePlateId = conPeek(_parameters,4);
        InventQty           inventQty = 1;
        WHSTransWeight      capturedWeight = 0;
        boolean             assignSerial  = false;
        InventDim           inventDim;
       
        int i =1;
       
        while ( i <= conLen(serialCon))
        {   
            inventDim = workLine.inventDim();
            inventDim.inventSerialId = conPeek(serialCon, i);
            //inventDim.wMSLocationId = workLine.WMSLocationId;
            inventDim = inventDim::findOrCreate(inventDim);

            locworkExecute.pickNonLicensePlateCheckDigitQuantities(workLine.WorkId,
                                                                workLine.LineNum,
                                                                workLine.ItemId,
                                                                inventQty,
                                                                capturedWeight,
                                                                workLine.UnitId,
                                                                userId,
                                                                inventDim,
                                                                targetLicensePlateId,
                                                                assignSerial);

            i++;           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAsyncResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Async callback
    /// </summary>
    /// <param name = "taskResult">Result of async company copy processing</param>
    static public void processAsyncResult(AsyncTaskResult taskResult)
    {
        container returnValue;
        System.Exception exception;

        if (taskResult != null)
        {
            // Return value from async method
            returnValue = taskResult.getResult();

            // Exception thrown by async method invocation.
            exception = taskResult.getException();

            if (ClrInterop::isNull(exception))
            {
                info(con2Str(returnValue));
            }
            else
            {
                error(exception.Message);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>