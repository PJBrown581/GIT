<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIGaugeRecordDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GGIDataSheetDP</c> class provides data for the <c>GGIGaugeRecord</c>
/// report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(GGIGaugeRecord))
]
public class GGIGaugeRecordDP extends SRSReportDataProviderBase
{
    TmpRecId dummyTmp;

} /*   GGIGaugeRecordTmp     ggiGaugeRecordTmp;
    TTBInventGaugeTable   ttbInventGaugeTable;

    //Macros
    #define.EmptyString('')
    #define.Zero(0.0)
    /// <summary>
    ///    Fetches the data from the temporary <c>GGIGaugeRecordTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('ggiGaugeRecordTmp')
    ]
    public GGIGaugeRecordTmp getGGIGaugeRecordTmp()
    {
        select * from ggiGaugeRecordTmp;
        return ggiGaugeRecordTmp;
    }

    /// <summary>
    /// Inserts specified records into a temporary table.
    /// </summary>
    /// <param name="_tableId">
    /// The serial ID of the table.
    /// </param>
    private void insertIntoTempTable(int _tableId)
    {
        ggiGaugeRecordTmp.clear();
        this.initializeGGIGaugeRecordTmp(_tableId);
        ggiGaugeRecordTmp.insert();
    }

    /// <summary>
    /// Populate specified records into a temporary table.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID.
    /// </param>
    protected void initializeGGIGaugeRecordTmp(int _tableId)
    {
        //Page Header Id
        ggiGaugeRecordTmp.InventGaugeId =   TTBInventGaugeTable.InventGaugeId;
        ggiGaugeRecordTmp.ItemId        =   TTBInventGaugeTable.ItemId;
        ggiGaugeRecordTmp.InventTransId =   TTBInventGaugeTable.InventTransId;
    }

    /// <summary>
    ///    Initializes a new instance of the class.
    /// </summary>
    public void new()
    {
        super();
    }

    /// <summary>
    /// Processes the report business logic by calling the helper methods and inserting the data into the
    /// temporary table.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by
    /// Reporting Service (SSRS) at run time. The method should compute data and populate the data tables
    /// that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            TTBInventGaugeTable   =   queryRun.get(tableNum(TTBInventGaugeTable));
            this.insertIntoTempTable(tableNum(TTBInventGaugeTable));
        }
    }

}*/
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTmpDummyTable</Name>
				<Source><![CDATA[
    // A dummy report temporary table that actually is not going to be used.
    // Still, it has to be declared because a dummy SSRS Report Design demands an existing data set.
    [
    SRSReportDataSetAttribute('TmpRecId')
    ]
    public TmpRecId getTmpDummyTable()
    {
        select dummyTmp;
        return dummyTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>