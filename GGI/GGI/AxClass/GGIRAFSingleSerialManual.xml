<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIRAFSingleSerialManual</Name>
	<SourceCode>
		<Declaration><![CDATA[
[WHSWorkExecuteMode(WHSWorkExecuteMode::GGIRAFSingleSerialManual)]
class GGIRAFSingleSerialManual extends  WHSWorkExecuteDisplay
{
    private WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
    Private const String255 tareWeight = 'TareWeight' ;
    Private const String255 grossWeight = 'GrossWeight';
    Private const String255 Confirm = 'Confirm' ;
    Private const String255 pipeSeperator = '|';
    Private const String255 ampSeperator = '@'; 
    Private const int serialPosition = 1;
    Private const int tarePosition = 2;
    Private const int grossPosition = 3;
    private const int workPosition = 1;

    Private const InventQty SerialQty   = 1;
    private const int postion = 2;
    
    Weight              gross,tare;
    InventSerialId      serialId;
    List                serialList = new List(Types::String);
    List                WeightList = new List(Types::Real);
    ListIterator        serialIterator;
    ListIterator        WeightIterator;
    InventDim           productionDimensions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        container               ret = conNull();
        container               con = _con;
        container               tmpFieldValues = conNull();
        int                     hasError = 0;
        boolean                 complete = false;
        str                     serial = "";
        boolean                 error = false;

        pass = WHSRFPassthrough::create(conPeek(_con,postion));

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);

            if (!pass.exists(#InventLocationId))
            {
                pass.insert(#InventLocationId, WHSWorkUserSession::find(userId).InventLocationId);
            }
          
        }

        if (_buttonClicked == #RFDone)
        {
            step = 0;
        }
        
       

        switch (step)
        {
            case 0:
                ret = this.buildGetProductionOrder(ret);
                step = 1;
                break;

            case 1:
                [con, error] = this.processData(con);
                if(error)
                {
                    ret = con;
                }
                else if(pass.exists(#ProdId) && pass.lookup(#ProdId)  == "")
                {
                    ret = this.buildGetProductionOrder(ret);
                }
                else
                {
                    ret = this.buildGetParentLicensePlate(ret);
                    step = 2;
                }
                break;


            case 2:
                [con, error] = this.processData(con);
                if(error)
                {
                    ret = con;
                }
                else if(pass.exists(#ParentLP) && pass.lookup(#ParentLP)  == "")
                {
                    ret = this.buildGetParentLicensePlate(ret);
                }
                else
                {
                    ret = this.buildSerialNumber(ret);
                    step = 3;
                }
                break;
            case 3:
                [con, error] = this.processData(con);
                if(error)
                {
                    ret = con;
                }
                else if(pass.exists(#SerialId) && pass.lookup(#SerialId)  == "")
                {
                    if(_buttonClicked == #RFFinished)
                    {
                        serialList = strSplit(pass.lookup(#SelectedValue),pipeSeperator);
                        serialIterator  = new ListIterator(serialList);
                        while (serialIterator.more())
                        {
                            WeightList = strSplit(serialIterator.value(),ampSeperator);
                            this.createRAF(WeightList);
                            serialIterator.next();
                        }
                        ret = this.handleWorkCompletedMessage(ret);
                        ret = this.buildGetProductionOrder(ret);

                        pass.remove(#ProdId);
                        pass.remove(#ParentLP);
                        pass.remove(#serialId);
                        pass.remove(tareWeight);
                        pass.remove(grossWeight);
                        pass.remove(#SelectedValue);
                        step = 1;
                    }
                    else
                    {
                        ret = this.buildSerialNumber(ret);
                    }
                }
                else
                {
                    serialId = pass.exists(#SerialId) ? pass.lookup(#SerialId) : '';
                    if(serialId != '')
                    {
                        ProdId   prodId = pass.exists(#ProdId) ? pass.lookup(#ProdId) : '';
                        [con, error]  = this.validateSerialNumber(con, serialId, prodId);
                        if(error)
                        {
                            ret = con;
                        }
                        else 
                        {                            
                            ret = this.buildTareWeight(ret);
                            step = 4;
                        }
                    }                    
                }
               
                break;
            case 4:
                [con, error] = this.processData(con);
                if(error)
                {
                    ret = con;
                }
                else if(pass.exists(tareWeight) && pass.lookup(tareWeight)  == "")
                {
                    ret = this.buildTareWeight(ret);
                }
                else
                {
                    ret = this.buildGrossWeight(ret);
                    step = 5;
                }
                break;
            case 5:
                [con, error] = this.processData(con);
                if(error)
                {
                    ret = con;
                }
                else if(pass.exists(grossWeight) && pass.lookup(grossWeight)  == "")
                {
                    ret = this.buildGrossWeight(ret);
                }
                else
                {
                    ret = this.buildSerialNumber(ret);
                    serial =   pass.lookup(#serialId) + ampSeperator + pass.lookup(tareWeight) + ampSeperator + pass.lookup(grossWeight);
                    if(pass.exists(#selectedValue))
                    {
                        serial +=  pipeSeperator + pass.lookup(#SelectedValue);
                        pass.insert(#SelectedValue, serial);
                    }
                    else
                    {
                        pass.insert(#SelectedValue, serial);
                    }
                    pass.remove(#serialId);
                    pass.remove(tareWeight);
                    pass.remove(grossWeight);
                    step = 3;
                }
                break;
        }
        ret = this.updateModeStepPass(ret, mode, step, pass);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    private container processData(container _con)
    {
        container con = _con;

        if (this.hasError(con))
        {
            con = this.deleteControlDataFromContainer(con, #RFError);
        }
        container  tmpFieldValues;
        [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);

        return [con, this.hasError(con)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetProductionOrder</Name>
				<Source><![CDATA[
    container buildGetProductionOrder(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@WAX725";

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #ProdId, "@WAX725", 1, '', extendedTypeNum(ProdId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildConfirmOrder</Name>
				<Source><![CDATA[
    container buildConfirmOrder(container _con, WhsrfPassthrough _pass)
    {
        container   ret = _con;

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, "@GGI:FinishGoodPutAway", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, strFmt("@GGI:ItemIdDisplay", ProdTable::find(_pass.lookup(#ProdId)).ItemId), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, strFmt("@GGI:LPScan", _pass.lookup(#ParentLP)), 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFButton, Confirm, "@SYS4784", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetQty</Name>
				<Source><![CDATA[
    container buildGetQty(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@SYS105177"; 

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, '', extendedTypeNum(Qty), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetParentLicensePlate</Name>
				<Source><![CDATA[
    container buildGetParentLicensePlate(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@WAX1198";

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #ParentLP, "@WAX1198", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSerialNumber</Name>
				<Source><![CDATA[
    container buildSerialNumber(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@GGI:SerialNumberInput";

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, enum2Str(WHSWorkCreationProcess::ReportAsFinishedBySerial), finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #SerialId, "@SYS124420", 1, '', extendedTypeNum(InventSerialId), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFFinished, "@SYS56424", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTareWeight</Name>
				<Source><![CDATA[
    container buildTareWeight(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@GGI:DrumIBCManualTare";

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, tareWeight, "@GGI:TareWeightManual", 1, '', extendedTypeNum(String255), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];


        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGrossWeight</Name>
				<Source><![CDATA[
    container buildGrossWeight(container _con, str _extraText = '')
    {
        container   ret = _con;
        str         finalLabel = _extraText ? _extraText : "@GGI:DrumIBCManualGross"; 

        ret += [this.buildControl(#RFLabel, #RFTitle, WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfTitle, 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #Scan, finalLabel, 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, grossWeight, "@GGI:GrossWeightManual", 1, '', extendedTypeNum(String255), '', 0)];

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];


        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerialNumber</Name>
				<Source><![CDATA[
    public container validateSerialNumber(container _con, WHSSerialId _serialId, ProdId _prodId)
    {
        container               con = _con;
        boolean                 multipleLines = false;

        InventTrans             inventTrans;
        InventDim               inventDim;
        InventTransOrigin       inventTransOrigin;
        int                     alreadyFound = false;

        select firstonly  inventTransOrigin
            where inventTransOrigin.ReferenceCategory == InventTransType::Production
             && inventTransOrigin.ReferenceId == _prodId
            join inventTrans
            where inventTrans.inventTransOrigin == inventTransOrigin.RecId
                    && inventTrans.StatusReceipt == StatusReceipt::Ordered
                  exists join inventDim
                where inventDim.inventDimId == inventTrans.inventDimId
            && inventDim.inventSerialId == _serialId;

        if(!inventTransOrigin.ReferenceId)
        {
            con = this.addErrorLabel(_con, strFmt("@WAX:SerialNotValid", _serialId), WHSRFColorText::Error);
        }
        return [con, this.hasError(con)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleWorkCompletedMessage</Name>
				<Source><![CDATA[
    private container handleWorkCompletedMessage(container _con)
    {
        container ret = conNull();
        if (pass.exists(#WorkComplete))
        {
            ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
            pass.remove(#WorkComplete);
        }
        ret += _con;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRAF</Name>
				<Source><![CDATA[
    public void createRAF(List _weightList)
    {
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventTransOrigin       inventTransOrigin;
        container               WeightCon =  list2Con(_weightList);

        ttsbegin;

        select firstonly  inventTransOrigin
            where inventTransOrigin.ReferenceCategory == InventTransType::Production
             && inventTransOrigin.ReferenceId == pass.lookup(#ProdId)
            join inventTrans
             where inventTrans.inventTransOrigin == inventTransOrigin.RecId
              && inventTrans.StatusReceipt == StatusReceipt::Ordered
            exists join inventDim
             where inventDim.inventDimId == inventTrans.inventDimId
              && inventDim.inventSerialId == conPeek(WeightCon , serialPosition);

        if(inventTrans.RecId)
        {           
            inventTrans.selectForUpdate(true);
            inventTrans.GGITareWeightManual     = conPeek(WeightCon , tarePosition);
            inventTrans.GGIGrosWeightManual     = conPeek(WeightCon , grossPosition);
            inventTrans.GGINetWeightCalculated  = inventTrans.GGIGrosWeightManual - inventTrans.GGITareWeightManual;
            inventTrans.doUpdate();           
        }

        productionDimensions = ProdTable::find(pass.lookup(#ProdId)).inventDim();
        WHSWorkCreateProdPut workCreateProdPut = this.initializeWHSWorkCreateProdPut(productionDimensions, conPeek(WeightCon , serialPosition));
        workCreateProdPut.createReportFinished();
        ttscommit;
        pass.insert(#WorkComplete, workPosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWHSWorkCreateProdPut</Name>
				<Source><![CDATA[
    protected WHSWorkCreateProdPut initializeWHSWorkCreateProdPut(InventDim _productionDimensions, InventSerialId _serialId)
    {

        WHSWorkCreateProdPut workCreateProdPut = new WHSWorkCreateProdPut(ProdTable::find(pass.lookup(#ProdId)));
        workCreateProdPut.parmCreatedBy(userId);
        workCreateProdPut.parmTargetLicensePlateId(WHSLicensePlate::createLicensePlate(pass.lookup(#ParentLP)).LicensePlateId);
        workCreateProdPut.parmWorkTemplateCode(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).WorkTemplateCode);
        workCreateProdPut.parmInventSerialId(_serialId);
        workCreateProdPut.parmWHSWorkExecuteMode(WHSWorkExecuteMode::GGIRAFSingleSerialManual);
        WorkCreateProdPut.parmInventHandlingQty(SerialQty);

        return workCreateProdPut;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>