<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocRailCarRecordDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The GGIDocRailCarRecordDSP class converts the data sheet report DP class to a DSP class
/// </summary>
class GGIDocRailCarRecordDSP extends DocDatasourceProviderSrsReporting
{
    
    TTBRailCarTable             ttbRailCarTable;
    TTBRailCarLine              ttbRailCarLine;
    GGIRailCarRecordTmp         headerTableBuffer;
    #define.RailCarRecordHeader('RailCarRecordHeader')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Class description.
    /// </summary>
    /// <returns>
    ///     The class description.
    /// </returns>
    public ClassDescription description()
    {
        return 'Railcar Record DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add data points for the rail car report.
    /// </summary>
    /// <param name = "_recordBuilder">
    ///     Docentric record to contain the rail car record information
    /// </param>
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
        GGIRailcarReportDP      railCarRecordDP       = this.getSrsRdpClassRunningInstance();
        ttbRailCarTable         railCarRecordQuery;
        QueryRun qr = new QueryRun(railCarRecordDP.parmQuery());
        DocXmlRecord            headerDataRecord;
        InventDim               inventDim;        
        TTBInventGaugeTable     ttbInventGaugeTable;        
        HcmWorker               hcmWorker;

        while (qr.next())
        {
            railCarRecordQuery = qr.get(tablenum(TTBRailCarTable));

            if (railCarRecordQuery)
            {
                ttbRailCarTable = railCarRecordQuery;
                break;
            }
        }

        select firstonly inventDim
            where inventDim.inventDimId == TTBRailCarTable.inventDimId;

        select firstonly ttbInventGaugeTable
            where ttbInventGaugeTable.RCRId == TTBRailCarTable.RailCarRecordNumber;

        select firstonly hcmWorker
            where hcmWorker.RecId == TTBRailCarTable.ClosedBy;

        headerDataRecord = _recordBuilder.addRecord(headerTableBuffer);
        headerDataRecord.setRecordName(#RailCarRecordHeader);
        headerDataRecord.setRecordLabel('Railcar Record');    
        headerDataRecord.addCalculatedField('RailCarRecordNumber',TTBRailCarTable.RailCarRecordNumber);
        headerDataRecord.addCalculatedField('InventDimId',TTBRailCarTable.InventDimId);
        headerDataRecord.addCalculatedField('DateOpened',TTBRailCarTable.DateOpened);
        headerDataRecord.addCalculatedField('DateClosed',TTBRailCarTable.DateClosed);
        headerDataRecord.addCalculatedFieldFromEnum('RailCarStatus',enumStr(TTBRailCarStatus),TTBRailCarTable.RailCarStatus);
        headerDataRecord.addCalculatedField('NumOfLines',TTBRailCarTable.NumOfLines);
        headerDataRecord.addCalculatedField('ClosedBy',hcmWorker.searchName());
        headerDataRecord.addCalculatedField('TransferToRailCarNum',TTBRailCarTable.TransferToRailCarNum);
        //headerDataRecord.addCalculatedField('TTBRailCarTable',TTBRailCarTable.TTBRailCarTable);
        headerDataRecord.addCalculatedFieldFromEnum('RailcarRecordSubclass',enumStr(TTBRailcarRecordSubclass),TTBRailCarTable.RailcarRecordSubclass);
        headerDataRecord.addCalculatedField('WhSWorkTableRecId',TTBRailCarTable.WhSWorkTableRecId);
        headerDataRecord.addCalculatedField('InventQualityOrderId',TTBRailCarTable.InventQualityOrderId);
        headerDataRecord.addCalculatedField('Proof',TTBRailCarTable.Proof);
        headerDataRecord.addCalculatedField('InventSite',inventDim.InventSiteId);
        headerDataRecord.addCalculatedField('InventLocation',inventDim.InventLocationId);
        headerDataRecord.addCalculatedField('wMSLocationId',inventDim.wMSLocationId);
        headerDataRecord.addCalculatedField('InventGaugeId',ttbInventGaugeTable.InventGaugeId);

        while select ttbRailCarLine
            where ttbRailCarLine.RailCarTable == ttbRailCarTable.RecId
        {
            PurchTable purchTable;
            InventTransferTable inventTransferTable;            
            TTBPermitAddress        ttbPermitAddress;
            TTBPermitTable          ttbPermitTable;
            LogisticsPostalAddress  lpaPurchTable, lpaTransfer;
            VendTable               vendtable;

            DocXmlRecord    railCarline = headerDataRecord.addChildCalculatedRecord('RailCarLine');

            select firstonly inventDim
                where inventDim.inventDimId == ttbRailCarLine.inventDimId;

            purchTable = PurchTable::find(ttbRailCarLine.ReferenceId);
            inventTransferTable = inventTransferTable::find(ttbRailCarLine.ReferenceId);
            vendTable = vendTable::find(purchTable.OrderAccount);

            lpaPurchTable = VendTable.deliveryAddress();

            select firstonly lpaTransfer 
                where lpaTransfer.RecId == inventTransferTable.FromPostalAddress;

            if (lpaPurchTable)
            {
                select firstonly TTBPermitAddress
                    where TTBPermitAddress.LogisticsPostalAddress == lpaPurchTable.RecId;

                select firstonly ttbPermitTable
                    where ttbPermitTable.RecId == TTBPermitAddress.PermitTable;
            }
            else
            {
                select firstonly TTBPermitAddress
                    where TTBPermitAddress.LogisticsPostalAddress == lpaTransfer.RecId;

                select firstonly ttbPermitTable
                    where ttbPermitTable.RecId == TTBPermitAddress.PermitTable;
            }
           
            railCarline.addCalculatedField('TransDate', ttbRailCarLine.TransDate);
            railCarline.addCalculatedField('ItemId', ttbRailCarLine.ItemId);
            railCarline.addCalculatedField('Qty', ttbRailCarLine.Qty);
            railCarline.addCalculatedField('Proof', ttbRailCarLine.Proof);
            railCarline.addCalculatedField('WineGallon', ttbRailCarLine.WineGallon);
            railCarline.addCalculatedField('LineNumber', ttbRailCarLine.LineNumber);
            railCarline.addCalculatedField('RailCarTable', ttbRailCarLine.RailCarTable);
            railCarline.addCalculatedField('WhSWorkLine', ttbRailCarLine.WhSWorkLine);
            railCarline.addCalculatedField('InventDimId', ttbRailCarLine.InventDimId);
            railCarline.addCalculatedField('ProofGallon', ttbRailCarLine.ProofGallon);
            railCarline.addCalculatedFieldFromEnum('QualityOrderStatus', enumStr(InventTestOrderStatus),ttbRailCarLine.QualityOrderStatus);
            railCarline.addCalculatedField('InventJournalId', ttbRailCarLine.InventJournalId);
            railCarline.addCalculatedField('InventTransId', ttbRailCarLine.InventTransId);
            railCarline.addCalculatedField('InventSiteId', inventDim.InventSiteId);
            railCarline.addCalculatedField('InventLocationId', inventDim.InventLocationId);
            railCarline.addCalculatedField('wMSLocationId', inventDim.wMSLocationId);
            railCarline.addCalculatedField('InventStatusId', inventDim.InventStatusId);
            railCarline.addCalculatedField('LicensePlateId', inventDim.LicensePlateId);
            railCarline.addCalculatedField('InventBatchId', inventDim.InventBatchId);
            railCarline.addCalculatedField('InventSerialId', inventDim.InventSerialId);
            railCarline.addCalculatedFieldFromEnum('TransType', enumStr(GGIRailcarTransType),ttbRailCarLine.TransType);
            railCarline.addCalculatedField('JournalNameId', ttbRailCarLine.JournalNameId);
            railCarline.addCalculatedField('DSPNumber', ttbRailCarLine.DSPNumber);
            railCarline.addCalculatedField('ReferenceId', ttbRailCarLine.ReferenceId);            
            railCarline.addCalculatedField('InventGaugeId',ttbRailCarLine.InventGaugeId);

            if (purchTable)
            {
                railCarline.addCalculatedField('VendorNameSiteName', purchTable.vendorName());
                railCarline.addCalculatedField('VendorAccount',purchTable.OrderAccount);
                railCarline.addCalculatedField('SitePermitNo', ttbPermitTable.PermitId);
            }
            else
            {
                railCarline.addCalculatedField('VendorNameSiteName', inventTransferTable.InventLocationIdFrom);                
                railCarline.addCalculatedField('SitePermitNo', ttbPermitTable.PermitId);
            }
        }        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>