<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBPermitManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager class for TTB permits.
/// </summary>
class TTBPermitManager
{
    /// <summary>
    ///     The postal address associated with a permit or a range of permits.
    /// </summary>
    public LogisticsPostalAddressRecId   PostalAddressRecId;

    /// <summary>
    ///     The permit to perform validation with.
    /// </summary>
    public TTBPermitKey PermitRecId;

    /// <summary>
    ///     Permit cache.
    /// </summary>
    protected TTBPermitTable    PermitTable;
    
    /// <summary>
    ///     Flag determining that only DSP permits are allowed.
    /// </summary>
    protected   boolean DSPOnly;

    /// <summary>
    ///     Warehouse for DSP permits.
    /// </summary>
    protected   InventLocationId    InventLocationId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TTBPermitManager construct()
    {
        return new TTBPermitManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object based on a record that has a reference to the delivery postal address.
    /// </summary>
    /// <param name = "_record">
    ///     A record with a reference to a delivery postal address.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static TTBPermitManager newRecord(Common _record)
    {
        TTBPermitManager    manager = TTBPermitManager::construct();

        FieldId permitFieldId = fieldName2Id(_record.TableId, 'PermitTable');

        if (!permitFieldId)
        {
            permitFieldId = fieldName2Id(_record.TableId, 'PermitKey');
        }
        if (!permitFieldId)
        {
            permitFieldId = fieldName2Id(_record.TableId, 'TTBPermitTable');
        }

        if (permitFieldId)
        {
            manager.PermitRecId = _record.(permitFieldId);
        }

        FieldId postalAddressfieldId    = fieldName2Id(_record.TableId, 'DeliveryPostalAddress');

        if (!postalAddressfieldId)
        {
            switch(_record.TableId)
            {
                case tableNum(InventTransferTable):
                    InventTransferTable inventTransferTable = _record as InventTransferTable;

                    manager.PostalAddressRecId  = GGIGlobalAddressBookManager::postalAddress(InventLocation::find(inventTransferTable.InventLocationIdTo), true, LogisticsLocationRoleType::Delivery).RecId;
                    manager.DSPOnly             = true;
                    manager.InventLocationId    = inventTransferTable.InventLocationIdFrom;
                    break;
                case tableNum(LogisticsPostalAddress):
                    postalAddressfieldId    = fieldNum(LogisticsPostalAddress, RecId);
                    manager.DSPOnly         = false;
                    break;
            }
        }

        if (postalAddressfieldId)
        {
            manager.PostalAddressRecId = _record.(postalAddressfieldId);
        }

        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPermit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with a permit record ID.
    /// </summary>
    /// <param name = "_permitRecId">
    ///     A permit record ID.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static TTBPermitManager newPermit(TTBPermitKey _permitRecId)
    {
        TTBPermitManager    manager = TTBPermitManager::construct();

        manager.PermitRecId = _permitRecId;
        manager.permitTable();

        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyDSP</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if DSP permits only are applicable.
    /// </summary>
    /// <returns>
    ///     true, if DSP permits are applicable; otherwise, false.
    /// </returns>
    public boolean onlyDSP()
    {
        return DSPOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the warehouse this DSP permit applies to.
    /// </summary>
    /// <returns>
    ///     The warehouse this DSP permit applies to; otherwise, an empty string.
    /// </returns>
    /// <remarks>
    ///     Applicable only to DSP permits.
    /// </remarks>
    public InventLocationId getInventLocationId()
    {
        return InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>permitTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current permit.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the current permit is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The current permit; otherwise, an empty buffer.
    /// </returns>
    public TTBPermitTable permitTable(boolean _forUpdate = false)
    {
        PermitTable.selectForUpdate(_forUpdate);
        if (PermitTable.RecId != PermitRecId)
        {
            PermitTable         = TTBPermitTable::find(PermitRecId);
            PostalAddressRecId  = (select TTBPermitAddress
                                        where TTBPermitAddress.PermitTable == PermitTable.RecId).LogisticsPostalAddress;
        }

        return PermitTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gallonLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the gallon limit based on the specified alcohol type.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The type of alcohol.
    /// </param>
    /// <returns>
    ///     The gallon limit.
    /// </returns>
    /// <remarks>
    ///     If the alcohol type is pure, the gallon limit is in proof gallons; otherwise, in wine gallons.
    /// </remarks>
    public TTBGallonLimit gallonLimit(TTBAlcoholType _alcoholType)
    {
        TTBGallonLimit  gallonLimit;

        if (!this.permitTable().DisablePermit)
        {
            boolean unlimited;

            switch(_alcoholType)
            {
                case TTBAlcoholType::PURE:
                    unlimited   = this.permitTable().UnlimitedProofGallons;
                    gallonLimit = unlimited ? realMax() : this.permitTable().ProofGallonLimit;
                    break;
                case TTBAlcoholType::SDA:
                    unlimited   = this.permitTable().UnlimitedWineGallons;
                    gallonLimit = unlimited ? realMax() : this.permitTable().WineGallonLimit;
                    break;
            }
        }

        return gallonLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRemainingGallons</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the remaining gallons.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The type of alcohol.
    /// </param>
    /// <param name = "_includeOpenOrders">
    ///     Determines if open orders are included in the calculation. Optional.
    /// </param>
    /// <returns>
    ///     The remaining gallons.
    /// </returns>
    /// <remarks>
    ///     If the alcohol type is pure, then the gallons remaining are in proof gallons; otherwise, they are in wine gallons.
    /// </remarks>
    public TTBGallonRemain calculateRemainingGallons(TTBAlcoholType _alcoholType, boolean _includeOpenOrders = true)
    {
        TTBGallonRemain gallonRemain = this.gallonLimit(_alcoholType);

        if (gallonRemain == realMax())
        {
            gallonRemain = 0;
        }
        else
        {
            if (this.permitTable().PermitType != TTBPermitType::DSP) 
            { 
                GGIDateTimeManager  dateTimeManager         = GGIDateTimeManager::construct();
                FromDate            fromDate                = dateTimeManager.getStartOfYearDate();
                ToDate              toDate                  = dateTimeManager.getEndOfYearDate();
                TTBGallon           historicalGallonShipped = TTBPermitManager::calculateHistoricGallonsShipped(
                    _alcoholType,
                    fromDate,
                    toDate,
                    this.permitTable());
                
                gallonRemain -= historicalGallonShipped;
                gallonRemain -= this.calculateGallonsShipped(_alcoholType, fromDate, toDate);
                if (_includeOpenOrders)
                {
                    gallonRemain -= this.calculateGallonsOrdered(_alcoholType, fromDate, toDate);
                }
                gallonRemain += this.calculateGallonsReturned(_alcoholType, fromDate, toDate);
            }
        }

        return gallonRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHistoricGallonsShipped</Name>
				<Source><![CDATA[
    /// <summary>
    /// account for historic data from leagcy system
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The type of alcohol.
    /// </param>
    /// <param name = "_fromDate">
    ///     The starting date.
    /// </param>
    /// <param name = "_toDate">
    ///     The ending date.
    /// </param>
    /// <param name = "_permitTable">
    ///     teh permit to use for calc
    /// </param>
    /// <returns> historic gallon shipped</returns>
    public static TTBWineGallon calculateHistoricGallonsShipped(TTBAlcoholType _alcoholType, 
        FromDate _fromDate, 
        ToDate _toDate,
        ttbpermittable _permitTable)
    {
        TTBWineGallon       historicalGallonShipped = 0;
        date                cutoverdate = 9\1\2021;

        if(cutoverdate >= _fromDate && cutoverdate <= _toDate)
        {
            historicalGallonShipped = _alcoholType == TTBAlcoholType::PURE ? _permitTable.HistoricalProofGallonsShipped : _permitTable.HistoricalWineGallonsShipped;
        } 
        return historicalGallonShipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGallonsFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of gallons used in the specified inventory transactions.
    /// </summary>
    /// <param name = "_inventTrans">
    ///     Inventory transaction.
    /// </param>
    /// <param name = "_alcoholType">
    ///     The type of alcohol.
    /// </param>
    /// <returns>
    ///     The number of gallons used.
    /// </returns>
    /// <remarks>
    ///     If the alcohol type is pure, then the gallons used are in proof gallons; otherwise, they are in wine gallons.
    /// </remarks>
    protected TTBGallon calculateGallonsFromInventTrans(TTBInventTrans _inventTrans, TTBAlcoholType _alcoholType)
    {
        TTBGallon   gallons;

        while (_inventTrans)
        {
            TTBWineGallon   wineGallons = TTBUtilHelper::convert2WineGallon(abs(_inventTrans.Qty), _inventTrans.UnitId, _inventTrans.ItemId);

            gallons += _alcoholType == TTBAlcoholType::PURE ? TTBUtilHelper::convertWineGallon2Proof(wineGallons, _inventTrans.Proof) : wineGallons;

            next _inventTrans;
        }

        return gallons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGallonsTransferred</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of gallons transferred based on the current item alcohol type and permit.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The type of alcohol.
    /// </param>
    /// <param name = "_fromDate">
    ///     The starting date.
    /// </param>
    /// <param name = "_toDate">
    ///     The ending date.
    /// </param>
    /// <returns>
    ///     The number of gallons transferred.
    /// </returns>
    public TTBWineGallon calculateGallonsTransferred(TTBAlcoholType _alcoholType, FromDate _fromDate, ToDate _toDate)
    {
        GGITransferTransGallon  transferTransGallon;

        select sum(Gallon) from transferTransGallon
            where transferTransGallon.AlcoholType       == _alcoholType
                && (transferTransGallon.StatusIssue     == StatusIssue::Sold
                    || transferTransGallon.StatusIssue  == StatusIssue::Deducted)
                && transferTransGallon.DatePhysical     >= _fromDate
                && transferTransGallon.DatePhysical     <= _toDate
                && transferTransGallon.PermitTable      == PermitRecId;

        return transferTransGallon.Gallon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGallonsShipped</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of gallons shipped based on the current item alcohol type and permit.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The type of alcohol.
    /// </param>
    /// <param name = "_fromDate">
    ///     The starting date.
    /// </param>
    /// <param name = "_toDate">
    ///     The ending date.
    /// </param>
    /// <returns>
    ///     The number of gallons shipped.
    /// </returns>
    public TTBWineGallon calculateGallonsShipped(TTBAlcoholType _alcoholType, FromDate _fromDate, ToDate _toDate)
    {
        GGISalesTransGallon salesTransGallon;
        TTBGallon gallonsShipped = 0;
        TTBGallon totalGallonsShipped = 0;

        while select sum(Qty)  from salesTransGallon
            group by salesTransGallon.ItemId,salesTransGallon.SalesUnit
            where salesTransGallon.AlcoholType      == _alcoholType
                && (salesTransGallon.StatusIssue    == StatusIssue::Sold
                    || salesTransGallon.StatusIssue == StatusIssue::Deducted)
                && salesTransGallon.DatePhysical    >= _fromDate
                && salesTransGallon.DatePhysical    <= _toDate
                && salesTransGallon.PermitTable     == PermitRecId
        {
            gallonsShipped = TTBUtilHelper::convert2WineGallon(abs(salesTransGallon.Qty),
                salesTransGallon.SalesUnit,salesTransGallon.ItemId);
            
            if(_alcoholType == TTBAlcoholType::PURE)
            {
                InventTable inventTableL = InventTable::find(salesTransGallon.ItemId, false);
                gallonsShipped = TTBUtilHelper::convertWineGallon2Proof(gallonsShipped, inventTableL.TTBProof);
            }

            totalGallonsShipped += gallonsShipped;

        }
        return totalGallonsShipped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGallonsOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of gallons on order based on the current item alcohol type and permit.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The type of alcohol.
    /// </param>
    /// <param name = "_fromDate">
    ///     The starting date.
    /// </param>
    /// <param name = "_toDate">
    ///     The ending date.
    /// </param>
    /// <returns>
    ///     The number of gallons ordered.
    /// </returns>
    public TTBWineGallon calculateGallonsOrdered(TTBAlcoholType _alcoholType, FromDate _fromDate, ToDate _toDate)
    {
        GGISalesTransGallon salesTransGallon;
        TTBWineGallon gallonsOrdered = 0;
        TTBWineGallon totalGallonsOrdered = 0;

        while select sum(Qty)  from salesTransGallon
            group by salesTransGallon.ItemId,salesTransGallon.SalesUnit
            where salesTransGallon.AlcoholType              == _alcoholType
                && salesTransGallon.StatusReceipt           == StatusReceipt::None
                && salesTransGallon.StatusIssue             != StatusIssue::Sold
                && salesTransGallon.StatusIssue             != StatusIssue::Deducted
                && salesTransGallon.ShippingDateRequested   >= _fromDate
                && salesTransGallon.ShippingDateRequested   <= _toDate
                && salesTransGallon.PermitTable             == PermitRecId
        {
            gallonsOrdered = TTBUtilHelper::convert2WineGallon(abs(salesTransGallon.Qty),
                salesTransGallon.SalesUnit,salesTransGallon.ItemId);

            if(_alcoholType == TTBAlcoholType::PURE)
            {
                InventTable inventTableL = InventTable::find(salesTransGallon.ItemId, false);
                gallonsOrdered = TTBUtilHelper::convertWineGallon2Proof(gallonsOrdered, inventTableL.TTBProof);
            }

            totalGallonsOrdered += gallonsOrdered;
        }
        return totalGallonsOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateGallonsReturned</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the number of gallons returned based on the current item alcohol type and permit.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The type of alcohol.
    /// </param>
    /// <param name = "_fromDate">
    ///     The starting date.
    /// </param>
    /// <param name = "_toDate">
    ///     The ending date.
    /// </param>
    /// <returns>
    ///     The number of gallons returned.
    /// </returns>
    public TTBWineGallon calculateGallonsReturned(TTBAlcoholType _alcoholType, FromDate _fromDate, ToDate _toDate)
    {
        GGISalesTransGallon salesTransGallon;
        TTBWineGallon gallonsReturned = 0;
        TTBWineGallon totalGallonsReturned = 0;

        while select sum(Qty)  from salesTransGallon
            group by salesTransGallon.ItemId,salesTransGallon.SalesUnit
            where salesTransGallon.AlcoholType      == _alcoholType
                && salesTransGallon.StatusReceipt   != StatusReceipt::None
                && salesTransGallon.DatePhysical    >= _fromDate
                && salesTransGallon.DatePhysical    <= _toDate
                && salesTransGallon.PermitTable     == PermitRecId
        {
            gallonsReturned = TTBUtilHelper::convert2WineGallon(abs(salesTransGallon.Qty),
                salesTransGallon.SalesUnit,salesTransGallon.ItemId);

            if(_alcoholType == TTBAlcoholType::PURE)
            {
                InventTable inventTableL = InventTable::find(salesTransGallon.ItemId, false);
                gallonsReturned = TTBUtilHelper::convertWineGallon2Proof(gallonsReturned, inventTableL.TTBProof);
            }

            totalGallonsReturned += gallonsReturned;
        }
        return totalGallonsReturned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlcoholTypeAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the specified alcohol type is allowed under the current permit.
    /// </summary>
    /// <param name = "_alcoholType">
    ///     The alcohol type.
    /// </param>
    /// <returns>
    ///     true, if allowed; otherwise, false.
    /// </returns>
    public boolean isAlcoholTypeAllowed(TTBAlcoholType _alcoholType)
    {
        boolean isAllowed;

        TTBProofGallonLimit  proofGallonLimit    = this.permitTable().ProofGallonLimit;
        TTBWineGallonLimit   wineGallonLimit     = this.permitTable().WineGallonLimit;

        switch(_alcoholType)
        {
            case TTBAlcoholType::PURE:
                isAllowed = proofGallonLimit > 0 || this.permitTable().UnlimitedProofGallons;
                if (!isAllowed)
                {
                    error("@GGI:PermitHasInvalidProofGallonLimit");
                }
                break;
            case TTBAlcoholType::SDA:
                isAllowed = wineGallonLimit > 0 || this.permitTable().UnlimitedWineGallons;
                if (!isAllowed)
                {
                    error("@GGI:PermitHasInvalidWineGallonLimit");
                }
                break;
            default:
                isAllowed = wineGallonLimit == 0 && proofGallonLimit == 0;
                if (!isAllowed)
                {
                    error("@GGI:PermitHasInvalidLimit");
                }
                break;
        }

        return isAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDSPAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the DSP address may be shown on forms that have this field.
    /// </summary>
    /// <returns>
    ///     true, if the DSP address may be shown; otherwise, false.
    /// </returns>
    public boolean showDSPAddress()
    {
        return PermitRecId && this.permitTable().PermitType == TTBPermitType::DSP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>permitDSPAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding DSP address record.
    /// </summary>
    /// <param name = "_inventLocationId">
    ///     The warehouse ID. Optional.
    /// </param>
    /// <param name = "_forUpdate">
    ///     Determines if the corresponding DSP address record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding DSP address; otherwise, an empty buffer.
    /// </returns>
    public TTBPermitDSPAddress permitDSPAddress(InventLocationId _inventLocationId = InventLocationId, boolean _forUpdate = false)
    {
        return TTBPermitDSPAddress::findNaturalKey(PermitRecId, _inventLocationId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the permit is enabled.
    /// </summary>
    /// <returns>
    ///     true, if enabled; otherwise, false.
    /// </returns>
    public boolean isEnabled()
    {
        return !this.permitTable().DisablePermit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostalAddressValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the specified postal address is valid for this permit.
    /// </summary>
    /// <param name = "_postalAddressRecId">
    ///     Record ID of a postal address record.
    /// </param>
    /// <returns>
    ///     true, if valid; otherwise, false.
    /// </returns>
    public boolean isPostalAddressValid(LogisticsPostalAddressRecId _postalAddressRecId)
    {
        return (select TTBPermitAddress
                    where TTBPermitAddress.PermitTable == PermitTable.RecId
                        && TTBPermitAddress.LogisticsPostalAddress == _postalAddressRecId).RecId != 0;
   }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>