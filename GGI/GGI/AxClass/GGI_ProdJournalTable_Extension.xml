<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGI_ProdJournalTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  ProdJournalTable form extension
/// </summary>
[ExtensionOf(formStr(ProdJournalTable))]
final public class GGI_ProdJournalTable_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ProdJournalTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(ProdJournalTable, ProdJournalTable), FormDataSourceEventType::Activated)]
    public static void ProdJournalTable_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormDataSource      fds = sender.formRun().dataSource("ProdJournalTable");
        ProdJournalTable    prodJournalTable = fds.cursor();
       
        if(prodJournalTable.Posted == NoYes::Yes && !ProdParameters::find().GGIProdJournalDelete)
        {
            fds.allowDelete(false);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdJournalTable_Pre_delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles record deletion validation
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(ProdJournalTable), tableMethodStr(ProdJournalTable, delete))]
    public static void ProdJournalTable_Pre_delete(XppPrePostArgs args)
    {
        ProdJournalTable prodJournalTable = args.getThis() as ProdJournalTable;
        if(prodJournalTable.Posted == NoYes::Yes && !ProdParameters::find().GGIProdJournalDelete)
        {
            throw error(strFmt("@GGI:ProdJournalDelete"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdJournalBOM_Pre_delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles record deletion validation
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(ProdJournalBOM), tableMethodStr(ProdJournalBOM, delete))]
    public static void ProdJournalBOM_Pre_delete(XppPrePostArgs args)
    {
        ProdJournalBOM prodJournalBOM = args.getThis() as ProdJournalBOM;
        if(prodJournalBOM.isPosted() && !ProdParameters::find().GGIProdJournalDelete)
        {
            throw error(strFmt("@GGI:ProdJournalDelete"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdJournalRoute_Pre_delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles record deletion validation
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(ProdJournalRoute), tableMethodStr(ProdJournalRoute, delete))]
    public static void ProdJournalRoute_Pre_delete(XppPrePostArgs args)
    {
        ProdJournalRoute prodJournalRoute = args.getThis() as ProdJournalRoute;
        if(prodJournalRoute.isPosted() && !ProdParameters::find().GGIProdJournalDelete)
        {
            throw error(strFmt("@GGI:ProdJournalDelete"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProdJournalProd_Pre_delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles record deletion validation
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(ProdJournalProd), tableMethodStr(ProdJournalProd, delete))]
    public static void ProdJournalProd_Pre_delete(XppPrePostArgs args)
    {
        ProdJournalProd prodJournalProd = args.getThis() as ProdJournalProd;
        if(prodJournalProd.isPosted() && !ProdParameters::find().GGIProdJournalDelete)
        {
            throw error(strFmt("@GGI:ProdJournalDelete"));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>