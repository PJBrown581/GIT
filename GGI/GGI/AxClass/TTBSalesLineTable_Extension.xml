<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBSalesLineTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     TTB customizations for the <c>SalesLine</c> table.
/// </summary>
[ExtensionOf(tableStr(SalesLine))]
final class TTBSalesLineTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modified field event.
    /// </summary>
    /// <param name = "_fieldId">
    ///     ID of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        next modifiedField(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(SalesLine, ItemId):
            case fieldNum(SalesLine, SalesQty):
                SalesLine salesLineOrig = this.orig();
                if (salesLineOrig.SalesQty != this.SalesQty)
                {
                    this.TTBLineTable::modifiedField(fieldNum(TTBLineTable, Qty));
                    // If this is a data source on a form, then refresh.
                    if (FormDataUtil::isFormDataSource(this))
                    {
                        FormDataSource ds = FormDataUtil::getFormDataSource(this);
                        int pos = ds.getPosition();
                        ds.write();
                        ds.research(true);
                        ds.setPosition(pos);
                    }
                }                
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the record to the database.
    /// </summary>
    /// <param name="_dropInvent">
    ///     Determines if inventory processing of the sales line should be skipped.
    /// </param>
    /// <param name="_findMarkup">
    ///     Determines if charges should be automatically created.
    /// </param>
    /// <param name="_childBuffer">
    ///     A child buffer for the inventory movement object.
    /// </param>
    /// <param name="_skipCreditLimitCheck">
    ///     Determines if the credit limit check should be skipped.
    /// </param>
    /// <param name="_skipWHSProcesses">
    ///     Determines if the WHS processes should be skipped.
    /// </param>
    /// <param name="_interCompanyInventTransId">
    ///     An intercompany inventory transaction ID.
    /// </param>
    public void insert(boolean _dropInvent, boolean _findMarkup, Common _childBuffer, boolean _skipCreditLimitCheck, boolean _skipWHSProcesses, InventRefTransId _interCompanyInventTransId)
    {
        this.TTBLineTable::setQuantities();

        next insert(_dropInvent, _findMarkup, _childBuffer, _skipCreditLimitCheck, _skipWHSProcesses, _interCompanyInventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the record in the databse.
    /// </summary>
    /// <param name="_dropInvent">
    ///     Determines if inventory processing of the sales line should be skipped.
    /// </param>
    /// <param name = "_childBuffer">
    ///     A child buffer for the inventory movement object.
    /// </param>
    /// <param name = "_updateOrderLineOfDeliverySchedule">
    ///     Not supported.
    /// </param>
    /// <param name = "_mcrAutoallocate">
    ///     Not supported.
    /// </param>
    /// <param name = "_cameFromCreate">
    ///     Not supported.
    /// </param>
    /// <param name = "_promptSuppItem">
    ///     Not supported.
    /// </param>
    public void update(boolean _dropInvent, Common _childBuffer, boolean _updateOrderLineOfDeliverySchedule, boolean _mcrAutoallocate, boolean _cameFromCreate, boolean _promptSuppItem)
    {
        SalesLine salesLineOrig = this.orig();
        if (salesLineOrig.SalesQty != this.SalesQty || salesLineOrig.ItemId != this.ItemId || salesLineOrig.SalesUnit != this.SalesUnit)
        {
            this.TTBLineTable::setQuantities();
        }
        

        next update(_dropInvent, _childBuffer, _updateOrderLineOfDeliverySchedule, _mcrAutoallocate, _cameFromCreate, _promptSuppItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>SalesLine</c> table buffer based on another <c>SalesLine</c> table buffer.
    /// </summary>
    /// <param name="_salesLine">
    ///    The <c>SalesLine</c> table buffer that is to be copied.
    /// </param>
    /// <param name="_copyPrecisely">
    ///    A Boolean value that specifies whether to precisely copy all the account and tax details; optional.
    /// </param>
    /// <param name="_copyPriceDisc">
    ///    A Boolean value that specifies whether to copy the price discount fields; optional.
    /// </param>
    /// <param name="_copyQty">
    ///    A Boolean value that specifies whether to copy the quantify information; optional.
    /// </param>
    /// <param name="_qty">
    ///    A <c>quantity</c> object that sets the <c>SalesQty</c> field value of the new <c>SalesLine</c>
    ///    table buffer to be different than value of the other table buffer; optional.
    /// </param>
    /// <param name="_cwQty">
    ///    A catch weight quantity; optional.
    /// </param>
    public void initFromSalesLine(SalesLine _salesLine, boolean _copyPrecisely, boolean _copyPriceDisc, boolean _copyQty, Qty _qty, PdsCWInventQty _cwQty)
    {
        next initFromSalesLine(_salesLine, _copyPrecisely, _copyPriceDisc, _copyQty, _qty, _cwQty);

        this.TTBLineTable::setQuantities();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>