<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocSalesInvoiceReportDSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Replica of the Docentric Sales Invoice DSP class.
/// </summary>
class GGIDocSalesInvoiceReportDSP extends DocDataSourceProviderSrsProforma
{
    SalesInvoiceTmp                         salesInvoiceLineWithHeaderFields;
    SalesInvoiceHeaderFooterTmp             salesInvoiceHeaderFlagFields;
    LogisticsAddressCountryRegionISOCode    isoCountryCode;
    SalesInvoiceContract                    salesInvoiceContract;
    boolean                                 showPrepaidTotals, showCustPaymSched;
    SalesTable                              salesTable;
    HcmWorker                               hcmWorker;
    DimensionAttributeValueSetStorage       dimStorage;
    DimensionValue                          dimensionValue;
    DimensionDefault                        defaultDimension;
    OMOperatingUnit                         omOperatingUnit;
    int                                     j;
    WHSShipmentTable                        WHSShipmentTable;
    
    /* Variables for custom placeholders */
    str         placeholder_invoiceId;
    str         placeholder_salesId;
    str         placeholder_invoiceAccount;
    str         placeholder_invoicingName;
    str         placeholder_contactName;
    str         placeholder_custRef;
    date        placeholder_invoiceDate;
    date        placeholder_dueDate;
    str         placeholder_paymentCondition;
    str         placeholder_orderAccountPrimaryEmail;
    str         placeholder_orderAccountInvoicePurposeEmail;

    #ISOCountryRegionCodes

    #define.SalesInvoiceHeader('SalesInvoiceHeader')
    #define.SalesInvoiceHeaderExt('SalesInvoiceHeaderExt')

    #define.SalesInvoiceLines('SalesInvoiceLines')
    #define.TaxLines('SalesInvoiceLines_Tax')
    #define.TaxWithholdLines('SalesInvoiceLines_TaxWithhold')
    #define.PrepayedLines('SalesInvoiceLines_Prepayed')
    #define.PaymSchedLines('SalesInvoiceLines_PaymSched')
    #define.MarkupTransLines('MarkupTrans')
    #define.MarkupLines('SalesInvoiceLines_Markup')
    #define.PackingMaterialLines('SalesInvoiceLines_PackingMaterial')
    #define.BackorderLines('SalesInvoiceLines_Backorder')
    #define.PaymentStubLines('SalesInvoicePaymentStubTmp')

    #define.SalesInvoiceLinesLocalization('SalesInvoiceLocalizationLines')    
    #define.Hyphon                      (' - ')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns product categorey information.
    /// </summary>
    /// <param name = "_itemId">
    ///     Order line itemid
    /// </param>
    /// <returns>
    ///     Returns product categorey information
    /// </returns>
    String255 getProductCategory(ItemId _itemId)
    {
        EcoResProductCategory   ecoResProductCategory;
        EcoResCategory          ecoResCategory;
        String255               res = '';
        EcoResCategoryDescription categoryDescription;
        RecId                   productRecid;
        EcoResCategoryHierarchyName hierarchyName;

        productRecid = InventTable::find(_itemId).Product;

        while select EcoResProductCategory
            where EcoResProductCategory.Product == productRecid
        {
            select firstonly EcoResCategory
                where EcoResCategory.RecId == EcoResProductCategory.Category;

            hierarchyName = ecoResCategoryHierarchy::find(EcoResProductCategory.CategoryHierarchy).Name;
            categoryDescription = EcoResCategory.Name;

            if (res)
            {
                res += ', ';
            }
            res += hierarchyName + #Hyphon + categoryDescription;
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add data points for the sales invoice header.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the data points for the header.
    /// </param>
    /// <param name = "_header">
    ///     Native record of the header.
    /// </param>
    protected void addDataFieldsForHeader(DocXmlRecord _addingRecord, SalesInvoiceHeaderFooterTmp _header)
    {
        /* This method contains all fields from the SalesInvoiceHeaderFooterTmp table */
        void addFieldsFromSalesInvoiceHeaderFooterTmp()
        {
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, BankSpecificSymbol));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, BuyerAddress));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, BuyerEnterpriseCode));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, BuyerName));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyDebitDirectId));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, ConstantSymbol));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, ContactPersonName));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CorrectedInvoiceId));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CorrectiveReasonHeader));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CustomerBankAccount));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CustomerBankName));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CustomerRef));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, DocumentDate));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, DuplicateDate));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, DuplicateNum));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, EnterpriseNumber));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, Enterpriseregister_NO));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, Iban));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceAccount));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceDate));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceReferenceNumber));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceTxt));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceTxtSequel));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoicingAddress));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoicingName));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, Listcode));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, NotesLine_FR));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, OriginalInvoiceAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, OriginalInvoiceReference));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, OriginalVatAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, PayerEnterpriseCode));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, PaymentCondition));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, PaymentReference));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, PaymId));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, PurchaseOrder));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, Reference));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SalesAdministrator));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SalesAdministratorEmail));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SalesAdministratorPhone));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SalesDate));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SalesId));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SpecialFormattedDocumentDate));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SpecialFormattedInvoiceDate));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SpecialFormattedPrintDate));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, SwiftNumber));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, TaxLicenseNum));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, VatNum));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, VatDueDate_W));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, PayerRegNum_W));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, BuyerRegNum_W));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, MCRDlvMode));
            _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, MCRDlvTerm));
            _addingRecord.addCalculatedField('MCRDlvModeText', DlvMode::find(_header.MCRDlvMode).Txt);
            _addingRecord.addCalculatedField('MCRDlvTermText', DlvTerm::find(_header.MCRDlvTerm).Txt);


            /* CONTROL FLEGS AND SPECIAL FORMATTING DATA */
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, JournalRecId));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CustInvoiceRefNum_FI));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowCompanyVATNum));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowCurrencyBankAccount));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowPayer));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, IsPaymIdVisible));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, PrintFreeTextInvoiceVATNum));

            // Group and add flags to the SalesInvoiceHeaderExt record in the generateXmlDataSource() method,
            // with other flags that come from the SalesInvoiceTmp table.
            buf2Buf(_header, salesInvoiceHeaderFlagFields);


            /* COUNTRY REGION RELATED DATA */
            switch (isoCountryCode)
            {
                case #isoTH:
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyBranch_TH));
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceBranch_TH));
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceTaxNatureOfAddress_TH));
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceTaxRegNumber_TH));
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceTxtNote_TH));     // NOTE: Available from the July 2017 version.
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CustomerPhone_TH));      // NOTE: Available from the July 2017 version.
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CustomerTeleFax_TH));    // NOTE: Available from the July 2017 version.
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceBranchName_TH));  // NOTE: Available from the July 2017 version.
                    break;

                case #isoMY:
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, GSTReasonCode_MY));
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, GSTReliefClause_MY));
                    _addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, InvoiceType_MY));
                    break;
            }

            /* COMPANY RELATED DATA */
            // NOTE: The company data are excluded since we have them in the GeneralData data section.
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyAddress));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyBankAccount));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyBankName));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyCommercialRegister));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyCommercialRegisterInsetNumber));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyCommercialRegisterSection));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyCoRegNum));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyCurrencyBankAccount));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyCurrencyBankName));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyCurrencyCode));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyEmail));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyEnterpriseCode));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyEnterpriseNumber));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyGiro));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyLogo));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyName));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyPhone));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyRegNum));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyTeleFax));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyURL));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyVATNum));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyRegComFR));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyLegalFormFR));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyInitialCapital_FR));
            //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, CompanyIdNAF));
        }


        // (1) Change the name of the adding record from 'SalesInvoiceHeaderFooterTmp'
        // to a more readable name, e.g. 'SalesInvoiceHeader'.
        _addingRecord.setRecordName(#SalesInvoiceHeader);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Invoice header');  // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.


        // (2) Add the needed fields from the SalesInvoiceHeaderFooterTmp table.
        addFieldsFromSalesInvoiceHeaderFooterTmp();


        // (3) Add Sales order email and Customer primary email.
        _addingRecord.addCalculatedField('OrderEmail', salesTable.Email);
        _addingRecord.addCalculatedField('CustomerEmail', salesTable.custTable_InvoiceAccount().email());


        // Add here all your custom (extension) fields from the SalesInvoiceHeaderFooterTmp table, if any.
        // For example:
        //_addingRecord.addField(fieldStr(SalesInvoiceHeaderFooterTmp, YourCustomFieldName));


        // Add here additional fields (or records) to the single header record by using the related
        // data to the _header table buffer (SalesInvoiceHeaderFooterTmp) or reportContract.
        // For example, get the related CustInvoiceJour record and add additional data you need:
        //CustInvoiceJour custInvoiceJour = this.custInvoiceJour();
        //DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custInvoiceJour);
        //jourDataRecord.addField(fieldStr(CustInvoiceJour, DeliveryName));
        //jourDataRecord.addDisplayMethod(tableMethodStr(CustInvoiceJour, isSummaryUpdated));
        // Or, add the customer payment type:
        //_addingRecord.addCalculatedField('CustomerPaymentType', CustTable::find(_header.InvoiceAccount).paymentType());


        // Add here custom fields, e.g. for the related SalesTable or CustTable.
        // Custom fields: https://docs.microsoft.com/en-us/dynamics365/unified-operations/fin-and-ops/get-started/user-defined-fields
        //DocCustomFieldsHelper::addAllCustomFieldsToDataRecord(salesTable, _addingRecord);
        //DocCustomFieldsHelper::addCustomFieldsToDataRecord(['CustomFieldName1', 'CustomFieldName2'], salesTable, _addingRecord);
        //DocCustomFieldsHelper::addCustomFieldToDataRecord('CustomFieldName', salesTable, _addingRecord);
        
        TTBPermitTable  permitTable = salesTable.ttbPermitTable();
        GGICustAuthDisclaimerAddressTable  authTable = salesTable.ggiCustAuthTable();
        TMSSalesTable   tmsSalesTable = TMSSalesTable::find(salesTable.SalesId);
        DocXmlRecord    docPermit = _addingRecord.addChildCalculatedRecord('Permit');
        DocXmlRecord    docAuth = _addingRecord.addChildCalculatedRecord('Authorisation');
        CustTable custTable = CustTable::find(salesTable.InvoiceAccount);
        ContactPerson contactPerson = ContactPerson::find(custTable.ContactPersonId);
        MarkupTrans markUpTrans;

        docPermit.addCalculatedFieldFromEdt('Id', extendedTypeStr(TTBPermitId), permitTable.PermitId);
        docPermit.addCalculatedFieldFromEnum('Type', enumStr(TTBPermitType), permitTable.PermitType);
        docPermit.addCalculatedFieldFromEdt('DSPSerialId', extendedTypeStr(TTBApprovalSerialNum), salesTable.TTBDSPApprovalSerialId);
        docPermit.addCalculatedField('DSPApprovalDate', date2str(salesTable.TTBDSPApprovalDate,321,DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4));        
        docPermit.addCalculatedFieldFromEdt('TransferBondShipmentId', extendedTypeStr(TTBTransferBondShipmentId), salesTable.TTBTransferBondShipmentId);
        docPermit.addCalculatedFieldFromEdt('TaxPaidShipmentNumber', extendedTypeStr(TTBTaxPaidShipmentId), salesTable.TTBTaxPaidShipmentId);
        
        docAuth.addCalculatedFieldFromEdt('Code', extendedTypeStr(GGIAuthDisclaimerCode), GGIAuthDisclaimerTable::find(authTable.GGIAuthKey).Code);
        docAuth.addCalculatedFieldFromEdt('Number', extendedTypeStr(Num), authTable.Num);


        _addingRecord.AddCalculatedFieldFromEdt('DeliveryName', extendedTypeStr(LogisticsAddressing), salesTable.DeliveryName);
        _addingRecord.AddCalculatedFieldFromEdt('DeliveryAddress', extendedTypeStr(LogisticsAddressing), salesTable.deliveryAddressing());
        _addingRecord.AddCalculatedFieldFromEdt('OrderDate', extendedTypeStr(CreationDate), salesTable.createDate());
        _addingRecord.AddCalculatedFieldFromEdt('ShipCarrier', extendedTypeStr(ShipCarrierAccountCode), tmssalesTable.carriercode);   
        _addingRecord.addCalculatedField('SalesDistrict', custTable.SalesDistrictId);
        _addingRecord.addCalculatedField('PrimaryContact', contactPerson.personName());
        _addingRecord.AddCalculatedFieldFromEdt('TTBExciseInvoice', extendedTypeStr(TTBExciseTaxInoice), custTable.TTBExciseTaxInoice);
        _addingRecord.AddCalculatedFieldFromEdt('TTBExcisePaymTerm', extendedTypeStr(TTBExciseTaxPaymTerm), custTable.TTBExciseTaxPaymTerm);
        _addingRecord.AddCalculatedFieldFromEdt('TTBExciseTaxAmount', extendedTypeStr(LineAmount), GGI_ExciseTaxManager::GetExciseTaxAmount(salesTable.SalesId));
        
        CustInvoiceJour custInvoiceJour = this.custInvoiceJour();
        DocXmlRecord jourDataRecord = _addingRecord.addChildRecord(custInvoiceJour);
        jourDataRecord.addField(fieldStr(CustInvoiceJour, DueDate));
        jourDataRecord.addField(fieldStr(CustInvoiceJour, CashDiscDate));
        jourDataRecord.addField(fieldStr(CustInvoiceJour, Payment));
        jourDataRecord.addField(fieldStr(CustInvoiceJour, DlvTerm));
        
        select firstonly whsShipmentTable
            where whsShipmentTable.OrderNum == salesTable.SalesId;

        WHSBillOfLading whsBilloflading = whsBilloflading::find(WHSShipmentTable.BillOfLadingId);

        _addingRecord.AddCalculatedFieldFromEdt('ShipNo', extendedTypeStr(WHSOrderNum), WHSShipmentTable.BillOfLadingId);        
        _addingRecord.AddCalculatedFieldFromEdt('ShipDate', extendedTypeStr(SalesShippingDate), DateTimeUtil::date(WHSShipmentTable.ShipConfirmUTCDateTime));//WHSBillOfLading.CreatedDateTime));
   
        this.addMarkupTrans(_addingRecord, this.custInvoiceJour());
     
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the markup transaction data points.
    /// </summary>
    /// <param name = "_dataRecord">
    ///     Docentric record to contain the markup transactions data points.
    /// </param>
    /// <param name = "_tableRecord">
    ///     A buffer to get the corresponding markup transactions from.
    /// </param>
    protected void addMarkupTrans(DocXmlRecord _dataRecord, Common _tableRecord)
    {
        void addMarkupTransDataRecord(MarkupTrans _markupTrans)
        {
            DocXmlRecord markupTransDataRecord = _dataRecord.addChildRecord(_markupTrans);
            markupTransDataRecord.addField(fieldStr(MarkupTrans, LineNum));

            markupTransDataRecord.addField(fieldStr(MarkupTrans, MarkupCode));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, Txt));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, Value));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, CurrencyCode));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, TaxGroup));
            markupTransDataRecord.addField(fieldStr(MarkupTrans, TaxItemGroup));
        }

        MarkupTrans markupTrans;
        boolean markupTransDataRecordAdded = false;

        while select markupTrans
              where markupTrans.TransRecId == _tableRecord.RecId &&
                    markupTrans.TransTableId == _tableRecord.TableId &&
                    !markupTrans.IsDeleted
        {
            addMarkupTransDataRecord(markupTrans);
            markupTransDataRecordAdded = true;
        }

        // Add an empty record but only at design time, if no markup record exists.
        if (!this.isRuntime() && !markupTransDataRecordAdded)
        {
            markupTrans.clear();
            addMarkupTransDataRecord(markupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the data points for the sales invoice line.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the sales invoice line data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     A buffer containing the details of the sales invoice line.
    /// </param>
    protected void addDataFieldsForLine(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine)
    {
        // (1) Store the first SalesInvoiceTmp record into a global variable. It will be used later,
        // in the generateXmlDataSource() method, to add fields that should be 'moved' to the header.
        if (salesInvoiceLineWithHeaderFields.RecId == 0)
        {
            buf2Buf(_currentLine, salesInvoiceLineWithHeaderFields);
            salesInvoiceLineWithHeaderFields.RecId = _currentLine.RecId;
        }

        // (2) Add the needed fields from the SalesInvoiceTmp table.
        // NOTE: EXCLUDE all fields you don't need on the report in the methods that
        // follow for the sake of maintenance. From these methods EXCLUDE all unnecessary fields
        // likewise INCLUDE additional fields you may need.

        // Add the data fields that originate from the related CustInvoiceTrans record.
        if (this.sil_addMainLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        /*****  Fields that represent different types of lines  *****/
        // 1) TaxLines
        if (this.sil_addTaxTransLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 2) TaxWithholdLines
        if (this.sil_addTaxWithholdLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 3) PrepayedLines
        if (this.sil_addCustTransLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 4) PaymSchedLines
        if (this.sil_addPaymSchedLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 5) MarkupLines
        if (this.sil_addMarkupLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 6) PackingMaterialLines
        if (this.sil_addPackMaterialLines(_addingRecord, _currentLine, false))
        {
            return;
        }

        // 7) BackorderLines
        if (this.sil_addBackorderLines(_addingRecord, _currentLine, false))
        {
            return;
        }   

        if (!this.isRuntime())
        {
            _addingRecord.setRecordName('SalesInvoiceLine_UnsupportedType');
            _addingRecord.addAllFields();
            DocGlobalHelper::handleWarning('Unsupported type of the SalesInvoiceTmp line');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForLocalizationLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add international data points for sales invoice line.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the sales invoice line data points.
    /// </param>
    /// <param name = "_currentLocalizationLine">
    ///     A buffer containing the details of the sales invoice line.
    /// </param>
    /// <remarks>
    ///     International covers the following countries or regions: EE, LT, HU, LV, CZ, and PL.
    /// </remarks>
    protected void addDataFieldsForLocalizationLine(DocXmlRecord _addingRecord, SalesInvoiceLocalizationTmp _currentLocalizationLine)
    {
        // Change the name of the adding record from 'SalesInvoiceLocalizationTmp'
        // to a more readable name, e.g. 'SalesInvoiceLinesLocalization'.
        _addingRecord.setRecordName(#SalesInvoiceLinesLocalization);
        // Change the label of the record.
        _addingRecord.setRecordLabel('Invoice localization line');  // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.
        _addingRecord.addAllFields();

        // NOTE: SalesInvoiceLocalizationTmp is used only for the following countries:
        // #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL.
        // This method never gets executed for a contry outside this list.
        // In that case this method should be removed.
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for an RDP data source.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the data points.
    /// </param>
    /// <param name = "_rdpTableRecord">
    ///     RDP data source.
    /// </param>
    /// <param name = "_rdpTableName">
    ///     RDP data source name.
    /// </param>
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        if (_rdpTableName == tableStr(SalesInvoiceHeaderFooterTmp))
        {
            this.addDataFieldsForHeader(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(SalesInvoiceTmp))
        {
            this.addDataFieldsForLine(_addingRecord, _rdpTableRecord);
        }
        else if (_rdpTableName == tableStr(SalesInvoiceLocalizationTmp))
        {
            this.addDataFieldsForLocalizationLine(_addingRecord, _rdpTableRecord);
        }
        else
        {
            super(_addingRecord, _rdpTableRecord, _rdpTableName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Class description.
    /// </summary>
    /// <returns>
    ///     The class description.
    /// </returns>
    public ClassDescription description()
    {
        return 'Sales Invoice DSP';
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXmlDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the XML data source(s).
    /// </summary>
    /// <param name = "_recordBuilder">
    ///     A record builder cursor.
    /// </param>
    protected void generateXmlDataSource(DocXmlRecordBuilder _recordBuilder)
    {
            
        SalesInvoiceTmp             salesInvoiceTmpEmptyFields;
        SalesInvoicePaymentStubTmp  salesInvoicePaymentStubTmpEmptyFields;
        DocXmlRecord                salesInvoiceTmpEmptyFieldsDataRecord, headerExtDataRecord;


        // Build the internal record tree from the built-in report RDP tables.
        super(_recordBuilder);


        // (1) Add all fields from SalesInvoiceTmp which should be moved to the header
        // (but only if this is not a localization case where regular lines are excluded from DS)
        if (salesInvoiceLineWithHeaderFields.RecId != 0)
        {
            _recordBuilder.goToTopRecord();
            headerExtDataRecord = _recordBuilder.addRecord(salesInvoiceLineWithHeaderFields);
            // Rename the record from 'SalesInvoiceTmp' to 'SalesInvoiceHeaderExt'.
            headerExtDataRecord.setRecordName(#SalesInvoiceHeaderExt);
            // Change the label of the record.
            headerExtDataRecord.setRecordLabel('Invoice header extended'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.
            // Add all 'header' fields from the stored line record.
            this.sih_addDataFieldsForHeaderExt(headerExtDataRecord);
        }

        // (2) If this is design time, add all empty type of lines that haven't been already added.
        _recordBuilder.goToTopRecord();
        if (!this.isRuntime() && salesInvoiceLineWithHeaderFields.RecId != 0)
        {
            salesInvoiceTmpEmptyFields.clear();

            // Main lines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#SalesInvoiceLines) == null)
            {
                salesInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(salesInvoiceTmpEmptyFields);
                this.sil_addMainLines(salesInvoiceTmpEmptyFieldsDataRecord, salesInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // TaxLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#TaxLines) == null)
            {
                salesInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(salesInvoiceTmpEmptyFields);
                this.sil_addTaxTransLines(salesInvoiceTmpEmptyFieldsDataRecord, salesInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // TaxWithholdLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#TaxWithholdLines) == null)
            {
                salesInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(salesInvoiceTmpEmptyFields);
                this.sil_addTaxWithholdLines(salesInvoiceTmpEmptyFieldsDataRecord, salesInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // PrepayedLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#PrepayedLines) == null)
            {
                salesInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(salesInvoiceTmpEmptyFields);
                this.sil_addCustTransLines(salesInvoiceTmpEmptyFieldsDataRecord, salesInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // PaymSchedLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#PaymSchedLines) == null)
            {
                salesInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(salesInvoiceTmpEmptyFields);
                this.sil_addPaymSchedLines(salesInvoiceTmpEmptyFieldsDataRecord, salesInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // MarkupLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#MarkupLines) == null)
            {
                salesInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(salesInvoiceTmpEmptyFields);
                this.sil_addMarkupLines(salesInvoiceTmpEmptyFieldsDataRecord, salesInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            } 
            // PackingMaterialLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#PackingMaterialLines) == null)
            {
                salesInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(salesInvoiceTmpEmptyFields);
                this.sil_addPackMaterialLines(salesInvoiceTmpEmptyFieldsDataRecord, salesInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // BackorderLines.
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#BackorderLines) == null)
            {
                salesInvoiceTmpEmptyFieldsDataRecord = _recordBuilder.addRecord(salesInvoiceTmpEmptyFields);
                this.sil_addBackorderLines(salesInvoiceTmpEmptyFieldsDataRecord, salesInvoiceTmpEmptyFields, true);
                _recordBuilder.goToTopRecord();
            }

            // SalesInvoicePaymentStubTmp
            if (_recordBuilder.currentRecord().getFirstChildRecordByName(#PaymentStubLines) == null)
            {
                _recordBuilder.addRecord(salesInvoicePaymentStubTmpEmptyFields).addAllFields();
                _recordBuilder.goToTopRecord();
            }
        }

        // Check the resulting XML.
        //info(_recordBuilder.exportToXmlStr());
        //_recordBuilder.exportToXmlFile("ReportMainData.xml");
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunGenerateDS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialization method called before the Docentric data source(s) is generated.
    /// </summary>
    protected void preRunGenerateDS()
    {
        super();

        // Initialize here the class global variables.
        salesInvoiceLineWithHeaderFields.clear();
        salesInvoiceHeaderFlagFields.clear();
        showPrepaidTotals = false;
        showCustPaymSched = false;

        salesInvoiceContract = this.getSrsRdpContract();
        isoCountryCode = SysCountryRegionCode::countryInfo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proformaReportStoragePrefix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a prefix for a proforma sales confirmation.
    /// </summary>
    /// <returns>
    ///     The prefix for a proforma sales confirmation.
    /// </returns>
    protected str proformaReportStoragePrefix()
    {
        return DocConstantDSP::Prefix_SalesInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding sales invoice journal.
    /// </summary>
    /// <returns>
    ///     The corresponding sales invoice journal.
    /// </returns>
    protected CustInvoiceJour custInvoiceJour()
    {
        if (!journal)
        {
            if (this.isProforma())
            {
                journal = this.getProformaJournal();
            }
            else
            {
                journal = CustInvoiceJour::findRecId(journalRecId);
            }
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a customer invoice journal line record based on the specified record ID.
    /// </summary>
    /// <param name = "_custInvoiceTransRecId">
    ///     Record ID of a customer invoice journal line.
    /// </param>
    /// <returns>
    ///     A customer invoice journal line record; otherwise, an empty buffer.
    /// </returns>
    protected CustInvoiceTrans custInvoiceTrans(RecId _custInvoiceTransRecId)
    {
        CustInvoiceTrans custInvoiceTrans;

        if (this.isProforma())
        {
            custInvoiceTrans = this.getProformaTransLine(_custInvoiceTransRecId);
        }
        else
        {
            custInvoiceTrans = CustInvoiceTrans::findRecId(_custInvoiceTransRecId);
        }

        return custInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sih_addDataFieldsForHeaderExt</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds additional data points for the header.
    /// </summary>
    /// <param name = "_headerExtDataRecord">
    ///     Docentric record to contain the additional data points.
    /// </param>
    protected void sih_addDataFieldsForHeaderExt(DocXmlRecord _headerExtDataRecord)
    {
        DocXmlRecord childRecord;

        /*****  Fields that are moved to the extended invoice header  *****/
        /* IDs */
        _headerExtDataRecord.addField(fieldStr(SalesInvoiceTmp, InvoiceId));
        _headerExtDataRecord.addField(fieldStr(SalesInvoiceTmp, TaxInvoiceSalesId));

        /* Flags */
        childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
        childRecord.setRecordName('Flags');
        childRecord.setRecordLabel('Flags');

        // Fix the ShowPrepaidTotals flag since it is set only in the CustTrans ('prepaid') lines.
        // For that use the stored value in the showPrepaidTotals variable.
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowPrepaidTotals))
               .setFieldValue(showPrepaidTotals);
        
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowPrepaidTotalsEuro))
               .setFieldValue(showPrepaidTotals && salesInvoiceLineWithHeaderFields.PrintEuroTotals);

        // Fix the ShowCustPaymSched flag since it is set only in the PaymSchedLines lines.
        // For that use the stored value in the showCustPaymSched variable.
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowCustPaymSched))
               .setFieldValue(showCustPaymSched);

        childRecord.addField(fieldStr(SalesInvoiceTmp, IsTaxAmountMSTVisible));
        childRecord.addField(fieldStr(SalesInvoiceTmp, IsCreditInvoicingReportEnabled));
        childRecord.addField(fieldStr(SalesInvoiceTmp, IsInvoiceRefVisible));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowCashDiscOnInvoiceControls));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowSepaNotification));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowPayment));

        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowTotals));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowTotalsEuro));

        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowTotalsTaxBalances));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowGiro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowLocalCurAmt));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ShowTotalsTaxBalancesEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ConfigIdFlag));
        childRecord.addField(fieldStr(SalesInvoiceTmp, InventColorIdFlag));
        childRecord.addField(fieldStr(SalesInvoiceTmp, InventSizeIdFlag));
        childRecord.addField(fieldStr(SalesInvoiceTmp, InventStyleIdFlag));
        childRecord.addField(fieldStr(SalesInvoiceTmp, PrintEuroTotals));
        childRecord.addField(fieldStr(SalesInvoiceTmp, PrintFreeTextInvoiceVATNum));
        // childRecord.addField(fieldStr(SalesInvoiceTmp, TaxPrintTaxFreeBalance)); -> This field never gets filled.
        childRecord.addField(fieldStr(SalesInvoiceTmp, IsCreditInvoicingReportEnabled_W));

        /* Add flags from the SalesInvoiceHeaderFooterTmp table */
        // We stored these flags in the addDataFieldsForHeader method into the salesInvoiceHeaderFlagFields variable.
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, CustInvoiceRefNum_FI),
            salesInvoiceHeaderFlagFields.CustInvoiceRefNum_FI ? true : false);
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowCompanyVATNum),
            salesInvoiceHeaderFlagFields.ShowCompanyVATNum ? true : false);
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowCurrencyBankAccount),
            salesInvoiceHeaderFlagFields.ShowCurrencyBankAccount ? true : false);
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, ShowPayer),
            salesInvoiceHeaderFlagFields.ShowPayer ? true : false);
        childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, IsPaymIdVisible),
            salesInvoiceHeaderFlagFields.IsPaymIdVisible ? true : false);
        //childRecord.addCalculatedField(fieldStr(SalesInvoiceHeaderFooterTmp, PrintFreeTextInvoiceVATNum),
        //salesInvoiceHeaderFlagFields.PrintFreeTextInvoiceVATNum ? true : false); -> already added from SalesInvoiceTmp

        /* Currencies */
        childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
        childRecord.setRecordName('Currencies');
        childRecord.setRecordLabel('Currencies');
        childRecord.addField(fieldStr(SalesInvoiceTmp, CustInvoiceJourCurrencyCode));
        childRecord.addField(fieldStr(SalesInvoiceTmp, EuroCurrencyCode));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ExchRate));
        childRecord.addField(fieldStr(SalesInvoiceTmp, StandardCurrency));
        childRecord.addField(fieldStr(SalesInvoiceTmp, CurrencySymbol));

        /* Dates */
        childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
        childRecord.setRecordName('Dates');
        childRecord.setRecordLabel('Dates');
        childRecord.addField(fieldStr(SalesInvoiceTmp, CustInvoiceJourDueDate));
        childRecord.addField(fieldStr(SalesInvoiceTmp, DateOfCreation));

        /* Amounts */
        childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
        childRecord.setRecordName('Amounts');
        childRecord.setRecordLabel('Amounts');
        childRecord.addField(fieldStr(SalesInvoiceTmp, InvoiceAmount));
        childRecord.addField(fieldStr(SalesInvoiceTmp, InvoiceAmountEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, InvoiceAmountMST));
        childRecord.addField(fieldStr(SalesInvoiceTmp, PrepaidAmount));
        childRecord.addField(fieldStr(SalesInvoiceTmp, PrepaidAmountEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, RemainAmountToBePaid));
        childRecord.addField(fieldStr(SalesInvoiceTmp, RemainAmountToBePaidEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, SalesBalance));
        childRecord.addField(fieldStr(SalesInvoiceTmp, SalesBalanceEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, SalesBalanceMST));
        childRecord.addField(fieldStr(SalesInvoiceTmp, SumTax));
        childRecord.addField(fieldStr(SalesInvoiceTmp, SumTaxEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, SumTaxMST));
        childRecord.addField(fieldStr(SalesInvoiceTmp, NetAmount));
        childRecord.addField(fieldStr(SalesInvoiceTmp, NetAmountEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, EndDisc));
        childRecord.addField(fieldStr(SalesInvoiceTmp, EndDiscEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, SumMarkup));
        childRecord.addField(fieldStr(SalesInvoiceTmp, SumMarkupEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, InvoiceRoundOff));
        childRecord.addField(fieldStr(SalesInvoiceTmp, InvoiceRoundOffEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, TaxableBalance));
        childRecord.addField(fieldStr(SalesInvoiceTmp, TaxableBalanceEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, TaxFreeBalance));
        childRecord.addField(fieldStr(SalesInvoiceTmp, TaxFreeBalanceEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, CashDisc));
        childRecord.addField(fieldStr(SalesInvoiceTmp, CashDiscEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ReverseChargeJournal));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ReverseChargeAmount));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ReverseChargeAmountEuro));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ReverseChargeBalance));
        childRecord.addField(fieldStr(SalesInvoiceTmp, ReverseChargeBalanceEuro));
        
        /* Mandate fields */
        childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
        childRecord.setRecordName('MandateFields');
        childRecord.setRecordLabel('Mandate fields');
        childRecord.addField(fieldStr(SalesInvoiceTmp, MandateBankIBAN));
        childRecord.addField(fieldStr(SalesInvoiceTmp, MandateReference));
        childRecord.addField(fieldStr(SalesInvoiceTmp, MandateSWIFTNo));

        /* Notes and labels */
        childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
        childRecord.setRecordName('NotesAndLabels');
        childRecord.setRecordLabel('Notes and labels');
        childRecord.addField(fieldStr(SalesInvoiceTmp, HeaderNotes));
        childRecord.addField(fieldStr(SalesInvoiceTmp, FormLetterRemarksTxt));
        childRecord.addField(fieldStr(SalesInvoiceTmp, TaxAmountLabel));
        childRecord.addField(fieldStr(SalesInvoiceTmp, TaxAmountMSTLabel));
        childRecord.addField(fieldStr(SalesInvoiceTmp, CashDiscTxt_LanguageId));

        /* Misc */
        childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
        childRecord.setRecordName('Misc');
        childRecord.setRecordLabel('Misc');
        childRecord.addField(fieldStr(SalesInvoiceTmp, GiroType));
        childRecord.addField(fieldStr(SalesInvoiceTmp, CashAccountingRegime_ES));
        childRecord.addField(fieldStr(SalesInvoiceTmp, PrePrintLevel));

        /* MCR fields */
        childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
        childRecord.setRecordName('MCR');
        childRecord.setRecordLabel('MCR Markup');
        childRecord.addField(fieldStr(SalesInvoiceTmp, MCRPaymAmount));
        childRecord.addField(fieldStr(SalesInvoiceTmp, MCRDueAmount));

        /* Adjustment_TH */
        if (isoCountryCode == #isoTH)
        {
            // NOTE: Available from the July 2017 version.
            childRecord = _headerExtDataRecord.addChildRecord(salesInvoiceLineWithHeaderFields);
            childRecord.setRecordName('AdjustmentDetails');
            childRecord.setRecordLabel('Adjustment invoice details');
            childRecord.addField(fieldStr(SalesInvoiceTmp, AdjustmentDetailsTxt_TH));
            childRecord.addField(fieldStr(SalesInvoiceTmp, RemarkTxt_TH));
        }

        /* Redundant fields */
        //childRecord.addField(fieldStr(SalesInvoiceTmp, JournalRecId));
        /* Fields that never get filled */
        //childRecord.addField(fieldStr(SalesInvoiceTmp, CompanyRegNum));
        //childRecord.addField(fieldStr(SalesInvoiceTmp, CompanyBankRegNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addBackorderLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the data points for back orders.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the back order data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addBackorderLines(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Backorder lines */
        if (_forceAddingFields || _currentLine.ShowBackorders)
        {
            // Rename the record from 'SalesInvoiceTmp' to 'SalesInvoiceLines_Backorder'.
            _addingRecord.setRecordName(#BackorderLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Backorder lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the backorder lines.
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, BackOrderLineName));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, BackOrderLineItemId));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, BackOrderLineQuantity));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, BackOrderLineSalesUnit));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, BackOrderConfirmedDeliveryDate));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowBackOrderConfirmedDeliveryDate));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowBackorders));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addCustTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for prepaid amounts.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the prepaid amount data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addCustTransLines(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Lines with prepaid amounts */
        if (_forceAddingFields || _currentLine.ShowCustTrans)
        {
            // Rename the record from 'SalesInvoiceTmp' to 'SalesInvoiceLines_Prepayed'.
            _addingRecord.setRecordName(#PrepayedLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Prepayed lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the prepaid lines.
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, CurrencyCode));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, SettledAmountCur));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, Txt));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TransDate));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowCustTrans));

            // Store the value of the ShowCustTrans flag which has the same meaning the showPrepaidTotals flag.
            showPrepaidTotals = _currentLine.ShowCustTrans;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addMainLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for invoice line.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the invoice line data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addMainLines(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        DocXmlRecord    packingSlipDataRecord, inventDimDataRecord, mcrCallCenterDataRecord;


        boolean isCustInvoiceTransLine(SalesInvoiceTmp _salesInvoiceTmp)
        {
            boolean isCustInvoiceTransLine;
            isCustInvoiceTransLine = _salesInvoiceTmp.ItemId != '' ||
                                     _salesInvoiceTmp.Name != '' ||
                                     _salesInvoiceTmp.Qty != 0 ||
                                     _salesInvoiceTmp.SalesPrice != 0 ||
                                     _salesInvoiceTmp.LineAmount != 0 ||
                                     _salesInvoiceTmp.LineAmountInclTax != 0 ||
                                     _salesInvoiceTmp.DiscPercent != 0 ||
                                     _salesInvoiceTmp.DiscountAmount != 0;
            return isCustInvoiceTransLine;
        }


        // Check if the current SalesInvoiceTmp record is a main invoice line
        // with name, qty, price, amount, etc. and add all corresponidng fields.
        if (_forceAddingFields || isCustInvoiceTransLine(_currentLine))
        {
            // (1) Change the name of the adding record from 'SalesInvoiceTmp'
            // to a more readable name, e.g. 'SalesInvoiceLines'.
            _addingRecord.setRecordName(#SalesInvoiceLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Invoice lines'); // NOTE: use literalStr("@LabelID") instead.

            // (2) Include all fields you need on the main invoice line.
            // NOTE: Exclude all fields you don't need on the report for the sake of maintenance.
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ItemId));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ExternalItemId));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, Name));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, Qty));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, SalesPrice));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, SalesUnitTxt));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, LineAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, LineAmountInclTax));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, DiscPercent));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, DiscountAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowGoodsDiscount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxWriteCode));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, CorrectiveReasonLines));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, Notes));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, LineHeader));

            _addingRecord.addField(fieldStr(SalesInvoiceTmp, PdsEnabled));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, pdsCWUnitId));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, pdsCWQty));
            
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ReverseChargeLine));


            /* Packing slip fields */
            packingSlipDataRecord = _addingRecord.addChildRecord(_currentLine);
            packingSlipDataRecord.setRecordName('PackingSlip');
            packingSlipDataRecord.setRecordLabel('Packing slip'); // NOTE: use literalStr("@LabelID") instead.
            packingSlipDataRecord.addField(fieldStr(SalesInvoiceTmp, PackingSlip));
            packingSlipDataRecord.addField(fieldStr(SalesInvoiceTmp, ShowCustPackingSlipTrans));
            //-- Redudant fields (never get filled):
            //packingSlipDataRecord.addField(fieldStr(SalesInvoiceTmp, PackingSlipDeliveryDate));
            //packingSlipDataRecord.addField(fieldStr(SalesInvoiceTmp, PackingSlipTransQty));
            //packingSlipDataRecord.addField(fieldStr(SalesInvoiceTmp, PackingSlipId));


            /* InventDim fields */
            inventDimDataRecord = _addingRecord.addChildRecord(_currentLine);
            inventDimDataRecord.setRecordName('InventDim');
            inventDimDataRecord.setRecordLabel('Inventory dimensions'); // NOTE: use literalStr("@LabelID") instead.
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, ConfigId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventSizeId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventColorId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventSiteId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventLocationId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventBatchId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventSerialId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventStyleId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventStatusId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, WMSLocationId));
            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, LicensePlateId));

            inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventDimPrint));

            // NOTE: With the July 2017 version this field became obsolete.
            //inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, WMSPalletId));


            /* MCR Markup fields */
            mcrCallCenterDataRecord = _addingRecord.addChildRecord(_currentLine);
            mcrCallCenterDataRecord.setRecordName('MCRMarkup');
            mcrCallCenterDataRecord.setRecordLabel('MCR Markup'); // NOTE: use literalStr("@LabelID") instead.
            mcrCallCenterDataRecord.addField(fieldStr(SalesInvoiceTmp, MCRMarkupTxt));
            mcrCallCenterDataRecord.addField(fieldStr(SalesInvoiceTmp, MCRMarkupValue));
            mcrCallCenterDataRecord.addField(fieldStr(SalesInvoiceTmp, MCRMarkupCalculatedAmount));


            /* Redudant fields (never get filled) */
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, showPreviouslyInvoiced));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, MCRMarkupCode));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, MCRHeadingLine));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, MCRTableNum));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, MCRInventTrans_ItemId));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, MCRInventTransQty));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, MCRPayment));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, PaymentId));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, PaymentStubInvoiceId));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, PaymentStubDueDate));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, CustInvoiceBackorderLineName));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, IsTaxAmountVisible));
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowPreviouslyInvoiced));


            /* COUNTRY REGION SPECIFIC DATA FIELDS */
            switch (isoCountryCode)
            {
                case #isoRU:
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventGTDId_RU));
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventGTDIdFlag_RU));
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventOwnerId_RU));
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventOwnerIdFlag_RU));
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventProfileId_RU));
                    inventDimDataRecord.addField(fieldStr(SalesInvoiceTmp, InventProfileIdFlag_RU));
                    break;

                case #isoMY:
                    _addingRecord.addField(fieldStr(SalesInvoiceTmp, GSTReliefItemNumber_MY));
                    _addingRecord.addField(fieldStr(SalesInvoiceTmp, GSTReliefSchedule_MY));
                    _addingRecord.addField(fieldStr(SalesInvoiceTmp, RefInvoiceDate_MY));
                    _addingRecord.addField(fieldStr(SalesInvoiceTmp, RefInvoiceID_MY));
                    break;

                case #isoIN:
                    _addingRecord.addField(fieldStr(SalesInvoiceTmp, CommodityCode_IN));
                    break;
            }


            // Add here all your custom (extension) fields from the SalesInvoiceTmp table, if any.
            // For example:
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, YourCustomFieldName));


            // Add here additional fields from the related CustInvoiceTrans table (or some other tables).
            //CustInvoiceTrans custInvoiceTrans = this.custInvoiceTrans(_currentLine.JourTransRecId_DR);
            //_addingRecord.addCalculatedField('OrigSalesId', custInvoiceTrans.OrigSalesId);
            //_addingRecord.addCalculatedField('LineAmountTax', custInvoiceTrans.LineAmountTax);
            //_addingRecord.addCalculatedField('LineNum', custInvoiceTrans.LineNum);

            SalesLine   salesLine = salesLine::findRecId(_currentLine.SalesLineRecId_DR);

            DocXmlRecord    docPermit = _addingRecord.addChildCalculatedRecord('Permit');
                        
            _addingRecord.addCalculatedFieldFromEdt('TaxableGoods', extendedTypeStr(String10), this.custInvoiceTrans(_currentLine.JournalRecId).LineAmountTax ? 'Yes' : 'No');
            
            if(salesLine.RecId !=0 && salesLine.ItemId)
            {
                docPermit.addCalculatedFieldFromEdt('WineGallon', extendedTypeStr(TTBWineGallon), salesLine.TTBWineGallon);
                docPermit.addCalculatedFieldFromEdt('ProofGallon', extendedTypeStr(TTBProofGallon), salesLine.TTBProofGallon);

                _addingRecord.addCalculatedFieldFromEdt('SalesQty', extendedTypeStr(SalesQty), salesLine.SalesQty);
                _addingRecord.addCalculatedFieldFromEdt('Freight', extendedTypeStr(GGIFreightEstimate), salesLine.GGIFreightEstimate);
                _addingRecord.addCalculatedField('ProductCategory', this.getProductCategory(salesLine.ItemId), 'Product Categories');      
                _addingRecord.addCalculatedField('LegacyItemId', InventTable::find(salesLine.ItemId).GGINAVLegacyItemId, 'Legacy Item');
               
            }
            else if ( salesLine.SalesCategory)
            {
                _addingRecord.addCalculatedField('ProductCategory', 'Excise Tax', 'Product Categories');
            }
            
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addMarkupLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for markup lines.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the markup line data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addMarkupLines(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Markup lines */
        if (_forceAddingFields || _currentLine.ShowMarkupTrans)
        {
            // Rename the record from 'SalesInvoiceTmp' to 'SalesInvoiceLines_Markup'.
            _addingRecord.setRecordName(#MarkupLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Markup lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the markup lines.
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, MarkupCode));            
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, MarkupTaxCode));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, MarkupAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowMarkupTrans));


            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addMarkupTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for markup lines.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the markup line data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addMarkupTransLines(DocXmlRecord _addingRecord, boolean _forceAddingFields)
    {
        /* Markup lines */
        if (true)
        {
            _addingRecord.setRecordName(#MarkupTransLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Markup trans lines'); 

            // Add all fields related to the markup lines.
            _addingRecord.addField(fieldStr(MarkupTrans, MarkupCode));
            _addingRecord.addField(fieldStr(MarkupTrans, Txt));
            _addingRecord.addField(fieldStr(MarkupTrans, MarkupCategory));
            _addingRecord.addField(fieldStr(MarkupTrans, Value));
            _addingRecord.addField(fieldStr(MarkupTrans, CurrencyCode));
            _addingRecord.addField(fieldStr(MarkupTrans, TaxGroup));
            _addingRecord.addField(fieldStr(MarkupTrans, TaxItemGroup));
        }
        return true;       
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addPackMaterialLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for packing material.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the packing material data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addPackMaterialLines(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* PackingMaterial lines */
        if (_forceAddingFields || _currentLine.ShowPackingMaterial)
        {
            // Rename the record from 'SalesInvoiceTmp' to 'SalesInvoiceLines_PackingMaterial'.
            _addingRecord.setRecordName(#PackingMaterialLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Packing materials lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the PackingMaterial lines.
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, PackMaterialName));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, PackagingWeight));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, PackMaterialUnit));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, PackMaterialCode));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, PackagingMaterialText));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowPackingMaterial));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addPaymSchedLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for payment schedule line.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the payment schedule data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addPaymSchedLines(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* PaymentSchedule lines */
        if (_forceAddingFields || _currentLine.ShowCustPaymSched)
        {
            // Rename the record from 'SalesInvoiceTmp' to 'SalesInvoiceLines_PaymSched'.
            _addingRecord.setRecordName(#PaymSchedLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Payment scheduled lines'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the PaymentScheduled lines.
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, DueDate));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, DueAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, DiscAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, DiscDate));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowCustPaymSchedLine));

            // Store the value of the ShowCustTrans flag which has the same meaning the showCustPaymSched flag.
            showCustPaymSched = _currentLine.ShowCustPaymSched;

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addTaxTransLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for lines with taxes.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the tax data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addTaxTransLines(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Lines with taxes */
        if (_forceAddingFields || _currentLine.ShowTaxTrans)
        {
            // Rename the record from 'SalesInvoiceTmp' to 'SalesInvoiceLines_Tax'.
            _addingRecord.setRecordName(#TaxLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Taxes'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the tax lines.
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, Amount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxAmountMST));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxBaseAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxBaseAmountMST));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, CashDiscAmount));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxExemptDescription));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxBaseQty));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, PrintCode));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxCode));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowTaxTrans));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, GSTSummaryText_MY));

            //-- Redudant fields (never get filled):
            //_addingRecord.addField(fieldStr(SalesInvoiceTmp, IsTaxAmountMST));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sil_addTaxWithholdLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for lines with tax withholding.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the tax withholding data points.
    /// </param>
    /// <param name = "_currentLine">
    ///     Sales invoice line.
    /// </param>
    /// <param name = "_forceAddingFields">
    ///     Determines whether data points are added by force.
    /// </param>
    /// <returns>
    ///     true, if data points were added; otherwise, false.
    /// </returns>
    protected boolean sil_addTaxWithholdLines(DocXmlRecord _addingRecord, SalesInvoiceTmp _currentLine, boolean _forceAddingFields)
    {
        /* Lines with taxes with hold transactions */
        if (_forceAddingFields || _currentLine.ShowTaxWithholdTrans_IN)
        {
            // Rename the record from 'SalesInvoiceTmp' to 'SalesInvoiceLines_TaxWithhold'.
            _addingRecord.setRecordName(#TaxWithholdLines);
            // Change the label of the record.
            _addingRecord.setRecordLabel('Withhold taxes'); // NOTE: use setRecordLabelId(literalStr("@LabelID")) instead.

            // Add all fields related to the tax withhold lines.
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, SumTaxWithhold_IN));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, TaxWithholdCode_IN));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, SourceBaseAmountCur_IN));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, SourceRegulateAmountCur_IN));
            _addingRecord.addField(fieldStr(SalesInvoiceTmp, ShowTaxWithholdTrans_IN));

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Skips an RDP data source.
    /// </summary>
    /// <param name = "_rdpTableRecord">
    ///     An RDP data source.
    /// </param>
    /// <param name = "_rdpTableName">
    ///     Name of an RDP data source.
    /// </param>
    /// <returns>
    ///     true, if skipped; otherwise, false.
    /// </returns>
    protected boolean skipRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        // Skip each record from the SalesInvoiceLocalizationTmp table if isoCountryCode
        // is not one of the listed countries below.
        // This means that for other than these countries, the SalesInvoiceLocalizationTmp table
        // will not be presented in the report data source.
        if (tableStr(SalesInvoiceLocalizationTmp) == _rdpTableName)
        {
            switch (isoCountryCode)
            {
                case #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL:
                    return false;

                default:
                    return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSelectedRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Called when an RDP data source is selected.
    /// </summary>
    /// <param name = "_rdpTableRecord">
    ///     RDP data source.
    /// </param>
    /// <param name = "_rdpTableName">
    ///     RDP data source name.
    /// </param>
    protected void onSelectedRdpTableRecord(Common _rdpTableRecord, TableName _rdpTableName)
    {
        super(_rdpTableRecord, _rdpTableName);

        if (_rdpTableName == tableStr(SalesInvoiceHeaderFooterTmp))
        {
            SalesInvoiceHeaderFooterTmp header = _rdpTableRecord;

            // Store custom placeholders' values.
            placeholder_salesId = header.SalesId;
            placeholder_invoiceAccount = header.InvoiceAccount;
            placeholder_invoicingName = header.InvoicingName;
            placeholder_custRef = header.CustomerRef;
            placeholder_contactName = header.ContactPersonName;
            placeholder_invoiceDate = header.InvoiceDate;
            placeholder_paymentCondition = header.PaymentCondition;

            salesTable = SalesTable::find(header.SalesId);
        }
        else if (_rdpTableName == tableStr(SalesInvoiceTmp))
        {
            // Store custom placeholders' values.
            if (!placeholder_invoiceId)
            {
                SalesInvoiceTmp line = _rdpTableRecord;
                placeholder_invoiceId = line.InvoiceId;
                placeholder_dueDate = line.CustInvoiceJourDueDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideReportRunSettings</Name>
				<Source><![CDATA[
    // List of defined custom placeholders for the report:
    #define.InvoiceId('InvoiceId')
    #define.SalesId('SalesId')
    #define.InvoiceAccount('InvoiceAccount')
    #define.InvoicingName('InvoicingName')
    #define.CustContactName('CustContactName')
    #define.CustRef('CustRef')
    #define.InvoiceDate('InvoiceDate')
    #define.DueDate('DueDate')
    #define.PaymentCondition('PaymentCondition')
    #define.OrderAccountPrimaryEmail('OrderAccountPrimaryEmail')
    #define.OrderAccountInvoicePurposeEmail('OrderAccountInvoicePurposeEmail')
    #define.OrderEmail('OrderEmail')

    /// <summary>
    ///     Overrides the default report settings.
    /// </summary>
    /// <param name = "_reportRunContext">
    ///     The context of the report session.
    /// </param>
    /// <param name = "_replaceStandardPlaceholders">
    ///     Determines whether to replace the standard placeholders. Optional.
    /// </param>
    /// <returns>
    ///     The place holder manager.
    /// </returns>
    [DocPlaceholderAttribute(#InvoiceId, 'INV - Invoice ID'),
     DocPlaceholderAttribute(#SalesId, 'INV - Sales ID'),
     DocPlaceholderAttribute(#InvoiceAccount, 'INV - Customer Account ID'),
     DocPlaceholderAttribute(#InvoicingName, 'INV - Customer Name'),
     DocPlaceholderAttribute(#CustContactName, 'INV - Contact Name'),
     DocPlaceholderAttribute(#CustRef, 'INV - Customer Reference'),
     DocPlaceholderAttribute(#InvoiceDate, 'INV - Invoice Date'),
     DocPlaceholderAttribute(#DueDate, 'INV - Due Date'),
     DocPlaceholderAttribute(#PaymentCondition, 'INV - Payment Condition'),
     DocPlaceholderAttribute(#OrderAccountPrimaryEmail, 'INV - Order Account Primary Email'),
     DocPlaceholderAttribute(#OrderAccountInvoicePurposeEmail, 'INV - Order Account Invoice Purpose Email'),
     DocPlaceholderAttribute(#OrderEmail, 'INV - Sales Order Email')]
    public DocPlaceholderManager overrideReportRunSettings(DocReportRunContext _reportRunContext, boolean _replaceStandardPlaceholders = true)
    {
        // Set the report execution context record to the corresponding salesTable. This will affect:
        // (1) Standard placeholders
        // (2) Saving to Attachments -> Record type: Context record
        // (3) Additional Attachments -> Load from: Context record
        _reportRunContext.setReportExecutionContextRecord(salesTable);

        // Replace standard placeholders.
        DocPlaceholderManager placeholderMng = super(_reportRunContext, _replaceStandardPlaceholders);
        
        // Replace custom placeholders:
        // -- Placeholder @InvoiceId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceId, placeholder_invoiceId);

        // -- Placeholder @SalesId@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#SalesId, placeholder_salesId);
        
        // -- Placeholder @InvoiceAccount@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceAccount, placeholder_invoiceAccount);

        // -- Placeholder @InvoicingName@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoicingName, placeholder_invoicingName);

        // -- Placeholder @InvoiceDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#InvoiceDate, placeholder_invoiceDate);

        // -- Placeholder @DueDate@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#DueDate, placeholder_dueDate);

        // -- Placeholder @OrderEmail@
        placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderEmail, salesTable.Email);

        // For the rest of the placeholders first check if they are used in the Email
        // print destination, if Email is the currently selected print destination.
        // NOTE: Remove this condition if it's not true:
        if (_reportRunContext.parmPrintDestination() == DocPrintDestination::Email)
        {
            // -- Placeholder @CustContactName@
            if (!placeholder_contactName)
            {
                placeholder_contactName = 'Sir/Madam';
            }
            placeholderMng.replacePlaceholderInCurrentPrintDest(#CustContactName, placeholder_contactName);

            // -- Placeholder @CustRef@
            placeholderMng.replacePlaceholderInCurrentPrintDest(#CustRef, placeholder_custRef);

            // -- Placeholder @PaymentCondition@
            placeholderMng.replacePlaceholderInCurrentPrintDest(#PaymentCondition, placeholder_paymentCondition);

            // -- Placeholder @OrderAccountPrimaryEmail@
            this.setPlaceholders_OrderAccountContactEmails();
            placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderAccountPrimaryEmail, placeholder_orderAccountPrimaryEmail);

            // -- Placeholder @OrderAccountInvoicePurposeEmail@
            placeholderMng.replacePlaceholderInCurrentPrintDest(#OrderAccountInvoicePurposeEmail, placeholder_orderAccountInvoicePurposeEmail);
        }

        // Fill the Print archive contract.
        _reportRunContext.archiveContract().setCustAccount(placeholder_invoiceAccount);
        _reportRunContext.archiveContract().setSalesId(placeholder_salesId);
        _reportRunContext.archiveContract().setDocument(placeholder_invoiceId, placeholder_invoiceDate);
        _reportRunContext.archiveContract().setJournal(this.custInvoiceJour().RecId, DocJournalType::CustInvoiceJour);

        return placeholderMng;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlaceholders_OrderAccountContactEmails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Set place holders for the invoicing email address(es).
    /// </summary>
    protected void setPlaceholders_OrderAccountContactEmails()
    {
        CustAccount orderAccount = this.custInvoiceJour().OrderAccount;
        CustTable orderCustomer = CustTable::find(orderAccount);

        placeholder_orderAccountPrimaryEmail = orderCustomer.email();

        container custContactInfoPurposeEmailsCon =
                DirParty::electronicAddressLocatorsByRole(orderCustomer.Party, LogisticsElectronicAddressMethodType::Email, 'Invoice');

        str custContactInfoPurposeEmailsStr = '';
        if (custContactInfoPurposeEmailsCon != conNull())
        {
            custContactInfoPurposeEmailsStr = conPeek(custContactInfoPurposeEmailsCon, 1);
            for (int i = 2; i <= conLen(custContactInfoPurposeEmailsCon); i++)
            {
                custContactInfoPurposeEmailsStr = custContactInfoPurposeEmailsStr + ',' + conPeek(custContactInfoPurposeEmailsCon, i);
            }
        }

        placeholder_orderAccountInvoicePurposeEmail = custContactInfoPurposeEmailsStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>