<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBWHSWorkTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TTB006_GaugeReport - TTB customizations for the <c>WHSWorkTable</c> table.
/// </summary>
[ExtensionOf(tableStr(WHSWorkTable))]
public final class TTBWHSWorkTable_Extension
{   

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTTBWHSCustomTypeMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the captured data of a certain TTBTypeMap.
    /// </summary>
    /// <param name = "_whsCustomTypeMap">
    ///		TTB custom field mapping
    /// </param>
    /// <returns>
    ///     Captured data from WHSCustomType
    /// </returns>
    WHSData getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap _whsCustomTypeMap)
    {
        WHSWorkLine			workLine;
        WHSWorkLineCustom	workLineCustom;

        select firstonly Data 
			from workLineCustom 
			join workLine
			where workLine.WorkId == this.WorkId
				&& workLine.WorkId == workLineCustom.WorkId
				&& workLine.LineNum == workLineCustom.LineNum
				&& workline.TTBWHSCustomTypeMap == _whsCustomTypeMap;

        return workLineCustom.Data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTTBWHSCustomLineData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if TTB custom work line data exist for work
    /// </summary>
    /// <returns>
    ///     true if TTB custom field mapping; false otherwise 
    /// </returns>
    boolean isTTBWHSCustomLineData()
    {
        WHSWorkLine	workLine;

        select firstonly RecId 
			from workLine
            where workLine.WorkId == this.WorkId
                && workline.TTBWHSCustomTypeMap;

        if (!workLine.RecId)
        {
            return false;
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiGetOffloadQtyFromStartGaugeAndTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity in lbs from the tank start gauge and start temperature values.
    /// </summary>
    /// <returns>
    /// The quantity in lbs.
    /// </returns>
    public Qty ggiGetOffloadQtyFromStartGaugeAndTmp()
    {
        Qty                     calculatedQtyTempFactor;
        TTBWineGallon           calculatedWineGallons;
        TTBWineGALTempFactor    wineGALTempFactor;
        TTBOutageGauge          startGauge  = str2num(this.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::TankStartInchLbs));
        TTBTemperature          startTemp   = str2num(this.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::TankStartTemp));
        WHSWorkLine             workLine    = WHSWorkTable::getLastClosedPutWorkLine(this.WorkId);
        WMSLocation             wmsLocation = WMSLocation::find(workLine.WMSLocationId, workLine.inventDim().InventLocationId);  
      
        const UnitOfMeasureSymbol lbUnit = 'LB';
        #WHSRF

        if (this.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::VolumetricGauging) == 'n')
        {
            calculatedQtyTempFactor = startGauge;
        }
        else
        {
            calculatedWineGallons   = TTBWMSLocationOutage::findNearestWineGallons(wmsLocation.WMSLocationId, wmsLocation.InventLocationId, startGauge);
            wineGALTempFactor       = TTBWineGALTempFactor::findNearest(workLine.getTTBWorkLineProof(), startTemp);
            calculatedQtyTempFactor = TTBUtilHelper::convertFromWineGallon(calculatedWineGallons * wineGALTempFactor.WineGALFactor, lbUnit, workLine.ItemId);
        }

        return calculatedQtyTempFactor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>