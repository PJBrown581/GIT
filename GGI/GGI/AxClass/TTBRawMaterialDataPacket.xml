<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBRawMaterialDataPacket</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Data packet of a raw material.
/// </summary>
class TTBRawMaterialDataPacket
{
    public  TTBTank             Tank;
    public  ItemId              ItemId;
    public  ItemName            ItemName;
    public  UnitQty             Qty;
    public  UnitOfMeasureSymbol UnitId;
    public  TTBAlcoholType      AlcoholType;
    public  TTBWineGallon       WineGallons;
    public  TTBProofGallon      ProofGallons;
    public  boolean             IsPhantom;
    public  ItemId              PhantomItemId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TTBRawMaterialDataPacket construct()
    {
        return new TTBRawMaterialDataPacket();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object using the specified buffer.
    /// </summary>
    /// <param name = "_prodJournalBOM">
    ///     A picking list journal line.
    /// </param>
    /// <returns>
    ///     This object.
    /// </returns>
    public static TTBRawMaterialDataPacket newProdJournalBOM(ProdJournalBOM _prodJournalBOM)
    {
        return TTBRawMaterialDataPacket::newTTBProdJournalBOM(TTBProdJournalBOM::find(_prodJournalBOM.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTTBProdJournalBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object using the specified buffer.
    /// </summary>
    /// <param name = "_prodJournalBOM">
    ///     A TTB relevant picking list journal line.
    /// </param>
    /// <returns>
    ///     This object.
    /// </returns>
    public static TTBRawMaterialDataPacket newTTBProdJournalBOM(TTBProdJournalBOM _prodJournalBOM)
    {
        return TTBRawMaterialDataPacket::newParameters(_prodJournalBOM.wMSLocationId, _prodJournalBOM.ItemId, _prodJournalBOM.inventQty(), _prodJournalBOM.inventUnitId(), _prodJournalBOM.wineGallons(), _prodJournalBOM.proofGallons(), _prodJournalBOM.itemName(), _prodJournalBOM.PhantomItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object using the specified parameters.
    /// </summary>
    /// <param name = "_tank">
    ///     Tank location of the raw material.
    /// </param>
    /// <param name = "_itemId">
    ///     Item number of the raw material.
    /// </param>
    /// <param name = "_qty">
    ///     Raw material quantity.
    /// </param>
    /// <param name = "_unitId">
    ///     Quantity units.
    /// </param>
    /// <param name = "_wineGallons">
    ///     Wine gallon amount.
    /// </param>
    /// <param name = "_proofGallons">
    ///     Proof gallon amount.
    /// </param>
    /// <param name = "_itemName">
    ///     Name of the raw material. Optional.
    /// </param>
    /// <param name = "_phantomItemId">
    ///     Item number of a phantom formula that contains this raw material. Optional.
    /// </param>
    /// <returns>
    ///     This object.
    /// </returns>
    public static TTBRawMaterialDataPacket newParameters(TTBTank _tank, ItemId _itemId, UnitQty _qty, UnitOfMeasureSymbol _unitId, TTBWineGallon _wineGallons, TTBProofGallon _proofGallons, ItemName _itemName = '', ItemId _phantomItemId = '')
    {
        TTBRawMaterialDataPacket    dataPacket      = TTBRawMaterialDataPacket::construct();
        TTBItemAlcoholTypeView      itemAlcoholType = TTBItemAlcoholTypeView::findItem(_itemId);

        dataPacket.Tank             = _tank;
        dataPacket.ItemId           = _itemId;
        dataPacket.ItemName         = _itemName ? _itemName : InventTable::find(_itemId).itemName();
        dataPacket.Qty              = _qty;
        dataPacket.UnitId           = _unitId;
        dataPacket.AlcoholType      = itemAlcoholType.AlcoholType;
        dataPacket.IsPhantom        = itemAlcoholType.IsPhantom || _phantomItemId != '';
        dataPacket.PhantomItemId    = _phantomItemId;
        dataPacket.WineGallons      = _wineGallons;
        dataPacket.ProofGallons     = _proofGallons;

        return dataPacket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>combine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Combines the current raw material with the specified raw material.
    /// </summary>
    /// <param name = "_rawMaterial">
    ///     The raw material to combine with.
    /// </param>
    /// <returns>
    ///     true, if this raw material was combined; otherwise, false.
    /// </returns>
    public boolean combine(TTBRawMaterialDataPacket _rawMaterial)
    {
        boolean isCombined;

        if (!this.ItemId || this.ItemId == _rawMaterial.ItemId)
        {
            if (!this.ItemId)
            {
                this.Tank           = _rawMaterial.Tank;
                this.ItemId         = _rawMaterial.ItemId;
                this.ItemName       = _rawMaterial.ItemName;
                this.UnitId         = _rawMaterial.UnitId;
                this.AlcoholType    = _rawMaterial.AlcoholType;
                this.IsPhantom      = _rawMaterial.IsPhantom;
                this.PhantomItemId  = _rawMaterial.PhantomItemId;
            }

            this.Qty            += _rawMaterial.Qty;
            this.WineGallons    += _rawMaterial.WineGallons;
            this.ProofGallons   += _rawMaterial.ProofGallons;

            isCombined = true;
        }

        return isCombined;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>