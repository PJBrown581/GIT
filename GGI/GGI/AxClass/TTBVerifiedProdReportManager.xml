<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBVerifiedProdReportManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manages verified production report records.
/// </summary>
class TTBVerifiedProdReportManager
{
    /// <summary>
    ///     Production order number.
    /// </summary>
    public ProdId   ProdId;

    /// <summary>
    ///     Cache RAF table.
    /// </summary>
    protected   ProdTable           ProdTable;
    protected   ProdJournalTable    RAFJournalTable;

    protected LineNum PhantomLineNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TTBVerifiedProdReportManager construct()
    {
        return new TTBVerifiedProdReportManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with a production order number.
    /// </summary>
    /// <param name = "_prodId">
    ///     The production order number.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static TTBVerifiedProdReportManager newProdId(ProdId _prodId)
    {
        TTBVerifiedProdReportManager vprManager = TTBVerifiedProdReportManager::construct();

        vprManager.ProdId = _prodId;

        return vprManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the RAF journal header.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the record is to be selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The RAF journal header; otherwise, an empty buffer.
    /// </returns>
    public ProdJournalTable prodJournalTable(boolean _forUpdate = false)
    {
        RAFJournalTable.selectForUpdate(_forUpdate);
        if (ProdId != RAFJournalTable.ProdId)
        {
            RAFJournalTable.selectForUpdate(_forUpdate);
            select firstonly RAFJournalTable
                order by PostedDateTime desc
                where RAFJournalTable.ProdId == ProdId
                    && RAFJournalTable.JournalType == ProdJournalType::ReportFinished
                    && RAFJournalTable.Posted;
        }

        return RAFJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalRAFDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the original or first RAF date.
    /// </summary>
    /// <returns>
    ///     The original RAF date.
    /// </returns>
    /// <remarks>
    ///     If a RAF journal is not available, then the first picking list journal date is used.
    /// </remarks>
    public TransDateTime originalRAFDateTime()
    {
        ProdJournalTable    prodJournalTable;

        select firstonly PostedDateTime
            from prodJournalTable
            order by PostedDateTime asc
            where prodJournalTable.ProdId == ProdId
                && prodJournalTable.JournalType == ProdJournalType::ReportFinished
                && prodJournalTable.Posted;

        if (prodJournalTable.PostedDateTime == DateTimeUtil::minValue())
        {
            select firstonly PostedDateTime
                from prodJournalTable
                order by PostedDateTime asc
                where prodJournalTable.ProdId == ProdId
                    && prodJournalTable.JournalType == ProdJournalType::Picklist
                    && prodJournalTable.Posted;
        }

        return prodJournalTable.PostedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalProd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the most recent RAF journal line by the inventory transaction ID.
    /// </summary>
    /// <returns>
    ///     The most recent RAF journal Line; otherwise, an empty buffer.
    /// </returns>
    public ProdJournalProd prodJournalProd()
    {
        ProdJournalProd     prodJournalProd;
        ProdJournalTable    prodJournalTable;

        select firstonly prodJournalProd
            order by prodJournalTable.PostedDateTime desc
            where prodJournalProd.InventTransId == this.prodTable().InventTransId
            exists join prodJournalTable
                where prodJournalTable.JournalId == prodJournalProd.JournalId
                    && prodJournalTable.ProdId == ProdId
                    && prodJournalTable.JournalType == ProdJournalType::ReportFinished
                    && prodJournalTable.Posted;

        return prodJournalProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRawMaterialCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a collection of raw materials.
    /// </summary>
    /// <returns>
    ///     A collection of raw materials.
    /// </returns>
    protected TTBRawMaterialCollection getRawMaterialCollection()
    {
        TTBProdJournalBOM           prodJournalBOM;
        TTBRawMaterialCollection    rawMaterialCollection = TTBRawMaterialCollection::construct();
        
        while select prodJournalBOM
            order by PhantomItemId asc, LineNum asc
            where prodJournalBOM.ProdId == ProdId
        {
            rawMaterialCollection.add(TTBRawMaterialDataPacket::newTTBProdJournalBOM(prodJournalBOM));
        }

        return rawMaterialCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current production order.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the current production order is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The production order; otherwise, an empty buffer.
    /// </returns>
    public ProdTable prodTable(boolean _forUpdate = false)
    {
        if (ProdTable.ProdId != ProdId)
        {
            ProdTable = ProdTable::find(ProdId, _forUpdate);
        }
        else
        {
            ProdTable.selectForUpdate(_forUpdate);
        }

        return ProdTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshVPRRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes the VPR table.
    /// </summary>
    public void refreshVPRRecord()
    {
        if (TTBVerifiedProdReportManager::shouldGenerateRecord(this.prodTable().ItemId))
        {
            TTBVerifiedProdTable        vprTable                = TTBVerifiedProdTable::findOrCreateVPRTable(ProdId, this);
            TTBRawMaterialCollection    rawMaterialCollection   = this.getRawMaterialCollection();

            for (boolean found = rawMaterialCollection.findFirst(); found; found = rawMaterialCollection.findNext())
            {
                this.refreshVPRTrans(rawMaterialCollection.current(), vprTable, rawMaterialCollection.TotalWineGallonsProduced, rawMaterialCollection.TotalWineGallonsConsumed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshVPRTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Refreshes a VPR transaction record.
    /// </summary>
    /// <param name = "_rawMaterial">
    ///     Raw material to be recorded in the transaction.
    /// </param>
    /// <param name = "_vprTable">
    ///     VPR header transaction is to be logged against.
    /// </param>
    /// <param name = "_totalWineGallonsProduced">
    ///     Total number of wine gallons produced.
    /// </param>
    /// <param name = "_totalWineGallonsConsumed">
    ///     Total number of wine gallons consumed.
    /// </param>
    protected void refreshVPRTrans(TTBRawMaterialDataPacket _rawMaterial, TTBVerifiedProdTable _vprTable, TTBWineGallonProduced _totalWineGallonsProduced, TTBWineGallonConsumed _totalWineGallonsConsumed)
    {
        TTBItemAlcoholTypeView  itemAlcoholType     = TTBItemAlcoholTypeView::findItem(this.prodTable().ItemId);
        TTBVerifiedProdTrans    vprTrans            = TTBVerifiedProdTrans::findNaturalKey(_rawMaterial.Tank, _rawMaterial.ItemId , _rawMaterial.IsPhantom, _vprTable.RecId, true);

        if (!vprTrans)
        {
            vprTrans.initValue();
            vprTrans.ItemId                     = itemAlcoholType.ItemId;
            vprTrans.ItemName                   = this.prodTable().itemName();
            vprTrans.RAFUnitId                  = itemAlcoholType.UnitId;
            vprTrans.UOMClass                   = itemAlcoholType.UOMClass;
            vprTrans.AlcoholType                = itemAlcoholType.AlcoholType;
            vprTrans.Tank                       = _rawMaterial.Tank;
            vprTrans.IsDenaturantFromPhantom    = _rawMaterial.IsPhantom;
            vprTrans.TTBVerifiedProdTable       = _vprTable.RecId;
            vprTrans.RawMaterialAlcoholType     = _rawMaterial.AlcoholType;
            vprTrans.Type                       = TTBVerifiedProdTrans::alcoholType2VPRType(vprTrans.AlcoholType);

            if (vprTrans.AlcoholType == TTBAlcoholType::ARTICLE)
            {
                vprTrans.Type = _rawMaterial.AlcoholType != TTBAlcoholType::CDA ? TTBVerifiedProdRecordType::ArticleSDA : TTBVerifiedProdRecordType::ArticleCDA;
            }

            if (vprTrans.Type == TTBVerifiedProdRecordType::ArticleSDA || vprTrans.Type == TTBVerifiedProdRecordType::ArticleCDA
                && ((vprTrans.IsDenaturantFromPhantom && _rawMaterial.PhantomItemId)
                    || _rawMaterial.AlcoholType == TTBAlcoholType::PURE))
            {
                vprTrans.Type = TTBVerifiedProdRecordType::SDAArticle;
            }
        }

        if (vprTrans.LineNum == 0)
        {
            vprTrans.LineNum = TTBVerifiedProdTrans::getNextLineNum(_vprTable.RecId);
        }

        vprTrans.RAFQty = GGIInventoryManager::newRecord(this.prodTable()).sumQtyByReceipt(StatusReceipt::Received);

        if (!_rawMaterial.IsPhantom || _rawMaterial.PhantomItemId)
        {
            vprTrans.WineGallonConsumed  = _rawMaterial.WineGallons;
        }

        if (_rawMaterial.AlcoholType == TTBAlcoholType::PURE)
        {
            vprTrans.PureWineGallonConsumed = _rawMaterial.WineGallons;
            vprTrans.ProofGallonConsumed    = _rawMaterial.ProofGallons;
        }

        vprTrans.DenaturantItemId   = _rawMaterial.ItemId;
        vprTrans.DenaturantItemName = _rawMaterial.ItemName;
        vprTrans.DenaturantQty      = _rawMaterial.IsPhantom && !_rawMaterial.PhantomItemId ? TTBUtilHelper::convert2WineGallon(_rawMaterial.Qty, _rawMaterial.UnitId, _rawMaterial.ItemId) : _rawMaterial.Qty;
        vprTrans.DenaturantUnitId   = _rawMaterial.UnitId;
        vprTrans.WineGallonProduced = 0;
        vprTrans.FromInventSerialId = '';
        vprTrans.ToInventSerialId   = '';

        if (vprTrans.LineNum == 1 || _rawMaterial.IsPhantom)
        {
            if (vprTrans.LineNum == 1)
            {
                if (itemAlcoholType.AlcoholType != _rawMaterial.AlcoholType || _rawMaterial.AlcoholType == TTBAlcoholType::PURE)
                {
                    if (itemAlcoholType.UOMClass != TTBUOMClass::Bulk && itemAlcoholType.AlcoholType != TTBAlcoholType::ARTICLE)
                    {
                        vprTrans.WineGallonProduced = TTBUtilHelper::convert2WineGallon(vprTrans.RAFQty, vprTrans.RAFUnitId, vprTrans.ItemId);
                    }
                    else
                    {
                        vprTrans.WineGallonProduced = _rawMaterial.WineGallons;
                    }
                }

                Array serialNumbers = this.getSerialNumberCollection();

                if (serialNumbers.lastIndex() > 0)
                {
                    vprTrans.FromInventSerialId = serialNumbers.value(1);
                    vprTrans.ToInventSerialId   = serialNumbers.value(serialNumbers.lastIndex());
                }
            }
            else
            {
                if (_rawMaterial.PhantomItemId)
                {
                    if (_rawMaterial.AlcoholType != TTBAlcoholType::PURE)
                    {
                        TTBVerifiedProdTrans::updateWineGallonProduced(1, _vprTable.RecId, _rawMaterial.WineGallons);
                    }
                }
                else
                {
                    vprTrans.WineGallonProduced = TTBVerifiedProdTrans::findLineNum(1, _vprTable.RecId).WineGallonProduced;
                    vprTrans.DenaturantQty      = TTBUtilHelper::convertFromWineGallon(vprTrans.WineGallonProduced, vprTrans.DenaturantUnitId, vprTrans.DenaturantItemId);
                    PhantomLineNum              = vprTrans.LineNum;
                }
            }
        }
        else
        {
            if (PhantomLineNum)
            {
                if (vprTrans.AlcoholType != _rawMaterial.AlcoholType)
                {
                    TTBVerifiedProdTrans::updateWineGallonProduced(PhantomLineNum, _vprTable.RecId, _rawMaterial.WineGallons);
                }
            }
        }

        if (vprTrans.LineNum > 1)
        {
            if (itemAlcoholType.AlcoholType == _rawMaterial.AlcoholType && _rawMaterial.AlcoholType == TTBAlcoholType::PURE)
            {
                if (itemAlcoholType.UOMClass == TTBUOMClass::Bulk)
                {
                    TTBVerifiedProdTrans::updateWineGallonProduced(1, _vprTable.RecId, _rawMaterial.WineGallons);
                }
            }
            else
            {
                if (itemAlcoholType.UOMClass == TTBUOMClass::Bulk
                    && vprTrans.AlcoholType != TTBAlcoholType::ARTICLE
                    && vprTrans.AlcoholType != TTBAlcoholType::none)
                {
                    if (vprTrans.AlcoholType != _rawMaterial.AlcoholType)
                    {
                        TTBVerifiedProdTrans::updateWineGallonProduced(1, _vprTable.RecId, _rawMaterial.WineGallons);
                    }
                }
                else
                {
                    if (vprTrans.AlcoholType != TTBAlcoholType::PURE)
                    {
                        if (vprTrans.AlcoholType == _rawMaterial.AlcoholType)
                        {
                            if (vprTrans.Type != TTBVerifiedProdRecordType::ArticleCDA && vprTrans.Type != TTBVerifiedProdRecordType::ArticleSDA)
                            {
                                TTBVerifiedProdTrans::updateWineGallonProduced(1, _vprTable.RecId, -_rawMaterial.WineGallons);
                            }
                        }
                        else
                        {
                            if (itemAlcoholType.UOMClass == TTBUOMClass::Bulk && vprTrans.AlcoholType != TTBAlcoholType::ARTICLE)
                            {
                                TTBVerifiedProdTrans::updateWineGallonProduced(1, _vprTable.RecId, _rawMaterial.WineGallons);
                            }
                            else
                            {
                                if (vprTrans.AlcoholType == TTBAlcoholType::ARTICLE && _rawMaterial.AlcoholType == TTBAlcoholType::PURE)
                                {
                                    TTBVerifiedProdTrans::updateWineGallonProduced(1, _vprTable.RecId, _rawMaterial.WineGallons);
                                }
                            }
                        }
                    }
                }
            }
        }

        ttsbegin;

        vprTrans.write();
                
        ttscommit;

        // Readjust the production order quantity for bulk production orders.
        if (itemAlcoholType.UOMClass == TTBUOMClass::Bulk && this.prodTable().ProdStatus != ProdStatus::Completed)
        {
            ttsbegin;
                
            this.prodTable().QtySched               = TTBUtilHelper::convertFromWineGallon(TTBVerifiedProdTrans::totalWineGallonsConsumed(_vprTable.RecId), vprTrans.RAFUnitId, vprTrans.ItemId);
            this.prodTable().RemainInventPhysical   = max(this.prodTable().QtySched - vprTrans.RAFQty, 0);
            this.prodTable().QtyCalc                = this.prodTable().QtySched;
            this.prodTable().QtyStUp                = this.prodTable().QtySched;
            this.prodTable(true).update();

            ttscommit;

            TTBProdTableChangeQtySched::newProdTable(this.prodTable());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldGenerateRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the specified item should generate a VPR record.
    /// </summary>
    /// <param name = "_itemId">
    ///     Item number to make the determination with.
    /// </param>
    /// <returns>
    ///     true, if a VPR record should be generated; otherwise, false
    /// </returns>
    public static boolean shouldGenerateRecord(ItemId _itemId)
    {
        return TTBItemAlcoholTypeView::findItem(_itemId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSerialNumberCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a collection of active serial numbers used in the production order, if any.
    /// </summary>
    /// <returns>
    ///     A collection of active serial numbers.
    /// </returns>
    /// <remarks>
    ///     Any serial number that is reversed is not considered active.
    /// </remarks>
    protected Array getSerialNumberCollection()
    {
        Array serialNumberCollection = new Array(Types::String);

        GGIInventoryManager inventoryManager        = GGIInventoryManager::newRecord(this.prodTable());
        Set                 candidateSerialNumbers  = inventoryManager.getSortedSetOfSerialNumbersByReceipt(StatusReceipt::Received);
        Set                 reversedSerialNumbers   = inventoryManager.getSortedSetOfSerialNumbersAnyIssue();
        Set                 activeSerialNumbers     = Set::difference(candidateSerialNumbers, reversedSerialNumbers);
        SetEnumerator       serialNumbers           = activeSerialNumbers.getEnumerator();

        while (serialNumbers.moveNext())
        {
            serialNumberCollection.value(serialNumberCollection.lastIndex() + 1, serialNumbers.current());
        }

        return serialNumberCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteVPR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the current VPR.
    /// </summary>
    public void deleteVPR()
    {
        if (TTBVerifiedProdReportManager::shouldGenerateRecord(this.prodTable().ItemId))
        {
            TTBVerifiedProdTable vprTable = TTBVerifiedProdTable::findOrCreateVPRTable(ProdId, this);

            ttsbegin;

            vprTable.selectForUpdate(true);
            vprTable.delete();

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>