<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBRailcarRecord</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TTB008 Parent class for Railcar records
/// </summary>
public class TTBRailcarRecord
{
    public WHSWorkTable     workTable;
    public RefRecId         workTableRecID;
    public TTBRailCarTable  RailcarTable;
    public Num              railcarNumber;
    public TTBRailCarCustomTypes customTypes;
    public TTBRailcarRecordSubclass subClassTYtpe;
    public const str TTBUOM ='GAL';
    public TTBInventGaugeId  inventGaugeId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor for subclasses
    /// </summary>
    /// <param name = "_subClass"> value of the attribute to construct proper subclass</param>
    /// <param name = "_workTableRecID">Mobile framewrok workTable to process</param>
    /// <returns></returns>
    public static TTBRailCarRecord newFromParameter(TTBRailcarRecordSubclass _subClass,RefRecId _workTableRecID = 0, TTBInventGaugeId _inventGaugeId = "")
    {
        TTBRailCarRecordAttribute myAttribute = new TTBRailCarRecordAttribute(_subClass);
        var instance = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(TTBRailCarRecord),myAttribute) as TTBRailcarRecord ;
        
        if(!instance) 
        {
            throw Error(strFmt("Invalid Railcar record class name.",_subClass));
        }
        // set parms here
        instance.parmWorkTableRecId(_workTableRecID);
        instance.parmGaugeId(_inventGaugeId);
        instance.init();
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// set or return the mobile framewrok workTable to be processed
    /// </summary>
    /// <param name = "_workTableRecID">recId of table to process</param>
    /// <returns>gets curent recid</returns>
    public RefRecId parmWorkTableRecId(RefRecId _workTableRecID = workTableRecID)
    {
        workTableRecID = _workTableRecID;
        return workTableRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGaugeId</Name>
				<Source><![CDATA[
    public TTBInventGaugeId parmGaugeId(TTBInventGaugeId _inventGaugeId = inventGaugeId)
    {
        inventGaugeId = _inventGaugeId;
        return inventGaugeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRailcarTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the curent railcar record
    /// </summary>
    /// <returns>TTBRailCarTable record buffer</returns>
    public TTBRailCarTable parmRailcarTable()
    {
        return RailcarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize data at class instance creation
    /// </summary>
    public void init()
    {
        if(workTableRecID != 0)
        {
            select firstonly workTable
                where worktable.RecId == workTableRecID;
            
        }
        if(!workTable)
        {
            throw error(strFmt( "Cannot locate work table with recid of %: ",workTableRecID ));
        }
        customTypes = new TTBRailCarCustomTypes();

        this.mapWorkToRailCar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// process data
    /// </summary>
    public void run()
    {
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>wineGallonsByOutageGuage</Name>
				<Source><![CDATA[
    /// <summary>
    /// calculate the wine gallons by outage guage in a tank/truck
    /// </summary>
    /// <param name = "_proof"> proof to use for calcs.</param>
    /// <returns>wine gallons</returns>
    public TTBWineGallon wineGallonsByOutageGuage( TTBProof _proof)
    {
        TTBWineGallon calcWineGallons;
        InventDim localInventDim ;
        Qty shellCapacityInGal;
        localInventDim = RailcarTable.InventDim();
        
        //subtract outage guage.
        TTBWMSLocationOutage TTBWMSLocationOutage;
        // return outague gallons
        select firstonly ttbWMSLocationOutage
                where ttbWMSLocationOutage.WMSLocationId     == localInventDim.wmsLocationId
                    && ttbWMSLocationOutage.InventLocationId  == localInventDim.InventLocationId
                    && ttbWMSLocationOutage.OutageGauge == customTypes.OutageGauge  ;

		//railcar capacity
        shellCapacityInGal= WMSLocation::find(localInventDim.wMSLocationId, localInventDim.InventLocationId).TTBShellCapacity;
        calcWineGallons = shellCapacityInGal - ttbWMSLocationOutage.WineGallons ;

        //temp factor
        TTBWineGALTempFactor tempfactor = TTBWineGALTempFactor::findNearest(_proof,customTypes.Temperature);
        calcWineGallons = calcWineGallons * tempfactor.WineGALFactor;
        
        return calcWineGallons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertWGToInventUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// convert module UOM to inventory UOM
    /// </summary>
    /// <param name = "_qtyToCovnert">lbs of material</param>
    /// <param name = "_itemId"> item id</param>
    /// <param name = "_sourceModule"> purch/sales/inventory</param>
    /// <returns> qty in wine gallons</returns>
    protected TTBWineGallon convertWGToInventUOM(Qty _qtyToConvert, ItemId _itemId,ModuleInventPurchSales _sourceModule)
    {
        TTBWineGallon convertedWG;
        GGIUnitManager UnitManager = GGIUnitManager::newFromToUnits(InventTableModule::find(_itemId,_sourceModule).UnitId, TTBUOM);

        convertedWG = UnitManager.convert(_qtyToConvert,_itemId);
       
        return convertedWG;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGaugeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updtaes the DBR link on the Gauge record.create
    /// </summary>
    private void updateGaugeRecord()
    {
        TTBInventGaugeTable inventGaugeTable = TTBInventGaugeTable::findByWorkId(workTable.WorkId, true);

        ttsbegin;
        if (RailcarTable && inventGaugeTable)
        {
            inventGaugeTable.RCRId = RailcarTable.RailCarRecordNumber;
            inventGaugeTable.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateRailCarTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// find the open railcar record or create a new one.
    /// </summary>
    /// <param name = "_RailCarRecord">railcar record number sequence</param>
    /// <returns>the railcar record number</returns>
    public Num findOrCreateRailCarTable(TTBRailCarNumSeqId _RailCarRecord = '') 
    {
        
        if(_RailCarRecord)
        {
            RailcarTable = TTBRailCarTable::findByRailCarNumber(_RailCarRecord);
            if(! RailcarTable)
            {
                throw Error(strFmt('Invalid railcar number:%1',_RailCarRecord) );
            }
        }
        else
        {
            // create railcar record
            RailcarNumber = this.getNextNumberSequence();
            
        }
        return RailcarTable.RailCarRecordNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextNumberSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// find the next railcar record number
    /// </summary>
    /// <returns>the railcar number</returns>
    protected Num getNextNumberSequence()
    {
        return NumberSeq::newGetNumFromId(TTBInventSiteParameters::find(workTable.InventSiteId).RailCarRecordNumberSequenceTable ).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRailCarTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// create a new railcar header record.
    /// </summary>
    protected void createRailCarTable()
    {
        ttsbegin;
        RailcarTable.clear();
        RailcarTable.RailCarRecordNumber = this.getNextNumberSequence();
        RailcarTable.InventDimId = this.findHeaderInventDimID();
        RailcarTable.DateOpened = DateTimeUtil::utcNow();
        RailcarTable.RailCarStatus = TTBRailCarStatus::Open;
        RailcarTable.RailcarRecordSubclass = subClassTYtpe;
        RailcarTable.WhSWorkTableRecId = workTable.RecId;
        RailcarTable.insert();
        ttscommit;

        if (workTable.WorkId)
		{
			this.updateGaugeRecord();
		}	
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRailCarLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// create the initial line record without ttb calcaed values.
    /// </summary>
    protected TTBRailCarLine createRailCarLines()
    {
        TTBRailCarLine line;
        WHSWorkLine workLine;
        LineNum lineNum = TTBRailCarLine::lastLineNum(RailcarTable.RecId) + 1;
        WHSWorkType workType = (subClassTYtpe == TTBRailcarRecordSubclass::InventoryMovement)? WHSWorkType::Pick : WHSWorkType::Put;       

        // work type added as that should determine PICK vs PUT
        select firstonly workLine
            where workline.WorkId == workTable.WorkId
                && workLine.WorkType == workType;
        
        ttsbegin;
        line.clear();
        line.railCarTable = RailcarTable.RecId;
        line.inintFRomWorkLine(workLine);
        line.InventDimId = this.findLineINventDimId( workLine);
        line.LineNumber = LineNum;
        this.initRailCarLine(line,workLine);
        line.insert();
        ttscommit;

        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLineInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// finds the correct inventory dimansion based on lcation
    /// </summary>
    /// <param name = "_whsWorkLine">current workline to find location</param>
    /// <returns>Inventory dimenaiosn with location</returns>
    protected InventDimId findLineInventDimId(WHSWorkLine _whsWorkLine)
    {
        InventDim   InventDim = _whsWorkLine.inventDim();

        InventDim.wmsLocationid = _whsWorkLine.WMSLocationId;
        InventDim = InventDim::findOrCreate(InventDim);

        return InventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// finds the quality order for the railcar line 
    /// </summary>
    /// <param name = "_itemId">item to locate quality order</param>
    /// <param name = "_inventdimId">inveoty dim to filter quality order</param>
    /// <returns>quality order status</returns>
    public InventTestOrderStatus qualityOrderStatus(itemId _itemId, InventDimId _inventdimId = null)
    {
       

        //InventQualityOrderTable QualityOrder;
        InventQualityOrderTable qualityOrder;
       
        select firstonly QualityOrder
            where QualityOrder.ItemId == _itemId
                && QualityOrder.InventDimId == _inventdimId;

        if (workTable.WorkTransType == WHSWorkTransType::Purch)
        {
            select firstonly qualityOrder
                order by RecId desc
                where qualityOrder.ReferenceType    == InventTestReferenceType::Purch
                    && qualityOrder.InventRefId     == workTable.OrderNum;

            if (qualityOrder)
            {
                return qualityOrder.OrderStatus;
            }
            else
            {
                return InventTestOrderStatus::Pass;
            }
        }
        else
        {
            return InventTestOrderStatus::Pass;
        }
        

        //return QualityOrder.OrderStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapWorkToRailCar</Name>
				<Source><![CDATA[
    /// <summary>
    /// map custom worktypes to a struct.
    /// </summary>
    public void mapWorkToRailCar()
    {
        WHSWorkLine workLine;
        WHSWorkLineCustom  customData;

        while select workLine
            join customData
            where workline.WorkId == customData.WorkId
                && workline.lineNUm == customData.LineNum
                && workline.WorkId == workTable.WorkId
                && workLine.WorkType == WHSWorkType::Custom
        {
           
            switch (workLine.TTBWHSCustomTypeMap)
            {
                case TTBWHSCustomTypeMap::EndInsideMeter:
                    customTypes.EndInsideMeter = str2Num( customData.Data) ;
                    break;
                case TTBWHSCustomTypeMap::EndOffloadMeter : 
                    customTypes.EndOffloadMeter = str2Num( customData.Data) ; 
                    break;
                case TTBWHSCustomTypeMap::GrossWeightBottle : 
                    customTypes.GrossWeightBottle = str2Num( customData.Data) ; 
                    break;
                case TTBWHSCustomTypeMap::GrossWeightDrum : 
                    customTypes.GrossWeightDrum = str2Num( customData.Data) ; 
                    break;
               
                case TTBWHSCustomTypeMap::OutageGauge : 
                    customTypes.OutageGauge = str2Num( customData.Data) ; 
                    break;
                case TTBWHSCustomTypeMap::ConveyanceEmpty : 
                    if( strUpr( customData.Data) == 'Y')
                    {
                        customTypes.ConveyanceEmpty = true;
                    }
                    break;
                case TTBWHSCustomTypeMap::StartInsideMeter : 
                    customTypes.StartInsideMeter = str2Num( customData.Data) ; 
                    break;
                case TTBWHSCustomTypeMap::StartOffloadMeter : 
                    customTypes.StartOffloadMeter = str2Num( customData.Data) ; 
                    break;
                case TTBWHSCustomTypeMap::TankEndInchLbs : 
                    customTypes.TankEndInchLbs = str2Num( customData.Data) ; 
                    break;
                case TTBWHSCustomTypeMap::TankEndTemp : 
                    customTypes.TankEndTemp = str2Num( customData.Data) ; 
                    break;
               
                    break;
                case TTBWHSCustomTypeMap::TankStartInchLbs : 
                    customTypes.TankStartInchLbs = str2Num( customData.Data) ; 
                    break;
                case TTBWHSCustomTypeMap::TankStartTemp : 
                    customTypes.TankStartTemp = str2Num( customData.Data) ; 
                    break;
                case TTBWHSCustomTypeMap::TareWeightDrum : 
                    customTypes.TareWeightDrum = str2Num( customData.Data) ; 
                    break;
               
                case TTBWHSCustomTypeMap::Temperature : 
                    customTypes.Temperature = str2Num( customData.Data) ; 
                    break;
                
               
                default:
                    break;
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHeaderInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// identify header inventdimID
    /// </summary>
    /// <returns>inventopry dimension Id</returns>
    protected InventDimId findHeaderInventDimId()
    {
        InventDim inventdim;

        inventdim.InventSiteId = workTable.InventSiteId;
        inventdim.inventLocationId =workTable.InventLocationId;
        inventdim.wMSLocationId = workTable.getFinalPutLocation();
        inventdim = inventdim::findOrCreate(inventdim);
        
        return InventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRailCarLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// init rialcar record line
    /// </summary>
    /// <param name = "_line">railcarline record</param>
    /// <param name = "_workLine">whsWorkLine record</param>
    protected void initRailCarLine(TTBRailCarLine _line, WHSWorkLine _workLine)
    {
        LogisticsEntityPostalAddressView    postalAddress;
        TTBPermitAddress				    ttbPermitAddress;
        TTBPermitTable					    ttbPermitTable;
        LogisticsLocationRole               locationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery);
    
        // DSP
        while select postalAddress
            join ttbPermitAddress
            join ttbPermitTable
            where postalAddress.Entity == InventLocation::find(workTable.InventLocationId).RecId
                && postalAddress.EntityType == LogisticsLocationEntityType::Warehouse
                && postalAddress.PostalAddress == ttbPermitAddress.LogisticsPostalAddress
                && (postalAddress.ValidFrom < DateTimeUtil::utcNow() || postalAddress.ValidFrom == utcDateTimeNull())
                && (postalAddress.ValidTo > DateTimeUtil::utcNow() || postalAddress.ValidTo == utcDateTimeNull())
                && ttbPermitAddress.PermitTable == ttbPermitTable.RecId
        {
            if (strScan(postalAddress.locationRoles(),locationRole.description(), 0, strLen(postalAddress.locationRoles())))
            {
                _line.DSPNumber = ttbPermitTable.PermitId;
            }
        }

        _line.InventGaugeId = inventGaugeId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>findOnHandInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the physical qty on hand for a invetory dimension
    /// </summary>
    /// <param name = "_itemId">Item to use</param>
    /// <param name = "_inventDimId">invent dimensions</param>
    /// <returns></returns>
    protected InventQtyAvailPhysical findOnHandInventory(ItemId _itemId, InventDimId _inventDimId)
    {
        InventOnhand    inventOnhand;
        InventDim       inventDim = inventDim::find(_inventDimId);
        InventDimParm   inventDimParm;

        inventDimParm.initFromInventDim(inventDim);
        inventOnhand = InventOnhand::newParameters(_itemId, inventDim, inventDimParm);
        //return inventOnhand.availPhysical();

        return inventOnhand.physicalInvent();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>