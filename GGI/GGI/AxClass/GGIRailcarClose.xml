<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIRailcarClose</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GGIRailcarClose</c> class handled the closing of the Railcar record.
/// </summary>
public class GGIRailcarClose
{
    TTBRailCarTable     railcarTable;
    TTBRailCarLine      railCarLineFirst;
    InventQtyOnHand     inventQtyOnHand;
    InventQty           onHandPhysInventQty;
    InventJournalTable  inventJournalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static GGIRailcarClose construct()
    {
        return new GGIRailcarClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        TTBRailCarTable                 railCar;
        GGIRailcarClose                 railCarClose;       
        FormDataSource                  fdsCaller;  

        if (_args.dataset() == tableNum(TTBRailCarTable))
        {
            railCar         = _args.record();
            fdsCaller       = FormDataUtil::getFormDataSource(railCar);
            railCarClose    = GGIRailcarClose::construct();
                     
            railCarClose.parmRailcarTable(railCar);
            railCarClose.run();

            fdsCaller.refresh();
            fdsCaller.reread();
            fdsCaller.research(true);

            railCar = TTBRailCarTable::find(railCar.RecId);

            if (railCar.RailCarStatus == TTBRailCarStatus::Closed)
            {
                info(strFmt("@GGI:RailcarClose", railCar.RailCarRecordNumber));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRailcarTable</Name>
				<Source><![CDATA[
    public TTBRailCarTable parmRailcarTable(TTBRailCarTable _railcarTable)
    {
        railcarTable = _railcarTable;

        return railcarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        SIGProcedureProvider    procedure;

        railcarTable.validateClosing();      
        
        //SIG - start
        if (isConfigurationkeyEnabled(configurationkeynum(SIG)))
        {
            procedure = GGIRailCarClosingProcedure::newRailCar(railcarTable);
            if (procedure.signatureRequired())
            {
                procedure.sign();
            }

            if (procedure.isSigned())
            {
                this.createGainLoss();
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGainLoss</Name>
				<Source><![CDATA[
    /// <summary>
    ///  create a gain or loss record if Tank/railcar has remaining balance.
    /// </summary>
    public void createGainLoss()
    {
        TTBRailCarLine      railcarLastLine = railcarTable.lastLine();
        container           netQuantities   = railcarTable.netQuantities();
        InventQtyJournal    qty             = conPeek(netQuantities, 1);
        TTBWineGallon       wineGallon      = conPeek(netQuantities, 2);
        TTBProofGallon      proofGallon     = conPeek(netQuantities, 3);
      
        select firstonly railCarLineFirst
            where railCarLineFirst.RailCarTable == RailcarTable.RecId
                && railCarLineFirst.LineNumber  == 1;

        if (qty)
        {
            InventJournalId journalId = this.createProfitLossJournal(qty * -1);
            this.createGainLossLine(journalId, qty * -1, wineGallon * -1, proofGallon * -1, railcarLastLine);           
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProfitLossJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// create a new journal for loss or gain of materials.
    /// </summary>
    /// <param name = "_qty">Qty to create adjustment for.</param>
    /// <returns>Inventory JournalId created </returns>
    protected InventJournalId createProfitLossJournal(Qty _qty)
    {
        InventJournalTrans          inventJournalTrans;
        InventJournalNameId         inventJournalName;
        InventDim                   inventDim   = InventDim::find(railCarLineFirst.InventDimId);
        InventTable                 inventTable = InventTable::find(railCarLineFirst.ItemId);
        JournalCheckPost            journalCheckPost;

        ttsbegin;
        inventJournalName = InventParameters::find().TTBRCROffloadInvAdjJournalNameId;

        inventJournalTable.InventSiteId     = inventDim.InventSiteId;
        inventJournalTable.InventLocationId = inventDim.InventLocationId;
        inventJournalTable.initFromInventJournalName(InventJournalName::find(inventJournalName));
        inventJournalTable.insert();
        //Creation of Inventory Journal Lines
        inventJournalTrans.clear();
        inventJournalTrans.initFromInventJournalTable(inventJournalTable);
        inventJournalTrans.initFromInventTable(inventTable);
        inventJournalTrans.InventDimId = railCarLineFirst.InventDimId;
        inventJournalTrans.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(inventTable.DefaultDimension, inventDim.inventSite().DefaultDimension);
        inventJournalTrans.TransDate = systemDateGet();
        inventJournalTrans.ItemId = railCarLineFirst.ItemId;
        inventJournalTrans.Qty = _qty;

        if(_qty < 0)
        {
            inventJournalTrans.CostAmount = inventJournalTrans.CostAmount * -1 ;
        }

        inventJournalTrans.insert();
        ttscommit;
        //Posting the journal
        journalCheckPost = InventJournalCheckPost::newPostJournal(inventJournalTable);
        journalCheckPost.run();

        return inventJournalTable.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGainLossLine</Name>
				<Source><![CDATA[
    protected LineNum createGainLossLine(InventJournalId _InventJournalId, Qty _gainLossQty, TTBWineGallon _wineGallon, TTBProofGallon _proofGallon, TTBRailCarLine _lastLine)
    {
        TTBRailCarLine profitLossline;
        
        profitLossline.clear();
        profitLossline.railCarTable     = railCarTable.RecId;
        profitLossline.TransDate        = systemDateGet();
        profitLossline.ItemId           = railCarLineFirst.ItemId;
        profitLossline.InventDimId      = railCarLineFirst.inventDimid;
        profitLossline.Qty              = _gainLossQty;
        profitLossline.WineGallon       = _wineGallon;
        profitLossline.ProofGallon      = _proofGallon;
        profitLossline.LineNumber       = _lastLine.LineNumber + 1 ;
        profitLossline.TransType        = GGIRailcarTransType::InventLossProfit;
        profitLossline.ReferenceId      = inventJournalTable.JournalId;
        profitLossline.JournalNameId    = inventJournalTable.JournalNameId;
        profitLossline.DSPNumber        = _lastLine.DSPNumber;
       
        profitLossline.insert();
        return profitLossline.LineNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>