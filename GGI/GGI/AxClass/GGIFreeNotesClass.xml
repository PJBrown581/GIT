<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIFreeNotesClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GGIFreeNotesClass</c> is used to populate additional fields on the advanced notes table 
/// </summary>
class GGIFreeNotesClass
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustVendFreeNotesHeader_GGILogisticsLocationId_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup address based on customer
    /// </summary>
    /// <param name = "sender">
    ///     The record being passed in
    /// </param>
    /// <param name = "e">
    ///     Form control event args
    /// </param>
    [FormControlEventHandler(formControlStr(FreeNotes_IT, CustVendFreeNotesHeader_GGILogisticsLocationId), FormControlEventType::Lookup),
    SuppressBPWarning('BPParameterNotUsed', 'False positive')]
    public static void CustVendFreeNotesHeader_GGILogisticsLocationId_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        CustTable                   custTable;
        LogisticsLocation           logisticsLocation;
        DirPartyTable               dirPartyTable;
        DirPartyLocation            dirPartyLocation;
        LogisticsPostalAddress      logisticsPostalAddress;
        Query                       lookupQuery = new Query();
        QueryBuildDataSource        lookupQueryDataSource;
        FormRun                     element = sender.formRun();
        FormDataSource              CustVendFreeNotesHeader_ds = element.dataSource(formDataSourceStr(FreeNotes_IT, CustVendFreeNotesHeader)) as FormDataSource;
        FreeNotesTable_IT           FreeNotesTable_IT = CustVendFreeNotesHeader_ds.cursor();

        if (FreeNotesTable_IT.Module != ModuleCustVend::Vend && FreeNotesTable_IT.CustVendCode != TableGroupAll::All && FreeNotesTable_IT.CustVendCode != TableGroupAll::GroupId && FreeNotesTable_IT.CustVendRelation)
        {
            // Construct the SysRefTableLookup object
            SysTableLookup sysTableLookup = sysTableLookup::newParameters(tableNum(logisticsLocation), sender);

            // Construct the query's data source
            lookupQueryDataSource = lookupQuery.addDataSource(tableNum(logisticsLocation));

            // To add multiple values in range.
            while select  LocationID from Logisticslocation
            join LogisticsPostalAddress
            join DirPartyLocation
            join dirPartyTable
            join custTable
                where Logisticslocation.recid == logisticsPostalAddress.Location
                    && logisticsPostalAddress.Location == dirPartyLocation.Location
                    && dirPartyLocation.Party == custTable.Party
                    && custTable.Party == DirPartyTable.RecId
                    && custTable.AccountNum == FreeNotesTable_IT.CustVendRelation
            {
                // Add ranges to the query data source
                lookupQueryDataSource.addRange(fieldNum(logisticsLocation, LocationID)).value(queryValue(Logisticslocation.locationid));
            }

            // Add the field list that will be displayed on the lookup form
            // You can Change/Add more fields in lookup based on your requirement.
            sysTableLookup.addLookupfield(fieldNum(logisticsLocation, locationID));
            sysTableLookup.addLookupfield(fieldNum(logisticsLocation, Description));
            

            // Pass the query to the lookup object
            sysTableLookup.parmQuery(lookupQuery);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustVendFreeNotesHeader_GGILogisticsLocationId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the LogisticsLocationRecId on the notes table
    /// </summary>
    /// <param name = "sender">
    ///     The record being passed in
    /// </param>
    /// <param name = "e">
    ///     Form control event args
    /// </param>
    [FormControlEventHandler(formControlStr(FreeNotes_IT, CustVendFreeNotesHeader_GGILogisticsLocationId), FormControlEventType::Modified),
    SuppressBPWarning('BPParameterNotUsed', 'False positive')]
    public static void CustVendFreeNotesHeader_GGILogisticsLocationId_OnModified(FormControl sender, FormControlEventArgs e)
    {
        FormRun             element = sender.formRun();
        FormDataSource      CustVendFreeNotesHeader_ds = element.dataSource(formDataSourceStr(FreeNotes_IT, CustVendFreeNotesHeader)) as FormDataSource;
        FreeNotesTable_IT   freeNotesTable_IT = CustVendFreeNotesHeader_ds.cursor();
        LogisticsLocation   logisticsLocation;
        LogisticsPostalAddress  logisticsPostalAddress;

        select firstonly RecId
            from logisticslocation
                where logisticslocation.LocationId == freeNotesTable_IT.GGILogisticsLocationId;

        select firstonly logisticsPostalAddress
            where logisticsPostalAddress.Location == logisticslocation.recid;
    
        CustVendFreeNotesHeader_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustVendFreeNotesLines_GGILogisticsLocationId_OnLookup2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup address based on customer
    /// </summary>
    /// <param name = "sender">
    ///     The record being passed in
    /// </param>
    /// <param name = "e">
    ///     Form control event args
    /// </param>
    [FormControlEventHandler(formControlStr(FreeNotes_IT, CustVendFreeNotesLines_GGILogisticsLocationId), FormControlEventType::Lookup),
    SuppressBPWarning('BPParameterNotUsed', 'False positive')]
    public static void CustVendFreeNotesLines_GGILogisticsLocationId_OnLookup2(FormControl sender, FormControlEventArgs e)
    {
        CustTable                   custTable;
        LogisticsLocation           logisticsLocation;
        DirPartyTable               dirPartyTable;
        DirPartyLocation            dirPartyLocation;
        LogisticsPostalAddress      logisticsPostalAddress;
        Query                       lookupQuery = new Query();
        QueryBuildDataSource        lookupQueryDataSource;
        FormRun                     element = sender.formRun();
        FormDataSource              CustVendFreeNotesLines_ds = element.dataSource(formDataSourceStr(FreeNotes_IT, CustVendFreeNotesLines)) as FormDataSource;
        FreeNotesTable_IT           FreeNotesTable_IT = CustVendFreeNotesLines_ds.cursor();

        if (FreeNotesTable_IT.Module != ModuleCustVend::Vend && FreeNotesTable_IT.CustVendCode != TableGroupAll::All && FreeNotesTable_IT.CustVendCode != TableGroupAll::GroupId && FreeNotesTable_IT.CustVendRelation)
        {
            // Construct the SysRefTableLookup object
            SysTableLookup sysTableLookup = sysTableLookup::newParameters(tableNum(logisticsLocation), sender);

            // Construct the query's data source
            lookupQueryDataSource = lookupQuery.addDataSource(tableNum(logisticsLocation));

            // To add multiple values in range.
            while select  LocationID from Logisticslocation
            join LogisticsPostalAddress
            join DirPartyLocation
            join dirPartyTable
            join custTable
                where Logisticslocation.recid == logisticsPostalAddress.Location
                    && logisticsPostalAddress.Location == dirPartyLocation.Location
                    && dirPartyLocation.Party == custTable.Party
                    && custTable.Party == DirPartyTable.RecId
                    && custTable.AccountNum == FreeNotesTable_IT.CustVendRelation
            {
                // Add ranges to the query data source
                lookupQueryDataSource.addRange(fieldNum(logisticsLocation, LocationID)).value(queryValue(Logisticslocation.locationid));
            }

            // Add the field list that will be displayed on the lookup form
            // You can Change/Add more fields in lookup based on your requirement.
            sysTableLookup.addLookupfield(fieldNum(logisticsLocation, locationID));
            sysTableLookup.addLookupfield(fieldNum(logisticsLocation, Description));
            

            // Pass the query to the lookup object
            sysTableLookup.parmQuery(lookupQuery);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustVendFreeNotesLines_GGILogisticsLocationId_OnModified2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the LogisticsLocationRecId on the notes table
    /// </summary>
    /// <param name = "sender">
    ///     The record being passed in
    /// </param>
    /// <param name = "e">
    ///     Form control event args
    /// </param>
    [FormControlEventHandler(formControlStr(FreeNotes_IT, CustVendFreeNotesLines_GGILogisticsLocationId), FormControlEventType::Modified),
    SuppressBPWarning('BPParameterNotUsed', 'False positive')]
    public static void CustVendFreeNotesLines_GGILogisticsLocationId_OnModified2(FormControl sender, FormControlEventArgs e)
    {
        FormRun             element = sender.formRun();
        FormDataSource      CustVendFreeNotesLines_ds = element.dataSource(formDataSourceStr(FreeNotes_IT, CustVendFreeNotesLines)) as FormDataSource;
        FreeNotesTable_IT   freeNotesTable_IT = CustVendFreeNotesLines_ds.cursor();
        LogisticsLocation   logisticsLocation;

        select firstonly RecId 
            from logisticslocation
                where logisticslocation.LocationId == freeNotesTable_IT.GGILogisticsLocationId;

        freeNotesTable_IT.GGILogisticsLocationRecid = logisticslocation.RecId;
    
        CustVendFreeNotesLines_ds.refresh();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>