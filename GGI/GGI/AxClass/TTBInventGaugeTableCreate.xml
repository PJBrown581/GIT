<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBInventGaugeTableCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// TTB006_GaugeReport Creates gauge record calling class
/// </summary>
class TTBInventGaugeTableCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFromWorkCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Creates guage record from a completed work table and work line
    /// </summary>
    /// <param name = "workTable">
    ///		Completed work table data to build Gauge record from
    /// </param>
    /// <param name = "workLine">
    ///		Completed work line data to build Gauge record from
    /// </param>
    /// <returns>
    ///		RecId of newly created gauge record
    /// </returns>
    public static RefRecId createFromWorkCompleted(
        WHSWorkTable		workTable,
        WHSWorkLine			workLine
        )
    {
        TTBInventGaugeTable				invGaugeTable;
        NumberSequenceTable				numberSeqTable;
        NumberSeq						numberSeq;
        TTBFGSerialandBatch				serialbatch;
        TTBFormluaName	ttbFormulaName = TTBFormluaName::find(InventTable::find(workLine.ItemId).TTBFormulaID);
        
        WHSWorkLine workLinePick = WHSWorkTable::getFirstPickWorkLine(workTable.WorkId);
        
        ttsbegin;
        numberSeqTable = NumberSequenceTable::find(TTBInventSiteParameters::find(workTable.InventSiteId).GaugeRecordNumberSequenceTable);
        numberSeq = NumberSeq::newGetNumFromCode(numberSeqTable.NumberSequence, NumberSeqScope::find(numberSeqTable.NumberSequenceScope));

        invGaugeTable.initValue();
        invGaugeTable.InventGaugeId = numberSeq.num();
        numberSeq.used();

        invGaugeTable.WorkId = workTable.WorkId;
        invGaugeTable.InventLocationId = workTable.InventLocationId;
        invGaugeTable.InventSiteId = workTable.InventSiteId;
        invGaugeTable.WMSLocationId = workTable.getFinalPutLocation();
        invGaugeTable.InventTransId = workLine.InventTransId;
        invGaugeTable.WhSWorkLine = workLine.RecId;
        invGaugeTable.WorkTransType = workTable.WorkTransType;
        invGaugeTable.ItemId = workLine.ItemId;
        invGaugeTable.Qty = (workTable.WorkTransType == WHSWorkTransType::ReturnOrder) ? workLinePick.QtyWork : workLine.QtyWork;
        invGaugeTable.UnitId = workLine.UnitId;
        invGaugeTable.InventSerialId = InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
                workLine.InventTransId).RecId).inventDim().inventSerialId;
        invGaugeTable.InventBatchId = workLine.getTTBBatchId();

        invGaugeTable.Proof = workLine.getTTBWorkLineProof();
        if (ttbFormulaName.AlcoholType == TTBAlcoholType::PURE)
        {
            invGaugeTable.ProofDistillation = workLine.getTTBWorkLineProofDistil();
        }
  
        // pfusco 3/27/2021 - create serial range for Returns and POs
        serialbatch = TTBInventGaugeTableCreate::createSerialBatchStringWork(workTable, workLine);
        
        invGaugeTable.FGSerialandBatch = serialbatch;
        invGaugeTable.OutageGauge = str2num(workTable.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::OutageGauge));
        invGaugeTable.Temperature = str2num(workTable.getTTBWHSCustomTypeMap(TTBWHSCustomTypeMap::Temperature));

        // DSP
        invGaugeTable.DSPNumber = TTBInventGaugeTableCreate::getDSPforSite(InventLocation::find(workTable.InventLocationId));

        invGaugeTable.insert();
        ttscommit;

        return invGaugeTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromInventJournalPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Creates guage record from a posted inventory journal line
    /// </summary>
    /// <param name = "inventJournalTrans">
    ///		Posted Inventory journal line
    /// </param>
    public static void createFromInventJournalPost(
        InventJournalTrans		inventJournalTrans,
        Qty						setQty,
        UnitOfMeasureSymbol		setUnit
        )
    {
        TTBInventGaugeTable			invGaugeTable;
        NumberSequenceTable			numberSeqTable;
        NumberSeq					numberSeq;
        TTBFGSerialandBatch			serialbatch;
  
        ttsbegin;
        numberSeqTable = NumberSequenceTable::find(TTBInventSiteParameters::find(inventJournalTrans.inventDim().InventSiteId).GaugeRecordNumberSequenceTable);
        numberSeq = NumberSeq::newGetNumFromCode(numberSeqTable.NumberSequence, NumberSeqScope::find(numberSeqTable.NumberSequenceScope));
        numberSeq.used();

        invGaugeTable.initValue();
        invGaugeTable.InventGaugeId = numberSeq.num();

        invGaugeTable.InventLocationId = inventJournalTrans.inventDim().InventLocationId;
        invGaugeTable.InventSiteId = inventJournalTrans.inventDim().InventSiteId;
        invGaugeTable.WMSLocationId = inventJournalTrans.inventDim().wMSLocationId;
        invGaugeTable.InventTransId = inventJournalTrans.InventTransId;
        invGaugeTable.ItemId = inventJournalTrans.ItemId;
        invGaugeTable.Qty = abs(setQty);
        invGaugeTable.UnitId = setUnit;
        invGaugeTable.InventSerialId = inventJournalTrans.inventDim().inventSerialId;
        invGaugeTable.InventBatchId = inventJournalTrans.inventDim().inventBatchId;
        
        if (inventJournalTrans.inventDim().inventSerialId)
        {
            serialbatch = 'SN: ' + inventJournalTrans.inventDim().inventSerialId;
        }
        
        if (inventJournalTrans.inventDim().inventBatchId)
        {
            if (strLen(serialbatch) > 0)
            {
                serialbatch += ', ';
            }
            serialbatch += 'BN: ' + inventJournalTrans.inventDim().inventBatchId;
        }

        invGaugeTable.FGSerialandBatch = serialbatch;
        invGaugeTable.Proof = InventTable::find(inventJournalTrans.ItemId).TTBProof;
        invGaugeTable.ProofDistillation = InventTable::find(inventJournalTrans.ItemId).TTBProof;

        // DSP
        invGaugeTable.DSPNumber = TTBInventGaugeTableCreate::getDSPforSite(InventLocation::find(inventJournalTrans.inventDim().InventLocationId));
            
        invGaugeTable.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSerialBatchStringWork</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Creates freetext field in Gauge record displaying serial numbers and batch numbers.
    /// </summary>
    /// <param name = "_workTable">
    ///		WHSWorkTable used to generate serial batch string
    /// </param>
    /// <param name = "workLinePut">
    ///		WHSWorkTable used to generate serial batch string
    /// </param>
    /// <returns>
    ///		string of serial and batch number
    /// </returns>
    public static TTBFGSerialandBatch createSerialBatchStringWork(WHSWorkTable _workTable, WHSWorkLine workLinePut)
    {
        InventTrans				inventTrans;
        InventDim				inventDim;
        WHSWorkInventTrans		whsWorkInventTrans;
        TTBFGSerialandBatch		serialbatch;

        WHSWorkLine workLinePick = WHSWorkTable::getFirstPickWorkLine(_workTable.WorkId);
        WHSWorkLine workLinePutFirst = WHSWorkTable::getFirstPutWorkLine(_workTable.WorkId);
        WHSWorkLine workLinePutLast = WHSWorkTable::getLastClosedPutWorkLine(_workTable.WorkId);
        whsWorkInventTrans = WHSWorkInventTrans::findbyWorkIdLineNumItemIdTransIdParent(workLinePut.WorkId, workLinePut.LineNum,
                                                                                        workLinePut.ItemId, workLinePut.InventTransId);
        
        if (_workTable.WorkTransType == WHSWorkTransType::ReturnOrder)
        {
            serialbatch = 'SN: ' + InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
                workLinePutFirst.InventTransId).RecId).inventDim().inventSerialId;

            if (workLinePick.QtyWork > 1)
            {
                serialbatch += '-' + InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
                    workLinePutLast.InventTransId).Recid).inventDim().inventSerialId;
            }

            serialbatch += ', BN: ' + InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
                workLinePut.InventTransId).RecId).inventDim().inventBatchId;
        }

        if (_workTable.WorkTransType == WHSWorkTransType::Purch
            || _workTable.WorkTransType == WHSWorkTransType::TransferReceipt)
        {
            select firstonly inventTrans
                join inventDim
                order by inventDim.inventSerialId
                    where inventTrans.inventDimId == inventDim.inventDimId
                        && inventTrans.InventTransOrigin == InventTransOrigin::findByInventTransId(whsWorkInventTrans.InventTransIdTo).RecId;
     
            if (inventDim.inventSerialId)
            {
                serialbatch = 'SN: ' + inventDim.inventSerialId;

                if (workLinePut.QtyWork > 1)
                {
                    select firstonly inventTrans
                    join inventDim
                    order by inventDim.inventSerialId desc
                        where inventTrans.inventDimId == inventDim.inventDimId
                            && inventTrans.InventTransOrigin == InventTransOrigin::findByInventTransId(whsWorkInventTrans.InventTransIdTo).RecId;

                    serialbatch += '-' + inventDim.inventSerialId;
                }

                serialbatch += ', ';
            }

            if (InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
                workLinePut.InventTransId).RecId).inventDim().inventBatchId)
            {
                serialbatch += 'BN: ' + InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
                    workLinePut.InventTransId).RecId).inventDim().inventBatchId;
            }
        }

        if (_workTable.WorkTransType == WHSWorkTransType::Invent)
        {
            if (workLinePut.inventDim().inventBatchId)
            {
                serialbatch = 'BN: ' + workLinePut.inventDim().inventBatchId;
            }
        }

        if (!serialbatch &&
                InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(workLinePut.InventTransId).Recid).inventDim().inventBatchId)
        {
            serialbatch = 'BN: ' + InventTrans::findByInventTransOrigin(InventTransOrigin::findByInventTransId(
                        workLinePut.InventTransId).Recid).inventDim().inventBatchId;
        }

        return serialbatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDSPforSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///		Creates DSP field in Gauge record.
    /// </summary>
    /// <param name = "_inventLocation">
    ///		Inventlocation
    /// </param>
    /// <returns>
    ///		DSP field from postal address
    /// </returns>
    public static TTBPermitId getDSPforSite(InventLocation _inventLocation)
    {
        LogisticsEntityPostalAddressView postalAddress;
        TTBPermitAddress				ttbPermitAddress;
        TTBPermitTable					ttbPermitTable;
        LogisticsLocationRole           locationRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery);
        TTBPermitId						ret;

        while select postalAddress
            join ttbPermitAddress
            join ttbPermitTable
            where postalAddress.Entity == _inventLocation.RecId
                && postalAddress.EntityType == LogisticsLocationEntityType::Warehouse
                && postalAddress.PostalAddress == ttbPermitAddress.LogisticsPostalAddress
                && (postalAddress.ValidFrom < DateTimeUtil::utcNow() || postalAddress.ValidFrom == utcDateTimeNull())
                && (postalAddress.ValidTo > DateTimeUtil::utcNow() || postalAddress.ValidTo == utcDateTimeNull())
                && ttbPermitAddress.PermitTable == ttbPermitTable.RecId
        {
            if (strScan(postalAddress.locationRoles(),locationRole.description(), 0, strLen(postalAddress.locationRoles())))
            {
                ret = ttbPermitTable.PermitId;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>