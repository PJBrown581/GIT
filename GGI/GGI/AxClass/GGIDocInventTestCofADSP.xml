<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocInventTestCofADSP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The GGIDocInventTestCofADSP class converts the standard CofA report DP class to a DSP class 
///     and adds a field to present the test result based on the decimal precision of the test
/// </summary>
class GGIDocInventTestCofADSP extends DocDatasourceProviderSrsReporting
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Class description.
    /// </summary>
    /// <returns>
    ///     The class description.
    /// </returns>
    public ClassDescription description()
    {
        return "@GGI:CertificateOfAnalysisDSP";
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDataFieldsForRdpTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds data points for the RDP data source.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     Docentric record to contain the data points.
    /// </param>
    /// <param name = "_rdpTableRecord">
    ///     RDP data source.
    /// </param>
    /// <param name = "_rdpTableName">
    ///     RDP data source name.
    /// </param>
    protected void addDataFieldsForRdpTableRecord(DocXmlRecord _addingRecord, Common _rdpTableRecord, TableName _rdpTableName)
    {
        InventTestTable inventTestTable;
        UnitOfMeasure   UnitOfMeasure;
        real            testResultDecimal;
        str             testResultDecimalStrLength, testResultDecimalStrOriginal, testResultDecimalStrFinal, strDecimalsAdd;
        int             strFound = 0, decLength, decLengthAdd;

        if (_rdpTableName == tableStr(InventTestCertOfAnalysisTmp))
        {            
            InventTestCertOfAnalysisTmp inventTestCertOfAnalysisTmp = _rdpTableRecord;            
            inventTestTable = inventTestTable::find(InventTestCertOfAnalysisTmp.testid);

            if (inventTestTable)
            {
                UnitOfMeasure = UnitOfMeasure::findBySymbol(inventTestTable.TestUnitId);
                testResultDecimalStrOriginal = any2Str(InventTestCertOfAnalysisTmp.TestResultValueReal);
                testResultDecimalStrLength = subStr(testResultDecimalStrOriginal, 1, strFind(testResultDecimalStrOriginal, '.', 1, strLen(testResultDecimalStrOriginal)));

                //CR005B - Add additional fields from quality test to CoA
                _addingRecord.addCalculatedField('Monograph',inventTestTable.GGIMonograph);
                _addingRecord.addCalculatedField('Specifications',inventTestTable.GGISpecifications);

                if (UnitOfMeasure.DecimalPrecision == 0)
                {
                    strFound = strscan(testResultDecimalStrLength,'.',strFound,strlen(testResultDecimalStrLength));

                    if (strFound != 0)
                    {
                        testResultDecimalStrFinal = strRem(testResultDecimalStrLength,'.');
                    }
                    else
                    {
                        testResultDecimalStrFinal = testResultDecimalStrOriginal;
                    }
                
                    _addingRecord.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                }
                else
                {
                    testResultDecimal = decRound(InventTestCertOfAnalysisTmp.TestResultValueReal, UnitOfMeasure.DecimalPrecision);            
                    testResultDecimalStrFinal = substr(any2Str(testResultDecimal),0,UnitOfMeasure.DecimalPrecision + strLen(testResultDecimalStrLength));
                    strFound = strscan(testResultDecimalStrFinal,'.',strFound,strlen(testResultDecimalStrFinal));

                    if (strFound != 0)
                    {
                        decLength = strLen(testResultDecimalStrFinal) - strLen(testResultDecimalStrLength);

                        if (decLength == UnitOfMeasure.DecimalPrecision)
                        {
                            _addingRecord.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                        }
                        else
                        {
                            decLengthAdd = UnitOfMeasure.DecimalPrecision - decLength;

                            switch (decLengthAdd)
                            {
                                case 1:
                                    strDecimalsAdd = '0';
                                    break;
                                case 2:
                                    strDecimalsAdd = '00';
                                    break;
                                case 3:
                                    strDecimalsAdd = '000';
                                    break;
                                case 4:
                                    strDecimalsAdd = '0000';
                                    break;
                                default:
                                    strDecimalsAdd = '';
                                    break;
                            }
                            
                            testResultDecimalStrFinal = testResultDecimalStrFinal + strDecimalsAdd;
                            _addingRecord.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                        }
                    }
                    else if (InventTestCertOfAnalysisTmp.TestResultResult)
                    {
                        switch (UnitOfMeasure.DecimalPrecision)
                        {
                            case 1:
                                strDecimalsAdd = '.0';
                                break;
                            case 2:
                                strDecimalsAdd = '.00';
                                break;
                            case 3:
                                strDecimalsAdd = '.000';
                                break;
                            case 4:
                                strDecimalsAdd = '.0000';
                                break;
                            default:
                                strDecimalsAdd = '';
                                break;
                        }
                                        
                        testResultDecimalStrFinal = testResultDecimalStrFinal + strDecimalsAdd;                    
                        _addingRecord.addCalculatedField('TestResultValueDecimalPrecision',testResultDecimalStrFinal);
                    }
                }
            }

            InventTestCertOfAnalysisTable   coaTable = InventTestCertOfAnalysisTable::find(inventTestCertOfAnalysisTmp.InventCertificateOfAnalysisId);

            this.addBatchAttribute(_addingRecord, coaTable);
            this.addProductInformation(_addingRecord, coaTable);
            this.addSignature(_addingRecord, coaTable);

            GGICertificateOfAnalysisManager coaManager = GGICertificateOfAnalysisManager::newId(coaTable.InventCertificateOfAnalysisId);

            this.addBatchOrder(_addingRecord, coaManager);
            this.addQualityOrder(_addingRecord, coaManager);
            this.addSalesOrder(_addingRecord, coaManager);
        }
        
        super(_addingRecord, _rdpTableRecord, _rdpTableName);           
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated inherited batch attributes, if any.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the inherited batch attributes.
    /// </param>
    /// <param name = "_coaTable">
    ///     The certificate of analysis record.
    /// </param>
    private void addBatchAttribute(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTable _coaTable)
    {
        InventBatch         inventBatch     = InventBatch::find(InventDim::find(_coaTable.InventDimId).inventBatchId, _coaTable.ItemId);
        PdsBatchAttributes  batchAttribute;

        DocXmlRecord    docInventBatch = _addingRecord.addChildRecord(inventBatch);

        docInventBatch.addField(fieldStr(InventBatch, inventBatchId));
        docInventBatch.addField(fieldStr(InventBatch, prodDate));
        docInventBatch.addField(fieldStr(InventBatch, expDate));

        while select batchAttribute
            where batchAttribute.ItemId == _coaTable.ItemId
                && batchAttribute.InventBatchId == inventBatch.inventBatchId
        {
            DocXmlRecord docBatchAttribute = docInventBatch.addChildRecord(batchAttribute);

            docBatchAttribute.addField(fieldStr(PdsBatchAttributes, PdsBatchAttribId));
            docBatchAttribute.addDisplayMethod(tableMethodStr(PdsBatchAttributes, pdsBatchAttribMin));
            docBatchAttribute.addDisplayMethod(tableMethodStr(PdsBatchAttributes, pdsBatchAttribMax));
            docBatchAttribute.addDisplayMethod(tableMethodStr(PdsBatchAttributes, pdsBatchAttribTarget));
            docBatchAttribute.addDisplayMethod(tableMethodStr(PdsBatchAttributes, getBatchAttribValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Add product information to the record.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the inherited batch attributes.
    /// </param>
    /// <param name = "_coaTable">
    ///     The certificate of analysis record.
    /// </param>
    private void addProductInformation(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTable _coaTable)
    {
        GGIProductManager   productManager  = GGIProductManager::newItemId(_coaTable.ItemId);
        InventTable         inventTable     = productManager.inventTable();

        DocXmlRecord    docInventTable = _addingRecord.addChildRecord(inventTable);

        docInventTable.addCalculatedField('LegacyCatalogUS', productManager.legacyCatalogUS(), "Legacy catalag number (US)");
        docInventTable.addCalculatedField('Notes', GGIDocuManager::notes(inventTable), "Notes");

        this.addProductCategories(docInventTable, _coaTable, productManager);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductCategories</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated product categories.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the  product categories.
    /// </param>
    /// <param name = "_coaTable">
    ///     The certificate of analysis record.
    /// </param>
    /// <param name = "_productManager">
    ///     An instance of the product manager corresponding to _coaTable. Optional.
    /// </param>
    private void addProductCategories(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTable _coaTable, GGIProductManager _productManager = null)
    {
        GGIProductManager   productManager      = _productManager ? _productManager : GGIProductManager::newItemId(_coaTable.ItemId);
        MapEnumerator       productCategories   = productManager.productCategories().getEnumerator();
        
        while (productCategories.moveNext())
        {
            DocXmlRecord docProductCategory = _addingRecord.addChildCalculatedRecord('ProductCategory');

            docProductCategory.addCalculatedField('Hierarchy', productCategories.currentKey(), literalStr("@SYS40832"));
            docProductCategory.addCalculatedField('Name', productCategories.currentValue(), literalStr("@SYS80991"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated production batch order information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the production batch order.
    /// </param>
    /// <param name = "_coaManager">
    ///     Certificate of analysis manager.
    /// </param>
    private void addBatchOrder(DocXmlRecord _addingRecord, GGICertificateOfAnalysisManager _coaManager)
    {
        ProdTable       prodTable       = _coaManager.prodTable();
        DocXmlRecord    docProdTable    = _addingRecord.addChildRecord(prodTable);

        docProdTable.addField(fieldStr(ProdTable, FinishedDate));
        docProdTable.addField(fieldStr(ProdTable, CreatedDateTime));
        docProdTable.addCalculatedField('Site', prodTable.inventDim().InventSiteId, new SysDictField(tableNum(InventDim), fieldNum(InventDim, InventSiteId)).labelLabel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated quality order information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the quality order.
    /// </param>
    /// <param name = "_coaManager">
    ///     Certificate of analysis manager.
    /// </param>
    private void addQualityOrder(DocXmlRecord _addingRecord, GGICertificateOfAnalysisManager _coaManager)
    {
        InventQualityOrderLine  qualityOrderLine =_coaManager.qualityOrderLine();

        while (qualityOrderLine)
        {
            DocXmlRecord docQualityOrderLine = _addingRecord.addChildRecord(qualityOrderLine);

            docQualityOrderLine.addAllFields();

            InventQualityOrderLineResults   qualityOrderLineResult = _coaManager.qualityOrderLineResult(qualityOrderLine);

            while (qualityOrderLineResult)
            {
                DocXmlRecord docQualityOrderLineResult = docQualityOrderLine.addChildRecord(qualityOrderLineResult);

                InventTestVariableOutcome testVariableOutcome = _coaManager.testVariableOutcome(qualityOrderLine.VariableId, qualityOrderLineResult.TestResultValueOutcome);

                while (testVariableOutcome)
                {
                    DocXmlRecord docTestVariableOutcome = docQualityOrderLineResult.addChildRecord(testVariableOutcome);

                    docTestVariableOutcome.addAllFields();

                    next testVariableOutcome;
                }

                next qualityOrderLineResult;
            }

            next qualityOrderLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSignature</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated quality order information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the quality order.
    /// </param>
    /// <param name = "_coaTable">
    ///     Certificate of analysis record.
    /// </param>
    private void addSignature(DocXmlRecord _addingRecord, InventTestCertOfAnalysisTable _coaTable)
    {
        GGISignatureManager signatureManager    = GGISignatureManager::newRecord(_coaTable);
        DocXmlRecord        docSignature        = _addingRecord.addChildCalculatedRecord('Signature');

        docSignature.addCalculatedField('DateTime', signatureManager.getDateTime(), "Signature time");
        docSignature.addCalculatedField('Validator', signatureManager.signer(), "Electronic signature");
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the associated sales line item information.
    /// </summary>
    /// <param name = "_addingRecord">
    ///     The XML record to contain the sales line item.
    /// </param>
    /// <param name = "_coaManager">
    ///     Certificate of analysis manager.
    /// </param>
    private void addSalesOrder(DocXmlRecord _addingRecord, GGICertificateOfAnalysisManager _coaManager)
    {
        SalesLine       salesLine       = _coaManager.salesLine();
        DocXmlRecord    docSalesLine    = _addingRecord.addChildRecord(salesLine);

        docSalesLine.addField(fieldStr(SalesLine, SalesQty));
        docSalesLine.addField(fieldStr(SalesLine, SalesUnit));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>