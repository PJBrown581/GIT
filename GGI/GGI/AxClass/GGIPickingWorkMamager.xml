<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIPickingWorkMamager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// class to maange picking qty for mobile devices.
/// some process use async methods. this class will hold runniogn totals
/// </summary>
class GGIPickingWorkMamager 
{
    private List pickingLines;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>packData</Name>
				<Source><![CDATA[
    /// <summary>
    /// packup data in class
    /// </summary>
    /// <returns>internal lsit</returns>
    public container packData()
    { 
        GGIPickingSerialRangePIckQty pickQty;
        ListEnumerator en = pickingLines.getEnumerator();
        container   con;
        int i = 1;

        while (en.moveNext() )
        {
            pickQty = en.current();
            con = conIns(con,i,pickQty.packData());
            i++;
        }
        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
    /// <summary>
    /// unpack data into class
    /// </summary>
    /// <param name = "_packedData">container or list items</param>
    public void unpackData(container _packedData )
    {       
        Container con ;

        for( int i = 1; i <=conLen(_packedData); i++)
        {
            GGIPickingSerialRangePIckQty qtyInfo = new GGIPickingSerialRangePIckQty();
            con = conPeek(_packedData,i);
            qtyInfo.unpackData(con);
            pickingLines.addStart(qtyInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIPickingWorkMamager construct()
    {
        GGIPickingWorkMamager manager = new GGIPickingWorkMamager();
        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        pickingLines = new list (Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// add a line to collection
    /// </summary>
    /// <param name = "_pickingQty">line valkues to add to collection</param>
    public void addLine(GGIPickingSerialRangePIckQty _pickingQty)
    {
        pickingLines.addStart(_pickingQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// remove a line number for the list
    /// </summary>
    /// <param name = "_lineNum">line to be removed</param>
    public void removeLine( LineNum _lineNum)
    {
        GGIPickingSerialRangePIckQty removeLine ;
        ListIterator iter = new ListIterator(pickingLines);
        
        while (iter.more())
        {
            removeLine = iter.value();
            if(removeLine.workline == _lineNum)
            {
                iter.delete();
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQtyPicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add qty in picking
    /// </summary>
    /// <param name = "_lineNum"> line to increase</param>
    /// <param name = "_QtyPicked">amount to increase</param>
    public void addQtyPicked(LineNum _lineNum , inventQty _QtyPicked)
    {
        GGIPickingSerialRangePIckQty pickQty = this.findLine(_lineNum);
        if(pickQty)
        {
            pickQty.qtyInPicking += _QtyPicked; 
   
            if(this.canAutoCloseLine(pickQty))
            {
                this.closeLine(_lineNum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAutoCloseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// determine if a line can be close by internal process
    /// </summary>
    /// <param name = "_pickQty">struct class of data</param>
    /// <returns>allowed to be closed</returns>
    public boolean canAutoCloseLine(GGIPickingSerialRangePIckQty _pickQty)
    {
        boolean ret;
        if(_pickQty.workQty == _pickQty.qtyInPicking)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPickQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// reset the qty of a list item to saved data from workline.
    /// </summary>
    /// <param name = "_linenum">workline number</param>
    public void resetPickQty(LineNum  _linenum)
    {
        GGIPickingSerialRangePIckQty resetLine = this.findLine(_linenum);
        WHSWorkLine workLine = WHSWorkLine::find(resetLine.workId,_linenum);
        if(resetLine && workLine.RecId != 0)
        {
            resetLine.workQty =  workline.QtyWork;
            resetLine.qtyRemaning = workline.QtyRemain;
            resetLine.qtyInPicking = 0 ;
            resetLine.lineStatus = workline.WorkStatus;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// find a line in the collection
    /// </summary>
    /// <param name = "_lineNum">line to return</param>
    /// <returns>data calss of selected line</returns>
    public GGIPickingSerialRangePIckQty findLine(LineNum _lineNum)
    {
        GGIPickingSerialRangePIckQty pickQty;
        ListEnumerator en = pickingLines.getEnumerator();

        while (en.moveNext() )
        {
            pickQty = en.current();
            if(pickQty.workline == _lineNum)
            {
                break;
            }
            else
            {
                pickQty = null;
            }
        }
        return pickQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// set the workstatus closed for line
    /// </summary>
    /// <param name = "_lineNum">line to set closed</param>
    public void closeLine(LineNum _lineNum)
    {
        GGIPickingSerialRangePIckQty pickQty = this.findLine(_lineNum);
        pickQty.lineStatus = WHSWorkStatus::Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePut</Name>
				<Source><![CDATA[
    /// <summary>
    /// determine if all lines are closed and ready to set put screen
    /// </summary>
    /// <returns>can put step take place</returns>
    public boolean canBePut()
    {
        boolean ret = true;
        GGIPickingSerialRangePIckQty pickQty;
        ListEnumerator en = pickingLines.getEnumerator();

        while (en.moveNext() )
        {
            pickQty = en.current();
            if(pickQty.lineStatus != WHSWorkStatus::Closed && pickQty.lineStatus != WHSWorkStatus::Cancelled  )
            {
                ret = false;
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmpty</Name>
				<Source><![CDATA[
    /// <summary>
    /// determine if list is empty
    /// </summary>
    /// <returns>list state of contents</returns>
    public boolean  isEmpty()
    {
        return pickingLines.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// clear internal list
    /// </summary>
    public void removeAllWork()
    {
        ListIterator iter = new ListIterator(pickingLines);
        
        while (iter.more())
        {
            iter.delete();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initfromWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize internal list from work id.
    /// </summary>
    /// <param name = "_workID">work id</param>
    public void initfromWork(WHSWorkId _workID)
    {
        this.removeAllWork();
        
        WHSWorkLine workline;

        while select workline
            where workline.WorkId    == _workId
            //&& workline.WorkStatus   != WHSWorkStatus::Closed
            && workline.WorkType     == WHSWorkType::Pick
        {
            GGIPickingSerialRangePIckQty pickQty = new GGIPickingSerialRangePIckQty();
            
            pickQty.workId = _workID; 
            pickQty.workline = workline.LineNum ;
            pickQty.workQty =  workline.QtyWork;
            pickQty.qtyRemaning = workline.QtyRemain ;
            pickQty.qtyInPicking = workline.QtyWork- workline.QtyRemain ; //account for work in progress
            pickQty.lineStatus = workline.WorkStatus ;

            this.addLine(pickQty);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>