<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIShipmentManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager for shipments.
/// </summary>
class GGIShipmentManager
{
    public WHSShipmentId ShipmentId;

    protected   WHSLoadLine LoadLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIShipmentManager construct()
    {
        return new GGIShipmentManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified shipment number.
    /// </summary>
    /// <param name = "_shipmentId">
    ///     A shipment number.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static GGIShipmentManager newShipmentId(WHSShipmentId _shipmentId)
    {
        GGIShipmentManager  shipmentManager = GGIShipmentManager::construct();

        shipmentManager.ShipmentId = _shipmentId;

        return shipmentManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified record.
    /// </summary>
    /// <param name = "_record">
    ///     A record.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static GGIShipmentManager newRecord(Common _record)
    {
        FieldId id  = fieldName2Id(_record.TableId, 'ShipmentId');

        return Id ? GGIShipmentManager::newShipmentId(_record.(Id)) : GGIShipmentManager::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipmentTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the shipment corresponding to the current shipment ID.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the shipment is selected for updating. Optional.
    /// </param>
    /// <returns>
    ///     The shipment; otherwise, an empty buffer.
    /// </returns>
    public WHSShipmentTable shipmentTable(boolean _forUpdate = false)
    {
        return WHSShipmentTable::find(ShipmentId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding sales order number.
    /// </summary>
    /// <returns>
    ///     The corresponding sales order number; otherwise, an empty string.
    /// </returns>
    public SalesId salesId()
    {
        WHSShipmentTable    shipmentTable   = this.shipmentTable();

        return shipmentTable.WorkTransType == WHSWorkTransType::Sales ? shipmentTable.OrderNum : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesFromBOLTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a collection of shipment lines corresponding to the specified bill of lading temporary buffer.
    /// </summary>
    /// <param name = "_bolTmp">
    ///     The bill of lading temporary buffer.
    /// </param>
    /// <returns>
    ///     A collection of corresponding shipment lines.
    /// </returns>
    public RecordLinkList linesFromBOLTmp(WHSBillOfLadingTmp _bolTmp)
    {
        WHSBillOfLadingCarrier  bolCarrier;

        bolCarrier.HandlingQty          = _bolTmp.LineQty;
        bolCarrier.HandlingType         = _bolTmp.DefaultHandlingType;
        bolCarrier.PackageQty           = _bolTmp.Qty;
        bolCarrier.PackageType          = _bolTmp.PackingType;
        bolCarrier.Weight               = _bolTmp.grossWeight;
        bolCarrier.HazardousMaterial    = _bolTmp.HazardousMaterial != '';
        bolCarrier.Name                 = _bolTmp.NmfcName;
        bolCarrier.LTLClassCode         = _bolTmp.LTLClassCode;
        bolCarrier.NMFCCode             = _bolTmp.nmfcCode;

        return this.linesFromBOLCarrier(bolCarrier);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesFromBOLCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a collection of shipment lines that correspond to the specified bill of lading carrier.
    /// </summary>
    /// <param name = "_carrier">
    ///     Bill of lading carrier.
    /// </param>
    /// <returns>
    ///     A collection of corresponding shipment lines.
    /// </returns>
    public RecordLinkList linesFromBOLCarrier(WHSBillOfLadingCarrier _carrier)
    {
        RecordLinkList list = new RecordLinkList();

        WHSLoadLine                         shipmentLine;
        WHSEcoResProductTransportationCodes nmfc;
        InventTable                         inventTable;

        while select shipmentLine
            where shipmentLine.ShipmentId == ShipmentId
            exists join inventTable
                where inventTable.ItemId == shipmentLine.ItemId
                    && inventTable.HMIMIndicator == _carrier.HazardousMaterial
            exists join nmfc
                where nmfc.NMFCCode == _carrier.NMFCCode
                    && nmfc.Product == inventTable.Product
        {
            list.ins(shipmentLine);
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstline</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the first shipment line.
    /// </summary>
    /// <returns>
    ///     A shipment line; otherwise, an empty buffer.
    /// </returns>
    public WHSLoadLine firstline()
    {
        WHSShipmentTable    shipmentTable = this.shipmentTable();

        select LoadLine
            where LoadLine.LoadId == shipmentTable.LoadId;

        return LoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the next shipment line.
    /// </summary>
    /// <returns>
    ///     The next shipment line; otherwise, an empty buffer.
    /// </returns>
    /// <remarks>
    ///     Used in conjunction with the method firstLine.
    /// </remarks>
    public WHSLoadLine nextLine()
    {
        if (LoadLine)
        {
            next LoadLine;
        }

        return LoadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHazardousMaterialShippingText</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the shipping text for hazardous materials for the specified item number.
    /// </summary>
    /// <param name = "_itemId">
    ///     The item number.
    /// </param>
    /// <param name = "_languageId">
    ///     The language of the shipping text. Optional.
    /// </param>
    /// <returns>
    ///     The shipping text; otherwise, an empty string.
    /// </returns>
    public Description255 getHazardousMaterialShippingText(ItemId _itemId, LanguageId _languageId = CompanyInfo::languageId())
    {
        WHSShipmentTable    shipmentTable = this.shipmentTable();
        
        return HMIMItemMaterial::findShipPrintText(_itemId, shipmentTable.ModeCode, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding sales order.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the corresponding sales order is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding sales order.
    /// </returns>
    public SalesTable salesTable(boolean _forUpdate = false)
    {
        return SalesTable::find(this.salesId(), _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding warehouse.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the corresponding warehouse is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding warehouse.
    /// </returns>
    public InventLocation inventLocation(boolean _forUpdate = false)
    {
        return InventLocation::find(this.shipmentTable().InventLocationId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_CustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the associated customer by the customer account.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the customer record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The associated customer.
    /// </returns>
    public CustTable custTable_CustAccount(boolean _forUpdate = false)
    {
        CustTable   custTable;

        WHSShipmentTable    shipmentTable = this.shipmentTable();

        if (shipmentTable.WorkTransType == WHSWorkTransType::Sales)
        {
            custTable = CustTable::find(shipmentTable.AccountNum, _forUpdate);
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTable_InvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the associated customer by the invoice account.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the customer record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The associated customer.
    /// </returns>
    public CustTable custTable_InvoiceAccount(boolean _forUpdate = false)
    {
        CustTable   custTable;

        WHSShipmentTable    shipmentTable = this.shipmentTable();

        if (shipmentTable.WorkTransType == WHSWorkTransType::Sales)
        {
            custTable = this.salesTable().custTable_InvoiceAccount(_forUpdate);
        }

        return custTable;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>