<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIReqPoTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class GGIReqPoTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ggiOrderPeggingRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retreives reference to Sales/transfer order either diectly on the PO or when created through master planning.
    /// ReqPo>ReqTrans>ReqTransCov>ReqTrans(Settled).
    /// As this is not referentially a one to one and only a one to one based on GGI business proccess,
    /// we use the firstonly in display method as to not force a join and a relationship that does not exist through true referential integrety. (ie, the system should allow One>More cardinality)
    /// There is consideration made in the case it is not one to one.  In the case there are multiple orders pegged against the MP we return the string "Multiple orders pegged."
    /// </summary>
    /// <returns>
    /// A string showing the Sales/Transfer order number pegged to the MP.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public static display str ggiOrderPeggingRefId(ReqPO _this)
    {
        if(GGIReqPoTable_Extension::getPeggedCount(_this) > 1)
        {
            return "Multiple orders pegged.";
        }
        else
        {
            return GGIReqPoTable_Extension::getOrderPeggingReqTrans(_this).RefId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiOrderPeggingRefType</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public static display str ggiOrderPeggingRefType(ReqPO _this)
    {
        if(GGIReqPoTable_Extension::getPeggedCount(_this) > 1)
        {
            return "";
        }
        else
        {
            return enum2Str(GGIReqPoTable_Extension::getOrderPeggingReqTrans(_this).RefType);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiOrderPeggingCustAccount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public static display str ggiOrderPeggingCustAccount(ReqPO _this)
    {
        if(GGIReqPoTable_Extension::getPeggedCount(_this) > 1)
        {
            return "";
        }
        else
        {
            return CustTable::find(GGIReqPoTable_Extension::getOrderPeggingReqTrans(_this).CustAccountId).name();
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiOrderPeggingWarehouse</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    public static display str ggiOrderPeggingWarehouse(ReqPO _this)
    {
        ReqTrans reqTransPO;

        if(GGIReqPoTable_Extension::getPeggedCount(_this) > 1)
        {
            return "";
        }
        else
        {
            reqTransPO =  GGIReqPoTable_Extension::getOrderPeggingReqTrans(_this);
            if(reqTransPO.RefType == 16)
            {
                return InventTransferTable::find(reqTransPO.RefId).InventLocationIdTo;
            }
            else if(reqTransPO.RefType == ReqRefType::Sales)
            {
                return SalesTable::find(reqTransPO.RefId).InventLocationId;
            }
        }       
        
        return "";
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderPeggingReqTrans</Name>
				<Source><![CDATA[
    public static ReqTrans getOrderPeggingReqTrans(ReqPO _this)
    {
        ReqTrans reqTrans;
        ReqTrans reqTransPo;
        ReqTransCov reqTransCov;
        ReqPlanVersion reqPlanVersion;
        
        select firstonly reqTrans
            join reqTransPo
            join reqTransCov
            join reqPlanVersion             
            where reqTrans.RefId == _this.RefId
                && reqTransCov.ReceiptRecId == reqTrans.RecId
                && reqTransPo.RecId == reqTransCov.IssueRecId
                && reqPlanVersion.RecId == _this.PlanVersion;

        return reqTransPo;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPeggedCount</Name>
				<Source><![CDATA[
    public static int getPeggedCount(ReqPO _this)
    {
        ReqTrans reqTrans;
        ReqTrans reqTransPo;
        ReqTransCov reqTransCov;
        ReqPlanVersion reqPlanVersion;
        Counter counter = 0;
        
        while select reqTrans
            join reqTransPo
            join reqTransCov
            join reqPlanVersion
            group by reqTransPo.RefId
            where reqTrans.RefId == _this.RefId
                && reqTransCov.ReceiptRecId == reqTrans.RecId
                && reqTransPo.RecId == reqTransCov.IssueRecId
                && reqPlanVersion.RecId == _this.PlanVersion
            
        {
            counter++;
        }

        return counter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>