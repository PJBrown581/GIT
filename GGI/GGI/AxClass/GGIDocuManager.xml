<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDocuManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class to manage documents.
/// </summary>
class GGIDocuManager
{
    // Document properties. This class will search for documents based on the following properties.
    public TableId          TableId;
    public RefRecId         RecId;
    public DocuTypeId       TypeId;
    public Description      Name;
    public DocuRestriction  Restriction;

    protected DocuRef DocuRef;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIDocuManager construct()
    {
        return new GGIDocuManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object based on a record and properties.
    /// </summary>
    /// <param name = "_record">
    ///     A record.
    /// </param>
    /// <param name = "_typeId">
    ///     Document type. Optional.
    /// </param>
    /// <param name = "_name">
    ///     Document name. Optional.
    /// </param>
    /// <param name = "_restriction">
    ///     Document restriction. Optional.
    /// </param>
    /// <returns>
    ///     This object.
    /// </returns>
    public static GGIDocuManager newRecord(Common _record, DocuTypeId _typeId = '', Description _name = '', DocuRestriction _restriction = DocuRestriction::Internal)
    {
        GGIDocuManager docuManager = GGIDocuManager::construct();

        docuManager.TableId     = _record.TableId;
        docuManager.RecId       = _record.RecId;
        docuManager.TypeId      = _typeId;
        docuManager.Name        = _name;
        docuManager.Restriction = _restriction;

        return docuManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllNotes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get all notes from all documents that match the current class properties.
    /// </summary>
    /// <param name = "_delimiter">
    ///     Delimiter to use to separate each note. Optional.
    /// </param>
    /// <param name = "_acrossCompanies">
    ///     Search all documents in the companies listed in the container. Optional.
    /// </param>
    /// <returns>
    ///     All notes combined into one string; otherwise, an empty string.
    /// </returns>
    public str getAllNotes(str _delimiter = '\n', container _acrossCompanies = conNull())
    {
        container noteTokens;

        for (DocuRef = this.findFirst(_acrossCompanies); DocuRef; DocuRef = this.findNext())
        {
            noteTokens += DocuRef.Notes;
        }

        return con2Str(noteTokens, _delimiter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>notes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document notes attached to the specified record.
    /// </summary>
    /// <param name = "_record">
    ///     A record.
    /// </param>
    /// <param name = "_typeId">
    ///     Document type. Optional.
    /// </param>
    /// <param name = "_name">
    ///     Document name. Optional.
    /// </param>
    /// <param name = "_restriction">
    ///     Document restriction. Optional.
    /// </param>
    /// <returns>
    ///     The document notes.
    /// </returns>
    public static Notes notes(Common _record, DocuTypeId _typeId = '', Description _name = '', DocuRestriction _restriction = DocuRestriction::Internal)
    {
        return GGIDocuManager::newRecord(_record, _typeId, _name, _restriction).findFirst().Notes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets an image of the current document.
    /// </summary>
    /// <returns>
    ///     The image of the current document.
    /// </returns>
    public container getImage()
    {
        container image;

        try
        {
            using (System.IO.Stream imageStream = DocumentManagement::getAttachmentStream(DocuRef))
            {
                using (System.IO.MemoryStream imageMs = new System.IO.MemoryStream())
                {
                    imageStream.Position = 0;
                    imageStream.CopyTo(imageMs);
                    image = DocGlobalHelper::convertMemoryStreamToContainer(imageMs);
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>image</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the document image attached to the specified record.
    /// </summary>
    /// <param name = "_record">
    ///     A record.
    /// </param>
    /// <param name = "_typeId">
    ///     Document type. Optional.
    /// </param>
    /// <param name = "_name">
    ///     Document name. Optional.
    /// </param>
    /// <param name = "_restriction">
    ///     Document restriction. Optional.
    /// </param>
    /// <returns>
    ///     The document image.
    /// </returns>
    public static container image(Common _record, DocuTypeId _typeId = '', Description _name = '', DocuRestriction _restriction = DocuRestriction::Internal)
    {
        GGIDocuManager docuManager = GGIDocuManager::newRecord(_record, _typeId, _name, _restriction);
        
        docuManager.findFirst();

        return docuManager.getImage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first occurrence of a document matching the class properties.
    /// </summary>
    /// <param name = "_acrossCompanies">
    ///     A container of companies to extend the search to. Optional.
    /// </param>
    /// <returns>
    ///     The first occurrence of a document matching the class properties; otherwise, an empty buffer.
    /// </returns>
    public DocuRef findFirst(container _acrossCompanies = conNull())
    {
        DocuRef.clear();

        if (RecId && TableId)
        {
            container companies = _acrossCompanies == conNull() ? [curExt()] : _acrossCompanies;
            
            select crosscompany:companies DocuRef
                where DocuRef.RefTableId == TableId
                    && DocuRef.RefRecId == RecId
                    && DocuRef.Restriction == DocuRef.Restriction
                    && (!Name || DocuRef.Name == Name)
                    && (!TypeId || DocuRef.TypeId == TypeId);
        }

        return DocuRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the next document matching the class properties.
    /// </summary>
    /// <returns>
    ///     The next document matching the class properties; otherwise, an empty buffer.
    /// </returns>
    /// <remarks>
    ///     The matching class properties are the properties as they were when the method findFirst was called.
    /// </remarks>
    public DocuRef findNext()
    {
        if (DocuRef)
        {
            next DocuRef;
        }

        return DocuRef;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>