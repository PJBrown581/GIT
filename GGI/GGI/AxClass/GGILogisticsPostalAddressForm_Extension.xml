<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGILogisticsPostalAddressForm_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class extension for form <c>LogisticsPostalAddress</c>.
/// </summary>
[ExtensionOf(formStr(LogisticsPostalAddress))]
public final class GGILogisticsPostalAddressForm_Extension
{
    public RecId postalAddressOrig;
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LogisticsPostalAddress_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to control controls
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormEventHandler(formStr(LogisticsPostalAddress), FormEventType::Initialized)]
    public void LogisticsPostalAddress_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        this.setFormControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormControls</Name>
				<Source><![CDATA[
    private void setFormControls()
    {
        if(curExt() != "200")
        {
            //TTBTab.enabled(false);
            //TTBTab.visible(false);
           
            GGIAuthTab.enabled(true);
            GGIAuthTab.visible(true);
        }
        else
        {
            TTBTab.enabled(true);
            TTBTab.visible(true);
           
            GGIAuthTab.enabled(false);
            if(GGIAuthParamaters::find().AuthEnabled)
            {
                GGIAuthTab.enabled(true);
            }
            GGIAuthTab.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnWriting</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::Writing)]
    public void LogisticsPostalAddress_OnWriting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LogisticsPostalAddress  logisticsPostalAddress      = sender.cursor();
        postalAddressOrig  = logisticsPostalAddress.orig().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnWritten</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, LogisticsPostalAddress), FormDataSourceEventType::Written)]
    public void LogisticsPostalAddress_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LogisticsPostalAddress  logisticsPostalAddress  = sender.cursor();
        TTBPermitAddress        permitAddress, permitAddressNew;

        if (logisticsPostalAddress.RecId != postalAddressOrig)
        {
            select firstonly permitAddress
                where permitAddress.LogisticsPostalAddress == postalAddressOrig;

            ttsbegin;
            if (permitAddress)
            {
                permitAddressNew.PermitTable            = permitAddress.PermitTable;
                permitAddressNew.LogisticsPostalAddress    = logisticsPostalAddress.RecId;
                permitAddressNew.insert();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GGIAuthKey_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(LogisticsPostalAddress, GGICustAuthDisclaimerAddressTable, GGIAuthKey), FormDataFieldEventType::Modified)]
    public static void GGIAuthKey_OnModified(FormDataObject sender, FormDataFieldEventArgs e)

    {        
        FormDataSource               ggiCustAuthAddressTable_ds   = sender.datasource();
        GGICustAuthDisclaimerAddressTable      ggiCustAuthAddressTable      = ggiCustAuthAddressTable_ds.cursor();

        LogisticsLocation logisticsLocation = sender.datasource().formRun().dataSource("LogisticsLocation").cursor();
        DirPartyLocation dirPartyLocation = sender.datasource().formRun().dataSource("DirPartyLocation").cursor();
       
        ggiCustAuthAddressTable.CustAccount = CustTable::findByPartyRecId(dirPartyLocation.Party).AccountNum;
        ggiCustAuthAddressTable.LogisticsLocationId = logisticsLocation.LocationId;
        //ggiCustAuthAddressTable.Description =  GGIAuthDisclaimerTable::find(ggiCustAuthAddressTable.GGIAuthKey).Description;

        ggiCustAuthAddressTable_ds.refresh();
        ggiCustAuthAddressTable_ds.research(true);

    }

]]></Source>
			</Method>
			<Method>
				<Name>Num_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(LogisticsPostalAddress, GGICustAuthDisclaimerAddressTable, Num), FormDataFieldEventType::Modified)]
    public static void Num_OnModified(FormDataObject sender, FormDataFieldEventArgs e)

    {
        FormDataSource               ggiCustAuthAddressTable_ds   = sender.datasource();
        GGICustAuthDisclaimerAddressTable      ggiCustAuthAddressTable      = ggiCustAuthAddressTable_ds.cursor();

        LogisticsLocation logisticsLocation = sender.datasource().formRun().dataSource("LogisticsLocation").cursor();
        DirPartyLocation dirPartyLocation = sender.datasource().formRun().dataSource("DirPartyLocation").cursor();
       
        ggiCustAuthAddressTable.CustAccount = CustTable::findByPartyRecId(dirPartyLocation.Party).AccountNum;
        ggiCustAuthAddressTable.LogisticsLocationId = logisticsLocation.LocationId;
        //ggiCustAuthAddressTable.Description =  GGIAuthDisclaimerTable::find(ggiCustAuthAddressTable.GGIAuthKey).Description;

        ggiCustAuthAddressTable_ds.refresh();
        ggiCustAuthAddressTable_ds.research(true);

    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_OnActivated</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LogisticsPostalAddress, GGICustAuthDisclaimerAddressTable), FormDataSourceEventType::Activated)]
    public void LogisticsPostalAddress_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        GGICustAuthDisclaimerAddressTable       ggiCustAuthAddressTable      = sender.cursor();
           
        if(GGIAuthParamaters::find().AuthEnabled)
        {
            sender.allowDelete(true);
        }
        if(GGICustAuthDisclaimerAddressTable::existsOnSalesOrder(ggiCustAuthAddressTable.RecId))
        {
            sender.allowDelete(false);
        }      
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>