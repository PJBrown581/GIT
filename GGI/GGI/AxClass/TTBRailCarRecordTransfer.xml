<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBRailCarRecordTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// railcar subclass for processing transfer orders
/// </summary>
[TTBRailCarRecordAttribute(TTBRailcarRecordSubclass::TransferOrder)]
class TTBRailCarRecordTransfer extends TTBRailCarRecord
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize data
    /// </summary>
    public void init()
    {
        super();
        subClassTYtpe = TTBRailcarRecordSubclass::TransferOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// process data from mobile device
    /// </summary>
    public void run()
    {
        TTBRailCarLine line;
     
        this.createRailCarTable();
        line = this.createRailCarLines();           
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRailCarLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// init rialcar record line
    /// </summary>
    /// <param name = "_line">railcarline record</param>
    /// <param name = "_workLine">whsWorkLine record</param>
    protected void initRailCarLine(TTBRailCarLine _line, WHSWorkLine workLine)
    {
        super(_line, workLine);

        InventTransferLine      inventTransferLine; 
        
        select firstonly inventTransferLine
            where inventTransferLine.TransferId == workTable.OrderNum
                && inventTransferLine.ItemId    == workLine.ItemId;

        if (inventTransferLine && inventTransferLine.TTBProof)
        {
            _line.Proof = inventTransferLine.TTBProof;
        }

        _line.InventDimId = TTBUtilHelper::getDimFromWorkLineTrans(workLine.WorkId).inventDimId;

        if (InventTable::find(_line.ItemId).TTBAlcoholType() == TTBAlcoholType::PURE)
        {
            _line.WineGallon = TTBWineGalConversion::find(_line.Proof).WineGALEquivalent * _line.Qty;
        }
        else
        {
            _line.WineGallon = this.convertWGToInventUOM(_line.Qty, _line.ItemId, ModuleInventPurchSales::Invent);
        }

        _line.ProofGallon = (_line.WineGallon * _line.Proof) / 100;

        _line.TransType     = GGIRailcarTransType::TransferOrderShip;
        _line.ReferenceId   = workTable.OrderNum;        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>