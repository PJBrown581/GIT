<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIRAFJournalManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager for RAF journals.
/// </summary>
class GGIRAFJournalManager
{
    /// <summary>
    ///     RAF journal number.
    /// </summary>
    public JournalId JournalId;

    /// <summary>
    ///     Cache.
    /// </summary>
    protected ProdJournalTable ProdJournalTableCache;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIRAFJournalManager construct()
    {
        return new GGIRAFJournalManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified RAF journal number.
    /// </summary>
    /// <param name = "_journalId">
    ///     A RAF journal number.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static GGIRAFJournalManager newJournalId(JournalId _journalId)
    {
        GGIRAFJournalManager journalMgr = GGIRAFJournalManager::construct();

        journalMgr.JournalId = _journalId;

        return journalMgr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get the current production journal.
    /// </summary>
    /// <param name = "_forupdate">
    ///     Determines if the production journal is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The current production journal.
    /// </returns>
    public ProdJournalTable prodJournalTable(boolean _forupdate = false)
    {
        if (JournalId != ProdJournalTableCache.JournalId)
        {
            ProdJournalTableCache = ProdJournalTable::find(JournalId, _forupdate);
        }
        else
        {
            ProdJournalTableCache.selectForUpdate(_forupdate);
        }

        return ProdJournalTableCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a RAF journal header for the specified quantity.
    /// </summary>
    /// <param name = "_prodId">
    ///     A production order to base the RAF journal header on.
    /// </param>
    /// <param name = "_qtyGood">
    ///     The quantity.
    /// </param>
    /// <returns>
    ///     The production journal header.
    /// </returns>
    public static ProdJournalTable createJournal(ProdId _prodId, ProdReportedGood _qtyGood)
    {
        ProdJournalTable prodJournalTable;

        ProdJournalTableData prodJournalTableData = JournalTableData::newTable(prodJournalTable);

        prodJournalTableData.initBuffer(prodJournalTableData.journalStatic().standardJournalNameId(enum2int(ProdJournalType::ReportFinished)), _prodId, ProdJournalType::ReportFinished);
        prodJournalTable.qtyGood        = _qtyGood;
        prodJournalTable.DetailSummary  = DetailSummary::Summary;
        prodJournalTableData.journalTable().write();

        return prodJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a RAF journal line based on the specified RAF journal header
    /// </summary>
    /// <returns>
    ///     The created RAF journal line.
    /// </returns>
    public ProdJournalProd createLine()
    {
        ProdJournalProd prodJournalProd;

        prodJournalProd.initValue();
        prodJournalProd.initFromProdJournalTable(this.prodJournalTable());
        prodJournalProd.QtyGood = this.prodJournalTable().qtyGood;
        prodJournalProd.insert();

        return prodJournalProd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with the specified RAF journal.
    /// </summary>
    /// <param name = "_journalTable">
    ///     RAF journal.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static GGIRAFJournalManager newProdJournalTable(ProdJournalTable _journalTable)
    {
        GGIRAFJournalManager journalMgr = GGIRAFJournalManager::newJournalId(_journalTable.JournalId);

        journalMgr.ProdJournalTableCache = _journalTable;

        return journalMgr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a RAF journal line based on the specified RAF journal header
    /// </summary>
    /// <param name = "_journalTable">
    ///     RAF journal header.
    /// </param>
    /// <returns>
    ///     The created RAF journal line.
    /// </returns>
    public static ProdJournalProd createJournalLine(ProdJournalTable _journalTable)
    {
        return GGIRAFJournalManager::newProdJournalTable(_journalTable).createLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdParmReportFinished</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the RAF parameters based on the specified production order.
    /// </summary>
    /// <param name = "_prodTable">
    ///     The production order.
    /// </param>
    /// <returns>
    ///     The RAF parameters.
    /// </returns>
    public static ProdParmReportFinished createProdParmReportFinished(ProdTable _prodTable)
    {
        ProdParmReportFinished  prodParmReportFinished;
        
        prodParmReportFinished.initParmDefault();
        prodParmReportFinished.initFromProdTable(_prodTable);
        prodParmReportFinished.insert();

        return prodParmReportFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the current RAF journal.
    /// </summary>
    /// <param name = "_prodParmReportFinished">
    ///     RAF parameters.
    /// </param>
    /// <returns>
    ///     The journal number of the posted RAF journal.
    /// </returns>
    public static JournalId post(ProdParmReportFinished _prodParmReportFinished)
    {
        return ProdUpdReportFinished::reportFinished(_prodParmReportFinished);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>