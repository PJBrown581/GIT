<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBRawMaterialCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Collection class for raw materials.
/// </summary>
class TTBRawMaterialCollection
{
    public  TTBWineGallonProduced   TotalWineGallonsProduced;
    public  TTBWineGallonConsumed   TotalWineGallonsConsumed;

    protected   Map             RawMaterialByPhantom;
    protected   ListEnumerator  RawMaterials;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        RawMaterialByPhantom = TTBRawMaterialCollection::createRawMaterialByPhantom();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TTBRawMaterialCollection construct()
    {
        return new TTBRawMaterialCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRawMaterialMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an empty collection of raw materials by the specified index or key type.
    /// </summary>
    /// <param name = "_indexType">
    ///     Type of index or key.
    /// </param>
    /// <returns>
    ///     An empty collection.
    /// </returns>
    private static Map createRawMaterialMap(Types _indexType)
    {
        Types   rawMaterialType = Types::Class;

        return new Map(_indexType, rawMaterialType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRawMaterialByItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an empty collection of raw materials by item number.
    /// </summary>
    /// <returns>
    ///     An empty collection.
    /// </returns>
    private static Map createRawMaterialByItemId()
    {
        Types   itemIdType  = Types::String;

        return TTBRawMaterialCollection::createRawMaterialMap(itemIdType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRawMaterialByPhantom</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an empty collection of raw materials grouped by its phantom owner.
    /// </summary>
    /// <returns>
    ///     An empty collection.
    /// </returns>
    private static Map createRawMaterialByPhantom()
    {
        Types   phantomItemIdType   = Types::String;

        return TTBRawMaterialCollection::createRawMaterialMap(phantomItemIdType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRawMaterialByTank</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an empty collection of raw materials by tank.
    /// </summary>
    /// <returns>
    ///     An empty collection.
    /// </returns>
    private static Map createRawMaterialByTank()
    {
        Types tankType = Types::String;

        return TTBRawMaterialCollection::createRawMaterialMap(tankType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a raw material to the collection.
    /// </summary>
    /// <param name = "_rawMaterial">
    ///     A raw material.
    /// </param>
    /// <remarks>
    ///     If the same raw material is in the collection, the added raw material is combined with the existing raw material.
    /// </remarks>
    public void add(TTBRawMaterialDataPacket _rawMaterial)
    {
        Map rawMaterialByItemId;
        Map rawMaterialByTank;

        if (RawMaterialByPhantom.exists(_rawMaterial.PhantomItemId))
        {
            rawMaterialByTank = RawMaterialByPhantom.lookup(_rawMaterial.PhantomItemId);
        }
        else
        {
            rawMaterialByTank = TTBRawMaterialCollection::createRawMaterialByTank();
        }

        if (rawMaterialByTank.exists(_rawMaterial.Tank))
        {
            rawMaterialByItemId = rawMaterialByTank.lookup(_rawMaterial.Tank);
        }
        else
        {
            rawMaterialByItemId = TTBRawMaterialCollection::createRawMaterialByItemId();
        }

        TTBRawMaterialDataPacket rawMaterial;

        if (rawMaterialByItemId.exists(_rawMaterial.ItemId))
        {
            rawMaterial = RawMaterialByItemId.lookup(_rawMaterial.ItemId);
        }
        else
        {
            rawMaterial = TTBRawMaterialDataPacket::construct();
        }
        rawMaterial.combine(_rawMaterial);

        rawMaterialByItemId.add(rawMaterial.ItemId, rawMaterial);
        rawMaterialByTank.add(rawMaterial.Tank, rawMaterialByItemId);
        RawMaterialByPhantom.add(rawMaterial.PhantomItemId, rawMaterialByTank);
    }

]]></Source>
			</Method>
			<Method>
				<Name>flattenCollection</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Flattens the three dimensional collection into a single dimensional collection.
    /// </summary>
    /// <returns>
    ///     A single dimensional collection of raw materials.
    /// </returns>
    protected List flattenCollection()
    {
        const Types   rawMaterialType = Types::Class;

        List    rawMaterialCollection   = new List(rawMaterialType);
        List    phantomItemCollection   = new List(rawMaterialType);
        Map     phantomCollection       = new Map(Types::String, rawMaterialType);

        MapEnumerator   rawMaterialsByPhantom  = RawMaterialByPhantom.getEnumerator();

        while (rawMaterialsByPhantom.moveNext())
        {
            ItemId                      phantomItemId = rawMaterialsByPhantom.currentKey();
            TTBRawMaterialDataPacket    phantomRawMaterial;

            if (phantomItemId)
            {
                if (phantomCollection.exists(phantomItemId))
                {
                    phantomRawMaterial = phantomCollection.lookup(phantomItemId);
                }
                else
                {
                    phantomRawMaterial = TTBRawMaterialDataPacket::newParameters('', phantomItemId, 1, InventTable::find(phantomItemId).inventUnitId(), 0, 0);
                }
                phantomCollection.insert(phantomItemId, phantomRawMaterial);
            }

            Map             tankCollection  = rawMaterialsByPhantom.currentValue();
            MapEnumerator   tanks           = tankCollection.getEnumerator();

            while (tanks.moveNext())
            {
                Map             rawMaterialCollectionByItem = tanks.currentValue();
                MapEnumerator   rawMaterialsByItem          = rawMaterialCollectionByItem.getEnumerator();

                while (rawMaterialsByItem.moveNext())
                {
                    TTBRawMaterialDataPacket    rawMaterial = rawMaterialsByItem.currentValue();

                    if (rawMaterial.AlcoholType != TTBAlcoholType::PURE && phantomRawMaterial)
                    {
                        phantomRawMaterial.WineGallons += rawMaterial.WineGallons;
                    }

                    if (rawMaterial.AlcoholType == TTBAlcoholType::PURE || rawMaterial.PhantomItemId)
                    {
                        phantomItemCollection.addEnd(rawMaterial);

                        if (rawMaterial.AlcoholType == TTBAlcoholType::PURE)
                        {
                            TotalWineGallonsProduced += rawMaterial.WineGallons;
                        }
                    }
                    else
                    {
                        rawMaterialCollection.addEnd(rawMaterialsByItem.currentValue());
                    }

                    if (rawMaterial.AlcoholType == TTBAlcoholType::ARTICLE)
                    {
                        TotalWineGallonsConsumed += rawMaterial.WineGallons;
                    }
                }
            }

            if (phantomItemId)
            {
                phantomItemCollection.addEnd(phantomRawMaterial);
            }
        }

        // Move the phantom items to the beginning of the raw material collection.
        phantomItemCollection.appendList(rawMaterialCollection);
        rawMaterialCollection = phantomItemCollection;

        return rawMaterialCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirst</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first raw material.
    /// </summary>
    /// <returns>
    ///     true, if a raw material was found; otherwise, false.
    /// </returns>
    public boolean findFirst()
    {
        RawMaterials = this.flattenCollection().getEnumerator();

        return RawMaterials.moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current raw material.
    /// </summary>
    /// <returns>
    ///     The current raw material; otherwise, null.
    /// </returns>
    public TTBRawMaterialDataPacket current()
    {
        return RawMaterials.current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the next raw material.
    /// </summary>
    /// <returns>
    ///     true, if the next raw material is found; otherwise, false.
    /// </returns>
    public boolean findNext()
    {
        return RawMaterials.moveNext();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>