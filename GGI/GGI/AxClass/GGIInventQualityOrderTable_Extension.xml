<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIInventQualityOrderTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Code extensions for table <c>InventQualityOrderTable</c>.
/// </summary>
[ExtensionOf(tableStr(InventQualityOrderTable))]
public final class GGIInventQualityOrderTable_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ggiRailCarTable</Name>
				<Source><![CDATA[
    public TTBRailCarTable ggiRailCarTable()
    {
        WHSWorkTable            workTable;
        WHSWorkLine             workLine;
        TTBRailCarTable         railCarTable;
        TTBRailCarLine          railCarLine;

        select firstonly workTable
                order by RecId desc
                where workTable.OrderNum == this.InventRefId;

        if (workTable)
        {
            select forupdate firstonly railCarTable
                order by RecId desc
                join railCarLine
                where railCarLine.RailCarTable      == railCarTable.RecId
                join workLine
                where workLine.WorkId               == workTable.WorkId
                    && railCarLine.WhSWorkLine      == workLine.RecId
                    && railCarTable.RailCarStatus   == TTBRailCarStatus::Open;
        }

        return railCarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiInventGaugeTable</Name>
				<Source><![CDATA[
    public TTBInventGaugeTable ggiInventGaugeTable()
    {
        TTBInventGaugeTable     inventGaugeTable;
        WHSWorkTable            workTable;

        select forupdate firstonly inventGaugeTable
            where inventGaugeTable.InventTransId == this.InventRefTransId
                && inventGaugeTable.Status == TTBInventGaugeTableStatus::Open;

        if (!inventGaugeTable.RecId)
        {
            select firstonly workTable
                order by RecId desc
                where workTable.OrderNum == this.InventRefId;

            if (workTable)
            {
                inventGaugeTable = TTBInventGaugeTable::findByWorkId(workTable.WorkId);
            }
        }

        return inventGaugeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventQualityOrderTable_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(InventQualityOrderTable), DataEventType::Inserted)]
    public static void InventQualityOrderTable_onInserted(Common sender, DataEventArgs e)
    {
        InventQualityOrderTable inventQualityOrderTable = sender;
        TTBRailCarTable         railCarTable;
     
        if (inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch
            || inventQualityOrderTable.ReferenceType    == InventTestReferenceType::PIPTransfer)
         {
            railCarTable = inventQualityOrderTable.ggiRailCarTable();
            
            if (railCarTable && !railCarTable.InventQualityOrderId)
            {
                railCarTable.selectForUpdate(true);
                ttsbegin;
                railCarTable.InventQualityOrderId = inventQualityOrderTable.QualityOrderId;
                railCarTable.update();
                ttscommit;
            }                
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        TTBRailCarTable railCarTable;

        next delete();

        if (this.ReferenceType == InventTestReferenceType::Purch)
        {
            railCarTable = this.ggiRailCarTable();
            
            if (railCarTable && railCarTable.RailCarStatus == TTBRailCarStatus::Open)
            {
                railCarTable.selectForUpdate(true);
                ttsbegin;
                railCarTable.InventQualityOrderId = '';
                railCarTable.update();
                ttscommit;
            }
                
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ggiIsDlvModeRailcar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if delivery mode for associated Purchase/Transfer order is for railcar
    /// </summary>
    /// <returns>
    /// True, if the delivery mode is for railcar; otherwise, false.
    /// </returns>
    public boolean ggiIsDlvModeRailcar()
    {
        boolean isDlvModeRailcar;
        if (this.ReferenceType == InventTestReferenceType::Purch)
        {
            if (DlvMode::find(PurchTable::find(this.InventRefId).DlvMode).GGIDeliveryModeRailcar)
            {
                isDlvModeRailcar = true;
            }
        }
        
        if (this.ReferenceType == InventTestReferenceType::PIPTransfer)
        {
            if (DlvMode::find(InventTransferTable::find(this.InventRefId).DlvModeId).GGIDeliveryModeRailcar)
            {
                isDlvModeRailcar = true;
            }
        }

        return isDlvModeRailcar;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>