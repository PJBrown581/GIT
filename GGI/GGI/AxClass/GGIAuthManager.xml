<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIAuthManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Manager class for Authorisation permits.
/// </summary>
class GGIAuthManager
{
    /// <summary>
    ///     The postal address associated with a authorisation code or a range of codes.
    /// </summary>
    public LogisticsPostalAddressRecId   PostalAddressRecId;

    /// <summary>
    ///     The permit to perform validation with.
    /// </summary>
    public GGIAuthKey authKey;

    /// <summary>
    ///     Auth cache.
    /// </summary>
    protected GGIAuthDisclaimerTable    authDisclaimerTable;
    
    /// <summary>
    ///     Flag determining that only DSP permits are allowed.
    /// </summary>
    protected   boolean DSPOnly;

    /// <summary>
    ///     Warehouse for DSP permits.
    /// </summary>
    protected   InventLocationId    InventLocationId;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GGIAuthManager construct()
    {
        return new GGIAuthManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object based on a record that has a reference to the delivery postal address.
    /// </summary>
    /// <param name = "_record">
    ///     A record with a reference to a delivery postal address.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static GGIAuthManager newRecord(Common _record)
    {
        GGIAuthManager    manager = GGIAuthManager::construct();

        FieldId authFieldId = fieldName2Id(_record.TableId, 'Code');

        if (!authFieldId)
        {
            authFieldId = fieldName2Id(_record.TableId, 'GGIAuthKey');
        }
        if (!authFieldId)
        {
            authFieldId = fieldName2Id(_record.TableId, 'GGIAuthDisclaimerTable');
        }

        if (authFieldId)
        {
            manager.authKey = _record.(authFieldId);
        }

        FieldId postalAddressfieldId    = fieldName2Id(_record.TableId, 'LogisticsPostalAddress');

        if (!postalAddressfieldId)
        {
            switch(_record.TableId)
            {
                case tableNum(InventTransferTable):
                    InventTransferTable inventTransferTable = _record as InventTransferTable;

                    manager.PostalAddressRecId  = GGIGlobalAddressBookManager::postalAddress(InventLocation::find(inventTransferTable.InventLocationIdTo), true, LogisticsLocationRoleType::Delivery).RecId;
                    manager.DSPOnly             = true;
                    manager.InventLocationId    = inventTransferTable.InventLocationIdFrom;
                    break;
                case tableNum(LogisticsPostalAddress):
                    postalAddressfieldId    = fieldNum(LogisticsPostalAddress, RecId);
                    manager.DSPOnly         = false;
                    break;
            }
        }

        if (postalAddressfieldId)
        {
            manager.PostalAddressRecId = _record.(postalAddressfieldId);
        }

        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAuth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs this object with a permit record ID.
    /// </summary>
    /// <param name = "_permitRecId">
    ///     A permit record ID.
    /// </param>
    /// <returns>
    ///     This constructed object.
    /// </returns>
    public static GGIAuthManager newAuth(GGIAuthKey _authRecId)
    {
        GGIAuthManager    manager = GGIAuthManager::construct();

        manager.authKey = _authRecId;
        //manager.authDisclaimerTable();

        return manager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the warehouse this DSP permit applies to.
    /// </summary>
    /// <returns>
    ///     The warehouse this DSP permit applies to; otherwise, an empty string.
    /// </returns>
    /// <remarks>
    ///     Applicable only to DSP permits.
    /// </remarks>
    public InventLocationId getInventLocationId()
    {
        return InventLocationId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>