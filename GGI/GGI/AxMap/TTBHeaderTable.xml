<?xml version="1.0" encoding="utf-8"?>
<AxMap xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TTBHeaderTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Table map to handle <c>SalesTable</c> and <c>InventTransferTable</c> records uniformly when it comes to TTB processing.
/// </summary>
public class TTBHeaderTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>permitTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the corresponding permit.
    /// </summary>
    /// <param name = "_forUpdate">
    ///     Determines if the corresponding record is selected for update. Optional.
    /// </param>
    /// <returns>
    ///     The corresponding permit; otherwise, an empty buffer.
    /// </returns>
    public TTBPermitTable permitTable(boolean _forUpdate = false)
    {
        return TTBPermitTable::find(this.PermitTable, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTTBHeaderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize this header from another header.
    /// </summary>
    /// <param name = "_headerTable">
    ///     A header to initialize this buffer from.
    /// </param>
    void initFromTTBHeaderTable(TTBHeaderTable _headerTable)
    {
        this.PermitTable         = _headerTable.PermitTable;
        this.DSPApprovalSerialId = _headerTable.DSPApprovalSerialId;
        this.DSPApprovalDate     = _headerTable.DSPApprovalDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modified field event.
    /// </summary>
    /// <param name = "_fieldId">
    ///     ID of the database field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        TTBPermitManager    permitManager;
        TTBPermitDSPAddress permitDSPAddress;

        switch(_fieldId)
        {
            case fieldNum(TTBHeaderTable, PermitTable):
                permitManager               = TTBPermitManager::newPermit(this.PermitTable);
                permitDSPAddress            = permitManager.permitDSPAddress(this.InventLocationId);
                this.DSPApprovalSerialId    = permitDSPAddress.ApprovalSerialNum;
                this.DSPApprovalDate        = permitDSPAddress.TTBApprovalDate;

                if (this.TransferBondShipmentId && permitManager.permitTable().PermitType != TTBPermitType::DSP)
                {
                    this.TTBHeaderTable::releaseTransferBondShipmentId();
                }
                if (this.TTBHeaderTable::isTableMapped(tableNum(SalesTable))
                    && this.TaxPaidShipmentId
                    && permitManager.permitTable().PermitType != TTBPermitType::TaxPaid)
                {
                    this.TTBHeaderTable::releaseTaxPaidShipmentId();
                }
                break;
            case fieldNum(TTBHeaderTable, InventLocationId):
                permitManager               = TTBPermitManager::newPermit(this.PermitTable);
                permitDSPAddress            = permitManager.permitDSPAddress(this.InventLocationId);
                this.DSPApprovalSerialId    = permitDSPAddress.ApprovalSerialNum;
                this.DSPApprovalDate        = permitDSPAddress.TTBApprovalDate;
                break;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransferBondShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the transfer bond shipment ID as applicable.
    /// </summary>
    public void setTransferBondShipmentId()
    {
        TTBPermitManager    permitManager   = TTBPermitManager::newPermit(this.PermitTable);

        this.TTBHeaderTable::validatePermit(permitManager);

        if (!this.TransferBondShipmentId)
        {
            if (this.TTBHeaderTable::permitTable().PermitType == TTBPermitType::DSP)
            {
                this.TransferBondShipmentId = TTBUtilHelper::nextTransferBondShipmentId(this.TTBHeaderTable::inventSiteId());
            }
        }
        else
        {
            if (!(this.TTBHeaderTable::permitTable().PermitType == TTBPermitType::DSP))
            {
                this.TTBHeaderTable::releaseTransferBondShipmentId();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxPaidShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the tax paid shipment ID as applicable.
    /// </summary>
    public void setTaxPaidShipmentId()
    {
        if (this.TTBHeaderTable::isTableMapped(tableNum(SalesTable)))
        {
            TTBPermitManager    permitManager   = TTBPermitManager::newPermit(this.PermitTable);

            this.TTBHeaderTable::validatePermit(permitManager);

            if (!this.TaxPaidShipmentId)
            {
                if (this.TTBHeaderTable::permitTable().PermitType == TTBPermitType::TaxPaid)
                {
                    this.TaxPaidShipmentId = TTBUtilHelper::nextTaxPaidShipmentId(this.TTBHeaderTable::inventSiteId());
                }
            }
            else
            {
                if (!(this.TTBHeaderTable::permitTable().PermitType == TTBPermitType::TaxPaid))
                {
                    this.TTBHeaderTable::releaseTaxPaidShipmentId();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePermit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the current permit, if any.
    /// </summary>
    /// <param name = "_permitManager">
    ///     Permit manager holding the permit to validate against. Optional.
    /// </param>
    public void validatePermit(TTBPermitManager _permitManager = null)
    {
        TTBPermitManager    permitManager   = _permitManager ? _permitManager : TTBPermitManager::newRecord(this);
        TTBPermitTable      permitTable     = permitManager.permitTable();

        if (permitTable)
        {
            if (!permitManager.isEnabled())
            {
                throw error("@GGI:PermitIsDisabled");
            }

            if (this.TableId == tableNum(InventTransferTable)
                && permitTable.PermitType == TTBPermitType::DSP
                && permitManager.permitDSPAddress(this.InventLocationId).InventLocationIdFrom != this.InventLocationId)
            {
                throw error(strFmt("@GGI:InvalidPermitForWarehouse", permitTable.PermitId, this.InventLocationId));
            }
            
            if(this.TableId == tableNum(SalesTable))
            {
                if(permitTable.PermitType == TTBPermitType::DSP)
                {
                    if(!permitManager.permitDSPAddress(this.InventLocationId))
                    {
                        throw error(strFmt("@GGI:InvalidPermitForAddress", permitTable.PermitId));
                    }

                }
                else
                {
                    if(!permitManager.isPostalAddressValid(this.DeliveryPostalAddress))
                    {
                        throw error(strFmt("@GGI:InvalidPermitForAddress", permitTable.PermitId));
                    }
                }
            }
            /*   
            if ((this.TableId == tableNum(SalesTable) || permitTable.PermitType != TTBPermitType::DSP)
                && !permitManager.isPostalAddressValid(this.DeliveryPostalAddress))
            {
                throw error(strFmt("@GGI:InvalidPermitForAddress", permitTable.PermitId));
            }
            */
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates an order as a whole.
    /// </summary>
    /// <param name = "_headerTable">
    ///     A header record to validate.
    /// </param>
    /// <param name = "_lineTable">
    ///     A line buffer corresponding to the header.
    /// </param>
    /// <returns>
    ///     true, if valid; otherwise, false.
    /// </returns>
    public static boolean validateOrder(TTBHeaderTable _headerTable, TTBLineTable _lineTable)
    {
        boolean isValid = true;

        if (_headerTable.PermitTable)
        {
            _headerTable.TTBHeaderTable::validatePermit();

            // Validate each line item against the permit.
            TTBItemAlcoholTypeView  itemAlcoholType;
            TTBProofGallon          proofGallons;
            TTBWineGallon           wineGallons;

            while select _lineTable
                where _lineTable.OrderId == _headerTable.OrderId
                join itemAlcoholType
                    where itemAlcoholType.ItemId == _lineTable.ItemId
            {
                isValid  = _lineTable.TTBLineTable::validate(_headerTable.PermitTable);
                if (!isValid)
                {
                    break;
                }

                wineGallons     += _lineTable.WineGallon;
                proofGallons    += _lineTable.ProofGallon;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTransferBondShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Releases the transfer bond shipment ID for reuse.
    /// </summary>
    public void releaseTransferBondShipmentId()
    {
        TTBUtilHelper::releaseTransferBondShipmentId(this.TransferBondShipmentId, this.TTBHeaderTable::inventSiteId());
        this.TransferBondShipmentId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseTaxPaidShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Releases the transfer bond shipment ID for reuse.
    /// </summary>
    public void releaseTaxPaidShipmentId()
    {
        if (this.TTBHeaderTable::isTableMapped(tableNum(SalesTable)))
        {
            TTBUtilHelper::releaseTaxPaidShipmentId(this.TaxPaidShipmentId, this.TTBHeaderTable::inventSiteId());
            this.TaxPaidShipmentId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the current site ID.
    /// </summary>
    /// <returns>
    ///     The current site ID.
    /// </returns>
    /// <remarks>
    ///     The InventSiteId field does not have a mapping with some tables. This method will obtain the site ID through other means.
    /// </remarks>
    private InventSiteId inventSiteId()
    {
        return this.TTBHeaderTable::isTableMapped(tableNum(InventTransferTable)) ? InventLocation::find(this.InventLocationId).InventSiteId : this.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTableMapped</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the specified table number is currently mapped to this instance.
    /// </summary>
    /// <param name = "_tableId">
    ///     Table number in question.
    /// </param>
    /// <returns>
    ///     true, if the current instance is mapped to the table number in question; otherwise, false.
    /// </returns>
    private boolean isTableMapped(TableId _tableId)
    {
        return tableId2Name(this.TableId) == tableId2Name(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PermitRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// determine if a permit is required based on line items
    /// </summary>
    /// <param name = "_salesId">sales table id</param>
    /// <returns>permit required for sales order.</returns>
    public static boolean PermitRequired(SalesId _salesId)
    {
        SalesLine lineTable ; 
        TTBItemAlcoholTypeView  itemAlcoholType;
        boolean  ret;

       select firstonly lineTable
            where lineTable.SalesId == _salesId
            join itemAlcoholType
                where itemAlcoholType.ItemId == lineTable.ItemId
            &&  (itemAlcoholType.AlcoholType == TTBAlcoholType::SDA 
                   || itemAlcoholType.AlcoholType == TTBAlcoholType::PURE );

        if(lineTable)
        {
            ret = true;
        }
        return ret;  
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<FieldGroups />
	<Fields>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>PermitTable</Name>
			<ExtendedDataType>TTBPermitKey</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>DSPApprovalSerialId</Name>
			<ExtendedDataType>TTBApprovalSerialNum</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldDate">
			<Name>DSPApprovalDate</Name>
			<ExtendedDataType>TTBApprovalDate</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventLocationId</Name>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TransferBondShipmentId</Name>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>InventSiteId</Name>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>OrderId</Name>
			<ExtendedDataType>Num</ExtendedDataType>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldInt64">
			<Name>DeliveryPostalAddress</Name>
		</AxMapBaseField>
		<AxMapBaseField xmlns=""
			i:type="AxMapFieldString">
			<Name>TaxPaidShipmentId</Name>
			<ExtendedDataType>TTBTaxPaidShipmentId</ExtendedDataType>
		</AxMapBaseField>
	</Fields>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PermitTable</MapField>
					<MapFieldTo>TTBPermitTable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSPApprovalSerialId</MapField>
					<MapFieldTo>TTBDSPApprovalSerialId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSPApprovalDate</MapField>
					<MapFieldTo>TTBDSPApprovalDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransferBondShipmentId</MapField>
					<MapFieldTo>TTBTransferBondShipmentId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>SalesId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxPaidShipmentId</MapField>
					<MapFieldTo>TTBTaxPaidShipmentId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>InventTransferTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PermitTable</MapField>
					<MapFieldTo>TTBPermitTable</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSPApprovalSerialId</MapField>
					<MapFieldTo>TTBDSPApprovalSerialId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSPApprovalDate</MapField>
					<MapFieldTo>TTBDSPApprovalDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationIdFrom</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransferBondShipmentId</MapField>
					<MapFieldTo>TTBTransferBondShipmentId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>TransferId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress</MapField>
					<MapFieldTo>ToPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxPaidShipmentId</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
</AxMap>