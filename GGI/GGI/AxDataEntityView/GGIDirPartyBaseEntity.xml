<?xml version="1.0" encoding="utf-8"?>
<AxDataEntityView xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GGIDirPartyBaseEntity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class GGIDirPartyBaseEntity extends common
{
}

]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeEntityDataSource</Name>
				<Source><![CDATA[
    public void initializeEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        _dataSourceCtx.skipInitValue(false);
        _dataSourceCtx.skipValidateWrite(false);
        _dataSourceCtx.skipDataMethods(false);

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, DirPersonName))
        {
            DirPersonName personName = DirPersonName::find(this.RecId, true);
            _dataSourceCtx.setBuffer(personName);
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable))
        {
            if (this.PartyNumber != '')
            {
                DirPartyTable party = DirPartyTable::find(this.PartyNumber, true);
                if (party)
                {
                    this.InstanceRelationType = party.InstanceRelationType;
                    this.RecId = party.RecId;
                    _dataSourceCtx.setBuffer(party);
                }
            }

            // We have to do this at this point so that mapEntityToDataSource can perform the correct mappings using the sub-type
            // otherwise the fields in the super-type are not mapped and saved properly.
            this.setBufferBasedOnType(_dataSourceCtx);

            // This is needed because the import framework allows to blank out fields and if we receive a blank party number and
            // a new party number is generated during DirPartyTable.initValue(), the field mapping will blank it out again.
            if (this.PartyNumber == '')
            {
                DirPartyTable partyBuffer = _dataSourceCtx.getBuffer();
                this.PartyNumber = partyBuffer.PartyNumber;
            }

            if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
            {
                // Do not validate LegalEntityDataArea during inserts because it exists in no company.
                this.skipDataSourceValidateField(fieldNum(DirPartyBaseEntity, LegalEntityDataArea), true);
                this.skipDataSourceValidateField(fieldNum(DirPartyBaseEntity, OperatingUnitNumber), true);
            }
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryAddressLocation))
        {
            // DirPartyLocation is handled when creating the addresses directly, don't do anything here
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }
        else
        {
            super(_entityCtx, _dataSourceCtx);
        }

        if (_dataSourceCtx.getBuffer().TableId == tableNum(LogisticsElectronicAddress))
        {
            this.setElectronicAddressBuffer(_dataSourceCtx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setElectronicAddressBuffer</Name>
				<Source><![CDATA[
    private void setElectronicAddressBuffer(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        LogisticsElectronicAddressMethodType addressMethodType = this.getElectronicAddressMethodType(_dataSourceCtx);
        LogisticsLocation location = LogisticsLocation::findByLocationId(this.ElectronicLocationId);

        if (location)
        {
            LogisticsElectronicAddress electronicAddress = LogisticsElectronicAddress::findPrimary(location.RecId, addressMethodType);
            if (electronicAddress)
            {
                _dataSourceCtx.setBuffer(electronicAddress);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElectronicAddressMethodType</Name>
				<Source><![CDATA[
    protected LogisticsElectronicAddressMethodType getElectronicAddressMethodType(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        return this.getElectronicAddressType(_dataSourceCtx.name());
        }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntityToDataSource</Name>
				<Source><![CDATA[
    public void mapEntityToDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable))
        {
            switch (this.PartyType)
            {
                case DirUtility::PARTYTYPE_TEAM:
                    OMTeamMembershipCriterion teamType;
                    select firstonly RecId from teamType where teamType.Name == this.TeamType;

                    if (!teamType)
                    {
                        throw error(strFmt("@GlobalAddressBook:InvalidTeamType", this.TeamType));
                    }

                    this.TeamMembershipCriterion = teamType.RecId;
                    break;

                case DirUtility::PARTYTYPE_OPERATINGUNIT:
                    if (this.OperatingUnitType == OMOperatingUnitType::None && this.OperatingUnitTypeStr != '')
                    {
                        this.OperatingUnitType = OMOperatingUnitEntityHelper::getOperatingUnitTypeForTypeStr(this.OperatingUnitTypeStr);
                    }

                    break;
            }
        }

        super(_entityCtx, _dataSourceCtx);

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEntityDataSource</Name>
				<Source><![CDATA[
    public boolean deleteEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.getBuffer().TableId == tableNum(LogisticsElectronicAddress))
        {
            if (this.RemoveElectronicAddressesOnDelete)
            {
                // Data entity framework wants to prevent 1:1 datasources from being deleted. Override this behavior.
                _dataSourceCtx.setDataSaved(false);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
            }
            else
            {
                _dataSourceCtx.setDataSaved(true);
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
            }
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable))
        {
            // Data entity framework wants to prevent 1:1 datasources from being deleted. Override this behavior.
            _dataSourceCtx.setDataSaved(false);
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Delete);
        }

        return super(_entityCtx, _dataSourceCtx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntityDataSource</Name>
				<Source><![CDATA[
    public boolean insertEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable))
        {
            this.preUpdatePartyBuffer(_dataSourceCtx);
        }
        else if (_dataSourceCtx.getBuffer().TableId == tableNum(LogisticsElectronicAddress)
            || _dataSourceCtx.getBuffer().TableId == tableNum(DirPersonName))
        {
            // DirPartyTable needs to be created before we can insert LogisticsElectronicAddress.
            // Because of this, the insertion of contact information records are handled as post-operations.

            // DirPersonName is handled separately in the pre-update method.

            _dataSourceCtx.setDataSaved(true);
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }
        
        ret = super(_entityCtx, _dataSourceCtx);
        
        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable))
        {
            this.postUpdatePartyBuffer(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEntityDataSource</Name>
				<Source><![CDATA[
    public boolean updateEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        boolean ret;

        if (_dataSourceCtx.getBuffer().TableId == tableNum(LogisticsElectronicAddress))
        {
            // DirPartyTable needs to be updated before we can update LogisticsElectronicAddress.
            // Because of this, the update of contact information records are handled as post-operations.
            _dataSourceCtx.setDataSaved(true);
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);

            if (!_entityCtx.getCustomProperty(tablestr(LogisticsElectronicAddress)))
            {
                LogisticsElectronicAddress logisticsElectronicAddress = _dataSourceCtx.getBuffer();

                if (logisticsElectronicAddress.Location)
                {
                    _entityCtx.setCustomProperty(tablestr(LogisticsElectronicAddress), logisticsElectronicAddress.Location);
                }
            }
        }
        else if (_dataSourceCtx.getBuffer().TableId == tableNum(DirPersonName))
        {
            // DirPersonName is handled separately in the pre-update method.
            _dataSourceCtx.setDataSaved(true);
            _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);
        }
        else if (_dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable))
        {
            this.preUpdatePartyBuffer(_dataSourceCtx);
        }

        ret = super(_entityCtx, _dataSourceCtx);
        
        if (ret && _dataSourceCtx.name() == dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable))
        {
            this.postUpdatePartyBuffer(_entityCtx, _dataSourceCtx);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdatePartyBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs before update data transform operations for buffers of type <c>DirPartyTable</c> or any of its sub-types.
    /// </summary>
    /// <param name = "_dataSourceCtx">Data source runtime context.</param>
    private void preUpdatePartyBuffer(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert)
        {
            // The OperatingUnitNumber is generated in aosValidateInsert, but the entity framework will perform
            // a validateWrite prior to performing the insert which means the execution will validate the field before
            // populating it.
            if (this.PartyType == DirUtility::PARTYTYPE_OPERATINGUNIT && this.OperatingUnitNumber == '')
            {
                OMOperatingUnit operatingUnitBuffer = _dataSourceCtx.getBuffer();
                operatingUnitBuffer.OMOperatingUnitNumber = NumberSeq::newGetNum(NumberSeqReference::findReference(
                    extendedTypeNum(OMOperatingUnitNumber),
                    NumberSeqScopeFactory::createGlobalScope())).num();
            }
        }

        if ((_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert ||
             _dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Update) &&
             this.PartyType == DirUtility::PARTYTYPE_PERSON)
        {
            DirPerson person = _dataSourceCtx.getBuffer() as DirPerson;
            DirPersonName personName = DirPersonName::find(person.RecId, true);
            DirPerson existingPerson = DirPerson::find(person.RecId);

            if (this.SavePersonName)
            {
                if (this.PersonFirstName ||
                    this.PersonMiddleName ||
                    this.PersonLastNamePrefix ||
                    this.PersonLastName)
            {
                // If any of the name parts are provided, use them to build a Name value
                // instead of parsing Name to build name parts

                // Temp buffer that won't be inserted
                DirPersonName personNameTemp;
                
                personNameTemp.FirstName = this.PersonFirstName;
                personNameTemp.MiddleName = this.PersonMiddleName;
                personNameTemp.LastNamePrefix = this.PersonLastNamePrefix;
                personNameTemp.LastName = this.PersonLastName;

                person.Name = person.name(personNameTemp, DirNameSequence::findByRecId(person.NameSequence).DisplayAs);
            }
            // Otherwise attempt to split the provided name into name parts
            else if (this.Name != existingPerson.Name)
            {
                [this.PersonFirstName, this.PersonMiddleName, this.PersonLastName, this.PersonLastNamePrefix] = DirPerson::splitNamePartsByNameSequence(this.Name, this.NameSequence);
            }
            }

            person.PersonalTitle = DirNameAffix::find(DirNameAffixType::PersonalPrefix, this.PersonPersonalTitle).RecId;
            person.PersonalSuffix = DirNameAffix::find(DirNameAffixType::PersonalSuffix, this.PersonPersonalSuffix).RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdatePartyBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs after update data transform operations for buffers of type <c>DirPartyTable</c> or any of its sub-types.
    /// </summary>
    /// <param name = "_dataSourceCtx">Data source runtime context.</param>
    private void postUpdatePartyBuffer(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _partyDataSourceCtx)
    {
        container contactInfoDataSources = [
                dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactEmail),
                dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFax),
                dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactPhone),
                dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTelex),
                dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactURL),
                dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFacebook),
                dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTwitter),
                dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactLinkedIn)
            ];

        this.updateAddressBooks(_partyDataSourceCtx);

        if (this.PartyType == DirUtility::PARTYTYPE_PERSON && this.SavePersonName)
        {
            DirPerson person = _partyDataSourceCtx.getBuffer() as DirPerson;
            DirPersonName personName = DirPersonName::find(person.RecId, true);

            if (personName.RecId == 0)
            {
                personName.initValue();
                personName.Person = person.RecId;
            }

            // If any of the name parts are provided, store those values on the DirPersonName record
            if (this.PersonFirstName != personName.FirstName ||
                this.PersonMiddleName != personName.MiddleName ||
                this.PersonLastNamePrefix != personName.LastNamePrefix ||
                this.PersonLastName != personName.LastName)
            {
                personName.FirstName = this.PersonFirstName;
                personName.MiddleName = this.PersonMiddleName;
                personName.LastNamePrefix = this.PersonLastNamePrefix;
                personName.LastName = this.PersonLastName;
            }

            personName.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);

            if (!personName.ValidTo)
            {
                personName.ValidTo = DateTimeUtil::maxValue();
            }
            
            if (personName.validateWrite())
            {
                personName.write();
            }
        }
        
        for(int i = 1; i <= conLen(contactInfoDataSources); i++)
        {
            this.updateElectronicAddress(_entityCtx, _partyDataSourceCtx, conPeek(contactInfoDataSources, i));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferBasedOnType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the correct buffer based on the party type.
    /// </summary>
    /// <param name = "_dataSourceCtx">Data source context.</param>
    private void setBufferBasedOnType(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DirPartyTable partyTable = _dataSourceCtx.getBuffer();
        TableId targetTableId = DirUtility::partyTypeToTableId(this.PartyType);

        if (_dataSourceCtx.getDatabaseOperation() == DataEntityDatabaseOperation::Insert || this.InstanceRelationType == 0)
        {
            _dataSourceCtx.setBuffer(new DictTable(targetTableId).makeRecord());
            _dataSourceCtx.getBuffer().initValue();
        }
        else
        {
            // We need to validate against an incoming party with a party number that already exists in db
            // with a different party type
            if (targetTableId != this.InstanceRelationType)
            {
                // Cannot update a party's type
                throw error(strFmt("@GlobalAddressBook:CannotChangeDirPartyType",
                                   tableId2Name(int642int(this.InstanceRelationType)),
                                   tableId2Name(targetTableId)));
            }
            else
            {
                DirPartyTable partyBuffer = DirUtility::getSubTypeFromTableNum(int642int(this.InstanceRelationType), partyTable.RecId);

                if (!partyBuffer)
                {
                    // Party record not found for party type
                    throw error(strFmt("@GlobalAddressBook:PartySubTypeNotFound", this.PartyType));
                }

                _dataSourceCtx.setBuffer(partyBuffer);
            }

        }

        _dataSourceCtx.skipInitValue(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>partyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the query to be used to compute the value of PartyType field.
    /// </summary>
    /// <returns>A query to be used to compute the value of PartyType field.</returns>
    private static str partyType()
    {
        /*********************************************
        The following is an example of what the query string will look like, table id's may vary:
        
    CASE DirPartyTable.InstanceRelationType
        WHEN 11840 THEN 'Person'
        WHEN 1910  THEN 'Organization'
        WHEN 8099  THEN 'LegalEntity'
        WHEN 7525  THEN 'OperatingUnit'
        WHEN 6237  THEN 'Team'
        ELSE ''
        END
        *********************************************/
        Map partyTypesMap = DirUtility::getPartyTypeNames();

        return SysComputedColumn::switch(
            SysComputedColumn::comparisonField(tableStr(DirPartyBaseEntity), tableStr(DirPartyTable), fieldStr(DirPartyTable, InstanceRelationType)),
            partyTypesMap,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>savePersonName</Name>
				<Source><![CDATA[
    private static str savePersonName()
    {
        // Default behavior is for the party entity to save the person name.
        return SysComputedColumn::returnLiteral(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeElectronicAddressesOnDelete</Name>
				<Source><![CDATA[
    private static str removeElectronicAddressesOnDelete()
    {
        // Default behavior is for the party entity to remove electronic addresses when the party is deleted.
        return SysComputedColumn::returnLiteral(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>electronicLogisticsLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the query to compute the electronic address location Id.
    /// </summary>
    /// <returns>A query to compute the electronic address location Id.</returns>
    private static str electronicLogisticsLocation()
    {
        SysDictTable logisticsLocationTable = new SysDictTable(tableNum(LogisticsLocation));
        SysDictTable logisticsElectronicAddressTable = new SysDictTable(tableNum(LogisticsElectronicAddress));

        str logisticsLocation = logisticsLocationTable.name(DbBackend::Sql);
        str logisticsLocationId = logisticsLocationTable.fieldName(fieldNum(LogisticsLocation, LocationId), DbBackend::Sql);
        str logisticsLocationRecId = logisticsLocationTable.fieldName(fieldNum(LogisticsLocation, RecId), DbBackend::Sql);
        str logisticsLocationPartition = logisticsLocationTable.fieldName(fieldNum(LogisticsLocation, Partition), DbBackend::Sql);

        str logisticsElectronicAddress = logisticsElectronicAddressTable.name(DbBackend::Sql);
        str logisticsElectronicAddressLocation = logisticsElectronicAddressTable.fieldName(fieldNum(LogisticsElectronicAddress, Location), DbBackend::Sql);
        str logisticsElectronicAddressRecId = logisticsElectronicAddressTable.fieldName(fieldNum(LogisticsElectronicAddress, RecId), DbBackend::Sql);
        str logisticsElectronicAddressPartition = logisticsElectronicAddressTable.fieldName(fieldNum(LogisticsElectronicAddress, Partition), DbBackend::Sql);

        str dirPartyPrimaryContactEmail = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactEmail), fieldStr(LogisticsElectronicAddress, RecId));
        str dirPartyPrimaryContactFax = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFax), fieldStr(LogisticsElectronicAddress, RecId));
        str dirPartyPrimaryContactPhone = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactPhone), fieldStr(LogisticsElectronicAddress, RecId));
        str dirPartyPrimaryContactTelex = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTelex), fieldStr(LogisticsElectronicAddress, RecId));
        str dirPartyPrimaryContactURL = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactURL), fieldStr(LogisticsElectronicAddress, RecId));
        str dirPartyPrimaryContactFacebook = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFacebook), fieldStr(LogisticsElectronicAddress, RecId));
        str dirPartyPrimaryContactTwitter = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTwitter), fieldStr(LogisticsElectronicAddress, RecId));
        str dirPartyPrimaryContactLinkedIn = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactLinkedIn), fieldStr(LogisticsElectronicAddress, RecId));
        str dirPartyPartition = SysComputedColumn::returnField(tablestr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable), fieldStr(DirPartyTable, Partition));

        /*********************************************
        The following is an example of what the query string will look like
        SELECT TOP 1 LL.LOCATIONID FROM LOGISTICSELECTRONICADDRESS LEA
        JOIN LOGISTICSLOCATION LL ON LL.RECID = LEA.LOCATION
        WHERE LEA.RECID IN (T2.RECID, T3.RECID, T4.RECID, T5.RECID, T6.RECID, T7.RECID, T8.RECID, T9.RECID)
            AND LL.PARTITION = LEA.PARTITION
            AND LL.PARTITION = T1.PARTITION
        ORDER BY LL.LOCATIONID DESC
        *********************************************/
        return 'SELECT TOP 1 LL.' + logisticsLocationId + ' FROM ' + logisticsElectronicAddress + ' LEA' +
                ' JOIN ' + logisticsLocation + ' LL ON LL.' + logisticsLocationRecId + ' = LEA.' + logisticsElectronicAddressLocation +
                ' WHERE LEA.' + logisticsElectronicAddressRecId + ' IN (' +
                    dirPartyPrimaryContactEmail + ', ' +
                    dirPartyPrimaryContactFax + ', ' +
                    dirPartyPrimaryContactPhone + ', ' +
                    dirPartyPrimaryContactTelex + ', ' +
                    dirPartyPrimaryContactURL + ', ' +
                    dirPartyPrimaryContactFacebook + ', ' +
                    dirPartyPrimaryContactTwitter + ', ' +
                    dirPartyPrimaryContactLinkedIn + ')' +
                ' AND LL.' + logisticsLocationPartition + ' = LEA.' + logisticsElectronicAddressPartition + 
                ' AND LL.' + logisticsLocationPartition + ' = ' + dirPartyPartition +
                ' ORDER BY LL.' + logisticsLocationId + ' DESC';
    }

]]></Source>
			</Method>
			<Method>
				<Name>TeamType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the query to compute the name of the Team Type field.
    /// </summary>
    /// <returns>A query to compute the name of the Team Type field.</returns>
    private static str TeamType()
    {
        str derivedFieldStr = SysComputedColumn::returnField(tableStr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable), fieldStr(DirPartyTable, RecId));
        derivedFieldStr = strRem(derivedFieldStr, "RECID") + "TeamMembershipCriterion";

        return "SELECT Name from OMTeamMembershipCriterion WHERE OMTeamMembershipCriterion.RecId = " + derivedFieldStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>OperatingUnitTypeStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the query to compute the name of the operating unit type.
    /// </summary>
    /// <returns>A query to compute the name of the operating unit type.</returns>
    private static str OperatingUnitTypeStr()
    {
        str derivedFieldStr = SysComputedColumn::returnField(tableStr(DirPartyBaseEntity), dataEntityDataSourceStr(DirPartyBaseEntity, DirPartyTable), fieldStr(DirPartyTable, RecId));
        derivedFieldStr = strRem(derivedFieldStr, "RECID") + "OMOperatingUnitType";

        Map omUnitTypesMap = new Map(Types::String, Types::String);

        // Get the operating unit type entity value string and operating unit type enum value pairs.
        Map omUnitTypesStrMap = OMOperatingUnitEntityHelper::getOperatingUnitTypeStrMap();

        if (omUnitTypesStrMap)
        {
            MapEnumerator omUnitTypesStrs = omUnitTypesStrMap.getEnumerator();

            while (omUnitTypesStrs.moveNext())
            {
                // Convert the enum value str mapping to the SQL case statement syntax.
                str idStr = int2Str(enum2int((omUnitTypesStrs.currentValue())));
                str valueStr = omUnitTypesStrs.currentKey();

                omUnitTypesMap.insert(idStr, strFmt("'%1'", valueStr));
            }
        }

        return SysComputedColumn::switch(
            derivedFieldStr,
            omUnitTypesMap,
            SysComputedColumn::returnLiteral(''));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactInfoPurposeFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field id exposed in the entity based on the data source being updated/inserted.
    /// </summary>
    /// <param name = "_dataSourceName">The name of the data source being updated/inserted.</param>
    /// <returns>The field id exposed in the entity based on the data source being updated/inserted.</returns>
    private FieldId getContactInfoPurposeFieldId(TableName _dataSourceName)
    {
        FieldId fieldId;
        switch (_dataSourceName)
        {
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactEmail):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactEmailPurpose);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFax):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactFaxPurpose);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactPhone):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactPhonePurpose);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTelex):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactTelexPurpose);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactURL):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactURLPurpose);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFacebook):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactFacebookPurpose);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTwitter):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactTwitterPurpose);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactLinkedIn):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactLinkedInPurpose);
                break;
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactInfoFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field id that exposes the locator field of the primary contact information data sources.
    /// </summary>
    /// <param name = "_dataSourceName">The name of the data source being updated/inserted.</param>
    /// <returns>The field id exposing the locator in the entity based on the data source being updated/inserted.</returns>
    private FieldId getContactInfoFieldId(TableName _dataSourceName)
    {
        FieldId fieldId;
        switch (_dataSourceName)
        {
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactEmail):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactEmail);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFax):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactFax);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactPhone):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactPhone);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTelex):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactTelex);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactURL):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactURL);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFacebook):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactFacebook);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTwitter):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactTwitter);
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactLinkedIn):
                fieldId = fieldnum(DirPartyBaseEntity, PrimaryContactLinkedIn);
                break;
        }

        return FieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElectronicAddressType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the correct <c>LogisticsElectronicAddressMethodType</c> value depending on the data source being updated.
    /// </summary>
    /// <param name = "_dataSourceName">Data source name being updated/inserted.</param>
    /// <returns>The correct <c>LogisticsElectronicAddressMethodType</c> value depending on the data source being updated.</returns>
    private LogisticsElectronicAddressMethodType getElectronicAddressType(TableName _dataSourceName)
    {
        LogisticsElectronicAddressMethodType type;
        switch (_dataSourceName)
        {
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactEmail):
                type = LogisticsElectronicAddressMethodType::Email;
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFax):
                type = LogisticsElectronicAddressMethodType::Fax;
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactPhone):
                type = LogisticsElectronicAddressMethodType::Phone;
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTelex):
                type = LogisticsElectronicAddressMethodType::Telex;
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactURL):
                type = LogisticsElectronicAddressMethodType::URL;
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactFacebook):
                type = LogisticsElectronicAddressMethodType::Facebook;
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactTwitter):
                type = LogisticsElectronicAddressMethodType::Twitter;
                break;
            case dataEntityDataSourceStr(DirPartyBaseEntity, PrimaryContactLinkedIn):
                type = LogisticsElectronicAddressMethodType::LinkedIn;
                break;
        }

        return type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateElectronicAddress</Name>
				<Source><![CDATA[
    private LogisticsElectronicAddress updateElectronicAddress(DataEntityRuntimeContext _entityCtx,
                                                               DataEntityDataSourceRuntimeContext _dataSourceCtx,
                                                               str _dataSourceName)
    {
        LogisticsElectronicAddress logisticsElectronicAddress;
        FieldId locatorFieldId = this.getContactInfoFieldId(_dataSourceName);
        DataEntityDataSourceRuntimeContext contactInfoDataSource = _entityCtx.getRuntimeContextByName(_dataSourceName);

        if (this.(locatorFieldId) != '')
        {
            if (_dataSourceCtx.getBuffer().TableId == tableNum(LogisticsElectronicAddress))
            {
                logisticsElectronicAddress = _dataSourceCtx.getBuffer();
            }
            else if (contactInfoDataSource)
            {
                logisticsElectronicAddress = contactInfoDataSource.getBuffer();
                logisticsElectronicAddress.selectforUpdate(true);
            }
            else
            {
                logisticsElectronicAddress.initValue();
            }

            logisticsElectronicAddress.Locator          = this.(locatorFieldId);
            logisticsElectronicAddress.IsPrimary        = true;
            logisticsElectronicAddress.Type             = this.getElectronicAddressType(_dataSourceName);
            logisticsElectronicAddress.PrivateForParty  = logisticsElectronicAddress.IsPrivate ? this.RecId : 0;

            // Find or create the LogisticsLocation record
            if (!logisticsElectronicAddress.Location)
            {
                // There is only one DirPartyLocation and LogisticsLocation record for all LogisticsElectronicAddress records related to a party,
                // so only one Location record is generated and stored as a custom property on the entity context.
                if (_entityCtx.getCustomProperty(tablestr(LogisticsElectronicAddress)))
                {
                    logisticsElectronicAddress.Location = _entityCtx.getCustomProperty(tablestr(LogisticsElectronicAddress));
                }
                else
                {
                    if (this.ElectronicLocationId == '')
                    {
                        DirPartyLocation dirPartyLocation = DirPartyLocation::findOrCreate(DirPartyTable::findByNum(this.PartyNumber).RecId, logisticsElectronicAddress.Location);

                        logisticsElectronicAddress.Location = dirPartyLocation.Location;
                    }
                    else
                    {
                        LogisticsLocation location = LogisticsLocation::findByLocationId(this.ElectronicLocationId);

                        if (!location)
                        {
                            location.LocationId = this.ElectronicLocationId;
                            location.Description = '';
                            location.IsPostalAddress = false;
                            location.ParentLocation = 0;
                            location.insert();
                        }

                        logisticsElectronicAddress.Location = location.RecId;
                    }
                }

                _entityCtx.setCustomProperty(tablestr(LogisticsElectronicAddress), logisticsElectronicAddress.Location);
            }
            
	    // All electronic addresses reference a single location for a given party and the location must be ensured to exist regardless of whether a locator is set or deleted.
            DirPartyLocation::findOrCreate(this.RecId, logisticsElectronicAddress.Location, false);
            logisticsElectronicAddress.write();

            this.updateElectronicAddressRoles(logisticsElectronicAddress, contactInfoDataSource.name(), true);
        }

        _dataSourceCtx.setDataSaved(true);
        _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::None);

        return logisticsElectronicAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateElectronicAddressRoles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates the <c>LogisticsElectronicAddressRole</c> records based on the delimited list of values in
    /// the primary contact information fields. The field from where the list will be retrieved is based on the data source that is being updated.
    /// </summary>
    /// <param name = "_dataSourceCtx">Data source runtime context.</param>
    /// <param name = "_addDefault">When true it will add a default role if the prupose field is empty,
    /// otherwise only the values in the list will be considered.</param>
    private void updateElectronicAddressRoles(LogisticsElectronicAddress _logisticsElectronicAddress, str _dataSourceName, boolean _addDefault = true)
    {
        FieldId purposeFieldId = this.getContactInfoPurposeFieldId(_dataSourceName);
        container roleRecIds;

        if (_logisticsElectronicAddress && this.isFieldSet(purposeFieldId))
        {
            roleRecIds = DirPartyBaseEntity::roleStrToContainer(this.(purposeFieldId), _addDefault);
        }

        if (roleRecIds != conNull())
        {
            LogisticsElectronicAddressRole::createLocationRoles(_logisticsElectronicAddress.RecId, roleRecIds, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>roleStrToContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a list of roles delimited by a semicolon into a container of <c>RecId</c> values of <c>LogisticsLocationRole</c> records.
    /// If a token in the list does not exist in the database it will be skipped.
    /// </summary>
    /// <param name = "_roleStr">A list of delimited location role names.</param>
    /// <param name = "_addDefault">When true a default role will be added if the list is empty or no <c>LogisticsLocationRole</c> record is found.</param>
    /// <returns>A list of roles delimited by a semicolon into a container of <c>RecId</c> values of <c>LogisticsLocationRole</c> records.</returns>
    public static container roleStrToContainer(str _roleStr, boolean _addDefault = true)
    {
        container roleRecIds;
        if (_roleStr)
        {
            LogisticsLocationRole locationRole;
            Container roleStrCon = str2con(_roleStr, DirUtility::ListDelimiter);

            for (int i = 1; i <= conLen(roleStrCon); i++)
            {
                locationRole = LogisticsLocationRole::findByName(conpeek(roleStrCon, i));

                if (locationRole)
                {
                    roleRecIds += locationRole.RecId;
                }
            }
        }

        if (roleRecIds == connull() && _addDefault)
        {
            roleRecIds = [LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Business).RecId];
        }

        return roleRecIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAddressBooks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related address books for the current party based on the list of address books provided.
    /// If the address book value in the list does not exist it will get created.
    /// </summary>
    /// <param name = "_dataSourceCtx">Data source runtime context.</param>
    private void updateAddressBooks(DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        container addressBookRecIds;
        str invalidAddressBooks;

        if (this.isFieldSet(fieldNum(DirPartyBaseEntity, AddressBooks)))
        {
            DirAddressBook addressBook;
            container addressBookStr = str2con(this.AddressBooks, DirUtility::ListDelimiter, false);
            DirAddressBookName addressBookName;

            for (int i = 1; i <= conLen(addressBookStr); i++)
            {
                addressBookName = conPeek(addressBookStr, i);
                if (addressBookName != '')
                {
                    addressBookName = strRTrim(addressBookName);
                    addressBook = DirAddressBook::find(addressBookName);

                    if (!addressBook)
                    {
                        invalidAddressBooks += "'" + addressBookName + "', ";
                    }
                    else
                    {
                        if (addressBook.IsSystem == NoYes::No)
                        {
                            // Exclude the unassigned address book (system)
                            addressBookRecIds += addressBook.RecId;
                        }
                    }
                }
            }

            if(invalidAddressBooks == '' && addressBookRecIds != conNull())
            {
                DirAddressBookParty::createPartyRelations(this.RecId, addressBookRecIds);
            }
            else if(invalidAddressBooks != '')
            {
                invalidAddressBooks = subStr(invalidAddressBooks, 1, strLen(invalidAddressBooks) - 2);
                throw error(strFmt("@GlobalAddressBook:InvalidAddressBooks", invalidAddressBooks));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDirPartyBaseEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>DirPartyBaseEntity</c> buffer in a <c>DataEntityDataSourceRuntimeContext</c> given its party number.
    /// This method is meant to be called from implementing data entities when initializing a data source that references <c>DirPartyBaseEntity</c>.
    /// </summary>
    /// <param name = "_entityCtx">Data Entity Runtime Context</param>
    /// <param name = "_dataSourceCtx">Data Entity Data Source Runtime Context</param>
    public static void initializeDirPartyBaseEntityDataSource(DataEntityRuntimeContext _entityCtx, DataEntityDataSourceRuntimeContext _dataSourceCtx)
    {
        DirPartyEntityMap partyEntityMap = _entityCtx.getEntityRecord();

        DirPartyBaseEntity partyEntity;
        select firstonly forupdate partyEntity where partyEntity.PartyNumber == partyEntityMap.PartyNumber;

        if (partyEntity)
        {
            _dataSourceCtx.setBuffer(partyEntity);

            if (_dataSourceCtx.getDatabaseOperation() != DataEntityDatabaseOperation::Delete)
            {
                _dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.SavePersonName = NoYes::Yes;
        this.RemoveElectronicAddressesOnDelete = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChangeTrackingDataSourcesForPartyBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds change tracking tables to parent queries that link to <c>DirPartyTable</c> based on Record Id.
    /// </summary>
    /// <param name = "_parentDS">
    /// Parent datasource to which the tables should be added.
    /// </param>
    /// <param name = "_parentAddressFieldNum">
    /// FieldId of the field to which RecId of <c>DirPartyTable</c> should be linked.
    /// </param>
    /// <returns>An instance of the <c>DirPartyTable</c> datasource being joined to.</returns>
    public static QueryBuildDataSource addChangeTrackingDataSourcesForPartyBase(QueryBuildDataSource _parentDS, FieldId _parentAddressFieldNum)
    {
        QueryBuildDataSource qbdDirParty = _parentDS.addDataSource(tableNum(DirPartyTable));
        qbdDirParty.addLink(_parentAddressFieldNum, FieldNum(DirPartyTable, RecId));

        qbdDirParty = DirPartyBaseEntity::addChangeTrackingDataSourcesForDirPartyChildren(qbdDirParty);

        return qbdDirParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChangeTrackingDataSourcesForDirPartyChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds change tracking tables to the children of the <c></c>DirPartyTable</c>.
    /// </summary>
    /// <param name = "_dirPartyInstance">
    /// The <c>QueryBuildDataSource</c> instance to append it's child data sources to.
    /// </param>
    /// <returns>An instance of the <c>DirPartyTable</c> data source being joined to.</returns>
    public static QueryBuildDataSource addChangeTrackingDataSourcesForDirPartyChildren(QueryBuildDataSource _dirPartyInstance)
    {
        QueryBuildDataSource qbdElectronicAddress = _dirPartyInstance.addDataSource(tableNum(LogisticsElectronicAddress));
        qbdElectronicAddress.addLink(fieldNum(DirPartyTable, PrimaryContactEmail), fieldNum(LogisticsElectronicAddress, RecId));

        qbdElectronicAddress = _dirPartyInstance.addDataSource(tableNum(LogisticsElectronicAddress));
        qbdElectronicAddress.addLink(fieldNum(DirPartyTable, PrimaryContactFax), fieldNum(LogisticsElectronicAddress, RecId));

        qbdElectronicAddress = _dirPartyInstance.addDataSource(tableNum(LogisticsElectronicAddress));
        qbdElectronicAddress.addLink(fieldNum(DirPartyTable, PrimaryContactPhone), fieldNum(LogisticsElectronicAddress, RecId));

        qbdElectronicAddress = _dirPartyInstance.addDataSource(tableNum(LogisticsElectronicAddress));
        qbdElectronicAddress.addLink(fieldNum(DirPartyTable, PrimaryContactTelex), fieldNum(LogisticsElectronicAddress, RecId));

        qbdElectronicAddress = _dirPartyInstance.addDataSource(tableNum(LogisticsElectronicAddress));
        qbdElectronicAddress.addLink(fieldNum(DirPartyTable, PrimaryContactURL), fieldNum(LogisticsElectronicAddress, RecId));
        
        qbdElectronicAddress = _dirPartyInstance.addDataSource(tableNum(LogisticsElectronicAddress));
        qbdElectronicAddress.addLink(fieldNum(DirPartyTable, PrimaryContactFacebook), fieldNum(LogisticsElectronicAddress, RecId));

        qbdElectronicAddress = _dirPartyInstance.addDataSource(tableNum(LogisticsElectronicAddress));
        qbdElectronicAddress.addLink(fieldNum(DirPartyTable, PrimaryContactTwitter), fieldNum(LogisticsElectronicAddress, RecId));

        qbdElectronicAddress = _dirPartyInstance.addDataSource(tableNum(LogisticsElectronicAddress));
        qbdElectronicAddress.addLink(fieldNum(DirPartyTable, PrimaryContactLinkedIn), fieldNum(LogisticsElectronicAddress, RecId));

        QueryBuildDataSource qbdDirPersonAffix = _dirPartyInstance.addDataSource(tableNum(DirPerson));
        qbdDirPersonAffix.addLink(fieldNum(DirPartyTable, RecId), fieldNum(DirPerson, RecId));

        QueryBuildDataSource qbdDirPersonName = _dirPartyInstance.addDataSource(tableNum(DirPersonName));
        qbdDirPersonName.addLink(fieldNum(DirPerson, RecId), fieldNum(DirPersonName, Person));

        QueryBuildDataSource qbdDirNameAffix = qbdDirPersonAffix.addDataSource(tableNum(DirNameAffix));
        qbdDirNameAffix.addLink(fieldNum(DirPerson, PersonalSuffix), fieldNum(DirNameAffix, RecId));

        qbdDirNameAffix = qbdDirPersonAffix.addDataSource(tableNum(DirNameAffix));
        qbdDirNameAffix.addLink(fieldNum(DirPerson, PersonalTitle), fieldNum(DirNameAffix, RecId));

        // DirPartyBaseEntity derived data sources
        QueryBuildDataSource qbdDirOrgBase = _dirPartyInstance.addDataSource(tableNum(DirOrganizationBase));
        qbdDirOrgBase.relations(true);

        QueryBuildDataSource qbdDirOrg = qbdDirOrgBase.addDataSource(tableNum(DirOrganization));
        qbdDirOrg.relations(true);

        QueryBuildDataSource qbdOMInternalOrg = qbdDirOrgBase.addDataSource(tableNum(OMInternalOrganization));
        qbdOMInternalOrg.relations(true);

        QueryBuildDataSource qbdCompanyInfo = qbdOMInternalOrg.addDataSource(tableNum(CompanyInfo));
        qbdCompanyInfo.relations(true);

        QueryBuildDataSource qbdOMOperatingUnit = qbdOMInternalOrg.addDataSource(tableNum(OMOperatingUnit));
        qbdOMOperatingUnit.relations(true);

        QueryBuildDataSource qbdOMTeam = qbdOMInternalOrg.addDataSource(tableNum(OMTeam));
        qbdOMTeam.relations(true);

        return _dirPartyInstance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<FormRef>DirPartyTable</FormRef>
	<Label>@GGI:AddressBookEntity</Label>
	<Tags>Address setup</Tags>
	<IsPublic>Yes</IsPublic>
	<Modules>GAB</Modules>
	<PrimaryKey>EntityKey</PrimaryKey>
	<PublicCollectionName>DirPartyBaseEntities</PublicCollectionName>
	<PublicEntityName>DirPartyBaseEntity</PublicEntityName>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PartyNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>PartyNumber</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>Name</Name>
			<Mandatory>No</Mandatory>
			<DataField>Name</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>PartyType</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>partyType</ComputedFieldMethod>
			<ExtendedDataType>DirPartyInstanceRelationTypeName</ExtendedDataType>
			<StringSize>13</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NameAlias</Name>
			<DataField>NameAlias</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>KnownAs</Name>
			<Label>Known as</Label>
			<DataField>KnownAs</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressBooks</Name>
			<Label>@SYS136864</Label>
			<DataField>AddressBookNames</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LanguageId</Name>
			<DataField>LanguageId</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>InstanceRelationType</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>InstanceRelationType</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrganizationABCCode</Name>
			<DataField>ABC</DataField>
			<DataSource>DirOrganization</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrganizationNumOfEmployees</Name>
			<DataField>NumberOfEmployees</DataField>
			<DataSource>DirOrganization</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrganizationNumber</Name>
			<DataField>OrgNumber</DataField>
			<DataSource>DirOrganization</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrganizationPhoneticName</Name>
			<DataField>PhoneticName</DataField>
			<DataSource>DirOrganizationBase</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonInitials</Name>
			<DataField>Initials</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonFirstName</Name>
			<DataField>FirstName</DataField>
			<DataSource>DirPersonName</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonMiddleName</Name>
			<DataField>MiddleName</DataField>
			<DataSource>DirPersonName</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonLastNamePrefix</Name>
			<DataField>LastNamePrefix</DataField>
			<DataSource>DirPersonName</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonLastName</Name>
			<DataField>LastName</DataField>
			<DataSource>DirPersonName</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonalSuffix</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PersonalSuffix</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonPersonalSuffix</Name>
			<Label>@SYS131550</Label>
			<Mandatory>No</Mandatory>
			<DataField>Affix</DataField>
			<DataSource>DirNameAffixPersonalSuffix</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonalTitle</Name>
			<AccessModifier>Private</AccessModifier>
			<DataField>PersonalTitle</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonPersonalTitle</Name>
			<Label>@SYS79849</Label>
			<Mandatory>No</Mandatory>
			<DataField>Affix</DataField>
			<DataSource>DirNameAffixPersonalTitle</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonProfessionalTitle</Name>
			<DataField>ProfessionalTitle</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonProfessionalSuffix</Name>
			<DataField>ProfessionalSuffix</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonPhoneticFirstName</Name>
			<DataField>PhoneticFirstName</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonPhoneticLastName</Name>
			<DataField>PhoneticLastName</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonPhoneticMiddleName</Name>
			<DataField>PhoneticMiddleName</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonGender</Name>
			<DataField>Gender</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonMaritalStatus</Name>
			<DataField>MaritalStatus</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonHobbies</Name>
			<DataField>Hobbies</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonChildrenNames</Name>
			<DataField>ChildrenNames</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonAnniversaryDay</Name>
			<DataField>AnniversaryDay</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonAnniversaryMonth</Name>
			<DataField>AnniversaryMonth</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonAnniversaryYear</Name>
			<DataField>AnniversaryYear</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonBirthDay</Name>
			<DataField>BirthDay</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonBirthMonth</Name>
			<DataField>BirthMonth</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonBirthYear</Name>
			<DataField>BirthYear</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>LegalEntityDataArea</Name>
			<Mandatory>No</Mandatory>
			<DataField>DataArea</DataField>
			<DataSource>CompanyInfo</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OrganizationType</Name>
			<DataField>OrganizationType</DataField>
			<DataSource>OMInternalOrganization</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OperatingUnitNumber</Name>
			<Mandatory>No</Mandatory>
			<DataField>OMOperatingUnitNumber</DataField>
			<DataSource>OMOperatingUnit</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>OperatingUnitType</Name>
			<Mandatory>No</Mandatory>
			<DataField>OMOperatingUnitType</DataField>
			<DataSource>OMOperatingUnit</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>OperatingUnitTypeStr</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>OperatingUnitTypeStr</ComputedFieldMethod>
			<StringSize>60</StringSize>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>TeamType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>teamType</ComputedFieldMethod>
			<ExtendedDataType>OMTeamMembershipCriterionId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TeamDescription</Name>
			<Mandatory>No</Mandatory>
			<DataField>Description</DataField>
			<DataSource>OMTeam</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>TeamMembershipCriterion</Name>
			<AccessModifier>Private</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>TeamMembershipCriterion</DataField>
			<DataSource>OMTeam</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryAddressLocation</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>PrimaryAddressLocation</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>AddressLocationRoles</Name>
			<DataField>PostalAddressRoles</DataField>
			<DataSource>PrimaryAddressLocation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmailRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>PrimaryContactEmail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmail</Name>
			<Label>@GlobalAddressBook:PrimaryEmail</Label>
			<DataField>Locator</DataField>
			<DataSource>PrimaryContactEmail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmailDescription</Name>
			<Label>@GlobalAddressBook:PrimaryEmailDescription</Label>
			<DataField>Description</DataField>
			<DataSource>PrimaryContactEmail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmailIsIM</Name>
			<Label>@GlobalAddressBook:EmailIsInstantMessage</Label>
			<DataField>IsInstantMessage</DataField>
			<DataSource>PrimaryContactEmail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmailPurpose</Name>
			<Label>@GlobalAddressBook:PrimaryEmailPurpose</Label>
			<DataField>ElectronicAddressRoles</DataField>
			<DataSource>PrimaryContactEmail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactEmailIsPrivate</Name>
			<Label>@GlobalAddressBook:PrivateEmail</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>PrimaryContactEmail</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFaxRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>PrimaryContactFax</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFax</Name>
			<Label>@GlobalAddressBook:PrimaryFax</Label>
			<DataField>Locator</DataField>
			<DataSource>PrimaryContactFax</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFaxDescription</Name>
			<Label>@GlobalAddressBook:PrimaryFaxDescription</Label>
			<DataField>Description</DataField>
			<DataSource>PrimaryContactFax</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFaxExtension</Name>
			<Label>@GlobalAddressBook:PrimaryFaxExtension</Label>
			<DataField>LocatorExtension</DataField>
			<DataSource>PrimaryContactFax</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFaxPurpose</Name>
			<Label>@GlobalAddressBook:PrimaryFaxPurpose</Label>
			<DataField>ElectronicAddressRoles</DataField>
			<DataSource>PrimaryContactFax</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFaxIsPrivate</Name>
			<Label>@GlobalAddressBook:PrivateFax</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>PrimaryContactFax</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhoneRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>PrimaryContactPhone</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhone</Name>
			<Label>@GlobalAddressBook:PrimaryPhone</Label>
			<DataField>Locator</DataField>
			<DataSource>PrimaryContactPhone</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhoneDescription</Name>
			<Label>@GlobalAddressBook:PrimaryPhoneDescription</Label>
			<DataField>Description</DataField>
			<DataSource>PrimaryContactPhone</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhoneExtension</Name>
			<Label>@GlobalAddressBook:PrimaryPhoneExtension</Label>
			<DataField>LocatorExtension</DataField>
			<DataSource>PrimaryContactPhone</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhoneIsMobile</Name>
			<Label>@GlobalAddressBook:PhoneIsMobile</Label>
			<Mandatory>No</Mandatory>
			<DataField>IsMobilePhone</DataField>
			<DataSource>PrimaryContactPhone</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhonePurpose</Name>
			<Label>@GlobalAddressBook:PrimaryPhonePurpose</Label>
			<DataField>ElectronicAddressRoles</DataField>
			<DataSource>PrimaryContactPhone</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactPhoneIsPrivate</Name>
			<Label>@GlobalAddressBook:PrivatePhone</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>PrimaryContactPhone</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTelexRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>PrimaryContactTelex</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTelex</Name>
			<Label>@GlobalAddressBook:PrimaryTelex</Label>
			<DataField>Locator</DataField>
			<DataSource>PrimaryContactTelex</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTelexDescription</Name>
			<Label>@GlobalAddressBook:PrimaryTelexDescription</Label>
			<DataField>Description</DataField>
			<DataSource>PrimaryContactTelex</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTelexPurpose</Name>
			<Label>@GlobalAddressBook:PrimaryTelexPurpose</Label>
			<DataField>ElectronicAddressRoles</DataField>
			<DataSource>PrimaryContactTelex</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTelexIsPrivate</Name>
			<Label>@GlobalAddressBook:PrivateTelex</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>PrimaryContactTelex</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactURLRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>PrimaryContactURL</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactURL</Name>
			<Label>@GlobalAddressBook:PrimaryUrl</Label>
			<DataField>Locator</DataField>
			<DataSource>PrimaryContactURL</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactURLDescription</Name>
			<Label>@GlobalAddressBook:PrimaryURLDescription</Label>
			<DataField>Description</DataField>
			<DataSource>PrimaryContactURL</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactURLPurpose</Name>
			<Label>@GlobalAddressBook:PrimaryUrlPurpose</Label>
			<DataField>ElectronicAddressRoles</DataField>
			<DataSource>PrimaryContactURL</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactURLIsPrivate</Name>
			<Label>@GlobalAddressBook:PrivateURL</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>PrimaryContactURL</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFacebookRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>PrimaryContactFacebook</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFacebook</Name>
			<Label>@GlobalAddressBook:PrimaryFacebook</Label>
			<DataField>Locator</DataField>
			<DataSource>PrimaryContactFacebook</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFacebookDescription</Name>
			<Label>@GlobalAddressBook:PrimaryFacebookDescription</Label>
			<DataField>Description</DataField>
			<DataSource>PrimaryContactFacebook</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFacebookPurpose</Name>
			<Label>@GlobalAddressBook:PrimaryFacebookPurpose</Label>
			<DataField>ElectronicAddressRoles</DataField>
			<DataSource>PrimaryContactFacebook</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactFacebookIsPrivate</Name>
			<Label>@GlobalAddressBook:PrivateFacebook</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>PrimaryContactFacebook</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTwitterRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>PrimaryContactTwitter</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTwitter</Name>
			<Label>@GlobalAddressBook:PrimaryTwitter</Label>
			<DataField>Locator</DataField>
			<DataSource>PrimaryContactTwitter</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTwitterDescription</Name>
			<Label>@GlobalAddressBook:PrimaryTwitterDescription</Label>
			<DataField>Description</DataField>
			<DataSource>PrimaryContactTwitter</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTwitterPurpose</Name>
			<Label>@GlobalAddressBook:PrimaryTwitterDescription</Label>
			<DataField>ElectronicAddressRoles</DataField>
			<DataSource>PrimaryContactTwitter</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactTwitterIsPrivate</Name>
			<Label>@GlobalAddressBook:PrivateTwitter</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>PrimaryContactTwitter</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactLinkedInRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>RecId</DataField>
			<DataSource>PrimaryContactLinkedIn</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactLinkedIn</Name>
			<Label>@GlobalAddressBook:PrimaryLinkedIn</Label>
			<DataField>Locator</DataField>
			<DataSource>PrimaryContactLinkedIn</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactLinkedInDescription</Name>
			<Label>@GlobalAddressBook:PrimaryLinkedInDescription</Label>
			<DataField>Description</DataField>
			<DataSource>PrimaryContactLinkedIn</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactLinkedInPurpose</Name>
			<Label>@GlobalAddressBook:PrimaryLinkedInPurpose</Label>
			<DataField>ElectronicAddressRoles</DataField>
			<DataSource>PrimaryContactLinkedIn</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PrimaryContactLinkedInIsPrivate</Name>
			<Label>@GlobalAddressBook:PrivateLinkedIn</Label>
			<DataField>IsPrivate</DataField>
			<DataSource>PrimaryContactLinkedIn</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>NameSequence</Name>
			<AccessModifier>Internal</AccessModifier>
			<Mandatory>No</Mandatory>
			<DataField>NameSequence</DataField>
			<DataSource>DirPerson</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>SavePersonName</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>savePersonName</ComputedFieldMethod>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldString">
			<Name>ElectronicLocationId</Name>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>electronicLogisticsLocation</ComputedFieldMethod>
			<ExtendedDataType>LogisticsLocationId</ExtendedDataType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonNameValidTo</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>ValidTo</DataField>
			<DataSource>DirPersonName</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PersonNameValidFrom</Name>
			<AccessModifier>Internal</AccessModifier>
			<DataField>ValidFrom</DataField>
			<DataSource>DirPersonName</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>PartyRecordId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<DataField>RecId</DataField>
			<DataSource>DirPartyTable</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DirPartyLocationRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>RecId</DataField>
			<DataSource>PrimaryAddressLocation</DataSource>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewUnmappedFieldEnum">
			<Name>RemoveElectronicAddressesOnDelete</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>Yes</AllowEdit>
			<AllowEditOnCreate>Yes</AllowEditOnCreate>
			<ComputedFieldMethod>removeElectronicAddressesOnDelete</ComputedFieldMethod>
			<EnumType>NoYes</EnumType>
		</AxDataEntityViewField>
		<AxDataEntityViewField xmlns=""
			i:type="AxDataEntityViewMappedField">
			<Name>DirPersonNameRecId</Name>
			<AccessModifier>Internal</AccessModifier>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<Mandatory>No</Mandatory>
			<DataField>RecId</DataField>
			<DataSource>DirPersonName</DataSource>
		</AxDataEntityViewField>
	</Fields>
	<Keys>
		<AxDataEntityViewKey>
			<Name>EntityKey</Name>
			<Fields>
				<AxDataEntityViewKeyField>
					<DataField>PartyNumber</DataField>
				</AxDataEntityViewKeyField>
			</Fields>
		</AxDataEntityViewKey>
	</Keys>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DirPartyBaseEntityMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AddressLocationRoles</MapField>
					<MapFieldTo>AddressLocationRoles</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrimaryAddressLocation</MapField>
					<MapFieldTo>PrimaryAddressLocation</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Ranges />
	<Relations />
	<StateMachines />
	<ViewMetadata>
		<Name>Metadata</Name>
		<SourceCode>
			<Methods>
				<Method>
					<Name>classDeclaration</Name>
					<Source><![CDATA[
[Query]
public class Metadata extends QueryRun
{
}
]]></Source>
				</Method>
			</Methods>
		</SourceCode>
		<DataSources>
			<AxQuerySimpleRootDataSource>
				<Name>DirPartyTable</Name>
				<DynamicFields>Yes</DynamicFields>
				<Table>DirPartyTable</Table>
				<DataSources>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryContactEmail</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsElectronicAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>IsPrimary</Name>
								<Field>IsPrimary</Field>
								<Value>Yes</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryContactEmail</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryContactFax</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsElectronicAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryContactFax</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryContactPhone</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsElectronicAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryContactPhone</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryContactTelex</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsElectronicAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryContactTelex</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryContactURL</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsElectronicAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryContactURL</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryContactFacebook</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsElectronicAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges>
							<AxQuerySimpleDataSourceRange>
								<Name>IsPrimary</Name>
								<Field>IsPrimary</Field>
								<Value>Yes</Value>
							</AxQuerySimpleDataSourceRange>
						</Ranges>
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryContactFacebook</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryContactTwitter</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsElectronicAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryContactTwitter</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryContactLinkedIn</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>LogisticsElectronicAddress</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>PrimaryContactLinkedIn</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DirPersonAffix</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DirPerson</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DirNameAffixPersonalSuffix</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DirNameAffix</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>AffixType</Name>
										<Field>AffixType</Field>
										<Value>PersonalSuffix</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>PersonalSuffix</Field>
										<JoinDataSource>DirPersonAffix</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DirNameAffixPersonalTitle</Name>
								<DynamicFields>Yes</DynamicFields>
								<IsReadOnly>Yes</IsReadOnly>
								<Table>DirNameAffix</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges>
									<AxQuerySimpleDataSourceRange>
										<Name>AffixType</Name>
										<Field>AffixType</Field>
										<Value>PersonalPrefix</Value>
									</AxQuerySimpleDataSourceRange>
								</Ranges>
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>PersonalTitle</Field>
										<JoinDataSource>DirPersonAffix</JoinDataSource>
										<RelatedField>RecId</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>DirPersonForName</Name>
						<DynamicFields>Yes</DynamicFields>
						<IsReadOnly>Yes</IsReadOnly>
						<Table>DirPerson</Table>
						<DataSources>
							<AxQuerySimpleEmbeddedDataSource>
								<Name>DirPersonName</Name>
								<ApplyDateFilter>Yes</ApplyDateFilter>
								<DynamicFields>Yes</DynamicFields>
								<Table>DirPersonName</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
								<JoinMode>OuterJoin</JoinMode>
								<Relations>
									<AxQuerySimpleDataSourceRelation>
										<Name>QueryDataSourceRelation1</Name>
										<Field>RecId</Field>
										<JoinDataSource>DirPersonForName</JoinDataSource>
										<RelatedField>Person</RelatedField>
									</AxQuerySimpleDataSourceRelation>
								</Relations>
							</AxQuerySimpleEmbeddedDataSource>
						</DataSources>
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation1</Name>
								<Field>RecId</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>RecId</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
					<AxQuerySimpleEmbeddedDataSource>
						<Name>PrimaryAddressLocation</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>DirPartyLocation</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
						<JoinMode>OuterJoin</JoinMode>
						<Relations>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2</Name>
								<Field>PrimaryAddressLocation</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>Location</RelatedField>
							</AxQuerySimpleDataSourceRelation>
							<AxQuerySimpleDataSourceRelation>
								<Name>QueryDataSourceRelation2Copy1</Name>
								<Field>RecId</Field>
								<JoinDataSource>DirPartyTable</JoinDataSource>
								<RelatedField>Party</RelatedField>
							</AxQuerySimpleDataSourceRelation>
						</Relations>
					</AxQuerySimpleEmbeddedDataSource>
				</DataSources>
				<DerivedDataSources>
					<AxQuerySimpleDerivedDataSource>
						<Name>DirOrganizationBase</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>DirOrganizationBase</Table>
						<DataSources />
						<DerivedDataSources>
							<AxQuerySimpleDerivedDataSource>
								<Name>DirOrganization</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>DirOrganization</Table>
								<DataSources />
								<DerivedDataSources />
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
							<AxQuerySimpleDerivedDataSource>
								<Name>OMInternalOrganization</Name>
								<DynamicFields>Yes</DynamicFields>
								<Table>OMInternalOrganization</Table>
								<DataSources />
								<DerivedDataSources>
									<AxQuerySimpleDerivedDataSource>
										<Name>CompanyInfo</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>CompanyInfo</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>OMOperatingUnit</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>OMOperatingUnit</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
									<AxQuerySimpleDerivedDataSource>
										<Name>OMTeam</Name>
										<DynamicFields>Yes</DynamicFields>
										<Table>OMTeam</Table>
										<DataSources />
										<DerivedDataSources />
										<Fields />
										<Ranges />
									</AxQuerySimpleDerivedDataSource>
								</DerivedDataSources>
								<Fields />
								<Ranges />
							</AxQuerySimpleDerivedDataSource>
						</DerivedDataSources>
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
					<AxQuerySimpleDerivedDataSource>
						<Name>DirPerson</Name>
						<DynamicFields>Yes</DynamicFields>
						<Table>DirPerson</Table>
						<DataSources />
						<DerivedDataSources />
						<Fields />
						<Ranges />
					</AxQuerySimpleDerivedDataSource>
				</DerivedDataSources>
				<Fields />
				<Ranges />
				<GroupBy />
				<Having />
				<OrderBy />
			</AxQuerySimpleRootDataSource>
		</DataSources>
	</ViewMetadata>
</AxDataEntityView>