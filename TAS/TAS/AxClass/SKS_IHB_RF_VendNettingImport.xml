<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_RF_VendNettingImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Vend netting import class
/// </summary>
class SKS_IHB_RF_VendNettingImport
{
    boolean gErrorsExist;
    str mFileName;
    str mFileID;
    str mFieldDelimiter;

    Counter tralierCount = 0;
    int     linesCount =0;
    Amount  totalAmount = 0;

    SKS_IHB_RF_Structure ihbTrailerStructInstance;

    List recordList = new List(Types::Class);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get files
    /// </summary>
    /// <param name = "_filename">Path name </param>
    /// <param name = "_SKS_BF_BankIntType">Filehub local </param>
    /// <returns> returns list of files and data associated with it </returns>
    public List getFile(str _filename, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        CommaStreamIo   commaStreamIo;
        container       recordCon;

        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        
        //Setup filestream
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        commaStreamIo = CommaStreamIo::ConstructForRead(fileHub.StreamGet());

        commaStreamIo.inFieldDelimiter(';');
        commaStreamIo.inRecordDelimiter('\r\n');

        while(commaStreamIo.status() == IO_Status::Ok)
        {
            recordCon =  conNull();
            recordCon = commaStreamIo.read_IHB();

            this.processNode(recordCon);
        }

        if(commaStreamIo)
        {
            commaStreamIo.finalize();
            commaStreamIo = null;
        }

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process each file data based on the 'X' and 'T' tags
    /// </summary>
    /// <param name = "recordCon"> containers </param>
    private void processNode(container recordCon)
    {
        int i =1;
        SKS_IHB_RF_Structure ihbStructInstance = new SKS_IHB_RF_Structure();

        if (conPeek(recordCon, i) == 'X')
        {  
            ihbStructInstance.getText(conPeek(recordCon, 1));
            ihbStructInstance.getVendCompany(conPeek(recordCon, 2));
            ihbStructInstance.getVendAccount(conPeek(recordCon, 3));
            ihbStructInstance.getVendName(conPeek(recordCon, 4));
            ihbStructInstance.getInvoiceNum(conPeek(recordCon, 5));              
            ihbStructInstance.getCurrencyCode(conPeek(recordCon, 7));  
            ihbStructInstance.getDueDate(str2Date(conPeek(recordCon, 8), 321));             
            ihbStructInstance.parmAmountStr(any2Str(conPeek(recordCon, 6)));

            recordList.addEnd(ihbStructInstance);
            linesCount++;

            totalAmount += conPeek(recordCon, 5);
        }
        else if (conPeek(recordCon, i) == 'T')
        {
            tralierCount ++;

            if (tralierCount > 1)
            {
                throw error("@SKS:SKGIHBVendNettingIncorrectFormat");
            }
            ihbStructInstance.getText(conPeek(recordCon, 1));
            ihbStructInstance.getTransactionCount(conPeek(recordCon, 2));
            ihbStructInstance.parmControlSum(conPeek(recordCon, 3));
            recordList.addEnd(ihbStructInstance);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>