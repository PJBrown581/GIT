<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardCustTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(CreditCardCust))]
final class CreditCardCustTAS_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sKS_CC_FindDefaultCardForCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CreditCardCust</c> table record that is if identified
    /// as default card for the customer account provided.
    /// </summary>
    /// <param name="_custAccount">
    /// The customer account of the <b>CreditCardCust</b> record to find.
    /// </param>    
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardCust</c> table; otherwise, an empty record.
    /// </returns>
    public static CreditCardCust sKS_CC_FindDefaultCardForCust(
        CustAccount _custAccount,
        RefTableId _oneTimeCustRefTableId = 0,
        RefRecId _oneTimeCustRefRecId = 0,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardCust custCreditCard;

        custCreditCard.selectForUpdate(_forUpdate);

        if(_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custCreditCard.concurrencyModel(_concurrencyModel);
        }

        if (_custAccount)
        {
            if ((_oneTimeCustRefTableId == tableNum(SalesTable) || _oneTimeCustRefTableId == tableNum(LedgerJournalTable)) &&                
                CustTable::find(_custAccount).OneTimeCustomer &&
                SKS_PP_Setup::isCreditCardOneTimeCustLogicEnabled())
            {
                if (_oneTimeCustRefRecId)
                {
                    select custCreditCard
                        where custCreditCard.SKS_CC_OneTimeCustRefTableId == _oneTimeCustRefTableId
                           && custCreditCard.SKS_CC_OneTimeCustRefRecId == _oneTimeCustRefRecId
                           && custCreditCard.CustAccount == _custAccount
                           && custCreditCard.SKS_CC_DefaultCard == NoYes::Yes;
                }
            }
            else
            {
                select custCreditCard
                    where custCreditCard.CustAccount == _custAccount
                       && custCreditCard.SKS_CC_DefaultCard == NoYes::Yes;
            }
        }

        return custCreditCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_lookupCreditCard</Name>
				<Source><![CDATA[
    public static void sKS_CC_lookupCreditCard(
        FormStringControl _ctrl,
        CustAccount _custAccount,
        RefRecId _creditCardCust,
        Common _callerTableSKS)
    {
        if (_callerTableSKS && SKS_PP_Setup::isCreditCardOneTimeCustLogicEnabled() && 
            CustTable::find(_custAccount).OneTimeCustomer)
        {
            Args args = new Args(formStr(CreditCardLookup));
            Object formRun;

            args.caller(_ctrl);
            args.lookupValue(int642str(_creditCardCust));                    

            formRun = classfactory.formRunClass(args);
            formRun.custAccount(_custAccount);
            formRun.sKS_CC_OneTimeCustRefTableId(_callerTableSKS.TableId);
            formRun.sKS_CC_OneTimeCustRefRecId(_callerTableSKS.RecId);
            formRun.init();

            _ctrl.performFormLookup(formRun);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_IsValidCreditCardForOneTimeCust</Name>
				<Source><![CDATA[
    public static boolean sKS_CC_IsValidCreditCardForOneTimeCust(
        Common _callerTableSKS,
        CustAccount _custAccount,
        RefRecId _creditCardCust)
    {
        boolean isValid = true;
        CreditCardCust creditCardCust;

        if (_creditCardCust && _callerTableSKS && _custAccount)
        {
            select creditCardCust
                where creditCardCust.RecId == _creditCardCust;

            if (creditCardCust)
            {
                if (creditCardCust.SKS_CC_OneTimeCustRefTableId != _callerTableSKS.TableId)
                {
                    return false;
                }

                if (creditCardCust.SKS_CC_OneTimeCustRefRecId != _callerTableSKS.RecId)
                {
                    return false;
                }

                if (creditCardCust.CustAccount != _custAccount)
                {
                    return false;
                }
            }
            else
            {
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeleteCC</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will check if the record can be deleted
    /// </summary>
    /// <Issue21747>
    public void checkDeleteCC()
    {
        boolean canDelete = true;

        if(this.CreditCardProcessors)
        {
            canDelete = !SKS_CC_PayFabricWalletHandler::isPayFabricProcessor(this.CreditCardProcessors);
        }
        else if(this.RecId)
        {
            canDelete = !SKS_CC_PayFabricWalletHandler::isPayFabricActiveProcessor();
        }

        if(!canDelete)
        {
            throw error("@SKS:NotPossibleDeleteCCARegistredByPP");
        }
    }
    //<Issue21747>

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>