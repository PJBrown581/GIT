<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadFileNAI</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BR_ReadFileNAI extends SKS_BR_ReadFileStructured
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    boolean openFile()
    {
        gReadParseFile = new SKS_BR_ReadParseNAi (fileName, 'R', gBRPreReadScript, gBRPreReadScriptParams, gBRPostReadScript, gBRPostReadScriptParams);
        if (!gReadParseFile || gReadParseFile.status() != IO_Status::Ok )
        {
            //file could not be opened
            this.handleError(bankHeaderRecId, (strfmt("@SYS19312",fileName)), 0);
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    void readFile()
    {
        boolean AccountIdentifierFound = false;
        boolean doNotImport = false;
        boolean FileHeaderFound = false;
        boolean GroupHeaderFound = false;
        boolean ignoreThisTransaction = false;
        boolean nextRecordContinuation = false;

        Container line;

        Date AsOfDate;
        date holdTransactionDate;
        date locStatementDate;
        date importedAcctStatementDate;

        int FieldCount;
        int linecnt = 0;
        int PrevFieldCount;
        int RecordCode;
        int skipLoc;
        int TransactionType;

        str companyContext = curExt();
        str senderIdentification;
        str value;

        BankAccountTable locBankAccountTable;
        CompanyBankAccountId bankAccountId;
        CurrencyCode currency;
        SKS_BR_TranTypeProcessing tranTypeProcessing;
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_PP_Bank sKS_PP_Bank;// TFS 7285

        BankAccountStatementNum locStatementNum;
        BankAccountStatementNum importedAcctStatementNum;
        ;

        BankRecordReady = false;
        ImportCount = 0;
        TransactionFound = false;


        if (!this.openFile())
        {
            return;
        }

        ttsbegin;
        this.initSKS_BR_BankTran();
        while(gReadParseFile.status() == IO_status::Ok)
        {
            line = gReadParseFile.read();
            linecnt = gReadParseFile.getStartingLineOfCurrentRecord();
            banktran.LineNumInFile = linecnt;

            FieldCount = conlen(line); // Get the number of fields.

            RecordCode = conpeek(line, 1); // Get the record code

            if(nextRecordContinuation && RecordCode != #RecordCodeContinuation)
            {
                BankRecordReady = true;
                this.insertBankTran(locBankAccountTable,
                                    doNotImport,
                                    companyContext
                                    );
                nextRecordContinuation = false;
            }
            // TFS 7285 -->
            if(RecordCode == #RecordCodeAccountTrailer)
            {
                noBankTrans = false;

                if (sKS_PP_Bank.BRCreateBankStatementsIfNoTrans == NoYes::Yes && !TransactionFound)
                {
                    BankRecordReady = true;
                    noBankTrans = true;
                }
            }
            // TFS 7285 <--
            if ( RecordCode == #RecordCodeFileHeader)
            {
                if (FileHeaderFound == true)
                {
                    // only 1 allowed
                    ttsabort;
                    ImportCount = 0;
                    this.handleError(bankHeaderRecId, "@SKS330", linecnt);
                }
                FileHeaderFound = true;

                // Get sender identification
                senderIdentification = global::strLRTrim(conpeek(line,2));

                // Set File Date here.
                value = conpeek(line,4); // Get file date
                holdTransactionDate = str2date(value,321); // Default bank date.
            }
            else if ( FileHeaderFound == true)
            {
                switch(RecordCode)
                {
                    case #RecordCodeGroupHeader:
                        if (FileHeaderFound == false)
                        {
                            // missing: 01
                            this.FormatError( #RecordCodeFileHeader, linecnt);
                            return;
                        }
                        if (GroupHeaderFound == true)
                        {
                            // missing: 98
                            this.FormatError( #RecordCodeGroupTrailer, linecnt);
                            return;
                        }
                        GroupHeaderFound = true;
                        value = conpeek(line,5); // Get file date
                        holdTransactionDate = str2date(value,321); // Default bank date.
                        locStatementDate = holdTransactionDate;
                        AsOfDate = holdTransactionDate; // Used for Bank Balance
                        //Set the StatementNum here.
                        value = conPeek(line, 6);

                        locStatementNum = date2str(holdTransactionDate, 321, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None) + value;



                        break;
                    case #RecordCodeAccountIdentifier:
                        doNotImport = false;
                        TransactionFound = false;
                        if (GroupHeaderFound == false)
                        {
                            // missing: 02
                            this.FormatError( #RecordCodeGroupHeader, linecnt);
                            return;
                        }
                        if (AccountIdentifierFound == true)
                        {
                            // missing: 49
                            this.FormatError( #RecordCodeAccountTrailer, linecnt);
                            return;
                        }

                        AccountIdentifierFound = true;


                        locBankAccountTable = SKS_EB_Bank::getBankAccount( Global::strLRTrim( conpeek(line,2) ) );
                        sKS_PP_Bank = SKS_PP_Bank::find(locBankAccountTable.AccountID);// TFS 7285
                        if(conpeek(line,3) != '')
                        {
                            currency = conpeek(line,3);
                        }
                        gBankAccountStatement = null;
                        gBankAccountStatement.CurrencyCode = currency;
                        gBankAccountStatement.AccountStatementNum = locStatementNum;
                        gBankAccountStatement.AccountStatementDate = locStatementDate;
                        if (importedAcctStatementNum == '')
                        {
                            importedAcctStatementNum = locStatementNum;
                            importedAcctStatementDate = locStatementDate;
                        }
                        bankAccountId = locBankAccountTable.AccountID;
                        companyContext = locBankAccountTable.company();
                        gBankAccountStatement.AccountId = locBankAccountTable.AccountID;
                        if(currency == '')
                        {
                            currency = locBankAccountTable.CurrencyCode;
                            gBankAccountStatement.CurrencyCode = currency;
                        }

                        changeCompany(companyContext)
                        {
                            // Make sure this Bank Account is setup for eBankRec
                            if(!this.validateAccountId(bankAccountId))
                            {
                                doNotImport = true;
                            }
                            else
                            {
                                // Load format for this company
                                if(sks_br_fileformat.company() != locBankAccountTable.company())
                                {
                                    locSKS_PP_Bank = null;
                                    select BankAccountId, BRFormatID from locSKS_PP_Bank where locSKS_PP_Bank.BankAccountId == locBankAccountTable.AccountID;
                                    this.setFormatId(locSKS_PP_Bank.BRFormatID);
                                }

                                // Set Bank Balance
                                if(!this.setBankBalance(AsOfDate, bankAccountId, conDel(line,1,3), currency))
                                    return;
                            }
                        }
                        break;
                    case #RecordCodeTransactionDetail:
                        if (doNotImport)
                        {
                            continue;
                        }

                        ignoreThisTransaction = False;
                        if (AccountIdentifierFound == false)
                        {
                            // missing: 03
                            this.FormatError( #RecordCodeAccountIdentifier, linecnt);
                            return;
                        }
                        bankTran.AccountId = bankAccountId;
                        TransactionType = conpeek(line,2);
                        bankTran.FileTranType = int2str(TransactionType);
                        if(sks_pp_Setup.BREdition == SKS_BR_Edition::Advanced)
                        {
                            changeCompany(companyContext)
                            {
                                tranTypeProcessing = this.processTranType(bankTran.AccountId);
                                if(tranTypeProcessing.getIgnoreTranType())
                                {
                                    ignoreThisTransaction = true;
                                }
                            }

                            if(tranTypeProcessing.getErrorText() != '')
                            {
                                ttsabort;
                                this.handleError(bankHeaderRecId, (strfmt("@SKS528", bankTran.FileTranType)), linecnt);
                                ImportCount = 0;
                                return;
                            }

                            bankTran.BankTranType = tranTypeProcessing.getBankTranType();

                            SKS_BR_GLMappingRuleGroup mappingRuleGroup;

                            select firstonly
                                GLMatchOrCreate
                            from mappingRuleGroup
                            where mappingRuleGroup.RuleGroupId == tranTypeProcessing.getGLMappingRuleGroupId()
                                && mappingRuleGroup.CCR_IsCCReconciliation == NoYes::No;    /// SKS_FDD_13903 - To make sure that its picking only non-CCR format

                            if (tranTypeProcessing.getMatchingRuleGroupId() || tranTypeProcessing.getGLMappingRuleGroupId())
                            {
                                bankTran.GLMappingRuleGroupId = tranTypeProcessing.getGLMappingRuleGroupId();
                                bankTran.MatchingRuleGroupId = tranTypeProcessing.getMatchingRuleGroupId();
                            }
                            else // Bug 7219
                            {
                                bankTran.GLMappingRuleGroupId = '';
                                bankTran.MatchingRuleGroupId = '';
                                bankTran.GLMatchOrCreate = SKS_BR_GLMatchOrCreate::GLMatch;
                            }
                            bankTran.DefaultDimension = tranTypeProcessing.getDimension();
                            bankTran.ImportedStatementNum = importedAcctStatementNum;
                            bankTran.ImportedStatementDate = importedAcctStatementDate;
                        }

                        bankTran.TranDate = holdTransactionDate;
                        bankTran.ValueDate = bankTran.TranDate;
                        if ((TransactionType > 100 && TransactionType < 700 && TransactionType != 400) ||
                             (TransactionType >= 920 && TransactionType <= 999))
                        {
                            TransactionFound = true;

                            value = conpeek(line,3); // Get transaction amount

                            if (strScan(value, '$', 1, 1))
                            {
                                value = strDel(value, 1, 1);
                            }
                            bankTran.TranAmount = SKS_EB_Currency::formatStringToCurrency(value, currency);
                            if ((TransactionType > 400 && TransactionType < 700) ||
                                (TransactionType >= 960 && TransactionType <= 999))
                                bankTran.TranAmount = bankTran.TranAmount * -1;

                            value = substr(conpeek(line,4),1,1); // Get Funds Type for next record positions.
                            if ( value == 'S')
                                skipLoc = 3;
                            else if ( value == 'V')
                                skipLoc = 2;
                            else if ( value == 'D')
                            {
                                skipLoc = conpeek(line,5);
                                skipLoc = skipLoc * 2; // skipping a value pair.
                                skipLoc += 1; // and skip the original count entry from 5.
                            }
                            else
                                skipLoc = 0;

                            PrevFieldCount = FieldCount; // Needed if continuation occurs.
                            if ( FieldCount >= skipLoc + 6)
                            {
                                value = conpeek(line,skipLoc + 5);
                                value = this.stripDelimiters(value); // Get Reference number (Bank)

                                if(substr(value,strLen(value),1) == '/') // Check for forward slash and remove it
                                    value = substr(value,1,strlen(value)-1);
                                bankTran.BankNum = this.parseRefernceNumber(value);

                                if ( FieldCount >= skipLoc + 6)
                                {
                                    value = conpeek(line,skipLoc + 6);
                                    // If the first character is a slash, the description is on the 88 continuation record.
                                    if(substr(value,1,1) == '/')
                                    {
                                        nextRecordContinuation = true;
                                        break;
                                    }
                                    // Populate Original note
                                    bankTran.TranDescription = this.GetTransDescription(line,6,FieldCount,skipLoc);
                                    // Populate User note also here
                                    bankTran.TranDescriptionUser = bankTran.TranDescription;
                                    BankRecordReady = true;
                                }
                            }
                        }

                        changeCompany(companyContext)
                        {
                            SKS_BR_ReadFile::setDefaultMatchGroup(bankTran);

                            if(!this.parseValue())
                            {
                                return;
                            }
                        }

                        // Update records here.
                        break;
                    case #RecordCodeAccountTrailer:
                        if (AccountIdentifierFound == false)
                        {
                            // missing: 03
                            this.FormatError( #RecordCodeAccountIdentifier, linecnt);
                            return;
                        }
                        AccountIdentifierFound = false;
                        break;
                    case #RecordCodeContinuation:
                        // 88 Records should never be passed in from the SKS_BR_ReadParseNAI class
                        break;
                    case #RecordCodeGroupTrailer:
                        if (AccountIdentifierFound == true)
                        {
                            // missing: 49
                            this.FormatError( #RecordCodeAccountTrailer, linecnt);
                            return;
                        }
                        if (GroupHeaderFound == false)
                        {
                            // missing: 02
                            this.FormatError( #RecordCodeGroupHeader, linecnt);
                            return;
                        }
                        GroupHeaderFound = false;
                        break;
                    case #RecordCodeFileTrailer:
                        if (GroupHeaderFound == true)
                        {
                            // missing: 98
                            this.FormatError( #RecordCodeGroupTrailer, linecnt);
                            return;
                        }
                        break;
                    default:
                        break;
                }

                // Insert record
                this.insertBankTran(locBankAccountTable,
                                        (doNotImport || ignoreThisTransaction),
                                        companyContext
                                        );

            }
            if (FileHeaderFound == false)
            {
                // missing: 01
                this.FormatError( #RecordCodeFileHeader, linecnt);
                return;
            }

        }
        this.closeFile();

        if(!this.readFileClosePreCommit())
            return;

        ttscommit;

        this.readFileClosePostCommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankBalance</Name>
				<Source><![CDATA[
    boolean setBankBalance(Date asOfDate,
                            CompanyBankAccountId bankAcct,
                            Container line,
                            CurrencyCode currency)
    {
        int i;
        str value;
        AmountCur amount;
        boolean typeCodeFound;
        ;
        if(sks_pp_Setup.BREdition == SKS_BR_Edition::Advanced)
        {
            if(sks_br_fileformat.UpdateEndBalance)
            {
                i = 1;
                while( i<=conLen(line))
                {
                    value = conPeek(line, i);
                    i++; //we have the Type Code in var value, so move to the next field
                    // See if this matches the user defined type code
                    // If it does, the next value will be the amount
                    if(value == sks_br_fileformat.EndBalanceTypeCode)
                    {
                        amount = SKS_EB_Currency::formatStringToCurrency(conPeek(line, i), currency);
                        gBankAccountStatement.EndingBalance = amount;
                        this.createBankBalance(asOfDate, bankAcct, amount);
                        typeCodeFound = true;
                        break;
                    }
                    i++;//Move past the amount field to the next TypeCode
                }
                if(!typeCodeFound)
                {
                    ttsabort;
                    ImportCount = 0;
                    this.handleError(bankHeaderRecId, strFmt("@SKS529",sks_br_fileformat.EndBalanceTypeCode), 0);
                    return false;
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>