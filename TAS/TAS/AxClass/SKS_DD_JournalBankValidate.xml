<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_JournalBankValidate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_JournalBankValidate
{
    boolean             hasMappingData; //SKS_Bug_11831
    SKS_EFT_FileDetail msks_EFT_FileDetail;
    SKS_EFT_FileDetail_CustAddress msks_EFT_FileDetail_CustAddress;
    SKS_EFT_FileDetail_PaymentLine msks_EFT_FileDetail_PaymentLine;
    SKS_EFT_FileDetail_BankAccount msks_EFT_FileDetail_BankAccount;
    SKS_EFT_FileDetail_Addresses msks_EFT_FileDetail_CustBankAddress, msks_EFT_FileDetail_BankAddress;
    SKS_EFT_FileDetail_Mandate msks_EFT_FileDetail_Mandate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressCountryValidation</Name>
				<Source><![CDATA[
    public boolean addressCountryValidation(SKS_EFT_CountryContext      _countryContext,
                                            SKS_EFT_FileFormatPaymSpec  _sks_EFT_FileFormatPaymSpec,
                                            LedgerJournalTrans          _ledgerJournalTrans,
                                            container                   _isoCode,
                                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation)
    {
        SKS_EFT_Format                  sks_EFT_Format = new SKS_EFT_Format();
        int i;
        boolean countryMatching;
        // SKS_FDD_10590 -->
        SKS_EFT_FileDetail  sks_EFT_FileDetail;
        SKS_EFT_FileDetail_CustAddress sks_EFT_FileDetail_CustAddress;
        // SKS_FDD_10590 <--

        if (_sks_EFT_BankFormatValidation)
        {
            select firstonly sks_EFT_FileDetail where sks_EFT_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId && sks_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::EFTValidate;
            sks_EFT_FileDetail_CustAddress = SKS_EFT_FileDetail_CustAddress::find(sks_EFT_FileDetail.RecId);


            for (i=1; i <= conlen(_isoCode); i++)
            {
                if (conpeek(_ISOCode, i) == sks_EFT_Format.getLogisticsAddressCountryISO(sks_EFT_FileDetail_CustAddress.CustCountryRegionId))
                {
                    countryMatching = true;//we have to validate all country region, so keeping this boolean only for matching country region.
                    continue;
                }
                else
                {
                    continue;// if we have multiple country region, we have to check all. So giving continue here to allow validate for next country region.

                }
            }
            if(countryMatching)// if any one country matching then return true.
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankCountryValidation</Name>
				<Source><![CDATA[
    public boolean bankCountryValidation(SKS_EFT_CountryContext     _countryContext,
                                        SKS_EFT_FileFormatPaymSpec  _sks_EFT_FileFormatPaymSpec,
                                        LedgerJournalTrans          _ledgerJournalTrans,
                                        container                   _isoCode,
                                        SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation)
    {
        SKS_EFT_Format                  sks_EFT_Format = new SKS_EFT_Format();
        int i;
        boolean countryMatching;
        // SKS_FDD_10590 -->
        SKS_EFT_FileDetail           sks_EFT_FileDetail;
        SKS_EFT_FileDetail_Addresses sks_EFT_FileDetail_BankAddress;
        // SKS_FDD_10590 <--

        if (_sks_EFT_BankFormatValidation)
        {

            select firstonly RecId from sks_EFT_FileDetail where sks_EFT_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId &&
                    sks_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::EFTValidate
                join CountryRegionId from sks_EFT_FileDetail_BankAddress where sks_EFT_FileDetail_BankAddress.RefRecId == sks_EFT_FileDetail.RecId &&
                    sks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

            for (i=1; i <= conlen(_isoCode); i++)
            {
                if (conpeek(_ISOCode, i) == sks_EFT_Format.getLogisticsAddressCountryISO(sks_EFT_FileDetail_BankAddress.CountryRegionId))
                {
                    countryMatching = true;//we have to validate all country region, so keeping this boolean only for matching country region.
                    continue;
                }
                else
                {
                    continue;// if we have multiple country region, we have to check all. So giving continue here to allow validate for next country region.
                }
            }
            if(countryMatching)// if any one country matching then return true.
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankLogisticsPostalAddressValidation_DD</Name>
				<Source><![CDATA[
    public boolean bankLogisticsPostalAddressValidation_DD(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str         tablename;
        str         field;
        int         fieldId;
        TableId     tableId;
        Str         tableNameLoc;
        int         delimiterPosition;
        boolean     ret,retValid,retLenghtValid,retDataValid;
        anytype     mapFieldValue;//SKS_FDD-10590

        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            //SKS_FDD_10590 -->
            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                //SKS_FDD_10590 <--
            }

        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankValidation</Name>
				<Source><![CDATA[
    public boolean bankValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str           tablename;
        str field;
        int fieldId;
        TableId tableId;
        Str tableNameLoc;
        int delimiterPosition;
        boolean     ret,retValid,retLenghtValid,retDataValid;
        anytype     mapfieldValue;//SKS_FDD-10590

        if (_sks_EFT_BankFormatValidation)
        {

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
            }
        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionValidation</Name>
				<Source><![CDATA[
    public boolean countryRegionValidation( LedgerJournalTrans          _ledgerJournalTrans,
                                            CustPaymModeTable           _custPaymModeTable,
                                            SKS_EFT_FileFormatPaymSpec  _sks_EFT_FileFormatPaymSpec,
                                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation)
    {
        List list = new List(Types::String);
        ListIterator    iterator;
        container       isoCode;
        boolean ret;

        if (_sks_EFT_BankFormatValidation.ISOCountrySpec != '')
        {
            LogisticsAddressCountryRegion   lLogisticsAddressCountryRegion;

            if(_sks_EFT_BankFormatValidation.ISOCountrySpec == 'IBAN-LIST')
            {
                while select lLogisticsAddressCountryRegion where lLogisticsAddressCountryRegion.SKS_IBANReqd == NoYes::Yes
                {
                    isoCode += lLogisticsAddressCountryRegion.ISOcode;
                }
            }
            else
            {
                list = strSplit(_sks_EFT_BankFormatValidation.ISOCountrySpec,',');
                iterator = new ListIterator(list);

                while(iterator.more())
                {
                    isoCode += iterator.value();
                    iterator.next();
                }
            }

            switch (_sks_EFT_BankFormatValidation.CountryContext)
            {
                case SKS_EFT_CountryContext::BankAccountTable_Customer:
                    ret = this.bankCountryValidation(_sks_EFT_BankFormatValidation.CountryContext,_sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, isoCode,_sks_EFT_BankFormatValidation);
                    break;

                case SKS_EFT_CountryContext::CustBankAccount_Customer:
                    ret = this.custBankAccountCountryValidation(_sks_EFT_BankFormatValidation.CountryContext,_sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, isoCode,_sks_EFT_BankFormatValidation);
                    break;

                case SKS_EFT_CountryContext::LogisticsPostalAddress_CountryCustomer:
                    ret = this.addressCountryValidation(_sks_EFT_BankFormatValidation.CountryContext,_sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, isoCode,_sks_EFT_BankFormatValidation);
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBankAccountCountryValidation</Name>
				<Source><![CDATA[
    public boolean custBankAccountCountryValidation(SKS_EFT_CountryContext      _countryContext,
                                                    SKS_EFT_FileFormatPaymSpec  _sks_EFT_FileFormatPaymSpec,
                                                    LedgerJournalTrans          _ledgerJournalTrans,
                                                    container                   _isoCode,
                                                    SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation)
    {
        SKS_EFT_Format                  sks_EFT_Format = new SKS_EFT_Format();
        int                             i;
        boolean countryMatching;
        // SKS_FDD_10590 -->
        SKS_EFT_FileDetail  sks_EFT_FileDetail;
        SKS_EFT_FileDetail_Addresses sks_EFT_FileDetail_CustBankAddress;
        // SKS_FDD_10590 <--
        if (_sks_EFT_BankFormatValidation)
        {

            select firstonly Recid from sks_EFT_FileDetail where sks_EFT_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId &&
                sks_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::EFTValidate
            join CountryRegionId from sks_EFT_FileDetail_CustBankAddress where sks_EFT_FileDetail_CustBankAddress.RefRecId == sks_EFT_FileDetail.RecId &&
                sks_EFT_FileDetail_CustBankAddress.AddressType == SKS_EFT_AddressType::CustBankAddress;

            for (i=1; i <= conlen(_isoCode); i++)
            {
                if (conpeek(_ISOCode, i) == sks_EFT_Format.getLogisticsAddressCountryISO(sks_EFT_FileDetail_CustBankAddress.CountryRegionId))
                {
                    countryMatching = true;//we have to validate all country region, so keeping this boolean only for matching country region.
                    continue;
                }
                else
                {
                    continue;// if we have multiple country region, we have to check all. So giving continue here to allow validate for next country region.

                }
            }
            if(countryMatching)// if any one country matching then return true.
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custBankAccountValidation</Name>
				<Source><![CDATA[
    public boolean custBankAccountValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str                 tablename;
        str                 field;
        int                 fieldId;
        TableId             tableId;
        Str                 tableNameLoc;
        int                 delimiterPosition;
        boolean             ret,retValid,retLenghtValid,retDataValid;
        anytype             mapfieldValue;//SKS_FDD-10590

        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
            }

        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransValidation</Name>
				<Source><![CDATA[
    public boolean custTransValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str         tablename;
        str         field;
        int         fieldId;
        TableId     tableId;
        Str         tableNameLoc;
        int         delimiterPosition;
        boolean     ret,retValid,retLenghtValid,retDataValid;
        anytype     mapFieldValue; // SKS_FDD_10590
        SKS_EFT_FileDetail  sks_eft_fileDetailInvoice; //SKS_Bug_11967

        if(_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            //SKS_Bug_11967 -->
            // for the PaymId validations iterate the file detail for invoice record
            if(_sks_EFT_BankFormatValidation.SourceField == 'PaymId' && (_sks_EFT_BankFormatValidation.Required == SKS_EFT_BankFormatRequired::Yes || _sks_EFT_BankFormatValidation.Required == SKS_EFT_BankFormatRequired::Conditional ||
                  _sks_EFT_BankFormatValidation.Required == SKS_EFT_BankFormatRequired::ConditionalWarning ||
                  _sks_EFT_BankFormatValidation.LengthValidation == SKS_EFT_LengthValidation::Warning ||
                  _sks_EFT_BankFormatValidation.LengthValidation ==SKS_EFT_LengthValidation::Yes))
            {
                while select sks_eft_fileDetailInvoice where sks_eft_fileDetailInvoice.paymentlineRecId == _ledgerJournalTrans.RecId
                        && sks_eft_fileDetailInvoice.RecordSection == SKS_EFT_RecordSection::EFTValidate
                        && sks_eft_fileDetailInvoice.RecordSummary == SKS_EFT_RecordSummary::NonSummary
                        && sks_eft_fileDetailInvoice.RecordType == SKS_EFT_RecordType::FieldValidations
                {
                    //SKS_FDD_10590 -->
                    mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation,
                        _enableLog, true, sks_eft_fileDetailInvoice);
                    if(hasMappingData)// SKS_Bug_11831
                    {
                        retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                        // general validations for error and warning
                        retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                        this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                        // length validations for error and warning
                        retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                        this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                        //SKS_FDD_10590 <--
                    }
                }
            }
            else
            {
                //SKS_FDD_10590 -->
                mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
                if(hasMappingData)// SKS_Bug_11831
                {
                    // general validations for error and warning
                    retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                    this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                    // length validations for error and warning
                    retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                    this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                    //SKS_FDD_10590 <--
                }
            }
        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntityARAddressValidation</Name>
				<Source><![CDATA[
    //TFS: 7415
    public boolean legalEntityARAddressValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str                     tablename;
        str                     field;
        int                     fieldId;
        TableId                 tableId;
        Str                     tableNameLoc;
        int                     delimiterPosition;
        boolean                 ret,retValid,retLenghtValid, retDataValid;
        anytype                 mapFieldValue; //SKS_FDD_10590

        if(_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }


            //SKS_FDD_10590 -->
            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                //SKS_FDD_10590 <--
            }

        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>legalEntityARLogisticLocationValidation</Name>
				<Source><![CDATA[
    //TFS: 7518
    public boolean legalEntityARLogisticLocationValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str                     tablename;
        str                     field;
        int                     fieldId;
        TableId                 tableId;
        Str                     tableNameLoc;
        int                     delimiterPosition;
        boolean                 ret,retValid,retLenghtValid,retDataValid;
        anytype                 mapFieldValue; // SKS_FDD_10590

        if(_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            //SKS_FDD_10590 -->
            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                //SKS_FDD_10590 <--
            }

        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custValidation</Name>
				<Source><![CDATA[
    public boolean custValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str         tablename;
        str         field;
        int         fieldId;
        TableId     tableId;
        Str         tableNameLoc;
        int         delimiterPosition;
        boolean     ret,retValid,retLenghtValid,retDataValid;
        anytype     mapfieldValue; // SKS_FDD_10590

        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            //SKS_FDD_10590 -->
            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                //SKS_FDD_10590 <--
            }

        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dirParty_DDValidation</Name>
				<Source><![CDATA[
    public boolean dirParty_DDValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str         tablename;
        str         field;
        int         fieldId;
        TableId     tableId;
        Str         tableNameLoc;
        int         delimiterPosition;
        boolean     ret,retValid,retLenghtValid,retDataValid;
        anytype     mapFieldValue; // SKS_FDD_10590

        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            //SKS_FDD_10590 -->
            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                //SKS_FDD_10590 <--
            }

        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransValidation</Name>
				<Source><![CDATA[
    public boolean ledgerJournalTransValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str             tablename;
        str             field;
        int             fieldId;
        TableId         tableId;
        Str             tableNameLoc;
        int             delimiterPosition;
        boolean         ret,retValid,retLenghtValid, retDataValid;
        anytype         mapFieldValue;// SKS_FDD_10590

        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            //SKS_FDD_10590 -->
            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                //SKS_FDD_10590 <--
            }

        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsPostalAddressValidation_DD</Name>
				<Source><![CDATA[
    public boolean logisticsPostalAddressValidation_DD(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str         tablename;
        str         field;
        int         fieldId;
        TableId     tableId;
        Str         tableNameLoc;
        int         delimiterPosition;
        boolean     ret,retValid,retLenghtValid,retDataValid;
        anytype     mapfieldValue;//SKS_FDD-10590
        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            // SKS_FDD_10590 -->
            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                // SKS_FDD_10590 <--
            }
        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymJournalValidate</Name>
				<Source><![CDATA[
    public void paymJournalValidate(
    CustPaymModeTable _custPaymModeTable,
    LedgerJournalTrans _ledgerJournalTrans,
    boolean _enableLog,
    boolean _valid)
    {
        SKS_EFT_FileFormatPaymSpec              sks_EFT_FileFormatPaymSpec;
        SKS_EFT_BankFormatValidation            sks_EFT_BankFormatValidation;
        SKS_EFT_FileFormat                      sks_EFT_FileFormat;
        boolean                                 countryValidation;
        boolean                                 format, sourceValueFound;
        container                               sourceContainer;
        str                                     sourceValue;
        int                                     i;
        boolean                                 isCustValid = true,isBankValid = true,isCustBankValid= true,isCusTransValid= true,isBankLogisticPosAddressValid= true;
        boolean                                 isLedgerJourValid= true,isLogisticPosAddressValid= true,isDirPartyValid= true,isARLegalEntityValid = true,isARLegalEntityLogisticsLocValid = true;  //SKS_Bug:7415;
        boolean                                 isCompanyInfoValid = true, isAR_EFT_BankValid = true, isBankAddressValid = true;//SKS_FDD_10590
        SKS_EFT_Processing                      sks_eft_processingAR;
        str                                     formatName;
        str                                     formatVersion;
        str                                     retMsg;
        SysDictClass                            obj;
        Object                                  classInstance;

        select firstonly FormatId,Selected,UseWithCustomers,FormatGroup,FormatGroupVersion,FormatGroupCodeSource from sks_EFT_FileFormat
        where sks_EFT_FileFormat.FormatId == _custPaymModeTable.SKS_EFT_FormatId &&
                sks_EFT_FileFormat.Selected == NoYes::Yes  &&
                sks_EFT_FileFormat.UseWithCustomers == NoYes::Yes
        join sks_EFT_FileFormatPaymSpec
            where sks_EFT_FileFormatPaymSpec.FormatId == sks_EFT_FileFormat.FormatId &&
                    sks_EFT_FileFormatPaymSpec.PaymSpec == _ledgerJournalTrans.PaymSpec;

        if (sks_EFT_FileFormat && sks_EFT_FileFormat.FormatGroupCodeSource == SKS_EB_CodeSource::D365)
        {
            formatName = strReplace('SKS_EFT_Format_' + sks_EFT_FileFormat.FormatGroup + '_AR', '-', '_');
            retMsg = SKS_EFT_JournalValidate::ValidateClass(formatName, sks_EFT_FileFormat.FormatId);

            if(retMsg != '')
            {
                formatName = strReplace('SKS_EFT_Format_' + sks_EFT_FileFormat.FormatGroup, '-', '_');
                retMsg = SKS_EFT_JournalValidate::ValidateClass(formatName, sks_EFT_FileFormat.FormatId);
            }
        
            if (retMsg)
            {
                SKS_EFT_JournalValidate::warningLog(retMsg,_ledgerJournalTrans,_enableLog,_ledgerJournalTrans.amount());
            }
            else
            {
                obj = new SysDictClass(className2Id(formatName));
                classInstance = obj.makeObject(); // Instantiate class
            
                try
                {
                    formatVersion = obj.callObject('getFormatVersion', classInstance);
                }
                catch(Exception::Error)
                {
                    formatVersion = '';
                }

                if (sks_EFT_FileFormat.FormatGroupVersion != formatVersion)
                {
                    retMsg = strFmt("@SKS:SKGFmtVerValidation",formatName,formatVersion,sks_EFT_FileFormat.FormatGroupVersion);
                    SKS_EFT_JournalValidate::warningLog(retMsg,_ledgerJournalTrans,_enableLog,_ledgerJournalTrans.amount(),true);
                }
            }
        }

        select firstonly sks_EFT_BankFormatValidation
        where sks_EFT_BankFormatValidation.FormatId == sks_EFT_FileFormatPaymSpec.FormatId &&
                sks_EFT_BankFormatValidation.PaymSpec == sks_EFT_FileFormatPaymSpec.PaymSpec &&
                sks_EFT_BankFormatValidation.Module == SKS_EFT_Module::AR &&
                (sks_EFT_BankFormatValidation.Required != SKS_EFT_BankFormatRequired::No ||
                sks_EFT_BankFormatValidation.LengthValidation != SKS_EFT_LengthValidation::No ||
                SKS_EFT_BankFormatValidation.DataRuleId != '');

        // Only build file detail and run validation if validation rules exist for this payment spec
        if(sks_EFT_BankFormatValidation)
        {
            try
            {
                sks_eft_processingAR = new SKS_EFT_Processing();
                // SKS_FDD_10590 -->
                // Insert PaymData into file detail tables for Field validations
                //SKS_EFT_InsertDeletePaymDataIntoFileDetail::insertARDataIntoFileDetail(_ledgerJournalTrans);
                sks_eft_processingAR.fileDetailValidate(_ledgerJournalTrans, SKS_EFT_Module::ARValidation);//SKS_Bug_11967
                // SKS_FDD_10590 <--

                while select sks_EFT_BankFormatValidation
                    where sks_EFT_BankFormatValidation.FormatId == sks_EFT_FileFormatPaymSpec.FormatId &&
                    sks_EFT_BankFormatValidation.PaymSpec == sks_EFT_FileFormatPaymSpec.PaymSpec &&
                    sks_EFT_BankFormatValidation.Module == SKS_EFT_Module::AR &&
                    (sks_EFT_BankFormatValidation.Required != SKS_EFT_BankFormatRequired::No ||
                    sks_EFT_BankFormatValidation.LengthValidation != SKS_EFT_LengthValidation::No)
                {
                    sourceValueFound = false;
                    sourceValue = enum2str(sks_EFT_BankFormatValidation.SourceContext)+sks_EFT_BankFormatValidation.SourceField;

                    for (i=1; i <= conLen(sourceContainer); i++)
                    {
                        if (conPeek(sourceContainer, i) ==  sourceValue)
                        {
                            sourceValueFound = true;
                        }
                    }

                    format = true;

                    if (!sourceValueFound)
                    {
                        sourceContainer = conIns(sourceContainer,conLen(sourceContainer)+1,sourceValue);
                        countryValidation = false;

                        if (sks_EFT_BankFormatValidation.ISOCountrySpec != '')
                        {
                            countryValidation = this.countryRegionValidation(_ledgerJournalTrans,_custPaymModeTable,sks_EFT_FileFormatPaymSpec, sks_EFT_BankFormatValidation);
                        }

                        if (countryValidation)   //ISO country specific validations
                        {
                            //Country specific
                            switch (sks_EFT_BankFormatValidation.SourceContext)
                            {
                                case SKS_EFT_SourceContext::CustTable:
                                    isCustValid = this.custValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isCustValid;
                                    break;

                                case SKS_EFT_SourceContext::BankAccountTable:
                                    isBankValid = this.bankValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans,sks_EFT_BankFormatValidation,_enableLog) && isBankValid;
                                    break;

                                case SKS_EFT_SourceContext::CustBankAccount:
                                    isCustBankValid = this.custBankAccountValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isCustBankValid;
                                    break;

                                case SKS_EFT_SourceContext::LedgerJournalTrans:
                                    isLedgerJourValid = this.ledgerJournalTransValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isLedgerJourValid;
                                    break;

                                case SKS_EFT_SourceContext::LogisticsPostalAddress_Customer:
                                    isLogisticPosAddressValid = this.logisticsPostalAddressValidation_DD(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isLogisticPosAddressValid;
                                    break;

                                case  SKS_EFT_SourceContext::LogisticsPostalAddress_CustomerBank:
                                    isBankLogisticPosAddressValid = this.bankLogisticsPostalAddressValidation_DD(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isBankLogisticPosAddressValid;
                                    break;

                                case SKS_EFT_SourceContext::DirParty_Customer:
                                    isDirPartyValid =  this.dirParty_DDValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isDirPartyValid;
                                    break;

                                case SKS_EFT_SourceContext::CustTrans:
                                    isCusTransValid = this.custTransValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isCusTransValid;
                                    break;

                                //SKS_Bug:7415
                                case SKS_EFT_SourceContext::LogisticsPostalAddress_AREFTLegalEntity:
                                    isARLegalEntityValid = this.legalEntityARAddressValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isARLegalEntityValid;
                                    break;

                                //TFS: 7518
                                case SKS_EFT_SourceContext::LogisticsLocation_AREFTLegalEntity:
                                    isARLegalEntityLogisticsLocValid = this.legalEntityARLogisticLocationValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isARLegalEntityLogisticsLocValid;
                                    break;

                                // SKS_FDD_10590 -->
                                case SKS_EFT_SourceContext::AR_EFT_Bank:
                                    isAR_EFT_BankValid = this.ar_EFT_BankValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isAR_EFT_BankValid;
                                    break;

                                case SKS_EFT_SourceContext::CompanyInfo:
                                    isCompanyInfoValid = this.companyInfoValidations(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isCompanyInfoValid;
                                    break;

                                case SKS_EFT_SourceContext::LogisticsPostalAddress_Bank:
                                    isBankAddressValid = this.bankAddressValidations(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isBankAddressValid;
                                    break;
                                // SKS_FDD_10590 <--

                            }
                        }
                        else if (sks_EFT_BankFormatValidation.ISOCountrySpec == '')  //General validation if ISO country specific not provided
                        {
                            switch (sks_EFT_BankFormatValidation.SourceContext)
                            {
                                case SKS_EFT_SourceContext::CustTable:
                                    isCustValid = this.custValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isCustValid;
                                    break;

                                case SKS_EFT_SourceContext::BankAccountTable:
                                    isBankValid =this.bankValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans,sks_EFT_BankFormatValidation,_enableLog) && isBankValid;
                                    break;

                                case SKS_EFT_SourceContext::CustBankAccount:
                                    isCustBankValid =this.custBankAccountValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isCustBankValid;
                                    break;

                                case SKS_EFT_SourceContext::LedgerJournalTrans:
                                    isLedgerJourValid = this.ledgerJournalTransValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isLedgerJourValid;
                                    break;

                                case SKS_EFT_SourceContext::LogisticsPostalAddress_Customer:
                                    isLogisticPosAddressValid =  this.logisticsPostalAddressValidation_DD(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isLogisticPosAddressValid;
                                    break;

                                case  SKS_EFT_SourceContext::LogisticsPostalAddress_CustomerBank:
                                    isBankLogisticPosAddressValid = this.bankLogisticsPostalAddressValidation_DD(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isBankLogisticPosAddressValid;
                                    break;

                                case SKS_EFT_SourceContext::DirParty_Customer:
                                    isDirPartyValid = this.dirParty_DDValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isDirPartyValid;
                                    break;

                                case SKS_EFT_SourceContext::CustTrans:
                                    isCusTransValid = this.custTransValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isCusTransValid;
                                    break;

                                //SKS_Bug:7415
                                case SKS_EFT_SourceContext::LogisticsPostalAddress_AREFTLegalEntity:
                                    isARLegalEntityValid = this.legalEntityARAddressValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isARLegalEntityValid;
                                    break;

                                //TFS: 7518
                                case SKS_EFT_SourceContext::LogisticsLocation_AREFTLegalEntity:
                                    isARLegalEntityLogisticsLocValid = this.legalEntityARLogisticLocationValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isARLegalEntityLogisticsLocValid;
                                    break;
                                // SKS_FDD_10590 -->
                                case SKS_EFT_SourceContext::AR_EFT_Bank:
                                    isAR_EFT_BankValid = this.ar_EFT_BankValidation(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isAR_EFT_BankValid;
                                    break;
                                case SKS_EFT_SourceContext::CompanyInfo:
                                    isCompanyInfoValid = this.companyInfoValidations(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isCompanyInfoValid;
                                    break;
                                case SKS_EFT_SourceContext::LogisticsPostalAddress_Bank:
                                    isBankAddressValid = this.bankAddressValidations(sks_EFT_BankFormatValidation.SourceContext,sks_EFT_FileFormatPaymSpec,_ledgerJournalTrans, sks_EFT_BankFormatValidation,_enableLog) && isBankAddressValid;
                                    break;
                                // SKS_FDD_10590 <--
                            }

                        }
                    }
                    else if (sks_EFT_BankFormatValidation.ISOCountrySpec != '' && countryValidation == false)  // ISO country specific is failing
                    {
                        continue;
                    }
                }
            }
            catch
            {
                SKS_EFT_JournalValidate::errorLog("@SKS984",_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
            }
            finally
            {
                // SKS_FDD_10590 -->
                // Delete data from file details table once the validatations has been completed
                sks_eft_processingAR.deletePaymDataFromFileDetail(_ledgerJournalTrans); //SKS-Bug_11967
                // SKS_FDD_10590 <--
            }
        }
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldsInMappingTables</Name>
				<Source><![CDATA[
    //SKS_FDD_10590 -->
    /// <summary>
    ///
    /// </summary>
    private anytype validateFieldsInMappingTables(SKS_EFT_SourceContext _sourceContext,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false,
                            boolean _iterateFileDetailInvoice = false, SKS_EFT_FileDetail _sks_eft_fileDetailInvoice = null)//SKS_Bug_11967
    {
        str                 mapTableName, mapField;
        TableId             mapTableId;
        int                 mapfieldId;
        anytype             mapfieldValue;
        Str                 tableNameLoc;
        int                 delimiterPosition;
        str                 warningMsg;
        SKS_EFT_BRValidationAltFieldMapping  sks_BR_FieldMapping;
        SKS_EFT_FileDetail_Extra        sks_EFT_FileDetail_Extra;

        select firstonly sks_BR_FieldMapping
                where sks_BR_FieldMapping.SourceContext == _sourceContext &&
                sks_BR_FieldMapping.SourceField == _sks_EFT_BankFormatValidation.SourceField;

        if(sks_BR_FieldMapping)
        {
            hasMappingData = true; //SKS_Bug_11831
            mapTableName = enum2str(sks_BR_FieldMapping.MappingSourceContext);
            delimiterPosition = strFind(mapTableName,'-',0,strLen(mapTableName));
            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(mapTableName, delimiterPosition + 2,strLen(mapTableName)));
            }
            else
            {
                tableNameLoc = mapTableName;
            }

            mapTableId = tableName2Id(tableNameLoc);
            mapField = sks_BR_FieldMapping.MappingField;
            mapfieldId = fieldName2Id(mapTableId, mapField);

            if(!mapfieldId && sks_BR_FieldMapping.MappingSourceContext != SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail_Extra)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS:SKGFieldMapInfo", mapField, mapTableName),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                hasMappingData = false;
                return null;
            }

            if(mSKS_EFT_FileDetail.PaymentLineRecId != _ledgerJournalTrans.RecId)
            {
                select firstonly mSKS_EFT_FileDetail
                    where mSKS_EFT_FileDetail.PaymentLineRecId == _ledgerJournalTrans.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::EFTValidate &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

                select msks_EFT_FileDetail_CustBankAddress
                    where msks_EFT_FileDetail_CustBankAddress.RefRecId == msks_EFT_FileDetail.RecId
                    && msks_EFT_FileDetail_CustBankAddress.AddressType == SKS_EFT_AddressType::CustBankAddress;

                select msks_EFT_FileDetail_BankAddress
                    where msks_EFT_FileDetail_BankAddress.RefRecId == msks_EFT_FileDetail.RecId
                    && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

                mSKS_EFT_FileDetail_CustAddress = SKS_EFT_FileDetail_CustAddress::find(msks_EFT_FileDetail.RecId);
                msks_EFT_FileDetail_PaymentLine = SKS_EFT_FileDetail_PaymentLine::find(msks_EFT_FileDetail.RecId);
                msks_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(msks_EFT_FileDetail.RecId);
                msks_EFT_FileDetail_Mandate = SKS_EFT_FileDetail_Mandate::find(msks_EFT_FileDetail.RecId);
            }

            switch (sks_BR_FieldMapping.MappingSourceContext)
            {
                case SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail:
                    if(msks_EFT_FileDetail)
                    {
                        mapfieldValue = msks_EFT_FileDetail.(mapfieldId);
                    }
                    break;
                case SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail_CustAddress:
                    if(mSKS_EFT_FileDetail_CustAddress)
                    {
                        mapfieldValue = mSKS_EFT_FileDetail_CustAddress.(mapfieldId);
                    }
                    break;

                case SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail_PaymentLine:
                    if(msks_EFT_FileDetail_PaymentLine)
                    {
                        mapfieldValue = msks_EFT_FileDetail_PaymentLine.(mapfieldId);
                    }
                    break;
                case SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail_BankAccount:
                    if(msks_EFT_FileDetail_BankAccount)
                    {
                        mapfieldValue = msks_EFT_FileDetail_BankAccount.(mapfieldId);
                    }
                    break;
                case SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail_CustBankAddress:
                    if(msks_EFT_FileDetail_CustBankAddress)
                    {
                        mapfieldValue = msks_EFT_FileDetail_CustBankAddress.(mapfieldId);
                    }
                    break;

                case SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail_Mandate:
                    if(msks_EFT_FileDetail_Mandate)
                    {
                        mapfieldValue = msks_EFT_FileDetail_Mandate.(mapfieldId);
                    }
                    break;
                case SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail_BankAddress:
                    if(msks_EFT_FileDetail_BankAddress)
                    {
                        mapfieldValue = msks_EFT_FileDetail_BankAddress.(mapfieldId);
                    }
                    break;
                case SKS_EFT_MappingSourceContext::SKS_EFT_FileDetail_Extra:
                    select firstonly sks_EFT_FileDetail_Extra where sks_EFT_FileDetail_Extra.FieldName == sks_BR_FieldMapping.MappingField &&
                    sks_EFT_FileDetail_Extra.RefRecId == msks_EFT_FileDetail.RecId;

                    if(sks_EFT_FileDetail_Extra)
                    {
                        mapfieldValue = sks_EFT_FileDetail_Extra.Value;
                    }
                    break;
            }
        }
        // SKS_Bug_11831 -->
        else
        {
            warningMsg = strFmt("@SKS:SKGFieldValidationWarning", enum2Str(_sourceContext),  _sks_EFT_BankFormatValidation.SourceField);     // SKS_Bug_11905

            SKS_EFT_JournalValidate::warningLog(warningMsg, _ledgerJournalTrans, _enableLog, _ledgerJournalTrans.amount());
            hasMappingData = false; //SKS_Bug_11831
        }
        // SKS_Bug_11831 <--
        return mapfieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapfieldWarningValidation</Name>
				<Source><![CDATA[
    public void mapfieldWarningValidation(
    anytype _fieldValue,
    SKS_EFT_BankFormatValidation   _sks_EFT_BankFormatValidation,
    LedgerJournalTrans _ledgerJournalTrans,
    boolean _enableLog = false)
    {
        str warningMsg;
        str warningMessage = "@SKS4389";
        SKS_EFT_BRValidationAltFieldMapping sks_EFT_BRValidationAltFieldMapping; // SKS_FDD_10590

        // SKS_FDD_10590 -->
        select firstonly sks_EFT_BRValidationAltFieldMapping
            where sks_EFT_BRValidationAltFieldMapping.SourceContext == _sks_EFT_BankFormatValidation.SourceContext &&
            sks_EFT_BRValidationAltFieldMapping.SourceField == _sks_EFT_BankFormatValidation.SourceField;
        // SKS_FDD_10590 <--

        //General validations
        if (!_fieldValue && _sks_EFT_BankFormatValidation.Required == SKS_EFT_BankFormatRequired::ConditionalWarning &&
            !_sks_EFT_BankFormatValidation.ISOCountrySpec)
        {
            // SKS_FDD_10590 -->
            if(sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation)
            {
                warningMsg = "@SKS4388" +
                        ' ' +
                        warningMessage +
                        ' ' +  strFmt("@SKS4385",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc);
            }
            // SKS_FDD_10590 <--
            else
            {
                warningMsg = "@SKS4388" +
                        ' ' +
                        warningMessage +
                        ' ' +  strFmt("@SKS4385",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,_sks_EFT_BankFormatValidation.SourceFieldLoc
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc);
            }

            SKS_EFT_JournalValidate::warningLog(warningMsg,_ledgerJournalTrans,_enableLog,_ledgerJournalTrans.amount());

        }
        else if (!_fieldValue && _sks_EFT_BankFormatValidation.Required == SKS_EFT_BankFormatRequired::ConditionalWarning &&
                _sks_EFT_BankFormatValidation.ISOCountrySpec)
        {
            // SKS_FDD_10590 -->
            if(sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation)
            {
                warningMsg = "@SKS4388" +
                        ' ' +
                        warningMessage +
                        ' ' + strFmt("@SKS4390",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.Notes,_sks_EFT_BankFormatValidation.ISOCountrySpec);
            }
            // SKS_FDD_10590 <--
            else
            {
                warningMsg = "@SKS4388" +
                        ' ' +
                        warningMessage +
                        ' ' + strFmt("@SKS4390",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,_sks_EFT_BankFormatValidation.SourceFieldLoc
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.Notes,_sks_EFT_BankFormatValidation.ISOCountrySpec);
            }


            SKS_EFT_JournalValidate::warningLog(warningMsg,_ledgerJournalTrans,_enableLog,_ledgerJournalTrans.amount());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapfieldLengthValidation</Name>
				<Source><![CDATA[
    public boolean mapfieldLengthValidation(
    anytype _fieldValue,
    SKS_EFT_BankFormatValidation   _sks_EFT_BankFormatValidation,
    LedgerJournalTrans   _ledgerJournalTrans,
    boolean _enableLog = false)
    {
        str errorMsg;
        str errorMessage = "@SKS4380";
        SKS_EFT_BRValidationAltFieldMapping sks_EFT_BRValidationAltFieldMapping; // SKS_FDD_10590

        // SKS_FDD_10590 -->
        select firstonly sks_EFT_BRValidationAltFieldMapping
            where sks_EFT_BRValidationAltFieldMapping.SourceContext == _sks_EFT_BankFormatValidation.SourceContext &&
            sks_EFT_BRValidationAltFieldMapping.SourceField == _sks_EFT_BankFormatValidation.SourceField;
        // SKS_FDD_10590 <--


        //Length validations
        if (_fieldValue && _sks_EFT_BankFormatValidation.LengthValidation == SKS_EFT_LengthValidation::Yes &&
              !_sks_EFT_BankFormatValidation.ISOCountrySpec)
        {
            if (strLen(any2str(_fieldValue)) < _sks_EFT_BankFormatValidation.MinLength ||
                strLen(any2str(_fieldValue)) > _sks_EFT_BankFormatValidation.MaxLength)
            {
                if(sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation)
                {
                    errorMsg = "@SKS4381" +
                        ' ' +
                        errorMessage +
                        ' ' +
                        strFmt("@SKS4382",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.MinLength,_sks_EFT_BankFormatValidation.MaxLength);
                }
                else
                {
                    errorMsg = "@SKS4381" +
                        ' ' +
                        errorMessage +
                        ' ' +
                        strFmt("@SKS4382",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,_sks_EFT_BankFormatValidation.SourceFieldLoc
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.MinLength,_sks_EFT_BankFormatValidation.MaxLength);
                }


                SKS_EFT_JournalValidate::errorLog(errorMsg,_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());

                return false;
            }
        }

        else if (_fieldValue && _sks_EFT_BankFormatValidation.LengthValidation == SKS_EFT_LengthValidation::Yes &&
              _sks_EFT_BankFormatValidation.ISOCountrySpec)
        {
            if (strLen(any2str(_fieldValue)) < _sks_EFT_BankFormatValidation.MinLength ||
                strLen(any2str(_fieldValue)) > _sks_EFT_BankFormatValidation.MaxLength)
            {
                if(sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation)
                {
                    errorMsg = "@SKS4381" +
                        ' ' +
                        errorMessage +
                        ' ' +
                        strFmt("@SKS4383",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.ISOCountrySpec,_sks_EFT_BankFormatValidation.MinLength,_sks_EFT_BankFormatValidation.MaxLength);
                }
                else
                {
                    errorMsg = "@SKS4381" +
                        ' ' +
                        errorMessage +
                        ' ' +
                        strFmt("@SKS4383",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.ISOCountrySpec,_sks_EFT_BankFormatValidation.MinLength,_sks_EFT_BankFormatValidation.MaxLength);
                }

                SKS_EFT_JournalValidate::errorLog(errorMsg,_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapfieldWarningLengthValidation</Name>
				<Source><![CDATA[
    public void mapfieldWarningLengthValidation(
    anytype _fieldValue,
    SKS_EFT_BankFormatValidation   _sks_EFT_BankFormatValidation,
    LedgerJournalTrans _ledgerJournalTrans,
    boolean _enableLog = false)
    {
        str warningMsg;
        str warningMessage = "@SKS4387";
        SKS_EFT_BRValidationAltFieldMapping sks_EFT_BRValidationAltFieldMapping; // SKS_FDD_10590

        // SKS_FDD_10590 -->
        select firstonly sks_EFT_BRValidationAltFieldMapping
            where sks_EFT_BRValidationAltFieldMapping.SourceContext == _sks_EFT_BankFormatValidation.SourceContext &&
            sks_EFT_BRValidationAltFieldMapping.SourceField == _sks_EFT_BankFormatValidation.SourceField;
        // SKS_FDD_10590 <--


        //Length validations warning
        if (_fieldValue && _sks_EFT_BankFormatValidation.LengthValidation == SKS_EFT_LengthValidation::Warning &&
              !_sks_EFT_BankFormatValidation.ISOCountrySpec)
        {
            if (strLen(any2str(_fieldValue)) < _sks_EFT_BankFormatValidation.MinLength ||
                strLen(any2str(_fieldValue)) > _sks_EFT_BankFormatValidation.MaxLength)
            {
                // SKS_FDD_10590 -->
                if(sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation)
                {
                    warningMsg = "@SKS4388" +
                    ' ' +
                    warningMessage +
                    ' ' +
                    strFmt("@SKS4382",
                    _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                    ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.MinLength,_sks_EFT_BankFormatValidation.MaxLength);
                }
                // SKS_FDD_10590 <--
                else
                {
                    warningMsg = "@SKS4388" +
                    ' ' +
                    warningMessage +
                    ' ' +
                    strFmt("@SKS4382",
                    _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,_sks_EFT_BankFormatValidation.SourceFieldLoc
                    ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.MinLength,_sks_EFT_BankFormatValidation.MaxLength);
                }

                SKS_EFT_JournalValidate::warningLog(warningMsg,_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
            }
        }

        else if (_fieldValue && _sks_EFT_BankFormatValidation.LengthValidation == SKS_EFT_LengthValidation::Warning &&
              _sks_EFT_BankFormatValidation.ISOCountrySpec)
        {
            if (strLen(any2str(_fieldValue)) < _sks_EFT_BankFormatValidation.MinLength ||
                strLen(any2str(_fieldValue)) > _sks_EFT_BankFormatValidation.MaxLength)
            {
                // SKS_FDD_10590 -->
                if(sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation)
                {
                    warningMsg = "@SKS4388" +
                        ' ' +
                        warningMessage +
                        ' ' +
                        strFmt("@SKS4383",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.ISOCountrySpec,_sks_EFT_BankFormatValidation.MinLength,_sks_EFT_BankFormatValidation.MaxLength);
                }
                // SKS_FDD_10590 <--
                else
                {
                    warningMsg = "@SKS4388" +
                        ' ' +
                        warningMessage +
                        ' ' +
                        strFmt("@SKS4383",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,_sks_EFT_BankFormatValidation.SourceFieldLoc
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.ISOCountrySpec,_sks_EFT_BankFormatValidation.MinLength,_sks_EFT_BankFormatValidation.MaxLength);

                }

                SKS_EFT_JournalValidate::warningLog(warningMsg,_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapfieldvalidation</Name>
				<Source><![CDATA[
    public boolean mapfieldvalidation(
        anytype _fieldValue,
        SKS_EFT_BankFormatValidation   _sks_EFT_BankFormatValidation,
        LedgerJournalTrans _ledgerJournalTrans,
        boolean _enableLog = false)
    {
        str errorMsg;
        str errorMessage = "@SKS4384";
        SKS_EFT_BRValidationAltFieldMapping sks_EFT_BRValidationAltFieldMapping;// SKS_FDD_10590

        // SKS_FDD_10590 -->
        select firstonly sks_EFT_BRValidationAltFieldMapping
            where sks_EFT_BRValidationAltFieldMapping.SourceContext == _sks_EFT_BankFormatValidation.SourceContext &&
            sks_EFT_BRValidationAltFieldMapping.SourceField == _sks_EFT_BankFormatValidation.SourceField;
        // SKS_FDD_10590 <--

        //General validations
        if (!_fieldValue && _sks_EFT_BankFormatValidation.Required == SKS_EFT_BankFormatRequired::Yes &&
            !_sks_EFT_BankFormatValidation.ISOCountrySpec)
        {
            // SKS_FDD_10590 -->
            if(sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation)
            {
                errorMsg = "@SKS4381" +
                            ' ' +
                            errorMessage +
                            ' ' +  strFmt("@SKS4385",
                            _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                            ,_sks_EFT_BankFormatValidation.TargetFieldLoc);

            }
            else
            {
                errorMsg = "@SKS4381" +
                            ' ' +
                            errorMessage +
                            ' ' +  strFmt("@SKS4385",
                            _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,_sks_EFT_BankFormatValidation.SourceFieldLoc
                            ,_sks_EFT_BankFormatValidation.TargetFieldLoc);
            }

            SKS_EFT_JournalValidate::errorLog(errorMsg,_ledgerJournalTrans,_enableLog,_ledgerJournalTrans.amount());

            return false;

        }
        else if (!_fieldValue && _sks_EFT_BankFormatValidation.Required == SKS_EFT_BankFormatRequired::Yes &&
                _sks_EFT_BankFormatValidation.ISOCountrySpec)
        {
            // SKS_FDD_10590 -->
            if(sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation)
            {
                errorMsg = "@SKS4381" +
                        ' ' +
                        errorMessage +
                        ' ' + strFmt("@SKS4386",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,sks_EFT_BRValidationAltFieldMapping.MappingFieldLocation
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.ISOCountrySpec);
            }
            else
            {
                errorMsg = "@SKS4381" +
                        ' ' +
                        errorMessage +
                        ' ' + strFmt("@SKS4386",
                        _sks_EFT_BankFormatValidation.Id,_sks_EFT_BankFormatValidation.SourceFieldDesc,_sks_EFT_BankFormatValidation.SourceFieldLoc
                        ,_sks_EFT_BankFormatValidation.TargetFieldLoc,_sks_EFT_BankFormatValidation.ISOCountrySpec);
            }

            SKS_EFT_JournalValidate::errorLog(errorMsg,_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ar_EFT_BankValidation</Name>
				<Source><![CDATA[
    //SKS_FDD_10590 -->
    public boolean ar_EFT_BankValidation(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str         tablename;
        str         field;
        int         fieldId;
        TableId     tableId;
        Str         tableNameLoc;
        int         delimiterPosition;
        boolean     ret,retValid,retLenghtValid;
        anytype     mapFieldValue;//SKS_FDD-10590

        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
            }

        }

        if (retValid == true && retLenghtValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfoValidations</Name>
				<Source><![CDATA[
    public boolean companyInfoValidations(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str         tablename;
        str         field;
        int         fieldId;
        TableId     tableId;
        Str         tableNameLoc;
        int         delimiterPosition;
        boolean     ret,retValid,retLenghtValid,retDataValid;
        anytype     mapFieldValue;//SKS_FDD-10590

        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
            }
        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAddressValidations</Name>
				<Source><![CDATA[
    public boolean bankAddressValidations(SKS_EFT_SourceContext _sourceContext,
                            SKS_EFT_FileFormatPaymSpec _sks_EFT_FileFormatPaymSpec,
                            LedgerJournalTrans _ledgerJournalTrans,
                            SKS_EFT_BankFormatValidation    _sks_EFT_BankFormatValidation,
                            boolean _enableLog = false)
    {
        Str         tablename;
        str         field;
        int         fieldId;
        TableId     tableId;
        Str         tableNameLoc;
        int         delimiterPosition;
        boolean     ret,retValid,retLenghtValid,retDataValid;
        anytype     mapFieldValue;

        if (_sks_EFT_BankFormatValidation)
        {
            field = _sks_EFT_BankFormatValidation.SourceField;

            tablename = enum2str(_sks_EFT_BankFormatValidation.SourceContext);

            delimiterPosition = strFind(tableName,'-',0,strLen(tableName));

            if (delimiterPosition)
            {
                tableNameLoc = strLTrim(subStr(tableName, delimiterPosition + 2,strLen(tableName)));
            }
            else
            {
                tableNameLoc = tableName;
            }

            tableId = tableName2id(tableNameLoc);

            field = _sks_EFT_BankFormatValidation.SourceField;
            fieldId = fieldName2id(tableId,field);

            if (!fieldId)
            {
                SKS_EFT_JournalValidate::warningLog(strFmt("@SKS4391",tablename),_ledgerJournalTrans,_enableLog, _ledgerJournalTrans.amount());
                return false;
            }

            mapfieldValue = this.validateFieldsInMappingTables(_sourceContext, _ledgerJournalTrans, _sks_EFT_BankFormatValidation, _enableLog);
            if(hasMappingData)// SKS_Bug_11831
            {
                retDataValid =   SKS_EFT_JournalValidate::DataFieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);

                // general validations for error and warning
                retValid =   this.mapfieldvalidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);
                this.mapfieldWarningValidation(mapfieldValue,_sks_EFT_BankFormatValidation, _ledgerJournalTrans,_enableLog);

                // length validations for error and warning
                retLenghtValid =   this.mapfieldLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
                this.mapfieldWarningLengthValidation(mapfieldValue,_sks_EFT_BankFormatValidation,_ledgerJournalTrans,_enableLog);
            }
        }

        if (retValid == true && retLenghtValid == true && retDataValid == true)
        {
            ret = true;
            return ret;
        }
        else
        {
            ret = false;
            return ret;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runValidation</Name>
				<Source><![CDATA[
    // SKS_FDD_10590 <--

    public static container runValidation(container _params)
    {
        SKS_DD_JournalBankValidate sks_DD_JournalBankValidate = new SKS_DD_JournalBankValidate();
        sks_DD_JournalBankValidate.paymJournalValidate(conPeek(_params, 1),conPeek(_params, 2),conPeek(_params, 3),conPeek(_params, 4));

        return conNull();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>