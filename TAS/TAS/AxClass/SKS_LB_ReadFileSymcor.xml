<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileSymcor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Symcor ARES file type read file class
/// </summary>
class SKS_LB_ReadFileSymcor extends SKS_LB_ReadFile
{
    SKS_EB_FileHub fileHub;
    TextStreamIo SymcorFile;
    SKS_LB_Bank mSKS_LB_Bank;
    str curline;
    SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;
    #define.RecordCodeFileHeader(1)
    #define.RecordCodeLockboxHeader(2)
    #define.RecordCodeCheckTran(3)
    #define.RecordCodeInvoice(4)
    #define.RecordCodeFileTrailer(9)
    int maxlinelengthneeded;
    List FieldFormatsListCheck, FieldFormatsListInvoice;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFileHub</Name>
				<Source><![CDATA[
    private SKS_EB_FileHub initFileHub(SKS_EB_FileHub _fileHub = fileHub)
    {
        fileHub = _fileHub;

        if(!fileHub)
        {
            SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
            
            if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
            {
                SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
            }

            fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

            if (Fileformat.CodePage)
            {
                fileHub.parmEncoding(Fileformat.CodePage);
            }
        }
      
        return fileHub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closefile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Close the file
    /// </summary>
    public void closefile()
    {
        SymcorFile.finalize();
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.StreamClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileLineCount</Name>
				<Source><![CDATA[
    private int fileLineCount()
    {
        int linecnt = 0;
        Container line;
    
        this.openFile();
        while (SymcorFile.status() == IO_status::Ok)
        {
            line = SymcorFile.read();
    
            if (line)
            {
                linecnt++;
            }
        }
        return linecnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Get_Current_Line</Name>
				<Source><![CDATA[
    str Get_Current_Line()
    {
        ;
    
        return curline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    //Verify that the label is correct
    void openFile(boolean _Relocation = false)
    {
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }

        fileHub.runFileInquire(Filename);
        if(!_Relocation)
        {
            if(!fileHub.attrFileExists())
            {
                // The file %1 does not exist.
                error(strfmt("@SYS62207", fileName));
                return;
            }
        }
        fileHub.runFileLoad(Filename);
        fileHub.StreamInit();

        if(SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            select firstOnly SepPaymByInv from mSKS_LB_Bank where mSKS_LB_Bank.LBPath == System.IO.Path::GetDirectoryName(Filename) && mSKS_LB_Bank.LBFormatId == FormatId;
        }
        else
        {
            select firstOnly SepPaymByInv from mSKS_LB_Bank where mSKS_LB_Bank.LBBankFabricLocation == System.IO.Path::GetDirectoryName(Filename) && mSKS_LB_Bank.LBFormatId == FormatId;
        }


        if (Fileformat.CodePage)
        {
            SymcorFile = TextStreamIo::constructForRead(fileHub.StreamGet(), Fileformat.CodePage);
        }
        else
        {
            SymcorFile = TextStreamIo::constructForRead(fileHub.StreamGet());
        }

        if (SymcorFile == null || SymcorFile.status() != IO_Status::Ok)
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", fileName));
        }
        SymcorFile.inFieldDelimiter('\n');
        SymcorFile.inRecordDelimiter('\n');
    
        if(!_Relocation)
        {
            // Decide the minimum line length that is needed to satisfy the format
            select maxof(FieldEnd) from FieldFormat where FieldFormat.FormatId == formatId;
            FieldFormatsListcheck = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::MultiLineCheck
            {
                FieldFormatsListCheck.addEnd(FieldFormat);
            }
    
            FieldFormatsListInvoice = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::MultiLineInvoice
            {
                FieldFormatsListInvoice.addEnd(FieldFormat);
            }
        }
    
        select firstOnly BankAcctFieldFormat where BankAcctFieldFormat.formatid == Fileformat.FormatID && BankAcctFieldFormat.FieldType == SKS_LB_FieldType::LBBankAccount;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Line</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read line
    /// </summary>
    /// <param name = "DesiredLine">DesiredLine</param>
    /// <returns>integer</returns>
    int Read_Line( int DesiredLine )
    {
        container line;
        str lineStr;
        int CurrentLine = 0;
    
        if (DesiredLine > 0 && SymcorFile.status() == IO_status::Ok)
        {
            // Position on the desired line
            CurrentLine = 0;
            while (SymcorFile.status() == IO_status::Ok && CurrentLine < DesiredLine)
            {
                line = SymcorFile.read();
                CurrentLine = CurrentLine + 1;
            }
    
            if (SymcorFile.status() != IO_status::Ok)
            {
                return 1;
            }
    
            [lineStr] = line;
            curline = strrem(lineStr, '\n\r');
        }
        else
        {
            return 1;
        }
    
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read next
    /// </summary>
    /// <returns>integer</returns>
    int Read_Next()
    {
        container line;
        str lineStr;
    
        line = SymcorFile.read();
    
        if (SymcorFile.status() != IO_status::Ok)
        {
            return 1;
        }
    
        [lineStr] = line;
        curline = strrem(lineStr, '\n\r');
    
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readfile</Name>
				<Source><![CDATA[
    TmpSKS_LB_Importing readfile()
    {
        int RecordCode;
        int linecnt = 0;
        Container line;
        str lineStr;
        str nextLineStr;
        boolean FileHeaderFound = false;
        boolean FileTrailerFound = false;
        boolean LockboxHeaderFound = false;
        boolean InvoiceFound = false;
        boolean WriteTransaction = false;
        boolean ValidAcctPathcombo = false;
        int PaymentRecId = 0;
        str CheckBatchItem = ' ';
        str InvoiceBatchItem = ' ';
        ListEnumerator fieldFormatsListEnumeratorCheck;
        ListEnumerator fieldFormatsListEnumeratorInvoice;
        SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        str value;
        SKS_EB_FilePath         lbpath;
    
        fieldFormatsListEnumeratorCheck = FieldFormatsListCheck.getEnumerator();
        fieldFormatsListEnumeratorInvoice = FieldFormatsListInvoice.getEnumerator();
    
        //this.openFile();
        ttsbegin;
        lbpath =  System.IO.Path::GetDirectoryName(Filename);
        line = SymcorFile.read();
        [lineStr] = line;
        while(SymcorFile.status() == IO_status::Ok || (line != conNull() && SymcorFile.status() == IO_Status::FileTooShort))
        {
            fieldFormatsListEnumeratorCheck.reset();
            fieldFormatsListEnumeratorInvoice.reset();
            linecnt++;
            lineStr = strrem(lineStr, '\n\r');
    
            if (strlen(con2Str(line)) == 0) //skip blank lines
            {
                RecordCode=0;
            }
            else
            {
                RecordCode = str2int(substr(lineStr,1,1)); // Get the record code
            }
    
            //This loop will skip over 3 and 4 records that belong to a 2 record that contains a bank account that is invalid for the directory
            //this loop will end when a record that is not a 3 or a 4 is found
            while(FileHeaderFound == true && ValidAcctPathcombo == false
                    && (RecordCode == #recordCodeCheckTran || RecordCode == #recordCodeInvoice)
                    && SymcorFile.status() == IO_status::Ok)
            {
                line = SymcorFile.read();
                [lineStr] = line;
    
                if (strlen(con2Str(line)) == 0) //skip blank lines
                {
                    RecordCode=0;
                }
                else
                {
                    RecordCode = str2int(substr(lineStr,1,1)); // Get the record code
                }
            }
            switch(RecordCode)
            {
                case #RecordCodeFileHeader:
                    if (FileHeaderFound == true)
                    {
                        ImportCount = 0;
                        ttsabort;
                        // only 1 allowed
                        error("@SKS330");
                        importing = null;
                        return importing;
                    }
                    FileHeaderFound = true;
                    break;
                case #RecordCodeLockboxHeader:
                    if (FileHeaderFound == false)
                    {
                        // missing: 01
                        this.SymcorFormatError(#RecordCodeFileHeader, linecnt);
                        return importing;
                    }
                    // Get processing date - this will be used if no check date is supplied
                    this.readSymcorField(lineStr, SKS_LB_BAI2FieldType::DateHeader);
                    this.readSymcorField(lineStr, SKS_LB_BAI2FieldType::LockboxNumber);
    
                    ValidAcctPathcombo = this.validatepathacctcombo(lbpath);
    
                    LockBoxHeaderFound = True;
                    break;
    
                // Check trans may or may not be followed by invoice details.
                // Record Check info for now. If corresponding Invoice information is found later, it will be added
                // to the line.
                case #RecordCodeCheckTran:
    
                    if (LockBoxHeaderFound == false)
                    {
                        // missing: 2
                        this.SymcorFormatError(#RecordCodeLockboxHeader, linecnt);
                        return importing;
                    }
    
                    // Save off the check sequence info to verify if Invoice records belong to this Check
                    while (fieldFormatsListEnumeratorCheck.moveNext())
                    {
                        localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorCheck.current();
                        value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                    CheckBatchItem = importing.BatchNum + BatchSequence;
                    PaymentRecId = linecnt;
                    break;
                case #RecordCodeInvoice:
                    // Invoice (4) record is only valid after its corresponding Check (3) record
    
                    while (fieldFormatsListEnumeratorInvoice.moveNext())
                    {
                        localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorInvoice.current();
                        value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                    InvoiceBatchItem = importing.BatchNum + BatchSequence;
    
                    if (CheckBatchItem != InvoiceBatchItem)
                    {
                        // missing: 3
                        this.SymcorFormatError(#RecordCodeCheckTran, linecnt);
                        return importing;
                    }
    
                    InvoiceFound = True;
    
                    break;
    
                case #RecordCodeFileTrailer:
                    LockboxHeaderFound = false;
                    FileTrailerFound  = true;
                    break;
    
                default:
                    break;
    
            }
            // If this is an invoice line, or a check followed by a non-invoice line, a record should be written.
            // get next line to determine what record follows this one.
            line = SymcorFile.read();
            [nextLineStr] = line;
    
            if (RecordCode == #RecordCodeInvoice && ValidAcctPathcombo)
            {
                WriteTransaction = true;
            }
    
            if (RecordCode == #RecordCodeCheckTran && ValidAcctPathcombo)
            {
                if (SymcorFile.status() == IO_status::OK && str2int(substr(nextLineStr, 1, 1)) != #RecordCodeInvoice )
                {
                    WriteTransaction = true;
                }
            }
    
            if (WriteTransaction)
            {
                WriteTransaction = false;
                importing.FileDate = FileDate;
    
                ImportCount++;
                importing.FileLineNbrBegin = linecnt;
                importing.ParentRecId = PaymentRecId;
                importing.insert();

                // reset invoice info from line, if terminating invoice reset check info too
                if(!mSKS_LB_Bank.SepPaymByInv || str2int(substr(nextLineStr, 1, 1)) != #RecordCodeInvoice)
                {
                    importing.Description = '';
                }
                importing.InvAmount = 0;
                importing.InvoiceNumber = ' ';
                importing.BankPmtCnt = 0;
                importing.BankPmtTotal = 0;
                importing.DiscAmount = 0;
                importing.LBInvoice = '';
    
            }
            lineStr = nextLineStr;
        } // end while
        if (FileHeaderFound == false)
        {
            // missing: 01
            this.SymcorFormatError(#RecordCodeFileHeader, linecnt);
            return importing;
        }
        if (FileTrailerFound == false)
        {
            // missing: 01
            this.SymcorFormatError(#RecordCodeFileTrailer, linecnt);
            return importing;
        }
        ttscommit;
    
        return importing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readSymcorField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the symcor field
    /// </summary>
    /// <param name = "lineStr">lineStr</param>
    /// <param name = "_bai2FieldType">_bai2FieldType</param>
    /// <returns>field from the file as a string</returns>
    str readSymcorField(str lineStr, SKS_LB_BAI2FieldType _bai2FieldType)
    {
        str value;
    
        switch(_bai2FieldType)
        {
            //2 record (Batch header)
            case SKS_LB_BAI2FieldType::DateHeader:
                value = substr(lineStr, 49, 8);
                this.ReadOneField(value, SKS_LB_FieldType::HeadDateDDMMYYYY);
                break;
            //Gets the lockbox bank account number
            case SKS_LB_Bai2fieldtype::LockboxNumber:
                value = subStr(lineStr, 2, 7);
                this.ReadOneField(value, SKS_LB_FieldType::LBBankAccount);
                break;
        }
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveBankAccountNumberFromFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve bank account number from file
    /// </summary>
    /// <returns>container</returns>
    Container RetrieveBankAccountNumberFromFile()
    {
        int         RecordCode;
        Container   line;
        container   BankAcctCon;
        str         lineStr;
        str         AcctNum;
        boolean     Exit = false;
        ;

        line = SymcorFile.read();
        [lineStr] = line;
        while(SymcorFile.status() == IO_status::Ok && !Exit)
        {
            RecordCode = str2int(substr(lineStr,1,1));
            if(RecordCode == 2)
            {
                AcctNum = subStr(lineStr, 2, 7);
                if(conFind(BankAcctCon,AcctNum) == 0)//Makes sure the account number is unique and not already in the container
                {
                    BankAcctCon += AcctNum;
                    Exit = !FileFormat.VerifyAcct ? true : false;
                }
            }
            line = SymcorFile.read();
            [LineStr] = line;
        }
        return BankAcctCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SymcorFormatError</Name>
				<Source><![CDATA[
    /// <summary>
    /// symcor format error
    /// </summary>
    /// <param name = "missingCodeError">missingCodeError</param>
    /// <param name = "linenumber">linenumber</param>
    void SymcorFormatError( int missingCodeError, int linenumber)
    {
        ;
    
        ttsabort;
        ImportCount = 0;
    
        error(strfmt("@SKS558", int2str(missingCodeError), int2str(linenumber)), '');
        importing = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>