<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_BankFabricPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for BankFabric library EFT
/// </summary>
class SKS_EFT_BankFabricPayment
{
    SKS_EFT_Bank gSKS_EFTAP_Bank;
    SKS_EFTAR_Bank gSKS_EFTAR_Bank;
    SKS_EFTBTB_Bank gSKS_EFTBTB_Bank;
    SKS_EFTCNP_Bank gSKS_EFTCNP_Bank;
    SKS_EFT_FileId gNextFileId;
    SKS_EFT_SequenceNumber gNextSequenceNumber;
    SKS_EFTAP_File gSKS_EFT_File;
    SKS_EFT_FileFormat gSKS_EFT_FileFormat;
    SKS_EFT_FileFormatPaymSpec gSKS_EFT_FileFormatPaymSpec;
    str gErrorText;
    str mBFNewFileName;          //BankFabric
    str mBFNewCtrlFileName;      //BankFabric
    str gCompareFiles;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBFNewFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get new BankFabric file name
    /// </summary>
    /// <returns>File name</returns>
    public str  getBFNewFileName()
    {
        return mBFNewFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFNewCtrlFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get new BankFabric control file name
    /// </summary>
    /// <returns>Control file name</returns>
    public str  getBFNewCtrlFileName()
    {
        return mBFNewCtrlFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompareFilesPath</Name>
				<Source><![CDATA[
    public str parmCompareFilesPath(str _CompareFiles = '')
    {
        gCompareFiles = _CompareFiles;
        return gCompareFiles;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFT_File</Name>
				<Source><![CDATA[
    public SKS_EFTAP_File parmSKS_EFT_File(SKS_EFTAP_File _SKS_EFTAP_File = gSKS_EFT_File)
    {
        gSKS_EFT_File = _SKS_EFTAP_File;
        return gSKS_EFT_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNextFileId</Name>
				<Source><![CDATA[
    public SKS_EFT_FileId parmNextFileId(SKS_EFT_FileId _NextFileId = gNextFileId)
    {
        gNextFileId = _NextFileId;
        return gNextFileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNextSequenceNumber</Name>
				<Source><![CDATA[
    public SKS_EFT_SequenceNumber parmNextSequenceNumber(SKS_EFT_SequenceNumber _NextSequenceNumber = gNextSequenceNumber)
    {
        gNextSequenceNumber = _NextSequenceNumber;
        return gNextSequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFT_FileFormat</Name>
				<Source><![CDATA[
    public SKS_EFT_FileFormat parmSKS_EFT_FileFormat(SKS_EFT_FileFormat _SKS_EFT_FileFormat = gSKS_EFT_FileFormat)
    {
        gSKS_EFT_FileFormat = _SKS_EFT_FileFormat;
        return gSKS_EFT_FileFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFTAP_Bank</Name>
				<Source><![CDATA[
    public SKS_EFT_Bank parmSKS_EFTAP_Bank(SKS_EFT_Bank _SKS_EFT_Bank = gSKS_EFTAP_Bank)
    {
        gSKS_EFTAP_Bank = _SKS_EFT_Bank;
        return gSKS_EFTAP_Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFTAR_Bank</Name>
				<Source><![CDATA[
    public SKS_EFTAR_Bank parmSKS_EFTAR_Bank(SKS_EFTAR_Bank _SKS_EFTAR_Bank = gSKS_EFTAR_Bank)
    {
        gSKS_EFTAR_Bank = _SKS_EFTAR_Bank;
        return gSKS_EFTAR_Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFTBTB_Bank</Name>
				<Source><![CDATA[
    public SKS_EFTBTB_Bank parmSKS_EFTBTB_Bank(SKS_EFTBTB_Bank _SKS_EFTBTB_Bank = gSKS_EFTBTB_Bank)
    {
        gSKS_EFTBTB_Bank = _SKS_EFTBTB_Bank;
        return gSKS_EFTBTB_Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFTCNP_Bank</Name>
				<Source><![CDATA[
    public SKS_EFTCNP_Bank parmSKS_EFTCNP_Bank(SKS_EFTCNP_Bank _SKS_EFTCNP_Bank = gSKS_EFTCNP_Bank)
    {
        gSKS_EFTCNP_Bank = _SKS_EFTCNP_Bank;
        return gSKS_EFTCNP_Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryISO</Name>
				<Source><![CDATA[
    public static LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        LogisticsAddressCountryRegion lLogisticsAddressCountry;
        //------------------------------------------------------------------------------------------------------
        // Return a 2 digit ISO country code
        //------------------------------------------------------------------------------------------------------
        str value;

        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(lLogisticsAddressCountry.CountryRegionId != _countryRegion)
            {
                lLogisticsAddressCountry = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = lLogisticsAddressCountry.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes specified type and object into string.
    /// </summary>
    /// <param name = "_type">Type of data contract object to serialize.</param>
    /// <param name = "_data">Instance of a data contract object to serialize.</param>
    /// <returns>Serialized value of the object.</returns>
    public static str serializeObject(System.Type _type, System.Object _data)
    {
        System.Runtime.Serialization.Json.DataContractJsonSerializer serializer =
            new System.Runtime.Serialization.Json.DataContractJsonSerializer(_type);
        System.IO.MemoryStream stream = new System.IO.MemoryStream();

        serializer.WriteObject(stream, _data);
        stream.Position = 0;
        System.IO.StreamReader reader = new System.IO.StreamReader(stream);
        str jsonString = reader.ReadToEnd();
        return jsonString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserialize the string to an instance of the specified object type.
    /// </summary>
    /// <param name = "_type">Data contract object type.</param>
    /// <param name = "_data">Instance of the data object.</param>
    /// <returns>Instance of the specified object type.</returns>
    public static Object deserializeString(System.Type _type, str _data)
    {
        System.Runtime.Serialization.Json.DataContractJsonSerializer serializer =
            new System.Runtime.Serialization.Json.DataContractJsonSerializer(_type);
        System.Text.Encoding utf8Encoding = System.Text.Encoding::get_UTF8();
        System.Byte[] byteArray = utf8Encoding.GetBytes(_data);
        System.IO.MemoryStream stream = new System.IO.MemoryStream(byteArray);

        stream.Position = 0;
        return serializer.ReadObject(stream);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>