<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_SANTANDERBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class SKS_EFT_Format_US_SANTANDERBANK_XML
/// </summary>
class SKS_EFT_Format_US_SANTANDERBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230228')
    #define.ACH_CCD('ACH-CCD')
    #define.ACH_PPD('ACH-PPD')
    #define.ACH_CTX('ACH-CTX')
    #define.CHK('CHK')
    #define.FSTRPMT('FSTRPMT')
    #define.CHAPS('CHAPS')
    #define.INTL('INTL')
    int i=1;
    str name;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_Authstn</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_Authstn(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.3: Authstn
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeAuthstn;
        str         authstn;
        boolean     printAuthsn;

        authstn = SKS_EFT_Format::getCodelookupvalue('Authstn', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        this.getSKS_EFT_FileFormatPaymSpec();

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #FSTRPMT:
            case #CHAPS:
            case #INTL:
                printAuthsn = true;
                break;
        }
        if(authstn && printAuthsn)
        {
            //      1.3: Authstn
            nodeAuthstn = _nodeGrpHdr.appendChild(xmlDoc.createElement('Authstn'));

            //          1.5: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAuthstn, 'Cd', authstn);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        boolean printBtchBookg;
        str     btchBookg;

        btchBookg = SKS_EFT_Format::getCodelookupvalue('BatchBooking', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #FSTRPMT:
            case #CHAPS:
            case #INTL:
                printBtchBookg = true;
                break;
        }
        if(btchBookg && printBtchBookg)
        {
            //      2.23 BtchBookg
            if(strUpr(btchBookg) == 'Y')
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.11: LclInstrm
        //              2.13: Prtry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmftTpInf;
        XmlElement nodeLclInstrm;
        XmlElement nodeSvclvl;
        str Lclinstrm,value;
    
        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX:
                Lclinstrm = 'CTX';
                value = 'NURG';
                break;
            case #ACH_CCD:
                Lclinstrm = 'CCD';
                value = 'NURG';
                break;
            case #ACH_PPD:
                Lclinstrm = 'PPD';
                value = 'NURG';
                break;
            case #FSTRPMT:          //SKS#DevOps:21372
                value = 'URNS';
                break;
            case #CHAPS:
            case #INTL:               //SKS#DevOps:21372
                value = 'URGP';
                break;
        }
        if(value)
        {
            nodeSvclvl = nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvclvl, 'Cd', value);

        }
        if(Lclinstrm)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
                
               
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', Lclinstrm);
        }
           
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHAPS:
            case #INTL:
            case #FSTRPMT:
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                break;
            case #CHK:
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, '', mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Cdtr_Nm
    /// </summary>
    /// <param name = "_nodeCdtr"> _nodeCdtr</param>
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        int length;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX:
                length = 16;
                break;
            case #ACH_CCD:
            case #ACH_PPD:
                length = 12;
                break;
            case #FSTRPMT:
            case #CHAPS:
            case #INTL:               //SKS#DevOps:21372
                length = 35;
                break;
        }

        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), length, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
            case #FSTRPMT:
            case #CHAPS:
            case #INTL:
                this.node_PstlAdr(_nodeCdtr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr, mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, mSKS_EFT_FileDetail_VendAddress.BeneCity, 0, mSKS_EFT_FileDetail_VendAddress.BeneAddr2, mSKS_EFT_FileDetail_VendAddress.BeneState, true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAcct
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeCdtrAcctTp;
        boolean    printCdtrAcctTp;
        str         iban, acctNum, value;
        int         len = 34;

        iban    = mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum = mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHAPS:
            case #FSTRPMT:
                iban = '';
                break;
            case #CHK:
                iban = '';
                acctNum = '';
                break;
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                printCdtrAcctTp = true;
                iban = '';
                len = 17;
                break;
        }

        if(iban || acctNum)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
            }
            else
            {
                //              Othr
                nodeOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                  Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, len);
            }
            if(printCdtrAcctTp)
            {
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    value = 'SAV';
                }
                else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::CheckingAccount)
                {
                    value = 'DDA';
                }
                else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::LoanAccount)
                {
                    value = 'LOAN';
                }
                else
                {
                    value = 'GL';
                }

                nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Prtry', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        boolean    printPstlAdr;
        str swift, rtg;
        int length = 35;

        swift = mSKS_EFT_FileDetail.DepSwiftNo;
        rtg   = mSKS_EFT_FileDetail.DepBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                swift     = '';
                length    = 9;
                break;
            case #CHK:
                swift   = '';
                rtg     = '';
                break;
            case #INTL:
                rtg     = '';
                printPstlAdr = true;
                break;
            case #FSTRPMT:
            case #CHAPS:
                printPstlAdr = true;
                break;
        }

        if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
        
            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 11);
            }
            else if(rtg)
            {
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                {
                    //                      MmbId
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, length);
                }
            }
            if(printPstlAdr)
            {
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, '', '', '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_PmtId
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //                  InstrId
        //                  EndToEndId
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePmtId;

        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));


        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),15));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_Id
    /// </summary>
    /// <param name = "_nodeInitgPty">_nodeInitgPty</param>
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str initgpty, initgptyNm;

        initgpty    = SKS_EFT_Format::getCodelookupvalue('Initgpty', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank);
        initgptyNm  = SKS_EFT_Format::getCodelookupvalue('InitgPtySchemeName', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank);
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
                initgpty = mSKS_EFT_FileDetail.FileACHCompanyId;
                break;
        }

        if(Initgpty || initgptyNm)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(Initgpty), 35);

            if(initgptyNm)
            {
                //                          9.1.17: SchmeNm
                nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));

                //                              9.1.18: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', this.CharacterReplacement(initgptyNm));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_Nm
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        int length;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #FSTRPMT:
            case #CHAPS:
            case #INTL:
                length = 140;
                break;
            case #CHK:
                length = 50;
                break;
            default:
                length = 16;
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(msks_eft_filedetail_Bankaccount.WOrdPartyName), length, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
        protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //          Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);
        
        //          PstlAdr
        this.node_PmtInf_Dbtr_PstlAdr(nodeDbtr);
    
        //          Id
        this.node_PmtInf_Dbtr_Id(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_Id
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //-----------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str value;
        int length;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHAPS:
            case #INTL:
            case #FSTRPMT:
                value   = mSKS_EFT_FileDetail_BankAccount.WOrdPartyId;
                length  = 35;
                break;
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                value   = mSKS_EFT_FileDetail.FileACHCompanyId;
                length  = 20;
                break;
        }
        if(value)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', value, length);
        }
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAcct
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr

        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeDbtrAcct;
        XmlElement  nodeDbtrAcctId;
        XmlElement  nodeOthr;
        str         acctNum;
        int         length;

        acctNum = mSKS_EFT_FileDetail.BankBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHAPS:
            case #INTL:
            case #FSTRPMT:
                acctNum = subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.BankBankAcct, 8);
                length  = 14;
                break;
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                length = 17;
                break;
        }
        if(acctNum)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));

            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

            //          Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
            
            //              Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, length);

            //             Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAgt
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeDbtrAgt;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeClrSysMmBId;
        str         swift, rtg;
        int         length;

        swift   = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg     = mSKS_EFT_FileDetail.BankBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                swift = '';
                length = 9;
                break;
            case #CHK:
                swift = '';
                break;
        }
        if(swift || rtg)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));

            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(rtg)
            {
                //              ClrSysMmbId
                nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

                //                  MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', rtg, length);
            }
            else if(swift)
            {
                //              BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        str chrgBr;
    
        chrgBr = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId));

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ChrgBr', chrgBr, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
     /// <summary>
     /// node_CdtTrfTxInf_Cdtr
     /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
    
        //              PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);
    
        //              Id
        this.node_PmtInf_Cdtr_Id(nodeCdtr);
           
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChqInstr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_ChqInstr
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_ChqInstr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.52 ChqInstr
        //              2.54 ChqNb
        //              2.58 DlvryMtd
        //                  2.59: Cd
        //              2.67 MemoField
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeChqInstr;
        XmlElement nodeDlvryMtd;
        str chqNb;
        str value, chqTpvalue;

        chqTpvalue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChqTp', mSKS_EFT_FileDetail.RecId));
                           

        //          2.52 ChqInstr
        nodeChqInstr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('ChqInstr'));

        //              2.53 ChqTp
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqTp', chqTpvalue, 0, false);

        chqNb = SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
    
        //              2.54 ChqNb
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqNb', chqNb, 0, false);

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DlvryMtd', mSKS_EFT_FileDetail.RecId));
        if(value)
        {
            //              2.58 DlvryMtd
            nodeDlvryMtd = nodeChqInstr.appendChild(xmlDoc.createElement('DlvryMtd'));
            
            //                  2.60: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Prtry', value, 0, false);
        }

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqMtrtyDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate, DateSeparator::Hyphen), 0, false);

        //              2.66 FrmsCd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'FrmsCd', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('FrmsCd', mSKS_EFT_FileDetail.RecId)), 35, false);

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf,nodeStrd,nodeRfrdDocInf;
        XmlElement nodeRfrdDocAmt;
        str        invNumbers,invString;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec=true,printStrd = false;
        int     length;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
                select *  from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
                while(invSKS_EFT_FileDetail)
                 
                {
                    if(firstRec)
                    {
                        //          2.98: RmtInf
                        nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                        firstRec = false;
                    }

                    AmountMST   gross = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
                    AmountMST   discount = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
                    AmountMST   NetTotal = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

                    if(invSKS_EFT_FileDetail.InvoiceNumber == '')
                    {
                        // If no invoice number, go to next record
                        next invSKS_EFT_FileDetail;
                        continue;
                    }
                    else
                    {
                        printStrd = true;
                        invString =invSKS_EFT_FileDetail.InvoiceNumber +'|'+ date2str(invSKS_EFT_FileDetail.InvoiceDate, 213, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits2) +'|'+invSKS_EFT_FileDetail.InvoiceTransactionTxt +'|'+ any2str(num2str(gross*-1,0,2,1,0)) +'|'+ any2Str(num2str(discount*-1,0,2,1,0)) +'|'+ any2Str(num2Str(NetTotal*-1,0,2,1,0));
                   
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invString);
                    }
                    next invSKS_EFT_FileDetail;
                
                }
                if(printStrd)
                {
                    while(i<4)
                    {
                        //               2.100: Strd
                        nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
            
                        //              2.101: RfrdDocInf
                        nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
                  
                        this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeRfrdDocInf, mSKS_EFT_FileDetail);
                        i++;
                    }
                }
                i=1;
                break;
            case #INTL:
            case #CHAPS:
                while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                {
                    if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                    {
                        if(firstRec)
                        {
                            //          2.98: RmtInf
                            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                            firstRec = false;
                        }
    
                        //              2.100: Strd
                        nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
    
                        //              2.101: RfrdDocInf
                        nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
                        //              2.107: Number
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', invSKS_EFT_FileDetail.InvoiceNumber);
    
                        //              2.108: RltdDt
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
    
                        //              2.109 RfrdDocAmt
                        nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));

                        this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
                    }
                }
                break;
            case #FSTRPMT:
                invNumbers  = this.getInvoiceNbrs();
                length      = 18;
                break;
            default:
                invNumbers  = this.getInvoiceNbrs();
                length      = 140;
                break;
        }
        if(invNumbers)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 1, strLen(invNumbers)-2), length);
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_RfrdDocInf
    /// </summary>
    /// <param name = "nodeRfrdDocInf">nodeRfrdDocInf</param>
    /// <param name = "invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    protected void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement nodeRfrdDocInf,SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        AmountMST   gross = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   discount = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        AmountMST NetTotal = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        //              2.121: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));

        //                  2.122: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

        if(i==1)
        {
            
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Prtry', 'GROSSTOT');

            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', num2str(gross*-1,0,2,1,0));
        }
        else if(i==2)
        {
                
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Prtry', 'DISCTOT');

            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb',num2str(discount*-1,0,2,1,0));
        }
        else if(i==3)
        {
                
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Prtry', 'NETTOT');

            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', num2Str(NetTotal*-1,0,2,1,0));
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reffered document Amount
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">RfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              DuePyblAmt
        //              DscntApldAmt
        //              CdtNoteAmt
        //              RmtdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        AmountMST   remitted;
        AmountMST   creditNote;
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            remitted = 0;
            creditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross, 0, 2, 1, 0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(discount, 0, 2, 1, 0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            creditNote = 0;

            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1, 0, 2, 1, 0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(discount * -1, 0, 2, 1, 0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    
        if(remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(creditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>