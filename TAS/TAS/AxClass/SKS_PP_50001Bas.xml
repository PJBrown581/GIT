<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_50001Bas</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_50001Bas
{
    SKS_PP_FileNbr gPPFileNbr;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ArchiveFiles</Name>
				<Source><![CDATA[
    void ArchiveFiles(SKS_PP_FileType Mode, FileName LBFileName, SKS_PP_Bank _SKS_PP_Bank, SKS_LB_Bank  _SKS_LB_Bank, SKS_BF_BankIntType _SKS_BF_BankIntType, boolean _autoProcess = false)
    {
        SKS_PP_Setup SKS_PP_Setup;
        SKS_PP_File SKS_PP_File;
        str PathFile;
        str ArchivePathFile;
        Set permissionSet;
        int Pos;
        SKS_PP_StringFormats formats = new SKS_PP_StringFormats();
        SKS_LB_Import sks_LB_Import = new SKS_LB_Import();
        ;
    
        select * from SKS_PP_Setup;
    
        if (Mode == SKS_PP_FileType::SKS_PositivePay)
        {
            select * from SKS_PP_File
                WHERE SKS_PP_File.FileNbr == gPPFileNbr;
    
            PathFile = SKS_PP_File.FilePath + '\\' + SKS_PP_File.FileName;
    
            if (_SKS_PP_Bank.PPArchive == NoYes::Yes
                && ((_SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && _SKS_PP_Bank.PPArchivePath)
                     || (_SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric && _SKS_PP_Bank.PPBankFabricLocation)))
            {
                ttsbegin;
                select forupdate firstonly SKS_PP_Setup;
                if (SKS_PP_Setup.PPArchiveNbr < 999999)
                {
                    SKS_PP_Setup.PPArchiveNbr = SKS_PP_Setup.PPArchiveNbr + 1;
                }
                else
                {
                    SKS_PP_Setup.PPArchiveNbr = 1;
                }
    
                if (SKS_PP_Setup.validateWrite())
                {
                    SKS_PP_Setup.update();
                }
    
                Pos = strFind(SKS_PP_File.FileName, '.', strLen(SKS_PP_File.FileName), -strLen(SKS_PP_File.FileName));
                if (Pos != 0)
                {
                    if(_SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
                    {
                        ArchivePathFile = _SKS_PP_Bank.PPArchivePath + '\\' +
                            substr(SKS_PP_File.FileName, 0, Pos - 1) + '-' + formats.fill_String(6, int2Str(SKS_PP_Setup.PPArchiveNbr), '0', 'L') +
                            substr(SKS_PP_File.FileName, Pos, strlen(SKS_PP_File.FileName));
                    }
                    else // BANKFABRIC
                    {
                        ArchivePathFile = _SKS_PP_Bank.PPBankFabricLocation + '\\' + 'Archive' + '\\' +
                            substr(SKS_PP_File.FileName, 0, Pos - 1) + '-' + formats.fill_String(6, int2Str(SKS_PP_Setup.PPArchiveNbr), '0', 'L') +
                            substr(SKS_PP_File.FileName, Pos, strlen(SKS_PP_File.FileName));
                    }
                }
                else
                {
                    if(_SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
                    {
                        ArchivePathFile = _SKS_PP_Bank.PPArchivePath + '\\' +
                            SKS_PP_File.FileName + '-' + formats.fill_String(6, int2Str(SKS_PP_Setup.PPArchiveNbr), '0', 'L');
                    }
                    else // BankFabric
                    {
                        ArchivePathFile = _SKS_PP_Bank.PPBankFabricLocation + '\\' + 'Archive' + '\\' +
                            SKS_PP_File.FileName + '-' + formats.fill_String(6, int2Str(SKS_PP_Setup.PPArchiveNbr), '0', 'L');
                    }
                }
    
                SKS_EB_FileHub::fileArchive(PathFile, ArchivePathFile, _SKS_BF_BankIntType);
    
                ttscommit;
    
                info("@SKS477" + ': ' + ArchivePathFile );
            }
        }
        else if(Mode == SKS_PP_FileType::SKS_LockBox)
        {
            if (_SKS_LB_Bank.LBArchive == NoYes::Yes && _SKS_LB_Bank.LBArchivePath != '')
            {
                SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
                SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

                if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                {
                    SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
                }
               
                if(SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
                {
                    PathFile = sks_LB_Import.CheckLBFolders(SKS_LB_In_Process::InProcess_FolderName, _SKS_LB_Bank.LBPath);
                    PathFile = PathFile + '\\' + LBFileName;
                }
                else
                {
                    PathFile = sks_LB_Import.CheckLBFolders(SKS_LB_In_Process::InProcess_FolderName, _SKS_LB_Bank.LBBankFabricLocation);
                    PathFile = PathFile + '\\' + LBFileName;
                }

                SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);
                fileHub.runFileInquire(PathFile);
                if (fileHub.attrFileExists())
                {
                    ttsbegin;
                    select forupdate firstonly SKS_PP_Setup;
                    if (SKS_PP_Setup.LBArchiveNbr < 999999)
                    {
                        SKS_PP_Setup.LBArchiveNbr = SKS_PP_Setup.LBArchiveNbr + 1;
                    }
                    else
                    {
                        SKS_PP_Setup.LBArchiveNbr = 1;
                    }
    
                    if (SKS_PP_Setup.validateWrite())
                    {
                        SKS_PP_Setup.update();
                    }
    
                    Pos = strFind(LBFileName, '.',  strLen(LBFileName), -strLen(LBFileName));
                    if (Pos != 0)
                    {
                        ArchivePathFile = _SKS_LB_Bank.LBArchivePath + '\\' +
                            substr(LBFileName, 0, Pos - 1) + '-' + formats.fill_String(6, int2Str(SKS_PP_Setup.LBArchiveNbr), '0', 'L') +
                            substr(LBFileName, Pos, strlen(LBFileName));
                    }
                    else
                    {
                        ArchivePathFile = _SKS_LB_Bank.LBArchivePath + '\\' +
                            LBFileName + '-' +formats.fill_String(6, int2Str(SKS_PP_Setup.LBArchiveNbr), '0', 'L');
                    }
    
                    // Bug 7 should never happen, but warn if the destination file exists
                    fileHub.runFileInquire(ArchivePathFile);
                    if (!fileHub.attrFileExists())
                    {
                        fileHub.setFileName(PathFile);
                        fileHub.parmThrowErrorIfException(false);
                        fileHub.runFileCopyTo(ArchivePathFile);
                        if(fileHub.errorHasException())
                        {
                            error(fileHub.errorException());
                        }
                    }
                    else
                    {
                        warning("@SKS860" + ': ' + ArchivePathFile);
                    }
                    ttscommit;
                }
                else
                {
                    warning("@SKS861" + ': ' + PathFile);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Delete_Exit</Name>
				<Source><![CDATA[
    void Delete_Exit()
    {
        SKS_PP_FileDetail SKS_PP_FileDetail;

        while select forupdate SKS_PP_FileDetail
            where SKS_PP_FileDetail.FileNbr == gPPFileNbr
        {
            SKS_PP_FileDetail.KeepDelete = SKS_PP_FileStatus::FileCreated;
            SKS_PP_FileDetail.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SKS_PP_FileNbr FileNbr)
    {
        gPPFileNbr = FileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_PP_File_KeepDelete</Name>
				<Source><![CDATA[
    //    '===============================================================================
    //    ' update SKS_PP_File
    //    '
    //    ' Parameters
    //    '   Keep                I   True - Being called as part of Keep
    //    '                       I   False - Being called as part of Delete
    //    '   KeepDeleteStatus    I   Status to set
    
    void Update_SKS_PP_File_KeepDelete(Boolean _Keep, SKS_PP_FileStatus _KeepDeleteStatus)
    {
        SKS_PP_File SKS_PP_File;
        ttsbegin;
    
        // Update SKS_PP_File
        while select forupdate SKS_PP_File
            where SKS_PP_File.FileNbr == gPPFileNbr
        {
            If (_Keep)
            {
                SKS_PP_File.TransmitDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
            SKS_PP_File.KeepDelete = _KeepDeleteStatus;
            SKS_PP_File.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_PP_File_Ret_GoodRecs</Name>
				<Source><![CDATA[
    public void Update_SKS_PP_File_Ret_GoodRecs(SKS_PP_GoodRecs _SKS_PP_GoodRecs)
    {
        SKS_PP_File locSKS_PP_File;
        ttsbegin;
        select forupdate locSKS_PP_File where locSKS_PP_File.FileNbr == gPPFileNbr;
        locSKS_PP_File.Ret_GoodRecs = _SKS_PP_GoodRecs;
        locSKS_PP_File.update();
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>