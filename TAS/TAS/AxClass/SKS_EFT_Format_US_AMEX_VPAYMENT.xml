<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_AMEX_VPAYMENT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_AMEX_VPAYMENT extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_AMEX_VPAYMENT extends SKS_EFT_Format
{
    #define.FormatVersion('20220615')
    int mRecordCount;
    int mTransCount;
    int mInvCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
    
        //  Header record
        this.rec_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            this.getSKS_EFT_FileFormatPaymSpec();

            //Transaction Record
            this.rec_Trans();
    
            //Invoice Record
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_Invoice(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
    
        //Trailer Record
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    public boolean rec_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                     Length      Position
        // 1    TRANS-CD                               4       (  1 -   4)
        // 2    HEAD-DATE                             8       (  5 -  12)
        // 3    SN Grouping Indicator               1       ( 13 -  13)
        // 4    FILLER                              887       ( 14 -  900)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value;

        // 1    TRANS-CD                               4       (  1 -   4)
        sb.Append('0101');
    
        // 2    HEAD-DATE                             8       (  5 -  12)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    
        // 3    SN Grouping Indicator               1       ( 13 -  13)
        value = SKS_EFT_Format::getCodelookupvalue('SNGrpngIndicator', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(value), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 4    FILLER                              887       ( 14 -  900)
        sb.Append(SKS_PP_StringFormats::strFill(887, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Invoice</Name>
				<Source><![CDATA[
    boolean rec_Invoice(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //Nbr   Description              Length          Position
        //1        TRANS-CD                    4             (1     - 4)
        //2        INVOICE NUMBER                35             (5     - 39)
        //3        INVOICE AMOUNT                11             (40 - 50)
        //4        Credit Indicator            50             (51 - 100)
        //5        MESSAGE 2                    50             (101- 150)
        //6        MESSAGE 3                    50             (151- 200)
        //7        MESSAGE 4                    50             (201- 250)
        //8        MESSAGE 5                    50             (251- 300)
        //9        MESSAGE 6                    50             (301- 350)
        //10       MESSAGE 7                    50             (351- 400)
        //11       FILLER                        500             (401- 900)

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if(_invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            mRecordCount++;
            mInvCount++;

            //1        TRANS-CD                    4             (1     - 4)
            sb.Append('0301');

            //2        INVOICE NUMBER                35             (5     - 39)
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //3        INVOICE AMOUNT                11             (40 - 50)
            sb.Append(SKS_PP_StringFormats::strFill(11, SKS_PP_StringFormats::strMoney(this.getPositiveAmount(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 11), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            //4        Credit Indicator            50             (51 - 100)
            if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0)
            {
                sb.Append(SKS_PP_StringFormats::strFill(50, 'Credit', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }

            //5        MESSAGE 2                    50             (101- 150)
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //6        MESSAGE 3                    50             (151- 200)
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //7        MESSAGE 4                    50             (201- 250)
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //8        MESSAGE 5                    50             (251- 300)
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //9        MESSAGE 6                    50             (301- 350)
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //10    MESSAGE 7                    50             (351- 400)
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //11    FILLER                        500             (401- 900)
            sb.Append(SKS_PP_StringFormats::strFill(500, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    private boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1        TRANS-CD                    4             (1     - 4)
        sb.Append('0999');

        //2        TYPE-201-TOTAL                11             (5     - 15)
        sb.Append(SKS_PP_StringFormats::strFill(11, int2str(mTransCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3        TYPE-222-TOTAL                11             (16 - 26)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4        TYPE-301-TOTAL                11             (27 - 37)
        sb.Append(SKS_PP_StringFormats::strFill(11, int2str(mInvCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5        TOTAL RECORDS                11             (38 - 48)
        sb.Append(SKS_PP_StringFormats::strFill(11, int2str(mRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //6     FILLER                        852             (49- 900)
        sb.Append(SKS_PP_StringFormats::strFill(852, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trans</Name>
				<Source><![CDATA[
    public boolean rec_Trans()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        VendTable               vendTable;
        DirPartyContactInfoview dirPartyContactInfoview;
        str             transType, suppNotificationInd, value;
        str             benMailHandling, address;
        mRecordCount++;
        mtransCount++;

        // 1    TRANS-CD                            4        ( 1    - 4)
        sb.Append('0201');

        // 2    TRANSACTION TYPE                    1        ( 5 - 5)
        transType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TransType', mSKS_EFT_FileDetail.RecId));
        sb.Append(transType);

        // 3    Billing Account ID/Funding account Name    15        ( 6 - 20)
        value = SKS_EFT_Format::getCodelookupvalue('BillingAccountId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(SKS_PP_StringFormats::strFill(15, value, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    STATUS UPDATE                        1        ( 21 - 21)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Token Account Number, or proxy Account Number 16        ( 22 - 37)
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Token Account Expiration Date, or vPayment Account Expiration Date    6        ( 38 - 43)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7    ERROR NUMBER                        6        ( 44 - 49)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    ERROR DESCRIPTION                    35        ( 50 - 84)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Filler (for future use)                8        ( 85 - 92)
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10    VALIDATION CODE                        15        ( 93 - 107)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11    SUPPLIER NOTIFICATION  INDICATOR    1        ( 108 - 108)
        suppNotificationInd = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SuppNotificationInd', mSKS_EFT_FileDetail.RecId));
        sb.Append(suppNotificationInd);

        // 12    SUPPLIER TOKEN  INDICATOR            1        ( 109 - 109)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 13    FILLER ( For future use)            8        ( 110 - 117)
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 14    MAINTAINED BY                        15        ( 118 - 132)
        sb.Append(SKS_PP_StringFormats::strFill(15, mSKS_EFT_FileFormatPaymSpec.PaymSpecName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 15    UNIQUE IDENTIFIER                    15        ( 133 - 147)
        sb.Append(SKS_PP_StringFormats::strFill(15, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 16    PRE-AUTH-AMT                        11        ( 148 - 158)
        sb.Append(SKS_PP_StringFormats::strFill(11, SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 11), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 17    DATE-ENTERED                        8        ( 159 - 166)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        // 18    EXPIRATION-DATE                        8        ( 167 - 174)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(30 + mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        // 19    CLIENT-TEXT-1                        15        ( 175 - 189)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 20    CLIENT-TEXT-2                        15        ( 190 - 204)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 21    CLIENT-TEXT-3                        15        ( 205 - 219)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 22    SUPPLIER NAME                        40        ( 220 - 259)
        if(suppNotificationInd == 'Y')
        {
            sb.Append(SKS_PP_StringFormats::strFill(40, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        // 23    SUPPLIER MAIN PHONE                    15        ( 260 - 274)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 24    SUPPLIER CONTACT PHONE                15        ( 275 - 289)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 25    SUPPLIER ID                            30        ( 290 - 319)
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 26    SUPPLIER CONTACT NAME                50        ( 320 - 369)
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 27    REMIT METHOD                        2        ( 370 - 371)
        benMailHandling = SKS_EFT_Format::getCodelookupvalue('RmtLctnMtd', mSKS_EFT_FileDetail.RecId);
        sb.Append(SKS_PP_StringFormats::strFill(2, benMailHandling, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        vendTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

        // 28    SUPPLIER FAX                         14        ( 372 - 385)
        if(benMailHandling == 'FX')
        {
            
            if(mSKS_EFT_FileDetail_VendAddress.Fax)
            {
                address = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.Fax);
            }
            sb.Append(SKS_PP_StringFormats::strFill(14, address, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 29    SUPPLIER EMAIL                        50        ( 386 - 435)
        if(benMailHandling == 'EM')
        {
            
            if(mSKS_EFT_FileDetail_VendAddress.Locator)
            {
                address = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.Locator);
            }
            sb.Append(SKS_PP_StringFormats::strFill(50, address, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        // 30    T-MESSAGE 1                            50        ( 436 - 485)
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 31    T-MESSAGE 2                            50        ( 486 - 535)
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 32    CLIENT NAME                            50        ( 536 - 585)
        sb.Append(SKS_PP_StringFormats::strFill(50, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 33    CLIENT EMAIL ADDRESS                50        ( 586 - 635)
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 34    CLIENT CONTACT NAME                    50        ( 636 - 685)
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));


        if(suppNotificationInd == 'Y')
        {
            // 35    CLIENT CONTACT PHONE                50        ( 686 - 735)
            sb.Append(SKS_PP_StringFormats::strFill(50, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClientContactPhone', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 36    BILLING NAME                        50        ( 736 - 785)
            sb.Append(SKS_PP_StringFormats::strFill(50, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 37    Security Code                        4        ( 786 - 789)
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 38    BILLING ADDRESS                        111        ( 790 - 900)
        if(suppNotificationInd == 'Y')
        {
            if(mSKS_EFT_FileDetail_VendAddress.BeneAddr)
            {
                address = mSKS_EFT_FileDetail_VendAddress.BeneAddr;
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneAddr2)
            {
                address += ',' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneCity)
            {
                address += ',' + mSKS_EFT_FileDetail_VendAddress.BeneCity;
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneState)
            {
                address += ',' + mSKS_EFT_FileDetail_VendAddress.BeneState;
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal)
            {
                address += ',' + mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)
            {
                address += ',' + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
            }
            sb.Append(SKS_PP_StringFormats::strFill(111, this.CharacterReplacement(address), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(111, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
        join mSKS_EFT_FileDetail_VendAddress
        join mSKS_EFT_FileDetail_BankAccount
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
                mSKS_EFT_FileDetail_BankAccount.RefRecId == mSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>