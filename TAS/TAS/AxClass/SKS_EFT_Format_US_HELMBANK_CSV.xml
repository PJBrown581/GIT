<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_HELMBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_HELMBANK_CSV  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_HELMBANK_CSV  extends SKS_EFT_Format
{
    #define.FormatVersion('20210712')
    #define.PAYMENT('PAYMENT')
    #define.Separator(',')
    
    BankAccountTable        mBankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get Bank account
            mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);

            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Company identification record
            this.rec_TransactionFile();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TransactionFile</Name>
				<Source><![CDATA[
    public boolean rec_TransactionFile()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //  A    Originator account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 15));

        //  B   Amount of the transfer
        if (mSKS_EFT_FileDetail.PaymentCurrencyCode == 'USD')
        {
            sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0)));
        }
        else
        {
            sb.Append(this.wrapField('0'));
        }

        //  C   Currency Code
        sb.Append(this.wrapField(mBankAccountTable.CurrencyCode == 'USD' ? mBankAccountTable.CurrencyCode : ''));

        //  D   Amount of foreign currency
        if (mSKS_EFT_FileDetail.PaymentCurrencyCode != 'USD')
        {
            sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0)));
        }
        else
        {
            sb.Append(this.wrapField('0'));
        }

        //  E   Foreign Currency Code
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'USD' ? '' : mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //  F   Internal Banking Code
        sb.Append(this.wrapField('CTP'));

        //  G   Internal Bank Code
        sb.Append(this.wrapField('0'));

        //  H   Contact information
        sb.Append(this.wrapField(''));

        //  I   Payment purpose
        sb.Append(this.wrapField('0'));

        //  J   Name of the intermediary bank
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankName, 35));

        //  K   Route Code
        if (mSKS_EFT_VendorPaym.WIntBankId)
        {
            sb.Append(this.wrapField('F'));
        }
        else if(mSKS_EFT_VendorPaym.WIntBankSwift)
        {
            sb.Append(this.wrapField('B'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        // L    ABA/SWIFT of the intermediary bank
        if (mSKS_EFT_VendorPaym.WIntBankId)
        {
            sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankId, 34));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankSwift, 34));
        }

        //  M    Address of the intermediary bank
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankAddr, 35));
        
        // N    Address of the intermediary bank
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankAddr2, 35));
        
        // O    Address of the intermediary bank
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankCity, 35));

        // P Does not apply
        sb.Append(this.wrapField(''));

        // Q    Country Code of intermediary Bank
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId)));

        // R    Name of Beneficiary Bank
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBenBankName, 35));

        //  S   Route Code
        if (mSKS_EFT_FileDetail.DepBankTransit)
        {
            sb.Append(this.wrapField('F'));
        }
        else if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            sb.Append(this.wrapField('B'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        // T   Beneficiary Bank Account/ABA/SWIFT number
        if (mSKS_EFT_FileDetail.DepBankTransit)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit,34));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo,34));
        }

        // U   Address of Beneficiary Bank
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBenBankAddr,35));

        // V   Address of Beneficiary Bank
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBenBankCity,35));

        // W   Address of Beneficiary Bank
        sb.Append(this.wrapField(''));

        // X   Beneficiary Bank Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)));

        // Y   Name of transfer beneficiary
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBeneName,35));

        // Z    Account Identifier Code
        sb.Append(this.wrapField('D'));

        // AA   Beneficiary Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct,34));

        //  AB  Beneficiary's Address
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBeneAddr,35));
        
        //  AC  Beneficiary's Address
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBeneAddr2,35));
        
        //  AD  Beneficiary's Address
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBeneCity,35));

        //  AE  Beneficiary Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId)));

        // Information to the beneficiary on payment
        sb.Append(this.wrapField(''));

        // Information to the beneficiary on payment
        sb.Append(this.wrapField(''));

        // Information to the beneficiary on payment
        sb.Append(this.wrapField(''));

        // Information to the beneficiary on payment
        sb.Append(this.wrapField(''));

        // REFERENCIA INTERNA DEL ORIGINADOR
        sb.Append(this.wrapField(''));

        // Does not apply
        sb.Append(this.wrapField(''));

        // Does not apply
        sb.Append(this.wrapField(''));

        // Does not apply
        sb.Append(this.wrapField(''));

        // Does not apply
        sb.Append(this.wrapField(''));

        // Does not apply
        sb.Append(this.wrapField(''));

        // Does not apply
        sb.Append('');

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;
        ;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>