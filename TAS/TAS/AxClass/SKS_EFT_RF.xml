<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF
{
    #define.Archive('Archive')
    #define.formatId('formatId')
    #define.formatClass('formatClass')
    str mErrorText;
    boolean  mbankFabricInt;                     //bankfabric
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendFileNbr</Name>
				<Source><![CDATA[
    private str appendFileNbr(str _PathFileName,SKS_EFT_RF_AP_NextFileNumber _SKS_EFT_RF_AP_NextFileNumber )
    {
        str rtnval = '';
        System.String locPath;
        System.Text.StringBuilder locFileNameBuilder;
        System.String locFileExtension;

        locFileNameBuilder = new System.Text.StringBuilder();

        locPath = System.IO.Path::GetDirectoryName(_PathFileName);
        locFileNameBuilder.Append(System.IO.Path::GetFileNameWithoutExtension(_PathFileName));
        if(System.IO.Path::HasExtension(_PathFileName))
        {
            locFileExtension = System.IO.Path::GetExtension(_PathFileName);
        }

        locFileNameBuilder.Append('-');
        locFileNameBuilder.Append(_SKS_EFT_RF_AP_NextFileNumber);

        if(System.IO.Path::HasExtension(_PathFileName))
        {
            locFileNameBuilder.Append(locFileExtension);
        }

        rtnval = System.IO.Path::Combine(locPath, locFileNameBuilder.ToString());

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicates</Name>
				<Source><![CDATA[
    private boolean checkDuplicates(Filename _FileName, utcdatetime _UtcDateTimeModified)
    {
        boolean rtnval;
        SKS_EB_FilePath locSKS_EB_Filename;
        SKS_EFT_InboundFile locSKS_EFT_InboundFile;
        System.DateTime locSystemDateTime;
        utcDateTime locModifiedDateTimeMIN, locModifiedDateTimeMAX;


        locSystemDateTime = _UtcDateTimeModified;

        // <17481>
        try
        {               
            locModifiedDateTimeMIN  = locSystemDateTime.AddSeconds(-1);
        }
        catch
        {
            locModifiedDateTimeMIN  = locSystemDateTime;
        }
        // </17481>
        
        locModifiedDateTimeMAX  = locSystemDateTime.AddSeconds(1);

        locSKS_EB_Filename = System.IO.Path::Combine(
                                System.IO.Path::Combine(System.IO.Path::GetDirectoryName(_FileName),
                                                        #Archive),
                                System.IO.Path::GetFileNameWithoutExtension(_FileName));

        while select FilePathName, recid from locSKS_EFT_InboundFile
            where locSKS_EFT_InboundFile.FileDateTime >= locModifiedDateTimeMIN
            && locSKS_EFT_InboundFile.FileDateTime <= locModifiedDateTimeMAX
        {
            if(strScan(locSKS_EFT_InboundFile.FilePathName, locSKS_EB_Filename,1,strLen(locSKS_EFT_InboundFile.FilePathName)))
            {
                rtnval = true;
            }
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFileAgainstFormat</Name>
				<Source><![CDATA[
    private str checkFileAgainstFormat(str _filename, str _formatId, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        ExecutePermission perm;
        SysDictClass locSysDictClass;
        Object locClassInstance;
        str locClassName = '';
        str locMatchedClass = '';

        System.Text.StringBuilder locsbClassName = new System.Text.StringBuilder();

        locsbClassName.Append('SKS_EFT_RF_Format_');
        locsbClassName.Append(_formatId);
        locsbClassName.Replace('-', '_');
        locClassName = locsbClassName.ToString();

        perm = new ExecutePermission();
        perm.assert();

        locSysDictClass = new SysDictClass(className2Id(LocClassName));
        locClassInstance = locSysDictClass.makeObject(); // Instantiate class
        locMatchedClass = locSysDictClass.callObject('getFormatId', locClassInstance, _filename, _serverPath,_sks_BF_BankIntType); // Run
        mErrorText = locSysDictClass.callObject('getErrorText', locClassInstance);

        CodeAccessPermission::revertAssert();


        return locMatchedClass;



    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    private SKS_EFT_RF_File getFile(str _FormatClassName, str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        SKS_EFT_RF_File rtnval;
        ExecutePermission perm;
        SysDictClass locSysDictClass;
        Object locClassInstance;

        perm = new ExecutePermission();
        perm.assert();

        locSysDictClass = new SysDictClass(className2Id(_FormatClassName));
        locClassInstance = locSysDictClass.makeObject(); // Instantiate class
        rtnval = locSysDictClass.callObject('getFile', locClassInstance, _filename, _serverPath, _sks_BF_BankIntType); // Run
        mErrorText = locSysDictClass.callObject('getErrorText', locClassInstance);

        locSysDictClass = null;
        locClassInstance = null;
        CodeAccessPermission::revertAssert();
        if(mErrorText != '')
        {
            //File Creation Failed
            error(mErrorText);
            //Clear List
            rtnval = null;
        }

        return rtnval;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    private struct getFormatId(SKS_EFT_RF_DirProfile _SKS_EFT_RF_DirProfile, str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        str locFormatID = '';
        struct locFormatProfile;
        System.Text.StringBuilder locErrorMessage = new System.Text.StringBuilder();

        //reset the fileformatlist in case it was left in a non-start position
        _SKS_EFT_RF_DirProfile.resetFormatGroupList();
        //priming read
        locFormatProfile = _SKS_EFT_RF_DirProfile.getNextFormatProfile();
        while(strLen(locFormatID) == 0 && locFormatProfile != null)
        {
            if(locFormatProfile != null)
            {
                locFormatID = this.checkFileAgainstFormat(_filename, locFormatProfile.value(#formatId), _serverPath,_sks_BF_BankIntType);
            }
            if(strLen(locFormatID) == 0)
            {
                locFormatProfile = _SKS_EFT_RF_DirProfile.getNextFormatProfile();
            }
            else
            {
                locFormatProfile.value(#formatClass, locFormatID);
            }
        }
        if(strLen(locFormatID) == 0)
        {
            _SKS_EFT_RF_DirProfile.resetFormatGroupList();
            //LABEL:  Unable to find inbound eft format for file:  %1\n
            locErrorMessage.Append(strFmt(strFmtLB("@SKS2865"), _filename));
            //priming read
            locFormatProfile = _SKS_EFT_RF_DirProfile.getNextFormatProfile();
            while(locFormatProfile != null)
            {
                //LABEL:  Format attempted:  %1\n
                locErrorMessage.Append(strFmt(strFmtLB("@SKS2866"), locFormatProfile.value(#formatId)));
                locFormatProfile = _SKS_EFT_RF_DirProfile.getNextFormatProfile();
            }
            mErrorText =  locErrorMessage.ToString();
        }
        //reset the fileformatlist so that it is not left in a non-start position
        _SKS_EFT_RF_DirProfile.resetFormatGroupList();

        return locFormatProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProcessAllDirectories</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPCheckInsertMethodInLoop','This cannot be a Record Insert List.  You have to insert these as you go, because the lines depend on this file being there.')]
    public void ProcessAllDirectories(SKS_EB_CommProcess _SKS_EB_CommProcess, boolean _serverPath)
    {
        #define.Empty('<Empty>')
        #define.Error('Error')
        
        SKS_EB_FileHub locSKS_EB_FileHub; // = SKS_EB_FileHub::construct();
        int TempInt; //used to convert System.int32 to int.
        List locListDirectoriesToProcess = new List(Types::Class);
        List locListFilesToProcess;
        ListEnumerator locDirectoriesToProcessEnumerator,locFilesToProcessEnumerator;
        SKS_EFT_InboundFile locSKS_EFT_InboundFile;
        SKS_EFT_RF_SentFile locSKS_EFT_RF_SentFile;
        SKS_EFT_RF_Transaction locSKS_EFT_RF_Transaction;
        str locFilename;
        str locDestPath;
        //str locBFFileName;                          //bankfabric
        SKS_BF_BankIntType  sks_BF_BankIntType;     //bankfabric
        SKS_EB_FileStorage sks_eb_filestorage;      //bankfabric
        System.Text.StringBuilder locErrorMessage, locWarningMessage;
        SKS_EFT_RF_DirProfile locSKS_EFT_RF_DirProfile;
        SKS_EFT_RF_File locSKS_EFT_RF_File;
        utcDateTime locFileDateTime;
        //tables
        SKS_EFT_Bank locSKS_EFT_Bank;
        SKS_EFT_FileFormat locSKS_EFT_FileFormat;
        SKS_EFT_InboundFileErrorLog locSKS_EFT_InboundFileErrorLog;
        SKS_EFT_InboundFileLine locSKS_EFT_InboundFileLine;
        VendPaymModeTable locVendPaymModeTable;
        RecordInsertList    locRecordInsertList_FileLines;
        //structs
        struct locFormatIDandKeyNumber;
        SKS_EFTAR_Bank locSKS_EFTAR_Bank;
        CustPaymModeTable locCustPaymModeTable;
        str prevPath = '';
        //BTB
        SKS_BTB_PaymModeTable locSKS_BTB_PaymModeTable;
        SKS_EFTBTB_Bank locSKS_EFTBTB_Bank;
        SKS_EFTCNP_Bank locSKS_EFTCNP_Bank;

        select firstonly sks_eb_filestorage;  //Bankfabric
        mbankFabricInt = (sks_eb_filestorage.StorageOption_APEFTFXDD == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue) ? true : false;

        if (mbankFabricInt)
        {
            locSKS_EB_FileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType::BankFabric);
            sks_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }
        else
        {
            locSKS_EB_FileHub = SKS_EB_FileHub::construct();
            sks_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;
        }

        locRecordInsertList_FileLines = new RecordInsertList(locSKS_EFT_InboundFileLine.TableId);
        if (_SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT)
        {
            if (mbankFabricInt)
            {
                while select crosscompany BankAccountId,SKS_DD_InboundFileLoc,ARBankFabricInboundFileLoc, DataAreaId from locSKS_EFTAR_Bank
                    join locCustPaymModeTable
                    join SKS_DD_InboundFileGroupId, FormatId from locSKS_EFT_FileFormat
                    order by locSKS_EFTAR_Bank.dataAreaId, locSKS_EFTAR_Bank.ARBankFabricInboundFileLoc
                    where locSKS_EFTAR_Bank.PaymMode == locCustPaymModeTable.PaymMode
                        && locCustPaymModeTable.SKS_EFT_FormatId == locSKS_EFT_FileFormat.FormatId
                        && locSKS_EFTAR_Bank.SKS_DD_INCommId == _SKS_EB_CommProcess.CommID
                {
                    if (locSKS_EFTAR_Bank.ARBankFabricInboundFileLoc)
                    {
                        if(prevPath != locSKS_EFTAR_Bank.ARBankFabricInboundFileLoc)
                        {                        
                            locSKS_EFT_RF_DirProfile = SKS_EFT_RF::createARDirProfile(mbankFabricInt, locSKS_EFTAR_Bank.ARBankFabricInboundFileLoc, locSKS_EFTAR_Bank.company(), locSKS_EFT_FileFormat.SKS_DD_InboundFileGroupId);
                            
                            if(locSKS_EFT_RF_DirProfile)
                            {
                                prevPath = locSKS_EFTAR_Bank.ARBankFabricInboundFileLoc;
                                locListDirectoriesToProcess.addEnd(locSKS_EFT_RF_DirProfile);
                            }
                        }
                    }
                    else
                    {
                        info(strFmt("@SKS:SKGBFInboundFileLocationMissing",locSKS_EFTAR_Bank.DataAreaId));
                    }
                }
            }
            else
            {
                while select crosscompany BankAccountId,SKS_DD_InboundFileLoc, DataAreaId from locSKS_EFTAR_Bank
                    join locCustPaymModeTable
                    join SKS_DD_InboundFileGroupId, FormatId from locSKS_EFT_FileFormat
                    order by locSKS_EFTAR_Bank.dataAreaId, locSKS_EFTAR_Bank.SKS_DD_InboundFileLoc
                    where locSKS_EFTAR_Bank.PaymMode == locCustPaymModeTable.PaymMode
                        && locCustPaymModeTable.SKS_EFT_FormatId == locSKS_EFT_FileFormat.FormatId
                        && locSKS_EFTAR_Bank.SKS_DD_INCommId == _SKS_EB_CommProcess.CommID
                {
                    if (locSKS_EFTAR_Bank.SKS_DD_InboundFileLoc)
                    {
                        if(prevPath != locSKS_EFTAR_Bank.SKS_DD_InboundFileLoc)
                        {
                            locSKS_EFT_RF_DirProfile = SKS_EFT_RF::createARDirProfile(mbankFabricInt, locSKS_EFTAR_Bank.SKS_DD_InboundFileLoc, locSKS_EFTAR_Bank.company(), locSKS_EFT_FileFormat.SKS_DD_InboundFileGroupId);
                            
                            if(locSKS_EFT_RF_DirProfile)
                            {
                                prevPath = locSKS_EFTAR_Bank.SKS_DD_InboundFileLoc;
                                locListDirectoriesToProcess.addEnd(locSKS_EFT_RF_DirProfile);
                            }
                        }
                    }
                    else
                    {
                        info(strFmt("@SKS:SKGBFInboundFileLocationMissing",locSKS_EFTAR_Bank.DataAreaId));
                    }
                }
            }
        }
        else if (_SKS_EB_CommProcess.Module == SKS_EB_Module::CustomerReimbursements)
        {
            if (mbankFabricInt)
            {
                while select crosscompany  BankAccountId,CNPInboundFileLoc, CNPBankFabricInboundFileLocation, DataAreaId from locSKS_EFTCNP_Bank
                    join locCustPaymModeTable
                    join SKS_CNP_InboundFileGroupId, FormatId from locSKS_EFT_FileFormat
                    order by locSKS_EFTCNP_Bank.dataAreaId, locSKS_EFTCNP_Bank.CNPBankFabricInboundFileLocation
                    where locSKS_EFTCNP_Bank.PaymMode == locCustPaymModeTable.PaymMode
                        && locCustPaymModeTable.SKS_CNP_FormatId == locSKS_EFT_FileFormat.FormatId
                        && locSKS_EFTCNP_Bank.InboundCommID == _SKS_EB_CommProcess.CommID
                {
                    if (locSKS_EFTCNP_Bank.CNPBankFabricInboundFileLocation)
                    {
                        if(prevPath != locSKS_EFTCNP_Bank.CNPBankFabricInboundFileLocation)
                        {
                            prevPath = locSKS_EFTCNP_Bank.CNPBankFabricInboundFileLocation;
                            locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(locSKS_EFTCNP_Bank.CNPBankFabricInboundFileLocation, locSKS_EFTCNP_Bank.company(), locSKS_EFT_FileFormat.SKS_CNP_InboundFileGroupId);
                            locListDirectoriesToProcess.addEnd(locSKS_EFT_RF_DirProfile);
                        }
                    }
                    else
                    {
                        info(strFmt("@SKS:SKGBFInboundFileLocationMissing",locSKS_EFTBTB_Bank.DataAreaId));
                    }
                }
            }
            else
            {
                while select crosscompany CNPInboundFileLoc, DataAreaId from locSKS_EFTCNP_Bank
                    join locCustPaymModeTable
                    join SKS_CNP_InboundFileGroupId, FormatId from locSKS_EFT_FileFormat
                    order by locSKS_EFTCNP_Bank.dataAreaId, locSKS_EFTCNP_Bank.CNPInboundFileLoc
                    where locSKS_EFTCNP_Bank.PaymMode == locCustPaymModeTable.PaymMode
                        && locCustPaymModeTable.SKS_CNP_FormatId == locSKS_EFT_FileFormat.FormatId
                        && locSKS_EFTCNP_Bank.InboundCommID == _SKS_EB_CommProcess.CommID
                {
                    if(prevPath != locSKS_EFTCNP_Bank.CNPInboundFileLoc)
                    {
                        prevPath = locSKS_EFTCNP_Bank.CNPInboundFileLoc;

                        locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(locSKS_EFTCNP_Bank.CNPInboundFileLoc, locSKS_EFTCNP_Bank.company(), locSKS_EFT_FileFormat.SKS_CNP_InboundFileGroupId);
                        locListDirectoriesToProcess.addEnd(locSKS_EFT_RF_DirProfile);
                    }
                    else
                    {
                        info(strFmt("@SKS:SKGBFInboundFileLocationMissing",locSKS_EFTCNP_Bank.DataAreaId));
                    }
                }
            }
        }
        else if (_SKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer)
        {
            if (mbankFabricInt)
            {
                while select crosscompany  BankAccountId,BTBInboundFileLoc, BTBBankFabricInboundFileLocation, DataAreaId from locSKS_EFTBTB_Bank
                    join locSKS_BTB_PaymModeTable
                    join SKS_BTB_InboundFileGroupId, FormatId from locSKS_EFT_FileFormat
                    order by locSKS_EFTBTB_Bank.dataAreaId, locSKS_EFTBTB_Bank.BTBBankFabricInboundFileLocation
                    where locSKS_EFTBTB_Bank.PaymMode == locSKS_BTB_PaymModeTable.PaymMode
                        && locSKS_BTB_PaymModeTable.FormatId == locSKS_EFT_FileFormat.FormatId
                        && locSKS_EFTBTB_Bank.InboundCommID == _SKS_EB_CommProcess.CommID
                {
                    if (locSKS_EFTBTB_Bank.BTBBankFabricInboundFileLocation)
                    {
                        if(prevPath != locSKS_EFTBTB_Bank.BTBBankFabricInboundFileLocation)
                        {
                            prevPath = locSKS_EFTBTB_Bank.BTBBankFabricInboundFileLocation;
                            locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(locSKS_EFTBTB_Bank.BTBBankFabricInboundFileLocation, locSKS_EFTBTB_Bank.company(), locSKS_EFT_FileFormat.SKS_BTB_InboundFileGroupId);
                            locListDirectoriesToProcess.addEnd(locSKS_EFT_RF_DirProfile);
                        }
                    }
                    else
                    {
                        info(strFmt("@SKS:SKGBFInboundFileLocationMissing",locSKS_EFTBTB_Bank.DataAreaId));
                    }
                }
            }
            else
            {
                while select crosscompany BTBInboundFileLoc, DataAreaId from locSKS_EFTBTB_Bank
                    join locSKS_BTB_PaymModeTable
                    join SKS_BTB_InboundFileGroupId, FormatId from locSKS_EFT_FileFormat
                    order by locSKS_EFTBTB_Bank.dataAreaId, locSKS_EFTBTB_Bank.BTBInboundFileLoc
                    where locSKS_EFTBTB_Bank.PaymMode == locSKS_BTB_PaymModeTable.PaymMode
                        && locSKS_BTB_PaymModeTable.FormatId == locSKS_EFT_FileFormat.FormatId
                        && locSKS_EFTBTB_Bank.InboundCommID == _SKS_EB_CommProcess.CommID
                {
                    if(prevPath != locSKS_EFTBTB_Bank.BTBInboundFileLoc)
                    {
                        prevPath = locSKS_EFTBTB_Bank.BTBInboundFileLoc;

                        locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(locSKS_EFTBTB_Bank.BTBInboundFileLoc, locSKS_EFTBTB_Bank.company(), locSKS_EFT_FileFormat.SKS_BTB_InboundFileGroupId);
                        locListDirectoriesToProcess.addEnd(locSKS_EFT_RF_DirProfile);
                    }
                    else
                    {
                        info(strFmt("@SKS:SKGBFInboundFileLocationMissing",locSKS_EFTBTB_Bank.DataAreaId));
                    }
                }
            }
        }
        else
        {
            if (mbankFabricInt)
            {
                while select crosscompany  BankAccountId,InboundFileLoc, APBankFabricInboundFileLocation, DataAreaId from locSKS_EFT_Bank
                    join locVendPaymModeTable
                    join InboundFileGroupId from locSKS_EFT_FileFormat
                    order by locSKS_EFT_Bank.dataAreaId, locSKS_EFT_Bank.APBankFabricInboundFileLocation
                    where locSKS_EFT_Bank.PaymMode == locVendPaymModeTable.PaymMode
                        && locVendPaymModeTable.SKS_EFT_FormatId == locSKS_EFT_FileFormat.FormatId
                        && locSKS_EFT_Bank.InboundCommID == _SKS_EB_CommProcess.CommID
                {
                    if (locSKS_EFT_Bank.APBankFabricInboundFileLocation)
                    {
                        if(prevPath != locSKS_EFT_Bank.APBankFabricInboundFileLocation)
                        {   
                            locSKS_EFT_RF_DirProfile = SKS_EFT_RF::createAPDirProfile(mbankFabricInt, locSKS_EFT_Bank.APBankFabricInboundFileLocation, locSKS_EFT_Bank.company(), locSKS_EFT_FileFormat.InboundFileGroupId);
                            
                            if(locSKS_EFT_RF_DirProfile)
                            {
                                prevPath = locSKS_EFT_Bank.APBankFabricInboundFileLocation;
                                locListDirectoriesToProcess.addEnd(locSKS_EFT_RF_DirProfile);
                            }
                        }
                    }
                    else
                    {
                        info(strFmt("@SKS:SKGBFInboundFileLocationMissing",locSKS_EFT_Bank.DataAreaId));
                    }
                }
            }
            else
            {
                while select crosscompany  BankAccountId,InboundFileLoc, DataAreaId from locSKS_EFT_Bank
                    join locVendPaymModeTable
                    join InboundFileGroupId from locSKS_EFT_FileFormat
                    order by locSKS_EFT_Bank.dataAreaId, locSKS_EFT_Bank.InboundFileLoc
                    where locSKS_EFT_Bank.PaymMode == locVendPaymModeTable.PaymMode
                        && locVendPaymModeTable.SKS_EFT_FormatId == locSKS_EFT_FileFormat.FormatId
                        && locSKS_EFT_Bank.InboundCommID == _SKS_EB_CommProcess.CommID
                {
                    if (locSKS_EFT_Bank.InboundFileLoc)
                    {
                        if(prevPath != locSKS_EFT_Bank.InboundFileLoc)
                        {
                            locSKS_EFT_RF_DirProfile = SKS_EFT_RF::createAPDirProfile(mbankFabricInt, locSKS_EFT_Bank.InboundFileLoc, locSKS_EFT_Bank.company(), locSKS_EFT_FileFormat.InboundFileGroupId);
                            
                            if(locSKS_EFT_RF_DirProfile)
                            {
                                prevPath = locSKS_EFT_Bank.InboundFileLoc;
                                locListDirectoriesToProcess.addEnd(locSKS_EFT_RF_DirProfile);
                            }
                        }
                    }
                    else
                    {
                        info(strFmt("@SKS:SKGBFInboundFileLocationMissing",locSKS_EFT_Bank.DataAreaId));
                    }
                }

            }
        }

        locDirectoriesToProcessEnumerator = locListDirectoriesToProcess.getEnumerator();
        locDirectoriesToProcessEnumerator.reset();

        while (locDirectoriesToProcessEnumerator.moveNext())
        {
            locSKS_EFT_RF_DirProfile = locDirectoriesToProcessEnumerator.current();
            changeCompany(locSKS_EFT_RF_DirProfile.get_Company())
            {
                locListFilesToProcess  = locSKS_EB_FileHub.runDirectoryGetFiles(locSKS_EFT_RF_DirProfile.get_Directory());
                locFilesToProcessEnumerator = locListFilesToProcess.getEnumerator();
                locFilesToProcessEnumerator.reset();
                while(locFilesToProcessEnumerator.moveNext())
                {

                    locErrorMessage = new System.Text.StringBuilder();
                    locWarningMessage = new System.Text.StringBuilder();
                    locFilename = locFilesToProcessEnumerator.current();
                                       
                    if (mbankFabricInt)   //bankfabric
                    {
                        locFilename = System.IO.Path::Combine(locSKS_EFT_RF_DirProfile.get_Directory(), locFilename);
                    }

                    locSKS_EB_FileHub.setFileName(locFilename);
                    locSKS_EB_FileHub.runFileInquire();

                    locFileDateTime = locSKS_EB_FileHub.attrFileModified();
                    if(this.checkDuplicates(locFilename, locFileDateTime))
                    {
                        locErrorMessage.AppendLine(strFmt("@SKS3156", locFilename));
                    }

                    TempInt = locErrorMessage.get_Length();
                    if(TempInt == 0)
                    {
                        locFormatIDandKeyNumber = this.getFormatId(locSKS_EFT_RF_DirProfile, locFilename, _serverPath, sks_BF_BankIntType);
                        if(locFOrmatIDandkeyNumber != null)
                        {
                            locSKS_EFT_RF_File = this.getFile(locFormatIDandKeyNumber.value(#formatClass), locFilename, _serverPath, sks_BF_BankIntType);

                            if(locSKS_EFT_RF_File == null)
                            {
                                locErrorMessage.AppendLine(strFmt("@SKS2864", locFilename));
                            }
                        }
                        else
                        {
                            locErrorMessage.AppendLine(strFmt("@SKS2890", locSKS_EFT_RF_DirProfile.get_InboundFileGroupId()));
                        }
                    }

                    // Even if errors, we will still insert the file into SKS_EFT_InboundFile
                    ttsBegin;
                    locSKS_EFT_InboundFile.FilePathName = locFilename;
                    locSKS_EFT_InboundFile.ImportDateTime = DateTimeUtil::getSystemDateTime();
                    locSKS_EFT_InboundFile.FileDateTime = locFileDateTime;
                    locSKS_EFT_InboundFile.InboundFileGroupId = locSKS_EFT_RF_DirProfile.get_InboundFileGroupId();
                    locSKS_EFT_InboundFile.CommunicationId = _SKS_EB_CommProcess.CommID;
                    locSKS_EFT_InboundFile.InboundFileNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefAPEFTPlusNextInboundFileNumber()).num();
                    locSKS_EFT_InboundFile.BFBankIntegration = mbankFabricInt == true ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal;

                    if(locFOrmatIDandkeyNumber != null)
                    {
                        if(_SKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer)
                        {
                            locSKS_EFT_InboundFile.Module = SKS_EFT_Module::BTB;
                        }
                        else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::CustomerReimbursements)
                        {
                            locSKS_EFT_InboundFile.Module = SKS_EFT_Module::CNP;
                        }
                        else
                        {
                            locSKS_EFT_InboundFile.Module = locSKS_EFT_RF_File.getModule();
                        }
                    }
                    else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer)
                    {
                        locSKS_EFT_InboundFile.Module = SKS_EFT_Module::BTB;
                    }
                    else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::CustomerReimbursements)
                    {
                        locSKS_EFT_InboundFile.Module = SKS_EFT_Module::CNP;
                    }
                    else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT)
                    {
                        // 7244 -->
                        locSKS_EFT_InboundFile.Module = SKS_EFT_Module::AR;
                        //locErrorMessage.AppendLine(strFmt("@SKS6147"));
                        locErrorMessage.AppendLine("@SKS6147");
                        // 7244 <--
                    }
                    locSKS_EFT_InboundFile.insert();

                    // Don't process any further if errors occurred above
                    TempInt = locErrorMessage.get_Length();
                    if(locSKS_EFT_RF_File != null && TempInt == 0)
                    {
                        //priming read
                        locSKS_EFT_RF_SentFile = locSKS_EFT_RF_file.getSentFile();
                        while(locSKS_EFT_RF_SentFile != null)
                        {
                            locSKS_EFT_InboundFile.InboundBankID = locSKS_EFT_RF_File.getBankID();

                            if(strLen(locSKS_EFT_InboundFile.getFieldValue('INOUTKEYFORMAT' + int2str(locFormatIDandKeyNumber.value('KeyNumber')))) == 0)
                            {
                                locSKS_EFT_InboundFile.setFieldValue('INOUTKEYFORMAT' + int2str(locFormatIDandKeyNumber.value('KeyNumber')), locSKS_EFT_RF_SentFile.getId());
                                locSKS_EFT_InboundFile.InboundFormatId = locFormatIDandKeyNumber.value(#formatId);

                                // Status
                                if(System.String::IsNullOrEmpty(locSKS_EFT_RF_SentFile.getStatus()))
                                {
                                    locSKS_EFT_InboundFile.FileStatusId = #Empty;
                                }
                                else
                                {
                                    locSKS_EFT_InboundFile.FileStatusId = locSKS_EFT_RF_SentFile.getStatus();
                                }
                                locSKS_EFT_InboundFile.InboundStatusesRecId =
                                    SKS_EFT_RF::getInboundStatus(locSKS_EFT_InboundFile.InboundFormatId, locSKS_EFT_InboundFile.FileStatusId, SKS_EFT_InboundStatusType::File);

                                // Reason
                                if(System.String::IsNullOrEmpty(locSKS_EFT_RF_SentFile.getStatusReason()))
                                {
                                    locSKS_EFT_InboundFile.ReasonCode = #Empty;
                                }
                                else
                                {
                                    locSKS_EFT_InboundFile.ReasonCode = locSKS_EFT_RF_SentFile.getStatusReason();
                                }
                                locSKS_EFT_InboundFile.InboundReasonCodesRecId =
                                    SKS_EFT_RF::getInboundReasonCode(locSKS_EFT_InboundFile.InboundFormatId, locSKS_EFT_InboundFile.ReasonCode, locSKS_EFT_RF_SentFile.getStatusReasonDesc() );

                                // Additional Data
                                locSKS_EFT_InboundFile.AdditionalData = locSKS_EFT_RF_SentFile.getAdditionalData();
                            }
                            //priming read
                            locSKS_EFT_RF_Transaction = locSKS_EFT_RF_SentFile.getTransaction();
                            while(locSKS_EFT_RF_Transaction != null)
                            {
                                locSKS_EFT_InboundFileLine = null;
                                locSKS_EFT_InboundFileLine.InboundFileNbr = locSKS_EFT_InboundFile.InboundFileNbr;

                                // Line status
                                if(System.String::IsNullOrEmpty(locSKS_EFT_RF_Transaction.getStatus()))
                                {
                                    locSKS_EFT_InboundFileLine.StatusId = #Empty;
                                }
                                else
                                {
                                    locSKS_EFT_InboundFileLine.StatusId = locSKS_EFT_RF_Transaction.getStatus();
                                }
                                locSKS_EFT_InboundFileLine.InboundStatusesRecId =
                                    SKS_EFT_RF::getInboundStatus(locSKS_EFT_InboundFile.InboundFormatId, locSKS_EFT_InboundFileLine.StatusId, SKS_EFT_InboundStatusType::Transaction);

                                // Line reason
                                if(System.String::IsNullOrEmpty(locSKS_EFT_RF_Transaction.getStatusReason()))
                                {
                                    locSKS_EFT_InboundFileLine.ReasonCode = #Empty;
                                }
                                else
                                {
                                    locSKS_EFT_InboundFileLine.ReasonCode = locSKS_EFT_RF_Transaction.getStatusReason();
                                }
                                locSKS_EFT_InboundFileLine.InboundReasonCodesRecId =
                                    SKS_EFT_RF::getInboundReasonCode(locSKS_EFT_InboundFile.InboundFormatId, locSKS_EFT_InboundFileLine.ReasonCode, locSKS_EFT_RF_Transaction.getStatusReasonDesc());

                                locSKS_EFT_InboundFileLine.setFieldValue('INOUTKEYFORMAT' + int2str(locFormatIDandKeyNumber.value('KeyNumber')), locSKS_EFT_RF_Transaction.getID());
                                locSKS_EFT_InboundFileLine.AdditionalData = locSKS_EFT_RF_Transaction.getAdditionalData();
                                locSKS_EFT_InboundFileLine.paymdate = locSKS_EFT_RF_Transaction.GetSetPaymentDate();
                                locSKS_EFT_InboundFileLine.BankAmt = locSKS_EFT_RF_Transaction.GetSetBankAmount();
                                locSKS_EFT_InboundFileLine.BankAmtCurr = locSKS_EFT_RF_Transaction.GetSetBankCurr();
                                locSKS_EFT_InboundFileLine.PaymentAmt = locSKS_EFT_RF_Transaction.GetSetPaymAmt();
                                locSKS_EFT_InboundFileLine.PaymAmtCurr = locSKS_EFT_RF_Transaction.GetSetPaymCurr();
                                locSKS_EFT_InboundFileLine.ExchRate = locSKS_EFT_RF_Transaction.GetSetInExchRate() == '' ? '1.00' : locSKS_EFT_RF_Transaction.GetSetInExchRate();//10883 + 16615
                                locSKS_EFT_InboundFileLine.BankRefNum = locSKS_EFT_RF_Transaction.GetSetBankRefNum();
                                locSKS_EFT_InboundFileLine.BankRefNum2 = locSKS_EFT_RF_Transaction.GetSetBankRefNum2();
                                locSKS_EFT_InboundFileLine.InboundRefNum = locSKS_EFT_RF_Transaction.GetSetInboundRefNum();
                                locRecordInsertList_FileLines.add(locSKS_EFT_InboundFileLine);
                                locSKS_EFT_InboundFileLine = null;
                                // set initial status of InboundFile to NeedsReviewd. The Line processing will set it to AllApproved if needed
                                locSKS_EFT_InboundFile.TransactionStatus = SKS_EFT_InboundTransactionStatus::NeedsReviewed;
                                locSKS_EFT_RF_Transaction = locSKS_EFT_RF_SentFile.getTransaction();
                            }
                            locRecordInsertList_FileLines.insertDatabase();
                            locSKS_EFT_RF_SentFile = locSKS_EFT_RF_file.getSentFile();
                            //Because eBanking Suite only supports one Sent EFT file per EFT Return File,
                            //if there is more than one, create a warning that only the first file
                            //was processed
                            if(locSKS_EFT_RF_SentFile != null)
                            {
                                locWarningMessage.AppendLine(strFmt("@SKS3157", locFilename));
                                break;
                            }
                        }
                    }

                    TempInt = locErrorMessage.get_Length();

                    if(TempInt != 0)
                    {
                        locSKS_EB_FileHub.runDirectoryCreate(System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFilename), #Error));
                        locErrorMessage.AppendLine(mErrorText);

                        mErrorText = '';//appended to the local message, thus the buffer is cleared.
                        locDestPath = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFileName), #Error, System.IO.Path::GetFileName(locFileName));
                        locSKS_EB_FileHub.runFileMoveTo(locDestPath);
                        locSKS_EFT_InboundFile.FileError = NoYes::Yes;
                        locSKS_EFT_InboundFileErrorLog.ErrorText = locErrorMessage.ToString();
                        locSKS_EFT_InboundFileErrorLog.InboundFileRecId = locSKS_EFT_InboundFile.RecId;
                        locSKS_EFT_InboundFileErrorLog.insert();
                        locSKS_EFT_InboundFileErrorLog = null;
                    }
                    else
                    {
                        //no errors were encountered, move file to archive
                        locSKS_EB_FileHub.runDirectoryCreate(System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFilename), 'Archive'));
                        locDestPath = this.appendFileNbr(locFilename, locSKS_EFT_InboundFile.InboundFileNbr);
                        locDestPath = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locDestPath),#Archive,System.IO.Path::GetFileName(locDestPath));
                        locSKS_EB_FileHub.runFileMoveTo(locDestPath);
                        locErrorMessage.AppendLine(locDestPath);
                        locSKS_EFT_InboundFile.FileError = NoYes::No;

                        //Write out warning message to infolog;
                        TempInt = locWarningMessage.get_Length();
                        if(TempInt > 0)
                        {
                            warning(locWarningMessage.ToString());
                        }
                    }

                    locSKS_EFT_InboundFile.FilePathName = locDestPath;
                    locSKS_EFT_InboundFile.update();
                    //We have gotten all the data we can on the import, commit it to the database
                    ttsCommit;
                    if(locSKS_EFT_InboundFile.FileError == NoYes::No)
                    {
                        SKS_EFT_RF::matchSKSFileAndDetails(locSKS_EFT_InboundFile);
                    }
                    locSKS_EFT_InboundFile = null;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAPDirProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create AP directory profile
    /// </summary>
    /// <param name = "mbankFabricIntLoc"></param>
    /// <param name = "_InboundFileLoc"></param>
    /// <param name = "_Company"></param>
    /// <param name = "_FormatGroupID"></param>
    /// <param name = "_SKS_EFT_FormatId_transaction"></param>
    /// <returns>
    /// SKS_EFT_RF_DirProfile
    /// </returns>
    static SKS_EFT_RF_DirProfile createAPDirProfile(
                    boolean  mbankFabricIntLoc,
                    str _InboundFileLoc,
                    SelectableDataArea _Company,
                    SKS_EFT_InboundFileGroupId _FormatGroupID,
                    SKS_EFT_FormatId _SKS_EFT_FormatId_transaction = '')
    {
        SKS_EFT_RF_DirProfile locSKS_EFT_RF_DirProfile;

        // if multipcompany (TAS Params > Moduels > EFT > AP EFT/DD multicompany file) is NOT turned on
        if(!SKS_PP_Setup::find().modMCFAPDD)
        {
            // add path
            locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(_InboundFileLoc, _Company, _FormatGroupID);
        }
        else
        {
            // check if C/S company in TAS params same as that of bank acct company
            if(SKS_EFT_Setup::find().APCreateSendCompany ==  _Company)
            {
                // add path
                locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(_InboundFileLoc, _Company, _FormatGroupID);
            }
            else
            {                    
                // check if bank acct path also setup on bank acct in create and send company
                SKS_EFT_Bank    sks_EFT_BankLoc;
                
                if(mbankFabricIntLoc)
                {
                    // compare inbound location for bankfabric
                    select firstonly
                        crosscompany  :  [SKS_EFT_Setup::find().APCreateSendCompany]
                        sks_EFT_BankLoc
                        where sks_EFT_BankLoc.APBankFabricInboundFileLocation ==  _InboundFileLoc;
                }
                else
                {
                    // compare inbound location for filehub
                    select firstonly
                        crosscompany  :  [SKS_EFT_Setup::find().APCreateSendCompany]
                        sks_EFT_BankLoc
                        where sks_EFT_BankLoc.InboundFileLoc ==  _InboundFileLoc;
                }

                if(sks_EFT_BankLoc)
                {
                    // skip path
                    return null;
                }
                else
                {
                    // add path
                    locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(_InboundFileLoc, _Company, _FormatGroupID);
                }
            }
        }

        /*
        SKS_EFT_Bank    sks_EFT_BankLoc;
        select firstonly crosscompany  :  [SKS_EFT_Setup::find().APCreateSendCompany]
        sks_EFT_BankLoc
        where sks_EFT_BankLoc.InboundFileLoc ==  locSKS_EFT_Bank.InboundFileLoc;
                            
        if  (
                (!SKS_PP_Setup::find().modMCFAPDD)  ||
                (
                    (SKS_PP_Setup::find().modMCFAPDD) &&
                    (
                        ( SKS_EFT_Setup::find().APCreateSendCompany ==  locSKS_EFT_Bank.company() ) ||
                        ( SKS_EFT_Setup::find().APCreateSendCompany !=  locSKS_EFT_Bank.company() && !sks_EFT_BankLoc )
                    )
                )
            )
        {
            // add path
            locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(locSKS_EFT_Bank.InboundFileLoc, locSKS_EFT_Bank.company(), locSKS_EFT_FileFormat.InboundFileGroupId);
        }
        */

        return locSKS_EFT_RF_DirProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createARDirProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create AR directory profile
    /// </summary>
    /// <param name = "mbankFabricIntLoc"></param>
    /// <param name = "_InboundFileLoc"></param>
    /// <param name = "_Company"></param>
    /// <param name = "_FormatGroupID"></param>
    /// <param name = "_SKS_EFT_FormatId_transaction"></param>
    /// <returns>
    /// SKS_EFT_RF_DirProfile
    /// </returns>
    static SKS_EFT_RF_DirProfile createARDirProfile(
                    boolean  mbankFabricIntLoc,
                    str _InboundFileLoc,
                    SelectableDataArea _Company,
                    SKS_EFT_InboundFileGroupId _FormatGroupID,
                    SKS_EFT_FormatId _SKS_EFT_FormatId_transaction = '')
    {
        SKS_EFT_RF_DirProfile locSKS_EFT_RF_DirProfile;

        // if multipcompany (TAS Params > Moduels > EFT > AP EFT/DD multicompany file) is NOT turned on
        if(!SKS_PP_Setup::find().modMCFAPDD)
        {
            // add path
            locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(_InboundFileLoc, _Company, _FormatGroupID);
        }
        else
        {
            // check if C/S company in TAS params same as that of bank acct company
            if(SKS_EFT_Setup::find().ARCreateSendCompany ==  _Company)
            {
                // add path
                locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(_InboundFileLoc, _Company, _FormatGroupID);
            }
            else
            {
                // check if bank acct path also setup on bank acct in create and send company
                SKS_EFTAR_Bank sks_EFTAR_BankLoc;
                
                if(mbankFabricIntLoc)
                {
                    // compare inbound location for bankfabric
                    select firstonly
                        crosscompany  :  [SKS_EFT_Setup::find().ARCreateSendCompany]
                        sks_EFTAR_BankLoc
                        where sks_EFTAR_BankLoc.ARBankFabricInboundFileLoc ==  _InboundFileLoc;
                }
                else
                {
                    // compare inbound location for filehub
                    select firstonly
                        crosscompany  :  [SKS_EFT_Setup::find().ARCreateSendCompany]
                        sks_EFTAR_BankLoc
                        where sks_EFTAR_BankLoc.SKS_DD_InboundFileLoc ==  _InboundFileLoc;
                }

                if(sks_EFTAR_BankLoc)
                {
                    // skip path
                    return null;
                }
                else
                {
                    // add path
                    locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(_InboundFileLoc, _Company, _FormatGroupID);
                }
            }
        }

        return locSKS_EFT_RF_DirProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateClass</Name>
				<Source><![CDATA[
    boolean ValidateClass(str className, str formatId)
    {
        TreeNode tnode2Enum;
        ;

        tnode2Enum = TreeNode::findNode('Classes');
        tnode2Enum = tnode2Enum.AOTfindChild(className);

        if (tnode2Enum == null)
        {
            error(strFmt("@SKS864", formatId));
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundReasonCode</Name>
				<Source><![CDATA[
    public static server RefRecId getInboundReasonCode(SKS_EFT_InboundFormatId _InboundFormatId, SKS_EFT_ReasonCode _ReasonCode, SKS_EFT_ReasonCodeDesc _ReasonCodeDesc)
    {
        SKS_EFT_InboundReasonCodes lSKS_EFT_InboundReasonCodes;

        select lSKS_EFT_InboundReasonCodes where
            lSKS_EFT_InboundReasonCodes.FormatId == _InboundFormatId &&
            lSKS_EFT_InboundReasonCodes.ReasonCode == _ReasonCode;

        if(!lSKS_EFT_InboundReasonCodes)
        {
            lSKS_EFT_InboundReasonCodes.FormatId = _InboundFormatId;
            lSKS_EFT_InboundReasonCodes.Origin = SKS_EFT_Origin::Added;
            lSKS_EFT_InboundReasonCodes.ReasonCode = _ReasonCode;
            if(strLen(_ReasonCodeDesc) > 0)
            {
                lSKS_EFT_InboundReasonCodes.ReasonDesc = _ReasonCodeDesc;
            }
            else
            {
                lSKS_EFT_InboundReasonCodes.ReasonDesc = "@SKS2830";
            }
            lSKS_EFT_InboundReasonCodes.insert();
        }

        return lSKS_EFT_InboundReasonCodes.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundStatus</Name>
				<Source><![CDATA[
    public static server RefRecId getInboundStatus(SKS_EFT_InboundFormatId _InboundFormatId, SKS_EFT_InboundStatusId _InboundStatusId, SKS_EFT_InboundStatusType _StatusType)
    {
        SKS_EFT_InboundStatuses lSKS_EFT_InboundStatuses;

        select lSKS_EFT_InboundStatuses where
            lSKS_EFT_InboundStatuses.FormatId == _InboundFormatId &&
            lSKS_EFT_InboundStatuses.StatusId == _InboundStatusId &&
            lSKS_EFT_InboundStatuses.StatusType == _StatusType;

        if(!lSKS_EFT_InboundStatuses)
        {
            lSKS_EFT_InboundStatuses.FormatId = _InboundFormatId;
            lSKS_EFT_InboundStatuses.Origin = SKS_EFT_Origin::Added;
            lSKS_EFT_InboundStatuses.StatusId = _InboundStatusId;
            lSKS_EFT_InboundStatuses.StatusIdDisplay = "@SKS2779";
            lSKS_EFT_InboundStatuses.StatusType = _StatusType;

            lSKS_EFT_InboundStatuses.insert();
        }

        return lSKS_EFT_InboundStatuses.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MatchAllInboundFiles</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer locSKS_EFT_InboundFile is selected forUpdate and is passed to other methods where it is modified.")]
    public static void MatchAllInboundFiles()
    {
        SKS_EFT_InboundFile     locSKS_EFT_InboundFile;

        while select forUpdate locSKS_EFT_InboundFile
                where locSKS_EFT_InboundFile.OutboundFileRecID == 0
                    && locSKS_EFT_InboundFile.FileError == NoYes::No
        {

            SKS_EFT_RF::matchSKSFileAndDetails(locSKS_EFT_InboundFile);
        }


    }

]]></Source>
			</Method>
			<Method>
				<Name>matchSKS_EFT_InboundFile</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer findBankAccountTrans is selected forUpdate and is passed to other methods where it is modified.")]
    private static void matchSKS_EFT_InboundFile(SKS_EFT_InboundFile _SKS_EFT_InboundFile)
    {
        //Primitives
        int loci;
        int locKeyFieldUsed;
        int locNumberOfFormats;
        str locFieldPrefix = 'InOutKeyFormat';
        SKS_EFT_InboundFileLine locSKS_EFT_InboundFileLine;
        //EDTs
        SKS_EFT_InOutKey locSKS_EFT_InOutKey;
        //Tables
        SKS_EFTAP_File locSKS_EFTAP_File;
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
        //The Following are used for the dynamically built query.  The query needs to choose a different field to match two depending on which format was used in FileGroup.
        DictTable locDictTable;
        FieldId locFieldId;
        Query locQuery;
        QueryRun locQueryRun;
        QueryBuildDataSource locQueryBuildDataSource;
        QueryBuildRange locQueryBuildRange;
        void AttemptTransLevelMatch()
        {
            //This line cannot be a field list.  The code dynamicly determines how many "InOutKeyFormat" key columns exist.
            //The number of these columns has been the subject of discussions on if we can expand to support more keys and
            //with this code, it requires no code change, simply the addition of a new InOutKeyFormat column to the database.
            //BP deviation documented
            while select locSKS_EFT_InboundFileLine where locSKS_EFT_InboundFileLine.InboundFileNbr == _SKS_EFT_InboundFile.InboundFileNbr
            {
                //This block of code determins which key is populated
                for(loci = 1; loci <= locNumberOfFormats; loci++)
                {
                    if(strLen(locSKS_EFT_InboundFileLine.getFieldValue(locFieldPrefix + int2str(loci))) > 0)
                    {
                        locKeyFieldUsed = loci;
                        break;
                    }
                }

                if(locSKS_EFT_InboundFileLine.getFieldValue('InOutKeyFormat' + int2str(locKeyFieldUsed)))
                {
                    locDictTable = new DictTable(tableNum(SKS_EFT_FileDetail));
                    locFieldId = locDictTable.fieldName2Id(locFieldPrefix + int2str(locKeyFieldUsed));
                    locQuery = new Query();
                    locQueryBuildDataSource = locQuery.addDataSource(tableNum(SKS_EFT_FileDetail));
                    //VSTS_11601 -->
                    if(_SKS_EFT_InboundFile.Module == SKS_EFT_Module::AP)
                    {
                        locQueryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, Module)).value(queryValue(enum2int(SKS_EFT_Module::AP)));
                    }
                    else if(_SKS_EFT_InboundFile.Module == SKS_EFT_Module::BTB)
                    {
                        locQueryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, Module)).value(queryValue(enum2int(SKS_EFT_Module::BTB)));
                    }
                    else if(_SKS_EFT_InboundFile.Module == SKS_EFT_Module::CNP)
                    {
                        locQueryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, Module)).value(queryValue(enum2int(SKS_EFT_Module::CNP)));
                    }
                    else
                    {
                        locQueryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, Module)).value(queryValue(enum2int(SKS_EFT_Module::AR)));
                    }
                    //VSTS_11601 <--
                    //11835 --v--
                    locQueryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, PaymentRejected)).value(queryValue(enum2int(NoYes::No)));
                    //11835 --^--
                    locQueryBuildDataSource.addRange(locFieldId).value(locSKS_EFT_InboundFileLine.getFieldValue('InOutKeyFormat' + int2str(locKeyFieldUsed)));
                    locQueryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, RecordSummary)).value(queryValue(SKS_EFT_RecordSummary::Payment));
                    locQueryRun = new QueryRun(locQuery);
                    if(locQueryRun.next())
                    {

                        if(SysQuery::countTotal(locQueryRun) == 1)// only match on Unique Key.
                        {
                            locSKS_EFT_FileDetail = locQueryRun.get(tableNum(SKS_EFT_FileDetail));
                            //the matching outbound has been found, Find that line's parent file and set file level relationship
                            select locSKS_EFTAP_File where locSKS_EFTAP_File.RecId == locSKS_EFT_FileDetail.FileRecId; //CAR Tool change
                            _SKS_EFT_InboundFile.OutboundFileRecId = locSKS_EFTAP_File.RecId;
                            _SKS_EFT_InboundFile.setFieldValue(locFieldPrefix + int2str(locKeyFieldUsed), locSKS_EFTAP_File.FileNbr);
                            break;
                        }
                    }
                }
            }
        }


        //This block of code determines how many key fields exist in a single record
        locNumberOfFormats = SKS_EFT_Common::getNumberOfFormats();

        //This block of code determins which key is populated
        locKeyFieldUsed = 0;
        for(loci = 1; loci <= locNumberOfFormats; loci++)
        {
            locSKS_EFT_InOutKey = _SKS_EFT_InboundFile.getFieldValue('InOutKeyFormat' + int2str(loci));
            if(strLen(locSKS_EFT_InOutKey) > 0)
            {
                locKeyFieldUsed = loci;
                break;
            }
        }

        //This block of code retrieves the outbound EFT File's record
        //if a key was found
        if(locKeyFieldUsed > 0)
        {
            //This block of code retrieves the outbound EFT File's record
            locDictTable = new DictTable(tableNum(SKS_EFTAP_File));
            locFieldId = locDictTable.fieldName2Id(locFieldPrefix + int2str(locKeyFieldUsed));
            locQuery = new Query();
            locQueryBuildDataSource = locQuery.addDataSource(tableNum(SKS_EFTAP_File));
            locQueryBuildRange = locQueryBuildDataSource.addRange(locFieldId);
            locQueryBuildRange.value(_SKS_EFT_InboundFile.getFieldValue('InOutKeyFormat' + int2str(locKeyFieldUsed)));
            locQueryBuildRange = locQueryBuildDataSource.addRange(fieldNum(SKS_EFTAP_File, EFTFileType));
            //VSTS_11601 -->
            if(_SKS_EFT_InboundFile.Module == SKS_EFT_Module::AP)
            {
                locQueryBuildRange.value(queryValue(enum2int(SKS_EFT_Module::AP)));
            }
            else if(_SKS_EFT_InboundFile.Module == SKS_EFT_Module::BTB)
            {
                locQueryBuildRange.value(queryValue(enum2int(SKS_EFT_Module::BTB)));
            }
            else if(_SKS_EFT_InboundFile.Module == SKS_EFT_Module::CNP)
            {
                locQueryBuildRange.value(queryValue(enum2int(SKS_EFT_Module::CNP)));
            }
            else
            {
                locQueryBuildRange.value(queryValue(enum2int(SKS_EFT_Module::AR)));
            }
            //VSTS_11601 <--
            locQueryRun = new QueryRun(locQuery);
            if(locQueryRun.next())
            {
                //the matching outbound has been found, so get the record, set the relationship and call the findStatus
                locSKS_EFTAP_File = locQueryRun.get(tableNum(SKS_EFTAP_File));
                _SKS_EFT_InboundFile.OutboundFileRecId = locSKS_EFTAP_File.RecId;
            }
            if(!locSKS_EFTAP_File && strStartsWith(strUpr(_SKS_EFT_InboundFile.InboundBankID), 'BOFA'))
            {
                AttemptTransLevelMatch();
            }
        }
        //the WF_FX_Conf format does NOT have file level ID's on return, so... we have to find the outbound based on one of the trans.
        else
        {
            AttemptTransLevelMatch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchSKS_EFT_InboundLines</Name>
				<Source><![CDATA[
    private static void matchSKS_EFT_InboundLines(SKS_EFT_InboundFile _SKS_EFT_InboundFile)
    {

        int locMaxNumberOfFormats;
        int locKeyFieldUsed;
        int loci;
        str locFieldPrefix = 'INOUTKEYFORMAT';
        //Tables
        SKS_EFT_InboundFileLine locSKS_EFT_InboundFileLine;
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
        //The Following are used for the dynamically built query.  The query needs to choose a different field to match two depending on which format was used in FileGroup.
        DictTable locDictTable;
        FieldId locFieldId;
        Query locQuery;
        QueryRun locQueryRun;
        QueryBuildDataSource locQueryBuildDataSource;

        locMaxNumberOfFormats = SKS_EFT_Common::getNumberOfFormats();

        //This block of code determins which key is populated
        for(loci = 1; loci <= locMaxNumberOfFormats; loci++)
        {
            if(strLen(_SKS_EFT_InboundFile.getFieldValue(locFieldPrefix + int2str(loci))) > 0)
            {
                locKeyFieldUsed = loci;
                break;
            }
        }

        while select forupdate locSKS_EFT_InboundFileLine where locSKS_EFT_InboundFileLine.InboundFileNbr == _SKS_EFT_InboundFile.InboundFileNbr
        {
            if(locSKS_EFT_InboundFileLine.getFieldValue('InOutKeyFormat' + int2str(locKeyFieldUsed)))
            {
                locDictTable = new DictTable(tableNum(SKS_EFT_FileDetail));
                locFieldId = locDictTable.fieldName2Id(locFieldPrefix + int2str(locKeyFieldUsed));
                locQuery = new Query();
                locQueryBuildDataSource = locQuery.addDataSource(tableNum(SKS_EFT_FileDetail));
                locQueryBuildDataSource.addRange(locFieldId).value(queryValue(locSKS_EFT_InboundFileLine.getFieldValue('InOutKeyFormat' + int2str(locKeyFieldUsed))));
                locQueryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, filerecid)).value(int642str(_SKS_EFT_InboundFile.OutboundFileRecId));
                locQueryBuildDataSource.addRange(fieldNum(SKS_EFT_FileDetail, RecordSummary)).value(SysQuery::valueNot(SKS_EFT_RecordSummary::NonSummary));
                locQueryRun = new QueryRun(locQuery);


                if(locQueryRun.next())
                {
                    //the matching outbound has been found, so get the record, set the relationship and call the findStatus
                    locSKS_EFT_FileDetail = locQueryRun.get(tableNum(SKS_EFT_FileDetail));
                    locSKS_EFT_InboundFileLine.FileDetailRecId = locSKS_EFT_FileDetail.RecId;
                    locSKS_EFT_InboundFileLine.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchSKSFileAndDetails</Name>
				<Source><![CDATA[
    public static void matchSKSFileAndDetails(SKS_EFT_InboundFile _SKS_EFT_InboundFile)
    {
        //Begin new transaction tracking block for the matching.
        ttsBegin;
        SKS_EFT_RF::matchSKS_EFT_InboundFile(_SKS_EFT_InboundFile);
        _SKS_EFT_InboundFile.update();
        if(_SKS_EFT_InboundFile.OutboundFileRecId)
        {
            SKS_EFT_RF::MatchSKS_EFT_InboundLines(_SKS_EFT_InboundFile);
        }
        ttsCommit;
        SKS_EFT_InboundFiles::findStatus(_SKS_EFT_InboundFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssignInboundFieldsToLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public static void AssignInboundFieldsToLedgerJournalTable(SKS_EFT_FileDetail _SKS_EFT_FileDetail, RecId _lSKS_EFT_InboundFileLineRecid)    //SKS_VSTS_14632
    {
        LedgerJOurnalTrans          lLedgerJournalTrans;
        SKS_EFT_InboundFileLine     lSKS_EFT_InboundFileLine;
        //SKS_EFT_FileDetail          lSKS_EFT_Filedetail;

        select firstonly lSKS_EFT_InboundFileLine where lSKS_EFT_InboundFileLine.RecId == _lSKS_EFT_InboundFileLineRecid;

        if(lSKS_EFT_InboundFileLine)
        {
            select firstonly forupdate lLedgerJournalTrans
                where lLedgerJournalTrans.recid == _SKS_EFT_FileDetail.PaymentLineRecId;

            if(lLedgerJournalTrans)
            {
                lLedgerJournalTrans.SKS_EFTAP_paymdate = lSKS_EFT_InboundFileLine.paymdate == dateNull() ? lLedgerJournalTrans.SKS_EFTAP_paymdate : lSKS_EFT_InboundFileLine.paymdate;
                lLedgerJournalTrans.SKS_EFTAP_BankAmt = lSKS_EFT_InboundFileLine.BankAmt == 0 ? lLedgerJournalTrans.SKS_EFTAP_BankAmt : lSKS_EFT_InboundFileLine.BankAmt;
                lLedgerJournalTrans.SKS_EFTAP_bankamtcurr = lSKS_EFT_InboundFileLine.BankAmtCurr == '' ? lLedgerJournalTrans.SKS_EFTAP_bankamtcurr : lSKS_EFT_InboundFileLine.BankAmtCurr;
                lLedgerJournalTrans.SKS_EFTAP_paymentAmt = lSKS_EFT_InboundFileLine.paymentAmt == 0 ? lLedgerJournalTrans.SKS_EFTAP_paymentAmt : lSKS_EFT_InboundFileLine.paymentAmt;
                lLedgerJournalTrans.SKS_EFTAP_PaymAmtCurr = lSKS_EFT_InboundFileLine.PaymAmtCurr == '' ? lLedgerJournalTrans.SKS_EFTAP_PaymAmtCurr : lSKS_EFT_InboundFileLine.PaymAmtCurr;
                lLedgerJournalTrans.SKS_EFTAP_InboundRefNum = lSKS_EFT_InboundFileLine.InboundRefNum == '' ? lLedgerJournalTrans.SKS_EFTAP_InboundRefNum : lSKS_EFT_InboundFileLine.InboundRefNum;

                // + 20082
                // BankRefNum2
                if (lSKS_EFT_InboundFileLine.BankRefNum2)
                {
                    lLedgerJournalTrans.SKS_EFTAP_BankRefNum2 = lSKS_EFT_InboundFileLine.BankRefNum2;
                }
                else if (lSKS_EFT_InboundFileLine.BankRefNum
                         && lLedgerJournalTrans.SKS_EFTAP_BankRefNum
                         && lLedgerJournalTrans.SKS_EFTAP_BankRefNum != lSKS_EFT_InboundFileLine.BankRefNum
                         && !lLedgerJournalTrans.SKS_EFTAP_BankRefNum2)
                {
                    lLedgerJournalTrans.SKS_EFTAP_BankRefNum2 = lSKS_EFT_InboundFileLine.BankRefNum;
                }

                // BankRefNum
                if (lSKS_EFT_InboundFileLine.BankRefNum
                    && (!lLedgerJournalTrans.SKS_EFTAP_BankRefNum
                        || (lLedgerJournalTrans.SKS_EFTAP_BankRefNum2 && lLedgerJournalTrans.SKS_EFTAP_BankRefNum2 != lSKS_EFT_InboundFileLine.BankRefNum)))
                {
                    lLedgerJournalTrans.SKS_EFTAP_BankRefNum = lSKS_EFT_InboundFileLine.BankRefNum;
                }

                // InExchRate
                if ((lSKS_EFT_InboundFileLine.ExchRate && str2Num(lSKS_EFT_InboundFileLine.ExchRate) != 0 && str2Num(lSKS_EFT_InboundFileLine.ExchRate) != 1.0)
                    || (!lLedgerJournalTrans.SKS_EFTAP_InExchRate && str2Num(lSKS_EFT_InboundFileLine.ExchRate) == 1.0))
                {
                    lLedgerJournalTrans.SKS_EFTAP_InExchRate = lSKS_EFT_InboundFileLine.ExchRate;
                }
                // - 20082

                lLedgerJournalTrans.update();
                SKS_EFT_RF::updateLedgerJournalTransExchangeRate(lLedgerJournalTrans, _SKS_EFT_FileDetail, _lSKS_EFT_InboundFileLineRecid); //SKS_VSTS_14632
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransExchangeRate</Name>
				<Source><![CDATA[
    ////SKS_VSTS_14632
    public static void updateLedgerJournalTransExchangeRate(LedgerJournalTrans _ledgerJournalTrans, SKS_EFT_FileDetail _SKS_EFT_FileDetail, RecId _lSKS_EFT_InboundFileLineRecid)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>