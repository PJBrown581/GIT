<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITI_CDFF_93</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITI_CDFF_93 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CITI_CDFF_93 extends SKS_EFT_Format
{
    #define.FormatVersion('20220629')
    #define.DOMESTIC('DOMESTIC')
    #define.EXPRESS('EXPRESS')
    #define.FOREIGN('FOREIGN')
    #define.SEPA('SEPA')

    #define.HATCH('#')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            //Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SEPA)
            {
                //Details
                this.rec_Main();
            }
            else
            {
                //Details For SEPA Payment spec
                this.rec_MainSEPA();
            }    
            next mSKS_EFT_FileDetail;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Main</Name>
				<Source><![CDATA[
    //1     Placeholder
    //2     Country Code
    //3     Payment Method
    //4     Value Date
    //5     Priority Flag
    //6     PreFormat Group Code
    //7     PreFormat Code
    //8     Payment Type
    //9     Payment Currency
    //10    Payment Amount
    //11    Debit Party Account or Other ID Type
    //12    Debit Account / Debit Party Account
    //13    Debit Party Name
    //14    Debit Party Advice Type
    //15    Debit Bank Routing Code
    //16    Debit Bank Name
    //17    Debit Bank Address Line 1
    //18    Debit Bank Address Line 2
    //19    Debit Bank Address Line 3
    //20    Placeholder
    //21    Number of Credit Parties
    //22    Charges Indicator
    //23    Processing Date
    //24    Debit Account Currency
    //25    Transaction Reference Number
    //26    Beneficiary Reference
    //27    Confidential
    //28    Intra-Company
    //29    Placeholder
    //30    Transaction Type
    //31    Entry Description
    //32    Individual Company ID
    //33    Pre-Note
    //34    Funds Type
    //35    Ordering Party ID Type
    //36    Ordering Party ID
    //37    Ordering Party Name
    //38    Ordering Party Address – Line 1
    //39    Ordering Party Address – Line 2
    //40    Ordering Party Address – Line 3
    //41    Credit Account
    //42    Beneficiary Is
    //43    Beneficiary Account or Other ID Type
    //44    Beneficiary Account or Other ID
    //45    Beneficiary Name
    //46    Beneficiary Advice Type
    //47    Beneficiary Address Line 1
    //48    Beneficiary Address Line 2
    //49    Beneficiary Address Line 3
    //50    Beneficiary Bank Routing Method
    //51    Beneficiary Bank Routing Code
    //52    Beneficiary Bank Account or Other ID Type
    //53    Beneficiary Bank Account or Other ID
    //54    Beneficiary Bank Advice Type
    //55    Beneficiary Bank Name
    //56    Beneficiary Bank Address Line 1
    //57    Beneficiary Bank Address Line 2
    //58    Beneficiary Bank Address Line 3
    //59    First Intermediary Bank Routing Method
    //60    First Intermediary Bank Routing Code
    //61    First Intermediary Bank Name
    //62    First Intermediary Bank Address Line 1
    //63    First Intermediary Bank Address Line 2
    //64    First Intermediary Bank Address Line 3
    //65    Second Intermediary Bank Account or Other ID Type
    //66    Second Intermediary Bank Account or Other ID
    //67    Second Intermediary Bank Advice Type
    //68    Second Intermediary Bank Name
    //69    Second Intermediary Bank Address – Line 1
    //70    Second Intermediary Bank Address – Line 2
    //71    Second Intermediary Bank Address – Line 3
    //72    Payment Details Line 1
    //73    Payment Details Line 2
    //74    Payment Details Line 3
    //75    Payment Details Line 4
    //76    Bank Details Line 1
    //77    Bank Details Line 2
    //78    Bank Details Line 3
    //79    Bank Details Line 4
    //80    Bank Details Line 5
    //81    Bank Details Line 6
    //82    Pre-Advice Flag
    //83    Pre-Advice Details
    //84    Addenda Information
    //85    Memo Details
    //86    Tax Sub Form Account Code (2)
    //87    Tax Sub Form Amount Paid (2)
    //88    Tax Sub Form Details (3)
    //89    Tax Sub Form Due Amount (3)
    //90    Tax Sub Form Code and Date(3)
    //91    Tax Sub Form Due Date (3)
    //92    Tax Sub Form Account Code (3)
    //93    Tax Sub Form Amount Paid (3)
    boolean rec_Main()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail      sks_EFT_FileDetail;
        str benAddress;
        str invDetails = '';

        //1        Placeholder
        sb.Append(this.wrapField());
    
        //2        Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId)));
    
        //3        Payment Method
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #DOMESTIC:
            case #EXPRESS:
                sb.Append(this.wrapField('DFT'));
                break;
            case #FOREIGN:
                sb.Append(this.wrapField('EFT'));
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }
    
        //4        Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)));
    
        //5        Priority Flag
        sb.Append(this.wrapField(''));
    
        //6        PreFormat Group Code
        sb.Append(this.wrapField(''));
    
        //7        PreFormat Code
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PreformatCode', mSKS_EFT_FileDetail.RecId))));
    
        //8        Payment Type
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOMESTIC)
        {
            sb.Append(this.wrapField('11'));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EXPRESS)
        {
            sb.Append(this.wrapField('01'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //9     Payment Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));       
    
        //10    Payment Amount
        sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0)));
                
        //11    Debit Party Account or Other ID Type
        sb.Append(this.wrapField(''));
    
        //12    Debit Account / Debit Party Account
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 10)));
        
        //13    Debit Party Name
        sb.Append(this.wrapField(''));
    
        //14    Debit Party Advice Type
        sb.Append(this.wrapField(''));
    
        //15    Debit Bank Routing Code
        sb.Append(this.wrapField(''));
    
        //16    Debit Bank Name
        sb.Append(this.wrapField(''));
    
        //17    Debit Bank Address Line 1
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOMESTIC)
        {
            while select InvoiceNumber from sKS_EFT_FileDetail where sKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                invDetails += sks_EFT_FileDetail.InvoiceNumber + ',';
            }

            if(invDetails)
            {
                invDetails = subStr(invDetails, 1, strLen(invDetails)-1);
            }

            sb.Append(this.wrapField(subStr(invDetails, 1, 35)));
            invDetails = '';
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //18    Debit Bank Address Line 2
        sb.Append(this.wrapField(''));
    
        //19    Debit Bank Address Line 3
        sb.Append(this.wrapField(''));
    
        //20    Placeholder
        sb.Append(this.wrapField(''));
    
        //21    Number of Credit Parties
        sb.Append(this.wrapField(''));
    
        //22    Charges Indicator
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FOREIGN)
        {
            sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //23    Processing Date
        sb.Append(this.wrapField(''));
    
        //24    Debit Account Currency
        sb.Append(this.wrapField(''));
    
        //25    Transaction Reference Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOMESTIC ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EXPRESS)
        {
            sb.Append(this.wrapField(subStr('txt' + this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,10)));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FOREIGN)
        {
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,16)));
        }        

        //26    Beneficiary Reference
        sb.Append(this.wrapField(''));
    
        //27    Confidential
        sb.Append(this.wrapField(''));
    
        //28    Intra-Company
        sb.Append(this.wrapField(''));
    
        //29    Placeholder
        sb.Append(this.wrapField(''));

        //30    Transaction Type
        sb.Append(this.wrapField(''));
    
        //31    Entry Description
        sb.Append(this.wrapField(''));
    
        //32    Individual Company ID
        sb.Append(this.wrapField(''));
    
        //33    Pre-Note
        sb.Append(this.wrapField(''));
    
        //34    Funds Type
        sb.Append(this.wrapField(''));
    
        //35    Ordering Party ID Type
        sb.Append(this.wrapField(''));
    
        //36    Ordering Party ID
        sb.Append(this.wrapField(''));
    
        //37    Ordering Party Name
        sb.Append(this.wrapField(''));
    
        //38    Ordering Party Address – Line 1
        sb.Append(this.wrapField(''));
    
        //39    Ordering Party Address – Line 2
        sb.Append(this.wrapField(''));
    
        //40    Ordering Party Address – Line 3
        sb.Append(this.wrapField(''));
    
        //41    Credit Account
        sb.Append(this.wrapField(''));
    
        //42    Beneficiary Is
        sb.Append(this.wrapField(''));
    
        //43    Beneficiary Account or Other ID Type
        sb.Append(this.wrapField(''));
    
        //44    Beneficiary Account or Other ID
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #DOMESTIC:
            case #EXPRESS:
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct,1, 17)));
                break;
            case #FOREIGN:
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct,1, 34)));
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }
    
        //45    Beneficiary Name
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #DOMESTIC:
            case #EXPRESS:
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),1, 20)));
                break;
            case #FOREIGN:
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),1,35)));
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }
    
        //46    Beneficiary Advice Type
        sb.Append(this.wrapField(''));
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FOREIGN)
        {
            //47    Beneficiary Address Line 1
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr), 1, 35)));

            //48    Beneficiary Address Line 2
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2), 1, 35)));

            //49    Beneficiary Address Line 3
            if(mSKS_EFT_VendorPaym.WBeneCity || mSKS_EFT_VendorPaym.WBeneState || mSKS_EFT_VendorPaym.WBeneZipPostal)
            {
                if(mSKS_EFT_VendorPaym.WBeneCity)
                {
                    benAddress += mSKS_EFT_VendorPaym.WBeneCity;
                }

                if(mSKS_EFT_VendorPaym.WBeneState)
                {
                    if(benAddress)
                    {
                        benAddress += ',';
                    }
                    benAddress += mSKS_EFT_VendorPaym.WBeneState;
                }

                if(mSKS_EFT_VendorPaym.WBeneZipPostal)
                {
                    if(benAddress)
                    {
                        benAddress += ',';
                    }
                    benAddress += mSKS_EFT_VendorPaym.WBeneZipPostal;
                }
            }
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(benAddress), 1, 35)));
        }
        else
        {
            //47    Beneficiary Address Line 1
            sb.Append(this.wrapField(''));

            //48    Beneficiary Address Line 2
            sb.Append(this.wrapField(''));
    
            //49    Beneficiary Address Line 3
            sb.Append(this.wrapField(''));
        }
    
        //50    Beneficiary Bank Routing Method
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #FOREIGN:
                if(mSKS_EFT_FileDetail.DepSwiftNo)
                {
                    sb.Append(this.wrapField('IS'));
                }
                else
                {
                    sb.Append(this.wrapField('FW'));
                }
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }
    
        //51    Beneficiary Bank Routing Code
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #FOREIGN:
                //Check for Routing number/swift number
                if(mSKS_EFT_FileDetail.DepSwiftNo)
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo,1,11))); //FT
                }
                else
                {
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,11))); //FT
                }
                break;
            case #DOMESTIC:
            case #EXPRESS:
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,4))); //FT
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }
    
        //52    Beneficiary Bank Account or Other ID Type
        sb.Append(this.wrapField(''));
    
        //53    Beneficiary Bank Account or Other ID
        sb.Append(this.wrapField(''));
    
        //54    Beneficiary Bank Advice Type
        sb.Append(this.wrapField(''));
    
        //55    Beneficiary Bank Name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 1, 35)));
    
        //56    Beneficiary Bank Address Line 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), 1, 35)));
    
        //57    Beneficiary Bank Address Line 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity), 1, 35)));
    
        //58    Beneficiary Bank Address Line 3
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FOREIGN &&
            (mSKS_EFT_VendorPaym.WIntBankSwift || mSKS_EFT_VendorPaym.WIntBankId))
        {
            if(mSKS_EFT_VendorPaym.WIntBankSwift)
            {
                //59    First Intermediary Bank Routing Method
                sb.Append(this.wrapField('IS'));

                //60    First Intermediary Bank Routing Code
                sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WIntBankSwift, 1, 11)));
            }
            else
            {
                //59    First Intermediary Bank Routing Method
                sb.Append(this.wrapField('FW'));

                //60    First Intermediary Bank Routing Code
                sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WIntBankId, 1, 11)));
            }
        }
        else
        {
            //59    First Intermediary Bank Routing Method
            sb.Append(this.wrapField(''));

            //60    First Intermediary Bank Routing Code
            sb.Append(this.wrapField(''));
        }

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FOREIGN)
        {
            //61    First Intermediary Bank Name
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), 1, 35)));

            //62    First Intermediary Bank Address Line 1
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr), 1, 35)));

            //63    First Intermediary Bank Address Line 2
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2), 1, 35)));

            //64    First Intermediary Bank Address Line 3
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity), 1, 35)));
        }
        else
        {
            sb.Append(this.wrapField(''));

            sb.Append(this.wrapField(''));

            sb.Append(this.wrapField(''));

            sb.Append(this.wrapField(''));
        }
    
        //65    Second Intermediary Bank Account or Other ID Type
        sb.Append(this.wrapField(''));
    
        //66    Second Intermediary Bank Account or Other ID
        sb.Append(this.wrapField(''));
    
        //67    Second Intermediary Bank Advice Type
        sb.Append(this.wrapField(''));
    
        //68    Second Intermediary Bank Name
        sb.Append(this.wrapField(''));
    
        //69    Second Intermediary Bank Address – Line 1
        sb.Append(this.wrapField(''));
    
        //70    Second Intermediary Bank Address – Line 2
        sb.Append(this.wrapField(''));
    
        //71    Second Intermediary Bank Address – Line 3
        sb.Append(this.wrapField(''));
    
        //72    Payment Details Line 1
        while select InvoiceNumber from sKS_EFT_FileDetail where sKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            invDetails += sks_EFT_FileDetail.InvoiceNumber + ',';
        }

        if(invDetails)
        {
            invDetails = subStr(invDetails, 1, strLen(invDetails)-1);
        }

        sb.Append(this.wrapField(subStr(invDetails, 1, 35)));
    
        //73    Payment Details Line 2
        sb.Append(this.wrapField(''));
    
        //74    Payment Details Line 3
        sb.Append(this.wrapField(''));
    
        //75    Payment Details Line 4
        sb.Append(this.wrapField(''));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FOREIGN)
        {
            sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('BeneficiaryAdvice', mSKS_EFT_FileDetail.RecId)));
        }
        else
        {
            //76    Bank Details Line 1
            sb.Append(this.wrapField(''));
        }
    
        //77    Bank Details Line 2
        sb.Append(this.wrapField(''));
    
        //78    Bank Details Line 3
        sb.Append(this.wrapField(''));
    
        //79    Bank Details Line 4
        sb.Append(this.wrapField(''));
    
        //80    Bank Details Line 5
        sb.Append(this.wrapField(''));
    
        //81    Bank Details Line 6
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FOREIGN)
        {
            sb.Append(this.wrapField('Not a Bank'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //82    Pre-Advice Flag
        sb.Append(this.wrapField(''));
    
        //83    Pre-Advice Details
        sb.Append(this.wrapField(''));
    
        //84    Addenda Information
        sb.Append(this.wrapField(''));
    
        //85    Memo Details
        sb.Append(this.wrapField(''));
    
        //86    Tax Sub Form Account Code (2)
        sb.Append(this.wrapField(''));

        //87    Tax Sub Form Amount Paid (2)
        sb.Append(this.wrapField(''));

        //88    Tax Sub Form Details (3)
        sb.Append(this.wrapField(''));

        //89    Tax Sub Form Due Amount (3)
        sb.Append(this.wrapField(''));

        //90    Tax Sub Form Code and Date(3)
        sb.Append(this.wrapField(''));

        //91    Tax Sub Form Due Date (3)
        sb.Append(this.wrapField(''));

        //92    Tax Sub Form Account Code (3)
        sb.Append(this.wrapField(''));

        //93    Tax Sub Form Amount Paid (3)
        sb.Append(this.wrapField('', false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _addhatch = true)
    {
        str text;
        ;
    
        text = _field;
        if(_addHatch)
        {
            text += #HATCH;
        }
    
    
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_MainSEPA</Name>
				<Source><![CDATA[
    //1     Placeholder
    //2     Country Code
    //3     Payment Method
    //4     Debit Value Date
    //5     Place Holder
    //6     PreFormat Group Code
    //7     PreFormat Code
    //8     Payment Type
    //9     Place Holder
    //10    Payment Amount
    //11    Place Holder
    //12    Debit Account / Debit Party Account
    //13    Place Holder
    //14    Place Holder
    //15    Place Holder
    //16    Place Holder
    //17    Place Holder
    //18    Place Holder
    //19    Place Holder
    //20    Place Holder
    //21    Place Holder
    //22    Place Holder
    //23    Ordering Party Country Code
    //24    Place Holder
    //25    Place Holder
    //26    Customer Reference Number
    //27    Confidential
    //28    Intra-Company Indicator
    //29    Ordering Party Organisation ID  - Type
    //30    Ordering Party Organisation ID - ID
    //31    Issuer
    //32    Place Holder
    //33    Ordering Party Private Id Type
    //34    Private Id
    //35    Date
    //36    Province
    //37    City
    //38    Country
    //39    Identification
    //40    Identification Type
    //41    Issuer
    //42    Place Holder
    //43    Ordering Party Name
    //44    Ordering Party Address - Line 1
    //45    Ordering Party Address - Line 2
    //46    Place Holder
    //47    Place Holder
    //48    Place Holder
    //49    Beneficiary Country Code
    //50    Beneficiary Account Number
    //51    Beneficiary Name
    //52    Place Holder
    //53    Beneficiary Address Line 1
    //54    Beneficiary Address Line 2
    //55    Place Holder
    //56    Place Holder
    //57    Beneficiary Bank Routing Code
    //58    Place Holder
    //59    Place Holder
    //60    Place Holder
    //61    Place Holder
    //62    Place Holder
    //63    Place Holder
    //64    Place Holder
    //65    Place Holder
    //66    Place Holder
    //67    Place Holder
    //68    Place Holder
    //69    Place Holder
    //70    Place Holder
    //71    Place Holder
    //72    Beneficiary Organisation ID - Type
    //73    Beneficiary Organisation ID - ID
    //74    Issuer
    //75    Place Holder
    //76    Beneficiary Private ID Type
    //77    Private Id
    //78    Date
    //79    Province
    //80    City
    //81    Country
    //82    Identification
    //83    Identification Type
    //84    Issuer
    //85    Place Holders
    //86    Source of Funds
    //87    Salary Payment
    //88    Place Holders
    //89    Payment Details Line 1
    //90    Payment Details Line 2
    //91    Payment Details Line 3
    //92    Payment Details Line 2
    //93    Place Holders
    boolean rec_MainSEPA()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail      sks_EFT_FileDetail;
        str invDetails = '';

        //1        Placeholder
        sb.Append(this.wrapField());
    
        //2        Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId)));
    
        //3        Payment Method
        sb.Append(this.wrapField('SEPA'));
    
        //4        Debit Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)));
    
        //5        Place Holder
        sb.Append(this.wrapField(''));
    
        //6        PreFormat Group Code
        sb.Append(this.wrapField(''));
    
        //7        PreFormat Code
        sb.Append(this.wrapField(''));
    
        //8        Payment Type
        sb.Append(this.wrapField('CR'));
    
        //9        Place Holder
        sb.Append(this.wrapField(''));
    
        //10    Payment Amount
        sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0)));
                
        //11    Place Holder
        sb.Append(this.wrapField(''));
    
        //12    Debit Account / Debit Party Account
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 10)));

        //13    Place Holder
        sb.Append(this.wrapField(''));

        //14    Place Holder
        sb.Append(this.wrapField(''));

        //15    Place Holder
        sb.Append(this.wrapField(''));

        //16    Place Holder
        sb.Append(this.wrapField(''));

        //17    Place Holder
        sb.Append(this.wrapField(''));

        //18    Place Holder
        sb.Append(this.wrapField(''));

        //19    Place Holder
        sb.Append(this.wrapField(''));

        //20    Place Holder
        sb.Append(this.wrapField(''));

        //21    Place Holder
        sb.Append(this.wrapField(''));

        //22    Place Holder
        sb.Append(this.wrapField(''));

        //23    Ordering Party Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId)));

        //24    Place Holder
        sb.Append(this.wrapField(''));

        //25    Place Holder
        sb.Append(this.wrapField(''));

        //26    Customer Reference Number
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 1, 35)));
    
        //27    Confidential
        sb.Append(this.wrapField(''));
    
        //28    Intra-Company Indicator
        sb.Append(this.wrapField(''));

        //29    Ordering Party Organisation ID  - Type
        sb.Append(this.wrapField(''));

        //30    Ordering Party Organisation ID - ID
        sb.Append(this.wrapField(subStr(mSKS_EFT_Bank.WOrdPartyId, 1, 35)));

        //31    Issuer
        sb.Append(this.wrapField(''));

        //32    Place Holder
        sb.Append(this.wrapField(''));

        //33    Ordering Party Private Id Type
        sb.Append(this.wrapField(''));

        //34    Private Id
        sb.Append(this.wrapField(''));

        //35    Date
        sb.Append(this.wrapField(''));

        //36    Province
        sb.Append(this.wrapField(''));

        //37    City
        sb.Append(this.wrapField(''));

        //38    Country
        sb.Append(this.wrapField(''));

        //39    Identification
        sb.Append(this.wrapField(''));

        //40    Identification Type
        sb.Append(this.wrapField(''));

        //41    Issuer
        sb.Append(this.wrapField(''));

        //42    Place Holder
        sb.Append(this.wrapField(''));

        //43    Ordering Party Name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 1, 70)));

        //44    Ordering Party Address - Line 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr + ' ' + mSKS_EFT_Bank.WOrdPartyAddr2), 1, 70)));

        //45    Ordering Party Address - Line 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity + ' ' + mSKS_EFT_Bank.WOrdPartyState + ' ' + mSKS_EFT_Bank.WOrdPartyZipCode), 1, 70)));
        
        //46    Place Holder
        sb.Append(this.wrapField(''));

        //47    Place Holder
        sb.Append(this.wrapField(''));

        //48    Place Holder
        sb.Append(this.wrapField(''));

        //49    Beneficiary Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId)));

        //50    Beneficiary Account Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 34)));

        //51    Beneficiary Name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), 1, 70)));

        //52    Place Holder
        sb.Append(this.wrapField(''));

        //53    Beneficiary Address Line 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr + ' ' + mSKS_EFT_VendorPaym.WBeneAddr2), 1, 70)));

        //54    Beneficiary Address Line 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity + ' ' + mSKS_EFT_VendorPaym.WBeneState + ' ' + mSKS_EFT_VendorPaym.WBeneZipPostal), 1, 70)));

        //55    Place Holder
        sb.Append(this.wrapField(''));

        //56    Place Holder
        sb.Append(this.wrapField(''));

        //57    Beneficiary Bank Routing Code
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11)));

        //58    Place Holder
        sb.Append(this.wrapField(''));

        //59    Place Holder
        sb.Append(this.wrapField(''));

        //60    Place Holder
        sb.Append(this.wrapField(''));

        //61    Place Holder
        sb.Append(this.wrapField(''));

        //62    Place Holder
        sb.Append(this.wrapField(''));

        //63    Place Holder
        sb.Append(this.wrapField(''));

        //64    Place Holder
        sb.Append(this.wrapField(''));

        //65    Place Holder
        sb.Append(this.wrapField(''));

        //66    Place Holder
        sb.Append(this.wrapField(''));

        //67    Place Holder
        sb.Append(this.wrapField(''));

        //68    Place Holder
        sb.Append(this.wrapField(''));

        //69    Place Holder
        sb.Append(this.wrapField(''));

        //70    Place Holder
        sb.Append(this.wrapField(''));

        //71    Place Holder
        sb.Append(this.wrapField(''));

        //72    Beneficiary Organisation ID - Type
        sb.Append(this.wrapField(''));

        //73    Beneficiary Organisation ID - ID
        sb.Append(this.wrapField(''));

        //74    Issuer
        sb.Append(this.wrapField(''));

        //75    Place Holder
        sb.Append(this.wrapField(''));

        //76    Beneficiary Private ID Type
        sb.Append(this.wrapField(''));

        //77    Private Id
        sb.Append(this.wrapField(''));

        //78    Date
        sb.Append(this.wrapField(''));

        //79    Province
        sb.Append(this.wrapField(''));

        //80    City
        sb.Append(this.wrapField(''));

        //81    Country
        sb.Append(this.wrapField(''));

        //82    Identification
        sb.Append(this.wrapField(''));

        //83    Identification Type
        sb.Append(this.wrapField(''));

        //84    Issuer
        sb.Append(this.wrapField(''));

        //85    Place Holders
        sb.Append(this.wrapField(''));

        //86    Source of Funds
        sb.Append(this.wrapField(''));

        //87    Salary Payment
        sb.Append(this.wrapField(''));

        //88    Place Holders
        sb.Append(this.wrapField(''));

        //89    Payment Details Line 1
        while select InvoiceNumber from sKS_EFT_FileDetail where sKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            invDetails += sks_EFT_FileDetail.InvoiceNumber + ',';
        }

        if(invDetails)
        {
            invDetails = subStr(invDetails, 1, strLen(invDetails)-1);
        }

        sb.Append(this.wrapField(subStr(invDetails, 1, 35)));

        //90    Payment Details Line 2
        sb.Append(this.wrapField(''));

        //91    Payment Details Line 3
        sb.Append(this.wrapField(''));

        //92    Payment Details Line 2
        sb.Append(this.wrapField(''));

        //93    Place Holders
        sb.Append(this.wrapField('', false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>