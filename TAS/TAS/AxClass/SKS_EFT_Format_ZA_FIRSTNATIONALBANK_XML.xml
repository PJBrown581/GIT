<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_ZA_FIRSTNATIONALBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_ZA_FIRSTNATIONALBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_ZA_FIRSTNATIONALBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230405')
    #define.SDVA('SDVA')
    #define.URGP('URGP')
    #define.ONED('ONED')
    #define.TWOD('TWOD')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        str     btchBookg;
        boolean printBtchBkg;

        btchBookg = SKS_EFT_Format::getCodelookupvalue('BtchBookg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'ZA-FIRSTNATIONALBANK-XML-NA':     //SKS#DevOps:20667
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDVA:
                    case #ONED:
                        printBtchBkg = true;
                        break;
                }
                break;
        }
        
        if(printBtchBkg)
        {
            //      2.23 BtchBookg
            if(strUpr(btchBookg) == 'N')
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_Nm
    /// </summary>
    /// <param name = "_nodeInitgPty">_nodeInitgPty</param>
    protected void node_GrpHdr_InitgPty_Nm(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //------------------------------------------------------------------------------------------------------
        Name companyName;
        companyName = CompanyInfo::find().Name();
        int len =70;
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'ZA-FIRSTNATIONALBANK-XML-NA':         //SKS#DevOps:21527
                switch(mSKS_EFT_FileDetail.PaymSpec)
                {
                    case #SDVA:
                    case #ONED:
                        len =35;
                        break;
                }
                break;
        }
        if(companyName)
        {
            //          Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeInitgPty, 'Nm', this.CharacterReplacement(companyName), len, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        
        //          Nm            
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'ZA-FIRSTNATIONALBANK-XML-NA':         //SKS#DevOps:20997
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDVA:
                    case #ONED:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 140, false);
                        break;
                }
                break;
            default:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 30, false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOther;
        XmlElement nodeCdtrAcctTp;
        str depAcctType;
        
        if(mSKS_EFT_FileDetail.DepBankAcct)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            //                  Othr
            nodeOther = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', mSKS_EFT_FileDetail.DepBankAcct, 23);

            depAcctType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CddtrAcctType', mSKS_EFT_FileDetail.RecId));

            if(depAcctType)
            {
                nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', depAcctType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  ClrSysMmbId
        //                      MmbId
        //              BrnchId
        //                      Id
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCdtrAgt;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeClrSysMmbId;
        XmlElement  nodeBrnchId;
        str         swift, rtg;
        boolean     printBrnchId = true;

        swift   = mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     = mSKS_EFT_FileDetail.DepBankTransit;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'ZA-FIRSTNATIONALBANK-XML-NA':                 //SKS#DevOps:20667
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDVA:
                    case #ONED:
                        rtg = '';
                        printBrnchId = false;
                        break;
                }
                break;
            default:
                swift = '';
                break;
        }
        if(swift || rtg)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
            }

            else if(rtg)
            {
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 6);
            }
            
            if(mSKS_EFT_FileDetail_BenBank.BenBankBranch != '' && printBrnchId)
            {
                //              BrnchId
                nodeBrnchId = nodeCdtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch), 6, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str        invNumbers;
        int        length;
        boolean printdbtrname =false;
        invNumbers = this.getInvoiceNbrs();

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'ZA-FIRSTNATIONALBANK-XML-NA':    //SKS#DevOps:20667
            case 'ZA-FIRSTNATIONALBANK-XML':    //SKS#DevOps:20667
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDVA:
                    case #ONED:
                        length = 140;
                        printdbtrname=true;
                        break;
                }
                break;
            default:
                length = 30;
                break;
        }
        if(invNumbers)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, length);
        }
        else if(printdbtrname && mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), length, false);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //          Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        int length;
        
        //          Nm
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'ZA-FIRSTNATIONALBANK-XML-NA':     //SKS#DevOps:20667
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDVA:
                    case #ONED:
                        length = 35;
                        break;
                }
                break;
            default:
                length = 30;
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), length, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeDbtrAcctTp;
        str value;

        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //          Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //              Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct, 23);
    
            //          Tp
            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                value = 'SVGS';
            }
            else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::LoanAccount)
            {
                value = 'LOAN';
            }
            else
            {
                value = 'CACC';
            }
    
            nodeDbtrAcctTp = nodeDbtrAcct.appendChild(xmlDoc.createElement('Tp'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', value);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              ClrSysMmbId
        //                  MmbId
        //          BranchId   
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeBrnchId;
        str swift, rtg;
        boolean printBrnchId = true;
    
        swift   = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg     = mSKS_EFT_FileDetail.BankBankTransit;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'ZA-FIRSTNATIONALBANK-XML-NA':                 //SKS#DevOps:20667
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDVA:
                    case #ONED:
                        rtg = '';
                        printBrnchId = false;
                        break;
                }
                break;
            default:
                swift = '';
                break;
        }
        if(swift || rtg)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(swift)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 11, false);
            }
            
            else if(rtg)
            {
                //              ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

                //                  MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, 6, false);
            }
            //              BrnchId
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId != '' && printBrnchId)
            {
                nodeBrnchId = nodeDbtrAgt.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId), 6, false);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtTpInf(XmlElement _nodeCdtTrfTxInf)
    {
        //-----------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //
        //-----------------------------------------------------------------------------------------------------
        XmlElement nodePmtTpInf;
        XmlElement nodeCtgyPurp;
        str value = '';

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.recId));

        if(value)
        {
            //       PmtTpInf
            nodePmtTpInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtTpInf'));

            //           CtgyPurp
            nodeCtgyPurp = nodePmtTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //               Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', value, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
    
        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

        //          2.8: SvcLvl
        this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        str value;
        boolean printCd,printPrtry;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SDVA:
                value = 'SDVA';
                printCd = true;
                break;
            case #URGP:
                value = 'URGP';
                printCd = true;
                break;
            case #ONED: 
                value = 'ONED';
                printPrtry = true;
                break;
            case #TWOD:
                value = 'TWOD';
                printPrtry = true;
                break;
        }

        if(value && printCd)
        {
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
        }
        if(value && printPrtry)
        {
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
            mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>