<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_SKS_LB_ReasonAccounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_SKS_LB_ReasonAccounts
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EH_Update_Post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(SKS_LB_ReasonAccounts), tableMethodStr(SKS_LB_ReasonAccounts, update))]
    public static void EH_Update_Post(XppPrePostArgs _args)
    {
        SKS_LB_ReasonAccounts mReasonAccounts;
        SKS_LB_JournalARApplic  sks_lb_journalarapplic;
        SKS_LB_JournalARErrors  sks_lb_journalarerrors;
        SKS_LB_WriteoffDetails  sks_lb_writeoffdetails;
        ;
    
        mReasonAccounts = _args.getThis();
        ttsBegin;
        while select forupdate sks_lb_journalarapplic where sks_lb_journalarapplic.dataAreaId == mReasonAccounts.dataAreaId && SKS_lb_journalarapplic.RevReasonCode == mReasonAccounts.ReasonCode
        {
            sks_lb_journalarapplic.AutoRevLedgerDimension = mReasonAccounts.LedgerDimension;
            sks_lb_journalarapplic.AutoRevOffsetLedgerDimension = mReasonAccounts.OffsetLedgerDimension;
            sks_lb_journalarapplic.update();
        }
    
        while select forupdate sks_lb_journalarerrors where sks_lb_journalarerrors.dataAreaId == mReasonAccounts.dataAreaId && sks_lb_journalarerrors.RevReasonCode == mReasonAccounts.ReasonCode
        {
            sks_lb_journalarerrors.AutoRevLedgerDimension = mReasonAccounts.LedgerDimension;
            sks_lb_journalarerrors.AutoRevOffsetLedgerDimension = mReasonAccounts.OffsetLedgerDimension;
            sks_lb_journalarerrors.update();
        }
    
        while select forupdate sks_lb_writeoffdetails where sks_lb_writeoffdetails.dataAreaId == mReasonAccounts.dataAreaId && sks_lb_writeoffdetails.RevReasonCode == mReasonAccounts.ReasonCode
        {
            sks_lb_writeoffdetails.RevLedgerDimension = mReasonAccounts.LedgerDimension;
            sks_lb_writeoffdetails.RevOffsetLedgerDimension = mReasonAccounts.OffsetLedgerDimension;
            sks_lb_writeoffdetails.update();
        }
    
        while select forupdate sks_lb_writeoffdetails where sks_lb_writeoffdetails.dataAreaId == mReasonAccounts.dataAreaId && sks_lb_writeoffdetails.ReasonCode == mReasonAccounts.ReasonCode
        {
            sks_lb_writeoffdetails.CRLedgerDimension = mReasonAccounts.LedgerDimension;
            sks_lb_writeoffdetails.CROffsetLedgerDimension = mReasonAccounts.OffsetLedgerDimension;
            sks_lb_writeoffdetails.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>