<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_JP_ZENGINBANK_120</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_JP_ZENGINBANK_120 class
/// </summary>
class SKS_EFT_Format_JP_ZENGINBANK_120 extends SKS_EFT_Format
{

    BankAccountTable bankAccountTable;
    VendTable        vendTable;   
    VendBankAccount  vendBankAccount;
    int              mRecordCount;
    AmountMST        mPaymentAmount;

    #define.FormatVersion('20221129')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// GetFormatVersion
    /// </summary>
    /// <returns>Format version</returns>
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Format Structure
    /// </summary>
    protected void formatStructure()
    {
        // payment header
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Payment record
            this.rec_Payment();

            next mSKS_EFT_FileDetail;
        }

        //Trailer record
        this.Trailer_Record();

        //End Record
        this.End_Record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    /// <summary>
    /// getCodePage
    /// </summary>
    /// <returns>int</returns>
    protected int getCodePage()
    {
        return 932;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        //1	    Record Identifier         	                                        1	    (1  - 1)
        //2	    Classification	                                                    2	    (2  - 3)
        //3	    Code Type                                                           1	    (4  - 4)
        //4	    EFT Requestor IDReserved	                                        10	    (5  - 14)
        //5	    Account Holder's Name	                                            40	    (15 - 54)
        //6	    Transfer Date                                                       4	    (55	- 59)
        //7	    Remitting Bank Number	                                            4	    (59	- 62)
        //8	    Remitting Bank Name     	                                        15      (63	- 77)
        //9	    Remitting Branch Number	                                            3	    (78	- 80)
        //10	Remitting Branch Name 	                                            15	    (81	- 95)
        //11	Account Type	                                                    1	    (96 - 96)
        //12	Account Number	                                                    7	    (97 - 103)
        //13    Dummy                                                              17       (104- 120)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();      

        BankGroupId AccountGroupId = BankAccountTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.BankAccountId).BankGroupId;

        BankGroup   bankGroup      = BankGroup::find(AccountGroupId);

        //1	        Record Identifier        	                                        1	    (1  - 1)
        sb.Append('1');

        //2     	Classification                                                      2       (2  - 3)
        sb.Append('21');

        //3         Code Type                                                           1       (4  - 4)
        sb.Append('1');

        //4         EFT Requestor ID	                                                10	    (5  - 14)
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5         Account Holder's Name	                                            50	    (15  - 54)
        sb.Append(SKS_PP_StringFormats::strFill(40, mSKS_EFT_FileDetail.FileACHCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //6        Transfer Date                                                        4      (55  - 58)
        sb.Append(date2str(mSKS_EFT_FileDetail.PaymentTransDate, 213, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::None, DateFlags::None));

        //7        Remitting Bank Number                                                4      (59  - 62)
        sb.Append(SKS_PP_StringFormats::strFill(4, bankgroup.Code_JP, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8        Remitting Bank Name                                                  15      (63  - 77)
        sb.Append(SKS_PP_StringFormats::strFill(15, bankgroup.NameKana_JP, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //9        Remitting Branch Number                                              3      (78  - 80)
        sb.Append(SKS_PP_StringFormats::strFill(3, bankgroup.BranchCode_JP, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10        Remitting Branch Name                                                15     (81  - 95)
        sb.Append(SKS_PP_StringFormats::strFill(15, bankgroup.BranchNameKana_JP, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11       Account Type                                                         1      (96  - 96)
        if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount)
        {
            sb.Append('1');
        }
        else if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append('2');
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //12      Account Number	                                                    7	    (97 - 103)
        sb.Append(SKS_PP_StringFormats::strFill(7,mSKS_EFT_FileDetail.BankBankAcct , SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));     

        //13      Dummy                                                                   17	    (104 - 120)
        sb.Append(SKS_PP_StringFormats::strFill(17, '' , SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Payment method
    /// </summary>
    /// <returns>True or false</returns>
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                                     Length      Position
    //1	    Record Identifier         	                                        1	    (1  - 1)    
    //2	    Receiving Bank Number                                               4	    (2	- 5)
    //3	    Receiving Bank Name     	                                        15      (6  - 20)
    //4	    Receiving Branch Number	                                            3	    (21	- 23)
    //5 	Receiving Branch Name 	                                            15	    (24	- 38)
    //6   	Clearing House Number	                                            4	    (39 - 42)
    //7 	Account Type	                                                    1	    (43 - 43)
    //8     Account Number                                                      7       (44 - 50)
    //9   	Account Holder Name	                                                30	    (51 - 80)
    //7 	Transfer Amount	                                                    10	    (81 - 90)
    //8     Status                                                              1       (91 - 91)
    //9     Customer Code                                                       10      (92 - 101)
    //10    Customer Code 2                                                     10      (101- 111)
    //11    Transfer Priority                                                   1       (112- 112)
    //12    Dummy                                                               8       (113- 120)
    //------------------------------------------------------------------------------------------------------
    public boolean rec_Payment()
    { 
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mRecordCount++;
        VendBankAccount lVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);

        BankGroupId vendBankGroupId = lVendBankAccount.BankGroupId;
        BankGroup   bankGroup      = BankGroup::find(vendBankGroupId);

        // Record Identifier
        sb.Append('2');       

        //Receiving Bank Number
        sb.Append(SKS_PP_StringFormats::strFill(4, bankGroup.Code_JP, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //Receiving Bank Name
        sb.Append(SKS_PP_StringFormats::strFill(15,bankgroup.NameKana_JP, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //Receiving Branch Number
        sb.Append(SKS_PP_StringFormats::strFill(3,bankgroup.BranchCode_JP, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //Receiving Branch Name
        sb.Append(SKS_PP_StringFormats::strFill(15,bankgroup.BranchNameKana_JP, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //Clearing House Number
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));        
                
        switch(lVendBankAccount.TransType_JP)//DevOps20748
        {
            case VendBankTransType_JP::OrdinarySavings:
                sb.Append('1');
                break;
            case VendBankTransType_JP::Checking:
                sb.Append('2');
                break;
            case VendBankTransType_JP::Savings:
                sb.Append('4');
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
        }


        //Account Number
        sb.Append(SKS_PP_StringFormats::strFill(7,mSKS_EFT_FileDetail.DepBankAcct , SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));

        //Account Holder Name
        sb.Append(SKS_PP_StringFormats::strFill(30,lVendBankAccount.BankAccountNameKana_JP , SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //Transfer Amount
        sb.Append(SKS_PP_StringFormats::strFill(10, num2Str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //Status
        sb.Append('0');

        //Customer Code
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //Customer Code2
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //Transfer Priority
        sb.Append('7');

        //Dummy
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;     

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Trailer_Record</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trailer record
    /// </summary>
    /// <returns>True or false</returns>
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                                     Length      Position
    //1	    Record Identifier         	                                        1	    (1  - 1)
    //2	    Total Number of records                                             6       (2	- 7)
    //3	    Total Value of records     	                                        12      (8  - 19)
    //4	    Dummy               	                                            101	    (20	- 120)
    //------------------------------------------------------------------------------------------------------   
    public boolean Trailer_Record()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;

        //1     Record Identifier
        sb.Append('8');

        //2    Total Number of  Records      
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3    Total Value of  Records       
        sb.Append(SKS_PP_StringFormats::strFill(12, num2Str(this.getPositiveAmount(mPaymentAmount), 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4     Dummy
        sb.Append(SKS_PP_StringFormats::strFill(101, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        OutPut = sb.ToString();
        this.fileWrite(strUpr(OutPut));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>End_Record</Name>
				<Source><![CDATA[
    /// <summary>
    /// End record
    /// </summary>
    /// <returns>True or false</returns>
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                                     Length      Position
    //1	    Record Identifier         	                                        1	    (1  - 1)    
    //2	    Dummy               	                                            119    (2	- 120)
    //------------------------------------------------------------------------------------------------------
    public boolean End_Record()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1 Record Identifier
        sb.Append('9');

        //2 Dummy
        sb.Append(SKS_PP_StringFormats::strFill(119, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>