<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_File</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BR_File
{
    str fileName;
    str fileExtension;
    str filePath;
    str filePathName;
    str errorText;
    UTCDateTime fileDateTime;
    SKS_BF_BankIntType gSKS_BF_BankIntType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_BR_File construct(SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        return new SKS_BR_File(_SKS_BF_BankIntType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {   
        gSKS_BF_BankIntType = _SKS_BF_BankIntType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicates</Name>
				<Source><![CDATA[
    boolean checkDuplicates(int64 headerId)
    {
        SKS_BR_BankHeader sks_br_bankheader;

        while select * from sks_br_bankheader where
          sks_br_bankheader.RecId != headerId &&
          sks_br_bankheader.FileDateTime == fileDateTime
        {
            if(strScan(sks_br_bankheader.Filename, fileName,1,strLen(sks_br_bankheader.Filename)))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    str getErrorText()
    {
        return errorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    str getFileName()
    {
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilePath</Name>
				<Source><![CDATA[
    str getFilePath()
    {
        return filePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFile</Name>
				<Source><![CDATA[
    private void moveFile(str sourcePathFile, str destinationPath, str destinationFileName)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(gSKS_BF_BankIntType);
        System.Exception netExcepn;
        System.String[] locBFLocationAndName;
        str locFileName = '';
        str locFilePath = '';

        try
        {
            locSKS_EB_FileHub.parmThrowErrorIfException(false);    //SKS_BR4_Bug:7341
            locSKS_EB_FileHub.runDirectoryCreate(destinationPath);
            if (locSKS_EB_FileHub.errorHasException()) //VSTS 10541 - Begin
            {
                errorText = strFmt("@SYS119902",sourcePathFile) + '; ' + locSKS_EB_FileHub.errorException() + '; Create directory';
                return;
            }

            if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            {
                if(strContains(sourcePathFile,@'/'))
                    locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(sourcePathFile,@'//');
                else if(strContains(sourcePathFile,@'\'))
                    locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(sourcePathFile,@'\\');
                else
                    throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
                locFileName = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);
            }
            else
            {
                locFileName = sourcePathFile;
            }

            locSKS_EB_FileHub.setFileName(locFileName,'','','','',locFilePath);
            locSKS_EB_FileHub.runFileMoveTo(System.IO.Path::Combine(destinationPath, destinationFileName));
            if (locSKS_EB_FileHub.errorHasException())
            {
                errorText = strFmt("@SYS119902",sourcePathFile) + '; ' + locSKS_EB_FileHub.errorException() + '; Move file';
                return;
            } //VSTS 10541 - End
        }
        catch(Exception::CLRError)
        {
            netExcepn = CLRInterop::getLastException();
            errorText = netExcepn.get_Message();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToArchive</Name>
				<Source><![CDATA[
    // Returns new path\file name
    str moveToArchive()
    {
        SKS_PP_Setup pp_Setup;
        str archivePath;
        str archiveFileName;
        SKS_PP_StringFormats formats = new SKS_PP_StringFormats();
        str archiveNbrString;
        ;
        archivePath = System.IO.Path::Combine(filePath ,'Archive');
    
        ttsbegin;
    
        select forupdate firstonly pp_Setup;
    
        if (pp_Setup.BRArchiveNbr < 999999)
        {
            pp_Setup.BRArchiveNbr = pp_Setup.BRArchiveNbr + 1;
        }
        else
        {
            pp_Setup.BRArchiveNbr = 1;
        }
    
        if (pp_Setup.validateWrite())
        {
            pp_Setup.update();
        }
    
        archiveNbrString = formats.fill_String(6, int2Str(pp_Setup.BRArchiveNbr), '0', 'L');
    
        archiveFileName = fileName + '-' + archiveNbrString + fileExtension;
    
        this.moveFile(filePathName, archivePath, archiveFileName);
    
        ttscommit;
    
        return System.IO.Path::Combine(archivePath,archiveFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToError</Name>
				<Source><![CDATA[
    // Returns new path\file name
    str moveToError()
    {
        str errorPath;
        str errorFileName;
        ;
        errorPath = System.IO.Path::Combine(filePath,'Errors');
        errorFileName = fileName + fileExtension;
    
        this.moveFile(filePathName, errorPath, errorFileName);
        return System.IO.Path::Combine(errorPath, errorFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileDateTime</Name>
				<Source><![CDATA[
    void setFileDateTime(UTCDateTime _fileDateTime)
    {
        fileDateTime = _fileDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilePathName</Name>
				<Source><![CDATA[
    void setFilePathName(str _filePathName)
    {
    
        filePathName = _filePathName;
        filePath = System.IO.Path::GetDirectoryName(_filePathName);
        fileExtension = System.IO.Path::GetExtension(_filePathName);
        if(strLen(fileExtension) <= 4)
            fileName = System.IO.Path::GetFileNameWithoutExtension(_filePathName);
        else
        {
            fileName = System.IO.Path::GetFileName(_filePathName);
            fileExtension = '';
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBRPath</Name>
				<Source><![CDATA[
    str validateBRPath(SKS_PP_Bank _SKS_PP_BankScr, SKS_PP_Setup _SKS_PP_Setup, boolean _ValidateSetup, SKS_EB_FileStorage _SKS_EB_FileStorage)
    {
        // This validates the BRFromSetup, BRPath, and BRFormatID dependencies.
        // Also, validation that path is now only used within the current org hierarchy.  YOu cannot cannot re-use another org hierarchy's path.
        // It returns an empty string if all is ok.
        // It returns an message if there's an problem
        // If this path is used for other bank accounts it checks if the format id can share the path
    
        SKS_EB_FilePath pathToCheckFor;
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_BR_FileFormat fileFormat;
        SKS_BR_FileFormatDetail fileFormatDetail;
        SKS_PP_Setup locSKS_PP_Setup;
        container crossCompanyList;
        SKS_EB_FilePath locBankFabricLocation;

        select firstOnly APIFormatType, RecId from fileFormat
                        where fileFormat.FormatID == _SKS_PP_BankScr.BRFormatID &&
                        fileFormat.CCR_IsCCRFormat == NoYes::No;
        if(fileFormat.APIFormatType == SKS_EB_APIFormatType::API)//API Format types don't use the BR BankFabric Location, nor the BR Path. So, don't validate them.
        {
            return '';
        }

        // First get the path we are attempting to use
        if (_ValidateSetup)
        {
            pathToCheckFor = _SKS_PP_Setup.BRPath;
            locBankFabricLocation = _SKS_PP_Setup.BRBankFabricLocation;
        }
        else
        {
            pathToCheckFor = _SKS_PP_BankScr.BRPath;
            locBankFabricLocation = _SKS_PP_BankScr.BRBankFabricLocation;
            If (strlen(_SKS_PP_BankScr.BRFormatID) != 0)
            {
                // Only validate if the format ID is not blank
                //If we are in Filehub(or local) and no path is supplied, do not validate
                //If we are in BankFabric and no location is upplied, do not validate
                if((pathToCheckFor == '' && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    || (locBankFabricLocation == '' && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue))
                {
                    return '';//not returning an error, buecause no path was given to validate
                }

                //This block of code will check for any bank account in any company using our path but not our BR Format ID.
                while select crosscompany BRFormatID,BankAccountId, BRBankFabricLocation, BRPath,dataAreaId, recid from locSKS_PP_Bank
                    order by locSKS_PP_Bank.BRFormatID
                    where
                    locSKS_PP_Bank.BRFormatID != '' &&
                    locSKS_PP_Bank.BRFormatID != _SKS_PP_BankScr.BRFormatID &&
                    locSKS_PP_Bank.BankAccountId != _SKS_PP_BankScr.BankAccountId &&
                    ((locSKS_PP_Bank.BRPath == pathToCheckFor && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    || (locSKS_PP_Bank.BRBankFabricLocation == locBankFabricLocation && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue))
                {
                    //This block of code checs the path and format ID.  If the path matches, but he format ID does not, then it will error.
                    if((_SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue) && (locSKS_PP_Bank.BRFormatID != _SKS_PP_BankScr.BRFormatID) && (locSKS_PP_Bank.BRPath == pathToCheckFor))
                    {
                        return strFmt("@SKS540", pathToCheckFor,
                            locSKS_PP_Bank.BRFormatID, locSKS_PP_Bank.BankAccountId, locSKS_PP_Bank.dataAreaId);
                    }
                    else if ((_SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue) && (locSKS_PP_Bank.BRFormatID != _SKS_PP_BankScr.BRFormatID) && (locSKS_PP_Bank.BRBankFabricLocation == locBankFabricLocation))
                    {
                        return strFmt("@SKS:SKGLocationUsedByDifferentBRFormat", locBankFabricLocation,
                            locSKS_PP_Bank.BRFormatID, locSKS_PP_Bank.BankAccountId, locSKS_PP_Bank.dataAreaId);
                    }
                }
                // Not valid if others use this path with the same format id but don't have the bank account number mapped
                select firstOnly BankAccountId,  BRBankFabricLocation, BRPath, RecId from locSKS_PP_Bank
                    where locSKS_PP_Bank.BankAccountId != _SKS_PP_BankScr.BankAccountId &&
                    ((locSKS_PP_Bank.BRPath == pathToCheckFor && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    || (locSKS_PP_Bank.BRBankFabricLocation == locBankFabricLocation && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue))
                    && locSKS_PP_Bank.BRFormatID == _SKS_PP_BankScr.BRFormatID;
                if (locSKS_PP_Bank.RecId != 0)
                {
                    // We have others using this path with the same format id, so lets inspect this format ids file type
                    select firstOnly RecId, FileType, FormatID  from fileFormat
                        where fileFormat.FormatID == _SKS_PP_BankScr.BRFormatID &&
                        fileFormat.CCR_IsCCRFormat == NoYes::No;/// SKS_FDD_13903 - To make sure that its picking only non-CCR format
                    if (fileFormat.RecId == 0)
                    {
                        // This should never happen
                        throw error(strFmt("@SKS541", _SKS_PP_BankScr.BRFormatID));
                    }
    
                    // It's not valid if the type is CSV or Fixed Length but the account number is NOT mapped
                    if (fileFormat.FileType == SKS_BR_FileType::CSV ||
                        fileFormat.FileType == SKS_BR_FileType::FixedField)
                    {
                        // So let's see if the Account Number field is mapped
                        select firstOnly RecId from fileFormatDetail
                            where fileFormatDetail.FormatID == _SKS_PP_BankScr.BRFormatID &&
                                fileFormatDetail.FieldType == SKS_BR_FieldType::BankAccountNumber &&
                                fileFormatDetail.CCR_IsCCRFormat == NoYes::No;/// SKS_FDD_13903 - To make sure that its picking only non-CCR format
                        if (fileFormatDetail.RecId == 0)
                        {
                            return strFmt("@SKS543", fileFormat.FormatID, fileFormat.FileType);
                        }
                    }
                }
            }
        }
        //The inbound BR path cannot be shared across companies
        //CHECK and MAKE SURE OUR CURRENT FOR BANK ACCOUNTS:
        //Look for ANY that has a format ID.  If that account is outside our org hierarchy display error.
        crossCompanyList = SKS_EB_VirtualCompany::getBankRecCompanies();
        while select crosscompany BankAccountId, recid, DataAreaId, BRPath, BRFormatID from  locSKS_PP_Bank
            where ((locSKS_PP_Bank.BRPath == pathToCheckFor && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                || (locSKS_PP_Bank.BRBankFabricLocation == locBankFabricLocation && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue))
                && locSKS_PP_Bank.BRFormatID != ''
        {
            if(!conFind(crossCompanyList, locSKS_PP_Bank.company()))
            {
                if(_SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                {
                    return(strFmt("@SKS3843",
                                    locSKS_PP_Bank.company(), locSKS_PP_Bank.BankAccountId));
                }
                else if(_SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                {
                    return(strFmt("@SKS:SKGBRBRLocationErrorLocationUsedOutsideCompany",
                                    locSKS_PP_Bank.company(), locSKS_PP_Bank.BankAccountId));
                }
            }
        }
    
    
        //The inbound BR path cannot be shared across companies.
        //FOR SETUP:
        //This block looks in all companies' setup for inbound BR Accounts that have the current path.
        while select crosscompany brpath, recid,DataAreaId from  locSKS_PP_Setup
            where ((locSKS_PP_Setup.BRPath == pathToCheckFor && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                        || (locSKS_PP_Setup.BRBankFabricLocation == locBankFabricLocation && _SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue))
        {
            if(!conFind(crossCompanyList, locSKS_PP_Setup.company()))
            {
                if(_SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                {
                    return(strFmt("@SKS3844",
                                    locSKS_PP_Bank.company()));
                }
                else if(_SKS_EB_FileStorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                {
                    return(strFmt("@SKS:SKGBRLocationErrorLocatoinUsedOutsideCurrentCompanySetup",
                                    locSKS_PP_Setup.company()));
                }
            }


        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLastPathSlash</Name>
				<Source><![CDATA[
    static server str removeLastPathSlash(str filePath)
    {
        int len;
        ;
    
        len = strLen(filePath);
        if (strFind(filePath, '\\', len, 1))
        {
            return subStr(filePath, 1, len-1);
        }
    
        return filePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PathForwardSlashExists</Name>
				<Source><![CDATA[
    static server boolean PathForwardSlashExists(str filePath)
    {
        int len;
        ;
    
        len = strLen(filePath);
        if (strContains(filePath, '/'))
        {
            return true;
        }
    
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDoubleBackslash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes double backslash characters in the path
    /// "\\" to "\"
    /// </summary>
    /// <param name = "_path">The path</param>
    /// <returns>Returns an updated path</returns>
    public static str removeDoubleBackslash(str _path)
    {
        return strReplace(_path, '\\\\', '\\');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>