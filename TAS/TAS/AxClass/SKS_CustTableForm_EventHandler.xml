<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CustTableForm_EventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// CustTable form event handler
/// </summary>
class SKS_CustTableForm_EventHandler
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Customer masterevent handler
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">args</param>
    [FormEventHandler(formStr(CustTable), FormEventType::Initialized),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void CustTable_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        FormDesign design = sender.design(0);
        FormControl custDirectDebitMandate_SKS_DD_Limitamount = design.controlName(formControlStr(CustTable, CustDirectDebitMandate_SKS_DD_Limitamount));
        FormControl custDirectDebitMandate_SKS_DD_IsBlocked = design.controlName(formControlStr(CustTable, CustDirectDebitMandate_SKS_DD_IsBlocked));
        FormControl custBankGroupId = design.controlName(formControlStr(CustTable, CustTable_SKS_BR_eBankRecCustGroupId));
        FormControl TPMDedCat = design.controlName(formControlStr(CustTable, CustTable_SKS_LB_TPMDedCat));

        //Controlling visibility of direct debit fields.
        if (SKS_PP_setup::find().RegAREFT)
        {
            custDirectDebitMandate_SKS_DD_Limitamount.visible(true);
            custDirectDebitMandate_SKS_DD_IsBlocked.visible(true);
        }
        else
        {
            custDirectDebitMandate_SKS_DD_Limitamount.visible(false);
            custDirectDebitMandate_SKS_DD_IsBlocked.visible(false);
        }

        if(!SKS_PP_Setup::find().FFTPM)
        {
            TPMDedCat.allowedit(false);
        }

        if (SKS_PP_Setup::Find().ModBR)
        {
            custBankGroupId.visible(true);
        }
        else
        {
            custBankGroupId.visible(false);
        }


    }

]]></Source>
			</Method>
			<Method>
				<Name>CustTable_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD 16340 - Updating Bank account on customer form
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">args</param>
    [FormDataSourceEventHandler(formDataSourceStr(CustTable, CustTable), FormDataSourceEventType::Written),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void CustTable_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun =   sender.formRun();
        FormDataSource  Custtable_ds   =   formRun.dataSource(FormDataSourcestr(CustTable,CustTable)) as FormDataSource;
        CustTable locCustTable = Custtable_ds.cursor();

        SKS_DD_MandatesCreateBankAccount::CreateBankAccount(locCustTable);

        Custtable_ds.reread();
        Custtable_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustTable_onValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the direct debit mandates
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">args</param>
    /// Sks_7471
    [DataEventHandler(tableStr(CustTable), DataEventType::ValidatedWrite),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void CustTable_onValidatedWrite(Common sender, DataEventArgs e)
    {
        CustDirectDebitMandate custDirectDebitMandate;
        SKS_EPY_CustFilter  IAEpayfilter;
        boolean ret = true;
        CustDirectDebitMandate custDirectDebitMandateOldDefault;
        CustTable custTableLoc = sender;
        
        ttsbegin;
        if (custTableLoc.DefaultDirectDebitMandate)
        {
            update_recordset custDirectDebitMandateOldDefault
                setting SKS_DD_Default = NoYes::No
                where custDirectDebitMandateOldDefault.CustAccount == custTableLoc.AccountNum &&
                    custDirectDebitMandateOldDefault.SKS_DD_Default == NoYes::Yes &&
                    custDirectDebitMandateOldDefault.RecId != custTableLoc.DefaultDirectDebitMandate;

            custDirectDebitMandate = CustDirectDebitMandate::find(custTableLoc.DefaultDirectDebitMandate,true);
            custDirectDebitMandate.SKS_DD_Default = NoYes::Yes;
            custDirectDebitMandate.doUpdate();
            custDirectDebitMandate.reread();
        }
        else
        {
            update_recordset custDirectDebitMandateOldDefault
                setting SKS_DD_Default = NoYes::No
                where custDirectDebitMandateOldDefault.CustAccount == custTableLoc.AccountNum &&
                    custDirectDebitMandateOldDefault.SKS_DD_Default == NoYes::Yes;

            custDirectDebitMandateOldDefault.reread();
        }
        ttscommit;

        if(custTableLoc.orig().SKS_EPY_CustFilter != custTableLoc.SKS_EPY_CustFilter
            && (custTableLoc.SKS_EPY_CustFilter == SKS_EPY_CustFilter::YesByFilter || custTableLoc.SKS_EPY_CustFilter == SKS_EPY_CustFilter::NotSet))
        {
            throw error("@SKS:SKGYesByFilterValidation");
        }

        if(ret)
        {
            if(SKS_PP_Setup::find().ModEPAY && (custTableLoc.SKS_EPY_CustFilter == SKS_EPY_CustFilter::Yes || custTableLoc.SKS_EPY_CustFilter == SKS_EPY_CustFilter::YesByFilter))
            {
                if(custTableLoc.AccountNum != custTableLoc.InvoiceAccount && custTableLoc.InvoiceAccount != '')
                {
                    IAEpayfilter = CustTable::find(custTableLoc.InvoiceAccount).SKS_EPY_CustFilter;
                    if(IAEpayfilter != SKS_EPY_CustFilter::Yes && IAEpayfilter != SKS_EPY_CustFilter::YesByFilter)
                    {
                        error(strFmt("@SKS:SKGePayInvAcctValidation", custTableLoc.AccountNum, custTableLoc.InvoiceAccount));
                        custTableLoc.SKS_EPY_CustFilter = SKS_EPY_CustFilter::No;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustTable_onModifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// to update existing records in <c>SKS_BR_BankTran</c> table
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">Event parameter</param>
    /// FDD 9344
    [DataEventHandler(tableStr(CustTable), DataEventType::ModifiedField),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void CustTable_onModifiedField(Common sender, DataEventArgs e)
    {
        CustTable           custTableLoc = sender;
        container           bankRecCompanies = SKS_EB_VirtualCompany::getBankRecCompanies();
        DataAreaId          company;

        for(int i = 1;i <= conLen(bankRecCompanies);i++)
        {
            company = conPeek(bankRecCompanies, i);

            changecompany(company)
            {
                SKS_BR_BankTran     bankTran;

                ttsbegin;
                update_recordset bankTran
                    setting eBankRecCustGroupId = custTableLoc.SKS_BR_eBankRecCustGroupId
                        where bankTran.CustAccount == custTableLoc.AccountNum
                            && bankTran.CustCompany == custTableLoc.DataAreaId
                            && bankTran.eBankRecCustGroupId != custTableLoc.SKS_BR_eBankRecCustGroupId;
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EPY_CustFilter_OnModified</Name>
				<Source><![CDATA[
    /// FDD 9344
    ///
    /// <summary>
    /// Assigning value to EPY payment type on modified method
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">args</param>
    [FormDataFieldEventHandler(formDataFieldStr(CustTable, CustTable, SKS_EPY_CustFilter), FormDataFieldEventType::Modified),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void SKS_EPY_CustFilter_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        CustTable           custTableLoc = sender.datasource().cursor();
        if(custTableLoc.SKS_EPY_CustFilter == SKS_EPY_CustFilter::Yes || custTableLoc.SKS_EPY_CustFilter  == SKS_EPY_CustFilter::YesByFilter )
        {
            custTableLoc.SKS_EPY_PaymentType  = SKS_EPY_Setup::find().PaymentType;
        }

        if(SKS_EPY_Setup::find().CustAutoReg && SKS_Table_LogisticsElectronicAddress::SKS_getContact(LogisticsElectronicAddressMethodType::Email, custTableLoc.Party) == '')
        {
            error("@SKS6756");
            custTableLoc.SKS_EPY_CustFilter = SKS_EPY_CustFilter::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disable/enable the auto-settlement check box
    /// </summary>
    /// <param name="sender"> custTable datasource</param>
    /// <param name="e"> Form DataSource Event Args </param>
    [FormDataSourceEventHandler(formDataSourceStr(CustTable, CustTable), FormDataSourceEventType::Activated)]
    public static void CustTable_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        SKS_LB_AutoSettlementSetup autoSettlementSetup;

        select firstonly AutoSettlementActive from autoSettlementSetup
            where autoSettlementSetup.DataAreaId == curExt();

        FormCheckBoxControl autoSettleCheckBox = formRun.design().controlName(formControlStr(CustTable, CustTable_SKS_LB_AutoSettlement));
        FormCheckBoxControl autoSettleCheckBox1 = formRun.design().controlName(formControlStr(CustTable, CustTable_SKS_LB_AutoSettlement1));

        if (autoSettlementSetup.AutoSettlementActive)
        {
            autoSettleCheckBox.allowEdit(true);
            autoSettleCheckBox1.allowEdit(true);
        }
        else
        {
            autoSettleCheckBox.allowEdit(false);
            autoSettleCheckBox1.allowEdit(false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>