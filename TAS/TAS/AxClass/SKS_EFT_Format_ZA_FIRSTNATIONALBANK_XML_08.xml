<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_ZA_FIRSTNATIONALBANK_XML_08</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_ZA_FIRSTNATIONALBANK_XML_08
/// </summary>
class SKS_EFT_Format_ZA_FIRSTNATIONALBANK_XML_08 extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230331')
    #define.FXPAY('FXPAY')
    int subSeq;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()
    {
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('Document'));

        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns', 'urn:iso:std:iso:20022:tech:xsd:pain.001.001.08');
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
        nodeRoot = nodeRoot.appendChild(xmlDoc.createElement('CstmrCdtTrfInitn'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_Authstn</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_Authstn(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.3: Authstn
        //          1.4: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeAuthstn;
        str value;

        value = SKS_EFT_Format::getCodelookupvalue('Authstn', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(value)
        {
            //      1.3: Authstn
            nodeAuthstn = _nodeGrpHdr.appendChild(xmlDoc.createElement('Authstn'));
            
            //          1.4: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAuthstn, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInitgPty;
    
    
        //      1.8: InitgPty
        nodeInitgPty = _nodeGrpHdr.appendChild(xmlDoc.createElement('InitgPty'));
    
        //          Nm
        this.node_GrpHdr_InitgPty_Nm(nodeInitgPty);

        //          PstlAdr
        this.node_GrpHdr_InitgPty_PstlAdr(nodeInitgPty);
    
        //          Id
        this.node_GrpHdr_InitgPty_Id(nodeInitgPty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.14: BICOrBEI
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str initgPtyId;
        
        initgPtyId = SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
    
        if(initgPtyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(initgPtyId), 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        str btchBookg;

        btchBookg = SKS_EFT_Format::getCodelookupvalue('BtchBookg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(btchBookg)
        {
            //      2.23 BtchBookg
            if(strUpr(btchBookg) == 'Y')
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_PstlAdr
    /// </summary>
    /// <param name = "_nodeInitgPty">_nodeInitgPty</param>
    protected void node_GrpHdr_InitgPty_PstlAdr(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //------------------------------------------------------------------------------------------------------
        LogisticsPostalAddress  postalAddress;
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;

        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'APEFT');

        if(postalAddress)
        {
            if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
            {
                address = this.addressSplit(postalAddress.Street);
                addressBldgNb = conpeek(address, 1);
                addressStrtNm = conpeek(address, 2);
            }
            else
            {
                addressStrtNm = postalAddress.Street;
            }
                
            this.node_PstlAdr_Structured(_nodeInitgPty, postalAddress.CountryRegionId, addressStrtNm, postalAddress.ZipCode, postalAddress.City, 0, addressBldgNb, postalAddress.State);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        this.node_PstlAdr_Structured(_nodeCdtr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr, mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, mSKS_EFT_FileDetail_VendAddress.BeneCity, 35, mSKS_EFT_FileDetail_VendAddress.BeneState, mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOther;
        
        if(mSKS_EFT_FileDetail.DepBankIBAN || mSKS_EFT_FileDetail.DepBankAcct)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(mSKS_EFT_FileDetail.DepBankIBAN)
            {
                //                  IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
            }
            else 
            {
                //              Othr
                nodeOther = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
                //                  Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', mSKS_EFT_FileDetail.DepBankAcct, 34);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers;
    
        invNumbers = this.getInvoiceNbrs();
        if(invNumbers)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);

        }
        else if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 140);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeClrSysId;
        str cd;
    
        if(mSKS_EFT_FileDetail.DepSwiftNo || mSKS_EFT_FileDetail.DepBankTransit)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(mSKS_EFT_FileDetail.DepSwiftNo)
            {
                //                  BICFI
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BICFI', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
            }
            else if(mSKS_EFT_FileDetail.DepBankTransit)
            {
                //              ClrSysMmbId
                nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
                //              ClrSysId
                nodeClrSysId = nodeClrSysMmBId.appendChild(xmlDoc.createElement('ClrSysId'));
    
                //                  2.59: Cd
                cd = SKS_EFT_Format::getCodelookupvalue('ClrSysIdCd', mSKS_EFT_FileDetail.RecId);
    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', cd);
    
                //                  MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 35, false);
            }
    
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35, false);
    
            //                  PstlAdr
            this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt_PstlAdr(XmlElement _nodeCdtrAgt)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        this.node_PstlAdr_Structured(_nodeCdtrAgt, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity, 35, '', ''); 
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;

        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //          Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //              Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct, 23);    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        XmlElement nodeReqdExctnDt;
    
        batchCount++;
    
        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode;
    
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'DD');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
    
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP || mSKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP || (mSKS_EFT_FileDetail.Module == SKS_EFT_Module::BTB && mSKS_EFT_File.TransferDirection == SKS_BTB_TransferType::Transfer_out))
        {
            //      2.5: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
        }
        else
        {
            //      2.5: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0));
        }
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        //      2.17: ReqdExctnDT
        nodeReqdExctnDt = nodePmtInf.appendChild(xmlDoc.createElement('ReqdExctnDt'));
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeReqdExctnDt, 'Dt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP || mSKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP ||
            (mSKS_EFT_FileDetail.Module == SKS_EFT_Module::BTB && mSKS_EFT_File.TransferDirection == SKS_BTB_TransferType::Transfer_out))
        {
            this.node_PmtInf_DbtrNodes(nodePmtInf);
        }
        else
        {
            this.node_PmtInf_CdtrNodes(nodePmtInf);
        }
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 35, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        
        this.node_PstlAdr_Structured(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str dbtrId;
    
        dbtrId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DbtrId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(dbtrId)
        {
            //          9.1.12: Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', dbtrId, 21);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
    
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
    
        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtTpInf(nodeCdtTrfTxInf);
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);
    
        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        //          2.71: IntrmyAgt1
        this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
    
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
    
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);

        //         SplmtryData
        this.node_CdtTrfTxInf_SplmtryData(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SplitPurposeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// method to split the purpose code based on the -
    /// </summary>
    /// <param name = "value">value</param>
    /// <returns>container</returns>
    protected container SplitPurposeCode(str value)//DevOps20551
    {
        List            strList = new List(Types::String);
        container       PurposeCode;
        ListIterator    iterator;
    
        strlist = strSplit(value,'-');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            PurposeCode += iterator.value();
            iterator.next();
        }
    
        return PurposeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_SplmtryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_SplmtryData
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_SplmtryData(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          SplmtryData
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeSplmtryData;
        XmlElement  nodeEnvlp;
        XmlElement  nodeCompliance;
        XmlElement  nodeOriginalTransaction;
        XmlElement  nodeAdditionalNonResidentData;
        XmlElement  nodeNonResident;
        XmlElement  nodeAdditionalCustomerData;
        XmlElement  nodeResidentCustomerAccountHolder;
        XmlElement  nodeEntityCustomer;
        XmlElement  nodeMonetaryDetails;
        XmlElement  nodeImportExportData;

        str  BOPCtgyCd,BOPSubCtgyCd;
        container CategoryPurpose;

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        CategoryPurpose = this.SplitPurposeCode(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
        BOPCtgyCd = conpeek(CategoryPurpose,1);
        BOPSubCtgyCd = conpeek(CategoryPurpose,2);
        CompanyInfo companyInfo = CompanyInfo::find();
        CurrencyExchangeHelper currencyExchangeHelper;
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        subSeq++;

        //          SplmtryData
        nodeSplmtryData = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('SplmtryData'));

        //              Envlp
        nodeEnvlp = nodeSplmtryData.appendChild(xmlDoc.createElement('Envlp'));

        //                  Compliance
        nodeCompliance = nodeEnvlp.appendChild(xmlDoc.createElement('Compliance'));

        SKS_EFT_Format::xmlsetAttributeText(nodeCompliance, 'xmlns', 'http://www.firstrand.co.za/gts/fxv/fintegrate/bop/v1');
        
        //                      OriginalTransaction
        nodeOriginalTransaction = nodeCompliance.appendChild(xmlDoc.createElement('OriginalTransaction'));
        SKS_EFT_Format::xmlsetAttributeText(nodeOriginalTransaction, 'BranchCode', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeOriginalTransaction, 'Date', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        SKS_EFT_Format::xmlsetAttributeText(nodeOriginalTransaction, 'HubCode', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('HubCode', mSKS_EFT_FileDetail.RecId)), 0, false);

        //                      NonResident
        nodeNonResident = nodeOriginalTransaction.appendChild(xmlDoc.createElement('NonResident'));
        //                      AdditionalNonResidentData
        nodeAdditionalNonResidentData = nodeNonResident.appendChild(xmlDoc.createElement('AdditionalNonResidentData'));
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalNonResidentData, 'AccountIdentifier', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AccountIdentifier', mSKS_EFT_FileDetail.RecId)), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalNonResidentData, 'AccountNumber', mSKS_EFT_FileDetail.DepBankAcct, 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalNonResidentData, 'AddressLine1', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalNonResidentData, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalNonResidentData, 'ZipCode', mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalNonResidentData, 'Country', mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, 0, false);
        //                      Entity
        nodeAdditionalNonResidentData = nodeNonResident.appendChild(xmlDoc.createElement('Entity'));
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalNonResidentData, 'LegalEntityName', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 0, false);


        //                      ResidentCustomerAccountHolder
        nodeResidentCustomerAccountHolder = nodeOriginalTransaction.appendChild(xmlDoc.createElement('ResidentCustomerAccountHolder'));
        nodeAdditionalCustomerData = nodeResidentCustomerAccountHolder.appendChild(xmlDoc.createElement('AdditionalCustomerData'));
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'AccountIdentifier', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AddlCustDataAccountId', mSKS_EFT_FileDetail.RecId)));
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'AccountName', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'AccountNumber', mSKS_EFT_FileDetail.BankBankAcct, 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'TaxNumber', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TaxNumber', mSKS_EFT_FileDetail.RecId)), 30, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'VATNumber', this.CharacterReplacement(mSKS_EFT_FileDetail.CoRegNum), 20, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'TaxClearanceCertificateIndicator', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TaxClrCertificateId', mSKS_EFT_FileDetail.RecId)), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'TaxClearanceCertificateReference', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TaxClrCertificate', mSKS_EFT_FileDetail.RecId)), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'StreetAddressLine1', this.CharacterReplacement(companyInfo.postalAddress().Street), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'StreetCity', this.CharacterReplacement(companyInfo.postalAddress().City), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'StreetProvince', this.CharacterReplacement(companyInfo.postalAddress().State), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'PostalAddressLine1', this.CharacterReplacement(companyInfo.postalAddress().Street), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'PostalCity', this.CharacterReplacement(companyInfo.postalAddress().City), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'PostalProvince', this.CharacterReplacement(companyInfo.postalAddress().State), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'PostalCode', companyInfo.postalAddress().ZipCode, 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'ContactSurname', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AddlCustDataContactSurname', mSKS_EFT_FileDetail.RecId)), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'ContactName', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AddlCustDataContactName', mSKS_EFT_FileDetail.RecId)), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeAdditionalCustomerData, 'Email', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('EmailAddr', mSKS_EFT_FileDetail.RecId)), 0, false);
        
        //                      EntityCustomer
        nodeEntityCustomer = nodeResidentCustomerAccountHolder.appendChild(xmlDoc.createElement('EntityCustomer'));
        SKS_EFT_Format::xmlsetAttributeText(nodeEntityCustomer, 'LegalEntityName', this.CharacterReplacement(companyInfo.Name), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeEntityCustomer, 'TradingName', this.CharacterReplacement(companyInfo.Name), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeEntityCustomer, 'RegistrationNumber', this.CharacterReplacement(mSKS_EFT_FileDetail.CoRegNum), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeEntityCustomer, 'InstitutionalSector', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstitutionalSector', mSKS_EFT_FileDetail.RecId)), 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeEntityCustomer, 'IndustrialClassification', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IndustrialClassification', mSKS_EFT_FileDetail.RecId)), 0, false);

        //                      MonetaryDetails
        nodeMonetaryDetails = nodeOriginalTransaction.appendChild(xmlDoc.createElement('MonetaryDetails'));
        if(mSKS_EFT_FileDetail.PaymentCurrencyCode != 'ZAR')
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeMonetaryDetails, 'ForeignValue', num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0,2,0,0));
            SKS_EFT_Format::xmlsetAttributeText(nodeMonetaryDetails, 'ForeignCurrencyCode', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        SKS_EFT_Format::xmlsetAttributeText(nodeMonetaryDetails, 'BoPCategory', BOPCtgyCd, 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeMonetaryDetails, 'SubBoPCategory', BOPSubCtgyCd, 0, false);
        SKS_EFT_Format::xmlsetAttributeText(nodeMonetaryDetails, 'LocationCountry', mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, 0, false);

        //                          ImportExportData
        nodeImportExportData = nodeMonetaryDetails.appendChild(xmlDoc.createElement('ImportExportData'));

        //                              SubSequence
        SKS_EFT_Format::xmlsetAttributeText(nodeImportExportData, 'SubSequence', num2Str(subSeq, 0,0,0,0));

        //                              PaymentValue
        SKS_EFT_Format::xmlsetAttributeText(nodeImportExportData, 'PaymentValue', num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0,2,0,0));

        //                              PaymentCurrencyCode
        SKS_EFT_Format::xmlsetAttributeText(nodeImportExportData, 'PaymentCurrencyCode', mSKS_EFT_FileDetail.PaymentCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              ClrSysMmbId
        //                  MmbId
        //          BranchId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
    
        if(mSKS_EFT_FileDetail.BankBankSwiftNo)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
            
            //              BICFI                
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BICFI', mSKS_EFT_FileDetail.BankBankSwiftNo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.29: InstrId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtId;
    
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));
    
        //              2.29: InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodePmftTpInf;
        XmlElement  nodeLclInstrm;

        str value;
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('LclInstrm', mSKS_EFT_FileDetail.RecId));

        if(value)
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

            //          2.11: LclInstrm
            nodeLclInstrm = nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));

            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
            mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>