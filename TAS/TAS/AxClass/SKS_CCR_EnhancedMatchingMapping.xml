<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_EnhancedMatchingMapping</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CCR_EnhancedMatchingMapping
{
    #define.DefaultRuleGroupId('DEFAULT')
    #define.DefaultMatchRuleDesc('Default matching group')
    #define.DefaultGLRuleDesc('Default mapping group')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkForEnhancementRecords</Name>
				<Source><![CDATA[
    //#define.JournalSumRuleGroupId('JOURNAL SUMMARY')
    //#define.JournalSumMatchRuleDesc('Journal summary matching group')
    public static server void checkForEnhancementRecords(int _DateTolerance)
    {
        SKS_BR_MatchingRulesMast sks_BR_MatchingRulesMast;
        SKS_BR_MatchingRuleDetails sks_BR_MatchingRuleDetails;
        SKS_BR_GLMappingRuleGroup sks_BR_GLMappingRuleGroup;
        SKS_BR_GLMappingRuleLookup sks_BR_GLMappingRuleLookup;
        SKS_BR_FileFormatTranMapping sks_BR_FileFormatTranMapping;
        ;

        //Check the SKS_BR_MatchingRulesTable to determine if the initial records need to be created
        select firstOnly RuleGroupId from sks_BR_MatchingRulesMast
            where sks_BR_MatchingRulesMast.CCR_IsCCReconciliation == NoYes::Yes;    /// SKS_FDD_13903 - To make sure that its picking only CCR format

        if (!sks_BR_MatchingRulesMast)
        {
            sks_BR_MatchingRuleDetails.skipDeleteActions(true);
            delete_from sks_BR_MatchingRuleDetails
                where sks_BR_MatchingRuleDetails.CCR_IsCCReconciliation == NoYes::Yes;
            SKS_CCR_EnhancedMatchingMapping::createMatchingRecords(_DateTolerance);
        }

        //Check the SKS_BR_GLMappingRuleGroup to determine if the initial record needs to be created
        select firstOnly RuleGroupId from sks_BR_GLMappingRuleGroup
            where sks_BR_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::Yes;    /// SKS_FDD_13903 - To make sure that its picking only CCR format

        if (!sks_BR_GLMappingRuleGroup)
        {
            sks_BR_MatchingRuleDetails.skipDeleteActions(true);
            delete_from sks_BR_GLMappingRuleLookup
                where sks_BR_GLMappingRuleLookup.CCR_IsCCReconciliation == NoYes::Yes;
            SKS_CCR_EnhancedMatchingMapping::createGLMappingRecords();
        }
        //Check the SKS_BR_FileFormatTranMapping to determine if the table needs to be updated
        select firstOnly RecId from sks_BR_FileFormatTranMapping
            where sks_BR_FileFormatTranMapping.DoNotImport == NoYes::No &&
                    sks_BR_FileFormatTranMapping.MatchingRuleGroupId == '' &&
                    sks_BR_FileFormatTranMapping.GLMappingRuleGroupID == '' &&
                    sks_BR_FileFormatTranMapping.CCR_IsCCRFormat == NoYes::Yes;    /// SKS_FDD_13903 - To make sure that its picking only CCR format
        if (sks_BR_FileFormatTranMapping)
        {
            SKS_CCR_EnhancedMatchingMapping::updateFileFormatTranMappingRecords();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGLMappingRecords</Name>
				<Source><![CDATA[
    public static server void createGLMappingRecords()
    {
        SKS_BR_GLMappingRuleGroup sks_BR_GLMappingRuleGroup;
        ;

        //Create Rules Group Default record
        sks_BR_GLMappingRuleGroup.Description = #DefaultGLRuleDesc;
        sks_BR_GLMappingRuleGroup.ParseRuleId = '';
        sks_BR_GLMappingRuleGroup.RuleGroupId = #DefaultRuleGroupId;
        sks_BR_GLMappingRuleGroup.CCR_IsCCReconciliation = NoYes::Yes;
        sks_BR_GLMappingRuleGroup.Insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMatchingRecords</Name>
				<Source><![CDATA[
    public static server void createMatchingRecords(int _DateTolerance)
    {
        SKS_BR_MatchingRulesMast sks_BR_MatchingRulesMast;
        SKS_BR_MatchingRuleDetails SKS_BR_MatchingRuleDetails;
        ;

        //Create Rules Group Default record
        sks_BR_MatchingRulesMast.AXBankTranTypeFilter = SKS_BR_AXBankTranTypeFilter::NoFilter;
        sks_BR_MatchingRulesMast.DefaultCredit = NoYes::Yes;
        sks_BR_MatchingRulesMast.DefaultDebit = NoYes::Yes;
        sks_BR_MatchingRulesMast.Description = #DefaultMatchRuleDesc;
        sks_BR_MatchingRulesMast.ParseRule = '';
        sks_BR_MatchingRulesMast.RuleGroupId = #DefaultRuleGroupId;
        sks_BR_MatchingRulesMast.CCR_IsCCReconciliation = NoYes::Yes;
        sks_BR_MatchingRulesMast.Insert();

        //Create default Reference number/amount detail record
        sks_BR_MatchingRuleDetails.AmountTolerance = 0;
        sks_BR_MatchingRuleDetails.AXRefNbrType = SKS_BR_AXRefNbrType::PaymentRef;
        sks_BR_MatchingRuleDetails.DateTolerance = 0;
        sks_BR_MatchingRuleDetails.ImportReference = SKS_BR_ImportReference::CustomerRefNbr;
        sks_BR_MatchingRuleDetails.MatchConfidence = 100;
        sks_BR_MatchingRuleDetails.MatchConfidenceOnDuplicate = 100;
        sks_BR_MatchingRuleDetails.OnDuplicate = SKS_BR_DuplicateTransHandling::Match;
        sks_BR_MatchingRuleDetails.CCR_Rule = SKS_CCR_MatchingRules::RefNbrAndAmt;
        sks_BR_MatchingRuleDetails.SKS_BR_MatchingRulesMast = sks_BR_MatchingRulesMast.RuleGroupId;
        sks_BR_MatchingRuleDetails.Step = 1;
        sks_BR_MatchingRuleDetails.SummarizeByDate = SKS_BR_SummaryBy::None;
        sks_BR_MatchingRuleDetails.CCR_IsCCReconciliation = NoYes::Yes;
        sks_BR_MatchingRuleDetails.Insert();

        //There is no Deposit number/amount for CCR
        //Create default Deposit number/amount detail record
        /*sks_BR_MatchingRuleDetails.AmountTolerance = 0;
        sks_BR_MatchingRuleDetails.AXRefNbrType = SKS_BR_AXRefNbrType::DepositNbr;
        sks_BR_MatchingRuleDetails.DateTolerance = 0;
        sks_BR_MatchingRuleDetails.ImportReference = SKS_BR_ImportReference::CustomerRefNbr;
        sks_BR_MatchingRuleDetails.MatchConfidence = 100;
        sks_BR_MatchingRuleDetails.MatchConfidenceOnDuplicate = 100;
        sks_BR_MatchingRuleDetails.OnDuplicate = SKS_BR_DuplicateTransHandling::Match;
        sks_BR_MatchingRuleDetails.CCR_Rule = SKS_CCR_MatchingRules::RefNbrAndAmt;
        sks_BR_MatchingRuleDetails.SKS_BR_MatchingRulesMast = sks_BR_MatchingRulesMast.RuleGroupId;
        sks_BR_MatchingRuleDetails.Step = 2;
        //sks_BR_MatchingRuleDetails.SummarizeByDate = SKS_BR_SummaryBy::None;
        sks_BR_MatchingRuleDetails.CCR_IsCCReconciliation = NoYes::Yes;
        sks_BR_MatchingRuleDetails.Insert();*/

        //Create default Date/amount detail record
        sks_BR_MatchingRuleDetails.AmountTolerance = 0;
        //sks_BR_MatchingRuleDetails.AXRefNbrType = SKS_BR_AXRefNbrType::ChkNbr;
        sks_BR_MatchingRuleDetails.DateTolerance = _DateTolerance;
        sks_BR_MatchingRuleDetails.ImportReference = SKS_BR_ImportReference::CustomerRefNbr;
        sks_BR_MatchingRuleDetails.MatchConfidence = 100;
        sks_BR_MatchingRuleDetails.MatchConfidenceOnDuplicate = 100;
        sks_BR_MatchingRuleDetails.OnDuplicate = SKS_BR_DuplicateTransHandling::Match;
        sks_BR_MatchingRuleDetails.CCR_Rule = SKS_CCR_MatchingRules::DateAndAmt;
        sks_BR_MatchingRuleDetails.SKS_BR_MatchingRulesMast = sks_BR_MatchingRulesMast.RuleGroupId;
        sks_BR_MatchingRuleDetails.Step = 3;
        //sks_BR_MatchingRuleDetails.SummarizeByDate = SKS_BR_SummaryBy::None;
        sks_BR_MatchingRuleDetails.CCR_IsCCReconciliation = NoYes::Yes;
        sks_BR_MatchingRuleDetails.Insert();

        //There is no Journal Summary record for CCR
        /*
        //Create Rule Group Journal Summary record
        sks_BR_MatchingRulesMast.AXBankTranTypeFilter = SKS_BR_AXBankTranTypeFilter::ByTransactionType;
        sks_BR_MatchingRulesMast.DefaultCredit = NoYes::No;
        sks_BR_MatchingRulesMast.DefaultDebit = NoYes::No;
        sks_BR_MatchingRulesMast.Description = #JournalSumMatchRuleDesc;
        sks_BR_MatchingRulesMast.ParseRule = '';
        sks_BR_MatchingRulesMast.RuleGroupId = #JournalSumRuleGroupId;
        sks_BR_MatchingRulesMast.Insert();

        //Create Journal Summary detail record
        sks_BR_MatchingRuleDetails.AmountTolerance = 0;
        sks_BR_MatchingRuleDetails.AXRefNbrType = SKS_BR_AXRefNbrType::ChkNbr;
        sks_BR_MatchingRuleDetails.DateTolerance = 0;
        sks_BR_MatchingRuleDetails.ImportReference = SKS_BR_ImportReference::CustomerRefNbr;
        sks_BR_MatchingRuleDetails.MatchConfidence = 100;
        sks_BR_MatchingRuleDetails.MatchConfidenceOnDuplicate = 0;
        sks_BR_MatchingRuleDetails.OnDuplicate = SKS_BR_DuplicateTransHandling::DontMatch;
        sks_BR_MatchingRuleDetails.Rule = SKS_BR_MatchingRules::JournalSummary;
        sks_BR_MatchingRuleDetails.SKS_BR_MatchingRulesMast = sks_BR_MatchingRulesMast.RuleGroupId;
        sks_BR_MatchingRuleDetails.Step = 1;
        sks_BR_MatchingRuleDetails.SummarizeByDate = SKS_BR_SummaryBy::None;
        sks_BR_MatchingRuleDetails.Insert();
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankAccountTransFields</Name>
				<Source><![CDATA[
    private static server void setBankAccountTransFields(SKS_CCR_BankTran _sks_ccr_banktran, boolean _preMatch)
    {
        BankAccountTrans bankAccountTrans;
        bankAccountTrans.skipDataMethods(true);
        update_recordSet bankAccountTrans setting
            SKS_BR_ManualReconciliationID = _sks_ccr_banktran.ManualReconciliationID,
            SKS_BR_IntermMatch = _preMatch
                where
                bankAccountTrans.SKS_BR_BankTranRecId == _sks_ccr_banktran.RecId;
        /*
        while select forUpdate bankAccountTrans where
            bankAccountTrans.SKS_BR_BankTranRecId == _sks_br_banktran.RecId
        {
            bankAccountTrans.SKS_BR_ManualReconciliationID = _sks_br_banktran.ManualReconciliationID;
            if(_preMatch)
            {
                bankAccountTrans.SKS_BR_IntermMatch = NoYes::Yes;
            }
            bankAccountTrans.update();
        }
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRuleGroup</Name>
				<Source><![CDATA[
    private static server void setRuleGroup()
    {
        SKS_CCR_BankTran sks_ccr_banktran;
        // GL mapping rule group
        update_recordSet sks_ccr_banktran setting
            GLMappingRuleGroupId = #DefaultRuleGroupId
            where
                sks_ccr_banktran.MatchingRuleGroupId == '' &&
                sks_ccr_banktran.GLMappingRuleGroupId == '' &&
                sks_ccr_banktran.LedgerJournalRecId != 0;
        /*
        // Payment journal match rule group
        update_recordSet sks_br_banktran setting
            MatchingRuleGroupId = #JournalSumRuleGroupId
            where
                sks_br_banktran.MatchingRuleGroupId == '' &&
                sks_br_banktran.GLMappingRuleGroupId == '' &&
                sks_br_banktran.PaymentJournalNum != '';*/

        // Everything else set to default match rule group
        update_recordSet sks_ccr_banktran setting
            MatchingRuleGroupId = #DefaultRuleGroupId
            where
                sks_ccr_banktran.MatchingRuleGroupId == '' &&
                sks_ccr_banktran.GLMappingRuleGroupId == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSKS_CCR_BankTranFields</Name>
				<Source><![CDATA[
    private static server void setSKS_CCR_BankTranFields(SKS_CCR_BankTran _sks_ccr_banktran)
    {
        _sks_ccr_banktran.ManualReconciliationID = newGuid();
        _sks_ccr_banktran.MatchedType = SKS_BR_MatchedType::Historic;
        _sks_ccr_banktran.MatchConfidence = 100;
        if(_sks_ccr_banktran.PaymentJournalNum == '' && _sks_ccr_banktran.IntermPaymentJournalNum != '')
        {
            _sks_ccr_banktran.PaymentJournalNum = _sks_ccr_banktran.IntermPaymentJournalNum;
        }
        _sks_ccr_banktran.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFileFormatTranMappingRecords</Name>
				<Source><![CDATA[
    public static server void updateFileFormatTranMappingRecords()
    {
        SKS_BR_FileFormatTranMapping sks_BR_FileFormatTranMapping;
        ;
        update_recordSet sks_BR_FileFormatTranMapping
        setting
            MatchingRuleGroupId = #DefaultRuleGroupId
        where sks_BR_FileFormatTranMapping.DoNotImport == NoYes::No &&
              sks_BR_FileFormatTranMapping.CreateGLTran == NoYes::No &&
              sks_BR_FileFormatTranMapping.PaymentMatch == NoYes::No &&
              sks_BR_FileFormatTranMapping.CCR_IsCCRFormat == NoYes::Yes;
        /*
        update_recordSet sks_BR_FileFormatTranMapping
        setting
            MatchingRuleGroupId = #JournalSumRuleGroupId
        where sks_BR_FileFormatTranMapping.DoNotImport == NoYes::No &&
              sks_BR_FileFormatTranMapping.CreateGLTran == NoYes::No &&
              sks_BR_FileFormatTranMapping.PaymentMatch == NoYes::Yes;
        */
        update_recordSet sks_BR_FileFormatTranMapping
        setting
            GLMappingRuleGroupId = #DefaultRuleGroupId
        where sks_BR_FileFormatTranMapping.DoNotImport == NoYes::No &&
              sks_BR_FileFormatTranMapping.CreateGLTran == NoYes::Yes &&
              sks_BR_FileFormatTranMapping.PaymentMatch == NoYes::No  &&
              sks_BR_FileFormatTranMapping.CCR_IsCCRFormat == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeMatches</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer sks_br_banktran is selected forUpdate and is passed to other methods where it is modified.")]
    public static server void upgradeMatches(str _previousTASVersion)
    {
        if(SKS_PP_Sys::getSKSMajorVersion(_previousTASVersion) > 8)
        {
            return;
        }

        #SKS_Global
        SKS_CCR_BankTran sks_ccr_banktran;
        ttsBegin;
        // Final match regular or manual.  This also covers GL match
        while select forupdate sks_ccr_banktran where
            sks_ccr_banktran.ManualReconciliationID == str2Guid(#EmptyGuidString) &&
            sks_ccr_banktran.BankTranRecId != 0
        {
            SKS_CCR_EnhancedMatchingMapping::setSKS_CCR_BankTranFields(sks_ccr_banktran);
            SKS_CCR_EnhancedMatchingMapping::setBankAccountTransFields(sks_ccr_banktran, false);
        }
        // Final match payment journal
        while select forupdate sks_ccr_banktran where
            sks_ccr_banktran.ManualReconciliationID == str2Guid(#EmptyGuidString) &&
            sks_ccr_banktran.PaymentJournalNum != ''
        {
            SKS_CCR_EnhancedMatchingMapping::setSKS_CCR_BankTranFields(sks_ccr_banktran);
            SKS_CCR_EnhancedMatchingMapping::setBankAccountTransFields(sks_ccr_banktran, false);
        }
        // Pre match regular or manual
        while select forupdate sks_ccr_banktran where
            sks_ccr_banktran.ManualReconciliationID == str2Guid(#EmptyGuidString) &&
            sks_ccr_banktran.AccountStatementNum == '' &&
            sks_ccr_banktran.BankTranIntermRecId != 0
        {
            SKS_CCR_EnhancedMatchingMapping::setSKS_CCR_BankTranFields(sks_ccr_banktran);
            SKS_CCR_EnhancedMatchingMapping::setBankAccountTransFields(sks_ccr_banktran, true);
        }
        // Pre match payment journal
        while select forupdate sks_ccr_banktran where
            sks_ccr_banktran.ManualReconciliationID == str2Guid(#EmptyGuidString) &&
            sks_ccr_banktran.AccountStatementNum == '' &&
            sks_ccr_banktran.IntermPaymentJournalNum != ''
        {
            SKS_CCR_EnhancedMatchingMapping::setSKS_CCR_BankTranFields(sks_ccr_banktran);
            SKS_CCR_EnhancedMatchingMapping::setBankAccountTransFields(sks_ccr_banktran, true);
        }
        SKS_CCR_EnhancedMatchingMapping::setRuleGroup();
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>