<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOA_PAYMODE_X_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BOA_PAYMODE_X_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BOA_PAYMODE_X_EDI820 extends SKS_EFT_Format
{
    #define.FormatVersion('20221021')
    #define.LineEnd('~')
    #define.Separator('*')

    #define.ACH('ACH')
    #define.CHK('CHK')
    #define.VPP('VPP')

    int mTranSetCount;
    int mSegmentCount;
    str mIntControlNbr;
    str mGroupControlNbr;
    str mSenderControlNbr;
    AmountMST mPaymentAmount;
    str mCurrentTime;
    SKS_EFT_EDI mSKS_EFT_EDI;
    str mBPR_03;
    SKS_EFT_FileDetail prevSKS_EFT_FileDetail;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
            
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);    
    
            // Initialize EDI class
            mSKS_EFT_FileDetail_AddendaDetailConfig = SKS_EFT_FileDetail_AddendaDetailConfig::find(mSKS_EFT_FileDetail.RecId);
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_FileDetail_AddendaDetailConfig.EDI820Layout, mSKS_EFT_File.RecId);
            
            mSKS_EFT_EDI.setEFTFileId(SKS_EFT_Format::getCodelookupvalue('NextFileId', mSKS_EFT_FileDetail.RecId));
                
            if(firstRec)
            {
                firstRec = false;
    
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Detail lines
            this.rec_ST();
            this.rec_BPR();
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
            {
                this.rec_NTE_DEL();
            }
        
            this.rec_TRN();
        
            this.rec_N1PR();
            this.rec_N3PR();
            this.rec_N4PR();
    
            this.rec_N1PE();
            this.rec_N3PE();
            this.rec_N4PE();
    
            this.rec_REFVR();
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_RMRIV(invSKS_EFT_FileDetail);
                this.rec_REFPO(invSKS_EFT_FileDetail);
                this.rec_DTM(invSKS_EFT_FileDetail);
            }
    
            this.rec_SE();
    
            mSegmentCount = 0;

            if(mSKS_EFT_FileDetail.PaymentCompany == curExt())
                prevSKS_EFT_FileDetail.data(mSKS_EFT_FileDetail);
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE();
        this.rec_IEA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA(mSKS_EFT_FileDetail);
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    boolean rec_GS()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //-------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS(mSKS_EFT_FileDetail);
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    boolean rec_ST()
    {
        //------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
        mTranSetCount++;
    
        sb.Append('ST');
        sb.Append(#Separator);
    
        //1     Transaction Set ID Code
        sb.Append('820');
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        if(strLen(mSKS_EFT_FileDetail.PaymentReference) < 4)
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),9);
        }
        sb.Append(mSenderControlNbr);
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    boolean rec_BPR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //17    Business Function Code                              3       AN
        //18    Intermediary DFI ID Number Qualifier                2       ID
        //19    Intermediary DFI ID Number                          12      AN
        //20    Intermediary Account # Qualifier                    3       ID
        //21    Intermediary Bank Account number                    35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;

        mSegmentCount++;
    
        sb.Append('BPR');
        sb.Append(#Separator);
    
        //01    Trans. Handling Code
        sb.Append('C');
        sb.Append(#Separator);
    
        //02    Monetary Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(num2str((amt),0,2,0,0));
        sb.Append(#Separator);
    
        //03    Credit/Debit Flag Code
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
        }
        else
        {
            mBPR_03 = 'C';
        }
        sb.Append(mBPR_03);
        sb.Append(#Separator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACH:
                sb.Append('ACH');
                break;
            Case #CHK:
                sb.Append('CHK');
                break;
            Case #VPP:
                sb.Append('VPP');
                break;
        }
        sb.Append(#Separator);
    
        //05    Payment Format
        sb.Append(#Separator);
    
        //06    DFI ID No. Qualifier
        sb.Append('01');
        sb.Append(#Separator);
    
        //07    DFI ID Number
        sb.Append(subStr(mSKS_EFT_FileDetail.BankBankTransit, 1, 9));
        sb.Append(#Separator);
    
        //08    Acct. No. Qual. Code
        sb.Append('DA');
        sb.Append(#Separator);
    
        //09    Account Number
        sb.Append(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 35));
        sb.Append(#Separator);
    
        //10    Orig. Co. ID
        sb.Append(#Separator);
    
        //11    Orig. Co. Code
        sb.Append(#Separator);
    
        //12    RDFI ID No. Qualifier
        sb.Append(#Separator);
        //13    RDFI ID Number
        sb.Append(#Separator);
    
        //14    Acct. No. Qual Code
        sb.Append(#Separator);
    
        //15    Account Number
        sb.Append(#Separator);
    
        //16    Effective Entry Date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTE_DEL</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Note Reference Code                                 3       ID
    //02    Description                                        80      AN      Use For Bank To Bank Instructions
    //---------------------------------------------------------------------------------------------------------
    boolean rec_NTE_DEL()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if (msKS_EFT_FileDetail_Instructions.PmtInstText1 || msKS_EFT_FileDetail_Instructions.PmtInstText2)
        {
            mSegmentCount++;

            sb.Append('NTE');
            sb.Append(#Separator);

            //01     Note Reference Code
            sb.Append('DEL');
            sb.Append(#Separator);
                
            if(msKS_EFT_FileDetail_Instructions.PmtInstText1 && msKS_EFT_FileDetail_Instructions.PmtInstText2)
            {
                sb.Append(subStr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText1) + '-' + this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText2), 1, 80));
            }
            else if(msKS_EFT_FileDetail_Instructions.PmtInstText1)
            {
                sb.Append(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText1));
            }
            else
            {
                sb.Append(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText2));
            }

            sb.Append(#LineEnd);
            this.fileWrite(sb.ToString());
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    boolean rec_TRN()
    {
        //-----------------------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Identification                            30      AN      Payment Trace No
        //03    Orig. Co. ID                                        10      AN      Not used
        //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
        //-----------------------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
    
        sb.Append('TRN');
        sb.Append(#Separator);
    
        //01     Trace Type Code
        sb.Append('1');
        sb.Append(#Separator);
    
        //02     Reference Identification
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACH:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 20));
                break;
            Case #VPP:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 9));
                break;
            Case #CHK:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 10));
                break;
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    boolean rec_N1PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('PR');
        sb.Append(#Separator);
    
        //02     Name
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 1, 35));
        sb.Append(#Separator);

        //03    Identification Code Qualifier
        //04    Identification Code
        
        sb.Append('ZZ');
        sb.Append(#Separator);

        sb.Append(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PaymodexId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,80));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PR</Name>
				<Source><![CDATA[
    boolean rec_N3PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payor Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payor Address (Line 2) Domestic and Foreign
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
        {
            mSegmentCount++;

            sb.Append('N3');
            sb.Append(#Separator);    
    
            //01    Address Information
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 1, 55));
    
            //02    Address Information
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 1, 55));
            }
    
            sb.Append(#LineEnd);
            
            this.fileWrite(sb.ToString());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    boolean rec_N4PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != '')
        {
            mSegmentCount++;

            sb.Append('N4');
            sb.Append(#Separator);
    
            //01    City Address
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 1, 30));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, 1, 15));
            sb.Append(#Separator);
    
            //04    Country Code
            sb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
    
            sb.Append(#LineEnd);
        
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    boolean rec_N1PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str name;

        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('PE');
        sb.Append(#Separator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }
        else
        {
            name = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }
    
        sb.Append(subStr(name, 1, 35));
        sb.Append(#Separator);

        sb.Append('ZZ');
        sb.Append(#Separator);

        sb.Append(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PaymXId', mSKS_EFT_FileDetail.RecId)),1,80));
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    boolean rec_N3PE()
    {
        //---------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
        //---------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '')
        {
            mSegmentCount++;

            sb.Append('N3');
            sb.Append(#Separator);
    
            //01    Address Information
            sb.Append(substr(mRemittanceAdrLine1, 1, 55));
    
            //02    Address Information
            if(mRemittanceAdrLine2 != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(mRemittanceAdrLine2, 1, 55));
            }
    
            sb.Append(#LineEnd);
        
            this.fileWrite(sb.ToString());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    boolean rec_N4PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //05    Location Qualifier                                  2       ID
        //06    Location Identifier                                 30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
        {
            mSegmentCount++;

            sb.Append('N4');
            sb.Append(#Separator);
    
            //01    City Address
            sb.Append(substr(mRemittanceCity, 1, 30));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(mRemittanceState, 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(mRemittanceZipCode, 1, 15));
            sb.Append(#Separator);
    
            //04    Country Code
            sb.Append(mRemittanceCountryRegionId);
    
            sb.Append(#LineEnd);    
        
            this.fileWrite(sb.ToString());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFVR</Name>
				<Source><![CDATA[
    boolean rec_REFVR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference Identification Qualifier
        sb.Append('VR');
        sb.Append(#Separator);
    
        //02    Reference Identification
        sb.Append(substr(mSKS_EFT_FileDetail.AccountNum,1,30));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    9       AN
        //03    Payment Action Code                                 2       ID
        //04    Amount paid                                         18      R
        //05    Original Amount                                     18      R
        //06    Discount Amount                                     18      R
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        mSegmentCount++;
    
        sb.Append('RMR');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            sb.Append('IV'); // Only write IV if an invoice number exists
        }
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber, 1, 50));
        sb.Append(#Separator);
    
        //03    Payment Action Code
        sb.Append('PO');
        sb.Append(#Separator);
    
        //04    Amount paid
        sb.Append(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 0, 0));
        sb.Append(#Separator);
    
        //05    Original Amount
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
    
        sb.Append(num2str(amt * -1, 0, 2, 0, 0));
        sb.Append(#Separator);
    
        //06    Discount Amount
        amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
    
        sb.Append(num2str(amt * -1, 0, 2, 0, 0));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFPO</Name>
				<Source><![CDATA[
    boolean rec_REFPO(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //03    Reference Description                               45      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str PONum = '';
        PONum = this.CharacterReplacement(invSKS_EFT_FileDetail.PurchId);
    
        if(PONum)
        {
            mSegmentCount++;
    
            sb.Append('REF');
            sb.Append(#Separator);
    
            //01     Reference Identification Qualifier
            sb.Append('PO');
            sb.Append(#Separator);
    
            //02    Reference Identification
            sb.Append(substr(PONum, 1, 30));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('DTM');
        sb.Append(#Separator);
    
        //01     Date/Time Qualifier
        sb.Append('003');
        sb.Append(#Separator);
    
        //03    Description
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
    
        sb.Append(#LineEnd);
    
        // Only write segment if an Invoice exists.  If no invoice, the Invoice date will be null.
        if(invSKS_EFT_FileDetail.InvoiceDate != dateNull())
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    boolean rec_SE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('SE');
        sb.Append(#Separator);
    
        //1     Number of Included Segments
        sb.Append(num2str(mSegmentCount,0,0,0,0));
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        sb.Append(mSenderControlNbr);
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    boolean rec_GE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setTranSetCount(mTranSetCount);
        value = mSKS_EFT_EDI.buildGE(prevSKS_EFT_FileDetail);
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    boolean rec_IEA()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA(prevSKS_EFT_FileDetail);
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        //Populate Remittance Information from Vendor eBanking details
        mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
        mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
        mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
        mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
        mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
        mRemittanceZipCode = mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>