<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_FIFTHTHIRD_v1_1_80</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_FIFTHTHIRD_v1_1_80 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_FIFTHTHIRD_v1_1_80 extends SKS_EFT_Format
{
    #define.FormatVersion('20220711')
    int                     mItemSequence;
    AmountMST               mItemAmount;
    BankAccountTable        mBankAccountTable;
    SKS_EFT_SequenceNumber  gSequenceNumber;
    str                     gSeqNum;

    #define.FWT('Wire-FED')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Filler</Name>
				<Source><![CDATA[
    private str Filler(int _numSpacesToFill)
    {
        return SKS_PP_StringFormats::strFill(_numSpacesToFill, '',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BusDate = SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        BusTime = SKS_PP_StringFormats::strTimeHHMMSS();
    
        // Get SKS_EFT_Bank
        this.getSKS_EFT_Bank();
    
        // Batch Header
        this.rec_FileHeader();
    
        mItemAmount = 0;
        mItemSequence = 0;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            //Funds Transfer Header
            this.rec_FTR_Header1();
            this.rec_FTR_Header2();
    
            //Debit Party Record
            this.rec_DBT();
    
            //Intermediary Bank record
            this.rec_IBK();
    
            //Beneficiary Bank Record
            this.rec_BBK();
    
            //Beneficiary Record
            this.rec_BNF();
    
            //Funds Transfer Trailer
            this.rec_FTR_Trailer();
            next mSKS_EFT_FileDetail;
        }
    
        //Batch trailer
        this.rec_FileTrailer1();
        this.rec_FileTrailer2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        ;
        if(mSKS_EFT_FileFormat)
        {
            // If found, check date
            if(mSKS_EFT_FileFormat.NextDailyResetDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                //Get Next Sequence Number
                gSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
            }
            else
            {
                gSequenceNumber = 0001;
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BBK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    Reserved                                                   1       1
    // 2    Field_Tag                                             2 -  5       4
    // 3    IDTYPE                                                     6       1
    // 4    Delimiter                                                  7       1
    // 5    ABA/SWOFT ID                                          8 - 31      24
    // 6    Filler                                               32 - 80      49
    
    //Continuation lines (Can be repeated up to 4 lines)
    // 1    Reserved                                                    1       1
    // 2    Continuation Character '-'                                  2       1
    // 3    Beneficiary Bank Info                                       3       35
    
    private void rec_BBK()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str locCityRegion;
        ;
        // 1    Reserved                                                   1       1
        sb.Append(' ');
    
        // 2    Field_Tag                                             2 -  5       4
        sb.Append('BBK=');
    
        // 3    IDTYPE                                                     6       1
        sb.Append('A');
    
        // 4    Delimiter                                                  7       1
        sb.Append('/');
    
        // 5    ID                                                    8 - 31      24
        sb.Append(SKS_PP_StringFormats::strFill(24,mSKS_EFT_FileDetail.DepBankTransit,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
    
        this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Clear();
    
        //if there is a name, add name and (possibly) address info
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WBenBankName)) > 0)
        {
            //first char is reserved
            sb.Append(' ');
            //continuation char
            sb.Append('-');
            //BankNumber
            sb.Append(SKS_PP_StringFormats::strFill(35,this.CharacterReplacement(strLRTrim(mSKS_EFT_VendorPaym.WBenBankName)),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            //write to file
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //clear buffer
            sb.Clear();
        }
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WBenBankBranch)) > 0)
        {
            //first char is reserved
            sb.Append(' ');
            //continuation char
            sb.Append('-');
            //Bank Branch
            sb.Append(SKS_PP_StringFormats::strFill(35,this.CharacterReplacement(strLRTrim(mSKS_EFT_VendorPaym.WBenBankBranch)),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            //write to file
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //clear buffer
            sb.Clear();
        }
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WBenBankAddr)) > 0)
        {
            //first char is reserved
            sb.Append(' ');
            //continuation char
            sb.Append('-');
            //Bank Address
            sb.Append(SKS_PP_StringFormats::strFill(35,this.CharacterReplacement(strLRTrim(mSKS_EFT_VendorPaym.WBenBankAddr)),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            //write to file
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //clear buffer
            sb.Clear();
        }
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WBenBankCity)) > 0 || strLen(strLRTrim(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)) > 0)
        {
            //first char is reserved
            sb.Append(' ');
            //continuation char
            sb.Append('-');
            //Bank city
            locCityRegion = strLRTrim(mSKS_EFT_VendorPaym.WBenBankCity);
            //if both city AND region exist, seperate by comma
            if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WBenBankCity)) > 0 && strLen(strLRTrim(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)) > 0)
                locCityRegion = locCityRegion + ', ';
            //Bank Region
            locCityRegion = this.CharacterReplacement(locCityRegion) + strLRTrim(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
    
            sb.Append(SKS_PP_StringFormats::strFill(35,locCityRegion,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            //write to file
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //clear buffer
            sb.Clear();
        }
    
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BNF</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    Reserved                                                   1       1
    // 2    IDTYPE                                                     6       1
    // 4    Delimiter                                                  7       1
    // 5    ABA                                                   8 - 31      24
    // 6    Filler                                               32 - 80      49
    
    //Continuation lines (Can be repeated up to 4 lines)
    // 1    Reserved                                                    1       1
    // 2    Continuation Character '-'                                  2       1
    // 3    BeneficIary Info                                            3       35
    
    private void rec_BNF()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str locCityRegion;
        ;
        // 1    Reserved                                                   1       1
        sb.Append(' ');
    
        // 2    Field_Tag                                             2 -  5       4
        sb.Append('BNF=');
    
        // 3    IDTYPE                                                     6       1
        sb.Append('D');
    
        // 4    Delimiter                                                  7       1
        sb.Append('/');
        // 5    ID                                                    8 - 31      24
    
        sb.Append(SKS_PP_StringFormats::strFill(24,mSKS_EFT_FileDetail.DepBankAcct,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Clear();
    
        //if there is a name, add name and (possibly) address info
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.wBeneName)) > 0)
        {
            //first char is reserved
            sb.Append(' ');
            //continuation char
            sb.Append('-');
            //BankNumber
            sb.Append(SKS_PP_StringFormats::strFill(35,this.CharacterReplacement(strLRTrim(mSKS_EFT_VendorPaym.wBeneName)),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            //write to file
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //clear buffer
            sb.Clear();
        }
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneAddr)) > 0)
        {
            //first char is reserved
            sb.Append(' ');
            //continuation char
            sb.Append('-');
            //Bank Branch
            sb.Append(SKS_PP_StringFormats::strFill(35,this.CharacterReplacement(strLRTrim(mSKS_EFT_VendorPaym.WBeneAddr)),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            //write to file
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //clear buffer
            sb.Clear();
        }
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneAddr2)) > 0)
        {
            //first char is reserved
            sb.Append(' ');
            //continuation char
            sb.Append('-');
            //Bank Address
            sb.Append(SKS_PP_StringFormats::strFill(35,this.CharacterReplacement(strLRTrim(mSKS_EFT_VendorPaym.WBeneAddr2)),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            //write to file
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //clear buffer
            sb.Clear();
        }
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneCity)) > 0
            || strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneState)) > 0
            || strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneZipPostal)) > 0
            || strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneCountryRegionId)) > 0 )
        {
            //first char is reserved
            sb.Append(' ');
            //continuation char
            sb.Append('-');
            //Bank city
            locCityRegion = strLRTrim(mSKS_EFT_VendorPaym.WBenBankCity);
    
            //Append state
            //if both city AND state exist, seperate by comma
            if(strLen(locCityRegion) > 0 && strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneState)) > 0)
                locCityRegion = locCityRegion + ',';
            locCityRegion = locCityRegion + strLRTrim(mSKS_EFT_VendorPaym.WBeneState);
    
            //Append Postal Code
            //if both (city||state exist) AND Postal Code exists, seperate by comma
            if(strLen(locCityRegion) > 0 && strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneZipPostal)) > 0)
                locCityRegion = locCityRegion + ',';
            locCityRegion = locCityRegion + strLRTrim(mSKS_EFT_VendorPaym.WBeneZipPostal);
    
            //Append Region Code
            //if both (city||state||Postal Code exist) AND Country/Region ID exists, seperate by comma
            if(strLen(locCityRegion) > 0 && strLen(strLRTrim(mSKS_EFT_VendorPaym.WBeneCountryRegionId)) > 0)
                locCityRegion = locCityRegion + ',';
            locCityRegion = this.CharacterReplacement(locCityRegion) + strLRTrim(mSKS_EFT_VendorPaym.WBeneCountryRegionId);
    
            sb.Append(SKS_PP_StringFormats::strFill(35,locCityRegion,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            //write to file
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //clear buffer
            sb.Clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DBT</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    Reserved                                                   1       1
    // 2    Field_Tag                                             2 -  5       4
    // 3    IDTYPE                                                     6       1
    // 4    Delimiter                                                  7       1
    // 5    Bank Account                                          8 - 31        24
    
    boolean rec_DBT()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        // 1    Reserved                                                   1       1
        sb.Append(SKS_PP_StringFormats::strFill(1,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        // 2    Field_Tag                                             2 -  5       4
        sb.Append('DBT=');
    
        // 3    IDTYPE                                                     6       1
        sb.Append('D');
    
        // 4    Delimiter                                                  7       1
        sb.Append('/');
    
        // 5    Bank Account                                               8 - 31      24
        sb.Append(SKS_PP_StringFormats::strFill(24,mSKS_EFT_FileDetail.BankBankAcct,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
    
        this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileHeader</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    *AMT                                                1 -  4       4
    // 2    Date YYMMDD                                         5 - 10       6
    // 3    Time HHMMSS                                         11 - 16      6
    // 4    Batch Id (Resets daily)                             17 - 20      4
    boolean rec_FileHeader()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1    Record-Type                                      1 -  4     4
        sb.Append('*AMT');
    
        //FILLER
        sb.Append(this.Filler(16));
    
    
        // 2    DATE YYMMDD                                     21- 27      7
        sb.Append(BusDate);
    
        // 3    TIME HHMMSS                                     11 - 16     6
        sb.Append(BusTime);
    
        // 4    Batch Id   (Resets daily)                       17 - 20     10
        this.getSequence();
        gSeqNum = SKS_PP_StringFormats::strFill(4, int2str(gSequenceNumber),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        sb.Append(gSeqNum);
        this.setSequence();
    
        this.fileWrite(SKS_PP_StringFormats::strFill(80, sb.ToString(),SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileTrailer1</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    Record_Type                                     1 -  4       4
    // 4    DATE                                            21 - 26       6
    // 5    TIME                                            27 - 32       6
    // 6    Batch_Sequence                                  33 - 36       4
    // 7    Transfer_Total                                  37 - 51      15
    // 8    Transfer_Count                                  52 - 56       5
    
    boolean rec_FileTrailer1()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1    BTRL1_Record_Type                                     1 -  4       4
        sb.Append('/AMT');
    
        //FILLER
        sb.Append(SKS_PP_StringFormats::strFill(16,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Left));
    
        // 2    Business DATE                                        21 - 26       6
        sb.Append(BusDate);
    
        // 5    Business TIME                                        27 - 32       6
        sb.Append(BusTime);
    
        // 6    Batch_Sequence                                 33 - 36       4
        sb.Append(SKS_PP_StringFormats::strFill(4,gSeqNum,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 7    Transfer_Total                                 37 - 51      15
        sb.Append(SKS_PP_StringFormats::strFill(15,num2str(-1 * mItemAmount,0,2,1,0),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 8    Transfer_Count                                 52 - 56       5
        sb.Append(SKS_PP_StringFormats::strFill(5,int2str(mItemSequence),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileTrailer2</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    BTRL2_Record_Type                                     1 -  4       4
    // 2    BTRL2_Ant_Total                                       5 - 19      15
    // 3    BTRL2_Ant_Count                                      20 - 24       5
    // 4    BTRL2-Adv_Total                                      25 - 39      15
    // 5    BTRL2-Adv_Count                                      40 - 44       5
    // 6    BTRL2-Adm_Total                                      45 - 59      15
    // 7    BTRL2-Adm_Count                                      60 - 64       5
    // 8    Filler                                               65 - 80      16
    
    boolean rec_FileTrailer2()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1    Record_Type                                     1 -  4       4
        sb.Append('2AMT');
    
        // 2    Ant_Total                                       5 - 19      12
        sb.Append(SKS_PP_StringFormats::strFill(15,'0.00',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 3    Ant_Count                                      20 - 24       5
        sb.Append(SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 4    Adv_Total                                      25 - 39      12
        sb.Append(SKS_PP_StringFormats::strFill(15,'0.00',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 5    Adv_Count                                      40 - 44       5
        sb.Append(SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 6    Adm_Total                                      45 - 59      12
        sb.Append(SKS_PP_StringFormats::strFill(15,'0.00',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 7    Adm_Count                                      60 - 64       5
        sb.Append(SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTR_Header1</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    Record_Type                                         1 -  4       4
    // 2    Batch_Sequence                                      5 -  8       4
    // 3    Item_Sequence                                       9 - 14       6
    // 6    Type                                             35 - 36       2
    // 7    FX_Flag                                               37       1
    //10    Amount                                           44 - 58      15
    //11    Funds_Type                                            59       1
    //12    Tran_Type                                        60 - 62       3
    //18    Bank                                             76 - 78       3
    
    boolean rec_FTR_Header1()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1    Record_Type                                         1 -  4       4
        sb.Append('*FTR');
    
        // 2    Batch_Sequence                                      5 -  8       4
        sb.Append(SKS_PP_StringFormats::strFill(4,gSeqNum ,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 3    Item_Sequence                                       9 - 14       6
        mItemSequence++;
        sb.Append(SKS_PP_StringFormats::strFill(6,int2str(mItemSequence),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        //FILLER
        sb.Append(this.Filler(20));
    
        // 4    Funds Transfer Type                                 35 - 36      2
        sb.Append('NR');
    
        // 5    FX Flag                                             37 - 37      1
        sb.Append('F');
    
        //FILLER
        sb.Append(this.Filler(6));
    
        // 6    Wire Amount                                         44 - 58      15
        mItemAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(SKS_PP_StringFormats::strFill(15, num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        //7    Funds_Type                                          59-59       1
        sb.Append('S');
    
        //8    Tran_Type                                        60 - 62       3
        sb.Append('FTR');
    
        //FILLER
        sb.Append(this.Filler(13));
    
        //9    Bank                                             76 - 78       3
        sb.Append('FTB');
    
        this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTR_Header2</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    Record_Type                                       1 -  4       4
    // 2    Value_Date                                       18 - 23       6
    // 3    Charges                                          35 - 37       3
    
    boolean rec_FTR_Header2()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1    Record_Type                                       1 -  4       4
        sb.Append('2FTR');
    
        //FILLER
        sb.Append(this.Filler(13));
    
        // 5    Value_Date                                       18 - 23       6
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        //FILLER
        sb.Append(this.Filler(11));
    
        // 8    Charges                                          35 - 37       3
        sb.Append(SKS_PP_StringFormats::strFill(3,'OUR',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTR_Trailer</Name>
				<Source><![CDATA[
    //Nbr   Description                                      Position    Size
    // 1    Record_Type                                       1 -  4       4
    // 2    Batch_Sequence                                    5 -  8       4
    // 3    Item_Sequence                                     9 - 14       6
    // 4    Filler                                           15 - 80      66
    
    boolean rec_FTR_Trailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // 1    Record_Type                                       1 -  4       4
        sb.Append('/FTR');
    
        // 2    Batch_Sequence                                    5 -  8       4
        sb.Append(SKS_PP_StringFormats::strFill(4,gSeqNum,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        // 3    Item_Sequence                                    9 - 14       6
        sb.Append(SKS_PP_StringFormats::strFill(6,int2str(mItemSequence),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IBK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Position    Size
    // 1    Reserved                                                   1       1
    // 2    Field_Tag "IBK="                                      2 -  5       4
    // 3    IDTYPE      "A"                                            6       1
    // 4    Delimiter    "/"                                           7       1
    // 5    ABA Routing Nbr                                           8 - 31      24
    // 6    Filler                                                    32 - 80      49
    
    //Subsequent lines are
    // 1    Reserved                                                    1       1
    // 2    Continuation Character '-'                                  2       1
    // 3    Intermediary Bank Info                                      3       35
    private void rec_IBK()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str locCityRegion;
        ;
    
    
        if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WIntBankId)) > 0)
        {
            //Reserved character at line start
            sb.Append(' ');
    
            // 2-5 Record Type/Addenda Type
            sb.Append('IBK=');
    
            // 6-6 Identifies Intermediary Bank as ABA
            sb.Append('A');
    
            // 7-7 Delimiter
            sb.Append('/');
    
            // 8-31
            // ABA Routing Number
            sb.Append(SKS_PP_StringFormats::strFill(24, mSKS_EFT_VendorPaym.WIntBankId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            //write out the Intermediary bank  record 1
            this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Clear();
            if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WIntBankName)) > 0)
            {
                //Reserved character at line start
                sb.Append(' ');
    
                // 2-2 Continuation flag
                sb.Append('-');
    
                // 3-33
                sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                //write out the Intermediary bank  record 2 (Name)
                this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                sb.Clear();
            }
            if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WIntBankAddr)) > 0)
            {
                //Reserved character at line start
                sb.Append(' ');
    
                // 2-2 Continuation flag
                sb.Append('-');
    
                // 3-33
                sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                //write out the Intermediary bank  record 3 (Addr1)
                this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                sb.Clear();
            }
            if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WIntBankAddr2)) > 0)
            {
                //Reserved character at line start
                sb.Append(' ');
    
                // 2-2 Continuation flag
                sb.Append('-');
    
                // 3-33
                sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                //write out the Intermediary bank  record 4 (Addr2)
                this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                sb.Clear();
            }
            if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WIntBankCity)) > 0
                || strLen(strLRTrim(mSKS_EFT_VendorPaym.WIntBankCountryRegionId)) > 0)
            {
                //Reserved character at line start
                sb.Append(' ');
    
                // 2-2 Continuation flag
                sb.Append('-');
    
                locCityRegion =strLRTrim(mSKS_EFT_VendorPaym.WIntBankCity);
                if(strLen(strLRTrim(mSKS_EFT_VendorPaym.WIntBankCity)) > 0
                    && strLen(strLRTrim(mSKS_EFT_VendorPaym.WIntBankCountryRegionId)) > 0)
                    locCityRegion = locCityRegion + ', ';
    
                locCityRegion = this.CharacterReplacement(locCityRegion) + strLRTrim(mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
    
                // 3-33
                sb.Append(SKS_PP_StringFormats::strFill(35, locCityRegion, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                //write out the Intermediary bank  record 5 (City, Region)
                this.fileWrite(SKS_PP_StringFormats::strFill(80,sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    // Overridden in order to group by Payment Currency Code
    protected void selectPaymentRecords()
    {
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = gSequenceNumber + 1;
            sks_eft_fileformat.NextDailyResetDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>