<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FORMAT_CA_CHASE_GDFF_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FORMAT_CA_CHASE_GDFF_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_FORMAT_CA_CHASE_GDFF_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220422')
    #define.Separator(',')

    int mRecCount;
    int mTransCount;
    AmountCur mHashTotal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_FileHeader();
        
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
            
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
            
            this.rec_FileTransaction();
            
            next mSKS_EFT_FileDetail;
        }
        this.rec_FileTrailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
        
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
                
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
            
            next invSKS_EFT_FileDetail;
            
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileHeader</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    File Header
    // 2    Client Identifier
    // 3    File Create Date
    // 4    File Create Time
    // 5    Format Version M
    
    public boolean rec_FileHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        
        mRecCount++;
        this.getSKS_EFT_Bank();
        
        // 1    File Header
        sb.Append(this.wrapField('FH'));
        
        // 2    Client Identifier
        sb.Append(this.wrapField(mSKS_EFT_Bank.WOrdPartyId, 10));
        
        // 3    File Create Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))));
        
        // 4    File Create Time
        sb.Append(this.wrapField(SKS_PP_StringFormats::strTimeHHMMSS()));

        // 5    Format Version M
        sb.Append(this.wrapField('01100', 0, false));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileTrailer</Name>
				<Source><![CDATA[
    public boolean rec_FileTrailer()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        // 1    File Trailer
        // 2    Total Transaction Count
        // 3    Total Line Count
        // 4    Amount Hash Total
        //-------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str amnt;

        mRecCount++;
        // 1    File Trailer
        sb.Append(this.wrapField('FT'));
        
        // 2    Total Transaction Count
        sb.Append(this.wrapField(num2str(mTransCount,0,0,0,0), 10));
        
        // 3    Total Line Count
        sb.Append(this.wrapField(num2str(mRecCount,0,0,0,0), 10));
        
        // 4    Amount Hash Total
        amnt = num2str(-1 * mHashTotal,0,2,0,0);
        sb.Append(this.wrapField(strRem(amnt,'.'), 25, false));
        
        this.fileWrite(sb.ToString());
        return true;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileTransaction</Name>
				<Source><![CDATA[
    //Nbr   Content
    //  1    Record ID
    //  2    Originator’s Ref. No
    //  3    Value Date
    //  4    Destination Country Code
    //  5    Reserved
    //  6    Destination Bank ID
    //  7    Destination A/C
    //  8    Reserved
    //  9    Transaction Amount
    //  10    Currency
    //  11    Payment Method
    //  12    Transaction Type
    //  13    Reserved
    //  14    Originator A/C Number
    //  15    Reserved
    //  16    Reserved
    //  17    Destination A/C Name
    //  18    Reserved
    //  19    Reserved
    //  20    Reserved
    //  21    Reserved
    //  22    Reserved
    //  23    Reserved
    //  24    Reserved
    //  25    Reserved
    //  26    Reserved
    //  27    Reserved
    //  28    Sender’s Text 1
    //  29-41 Reserved
    //  42    Canadian Payment Association (CPA) Transaction Code
    //  43-54 Reserved
    
    public boolean rec_FileTransaction()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str amnt;
        str cpaCode;

        mRecCount++;
        mTransCount++;
        
        //  1    Record ID
        sb.Append(this.wrapField('TR'));
        
        //  2    Originator’s Ref. No
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, 16));
        
        //  3    Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate)));
        
        //  4    Destination Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId)));
        
        //  5    Reserved
        sb.Append(this.wrapField(''));
        
        //  6    Destination Bank ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 9));
        
        //  7    Destination A/C
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 12));
        
        //  8    Reserved
        sb.Append(this.wrapField(''));
        
        //  9    Transaction Amount
        amnt = num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,0,0);
        sb.Append(this.wrapField(strRem(amnt,'.'), 10));
        mHashTotal += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        
        //  10    Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode, 3));
        
        //  11    Payment Method
        sb.Append(this.wrapField('GIR'));
        
        //  12    Transaction Type
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0)
        
        {
            sb.Append(this.wrapField('01'));
            
        }
        else
        {
            sb.Append(this.wrapField('02'));
        }
        
        //  13    Reserved
        sb.Append(this.wrapField(''));
        
        //  14    Originator A/C Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 10));
        
        //  15    Reserved
        sb.Append(this.wrapField(''));
        
        //  16    Reserved
        sb.Append(this.wrapField(''));
        
        //  17    Destination A/C Name
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBeneName, 30));
        
        //  18    Reserved
        sb.Append(this.wrapField(''));
        
        //  19    Reserved
        sb.Append(this.wrapField(''));
        
        //  20    Reserved
        sb.Append(this.wrapField(''));
        
        //  21    Reserved
        sb.Append(this.wrapField(''));
        
        //  22    Reserved
        sb.Append(this.wrapField(''));
        
        //  23    Reserved
        sb.Append(this.wrapField(''));
        
        //  24    Reserved
        sb.Append(this.wrapField(''));
        
        //  25    Reserved
        sb.Append(this.wrapField(''));
        
        //  26    Reserved
        sb.Append(this.wrapField(''));
        
        //  27    Reserved
        sb.Append(this.wrapField(''));
        
        //  28    Sender’s Text 1
        sb.Append(this.wrapField(this.getInvoiceNbrs(), 15));
        
        //  29    Reserved
        sb.Append(this.wrapField(''));
        
        //  30    Reserved
        sb.Append(this.wrapField(''));
        
        //  31    Reserved
        sb.Append(this.wrapField(''));
        
        //  32    Reserved
        sb.Append(this.wrapField(''));
        
        //  33    Reserved
        sb.Append(this.wrapField(''));
        
        //  34    Reserved
        sb.Append(this.wrapField(''));
        
        //  35    Reserved
        sb.Append(this.wrapField(''));
        
        //  36    Reserved
        sb.Append(this.wrapField(''));
        
        //  37    Reserved
        sb.Append(this.wrapField(''));
        
        //  38    Reserved
        sb.Append(this.wrapField(''));
        
        //  39    Reserved
        sb.Append(this.wrapField(''));
        
        //  40    Reserved
        sb.Append(this.wrapField(''));
        
        //  41    Reserved
        sb.Append(this.wrapField(''));
        
        //  42    Canadian Payment Association (CPA) Transaction Code
        cpaCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CPACode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(this.wrapField(cpaCode, 15));
        
        //  43    Reserved
        sb.Append(this.wrapField(''));
        
        //  44    Reserved
        sb.Append(this.wrapField(''));
        
        //  45    Reserved
        sb.Append(this.wrapField(''));
        
        //  46    Reserved
        sb.Append(this.wrapField(''));
        
        //  47    Reserved
        sb.Append(this.wrapField(''));
        
        //  48    Reserved
        sb.Append(this.wrapField(''));
        
        //  49    Reserved
        sb.Append(this.wrapField(''));
        
        //  50    Reserved
        sb.Append(this.wrapField(''));
        
        //  51    Reserved
        sb.Append(this.wrapField(''));
        
        //  52    Reserved
        sb.Append(this.wrapField(''));
        
        //  53    Reserved
        sb.Append(this.wrapField(''));
        
        // 54   Filler - Spaces
        sb.Append(this.wrapField('', 0,false));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;
        ;
        
        if(_fieldLength > 0)
        
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>