<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_ACH_Return_NoC</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_ACH_Return_NoC extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;
    str mFileName;
    SKS_EFT_RF_Transaction gSKS_EFT_RF_Transaction;
    Recid gSKS_EFTAP_FIleRecid;
    str gCurrentBatch;
    str setStaus;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        boolean locProcessingInboundFile = false;
        boolean locProcessingBatch = false;
        System.String locString;

        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.streamInit();
        System.IO.StreamReader locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
        ;
        void appendTrans()
        {
            if(gSKS_EFT_RF_Transaction)
            {
                mSKS_EFT_RF_SentFile.addTransaction(gSKS_EFT_RF_Transaction);
                gSKS_EFT_RF_Transaction = null;
            }
        }
    
        //priming read
        locString = locStreamReader.ReadLine();
    
        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                if(locString.StartsWith('1'))
                {
                    if(locProcessingInboundFile)
                    {
                        error(strFmt("@SKS3831", _filename));
                        gErrorsExist = true;
                        break;
                    }
                    else
                    {
                        this.Process1Record(locString);
                        locProcessingInboundFile = true;
                    }
                }
                if(locString.StartsWith('5'))
                {
                    if(locProcessingBatch)
                    {
                        this.appendToErrorText(strFmt("@SKS3825", _filename));
                        gErrorsExist = true;
                        break;
                    }
                    else
                    {
                        this.Process5Record(locString);
                        locProcessingBatch = true;
                    }
                }
                if(locString.StartsWith('6'))
                {
                    appendTrans();
                    if(!locProcessingBatch)
                    {
                        this.appendToErrorText(strFmt("@SKS3826", _filename));
                        gErrorsExist = true;
                        break;
                    }
                    else
                    {
                        this.Process6Record(locString);
                    }
                }
                //ADDENDA RECORD
                if(locString.StartsWith('7'))
                {
                    if(!locProcessingBatch)
                    {
                        this.appendToErrorText(strFmt("@SKS3827", _filename));
                        gErrorsExist = true;
                        break;
                    }
                    else if(!gSKS_EFT_RF_Transaction)
                    {
                        this.appendToErrorText(strFmt("@SKS3828", _filename, gCurrentBatch));
                        gErrorsExist = true;
                        break;
                    }
                    else
                    {
                        this.Process7Record(locString);
                    }
                }
    
                if(locString.StartsWith('8'))
                {
                    appendTrans();
                    if(!locProcessingBatch)
                    {
                        this.appendToErrorText(strFmt("@SKS3829", _filename));
                        gErrorsExist = true;
                        break;
                    }
                    else
                    {
                        locProcessingBatch = false;
                    }
                }
    
                if(locString.StartsWith('9'))
                {
                    appendTrans();
                    if(!locProcessingInboundFile)
                    {
                        this.appendToErrorText(strFmt("@SKS3830", _filename));
                        gErrorsExist = true;
                        break;
                    }
                    else
                    {
                        locProcessingInboundFile = false;
                        break;  //there should never be anything past the 9 record, so break out of the loop.
                    }
                }
    
            }
            locString = locStreamReader.ReadLine();
        }
        if(mSKS_EFT_RF_File && mSKS_EFT_RF_SentFile)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        locStreamReader.Close();
        locSKS_EB_FileHub.StreamClose();

        if(gErrorsExist)
            mSKS_EFT_RF_File = null;
    
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        str rtnval = '';
        int classId;
        int locRecLen;
        //BEGIN VALIDATION VARIABLES
        //1 Record
        boolean Rec1Pos01Is1 = false;
        boolean Rec1Pos02to03IsNumeric= false;
        boolean Rec1Pos24to29IsNumeric = false;
        boolean Rec1Pos35to37Is094 = false;
        boolean Rec1Pos38to39Is10 = false;
        boolean Rec1Pos40Is1 = false;
        //9 Record
        boolean Rec9Pos01Is9 = false;
        boolean Rec9Pos02to07IsNumeric = false;
        boolean Rec9Pos08to13IsNumeric = false;
        boolean Rec9Pos14to21IsNumeric = false;
        boolean Rec9Pos22to31IsNumeric = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none
    
        //END VALIDATION VARIABLES
        System.String locString;
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        System.IO.StreamReader locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
        ;
    
        //priming read
        locString = locStreamReader.ReadLine();
        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                //a valid ACH Acknowledgment file has records of length 94
                locRecLen = locString.get_Length();
                if(!System.String::IsNullOrWhiteSpace(locString) && locRecLen == 94)
                {
                    if(locString.StartsWith('1'))
                    {
                        //is a one record
                        Rec1Pos01Is1 = true;
                        if(SKS_PP_StringFormats::isNumeric(strLRTrim(locString.Substring(1,2))))
                            Rec1Pos02to03IsNumeric = true;
                        if(SKS_PP_StringFormats::isNumeric(strLRTrim(locString.Substring(23,6))))
                            Rec1Pos24to29IsNumeric = true;
                        if(System.String::Equals(locString.Substring(34,3), '094'))
                            Rec1Pos35to37Is094 = true;
                        if(System.String::Equals(locString.Substring(37,2),'10'))
                            Rec1Pos38to39Is10 = true;
                        if(System.String::Equals(locString.Substring(39,1),'1'))
                            Rec1Pos40Is1 = true;
                    }
                }
                if(!System.String::IsNullOrWhiteSpace(locString) && !Rec9Pos01Is9)
                {
                    if(locString.StartsWith('9'))
                    {
                        //is a one record
                        Rec9Pos01Is9 = true;
                        if(SKS_PP_StringFormats::isNumeric(strLRTrim(locString.Substring(1,6))))
                            Rec9Pos02to07IsNumeric = true;
                        if(SKS_PP_StringFormats::isNumeric(strLRTrim(locString.Substring(7,6))))
                            Rec9Pos08to13IsNumeric = true;
                        if(SKS_PP_StringFormats::isNumeric(strLRTrim(locString.Substring(13,8))))
                            Rec9Pos14to21IsNumeric = true;
                        if(SKS_PP_StringFormats::isNumeric(strLRTrim(locString.Substring(21,10))))
                            Rec9Pos22to31IsNumeric = true;
                        break;
                    }
                }
            }
            locString = locStreamReader.ReadLine();
        }
        if(Rec1Pos01Is1
        && Rec1Pos02to03IsNumeric
        && Rec1Pos24to29IsNumeric
        && Rec1Pos35to37Is094
        && Rec1Pos38to39Is10
        && Rec1Pos40Is1
        && Rec9Pos01Is9
        && Rec9Pos02to07IsNumeric
        && Rec9Pos08to13IsNumeric
        && Rec9Pos14to21IsNumeric
        && Rec9Pos22to31IsNumeric)
        {
            //ALl Qualifers show this a SWIFT_ACKNAK_07262013 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }

        locStreamReader.Close();
        locSKS_EB_FileHub.StreamClose();
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {
    
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    
        return mSKS_EFT_RF_File;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>Process1Record</Name>
				<Source><![CDATA[
    private void Process1Record(str _1Record)
    {
        str locTempStr;     ;
    
        if(!mSKS_EFT_RF_File)
            mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        if(mSKS_EFT_RF_SentFile)// handles the scenario where an ACH operater returns 2 sent files in one return file
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
        locTempStr = SKS_PP_StringFormats::strSub( _1Record,24,6);
        mSKS_EFT_RF_File.setUtcDateTime(str2datetime(locTempStr, 321));
    }

]]></Source>
			</Method>
			<Method>
				<Name>Process5Record</Name>
				<Source><![CDATA[
    private void Process5Record(str _5Record)
    {
        if(!mSKS_EFT_RF_File || !mSKS_EFT_RF_SentFile)
        {
            this.appendToErrorText("@SKS3255");
        }
        else
        {
            gCurrentBatch = SKS_PP_StringFormats::strSub(_5Record,88,7);
        }
        return;
    
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>Process6Record</Name>
				<Source><![CDATA[
    private void Process6Record(str _6Record)
    {
        gSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
        setStaus = strLRTrim(SKS_PP_StringFormats::strSub(_6Record,2,2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>Process7Record</Name>
				<Source><![CDATA[
    private void Process7Record(str _7Record)
    {
        gSKS_EFT_RF_Transaction.setID(SKS_PP_StringFormats::strSub(_7Record,7,15));
        gSKS_EFT_RF_Transaction.setStatusReason(strLRTrim(SKS_PP_StringFormats::strSub(_7Record,4,3)));
        this.setCustomStatus(gSKS_EFT_RF_Transaction, strLRTrim(SKS_PP_StringFormats::strSub(_7Record,4,1)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>process9Record</Name>
				<Source><![CDATA[
    private void process9Record(System.String _6Record)
    {
        if(mSKS_EFT_RF_File && mSKS_EFT_RF_SentFile)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTextBlock</Name>
				<Source><![CDATA[
    private str setTextBlock()
    {
        str locTextBlock;
    
        return locTextBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File _SKS_EFTAP_File)
    {
        SKS_EFT_FileData locSKS_EFT_FileData;
        System.Text.StringBuilder sb;
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
    
        sb = new System.Text.StringBuilder();
        select firstOnly FileACHImmOrigin from locSKS_EFT_FileDetail
            where locSKS_EFT_FileDetail.FileRecId == _SKS_EFTAP_File.RecId;
        sb.Append(locSKS_EFT_FileDetail.FileACHImmOrigin);
        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
            && locSKS_EFT_FileData.FieldName == 'busDate';
        sb.Append(locSKS_EFT_FileData.FieldValue);
        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
            && locSKS_EFT_FileData.FieldName == 'busTime';
        sb.Append(locSKS_EFT_FileData.FieldValue);
        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFTAP_File.RecId
            && locSKS_EFT_FileData.FieldName == 'FileIdModifier';
        sb.Append(locSKS_EFT_FileData.FieldValue);
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        SKS_EFT_FileData locSKS_EFT_FileData;

        Select firstonly FieldValue from locSKS_EFT_FileData
            where locSKS_EFT_FileData.RefRecId == _SKS_EFT_FileDetail.RecId
            && locSKS_EFT_FileData.FieldName == 'TraceNumber';

        return locSKS_EFT_FileData.FieldValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomStatus</Name>
				<Source><![CDATA[
    public void setCustomStatus(SKS_EFT_RF_Transaction _mSKS_EFT_RF_Transaction, str _status)
    {
        _mSKS_EFT_RF_Transaction.setStatus(setStaus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>