<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_DEUTSCHE_PAY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_DEUTSCHE_PAY extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_DEUTSCHE_PAY extends SKS_EFT_Format
{
    #define.FormatVersion('20221130')
    #define.MT210('MT210')
    #define.MT103('MT103')
    #define.MT202('MT202')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            this.rec_Line();
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Line</Name>
				<Source><![CDATA[
    void rec_Line()
    {
        //------------------------------------------------------------------------------------------------------
        //Column A: AccountId
        //Column B: Reference
        //Column C: PaymentType
        //Column D: TradeDate
        //Column E: ValueDate
        //Column F: Currency
        //Column G: Amount
        //Column H: RemittanceInfo
        //Column I: IntermediaryBankName
        //Column J: IntermediaryBankId
        //Column K: BeneficiaryName
        //Column L: BeneficiaryBankId
        //Column M: BeneficiaryAccountId
        //Column N: AccountWithBankName
        //Column O: AccountWithBankId
        //Column P: AccountWithBankAccountId
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str Remit;
    
        //Column A: AccountId
        sb.Append(this.wrapField(mSKS_EFT_Bank.WOrdPartyId));
    
        //Column B: Reference
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference)));
    
        //Column C: PaymentType
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymSpec));
    
        //Column D: TradeDate
        sb.Append(this.wrapField(date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4, DateFlags::None)));
    
        //Column E: ValueDate
        sb.Append(this.wrapField(date2str(mSKS_EFT_File.EffectiveDate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4, DateFlags::None)));
    
        //Column F: Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));
    
        //Column G: Amount
        sb.Append(this.wrapField(num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0)));
    
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #MT210:
                //Column H: RemittanceInfo
                sb.Append(this.wrapField(''));
    
                //Column I: IntermediaryBankName
                sb.Append(this.wrapField(''));
    
                //Column J: IntermediaryBankId
                sb.Append(this.wrapField(''));
    
                //Column K: BeneficiaryName
                sb.Append(this.wrapField(''));
    
                //Column L: BeneficiaryBankId
                sb.Append(this.wrapField(''));
    
                //Column M: BeneficiaryAccountId
                sb.Append(this.wrapField(''));
    
                //Column N: AccountWithBankName
                sb.Append(this.wrapField(''));
    
                //Column O: AccountWithBankId
                sb.Append(this.wrapField(''));
    
                //Column P: AccountWithBankAccountId
                sb.Append(this.wrapField(''));
    
                break;
            default:
                //Column H: RemittanceInfo
                Remit = this.CharacterReplacement(mSKS_EFT_VendorPaym.WCrePartyName);
    
                if(mSKS_EFT_VendorPaym.WCrePartyAcct)
                {
                    if(mSKS_EFT_VendorPaym.WCrePartyName)
                    {
                        Remit += ' ';
                    }
    
                    Remit += 'Account ' + mSKS_EFT_VendorPaym.WCrePartyAcct;
                }
    
                sb.Append(this.wrapField(Remit, Remit != ''));
    
                //Column I: IntermediaryBankName
                sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), true));
    
                //Column J: IntermediaryBankId
                sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankSwift));
    
                //Column K: BeneficiaryName
                sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), true));
    
                //Column L: BeneficiaryBankId
                sb.Append(this.wrapField(''));
    
                //Column M: BeneficiaryAccountId
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));
    
                //Column N: AccountWithBankName
                sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), true));
    
    
                if(mSKS_EFT_FileDetail.DepSwiftNo != '')
                {
                    //Column O: AccountWithBankId
                    sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo));
    
                    //Column P: AccountWithBankAccountId
                    sb.Append(this.wrapField(''));
                }
                else
                {
                    //Column O: AccountWithBankId
                    sb.Append(this.wrapField(''));
    
                    //Column P: AccountWithBankAccountId
                    sb.Append(this.wrapField('FW' + mSKS_EFT_FileDetail.DepBankTransit));
                }
    
                break;
        }
    
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _Field = '', boolean _Quote = false, boolean _Delimit = true)
    {
        str Field;
        Field = _Field;

        if(Field != '' && _Quote)
        {
            Field = #DoubleQuote + _Field + #DoubleQuote;
        }
    
        if(_Delimit)
        {
            return field + ',';
        }
        else
        {
            return field;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>