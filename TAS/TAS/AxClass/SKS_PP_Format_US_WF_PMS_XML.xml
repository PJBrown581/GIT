<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_US_WF_PMS_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_US_WF_PMS_XML extends SKS_PP_Format_BankGroup
{
    XmlDocument xmlDoc;
    XmlNode nodeFile;
    SKS_PP_Bank gSKS_PP_Bank;
    LogisticsAddressCountryRegion mLogisticsAddressCountry;

    BankAccountTable gBankAccountTable;
    real totRecAmt;
    
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    protected str txtFormatHeader()
    {
        SKS_PP_FileDetail SKS_PP_FileDetail_2;

        SKS_PP_FileDetail SKS_PP_FileDetail_1;

        xmlDoc = XmlDocument::newBlank();


        while select SKS_PP_FileDetail_1 where SKS_PP_FileDetail_1.FileNbr == mSKS_PP_FileDetail.FileNbr
        {
            if(SKS_PP_FileDetail_1.ChkType == SKS_PP_ChequeType::Cheque || 
                SKS_PP_FileDetail_1.ChkType == SKS_PP_ChequeType::CancelledCheque)
            {
                totRecAmt += SKS_PP_FileDetail_1.ChkCuryAmt;
            }
        }

        select count(RecID) from SKS_PP_FileDetail_2 where SKS_PP_FileDetail_2.FileNbr == mSKS_PP_FileDetail.FileNbr;
    
        //  File
        nodeFile = xmlDoc.appendChild(xmlDoc.createElement('File'));
    
        //      PmtRecCount
        SKS_EFT_Format::xmlsetAttributeText(nodeFile, 'PmtRecCount',  num2Str(totRecAmt, 0, 2, 1, 0));
    
        //      PmtRecTotal
        SKS_EFT_Format::xmlsetAttributeText(nodeFile, 'PmtRecTotal', int642str(SKS_PP_FileDetail_2.RecId));

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionGroupHeader</Name>
				<Source><![CDATA[
    protected void sectionGroupHeader()
    {
        this.node_PmtRec();
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtRec</Name>
				<Source><![CDATA[
    private void node_PmtRec()
    {
        //------------------------------------------------------------------------------------------------------
        //  PmtRec
        //      PmtCrDr (Attribute)
        //      PmtMethod (Attribute)
        //      PmtFormat (Attribute) (only DAC or IAC)
        //      TranHandlingCode (Attribute)
        //      PDPHandlingCode
        //      IDinfo
        //      Refinfo
        //      Message
        //      Check (only CHK)
        //      OrgnrParty
        //      RcvrParty
        //      OrgnrDepAcctID
        //      RcvrDepAcctID (only DAC and MTS)
        //      PmtDetail (only CHK, CTX, CCD+, PPD+, CCR, MTS, IWI)
        //      PmtID
        //      CurAmt
        //      CurCode (only CHK and MTS)
        //      ValueDate
        //------------------------------------------------------------------------------------------------------
        XmlNode nodePmtRec;
        int mult;

        //  File
        nodePmtRec = xmlDoc.documentElement().appendChild(xmlDoc.createElement('PmtRec'));
    
        //      PmtCrDr
        if(mSKS_PP_FileDetail.ChkCuryAmt > 0)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtCrDr', 'D');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtCrDr', 'C');
        }
    
        //      PmtMethod
        SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtMethod', 'CHK');
    
        //      Message
        this.node_Message(nodePmtRec);
        
        //      Check
        this.node_Check(nodePmtRec);
    
        //      OrgnrParty
        this.node_OrgnrParty(nodePmtRec);
    
        //      RcvrParty
        this.node_RcvrParty(nodePmtRec);
    
        //      OrgnrDepAcctID
        this.node_OrgnrDepAcctID(nodePmtRec);
    
        //      PmtDetail
        //this.node_PmtDetail(nodePmtRec);
    
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if (mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::CancelledCheque)
            {
                if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
                {
                    mult = -1;
                }
                else
                {
                    mult = 1;
                }
            }
            else
            {
                mult = 0;
            }
        }
        else
        {
            mult = 1;
        }
    
        //      PmtID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'PmtID', SKS_PP_StringFormats::strRight(mSKS_PP_FileDetail.ChkRefNbr,30));
    
        //      CurAmt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'CurAmt', num2str(abs(mSKS_PP_FileDetail.ChkCuryAmt * mult),0,2,0,0));
    
        totRecAmt = mSKS_PP_FileDetail.ChkCuryAmt * mult;

        //      CurCode (only CHK and MTS)
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'CurCode', mSKS_PP_FileDetail.ChkCuryCode, 0, false);
    
        //      ValueDate
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'ValueDate', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate,DateSeparator::Hyphen));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Message</Name>
				<Source><![CDATA[
    private void node_Message(XmlNode _nodePmtRec)
    {
        XmlNode nodeMessage;
        container company;

        select crossCompany:company gBankAccountTable
                    join gSKS_PP_Bank
                        where gSKS_PP_Bank.BankAccountId == gBankAccountTable.AccountID
                            && gSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;

        if(gSKS_PP_Bank.PP04)
        {
            //      Message
            nodeMessage = _nodePmtRec.appendChild(xmlDoc.createElement('Message'));
    
            //          MsgType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeMessage, 'MsgType', 'CHK');

            //          MsgText (Element)
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMessage, 'MsgText', gSKS_PP_Bank.PP04, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Check</Name>
				<Source><![CDATA[
    private void node_Check(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  Check
        //      ChkNum
        //      ChkDocNum
        //      DeliveryCode
        //------------------------------------------------------------------------------------------------------
        XmlNode nodeCheck;
    
        //  Check
        nodeCheck = _nodePmtRec.appendChild(xmlDoc.createElement('Check'));
    
        //      ChkNum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCheck, 'ChkNum', mSKS_PP_FileDetail.ChkRefNbr, 0, false);
    
        if (mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::Cheque)
        {
            //      ChkDocNum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCheck, 'ChkDocNum', gSKS_PP_Bank.PP01, 18, false);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrgnrParty</Name>
				<Source><![CDATA[
    private void node_OrgnrParty(XmlNode _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  OrgnrParty
        //      Name
        //          Name1
        //      PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlNode nodeOrgnrParty;
        XmlNode nodeName;
        XmlNode nodePostAddr;
        LogisticsPostalAddress lLogisticsPostalAddress;
        LogisticsAddressCountryRegionISOCode countryRegion;
        str address1, address2, address3;
        Container company;
        container               address;

        select crossCompany:company gBankAccountTable
                    join gSKS_PP_Bank
                        where gSKS_PP_Bank.BankAccountId == gBankAccountTable.AccountID
                            && gSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;

        select firstonly Location from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == gBankAccountTable.Location;

        countryRegion = this.getLogisticsAddressCountryISO(lLogisticsPostalAddress.CountryRegionId);
    
        //  OrgnrParty
        nodeOrgnrParty = _nodePmtRec.appendChild(xmlDoc.createElement('OrgnrParty'));

        if(gBankAccountTable.Name)
        {
            //      Name
            nodeName = nodeOrgnrParty.appendChild(xmlDoc.createElement('Name'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', gBankAccountTable.Name, 60);
        }

        if(strScan(lLogisticsPostalAddress.Street, ';', 1, strLen(lLogisticsPostalAddress.Street)))
        {
            address = this.addressSplit(lLogisticsPostalAddress.Street);
            address1 = conpeek(address,1);
            address2 = conpeek(address,2);
            address3 = conpeek(address,3);
        }
        else
        {
            address1 = lLogisticsPostalAddress.Street;
        }

        if(address1 || address2 || address3 || 
           countryRegion || lLogisticsPostalAddress.city ||
           lLogisticsPostalAddress.State    || lLogisticsPostalAddress.ZipCode)
        {
            //  PostAddr
            nodePostAddr = nodeOrgnrParty.appendChild(xmlDoc.createElement('PostAddr'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', address1, 55, false);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', address2, 55, false);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr3', address3, 55, false);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', lLogisticsPostalAddress.city, 30, false);
    
            //          StateProv
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', lLogisticsPostalAddress.State, 3, false);
    
            //          PostalCode
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', lLogisticsPostalAddress.ZipCode, 9, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', countryRegion, 2, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrParty</Name>
				<Source><![CDATA[
    private void node_RcvrParty(XmlNode _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  RcvrParty
        //      Name
        //          Name1
        //      RefInfo
        //          RefType (Attribute)
        //          RefID
        //      PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlNode nodeRcvrParty;
        XmlNode nodeName;
        XmlNode nodeRefInfo;
        int fieldLength;
    
        //  RcvrParty
        nodeRcvrParty = _nodePmtRec.appendChild(xmlDoc.createElement('RcvrParty'));
    
        //      Name
        if(mSKS_PP_FileDetail.VendName)
        {
            nodeName = nodeRcvrParty.appendChild(xmlDoc.createElement('Name'));
    
            //          Name1
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', mSKS_PP_FileDetail.VendName, fieldLength);
        }
        
        //      RefInfo
        nodeRefInfo = nodeRcvrParty.appendChild(xmlDoc.createElement('RefInfo'));
    
        //          RefType (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', 'VN');
    
        //          RefID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', mSKS_PP_FileDetail.VendorAccount,30);

        //      PostAddr
        this.node_RcvrPartyPostAddr(nodeRcvrParty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrPartyPostAddr</Name>
				<Source><![CDATA[
    private void node_RcvrPartyPostAddr(XmlNode _nodeRcvrParty)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          Addr2
        //          City
        //          StateProv
        //          PostalCode
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlNode nodePostAddr;
        DirPartyNamePrimaryAddressView DirPartyNamePrimaryAddressView;
        VendTable VendTable;
        str address1, address2, address3;
        Container company;
        container               address;
        int fieldLength;

        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company ISOcode from DirPartyNamePrimaryAddressView join VendTable where
              DirPartyNamePrimaryAddressView.Party == VendTable.Party &&
              VendTable.AccountNum == mSKS_PP_FileDetail.VendorAccount;

        if(strScan(DirPartyNamePrimaryAddressView.Street, ';', 1, strLen(DirPartyNamePrimaryAddressView.Street)))
        {
            address = this.addressSplit(DirPartyNamePrimaryAddressView.Street);
            address1 = conpeek(address,1);
            address2 = conpeek(address,2);
            address3 = conpeek(address,3);
        }
        else
        {
            address1 = DirPartyNamePrimaryAddressView.Street;
        }

        if(address1 || address2 || address3 ||
            DirPartyNamePrimaryAddressView.City || DirPartyNamePrimaryAddressView.ZipCode || DirPartyNamePrimaryAddressView.ISOcode)
        {
            //  PostAddr
            nodePostAddr = _nodeRcvrParty.appendChild(xmlDoc.createElement('PostAddr'));
        
            //          Addr1
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', address1, fieldLength, false);
    
            //          Addr2
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', address2, fieldLength, false);

            //          Addr3
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr3', address3, fieldLength, false);
            
            //          City
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', DirPartyNamePrimaryAddressView.City, fieldLength, false);
    
            //          StateProv
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', DirPartyNamePrimaryAddressView.State, 3, false);
    
            //          PostalCode
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', DirPartyNamePrimaryAddressView.ZipCode, 9, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', DirPartyNamePrimaryAddressView.ISOcode, 2, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrgnrDepAcctID</Name>
				<Source><![CDATA[
    private void node_OrgnrDepAcctID(XmlNode _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  OrgnrDepAcctID
        //      DepAcctID
        //          AcctID (Attribute)
        //          AcctType (Attribute)
        //          AcctCur (Attribute)
        //      BankInfo
        //          BankIDType (Attribute)
        //          Name (Attribute)
        //          RefInfo
        //              RefType (Attribute)
        //              RefID
        //          BankID
        //------------------------------------------------------------------------------------------------------
        XmlNode nodeOrgnrDepAcctID;
        XmlNode nodeDepAcctID;
        XmlNode nodeBankInfo;
    
        //  OrgnrDepAcctID
        nodeOrgnrDepAcctID = _nodePmtRec.appendChild(xmlDoc.createElement('OrgnrDepAcctID'));
    
        //      DepAcctID
        nodeDepAcctID = nodeOrgnrDepAcctID.appendChild(xmlDoc.createElement('DepAcctID'));
    
        //          AcctID (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctID', mSKS_PP_FileDetail.BnkBankAcct);
    
        //          AcctType (Attribute)
        if(gSKS_PP_Bank.AcctType == SKS_PP_BankAccountType::FinancialInstituionGL)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'G');
        }
        else if(gSKS_PP_Bank.AcctType == SKS_PP_BankAccountType::Savings)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'S');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'D');
        }
    
        //      BankInfo
        nodeBankInfo = nodeDepAcctID.appendChild(xmlDoc.createElement('BankInfo'));
    
        //          BankIDType (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'ABA');

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', mSKS_PP_FileDetail.BnkBankTransit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_FileInfoGrp</Name>
				<Source><![CDATA[
    private void node_FileInfoGrp()
    {
        //------------------------------------------------------------------------------------------------------
        //      FileInfoGrp
        //          FileDate (Attribute)
        //          FileTime (Attribute)
        //          FileControlNumber (Attribute)
        //------------------------------------------------------------------------------------------------------
        XmlNode nodeFileInfoGrp;
        str fileControlNumber;
    
        //      FileInfoGrp
        nodeFileInfoGrp = nodeFile.appendChild(xmlDoc.createElement('FileInfoGrp'));
    
        //          FileDate
        SKS_EFT_Format::xmlsetAttributeText(nodeFileInfoGrp, 'FileDate', SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateSeparator::Hyphen));
    
        //          FileControlNumber
        fileControlNumber = subStr(mSKS_PP_File.FileNbr,1,15);
    
        SKS_EFT_Format::xmlsetAttributeText(nodeFileInfoGrp, 'FileControlNumber', fileControlNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatTrailer</Name>
				<Source><![CDATA[
    protected str txtFormatTrailer()
    {
        this.node_FileInfoGrp();

        return xmlDoc.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryISO</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mLogisticsAddressCountryRegion
        // Return a 2 digit ISO country code
        //------------------------------------------------------------------------------------------------------
        str value;
    
        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(mLogisticsAddressCountry.CountryRegionId != _countryRegion)
            {
                mLogisticsAddressCountry = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = mLogisticsAddressCountry.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressSplit</Name>
				<Source><![CDATA[
    protected container addressSplit(SKS_EB_Address  _address)
    {
        List            strList = new List(Types::String);
        container       address;
        ListIterator    iterator;
    
        strlist = strSplit(_address,';');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            address += iterator.value();
            iterator.next();
        }
        return address;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>