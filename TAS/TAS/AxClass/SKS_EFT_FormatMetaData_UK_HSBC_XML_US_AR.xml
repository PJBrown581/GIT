<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_UK_HSBC_XML_US_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_UK_HSBC_XML_US_AR Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_UK_HSBC_XML_US_AR Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220808';
        dataContractVersion = '1.0';
        conFormatID = ['UK-HSBC-XML-US-AR'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'','','Company Name','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',1,'UK - HSBC -  United States - AR - ISO20022',0,'','','UK-HSBC-XML-US-AR',1,'','','','','','','','',0,0,'00:00.0',0,'00:00.0',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'UK-HSBC-XML-US-AR',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('UK-HSBC-XML-US-AR'):
                paymSpecList = this.getPaymSpecsMetaData_UK_HSBC_XML_US_AR();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_UK_HSBC_XML_US_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_UK_HSBC_XML_US_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'ACH - Cash Concentration and Disbursement (CCD)',1,'ACH-CCD','','ACH-CCD','',0,'UK-HSBC-XML-US-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'ACH - Prearranged Payment and Deposit (PPD)',1,'ACH-PPD','','ACH-PPD','',0,'UK-HSBC-XML-US-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'ACH - Cash Concentration and Disbursement (CCD+)',1,'ACH-CCP','','ACH-CCP','',0,'UK-HSBC-XML-US-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'ACH - Corporate Trade Exchange (CTX)',1,'ACH-CTX','','ACH-CTX','',0,'UK-HSBC-XML-US-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('UK-HSBC-XML-US-AR'):
                notesList = this.getNotesMetaData_UK_HSBC_XML_US_AR();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_UK_HSBC_XML_US_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_UK_HSBC_XML_US_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.:-The Company Name is set in Direct debit Bank Account > AR EFT+ > Company Info tab.:-The HSBC Connect ID / SIRET ID and Creditor Id are required and set in EFT+ Bank Account > Direct debit > File Info tab.::-Organization administration > Setup > Organization > Legal entities > Select legal entity > Address tab :--Creditor address is teh company address and it is required.Address will be enable only if purpose is set as \'Direct Debit\' and it is primary.::-Debtor Bank Account Type must be set to either Savings or Checking and will default to Checking if not set to Savings.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.:-The Company Name is set in Direct debit Bank Account > AR EFT+ > Company Info tab.:-The HSBC Connect ID / SIRET ID and Creditor Id are required and set in EFT+ Bank Account > Direct debit > File Info tab.::-Organization administration > Setup > Organization > Legal entities > Select legal entity > Address tab :--Creditor address is teh company address and it is required.Address will be enable only if purpose is set as \'Direct Debit\' and it is primary.::-Debtor Bank Account Type must be set to either Savings or Checking and will default to Checking if not set to Savings.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.:-The Company Name is set in Direct debit Bank Account > AR EFT+ > Company Info tab.:-The HSBC Connect ID / SIRET ID and Creditor Id are required and set in EFT+ Bank Account > Direct debit > File Info tab.::-Organization administration > Setup > Organization > Legal entities > Select legal entity > Address tab :--Creditor address is teh company address and it is required.Address will be enable only if purpose is set as \'Direct Debit\' and it is primary.::-Debtor Bank Account Type must be set to either Savings or Checking and will default to Checking if not set to Savings.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.:-The Company Name is set in Direct debit Bank Account > AR EFT+ > Company Info tab.:-The HSBC Connect ID / SIRET ID and Creditor Id are required and set in EFT+ Bank Account > Direct debit > File Info tab.::-Organization administration > Setup > Organization > Legal entities > Select legal entity > Address tab :--Creditor address is teh company address and it is required.Address will be enable only if purpose is set as \'Direct Debit\' and it is primary.::-Debtor Bank Account Type must be set to either Savings or Checking and will default to Checking if not set to Savings.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('UK-HSBC-XML-US-AR'):
                validationsList = this.getValidationsMetaData_UK_HSBC_XML_US_AR();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_UK_HSBC_XML_US_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_UK_HSBC_XML_US_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > CdtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',0,0,1,'34',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Routing number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing number','PmtInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Bank',0,'RegistrationNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm  if Debitor name is greater than 22 character name will be truncated to 22 characters','Name related to customer','5','Name','','',0,'2',1,'22',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Customer Country/Region ','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Country related to Legal entity','2','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Street','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','City','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Routing number','TAS > Common > Customer eBanking details> Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > DrctDbtTxInf > DbtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','Bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','PmtInf > DrctDbtTxInf > DbtrAcct > Id > Othr > Id','Bank account number related to customer',1,'AccountNum','','','3',0,1,'34',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCD','','IBAN number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Additional identification (fast tab)> IBAN','PmtInf > DrctDbtTxInf > DbtrAcct > Id > IBAN','IBAN related to customer',1,'BankIBAN','','','3',0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > CdtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',0,0,1,'34',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Routing number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing number','PmtInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Bank',0,'RegistrationNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm if Debitor name is greater than 22 character name will be truncated to 22 characters','Name related to customer','5','Name','','',0,'2',1,'22',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Customer Country/Region ','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Country related to Legal entity','2','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Street','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','City','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Routing number','TAS > Common > Customer eBanking details> Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > DrctDbtTxInf > DbtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','Bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','PmtInf > DrctDbtTxInf > DbtrAcct > Id > Othr > Id','Bank account number related to customer',1,'AccountNum','','','3',0,1,'34',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-PPD','','IBAN number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Additional identification (fast tab)> IBAN','PmtInf > DrctDbtTxInf > DbtrAcct > Id > IBAN','IBAN related to customer',1,'BankIBAN','','','3',0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > CdtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',0,0,1,'34',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Routing number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing number','PmtInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Bank',0,'RegistrationNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm if Debitor name is greater than 22 character name will be truncated to 22 characters','Name related to customer','5','Name','','',0,'2',1,'22',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Customer Country/Region ','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Country related to Legal entity','2','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Street','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','City','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Routing number','TAS > Common > Customer eBanking details> Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > DrctDbtTxInf > DbtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','Bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','PmtInf > DrctDbtTxInf > DbtrAcct > Id > Othr > Id','Bank account number related to customer',1,'AccountNum','','','3',0,1,'34',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CCP','','IBAN number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Additional identification (fast tab)> IBAN','PmtInf > DrctDbtTxInf > DbtrAcct > Id > IBAN','IBAN related to customer',1,'BankIBAN','','','3',0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > CdtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',0,0,1,'34',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Routing number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing number','PmtInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Bank',0,'RegistrationNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm if Debitor name is greater than 22 character name will be truncated to 22 characters','Name related to customer','5','Name','','',0,'2',1,'22',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Customer Country/Region ','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Country related to Legal entity','2','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Street','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','City','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Routing number','TAS > Common > Customer eBanking details> Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > DrctDbtTxInf > DbtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','Bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','PmtInf > DrctDbtTxInf > DbtrAcct > Id > Othr > Id','Bank account number related to customer',1,'AccountNum','','','3',0,1,'34',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-US-AR','ACH-CTX','','IBAN number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Additional identification (fast tab)> IBAN','PmtInf > DrctDbtTxInf > DbtrAcct > Id > IBAN','IBAN related to customer',1,'BankIBAN','','','3',0,1,'35',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch(_formatID)
        {
            case ('UK-HSBC-XML-US-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_UK_HSBC_XML_US_AR();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_UK_HSBC_XML_US_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_UK_HSBC_XML_US_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-HSBC-XML-US-AR','UK-HSBC-XML-US-AR','HSBCConnectCustId','HSBC Connect ID / SIRET ID',1,'HSBCConnectCustId','',1,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > OrgId > Othr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-HSBC-XML-US-AR','UK-HSBC-XML-US-AR','CreditorId','Creditor Id',1,'CreditorId','',1,'','XXXXXXXXXX','PmtInf > Cdtr > Id > OrgId > Othr > Id']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the direct debit bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateARBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('UK-HSBC-XML-US-AR'):
                if(gSKS_EFTAR_Bank.W01)
                {
                    this.updateARBankFields('HSBCConnectCustId', gSKS_EFTAR_Bank.W01);
                }
                if(gSKS_EFTAR_Bank.W02)
                {
                    this.updateARBankFields('CreditorId', gSKS_EFTAR_Bank.W02);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>