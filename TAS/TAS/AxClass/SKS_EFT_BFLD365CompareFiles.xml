<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_BFLD365CompareFiles</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_BFLD365CompareFiles
{
    #define.compareFilesPath('Cmp')

    str mfilePathName, mFileComparePath, mfilename;
    SKS_EFTAP_File  msks_EFTAP_File;
    SKS_EFT_FileFormat msks_eft_FileFormat;
    SKS_EFT_Bank msks_eft_bank;
    SKS_EFTAR_Bank msks_eftar_bank;
    SKS_EFTBTB_Bank msks_eftbtb_bank;
    SKS_EFTCNP_Bank msks_eftcnp_bank;
    SKG_File.Models.SKGHeaderModel header;    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createfiletocompare</Name>
				<Source><![CDATA[
    public str createfiletocompare(SKS_EFT_FileNbr _fileNbr, SKS_EFT_Module _module)
    {
        msks_EFTAP_File = SKS_EFTAP_File::find(_fileNbr, _module);
        msks_eft_FileFormat = sks_eft_FileFormat::find(msks_EFTAP_File.FormatId);

        if (this.checkSelectedFile())
        {
            this.getBank(_module);

            this.checkfilepath();
        
            this.createfile();            
        }

        return mfilePathName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBank</Name>
				<Source><![CDATA[
    private void getBank(SKS_EFT_Module _module)
    {
        switch (_module)
        {
            case SKS_EFT_Module::AP:
                if(msks_eftap_file.MALBankAccountId != '' && msks_eftap_file.MALPaymMode != '')
                {
                    this.GetAPBank(msks_eftap_file.MALBankAccountId, msks_eftap_file.MALPaymMode);
                }
                break;
            case SKS_EFT_Module::AR:
                this.GetARBank();
                break;
            case SKS_EFT_Module::BTB:
                this.GetBTBBank();
                break;
            case SKS_EFT_Module::CNP:
                this.GetCNPBank();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSelectedFile</Name>
				<Source><![CDATA[
    private boolean checkSelectedFile()
    {
        boolean fileIsGood;
        fileIsGood = true;

        //return fileIsGood; //testing

        if ((!msks_EFTAP_File.FilePath) || (!msks_EFTAP_File.FileName))
        {
            Info("@SKS:SKGFileComparePathName");
            fileIsGood = false;
        }

        if (fileIsGood)
        {
            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(msks_EFTAP_File.BFBankIntegration);
            boolean fileExists;
            str filePathName;

            filePathName = msks_EFTAP_File.FilePath + @'\' + msks_EFTAP_File.Filename;
            fileHub.runFileInquire(filePathname);            
            fileExists = fileHub.attrFileExists(); 

            if (!fileExists)
            {
                Info ("@SKS:SKGFileCompareSelExist");
                fileIsGood =  false;
            }
        }

        if (fileIsGood)
        {
            if (msks_eft_FileFormat.FormatGroupCodeSource == msks_eftap_file.FormatGroupCodeSource)
            {
                DialogButton dButton;
                str strDMsg;

                strDMsg = strFmt ("@SKS:SKGFileCompareSameCodeSource", msks_eft_FileFormat.FormatGroupCodeSource);
                dButton = Box::yesNo(strDMsg,DialogButton::No,'File compare');
                if (dbutton == DialogButton::No)
                {
                    fileIsGood =  false;
                }
            }
            else
            if ((msks_eftap_file.FormatGroupVersion != msks_eft_FileFormat.FormatGroupVersion) || !msks_eftap_file.FormatGroupVersion)
            {
                Info ("@SKS:SKGFileCompareSelGroupVer");
                fileIsGood =  false;
            }
        }

        return fileIsGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkfilepath</Name>
				<Source><![CDATA[
    private void checkfilepath()
    {
        str fmtFilePath;
        fmtFilePath = msks_eftap_file.FilePath;        

        if (msks_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
        {
            mFileComparePath = msks_eftap_file.FilePath + @'\' + #compareFilesPath + @'\';

            if(SKS_EB_FileHub::directoryExistsForm(fmtFilePath))
            {
                if(!SKS_EB_FileHub::directoryExistsForm(mFileComparePath))
                {
                    this.createHeaderFromDB(msks_EFTAP_File.BFBankIntegration);

                    SKG_File.Models.SKGDirectoryModel directory = SKG_File.Client.RequestDirectory::CreateFolder(header, mFileComparePath);

                    Info("@SKS:SKGFileCompareNewFolder");
                }
            }
        }
        else
        {
            //todo: chekc bank fabric location exists.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createfile</Name>
				<Source><![CDATA[
    private void createfile()
    {
        
        SKS_EFT_FileId NextFileId;
        ExecutePermission perm;
        SysDictClass obj;
        Object classInstance;
        System.Xml.XmlDocument locXmlDocument;
        str formatName;
        str mReturnMsg;
        str BFNewFileName;
        str FormatGroupDataContractVersion;
        int NbrGoodRecs,NextSequenceNumber;

        //filepath
        //mSKS_EFT_Setup = SKS_EFT_Setup::find()
        //fileformat
        //GetAPBank

        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
        select count(EmailSent) from lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.FileRecId == msks_eftap_file.RecId &&
            lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
            lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        NbrGoodRecs = lSKS_EFT_FileDetail.EmailSent;
        NextSequenceNumber = NbrGoodRecs;
        NextFileId =1;

        //this.comparefiles(BFNewFileName); //testing
        
        if (msks_eft_FileFormat.FormatGroupDataContractVersion)
        {
            FormatGroupDataContractVersion = msks_eft_FileFormat.FormatGroupDataContractVersion;
        }
        else
        {
            FormatGroupDataContractVersion = '1.0';
        }
        if(msks_eft_FileFormat.FormatGroupCodeSource == SKS_EB_CodeSource::BankFabric)
        {
            SKG_File.Models.SKGResponseModel response;
                    
            str className = strReplace('SKS_EFT_BankFabricPayment_' + FormatGroupDataContractVersion, '.', '_');
            mReturnMsg = this.ValidateBFLClass(className);

            if(mReturnMsg != '') //errors were found
            {
                error(mReturnMsg);
                return;
            }

            perm = new ExecutePermission();
            perm.assert();

            // BP deviation documented
            obj = new SysDictClass(className2Id(className));
            classInstance = obj.makeObject(); // Instantiate class
            // BP deviation documented
            obj.callObject('parmSKS_EFT_File', classInstance, msks_eftap_file);
            // BP deviation documented
            obj.callObject('parmSKS_EFT_FileFormat', classInstance, msks_eft_FileFormat);
            // BP deviation documented
            obj.callObject('parmSKS_EFTAP_Bank', classInstance, msks_eft_bank);
            // BP deviation documented
            obj.callObject('parmSKS_EFTAR_Bank', classInstance, msks_eftar_bank);
            // BP deviation documented
            obj.callObject('parmSKS_EFTBTB_Bank', classInstance, msks_eftbtb_bank);
            // BP deviation documented
            obj.callObject('parmSKS_EFTCNP_Bank', classInstance, msks_eftcnp_bank);
            // BP deviation documented
            obj.callObject('parmNextFileId', classInstance, NextFileId);
            // BP deviation documented
            obj.callObject('parmNextSequenceNumber', classInstance, NextSequenceNumber);
            // BP deviation documented
            obj.callObject('parmCompareFilesPath', classInstance, #compareFilesPath);
            // BP deviation documented
            response = obj.callObject('sendPayments', classInstance); // Run

            mReturnMsg = response.Exception;
                        
            //BankFabric get file name
            BFNewFileName = obj.callObject('getBFNewFileName', classInstance);
            
            obj = null;
            classInstance = null;

            if (mReturnMsg == '')
            {
                this.comparefiles(BFNewFileName);
            }
            else
            {
                error(mReturnMsg);
            }
            
        }
        else
        {
            formatName = strReplace('SKS_EFT_Format_' + msks_eft_FileFormat.FormatGroup, '-', '_');
            
            formatName = strReplace('SKS_EFT_Format_' + msks_eft_FileFormat.FormatGroup, '-', '_');
            //mReturnMsg = this.ValidateClass(formatName, msks_eft_FileFormat;.FormatId);

            perm = new ExecutePermission();
            perm.assert();

            // BP deviation documented
            obj = new SysDictClass(className2Id(formatName));
            classInstance = obj.makeObject(); // Instantiate class
            // BP deviation documented
            obj.callObject('setFileNbr', classInstance, msks_eftap_file.FileNbr); // Call method to set variable
            // BP deviation documented
            obj.callObject('setSeqNumber', classInstance, NextSequenceNumber);
            // BP deviation documented
            obj.callObject('setFileIdMod', classInstance, NextFileId);
            // BP deviation documented
            obj.callObject('setModule', classInstance, msks_eftap_file.EFTFileType);
            // BP deviation documented
            obj.callObject('setCompareFilesPath', classInstance, #compareFilesPath);
            // BP deviation documented
            locXmlDocument = obj.callObject('run', classInstance); // Run

            // BP deviation documented
            mReturnMsg = obj.callObject('getErrorText', classInstance);
                       
            //BankFabric get file name
            BFNewFileName = obj.callObject('getBFNewFileName', classInstance);

            obj = null;
            classInstance = null;

            
            if (mReturnMsg == '')
            {
                this.comparefiles(BFNewFileName);
            }
            else
            {
                error(mReturnMsg);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>comparefiles</Name>
				<Source><![CDATA[
    private void comparefiles(str BFNewFileName)
    {
        Args    args;
        FormRun formrun;

        args = new Args(formStr(SKS_EFT_BFD365FileCompare));
        args.record(msks_eftap_file);
        args.parm(BFNewFileName);

        formRun = New FormRun(Args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataContractVersions</Name>
				<Source><![CDATA[
    private container dataContractVersions()
    {
        container conVersions;

        DictClass dictClass;
        List listSpecifications;
        ListEnumerator listEnumerator;
        ClassId SKS_EFT_BankFabricPaymentClassId = classNum(SKS_EFT_BankFabricPayment);

        listSpecifications = new DictClass(SKS_EFT_BankFabricPaymentClassId).extendedBy();
        listEnumerator = listSpecifications.getEnumerator();
        

        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                conVersions += strReplace(strReplace(dictClass.name(), 'SKS_EFT_BankFabricPayment_',''),'_','.');
            }
        }

        return conVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderFromDB</Name>
				<Source><![CDATA[
    private void createHeaderFromDB(SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileStorage  lSKS_EB_FileStorage;
        select firstonly lSKS_EB_FileStorage;

        header = new SKG_File.Models.SKGHeaderModel();
        header.Requester = 'Ax7 (AOS)';
        header.Trace = false;
        if(lSKS_EB_FileStorage.FileStorageType == SKS_EB_FileStorageType::Local && _SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            header.UserRemoteServer = false;
        }
        else
        {
            header.DNSName = SKS_EB_FileHub::getDNS(_SKS_BF_BankIntType);
            header.UserRemoteServer = true;
            header.Token = lSKS_EB_FileStorage.FileHubToken;
            header.EndPoint = lSKS_EB_FileStorage.FileHubLocation;
            header.Trace = lSKS_EB_FileStorage.Trace;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateBFLClass</Name>
				<Source><![CDATA[
    private str ValidateBFLClass(str className)
    {
        TreeNode tnode2Enum;
        ;

        tnode2Enum = TreeNode::findNode('Classes');
        tnode2Enum = tnode2Enum.AOTfindChild(className);

        if (tnode2Enum == null)
        {
            return strFmt("@SKS:SKGBFLDLLMissing", className);
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAPBank</Name>
				<Source><![CDATA[
    protected void GetAPBank(BankAccountId _bankAccountId = '', PaymMode _paymMode = '', CompanyId _company = curExt())
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        ;

        if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList && msks_eft_bank)
        {
            return;
        }

        if(_bankAccountId != '' && _paymMode != '')
        {
            if(msks_eft_Bank.BankAccountId != _bankAccountId || msks_eft_Bank.PaymMode != _paymMode || msks_eft_Bank.DataAreaId != _company)//SKS_Bug_12510
            {
                msks_eft_Bank = SKS_EFT_Bank::findByCompany(_company, _bankAccountId, _paymMode); // SKS_FDD_10590
            }
        }
        else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
        {
            if(msks_eft_Bank.BankAccountId != msks_eftap_file.PreNoteOnlyBankAccountId || msks_eft_Bank.PaymMode != msks_eftap_file.PreNotesOnlyPaymMode)
            {
                msks_eft_Bank = SKS_EFT_Bank::findByCompany(_company, msks_eftap_file.PreNoteOnlyBankAccountId, msks_eftap_file.PreNotesOnlyPaymMode); // SKS_FDD_10590
            }
        }
        else
        {
            select firstonly PmtBankAccountId,PaymMode, Company from sks_eft_filePmtSelection // SKS_FDD_10590
                where sks_eft_filePmtSelection.FileRecId == msks_eftap_file.RecId;
            if(msks_eft_Bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eft_Bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                msks_eft_Bank = SKS_EFT_Bank::findByCompany(sks_eft_filePmtSelection.Company, sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode); // SKS_FDD_10590
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCNPBank</Name>
				<Source><![CDATA[
    protected void GetCNPBank(BankAccountId _bankAccountId = '', PaymMode _paymMode = '', CompanyId _company = curExt())
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        ;

        if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::MasterAccountList && msks_eft_bank)
        {
            return;
        }

        if(_bankAccountId != '' && _paymMode != '')
        {
            if(msks_eftcnp_Bank.BankAccountId != _bankAccountId || msks_eftcnp_Bank.PaymMode != _paymMode)//SKS_Bug_12510
            {
                msks_eftcnp_Bank = SKS_EFTCNP_Bank::find(_bankAccountId, _paymMode); // SKS_FDD_10590
            }
        }
        else
        {
            select firstonly PmtBankAccountId,PaymMode, Company from sks_eft_filePmtSelection // SKS_FDD_10590
            where sks_eft_filePmtSelection.FileRecId == msks_eftap_file.RecId;
            if(msks_eftcnp_Bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftcnp_Bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                msks_eftcnp_Bank = SKS_EFTCNP_Bank::find(sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode); // SKS_FDD_10590
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBTBBank</Name>
				<Source><![CDATA[
    private void GetBTBBank(BankAccountId _bankAccountId = '', PaymMode _paymMode = '', DataAreaId _dataAreaId = curext()) //FDD-10590
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        ;

        if(_bankAccountId != '' && _paymMode != '')
        {
            if(msks_eftbtb_bank.BankAccountId != _bankAccountId || msks_eftbtb_bank.PaymMode != _paymMode)
            {
                msks_eftbtb_bank = SKS_EFTBTB_Bank::findByCompany(_dataAreaId, _bankAccountId, _paymMode);//FDD-10590
            }
        }
        else
        {
            select firstonly PmtBankAccountId,PaymMode from sks_eft_filePmtSelection where sks_eft_filePmtSelection.FileRecId == msks_eftap_file.RecId;
            if(msks_eftbtb_bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftbtb_bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                msks_eftbtb_bank = SKS_EFTBTB_Bank::findByCompany(sks_eft_filePmtSelection.company(), sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode); //FDD-10590
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetARBank</Name>
				<Source><![CDATA[
    private void GetARBank(BankAccountId _bankAccountId = '', PaymMode _paymMode = '', DataAreaId _dataAreaId = curext()) //FDD-10590
    {
        SKS_EFT_FilePmtSelection sks_eft_filePmtSelection;
        DataAreaId      preNoteOnlyDataAreaId;
        ;

        if(_bankAccountId != '' && _paymMode != '')
        {
            if(msks_eftar_Bank.BankAccountId != _bankAccountId || msks_eftar_Bank.PaymMode != _paymMode)
            {
                msks_eftar_Bank = SKS_EFTAR_Bank::findByCompany(_dataAreaId, _bankAccountId, _paymMode);//FDD-10590
            }
        }
        else if(msks_eftap_file.JournalOption == SKS_EFT_FileJournalOption::PreNotesOnly)
        {
            if(msks_eftar_Bank.BankAccountId != msks_eftap_file.PreNoteOnlyBankAccountId || msks_eftar_Bank.PaymMode != msks_eftap_file.PreNotesOnlyPaymMode)
            {
                msks_eftar_Bank = SKS_EFTAR_Bank::findByCompany(preNoteOnlyDataAreaId, msks_eftap_file.PreNoteOnlyBankAccountId, msks_eftap_file.PreNotesOnlyPaymMode);//FDD-10590
            }
        }
        else
        {
            select firstonly PmtBankAccountId,PaymMode from sks_eft_filePmtSelection where sks_eft_filePmtSelection.FileRecId == msks_eftap_file.RecId;
            if(msks_eftar_Bank.BankAccountId != sks_eft_filePmtSelection.PmtBankAccountId || msks_eftar_Bank.PaymMode != sks_eft_filePmtSelection.PaymMode)
            {
                msks_eftar_Bank = SKS_EFTAR_Bank::findByCompany(sks_eft_filePmtSelection.company(), sks_eft_filePmtSelection.PmtBankAccountId, sks_eft_filePmtSelection.PaymMode); //FDD-10590
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>