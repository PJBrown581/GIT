<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableFormTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formstr(SalesTable))]
final class SalesTableFormTAS_Extension
{
    public NoYes sKS_CC_IsOneTimeCustomer;    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SalesTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to control PayLink control visibility
    /// </summary>
    /// <param name="_sender">Sender object</param>
    /// <param name="_e">EventArgs object</param>
    [FormEventHandler(formStr(SalesTable), FormEventType::Initialized)]
    public void SalesTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        boolean isPayLinkModEnabled;
        SKS_PP_Setup sksParms = SKS_PP_Setup::find();
        
        if (sksParms.CCPLEnablePayLinks || sksParms.CCPLEnableWalletLinks)
        {
            isPayLinkModEnabled = true;
        }
        
        SKS_CC_PayLinkGroup.visible(isPayLinkModEnabled && (sksParms.CCPLEnableListPageFields || sksParms.CCPLEnableListPageDisplayMethods));
        if (SKS_CC_PayLinkGroup.visible())
        {
            SKS_CC_PayLinkStatus.visible(sksParms.CCPLEnableListPageFields);
            SKS_CC_PayLinkCount.visible(sksParms.CCPLEnableListPageFields);
            SKS_CC_PayLinkErrorMsg.visible(sksParms.CCPLEnableListPageFields);
            SKS_CC_CustLastWalletLinkStatus.visible(sksParms.CCPLEnableListPageDisplayMethods);
            SKS_CC_CustHasActiveCreditCard.visible(sksParms.CCPLEnableListPageDisplayMethods);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to control menu item button visibility.
    /// </summary>
    /// <param name="_sender">Sender object</param>
    /// <param name="_e">EventArgs object</param>
    [FormDataSourceEventHandler(formDataSourceStr(SalesTable, SalesTable), FormDataSourceEventType::Activated)]
    public void SalesTable_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        SalesTable salesTableLocal = _sender.cursor();
        FormRun formRun = _sender.formRun();
        FormControl sKS_CC_CustPaymTableCtrl = formRun.Design().controlName(formControlStr(SalesTable, SKS_CC_CustPaymTable));
        FormControl creditCardPreauthorize = formRun.Design().controlName(formControlStr(SalesTable, creditCardPreauthorize));
        
        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();
        if (sKS_PP_Setup.CCDisallowPaymEntryFormFromSalesOrder == NoYes::No)
        {
            sKS_CC_CustPaymTableCtrl.visible(false);
        }
        else
        {
            sKS_CC_CustPaymTableCtrl.visible(sKS_PP_Setup.ModCC == NoYes::Yes &&
                salesTableLocal.RecId != 0 &&
                salesTableLocal.SalesStatus != SalesStatus::Invoiced &&
                salesTableLocal.SalesStatus != SalesStatus::Canceled);
        }

        if (creditCardPreauthorize.enabled() && salesTableLocal.ProjId)
        {
            creditCardPreauthorize.enabled(false);
        }

        if (SKS_PP_Setup::isCreditCardOneTimeCustLogicEnabled())
        {
            sKS_CC_IsOneTimeCustomer = SalesTable.custTable_InvoiceAccount().OneTimeCustomer;
        }
        else
        {
            sKS_CC_IsOneTimeCustomer = NoYes::No;
        }        
        
        SKS_CC_Payment_M_editCreditCard.visible(sKS_CC_IsOneTimeCustomer);
        Payment_M_editCreditCard.visible(!sKS_CC_IsOneTimeCustomer);

        boolean canSendLinkSKS = salesTableLocal.SalesStatus != SalesStatus::Invoiced && salesTableLocal.SalesStatus != SalesStatus::Canceled &&
                salesTableLocal.SalesType != SalesType::ReturnItem && !salesTableLocal.ProjId;

        SKS_CC_SalesOrderPrePaymentDialog.visible(sKS_PP_Setup.ModCC == NoYes::Yes);
        if (SKS_CC_SalesOrderPrePaymentDialog.visible())
        {
            SKS_CC_SalesOrderPrePaymentDialog.enabled(canSendLinkSKS && 
                !(salesTable.mcrIsCallCenter() && RetailMCRChannelTable::mcrEnableOrderCompletion(salesTableLocal)));
        }

        SKS_CC_PaylinkBtnGrp.visible(sKS_PP_Setup.ModCC == NoYes::Yes &&
            !(salesTableLocal.mcrIsCallCenter() && RetailMCRChannelTable::mcrEnableOrderCompletion(salesTableLocal)) &&
            (sKS_PP_Setup.CCPLEnablePayLinks || sKS_PP_Setup.CCPLEnableWalletLinks));
        
        if (SKS_CC_PaylinkBtnGrp.visible())
        {
            boolean canPreAuthSKS;
            if (CustParameters::find().CreditCardPreAuthorization && sKS_PP_Setup.CCDisableStdSalesOrderPreAuth == NoYes::No)
            {
                canPreAuthSKS = true;
            }

            boolean isCreditCardPaymTypeSKS;
            if (salesTableLocal.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
            {
                isCreditCardPaymTypeSKS = true;
            }

            SKS_CC_SendPreAuthPayLink.enabled(canPreAuthSKS && canSendLinkSKS && sKS_PP_Setup.CCPLEnablePayLinks && isCreditCardPaymTypeSKS);
            SKS_CC_SendCapturePayLink.enabled(canSendLinkSKS && sKS_PP_Setup.CCPLEnablePayLinks);

            boolean hasPendingLinkSKS = SKS_CC_PayLinkQueue::salesOrderHasPendingPayLink(salesTableLocal);
            SKS_CC_PayLinkQueueRefresh.enabled(canSendLinkSKS && sKS_PP_Setup.CCPLEnablePayLinks && hasPendingLinkSKS);

            SKS_CC_HasPendingPayLink.visible(hasPendingLinkSKS);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_PayLinkQueueRefresh_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to refresh PayLinks
    /// </summary>
    /// <param name="_sender">Sender object</param>
    /// <param name="_e">EventArgs object</param>
    [FormControlEventHandler(formControlStr(SalesTable, SKS_CC_PayLinkQueueRefresh), FormControlEventType::Clicked)]
    public void SKS_CC_PayLinkQueueRefresh_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {        
        if (salesTable)
        {
            SKS_CC_PayLinkQueue payLinkQueueSKS = SKS_CC_PayLinkQueue::getSalesOrderPendingPayLink(salesTable);
            if (payLinkQueueSKS)
            {
                Args argsSKSLoc = new Args();
                    
                argsSKSLoc.record(payLinkQueueSKS);
                argsSKSLoc.caller(this);

                MenuFunction menuFunction;
                menuFunction = new MenuFunction(menuitemActionStr(SKS_CC_PayLinkQueueRefresh), MenuItemType::Action);
                menuFunction.run(argsSKSLoc);

                salesTable_ds.reread();
                salesTable_ds.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_Payment_M_editCreditCard_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to implement a custom lookup for credit cards for one-time customers
    /// </summary>
    /// <param name="_sender">Sender object</param>
    /// <param name="_e">EventArgs object</param>
    [FormControlEventHandler(formControlStr(SalesTable, SKS_CC_Payment_M_editCreditCard), FormControlEventType::Lookup)]
    public void SKS_CC_Payment_M_editCreditCard_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        if (sKS_CC_IsOneTimeCustomer && salesTable.payment().CreditCardPaymentType == CreditCardPaymentType::CreditCard)
        {
            CreditCardCust::sKS_CC_lookupCreditCard(
                _sender,
                salesTable.InvoiceAccount,
                salesTable.CreditCardCustRefId,
                salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_Payment_M_editCreditCard_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to enable header credit card menu items
    /// </summary>
    /// <param name="_sender">Sender object</param>
    /// <param name="_e">EventArgs object</param>
    [FormControlEventHandler(formControlStr(SalesTable, SKS_CC_Payment_M_editCreditCard), FormControlEventType::Modified)]
    public void SKS_CC_Payment_M_editCreditCard_OnModified(FormControl _sender, FormControlEventArgs _e)
    {
        if (sKS_CC_IsOneTimeCustomer)
        {
            FormRun elementSKSLoc = _sender.formRun();
            elementSKSLoc.enableHeaderCreditCardMenuItems();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_Payment_Payment_OnLeaving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to clear the credit card number when payment type is not credit card
    /// </summary>
    /// <param name="_sender">Sender object</param>
    /// <param name="_e">EventArgs object</param>
    [FormControlEventHandler(formControlStr(SalesTable, Payment_Payment), FormControlEventType::Leaving)]
    public void SKS_CC_Payment_Payment_OnLeaving(FormControl _sender, FormControlEventArgs _e)
    {
        if (sKS_CC_IsOneTimeCustomer && salesTable.CreditCardCustRefId == 0 && SKS_CC_Payment_M_editCreditCard.text())
        {
            // Clears the credit card number if the payment type is not a credit card
            salesTable_ds.cacheCalculateMethod(SKS_CC_Payment_M_editCreditCard.dataMethod());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_Payment_Payment_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to validate credit cards for pending PayLinks
    /// </summary>
    /// <param name="_sender">Sender object</param>
    /// <param name="_e">EventArgs object</param>
    [FormControlEventHandler(formControlStr(SalesTable, Payment_Payment), FormControlEventType::Validating)]
    public void SKS_CC_Payment_Payment_OnValidating(FormControl _sender, FormControlEventArgs _e)
    {
        CustPaymTermId origPayment = salesTable.orig().Payment;

        if (origPayment != salesTable.Payment)
        {
            if (PaymTerm::find(origPayment).CreditCardPaymentType == CreditCardPaymentType::CreditCard &&
                PaymTerm::find(salesTable.Payment).CreditCardPaymentType != CreditCardPaymentType::CreditCard &&
                SKS_PP_Setup::isCreditCardPayLinkEnabled() &&
                SKS_CC_PayLinkQueue::salesOrderHasPendingPayLink(salesTable))
            {
                checkFailed(strFmt("@SKS:SKGCCPaymTermMayNotBeChangedSincePayLinkExist", salesTable.SalesId));                 

                FormControlCancelEventArgs cancelArgs = _e as FormControlCancelEventArgs;
                cancelArgs.cancel(true);                
            }  
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_Payment_M_editCreditCard_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to validate credit cards for one-time customer
    /// </summary>
    /// <param name="_sender">Sender object</param>
    /// <param name="_e">EventArgs object</param>
    [FormControlEventHandler(formControlStr(SalesTable, SKS_CC_Payment_M_editCreditCard), FormControlEventType::Validated)]
    public void SKS_CC_Payment_M_editCreditCard_OnValidated(FormControl _sender, FormControlEventArgs _e)
    {
        if (sKS_CC_IsOneTimeCustomer)
        {
            boolean isValidForOneTimeCustSKS = true;

            isValidForOneTimeCustSKS = CreditCardCust::sKS_CC_IsValidCreditCardForOneTimeCust(
                    salesTable,
                    salesTable.InvoiceAccount,
                    salesTable.CreditCardCustRefId);

            if (!isValidForOneTimeCustSKS)
            {
                checkFailed(strFmt("@SKS:SKGCCOneTimeCustCCNotFound", _sender.valueStr(),
                    fieldId2PName(tableNum(SalesTable), fieldNum(SalesTable, CreditCardCustRefId)),
                    tableId2PName(tableNum(CreditCardCust)), salesTable.InvoiceAccount));

                FormControlCancelEventArgs cancelArgs = _e as FormControlCancelEventArgs;
                cancelArgs.cancel(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>