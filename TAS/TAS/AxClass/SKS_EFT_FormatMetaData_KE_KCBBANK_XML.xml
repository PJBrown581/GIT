<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_KE_KCBBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_US_SUNTRUST_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_KE_KCBBANK_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20230511';
        dataContractVersion = '1.0';
        conFormatID = ['KE-KCBBANK-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
        //ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
        //BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
        //FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
        //IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
        //WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
        //WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,1,1,'','','','',0,'','','','',0,'KE - Kenya Commercial Bank - XML',0,'','','KE-KCBBANK-XML',1,'','','','','','','','',0,0,'00:00.0',0,'00:00.0',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'KE-KCBBANK-XML',1,1,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
        //BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('KE-KCBBANK-XML'):
                paymSpecList = this.getPaymSpecsMetaData_KE_KCBBANK_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_KE_KCBBANK_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_KE_KCBBANK_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Credit Transfer',1,'TRF','','TRF','TRADE PAY',0,'KE-KCBBANK-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,1,0,1,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('KE-KCBBANK-XML'):
                notesList = this.getNotesMetaData_KE_KCBBANK_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_KE_KCBBANK_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_KE_KCBBANK_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['KE-KCBBANK-XML','TRF','-Group header > Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('KE-KCBBANK-XML'):
                validationsList = this.getValidationsMetaData_KE_KCBBANK_XML();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_KE_KCBBANK_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_KE_KCBBANK_XML()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,0,1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > TwnNm','TownName related to bank','15','WOrdPartyCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Country/Region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > Address','Address related to bank','15','WOrdPartyAddr','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > Address','Address related to bank','15','WOrdPartyAddr2','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number ',0,'AccountNum','','','3',1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','3',1,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Routing number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > MmbId','Bank Routing Number',0,'RegistrationNum','','','3','2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','','3',1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3',1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','','3',0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Vendor Routing Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Zip/postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > TwnNm','City related to vendor','16','WBeneCity','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr> PstlAdr> CtrySubDvsn','Country Sub Division related to vendor','16','WBeneState','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > StrtNm','Address related to vendor','16','WBeneAddr','','',1,1,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > BldgNb','Address related to vendor','16','WBeneAddr2','','',1,1,1,'35',0,0]);


        //B2B
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Name','TAS > Set up > Bank account > Select Bank to bank transfer > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','23','WOrdPartyName','','',0,0,1,'140',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Address 1','TAS > Set up > Bank account > Select Bank to bank transfer > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','23','WOrdPartyAddr','','',1,'1','','',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Address 2','TAS > Set up > Bank account > Select Bank to bank transfer > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','23','WOrdPartyAddr2','','',1,'1','','',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank City','TAS > Set up > Bank account > Select Bank to bank transfer > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > City','City related to bank','23','WOrdPartyCity','','',1,'1',1,'',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Zip/postal code','TAS > Set up > Bank account > Select Bank to bank transfer > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','23','WOrdPartyZipCode','','',1,1,0,0,0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Country code','TAS > Set up > Bank account > Select Bank to bank transfer > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','23','WOrdPartyCountryRegionId','','',1,1,'','',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank(offset account) IBAN','Cash and bank management > Select bank account > edit > General (fast tab) IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related Bank(offset account)','24','IBAN','','',3,1,1,'34',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank(offset account) Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank Account Number','PmtInf > DbtrAcct > Othr > Id','Account Number related to Bank(offset account)','24','AccountNum','','',3,1,1,'34',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank(offset account) Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank(offset account)','24','SWIFTNo','','',3,0,'8','11',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank(offset account) Bank Routing number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > MmbId','Bank Routing Number',24,'RegistrationNum','','','3','2',1,'35',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank(account) Swift number','Cash and bank management > Common > Bank accounts > Select the Bank > Edit the Bank Account > Select Additional identification (Fast tab) > SWIFTNo','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > BIC','Swift Code related Bank(account)','26','SWIFTNo','','',3,1,'1','11',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank(account) Routing Number','Cash and bank management > Common > Bank accounts > Select the Bank > Edit the Bank Account > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','26','RegistrationNum','','','3',1,1,'35',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Company(account LE) Name','Organization administration > Organization > Legal entities > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Company(account LE)','28','Name','','',0,0,1,'140',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Company(account LE) Country/Region','Organization administration > Organization > Legal entities > Select Purpose as BTB EFT Address tab(Edit) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Company(account LE)','34','CountryRegionId','','',1,1,'',0,0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Company(account LE) Address 1','Organization administration > Organization > Legal entities > Select Purpose as BTB EFT Address tab(Edit) > Street','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine > Address','Address related to Company(account LE)','34','Street','','',1,'2',1,'70',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Company(account LE) ZIP/Postal Code','Organization administration > Organization > Legal entities > Select Purpose as BTB EFT Address tab(Edit) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','ZIP/Postal code  related to Company(account LE)','34','ZipCode','','',1,1,'','',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Company(account LE) City','Organization administration > Organization > Legal entities > Select Purpose as BTB EFT Address tab(Edit) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > City','City related to Company(account LE)','34','City','','',1,1,1,'35',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank(account) IBAN','Cash and bank management > Common > Bank accounts > Select the Bank > Edit the Bank Account > Select Additional identification (Fast tab) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to Bank(account)','26','IBAN','','',3,1,1,'34',0,'4','',0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank(account) Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Bank(account)','26','AccountNum','','',3,1,1,'34',0,'4','',0]);

        //Customer reimbursement
        
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Name','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','37','WOrdPartyName','','',0,0,1,'140',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Address 1','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','37','WOrdPartyAddr','','',1,'2',1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank City','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > City','City related to bank','37','WOrdPartyCity','','',1,'2',1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Zip/postal code','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','37','WOrdPartyZipCode','','',1,1,0,0,0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Country code','TAS > Set up > Bank account > Select Customer reimbursement > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','37','WOrdPartyCountryRegionId','','',1,1,'','',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','',3,1,1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number',0,'AccountNum','','',3,1,1,'34',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',3,0,'8','11',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Routing number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > MmbId','Bank Routing Number',0,'RegistrationNum','','','3','1',1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Customer Swift Code','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > BIC','Swift Code related to Customer',1,'SWIFTNo','','',1,1,'8','11',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Customer Routing Number','TAS > Common > Customer eBanking details > Payment specifications > Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','','3',1,1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Name','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Customer','35','WBeneName','','',0,0,1,'140',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Customer Country Region','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to Customer','35','WBeneCountryRegionId','','',1,1,'',0,0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Customer Address 1','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to Customer','35','WBeneAddr','','',1,'2',1,'70',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Customer Address 2','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to Customer','35','WBeneAddr2','','',1,'2',1,'16',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','ZIP/Postal Code ','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > AdrLine ','ZIP/Postal code  related to Customer','35','WBeneZipPostal','','',1,1,'','',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','City','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstlAdr > AdrLine','Customer city','35','WBeneCity','','',1,1,1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Customer bank Address','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Address','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > PstlAdr > AdrLine','Address related to Customer bank','35','WBenBankAddr','','',1,1,1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Customer bank City','TAS > Common > Customer eBanking details > Customer reimbursement > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > City','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > PstlAdr > City','City related to Customer bank','35','WBenBankCity','','',1,1,1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank IBAN','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to Customer',1,'BankIBAN','','',3,1,1,'35',0,'6']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['KE-KCBBANK-XML','TRF','','Bank Account Number','TAS > Common > Customer eBanking details > Customer reimbursement > Customer bank accounts > General tab > Identification(group) > Bank Account Number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to Customer',1,'AccountNum','','',3,1,1,'35',0,'6']);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['KE-KCBBANK-XML','ChrgBr','Charge Bearer']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['KE-KCBBANK-XML','ChrgBr','BorneByDebtor','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['KE-KCBBANK-XML','ChrgBr','BorneByCreditor','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['KE-KCBBANK-XML','ChrgBr','Shared','SHAR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['KE-KCBBANK-XML','ChrgBr','FollowingServiceLevel','SLEV']);
        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('KE-KCBBANK-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_KE_KCBBANK_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_KE_KCBBANK_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_KE_KCBBANK_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['KE-KCBBANK-XML','KE-KCBBANK-XML','TRF','ChrgBr','Charge Bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        
        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['KE-KCBBANK-XML','BtchBookg','Batch Booking(Y/N)']);

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['KE-KCBBANK-XML','BtchBookg','Y','Y']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['KE-KCBBANK-XML','BtchBookg','N','N']);

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('KE-KCBBANK-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_KE_KCBBANK_XML();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_KE_KCBBANK_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_KE_KCBBANK_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['KE-KCBBANK-XML','KE-KCBBANK-XML','BtchBookg','Batch Booking(Y/N)',0,'BtchBookg','',0,'','','PmtInf > BtchBookg']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>