<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_PAYMODEX_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_PAYMODEX_XML  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_PAYMODEX_XML  extends SKS_EFT_Format
{
    #define.FormatVersion('20230417')
    #define.ACH('ACH')
    #define.CHK('CHK')
    #define.EPAY('ePay')//SKS_VSTS_13828
    
    XmlDocument         xmlDoc;
    XmlElement          nodeRoot;
    XmlElement          nodePayments;
    XmlElement          nodePaymodeCheck;
    XmlElement          nodePmtInfo;
    SKS_EFT_FileDetail  invSKS_EFT_FileDetail;
    int                 remitCount;
    int                 paymentsCount;
    Amount              amt;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Selecting a local table buffer based on a global table buffer attribute)")]
    protected void formatStructure()
    {
        //Initialize XML
        xmlDoc = XmlDocument::newBlank();
        
        this.node_MessageRoot();

        //              Payments
        nodePayments = nodeRoot.appendChild(xmlDoc.createElement('Payments'));
        
        while(mSKS_EFT_FileDetail)        
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
            
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
            
            // Get Remittance information
          
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
            

            
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
            
            //      Payments
            this.node_Payments();
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
            {
                //          Remittance
                this.node_Payments_Remittance(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
        //      ControlTotal
        this.node_ControlTotal();
        
        this.fileWrite(xmlDoc.toString());        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 65001;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJournaltxt</Name>
				<Source><![CDATA[
    private str getInvoiceJournaltxt(SKS_EFT_FileDetail _SKS_EFT_FileDetail)
    {
        VendTrans lVendTrans;
        
        select firstonly crossCompany Txt from lVendTrans where
                lVendTrans.RecId == _SKS_EFT_FileDetail.VendTransRecId;
        
        return this.CharacterReplacement(lVendTrans.Txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoveBOM</Name>
				<Source><![CDATA[
    protected boolean getRemoveBOM()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_ControlTotal</Name>
				<Source><![CDATA[
    private void node_ControlTotal()
    {
        XmlElement  nodeControlTotal;
        
        //              ControlTotal
        nodeControlTotal = nodeRoot.appendChild(xmlDoc.createElement('ControlTotal'));
        
        //              PaymentsAmount
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeControlTotal, 'PaymentsAmount', num2str(amt * -1,0,2,1,0));
        
        //              PaymentsCount
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeControlTotal, 'PaymentsCount', num2str(paymentsCount, 0,0,0,0));//SKS_VSTS_13828
        
        //              RemittancesCount
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeControlTotal, 'RemittancesCount', num2str(remitCount, 0,0,0,0));        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_MessageRoot
    /// </summary>
    protected void node_MessageRoot()
    {
        nodeRoot = xmldoc.appendChild(xmlDoc.createElement('ComprehensivePayments'));
        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'CompanyTag', mSKS_EFT_FileDetail.FileACHCompanyName, 40);
        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'ControlNumber', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,20));
        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'FileDateTime', DateTimeUtil::toStr(DateTimeUtil::utcNow()));        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Payments</Name>
				<Source><![CDATA[
    private void node_Payments()
    {
        paymentsCount++;
        XmlElement  nodeCollectorAddress;
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH:
                nodePaymodeCheck = nodePayments.appendChild(xmlDoc.createElement('Paymode'));
                break;
            case #CHK:
                nodePaymodeCheck = nodePayments.appendChild(xmlDoc.createElement('Check'));
                break;
            case #EPAY://SKS_VSTS_13828
                nodePaymodeCheck = nodePayments.appendChild(xmlDoc.createElement('ePay'));
                break;
        }
        //                  DisburserPaymodeID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'DisburserPaymodeID', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DisburserPaymodeID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 25);
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #EPAY)//SKS_VSTS_14189
        {
            //                  DisburserBankID
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'DisburserBankID', this.CharacterReplacement(mSKS_EFT_FileDetail.BankBankTransit), 11);
        
            //                  DisburserBankAccount
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'DisburserBankAccount', this.CharacterReplacement(mSKS_EFT_FileDetail.BankBankAcct), 35);
        }
        
        //                  CollectorPaymodeID
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'CollectorPaymodeID', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CollectorPaymodeID', mSKS_EFT_FileDetail.RecId)), 25);
        }

        //                  CollectorName
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'CollectorName', this.CharacterReplacement(mRemittanceName), 50);
        
        //                  CollectorNumber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'CollectorNumber', mSKS_EFT_FileDetail.AccountNum, 30);
        
        //                  CollectorSiteCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'CollectorSiteCode', '');

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            //                  CollectorAddress
            nodeCollectorAddress = nodePaymodeCheck.appendChild(xmlDoc.createElement('CollectorAddress'));
        
            //                  AddressOne
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCollectorAddress, 'AddressOne', this.CharacterReplacement(mRemittanceAdrLine1),50);

            //                  AddressTwo
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCollectorAddress, 'AddressTwo',this.CharacterReplacement(mRemittanceAdrLine2),50);
        
            //                  City
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCollectorAddress, 'City', mRemittanceCity);
        
            //                  State
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCollectorAddress, 'State', mRemittanceState);
        
            //                  PostalCode
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCollectorAddress, 'PostalCode', mRemittanceZipCode);
        }

        //                  PaymentNumber
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)        
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'CheckNumber', SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 20));            
        }
        else        
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'PaymentNumber', SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 20));            
        }
        
        //                  Amount
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'Amount', num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
        amt += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        
        //                  Currency
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #EPAY)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'Currency', mSKS_EFT_FileDetail.PaymentCurrencyCode, 3);
        }
        
        //                  DebitDate
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'EffectiveDate', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }

        //                  DivertIndicator Y/N
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            if (SKS_EFT_Format::getCodelookupvalue('DivertIndicator', mSKS_EFT_FileDetail.RecId))
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'DivertIndicator', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DivertIndicator', mSKS_EFT_FileDetail.RecId)), 1);
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymodeCheck, 'DivertIndicator', 'N', 1);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Payments_Remittance</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    private void node_Payments_Remittance(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        XmlElement  nodeRemittance;
        Amount paidAmount, orgAmount, discAmount;
        real   discPercentage;
        LedgerJournalTrans  ledgerJournalTrans;
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
        
        remitCount++;
        
        //          Remittance
        nodeRemittance = nodePaymodeCheck.appendChild(xmlDoc.createElement('Remittance'));
        
        //          InvoiceDate
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'InvoiceDate', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen), 10);
        
        //          InvoiceNumber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'InvoiceNumber', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), 255);
        
        //          ReferenceNumber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'ReferenceNumber','');
        
        //          BuyerAccountNumber
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'BuyerAccountNumber',this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BuyerAccnum', mSKS_EFT_FileDetail.RecId)));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'BuyerAccountNumber','');
        }
        
        //          PurchaseOrderNumber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'PurchaseOrderNumber', '');
        
        //          VoucherNumber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'VoucherNumber', '');
        
        //          ContractNumber
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)        
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'ContractNumber', '');            
        }
        
        //          PaidInvoiceAmount
        paidAmount = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'PaidInvoiceAmount', num2str(paidAmount * -1,0,2,1,0));
        
        //          OriginalInvoiceAmount
        orgAmount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'OriginalInvoiceAmount', num2str(orgAmount  * -1,0,2,1,0));
        
        //          DiscountAmount
        discAmount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'DiscountAmount', num2str(discAmount * -1,0,2,1,0));
        
        discPercentage = (discAmount/orgAmount)*100;
        
        //          DiscountPercentage
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'DiscountPercentage', num2str(discPercentage ,0,2,1,0));
        
        //          Comment
        select locSKS_EFT_FileDetail join
            Txt,PaymId,PaymentNotes from ledgerJournalTrans where locSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            && locSKS_EFT_FileDetail.PaymentLineRecId == ledgerJournalTrans.RecId;
        if(ledgerJournalTrans.Txt)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'Comment', ledgerJournalTrans.Txt, 1000);
        }
        else if(ledgerJournalTrans.PaymId)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'Comment', ledgerJournalTrans.PaymId, 1000);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'Comment', ledgerJournalTrans.PaymentNotes, 1000);
        }
        
        //          PropertyNumber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'PropertyNumber','');
        
        //          PropertyName
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRemittance, 'PropertyName','');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = this.StreetToAddressLineArray(lRemittancePostalAddress.Street, 2, 50);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
            mRemittanceAdrLine3 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
                if (vendAddrArray.exists(3))
                {
                    mRemittanceAdrLine3 = vendAddrArray.value(3);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            //Populate Remittance Information from Vendor eBanking details
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>StreetToAddressLineArray</Name>
				<Source><![CDATA[
    private Array StreetToAddressLineArray(LogisticsAddressStreet _street, int _numberOfSegments = maxInt(), int len = 35)
    {
        Array addressLineArray = new Array(Types::String);
        int arrayCounter = 1;
        // vvv 13299 vvv
        boolean boolContainsCarriageReturns = strContains(_street, '\n'); //13299:  if there are no carriage returns, we'll srtrictly break on 50 chars and wrap...
        //cont... If there is a carraige return, we'll be wrapping on the carraige return,
        //cont...  and if the block is biggger then 50, some of it will be lost.  Only
        //cont... the first 50 chars of each carriage return separted block will be preserved.
        str locStreet = strLRTrim(_street);
        // ^^^ 13299 ^^^

        while (arrayCounter <= _numberOfSegments && strLen(locStreet) > 0)
        {
            if(strLen(strLRTrim(locStreet)) == 0)
            {
                break;
            }

            if(boolContainsCarriageReturns)
            {
                if (strContains(locStreet, '\n') && arrayCounter != _numberOfSegments )
                {
                    addressLineArray.value(arrayCounter,SKS_PP_StringFormats::strSub(locStreet,1,SKS_PP_StringFormats::strIndexOf(locStreet,'\n') - 1));
                    locStreet = strLRTrim(SKS_PP_StringFormats::strSub(locStreet,SKS_PP_StringFormats::strIndexOf(locStreet,'\n') + 1));
                    arrayCounter++;
                }
                else
                {
                    addressLineArray.value(arrayCounter,strreplace(locStreet,'\n',', '));
                    break;
                }
            }
            else
            {
                if(strLen(locStreet) > len && arrayCounter != _numberOfSegments)
                {
                    addressLineArray.value(arrayCounter,strLRTrim(SKS_PP_StringFormats::strSub(locStreet,1,len)));
                    
                    locStreet = '';
                    arrayCounter++;
                }
                else
                {
                    addressLineArray.value(arrayCounter,strLRTrim(locStreet));
                    break;
                }
            }
        }
        return addressLineArray;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>