<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_WF_PMS_XML_R2202102</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_WF_PMS_XML_R2202102
/// </summary>
class SKS_EFT_Format_US_WF_PMS_XML_R2202102 extends SKS_EFT_Format
{
    #define.FormatVersion('20221027')
    XmlDocument             xmlDoc;
    XmlElement              nodeFile;
    int                     refID;
    SKS_EFT_SequenceNumber  mSequenceNumber;
    boolean                 mPDP;
    str                     purpCode;

    #define.NRG('NRG')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InvoiceNotes</Name>
				<Source><![CDATA[
    private void node_InvoiceNotes(XmlElement _nodeInvoiceInfo, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //      Note
        //          NoteType (Attribute)
        //          NoteText (element)
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeNote;
        str txt;
        txt = _invSKS_EFT_FileDetail.InvoiceTransactionTxt;

        if(mSKS_EFT_FileDetail.UseCheckNumber == true)
        {
            str noteValue = _invSKS_EFT_FileDetail.DocumentNum;

            if(txt)
            {
                txt += ' ' + noteValue;
            }
            else
            {
                txt = noteValue;
            }
        }
        
        if(txt)
        {
            //      Note
            nodeNote = _nodeInvoiceInfo.appendChild(xmlDoc.createElement('Note'));
            
            //          NoteType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeNote, 'NoteType', 'INV');
            
            //          NoteText (Element)
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeNote, 'NoteText', this.CharacterReplacement(txt), 80);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// addressSplit
    /// </summary>
    /// <returns>address</returns>
    ///<param name = "_address">address</param>
    protected container addressSplit(SKS_EB_Address  _address)
    {
        List            strList = new List(Types::String);
        container       address;
        ListIterator    iterator;
    
        strlist = strSplit(this.CharacterReplacement(_address),';');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            address += iterator.value();
            iterator.next();
        }
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        xmlDoc = XmlDocument::newBlank();
    
        //Get sequence number
        this.getSequence();
    
        this.node_File();
    
        while(mSKS_EFT_FileDetail)
        {
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);//SKS_VSTS_14292
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            this.getSKS_EFT_VendorPaym();
    
            // Get Remittance Address
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
    
            this.node_PmtRec();
    
            next mSKS_EFT_FileDetail;
        }
    
        this.node_FileInfoGrp();
    
        // Increment sequence number
        //this.incrementSequenceNumber(); //FDD-10590
    
        // Set sequence number
        this.setSequence();
    
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    private str getBankPurposeCode()
    {

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId); //FDD-10590

        purpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
    
        return strReplace(this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText), '\r', ' '); //FDD-10590
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEMail</Name>
				<Source><![CDATA[
    private container getEMail()    //VSTS#13015
    {
        SKS_EB_Vendor lSKS_EB_Vendor;
    
        lSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

        if(lSKS_EB_Vendor.EM1Vendor && (mSKS_EFT_FileDetail_VendAddress.LocationName || mSKS_EFT_FileDetail_VendAddress.Locator))
        {
            return [this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.LocationName), mSKS_EFT_FileDetail_VendAddress.Locator];
        }
        else
        {
            return [this.CharacterReplacement(lSKS_EB_Vendor.EM2Name), lSKS_EB_Vendor.EM2Addr];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        select firstonly lSKS_EFT_FileDetail_Extra where lSKS_EFT_FileDetail_Extra.FieldName == 'NextSequenceNumber' &&
                                                        lSKS_EFT_FileDetail_Extra.RefRecId == mSKS_EFT_FileDetail.RecId; //FDD-10590
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = str2Int(mSKS_EFT_FileDetail_Extra.Value); //FDD-10590
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999)
        {
            mSequenceNumber = 0;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_File</Name>
				<Source><![CDATA[
    private void node_File()
    {
        //------------------------------------------------------------------------------------------------------
        //  File
        //      CompanyID (Attribute)
        //      PmtRecCount (Attribute)
        //      PmtRecTotal (Attribute)
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        AmountCur paymentCount;
        AmountCur paymentAmount;
    
        // Select count and sum for this file
        // Credits
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0;
    
        paymentCount = tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur;
        paymentAmount = tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
    
        // Debits
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur >= 0;
    
        paymentCount += tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur;
        paymentAmount += tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
    
        //  File
        nodeFile = xmlDoc.appendChild(xmlDoc.createElement('File'));
    
        if(mModule == SKS_EFT_Module::AP)
        {
            //      CompanyID
            SKS_EFT_Format::xmlsetAttributeText(nodeFile, 'CompanyID', mSKS_EFT_FileDetail_BankAccount.WOrdPartyId,0,false);
        }
    
        //      PmtRecCount
        SKS_EFT_Format::xmlsetAttributeText(nodeFile, 'PmtRecCount', num2str(paymentCount,0,0,0,0));
    
        //      PmtRecTotal
        SKS_EFT_Format::xmlsetAttributeText(nodeFile, 'PmtRecTotal', num2str(paymentAmount,0,2,0,0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_FileInfoGrp</Name>
				<Source><![CDATA[
    private void node_FileInfoGrp()
    {
        //------------------------------------------------------------------------------------------------------
        //      FileInfoGrp
        //          FileDate (Attribute)
        //          FileTime (Attribute)
        //          FileControlNumber (Attribute)
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeFileInfoGrp;
        str fileControlNumber;
    
        //      FileInfoGrp
        nodeFileInfoGrp = nodeFile.appendChild(xmlDoc.createElement('FileInfoGrp'));
    
        //          FileDate
        SKS_EFT_Format::xmlsetAttributeText(nodeFileInfoGrp, 'FileDate', SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateSeparator::Hyphen));
    
        //          FileTime
        SKS_EFT_Format::xmlsetAttributeText(nodeFileInfoGrp, 'FileTime', time2Str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), TimeSeparator::Colon, TimeFormat::Hour24));
    
        //          FileControlNumber
        fileControlNumber = subStr(mSKS_EFT_File.FileNbr + '-' + int2str(mSequenceNumber),1,15);
    
        SKS_EFT_Format::xmlsetAttributeText(nodeFileInfoGrp, 'FileControlNumber', fileControlNumber);
    
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'FileControlNumber', fileControlNumber, mSKS_EFT_File.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IDInfo</Name>
				<Source><![CDATA[
    private void node_IDInfo(XmlElement _nodePmtRec, str _idType, str _idValue)
    {
        XmlElement nodeIdInfo;
    
        nodeIdInfo = _nodePmtRec.appendChild(xmlDoc.createElement('IDInfo'));
    
        SKS_EFT_Format::xmlsetAttributeText(nodeIdInfo, 'IDType', _idType);
    
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIdInfo, 'ID', _idValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IntermediaryDepAcctID</Name>
				<Source><![CDATA[
    private void node_IntermediaryDepAcctID(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  IntermediaryDepAcctID
        //      DepAcctID
        //          AcctID (Attribute)
        //          AcctType (Attribute)
        //      BankInfo
        //          BankIDType (Attribute)
        //          Name (Attribute)
        //          RefInfo
        //              RefType (Attribute)
        //              RefID
        //          BankID
        //          PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeIntermediaryDepAcctID;
        XmlElement nodeDepAcctID;
        XmlElement nodeBankInfo;
    
        //  IntermediaryDepAcctID
        nodeIntermediaryDepAcctID = _nodePmtRec.appendChild(xmlDoc.createElement('IntermediaryDepAcctID'));
    
        //      DepAcctID
        nodeDepAcctID = nodeIntermediaryDepAcctID.appendChild(xmlDoc.createElement('DepAcctID'));
    
        //          BankInfo
        nodeBankInfo = nodeDepAcctID.appendChild(xmlDoc.createElement('BankInfo'));
    
        //              BankIDType (Attribute)
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'SWT', 0, false);
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'ABA', 0, false);
        }
    
        //          Name (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 0, false);
    
        //          BankID
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', mSKS_EFT_FileDetail_Intermediary.IntBankId, 0, false);
        }
    
        //          PostAddr
        this.node_IntermediaryDepPostAddr(nodeBankInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IntermediaryDepPostAddr</Name>
				<Source><![CDATA[
    private void node_IntermediaryDepPostAddr(XmlElement _nodeBankInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          Addr2
        //          City
        //          StateProv
        //          PostalCode
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;
        LogisticsAddressCountryRegionISOCode countryRegion;
        str addr = '';
    
        countryRegion = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId);
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankAddr)
        {
            addr += mSKS_EFT_FileDetail_Intermediary.IntBankAddr;
        }
        if(mSKS_EFT_FileDetail_Intermediary.IntBankAddr2 != '')
        {
            if(addr != '')
            {
                addr += ' ';
            }
            addr += mSKS_EFT_FileDetail_Intermediary.IntBankAddr2;
        }
    
        // Only create if address data is populated
        if(addr || mSKS_EFT_FileDetail_Intermediary.IntBankCity || countryRegion)
        {
            //  PostAddr
            nodePostAddr = _nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));
    
            //          Addr1
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(addr), 35, false);
    
            //          City
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankCity), 25, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', countryRegion, 2, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InvoiceInfo</Name>
				<Source><![CDATA[
    private void node_InvoiceInfo(XmlElement _nodePmtDetail, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //      InvoiceInfo
        //          InvoiceType (Attribute)
        //          InvoiceNum (Attribute)
        //          EffDt (Attribute) YYYY-MM-DD
        //          NetCurAmt (Attribute)
        //          TotalCurAmt (Attribute)
        //          DiscountCurAmt (Attribute)
        //          Note
        //          POInfo
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInvoiceInfo;
    
        //      InvoiceInfo
        nodeInvoiceInfo = _nodePmtDetail.appendChild(xmlDoc.createElement('InvoiceInfo'));
    
        //          InvoiceType (Attribute)
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur < 0)           //SKS#DevOps:16113
        {
            //          InvoiceType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceType', 'IV');
        }
        else
        {
            //          InvoiceType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceType', 'CM');
        }
    
        //          InvoiceNum (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceNum', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), 30);    
        
        //          EffDt (Attribute) YYYY-MM-DD
        SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'EffDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate,DateSeparator::Hyphen));
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur < 0)
        {
            //          NetCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'NetCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
    
            //          TotalCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'TotalCurAmt', num2str((_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1,0,2,0,0));
    
            //          DiscountCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'DiscountCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
        }
        else
        {
            //          NetCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'NetCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
                
            //          TotalCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'TotalCurAmt', num2str((_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1,0,2,0,0));
                
            //          DiscountCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'DiscountCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
        }
    
        //          Note
        this.node_InvoiceNotes(nodeInvoiceInfo, _invSKS_EFT_FileDetail);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InvoiceCreditMemoInfo</Name>
				<Source><![CDATA[
    private void node_InvoiceCreditMemoInfo(XmlElement _nodePmtDetail, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //      InvoiceInfo
        //          InvoiceType (Attribute)
        //          InvoiceNum (Attribute)
        //          EffDt (Attribute) YYYY-MM-DD
        //          NetCurAmt (Attribute)
        //          TotalCurAmt (Attribute)
        //          DiscountCurAmt (Attribute)
        //          Note
        //          POInfo
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInvoiceInfo;
    
        //      InvoiceInfo
        nodeInvoiceInfo = _nodePmtDetail.appendChild(xmlDoc.createElement('InvoiceInfo'));
    
        //          EffDt (Attribute) YYYY-MM-DD
        SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'EffDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate,DateSeparator::Hyphen));
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            //          InvoiceType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceType', 'CM');          //SKS#VSTS:14050
    
            //          InvoiceNum (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceNum', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), 30);

            //          NetCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'NetCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
    
            //          TotalCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'TotalCurAmt', num2str((_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1,0,2,0,0));
    
            //          DiscountCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'DiscountCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
        }
        else
        {
            //          InvoiceType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceType', 'IV');              //SKS#VSTS:14050
    
            //          InvoiceNum (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceNum', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), 30);

            //          NetCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'NetCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
    
            //          TotalCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'TotalCurAmt', num2str((_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1,0,2,0,0));
    
            //          DiscountCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'DiscountCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
        }
    
        //          Note
        this.node_InvoiceNotes(nodeInvoiceInfo, _invSKS_EFT_FileDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Message</Name>
				<Source><![CDATA[
    private void node_Message(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //      Message
        //          MsgType (Attribute)
        //          MsgText (Element)
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeMessage;
        LogisticsAddressCountryRegionISOCode countryRegion = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
        str value;
        int len = 210;

        // For CCR must use either trading partner id or account num.  This becomes the PIN
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NRG)        //SKS#DevOps:16335
        {
            value = this.getBankPurposeCode();
            
            if(value == '')
            
            {
                value = this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText1);
            }
        }
        else if(countryRegion != 'CA' &&
                countryRegion != 'MX' &&
                countryRegion != 'SG')
        {
            value = this.getBankPurposeCode();
    
            if(value == '')
            {
                value = this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText1);
            }
        }
    
        if(value != '')
        {
            //      Message
            nodeMessage = _nodePmtRec.appendChild(xmlDoc.createElement('Message'));
    
            //          MsgType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeMessage, 'MsgType', 'OBI');
    
            switch(countryRegion)
            {
                case 'AU':
                case 'GB':
                    len = 18;
                    break;
                case 'AT':
                case 'FR':
                case 'DE':
                    len = 160;
                    break;
                case 'IE':
                case 'NZ':
                    len = 12;
                    break;
                case 'BE':
                    len = 106;
                    break;
                case 'NL':
                    len = 128;
                    break;
                case 'ES':
                    len = 72;
                    break;
                case 'CH':
                case 'BR':      //SKS#VSTS:14434
                    len = 140;
                    break;
            }
            //          MsgText (Element)
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMessage, 'MsgText', value, len);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrgnrDepAcctID</Name>
				<Source><![CDATA[
    private void node_OrgnrDepAcctID(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  OrgnrDepAcctID
        //      DepAcctID
        //          AcctID (Attribute)
        //          AcctType (Attribute)
        //          AcctCur (Attribute)
        //      BankInfo
        //          BankIDType (Attribute)
        //          Name (Attribute)
        //          RefInfo
        //              RefType (Attribute)
        //              RefID
        //          BankID
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOrgnrDepAcctID;
        XmlElement nodeDepAcctID;
        XmlElement nodeBankInfo;
        XmlElement nodePostAddr;

       
        //  OrgnrDepAcctID
        nodeOrgnrDepAcctID = _nodePmtRec.appendChild(xmlDoc.createElement('OrgnrDepAcctID'));
    
        //      DepAcctID
        nodeDepAcctID = nodeOrgnrDepAcctID.appendChild(xmlDoc.createElement('DepAcctID'));
    
        //          AcctID (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctID', mSKS_EFT_FileDetail.BankBankAcct);
            
        //          AcctType (Attribute)
        if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::FinancialInstitutionAccount)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'G');
        }
        else if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'S');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'D');
        }
    
        //          AcctCur (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctCur', mSKS_EFT_FileDetail.CurrencyCode);
    
        //      BankInfo
        nodeBankInfo = nodeDepAcctID.appendChild(xmlDoc.createElement('BankInfo'));
    
        //          BankIDType (Attribute)
        if(mSKS_EFT_FileDetail.BankBankTransit)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'CPA');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'ABA');
        }
            
        SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', 'WELLS FARGO');
    
           
        nodePostAddr = nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));

        select firstonly msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;
                
        //      City
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.City), 25, false);
                
        //      Country
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.CharacterReplacement(this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId)), 25, false);

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', mSKS_EFT_FileDetail.BankBankTransit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrgnrParty</Name>
				<Source><![CDATA[
    private void node_OrgnrParty(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  OrgnrParty
        //      Name
        //          Name1
        //      PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOrgnrParty;
        XmlElement nodeName;
        str w01;

        w01 = SKS_EFT_Format::getCodelookupvalue('OrgPartyShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
    
        //  OrgnrParty
        nodeOrgnrParty = _nodePmtRec.appendChild(xmlDoc.createElement('OrgnrParty'));

        if(mSKS_EFT_FileDetail.FileACHCompanyName)
        {
            //      Name
            nodeName = nodeOrgnrParty.appendChild(xmlDoc.createElement('Name'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName),60);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name2', this.CharacterReplacement(w01), 15);
        }
        
        //      PostAddr
        this.node_OrgnrPartyPostAddr(nodeOrgnrParty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrgnrPartyPostAddr</Name>
				<Source><![CDATA[
    private void node_OrgnrPartyPostAddr(XmlElement _nodeOrgnrParty)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          Addr2
        //          City
        //          StateProv
        //          PostalCode
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;
    
        // Only create if address data is populated
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 ||  mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity ||
           mSKS_EFT_FileDetail_BankAccount.WOrdPartyState || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)
        {
            //  PostAddr
            nodePostAddr = _nodeOrgnrParty.appendChild(xmlDoc.createElement('PostAddr'));
    
            //          Addr1
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 55, false);
    
            //          Addr2
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 55, false);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 30, false);
    
            //          StateProv
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 3, false);
    
            //          PostalCode
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(this.validateZipCode(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)), 9, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 2, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtDetail</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    private void node_PmtDetail(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  PmtDetail
        //      InvoiceInfo
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodePmtDetail;
    
        if(mSKS_EFT_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Payment)
        {
            select invSKS_EFT_FileDetail where
                invSKS_EFT_FileDetail.VendTransRecId != 0 &&
                invSKS_EFT_FileDetail.InvoiceNumber != '' &&
                invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
        }
        else
        {
            select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail.RecId &&
                invSKS_EFT_FileDetail.InvoiceNumber != '';
        }
        // If an invoice exists add the PmtDetail and invoice detail elements
        if(invSKS_EFT_FileDetail)
        {
            //  PmtDetail
            nodePmtDetail = _nodePmtRec.appendChild(xmlDoc.createElement('PmtDetail'));
     
            while(invSKS_EFT_FileDetail)
            {
                //      InvoiceInfo
                this.node_InvoiceInfo(nodePmtDetail, invSKS_EFT_FileDetail);

                next invSKS_EFT_FileDetail;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtRec</Name>
				<Source><![CDATA[
    private void node_PmtRec()
    {
        //------------------------------------------------------------------------------------------------------
        //  PmtRec
        //      PmtCrDr (Attribute)
        //      PmtMethod (Attribute)
        //      PmtFormat (Attribute) (only DAC or IAT)
        //      TranHandlingCode (Attribute)
        //      PDPHandlingCode
        //      IDinfo
        //      Refinfo
        //      Message
        //      Check (only CHK)
        //      OrgnrParty
        //      RcvrParty
        //      OrgnrDepAcctID
        //      RcvrDepAcctID (only DAC and MTS)
        //      PmtDetail (only CHK, CTX, CCD+, PPD+, CCR, MTS, IWI)
        //      PmtID
        //      CurAmt
        //      CurCode (only CHK and MTS)
        //      ValueDate
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmtRec;
        str pdpCode;
        str beneAdvice;
        refID++;
    
        //  File
        nodePmtRec = xmlDoc.documentElement().appendChild(xmlDoc.createElement('PmtRec'));
    
        //      PmtCrDr
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtCrDr', 'D');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtCrDr', 'C');
        }
        
        //      PmtMethod
        SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtMethod', mSKS_EFT_FileFormatPaymSpec.TransactionCode);
    
        //      PmtFormat (only DAC or IAT)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            
            case #NRG:          //SKS#DevOps:16335
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormat', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PmtFormat', mSKS_EFT_FileDetail.RecId)), 0, false); //DevOps18661
                break;
        }
    
        SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormatIntl', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BusinessFuncCode', mSKS_EFT_FileDetail.RecId)), 0, false);

        beneAdvice = SKS_EFT_Format::getCodelookupvalue('TranHandlingCode', mSKS_EFT_FileDetail.RecId);

        //      TranHandlingCode
        if(beneAdvice != '')
        {
            if(strUpr(beneAdvice) == 'D')//SKS_VSTS_13306
            {
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'TranHandlingCode', 'D');
            }
            else if(strUpr(beneAdvice) == 'U')//SKS_VSTS_13306
            {
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'TranHandlingCode', 'U');
            }
        }
        //      PDPHandlingCode
        pdpCode = SKS_EFT_Format::getCodelookupvalue('PDPHandlingCode', mSKS_EFT_FileDetail.RecId);
        if(pdpCode == 'T' || pdpCode == 'P')
        {
            mPDP = true;
        }
        else
        {
            mPDP = false;
        }
    
        if(mPDP)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'PDPHandlingCode', pdpCode);
        }
    
        //      IDinfo
        this.node_IdInfo(nodePmtRec, 'BatchID', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 10));
        this.node_IdInfo(nodePmtRec, 'CustomerID', subStr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CustomerID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 1, 10));      
            
        //      Message
        this.node_Message(nodePmtRec);
    
        //      OrgnrParty
        this.node_OrgnrParty(nodePmtRec);
    
        //      RcvrParty
        this.node_RcvrParty(nodePmtRec);
    
        //      OrgnrDepAcctID
        this.node_OrgnrDepAcctID(nodePmtRec);
    
        //      RcvrDepAcctID
        this.node_RcvrDepAcctID(nodePmtRec);
    
        //      PmtDetail (only CHK, CTX, CCD+, PPD+, CCR, MTS, IWI)
        this.node_PmtDetail(nodePmtRec);
    
        //      PmtID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'PmtID', SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference,30));

        this.addFieldElement(gXmlNodeDetailFieldValues, 'PmtID', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), mSKS_EFT_FileDetail.RecId);
        //      CurAmt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'CurAmt', num2str(abs(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,0,0));
        
        //      CurCode (only CHK and MTS)
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'CurCode', mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //      ValueDate
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'ValueDate', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate,DateSeparator::Hyphen));

        //      SequenceNumber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'SequenceNumber', lSKS_EFT_FileDetail_Extra.value); //FDD-10590
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrBankInfoPostAddr</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    private void node_RcvrBankInfoPostAddr(XmlElement _nodeBankInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          City
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;
    
        // Only create if address data is populated
        if(mSKS_EFT_FileDetail_BenBank.BenBankAddr || mSKS_EFT_FileDetail_BenBank.BenBankCity || mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)
        {
            //  PostAddr
            nodePostAddr = _nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));
    
            //          Addr1
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), 55, false);
    
            //          City
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), 30, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), 2, false);
        }
        else
        {
            select msks_EFT_FileDetail_BankAddress where
                    msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                    && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::CustBankAddress;

            if(msks_EFT_FileDetail_BankAddress.Addr || msks_EFT_FileDetail_BankAddress.Addr2 || msks_EFT_FileDetail_BankAddress.City || msks_EFT_FileDetail_BankAddress.State || msks_EFT_FileDetail_BankAddress.ZipCode || msks_EFT_FileDetail_BankAddress.CountryRegionId)
            {
                //  PostAddr
                nodePostAddr = _nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));
    
                //          Addr1
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', msks_EFT_FileDetail_BankAddress.Addr, 55, false);
    
                //          Addr2
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', msks_EFT_FileDetail_BankAddress.Addr2, 55, false);
    
                //          City
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.City), 30, false);
    
                //          StateProv
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.State), 3, false);
    
                //          PostalCode
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(this.validateZipCode(msks_EFT_FileDetail_BankAddress.ZipCode)), 9, false);
    
                //          Country
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId), 2, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrDepAcctID</Name>
				<Source><![CDATA[
    private void node_RcvrDepAcctID(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  RcvrDepAcctID
        //      DepAcctID
        //          AcctID (Attribute)
        //          AcctType (Attribute)
        //      BankInfo
        //          BankIDType (Attribute)
        //          Name (Attribute)
        //          BranchID
        //          BankID
        //          PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRcvrDepAcctID;
        XmlElement nodeDepAcctID;
        XmlElement nodeBankInfo;
        LogisticsAddressCountryRegionISOCode countryRegion;
        str BankIDType, BankID, BranchId;
    
        countryRegion = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
    
        //  RcvrDepAcctID
        nodeRcvrDepAcctID = _nodePmtRec.appendChild(xmlDoc.createElement('RcvrDepAcctID'));
    
        //      DepAcctID
        nodeDepAcctID = nodeRcvrDepAcctID.appendChild(xmlDoc.createElement('DepAcctID'));
    
        //          AcctID (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctID', mSKS_EFT_FileDetail.DepBankAcct);
        //          AcctType (Attribute)
        if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'S');
        }
        else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::FinancialInstitutionAccount)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'G');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'D');
        }
    
        SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctCur', mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //      BankInfo
        nodeBankInfo = nodeDepAcctID.appendChild(xmlDoc.createElement('BankInfo'));
    
           
        BankIDType = 'CPA';
        BankID = mSKS_EFT_FileDetail.DepBankTransit;
        BranchId = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankBranch);
        //          BankIDType (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'CPA', 0, false);
    
        //          Name (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35, false);
    
        //          BranchID
        SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BranchID', BranchId, 35, false);
    
        //          BankID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', BankID, 0, false);
    
        //          PostAddr
        this.node_RcvrBankInfoPostAddr(nodeBankInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrParty</Name>
				<Source><![CDATA[
    private void node_RcvrParty(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  RcvrParty
        //      Name
        //          Name1
        //      RefInfo
        //          RefType (Attribute)
        //          RefID
        //      PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRcvrParty;
        XmlElement nodeName;
        XmlElement nodeRefInfo;
        str value;
        str be01value;
    
        //  RcvrParty
        nodeRcvrParty = _nodePmtRec.appendChild(xmlDoc.createElement('RcvrParty'));
    
        //      Name
        if(mRemittanceName || mSKS_EFT_FileDetail.AccountName) // Not always required. Not mandatory for PDP
        {
            nodeName = nodeRcvrParty.appendChild(xmlDoc.createElement('Name'));
    
            //          Name1
            if(mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', mRemittanceName, 60);
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), 60);
            }
        }
        
        //      RefInfo
        nodeRefInfo = nodeRcvrParty.appendChild(xmlDoc.createElement('RefInfo'));
    
        //          RefType (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', 'VN');
    
        be01value = SKS_EFT_Format::getCodelookupvalue('TradingPartnerId', mSKS_EFT_FileDetail.RecId);

        if(be01value != '')
        {
            value = this.CharacterReplacement(be01value);
        }
        else
        {
            value = mSKS_EFT_FileDetail.AccountNum;
        }
    
        //          RefID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', value,30);

        //      PostAddr
        this.node_RcvrPartyPostAddr(nodeRcvrParty);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrPartyPostAddr</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    private void node_RcvrPartyPostAddr(XmlElement _nodeRcvrParty)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          Addr2
        //          City
        //          StateProv
        //          PostalCode
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;
        str AddrLine1;
        Array                   vendAddrArray = new Array(Types::String);
        
        // Only create if address data is populated
        if(mRemittanceAdrLine1 || mRemittanceAdrLine2 || mRemittanceCity ||
            mRemittanceState || mRemittanceZipCode || mRemittanceCountryRegionId || mRemittanceAdrLine3)
        {
            //  PostAddr
            nodePostAddr = _nodeRcvrParty.appendChild(xmlDoc.createElement('PostAddr'));
    
            //          Addr1
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(mRemittanceStreet,3);

            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
            }
            AddrLine1 = strLRTrim(mRemittancePostBox + ' ' + mRemittanceBuildingComplement + ' ' + mRemittanceStreetNum + ' ' + mRemittanceStreet);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', mRemittanceAdrLine1, 55, false);
                
            //          Addr2
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', mRemittanceAdrLine2, 55, false);

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', mRemittanceCity, 30, false);
    
            //          StateProv
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', mRemittanceState, 3, false);
    
            //          PostalCode
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.validateZipCode(mRemittanceZipCode), 9, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', mRemittanceCountryRegionId, 2, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = str2Int(mSKS_EFT_FileDetail_Extra.Value); //FDD-10590
            //sks_eft_fileformat.update(); //FDD-10590
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateZipCode</Name>
				<Source><![CDATA[
    private AddressZipCodeId validateZipCode(AddressZipCodeId _zipcode)
    {
        AddressZipCodeId zipcode;

        zipcode = strKeep(_zipcode, '0123456789abcdefghijklmnopqrstuvwxyz');
    
        return zipcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
        
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
                order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                    mSKS_EFT_FileDetail.BankAccountId,
                    mSKS_EFT_FileDetail.PaymentCurrencyCode,
                    mSKS_EFT_FileDetail.PaymSpec,
                    mSKS_EFT_FileDetail.EffectiveDate,
                    mSKS_EFT_FileDetail.DepCountryRegionId,
                    mSKS_EFT_FileDetail.RecordType,
                    mSKS_EFT_FileDetail.AccountNum,
                    mSKS_EFT_FileDetail.PaymentReference,
                    mSKS_EFT_FileDetail.RecId
            where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        //Populate Remittance Information from Vendor eBanking details
        mRemittanceName = mSKS_EFT_FileDetail_VendAddress.BeneName;
        mRemittanceAdrLine1 = mSKS_EFT_FileDetail_VendAddress.BeneAddr;
        mRemittanceAdrLine2 = mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
        mRemittanceAdrLine3 = mSKS_EFT_FileDetail_VendAddress.BeneAddr3;//SKS_VSTS_14288
        mRemittanceCity = mSKS_EFT_FileDetail_VendAddress.BeneCity;
        mRemittanceState = mSKS_EFT_FileDetail_VendAddress.BeneState;
        mRemittanceZipCode = mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>