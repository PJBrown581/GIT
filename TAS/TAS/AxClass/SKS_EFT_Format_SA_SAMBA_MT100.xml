<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_SA_SAMBA_MT100</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_SA_SAMBA_MT100 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_SA_SAMBA_MT100 extends SKS_EFT_Format
{
    #define.FormatVersion('20220530')
    #define.ACT2ACT('ACT2ACT')
    #define.SARIE('SARIE')
    #define.SWIFT('SWIFT')
    #define.DRAFT('DRAFT')
    #define.SADAD('SADAD')   

    XmlDocument xmlDoc;
    XmlElement  nodeRoot;
    XmlElement  nodePaymentMessage;
    XmlElement  nodePaymentTransaction;
    str         transactionDetails;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        xmlDoc = XmlDocument::newBlank();

        this.rec_PaymentMessage();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();            
            
            // Get Bank account
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            this.rec_TransactionData();
    
            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentMessage</Name>
				<Source><![CDATA[
    private void rec_PaymentMessage()
    {
        //  PaymentMessage
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('PaymentMessage'));        

        //      PaymentTransaction
        nodePaymentTransaction = nodeRoot.appendChild(xmlDoc.createElement('PaymentTransaction'));
    
        //          CompanyCode        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymentTransaction, 'CompanyCode', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyId));
    
        //              SequenceNum        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymentTransaction, 'SequenceNum', SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TransactionData</Name>
				<Source><![CDATA[
    private void rec_TransactionData()
    {
        //          TransactionData
        transactionDetails = this.rec_TransactionDetails();
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymentTransaction, 'TransactionData', transactionDetails);

        //          TransactionComment
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaymentTransaction, 'TransactionComment', this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.TransactionTxt), 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TransactionDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    private str rec_TransactionDetails()
    {
        str amount, value, invNum, transactionInfo;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //20	Transaction Reference
        sb.Append(':20:' + mSKS_EFT_FileDetail.PaymentReference);
        sb.AppendLine();

        //32A	Value Date CURRENCY Amount
        amount = num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 2, 0);
    
        sb.Append(':32A:' + SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)
                               + mSKS_EFT_FileDetail.PaymentCurrencyCode
                               + amount);
        sb.AppendLine();

        //50	Intername & Inter Address1
        sb.Append(':50:');

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, 1, 35)));
            sb.AppendLine();
        }        
        
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
        {
            sb.Append(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 1, 35)));
            sb.AppendLine();
        }
        

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '')
        {
            sb.Append(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode), 1, 35)));
            sb.AppendLine();
        }        

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != '')
        {
            sb.Append(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)), 1, 35)));
            sb.AppendLine();
        }        

        //52A	Customer BIC
        sb.Append(':52A:' + mSKS_EFT_FileDetail.BankBankSwiftNo);
        sb.AppendLine();

        //53B	Customer Account
        sb.Append(':53B:' + mSKS_EFT_FileDetail.BankBankAcct);
        sb.AppendLine();

        //57A	Beneficiary Bank BIC
        sb.Append(':57A:' + mSKS_EFT_FileDetail.DepSwiftNo);
        sb.AppendLine();

        //59
        sb.Append(':59:' + mSKS_EFT_FileDetail.DepBankAcct);
        sb.AppendLine();

        if(mSKS_EFT_FileDetail_VendAddress.BeneName)
        {
            sb.Append(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 1, 35)));
            sb.AppendLine();
        }
        
        if(mSKS_EFT_FileDetail_VendAddress.BeneAddr || mSKS_EFT_FileDetail_VendAddress.BeneAddr2 )
        {
            sb.Append(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_VendAddress.BeneAddr + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 1, 35)));
            sb.AppendLine();
        }

        if(mSKS_EFT_FileDetail_VendAddress.BeneCity  || mSKS_EFT_FileDetail_VendAddress.BeneZipPostal)
        {
            sb.Append(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_VendAddress.BeneCity + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneZipPostal), 1, 35)));
            sb.AppendLine();
        }

        if(mSKS_EFT_FileDetail_VendAddress.BeneState || mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)
        {
            sb.Append(this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_VendAddress.BeneState + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)), 1, 35)));
            sb.AppendLine();
        }

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SADAD:
                // SADAD Biller Id and Bill Number
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BillerIdBillNo', mSKS_EFT_FileDetail.RecId));
                if(value)
                {
                    sb.Append(':70:' + value);
                    sb.AppendLine();
                }
                break;
            case #SWIFT:
                // Special POR Codes
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SpecialPORCodes', mSKS_EFT_FileDetail.RecId));
                if(value)
                {
                    sb.Append(':70:' + value);
                    sb.AppendLine();
                }
                break;
            default:
                invNum = this.getInvoiceDetails();

                if(invNum)
                {
                    //Invoice numbers
                    if(subStr(invNum, 1, 35))
                    {
                        sb.Append(':70:' + subStr(invNum, 1, 35));
                    }
                    if(subStr(invNum, 36, 35))
                    {
                        sb.AppendLine();
                        sb.Append(subStr(invNum, 36, 35));
                    }
                    if(subStr(invNum, 71, 35) != '')
                    {
                        sb.AppendLine();
                        sb.Append(subStr(invNum, 71, 35));
                    }
                    if(subStr(invNum, 106, 35) != '')
                    {
                        sb.AppendLine();
                        sb.Append(subStr(invNum, 106, 35));
                    }
                    sb.AppendLine();
                }
                break;
        }

        //77B
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SADAD)
        {
            value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PORCode', mSKS_EFT_FileDetail.RecId));
            if(value)
            {
                sb.Append(':77B:/' +  value + '/SA');
                sb.AppendLine();
            }
        }

        transactionInfo = this.CharacterReplacement(sb.ToString());

        return transactionInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    private str getInvoiceDetails()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder msb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            msb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                msb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(msb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>