<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITIBANAMEX_400_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITIBANAMEX_400_AR extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CITIBANAMEX_400_AR extends SKS_EFT_Format
{
    #define.FormatVersion('20220926')
    int         mPaymentCount, recCount, blockCount;
    str         seqNumber, blockNums;
    Amount      mPaymentAmount;
    boolean     firstRec = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            if(firstRec)
            {
                //  Control record
                this.rec_Header();
                firstRec = false;
            }            

            //Detail Record
            this.rec_Detail();
    
            next mSKS_EFT_FileDetail;
        }    
        //  Control record
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    //Number    Description                                 Field length        Position
    //---------------------------------------------------------------------------------------
    // 1        Record type                                 01 	                01 - 02 
    // 2        Sequence numbers                            07                  03 - 09
    // 3        Operation code                              02                  10 - 11
    // 4        Participating bank                          03                  12 - 14
    // 5        Direction                                   01                  15 - 15
    // 6        Service                                     01                  16 - 16
    // 7        Block numbers                               07                  17 - 23
    // 8        Submittal date                              08                  24 - 31
    // 9        Currency code                               02                  32 - 33
    // 10       Cause of file rejection                     02                  34 - 35
    // 11       Future use                                  25                  36 - 60
    // 12       Corporate name of the Issuer                40                  61 - 100
    // 13       RFC of the Issuer                           18                  101 -118
    // 14       Future use Bank                             182                 119 -300
    // 43       Customer number                             12                  301 -312
    // 44       File sequential number                      02                  313 -314
    // 45       Future use                                  86                  315 -400
    //----------------------------------------------------------------------------------------
    public boolean rec_Header()
    {
        str value1, value2, value3;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;
        blockCount++;
        seqNumber = SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId);

        // 1        Record type                                 01 	                01 - 02
        sb.Append('01');

        // 2        Sequence numbers                            07                  03 - 09
        sb.Append(SKS_PP_StringFormats::strFill(7, int2Str(recCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3        Operation code                              02                  10 - 11
        sb.Append('30');

        // 4        Participating bank                          03                  12 - 14
        value1 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ParticipatingBank', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(3, value1, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5        Direction                                   01                  15 - 15
        sb.Append('E');

        // 6        Service                                     01                  16 - 16
        sb.Append('1');

        // 7        Block numbers                               07                  17 - 23
        blockNums = subStr(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None), 5, 2) + SKS_PP_StringFormats::strFill(5, seqNumber, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        sb.Append(SKS_PP_StringFormats::strFill(7, blockNums, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8        Submittal date                              08                  24 - 31
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        // 9        Currency code                               02                  32 - 33
        sb.Append('01');

        // 10       Cause of file rejection                     02                  34 - 35
        sb.Append('00');

        // 11       Future use                                  25                  36 - 60
        sb.Append(SKS_PP_StringFormats::strFill(25, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 12       Corporate name of the Issuer                40                  61 - 100
        sb.Append(SKS_PP_StringFormats::strFill(40, this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 13       RFC of the Issuer                           18                  101 -118
        value2 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RFCIssuer', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(18, value2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 14       Future use Bank                             182                 119 -300
        sb.Append(SKS_PP_StringFormats::strFill(182, value1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 43       Customer number                             12                  301 -312
        value3 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CustomerNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(12, value3, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 44       File sequential number                      02                  313 -314
        sb.Append(SKS_PP_StringFormats::strFill(2, seqNumber, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        // 45       Future use                                  86                  315 -400
        sb.Append(SKS_PP_StringFormats::strFill(86, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    //Number    Description                                 Field length        Position
    //---------------------------------------------------------------------------------------
    // 15        Record type                                 01 	                01 - 02
    // 16        Sequence numbers                            07                     03 - 09
    // 17        Operation code                              02                     10 - 11
    // 18        Currency code                               03                     12 - 13
    // 19        Amount of the operation                     15                     14 - 28
    // 20        Settlement date                             08                     29 - 36
    // 21        Re-attempt meter                            06                     37 - 42
    // 57	     Future use                                  18                     43 - 60
    // 22	     Operation type                              02                     61 - 62
    // 23	     Maturity date                               08                     63 - 70
    // 24	     Receiving bank of the customer user         03                     71 - 73
    // 25	     Account type of the customer user           02                     74 - 75
    // 26	     Account number of the customer user         20                     76 - 95
    // 27        Name of the Customer User                   40                     96 - 135
    // 28	     Reference of the service with the Issuer    40                     136- 175
    // 29	     Name of the service holder                  40                     176- 215
    // 30	     VAT amount of the operation                 15                     216- 230
    // 31	     Numeric reference of the Issuer             07                     231- 237
    // 32	     Reference legend of the Issuer              40                     238- 277
    // 33        Reason of return                            02                     278- 279
    // 34        Future use	                                 21	                    280- 300
    // 46	     Verifying digit	                         02	                    301- 302
    // 47	     Cut-off number	                             02	                    303- 304
    // 48	     Payment indicator	                         01	                    305- 305
    // 49	     Bank authorization	                         06	                    306- 311
    // 50	     Application date	                         08	                    312- 319
    // 51	     Sequential number of the original file	     02	                    320- 321
    // 53	     Reference 1	                             20	                    322- 341
    // 54	     Reference 2	                             20	                    342- 361
    // 55	     Reference 3	                             20	                    362- 381
    // 56	     Future use	                                 19	                    382- 400
    //----------------------------------------------------------------------------------------
    public boolean rec_Detail()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value, value1;
        recCount++;
        mPaymentCount++;

        // 15        Record type                                 02 	                01 - 02
        sb.Append('02');

        // 16        Sequence numbers                            07                     03 - 09
        sb.Append(SKS_PP_StringFormats::strFill(7, int2Str(recCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 17        Operation code                              02                     10 - 11
        sb.Append('30');

        // 18        Currency code                               03                     12 - 13
        sb.Append('01');
        
        // 19        Amount of the operation                     15                     14 - 28
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 15));
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        // 20        Settlement date                             08                     29 - 36
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        // 21        Re-attempt meter                            06                     37 - 42
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 57	     Future use                                  18                     43 - 60
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 22	     Operation type                              02                     61 - 62
        sb.Append('51');

        // 23	     Maturity date                               08                     63 - 70
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate + 5, DateSeparator::None));

        // 24	     Receiving bank of the customer user         03                     71 - 73
        sb.Append('002');

        // 25	     Account type of the customer user           02                     74 - 75
        if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::CheckingAccount)
        {
            value = '01';
        }
        else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
        {
            value = '03';
        }
        else
        {
            value = '40';
        }
        sb.Append(SKS_PP_StringFormats::strFill(2, value, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 26	     Account number of the customer user         20                     76 - 95
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 27        Name of the Customer User                   40                     96 - 135
        select msks_EFT_FileDetail_BankAddress where
                    msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                    && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::CustBankAddress;
        sb.Append(SKS_PP_StringFormats::strFill(40, this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.Name), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 28	     Reference of the service with the Issuer    40                     136- 175
        sb.Append(SKS_PP_StringFormats::strFill(40, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 29	     Name of the service holder                  40                     176- 215
        sb.Append(SKS_PP_StringFormats::strFill(40, this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.Name), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 30	     VAT amount of the operation                 15                     216- 230
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 31	     Numeric reference of the Issuer             07                     231- 237
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 32	     Reference legend of the Issuer              40                     238- 277
        value1 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RefLegendIssuer', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(40, value1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 33        Reason of return                            02                     278- 279
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 34        Future use	                                 21	                    280- 300
        sb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 46	     Verifying digit	                         02	                    301- 302
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 47	     Cut-off number	                             02	                    303- 304
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 48	     Payment indicator	                         01	                    305- 305
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 49	     Bank authorization	                         06	                    306- 311
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 50	     Application date	                         08	                    312- 319
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 51	     Sequential number of the original file	     02	                    320- 321
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 53	     Reference 1	                             20	                    322- 341
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 54	     Reference 2	                             20	                    342- 361
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 55	     Reference 3	                             20	                    362- 381
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 56	     Future use	                                 19	                    382- 400
        sb.Append(SKS_PP_StringFormats::strFill(19, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));       
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    //Number    Description                                 Field length        Position
    //---------------------------------------------------------------------------------------
    // 35        Record type                                 01 	            01 - 02
    // 36        Sequence numbers                            07                 03 - 09
    // 37        Operation code                              02                 10 - 11
    // 38	     Block number	                             07	                12 - 18
    // 39	     Number of operations 	                     07	                19 - 25
    // 40	     Total amount of operations	                 18	                26 - 43
    // 41	     Future use	                                 17	                44 - 60
    // 42	     Future use	                                 240	            61 - 300
    // 52	     Future use	                                 100	            301- 400
    //----------------------------------------------------------------------------------------
    public boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        recCount++;        

        // 35        Record type                                 01 	            01 - 02
        sb.Append('09');

        // 36        Sequence numbers                            07                 03 - 09
        sb.Append(SKS_PP_StringFormats::strFill(7, int2Str(recCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 37        Operation code                              02                 10 - 11
        sb.Append('30');

        // 38	     Block number	                             07	                12 - 18
        sb.Append(SKS_PP_StringFormats::strFill(7, blockNums, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 39	     Number of operations 	                     07	                19 - 25
        sb.Append(SKS_PP_StringFormats::strFill(7, int2Str(mPaymentCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 40	     Total amount of operations	                 18	                26 - 43
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mPaymentAmount), 18));

        // 41	     Future use	                                 17	                44 - 60
        sb.Append(SKS_PP_StringFormats::strFill(17, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 42	     Future use	                                 240	            61 - 300
        sb.Append(SKS_PP_StringFormats::strFill(240, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 52	     Future use	                                 100	            301- 400
        sb.Append(SKS_PP_StringFormats::strFill(100, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>