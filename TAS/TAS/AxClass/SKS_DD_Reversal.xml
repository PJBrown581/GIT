<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_Reversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_Reversal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerTrans</Name>
				<Source><![CDATA[
    private static void createLedgerTrans(CustTrans Custtrans, LedgerJournalTable header, LedgerJournalTrans lLedgerJournalTrans, SKS_EFT_Bank sks_eft_bank)
    {
        AmountCur                       revAmt;
        LedgerJournalTrans              trans;

        trans.clear();
        trans.initValue();
        trans.JournalNum = header.JournalNum;
        Trans.TransDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        trans.AccountType = LedgerJournalACType::Cust;
        trans.LedgerDimension = lLedgerJournalTrans.LedgerDimension;

        LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(LedgerJournalType::Payment);
        if(ledgerJournalEngine.takeNewVoucher())
            trans.Voucher = new JournalVoucherNum(JournalTableData::newTable(header)).getNew(false);

        ledgerJournalEngine.accountModified(trans);
        ledgerJournalEngine.initTaxItemGroup(trans);

        Trans.PaymentStatus = CustVendPaymStatus::None;
        Trans.PaymSpec = '';
        Trans.PaymReference = '';
        if(lLedgerJournalTrans.AmountCurCredit != 0)
        {
            revamt = lLedgerJournalTrans.AmountCurCredit;
            Trans.AmountCurDebit = revamt;
            Trans.AmountCurCredit = 0;
        }
        else
        {
            revamt = lLedgerJournalTrans.AmountCurDebit;
            Trans.AmountCurDebit = 0;
            Trans.AmountCurCredit = revamt;
        }
        trans.PaymMode = sks_eft_bank.RevPaymMode;
        Trans.CashDiscAmount = 0;
        trans.CashDiscCode = '';
        trans.SettleVoucher = SettlementType::SelectedTransact;
        trans.PostingProfile = lLedgerJournalTrans.PostingProfile;
        trans.BankTransType = lLedgerJournalTrans.BankTransType;
        trans.PaymentNotes = lLedgerJournalTrans.PaymentNotes;
        trans.TransactionType = lLedgerJournalTrans.TransactionType;
        trans.Approved = lLedgerJournalTrans.Approved;
        trans.Approver = lLedgerJournalTrans.Approver; //Make the currentuser? (curuserid())
        trans.Payment = lLedgerJournalTrans.Payment;
        trans.CustVendBankAccountId = lLedgerJournalTrans.CustVendBankAccountId;
        trans.OffsetDefaultDimension = lLedgerJournalTrans.OffsetDefaultDimension;
        trans.OffsetLedgerDimension = lLedgerJournalTrans.OffsetLedgerDimension;
        trans.RemittanceLocation = lLedgerJournalTrans.RemittanceLocation;
        trans.RemittanceAddress = lLedgerJournalTrans.RemittanceAddress;
        trans.Tax1099Fields = lLedgerJournalTrans.Tax1099Fields;
        trans.OffsetAccountType = lLedgerJournalTrans.OffsetAccountType;
        trans.OffsetCompany = lLedgerJournalTrans.OffsetCompany;
        trans.Txt  ="@SYS22512";
        trans.insert();
        
        SKS_DD_Reversal::createSpecTrans(Custtrans, trans);

        /*
        AxLedgerJournalTrans            trans  = AxLedgerJournalTrans::construct();
    
        trans.parmAccountType(LedgerJournalACType::Vend);
        trans.parmJournalNum(header.ledgerJournalTable().JournalNum);
        Trans.parmPaymentStatus(CustVendPaymStatus::None);
        Trans.parmTransDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        Trans.parmPaymSpec('');
        Trans.parmPaymReference('');
        if(lLedgerJournalTrans.AmountCurCredit != 0)
        {
        revamt = lLedgerJournalTrans.AmountCurCredit;
        Trans.parmAmountCurDebit(revamt);
        Trans.parmAmountCurCredit(0);
        }
        else
        {
        revamt = lLedgerJournalTrans.AmountCurDebit;
        Trans.parmAmountCurDebit(0);
        Trans.parmAmountCurCredit(revamt);
        }
        trans.parmpaymmode(sks_eft_bank.RevPaymMode);
        trans.parmLedgerDimension(lLedgerJournalTrans.LedgerDimension);
        Trans.parmCashDiscAmount(0);
        trans.parmCashDiscCode('');
        trans.parmSettleVoucher(SettlementType::SelectedTransact);
        trans.parmPostingProfile(lLedgerJournalTrans.PostingProfile);
        trans.parmBankTransType(lLedgerJournalTrans.BankTransType);
        trans.parmPaymentNotes(lLedgerJournalTrans.PaymentNotes);
        trans.parmTransactionType(lLedgerJournalTrans.TransactionType);
        trans.parmApproved(lLedgerJournalTrans.Approved);
        trans.parmApprover(lLedgerJournalTrans.Approver);//Make the currentuser? (curuserid())
        trans.parmPayment(lLedgerJournalTrans.Payment);
        trans.parmCustVendBankAccountId(lLedgerJournalTrans.CustVendBankAccountId);
        trans.parmOffsetDefaultDimension(lLedgerJournalTrans.OffsetDefaultDimension);
        trans.parmOffsetLedgerDimension(lLedgerJournalTrans.OffsetLedgerDimension);
        trans.parmRemittanceLocation(lLedgerJournalTrans.RemittanceLocation);
        trans.parmRemittanceAddress(lLedgerJournalTrans.RemittanceAddress);
        trans.parmTax1099Fields(lLedgerJournalTrans.Tax1099Fields);
        trans.parmOffsetAccountType(lLedgerJournalTrans.OffsetAccountType);
        trans.parmOffsetCompany(lLedgerJournalTrans.OffsetCompany);
        trans.parmTxt("@SYS22512");
    
        trans.save();
    
        SKS_EFT_Reversal::createSpecTrans(vendtrans, trans);
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePaymJournal</Name>
				<Source><![CDATA[
    static LedgerJournalTable CreatePaymJournal(CustTrans    Custtrans, ledgerJournalTrans   lLedgerJournalTrans, SKS_EFT_Bank  sks_eft_bank)
        {
            LedgerJournalTable  header;
    
            header.clear();
            header.JournalName = sks_eft_bank.RevJournalName;
            header.initFromLedgerJournalName(header.JournalName);
            header.insert();
    
            SKS_DD_Reversal::createledgerTrans(Custtrans, header, lLedgerJournalTrans, sks_eft_bank);
    
            return header;
        }

]]></Source>
			</Method>
			<Method>
				<Name>createSpecTrans</Name>
				<Source><![CDATA[
        private static void createSpecTrans(CustTrans Custtrans, LedgerJournalTrans  trans)
        {
            SpecTransManager        spectransmanager;
            CustTransOpen           CustTransOpen;
    
            spectransmanager = SpecTransManager::newFromSpec(trans);
    
            select * from Custtransopen where Custtransopen.AccountNum == CustTrans.AccountNum && CustTransOpen.RefRecId == CustTrans.RecId;
    
            if(CustTransOpen)
            {
                spectransmanager.insert(CustTransOpen.dataareaid, CustTransOpen.tableid, CustTransOpen.recid, CustTransOpen.AmountCur, CustTrans.CurrencyCode);
            }
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>