<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadParseMT940</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BR_ReadParseMT940 extends SKS_BR_ReadParse
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankRecordToList</Name>
				<Source><![CDATA[
    protected List bankRecordToList()
    {
        List returnValue;
        str strRecordType;
        ;
    
        strRecordType = this.getTag();
    
            switch(strRecordType)
            {
                case '20':
                    returnValue = this.listConvertRecordType20();
                    break;
                case '21':
                    returnValue = this.listConvertRecordType21();
                    break;
                case '25':
                    returnValue = this.listConvertRecordType25();
                    break;
                case '28':
                    returnValue = this.listConvertRecordType28();
                    break;
                case '28C':
                    returnValue = this.listConvertRecordType28c();
                    break;
                case '60M':
                case '60F':
                    returnValue = this.listConvertRecordType60();
                    break;
                case '61':
                    returnValue = this.listConvertRecordType61();
                    break;
                case '62M':
                case '62F':
                    returnValue = this.listConvertRecordType62();
                    break;
                case '64':
                    returnValue = this.listConvertRecordType64();
                    break;
                case '65':
                    returnValue = this.listConvertRecordType65();
                    break;
                case '86':
                    returnValue = this.listConvertRecordType86();
                    break;
                default:
                    break;
            }
    
        return returnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>boolNextRecordIsContinuation</Name>
				<Source><![CDATA[
    protected boolean boolNextRecordIsContinuation()
    {
        boolean returnValue = false;
        str nextLine;
        ;
    
        //DROP BLANK LINES UNTIL A NON-BLANK LINE IS FOUND
        while ((conLen(contFile) > 0) && (this.boolStringIsEmpty(conPeek(contFile, 1))))
        {
           conDel(contFile, 1,1);
        }
    
        if(conLen(contFile) > 0)
        {
            nextLine = strLRTrim(conPeek(contFile, 1));
            if(strStartsWith(nextLine, ':')
                && SKS_PP_StringFormats::strIndexOf(nextLine, ':', 4, 2) > 0
                && SKS_PP_StringFormats::isNumeric(SKS_PP_StringFormats::strSub(nextLine, 2, 2)))
            {
                if(SKS_PP_StringFormats::strIndexOf(nextLine, ':', 4, 2) == 4)
                    returnValue =  false;
                else if(SKS_PP_StringFormats::strIndexOf(nextLine, ':', 4, 2) == 5)
                {
                    if(SKS_PP_StringFormats::isNumeric(SKS_PP_StringFormats::strSub(nextLine, 4, 1)))
                        returnValue = true;
                    else
                        returnValue = false;
                }
                else
                    returnValue = true;
            }
            else
                returnValue = true;
        }
    
        return returnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAndRemoveBankReference</Name>
				<Source><![CDATA[
    protected str getAndRemoveBankReference()
    {
        str locReturnValue = '';
        int locCarriageReturnIndex = 0;
    
        if(strLen(currentRecord) > 0 && strStartsWith(currentRecord, @'//'))
        {
            currentRecord = SKS_PP_StringFormats::strSub(currentRecord, 3);
            locCarriageReturnIndex = SKS_PP_StringFormats::strIndexOf(currentRecord, '\n');
            //if there is a carraige return, there is Supplimental Details, so seperate out the Bank Reference and leave the Supplimental Details.
            if(locCarriageReturnIndex > 0)
                locReturnValue = this.getAndRemoveField(locCarriageReturnIndex);
            //if there was no carriage return, everything remaining is the Bank reference
            else
            {
                locReturnValue = currentRecord;
                currentRecord = '';
            }
        }
        else
        {
            locReturnValue = currentRecord;
            currentRecord = '';
        }
    
        return locReturnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAndRemoveCTCTransCode</Name>
				<Source><![CDATA[
    protected str getAndRemoveCTCTransCode()
    {
        //THIS METHOD DEALS WITH NON-COMPLIANT CTC trans codes.
        //Citi's spec for 61 w/ supplimental ctc trans code.
        //Fields:
        //Tag, Transaction Reference Number (16x)
        //SAMPLE:
        //  :61:0405230528DK418,86NTRFNONREF//10002
        //  /CTC/195/TRANSFER RECEIVED
        str locReturnValue = '';
        int locCarriageReturnIndex = 0;
        int locNextSlash = 0;
        int locTranCodeTerminator = 0;
    
        if(strLen(currentRecord) > 0 && strStartsWith(currentRecord, @'/CTC/'))
        {
            currentRecord = strReplace(currentRecord, @'/CTC/', '');
            locNextSlash = SKS_PP_StringFormats::strIndexOf(currentRecord, '/');
            locCarriageReturnIndex = SKS_PP_StringFormats::strIndexOf(currentRecord, '\n');
            if (locNextSlash > 0)
                locTranCodeTerminator = locNextSlash;
            else if (locCarriageReturnIndex > 0)
                locTranCodeTerminator = locCarriageReturnIndex;
            if(locTranCodeTerminator > 0)
            {
                locReturnValue = this.getAndRemoveField(locTranCodeTerminator);
            }
            else //discard the rest of this line.
            {
                locReturnValue = currentRecord;
                currentRecord = '';//NOTE: Returned value from this method is discarded
            }
            //get the location of the carriage return, if present. Discard the rest of the current line.
            //the carriage return index will have changed when the CTC tran code was popped of the front of the line.
            locCarriageReturnIndex = 0;
            locCarriageReturnIndex = SKS_PP_StringFormats::strIndexOf(currentRecord, '\n');
            if(locCarriageReturnIndex > 0)
            {
                this.getAndRemoveField(locTranCodeTerminator);
            }
        }
        else
        {
            locReturnValue = currentRecord;
            currentRecord = '';
        }
    
        return SKS_PP_StringFormats::strSub(locReturnValue, 1, strLen(locReturnValue) - 1);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAndRemoveCustomerReference</Name>
				<Source><![CDATA[
    protected str getAndRemoveCustomerReference()
    {
        str locReturnValue = '';
        int locDoubleSlashIndex = 0;
        int locCarriageReturnIndex = 0;
    
        if(strLen(currentRecord) > 0)
        {
    
            locDoubleSlashIndex = SKS_PP_StringFormats::strIndexOf(currentRecord, @'//');
            locCarriageReturnIndex = SKS_PP_StringFormats::strIndexOf(currentRecord, '\n');
            //if the record contains a BankReference(servicing institution)
            if(locDoubleSlashIndex > 0)
                locReturnValue = this.getAndRemoveField(locDoubleSlashIndex - 1);
            //if it doesnt' contain a bank Reference, does it contain a Supplimental Details line?
            else if(locCarriageReturnIndex > 0)
                locReturnValue = this.getAndRemoveField(locCarriageReturnIndex);
            //else everything remaining is the Customer Reference
            else
            {
                locReturnValue = currentRecord;
                currentRecord = '';
            }
        }
        else
        {
            locReturnValue = currentRecord;
            currentRecord = '';
        }
    
        return locReturnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAndRemoveField</Name>
				<Source><![CDATA[
    protected str getAndRemoveField(int _endingIndex)
    {
        str locRtnval = '';
        //Get the credit/debit flag
    
        if(strLen(currentRecord) >= _endingIndex)
        {
            locRtnval = SKS_PP_StringFormats::strSub(currentRecord, 1, _endingIndex);
            //Remove the Credit/Debit flag
            if(strlen(currentRecord) > _endingIndex)
                CurrentRecord = SKS_PP_StringFormats::strSub(currentRecord, _endingIndex + 1);
            else
                CurrentRecord = '';
        }
        else
        {
            locRtnval = currentRecord;
            currentRecord = '';
        }
        return locRtnval;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAndRemoveStatementNumber</Name>
				<Source><![CDATA[
    protected str getAndRemoveStatementNumber()
    {
        str locReturnValue = '';
        int locSlashIndex = 0;
    
        locSlashIndex = SKS_PP_StringFormats::strIndexOf(currentRecord, @'/');
        //if there is a carraige return, there is Supplimental Details, so seperate out the Bank Reference and leave the Supplimental Details.
        if(locSlashIndex > 0)
            locReturnValue = this.getAndRemoveField(locSlashIndex);
            //if there was no slash, everything remaining is the Bank reference
        else
        {
            locReturnValue = currentRecord;
            currentRecord = '';
        }
    
        return locReturnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAndRemoveTag</Name>
				<Source><![CDATA[
    protected str getAndRemoveTag()
    {
        str locReturnValue = '';
    
        locReturnValue = this.getTag();
        this.removeTag();
        return locReturnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTag</Name>
				<Source><![CDATA[
    protected str getTag(str _currentLine = '')
    {
        str locRtnval = '';
        int locIndexofEndColon;
        str currentLine;

        currentLine = _currentLine;
    
        if (this.boolStringIsEmpty(currentLine))
        {
            currentLine = currentRecord;
        }
        //_currentLine
        locIndexofEndColon = SKS_PP_StringFormats::strIndexOf(currentLine, ':', 2);
        locRtnval = str2Capital(SKS_PP_StringFormats::strSub(currentLine, 2, locIndexofEndColon - 2));
    
    
        return locRtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType20</Name>
				<Source><![CDATA[
    protected List listConvertRecordType20()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        // ---MANDITORY---
        //Fields:
        //Tag, Transaction Reference Number (16x)
        //SAMPLE:
        //:20:s000000000587017
        // OR
        //:20:999/CASH ACCOUNT
        List locListReturnValue = new List(Types::Class);
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::TransactionReferenceNumber, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType21</Name>
				<Source><![CDATA[
    protected List listConvertRecordType21()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        //Optional
        //Fields:
        //Tag, Releate Reference (16x)
        //SAMPLE:
        //:21:AccountOwnerName
    
        List locListReturnValue = new List(Types::Class);
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::RelatedReference, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType25</Name>
				<Source><![CDATA[
    protected List listConvertRecordType25()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        // ---MANDITORY---
        //Fields:
        //Tag, Account Identification (35x)
        //Format:  16!x3!a  (16x account, and 3 ISO currency code)
        //SAMPLE:
        //:25:/234567891234567ARS
        // or
        //:25:1234567890123456USD
        List locListReturnValue = new List(Types::Class);
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
        //remove superfluous slashs
        while(strStartsWith(currentRecord, '/'))
            currentrecord = SKS_PP_StringFormats::strSub(currentRecord, 2);
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::AccountIdentification, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType28</Name>
				<Source><![CDATA[
    protected List listConvertRecordType28()
    {
        //THIS READ IS A DEVIATION FROM THE:
        //MT940 format specifications
        // ---CUSTOM FIELD FOR Citibank in Czechoslovakia---
        //Fields:
        //Tag, Account Statement Date(YMMDD)5n, (optional)Sequence Number/5n
        //SAMPLE:
        //:28:60530
        // OR
        //:28:60530/123
        List locListReturnValue = new List(Types::Class);
        int locIndexOfSlash;
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
        if(strContains(currentRecord, @'/'))//if it contains a slash, the look for sequence numbers too.
        {
            locIndexOfSlash = SKS_PP_StringFormats::strIndexOf(currentRecord, @'/');
            //get the Statement Number; it will be everything before the slash
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::StatementNumber,
                                SKS_PP_StringFormats::strSub(currentRecord, 1, locIndexOfSlash - 1)));
            //get the sequence number; it will be everything folling the slash
            if(strLen(currentRecord) > locIndexOfSlash)
                 locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::SequenceNumber,
                 SKS_PP_StringFormats::strSub(currentRecord, locIndexOfSlash + 1)));
        }
        else
        {
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::StatementNumber,
                                currentRecord));
        }
    
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType28c</Name>
				<Source><![CDATA[
    protected List listConvertRecordType28c()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        // ---MANDITORY---
        //Fields:
        //Tag, Account Statement Date(YMMDD)5n, (optional)Sequence Number/5n
        //SAMPLE:
        //:28c:60530
        // OR
        //:28c:60530/123
        List locListReturnValue = new List(Types::Class);
        int locIndexOfSlash;
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
        if(strContains(currentRecord, @'/'))//if it contains a slash, the look for sequence numbers too.
        {
            locIndexOfSlash = SKS_PP_StringFormats::strIndexOf(currentRecord, @'/');
            //get the Statement Number; it will be everything before the slash
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::StatementNumber,
                                SKS_PP_StringFormats::strSub(currentRecord, 1, locIndexOfSlash - 1)));
            //get the sequence number; it will be everything folling the slash
            if(strLen(currentRecord) > locIndexOfSlash)
                 locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::SequenceNumber,
                 SKS_PP_StringFormats::strSub(currentRecord, locIndexOfSlash + 1)));
        }
        else
        {
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::StatementNumber,
                                currentRecord));
        }
    
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType60</Name>
				<Source><![CDATA[
    protected List listConvertRecordType60()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        // ---MANDITORY---
        //Fields:
        //TagM, debit or credit flag(D/C), date(YYMMDD), currency (aaa), Amount(111111111,99)
        //SAMPLE:
        //:60F:C961231USD111,88
        // OR
        //:60M:C961231USD111,88
        //NOTE:  60F gives last statement date/60M give current statement date
        List locListReturnValue = new List(Types::Class);
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
    
        //Get the credit/debit flag
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::DebitCreditFlag, this.getAndRemoveField(1)));
    
        //Get the Statement Date
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::StatementDate, this.getAndRemoveField(6)));
    
        //Get the Currency
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Currency, this.getAndRemoveField(3)));
    
        //Get the amount
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Amount, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType61</Name>
				<Source><![CDATA[
    protected List listConvertRecordType61()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        //Optional
        //Fields:
        //Tag, Value Date(YYMMDD), Entry Date (MMDD)(optional), C/D/RD/RC, Funds Code(optional), Amount , Transaction Type ID code,
        //(cont) Customer Reference, Bank Reference (optional), Supplementary details(optional)
        //FORMAT:  6!n[4!n]2a[1!a]15d1!a3!c16x[//16x]crlf[34x]
        List locListReturnValue = new List(Types::Class);
        int locCounter = 1;
        int locCarriageReturnIndex = 0;
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getTag()));
        this.removeTag();
    
        //Get the Value Date
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::ValueDate, this.getAndRemoveField(6)));
    
        //if the next item is numeric there is an Entry Date.
        if(SKS_PP_StringFormats::isNumeric(SKS_PP_StringFormats::strSub(currentRecord,1,1)))
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::EntryDate, this.getAndRemoveField(4)));
    
        //get Credit/Debit/Reversing Credit/Reversing Debit flag
        if(strStartsWith(strUpr(currentRecord), 'R') || strUpr(SKS_PP_StringFormats::strSub(currentRecord, 2, 1)) == 'R')
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::DebitCreditFlag, this.getAndRemoveField(2)));
        else
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::DebitCreditFlag, this.getAndRemoveField(1)));
    
        //if the next char is not numeric, it is the Funds Type, get it.
        if(!SKS_PP_StringFormats::isNumeric(SKS_PP_StringFormats::strSub(currentRecord,1,1)))
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::FundsCode, this.getAndRemoveField(1)));
    
        //locate the end of the amount field
        for(locCounter = 1; locCounter <= strLen(currentRecord); locCounter++)
        {
            if( (!SKS_PP_StringFormats::isNumeric(SKS_PP_StringFormats::strSub(currentRecord,locCounter,1)))
                && (SKS_PP_StringFormats::strSub(currentRecord,locCounter,1) != ','))
            {
                //position the locCounter on the last char of the amount
                locCounter--;
                break;
            }
        }
        //get the amount and remove it from the current record
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Amount, this.getAndRemoveField(locCounter)));
    
        //get the Transaction Code
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::TransactionTypeIDCode, this.getAndRemoveField(4)));
    
        //get the Customer Reference
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::CustomerReference, this.getAndRemoveCustomerReference()));
    
    
        //get the Bank Reference(if any exist)
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::BankReference, this.getAndRemoveBankReference()));
        
        //get the CTC Trans code(if any exists)
        if(strStartsWith(strUpr(currentRecord), @'/CTC/'))
            locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::CTCTranCode, this.getAndRemoveCTCTransCode()));
    
        //get the Supplimental Details(if any exist)
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::SupplementaryDetails, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType62</Name>
				<Source><![CDATA[
    protected List listConvertRecordType62()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        //MANDITORY
        //Fields:
        //TagM, debit or credit flag(D/C), statement date(YYMMDD), currency (aaa), Amount(111111111,99)
        //SAMPLE:
        //:62F:C961231USD111,88
        // OR
        //:62M:C961231USD111,88
        //The 62 records are CLOSING BALANCE(BOOKED FUNDS)
        //NOTE:  62M is an intermediate statement
        //NOTE:  62F is the final closing balance for the period
        List locListReturnValue = new List(Types::Class);
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
    
        //Get the credit/debit flag
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::DebitCreditFlag, this.getAndRemoveField(1)));
    
        //Get the Statement Date
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::StatementDate, this.getAndRemoveField(6)));
    
        //Get the Currency
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Currency, this.getAndRemoveField(3)));
    
        //Get the amount
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Amount, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType64</Name>
				<Source><![CDATA[
    protected List listConvertRecordType64()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        //Optional
        //Fields:
        //TagM, debit or credit flag(D/C), statement date(YYMMDD), currency (aaa), Amount(111111111,99)
        //SAMPLE:
        //:64:C961231USD111,88
        //Closing AVAILABLE balance (Available Funds)
        List locListReturnValue = new List(Types::Class);
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
    
        //Get the credit/debit flag
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::DebitCreditFlag, this.getAndRemoveField(1)));
    
        //Get the Statement Date
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::StatementDate, this.getAndRemoveField(6)));
    
        //Get the Currency
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Currency, this.getAndRemoveField(6)));
    
        //Get the amount
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Amount, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType65</Name>
				<Source><![CDATA[
    protected List listConvertRecordType65()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        //Optional
        //Fields:
        //TagM, debit or credit flag(D/C), statement date(YYMMDD), currency (aaa), Amount(111111111,99)
        //SAMPLE:
        //:65:C961231USD111,88
        //Forward Available balance (specifies the expected available funds on a future date)
        List locListReturnValue = new List(Types::Class);
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
    
        //Get the credit/debit flag
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::DebitCreditFlag, this.getAndRemoveField(1)));
    
        //Get the Statement Date
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::StatementDate, this.getAndRemoveField(6)));
    
        //Get the Currency
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Currency, this.getAndRemoveField(6)));
    
        //Get the amount
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Amount, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listConvertRecordType86</Name>
				<Source><![CDATA[
    protected List listConvertRecordType86()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH:
        //MT940 format specifications
        // Optional
        //Fields:
        //Tag, Information To Account Owner (65x or 61)
        //Format:  65x
        //SAMPLE:
        //:86:73.39.59.555 T-­-MOBILE
        // OR
        //:86:/ORDP/ T--MOBILE
        List locListReturnValue = new List(Types::Class);
        ;
    
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::Tag, this.getAndRemoveTag()));
        locListReturnValue.addEnd(new SKS_BR_FieldValue(SKS_BR_MT940Field::InformationToAccountOwner, currentRecord));
    
        return locListReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listRead</Name>
				<Source><![CDATA[
    public List listRead()
    {
    
    
        List locReturnValue;
        ;
    
        currentRecord = this.strRemoveCarriageReturns(conPeek(contFile,1));//PRIMING READ
        contFile = conDel(contFile, 1,1);
        //ONLY TYPE 61 & 86 can have tagless continuations
        if(SKS_PP_StringFormats::strSub(this.getTag(),1,2) == '61' || SKS_PP_StringFormats::strSub(this.getTag(),1,2) == '86')
        {
            while(this.boolNextRecordIsContinuation())
            {
                currentRecord += '\n' + this.strRemoveCarriageReturns(conPeek(contFile, 1));
                contFile = conDel(contFile, 1, 1);
            }
        }
        locReturnValue = this.bankRecordToList();
        return locReturnValue;
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTag</Name>
				<Source><![CDATA[
    protected void removeTag()
    {
        int locIndexofEndColon;
    
        locIndexofEndColon = SKS_PP_StringFormats::strIndexOf(CurrentRecord, ':', 2);
        currentRecord = SKS_PP_StringFormats::strSub(CurrentRecord, locIndexofEndColon + 1);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>