<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_FIFTHTHIRD_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_FIFTHTHIRD_EDI820   extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_FIFTHTHIRD_EDI820   extends SKS_EFT_Format
{
    //---------------------------------------------------
    // BOA Outsourced check printing using EDI820
    //---------------------------------------------------
    #define.FormatVersion('20230503')
    #define.ACHCCD('ACH-CCD')
    #define.CHK('CHK')
    #define.FED_WIRE('FED-WIRE')                //SKS#DevOps:20574
    #define.SWIFT_WIRE('SWIFT-WIRE')            //SKS#DevOps:20574

    int mTranSetCount;
    int mSegmentCount;
    str mIntControlNbr;
    str mGroupControlNbr;
    str mSenderControlNbr;
    AmountMST mPaymentAmount;
    SKS_EFT_EDI mSKS_EFT_EDI;
    str mBPR_03;
    str name;
    str mLineEnd;
    str mSeparator;
    str invoiceNumbers;
    SKS_EFT_FileDetail prevSKS_EFT_FileDetail; 

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
        {
            mFileHub.runAppendLine(strUpr(_result));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        boolean firstRec = true;
        SKS_EFT_FileDetail   invSKS_EFT_FileDetail;
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);              
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, '', mSKS_EFT_File.RecId);
            
            mSeparator = mSKS_EFT_EDI.getDataElementSeparator();
            mLineEnd = mSKS_EFT_EDI.getSegmentTerminator();
                
            if(firstRec)
            {
                firstRec = false;
    
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Detail lines
            this.rec_ST();
            this.rec_BPR();
            
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #CHK:
                    this.rec_REFCK();
                    break;
                case #ACHCCD:
                    this.rec_TRN();
                    break;
                case #SWIFT_WIRE:           //SKS#DevOps:20574
                case #FED_WIRE:
                    this.rec_ORI();
                    this.rec_OTH();
                    this.rec_TRN();
                    this.rec_CUR();
                    break;
            }
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #ACHCCD:
                    this.rec_N1PR();            //SKS#DevOps:21118
                    this.rec_N1PE();
                    break;
                case #CHK:
                    this.rec_N1PR();
                    this.rec_N3PR();
                    this.rec_N4PR();

                    this.rec_N1PE();
                    this.rec_N3PE();
                    this.rec_N4PE();
                    this.rec_ENT();

                    while select * from invSKS_EFT_FileDetail 
                        where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId &&
                              invSKS_EFT_FileDetail.InvoiceNumber != ''
                    {
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
    
                        this.rec_DTM(invSKS_EFT_FileDetail);
                    }
                    break;
                case #FED_WIRE:
                case #SWIFT_WIRE:
                    this.rec_N1PR();
                    this.rec_N3PR();
                    this.rec_N4PR();

                    this.rec_N1BK();
                    this.rec_N3BK();
                    this.rec_N4BK();

                    this.rec_N1PE();
                    this.rec_N3PE();
                    this.rec_N4PE();

                    this.rec_N1OR();
                    this.rec_N3OR();
                    this.rec_N4OR();

                    this.rec_N1IK();
                    this.rec_N3IK();
                    this.rec_N4IK();
            }
    
            this.rec_SE();
    
            mSegmentCount = 0;

            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE();
        this.rec_IEA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ORI</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_ORI
    /// </summary>
    /// <returns>true</returns>
    boolean rec_ORI()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        invoiceNumbers = this.getInvoiceNbrs();
        
        sb.Append('NTE');
        sb.Append(mSeparator);

        //01     Note Reference Code
        sb.Append('ORI');
        sb.Append(mSeparator);

        //02     Description
        sb.Append(substr(invoiceNumbers,1,35));

        sb.Append(mLineEnd);
        if(invoiceNumbers)
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_OTH</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_OTH
    /// </summary>
    /// <returns>true</returns>
    boolean rec_OTH()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if(strLen(invoiceNumbers) >35)
        {
            //01     Note Reference Code
            sb.Append('OTH');
            sb.Append(mSeparator);

            //02     Description
            sb.Append(substr(invoiceNumbers, 36,35));
            sb.Append(mLineEnd);

            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1IK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N1IK
    /// </summary>
    /// <returns>true</returns>

    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
    //03    Identification Code Qualifier                       2       ID
    //04    Identification Code                                 80      AN      Vendor number
    boolean rec_N1IK()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('N1');
        sb.Append(mSeparator);
    
        //01    Entity ID Code
        sb.Append('IK');
        sb.Append(mSeparator);
    
        //02    Name
        sb.Append(subStr(mSKS_EFT_FileDetail_Intermediary.IntBankName, 1, 34));
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankId != '' || mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
        {
            sb.Append(mSeparator);
    
            if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
            {
                //03    Identification Code Qualifier
                sb.Append('SW');
                sb.Append(mSeparator);
    
                //04    Identification Code
                sb.Append(mSKS_EFT_FileDetail_Intermediary.IntBankSwift);
            }
            else
            {
                //03    Identification Code Qualifier
                sb.Append('13');
                sb.Append(mSeparator);
    
                //04    Identification Code
                sb.Append(mSKS_EFT_FileDetail_Intermediary.IntBankId);
            }
        }
        
        sb.Append(mLineEnd);

        if(mSKS_EFT_FileDetail_Intermediary.IntBankName != '' || mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' || mSKS_EFT_FileDetail_Intermediary.IntBankId != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3IK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N3IK
    /// </summary>
    /// <returns>true</returns>

    //Nbr   Description                                         Max     Type    Comment
    //01    Address                                             55      AN      
    //02    Address                                             55      AN      
    boolean rec_N3IK()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('N3');
        sb.Append(mSeparator);
    
        //01    Address
        sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankAddr), 1, 55));

        //02    Address
        sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankAddr2), 1, 55));
        
        sb.Append(mLineEnd);
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankAddr || mSKS_EFT_FileDetail_Intermediary.IntBankAddr2)
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4IK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N4IK
    /// </summary>
    /// <returns>true</returns>
    //Nbr   Description                                         Max     Type    Comment
    //01    City Address                                        19      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         9       ID
    //04    Country Code                                        3       ID
    boolean rec_N4IK()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //LogisticsAddressCountryRegionISOCode countryRegionISO;
        ;
        sb.Append('N4');
        sb.Append(mSeparator);
    
        //01    City Address
        if(mSKS_EFT_FileDetail_Intermediary.IntBankCity != '')
        {
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankCity), 1, 30));
        }

        //02    State or Province Code
        sb.Append(mSeparator);

        //03    Postal Code
        sb.Append(mSeparator);
        if(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId != '')
        {
            sb.Append(mSeparator);
            sb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId));
        }
        
        sb.Append(mLineEnd);

        if(mSKS_EFT_FileDetail_Intermediary.IntBankCity != '' || mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = this.CharacterReplacement(lLogisticsLocation.Description);
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = this.CharacterReplacement(vendAddrArray.value(1));
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = this.CharacterReplacement(vendAddrArray.value(2));
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CUR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_CUR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_CUR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Currency Code                                       3       ID      Payment currency
        //03    Exchange Rate                                       10      R
        //04    Entity ID Code                                      3       ID
        //05    Currency Code                                       3       ID      Payment currency
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('CUR');
        sb.Append(mSeparator);
    
        //01     Entity ID Code
        sb.Append('PR');
        sb.Append(mSeparator);
    
        //02    Currency Code
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
        
        sb.Append(mLineEnd);

        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_RMRIV
    /// </summary>
    /// <param name = "invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    /// <returns>true</returns>
   
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    20       AN
    //04    Net Amount
    //05    Gross Amount
    //06    Discount Amount
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;    
        mSegmentCount++;
    
        sb.Append('RMR');
        sb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        sb.Append('IV');
        sb.Append(mSeparator);
    
        //02     Reference Number
        sb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,30));
        sb.Append(mSeparator);
    
        //03    Payment Action Code
        sb.Append('PI');
        sb.Append(mSeparator);
    
        //04    Net Amount
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        sb.Append(num2str(amt,0,2,0,0));
        sb.Append(mSeparator);
    
        //05    Gross Amount
        amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
        sb.Append(num2str(amt,0,2,0,0));
        sb.Append(mSeparator);
    
        //06    Discount Amount
        amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
        sb.Append(num2str(amt,0,2,0,0));
    
        sb.Append(mLineEnd);

        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_DTM
    /// </summary>
    /// <param name = "invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    /// <returns>True</returns>

    //Nbr   Description                                         Max     Type    Comment
    //01    Date/Time Qualifier                                 3       ID
    //02    Date                                                4       Date    CCYYMMDD
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            mSegmentCount++;
    
            sb.Append('DTM');
            sb.Append(mSeparator);
    
            //01     Date/Time Qualifier
            sb.Append('003');
            sb.Append(mSeparator);
    
            //03    Description
            sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
    
            sb.Append(mLineEnd);

            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_ENT
    /// </summary>
    /// <returns>true</returns>
    boolean rec_ENT()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Assigned Number                                     6       N0
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('ENT');
        sb.Append(mSeparator);
    
        //01    Assigned Number
        sb.Append('1');
    
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_BPR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_BPR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //17    Business Function Code                              3       AN
        //18    Intermediary DFI ID Number Qualifier                2       ID
        //19    Intermediary DFI ID Number                          12      AN
        //20    Intermediary Account m Qualifier                    3       ID
        //21    Intermediary Bank Account number                    35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        ;
        mSegmentCount++;
    
        sb.Append('BPR');
        sb.Append(mSeparator);
    
        //01    Trans. Handling Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCCD:
                sb.Append('U');
                break;
            case #CHK:
            case #FED_WIRE:     //SKS#DevOps:20574
            case #SWIFT_WIRE:   //SKS#DevOps:20574
                sb.Append('D');
                break;
        }
        
        sb.Append(mSeparator);
    
        //02    Monetary Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(num2str((amt),0,2,0,0));
        sb.Append(mSeparator);
    
        //03    Credit/Debit Flag Code
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
        }
        else
        {
            mBPR_03 = 'C';
        }
        sb.Append(mBPR_03);
        sb.Append(mSeparator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCCD:
                sb.Append('ACH');
                break;
            case #CHK:
                sb.Append('CHK');
                break;
            case #FED_WIRE:
                sb.Append('FWT');
                break;
            case #SWIFT_WIRE:
                sb.Append('SWT');
                break;
        }
        sb.Append(mSeparator);
    
        //05    Payment Format code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCCD:
                sb.Append('CCD');
                break;
            case #CHK:
                sb.Append('PBC');
                break;
        }
        sb.Append(mSeparator);
    
        //06    DFI ID No. Qualifier
        sb.Append('01');
        sb.Append(mSeparator);
    
        //07    DFI ID Number
        sb.Append(mSKS_EFT_FileDetail.BankOrigDFI);
        sb.Append(mSeparator);
    
        //08    Acct. No. Qual. Code
        sb.Append('DA');
        sb.Append(mSeparator);
    
        //09    Account Number
        sb.Append(mSKS_EFT_FileDetail.BankBankAcct);
        sb.Append(mSeparator);
    
        //10    Orig. Co. ID
        sb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));                
        sb.Append(mSeparator);
    
        //11    Orig. Co. Code
        sb.Append(mSeparator);
    
        //12    RDFI ID No. Qualifier        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)//SKS_VSTS_14469
        {
            sb.Append(mSeparator);
            sb.Append(mSeparator);
            sb.Append(mSeparator);
            sb.Append(mSeparator);
        }
        else
        {
            sb.Append('01');
            sb.Append(mSeparator);
            //13    RDFI ID Number
            switch (mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #ACHCCD:
                case #CHK:
                case #FED_WIRE:
                    sb.Append(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 12));
                    break;
                case #SWIFT_WIRE:
                    sb.Append(mSKS_EFT_FileDetail.DepSwiftNo);
                    break;
            }
            sb.Append(mSeparator);
    
            //14    Acct. No. Qual Code
            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                sb.Append('SG');
            }
            else
            {
                sb.Append('DA');
            }
        
            sb.Append(mSeparator);
    
            //15    Account Number
            sb.Append(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35));
            sb.Append(mSeparator);
        }

        //16    Effective Entry Date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
        
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFCK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_REFCK
    /// </summary>
    /// <returns>true</returns>
    
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    boolean rec_REFCK()
    {
        //---------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Identification                            30      AN      Check Number (Not used for ACH)
        //03    Description                                         80      AN      CORP PMT
        //---------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value1, value2, subElementSeparator;
        SKS_EFT_EDI820_Detail locsks_EFT_EDI820Detail;

        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        sb.Append('CK');
        sb.Append(mSeparator);
    
        //02     Check Number
        sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),10));
        sb.Append(mSeparator);
        
        value1 = 'NWCNSIGN01';
        value2 = 'NWCNLOGO01';
        
        if(value1 && value2)
        {
            //03     Description
            sb.Append(mSeparator);
            
            select Value from locsks_EFT_EDI820Detail where
                locsks_EFT_EDI820Detail.FormatId == mSKS_EFT_FileDetail.FormatId &&
                locsks_EFT_EDI820Detail.Segment == SKS_EFT_EDI820_Segment::H0050ISA &&
                locsks_EFT_EDI820Detail.FieldNbr == 16;

            subElementSeparator = locsks_EFT_EDI820Detail.Value;            //SKS#DevOps:14469

            //REF04 - 01    reference id qualifier
            sb.Append('2U'+ subElementSeparator);

            //REF04 - 02    reference identification
            sb.Append(subStr(value1,1,10));

            //REF04 - 03    reference id qualifier
            sb.Append(subElementSeparator + '2U' + subElementSeparator);

            //REF04 - 04    reference id qualifier
            sb.Append(subStr(value2,1,10));
        }
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFTN</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_REFTN
    /// </summary>
    /// <returns>true</returns>
    boolean rec_REFTN()
    {
        //---------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Identification                            30      AN      Check Number (Not used for ACH)
        //03    Description                                         80      AN      CORP PMT
        //---------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        sb.Append('TN');
        sb.Append(mSeparator);
    
        //02     Check Number
        sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),10));
        
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_TRN
    /// </summary>
    /// <returns>true</returns>
    boolean rec_TRN()
    {
        //---------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Identification                            30      AN      Check Number (Not used for ACH)
        //03    Description                                         80      AN      CORP PMT
        //---------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
    
        sb.Append('TRN');
        sb.Append(mSeparator);
    
        //01     Trace Type Code
        sb.Append('1');
        sb.Append(mSeparator);
    
        //02     Reference Identification
        sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 30));
        
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_GE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_GE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setTranSetCount(mTranSetCount);
        value = mSKS_EFT_EDI.buildGE(prevSKS_EFT_FileDetail); //FDD-10590
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_GS
    /// </summary>
    /// <returns>true</returns>
    boolean rec_GS()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //-------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS(mSKS_EFT_FileDetail);    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IEA
    /// </summary>
    /// <returns>true</returns>
    boolean rec_IEA()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA(prevSKS_EFT_FileDetail); 
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_ISA
    /// </summary>
    /// <returns>true</returns>
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA(mSKS_EFT_FileDetail); 
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N1PE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N1PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int len;

        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(mSeparator);
    
        //01     Entity ID Code
        sb.Append('PE');
        sb.Append(mSeparator);
    
        //02     Name
        Name = mRemittanceName;     //SKS#DevOps:16383
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCCD:
                len = 60;
                break;
            case #CHK:
                len = 35;
                break;
            case #FED_WIRE:
            case #SWIFT_WIRE:
                len = 16;
                break;
        }
        
        sb.Append(substr(Name,1,len));
        
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N1PR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N1PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(mSeparator);
    
        //01     Entity ID Code
        sb.Append('PR');
        sb.Append(mSeparator);
    
        //02     Name        
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),1,35));    
    
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1OR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N1OR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N1OR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Originator's Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(mSeparator);
    
        //01     Entity ID Code
        sb.Append('OR');
        sb.Append(mSeparator);
    
        //02     Name
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),1,35));

        if(mSKS_EFT_FileDetail.BankBankTransit)
        {
            sb.Append(mSeparator);
            sb.Append('13');

            sb.Append(mSeparator);
            sb.Append(substr(mSKS_EFT_FileDetail.BankBankTransit, 1, 9));
        }
        
        sb.Append(mLineEnd);
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1BK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N1BK
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N1BK()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Beneficiary Bank
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('N1');
        sb.Append(mSeparator);
    
        //01     Entity ID Code
        sb.Append('BK');
        sb.Append(mSeparator);
    
        //02     Name
        sb.Append(substr(mSKS_EFT_FileDetail_BenBank.BenBankName,1,35));
        
        sb.Append(mLineEnd);
    
        if(mSKS_EFT_FileDetail_BenBank.BenBankName)
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3BK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N3BK
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N3BK()
    {
        //---------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 55      AN      Payee Address (Line 2) Domestic and Foreign
        //---------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        if(mSKS_EFT_FileDetail_BenBank.BenBankName)
        {
            sb.Append('N3');
            sb.Append(mSeparator);
            
            //01    Address Information
            sb.Append(substr(mSKS_EFT_FileDetail_BenBank.BenBankAddr,1,35));
    
            //02    Address Information
            sb.Append(mLineEnd);
    
            if(mSKS_EFT_FileDetail_BenBank.BenBankAddr)
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N3PE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N3PE()
    {
        //---------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 55      AN      Payee Address (Line 2) Domestic and Foreign
        //---------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        if(Name)
        {
            sb.Append('N3');
            sb.Append(mSeparator);    
            
            //01    Address Information
            sb.Append(substr(mRemittanceAdrLine1,1,35));
    
            //02    Address Information
            if(mRemittanceAdrLine2 != '')
            {
                sb.Append(mSeparator);
                sb.Append(substr(mRemittanceAdrLine2,1,55));
            }
    
            sb.Append(mLineEnd);
    
            if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3OR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N3OR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N3OR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Originator Street Address Line 1
        //02    Address Information                                 35      AN      Originator Street Address Line 2
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append('N3');

            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr)
            {
                sb.Append(mSeparator);
                //01    Address Information
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr),1,35));
            }

            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
            {
                sb.Append(mSeparator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2),1,35));
            }
    
            sb.Append(mLineEnd);
    
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr  || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N3PR
    /// </summary>
    /// <returns>true</returns>

    boolean rec_N3PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payor Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payor Address (Line 2) Domestic and Foreign
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int len;

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append('N3');
            sb.Append(mSeparator);
        
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #ACHCCD:
                    len = 35;
                    break;
                case #CHK:
                case #FED_WIRE:
                case #SWIFT_WIRE:
                    len = 55;
                    break;
            }
            //01    Address Information
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr),1,len));

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK      ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FED_WIRE ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWIFT_WIRE)
            {
                sb.Append(mSeparator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2),1,len));
            }
    
            sb.Append(mLineEnd);
    
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr  || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4OR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N4OR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N4OR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append('N4');
    
            //01    City Address
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
            {
                sb.Append(mSeparator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 1, 30));
            }
    
            //02    State or Province Code
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)
            {
                sb.Append(mSeparator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 1, 2));
            }
            //03    Postal Code            
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)
            {
                sb.Append(mSeparator);
                sb.Append(substr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode,1,10));
            }
            
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)
            {
                //04    Country
                sb.Append(mSeparator);

                if (this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId) == 'US')
                {
                    sb.Append('US');
                }
                else if (this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId) == 'CA')
                {
                    sb.Append('CA');
                }
                else if (this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId) == 'MX')
                {
                    sb.Append('MEX');
                }
                else
                {
                    sb.Append('FOR');
                }
            }
            sb.Append(mLineEnd);
    
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '' ||
                mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4BK</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N4BK
    /// </summary>
    /// <returns>true</returns>
    
    //Nbr   Description                                         Max     Type    Comment
    //01    City Name                                           30      AN
    //02    State or Province Code                              2       ID    
    //03    Postal Code                                         9       ID    
    //04    Country Code                                        3       ID
    boolean rec_N4BK()
    {
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        //BP Deviation Documented
        select firstonly msks_EFT_FileDetail_BankAddress where msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
                msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress;

        if (msks_EFT_FileDetail_BankAddress.State && msks_EFT_FileDetail_BankAddress.ZipCode && msks_EFT_FileDetail_BankAddress.CountryRegionID)
        {
            sb.Append('N4');
            sb.Append(mSeparator);
        
            //01    City Name
            sb.Append(substr(mSKS_EFT_FileDetail_BenBank.BenBankCity, 1, 30));
        
            if(msks_EFT_FileDetail_BankAddress.State != '')
            {
                //02    State or Province Code
                sb.Append(mSeparator);
                sb.Append(subStr(msks_EFT_FileDetail_BankAddress.State, 1, 2));
            }
            if(msks_EFT_FileDetail_BankAddress.ZipCode != '')
            {
                //03    Postal Code
                sb.Append(mSeparator);
                sb.Append(subStr(msks_EFT_FileDetail_BankAddress.ZipCode, 1, 9));
            }
        
            if(msks_EFT_FileDetail_BankAddress.CountryRegionId != '')
            {
                //04    Country Code
                sb.Append(mSeparator);

                if (this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId) == 'US')
                {
                    sb.Append('US');
                }
                else if (this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId) == 'CA')
                {
                    sb.Append('CA');
                }
                else if (this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId) == 'MX')
                {
                    sb.Append('MEX');
                }
                else
                {
                    sb.Append('FOR');
                }
            }
        
            sb.Append(mLineEnd);
        
            if(mSKS_EFT_FileDetail_BenBank.BenBankCity != ''    ||
                msks_EFT_FileDetail_BankAddress.State != ''      ||
                msks_EFT_FileDetail_BankAddress.ZipCode != ''    ||
                mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId != '' ||
                msks_EFT_FileDetail_BankAddress.CountryRegionId != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N4PE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N4PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //05    Location Qualifier                                  2       ID
        //06    Location Identifier                                 30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int len;
    
        if(Name)
        {
            sb.Append('N4');
            sb.Append(mSeparator);
    
            //01    City Address
            sb.Append(substr(mRemittanceCity, 1, 30));
            sb.Append(mSeparator);
    
            //02    State or Province Code
            sb.Append(substr(mRemittanceState, 1, 2));
            sb.Append(mSeparator);

            //03    Postal Code
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #ACHCCD:
                    len = 15;
                    break;
                case #CHK:
                case #FED_WIRE:
                case #SWIFT_WIRE:
                    len = 10;
                    break;
            }
            sb.Append(substr(mRemittanceZipCode,1,len));
            sb.Append(mSeparator);
            
            //04    Country Code
            sb.Append(mRemittanceCountryRegionId);
            
            sb.Append(mLineEnd);
    
            if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId)
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N4PR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N4PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int len;

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append('N4');
            sb.Append(mSeparator);
    
            //01    City Address
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 1, 30));
            sb.Append(mSeparator);
    
            //02    State or Province Code
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 1, 2));
            sb.Append(mSeparator);
    
            //03    Postal Code
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #ACHCCD:
                    len = 15;
                    break;
                case #CHK:
                case #FED_WIRE:
                case #SWIFT_WIRE:
                    len = 10;
                    break;
            }
            sb.Append(substr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode,1,len));
            
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode  ==  #ACHCCD)
            {
                //04    Country
                sb.Append(mSeparator);
                //05    Location Qualifier
                sb.Append('CC');
                sb.Append(mSeparator);

                //06    Location Identifier
                sb.Append(subStr(this.getLogisticsAddressCountryRegionName(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 1, 30));
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode  ==  #FED_WIRE ||
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode  ==  #SWIFT_WIRE ||
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode  ==  #CHK)
            {
                sb.Append(mSeparator);

                //04    Country
                if (this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId) == 'US')
                {
                    sb.Append('US');
                }
                else if (this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId) == 'CA')
                {
                    sb.Append('CA');
                }
                else if (this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId) == 'MX')
                {
                    sb.Append('MEX');
                }
                else
                {
                    sb.Append('FOR');
                }
            }

            sb.Append(mLineEnd);
    
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '' || 
               mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_SE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_SE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('SE');
        sb.Append(mSeparator);
    
        //1     Number of Included Segments
        sb.Append(num2str(mSegmentCount,0,0,0,0));
        sb.Append(mSeparator);
    
        //2     Trans. Set Cont. Number
        sb.Append(mSenderControlNbr);
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_ST
    /// </summary>
    /// <returns>true</returns>
    boolean rec_ST()
    {
        //------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
        mTranSetCount++;
    
        sb.Append('ST');
        sb.Append(mSeparator);
    
        //1     Transaction Set ID Code
        sb.Append('820');
        sb.Append(mSeparator);
    
        //2     Trans. Set Cont. Number
        if(strLen(mSKS_EFT_FileDetail.PaymentReference) < 4)
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),9);
        }
        sb.Append(mSenderControlNbr);
        sb.Append(mLineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
               mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>