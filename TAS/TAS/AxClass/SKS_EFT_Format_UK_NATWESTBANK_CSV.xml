<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_NATWESTBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_NATWESTBANK_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_NATWESTBANK_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220721')
    #define.DOM_STD('DOM-STD')
    #define.DOM_TEMP('DOM-TEMP')
    #define.DOM_URGP('DOM-URGP')
    #define.BULK_LIST('BULK-LIST')
    #define.BULK_PAY('BULK-PAY')
    #define.IAT_B_LIST('IAT-B-LIST')
    #define.INTL_URGP('INTL-URGP')
    #define.INTL_NORM('INTL-NORM')
        
    #define.Separator(',')
    CompanyInfo companyInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
        
            // Details
            this.rec_Details();
        
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
        
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
        
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
        
            next invSKS_EFT_FileDetail;
        
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
        
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);        
        
        return this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.TransactionTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details()
    {
        //---------------------------------------------------------------------------------
        //Nat West Bank - CSV file
        //---------------------------------------------------------------------------------
        str value, confIndicator, debitaccountId, creditaccountId;
        boolean debitAmount = false;
        str debitaccntIdentifier;                    //SKS#DevOps:16228
        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        //          Decsription                                             length
        //H001      Originating customer identifier                         16x
        sb.Append(this.wrapField(''));
        
        //H002      Import file name                                        50x
        sb.Append(this.wrapField(''));
        
        //H003      Bank identifier                                         4x
        sb.Append(this.wrapField(''));
        
        //T001      Record type                                             2n
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DOM_STD:
            case #DOM_TEMP:
                value = '01';
                break;
            case #DOM_URGP:
                value = '02';
                break;
            case #BULK_LIST:
            case #BULK_PAY:
            case #IAT_B_LIST:
                if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
                {
                    value = '06';
                    debitAmount = true;
                }
                else
                {
                    value = '07';
                }
                break;
            case #INTL_URGP:
            case #INTL_NORM:
                value = '04';
                break;
        }
        sb.Append(this.wrapField(value));
        
        //T002      Template indicator                                      1a
        if(debitAmount &&
               (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_LIST   ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT_B_LIST))
        {
            sb.Append(this.wrapField('T'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T003      Template reference                                      20x
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_TEMP         ||
          (debitAmount &&
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_LIST       ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_PAY        ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT_B_LIST)))
        {
           sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 20)); //SKS#DevOps:15637
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T004      Confidential indicator                                  1a
        confIndicator = SKS_EFT_Format::getCodelookupvalue('ConfIndicator', mSKS_EFT_FileDetail.RecId);
        
        if(confIndicator && debitAmount &&
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_LIST    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT_B_LIST))
        {
            sb.Append(this.wrapField(confIndicator, 1));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T005      Beneficiary identifier                                  25x
        if(!debitAmount &&
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_LIST   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_PAY))
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum, 25));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T006      Customer payment reference                              18x
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGP ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP)
        {
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 18));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T007      Destination country                                     2a
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP)
        {
            if(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)
            {
                sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), 2));
            }
            else if(mSKS_EFT_FileDetail.DepBankIBAN)
            {
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 2)));
            }
            else
            {
                sb.Append(this.wrapField(''));
            }
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T008      Priority                                                1a
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM)
        {
            sb.Append(this.wrapField('N'));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP   ||
               (debitAmount && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT_B_LIST))
        {
            sb.Append(this.wrapField('U'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T009      Routing Method                                          1a
        sb.Append(this.wrapField(''));
        
        //T010      Debit account identifier                                34x
        debitaccntIdentifier = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IBANDebitAccnt', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)); //SKS#DevOps:16228

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_STD  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_TEMP ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGP ||
          (debitAmount &&
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_LIST||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_PAY)))
        {
            debitaccountId = subStr(strRem(strRem(mSKS_EFT_FileDetail.BankBankSortCode, '-'), ' '), 1, 6) + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM  || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP)
        {
            str iban = subStr(mSKS_EFT_FileDetail.BankBankIBAN, 1, 34);  //SKS#DevOps:16444
            if(debitaccntIdentifier == 'Y' && iban)     //SKS#DevOps:16228  //SKS#DevOps:16444
            {
                debitaccountId = iban;
            }
            else if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'GBP')
            {
                debitaccountId = subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8);
            }
            else
            {
                debitaccountId = subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 15);
            }
        }
        else if(debitAmount && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT_B_LIST)
        {
            if(debitaccntIdentifier)     //SKS#DevOps:16228
            {
                debitaccountId = subStr(debitaccntIdentifier, 1, 15);
            }
            else if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'GBP')
            {
                debitaccountId = subStr(mSKS_EFT_FileDetail.BankBankSortCode, 1, 6) + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 8);
            }
            else
            {
                debitaccountId = subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 15);
            }
        }
        sb.Append(this.wrapField(debitaccountId, 34));
        
        //T011      Debit charges account identifier                        34x
        sb.Append(this.wrapField(''));
        
        //T012      Charges Code type                                       3a
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP)
        {
            if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'EUR')
            {
                value = 'SHA';
            }
            else
            {
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId));
            }
        }
        else
        {
            value = '';
        }
        sb.Append(this.wrapField(value, 3));
        
        //T013      Payment currency                                        3a
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_TEMP     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP    ||
          (!debitAmount && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_PAY))
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode, 3));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T014      Payment amount                                          15n
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_TEMP     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGP     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_STD      ||
          (!debitAmount && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_PAY))
        {
            sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0), 15));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T015      Execution date                                          Date
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGP     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP)
        {
            sb.Append(this.wrapField(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T016      Date payment to arrive (credit date)                    Date
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_STD     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_TEMP    ||
          (debitAmount    &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_PAY))
        {
            sb.Append(this.wrapField(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T017      Ordering Institution identifier                         16x
        sb.Append(this.wrapField(''));
        
        //T018      Ordering Institution name and address Line number 1     35x
        sb.Append(this.wrapField(''));
        
        //T019      Ordering Institution name and address Line number 2     35x
        sb.Append(this.wrapField(''));
        
        //T020      Ordering Institution name and address Line number 3     35x
        sb.Append(this.wrapField(''));
        
        //T021      Ordering Institution name and address Line number 4     35x
        sb.Append(this.wrapField(''));
        
        //T022      Account with bank identifier                            16x
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_STD   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM_URGP  ||
          (!debitAmount    &&
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_LIST ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BULK_PAY  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT_B_LIST)))
        {
            creditaccountId = subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 6);
            sb.Append(this.wrapField(creditaccountId, 16));
        }
        else if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM  ||
                 mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP) &&
                 mSKS_EFT_FileDetail.PaymentCurrencyCode != 'EUR')
        {
            if(mSKS_EFT_FileDetail.DepBankCodeType == BankCodeType::Code_SC)
            {
                creditaccountId = subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 6) + subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 8);
            }
            else
            {
                creditaccountId = subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11) + mSKS_EFT_FileDetail.DepBankIBAN;
            }
            sb.Append(this.wrapField(creditaccountId, 16));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T023      Account with bank account number                        34x
        sb.Append(this.wrapField(''));
        
        //T024      Account with bank name and address Line number 1        35x
        sb.Append(this.wrapField(''));
        
        //T025      Account with bank name and address Line number 2        35x
        sb.Append(this.wrapField(''));
        
        //T026      Account with bank name and address Line number 3        35x
        sb.Append(this.wrapField(''));
        
        //T027      Account with bank name and address Line number 4        35x
        sb.Append(this.wrapField(''));
        
        //T028      Beneficiary account number                              34x
        if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM) && mSKS_EFT_FileDetail.DepBankIBAN)   //SKS#DevOps:16228
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34));
        }
        else if(!debitAmount && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #DOM_TEMP)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 34));
        }
        else
        {
            sb.Append(this.wrapField(''));  //SKS#DevOps:16444
        }
        
        //T029      Beneficiary institution identifier                      16x
        sb.Append(this.wrapField(''));
        
        //T030      Beneficiary name and address line number 1              35x
        if(!debitAmount &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #IAT_B_LIST    &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #DOM_TEMP)
        {
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP)
        {
            //T031      Beneficiary name and address line number 2              35x
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));
        
            //T032      Beneficiary name and address line number 3              35x
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 35));
        }
        else
        {
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
        }
        
        //T033      Beneficiary name and address line number 4              35x
        sb.Append(this.wrapField(''));        
        
        //T034      Beneficiary reference                                   18x
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #DOM_URGP     &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #INTL_NORM    &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #INTL_URGP)
        {
            select Name from companyInfo where companyinfo.dataarea == mSKS_eft_filedetail.AccountCompany;

            sb.Append(this.wrapField(companyinfo.Name, 70)); //SKS#DevOps:15637
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T035      FX Deal reference                                       16n
        
        sb.Append(this.wrapField(''));
        
        //T036      FX Deal Exchange Rate                                   15n
        sb.Append(this.wrapField(''));
        
        //T037      Information for the beneficiary line number 1           35x
        sb.Append(this.wrapField(''));
        
        //T038      Information for the beneficiary line number 2           35x
        sb.Append(this.wrapField(''));
        
        //T039      Information for the beneficiary line number 3           35x
        sb.Append(this.wrapField(''));
        
        //T040      Information for the beneficiary line number 4           35x
        sb.Append(this.wrapField(''));
        
        //T041      RTGS Required                                           1a
        sb.Append(this.wrapField(''));
        
        //T042      Credit currency                                         3a
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_NORM    ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_URGP)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
        //T043      Intermediary bank identifier                            16x
        sb.Append(this.wrapField(''));
        
        //T044      Intermediary bank name and address Line number 1        35x
        sb.Append(this.wrapField(''));
        
        //T045      Intermediary bank name and address Line number 2        35x
        sb.Append(this.wrapField(''));
        
        //T046      Intermediary bank name and address Line number 3        35x
        sb.Append(this.wrapField(''));
        
        //T047      Intermediary bank name and address Line number 4        35x
        sb.Append(this.wrapField(''));
        
        //T048      Additional codewords number 1                           4a
        sb.Append(this.wrapField(''));
        
        //T049      Additional codewords text number 1                      29x
        sb.Append(this.wrapField(''));
        
        //T050      Additional codewords number 2                           4a
        sb.Append(this.wrapField(''));
        
        //T051      Additional codewords text number 2                      29x
        sb.Append(this.wrapField(''));
        
        //T052      Additional codewords number 3                           4a
        sb.Append(this.wrapField(''));
        
        //T053      Additional codewords text number 3                      29x
        sb.Append(this.wrapField(''));
        
        //T054      Additional codewords number 4                           4a
        sb.Append(this.wrapField(''));
        
        //T055      Additional codewords text number 4                      29x
        sb.Append(this.wrapField(''));
        
        //T056      Additional codewords number 5                           4a
        sb.Append(this.wrapField(''));
        
        //T057      Additional codewords text number 5                      29x
        sb.Append(this.wrapField(''));
        
        //T058      Additional codewords number 6                           4a
        sb.Append(this.wrapField(''));
        
        //T059      Additional codewords text number 6                      29x
        sb.Append(this.wrapField(''));
        
        //T060      Additional codewords number 7                           4a
        sb.Append(this.wrapField(''));
        
        //T061      Additional codewords text number 7                      29x
        sb.Append(this.wrapField(''));
        
        //T062      Additional codewords number 8                           4a
        sb.Append(this.wrapField(''));
        
        //T063      Additional codewords text number 8                      29x
        sb.Append(this.wrapField(''));
        
        //T064      Additional codewords number 9                           4a
        sb.Append(this.wrapField(''));
        
        //T065      Additional codewords text number 9                      29x
        sb.Append(this.wrapField(''));
        
        //T066      Additional codewords number 10                          4a
        sb.Append(this.wrapField(''));
        
        //T067      Additional codewords text number 10                     29x
        sb.Append(this.wrapField(''));
        
        //T068      Regulatory Reporting Line number 1                      35x
        sb.Append(this.wrapField(''));
        
        //T069      Regulatory Reporting Line number 2                      35x
        sb.Append(this.wrapField(''));
        
        //T070      Regulatory Reporting Line number 3                      35x
        sb.Append(this.wrapField(''));
        
        //T071      Remittance advice indicator                             1a
        sb.Append(this.wrapField(''));
        
        //T072      Remittance advice beneficiary address Line number 1     35x
        sb.Append(this.wrapField(''));
        
        //T073      Remittance advice beneficiary address Line number 2     35x
        sb.Append(this.wrapField(''));
        
        //T074      Remittance advice beneficiary address Line number 3     35x
        sb.Append(this.wrapField(''));
        
        //T075      Remittance advice beneficiary address Line number 4     35x
        sb.Append(this.wrapField(''));
        
        //T076      Remittance advice beneficiary Fax Number                20x
        sb.Append(this.wrapField(''));
        
        //T077      Remittance advice beneficiary Email address             50x
        sb.Append(this.wrapField(''));
        
        //T078      By order of account                                     34x
        sb.Append(this.wrapField(''));
        
        //T079      By order of name                                        35x
        sb.Append(this.wrapField(''));
        
        //T080      By order of address Line number 1                       35x
        sb.Append(this.wrapField(''));
        
        //T081      By order of address Line number 2                       35x
        sb.Append(this.wrapField(''));
        
        //T082      By order of address Line number 3                       35x
        sb.Append(this.wrapField('', 0, false));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;
        
        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            if(strContains(text, ','))
            {
                return strRem(text, ',') + #Separator;
            }
            else
            {
                return text + #Separator;
            }
        }
        else
        {
            if(strContains(text, ','))
            {
                return strRem(text, ',');
            }
            else
            {
                return text;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary&&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>