<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_SUNTRUSTBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_SUNTRUSTBANK_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_SUNTRUSTBANK_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220706')
    #define.Separator(',')
    #define.DoubleQuote('"')

    SKS_EFT_SequenceNumber mSequenceNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    public boolean rec_Payment()
    {
        str debitAcctType;
        str value;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1    Record Type
        sb.Append(this.wrapField('PAYMENT'));

        // 2    Payment Type
        sb.Append(this.wrapField('FW'));

        // 3    Sender's Reference
        sb.Append(this.wrapField(''));

        // 4    Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)));

        // 5    Debit Account #
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 34));

        // 6    Debit Account Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.CurrencyCode));
        
        debitAcctType = SKS_EFT_Format::getCodelookupvalue('DebitAcctType', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        // 7    Debit Account Type
        if(debitAcctType != '')
        {
            sb.Append(this.wrapField(this.CharacterReplacement(debitAcctType), 3));
        }
        else
        {
            sb.Append(this.wrapField('DDA'));
        }

        // 8    Debit Account Bank ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankTransit, 34));

        // 9    Debit Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 0, 0), 13));

        // 10   Ordering Customer ID Type
        sb.Append(this.wrapField(''));

        // 11   Ordering Customer ID
        sb.Append(this.wrapField(''));

        // 12   Ordering Customer Name
        sb.Append(this.wrapField(''));

        // 13   Ordering Customer Address Line 1
        sb.Append(this.wrapField(''));

        // 14   Ordering Customer Address Line 2
        sb.Append(this.wrapField(''));

        // 15   Ordering Customer Address Line 3
        sb.Append(this.wrapField(''));

        // 16   Recipient ID Type
        value = SKS_EFT_Format::getCodelookupvalue('RecipientIDType', mSKS_EFT_FileDetail.RecId);

        if(value)
        {
            sb.Append(this.wrapField(value, 2));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        // 17   Recipient ID
        if(value == 'IB')
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 34));
        }
        
        // 18   Recipient Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35, true, true));

        // 19   Recipient Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 0, true, true));

        // 20   Recipient Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 0, true, true));

        // 21   Recipient Address Line 3
        sb.Append(this.wrapField(''));

        // 22   Recipient Bank ID Type
        value = SKS_EFT_Format::getCodelookupvalue('RecipientBankIDType', mSKS_EFT_FileDetail.RecId);
        
        sb.Append(this.wrapField(value));

        // 23   Recipient Bank ID
        if(value == 'SA')
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo, 34));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 34));
        }

        // 24   Recipient Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 0, true, true));

        // 25   Recipient Bank Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), 35, true, true));

        // 26   Recipient Bank Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), 35, true, true));

        // 27   Recipient Bank Address Line 3
        sb.Append(this.wrapField(''));

        // 28   Details of Payment  Line 1
        sb.Append(this.wrapField(''));

        // 29   Details of Payment  Line 2
        sb.Append(this.wrapField(''));

        // 30   Details of Payment  Line 3
        sb.Append(this.wrapField(''));

        // 31   Details of Payment  Line 4
        sb.Append(this.wrapField(''));

        // 32   Intermediary Bank ID Type
        sb.Append(this.wrapField(''));

        // 33   Intermediary Bank ID
        sb.Append(this.wrapField(''));

        // 34   Intermediary Bank Name
        sb.Append(this.wrapField(''));

        // 35   Intermediary Bank Address Line 1
        sb.Append(this.wrapField(''));

        // 36   Intermediary Bank Address Line 2
        sb.Append(this.wrapField(''));

        // 37   Intermediary Bank Address Line 3
        sb.Append(this.wrapField(''));

        // 38   Reference for Recipient
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 16));

        // 39   Bank to Bank Information Line 1
        sb.Append(this.wrapField(''));

        // 40   Bank to Bank Information Line 2
        sb.Append(this.wrapField(''));

        // 41   Bank to Bank Information Line 3
        sb.Append(this.wrapField(''));

        // 42   Bank to Bank Information Line 4
        sb.Append(this.wrapField(''));

        // 43   Bank to Bank Information Line 5
        sb.Append(this.wrapField(''));

        // 44   Bank to Bank Information Line 6
        sb.Append(this.wrapField(''));

        // 45   Receiving Bank ID Type
        sb.Append(this.wrapField('FW'));

        // 46   Receiving Bank ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_CreditParty.CrePartyBankId, 34));

        // 47   Receiving Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_CreditParty.CrePartyBankName), 0, true, true));

        // 48   Receiving Bank Address Line 1
        sb.Append(this.wrapField(''));

        // 49   Receiving Bank Address Line 2
        sb.Append(this.wrapField(''));

        // 50   Receiving Bank Address Line 3
        sb.Append(this.wrapField('', 0, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //Payment Record
            this.rec_Payment();

            next mSKS_EFT_FileDetail;
        }

        //Trailer Record
        this.rec_Trailer();

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    public boolean rec_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str nextSeqNumber;
        //      File Type
        sb.Append(this.wrapField('PAYMENT'));

        //      Record Type
        sb.Append(this.wrapField('HEADER'));

        //      Creation Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None)));

        //      File Location ID
        sb.Append(this.wrapField(''));

        //      File Sequence Number
        nextSeqNumber = SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId);
        sb.Append(this.wrapField(nextSeqNumber, 4, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    private boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1    File Type
        sb.Append(this.wrapField('PAYMENT'));

        // 2    Record Type
        sb.Append(this.wrapField('TRAILER'));

        // 3    Hash Total
        sb.Append(this.wrapField(''));

        // 4    Record Count
        sb.Append(this.wrapField('', 0, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true, boolean quotes = false)
    {
        str text;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(quotes && text != '' && strContains(text, ','))
        {
            text = #DoubleQuote + text + #DoubleQuote;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
                order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12809
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>