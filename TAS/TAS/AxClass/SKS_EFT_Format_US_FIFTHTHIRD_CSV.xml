<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_FIFTHTHIRD_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_FIFTHTHIRD_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_FIFTHTHIRD_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220701')
    int mRecCount, mPayCount;
    Amount amt,TotalAmt;

    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    //  JPMChase Single-Use Accounts v2.8
    //  PIF Comma Delimited File
    //  Header Record
    //  Payment Record
    //  Detail Record
    //  Trailer Record
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        // Header Record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            this.getSKS_EFT_FileFormatPaymSpec();

            //  Payment Record
            this.rec_Payment();

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                //  Detail Record
                this.rec_Detail(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }

        // Trailer Record
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type
    // 2    Payment Reference Number
    // 3    Function Type
    // 4    Vendor ID
    // 5    Funding Card Alias
    // 6    Payment Amount
    // 7    Payment Valid From Date
    // 8    Payment Valid To Date
    // 9    Payment Usage
    // 10   Custom-Defined Field 4
    // 11   Custom-Defined Field 5
    // 12   Custom-Defined Field 6
    // 13   Custom-Defined Field 7
    // 14   Custom-Defined Field 8
    // 15   Custom-Defined Field 9
    // 16   Custom-Defined Field 10
    // 17   Custom-Defined Field 11
    // 18   Custom-Defined Field 12
    // 19   Custom-Defined Field 13
    // 20   Custom-Defined Field 14
    // 21   Custom-Defined Field 15
    // 22   Custom-Defined Field 16
    // 23   Custom-Defined Field 17
    // 24   Custom-Defined Field 18
    // 25   Custom-Defined Field 19
    // 26   Custom-Defined Field 20
    // 27   Custom-Defined Field 21
    // 28   Custom-Defined Field 22
    // 29   Custom-Defined Field 23
    // 30   Custom-Defined Field 24
    // 31   Custom-Defined Field 25
    // 32   Custom-Defined Field 26
    // 33   Custom-Defined Field 27
    // 34   Custom-Defined Field 28
    // 35   Custom-Defined Field 29
    // 36   Custom-Defined Field 30
    // 37   Minimum Amount
    // 38   Maximum Amount
    // 39   Filler - Spaces

    public boolean rec_Payment()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str pmtUsage;
        pmtUsage = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('PmtUsage', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        
        mRecCount++;

        // 1    Record Type
        sb.Append(this.wrapField('P'));

        // 2    Payment Reference Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference,true, 32));

        // 3    Function Type
        sb.Append(this.wrapField('N'));

        // 4    Vendor ID
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.VendAccount,true, 20, true));

        // 5    Funding Card Alias
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('FundingCardAlias', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), true, 30, true));

        // 6    Payment Amount
        amt = -1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(this.wrapField(num2str(amt,0,2,1,0), true, 9));
        TotalAmt += amt;

        // 7    Payment Valid From Date
        sb.Append(this.wrapField(''));

        // 8    Payment Valid To Date
        sb.Append(this.wrapField(''));

        // 9    Payment Usage
        sb.Append(this.wrapField(pmtUsage));

        // 10   Custom-Defined Field 4
        sb.Append(this.wrapField(''));

        // 11   Custom-Defined Field 5
        sb.Append(this.wrapField(''));

        // 12   Custom-Defined Field 6
        sb.Append(this.wrapField(''));

        // 13   Custom-Defined Field 7
        sb.Append(this.wrapField(''));

        // 14   Custom-Defined Field 8
        sb.Append(this.wrapField(''));

        // 15   Custom-Defined Field 9
        sb.Append(this.wrapField(''));

        // 16   Custom-Defined Field 10
        sb.Append(this.wrapField(''));

        // 17   Custom-Defined Field 11
        sb.Append(this.wrapField(''));

        // 18   Custom-Defined Field 12
        sb.Append(this.wrapField(''));

        // 19   Custom-Defined Field 13
        sb.Append(this.wrapField(''));

        // 20   Custom-Defined Field 14
        sb.Append(this.wrapField(''));

        // 21   Custom-Defined Field 15
        sb.Append(this.wrapField(''));

        // 22   Custom-Defined Field 16
        sb.Append(this.wrapField(''));

        // 23   Custom-Defined Field 17
        sb.Append(this.wrapField(''));

        // 24   Custom-Defined Field 18
        sb.Append(this.wrapField(''));

        // 25   Custom-Defined Field 19
        sb.Append(this.wrapField(''));

        // 26   Custom-Defined Field 20
        sb.Append(this.wrapField(''));

        // 27   Custom-Defined Field 21
        sb.Append(this.wrapField(''));

        // 28   Custom-Defined Field 22
        sb.Append(this.wrapField(''));

        // 29   Custom-Defined Field 23
        sb.Append(this.wrapField(''));

        // 30   Custom-Defined Field 24
        sb.Append(this.wrapField(''));

        // 31   Custom-Defined Field 25
        sb.Append(this.wrapField(''));

        // 32   Custom-Defined Field 26
        sb.Append(this.wrapField(''));

        // 33   Custom-Defined Field 27
        sb.Append(this.wrapField(''));

        // 34   Custom-Defined Field 28
        sb.Append(this.wrapField(''));

        // 35   Custom-Defined Field 29
        sb.Append(this.wrapField(''));

        // 36   Custom-Defined Field 30
        sb.Append(this.wrapField(''));

        // 37   Minimum Amount
        // 38   Maximum Amount
        if(pmtUsage == 'M')
        {
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
        }
        else
        {
            sb.Append(this.wrapField(num2str(amt,0,2,1,0), true, 9));
            sb.Append(this.wrapField(num2str(amt,0,2,1,0), true, 9));
        }

        // 39   Filler - Spaces
        sb.Append(this.wrapField('',false));

        mPayCount++;
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type
    // 2    Total Count of New Payments
    // 3    Sum of New Payment Amounts
    // 4    Total Count of Cancels
    // 5    Sum of Cancel Amounts
    // 6    Total Number of Rows on File
    // 7    Filler - Spaces

    public boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        mRecCount++;

        // 1    Record Type
        sb.Append(this.wrapField('T'));

        // 2    Total Count of New Payments
        sb.Append(this.wrapField(num2str(mPayCount, 0, 0, 0, 0)));

        // 3    Sum of New Payment Amounts
        sb.Append(this.wrapField(num2str(TotalAmt, 0, 2, 1, 0)));

        // 4    Total Count of Cancels
        sb.Append(this.wrapField('0'));

        // 5    Sum of Cancel Amounts
        sb.Append(this.wrapField('0'));

        // 6    Total Number of Rows on File
        sb.Append(this.wrapField(num2str(mRecCount, 0, 0, 0, 0)));

        // 7    Filler - Spaces
        sb.Append(this.wrapField('', false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _addSeparator = true, int _fieldLength = 0, boolean quotes = false)
    {
        str text;
        ;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(quotes && text != '')
        {
            text = #DoubleQuote + text + #DoubleQuote;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type
    // 2    File Type
    // 3    Filler - Space
    // 4    Client ID
    // 5    Filler - Space
    // 6    Date Created
    // 7    Filler - Space
    // 8    Time Created
    // 9    Filler - Spaces

    public boolean rec_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        mRecCount++;

        // 1    Record Type
        sb.Append(this.wrapField('H'));

        // 2    File Type
        sb.Append(this.wrapField('CCPPR'));

        // 3    Filler - Space
        sb.Append(this.wrapField(''));

        // 4    Client ID
        sb.Append(this.wrapField(mSKS_EFT_Bank.WOrdPartyId, true, 6, true));

        // 5    Filler - Space
        sb.Append(this.wrapField(''));

        // 6    Date Created
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::Slash)));

        // 7    Filler - Space
        sb.Append(this.wrapField(''));

        // 8    Time Created
        sb.Append(this.wrapField(time2Str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), TimeSeparator::Colon, TimeFormat::Hour24)));

        // 9    Filler - Spaces
        sb.Append(this.wrapField('', false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type
    // 2    Payment Reference Number
    // 3    Transaction Date
    // 4    Transaction Number
    // 5    Transaction Amount 1
    // 6    Transaction Amount Sign 1
    // 7    Transaction Amount 2
    // 8    Transaction Amount Sign 2
    // 9    Transaction Amount 3
    // 10   Transaction Amount Sign 3
    // 11   Description 1
    // 12   Description 2
    // 13   Description 3
    // 14   Description 4
    // 15   Description 5
    // 16   Description 6
    // 17   Filler - Spaces

    public boolean rec_Detail(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountCur grossAmt;

        mRecCount++;

        // 1    Record Type
        sb.Append(this.wrapField('D'));

        // 2    Payment Reference Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference,true, 32));

        // 3    Transaction Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash)));

        // 4    Transaction Number
        sb.Append(this.wrapField(_invSKS_EFT_FileDetail.InvoiceNumber, true, 25, true));

        // 5    Transaction Amount 1
        sb.Append(this.wrapField(num2str(-1 * _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0), true, 13));

        // 6    Transaction Amount Sign 1
        sb.Append(this.wrapField(''));

        // 7    Transaction Amount 2
        sb.Append(this.wrapField(num2str(-1 * _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur,0,2,1,0), true, 9));

        // 8    Transaction Amount Sign 2
        sb.Append(this.wrapField(''));

        // 9    Transaction Amount 3
        grossAmt = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        sb.Append(this.wrapField(num2str(-1 * grossAmt,0,2,1,0), true, 13));

        // 10   Transaction Amount Sign 3
        sb.Append(this.wrapField(''));

        // 11   Description 1
        sb.Append(this.wrapField(''));

        // 12   Description 2
        sb.Append(this.wrapField(''));

        // 13   Description 3
        sb.Append(this.wrapField(''));

        // 14   Description 4
        sb.Append(this.wrapField(''));

        // 15   Description 5
        sb.Append(this.wrapField(''));

        // 16   Description 6
        sb.Append(this.wrapField(''));

        // 17   Filler - Spaces
        sb.Append(this.wrapField('', false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>