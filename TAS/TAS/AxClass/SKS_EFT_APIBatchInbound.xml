<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_APIBatchInbound</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_APIBatchInbound extends RunBaseBatch
{
    #DEFINE.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the values in the <c>Container</c> parameter.
    /// </summary>
    /// <param name="_packedClass">
    /// A <c>container</c> with a packed version of the class.
    /// </param>
    /// <returns>
    /// true if the class was unpacked using the container; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
    
        [version] = _packedClass;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
    
        if(this.ErrorsExist())
        {
            throw Exception::Error;
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>ErrorsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if error exist.
    /// </summary>
    /// <returns>Returns true if error exist</returns>
    boolean ErrorsExist()
    {
        InfologData locInfoLogData;
        boolean locErrorsExist = false;
        SysInfologEnumerator locSysInfologEnumerator;
    
    
        locInfoLogData = infolog.infologData();
        locSysInfologEnumerator = SysInfologEnumerator::newData(locInfoLogData);
    
        while (locSysInfologEnumerator.moveNext() && !LocErrorsExist)
        {
            if(locSysInfologEnumerator.currentException() == Exception::Error)
            {
                LocErrorsExist = true;
                break;
            }
        }
    
        return LocErrorsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundClassQueryVal</Name>
				<Source><![CDATA[
    public static container getInboundClassQueryVal()
    {
        container retCon;
        DictClass dictClass;

        List listSpecifications;
        ListEnumerator listEnumerator;

        ClassId sksEFTAPIBatchInbound = classNum(SKS_EFT_APIBatchInbound);

        listSpecifications = new DictClass(sksEFTAPIBatchInbound).extendedBy();

        listEnumerator = listSpecifications.getEnumerator();

        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                retCon +=  queryValue(dictClass.id());
            }
        }

        return retCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInboundClass</Name>
				<Source><![CDATA[
    private void lookupInboundClass(FormStringControl _control)
    {
        #ResAppl
        Object  formRun;
        container names;
        DictClass dictClass;
        List listSpecifications;
        ListEnumerator listEnumerator;
        ClassId sksEFTAPIBatchInbound = classNum(SKS_EFT_APIBatchInbound);

        formRun = classFactory.createSysLookupPicklist();
        formRun.init();

        listSpecifications = new DictClass(sksEFTAPIBatchInbound).extendedBy();

        listEnumerator = listSpecifications.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                names += dictClass.name();
            }
        }

        formRun.choices(names, #ImageTable);
        formRun.caption("@SYS60851");

        _control.performFormLookup(formRun);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>