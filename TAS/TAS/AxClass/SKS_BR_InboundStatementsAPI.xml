<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_InboundStatementsAPI</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Bank rec inbound API processing
/// </summary>
class SKS_BR_InboundStatementsAPI extends SKS_EB_Batch
{
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Three loops are needed, two of these are nested. For each Company(looped through in the outer) we process each Bank Account(in the second loop) and in the innermost loop, we process each file for that bank account. There is no way to refactor this without serious loss of code readablity")]
    public void run()
    {
        Batch bat;
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_EB_FileStorage locSKS_EB_FileStorage;
        RefRecId locRefRecID;
        SKS_PP_Setup locSKS_PP_Setup;

        void processBankAccount()
        {
            BankAccountStatement    bankAccStmt;
            TransDate               lookBackDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - locSKS_PP_Bank.LookBackDays - 1;

            if (lookBackDate < locSKS_PP_Bank.FirstStatementDate)
            {
                lookBackDate = locSKS_PP_Bank.FirstStatementDate;
            }

            changeCompany(locSKS_PP_Bank.company())
            {
                BankAccountTable bankAccTable = BankAccountTable::find(locSKS_PP_Bank.BankAccountId);
                while (lookBackDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    select firstonly RecId from bankAccStmt
                        where   bankAccStmt.AccountId               == bankAccTable.AccountID
                        &&      bankAccStmt.AccountStatementDate    == lookBackDate;

                    if (!bankAccStmt.RecId)
                    {
                        SKS_PP_Sys::ABR_ProcessBankAccountViaAPI(locSKS_EB_CommProcess, bankAccTable, locSKS_PP_Bank.BRInCommID, locSKS_PP_Bank.company(),
                                                            locSKS_PP_Bank.BankAccountId, lookBackDate, lookBackDate, bankAccTable.AccountNum,
                                                            bankAccTable.IBAN, bankAccTable.RegistrationNum, bankAccTable.SWIFTNo);
                    }

                    lookBackDate++;
                }
            }

            lookBackDate++;
        
        }

            
        bat = this.parmCurrentBatch();
        locRefRecID = bat.RecId;
        
        select firstonly StorageOption_BR from locSKS_EB_FileStorage;

        while select crossCompany locSKS_EB_CommProcess where locSKS_EB_CommProcess.BatchJobId == locRefRecID
        {
            locSKS_PP_Bank = null;
            locSKS_PP_Setup = null;

            while Select crossCompany locSKS_PP_Bank
                order by locSKS_PP_Bank.dataAreaId, locSKS_PP_Bank.BRPath
                where  locSKS_PP_Bank.BRFormatID != ''
                    && locSKS_PP_Bank.BRInCommID == locSKS_EB_CommProcess.CommID
                    && locSKS_PP_Bank.FirstStatementDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())
                join locSKS_PP_Setup
                    where locSKS_PP_Setup.DataAreaId == locSKS_PP_Bank.DataAreaId
                    && locSKS_PP_Setup.ModBR == NoYes::Yes
            {
                processBankAccount();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Class description
    /// </summary>
    /// <returns>Returns class description</returns>
    static client server ClassDescription description()
    {
        return "@SKS:NewLabel18";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>