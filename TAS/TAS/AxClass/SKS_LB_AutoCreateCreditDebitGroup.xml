<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_AutoCreateCreditDebitGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_LB_AutoCreateCreditDebitGroup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AutoCreateCredit</Name>
				<Source><![CDATA[
    Public CustInvoiceId AutoCreateCredit(CustAccount _InvoiceAccount, CustAccount _OrderAccount, LedgerDimensionDefaultAccount _mainaccount,
        AmountCur _amountcur, CustRef _custRef, CurrencyCode _currency,
        DocumentDate _InvDate, DimensionDefault _defaultDimension, paymDate _PaymentDate,
        taxGroup _TaxGroup, PaymMode _PaymMode, ReasonCode _ReasonCode = '',
        BankChequeNum _paymentNumber = '', SKS_LB_eSettlementInvoices _eSettlementInvoice = '', selectabledataarea CustomerCompany = curext())
    {
        CustInvoiceTable                    custInvoiceTable;
        CustInvoiceTable                    custInvoiceTableRead;
        CustInvoiceLine                     custInvoiceLine;
        CustTable                           custTable;
        
        SKS_LB_AutoCreateCreditDebitGroup   sks_lb_AutoCreateCreditDebitGroup;
        ttsBegin;
        sks_lb_AutoCreateCreditDebitGroup = new SKS_LB_AutoCreateCreditDebitGroup();        
        custTable = custTable::find(_OrderAccount);
        custInvoiceTable.clear();
        custInvoiceTable.InvoiceAccount = _InvoiceAccount;
        custInvoiceTable.OrderAccount = _OrderAccount;
        custInvoiceTable.initFromCustTable(custTable);
        custInvoiceTable.CustomerRef = _custRef;
        custInvoiceTable.CurrencyCode = _currency;
        custInvoiceTable.PostalAddress = custTable.postalAddress().RecId;
        custInvoiceTable.LanguageId = custTable.languageId();
        custInvoiceTable.TaxGroup = _TaxGroup;
        custInvoiceTable.InvoiceDate = _InvDate;
        custInvoiceTable.DefaultDimension = _defaultDimension;
		custInvoiceTable.SKS_LB_PaymentDate = _PaymentDate;
        custInvoiceTable.SKS_LB_eSettlementInvoices = _eSettlementInvoice;
        custInvoiceTable.SKS_LB_PaymentNumber = _paymentNumber;
        CustInvoiceTable.PaymMode = _PaymMode;
        custInvoiceTable.insert();

        custInvoiceLine.clear();
        CustInvoiceLine.initFromCustInvoiceTable(CustInvoiceTable);
        custInvoiceLine.LedgerDimension = _mainaccount;
        custInvoiceLine.Quantity = 1;
        custInvoiceLine.AmountCur = _amountcur;
        custInvoiceLine.TaxGroup = _TaxGroup;
        custInvoiceLine.ParentRecId = custInvoiceTable.RecId;
        custinvoiceline.ReasonRefRecId = this.findReasonRefRecId(_ReasonCode, CustomerCompany);
        custInvoiceLine.insert();

        sks_lb_AutoCreateCreditDebitGroup.custPostInvoicerecord(custInvoiceTable.RecId);
        ttsCommit;
        
        select InvoiceId from custInvoiceTableRead where custInvoiceTableRead.RecId == custInvoiceTable.RecId;

        return custInvoiceTableRead.InvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AutoCreateDebit</Name>
				<Source><![CDATA[
    Public LedgerJournalId AutoCreateDebit(LedgerJournalNameId _LedgerJournalName, LedgerJournalAC _Account, LedgerDimensionDefaultAccount _OffsetDebitAccount, AmountCur _amountcur,
                                            LedgerJournalId _ledgerJournalId, InvoiceId _invoiceId, CurrencyCode _currency, DocumentDate _TransDate, DimensionDefault _defaultDimension, PaymDate _PaymentDate, PaymMode _PaymMode,
                                             ReasonCode _ReasonCode = '',BankChequeNum _paymentNumber = '', SKS_LB_eSettlementInvoices _eSettlementInvoice = '', selectabledataarea CustomerCompany = curext(), PaymTermId _PaymTerm = '', CashDiscCode _CashDiscCode = '',
                                            SKS_LB_ReversingSource _paymTermType = SKS_LB_ReversingSource::Customer, SKS_LB_ReversingSource _cashDiscCodeType = SKS_LB_ReversingSource::Customer)
    {
        ledgerJournalTable      ledgerJournalTable;
        LedgerJournalTrans      ledgerJournalTrans;
        ReasonTable             ReasonTable;

        if (!_ledgerJournalId)
        {
            ledgerJournalTable.clear();
            ledgerJournalTable.JournalName = _LedgerJournalName;
            ledgerJournalTable.initFromLedgerJournalName(ledgerJournalTable.JournalName);
            ledgerJournalTable.CurrencyCode = _currency;
            ledgerJournalTable.insert();
            _ledgerJournalId = ledgerJournalTable.JournalNum;
        }
        else
        {
            ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalId);
        }

        LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine_Daily::construct();
        ledgerJournalEngine.ledgerJournalTable(ledgerJournalTable);
        ledgerJournalEngine.newJournalActive(ledgerJournalTable);

        ledgerJournalTrans.clear();
        ledgerJournalTrans.initValue();
        ttsbegin;
        ledgerJournalEngine.initValue(ledgerJournalTrans);
        ttscommit;
        ledgerJournalTrans.JournalNum = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.AccountType = LedgerJournalACType::Cust;
        ledgerJournalTrans.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_Account, LedgerJournalACType::Cust);

        ledgerJournalEngine.accountModified(ledgerJournalTrans);
        ledgerJournalEngine.initTaxItemGroup(ledgerJournalTrans);
        ledgerJournalTrans.CurrencyCode = _currency;
        ledgerJournalTrans.TransDate = _TransDate;
        ledgerJournalTrans.DocumentDate = _TransDate;        
        if(_amountCur > 0)
        {
            LedgerJournalTrans.AmountCurCredit = _amountcur;
        }
        else
        {
            LedgerJournalTrans.AmountCurDebit = (_amountcur * -1);
        }
        ledgerJournalTrans.DefaultDimension = _defaultDimension;
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetLedgerDimension = ledgerJournalTrans.getOffsetLedgerDimensionForLedgerType(_OffsetDebitAccount, curext());     
        select firstonly Description from ReasonTable where ReasonTable.Reason == _ReasonCode;
        LedgerJournalTrans.ReasonRefRecID = ReasonTableRef::createReasonTableRef(_ReasonCode, ReasonTable.Description);
        ledgerJournalTrans.Invoice = _invoiceId;
        LedgerJournalTrans.SKS_LB_eSettlementInvoices = _eSettlementInvoice;
        LedgerJournalTrans.SKS_LB_PaymentNumber = _paymentNumber;
        LedgerJournalTrans.SKS_LB_PaymentDate = _PaymentDate;
        LedgerJournalTrans.PaymMode = _PaymMode;

        if (_paymTermType == SKS_LB_ReversingSource::Specific
            || (_paymTermType == SKS_LB_ReversingSource::Customer
                && _PaymTerm))
        {
            LedgerJournalTrans.Payment = _PaymTerm;
            ledgerJournalEngine.paymentModified(LedgerJournalTrans);
        }

        if (_cashDiscCodeType == SKS_LB_ReversingSource::Specific
            || (_cashDiscCodeType == SKS_LB_ReversingSource::Customer
                && _CashDiscCode))
        {
            LedgerJournalTrans.CashDiscCode = _CashDiscCode;
            ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans);
            ledgerJournalEngine.cashDiscCodeModified(ledgerJournalTrans);
            ledgerJournalEngine.updateCashDiscDetail(ledgerJournalTrans, false);
        }

        ledgerJournalTrans.insert();

        return _ledgerjournalid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custPostInvoicerecord</Name>
				<Source><![CDATA[
    public void custPostInvoicerecord(CustInvoiceTableRefRecId _CustInvoiceTableRefRecId)
    {
        CustPostInvoice                 custPostInvoice;
        CustInvoiceTable                custInvoiceTable;
        SourceDocumentHeader            sourceDocumentHeader;
        CustFreeInvoiceCorrectionPost   custFreeInvoiceCorrectionPost;
    
    
       // recordSortedList    = new RecordSortedList(tableNum(CustInvoiceTable));
       // recordSortedList.sortOrder(fieldNum(CustInvoiceTable,_recordid));
        select * from custInvoiceTable where custInvoiceTable.RecId == _CustInvoiceTableRefRecId;
        custPostInvoice     = new CustPostInvoice(custInvoiceTable,
                                                  TypeOfCreditmaxCheck::None,
                                                  NoYes::NO);
    
    
        //progressTotal = QueryRun::getQueryRowCount(queryRun.query(), intMax());
    
    
        setPrefix("@SYS25781");
    
    
        sourceDocumentHeader = SourceDocumentHeader::find(custInvoiceTable.SourceDocumentHeader);
    
    
        custPostInvoice.parmAreDistributionsNeeded(true);
    
    
        setPrefix(#PreFixField(custInvoiceTable, invoiceAccount));
    
    
        custPostInvoice.parmCustInvoiceTable(custInvoiceTable);
    
            // Before posting a corrected invoice run additional validation and make changes to the parent invoice.
        if (custInvoiceTable.isCorrectedInvoice())
        {
            try
            {
                ttsbegin;
    
                custFreeInvoiceCorrectionPost = CustFreeInvoiceCorrectionPost::newCorrectedInvoice(custInvoiceTable);
    
                custFreeInvoiceCorrectionPost.post();
    
                // post corrected invoice.
                custPostInvoice.run();
    
                if (custPostInvoice.isPostingOK())
                {
                    custFreeInvoiceCorrectionPost.settleCorrectedInvoice();
                }
                else
                {
                    throw Exception::Error;
                }
    
                ttscommit;
            }
            catch
            {
                ttsabort;
            }
        }
    
        // Execute posting process only if FTI workflow approval status is 'Approved' or blank
        else if (custInvoiceTable.WorkflowApprovalStatus == CustFreeInvoiceWFApprovalStatus::Approved ||
                custInvoiceTable.WorkflowApprovalStatus == 0)
        {
            custPostInvoice.run();
        }
    
        else
        {
            info("@SYS311635");
            error("@SYS25904");
        }
    
        // Auto generation of payment - setup on Accounts receivable methods of payment
        if (custPostInvoice.isPostingOK())
        {
            if (CustPaymModeTable::find(custInvoiceTable.PaymMode).PaymOnInvoice)
            {
                CustVendPaymInvoiceWithJournal::construct(custPostInvoice.parmCustInvoiceTable().custInvoiceJour()).run();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReasonRefRecId</Name>
				<Source><![CDATA[
    public ReasonRefRecID findReasonRefRecId(ReasonCode _ReasonCode = '', selectabledataarea customerCompany = curext())
    {
        ReasonTable     ReasonTable;
        int64           reasonrecid;

        changeCompany(customerCompany)
        {
            select firstOnly Description from ReasonTable where ReasonTable.reason == _ReasonCode;
            reasonrecid = ReasonTableRef::createReasonTableRef(_ReasonCode, ReasonTable.Description);
        }

        return reasonrecid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>