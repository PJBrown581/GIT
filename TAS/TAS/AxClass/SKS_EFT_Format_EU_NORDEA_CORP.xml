<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_NORDEA_CORP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_EU_NORDEA_CORP  extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_EU_NORDEA_CORP  extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230509')
    #define.P_PPOR('P-PPOR')
    #define.P_PPNOR_CN('P-PPNOR-CN')
    #define.P_PPFTR('P-PPFTR')
    #define.P_PBOR('P-PBOR')
    #define.P_PBNOR('P-PBNOR')
    #define.P_PBFTR('P-PBFTR')
    #define.P_PBAFTR_U('P-PBAFTR-U')
    #define.P_PBAFTR_P('P-PBAFTR-P')
    #define.IC_PBAFTR('IC-PBAFTR')
    #define.CBP_FTRR('CBP-FTRR')
    #define.CBP_FTR('CBP-FTR')
    #define.P_XPRS('P-XPRS')
    #define.P_ICPCB('P-ICPCB')

    #define.P_KIDR('P-KIDR')
    #define.P_KIDR_CN('P-KIDR-CN')
    #define.P_TNR_CN('P-TNR-CN')
    #define.P_FTWR('P-FTWR')
    #define.P_FTWOR('P-FTWOR')
    #define.ICPS_HV('ICPS-HV')

    #define.CTRF('CTRF')
    #define.STRF('STRF')
    #define.FIK71('FIK71')
    #define.FIK73('FIK73')
    #define.FIK75('FIK75')
    #define.GIRO01('GIRO-01')       //SKS#VSTS:14110
    #define.GIRO04('GIRO-04')       //SKS#VSTS:14110
    #define.GIRO15('GIRO-15')       //SKS#VSTS:14110
    #define.INTC('INTC')
    #define.CB_SEPA('CB-SEPA')
    #define.XPRS('XPRS')
    #define.IC_CBP('IC-CBP')

    #define.SEPA_OCR('SEPA-OCR')            //SKS#VSTS:14685
    #define.SEPA_NOCR('SEPA-NOCR')          //SKS#VSTS:14685
    #define.UG_POPS('UG-POPS')              //SKS#VSTS:14685
    #define.INTC_FI('INTC-FI')              //SKS#VSTS:14685
    #define.SEPA_FI('SEPA-FI')              //SKS#VSTS:14685
    #define.SALA('SALA')                    //SKS#VSTS:14685
    #define.PENS('PENS')                    //SKS#VSTS:14685
    #define.MNYORD('MNYORD')                //SKS#VSTS:14685

    #define.CPR('CPR')                //SKS#DevOps:15035
    #define.CVR('CVR')                //SKS#DevOps:15035
    #define.SEPA('SEPA')                //SKS#DevOps:21564

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        PaymMode        prevPaymMode;
        PaymSpec        prevPaymSpec;
        CurrencyCode    prevCurrency;
        AddressCountryRegionId prevCountry;
        CompanyBankAccountId    prevBankAccountId;
        SKS_EB_Date             prevEffectiveDate;  //SKS_VSTS_13110
        DataAreaId              prevAcctCompany;        //SKS#DevOps:22013
    
        xmlDoc = XmlDocument::newBlank();
    
        this.node_MessageRoot();
    
        this.node_GrpHdr();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get SKS_EFT_Bank
                this.getSKS_EFT_Bank();
    
                // Get Bank account
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));
    
            if(prevBankAccountId != mSKS_EFT_FileDetail.BankAccountId ||
               prevPaymMode != mSKS_EFT_FileDetail.PaymMode ||
               prevPaymSpec != mSKS_EFT_FileDetail.PaymSpec ||
               prevCurrency != mSKS_EFT_FileDetail.PaymentCurrencyCode ||
               prevCountry  != mSKS_EFT_VendorPaym.WBenBankCountryRegionId ||
               prevEffectiveDate != mSKS_EFT_FileDetail.EffectiveDate ||       //SKS_VSTS_13110
               prevAcctCompany != mSKS_EFT_FileDetail.AccountCompany)        //SKS#DevOps:22012
            {
                this.node_PmtInf();
    
                prevBankAccountId = mSKS_EFT_FileDetail.BankAccountId;
                prevPaymMode = mSKS_EFT_FileDetail.PaymMode;
                prevPaymSpec = mSKS_EFT_FileDetail.PaymSpec;
                prevCurrency = mSKS_EFT_FileDetail.PaymentCurrencyCode;
                prevCountry  = mSKS_EFT_VendorPaym.WBenBankCountryRegionId;
                prevEffectiveDate = mSKS_EFT_FileDetail.EffectiveDate; //SKS_VSTS_13110
                prevAcctCompany   = mSKS_EFT_FileDetail.AccountCompany;        //SKS#DevOps:22012
            }
    
            //Get Addenda information
            this.setAddenda();
    
            this.node_CdtTrfTxInf();
    
            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    private str getInvoiceDetails()
    {
        SKS_EFT_FileDetail  invSKS_EFT_FileDetail;
        str                 invDetailsString;
        boolean             invDetailsParm3;
        boolean             invDetailsParm4;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPFTR:
                    case #P_PBFTR:
                    case #CBP_FTRR:
                    case #CBP_FTR:
                    case #P_XPRS:
                    case #P_ICPCB:
                        invDetailsParm4 = true;
                        break;
                    default:
                        invDetailsParm3 = true;
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CTRF:
                    case #STRF:
                    case #XPRS:
                    case #IC_CBP:
                    case #GIRO01:
                        invDetailsParm4 = true;
                        break;
                    default:
                        invDetailsParm3 = true;
                        break;
                }
                break;
            default:
                invDetailsParm3 = true;
                break;
        }
        
        while select InvoiceNumber, EffectiveDate, InvoiceSettleAmountPmtCur, PaymentCurrencyCode from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
               && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(invDetailsParm4)
            {
                invDetailsString += strFmt('%1,%2,%3 %4, ', invSKS_EFT_FileDetail.InvoiceNumber, invSKS_EFT_FileDetail.EffectiveDate, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), invSKS_EFT_FileDetail.PaymentCurrencyCode);
            }
            else if(invDetailsParm3)
            {
                invDetailsString += strFmt('%1, %2 %3, ', invSKS_EFT_FileDetail.InvoiceNumber, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), invSKS_EFT_FileDetail.PaymentCurrencyCode);
            }
        }    
        if(invDetailsString)
        {
            invDetailsString = strReplace(subStr(invDetailsString, 1, strLen(invDetailsString)-2), '/','.');
        }
        return this.CharacterReplacement(invDetailsString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
    
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mRemittanceName), 70);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //          or
        //              PrvtId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------

        XmlElement  nodeId;
        XmlElement  nodeOrgPrvtId;
        XmlElement  nodeOthr;
        XmlElement  nodeSchmeNm;
        str         id, schmeNm;
        int         length;
        boolean     orgnId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':           //SKS#DevOps:15035
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CPR:
                        id          =   mSKS_EFT_FileDetail.DepBankAcct;
                        length      =   10;
                        schmeNm     =   'SOSE';
                        break;
                    case #CVR:
                        id          =   mSKS_EFT_FileDetail.DepBankAcct;        //SKS#DevOps:15358
                        orgnId      =   true;
                        length      =   8;
                        schmeNm     =   'TXID';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MNYORD:
                        id          =   mSKS_EFT_FileDetail.AccountNum;
                        schmeNm     =   'SOSE';
                        break;
                }
                break;
        }
        if(id)
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

            if(orgnId)
            {
                nodeOrgPrvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
            }
            else
            {
                nodeOrgPrvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
            }

            nodeOthr = nodeOrgPrvtId.appendChild(xmlDoc.createElement('Othr'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', this.CharacterReplacement(id), length);

            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schmeNm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrSchmeNm;
        str iban, acctNum;
        str schmeNm;
        boolean printCd;
        boolean printPrtry;
    
        iban    =   mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum =   mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FIK71:
                    case #GIRO01:
                    case #GIRO04:
                    case #GIRO15:
                    case #FIK75://DevOps19583
                    case #FIK73://DevOps20399
                        schmeNm     = 'OCR';
                        printPrtry  = true;
                        break;
                    case #INTC:     //SKS#DevOps:15489
                        if(strLen(mSKS_EFT_FileDetail.DepBankAcct) == 14)
                        {
                            acctNum = subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 14);
                        }
                        else
                        {
                            acctNum = subStr(mSKS_EFT_FileDetail.DepBankTransit, strLen(mSKS_EFT_FileDetail.DepBankTransit), -4) + subStr(mSKS_EFT_FileDetail.DepBankAcct, strLen(mSKS_EFT_FileDetail.DepBankAcct), -10);
                        }
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                    case #STRF:
                        if(strLen(mSKS_EFT_FileDetail.DepBankAcct) == 14)
                        {
                            acctNum = subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 14);
                        }
                        else
                        {
                            acctNum = subStr(mSKS_EFT_FileDetail.DepBankTransit, strLen(mSKS_EFT_FileDetail.DepBankTransit), -4) + subStr(mSKS_EFT_FileDetail.DepBankAcct, strLen(mSKS_EFT_FileDetail.DepBankAcct), -10);
                        }
                        if(acctNum)
                        {
                            iban = '';
                        }
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                    case #CTRF:
                        if(strLen(mSKS_EFT_FileDetail.DepBankAcct) == 14)
                        {
                            acctNum = subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 14);
                        }
                        else
                        {
                            acctNum = subStr(mSKS_EFT_FileDetail.DepBankTransit, strLen(mSKS_EFT_FileDetail.DepBankTransit), -4) + subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 10);
                        }
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                    case #CB_SEPA:                  //SKS#DevOsp:17567
                    case #SEPA:
                        if(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)  == 'US')
                        {
                            iban = '';
                        }
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                    case #CVR:
                    case #CPR:
                        iban = '';
                        acctNum = 'NOTPROVIDED';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MNYORD:
                        iban = '';
                        acctNum = 'NOTPROVIDED';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PBOR:
                    case #P_PBNOR:
                    case #P_PBFTR:              //SKS#DevOps:20894
                        schmeNm     = 'BGNR';
                        printPrtry  = true;
                        break;
                    case #CBP_FTRR: //DevOps19638
                    case #P_PPFTR:
                    case #P_PPNOR_CN:
                    case #P_PPOR:
                    case #P_XPRS:
                    case #P_PBAFTR_U:
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                }
                break;
            default:
                schmeNm = 'BBAN';
                printCd = true;
                break;
        }
        if((iban || acctNum)&&
           (mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && 
            subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK'))
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
                    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', acctNum);

                if(printPrtry || printCd)
                {
                    //                      SchmeNm
                    nodeCdtrSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
                    if(printPrtry)
                    {
                        //                          Prtry
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Prtry', schmeNm);
                    }
                    else if(printCd)
                    {
                        //                          Cd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Cd', schmeNm);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //---------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        boolean printCdtrAgt = true;
        boolean printCdtrAgtNm = true;
        boolean printPstlAddr = true;
        boolean printClrsysMmId;
        str swift, rtg;

        swift   =   mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =   mSKS_EFT_FileDetail.DepBankTransit;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {   
                    case #SEPA_OCR:
                    case #SEPA_NOCR:
                    case #UG_POPS:
                    case #SALA:
                    case #PENS:
                    case #SEPA_FI:
                    case #MNYORD:
                        printCdtrAgt  = false;
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    
                    case #IC_PBAFTR:
                    case #P_PBFTR:
                    case #P_PBNOR:
                        printCdtrAgt  = false;
                        break;
                    case #CBP_FTRR:
                        printClrsysMmId = true;
                        break;
                }
                break;
        }

        if((swift || rtg) && printCdtrAgt)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(swift)
            {
                //           BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);

                if(printClrsysMmId)
                {
                    //       ClrSysMmbId
                    this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
                }
            }
            else if(rtg)
            {
                //       ClrSysMmbId
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }
    
            if(printCdtrAgtNm && mSKS_EFT_FileDetail_BenBank.BenBankName)
            {
                //               Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 0, false);
            }
            if(printPstlAddr)
            {
                //               PstlAdr
                this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          ClrSysMmbId
        //              ClrSysId
        //                  Cd
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str clrSysId;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBP_FTRR:
                        clrSysId = 'USABA';
                        break;
                }
        }
        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            //          ClrSysMmbId
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
            if(clrSysId)
            {
                //              ClrSysId
                nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
    
                //                  Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', clrSysId, 0);
            }
    
            //          MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift)
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purpose</Name>
				<Source><![CDATA[
    private void node_CdtTrfTxInf_Purpose(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.88: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodePurp;
        boolean     printCd;
        boolean     printPrtry;
        str         value;    
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALA:
                    case #PENS:
                        printCd =   true;
                        value   =   mSKS_EFT_FileFormatPaymSpec.TransactionCode;
                        break;
                }
                break;
            default:
                value       =   this.getInvoiceNbrs();
                printPrtry  =   true;
                break;
        }
        if(value)
        {
            //          2.88: Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
    
            if(printCd)
            {
                //              2.99: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Cd', value);
            }
            else if(printPrtry)
            {
                //              2.99: Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Prtry', value, 12);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeRgltryRptg;
        XmlElement nodeDtls;
        LedgerJournalTrans      ledgerJournalTrans;
        BankCentralBankPurpose  bankCentralBankPurpose;
        boolean printRgltryRptg = false;//SKS_VSTS_13514 -->
        str name, code, text;
    
        select firstonly bankCentralBankPurpose join BankCentralBankPurposeCode from ledgerJournalTrans
            where bankCentralBankPurpose.Code == ledgerJournalTrans.BankCentralBankPurposeCode
               && ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
      
        name = bankCentralBankPurpose.Name;
        code = bankCentralBankPurpose.Code;
        text = bankCentralBankPurpose.Text;//DevOps21724

        Switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-SE' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #IC_PBAFTR:
                        printRgltryRptg = false;
                        break;
                    default:
                        if((msks_eft_FileDetail.PaymentCurrencyCode == 'SEK'            &&
                            mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1 >= 150)   ||
                            (msks_eft_FileDetail.PaymentCurrencyCode == 'NOK'           ||
                             msks_eft_FileDetail.PaymentCurrencyCode == 'EUR'           ||
                             msks_eft_FileDetail.PaymentCurrencyCode == 'GBP'           ||
                             msks_eft_FileDetail.PaymentCurrencyCode == 'USD'           ||
                             msks_eft_FileDetail.PaymentCurrencyCode == 'DKK'))          //SKS#DevOps:17012
                        {
                            printRgltryRptg = true;

                            if(mModule == SKS_EFT_Module::BTB)
                            {
                                text = SKS_EFT_Format::getCodelookupvalue('BTBRgltryRptg', mSKS_EFT_FileDetail.RecId);
                            }
                        }
                        else
                        {
                            printRgltryRptg = false;
                        }
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-NO' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ICPS_HV:
                        printRgltryRptg = false;
                        break;
                    default:
                        if((msks_eft_FileDetail.PaymentCurrencyCode == 'NOK'            &&
                            mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1 >= 100)   ||
                           (msks_eft_FileDetail.PaymentCurrencyCode == 'SEK'            ||
                            msks_eft_FileDetail.PaymentCurrencyCode == 'EUR'            ||
                            msks_eft_FileDetail.PaymentCurrencyCode == 'GBP'            ||
                            msks_eft_FileDetail.PaymentCurrencyCode == 'USD'            ||
                            msks_eft_FileDetail.PaymentCurrencyCode == 'DKK'))          //SKS#DevOps:17012
                        {
                            printRgltryRptg = true;

                            if(mModule == SKS_EFT_Module::BTB)
                            {
                                text = SKS_EFT_Format::getCodelookupvalue('BTBRgltryRptg', mSKS_EFT_FileDetail.RecId);
                            }
                        }
                        else
                        {
                            printRgltryRptg = false;
                        }
                        break;
                }
                break;
            default:
                printRgltryRptg = true;
                break;
        }
    
        if(printRgltryRptg && (code || text))
        {
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRgltryRptg, 'DbtCdtRptgInd', 'DEBT');
            nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));

            if(code)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(code));
            }

            if(text)
            {
                if(mSKS_EFT_FileDetail.FormatId == 'EU-NORDEA-CORP-SE' || mSKS_EFT_FileDetail.FormatId == 'EU-NORDEA-CORP-NO')//DevOps21561 // DevOPs 21563
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(text),35);

                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(text));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        boolean printRmtinf = true;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO01:
                    case #GIRO04:
                    case #GIRO15:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    case #CTRF:
                    case #STRF:
                    case #INTC:
                    case #CB_SEPA:
                    case #SEPA:
                    case #XPRS:
                    case #IC_CBP:
                        this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_OCR:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_FTWOR:
                        printRmtInf = false;
                        break;
                    case #P_KIDR:
                    case #P_KIDR_CN:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    case #ICPS_HV:
                        this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
                        break;
                    case #P_TNR_CN:
                        this.node_CdtTrfTxInf_RmtInf_NoneOCR(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPOR:
                    case #P_PBOR:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;                    
                    case #P_PPFTR:
                    case #P_PBFTR :
                    case #IC_PBAFTR:
                    case #CBP_FTR:
                    case #P_XPRS:
                    case #P_ICPCB:
                        this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
                        break;
                    case #P_PBAFTR_P:
                        this.node_CdtTrfTxInf_Purpose(_nodeCdtTrfTxInf);
                        break;
                    case #P_PBNOR:
                    case #P_PPNOR_CN:
                        this.node_CdtTrfTxInf_RmtInf_NoneOCR(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            default:
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement      nodeRmtInf;
        XmlElement      nodeStrd;
        XmlElement      nodeRfrdDocAmt;
        boolean         firstRec = true;
        str             invDetailsString;
        boolean         firstUstrd = true;
        boolean         printUstrd;
        boolean         printRfrdDocAmt;
        boolean         printCdtrRefInf;

    
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
            {
                case 'EU-NORDEA-CORP-DK':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #FIK75:
                        case #GIRO01:
                            printUstrd      = true;
                            printCdtrRefInf    = true;
                            break;
                        case #FIK71:
                        case #GIRO04:
                        case #GIRO15:
                        case #FIK73://DevOps20399
                            printCdtrRefInf    = true;
                            break;
                    }
                    break;
                case 'EU-NORDEA-CORP-FI':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #SEPA_OCR:
                            printCdtrRefInf    = true;
                            break;
                    }
                    break;
                case 'EU-NORDEA-CORP-NO':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #P_KIDR_CN:
                        case #P_KIDR:
                            printRfrdDocAmt = true;
                            printCdtrRefInf    = true;
                            break;
                    }
                    break;
                case 'EU-NORDEA-CORP-SE':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #P_PPOR:
                        case #P_PBOR:
                            printRfrdDocAmt = true;
                            printCdtrRefInf    = true;
                            break;
                    }
                    break;
            }
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }
            if(firstUstrd && printUstrd)                      //SKS#VSTS:14110
            {
                invDetailsString = this.getInvoiceDetails();
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', strReplace(invDetailsString, '/', '.'), 140);
                firstUstrd = false;
            }
            //              2.100: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
                
            if(printRfrdDocAmt)
            {
                //              2.109 RfrdDocAmt
                nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
    
                this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
            }
            if(printCdtrRefInf)
            {
                this.node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf
    /// </summary>
    /// <param name = "nodeStrd">nodeStrd</param>
    /// <param name = "invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    protected void node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf(XmlElement nodeStrd, SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        XmlElement  nodeCdtrRefInf;
        XmlElement  nodeTp;
        XmlElement  nodeCdOrPrtry;
        str         fik, issr;

        fik = invSKS_EFT_FileDetail.PaymId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FIK71:
                        if(fik == '71')
                        {
                            fik = '71/' + SKS_PP_StringFormats::strFill(15, subStr(invSKS_EFT_FileDetail.PaymId, 5, 15), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                        }
                        else
                        {
                            fik = '71/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 15);
                        }
                        break;
                    case #FIK75:
                        if(fik == '75')
                        {
                            fik = '75/' + SKS_PP_StringFormats::strFill(16, subStr(invSKS_EFT_FileDetail.PaymId, 5, 16), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                        }
                        else
                        {
                            fik = '75/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                        }
                        break;
                    case #FIK73:
                        fik = '73';//DevOps21767
                        break;
                    case #GIRO01:               //SKS#VSTS:14110
                        fik = '01';//DevOps21767
                        break;
                    case #GIRO04:               //SKS#VSTS:14110
                        if(fik == '04')
                        {
                            fik = '04/' + SKS_PP_StringFormats::strFill(16, subStr(invSKS_EFT_FileDetail.PaymId, 5, 16), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                        }
                        else
                        {
                            fik = '04/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                        }
                        break;
                    case #GIRO15:               //SKS#VSTS:14110
                        if(fik == '15')
                        {
                            fik = '15/' + SKS_PP_StringFormats::strFill(16, subStr(invSKS_EFT_FileDetail.PaymId, 5, 16), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                        }
                        else
                        {
                            fik = '15/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                        }
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_OCR:               //SKS#VSTS:14685
                        fik     =   subStr(invSKS_EFT_FileDetail.PaymId, 1, 25);
                        issr    =   'ISO';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-SE'://SKS#VSTS:19638
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPOR:               
                        fik     =   invSKS_EFT_FileDetail.PaymId;
                        break;
                }
                break;
        }
        if(fik)
        {
            //            2.120: CdtrRefInf
            nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
    
            //              2.121: Tp
            nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
    
            //                  2.122: CdOrPrtry
            nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
            //                      2.123: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');

            if(issr)                //SKS#VSTS:14685
            {
                //                      2.125: Issr
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Issr', issr);
            }
    
            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', fik, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_NoneOCR</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_NoneOCR
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_NoneOCR(XmlElement _nodeCdtTrfTxInf)
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail,invSKS_EFT_FileDetailNoneOCR;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        XmlElement nodeRfrdDocAmt;
        XmlElement nodeRmtInf;
        boolean firstRec = true;
    
        select count(PaymentLineRecId) from invSKS_EFT_FileDetailNoneOCR where invSKS_EFT_FileDetailNoneOCR.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        if(invSKS_EFT_FileDetailNoneOCR.PaymentLineRecId == 1 && mSKS_EFT_FileDetail.PaymSpec != 'P-PPNOR-CN')//DevOps19638
        {
            this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
        }
        else
        {
            while select  invSKS_EFT_FileDetail
                where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                   && invSKS_EFT_FileDetail.InvoiceNumber != ''
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
    
                //               2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
                //              2.101: RfrdDocInf
                nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
                //              2.121: Tp
                nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
                //                  2.122: CdOrPrtry
                nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
                //              2.104: Cd
                if(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');
    
                    //               2.126: Ref
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', invSKS_EFT_FileDetail.InvoiceNumber, 0, false);
                    //              2.108: RltdDt
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
                    //               2.126: Ref
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', invSKS_EFT_FileDetail.InvoiceNumber, 0, false);
                    //              2.108: RltdDt
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
                }
                //              2.109 RfrdDocAmt
                nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
    
                this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_UstrdParms</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_UstrdParms
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_UstrdParms(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invDetailsString;
    
        invDetailsString = this.getInvoiceDetails();
    
        if(invDetailsString)
        {
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', strReplace(invDetailsString,'/','.'), 140);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invDetailsString;
    
        invDetailsString = this.getInvoiceNbrs();

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBP_FTRR:
                        if(mModule == SKS_EFT_Module::BTB)
                        {
                            msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

                            if(msks_EFT_FileDetail_PaymentLine.TransactionTxt)
                            {
                                invDetailsString = msks_EFT_FileDetail_PaymentLine.TransactionTxt;
                            }
                            else
                            {
                                invDetailsString = mSKS_EFT_FileDetail.BankBankIBAN;
                            }
                        }
                        break;
                }
        }        
    
        if(invDetailsString)
        {
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            if(mSKS_EFT_FileDetail.PaymSpec == #P_PBAFTR_U)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invDetailsString, 12);//DevOps20178

            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invDetailsString, 140);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //                      9.1.17: SchmeNm
        //                          9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str SenderId;
    
        SenderId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SenderId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(SenderId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(SenderId), 35);
    
            //                      9.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                          9.1.18: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;

    
        batchCount++;
    
        if(mModule == SKS_EFT_Module::AP)
        {
            // Select count and sum
            select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur), AccountCompany, AccountNum, PaymMode, PaymSpec, DepBankAccountId from tmpSKS_EFT_FileDetail
                where
                      tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                      tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                      tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                      tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                      tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&        //SKS_VSTS_13110
                      tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                      tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                      tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode&&
                      tmpSKS_EFT_FileDetail.AccountCompany == mSKS_EFT_FileDetail.AccountCompany         //SKS#DevOps:22012
                 join WBenBankCountryRegionId, VendBankAccountId, PaymSpec, PaymMode, VendAccount, VendCompany from lSKS_EFT_VendorPaym
                where
                      lSKS_EFT_VendorPaym.VendCompany == tmpSKS_EFT_FileDetail.AccountCompany &&
                      lSKS_EFT_VendorPaym.VendAccount == tmpSKS_EFT_FileDetail.AccountNum &&
                      lSKS_EFT_VendorPaym.PaymMode == tmpSKS_EFT_FileDetail.PaymMode &&
                      lSKS_EFT_VendorPaym.PaymSpec == tmpSKS_EFT_FileDetail.PaymSpec &&
                      lSKS_EFT_VendorPaym.VendBankAccountId == tmpSKS_EFT_FileDetail.DepBankAccountId &&
                      lSKS_EFT_VendorPaym.WBenBankCountryRegionId == mSKS_EFT_VendorPaym.WBenBankCountryRegionId;
        }
        else
        {
            // Select count and sum for this bank account
            select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode;
        }
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }

        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);
    
        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    
        //      2.5: CtrlSum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        //      2.17: ReqdExctnDt
        if(mSKS_EFT_FileFormatPaymSpec.FormatId == 'EU-NORDEA-CORP-DK')     //SKS#DevOps:16488
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::Hyphen));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
    
        //      2.19: Dbtr
        this.node_PmtInf_Dbtr(nodePmtInf);
    
        //      2.20: DbtrAcct
        this.node_PmtInf_DbtrAcct(nodePmtInf);
    
        //      2.21: DbtrAgt
        this.node_PmtInf_DbtrAgt(nodePmtInf);

        //      2.23: UltmtDbtr
        this.node_PmtInf_UltmtDbtr(nodePmtInf); //SKS#DevOps:20179, 20180, 20182
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        boolean     printStrdPstlAdr;
        boolean     printUstrdPstlAdr;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case  #INTC_FI:
                    case  #SEPA_FI:
                    case  #MNYORD:
                        printStrdPstlAdr = true;
                        break;
                    default:
                        printUstrdPstlAdr = true;
                        break;
                }
                break;
            default:
                printUstrdPstlAdr = true;
                break;
        }

        if(printStrdPstlAdr)
        {
            this.node_PstlAdr(_nodeCdtr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr, mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, mSKS_EFT_FileDetail_VendAddress.BeneCity, 0, mSKS_EFT_FileDetail_VendAddress.BeneAddr2, mSKS_EFT_FileDetail_VendAddress.BeneState, true);
        }
        else if(printUstrdPstlAdr)
        {
            this.node_PstlAdr(_nodeCdtr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr, mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, mSKS_EFT_FileDetail_VendAddress.BeneCity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CB_SEPA:
                    case #SEPA:
                        value = 'SHAR';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_OCR:
                    case #SEPA_NOCR:
                        value = 'SLEV';
                        break;
                    case #UG_POPS:
                    case #INTC_FI:
                    case #SEPA_FI:
                    case #SALA:
                    case #PENS:
                    case #MNYORD:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-NO':           //SKS#DevOps:17977
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
                break;
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBP_FTR:
                        value = 'SHAR';
                        break;
                    default:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }
        if(value)
        {
            //      2.24 ChrgBr
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', value, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchmeNm
        //                          Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str        BankId;
        boolean    printDbtrId;
    
        BankId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BankId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #STRF:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO01:
                    case #GIRO04:
                    case #GIRO15:
                    case #INTC:
                    case #CB_SEPA:
                    case #SEPA:
                    case #XPRS:
                    case #IC_CBP:
                    case #CTRF:
                    case #CVR:          //SKS#DevOps:15035
                    case #CPR:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-FI':                
                printDbtrId = true;
                break;
            case 'EU-NORDEA-CORP-NO':
                printDbtrId = true;
                break;
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPOR:
                    case #P_PPNOR_CN:
                    case #P_PPFTR:
                    case #P_PBOR:
                    case #P_PBNOR:
                    case #P_PBFTR:
                    case #P_PBAFTR_U:
                    case #P_PBAFTR_P:
                    case #IC_PBAFTR:
                    case #CBP_FTRR:
                    case #CBP_FTR:
                    case #P_XPRS:
                    case #P_ICPCB:
                        printDbtrId = true;
                        break;
                }
                break;
        }

        if(printDbtrId && BankId)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', BankId);
    
            //                      SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                          Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BANK');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      9.1.1: PstlAdr
        //              9.1.10: Ctry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePstlAdr;
    
        //      9.1.1: PstlAdr
        nodePstlAdr = _nodeDbtr.appendChild(xmlDoc.createElement('PstlAdr'));
    
        //              9.1.10: Ctry
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //          Ccy
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.BankBankIBAN)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
        }
        else
        {
            //              Othr
            this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
        }
    
        //              Ccy
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
    
        if(mSKS_EFT_FileDetail.BankBankSwiftNo)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.BankBankSwiftNo, 0, false);
    
            //      6.1.8: PstlAdr
            this.node_PstlAdr(nodeFinInstnId, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId),'','','');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //              2.9: Cd
        //          2.11: LclInstrm
        //              2.13: Prtry
        //          2.14: CtgyPurp
        //              2.15: Cd
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtTpInf;
        boolean    printInstrPrtry = true;
    
        //          2.6: PmtTpInf
        nodePmtTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-FI':
                printInstrPrtry = false;
                break;
        }

        if(printInstrPrtry)
        {
            //            InstrPrty
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtTpInf, 'InstrPrty', 'NORM');
        }
    
        this.node_PmtInf_PmtTpInf_SvcLvl_Cd(nodePmtTpInf);
    
        //         2.11: LclInstrm
        this.node_PmtInf_PmtTpInf_LclInstrm(nodePmtTpInf);
    
        //         2.14 CtgyPurp
        this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmtTpInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14 CtgyPurp
        //             2.15 Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
        str value;
   
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CTRF:
                    case #STRF:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #CB_SEPA:
                    case #SEPA:
                    case #XPRS:
                    case #GIRO01:       //SKS#VSTS:14110
                    case #GIRO04:       //SKS#VSTS:14110
                    case #GIRO15:       //SKS#VSTS:14110
                    case #CPR:          //SKS#DevOps:15035
                    case #CVR:          //SKS#DevOps:15035
                        value = 'SUPP';
                        break;
                    default:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_OCR:     //SKS#VSTS:14685
                    case #SEPA_NOCR:    //SKS#VSTS:14685
                    case #UG_POPS:      //SKS#VSTS:14685
                    case #SEPA_FI:      //SKS#VSTS:14685
                    case #MNYORD:       //SKS#VSTS:14685
                        value = 'SUPP';
                        break;
                    case #SALA:         //SKS#VSTS:14685
                    case #PENS:         //SKS#VSTS:14685
                        value = 'SALA';
                        break;
                    default:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_KIDR:
                    case #P_KIDR_CN:
                    case #P_TNR_CN:
                    case #P_FTWR:
                    case #P_FTWOR:
                    case #CBP_FTRR:
                    case #CBP_FTR:              //SKS#DevOps:17803                        
                    case #P_XPRS://DevOps19619
                        value = 'SUPP';
                        break;
                    default:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPOR:
                    case #P_PPNOR_CN:
                    case #P_PPFTR:
                    case #P_PBOR:
                    case #P_PBNOR:
                    case #P_PBFTR:
                    case #P_PBAFTR_U:
                    case #P_PBAFTR_P:
                    case #CBP_FTRR:
                    case #CBP_FTR:
                    case #P_XPRS:
                        value = 'SUPP';
                        break;
                    default:
                        value = 'INTC';
                        break;
                }
                break;
            default:
                value = 'INTC';
                break;
        }
        if(value)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = _nodePmtTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //              2.13: Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeLclInstrm;
        str         value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #STRF:
                        value = 'SDCL';
                        break;
                }
                break;
        }
        if(value)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmtTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;
        XmlElement nodeSvcLvl;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CTRF:
                    case #STRF:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #CB_SEPA:
                    case #SEPA:
                    case #GIRO01:       //SKS#VSTS:14110
                    case #GIRO04:       //SKS#VSTS:14110
                    case #GIRO15:       //SKS#VSTS:14110
                    case #CPR:          //SKS#DevOps:15035
                    case #CVR:          //SKS#DevOps:15035
                        value = 'NURG';
                        break;
                    case #XPRS:
                        value = 'URGP';
                        break;
                    case #INTC:
                    case #IC_CBP:
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MNYORD:       //SKS#VSTS:14685
                        value = 'NURG';
                        break;
                    case #SEPA_OCR:     //SKS#VSTS:14685
                    case #SEPA_NOCR:    //SKS#VSTS:14685
                    case #SEPA_FI:      //SKS#VSTS:14685
                    case #SALA:         //SKS#VSTS:14685
                    case #PENS:         //SKS#VSTS:14685
                        value = 'SEPA';
                        break;
                    case #UG_POPS:      //SKS#VSTS:14685
                        value = 'URGP';
                        break;
                    case #INTC_FI:                        
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_KIDR:
                    case #P_KIDR_CN:
                    case #P_TNR_CN:
                    case #P_FTWR:
                    case #P_FTWOR:
                    case #CBP_FTRR:
                    case #CBP_FTR:              //SKS#DevOps:17803
                    case #P_XPRS://DevOps19619
                        value = 'NURG';
                        break;
                    case #ICPS_HV:                        
                    case #P_ICPCB://DevOps19619
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPOR:
                    case #P_PPNOR_CN:
                    case #P_PPFTR:
                    case #P_PBOR:
                    case #P_PBNOR:
                    case #P_PBFTR:
                    case #P_PBAFTR_U:
                    case #P_PBAFTR_P:
                    case #CBP_FTRR:
                    case #CBP_FTR:
                        value = 'NURG';
                        break;                        
                    case #P_XPRS://DevOps19638
                        value ='URGP';
                        break;
                    case #IC_PBAFTR:
                    case #P_ICPCB://DevOps19619
                        value = 'SDVA';
                        break;
                }
                break;
        }
        if(value)       //SKS#DevOps:17803
        {
            //          2.8: SvcLvl
            nodeSvcLvl = nodePmtTpInf.appendChild(xmlDoc.createElement('SvcLvl'));

            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value, 0, false);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">_nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              CdtNoteAmt
        //              RmtdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            Gross = (_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1;
            Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
        }
    
        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.3: BtchBookg
        //------------------------------------------------------------------------------------------------------
        str Btchbkg;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-SE':
            case 'EU-NORDEA-CORP-NO':       //SKS#DevOps:17977
            case 'EU-NORDEA-CORP-FI':
            case 'EU-NORDEA-CORP-DK':       //SKS#DevOps:16488
                Btchbkg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

                if(strUpr(Btchbkg) == 'Y')
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc,_nodePmtInf,'BtchBookg','true');
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc,_nodePmtInf,'BtchBookg','false');
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.29: InstrId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodePmtId;
        boolean     printInstrId;
        int         length;
    
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CTRF:
                        printInstrId = true;
                        length       = 20;
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-SE':
            case 'EU-NORDEA-CORP-NO':
                printInstrId = true;
                length       = 35;
                break;
        }
        //          2.29: InstrId
        if(printInstrId)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), length));
        }

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;

        if(mModule == SKS_EFT_Module::AP)
        {
            select * from mSKS_EFT_FileDetail
              join VendBankAccountId,
                   PaymSpec,
                   PaymMode,
                   VendAccount,
                   VendCompany,
                   WBenBankCountryRegionId
              from lSKS_EFT_VendorPaym
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.AccountCompany,          //SKS#DevOps:22012
                       mSKS_EFT_FileDetail.RecordSection,
                       mSKS_EFT_FileDetail.PaymMode,
                       mSKS_EFT_FileDetail.BankAccountId,
                       mSKS_EFT_FileDetail.PaymentCurrencyCode,
                       mSKS_EFT_FileDetail.PaymSpec,
                           mSKS_EFT_FileDetail.EffectiveDate,       //SKS#VSTS:13979
                       lSKS_EFT_VendorPaym.WBenBankCountryRegionId,
                       mSKS_EFT_FileDetail.DepCountryRegionId,
                       mSKS_EFT_FileDetail.RecordType,
                       mSKS_EFT_FileDetail.AccountNum,
                       mSKS_EFT_FileDetail.PaymentReference,
                       mSKS_EFT_FileDetail.RecId
              where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                    mSKS_EFT_FileDetail.AccountCompany == lSKS_EFT_VendorPaym.VendCompany &&
                    mSKS_EFT_FileDetail.AccountNum == lSKS_EFT_VendorPaym.VendAccount &&
                    mSKS_EFT_FileDetail.PaymMode == lSKS_EFT_VendorPaym.PaymMode &&
                    mSKS_EFT_FileDetail.PaymSpec == lSKS_EFT_VendorPaym.PaymSpec &&
                    mSKS_EFT_FileDetail.DepBankAccountId == lSKS_EFT_VendorPaym.VendBankAccountId &&
                    mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
                    mSKS_EFT_FileDetail_BenBank.RefRecId == mSKS_EFT_FileDetail.RecId &&
                    mSKS_EFT_FileDetail_Intermediary.RefRecId == mSKS_EFT_FileDetail.RecId;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_UltmtDbtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_UltmtDbtr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_UltmtDbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23: UltmtDbtr
        //              Nm
        //              BIC
        //              ClrSysMmbId
        //                  MmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeUltmtDbtr;
        boolean     printUltmtDbtr;
        boolean     printUltmtDbtrAddress;
        LogisticsPostalAddress postalAddress;
        SKS_EB_Address                          addressBldgNb, addressStrtNm;
        container                               address;

        postalAddress = CompanyInfo::findDataArea(mSKS_EFT_FileDetail.AccountCompany).postalAddress();

        if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
        {
            address = this.addressSplit(postalAddress.Street);
            addressStrtNm = SKS_PP_StringFormats::strRemoveCRLF(conpeek(address,1));
            addressBldgNb = SKS_PP_StringFormats::strRemoveCRLF(conpeek(address,2));
        }
        else
        {
            addressStrtNm = SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street);
        }

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-NORDEA-CORP-DK':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #CPR:
                    case #CTRF:
                    case #CVR:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO01:
                    case #IC_CBP:
                    case #INTC:
                    case #STRF:
                    case #XPRS:                        
                    case #CB_SEPA://DevOps21723
                        printUltmtDbtrAddress = true;
                        printUltmtDbtr = true;
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-SE':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #CBP_FTRR:
                    case #P_ICPCB:
                    case #P_PPFTR:
                    case #P_PPNOR_CN:
                    case #P_PPOR:
                    case #P_XPRS:
                        printUltmtDbtrAddress = true;
                        printUltmtDbtr = true;
                        break;
                    case #CBP_FTR:
                        printUltmtDbtr = true;
                        break;
                }
                break;
            case 'EU-NORDEA-CORP-NO':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #CBP_FTRR:
                    case #P_ICPCB:
                    case #P_XPRS:
                        printUltmtDbtrAddress = true;
                        printUltmtDbtr = true;
                        break;
                    case #CBP_FTR:
                        printUltmtDbtr = true;
                        break;
                }
                break;
        }

        if(mSKS_EFT_FileDetail.PaymentCompany !=  mSKS_EFT_FileDetail.AccountCompany &&
           SKS_PP_Setup::find().IHB_Active &&
           printUltmtDbtr)
        {
            //      2.23: UltmtDbtr
            nodeUltmtDbtr = nodePmtInf.appendChild(xmlDoc.createElement('UltmtDbtr'));
    
            //          Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeUltmtDbtr, 'Nm', CompanyInfo::findDataArea(mSKS_EFT_FileDetail.AccountCompany).name(), 140, false);
            
            if(printUltmtDbtrAddress)
            {
                //              PstlAdr
                this.node_PstlAdr(nodeUltmtDbtr, postalAddress.CountryRegionId, addressStrtNm, postalAddress.ZipCode, postalAddress.City, 70, addressBldgNb, postalAddress.State,true);//DevOps20934
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>