<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_SE_HANDELSBANKEN_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_SE_HANDELSBANKEN_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_SE_HANDELSBANKEN_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20220912')
    #define.GIRO('GIRO')
    #define.GIRO_OCR('GIRO-OCR')
    #define.ACCTPAY('ACCTPAY')
    #define.SALAPAY('SALAPAY')
    #define.FINPAY('FINPAY')
    #define.SEPA('SEPA')
    #define.NORM('NORM')
    #define.URGP('URGP')
    #define.INTC('INTC')
    #define.PGIRO_OCR('PGIRO-OCR')
    #define.PGIRO_MSG('PGIRO-MSG')
    #define.BACS('BACS')
    #define.CHAPS('CHAPS')
    #define.SCT('SCT')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrSchmeNm;
        str iban, acctNum;

        boolean printPrtry;

        iban    =   mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum =   mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO:
                    case #GIRO_OCR:
                        printPrtry = true;
                        if(acctNum)
                        {
                            iban = '';
                        }
                        break;
                    case #ACCTPAY:
                    case #SALAPAY:
                    case #FINPAY:
                        if(acctNum)
                        {
                            iban = '';
                        }
                        break;
                }
                break;
            case 'SE-HANDELSBANKEN-XML-GB':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #CHAPS:
                        if(acctNum)
                        {
                            iban = '';
                        }
                        break;
                }
                break;
        }   

        if(iban || acctNum)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct);
    
                //                      SchmeNm
                nodeCdtrSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));

                if(printPrtry)
                {
                    //                          Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Prtry', 'BGNR');
                }
                else
                {
                    //                          Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Cd', 'BBAN');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;

        str     swift, rtg;

        swift   =   mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =   mSKS_EFT_FileDetail.DepBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO:
                    case #GIRO_OCR:
                    case #ACCTPAY:
                    case #SALAPAY:
                    case #FINPAY:
                        if(rtg)
                        {
                            swift = '';
                        }
                        break;
                }
                break;
            case 'SE-HANDELSBANKEN-XML-GB':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #CHAPS:
                        if(rtg)
                        {
                            swift = '';
                        }
                        break;
                }
                break;
        }

        if(swift || rtg)
        {
        
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));

            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));        
            
            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
            }
            else
            {
                //                  ClrSysMmbId
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }
        
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 0, false);
         
            //                  PstlAdr
            this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //              ClrSysMmbId
        //                  ClrSysId
        //                      Cd
        //              MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;

        int         length;
        str         clrSysIdCd;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                clrSysIdCd = 'SESBA';
                length = 4;
                break;
            case 'SE-HANDELSBANKEN-XML-GB':
                clrSysIdCd = 'GBDSC';
                length = 6;
                break;
        }


        //                  ClrSysMmbId
        nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));


        if(clrSysIdCd)
        {
            //                          ClrSysId
            nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

            //                              Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', clrSysIdCd);
        }

        //                              MmbId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, length);

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        boolean     printIntrmyAgt1;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
            case 'SE-HANDELSBANKEN-XML-DK':
            case 'SE-HANDELSBANKEN-XML-GB':
                printIntrmyAgt1 = true;
                break;
        }
    
        if(printIntrmyAgt1 && mSKS_EFT_FileDetail_Intermediary.IntBankSwift)
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //                  FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));

            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
    
        boolean printRmtInf = true;
        boolean printRmtInfUstrd;
        boolean printRmtInfStrd;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALAPAY:
                        printRmtInf = false;
                        break;
                    case #GIRO_OCR:
                    case #PGIRO_OCR:
                        printRmtInfStrd = true;
                        break;
                    default:
                        printRmtInfUstrd = true;
                        break;
                }
                break;
            default:
                printRmtInfUstrd = true;
                break;
        }

        if(printRmtInf)
        {
            if(printRmtInfStrd)
            {
                this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
            }
            else if(printRmtInfUstrd)
            {
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    private void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement _nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.101: RfrdDocInf
        //                  2.102: Tp
        //                      2.103: CdOrPrtry
        //                          2.104: Cd
        //                  2.107: Number
        //                  2.108: RltdDt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
    
        //              2.101: RfrdDocInf
        nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
        //                  2.102: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
        //                      2.103: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
        //                          2.104: Cd
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
        }

        //                  2.107: Number
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

        //                  2.108: RltdDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocAmt;
        XmlElement nodeCdtrRefInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        boolean firstRec = true;
        int     length;
    
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber != '')
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
    
                //              2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
    
                if(invSKS_EFT_FileDetail.PaymId)
                {
                    //            2.120: CdtrRefInf
                    nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
                    //              2.121: Tp
                    nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
                    //                  2.122: CdOrPrtry
                    nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
                    //                      2.123: Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');

                    if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PGIRO_OCR)
                    {
                        length = 25;
                    }
                    //               2.126: Ref
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', invSKS_EFT_FileDetail.PaymId, length);
                }
                else
                {
                    //              2.101: RfrdDocInf
                    this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
    
                    //              2.109 RfrdDocAmt
                    nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));

                    this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str initiatingPartyId;
        boolean printInitgPtyId;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
            case 'SE-HANDELSBANKEN-XML-DK':
            case 'SE-HANDELSBANKEN-XML-GB':
                printInitgPtyId = true;
                break;
        }
    
        initiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(printInitgPtyId && initiatingPartyId != '')
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(initiatingPartyId));

            //                          9.1.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                              9.1.1.18: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BANK');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //          or
        //              PrvtId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeId;
        XmlElement nodeOrgPvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str CdtrId;
    
        if(mSKS_EFT_FileDetail.VATNum != '')
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));
            
            CdtrId = SKS_EFT_Format_ISO_20022_001001003_FD::getCodelookupvalue('CdtrId', mSKS_EFT_FileDetail.RecId);

            if(CdtrId == 'PrvtId')
            {
                nodeOrgPvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
            }
            else
            {
                nodeOrgPvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
            }
                
            nodeOthr = nodeOrgPvtId.appendChild(xmlDoc.createElement('Othr'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.VATNum);
    
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'TXID');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
       
        if(mRemittanceZipCode != '' || mRemittanceCity != '' || mRemittanceCountryRegionId != '' || mRemittanceAdrline1 != '' || mRemittanceAdrline2 != '')
        {
            this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        //                          9.1.17: SchmeNm
        //                              9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId != '')
        {
            //          9.1.12: Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', mSKS_EFT_FileDetail_BankAccount.WOrdPartyId);
    
            //                          9.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                              9.1.18: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BANK');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
    
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
        }
        else
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //              ClrSysMmbId
        //                  MmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeClrSysId;

        str     swift, rtg;
        int         length;
        str         clrSysIdCd;

        swift = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg = mSKS_EFT_FileDetail.BankBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                clrSysIdCd = 'SESBA';
                length = 4;
                break;
            case 'SE-HANDELSBANKEN-XML-GB':
                clrSysIdCd = 'GBDSC';
                length = 6;
                break;
        }

    
        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(rtg)
        {
            //              ClrSysMId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId')); 

            if(clrSysIdCd)
            {
                //                  ClrSysId
                nodeClrSysId = nodeClrSysMmBId.appendChild(xmlDoc.createElement('ClrSysId'));

                //                      Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', clrSysIdCd);
            }

            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, length);
        }
        else
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.BankBankSwiftNo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              2.43: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   remitted;
        AmountMST   creditNote;

        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            remitted = 0;
            creditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            creditNote = 0;
        }

        if(remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(creditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO:
                    case #GIRO_OCR:
                    case #ACCTPAY:
                    case #SALAPAY:
                    case #FINPAY:
                    case #NORM:
                    case #INTC:
                    case #PGIRO_OCR:
                    case #PGIRO_MSG:
                        value = 'NURG';
                        break;
                    case #SEPA:
                        value = 'SEPA';
                        break;
                    case #URGP:
                        value = 'URGP';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
            case 'SE-HANDELSBANKEN-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                        value = 'NURG';
                        break;
                    case #URGP:
                        value = 'URGP';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
            case 'SE-HANDELSBANKEN-XML-GB':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FINPAY:
                    case #INTC:
                    case #BACS:
                    case #SCT:
                    case #NORM:
                        value = 'NURG';
                        break;
                    case #CHAPS:
                        value = 'URGP';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
        }

        if(value)
        {
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO:
                    case #GIRO_OCR:
                    case #ACCTPAY:
                    case #NORM:
                    case #URGP:
                    case #PGIRO_OCR:
                    case #PGIRO_MSG:
                        value = 'SUPP';
                        break;
                    case #SALAPAY:
                        value = 'SALA';
                        break;
                    case #FINPAY:
                        value = 'CORT';
                        break;
                    case #INTC:
                        value = 'INTC';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
            case 'SE-HANDELSBANKEN-XML-GB':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #BACS:
                    case #CHAPS:
                    case #SCT:
                        value = 'SUPP';
                        break;
                    case #FINPAY:
                        value = 'CORT';
                        break;
                    case #INTC:
                        value = 'INTC';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
            case 'SE-HANDELSBANKEN-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                        value = 'SUPP';
                        break;
                    default:
                        value = '';
                        break;
                }
                break;
        }

        if(value)
        {
            //           2.14: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));

            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    //SKS_VSTS_13502 -->
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      2.24 ChrgBr
        str value;
        boolean printChrgBr;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        printChrgBr = true;
                        break;
                }
                break;
        }

        value  = SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId);                   // SKG#VSTS:13454

        if(printChrgBr &&
           (value == 'SHAR' || value == 'SLEV'))
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', value, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeRgltryRptg;
        XmlElement nodeRgltryDtls;
        boolean printRgltryRptg;

    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                printRgltryRptg = true;
                break;
        }
        
        msks_EFT_FileDetail_PaymentLine = SKS_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        if(printRgltryRptg &&
          (msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode != '' || msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName != ''))
        {
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));
            nodeRgltryDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRgltryDtls, 'Cd', msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRgltryDtls, 'Inf', msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    //SKS_VSTS_13502 <--

    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.51 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      2.51 ChrgBr
        
        boolean printChrgBr;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'SE-HANDELSBANKEN-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO:
                    case #GIRO_OCR:
                    case #ACCTPAY:
                    case #SALAPAY:
                    case #FINPAY:
                    case #INTC:
                        printChrgBr = false;
                        break;
                    default:
                        printChrgBr = true;
                        break;
                }
                break;
            case 'SE-HANDELSBANKEN-XML-GB':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #CHAPS:
                    case #INTC:
                        printChrgBr = false;
                        break;
                    case #FINPAY:
                        printChrgBr = true;
                        break;
                    default:
                        printChrgBr = true;
                        break;
                }
                break;
            case 'SE-HANDELSBANKEN-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    default:
                        printChrgBr = true;
                        break;
                }
                break;
        }

        if(printChrgBr)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId), 0, false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>