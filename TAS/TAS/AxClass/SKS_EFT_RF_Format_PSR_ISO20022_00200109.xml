<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_PSR_ISO20022_00200109</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_PSR_ISO20022_00200109  extends SKS_EFT_RF_Format
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.Xml.XmlDocument locXmlDocument;
        System.Xml.XmlNode locXMLNode;
        str locTempTagName;

        locXmlDocument = new System.Xml.XmlDocument();
        locSKS_EB_FileHub.runFileLoad(_filename);
        locXmlDocument.LoadXML(SKS_EB_XML::getAttributeFreeDocument(locSKS_EB_FileHub.fileBody()));
    
    
    
        if(locXmlDocument.get_HasChildNodes())
        {
            locXMLNode = locXmlDocument.get_FirstChild(); //<?XML ... node.
            locXMLNode = locXMLNode.get_NextSibling();//<Document xmlns...
            locTempTagName = locXMLNode.get_Name();
            if(strUpr(locTempTagName) == 'DOCUMENT')
            {
                this.processNode(locXMLNode);
            }
            //cleanup an pending nodes
            if(mSKS_EFT_RF_Transaction != null)
                mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            if(mSKS_EFT_RF_SentFile != null)
                mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
        }
    
        return mSKS_EFT_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        str rtnval = '';
        int classId;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean locXMlTagFound = false;
        boolean locMsgIdFound = false;
        boolean locCreDtTmFound = false;
        boolean locGrpHdrFound = false;
        Boolean locOrgnlGrpInfAndStsFound = false;
        boolean locOrgnlMsgIdFound = false;
        boolean locCustomerPaymentStatusReportFlagFound = false;
        boolean locCstmrPmtStsRptFound = false;
        boolean locOrgnlMsgNmIdFound = false;
    
        //BEGIN DISQUALIFIER VARIABLES
        //none
    
        //END VALIDATION VARIABLES
    
        System.String locString;
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
       
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        System.IO.StreamReader locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        //priming read
        locString = locStreamReader.ReadLine();
        while(locString != null)
        {
            locString = locString.ToUpper();
            locString = locString.Trim();
            locString = locString.ToUpper();
            if(!System.String::IsNullOrWhiteSpace(locString))
            {
                if(!locXMLTagFound)
                {
                    if(locString.StartsWith(strUpr('<?xml')))
                        locXmlTagFound = true;
                    else
                    {
                        //NOT AN XML DOCUMENT
                        break;
                    }
    
                }
    
                if(locString.Contains(strUpr('pain.002.001.09')))
                {
                    locCustomerPaymentStatusReportFlagFound = true;
                }
                if(locString.Contains(strUpr('<CstmrPmtStsRpt>')))
                {
                    locCstmrPmtStsRptFound = true;
                }
                if(locString.Contains(strUpr('<GrpHdr>')))
                {
                    locGrpHdrFound = true;
                }
                if(locString.Contains(strUpr('<MsgId>')))
                {
                    locMsgIdFound = true;
                }
                if(locString.Contains(strUpr('<CreDtTm>')))
                {
                    locCreDtTmFound = true;
                }
                if(locString.Contains(strUpr('<OrgnlGrpInfAndSts>')))
                {
                    locOrgnlGrpInfAndStsFound = true;
                }
                if(locString.Contains(strUpr('<OrgnlMsgId>')))
                {
                    locOrgnlMsgIdFound = true;
                }
                if(locString.Contains(strUpr('<OrgnlMsgNmId>')))
                {
                    locOrgnlMsgNmIdFound = true;
                }
    
            }
            locString = locStreamReader.ReadLine();
            if(!System.String::IsNullOrEmpty(locString))
                locString = locString.ToUpper();
        }
        if(locCustomerPaymentStatusReportFlagFound
            && locMsgIdFound
            && locGrpHdrFound
            && locCreDtTmFound
            && locOrgnlMsgIdFound
            && locOrgnlGrpInfAndStsFound
            && locCstmrPmtStsRptFound
            && locOrgnlMsgNmIdFound)
        {
            //ALl Qualifers show this a PSR-ISO20022-00200103 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();
        locSKS_EB_FileHub.StreamClose();

    
    
        return rtnval;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    public void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locInitgPtyIdOrgIdOthrIdXmlNode;
        System.Xml.XmlNode locXMLNode;
        System.Xml.XmlNode locParentXMLNode;
        System.Xml.XmlNode locGrandParentXMLNode;
        System.Xml.XmlNode locGreatGrandParentXMLNode;
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
        str locNodeName;
        str locTempNodeName, locTempParentNodeName, locTempGrandParentNodeName, locTempGreatGrandParentNodeName;
        //<SKS-begin>
        str nodeValue;
        boolean DDModuleFound;
        //</SKS-end>
    
        locParentXMLNode = _XmlNode.get_ParentNode();
        if(locParentXMLNode != null)
        {
            locTempParentNodeName = locParentXMLNode.get_Name();
            locTempParentNodeName = strUpr(locTempParentNodeName);
            locGrandParentXMLNode = locParentXMLNode.get_ParentNode();
            if(locGrandParentXMLNode != null)
            {
                locTempGrandParentNodeName = locGrandParentXMLNode.get_Name();
                locTempGrandParentNodeName = strUpr(locTempGrandParentNodeName);
                locGreatGrandParentXMLNode = locGrandParentXMLNode.get_ParentNode();
                if(locGreatGrandParentXMLNode != null)
                {
                    locTempGreatGrandParentNodeName = locGreatGrandParentXMLNode.get_Name();
                    locTempGreatGrandParentNodeName = strUpr(locTempGreatGrandParentNodeName);
                }
            }
        }
    
        locTempNodeName = _XmlNode.get_Name();
        switch(strUpr(locTempNodeName))
        {
            case 'DOCUMENT':
                if(mSKS_EFT_RF_File == null)
                {
                    mSKS_EFT_RF_File = new SKS_EFT_RF_File();
                    locInitgPtyIdOrgIdOthrIdXmlNode = _XmlNode.selectSingleNode('CstmrPmtStsRpt/GrpHdr/InitgPty/Id/OrgId/Othr/Id');
                    if(locInitgPtyIdOrgIdOthrIdXmlNode)
                    {
                        mSKS_EFT_RF_File.setBankID(locInitgPtyIdOrgIdOthrIdXmlNode.InnerText);
                    }
                }
                break;
            case 'GRPHDR':
                //No action
                break;
            case 'MSGID':
                //No Action
                break;
            case 'ORGNLGRPINFANDSTS':
                break;
            case 'ORGNLMSGID':
                if(mSKS_EFT_RF_SentFile != null)
                {
                    if(mSKS_EFT_RF_Transaction != null)
                    {
                        mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
                        mSKS_EFT_RF_Transaction = null;
                    }
                    mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
                }
                mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
                mSKS_EFT_RF_SentFile.setID(_XmlNode.get_InnerText());
                break;
            case 'GRPSTS':
                mSKS_EFT_RF_SentFile.setStatus(_XmlNode.get_InnerText());
                break;
            case 'TXINFANDSTS':
                if(mSKS_EFT_RF_Transaction != null)
                    mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
                mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
                break;
            case 'ReqdExctnDt':
                if(locTempParentNodeName == 'ORGNLTXREF')
                {
                    this.setPaymentDate(_XmlNode.get_InnerText());
                }
                break;
            case 'ORGNLENDTOENDID':
                mSKS_EFT_RF_Transaction.setID(_XmlNode.get_InnerText());
                break;
            case 'TXSTS':
                mSKS_EFT_RF_Transaction.setStatus(_XmlNode.get_InnerText());
                break;
            case 'CD':
                //There are three possible grandparents.
                //1:  Transaction Level (TXINFANDSTS)
                //2:  Sent File level(OrgnlGrpInfAndSts)
                //3:  Sent File level(OrgnlPmtInfAndSts)
    
                if(locTempGreatGrandParentNodeName == 'TXINFANDSTS'
                    && locTempGrandParentNodeName == 'STSRSNINF'
                    && locTempParentNodeName == 'RSN')
                    mSKS_EFT_RF_Transaction.setStatusReason(_XmlNode.get_InnerText());
                else if(locTempGreatGrandParentNodeName == 'ORGNLGRPINFANDSTS'
                    && locTempGrandParentNodeName == 'STSRSNINF'
                    && locTempParentNodeName == 'RSN')
                    mSKS_EFT_RF_SentFile.setStatusReason(_XmlNode.get_InnerText());
                else if(locTempGreatGrandParentNodeName == 'ORGNLPMTINFANDSTS'
                    && locTempGrandParentNodeName == 'STSRSNINF'
                    && locTempParentNodeName == 'RSN')
                    mSKS_EFT_RF_SentFile.setStatusReason(_XmlNode.get_InnerText());
                break;
            case 'ADDTLINF':
                //The immediate parent is always StsRsnInf, but that nodes parent can either be
                //OrgnlGrpInfAndSts or TxInfAndSts, this would vary where the additional data
                //should be placed.
                switch(locTempGrandParentNodeName)
                {
                    case 'TXINFANDSTS': //Trans action level Data
                        if(locTempParentNodeName == 'StsRsnInf')
                        {
                            if(strScan(_XmlNode.get_InnerText(), "BFXDATECHG", 0, strLen(_XmlNode.get_InnerText())) > 0)
                            {
                                this.setPaymentDate(_XmlNode.get_InnerText(), true);
                            }
                        }
                        else
                        {
                            mSKS_EFT_RF_Transaction.setAdditionalData(_XmlNode.get_InnerText());
                        }
                        break;
                    case 'ORGNLGRPINFANDSTS':
                        mSKS_EFT_RF_SentFile.setAdditionalData(_XmlNode.get_InnerText());
                        break;
                    case 'ORGNLPMTINFANDSTS':
                        mSKS_EFT_RF_SentFile.setAdditionalData(_XmlNode.get_InnerText());
                        break;
 
                }
                break;
            case 'OrgnlMsgNmId':
                nodeValue = _XmlNode.get_InnerText();
                DDModuleFound = strContains(nodeValue, 'pain.008.');
                if (DDModuleFound == true)
                {
                    mSKS_EFT_RF_File.setModule(SKS_EFT_Module::AR);
                }
                else
                {
                    mSKS_EFT_RF_File.setModule(SKS_EFT_Module::AP);
                }
                break;

        }
    
        if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode = locXMLNodeListEnum.get_Current();
                locNodeName = locXMLNode.get_Name();
                if(strUpr(locNodeName) != '#TEXT')
                    this.processNode(locXMLNode);
            }
    
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilekey</Name>
				<Source><![CDATA[
    protected void setFilekey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSRKey</Name>
				<Source><![CDATA[
    private static str getPSRKey(System.Xml.XmlNode _XmlNode)
    {
        str rtnval;
        str locNodeName;
        str locTempValue;
        System.Xml.XmlNode locXmlNode;
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
    
        if(strUpr(_XmlNode.get_Name()) == 'MSGID')
            rtnval = _XmlNode.get_InnerText();
        else
        {
            if(_XmlNode.get_HasChildNodes())
            {
                //priming read
                locXMLNodeList = _XmlNode.get_ChildNodes();
                locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
                locXMLNodeListEnum.Reset();
                while(locXMLNodeListEnum.MoveNext())
                {
                    locXMLNode = locXMLNodeListEnum.get_Current();
                    locNodeName = locXMLNode.get_Name();
                    if(strUpr(locNodeName) != '#TEXT')
                    {
                        locTempValue = SKS_EFT_RF_Format_PSR_ISO20022_00200109::getPSRKey(locXMLNode);
                        if(locTempValue != '')
                            rtnval = locTempValue;
                    }
                }
            }
        }
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File locSKS_EFTAP_File = null)
    {
        ;
    
        return locSKS_EFTAP_File.FileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        str rtnval;
        ;
        SKS_EFT_FileData locSKS_EFT_FileData;

        if(_SKS_EFT_FileDetail.FormatId == 'UK-HSBC-XML-UK-AR')         //SKS#DevOps:15836
        {
            Select firstonly FieldValue from locSKS_EFT_FileData
                where locSKS_EFT_FileData.RefRecId == _SKS_EFT_FileDetail.RecId
                && locSKS_EFT_FileData.FieldName == 'InOutKey';

            rtnval = locSKS_EFT_FileData.FieldValue;
        }
        else
        {
            rtnval = _SKS_EFT_FileDetail.PaymentReference;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentDate</Name>
				<Source><![CDATA[
    // Added the method for Weichert custom model - do not change the method signature
    void setPaymentDate(str _dateStr, boolean bfxFlag = false)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>