<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalDetailFormTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formstr(ProjInvoiceProposalDetail))]
final class ProjInvoiceProposalDetailFormTAS_Extension
{
    public boolean sKS_CC_IsServiceOrderEnabled;
    public boolean sKS_CC_IsInvoiceProposalEnabled;
    public CreditCardNumber sKS_CC_CreditCardNumber;
    public Name sKS_CC_CreditCardSource;
    public boolean sks_CC_IsCreditCardEnabled;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ProjInvoiceProposalDetail_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to set visibility of CCA controls.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormEventHandler(formStr(ProjInvoiceProposalDetail), FormEventType::Initialized)]
    public void ProjInvoiceProposalDetail_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        sKS_CC_IsServiceOrderEnabled = SKS_PP_Setup::isCreditCardServiceOrderEnabled();
        sKS_CC_IsInvoiceProposalEnabled = SKS_PP_Setup::isCreditCardInvoiceProposalEnabled();
        sks_CC_IsCreditCardEnabled = SKS_PP_Setup::find().ModCC; //Issue-20075: Not visible when Credit Card parameter is false
        SKS_CC_ServiceOrder.visible(sKS_CC_IsServiceOrderEnabled);
        SKS_CC_ServiceOrderAuthAmt.visible(sKS_CC_IsServiceOrderEnabled);
        SKS_CC_PaymTerm.visible(sKS_CC_IsInvoiceProposalEnabled);
        SKS_CC_CreditCardPayment.visible(sKS_CC_IsInvoiceProposalEnabled);
        SKS_CC_CreditCardInfo.visible(sks_CC_IsCreditCardEnabled); //Issue-20075: Not visible when Credit Card parameter is false
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProjProposalJour_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(ProjInvoiceProposalDetail, ProjProposalJour), FormDataSourceEventType::Activated)]
    public void ProjProposalJour_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        this.sKS_CC_SetCCDisplayFields();
        this.sKS_CC_SetValueOnCCCtrls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetValueOnCCCtrls</Name>
				<Source><![CDATA[
    public void sKS_CC_SetValueOnCCCtrls()
    {
        if (SKS_CC_CreditCardInfo.visible())
        {
            sKS_CC_DispCreditCardNumber.text(sKS_CC_CreditCardNumber);
            sKS_CC_DispCreditCardSource.text(sKS_CC_CreditCardSource);
            SKS_CC_CreditCardInfo.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetCCDisplayFields</Name>
				<Source><![CDATA[
    public void sKS_CC_SetCCDisplayFields()
    {
        SKS_CC_CustPaymTable sKS_CC_CustPaymTableLocal;
        CreditCardAuthTrans creditCardAuthTransLocal;
        SMAServiceOrderTable serviceOrderTable;

        const str constUnassignedCC = 'Unassigned';
        const str constNotApplicableCC = 'N/A';

        sKS_CC_CreditCardNumber = '';
        sKS_CC_CreditCardSource = constNotApplicableCC;

        if (!ProjProposalJour)
        {
            return;
        }

        if (ProjProposalJour.LineProperty == ProjLinePropertyCode::Canceled)
        {
            return;
        }

        if (!ProjProposalJour.Payment)
        {
            return;
        }

        if (!SKS_CC_CustPaymTable::IsCreditCardPaymentTerms(ProjProposalJour.Payment))
        {
            return;
        }

        sKS_CC_CustPaymTableLocal = SKS_CC_CustPaymTable::findPendingOrApprovedPayment(ProjProposalJour.TableId, ProjProposalJour.RecId);
        if (!sKS_CC_CustPaymTableLocal)
        {
            if (ProjProposalJour.InvoiceAmount > 0)
            {
                if (ProjProposalJour.LineProperty == ProjLinePropertyCode::Invoiced && ProjProposalJour.ProjInvoiceId)
                {
                    creditCardAuthTransLocal = CreditCardAuthTrans::sKS_CC_findChargeByProjInvoice(ProjProposalJour.ProjInvoiceId);
                    if (creditCardAuthTransLocal && creditCardAuthTransLocal.SKS_CC_CustPaymTable)
                    {
                        sKS_CC_CustPaymTableLocal = SKS_CC_CustPaymTable::findByRecID(creditCardAuthTransLocal.SKS_CC_CustPaymTable);
                    }
                }
                else
                {
                    if (ProjProposalJour.SKS_CC_ServiceOrderId)
                    {
                        serviceOrderTable = SMAServiceOrderTable::find(ProjProposalJour.SKS_CC_ServiceOrderId);
                    }

                    if (!serviceOrderTable)
                    {
                        serviceOrderTable = SKS_CC_CustPaymTable::getServiceOrderFromProposal(ProjProposalJour);
                    }

                    if (serviceOrderTable)
                    {
                        sKS_CC_CustPaymTableLocal = SKS_CC_CustPaymTable::findCCPaymWithApprovedAuthorization(serviceOrderTable.TableId, serviceOrderTable.RecId);
                        if (!sKS_CC_CustPaymTableLocal)
                        {
                            sKS_CC_CustPaymTableLocal = SKS_CC_CustPaymTable::findPendingAuthorization(serviceOrderTable.TableId, serviceOrderTable.RecId);
                        }
                    }
                }
            }
        }

        if (sKS_CC_CustPaymTableLocal)
        {
            sKS_CC_CreditCardNumber = CreditCardCust::find(sKS_CC_CustPaymTableLocal.CreditCardCustRefId).CardNumber;
            if (sKS_CC_CreditCardNumber)
            {
                sKS_CC_CreditCardSource = enum2str(sKS_CC_CustPaymTableLocal.CreditCardTransOrigin);
            }
        }

        if (!sKS_CC_CreditCardNumber && ProjProposalJour.LineProperty != ProjLinePropertyCode::Invoiced)
        {
            sKS_CC_CreditCardSource = constUnassignedCC;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetButtonAccess</Name>
				<Source><![CDATA[
    void sKS_CC_SetButtonAccess()
    {
        if (SKS_CC_CreditCardPayment.visible())
        {
            SKS_CC_CreditCardPayment.enabled(ProjProposalJour.Payment &&
                SKS_CC_CustPaymTable::IsCreditCardPaymentTerms(ProjProposalJour.Payment));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Payment_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(ProjInvoiceProposalDetail, ProjProposalJour, Payment), FormDataFieldEventType::Modified)]
    public void Payment_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        this.sKS_CC_SetButtonAccess();
        this.sKS_CC_SetCCDisplayFields();
        this.sKS_CC_SetValueOnCCCtrls();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>