<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKSLedgerJournalTrans_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tablestr(LedgerJournalTrans))]
final class SKSLedgerJournalTrans_Extension
{
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sks_EFT_JournalState</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    public static display SKS_EB_FieldTitle sks_EFT_JournalState(LedgerJournalTrans _this)
    {
        LedgerJournalTable  ledgerJournalTable  =   _this.ledgerJournalTable();
        return enum2Str(ledgerJournalTable.SKS_EFT_JournalState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_AmountCharged</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    public static display AmountCur sKS_CC_AmountCharged(LedgerJournalTrans _this)
    {
        //SKS-CCA
        if (!_this.RecId)
        {
            return 0;
        }

        return SKS_CC_CustPaymTable::getCreditCardAmountCharged(_this.TableId, _this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForLedgerJournalTable</Name>
				<Source><![CDATA[
    public static void deleteForLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTrans transactions;

        select firstonly
              SKS_EFT_APPmtSelectionRecId
            , SKS_EFT_ARPmtSelectionRecId
            , JournalNum
        from transactions
        where transactions.JournalNum == _ledgerJournalTable.JournalNum
            && (transactions.SKS_EFT_APPmtSelectionRecId != 0 || transactions.SKS_EFT_ARPmtSelectionRecId != 0);

        if (transactions)
        {
            throw error("@SKS1208");
        }

        next deleteForLedgerJournalTable(_ledgerJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        //LedgerJournalTrans trans = sender as LedgerJournalTrans;

        if(this.SKS_BTB_TransferMethod && (this.SKS_BTB_TransferMethod != this.PaymMode))
        {
            this.PaymMode = this.SKS_BTB_TransferMethod;
            this.PaymSpec = this.SKS_BTB_TransferSpec;
        }

        next update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankAccountAccountTypeValid</Name>
				<Source><![CDATA[
    protected boolean isBankAccountAccountTypeValid()
    {
        boolean ret;

        LedgerJournalTrans trans = this;

        ret = next isBankAccountAccountTypeValid();

        if(trans.SKS_BR_BankTranRecId)
        {
            return true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankAccountOffsetAccountTypeValid</Name>
				<Source><![CDATA[
    protected boolean isBankAccountOffsetAccountTypeValid()
    {
        boolean ret;

        LedgerJournalTrans trans = this;

        ret = next isBankAccountOffsetAccountTypeValid();

        if(trans.SKS_BR_BankTranRecId)
        {
            return true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// find the record by company the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="args">
    /// It contains the <c>LedgerJournalTrans</c> record.
    /// </param>
    /// FDD-10590
    public static LedgerJournalTrans findByCompany(CompanyId _company,
                                                   RecId     _recId,
                                                   boolean   _forupdate = false
                                                   )
    {
        LedgerJournalTrans ledgerJournalTrans;
    
        if (_company)
        {
            changecompany(_company)
            {
                ledgerJournalTrans = LedgerJournalTrans::findRecId(_recId, _forupdate);
            }
        }
    
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>