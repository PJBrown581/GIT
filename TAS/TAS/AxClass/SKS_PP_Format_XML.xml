<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_XML extends SKS_PP_Format_BankGroup
{

    XmlDocument gXmlDocument;
    SKS_PP_Bank gSKS_PP_Bank;
    BankAccountTable gBankAccountTable;
    XmlNode gNodeRoot;
    int gNbOfTxs;
    real gCtrlSum;
    boolean gInPmt;
    date gPrevDate;
    SKS_PP_ChequeType gPrevSKS_PP_ChequeType;
    int gPmtInfIdCounter;
    str glclInstrm_Cd;
    str glclInstrm_Prtry;
    str gSvcLvl_Cd;
    DataAreaId prevcompany;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>node_Amt</Name>
				<Source><![CDATA[
    protected XmlNode node_Amt(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                gXmlDocument,
                locTempNode,
                'Amt',
                '',
                0,
                true);
        this.node_InstdAmt(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Cd</Name>
				<Source><![CDATA[
    protected XmlNode node_Cd(XmlNode _XmlNode, int _MaxLength = 35)
    {
        //In order to include this node use must set the glclInstrm_Cd in the PmtTpInf node.
        return SKS_EFT_Format::xmlAppendChildNodeText(
                gXmlDocument,
                _XmlNode,//NOTE: here we are adding a child to the previous node
                'Cd',
                strUpr(_XmlNode.name()) == 'SVCLVL' ? gSvcLvl_Cd : glclInstrm_Cd,
                _MaxLength,
                true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Cdtr</Name>
				<Source><![CDATA[
    protected XmlNode node_Cdtr(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        if(mSKS_PP_FileDetail.VendName)
        {
            locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        locTempNode,
                        'Cdtr',
                        '',
                        0,
                        true);
                        //Assign Child Nodes
                        //no need to catch return; the following node has no children
            this.node_Nm(locTempNode,mSKS_PP_FileDetail.VendName,140);
        }
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected XmlNode node_CdtTrfTxInf(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                gXmlDocument,
                locTempNode,
                'CdtTrfTxInf',
                '',
                0,
                true);
        this.node_PmtId(locTempNode);
        this.node_Amt(locTempNode);
        this.node_ChqInstr(locTempNode);
        this.node_Cdtr(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_ChqInstr</Name>
				<Source><![CDATA[
    protected XmlNode node_ChqInstr(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
    
        if(mSKS_PP_FileDetail.ChkRefNbr)
        {
            locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                gXmlDocument,
                _XmlNode,
                'ChqInstr',
                '',
                0,
                true);
                //Assign Child Nodes
                //no need to catch return; the following node has no children
            this.node_ChqNb(locTempNode);
        }
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_ChqNb</Name>
				<Source><![CDATA[
    protected XmlNode node_ChqNb(XmlNode _XmlNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                            gXmlDocument,
                            _XmlNode,
                            'ChqNb',
                            mSKS_PP_FileDetail.ChkRefNbr,
                            35,
                            false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_ClrSysMmbId</Name>
				<Source><![CDATA[
    protected XmlNode node_ClrSysMmbId(XmlNode _XmlNode)
    {
    
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
            gXmlDocument,
            locTempNode,
            'ClrSysMmbId',
            '',
            0,
            true);
        this.node_MmbId(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CreDtTm</Name>
				<Source><![CDATA[
    protected XmlNode node_CreDtTm(XmlNode _XmlNode)
    {
        return  SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    _XmlNode,
                    'CreDtTm',
                    datetime2str(mSKS_PP_File.createdDateTime, DateFlags::None),
                    19,
                    true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CstmrCdtTrfInitn</Name>
				<Source><![CDATA[
    protected XmlNode node_CstmrCdtTrfInitn(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                locTempNode,
                                'CstmrCdtTrfInitn',
                                '',
                                0,
                                true);
        this.node_GrpHdr(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CtrlSum</Name>
				<Source><![CDATA[
    protected XmlNode node_CtrlSum(XmlNode _TempNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                                        gXmlDocument,
                                        _TempNode,
                                        'CtrlSum',
                                        '',
                                        18,
                                        true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Dbtr</Name>
				<Source><![CDATA[
    protected XmlNode node_Dbtr(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'Dbtr',
                    '',
                    0,
                    true);
                    //this node has no children so there is no reason to catch the return
        this.node_Nm(locTempNode,gSKS_PP_Bank.PP01, 30);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DbtrAcct</Name>
				<Source><![CDATA[
    protected XmlNode node_DbtrAcct(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'DbtrAcct',
                    '',
                    0,
                    true);
        this.node_DbtrAcct_Id(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DbtrAcct_Id</Name>
				<Source><![CDATA[
    protected XmlNode node_DbtrAcct_Id(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        locTempNode,
                        'Id',
                        '',
                        0,
                        true);
        this.node_Othr(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DbtrAgt</Name>
				<Source><![CDATA[
    protected XmlNode node_DbtrAgt(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'DbtrAgt',
                    '',
                    0,
                    true);
        this.node_FinInstnId(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_EndToEndId</Name>
				<Source><![CDATA[
    protected XmlNode node_EndToEndId(XmlNode _XmlNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        _XmlNode,
                        'EndToEndId',
                        mSKS_PP_FileDetail.ChkRefNbr,
                        35,
                        true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_FinInstnId</Name>
				<Source><![CDATA[
    protected XmlNode node_FinInstnId(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        locTempNode,
                        'FinInstnId',
                        '',
                        0,
                        true);
        this.node_ClrSysMmbId(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr</Name>
				<Source><![CDATA[
    protected XmlNode node_GrpHdr(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'GrpHdr',
                    '',
                    0,
                    true);
                //Assign Child Nodes
        this.node_MsgId(locTempNode);
        this.node_CreDtTm(locTempNode);
        this.node_NbOfTxs(locTempNode);
        this.node_CtrlSum(locTempNode);
        this.node_InitgPty(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Id</Name>
				<Source><![CDATA[
    protected XmlNode node_Id(XmlNode _XmlNode, str _NodeValue, int _MaxLength)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                _XmlNode,
                                'Id',
                                _NodeValue,
                                _MaxLength,
                                true);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InitgPty</Name>
				<Source><![CDATA[
    protected XmlNode node_InitgPty(XmlNode _XmlNodel)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InstdAmt</Name>
				<Source><![CDATA[
    protected XmlNode node_InstdAmt(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        int Mult = 1;
    
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        locTempNode,
                        'InstdAmt',
                        SKS_PP_StringFormats::strFill(18,Num2Str(mSKS_PP_FileDetail.ChkCuryAmt * Mult,1, 2, 1,0),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left),
                        18,
                        true);
        SKS_EFT_Format::xmlsetAttributeText(locTempNode, 'Ccy', strUpr(gBankAccountTable.CurrencyCode));
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_LclInstrm</Name>
				<Source><![CDATA[
    protected XmlNode node_LclInstrm(XmlNode _XmlNode)
    {
        XmlNode locTempNode;
        //This node is generated by setting gLclInstrm_Prtry or gLclInstrm_Cd in method node_PmtTpInf(...
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                                        gXmlDocument,
                                        _XmlNode,
                                        'LclInstrm',
                                        '',
                                        0,
                                        true);
        if(strLen(glclInstrm_Prtry) > 0)
        {
            this.node_Prtry(locTempNode);
        }
        if(strLen(glclInstrm_Cd) > 0)
        {
            this.node_Cd(locTempNode);
        }
        Return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()
    {
        gNodeRoot = gXmlDocument.appendChild(gXmlDocument.createElement('Document'));
        SKS_EFT_Format::xmlsetAttributeText(gNodeRoot, 'xmlns', 'urn:iso:std:iso:20022:tech:xsd:pain.001.001.03');
        SKS_EFT_Format::xmlsetAttributeText(gNodeRoot, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MmbId</Name>
				<Source><![CDATA[
    protected XmlNode node_MmbId(XmlNode _XmlNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                _XmlNode,
                                'MmbId',
                                mSKS_PP_FileDetail.BnkBankTransit,
                                35,
                                true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MsgId</Name>
				<Source><![CDATA[
    protected XmlNode node_MsgId(XmlNode _XmlNode)
    {
        return  SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    _XmlNode,
                    'MsgId',
                    mSKS_PP_File.FileNbr,
                    35,
                    true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_NbOfTxs</Name>
				<Source><![CDATA[
    protected XmlNode node_NbOfTxs(XmlNode _XmlNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                                        gXmlDocument,
                                        _XmlNode,
                                        'NbOfTxs',
                                        '',
                                        15,
                                        true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Nm</Name>
				<Source><![CDATA[
    protected XmlNode node_Nm(XmlNode _XmlNode, str _NodeValue, int _MaxLength)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                _XmlNode,//NOTE: here we are adding a child to the previous node
                                'Nm',
                                _NodeValue,
                                _MaxLength,//Spec allows for 140, but the PP01 field can only hold thirty
                                true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Othr</Name>
				<Source><![CDATA[
    protected XmlNode node_Othr(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                            gXmlDocument,
                            locTempNode,
                            'Othr',
                            '',
                            0,
                            true);
        this.node_Id(locTempNode, mSKS_PP_FileDetail.BnkBankAcct,34);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtId</Name>
				<Source><![CDATA[
    protected XmlNode node_PmtId(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                gXmlDocument,
                locTempNode,
                'PmtId',
                '',
                0,
                true);
        this.node_EndToEndId(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected XmlNode node_PmtInf(XmlNode _XmlNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                _XmlNode,
                                'PmtInf',
                                '',
                                35,
                                true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfId</Name>
				<Source><![CDATA[
    protected XmlNode node_PmtInfId(XmlNode _XmlNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        _XmlNode,
                        'PmtInfId',
                        strReplace(strReplace(mSKS_PP_File.FileNbr + '-'
                            + gSKS_PP_Bank.BankAccountId, '-', '_'),' ','_')
                            + '_' + int2str(gPmtInfIdCounter),
                        35,
                        true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtMtd</Name>
				<Source><![CDATA[
    protected XmlNode node_PmtMtd(XmlNode _XmlNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        _XmlNode,
                        'PmtMtd',
                        'CHK',
                        3,
                        true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtTpInf</Name>
				<Source><![CDATA[
    protected XmlNode node_PmtTpInf(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        //This node is generated by overriding this method,
        //              setting the gLclInstrm_Prtry or gLclInstrm_Cd
        //              via the SetgLclInstrmPrtry or setgLclInstrmCd methods.
        if(strLen(glclInstrm_Prtry) || strLen(glclInstrm_Cd) || strLen(gSvcLvl_Cd))
        {
    
    
            locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                            gXmlDocument,
                            locTempNode,
                            'PmtTpInf',
                            '',
                            0,
                            true);
            if(strLen(gSvcLvl_Cd))
            {
                this.node_SvcLvl(locTempNode);
            }
            if(strLen(glclInstrm_Prtry) || strLen(glclInstrm_Cd))
            {
                this.node_LclInstrm(locTempNode);
            }
        }
    
    
    
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Prtry</Name>
				<Source><![CDATA[
    protected XmlNode node_Prtry(XmlNode _XmlNode, int _MaxLength = 35)
    {
        //In order to include this node use must set the glclInstrm_Prtry in the PmtTpInf node.
        return SKS_EFT_Format::xmlAppendChildNodeText(
                gXmlDocument,
                _XmlNode,//NOTE: here we are adding a child to the previous node
                'Prtry',
                glclInstrm_Prtry,
                _MaxLength,
                true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_ReqdExctnDt</Name>
				<Source><![CDATA[
    protected XmlNode node_ReqdExctnDt(XmlNode _XmlNode)
    {
        return SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    _XmlNode,
                    'ReqdExctnDt',
                    SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate,DateSeparator::Hyphen),
                    10,
                    true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_SvcLvl</Name>
				<Source><![CDATA[
    protected XmlNode node_SvcLvl(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                gXmlDocument,
                locTempNode,
                'SvcLvl',
                '',
                0,
                true);
        this.node_Cd(locTempNode, 4);
    
        return locTempNode;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionGroupHeader</Name>
				<Source><![CDATA[
    protected void sectionGroupHeader()
    {
        XmlNode locXMLNode, locTempNode;
        container company;
        
        if(mPrevBankAccount != mSKS_PP_FileDetail.BnkBankAcct
            || mSKS_PP_FileDetail.ChkDocDate != gPrevDate
            || mSKS_PP_FileDetail.ChkType != gPrevSKS_PP_ChequeType
            || mSKS_PP_FileDetail.ChkCpnyId != prevcompany)
        {
    
    
            company = [mSKS_PP_FileDetail.ChkCpnyId];

            if(mPrevBankAccount != mSKS_PP_FileDetail.BnkBankAcct ||
                mSKS_PP_FileDetail.ChkCpnyId != prevcompany)
            {
                gSKS_PP_Bank = null;
                gBankAccountTable = null;
                select crossCompany:company gBankAccountTable
                join gSKS_PP_Bank
                where gSKS_PP_Bank.BankAccountId == gBankAccountTable.AccountID
                    && gSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
            }
    
            gPrevDate = mSKS_PP_FileDetail.ChkDocDate;
            gPrevSKS_PP_ChequeType = mSKS_PP_FileDetail.ChkType;
            prevcompany = mSKS_PP_FileDetail.ChkCpnyId;
            gPmtInfIdCounter++;
    
    
            locXMLNode = gNodeRoot.selectSingleNode('//CstmrCdtTrfInitn');
            //The following line is the CHILD node of //CstmrCdtTrfInitn
            locXMLNode = this.node_PmtInf(locXMLNode);
            //EVERYTHING AFTER THIS NODE IS A CHILD OF //CstmrCdtTrfInitn/PmtInf
            //this node has no children so there is no reason to catch the return
            this.node_PmtInfId(locXMLNode);
            //this node has no children so there is no reason to catch the return
            this.node_PmtMtd(locXMLNode);
            // !!!! IF YOU WANT A PmtTPInf NODE !!!! //
            // !!!! YOU MUST HAVE THE           !!!! //
            // !!!!    setLclInstrm_Prtry() OR  !!!! //
            // !!!!    setLclInstrm_Cd() IN THE !!!! //
            // !!!!    CHILD FORMAT             !!!! //
            //this node has children, so you must catch the returned node
            locTempNode = this.node_PmtTpInf(locXMLNode);
            //this node has no children so there is no reason to catch the return
            this.node_ReqdExctnDt(locXMLNode);
            locTempNode = this.node_Dbtr(locXMLNode);
            locTempNode = this.node_DbtrAcct(locXMLNode);
            locTempNode = this.node_DbtrAgt(locXMLNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        select * from mSKS_PP_FileDetail
            order by mSKS_PP_FileDetail.BnkBankAcct,
                    mSKS_PP_FileDetail.ChkDocDate,
                    mSKS_PP_FileDetail.ChkType
            where mSKS_PP_FileDetail.FileNbr == mFileNumber
                    && mSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Payments;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLclInstrm_Cd</Name>
				<Source><![CDATA[
    public void setLclInstrm_Cd(str _LclInstrm_Cd)
    {
        glclInstrm_Cd = _LclInstrm_Cd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLclInstrm_Prtry</Name>
				<Source><![CDATA[
    public void setLclInstrm_Prtry(str _LclInstrm_Prtry)
    {
        glclInstrm_Prtry = _LclInstrm_Prtry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSvcLvl_Cd</Name>
				<Source><![CDATA[
    public void setSvcLvl_Cd(str _SvcLvl_Cd)
    {
        gSvcLvl_Cd = _SvcLvl_Cd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    public str txtDetail()
    {
        XmlNodeList locXmlNodeList;
        int locMostRecentNodeIndex;
        XmlNode locXMLNode;
        gNbOfTxs++;
        gCtrlSum += mSKS_PP_FileDetail.ChkCuryAmt;
    
    
    
        locXmlNodeList = gNodeRoot.selectNodes('//CstmrCdtTrfInitn/PmtInf');
        locMostRecentNodeIndex = locXmlNodeList.length();
        locXMLNode = locXMLNodeList.item(locMostRecentNodeIndex - 1);
        locXMLNode = this.node_CdtTrfTxInf(locXMLNode);
    
    
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    protected str txtFormatHeader()
    {
        XmlNode locTempNode;
        container company;
    
        gXmlDocument = XmlDocument::newBlank();
        this.node_MessageRoot();
        gNbOfTxs = 0;
        gInPmt = false;
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company gBankAccountTable
            join    gSKS_PP_Bank
            where gSKS_PP_Bank.BankAccountId == gBankAccountTable.AccountID
                && gSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
    
        locTempNode = this.node_CstmrCdtTrfInitn(gNodeRoot);
    
    
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatTrailer</Name>
				<Source><![CDATA[
    protected str txtFormatTrailer()
    {
        XmlElement locXmlNode;
        utcDateTime locCreatedDateTime;
        str locTemp;
    
        locCreatedDateTime = DateTimeUtil::utcNow();
    
        locXMLNode = gNodeRoot.selectSingleNode('//CstmrCdtTrfInitn/GrpHdr/CreDtTm');
        locTemp = int2str(DateTimeUtil::year(locCreatedDateTime))
                    + '-' + SKS_PP_StringFormats::strFill(2,int2str(DateTimeUtil::month(locCreatedDateTime)),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)
                    + '-' + SKS_PP_StringFormats::strFill(2,int2str(DateTimeUtil::day(locCreatedDateTime)),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)
                    + 'T' + SKS_PP_StringFormats::strFill(2,int2str(DateTimeUtil::hour(locCreatedDateTime)),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)
                    + ':' + SKS_PP_StringFormats::strFill(2,int2str(DateTimeUtil::minute(locCreatedDateTime)),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)
                    + ':' + SKS_PP_StringFormats::strFill(2,int2str(DateTimeUtil::second(locCreatedDateTime)),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        locXmlNode.innerText(locTemp);
        locXMLNode = gNodeRoot.selectSingleNode('//CstmrCdtTrfInitn/GrpHdr/NbOfTxs');
        locXmlNode.innerText(int2str(gNbOfTxs));
        locXMLNode = gNodeRoot.selectSingleNode('//CstmrCdtTrfInitn/GrpHdr/CtrlSum');
        locXmlNode.innerText(num2str(gCtrlSum,1,2,DecimalSeparator::Dot, ThousandSeparator::None));
    
        return gXmlDocument.toString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>