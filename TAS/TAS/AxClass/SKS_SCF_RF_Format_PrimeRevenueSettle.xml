<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_SCF_RF_Format_PrimeRevenueSettle</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Inbound file format for the Outbound format SKS_SCF_RF_Format_PrimeRevenueACK
/// </summary>
class SKS_SCF_RF_Format_PrimeRevenueSettle extends SKS_SCF_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;
    str mFileName;
    str mFileID;
    str mFieldDelimiter;
    str mReferenceNum;
    CurrencyCode fundedCurrency;
    VendAccount vendAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_SCF_RF_File getFile(str _filename, boolean _serverPath)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct();
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad();
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        //priming read
        locString = locStreamReader.ReadLine();

        if(!mSKS_SCF_RF_File)
        {
            mSKS_SCF_RF_File = new SKS_SCF_RF_File();
        }

        mSKS_SCF_RF_SentFile = new SKS_SCF_RF_SentFile();

        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                this.processNode(locString);
            }
            locString = locStreamReader.ReadLine();
        }

        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        locStreamReader.Close();
        if(gErrorsExist)
        {
            mSKS_SCF_RF_File = null;
        }

        return this.getSKS_SCF_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath)
    {

        str rtnval = '';
        int classId;
        int locRecLen;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean pos1to2RecordTypecodeRF = false;
        boolean pos1to2RecordTypecodeRB = false;
        boolean pos1to2RecordTypecodePO = false;
        boolean pos3to24PaymentReferenceRB = false;
        boolean pos3to52InvoiceNumberPO = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none

        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct();
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad();
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
        //priming read
   
        while(!locStreamReader.get_EndOfStream())
        {
            locString = locStreamReader.ReadLine();

            if(!System.String::IsNullOrEmpty(locString))
            {
                //a valid Bankgirot file has records of length 80
                locRecLen = locString.get_Length();

                if(!System.String::IsNullOrWhiteSpace(locString))
                {

                    if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'RF')
                    {
                        pos1to2RecordTypecodeRF = true;
                    }
                    if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'RB' &&
                        SKS_PP_StringFormats::strSub(locString, 3, 12) != '')
                    {
                        pos1to2RecordTypecodeRB = true;
                        pos3to24PaymentReferenceRB = true;
                    }

                    if((SKS_PP_StringFormats::strSub(locString, 1, 2) == 'PO' ||
                        SKS_PP_StringFormats::strSub(locString, 1, 2) == 'CM') &&
                        SKS_PP_StringFormats::strSub(locString, 3, 50) != '')
                    {
                        pos1to2RecordTypecodePO = true;
                        pos3to52InvoiceNumberPO = true;
                    }
                }
            }
        }
        if(pos1to2RecordTypecodeRF
        && pos1to2RecordTypecodeRB
        && pos3to24PaymentReferenceRB
        && pos1to2RecordTypecodePO
        && pos3to52InvoiceNumberPO)
        {
            //ALl Qualifers show this a SE_BANKGIROT_ACK_80 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_SCF_RF_File</Name>
				<Source><![CDATA[
    public SKS_SCF_RF_File getSKS_SCF_RF_File()
    {

        if(mSKS_SCF_RF_SentFile != null)
        {
            mSKS_SCF_RF_File.addSentFile(mSKS_SCF_RF_SentFile);
            mSKS_SCF_RF_SentFile = null;
        }

        return mSKS_SCF_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(str locString)
    {
        str amount;

        if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'RB' &&
           SKS_PP_StringFormats::strSub(locString, 3, 12) != '')
        {
            mReferenceNum = SKS_PP_StringFormats::strSub(locString, 3, 12);
            fundedCurrency = SKS_PP_StringFormats::strSub(locString, 107, 3);
            vendAccount = SKS_PP_StringFormats::strSub(locString, 15, 35);
        }

        if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'PO' ||
            SKS_PP_StringFormats::strSub(locString, 1, 2) == 'CM')
        {
            mSKS_SCF_RF_Transaction = new SKS_SCF_RF_Transaction();

            if(mSKS_SCF_RF_Transaction != null)
            {
                mSKS_SCF_RF_SentFile.addTransaction(mSKS_SCF_RF_Transaction);
            }

            mSKS_SCF_RF_Transaction.GetInvoiceType(SKS_PP_StringFormats::strSub(locString, 1, 2));

            mSKS_SCF_RF_Transaction.GetReferenceNo(mReferenceNum);

            mSKS_SCF_RF_Transaction.GetFundedCurr(fundedCurrency);

            mSKS_SCF_RF_Transaction.GetInvoiceNum(SKS_PP_StringFormats::strSub(locString, 3, 50));

            mSKS_SCF_RF_Transaction.GetVendAccount(vendAccount);

            mSKS_SCF_RF_Transaction.GetDueDate(str2Date(SKS_PP_StringFormats::strSub(locString, 59, 6), 321));

            amount = SKS_PP_StringFormats::strSub(locString, 119, 18);
            amount = subStr(amount, 1, 16) + '.' + subStr(amount, 17,2);

            mSKS_SCF_RF_Transaction.GetFundedmAmt(str2Num(amount));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>