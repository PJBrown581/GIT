<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_DK_DANSKEBANK_CSV_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_DK_DANSKEBANK_CSV_AR Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_DK_DANSKEBANK_CSV_AR Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20221020';
        dataContractVersion = '1.0';
        conFormatID = ['DK-DANSKEBANK-CSV-AR','DK-DANSKEBANK-CSV-NO-AR','DK-DANSKEBANK-CSV-UK-AR'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'','','Creditor\'s name','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',0,'DK - Danske Bank - Comma Separated',0,'','','DK-DANSKEBANK-CSV-AR',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','','','',0,'','',0,0,0,0,0,0,0,'DK-DANSKEBANK-CSV-AR',1,0,0]);
        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'','','Creditor\'s name','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',0,'DK - Danske Bank - Comma Separated - Norway',0,'','','DK-DANSKEBANK-CSV-NO-AR',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','','','',0,'','',0,0,0,0,0,0,0,'DK-DANSKEBANK-CSV-AR',1,0,0]);
        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'','','Creditor\'s name','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',0,'DK - Danske Bank - Comma Separated - United Kingdom',0,'','','DK-DANSKEBANK-CSV-UK-AR',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','','','',0,'','',0,0,0,0,0,0,0,'DK-DANSKEBANK-CSV-AR',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('DK-DANSKEBANK-CSV-AR'):
                paymSpecList = this.getPaymSpecsMetaData_DK_DANSKEBANK_CSV_AR();
                break;

            case ('DK-DANSKEBANK-CSV-NO-AR'):
                paymSpecList = this.getPaymSpecsMetaData_DK_DANSKEBANK_CSV_NO_AR();
                break;

            case ('DK-DANSKEBANK-CSV-UK-AR'):
                paymSpecList = this.getPaymSpecsMetaData_DK_DANSKEBANK_CSV_UK_AR();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_DK_DANSKEBANK_CSV_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_DK_DANSKEBANK_CSV_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'Wire Domestic Payments',1,'DD-101','','DD-101','',0,'DK-DANSKEBANK-CSV-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,2,0,0,0,1,1,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'Wire Domestic Payments',1,'DD-103','','DD-103','',0,'DK-DANSKEBANK-CSV-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,2,0,0,0,1,1,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_DK_DANSKEBANK_CSV_NO_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_DK_DANSKEBANK_CSV_NO_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'Wire Domestic Payments',1,'DD-201','','DD-201','',0,'DK-DANSKEBANK-CSV-NO-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,2,0,0,0,1,1,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'Wire Domestic Payments',1,'DD-203','','DD-203','',0,'DK-DANSKEBANK-CSV-NO-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,2,0,0,0,1,1,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_DK_DANSKEBANK_CSV_UK_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_DK_DANSKEBANK_CSV_UK_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'UK Direct Debit First Payment',1,'DD-701','','DD-701','',0,'DK-DANSKEBANK-CSV-UK-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,2,0,0,0,1,1,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'UK Direct Debit Standard/Normal Payment',1,'DD-702','','DD-702','',0,'DK-DANSKEBANK-CSV-UK-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,2,0,0,0,1,1,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('DK-DANSKEBANK-CSV-AR'):
                notesList = this.getNotesMetaData_DK_DANSKEBANK_CSV_AR();
                break;

            case ('DK-DANSKEBANK-CSV-NO-AR'):
                notesList = this.getNotesMetaData_DK_DANSKEBANK_CSV_NO_AR();
                break;

            case ('DK-DANSKEBANK-CSV-UK-AR'):
                notesList = this.getNotesMetaData_DK_DANSKEBANK_CSV_UK_AR();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_DK_DANSKEBANK_CSV_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_DK_DANSKEBANK_CSV_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-CSV-AR','DD-101','-Creditor\'s name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-For addresses you must add DirectDebit purpose in Address and contact information purpose form in Organization administration.:--Address will print only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.:--House number and Street name is stored on Street field separated by ;::-TAS > Setup > Bank account > Direct debit:--CS creditor number and VAT numbers are stored in the File info (fast tab).::-Accounts receivables > All customers > Select a customer > Direct debit mandates (Fast tab):--Mandate ID is required.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','-Creditor\'s name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-For addresses you must add DirectDebit purpose in Address and contact information purpose form in Organization administration.:--Address will print only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.:--House number and Street name is stored on Street field separated by ;::-TAS > Setup > Bank account > Direct debit:--CS creditor number and VAT numbers are stored in the File info (fast tab).::-Accounts receivables > All customers > Select a customer > Direct debit mandates (Fast tab):--Mandate ID is required.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_DK_DANSKEBANK_CSV_NO_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_DK_DANSKEBANK_CSV_NO_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','-Creditor\'s name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-For addresses you must add DirectDebit purpose in Address and contact information purpose form in Organization administration.:--Address will print only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.:--House number and Street name is stored on Street field separated by ;::-TAS > Setup > Bank account > Direct debit:--CS creditor number and VAT numbers are stored in the File info (fast tab).::-Accounts receivables > All customers > Select a customer > Direct debit mandates (Fast tab):--Mandate ID is required.::--Payment Id is stored in Account receivable > Payments > Payment journal > Payment tab > Payment id']);
        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','-Creditor\'s name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-For addresses you must add DirectDebit purpose in Address and contact information purpose form in Organization administration.:--Address will print only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.:--House number and Street name is stored on Street field separated by ;::-TAS > Setup > Bank account > Direct debit:--CS creditor number and VAT numbers are stored in the File info (fast tab).::-Accounts receivables > All customers > Select a customer > Direct debit mandates (Fast tab):--Mandate ID is required.::--Payment Id is stored in Account receivable > Payments > Payment journal > Payment tab > Payment id']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_DK_DANSKEBANK_CSV_UK_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_DK_DANSKEBANK_CSV_UK_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-701','-Creditor\'s name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-For addresses you must add DirectDebit purpose in Address and contact information purpose form in Organization administration.:--Address will print only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.:--House number and Street name is stored on Street field separated by ;::-TAS > Setup > Bank account > Direct debit:--CS creditor number and VAT numbers are stored in the File info (fast tab).::-Accounts receivables > All customers > Select a customer > Direct debit mandates (Fast tab):--Mandate ID is required.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-702','-Creditor\'s name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-For addresses you must add DirectDebit purpose in Address and contact information purpose form in Organization administration.:--Address will print only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.:--House number and Street name is stored on Street field separated by ;::-TAS > Setup > Bank account > Direct debit:--CS creditor number and VAT numbers are stored in the File info (fast tab).::-Accounts receivables > All customers > Select a customer > Direct debit mandates (Fast tab):--Mandate ID is required.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('DK-DANSKEBANK-CSV-AR'):
                validationsList = this.getValidationsMetaData_DK_DANSKEBANK_CSV_AR();
                break;

            case ('DK-DANSKEBANK-CSV-NO-AR'):
                validationsList = this.getValidationsMetaData_DK_DANSKEBANK_CSV_NO_AR();
                break;

            case ('DK-DANSKEBANK-CSV-UK-AR'):
                validationsList = this.getValidationsMetaData_DK_DANSKEBANK_CSV_UK_AR();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_DK_DANSKEBANK_CSV_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_DK_DANSKEBANK_CSV_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-101','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','Field No.46 > Debtor address 3','Street name related to customer','2','Street','','',1,'1',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-101','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','Field No.49 > Debtor postal code','Postal code related to customer','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-101','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','Field No.50 > Debtor City','City related to customer','2','City','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-101','','Customer Country','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','Field No.51 > Debtor country','Country related to customer','2','CountryRegionId','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-101','','Customer bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','Field No.60 > Debtor\'s account number','Bank account number related to customer',1,'AccountNum','','',1,0,1,'14',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-101','','Payment identification','AR > Payments > Payment Journal> Payment Tab > Payment ID','Field No.25 > Payment identification','Payment id related to payment','7','PaymId','','',1,1,'','25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','Field No.12 > Creditor\'s  account number','Account number related to Bank',0,'AccountNum','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','Field No.46 > Debtor address 3','Street name related to customer','2','Street','','',1,'1',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','Field No.49 > Debtor postal code','Postal code related to customer','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','Field No.50 > Debtor City','City related to customer','2','City','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Customer Country','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','Field No.51 > Debtor country','Country related to customer','2','CountryRegionId','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Customer bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','Field No.60 > Debtor\'s account number','Bank account number related to customer',1,'AccountNum','','',1,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Payment identification','AR > Payments > Payment Journal> Payment Tab > Payment ID','Field No.25 > Payment identification','Payment id related to payment','7','PaymId','','',1,1,'','25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Customer Invoice Number','AR > Invoices > All free text invoices > Invoice','Field No.28 > Invoice number','Customer Invoice Number','7','Invoice','','',1,'2','','25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-AR','DD-103','','Debtor text heading','AR > Invoices > All free text invoices > Invoice lines > Description','Field No.63 > Debtor text heading','Description related to invoice','7','Txt','','',1,1,'','50',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_DK_DANSKEBANK_CSV_NO_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_DK_DANSKEBANK_CSV_NO_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','Field No.12 > Creditor\'s  account number','Account number related to Bank',0,'AccountNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','Field No.46 > Debtor address 3','Street name related to customer','2','Street','','',1,'1',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','Field No.49 > Debtor postal code','Postal code related to customer','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','Field No.50 > Debtor City','City related to customer','2','City','','',1,'1',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Customer Country','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','Field No.51 > Debtor country','Country related to customer','2','CountryRegionId','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Customer bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','Field No.60 > Debtor\'s account number','Bank account number related to customer',1,'AccountNum','','',1,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Payment identification','AR > Payments > Payment Journal> Payment Tab > Payment ID','Field No.25 > Payment identification','Payment id related to payment','7','PaymId','','',1,1,'','25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Customer Invoice Number','AR > Invoices > All free text invoices > Invoice','Field No.28 > Invoice number','Customer Invoice Number','7','Invoice','','',1,'2','','25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-201','','Debtor text heading','AR > Invoices > All free text invoices > Invoice lines > Description','Field No.63 > Debtor text heading','Description related to invoice','7','Txt','','',1,1,'','50',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','Field No.12 > Creditor\'s  account number','Account number related to Bank',0,'AccountNum','','',0,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','Field No.48 > Debtor house number','House number related to customer','2','Street','','',1,'1',1,'25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','Field No.49 > Debtor postal code','Postal code related to customer','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','Field No.50 > Debtor City','City related to customer','2','City','','',1,'1',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Customer Country','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','Field No.51 > Debtor country','Country related to customer','2','CountryRegionId','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Customer bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','Field No.60 > Debtor\'s account number','Bank account number related to customer',1,'AccountNum','','',1,0,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Payment identification','AR > Payments > Payment Journal> Payment Tab > Payment ID','Field No.25 > Payment identification','Payment id related to payment','7','PaymId','','',1,1,'','25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Customer Invoice Number','AR > Invoices > All free text invoices > Invoice','Field No.28 > Invoice number','Customer Invoice Number','7','Invoice','','',1,'2','','25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-NO-AR','DD-203','','Debtor text heading','AR > Invoices > All free text invoices > Invoice lines > Description','Field No.63 > Debtor text heading','Description related to invoice','7','Txt','','',1,1,'','50',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_DK_DANSKEBANK_CSV_UK_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_DK_DANSKEBANK_CSV_UK_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-701','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','Field No.46 > Debtor address 3','Street name related to customer','2','Street','','',1,'1',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-701','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','Field No.49 > Debtor postal code','Postal code related to customer','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-701','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','Field No.50 > Debtor City','City related to customer','2','City','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-701','','Customer Country','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','Field No.51 > Debtor country','Country related to customer','2','CountryRegionId','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-701','','Customer bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','Field No.60 > Debtor\'s account number','Bank account number related to customer',1,'AccountNum','','',1,0,1,'14',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-701','','Payment identification','AR > Payments > Payment Journal> Payment Tab > Payment ID','Field No.25 > Payment identification','Payment id related to payment','7','PaymId','','',1,1,'','25',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-702','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','Field No.46 > Debtor address 3','Street name related to customer','2','Street','','',1,'1',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-702','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','Field No.49 > Debtor postal code','Postal code related to customer','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-702','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','Field No.50 > Debtor City','City related to customer','2','City','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-702','','Customer Country','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','Field No.51 > Debtor country','Country related to customer','2','CountryRegionId','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-702','','Customer bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','Field No.60 > Debtor\'s account number','Bank account number related to customer',1,'AccountNum','','',1,0,1,'14',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['DK-DANSKEBANK-CSV-UK-AR','DD-702','','Payment identification','AR > Payments > Payment Journal> Payment Tab > Payment ID','Field No.25 > Payment identification','Payment id related to payment','7','PaymId','','',1,1,'','25',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['DK-DANSKEBANK-CSV-AR','*','FormatValidations','*','3','MarkedInvoice']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['DK-DANSKEBANK-CSV-AR','*','FormatValidations','*','3','PaymId']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['DK-DANSKEBANK-CSV-AR','*','FormatValidations','*','3','Txt']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('DK-DANSKEBANK-CSV-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_AR();
                break;

            case ('DK-DANSKEBANK-CSV-NO-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_NO_AR();
                break;

            case ('DK-DANSKEBANK-CSV-UK-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_UK_AR();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-CSV-AR','DK-DANSKEBANK-CSV-AR','CsCredNum','CS creditor number',1,'CsCredNum','',0,'','XXXXXXXXXX','']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-CSV-AR','DK-DANSKEBANK-CSV-AR','VATNum','VAT number',1,'VATNum','',0,'','XXXXXXXXXX','']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_NO_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_NO_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-CSV-AR','DK-DANSKEBANK-CSV-NO-AR','CsCredNum','CS creditor number',1,'CsCredNum','',0,'','XXXXXXXXXX','']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-CSV-AR','DK-DANSKEBANK-CSV-NO-AR','VATNum','VAT number',1,'VATNum','',0,'','XXXXXXXXXX','']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_UK_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_DK_DANSKEBANK_CSV_UK_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-CSV-AR','DK-DANSKEBANK-CSV-UK-AR','CsCredNum','CS creditor number',1,'CsCredNum','',0,'','XXXXXXXXXX','']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['DK-DANSKEBANK-CSV-AR','DK-DANSKEBANK-CSV-UK-AR','VATNum','VAT number',1,'VATNum','',0,'','XXXXXXXXXX','']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the direct debit bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateARBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('DK-DANSKEBANK-CSV-AR'):
            case ('DK-DANSKEBANK-CSV-NO-AR'):
            case ('DK-DANSKEBANK-CSV-UK-AR'):
                if(gSKS_EFTAR_Bank.W01)
                {
                    this.updateARBankFields('CsCredNum', gSKS_EFTAR_Bank.W01);
                }
                if(gSKS_EFTAR_Bank.W02)
                {
                    this.updateARBankFields('VATNum', gSKS_EFTAR_Bank.W02);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>