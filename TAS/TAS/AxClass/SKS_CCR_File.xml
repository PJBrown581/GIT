<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_File</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CCR_File
{
    str fileName;
    str fileExtension;
    str filePath;
    str filePathName;
    str errorText;
    UTCDateTime fileDateTime;
    SKS_BF_BankIntType gSKS_BF_BankIntType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CCR_File construct(SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        return new SKS_CCR_File(_SKS_BF_BankIntType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        gSKS_BF_BankIntType = _SKS_BF_BankIntType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicates</Name>
				<Source><![CDATA[
    boolean checkDuplicates(int64 headerId)
    {
        SKS_CCR_BankHeader sks_ccr_bankheader;
        ;
        while select * from sks_ccr_bankheader where
          sks_ccr_bankheader.RecId != headerId &&
          sks_ccr_bankheader.FileDateTime == fileDateTime
        {
            if(strScan(sks_ccr_bankheader.Filename, fileName, 1, strLen(sks_ccr_bankheader.Filename)))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    str getErrorText()
    {
        return errorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    str getFileName()
    {
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilePath</Name>
				<Source><![CDATA[
    str getFilePath()
    {
        return filePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFile</Name>
				<Source><![CDATA[
    private void moveFile(str sourcePathFile, str destinationPath, str destinationFileName)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(gSKS_BF_BankIntType);
        System.Exception netExcepn;
        System.String[] locBFLocationAndName;
        str locFileName = '';
        str locFilePath = '';

        try
        {
            locSKS_EB_FileHub.parmThrowErrorIfException(false);    //SKS_BR4_Bug:7341
            locSKS_EB_FileHub.runDirectoryCreate(destinationPath);
            if (locSKS_EB_FileHub.errorHasException()) //VSTS 10541 - Begin
            {
                errorText = strFmt("@SYS119902",sourcePathFile) + '; ' + locSKS_EB_FileHub.errorException() + '; Create directory';
                return;
            }

            if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            {
                if(strContains(sourcePathFile,@'/'))
                    locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(sourcePathFile,@'//');
                else if(strContains(sourcePathFile,@'\'))
                    locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(sourcePathFile,@'\\');
                else
                    throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
                locFileName = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);
            }
            else
            {
                locFileName = sourcePathFile;
            }

            locSKS_EB_FileHub.setFileName(locFileName,'','','','',locFilePath);
            locSKS_EB_FileHub.runFileMoveTo(System.IO.Path::Combine(destinationPath, destinationFileName));
            if (locSKS_EB_FileHub.errorHasException())
            {
                errorText = strFmt("@SYS119902",sourcePathFile) + '; ' + locSKS_EB_FileHub.errorException() + '; Move file';
                return;
            }
            //VSTS 10541 - End
        }
        catch(Exception::CLRError)
        {
            netExcepn = CLRInterop::getLastException();
            errorText = netExcepn.get_Message();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToArchive</Name>
				<Source><![CDATA[
    // Returns new path\file name
    str moveToArchive()
    {
        SKS_PP_Setup pp_Setup;
        str archivePath;
        str archiveFileName;
        SKS_PP_StringFormats formats = new SKS_PP_StringFormats();
        str archiveNbrString;
        ;
        archivePath = System.IO.Path::Combine(filePath ,'Archive');
    
        ttsbegin;
    
        select forupdate firstonly pp_Setup;
        if (pp_Setup.CCR_ArchiveNbr < 999999)
        {
            pp_Setup.CCR_ArchiveNbr = pp_Setup.CCR_ArchiveNbr + 1;
        }
        else
        {
            pp_Setup.CCR_ArchiveNbr = 1;
        }
    
        if (pp_Setup.validateWrite())
        {
            pp_Setup.update();
        }
    
        archiveNbrString = formats.fill_String(6, int2Str(pp_Setup.CCR_ArchiveNbr), '0', 'L');
    
        archiveFileName = fileName + '-' + archiveNbrString + fileExtension;
    
        this.moveFile(filePathName, archivePath, archiveFileName);
    
        ttscommit;
    
        return System.IO.Path::Combine(archivePath,archiveFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToError</Name>
				<Source><![CDATA[
    // Returns new path\file name
    str moveToError()
    {
        str errorPath;
        str errorFileName;
        ;
        errorPath = System.IO.Path::Combine(filePath,'Errors');
        errorFileName = fileName + fileExtension;
    
        this.moveFile(filePathName, errorPath, errorFileName);
        return System.IO.Path::Combine(errorPath, errorFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileDateTime</Name>
				<Source><![CDATA[
    void setFileDateTime(UTCDateTime _fileDateTime)
    {
        fileDateTime = _fileDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilePathName</Name>
				<Source><![CDATA[
    void setFilePathName(str _filePathName)
    {
    
        filePathName = _filePathName;
        filePath = System.IO.Path::GetDirectoryName(_filePathName);
        fileName = System.IO.Path::GetFileNameWithoutExtension(_filePathName);
        fileExtension = System.IO.Path::GetExtension(_filePathName);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCCR_Path</Name>
				<Source><![CDATA[
    str validateCCR_Path(SKS_PP_Bank _SKS_PP_BankScr, SKS_PP_Setup _SKS_PP_Setup, boolean _ValidateSetup, SKS_EB_FileStorage _SKS_EB_FileStorage)
    {
        // This validates the CCRFromSetup, CCR_Path, and CCRFormatID dependencies.
        // Also, validation that path is now only used within the current org hierarchy.  You cannot cannot re-use another org hierarchy's path.
        // It returns an empty string if all is ok.
        // It returns an message if there's an problem
        // If this path is used for other bank accounts it checks if the format id can share the path
    
        SKS_EB_FilePath pathToCheckFor;
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_BR_FileFormat fileFormat;
        SKS_BR_FileFormatDetail fileFormatDetail;
        SKS_PP_Setup locSKS_PP_Setup;
        container crossCompanyList;
        SKS_EB_FilePath locBankFabricLocation;
    
        // First get the path we are attempting to use
        if (_ValidateSetup)
        {
            pathToCheckFor = _SKS_PP_Setup.CCRPath;
        }
        else
        {
            pathToCheckFor = _SKS_PP_BankScr.CCR_Path;
            locBankFabricLocation = _SKS_PP_BankScr.CCR_BankFabricLocation;
            If (strlen(_SKS_PP_BankScr.CCR_FormatID) != 0)
            {
                
                //This block of code will check for any bank account in any company using our path but not our CCR Format ID.
                while select crosscompany CCR_FormatID,BankAccountId, CCR_BankFabricLocation, CCR_Path,dataAreaId, recid from locSKS_PP_Bank
                    order by locSKS_PP_Bank.CCR_FormatID
                    where
                    locSKS_PP_Bank.CCR_FormatID != '' &&
                    locSKS_PP_Bank.CCR_FormatID != _SKS_PP_BankScr.CCR_FormatID &&
                    locSKS_PP_Bank.BankAccountId != _SKS_PP_BankScr.BankAccountId &&
                    ((locSKS_PP_Bank.CCR_Path == pathToCheckFor && _SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    || (locSKS_PP_Bank.CCR_BankFabricLocation == locBankFabricLocation && _SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue))
                {
                    //This block of code checs the path and format ID.  If the path matches, but he format ID does not, then it will error.
                    if((_SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue) && (locSKS_PP_Bank.CCR_FormatID != _SKS_PP_BankScr.CCR_FormatID) && (locSKS_PP_Bank.CCR_Path == pathToCheckFor))
                    {
                        return strFmt("@SKS540", pathToCheckFor,
                            locSKS_PP_Bank.CCR_FormatID, locSKS_PP_Bank.BankAccountId, locSKS_PP_Bank.dataAreaId);
                    }
                    else if ((_SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue) && (locSKS_PP_Bank.CCR_FormatID != _SKS_PP_BankScr.CCR_FormatID) && (locSKS_PP_Bank.CCR_BankFabricLocation == locBankFabricLocation))
                    {
                        return strFmt("@SKS:SKGLocationUsedByDifferentBRFormat", locBankFabricLocation,
                            locSKS_PP_Bank.CCR_FormatID, locSKS_PP_Bank.BankAccountId, locSKS_PP_Bank.dataAreaId);
                    }
                }
                // Not valid if others use this path with the same format id but don't have the bank account number mapped
                select firstOnly BankAccountId,CCR_BankFabricLocation,CCR_Path, RecId from locSKS_PP_Bank
                    where locSKS_PP_Bank.BankAccountId != _SKS_PP_BankScr.BankAccountId &&
                    ((locSKS_PP_Bank.CCR_Path == pathToCheckFor && _SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                    || (locSKS_PP_Bank.CCR_BankFabricLocation == locBankFabricLocation && _SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue))
                    && locSKS_PP_Bank.CCR_FormatID == _SKS_PP_BankScr.CCR_FormatID;
                if (locSKS_PP_Bank.RecId != 0)
                {
                    // We have others using this path with the same format id, so lets inspect this format ids file type
                    select firstOnly RecId, CCR_FileType, FormatId  from fileFormat
                        where fileFormat.FormatID == _SKS_PP_BankScr.CCR_FormatID
                        && fileFormat.CCR_IsCCRFormat == NoYes::Yes;    /// SKS_FDD_13903 - To make sure that its picking only CCR format
                    if (fileFormat.RecId == 0)
                    {
                        // This should never happen
                        throw error(strFmt("@SKS541", _SKS_PP_BankScr.CCR_FormatID));
                    }
    
                    // It's not valid if the type is CSV or Fixed Length but the account number is NOT mapped
                    if (fileFormat.CCR_FileType == SKS_CCR_FileType::Delimited ||
                        fileFormat.CCR_FileType == SKS_CCR_FileType::FixedField)
                    {
                        // So let's see if the Account Number field is mapped
                        select firstOnly RecId from fileFormatDetail
                            where fileFormatDetail.FormatID == _SKS_PP_BankScr.CCR_FormatID &&
                                fileFormatDetail.CCR_FieldType == SKS_CCR_FieldType::BankAccountNumber
                                && fileFormatDetail.CCR_IsCCRFormat == NoYes::Yes;  /// SKS_FDD_13903 - To make sure that its picking only CCR format
                        if (fileFormatDetail.RecId == 0)
                        {
                            return strFmt("@SKS543", fileFormat.FormatID, fileFormat.CCR_FileType);
                        }
                    }
                }
            }
        }
        //The inbound CCR path cannot be shared across companies.
        //FOR BANK ACCOUNTS:
        //This block looks in all companies for CCR Accounts that have...
        //A:  the current path.
        //B:  a format ID.
        crossCompanyList = SKS_EB_VirtualCompany::getCCRRecCompanies();
        while select crosscompany BankAccountId, Recid, DataAreaId, CCR_Path, CCR_FormatID from  locSKS_PP_Bank
            where ((locSKS_PP_Bank.CCR_Path == pathToCheckFor && _SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
                || (locSKS_PP_Bank.CCR_BankFabricLocation == locBankFabricLocation && _SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue))
                && locSKS_PP_Bank.CCR_FormatID != ''
        {
            if(_SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue && !conFind(crossCompanyList, locSKS_PP_Bank.company()))
            {
                return(strFmt("@SKS:SKGCCRInvalidCCRPathDiffCompany", locSKS_PP_Bank.company(), locSKS_PP_Bank.BankAccountId));
            }
            else if(_SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue && !conFind(crossCompanyList, locSKS_PP_Bank.company()))
            {
                return(strFmt("@SKS:SKGBRBRLocationErrorLocationUsedOutsideCompany",
                                    locSKS_PP_Bank.company(), locSKS_PP_Bank.BankAccountId));
            }
        }
    
    
        //The inbound CCR path cannot be shared across companies.
        //FOR SETUP:
        //This block looks in all companies' setup for inbound CCR Accounts that have the current path.
        if(_SKS_EB_FileStorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
        {
            select crosscompany recid,DataAreaId from  locSKS_PP_Bank
                where locSKS_PP_Bank.CCR_Path == pathToCheckFor;
        }
        else
        {
            select crosscompany recid,DataAreaId from  locSKS_PP_Bank
                where locSKS_PP_Bank.CCR_BankFabricLocation == locBankFabricLocation;
            
        }  
        
        while(locSKS_PP_Bank)
        {
            if(!conFind(crossCompanyList, locSKS_PP_Setup.company()))
            {
                return(strFmt("@SKS:SKGCCRInvalidCCRPathCompany", locSKS_PP_Setup.company()));
            }
            next locSKS_PP_Bank;
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLastPathSlash</Name>
				<Source><![CDATA[
    static server str removeLastPathSlash(str filePath)
    {
        int len;
        ;
    
        len = strLen(filePath);
        if (strFind(filePath, '\\', len, 1))
        {
            return subStr(filePath, 1, len-1);
        }
    
        return filePath;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>