<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_FF_300</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_FF_300 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_FF_300 extends SKS_EFT_Format
{
    #define.FormatVersion('20230505')
    int mRecordCount;
    int numDocs;
    AmountMST mPaymentAmount;
    System.Text.StringBuilder msb;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildString</Name>
				<Source><![CDATA[
    boolean buildString()
    {
        System.Text.StringBuilder sb;
        str record = msb.ToString();
        int pos = 1;
        int length;
        int recMod;
        int lineCount;
        str value;
        int totalCount = 1;
        
        length = strLen(record);
        lineCount = length div 300;
        recMod = length mod 300;
        
        if(recMod > 0)
        {
            lineCount++;
        }
        
        // Create the compressed records
        while(lineCount >= totalCount)
        {
            sb = new System.Text.StringBuilder();
            value = subStr(record, pos, 300);
            pos = pos + 300;
            
            // Pmt Related Info 04-83
            sb.Append(value);
            this.fileWrite(sb.ToString());
            totalCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountId prevBankAccount;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        msb = new System.Text.StringBuilder();
        mRecordCount = 0;

        this.rec_FHeader();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get RemittanceAddress
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            //File Header Recored
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                if(prevbankaccount != '')
                {
                    this.rec_AccTotal();
                }
                ///Account header record
                this.rec_AccHeader();
                //Reset counters
                numDocs = 0;
                mPaymentAmount = 0;
            }
            // Detail lines
            this.rec_DocHeader();            
            this.rec_PEName();
            this.rec_PEAddress();
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_VendRemittDetails(invSKS_EFT_FileDetail);
            }            
            
            prevBankAccount = mSKS_EFT_FileDetail.BankAccountId;

            next mSKS_EFT_FileDetail;
        }

        this.rec_AccTotal();

        // File Trailer Record
        this.rec_FTrailer();
        
        this.buildString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTrailer</Name>
				<Source><![CDATA[
    //Nbr   Description          
    // 1    Record Type                         (  1-  2)
    // 2    Total number of records on file     (  3- 8)
    // 3    Filler                              ( 9- 300)
    boolean rec_FTrailer()
    {
        mRecordCount++;

        //1-2     Record Type
        msb.Append('99');

        //3-8     Total number of records on File
        msb.Append(SKS_PP_StringFormats::strFill(6, num2str(mRecordCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //9-300
        msb.Append(SKS_PP_StringFormats::strFill(292, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FHeader</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type         (  1-  2)
    // 2    Customer Input Id   (  3- 12)
    // 3    Transmission Date   ( 13- 20)
    // 4    Transmission Time   ( 21- 26)
    // 5    Filler              ( 27- 300)
    
    public boolean rec_FHeader()
    {
        mRecordCount++;

        // 1    Record Type           (  1-  2)
        msb.Append('01');

        // 2    Customer Input ID     (  3- 12)
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Transmission  Date    ( 13-20)
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        // 4    Transmission Time    ( 21- 26)
        msb.Append(SKS_PP_StringFormats::strTimeHHMMSS());

        // 5    Reserved            ( 27-300)
        msb.Append(SKS_PP_StringFormats::strFill(274,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_AccHeader</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type             (  1-  2)
    // 2    Account Number          (  3- 20)
    // 3    Payor Name Line 1       ( 21- 61)
    // 4    Payor Name Line 2       ( 61- 100)
    // 5    Payor Address Line 1    ( 101- 140)
    // 6    Payor Address Line 2    ( 141- 180)
    // 7    Payor Address Line 3    ( 181- 220)
    // 8    Filler                  ( 221- 300)
    public boolean rec_AccHeader()
    {
        mRecordCount++;

        //1-2   Record Type
        msb.Append('05');

        //3-20      Account Number
        msb.Append(SKS_PP_StringFormats::strFill(18,subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 10), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //21-60     Payor Name line1
        msb.Append(SKS_PP_StringFormats::strFill(40,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //61-100    Payor Name line2
        msb.Append(SKS_PP_StringFormats::strFill(40,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //101-140   Payor address line1
        msb.Append(SKS_PP_StringFormats::strFill(40,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //141-180   Payor address line2
        msb.Append(SKS_PP_StringFormats::strFill(40,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //181-220   Payor address line3
        msb.Append(SKS_PP_StringFormats::strFill(40,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //221-300   Filler
        msb.Append(SKS_PP_StringFormats::strFill(80,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        mFileRecCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DocHeader</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type             (  1-  2)
    // 2    Account Number          (  3- 20)
    // 3    Document Type           ( 21- 22)
    // 4    Delivery Code           ( 23- 23)
    // 5    Courier Code            ( 24- 26)
    // 6    Form Code               ( 27- 28)
    // 7    Mail Insert Code        ( 29- 29)
    // 8    Issue Date              ( 30- 37)
    // 9    Amount                  ( 38- 50)
    //10    Check Number            ( 51- 60)
    // 11   Trace Number            ( 61- 90)
    //12    Filler                  ( 91- 98)
    // 13   Currency Code           ( 99- 101)
    // 14   Filler                  ( 102- 300)
    public boolean rec_DocHeader()
    {
        AmountMST amt;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str MailInstr;
        mRecordCount++;

        //1-2       Record Type
        msb.Append('10');

        //3-20      Account Number
        msb.Append(SKS_PP_StringFormats::strFill(18,subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 10), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //21-22     Document Type
        msb.Append('CK');

        //23-23     Delivery code
        MailInstr = SKS_EFT_Format::getCodelookupvalue('DlvryCd', mSKS_EFT_FileDetail.RecId);

        switch(MailInstr)
        {
            case 'CPA':
            case 'PY1':
                msb.Append('P');
                break;
            case 'CSA':
            case 'HQ1':
                msb.Append('E');
                break;
            default:
                msb.Append('V');//US Mail
                break;
        }

        //24-26     Courier Code
        if(MailInstr)
        {
            msb.Append(SKS_PP_StringFormats::strFill(3, MailInstr, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //27-28     Form Code
        msb.Append(SKS_PP_StringFormats::strFill(2, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('FormCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //29-29     Mail Insert code
        msb.Append(' ');

        //30-37     Issue Date
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate));

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            if(invSKS_EFT_FileDetail)
            {
                amt += invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            }
        }

        //38-50     Amount
        msb.Append(SKS_PP_StringFormats::strMoney(amt, 13));

        //51-60     Check Number
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //61-90     Trace Number
        msb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //91-98     Filler
        msb.Append(SKS_PP_StringFormats::strFill(8,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //99-101    Currency code
        msb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //102-300   Filler
        msb.Append(SKS_PP_StringFormats::strFill(199, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));  
        
        numDocs++;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PEName</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type             (  1-  2)
    // 2    Payee Name Line 1       (  3- 42)
    // 3    Payee Name Line 2       ( 43- 82)
    // 4    Payee Name Line 3       ( 83- 122)
    // 5    Payee Name Line 4       ( 123- 162)
    // 6    Payee Name Line 5       ( 163- 202)
    // 7    Vendor Number           ( 203- 221)
    // 8    Filler                  ( 222- 300)
    public boolean rec_PEName()
    {
        mRecordCount++;

        //1-2       Record Type
        msb.Append('30');

        //3-42      Payee Name Line 1
        msb.Append(SKS_PP_StringFormats::strFill(40, mRemittanceName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //43-82      Payee Name Line 2
        msb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //83-112      Payee Name Line 3
        msb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //123-162      Payee Name Line 4
        msb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //163-202      Payee Name Line 5
        msb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //203-221       Vendor Number
        msb.Append(SKS_PP_StringFormats::strFill(19, mSKS_EFT_VendorPaym.VendAccount, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //222-300   Filler
        msb.Append(SKS_PP_StringFormats::strFill(79, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PEAddress</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type             (  1-  2)
    // 2    Payee Address Line 1    (  3- 42)
    // 3    Payee Address Line 2    ( 43- 82)
    // 4    Payee Address Line 3    ( 83- 122)
    // 5    Payee Address Line 4    ( 123- 162)
    // 6    Payee Address Line 5    ( 163- 202)
    // 7    City                    ( 203- 221)
    // 8    State Code              ( 222- 223)
    // 9    Zip code                ( 224- 232)
    // 10   ISO Country Code        ( 233- 234)
    // 11   Filler                  ( 235- 300)
    public boolean rec_PEAddress()
    {
        str ctryCode;

        if(mRemittanceAdrLine1 ||
           mRemittanceAdrLine2 ||
           mRemittanceCity     ||
           mRemittanceState    ||
           mRemittanceZipCode  ||
           mRemittanceCountryRegionId)
        {
            mRecordCount++;

            // 1-2      Record Type
            msb.Append('40');

            //3-42      Address Line 1
            msb.Append(SKS_PP_StringFormats::strFill(40, mRemittanceAdrLine1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //43-82     Address Line 2
            msb.Append(SKS_PP_StringFormats::strFill(40, mRemittanceAdrLine2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //83-122    Address Line 3
            msb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //123-162   Address Line 4
            msb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //163-202   Address Line 5
            msb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //203-221    City
            msb.Append(SKS_PP_StringFormats::strFill(19,  mRemittanceCity, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            ctryCode = this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId);

            if(ctryCode == 'US' || ctryCode == 'CA')
            {
                //222-223   State Code
                msb.Append(SKS_PP_StringFormats::strFill(2, mRemittanceState, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

                //224-232   Zip Code
                msb.Append(SKS_PP_StringFormats::strFill(9, strRem(mRemittanceZipCode, '-'), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                //222-223   State Code
                msb.Append('  ');

                //224-232   Zip Code
                msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }

            //233-234    ISO Country code
            msb.Append(SKS_PP_StringFormats::strFill(2, ctryCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //235-300   Filler
            msb.Append(SKS_PP_StringFormats::strFill(66, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_AccTotal</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type              ( 1- 2)
    // 2    Number of Documents      ( 3- 9)
    // 3    Total Dollar amount      ( 10- 26)
    // 4    Filler                   ( 27- 300)
    public boolean rec_AccTotal()
    {
        mRecordCount++;

        //1-2   Record Type
        msb.Append('80');

        //3-9      Number Of Documents
        msb.Append(SKS_PP_StringFormats::strFill(7, num2str(numDocs,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10-26     Total Dollar amount
        msb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount, 17));        

        //27-300   Filler
        msb.Append(SKS_PP_StringFormats::strFill(274,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_VendRemittDetails</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record Type              ( 1- 2)
    // 2    Invoice Date             ( 3- 10)
    // 3    Invoice number           ( 11- 40)
    // 4    Invoice data             ( 41- 80)
    // 5    Contract PO Number       ( 81- 110)
    // 6    Gross Amount             ( 111- 123)
    // 7    Discount Amount          ( 124- 136)
    // 8    Net Amount               ( 137- 149)
    // 9    Additional Text Data     ( 150- 189)      
    // 10    Filler                  ( 190- 300)
    public boolean rec_VendRemittDetails(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        AmountMST amt;
        mRecordCount++;

        //1-2       Record Type
        msb.Append('75');

        //3-10      Invoice Date
        if(_invSKS_EFT_FileDetail.InvoiceDate)
        {
            msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.EffectiveDate));
        }

        //11-40     Invoice number  
        msb.Append(SKS_PP_StringFormats::strFill(30, _invSKS_EFT_FileDetail.InvoiceNumber, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //41-80     Invoice data
        msb.Append(SKS_PP_StringFormats::strFill(40, _invSKS_EFT_FileDetail.InvoiceTransactionTxt, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));        

        //81-110    Contract PO Number 
        msb.Append(SKS_PP_StringFormats::strFill(30, this.get_POInfo(_invSKS_EFT_FileDetail), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //111-123   Gross Amount
        amt = (_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
        msb.Append(SKS_PP_StringFormats::strMoney(amt, 13));

        //124-136   Discount Amount
        amt = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
        msb.Append(SKS_PP_StringFormats::strMoney(amt, 13));

        //137-149   Net Amount
        amt = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        msb.Append(SKS_PP_StringFormats::strMoney(amt, 13));

        //150-189   Additional Text Data
        msb.Append(SKS_PP_StringFormats::strFill(40,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //190-300	   Filler
        msb.Append(SKS_PP_StringFormats::strFill(111,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        mPaymentAmount += amt;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_POInfo</Name>
				<Source><![CDATA[
    private str get_POInfo(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        VendInvoiceJour vendInvoiceJour;
        VendTrans vendTrans;
        Container companyInfo;
        str PONum = '';
        ;

        companyInfo += _invSKS_EFT_FileDetail.InvoiceCompany;

        // See if PO exists
        if(conPeek(companyInfo, 1) != '')
        {
            select firstOnly crossCompany:companyInfo PurchId from vendInvoiceJour 
                where vendInvoiceJour.InvoiceAccount == _invSKS_EFT_FileDetail.AccountNum 
                   && vendInvoiceJour.InvoiceId == _invSKS_EFT_FileDetail.InvoiceNumber 
                   && vendInvoiceJour.PurchId != ''
                join TransDate, RecId 
                    from vendTrans
                    where vendTrans.RecId == _invSKS_EFT_FileDetail.VendTransRecId 
                       && vendTrans.TransDate == vendInvoiceJour.InvoiceDate;
            if(vendInvoiceJour.PurchId)
            {
                PONum = vendInvoiceJour.PurchId;
            }
        }
        return PONum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>