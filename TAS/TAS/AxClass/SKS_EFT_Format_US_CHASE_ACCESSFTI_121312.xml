<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_ACCESSFTI_121312</Name>
	<SourceCode>
		<Declaration><![CDATA[
// JP Morgan Chase
// ACCESS Funds Transfer Initiation (FTI)
// Version 12-31-12
//
// Supports transaction types: FED, CHP, WRE, WCB
//
// Structure:
// Header
//  Payments
// Trailer
/// <summary>
/// SKS_EFT_Format_US_CHASE_ACCESSFTI_121312 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_ACCESSFTI_121312 extends SKS_EFT_Format
{
    #define.FormatVersion('20221117')
    SKS_EFT_SequenceNumber mSequenceNumber;
    int64 mPaymentCount;
    AmountMST mPaymentAmount;
    BankAccountTable mBankAccountTable;
    LogisticsAddressCountryRegion mLogisticsAddressCountryRegion;
    #define.Comma(',')
    #define.DoubleQuote('"')

    #define.CHP('CHP')
    #define.FED('FED')
    #define.WCB('WCB')
    #define.WRE('WRE')
    #define.TLX('TLX')
    //#define.IAT('IAT')
    //#define.GIR('GIR')
    //#define.ATE('ATE')
    //#define.DFE('DFE')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAddress3</Name>
				<Source><![CDATA[
    private str formatAddress3(AddressCity _city, AddressStateId _state, AddressCountryRegionId _country)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value;
        int locStrLen;
    
        if((_city + _state + _country) != '')
        {
            sb.Append(_city);
            if(_state != '')
            {
                locStrLen = sb.get_Length();
                if(locStrLen > 0)
                sb.Append(',');
                sb.Append(this.CharacterReplacement(_state));
            }
            if(_country != '')
            {
                locStrLen = sb.get_Length();
                if(locStrLen > 0)
                sb.Append(' ');
                sb.Append(this.getLogisticsAddressCountryRegionISO(_country));
            }
        }
    
        value = sb.ToString();
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
        // Get SKS_EFT_Bank
        this.getSKS_EFT_Bank();
    
        //Get sequence number
        this.getSequence();
    
        // Format header
        this.rec_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get Bank account
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Detail lines
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #WCB:
                case #WRE:
                    this.rec_PaymentFX();
                    break;
                case #TLX:
                    this.rec_PaymentGMT();
                    break;
                default:
                    this.rec_PaymentDMT();
                    break;
            }
            next mSKS_EFT_FileDetail;
        }
    
        // Format trailer
        this.rec_Trailer();
    
        //Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalNote</Name>
				<Source><![CDATA[
    private str getJournalNote()
    {
        LedgerJournalTrans ledgerJournalTrans;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invDescription;
    
        select crossCompany PaymentNotes from ledgerJournalTrans where
            ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
        while select InvoiceTransactionTxt from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
               && invSKS_EFT_FileDetail.InvoiceTransactionTxt != ''
        {
            invDescription += strFmt('%1 ', this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt));
        }
    
        return strLRTrim(strFmt('%1 %2', this.CharacterReplacement(ledgerJournalTrans.PaymentNotes), this.CharacterReplacement(invDescription)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryRegionISO</Name>
				<Source><![CDATA[
    // Load or refresh global mLogisticsAddressCountryRegion
    // Return a 2 digit ISO country code
    private LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryRegionISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        str value;
        ;
        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(mLogisticsAddressCountryRegion.CountryRegionId != _countryRegion)
            {
                mLogisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = mLogisticsAddressCountryRegion.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        ;
    
        if(mSKS_EFT_FileFormat)
        {
            // If found, check date
            if(mSKS_EFT_FileFormat.NextDailyResetDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                //Get Next Sequence Number
                mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
            }
            else
            {
                mSequenceNumber = 1;
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999)
        {
            mSequenceNumber = 0;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    //Nbr   Description             Comment
    //1     Record Indicator
    //2     Timestamp
    //3     User Identifier
    //4     Batch Number
    boolean rec_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1     Record Indicator
        sb.Append(this.wrapField('CI'));
    
        //2 Timestamp
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())) + SKS_PP_StringFormats::strTimeHHMMSS(),0,false));
    
        //3 User Identifier
        sb.Append(this.wrapField());
    
        //4 Batch Number
        sb.Append(this.wrapField(int2str(mSequenceNumber),4,false,false));
    
        this.fileWrite(sb.ToString());
    
        this.incrementSequenceNumber();
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDMT</Name>
				<Source><![CDATA[
    //Nbr   Description                     Type    Length  Comment
    //1     Record Indicator                N       2
    //2     Pay Method                      A       3
    //3     Bank                            A       11      Not used
    //4     Location                        A       3
    //5     Account                         A       34
    //6     Currency                        A       3
    //7     Amount                          N       15
    //8     Value Date                      D       8       YYYYMMDD
    //9     Intermediary ID                 A       35
    //10    Intermediary Name               A       35
    //11    Intermediary Addr 1             A       35
    //12    Intermediary Addr 2             A       32/35
    //13    Intermediary Addr 3             A       32
    //14    Intermediary Advice Type        A       3       Not used
    //15    Bank Info 3rd Line              A       35
    //16    Bene Bank ID                    A       35
    //17    Bene Bank Name                  A       35
    //18    Bene Bank Addr 1                A       35
    //19    Bene Bank Addr 2                A       32/35
    //20    Bene Bank Addr 3                A       32
    //21    Bene Advice Type                A       3       Not used
    //22    Bank Info 2nd Line              A       35
    //23    Ult Bene ID                     A       35
    //24    Ult Bene Name                   A       35
    //25    Ult Bene Addr 1                 A       35
    //26    Ult Bene Addr 2                 A       32/35
    //27    Ult Bene Addr 3                 A       32
    //28    Ult Bene Advice Type            A       3       Not used
    //29    Bank Info 1st Line              A       35
    //30    Customer Reference              A       16
    //31    Bene Reference                  A       16
    //32    Originator Ref Text             A       35
    //33    Reference Text 1                A       35
    //34    Reference Text 2                A       35
    //35    Reference Text 3                A       35
    //36    Reference Text 4                A       35
    //37    Reference Text 5                A       35      Not used
    //38    Reference Text 6                A       35      Not used
    //39    Code Value 1                    A       8       Not used
    //40    Code Value 2                    A       8       Not used
    //41    Code Value 3                    A       8       Not used
    //42    Code Value 4                    A       8       Not used
    //43    Code Value 5                    A       8       Not used
    //44    Code Value 6                    A       8       Not used
    //45    Field text line 1               A       25      Not used
    //46    Field text line 2               A       25      Not used
    //47    Field text line 3               A       25      Not used
    //48    Field text line 4               A       25      Not used
    //49    Field text line 5               A       25      Not used
    //50    Field text line 6               A       25      Not used
    //51    By Order Accnt                  A       35
    //52    By Order Name                   A       35
    //53    By Order Addr 1                 A       35
    //54    By Order Addr 2                 A       35
    //55    By Order Addr 3                 A       35      Not used
    //56    Bank Info. 4th Line             A       35
    //57    Bank Info. 5th Line             A       35
    //58    Bank Charges                    A       1
    //59    Ult Bene Country                A       2
    //60    Bene Bank Country               A       2
    //61    Intermediary Country            A       2
    boolean rec_PaymentDMT()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        str ultBeneId;
        str journalNotes;
        LogisticsAddressCountryRegionISOCode countryRegion;
        container addresses;
        str location;
        ;
    
        //1     Record Indicator
        sb.Append(this.wrapField('4',0,false));
    
        //2     Pay Method
        sb.Append(this.wrapField(mSKS_EFT_FileFormatPaymSpec.TransactionCode));
    
        //3     Bank
        sb.Append(this.wrapField());
    
        //4     Location
        location = SKS_EFT_Format::getCodelookupvalue('Location', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(location)
        {
            sb.Append(this.wrapField(this.CharacterReplacement(location),3));
        }
        else
        {
            sb.Append(this.wrapField('020'));
        }
    
        //5     Account
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct,34));
    
        //6     Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode,3));
    
        //7     Amount
        amt = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        sb.Append(this.wrapField(num2Str(amt, 1, 2, 1, 0),0 ,false));
    
        //8     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate),8,false));
    
        //9     Intermediary ID
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankId,35));
    
        //10    Intermediary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName),35));
    
        //Build Address Containers
        addresses = conNull();
        if(mSKS_EFT_VendorPaym.WIntBankAddr)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr);
        }
        if(mSKS_EFT_VendorPaym.WIntBankAddr2)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2);
        }
        if(mSKS_EFT_VendorPaym.WIntBankCity || mSKS_EFT_VendorPaym.WIntBankCountryRegionId)
        {
            addresses += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity),'',mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
        }
    
        //11    Intermediary Addr 1
        if(conPeek(addresses, 1))
        {
            sb.Append(this.wrapField(conPeek(addresses, 1),35));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //12    Intermediary Addr 2
        if(conPeek(addresses, 2))
        {
            if(mSKS_EFT_VendorPaym.WIntBankId)
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),32));
            }
            else
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),35));
            }
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //13    Intermediary Addr 3
        if(conPeek(addresses, 3) && !mSKS_EFT_VendorPaym.WIntBankId)
        {
            sb.Append(this.wrapField(conPeek(addresses, 3),32));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //14    Intermediary Advice Type
        sb.Append(this.wrapField());
    
        //15    Bank Info 3rd Line
        sb.Append(this.wrapField());
    
        //16    Bene Bank ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit,35));
    
        //17    Bene Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),35));
    
        //Build Address Containers
        //There is no Address 2 field for Beneficiary Bank, Regional information is pushed into Field 2
        addresses = conNull();
        if(mSKS_EFT_VendorPaym.WBenBankAddr)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr);
        }
        if(mSKS_EFT_VendorPaym.WBenBankCity || mSKS_EFT_VendorPaym.WBenBankCountryRegionId)
        {
            addresses += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity),'',mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        }
    
        //18    Bene Bank Addr 1
        if(conPeek(addresses, 1))
        {
            sb.Append(this.wrapField(conPeek(addresses, 1),35));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //19    Bene Bank Addr 2
        if(conPeek(addresses, 2))
        {
            if(!mSKS_EFT_FileDetail.DepBankTransit)
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),35));
            }
            else
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),32));
            }
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //20    Bene Bank Addr 3
        sb.Append(this.wrapField());
    
        //21    Bene Advice Type
        sb.Append(this.wrapField());
    
        //22    Bank Info 2nd Line
        sb.Append(this.wrapField());
    
        //23    Ult Bene ID
        countryRegion = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        switch(countryRegion)
        {
            case 'LB':
            case 'SA':
            case 'BH':
            case 'KW':
            case 'AE':
                ultBeneId = 'IBAN' + mSKS_EFT_FileDetail.DepBankIBAN;
                break;
            default:
                ultBeneId = mSKS_EFT_FileDetail.DepBankAcct;
                break;
        }
        sb.Append(this.wrapField(ultBeneId,35));
    
        //24    Ult Bene Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),35));
    
        //Build Address Containers
        addresses = conNull();
        if(mSKS_EFT_VendorPaym.WBeneAddr)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr);
        }
        if(mSKS_EFT_VendorPaym.WBeneAddr2)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2);
        }
        if(mSKS_EFT_VendorPaym.WBeneCity || mSKS_EFT_VendorPaym.WBeneState || mSKS_EFT_VendorPaym.WBeneCountryRegionId)
        {
            addresses += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity), this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState),mSKS_EFT_VendorPaym.WBeneCountryRegionId);
        }
    
        //25    Ult Bene Addr 1
        if(conPeek(addresses, 1))
        {
            sb.Append(this.wrapField(conPeek(addresses, 1),35));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //26    Ult Bene Addr 2
        if(conPeek(addresses, 2))
        {
            if(ultBeneId)
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),32));
            }
            else
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),35));
            }
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //27    Ult Bene Addr 3
        if(conPeek(addresses, 3) && !ultBeneId)
        {
            sb.Append(this.wrapField(conPeek(addresses, 3),32));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //28    Ult Bene Advice Type
        sb.Append(this.wrapField());
    
        //29    Bank Info 1st Line
        sb.Append(this.wrapField());
    
        //30    Customer Reference
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 16)));
    
        //31    Bene Reference
        sb.Append(this.wrapField());
    
        //32    Originator Ref Text
        sb.Append(this.wrapField());
    
        journalNotes = this.getJournalNote();
    
        //33    Reference Text 1
        sb.Append(this.wrapField(subStr(journalNotes,1,30)));
    
        //34    Reference Text 2
        sb.Append(this.wrapField(subStr(journalNotes,31,30)));
    
        //35    Reference Text 3
        sb.Append(this.wrapField(subStr(journalNotes,61,30)));
    
        //36    Reference Text 4
        sb.Append(this.wrapField(subStr(journalNotes,91,30)));
    
        //37    Reference Text 5
        sb.Append(this.wrapField());
    
        //38    Reference Text 6
        sb.Append(this.wrapField());
    
        //39    Code Value 1
        sb.Append(this.wrapField());
    
        //40    Code Value 2
        sb.Append(this.wrapField());
    
        //41    Code Value 3
        sb.Append(this.wrapField());
    
        //42    Code Value 4
        sb.Append(this.wrapField());
    
        //43    Code Value 5
        sb.Append(this.wrapField());
    
        //44    Code Value 6
        sb.Append(this.wrapField());
    
        //45    Field text line 1
        sb.Append(this.wrapField());
    
        //46    Field text line 2
        sb.Append(this.wrapField());
    
        //47    Field text line 3
        sb.Append(this.wrapField());
    
        //48    Field text line 4
        sb.Append(this.wrapField());
    
        //49    Field text line 5
        sb.Append(this.wrapField());
    
        //50    Field text line 6
        sb.Append(this.wrapField());
    
        //51    By Order Accnt
        sb.Append(this.wrapField());
    
        //52    By Order Name
        sb.Append(this.wrapField());
    
        //53    By Order Addr 1
        sb.Append(this.wrapField());
    
        //54    By Order Addr 2
        sb.Append(this.wrapField());
    
        //55    By Order Addr 3
        sb.Append(this.wrapField());
    
        //56    Bank Info. 4th Line
        sb.Append(this.wrapField());
    
        //57    Bank Info. 5th Line
        sb.Append(this.wrapField());
    
        //58    Bank Charges
        sb.Append(this.wrapField());
    
        //59    Ult Bene Country
        countryRegion = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId);
        sb.Append(this.wrapField(countryRegion,2));
    
        //60    Bene Bank Country
        countryRegion = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        sb.Append(this.wrapField(countryRegion,2));
    
        //61    Intermediary Country
        countryRegion = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
        sb.Append(this.wrapField(countryRegion,2,true,false));
    
        this.fileWrite(sb.ToString());
    
        mPaymentCount++;
        mPaymentAmount += amt;
    
        return true;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentFX</Name>
				<Source><![CDATA[
    //Nbr   Description                     Type    Length  Comment
    //1     Record Indicator                N       2
    //2     Pay Method                      A       3
    //3     Bank                            A       11      Not used
    //4     Location                        A       3
    //5     Account                         A       34
    //6     Debit Currency                  A       3
    //7     Credit Currency                 A       3
    //8     Amount in Credit Currency       N       15
    //9     Value Date                      D       8       YYYYMMDD
    //10    Contract Number                 N       8
    //11    Intermediary ID                 A       35
    //12    Intermediary SWIFT ID           A       8 or 11
    //13    Intermediary Name               A       35
    //14    Intermediary Addr 1             A       35
    //15    Intermediary Addr 2             A       32/35
    //16    Intermediary Addr 3             A       32
    //17    Bene Bank ID                    A       35
    //18    Bene Bank SWIFT ID              A       8 or 11
    //19    Bene Bank Name                  A       35
    //20    Bene Bank Addr 1                A       35
    //21    Bene Bank Addr 2                A       32/35
    //22    Bene Bank Addr 3                A       32
    //23    Ult Bene Sort Code              A       10
    //24    Ult Bene ID                     A       35
    //25    Ult Bene Name                   A       35
    //26    Ult Bene Addr 1                 A       35
    //27    Ult Bene Addr 2                 A       32/35
    //28    Ult Bene Addr 3                 A       32
    //29    Customer Reference              A       16
    //30    Reference Text 1                A       35
    //31    Reference Text 2                A       35
    //32    Reference Text 3                A       35
    //33    Reference Text 4                A       35
    //34    By Order Name                   A       35
    //35    By Order Addr 1                 A       35
    //36    By Order Addr 2                 A       35
    //37    By Order Addr 3                 A       35
    //38    Correspondent Charges           A       1
    //39    Debit Bank Charges              A       1
    //40    Bank Info. 1st Line             A       35
    //41    Bank Info. 2nd Line             A       35
    //42    Bank Info. 3rd Line             A       35
    //43    Bank Info. 4th Line             A       35
    //44    FX Equivalent Amount            N       15
    //45    Ult Bene Country                A       2
    //46    Bene Bank Country               A       2
    //47    Intermediary Country            A       2
    boolean rec_PaymentFX()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        str ultBeneId;
        str journalNotes;
        LogisticsAddressCountryRegionISOCode countryRegion;
        container addresses;
        ;
    
        //1     Record Indicator
        sb.Append(this.wrapField('7',0,false));
    
        //2     Pay Method
        sb.Append(this.wrapField(mSKS_EFT_FileFormatPaymSpec.TransactionCode));
    
        //3     Bank
        sb.Append(this.wrapField());
    
        //4     Location
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Location', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),3));
    
        //5     Account
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct,34));
    
        //6     Debit Currency
        sb.Append(this.wrapField(mBankAccountTable.CurrencyCode,3));
    
        //7     Credit Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode,3));
    
        //8     Amount
        amt = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        sb.Append(this.wrapField(num2Str(amt, 1, 2, 1, 0),0 ,false));
    
        //9     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate),8,false));
    
        //10    Contract Number
        sb.Append(this.wrapField('',0,false));
    
        //11    Intermediary ID
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankId,35));
    
        //12    Intermediary SWIFT ID
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankSwift,11));
    
        //13    Intermediary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName),35));
    
        //Build Address Containers
        addresses = conNull();
        if(mSKS_EFT_VendorPaym.WIntBankAddr)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr);
        }
        if(mSKS_EFT_VendorPaym.WIntBankAddr2)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2);
        }
        if(mSKS_EFT_VendorPaym.WIntBankCity || mSKS_EFT_VendorPaym.WIntBankCountryRegionId)
        {
            addresses += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity),'',mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
        }
    
        //14    Intermediary Addr 1
        if(conPeek(addresses, 1))
        {
            sb.Append(this.wrapField(conPeek(addresses, 1),35));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //15    Intermediary Addr 2
        if(conPeek(addresses, 2))
        {
            if(mSKS_EFT_VendorPaym.WIntBankId)
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),32));
            }
            else
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),35));
            }
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //16    Intermediary Addr 3
        if(conPeek(addresses, 3) && !mSKS_EFT_VendorPaym.WIntBankId)
        {
            sb.Append(this.wrapField(conPeek(addresses, 3),32));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //17    Bene Bank ID
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBenBankAcct,35));
    
        //18    Bene Bank SWIFT ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo,11));
    
        //19    Bene Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),35));
    
        //Build Address Containers
        //There is no Address 2 field for Beneficiary Bank, Regional information is pushed into Field 2
        addresses = conNull();
        if(mSKS_EFT_VendorPaym.WBenBankAddr)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr);
        }
        if(mSKS_EFT_VendorPaym.WBenBankCity || mSKS_EFT_VendorPaym.WBenBankCountryRegionId)
        {
            addresses += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity),'',mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        }
    
        //20    Bene Bank Addr 1
        if(conPeek(addresses, 1))
        {
            sb.Append(this.wrapField(conPeek(addresses, 1),35));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //21    Bene Bank Addr 2
        if(conPeek(addresses, 2))
        {
            if(!mSKS_EFT_FileDetail.DepBankTransit)
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),35));
            }
            else
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),32));
            }
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //22    Bene Bank Addr 3
        sb.Append(this.wrapField());
    
        //23    Ult Bene Sort Code
        //24    Ult Bene ID
        countryRegion = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'EUR')
        {
            switch(countryRegion)
            {
                case 'AD':case 'AT':case 'BE':case 'BG':case 'CY':case 'CZ':case 'DK':
                case 'EE':case 'FI':case 'FR':case 'GF':case 'DE':case 'GI':
                case 'GR':case 'GL':case 'GP':case 'GG':case 'VA':case 'IS':case 'IE':
                case 'IM':case 'IT':case 'JE':case 'LV':case 'LI':case 'LT':case 'LU':
                case 'MT':case 'MQ':case 'YT':case 'MC':case 'ME':case 'NL':case 'NO':
                case 'PL':case 'PT':case 'RE':case 'RO':case 'PM':case 'SM':case 'SK':
                case 'SI':case 'ES':case 'SJ':case 'SE':case 'CH':case 'GB':
                    sb.Append(this.wrapField('IBAN'));
                    ultBeneId = mSKS_EFT_FileDetail.DepBankIBAN;
                    break;
                default:
                    if(mSKS_EFT_FileDetail.DepBankIBAN) // Use IBAN if it exists
                    {
                        sb.Append(this.wrapField('IBAN'));
                        ultBeneId = mSKS_EFT_FileDetail.DepBankIBAN;
                    }
                    else
                    {
                        sb.Append(this.wrapField(''));
                        ultBeneId = mSKS_EFT_FileDetail.DepBankAcct;
                    }
                    break;
            }
        }
        else
        {
            switch(countryRegion)
            {
                case 'LB':
                case 'SA':
                case 'BH':
                case 'KW':
                case 'AE':
                    sb.Append(this.wrapField('IBAN'));
                    ultBeneId = mSKS_EFT_FileDetail.DepBankIBAN;
                    break;
                default:
                    if(mSKS_EFT_FileDetail.DepBankIBAN) // Use IBAN if it exists
                    {
                        sb.Append(this.wrapField('IBAN'));
                        ultBeneId = mSKS_EFT_FileDetail.DepBankIBAN;
                    }
                    else
                    {
                        sb.Append(this.wrapField(''));
                        ultBeneId = mSKS_EFT_FileDetail.DepBankAcct;
                    }
                    break;
            }
        }
        sb.Append(this.wrapField(ultBeneId,35));
    
        //25    Ult Bene Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),35));
    
        //Build Address Containers
        addresses = conNull();
        if(mSKS_EFT_VendorPaym.WBeneAddr)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr);
        }
        if(mSKS_EFT_VendorPaym.WBeneAddr2)
        {
            addresses += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2);
        }
        if(mSKS_EFT_VendorPaym.WBeneCity || mSKS_EFT_VendorPaym.WBeneState || mSKS_EFT_VendorPaym.WBeneCountryRegionId)
        {
            addresses += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity), this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState), mSKS_EFT_VendorPaym.WBeneCountryRegionId);
        }
    
        //26    Ult Bene Addr 1
        if(conPeek(addresses, 1))
        {
            sb.Append(this.wrapField(conPeek(addresses, 1),35));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //27    Ult Bene Addr 2
        if(conPeek(addresses, 2))
        {
            if(ultBeneId)
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),32));
            }
            else
            {
                sb.Append(this.wrapField(conPeek(addresses, 2),35));
            }
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //28    Ult Bene Addr 3
        if(conPeek(addresses, 3) && !ultBeneId)
        {
            sb.Append(this.wrapField(conPeek(addresses, 3),32));
        }
        else
        {
            sb.Append(this.wrapField());
        }
    
        //29    Customer Reference
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),16)));
    
        journalNotes = this.getJournalNote();
    
        //30    Reference Text 1
        sb.Append(this.wrapField(subStr(journalNotes,1,30)));
    
        //31    Reference Text 2
        sb.Append(this.wrapField(subStr(journalNotes,31,30)));
    
        //32    Reference Text 3
        sb.Append(this.wrapField(subStr(journalNotes,61,30)));
    
        //33    Reference Text 4
        sb.Append(this.wrapField(subStr(journalNotes,91,30)));
    
        //34    By Order Name
        sb.Append(this.wrapField());
    
        //35    By Order Addr 1
        sb.Append(this.wrapField());
    
        //36    By Order Addr 2
        sb.Append(this.wrapField());
    
        //37    By Order Addr 3
        sb.Append(this.wrapField());
    
        //38    Correspondent Charges
        sb.Append(this.wrapField());
    
        //39    Debit Bank Charges
        sb.Append(this.wrapField());
    
        //40    Bank Info. 1st Line
        sb.Append(this.wrapField());
    
        //41    Bank Info. 2nd Line
        sb.Append(this.wrapField());
    
        //42    Bank Info. 3rd Line
        sb.Append(this.wrapField());
    
        //43    Bank Info. 4th Line
        sb.Append(this.wrapField());
    
        //44    FX Equivalent Amount
        sb.Append(this.wrapField('',0,false));
    
        //45    Ult Bene Country
        countryRegion = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId);
        sb.Append(this.wrapField(countryRegion,2));
    
        //46    Bene Bank Country
        countryRegion = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        sb.Append(this.wrapField(countryRegion,2));
    
        //47    Intermediary Country
        countryRegion = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
        sb.Append(this.wrapField(countryRegion,2,true,false));
    
        this.fileWrite(sb.ToString());
    
        mPaymentCount++;
        mPaymentAmount += amt;
    
        return true;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentGMT</Name>
				<Source><![CDATA[
    //Nbr   Description                     Type    Length  Mandatory   Comment
    //1     Record Indicator                N       4           Y
    //2     Pay Method                      A       3           Y
    //3     Bank                            A       11          N       Not used
    //4     Location                        A       3           Y
    //5     Account                         A       34          Y
    //6     Currency                        A       3           Y
    //7     Amount                          N       15          Y       Must be greater than zero
    //8     Value Date                      D       8           Y       YYYYMMDD
    //9     Beneficary Bank ID              A       35          N       National Clearing Systems ID
    //10    Beneficary Bank Name            A       35          Y
    //11    Beneficary Bank Addr 1          A       35          N
    //12    Beneficary Bank Addr 2          A       32/35       N       32 if Beneficiary Bank Swift ID is supplied, else 35.
    //13    Beneficary Bank Addr 3          A       32          N
    //14    Ult Beneficiary ID              A       14          *       See spec.  Sometimes mandatory.
    //15    Ult Bene Name                   A       35/70       Y       For all ATE & DTE lenght is 70 else, 35.  See Spec for mandatory rules
    //16    Ult Bene Addr 1                 A       35/70       *       For all ATE & DTE lenght is 70 else, 35.  See Spec for mandatory rules
    //17    Ult Bene Addr 2                 A       32/35/70    N       32 if Ult Bene Swift ID is provided, 35 if not provided. For ATE & DTE pay method,70.
    //18    Ult Bene Addr 3                 A       32/70       N       ATE & DFE: 70, else: 32
    //19    Ult Bene Addr 4                 A       70          N
    //20    Intermediary ID                 A       35          N
    //21    Intermediary Name               A       35          N
    //22    Intermediary Addr 1             A       35          N
    //23    Intermediary Addr 2             A       32/35       N       If intermediate swift provided: 32, else 35
    //24    Intermediary Addr 3             A       32          N
    //25    Instructions to debit bank 1    A       35          N
    //26    Instructions to debit bank 2    A       35          N
    //27    Instructions to debit bank 2    A       35          N
    //28    Instructions to debit bank 2    A       35          N
    //29    Correspondent Charges           A       1           N       "R" for Remitter or "B" for Beneficiary(Blank is considered "B")
    //30    Debit Bank Charges              A       1           N       "R" for Remitter or "B" for Beneficiary(Blank is considered "R")
    //31    Customer Reference              A       16          N
    //32    Delivery Instructions           A       3           *       Mandatory for ATE & DFE.
    //33    Pay Through Code                A       10          *       Mandatory for ATE & DFE.
    //34    Remitter's Text 1               A       35/70       N       ATE & DFE: 70, else 35
    //35    Remitter's Text 2               A       35/70       N       ATE & DFE: 70, else 35
    //36    Remitter's Text 3               A       35/70       N       ATE & DFE: 70, else 35
    //37    Remitter's Text 4               A       35/70       N       ATE & DFE: 70, else 35
    //38    Remitter's Text 5               A       70          N       ATE & DFE only
    //39    Remitter's Text 6               A       70          N       ATE & DFE only
    //40    Remitter's Text 7               A       70          N       ATE & DFE only
    //41    Remitter's Text 8               A       70          N       ATE & DEF Only
    //42    Remitter's Text 9               A       70          N       ATE & DFE only
    //43    Remitter's Text 10              A       70          N       ATE & DFE only
    //44    Remitter's Text 11              A       70          N       ATE & DFE only
    //45    Remitter's Text 12              A       70          N       ATE & DFE only
    //46    Code Value 1                    A       8           N       UNUSED
    //47    Code Value 2                    A       8           N       UNUSED
    //48    Code Value 3                    A       8           N       UNUSED
    //49    Code Value 4                    A       8           N       UNUSED
    //50    Code Value 5                    A       8           N       UNUSED
    //51    Code Value 6                    A       8           N       UNUSED
    //52    Field text line 1               A       25          N       UNUSED
    //53    Field text line 2               A       25          N       UNUSED
    //54    Field text line 3               A       25          N       UNUSED
    //55    Field text line 4               A       25          N       UNUSED
    //56    Field text line 5               A       25          N       UNUSED
    //57    Field text line 6               A       25          N       UNUSED
    //58    By Order ID                     A       34          *       See Party Rules. May be Mandatory; see spec.
    //59    By Order Name                   A       35          *       Freeform text.  May be Mandatory; see spec.
    //60    By Order Addr 1                 A       32          *       Freeform text.  May be Mandatory; see spec.
    //61    By Order Addr 2                 A       32/35       *       If "By order of Swift ID" is not provided: 32.  If provided" 35.
    //62    By Order Addr 3                 A       32          N       See party Rules
    //63    Bene is a bank                  A       1           N       "B"if is Bank, else "N" if bene is not a bank
    //64    Instructions to bank line 5     A       35          N       Freeform text for a 5th line of bank info.  The selecs and code word are required; without slashes indicates coninuation of bank line 4.
    //65    Instructions to bank line 6     A       35          N       Freeform text for a 6th line of bank info.  The selecs and code word are required; without slashes indicates coninuation of bank line 5.
    //66    Ult Bene Swift ID               A       11          N       NOT VALID FOR ATE & DFE
    //67    Bene Bank Swift ID              A       11          N       NOT VALID FOR ATE & DFE
    //68    Intermediary Swift ID           A       11          N       NOT VALID FOR ATE & DFE
    //69    By Order of Swift ID            A       11          N       Effects "Mandatory" of other fields if used.  See Spec.
    //70    Regulatory Reporting Code       A       8           N       Must be a known code
    //71    Regulatory Reporting Country Code   A       2       N       2 char code. Only required if above regulatory code is populated and Country Code is required.  Unused if no code.
    //72    Regulatory Reporting line 1     A       35          N       If regulatory reporting code is populated, then this field can contain up to 21 chars of free format s swift text; else, this field can contain 35 chars
    //73    Regulatory Reporting line 2     A       35          N       Free form format - If regulatory reporing code is supplied the this is a continuation line - max 33chars
    //74    Regulatory Reporting line 3     A       35          N       Free form format - If regulatory reporing code is supplied the this is a continuation line - max 33chars
    //75    Instruction codes - code 1      A       4           N       4 char instruction code
    //76    Instruction codes - text 1      A       30          N       Free form text of code 1 allows it,
    //77    Instruction codes - code 2      A       4           N       4 char instruction code
    //78    Instruction codes - text 2      A       30          N       Free form text of code 2 allows it,
    //79    Instruction codes - code 3      A       4           N       4 char instruction code
    //80    Instruction codes - text 3      A       30          N       Free form text of code 3 allows it,
    //81    Ult Bene Country                A       2           *       May be Mandatory. See spec
    //82    Bene Bank Coutnty               A       2           *       2 letter coutnry code.  Not Valid for ATE & DFE.  May be Mandatory; see spec.
    //83    intermediary Country            A       2           *       2 letter country code.  Not Valid ofr ATE & DFE.
    //84    By Order Country                A       2           *       2 letter country code. may be mandatory; see s
    boolean rec_PaymentGMT()
    {
        // BP Deviation documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        str locTempStr;  //use only withing the scope of the current field.
        str locCountriesToUseIBAN;
        AddressCountryRegionISOCode locAddressCountryRegionISOCode;
        str locCountryCurrencyCombo;
        container contAddressLines;
        int locFieldLength;
        ;
    
        //THIS LIST OF FOR TLX ONLY.  IAT and GIR do not use JOJOD(Jorden + Jorden Dollar)
        locCountriesToUseIBAN = ',LB,SASAR,BHBHD,KWKWD,AEAED,JOJOD';
    
        //1     Record Indicator --  MANDATORY
        sb.Append(this.wrapField('4.01',0,false));
    
        //2     Pay Method
        sb.Append(this.wrapField(mSKS_EFT_FileFormatPaymSpec.TransactionCode));
    
        //3     Bank -- UNUSED
        sb.Append(this.wrapField());
    
        //4     Location -- MANDATORY
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Location', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),3));
    
        //5     Account -- MANDATORY
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct,34));
    
        //6     Currency -- MANDATORY
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode,3));
    
        //7     Amount -- MANDATORY
        amt = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        sb.Append(this.wrapField(num2Str(amt, 1, 2, 1, 0),0 ,false));
    
        //8     Value Date  -- MANDATORY
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate),8,false));
    
        //9     Bene Bank ID -- OPTIONAL
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit,35));
    
        //10    Bene Bank Name -- MANDATORY
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),35));
    
        //Assemble Bene Bank Address
        contAddressLines = conNull();
        if(mSKS_EFT_VendorPaym.WBenBankAddr)
        {
            contAddressLines += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr);
        }
    
        if(mSKS_EFT_VendorPaym.WBenBankCity || mSKS_EFT_VendorPaym.WBenBankCountryRegionId)
        {
            contAddressLines += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity),'',mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        }
    
        //11    Bene Bank Addr1 -- OPTIONAL
        if(conLen(contAddressLines) > 0)
            sb.Append(this.wrapField(conPeek(contAddressLines,1),35));
        else
            sb.Append(this.wrapField());
    
        //12    Bene Bank Addr2 -- OPTIONAL --Variable field length based on Swift existence
        if(strLen(mSKS_EFT_FileDetail.DepSwiftNo) > 0)
            locFieldLength = 32;
        else
            locFieldLength = 35;
    
        if(conLen(contAddressLines) > 1)
            sb.Append(this.wrapField(conPeek(contAddressLines,2),locFieldLength));
        else
            sb.Append(this.wrapField());
    
        //13    Bene Bank Addr3 -- OPTIONAL
        sb.Append(this.wrapField(''));
    
    
    
        //14    Ult Bene ID -- CONDITIONAL:  IF TLX, IAT, OR GIR AND COUNTRY IS LB, SA, BH, KW, AE, or JO, MANDATORY AND MUST BE IBAN
        locAddressCountryRegionISOCode = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        if(locAddressCountryRegionISOCode == 'LB')//Lebanon is IBAN for all currencies
            locCountryCurrencyCombo = ',' + locAddressCountryRegionISOCode;
        else
            locCountryCurrencyCombo = ',' + locAddressCountryRegionISOCode + mSKS_EFT_FileDetail.PaymentCurrencyCode;
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #TLX
            && StrScan(locCountriesToUseIBAN,strUpr(locCountryCurrencyCombo),1,strLen(locCountriesToUseIBAN))
            && strLen(locCountryCurrencyCombo) > 1)
        {
            locTempStr = mSKS_EFT_FileDetail.DepBankIBAN;
            while(strScan(locTempStr, ' ', 1, strLen(locTempStr)))
            {
                locTempStr = strRem(locTempStr, ' '); //per spec, no spaces in the IBAN.
            }
            locTempStr = this.wrapField(locTempStr,34,false,true);
        }
        else
        {
            locTempStr = this.wrapField(mSKS_EFT_FileDetail.DepBankAcct,34,true,true);
        }
        sb.Append(locTempStr);
    
        //15 Ult Bene name -- mandatory: see spec.
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),35));
    
        //Assemble Ult Bene Address
        contAddressLines = conNull();
        if(mSKS_EFT_VendorPaym.WBeneAddr)
        {
            contAddressLines += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr);
        }
    
        if(mSKS_EFT_VendorPaym.WBeneAddr2)
        {
            contAddressLines += this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2);
        }
    
    
        if(mSKS_EFT_VendorPaym.WBeneCity || mSKS_EFT_VendorPaym.WBeneState || mSKS_EFT_VendorPaym.WBeneCountryRegionId)
        {
            contAddressLines += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity), this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState), mSKS_EFT_VendorPaym.WBeneCountryRegionId);
        }
    
        //16 Ult Bene Addr 1 -- May be mandatory: see spec.Lenghty varies based on Payment Spec(ATE & DFE:70 else:35)
        if(conLen(contAddressLines) > 0)
            sb.Append(this.wrapField(ConPeek(contAddressLines, 1),35));
        else
                sb.Append(this.wrapField());
    
        //17 Ult Bene Addr 2 -- May be mandatory: see spec.Lenghty varies based on Payment Spec(ATE & DFE:70 else:35) and Swift ID usage
        if(conLen(contAddressLines) > 1)
        {
            if(strlen(mSKS_EFT_FileDetail.DepSwiftNo) > 0)
                locFieldLength = 32;
            else
                locFieldLength = 35;
        sb.Append(this.wrapField(ConPeek(contAddressLines, 2),35));
        }
        else
                sb.Append(this.wrapField());
    
        //18 Ult Bene Addr 3 -- Optional
         sb.Append(this.wrapField());//field empty because the TLX spec does not privide information on where PARTY ID comes from and how to detect it.
    
        //19 Ult Bene Addr 4 -- Optional
        sb.Append(this.wrapField());//field is empty because it is only valid for ATE and DFE
    
        //20 Intermediary ID -- optional
        locTempStr = this.wrapField(strRem(mSKS_EFT_VendorPaym.WIntBankAcct, ' '),35,false,true);
        sb.Append(locTempStr);
    
        //21  Intermediary Name -- Optional
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName),35));
    
        //Assemble Ult Bene Address
        contAddressLines = conNull();
        if(mSKS_EFT_VendorPaym.WIntBankAddr)
        {
            contAddressLines += this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr);
        }
    
        if(mSKS_EFT_VendorPaym.WIntBankAddr2)
        {
            contAddressLines += this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2);
        }
    
    
        if(mSKS_EFT_VendorPaym.WIntBankCity || mSKS_EFT_VendorPaym.WIntBankCountryRegionId)
        {
            contAddressLines += this.formatAddress3(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity),'',mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
        }
    
        //22  Intermediary Address -- Optional
        if(conLen(contAddressLines) > 0)
            sb.Append(this.wrapField(conPeek(contAddressLines,1 ),35));
        else
            sb.Append(this.wrapField());
    
    
        //23  Intermediary Address 2 -- Optional
        if(strlen(mSKS_EFT_VendorPaym.WIntBankSwift) > 0)
            locFieldLength = 32;
        else
            locFieldLength = 35;
    
        if(conLen(contAddressLines) > 1)
            sb.Append(this.wrapField(conPeek(contAddressLines,2 ),locFieldLength));
        else
            sb.Append(this.wrapField());
    
        //24  Intermediary Address 3 -- Optional
        sb.Append(this.wrapField());
    
        //25  Instructions to Debit Bank 1 -- optional
        sb.Append(this.wrapField());
    
        //26 Instructions to Debit Bank 2 -- optional
        sb.Append(this.wrapField());
    
        //27 Instructions to Debit Bank 3 -- Optional
        sb.Append(this.wrapField());
    
        //28 Instructions to Debit Bank 4 -- Optional
        sb.Append(this.wrapField());
    
        //29 Correspondent Charges -- Optional
        sb.Append(this.wrapField('B'));//defaults to 'B' if blank
    
        //30 Debit Bank Charges -- Optional
        sb.Append(this.wrapField('R'));//defaults to 'R' if blank
    
        //31 Customer Reference -- Optional
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),16)));
    
        //32 Delivery Instructions -- *mandatory for ATE & DFE. Else: Optional
        sb.Append(this.wrapField()); //
    
        //33 Pay Through Code -- Mandatory for ATE & DFE.  Else Optional
        sb.Append(this.wrapField());
    
         //34 Remitter's Text 1 -- optional
        sb.Append(this.wrapField());
    
        //35 Remitter's Text 2 -- optional
        sb.Append(this.wrapField());
    
        //36 Remitter's Text 3 -- optional
        sb.Append(this.wrapField());
    
        //37 Remitter's Text 4 -- optional
        sb.Append(this.wrapField());
    
        //38 Remitter's Text 5 -- ATE & DFE ONLY (Blank otherwise)
        sb.Append(this.wrapField());
    
        //39 Remitter's Text 6 -- ATE & DFE ONLY (Blank otherwise)
        sb.Append(this.wrapField());
    
        //40 Remitter's Text 7 -- ATE & DFE ONLY (Blank otherwise)
        sb.Append(this.wrapField());
    
        //41 Remitter's Text 8 -- ATE & DFE ONLY (Blank otherwise)
        sb.Append(this.wrapField());
    
        //42 Remitter's Text 9 -- ATE & DFE ONLY (Blank otherwise)
        sb.Append(this.wrapField());
    
        //43 Remitter's Text 10 -- ATE & DFE ONLY (Blank otherwise)
        sb.Append(this.wrapField());
    
        //44 Remitter's Text 11 -- ATE & DFE ONLY (Blank otherwise)
        sb.Append(this.wrapField());
    
        //45 Remitter's Text 12 -- ATE & DFE ONLY (Blank otherwise)
        sb.Append(this.wrapField());
    
        //46 Code Value 1 -- UNUSED
        sb.Append(this.wrapField());
    
        //47 Code Value 2 -- UNUSED
        sb.Append(this.wrapField());
    
        //48 Code Value 3 -- UNUSED
        sb.Append(this.wrapField());
    
        //49 Code Value 4 -- UNUSED
        sb.Append(this.wrapField());
    
        //50 Code Value 5 -- UNUSED
        sb.Append(this.wrapField());
    
        //51 Code Value 6 -- UNUSED
        sb.Append(this.wrapField());
    
        //52 Field text line 1 -- UNUSED
        sb.Append(this.wrapField());
    
        //53 Field text line 2 -- UNUSED
        sb.Append(this.wrapField());
    
        //54 Field text line 3 -- UNUSED
        sb.Append(this.wrapField());
    
        //55 Field text line 4 -- UNUSED
        sb.Append(this.wrapField());
    
        //56 Field text line 5 -- UNUSED
        sb.Append(this.wrapField());
    
        //57 Field text line 6 -- UNUSED
        sb.Append(this.wrapField());
    
        //58 By Order ID -- If text is provided in any By Order fields (58-61, 69, or 84), then Mandatory
        sb.Append(this.wrapField());
    
        //59 By Order Name -- If text is provided in any By Order fields (58-61, 69, or 84), then Mandatory
        sb.Append(this.wrapField());
    
        //60 By Order Addr 1 -- If text is provided in any By Order fields (58-61, 69, or 84), then Mandatory
        sb.Append(this.wrapField());
    
        //61 By Order Addr 2 -- If text is provided in any By Order fields (58-61, 69, or 84), then Mandatory
        //                   --32 length if By Order of Swift ID is provided, else 35.
        sb.Append(this.wrapField());
    
        //62 By Order Addr 3 -- Optional
        sb.Append(this.wrapField());
    
        //63 Bene is a Bank -- Optional Bank = 'B'; else 'N' is not a bank
        sb.Append(this.wrapField());
    
        //64 instructions to Debit Bank 5 -- optional
        sb.Append(this.wrapField());
    
        //65 instructions to Debit Bank 6 -- optional
        sb.Append(this.wrapField());
    
        //66 Ult Bene Swift ID -- optional -- NOT VALID FOR ATE & DFE
        sb.Append(this.wrapField());
    
        //67 Bene Bank Swift ID -- optional -- NOT VALID FOR ATE & DFE
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo,11));
    
        //68 Intermediary Swift ID -- Optional -- NOT VALID FOR ATE & DFE
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankSwift,11));
    
        //69 By order of Swift -- See special note under field 61 in spec
        sb.Append(this.wrapField());
    
        //70 Regulatory Reporting Code -- OPTIONAL
        sb.Append(this.wrapField());
    
        //71 Regulatory Reporting Country Code -- OPTIONAL
        sb.Append(this.wrapField());
    
        //72 Regulatory Reporting Line 1 -- Optional -- Variable Lenght:  21 chars of swift text if Regulatory Reporting code is suppled, else 35 chars
        sb.Append(this.wrapField());
    
        //73 Regulatory Reporting Line 2 -- Optional -- If Regulatory Reporting code is suppled this is a continuation line of up to 33 chars.
        sb.Append(this.wrapField());
    
        //74 Regulatory Reporting Line 3 -- Optional -- If Regulatory Reporting code is suppled this is a continuation line of up to 33 chars.
        sb.Append(this.wrapField());
    
        //75 Instruction codes - code 1 -- Optional -- 4 char instruction code
        sb.Append(this.wrapField());
    
        //76 Instruction codes - text 1 -- Optional -- 30 chars of text if code permits
        sb.Append(this.wrapField());
    
       //77 Instruction codes - code 2 -- Optional -- 4 char instruction code
        sb.Append(this.wrapField());
    
        //78 Instruction codes - text 2 -- Optional -- 30 chars of text if code permits
        sb.Append(this.wrapField());
    
        //79 Instruction codes - code 3 -- Optional -- 4 char instruction code
        sb.Append(this.wrapField());
    
        //80 Instruction codes - text 3 -- Optional -- 30 chars of text if code permits
        sb.Append(this.wrapField());
    
        //81 Ult Bene Country - May be mandatory.  See spec below field 17
        locAddressCountryRegionISOCode = '';
        if(strlen(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) > 0)
            locAddressCountryRegionISOCode = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        sb.Append(this.wrapField(locAddressCountryRegionISOCode,2,false,true));
    
        //82 Bene Bank Country -- Mandatory if any of the bene bank fields contain text.
        locAddressCountryRegionISOCode = '';
            locAddressCountryRegionISOCode = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        sb.Append(this.wrapField(locAddressCountryRegionISOCode,2,false,true));
    
        //83 Intermediary Country -- Optional:
        locAddressCountryRegionISOCode = '';
            locAddressCountryRegionISOCode = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
        sb.Append(this.wrapField(locAddressCountryRegionISOCode,2,false,true));
    
        //84 By Order Country
        sb.Append(this.wrapField('',0,false,false));
    
    
        this.fileWrite(sb.ToString());
    
        mPaymentCount++;
        mPaymentAmount += amt;
    
        return true;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    //Nbr   Description                         Comment
    //1     Record Indicator
    //2     Total Number of Records
    //3     Hash Total of Amounts
    boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //1 Record Indicator
        sb.Append(this.wrapField('99'));
    
        //2 Total Number of Records
        sb.Append(this.wrapField(int642str(mPaymentCount),7,false));
    
        //3 Hash Total of Amounts
        sb.Append(this.wrapField(num2Str(mPaymentAmount, 1, 2, 1, 0),0 ,false, false));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.NextDailyResetDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int length=0, boolean _quoted = true, boolean _commaDelimit = true)
    {
        str value;
    
        if(length != 0)
        {
            value = subStr(_field, 1, length); // Trim field
        }
        else
            value = _field;
    
        if(_quoted && _field != '')
        {
            value = #DoubleQuote + value + #DoubleQuote; // Wrap with double quotes
        }
    
    
        if(_commaDelimit)
        {
            value = value + #Comma; // Add comma
        }
    
        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>