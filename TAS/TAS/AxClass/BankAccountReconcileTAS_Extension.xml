<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountReconcileTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(BankAccountReconcile))]
final class BankAccountReconcileTAS_Extension
{
    private BankAccountStatement gBankAccountStatement;
    private boolean              isCalledFromCCR; // SKS_FDD_13903
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
    public void setParameters(BankAccountStatement _bankAccountStatement)
    {
        next setParameters(_bankAccountStatement);
        gBankAccountStatement = _bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        next run();

        //
        if(!isCalledFromCCR) // SKS_FDD_13903 - If isCalledFromCCR is true dont allow to call SKS_BR_BankAcctStmt::updateReconcileStatement() as this is not used in CCR
        {
            SKS_BR_BankAcctStmt::updateReconcileStatement(gBankAccountStatement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromCCR</Name>
				<Source><![CDATA[
    // SKS_FDD_13903
    // Used to set a boolean parameter 'isCalledFromCCR' as true when the method is called from CCR related classes
    public void isCalledFromCCR(boolean _isCalledFromCCR)
    {
        isCalledFromCCR = _isCalledFromCCR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPriorStatementsBeReconciled</Name>
				<Source><![CDATA[
    protected boolean mustPriorStatementsBeReconciled()
    {
        boolean rtnval = next mustPriorStatementsBeReconciled();
        if(SKS_PP_Setup::find(false).ModBR ||  SKS_PP_Setup::find(false).ModCCReconciliationExtensions)
            rtnval =  false;//BR or CCR is enabled.  Bypass the check for unreconciled previous statements
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>