<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_AutoProcessImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// ARES import process class
/// </summary>
class SKS_LB_AutoProcessImport
{
    CompanyBankAccountId importBankAccount; // Current Bank Account being processed.
    CurrencyCode TranCuryCode;              // Current Transaction Currency
    TransDate TranEffDate;                  // Transaction Currency Effective Date
    ExchRate TranERate;                     // Transaction Currency Exchange Rate
    xInfo myInfo;
    str                     locfilename;
    UTCDateTime             FileDate;
    SKS_LB_FormatId         FormatID;
    CompanyBankAccountId    BankID;
    JournalId               myJournalID;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>MoveEmptyFileToComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for move empty file to complete
    /// </summary>
    /// <param name = "_JournalID">_JournalID</param>
    /// <param name = "_Path">_Path</param>
    /// <param name = "_FileName">_FileName</param>
    /// <param name = "_InProcessPath">_InProcessPath</param>
    /// <param name = "_fileHub">_fileHub</param>
    delegate void MoveEmptyFileToComplete(
                JournalId               _JournalID,
                str                     _Path,
                str                     _FileName,
                str                     _InProcessPath,
                SKS_EB_FileHub          _fileHub){}

]]></Source>
			</Method>
			<Method>
				<Name>CreateHistoryandMoveFile</Name>
				<Source><![CDATA[
    private void CreateHistoryandMoveFile(SKS_LB_Action SKS_LB_Action, str addData, SKS_LB_In_Process SKS_LB_In_Process, str Path, SKS_LB_Status SKS_LB_Status, str filename, SKS_LB_Journal   SKS_LB_Journal)
    {
        str InProcessFile;
        str InProcessPath;
        SKS_LB_Import           cls_SKS_LB_Import  = new SKS_LB_Import();
        
        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
        SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }
        SKS_EB_FileHub          fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

        ttsBegin;
        this.NumSeqTry();
        SKS_LB_Process_IMPORTTEMP_Records::createLBFileHistory(SKS_LB_Action, addData,'', myJournalId);
        InProcessPath = cls_SKS_LB_Import.CheckLBFolders(SKS_LB_In_Process, path, true);
        InProcessFile =  System.IO.Path::Combine(InProcessPath,filename);
        SKS_LB_Journal.JournalID = myJournalId;
        SKS_LB_Journal.KeepDelete = SKS_LB_Status;
        SKS_LB_Journal.FileName = filename;
        sks_lb_journal.insert();
        ttsCommit;

        if(SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            fileHub.setFileName(locfilename);
        }
        else if(SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            fileHub.setFileName(InProcessFile,'','','','',Path);        
        }

        fileHub.runFileMoveTo(InProcessFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLBFromCommId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create lockbox from communciation id
    /// </summary>
    /// <param name = "_SKS_EB_CommProcess">_SKS_EB_CommProcess</param>
    public void createLBFromCommId(SKS_EB_CommProcess _SKS_EB_CommProcess)
    {
        SKS_LB_Bank             locSKS_LB_Bank;
        str                     loc_FileName;
        utcdatetime             loc_FileDate;
        SKS_LB_Directory        locSKS_LB_Directory;
        List                    LBDirToProcess = new List(Types::Class);
        List                    LBFilesToProcess;
        ListEnumerator          LBDirToProcessEnumerator;
        ListEnumerator          LBFilesToProcessEnumerator;
        SKS_EB_FilePath         filePath;
        
        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;
        SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }

        SKS_EB_FileHub  fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

        while select crossCompany locSKS_LB_Bank where locSKS_LB_Bank.LBInboundCommID == _SKS_EB_CommProcess.CommID
        {
            if(SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
            {
                filePath = locSKS_LB_Bank.LBPath;
            }
            else
            {
                filePath = locSKS_LB_Bank.LBBankFabricLocation;
            }
            
            if(filePath)
            {
                locSKS_LB_Directory = new SKS_LB_Directory(filePath, locSKS_LB_Bank.company(), locSKS_LB_Bank.LBFormatId, locSKS_LB_Bank.BankAccountId);
                LBDirToProcess.addEnd(locSKS_LB_Directory);
            }
        }


        LBDirToProcessEnumerator = LBDirToProcess.getEnumerator();
        LBDirToProcessEnumerator.reset();

        while(LBDirToProcessenumerator.moveNext())
        {
            locSKS_LB_Directory = LBDirToProcessEnumerator.current();
            changeCompany(locSKS_LB_Directory.get_Company())
            {
                LBFilesToProcess = fileHub.runDirectoryGetFiles(locSKS_LB_Directory.get_Directory());

                LBFilesToProcessEnumerator = LBFilesToProcess.getEnumerator();
                LBFilesToProcessEnumerator.reset();

                while(LBFilesToProcessEnumerator.moveNext())
                {
                    loc_Filename = LBFilesToProcessEnumerator.current();
                    if(SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
                    {
                        loc_Filename = System.IO.Path::Combine(locSKS_LB_Directory.get_Directory(), System.IO.Path::GetFileName(loc_filename));
                    }
                    
                    fileHub.runfileInquire(loc_FileName);
                    loc_FileDate = fileHub.attrFileModified();

                    this.initCurrencyinfo(locSKS_LB_Directory.get_bankId());
                    this.InitReaderInfo(loc_FileDate, locSKS_LB_Directory.get_FormatID(), loc_FileName, locSKS_LB_Directory.get_BankID());
                    this.FileReader(true, true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FileReader</Name>
				<Source><![CDATA[
    /// <summary>
    /// File reader
    /// </summary>
    /// <param name = "autoProcessing">autoProcessing</param>
    /// <param name = "serverside">serverside</param>
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer sks_lb_journal is selected forUpdate and is passed to other methods where it is modified")]
    public void FileReader(boolean autoProcessing, boolean serverside)
    {
        str                     filename;
        str                     path;
        boolean                 duplicatefile;
        str                     InProcessFile;
        str                     InProcessPath;
        int                     OldDepNbr;
        str                     prevFileName;
        boolean                 NoSettlements = false;
        SKS_LB_Bank             sks_lb_bank;
        SKS_LB_FileFormat       rec_SKS_LB_FileFormat;
        TmpSKS_LB_Importing     rec_TmpSKS_LB_Importing;
        SKS_LB_Journal          SKS_LB_Journal;
        SKS_PP_Bank             SKS_PP_Bank;
        SKS_LB_ReadFileCSV      cls_SKS_LB_ReadFileCSV;
        SKS_LB_ReadFileFixed    cls_SKS_LB_ReadFileFixed;
        SKS_LB_ReadFileBAI2     cls_SKS_LB_ReadFileBAI2;
        SKS_LB_ReadFileEDI      cls_SKS_LB_ReadFileEDI;
        SKS_LB_ReadFileSymcor   cls_SKS_LB_ReadFileSymcor;
        SKS_LB_ReadFileWFRMF    cls_SKS_LB_ReadFileWFRMF;
        SKS_LB_ReadFileCAMT54   cls_SKS_LB_ReadFileCAMT54;
        SKS_LB_ReadFileWFARRMF  cls_SKS_LB_ReadfIleWFARRMF;
        SKS_LB_ReadFileIR       cls_SKS_LB_ReadFileIR;
        SKS_LB_AutoPayment      cls_SKS_LB_AutoPayment = new SKS_LB_AutoPayment();
        SKS_LB_Process_IMPORTTEMP_Records   cls_SKS_LB_Process_IMPORTTEMP_Records = new SKS_LB_Process_IMPORTTEMP_Records();

        SKS_LB_Import           cls_SKS_LB_Import = new SKS_LB_Import();
        SKS_BF_BankIntType      SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;
        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;

        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }

        SKS_EB_FileHub          fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

        path = System.IO.Path::GetDirectoryName(locfilename);
        FileName = System.IO.Path::GetFileName(locfilename);

        fileHub.setFileName(locfilename,'','','','',path);

        duplicatefile = this.ValidateFile(locfilename, utcDateTime2SystemDateTime(FileDate));

        if(!duplicatefile)
        {
            InProcessPath = cls_SKS_LB_Import.CheckLBFolders(SKS_LB_In_Process::InProcess_FolderName, path, true);

            InProcessFile =  System.IO.Path::Combine(InProcessPath,filename);

            Select firstonly * from rec_SKS_LB_FileFormat where rec_SKS_LB_FileFormat.FormatID == this.getFormatID();

            switch (rec_SKS_LB_FileFormat.FileType)
            {
                case SKS_LB_FileType::TabDelimited:
                case SKS_LB_FileType::CSV:
                    cls_SKS_LB_ReadFileCSV =  new SKS_LB_ReadFileCSV();
                    If (rec_SKS_LB_FileFormat.FileType == SKS_LB_FileType::TabDelimited)
                    {
                        cls_SKS_LB_ReadFileCSV.useTabDelimiter();
                    }
                    cls_SKS_LB_ReadFileCSV.setFormatId(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadFileCSV.setFileName(locfilename);
                    cls_SKS_LB_ReadFileCSV.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadFileCSV.readFile();
                    cls_SKS_LB_ReadFileCSV = null;
                    break;
                case SKS_LB_FileType::FixedField:
                    cls_SKS_LB_ReadFileFixed = new SKS_LB_ReadFileFixed();
                    cls_SKS_LB_ReadFileFixed.setFormatId(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadFileFixed.setFileName(locfilename);
                    cls_SKS_LB_ReadFileFixed.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadFileFixed.readFile();
                    cls_SKS_LB_ReadFileFixed = null;
                    break;

                case SKS_LB_FileType::BAI2:
                case SKS_LB_FileType::Colombia:
                    if(rec_SKS_LB_FileFormat.FileType == SKS_LB_FileType::Colombia)
                    {
                        cls_SKS_LB_ReadFileBAI2 =  new SKS_LB_ReadFileColombia();
                    }
                    else
                    {
                        cls_SKS_LB_ReadFileBAI2 =  new SKS_LB_ReadFileBAI2();
                    }
                    cls_SKS_LB_ReadFileBAI2.setFormatId(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadFileBAI2.setFileName(locfilename);
                    cls_SKS_LB_ReadFileBAI2.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    cls_SKS_LB_ReadFileBAI2.openFile();
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadFileBAI2.readFile();
                    NoSettlements = cls_SKS_LB_ReadFileBAI2.GetNoSettlements();
                    cls_SKS_LB_ReadFileBAI2.closefile();
                    cls_SKS_LB_ReadFileBAI2 = null;
                    break;

                case SKS_LB_FileType::EDI820:
                case SKS_LB_FileType::EDI823:
                    cls_SKS_LB_ReadFileEDI = new SKS_LB_ReadFileEDI();
                    cls_SKS_LB_ReadFileEDI.setFormatId(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadFileEDI.setFileName(locfilename);
                    cls_SKS_LB_ReadFileEDI.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    cls_SKS_LB_ReadFileEDI.openFile();
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadFileEDI.readFile();
                    cls_SKS_LB_ReadFileEDI.closeFile();
                    cls_SKS_LB_ReadFileEDI = null;
                    break;

                case SKS_LB_FileType::Symcor:
                    cls_SKS_LB_ReadFileSymcor =  new SKS_LB_ReadFileSymcor();
                    cls_SKS_LB_ReadFileSymcor.setFormatId(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadFileSymcor.setFileName(locfilename);
                    cls_SKS_LB_ReadFileSymcor.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    cls_SKS_LB_ReadFileSymcor.openFile();
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadFileSymcor.readFile();
                    cls_SKS_LB_ReadFileSymcor.closefile();
                    cls_SKS_LB_ReadFileSymcor = null;
                    break;

                case SKS_LB_FileType::WFRMF:
                    cls_SKS_LB_ReadFileWFRMF = new SKS_LB_ReadFileWFRMF();
                    cls_SKS_LB_ReadFileWFRMF.setFormatId(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadFileWFRMF.setFileName(locfilename);
                    cls_SKS_LB_ReadFileWFRMF.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    cls_SKS_LB_ReadFileWFRMF.openFile();
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadFileWFRMF.readFile();
                    cls_SKS_LB_ReadFileWFRMF.closefile();
                    cls_SKS_LB_ReadFileWFRMF = null;
                    break;

                case SKS_LB_FileType::CAMT54V1:
                case SKS_LB_FileType::CAMT54V2:
                    if(rec_SKS_LB_FileFormat.FileType == SKS_LB_FileType::CAMT54V1)
                    {
                        cls_SKS_LB_ReadFileCAMT54 = new SKS_LB_ReadFileCAMT54V1();
                    }
                    else
                    {
                        cls_SKS_LB_ReadFileCAMT54 = new SKS_LB_ReadFileCAMT54();
                    }
                    cls_SKS_LB_ReadFileCAMT54.setFormatId(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadFileCAMT54.setFileName(locfilename);
                    cls_SKS_LB_ReadFileCAMT54.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadFileCAMT54.getFile();
                    cls_SKS_LB_ReadFileCAMT54 = null;
                    break;

                case SKS_LB_FileType::WFARRemitFile:
                    cls_SKS_LB_ReadfIleWFARRMF = new SKS_LB_ReadFileWFARRMF();
                    cls_SKS_LB_ReadfIleWFARRMF.setformatID(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadfIleWFARRMF.setfilename(locfilename);
                    cls_SKS_LB_ReadfIleWFARRMF.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    cls_SKS_LB_ReadFileWFARRMF.openFile();
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadfIleWFARRMF.readFile();
                    cls_SKS_LB_ReadFileWFARRMF.closefile();
                    cls_SKS_LB_ReadfIleWFARRMF = null;
                    break;

                case SKS_LB_FileType::IntReceive:
                    cls_SKS_LB_ReadFileIR = new SKS_LB_ReadFileIR();
                    cls_SKS_LB_ReadFileIR.setformatID(rec_SKS_LB_FileFormat.FormatID);
                    cls_SKS_LB_ReadFileIR.setfilename(locfilename);
                    cls_SKS_LB_ReadFileIR.setFileDateTime(utcDateTime2SystemDateTime(FileDate));
                    cls_SKS_LB_ReadFileIR.openFile();
                    rec_TmpSKS_LB_Importing = cls_SKS_LB_ReadFileIR.readFile();
                    cls_SKS_LB_ReadFileIR.closefile();
                    cls_SKS_LB_ReadFileIR = null;
                    break;

                default:
                    break;
            }
        }

        if (rec_TmpSKS_LB_Importing != null)
        {
            // <>
            // call SO posting
            this.prePreocessingExtension(rec_TmpSKS_LB_Importing);
            // </>

            ttsbegin;
            fileHub.runFileMoveTo(InProcessFile);
            while select * from rec_TmpSKS_LB_Importing order by rec_TmpSKS_LB_Importing.DepNbr, rec_TmpSKS_LB_Importing.BatchNum, rec_TmpSKS_LB_Importing.CheckNumber, rec_TmpSKS_LB_Importing.InvAmount desc, rec_TmpSKS_LB_Importing.RecId
            {
                // Each file will be imported into it's own journal.
                // If the file name changes, get a new journal id.
                if(locfilename != prevFileName || OldDepNbr != rec_TmpSKS_LB_Importing.DepNbr)
                {
                    if (prevFileName != '') // if switching to a new journal, do split payment or tolerance adjustments in previous Journal
                    {
                        SKS_LB_54000Bas::markSplitPayments(myJournalID);
                        SKS_LB_54000Bas::adjustSettleByTolerance(myJournalID);
                    }

                    this.NumSeqTry();//Sets the number sequence for the journalid
                }                       

                cls_SKS_LB_Process_IMPORTTEMP_Records.Journal_ARLB_Insert(rec_TmpSKS_LB_Importing, this.GetBankID(),
                                                                    myJournalID, '',
                                                                    InProcessFile, dateNull(),
                                                                    rec_SKS_LB_FileFormat.FormatID, this.GetCurrencyCode(),
                                                                    this.GetExchangeRate(),
                                                                    rec_SKS_LB_FileFormat.BatchSplitType,
                                                                    rec_SKS_LB_FileFormat.BatchPaymentCount,0);
                OldDepNbr = rec_TmpSKS_LB_Importing.DepNbr;
                prevFileName = locfilename;
            }

            this.MoveEmptyFileToComplete(myJournalID, path, Filename, InProcessFile, fileHub);

            // do split payment or tolerance adjustments in final Journal
            SKS_LB_54000Bas::markSplitPayments(myJournalID);
            SKS_LB_54000Bas::adjustSettleByTolerance(myJournalID);
            SKS_LB_54000Bas::ShortpayDeductionCreation(myJournalID);

            select firstonly 
                lbautopmtjrnl, MoveGoodPaymToBatch, NoPartialSettle, PaymMustBeZero, BankAccountID, LBFormatid 
                from SKS_LB_Bank 
                where SKS_LB_Bank.BankAccountId == this.GetBankID() 
                        && SKS_LB_Bank.LBFormatId == this.getFormatID();

            if(sks_lb_bank.MoveGoodPaymToBatch == NoYes::Yes)
            {
                this.TransferFullySettledPayments(rec_SKS_LB_FileFormat.FileType, sks_lb_bank.NoPartialsettle, sks_lb_bank.PaymMustBeZero);

                SKS_LB_Process_IMPORTTEMP_Records::CalcBatchTotals(myJournalID, rec_SKS_LB_FileFormat.FileType,
                        rec_SKS_LB_FileFormat.PmtAmtEQSumChkAmts);

                SKS_LB_Process_IMPORTTEMP_Records::createLBFileHistory(SKS_LB_Action::FileImported, "@SKS464",'', myJournalID);
                ttsCommit;
                while select SKS_LB_Journal where SKS_LB_Journal.BatchNum == 'AUTO' && SKS_LB_Journal.JournalID == myJournalID
                {
                    if(cls_SKS_LB_AutoPayment.validateCustAcctDimensions(SKS_LB_Journal))
                    {
                        try
                        {
                            cls_SKS_LB_AutoPayment.createPmtJrnl(SKS_LB_Journal);
                        }
                        catch
                        {
                            this.JournalUnblock(SKS_LB_Journal);
                            SKS_LB_Process_IMPORTTEMP_Records::createLBFileHistory(SKS_LB_Action::PmtJrnlCreateFail, "@SKS3385", SKS_LB_Journal.JournalID, myJournalId);
                        }
                    }
                    else
                    {
                        SKS_LB_Process_IMPORTTEMP_Records::createLBFileHistory(SKS_LB_Action::PmtJrnlCreateFail, "@SKS3385", SKS_LB_Journal.JournalID, myJournalId);
                    }
                }

                while select forUpdate sks_lb_journal where SKS_LB_Journal.journalid == myJournalID
                {
                    this.JournalUnblock(SKS_LB_Journal);
                }
            }
            else
            {
                SKS_LB_Process_IMPORTTEMP_Records::createLBFileHistory(SKS_LB_Action::FileImported, "@SKS464",'', myJournalID);

                SKS_LB_Process_IMPORTTEMP_Records::CalcBatchTotals(myJournalID, rec_SKS_LB_FileFormat.FileType,
                        rec_SKS_LB_FileFormat.PmtAmtEQSumChkAmts);
                ttsCommit;
                if(sks_lb_bank.LBAutoPmtJrnl)
                {
                    while select forupdate SKS_LB_Journal where SKS_LB_Journal.JournalID == MyJournalid
                    {
                        if(cls_SKS_LB_AutoPayment.validateCustAcctDimensions(SKS_LB_Journal))
                        {
                            try
                            {
                                cls_SKS_LB_AutoPayment.createPmtJrnl(SKS_LB_Journal);
                            }
                            catch
                            {
                                this.JournalUnblock(SKS_LB_Journal);
                                SKS_LB_Process_IMPORTTEMP_Records::createLBFileHistory(SKS_LB_Action::PmtJrnlCreateFail, "@SKS3385", SKS_LB_Journal.JournalID, myJournalId);
                            }
                        }
                        else
                        {
                            SKS_LB_Process_IMPORTTEMP_Records::createLBFileHistory(SKS_LB_Action::PmtJrnlCreateFail, "@SKS3385", SKS_LB_Journal.JournalID, myJournalId);
                        }
                    }

                    while select forUpdate sks_lb_journal where SKS_LB_Journal.journalid == myJournalID
                    {
                        this.JournalUnblock(SKS_LB_Journal);
                    }
                }
                else
                {
                    while select forUpdate sks_lb_journal where SKS_LB_Journal.journalid == myJournalID
                    {
                        this.JournalUnblock(SKS_LB_Journal);
                    }
                }
            }
        }
        else
        {
            if(NoSettlements)
            {
                select firstonly SKS_LB_Bank where SKS_LB_Bank.BankAccountId == this.GetBankID() && SKS_LB_Bank.LBFormatId == this.getFormatID();

                if(sks_lb_bank.LBArchive)
                {
                    ttsBegin;
                    this.NumSeqTry();
                    SKS_LB_Process_IMPORTTEMP_Records::createLBFileHistory(SKS_LB_Action::FileImported, "@SKS3267",'', myJournalId);
                    InProcessPath = cls_SKS_LB_Import.CheckLBFolders(SKS_LB_In_Process::InProcess_FolderName, path, true);
                    InProcessFile =  System.IO.Path::Combine(InProcessPath,filename);
                    SKS_LB_Journal.JournalID = myJournalId;
                    SKS_LB_Journal.KeepDelete = SKS_LB_Status::Completed;
                    SKS_LB_Journal.FileName = filename;
                    sks_lb_journal.insert();
                    this.JournalUnblock(SKS_LB_Journal);
                    ttsCommit;
                    fileHub.runFileMoveTo(InProcessFile);

                    SKS_LB_Payment::archive(filename, SKS_PP_Bank, sks_lb_bank, autoprocessing);
                }
                else
                {
                    this.CreateHistoryandMoveFile(SKS_LB_Action::FileImported, "@SKS3267", SKS_LB_In_Process::Complete_FolderName, path, SKS_LB_Status::Completed, filename, SKS_LB_Journal);
                }
            }
            else
            {
                if(autoProcessing)
                {
                    if(!duplicatefile)
                    {
                        this.CreateHistoryandMoveFile(SKS_LB_Action::FileImportFail, "@SKS560", SKS_LB_In_Process::Errors_FolderName, path, SKS_LB_Status::FileError, filename, SKS_LB_Journal);
                    }
                    else
                    {
                        this.CreateHistoryandMoveFile(SKS_LB_Action::FileImportFail, "@SKS3177", SKS_LB_In_Process::Errors_FolderName, path, SKS_LB_Status::FileError, filename, SKS_LB_Journal);
                    }
                }
                else
                {
                    this.CreateHistoryandMoveFile(SKS_LB_Action::FileImportFail, "@SKS560", SKS_LB_In_Process::Errors_FolderName, path, SKS_LB_Status::FileError, filename, SKS_LB_Journal);                    
                    Error("@SKS560");
                }
            }

            //<ISSUE-19666 - Unblock Journal if don't have data in 'rec_TmpSKS_LB_Importing' table>
            while select forUpdate SKS_LB_Journal 
                where SKS_LB_Journal.JournalID == myJournalID
            {
                this.JournalUnblock(SKS_LB_Journal);
            }
            //</ISSUE-19666>
        }              
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBankID</Name>
				<Source><![CDATA[
    public CompanyBankAccountId GetBankID()
    {
        return BankId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode GetCurrencyCode()
    {
        return TranCuryCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCurrencyDate</Name>
				<Source><![CDATA[
    public date GetCurrencyDate()
    {
        return TranEffDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetExchangeRate</Name>
				<Source><![CDATA[
    public ExchRate GetExchangeRate()
    {
        return TranERate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetFileDate</Name>
				<Source><![CDATA[
    public SKS_EB_Date GetFileDate()
    {
        return utcDateTime2SystemDateTime(FileDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetFileName</Name>
				<Source><![CDATA[
    public str GetFileName()
    {
        return locFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatID</Name>
				<Source><![CDATA[
    public SKS_LB_FormatId getFormatID()
    {
        return FormatID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalIDLength</Name>
				<Source><![CDATA[
    public int getJournalIDLength()
    {
        DictType    dictType;
        ;
        dictType = new DictType(extendedTypeNum(JournalId));

        return dictType.stringLen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCurrencyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the currency information
    /// </summary>
    /// <param name = "BankAcctId">BankAcctId</param>
    /// <param name = "_skipExchRate">If true then won't sets exchange rate and date</param>
    void initCurrencyInfo(CompanyBankAccountId  BankAcctId, boolean _skipExchRate = false)
    {
        BankAccountTable tBankAccountTable;
        CompanyInfo CompanyInfo;

        importBankAccount = BankAcctId;

        select firstOnly CurrencyCode from tBankAccountTable where tBankAccountTable.AccountID == importBankAccount;
        this.SetCurrencyCode( tBankAccountTable.CurrencyCode);

        if (!_skipExchRate)
        {
            // Open the JournalID/Currency sub form for confirmation.
            companyInfo = CompanyInfo::find();
        
            this.SetCurrencyDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
            this.SetExchangeRate(ExchangeRateHelper::getExchangeRate1_Static(Ledger::primaryLedger(companyInfo.RecID), tBankAccountTable.CurrencyCode, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InitReaderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Iniitlaize the file reader information
    /// </summary>
    /// <param name = "_FileDate">_FileDate</param>
    /// <param name = "_FormatID">_FormatID</param>
    /// <param name = "_FileName">_FileName</param>
    /// <param name = "_BankID">_BankID</param>
    public void InitReaderInfo(utcdatetime _FileDate, SKS_LB_FormatID _FormatID, str _FileName, companyBankAccountID _BankID)
    {
        this.setfiledate(_FileDate);
        this.SetFormatID(_FormatID);
        this.Setfilename(_FileName);
        this.setBankAcctID(_BankID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>JournalUnblock</Name>
				<Source><![CDATA[
    private void JournalUnblock(SKS_LB_Journal _Journal)
    {
        ttsBegin;
        _Journal.selectForUpdate(true);
        _Journal.SessionId = 0;
        _Journal.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>NumSeqTry</Name>
				<Source><![CDATA[
    private void NumSeqTry()
    {
        str journalcheck;
        int journalidlen;

        JournalIDlen = this.getjournalidlength();

        try
        {
            Journalcheck = NumberSeq::newGetNum(SKS_PP_Setup::numRefLockboxNextJournalNumber()).num();
            if(strLen(Journalcheck) > JournalIDlen)
            {
                ttsAbort;
                error(strFmt("@SKS2646", int2str(strLen(Journalcheck)), int2str(JournalIDlen)));
                return;
            }
            else
            {
                myJournalID = Journalcheck;
            }
        }
        catch(Exception::Error)
        {
            //  A setup check to make sure the sequence number is setup.
            ttsabort;
            info("@SKS463");
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankAcctID</Name>
				<Source><![CDATA[
    private void setBankAcctID(CompanyBankAccountId _BankID)
    {
        BankID = _bankID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetCurrencyCode</Name>
				<Source><![CDATA[
    public void SetCurrencyCode(CurrencyCode CuryCode)
    {
        TranCuryCode = CuryCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetCurrencyDate</Name>
				<Source><![CDATA[
    public void SetCurrencyDate( date setDate)
    {
        TranEffDate = setDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetExchangeRate</Name>
				<Source><![CDATA[
    public void SetExchangeRate( ExchRate setExchRate)
    {
        TranERate = setExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setfiledate</Name>
				<Source><![CDATA[
    private void setfiledate(utcdatetime _FileDate)
    {
        filedate = _Filedate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Setfilename</Name>
				<Source><![CDATA[
    private void Setfilename(str _FileName)
    {
        locfilename = _FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatID</Name>
				<Source><![CDATA[
    private void setFormatID(SKS_LB_FormatId _FormatID)
    {
        Formatid = _FormatID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TransferFullySettledPayments</Name>
				<Source><![CDATA[
    private void TransferFullySettledPayments(SKS_LB_FileType   FileType, boolean NoPartialSettle, boolean PaymUnsettledMustBeZero)
    {
        SKS_LB_Journal          lsks_lb_journal;
        SKS_LB_Journal          NewLBJournal;
        SKS_LB_JournalAR        lsks_lb_journalar;
        SKS_LB_JournalAR        TmpSKS_LB_JournalAR;
        SKS_LB_JournalARErrors  lsks_lb_journalarerrors;
        SKS_LB_JournalARApplic  lsks_lb_journalarapplic;
        CustParameters          CustParameters;
        boolean                 AutoBatchCreated = false;
        boolean                 PaymUnsettledValidation;
        boolean                 NoPartialSettleValidation;
        ;

        select forupdate lsks_lb_journal where lsks_lb_journal.JournalID == myJournalID && lsks_lb_journal.BatchNum != 'AUTO';
        ttsBegin;
        while(lsks_lb_journal)
        {
            if((FileType != SKS_LB_FileType::CSV && FileType != SKS_LB_FileType::FixedField && FileType != SKS_LB_FileType::TabDelimited) )
            {
                Select forupdate lsks_lb_journalar where lsks_lb_journalar.JournalId == myJournalID
                    && lsks_lb_journalar.Batchnum == lsks_lb_journal.BatchNum
                    notExists join lsks_lb_journalarerrors
                    where lsks_lb_journalar.ParentRecId == lsks_lb_journalarerrors.ParentRecID
                        && lsks_lb_journalarerrors.BatchNum == lsks_lb_journal.BatchNum
                        && lsks_lb_journalarerrors.JournalId == lsks_lb_journal.JournalID;
            }
            else
            {
                Select forupdate lsks_lb_journalar where lsks_lb_journalar.JournalId == myJournalID
                    && lsks_lb_journalar.Batchnum == lsks_lb_journal.BatchNum
                    notExists join lsks_lb_journalarerrors
                    where lsks_lb_journalarerrors.BatchNum == lsks_lb_journal.BatchNum
                        && lsks_lb_journalarerrors.JournalId == lsks_lb_journal.JournalID
                        && lsks_lb_journalar.CustAccount == lsks_lb_journalarerrors.CustAccount
                        && lsks_lb_journalar.DefaultDimension == lsks_lb_journalarerrors.DefaultDimension
                        && lsks_lb_journalar.ChkRefNbr == lsks_lb_journalarerrors.ChkRefNbr;
            }

            if(PaymUnsettledMustBeZero)
            {
                custparameters = CustParameters::findByCompany(curext());
            }

            while(lsks_lb_journalar)
            {
                PaymUnsettledValidation = true;
                NoPartialSettleValidation = true;

                if((FileType != SKS_LB_FileType::CSV && FileType != SKS_LB_FileType::FixedField && FileType != SKS_LB_FileType::TabDelimited) )
                {
                    Select sum(pmtamountcur), sum (actualsettleamountcur) from TmpSKS_LB_Journalar where TmpSKS_LB_Journalar.JournalId == myJournalID
                        && TmpSKS_LB_Journalar.ParentRecId == lsks_lb_journalar.ParentRecID
                        && TmpSKS_LB_Journalar.BatchNum == lsks_lb_journal.BatchNum;
                }
                else
                {
                    Select sum(pmtamountcur), sum (actualsettleamountcur) from TmpSKS_LB_Journalar where TmpSKS_LB_Journalar.JournalId == myJournalID
                            && TmpSKS_LB_Journalar.BatchNum == lsks_lb_journal.BatchNum
                            && TmpSKS_LB_Journalar.JournalId == lsks_lb_journal.JournalID
                            && TmpSKS_LB_Journalar.CustAccount == lsks_lb_journalar.CustAccount
                            && TmpSKS_LB_Journalar.DefaultDimension == lsks_lb_journalar.DefaultDimension
                            && TmpSKS_LB_Journalar.ChkRefNbr == lsks_lb_journalar.ChkRefNbr;
                }

                if(PaymUnsettledMustBeZero)
                {
                    if(!(abs(TmpSKS_LB_Journalar.PmtAmountCur - TmpSKS_LB_Journalar.ActualSettleAmountCur) <= abs(CustParameters.MaxMSTOverUnder)) || TmpSKS_LB_Journalar.ActualSettleAmountCur == 0)
                    {
                        PaymUnsettledValidation = false;
                    }
                }

                TmpSKS_LB_JournalAR = null;

                if(NoPartialSettle)
                {
                    if((FileType != SKS_LB_FileType::CSV && FileType != SKS_LB_FileType::FixedField && FileType != SKS_LB_FileType::TabDelimited) )
                    {
                        select firstonly lsks_lb_journalarapplic join TmpSKS_LB_Journalar where lsks_lb_journalarapplic.SKS_LB_JournalARRecId == TmpSKS_LB_Journalar.recid
                            && TmpSKS_LB_Journalar.BatchNum == lsks_lb_journalar.batchnum
                            && TmpSKS_LB_Journalar.JournalId == lsks_lb_journalar.JournalId
                            && TmpSKS_LB_Journalar.ParentRecid == lsks_lb_journalar.ParentRecid
                            && lsks_lb_journalarapplic.FullSettlement == NoYes::No;
                    }
                    else
                    {
                        select firstonly lsks_lb_journalarapplic join TmpSKS_LB_Journalar where lsks_lb_journalarapplic.SKS_LB_JournalARRecId == TmpSKS_LB_Journalar.recid
                            && TmpSKS_LB_Journalar.BatchNum == lsks_lb_journalar.batchnum
                            && TmpSKS_LB_Journalar.JournalId == lsks_lb_journalar.JournalId
                            && TmpSKS_LB_Journalar.ChkRefNbr == lsks_lb_journalar.ChkRefNbr
                            && TmpSKS_LB_Journalar.CustAccount == lsks_lb_journalar.CustAccount
                            && TmpSKS_LB_JournalAR.DefaultDimension == lsks_lb_journalar.DefaultDimension
                            && lsks_lb_journalarapplic.FullSettlement == NoYes::No;
                    }

                    if(lsks_lb_journalarapplic)
                    {
                        NoPartialSettleValidation = false;
                    }
                }

                if(PaymUnsettledValidation && NoPartialSettleValidation)
                {
                    if(!AutoBatchCreated)
                    {
                        AutoBatchCreated = true;
                        buf2Buf(lsks_lb_journal, NewLBJournal);
                        NewLBJournal.BatchNum = 'AUTO';
                        NewLBJournal.BankPmtCnt = 0;
                        NewLBJournal.BankPmtTotal = 0;
                        NewLBJournal.pmttotal = 0;
                        NewLBJournal.BatchPmtCnt = 0;
                        NewLBJournal.write();
                    }
                    NewLBJournal.pmttotal += lsks_lb_journalar.PmtAmountCur;
                    NewLBJournal.BatchPmtCnt++;
                    NewLBJournal.update();
                    lsks_lb_journal.BatchPmtCnt--;
                    lsks_lb_journal.PmtTotal -= lsks_lb_journalar.PmtAmountCur;
                    lsks_lb_journal.BankPmtCnt = 0;
                    lsks_lb_journal.BankPmtTotal = 0;
                    lsks_lb_journal.update();
                    lsks_lb_journalar.batchnum = 'AUTO';
                    lsks_lb_journalar.update();
                }
                next lsks_lb_journalar;
            }

            select firstonly lsks_lb_journalarerrors where lsks_lb_journalarerrors.journalid == lsks_lb_journal.journalid && lsks_lb_journalarerrors.batchnum == lsks_lb_journal.batchnum;
            if(!lsks_lb_journalarerrors)
            {
                select firstOnly lsks_lb_journalar where lsks_lb_journalar.JournalId == lsks_lb_journal.JournalID && lsks_lb_journalar.batchnum == lsks_lb_journal.batchnum;
                if(!lsks_lb_journalar)
                {
                    lsks_lb_journal.delete();
                }
            }
            next lsks_lb_journal;
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate file
    /// </summary>
    /// <param name = "_filename">_filename</param>
    /// <param name = "_filedate">_filedate</param>
    /// <returns>boolean</returns>
    public boolean ValidateFile(str _filename, date _filedate)
    {
        boolean ret;
        JournalID JID;
        SKS_LB_ImportValidation ImportValidation;
        str filepath;
        str filename;
        ;
        fileName = System.IO.Path::GetFileName(_Filename);
        filepath = System.IO.Path::GetDirectoryName(_Filename);
        filepath += '\\';
        ImportValidation = new SKS_LB_ImportValidation();

        JID = ImportValidation.LBBatNbrFromFileNameDate(Filename, _filedate, filepath);
        if ( strlen(JID) != 0)
        {

            info(strfmt("@SKS461",JID),"@SKS352");
            ret = true;
        }
        else
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callProcess</Name>
				<Source><![CDATA[
    private static void callProcess(SKS_LB_ImportFiles _SKS_LB_ImportFiles, CurrencyCode _currencyCode, TransDate _currencyDate, ExchRate _exchangeRate, boolean _serverSide)
    {
        SKS_LB_AutoProcessImport cls_SKS_LB_AutoProcessImport = new SKS_LB_AutoProcessImport();

        cls_SKS_LB_AutoProcessImport.SetCurrencyCode(_currencyCode);
        cls_SKS_LB_AutoProcessImport.SetCurrencyDate(_currencyDate);
        cls_SKS_LB_AutoProcessImport.SetExchangeRate(_exchangeRate);
        cls_SKS_LB_AutoProcessImport.initReaderInfo(Global::CLRSystemDateTime2UtcDateTime(_SKS_LB_ImportFiles.FileDate), _SKS_LB_ImportFiles.FormatID, _SKS_LB_ImportFiles.Filename, _SKS_LB_ImportFiles.BankAcct);
        cls_SKS_LB_AutoProcessImport.filereader(false, _serverSide);

    }

]]></Source>
			</Method>
			<Method>
				<Name>callProcessClient</Name>
				<Source><![CDATA[
    /// <summary>
    /// Call process client
    /// </summary>
    /// <param name = "_SKS_LB_ImportFiles">_SKS_LB_ImportFiles</param>
    /// <param name = "_currencyCode">_currencyCode</param>
    /// <param name = "_currencyDate">_currencyDate</param>
    /// <param name = "_exchangeRate">_exchangeRate</param>
    /// <param name = "_serverSide">_serverSide</param>
    public static client void callProcessClient(SKS_LB_ImportFiles _SKS_LB_ImportFiles, CurrencyCode _currencyCode, TransDate _currencyDate, ExchRate _exchangeRate, boolean _serverSide)
    {
        SKS_LB_AutoProcessImport::callProcess(_SKS_LB_ImportFiles, _currencyCode, _currencyDate, _exchangeRate, _serverSide);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callProcessServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coll process server
    /// </summary>
    /// <param name = "_SKS_LB_ImportFiles">_SKS_LB_ImportFiles</param>
    /// <param name = "_currencyCode">_currencyCode</param>
    /// <param name = "_currencyDate">_currencyDate</param>
    /// <param name = "_exchangeRate">_exchangeRate</param>
    /// <param name = "_serverSide">_serverSide</param>
    public static server void callProcessServer(SKS_LB_ImportFiles _SKS_LB_ImportFiles, CurrencyCode _currencyCode, TransDate _currencyDate, ExchRate _exchangeRate, boolean _serverSide)
    {
        SKS_LB_AutoProcessImport::callProcess(_SKS_LB_ImportFiles, _currencyCode, _currencyDate, _exchangeRate, _serverSide);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePreocessingExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// this method allows writing code before temp table processing
    /// </summary>
    /// <param name = "rec_TmpSKS_LB_Importing">rec_TmpSKS_LB_Importing</param>
    public void prePreocessingExtension(TmpSKS_LB_Importing     rec_TmpSKS_LB_Importing)
    {        
    }
    // </15304>

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>