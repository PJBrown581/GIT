<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_NATWEST_XML_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class SKS_EFT_Format_UK_NATWEST_XML_AR
/// </summary>
class SKS_EFT_Format_UK_NATWEST_XML_AR extends SKS_EFT_Format_ISO_20022_00800102
{
    #define.FormatVersion('20220802')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.15: CtgyPurp
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtTpInf;
        nodePmtTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.8: SvcLvl
        this.node_PmtInf_PmtTpInf_SvcLvl(nodePmtTpInf);
    
        //          2.11: LclInstrm
        this.node_PmtInf_PmtTpInf_LclInstrm(nodePmtTpInf);
    
        //              SeqTp
        this.node_PmtInf_PmtTpInf_SeqTp(nodePmtTpInf);
    
        //Remove if no children
        if(!nodePmtTpInf.hasChildNodes())
        {
            _nodePmtInf.removeChild(nodePmtTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
    
       
        //          2.8: SvcLvl
        nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
        //              2.9: Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', 'SEPA');
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        str btchbkg;

        btchbkg = SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(strUpr(btchbkg) == 'N')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
        }
        else if(strUpr(btchbkg) == 'Y')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str value;
                
        if(msks_EFT_FileDetail_Mandate.MandateScheme == CustMandateScheme::CORE)
        {
            value = 'CORE';
        }
        else
        {
            value = 'B2B';
        }

        if(value)
        {
            //              2.11: LclInstrm
            nodeLclInstrm = _nodePmtTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SeqTp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_SeqTp
    /// </summary>
    /// <param name = "_nodePmtTpInf">_nodePmtTpInf</param>
    protected void node_PmtInf_PmtTpInf_SeqTp(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: SeqTp
        //------------------------------------------------------------------------------------------------------
        str value;
        //              SeqTp
        if(msks_EFT_FileDetail_Mandate.MandatePaymentType == CustMandatePaymentType::Recurring)
        {
            value = 'RCUR';
        }
        else
        {
            value = 'OOFF';
        }
    
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtTpInf, 'SeqTp', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_Cdtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.15: Cdtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //      2.15: Cdtr
        nodeCdtr = nodePmtInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //          Nm
        this.node_PmtInf_Cdtr_Nm(nodeCdtr);
    
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_Nm
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_CdtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.17: CdtrAgt
        //               FinInstnId
        //                     CmbndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeOther;
    
        str swift;
        
        swift = mSKS_EFT_FileDetail.BankBankSwiftNo;
        
       
        //      2.21: CdtrAgt
        nodeCdtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //          FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(swift)
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 11);
        }
        else
        {
            nodeOther = nodeFinInstnId.appendChild(xmlDoc.createElement('Other'));
    
            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', 'NOTPROVIDED');
        }
            
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      2.24 ChrgBr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'SLEV');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_PmtId(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.29: PmtId
        //              2.31: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtId;
        

    
        //          2.28: PmtId
        nodePmtId = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('PmtId'));

        //              2.29  InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
        
    
        //              2.31: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf
    /// </summary>
    protected void node_DrctDbtTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.28: DrctDbtTxInf
        //          2.29: PmtId
        //          2.32: PmtTpInf
        //          2.44: InstdAmt
        //          2.45: ChrgBr
        //          2.70: DbtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDrctDbtTxInf;
    
        //      2.28: DrctDbtTxInf
        nodeDrctDbtTxInf = nodePmtInf.appendChild(xmlDoc.createElement('DrctDbtTxInf'));
    
        //          2.29: PmtId
        this.node_DrctDbtTxInf_PmtId(nodeDrctDbtTxInf);
    
        //          2.32 PmtTpInf
        this.node_DrctDbtTxInf_PmtTpInf(nodeDrctDbtTxInf);
    
        //          2.44: InstdAmt
        this.node_DrctDbtTxInf_Amt(nodeDrctDbtTxInf);
    
        //          DrctDbtTx
        this.node_DrctDbtTxInf_DrctDbtTx(nodeDrctDbtTxInf);
    
        //          2.45: ChrgBr
        this.node_DrctDbtTxInf_ChrgBr(nodeDrctDbtTxInf);
    
        //          2.70: DbtrAgt
        this.node_DrctDbtTxInf_DbtrAgt(nodeDrctDbtTxInf);
    
        //          2.72: Dbtr
        this.node_DrctDbtTxInf_Dbtr(nodeDrctDbtTxInf);
    
        //          2.73: DbtrAcct
        this.node_DrctDbtTxInf_DbtrAcct(nodeDrctDbtTxInf);
    
        //          2.75: InstrForCdtrAgt
        this.node_DrctDbtTxInf_InstrForCdtrAgt(nodeDrctDbtTxInf);
    
        //          2.88: RmtInf
        this.node_DrctDbtTxInf_RmtInf(nodeDrctDbtTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DrctDbtTx</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_DrctDbtTx
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">_nodeDrctDbtTxInf</param>
    protected void node_DrctDbtTxInf_DrctDbtTx(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          DrctDbtTx
        //              MndtRltdInf
        //                  MndtId
        //                  DtOfSgntr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDrctDbtTx;
        XmlElement nodeMndtRltdInf;
        XmlElement nodeAmdmntInfDtls;
        XmlElement nodeOrgnlCdtrSchmeId;
        XmlElement nodeId;
        XmlElement nodePrvtId;
        XmlElement nodeOthr;
        str CreditorSchemeId,MandateNmAmmended;

        LogisticsPostalAddress  postalAddress;
        LogisticsLocation       lLogisticsLocation;

        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Previous Mandate Address');

        lLogisticsLocation = LogisticsLocation::find(postalAddress.Location);    
    
        msks_EFT_FileDetail_Mandate = SKS_EFT_FileDetail_Mandate::find(mSKS_EFT_FileDetail.RecId);

        //          DrctDbtTx
        nodeDrctDbtTx = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DrctDbtTx'));

        if(msks_EFT_FileDetail_Mandate.MandateReference)
        {
            //              MndtRltdInf
            nodeMndtRltdInf = nodeDrctDbtTx.appendChild(xmlDoc.createElement('MndtRltdInf'));
    
            //                  MndtId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMndtRltdInf, 'MndtId', msks_EFT_FileDetail_Mandate.MandateReference);
    
            //                  DtOfSgntr
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMndtRltdInf, 'DtOfSgntr', SKS_PP_StringFormats::strDateYYYYMMDD(msks_EFT_FileDetail_Mandate.SignatureDate, DateSeparator::Hyphen));

            MandateNmAmmended =this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MandateNm/AddrAmended', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
            CreditorSchemeId  =this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CreditorSchemeId', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));

            if(strUpr(MandateNmAmmended) == 'Y')
            {
                //                  AmdmntInd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMndtRltdInf, 'AmdmntInd', 'true');

                //              AmdmntInfDtls
                nodeAmdmntInfDtls = nodeMndtRltdInf.appendChild(xmlDoc.createElement('AmdmntInfDtls'));

                //                  OrgnlCdtrSchmeId
                nodeOrgnlCdtrSchmeId = nodeAmdmntInfDtls.appendChild(xmlDoc.createElement('OrgnlCdtrSchmeId'));

                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgnlCdtrSchmeId, 'Nm', this.CharacterReplacement(lLogisticsLocation.Description), 70, false);


                //              Id
                nodeId = nodeOrgnlCdtrSchmeId.appendChild(xmlDoc.createElement('Id'));
    
                //                  PrvtId
                nodePrvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
    
                //                      Othr
                nodeOthr = nodePrvtId.appendChild(xmlDoc.createElement('Othr'));
    
                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', this.CharacterReplacement(CreditorSchemeId), 35, false);
            }
    

        }
        this.node_PmtInf_CdtrSchmeId(nodeDrctDbtTx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrSchmeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_CdtrSchmeId
    /// </summary>
    /// <param name = "_nodeDrctDbtTx">_nodeDrctDbtTx</param>
    protected void node_PmtInf_CdtrSchmeId(XmlElement _nodeDrctDbtTx)
    {
        //------------------------------------------------------------------------------------------------------
        //      CdtrSchmeId
        //          Id
        //              PrvtId
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
        
        XmlElement nodeCdtrSchmeId;
        XmlElement nodeId;
        XmlElement nodePrvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str directDebitId;
       
    
        directDebitId   =   msks_EFT_FileDetail_Mandate.DirectDebitId;

        if(directDebitId)
        {
            //          CdtrSchmeId
            nodeCdtrSchmeId = _nodeDrctDbtTx.appendChild(xmlDoc.createElement('CdtrSchmeId'));

            //              Id
            nodeId = nodeCdtrSchmeId.appendChild(xmlDoc.createElement('Id'));
    
            //                  PrvtId
            nodePrvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
    
            //                      Othr
            nodeOthr = nodePrvtId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', directDebitId, 35, false);

            //                          SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
            
            //                              Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', 'SEPA');
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_Dbtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_DrctDbtTxInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          Dbtr
        //              PstlAdr
        //------------------------------------------------------------------------------------------------------
        LogisticsPostalAddress  postalAddress;
    
    
        if(mSKS_EFT_FileDetail.AccountNum && mSKS_EFT_FileDetail.AccountType == LedgerJournalACType::Cust)
        {
            postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct Debit');
    
            if(postalAddress)
            {
                this.node_PstlAdr(_nodeDbtr, postalAddress.CountryRegionId, postalAddress.Street, postalAddress.ZipCode, postalAddress.City, 70, '', postalAddress.State,true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_Dbtr
    /// </summary>
    /// <param name = "_node_DrctDbtTxInf">_node_DrctDbtTxInf</param>
    protected void node_DrctDbtTxInf_Dbtr(XmlElement _node_DrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //          2.72: Dbtr
        nodeDbtr = _node_DrctDbtTxInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //              Nm
        this.node_DrctDbtTxInf_Dbtr_Nm(nodeDbtr);
    
        //                  PstlAdr
        this.node_DrctDbtTxInf_Dbtr_PstlAdr(nodeDbtr);

        //                      Id
        this.node_DrctDbtTxInf_Dbtr_Id(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_Dbtr_Id
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_DrctDbtTxInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;      
        str        swift;

        swift = mSKS_EFT_FileDetail.DepSwiftNo;

        
        if(swift)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                     BICOrBEI
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'BICOrBEI', swift);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_RmtInf(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeCdtrRefInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        XmlElement nodeStrd;
        str invDetailsString;
        boolean firstRec = true;
    
        while select invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //              RmtInf
                nodeRmtInf = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }
            invDetailsString = this.getInvoiceNbrs();
        }
            
       
        if(invDetailsString)
        {
            //              2.9: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
            nodeCdtrRefInf=nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
            nodeTp=nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
            nodeCdOrPrtry=nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', invDetailsString, 14);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        select InvoiceNumber from invSKS_EFT_FileDetail
        where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
           && invSKS_EFT_FileDetail.InvoiceNumber != '';

        while(invSKS_EFT_FileDetail)
        {
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);

            next invSKS_EFT_FileDetail;

            if(invSKS_EFT_FileDetail)
            {
                sb.Append(', ');
            }
        }

        return this.CharacterReplacement(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment

        select * from mSKS_EFT_FileDetail
            join msks_EFT_FileDetail_Mandate
            order by msks_EFT_FileDetail_Mandate.MandateScheme,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                msks_EFT_FileDetail_Mandate.RefRecId == mSKS_EFT_FileDetail.RecId;
                
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>