<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_APR_RemitAttachDP_DelegateHandler_IHB</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_APR_RemitAttachDP_DelegateHandler_IHB
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SKS_APR_RemitAttachDP_getIHBRemitValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// SIGNATURE IS LOCKED BY CUSTOMIZATION
    /// Delegate handler method 
    /// </summary>
    /// <param name="remitAttachReportTmp1"></param>
    /// <param name="sks_eft_FileDetail"></param>
    /// <param name="_result"></param>
    [SubscribesTo(classStr(SKS_APR_RemitAttachDP), delegateStr(SKS_APR_RemitAttachDP, getIHBRemitValues))]
    public static void SKS_APR_RemitAttachDP_getIHBRemitValues(SKS_APR_RemitAttachReportTmp remitAttachReportTmp, sks_eft_FileDetail sks_eft_FileDetail, EventHandlerResult _result)
    {
        CompanyInfo                 companyInfo;
        LogisticsPostalAddress      companyAPPostalAddress;
        SKS_PP_Bank                 sks_PP_Bank;
        
        sks_PP_Bank = SKS_PP_Bank::find(sks_eft_FileDetail.EFTAP_IHBBankAccount);
        
        if (sks_PP_Bank.SKS_IHBInhouseBank && sks_PP_Bank.IHB_Remit)
        {
            remitAttachReportTmp.ContactName        = sks_PP_Bank.APContactName;
            remitAttachReportTmp.ContactPhone       = sks_PP_Bank.APContactPhone;
            remitAttachReportTmp.ContactEmail       = sks_PP_Bank.APContactEmail;
        
            changecompany(sks_PP_Bank.SKS_IHBLinkedinhousebankcompany)
            {
                companyInfo = CompanyInfo::find();
                companyAPPostalAddress = DirParty::findPostalAddressByRole(companyInfo.RecId, LogisticsLocationRoleType::None);
                remitAttachReportTmp.CompanyAddress   = companyAPPostalAddress.RecId ? companyAPPostalAddress.Address
                                                                                    : companyInfo.primaryAddress();
                remitAttachReportTmp.CompanyAddress   = strReplace(remitAttachReportTmp.CompanyAddress, '\n', '\n\n');
                remitAttachReportTmp.CompanyName      = companyInfo.name;
                remitAttachReportTmp.CompanyLogo      = CompanyImage::findByRecord(companyInfo).Image;
                SKS_APR_RemitAttachDP_DelegateHandler_IHB  ihb = new SKS_APR_RemitAttachDP_DelegateHandler_IHB();
                remitAttachReportTmp.PhoneFooter      = con2Str(ihb.getPhoneAndFax(companyInfo.RecId,LogisticsElectronicAddressMethodType::Phone,"@SYS71417"));
                remitAttachReportTmp.FaxFooter        = con2Str(ihb.getPhoneAndFax(companyInfo.RecId,LogisticsElectronicAddressMethodType::Fax,"@SYS71417"));
                remitAttachReportTmp.VatNumber        = companyInfo.CoRegNum;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhoneAndFax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets phone and fax for directdebit role type.
    /// </summary>
    public  container getPhoneAndFax(
            DirPartyRecId _partyRecId,
            LogisticsElectronicAddressMethodType _type = LogisticsElectronicAddressMethodType::Phone,
            LogisticsLocationRoleName _role = '')
    {
        DirPartyLocation partyLocation;
        LogisticsLocationRole locationRole;
        LogisticsElectronicAddressRole addressRole;
        LogisticsElectronicAddress address;
        container electronicAddresses;

        if(!_role)
        {
            return electronicAddresses;
        }

        select firstonly Locator
            from address
            where
                address.Type == _type &&
                address.Locator != ''
            exists join locationRole
                where
                     locationRole.Name == _role
            exists join addressRole
                where
                    addressRole.ElectronicAddress == address.RecId &&
                    addressRole.LocationRole == locationRole.RecId
            exists join partyLocation
                where
                    partyLocation.Location == address.Location &&
            partyLocation.Party == _partyRecId;
       
        electronicAddresses += address.Locator;
        
        return electronicAddresses;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>