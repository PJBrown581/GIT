<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_SVB_MT103</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_SVB_MT103 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_SVB_MT103 extends SKS_EFT_Format
{
    #define.FormatVersion('20220808')
    int         mCount;
    AmountMST   mTotal;



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_header();
    
        while(mSKS_EFT_FileDetail)
        {
           
    
            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            this.rec_Fields();
    
            next mSKS_EFT_FileDetail;
        }
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Beneficiary</Name>
				<Source><![CDATA[
    private void rec_Beneficiary()
    {
        //------------------------------------------------------------------
        //  :59:Beneficiary Account
        //  Beneficiary Name/Address
        //------------------------------------------------------------------
        str Address;
    
        //  :59:Beneficiary Account
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            this.fileWrite(':59:/' + subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 34));
        }
        else
        {
            this.fileWrite(':59:/' + subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 34));
        }
    
        //  Beneficiary Name/Address
        if(mRemittanceName != '')
        {
            this.fileWrite(subStr(mRemittanceName, 1, 35));
        }
    
        Address = mRemittanceAdrLine1;
    
        if(Address != '' && mRemittanceAdrLine2 != '')
        {
            Address += ' ';
        }
    
        Address += mRemittanceAdrLine2;
    
        if(Address != '')
        {
            this.fileWrite(subStr(Address, 1, 35));
        }
    
        Address = mRemittanceCity;
    
        if(Address != '' && (mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != ''))
        {
            Address += ', ';
        }
    
        Address += mRemittanceState;
    
        if(Address != '' && (mRemittanceZipCode != '' || mRemittanceCountryRegionId != ''))
        {
            Address += ' ';
        }
    
        Address += mRemittanceZipCode;
    
        if(Address != '' && mRemittanceCountryRegionId != '')
        {
            Address += ' ';
        }
    
        Address += mRemittanceCountryRegionId;
    
        if(Address != '')
        {
            this.fileWrite(subStr(Address, 1, 35));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BeneficiaryBank</Name>
				<Source><![CDATA[
    private void rec_BeneficiaryBank()
    {
        //------------------------------------------------------------------
        //  :57D:Beneficiary Bank ABA/BIC
        //  Beneficiary Bank Name/Address
        //------------------------------------------------------------------
        str Address;
    
        //  :57D:Beneficiary Bank ABA/BIC
        if(mSKS_EFT_FileDetail.DepSwiftNo != '')
        {
            this.fileWrite('::57A:' + subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11));
        }
        else if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            this.fileWrite(':57D://FW' + subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 11));

            //  Beneficiary Bank Name/Address
            if(mSKS_EFT_FileDetail_BenBank.BenBankName!= '')
            {
                this.fileWrite(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 1, 35));
            }
    
            Address = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr);
    
            if(Address != '')
            {
                this.fileWrite(subStr(Address, 1, 35));
            }
    
            Address = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity);
    
            if(Address != '' && mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId != '')
            {
                Address += ', ';
            }
    
            Address += this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
    
            if(Address != '')
            {
                this.fileWrite(subStr(Address, 1, 35));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Fields</Name>
				<Source><![CDATA[
    private void rec_Fields()
    {
        //------------------------------------------------------------------
        //  :20:Sender's reference Number
        //  :32A:Value Date/Msg Date/Currency/Amount
        //  :36:Exchange Rate
        //  :50:Ordering Party Account (SVB Account to be Debited)
        //  Ordering Party Name/Address (SVB Account and Address)
        //  :54D:Intermediary Party ID ("For Further Credit" Account Number)
        //  Name and Address ("For Further Credit" Account Number)
        //  :57D:Beneficiary Bank ABA/BIC
        //  Beneficiary Bank Name/Address
        //  :59:Beneficiary Account
        //  Beneficiary Name/Address
        //  :70:Remittance Information
        //  :71A:Details of Charges
        //  :72:Sender to Receiver Information
        //  :END:
        //--------------------------------------------------------------------
        str Amount;
        mCount++;
    
    
        //  :20:Sender's reference Number
        this.fileWrite(':20:' + subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16));
    
        //  :32A:Value Date/Msg Date/Currency/Amount
        mTotal += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        Amount = num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 2, 0);
    
        this.fileWrite(':32A:' + SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate)
                               + SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
                               + mSKS_EFT_FileDetail.PaymentCurrencyCode
                               + subStr(Amount, strLen(Amount), -11));
    
        //  :36:Exchange Rate
        this.fileWrite(':36:1.000000A');
    
        //  :50:Ordering Party Account (SVB Account to be Debited)
        //  Ordering Party Name/Address (SVB Account and Address)
        this.rec_Ordering();
    
        //  :54D:Intermediary Party ID ("For Further Credit" Account Number)
        //  Name and Address ("For Further Credit" Account Number)
        this.rec_Intermediary();

        //  :56A/56D: Intermediary Institution
        this.rec_IntermediaryInstitution();
    
        //  :57D:Beneficiary Bank ABA/BIC
        //  Beneficiary Bank Name/Address
        this.rec_BeneficiaryBank();
    
        //  :59:Beneficiary Account
        //  Beneficiary Name/Address
        this.rec_Beneficiary();
    
        //  :70:Remittance Information
        this.rec_RemitInfo();
    
        //  :71A:Details of Charges
        //Optional: Not used
    
        //  :72:Sender to Receiver Information
        this.rec_Info();
    
        //  :END:
        this.fileWrite(':END:');
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    private void rec_Header()
    {
        //------------------------------------------------------
        //Record ID
        //Date of Batch
        //------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //Record ID
        sb.Append('%BEGIN');
    
        //Date of Batch
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Info</Name>
				<Source><![CDATA[
    private void rec_Info()
    {
        //------------------------------------------------------
        //  :72:Sender to Receiver Information
        //------------------------------------------------------
        if(msKS_EFT_FileDetail_Instructions.PmtInstText1 != '' ||
           msKS_EFT_FileDetail_Instructions.PmtInstText2 != '' ||
           msKS_EFT_FileDetail_Instructions.PmtInstText3 != '' ||
           msKS_EFT_FileDetail_Instructions.PmtInstText4 != '')
        {
            this.fileWrite(':72:' + this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText1));
    
            if(msKS_EFT_FileDetail_Instructions.PmtInstText2 != '')
            {
                this.fileWrite(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText2));
            }
    
            if(msKS_EFT_FileDetail_Instructions.PmtInstText3 != '')
            {
                this.fileWrite(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText3));
            }
    
            if(msKS_EFT_FileDetail_Instructions.PmtInstText4 != '')
            {
                this.fileWrite(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText4));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Intermediary</Name>
				<Source><![CDATA[
    private void rec_Intermediary()
    {
        //--------------------------------------------------------------------
        //  :54D:Intermediary Party ID ("For Further Credit" Account Number)
        //  Name and Address ("For Further Credit")
        //--------------------------------------------------------------------
        str Address;
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankAcct != '')
        {
            //  :54D:Intermediary Party ID ("For Further Credit" Account Number)
            this.fileWrite(':54D:/' + subStr(mSKS_EFT_FileDetail_Intermediary.IntBankAcct,1,34));
    
            //  Name and Address ("For Further Credit")
            if(mSKS_EFT_FileDetail_Intermediary.IntBankName != '')
            {
                this.fileWrite(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 1, 34));
            }
    
            Address = this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankAddr);
    
            if(Address != '' && mSKS_EFT_FileDetail_Intermediary.IntBankAddr2 != '')
            {
                Address += ' ';
            }
    
            Address += this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankAddr2);
    
            if(Address != '' && (mSKS_EFT_FileDetail_Intermediary.IntBankCity != '' || mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId != ''))
            {
                this.fileWrite(subStr(Address, 1, 34));
            }
    
            Address = this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankCity );
    
            if(Address != '' && mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId != '')
            {
                Address += ', ';
            }
    
            Address += this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId);
    
            if(Address != '')
            {
                this.fileWrite(subStr(Address, 1, 34));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IntermediaryInstitution</Name>
				<Source><![CDATA[
    private void  rec_IntermediaryInstitution()
    {
        //--------------------------------------------------------------------
        //  :56A/56D:Intermediary Institution
        //--------------------------------------------------------------------
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' ||  mSKS_EFT_FileDetail_Intermediary.IntBankId)      //SKS#DevOps:17265
        {
            if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift)
            {
                this.fileWrite(':56A:' + subStr(mSKS_EFT_FileDetail_Intermediary.IntBankSwift,1,34));
            }
            else if(mSKS_EFT_FileDetail_Intermediary.IntBankId)
            {
                this.fileWrite(':56D://FW' + subStr(mSKS_EFT_FileDetail_Intermediary.IntBankId,1,9));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Ordering</Name>
				<Source><![CDATA[
    private void rec_Ordering()
    {
        //------------------------------------------------------------------
        //  :50:Ordering Party Account (SVB Account to be Debited)
        //  Ordering Party Name/Address (SVB Account and Address)
        //------------------------------------------------------------------
        str Address;
    
        //  :50:Ordering Party Account (SVB Account to be Debited)
        this.fileWrite(':50:/' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 11));
    
        //  Ordering Party Name/Address (SVB Account and Address)
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName != '')
        {
            this.fileWrite(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 1, 35));
        }
    
        Address = this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr);
    
        if(Address != '' && mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
        {
            Address += ' ';
        }
    
        Address += this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2);
    
        if(Address != '')
        {
            this.fileWrite(subStr(Address, 1, 35));
        }
    
        Address = this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
    
        if(Address != '' && (mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != ''))
        {
            Address += ', ';
        }
    
        Address += this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState);
    
        if(Address != '' && (mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != ''))
        {
            Address += ' ';
        }
    
        Address += this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode);
    
        if(Address != '' && mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != '')
        {
            Address += ' ';
        }
    
        Address += this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);
    
        if(Address != '')
        {
            this.fileWrite(subStr(Address, 1, 35));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RemitInfo</Name>
				<Source><![CDATA[
    private void rec_RemitInfo()
    {
        str invNum;
        int stringlen, spaceLoc;
    
        invNum = this.getInvoiceNbrs();
    
        if(invNum != '')
        {
            invNum = 'INVOICE ' + invNum;
    
            stringlen = strLen(invNum);
    
            if (stringlen > 35)
            {
                spaceLoc = strScan(invNum, ' ', 36, -36);
    
                if (spaceLoc > 0)
                {
                    this.fileWrite(':70:' + subStr(invNum, 1, spaceLoc - 1));
                }
                else
                {
                    this.fileWrite(subStr(invNum, 1, 35));
                    spaceLoc = 35;
                }
    
                if (spaceLoc != stringlen)
                {
                    invNum = subStr(invNum, spaceLoc + 1, stringlen);
                }
                else
                {
                    invNum = '';
                }
    
                stringlen = strLen(invNum);
    
                if (stringlen > 35)
                {
                    spaceLoc = strScan(invNum, ' ', 36, -36);
    
                    if (spaceLoc > 0)
                    {
                        this.fileWrite(subStr(invNum, 1, spaceLoc - 1));
                    }
                    else
                    {
                        this.fileWrite(subStr(invNum, 1, 35));
                        spaceLoc = 35;
                    }
    
                    if (spaceLoc != stringlen)
                    {
                        invNum = subStr(invNum, spaceLoc + 1, stringlen);
                    }
                    else
                    {
                        invNum = '';
                    }
    
                    stringlen = strLen(invNum);
    
                    if (stringlen > 35)
                    {
                        spaceLoc = strScan(invNum, ' ', 36, -36);
    
                        if (spaceLoc > 0)
                        {
                            this.fileWrite(subStr(invNum, 1, spaceLoc - 1));
                        }
                        else
                        {
                            this.fileWrite(subStr(invNum, 1, 35));
                        }
                    }
                    else if(stringlen != 0)
                    {
                        this.fileWrite(subStr(invNum, 1, 35));
                    }
                }
                else if(stringlen != 0)
                {
                    this.fileWrite(subStr(invNum, 1, 35));
                }
            }
            else
            {
                this.fileWrite(':70:' + subStr(invNum, 1, 35));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)//DevOps19618
    {
        mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
        mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
        mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
        mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
        mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
        mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    private void rec_Trailer()
    {
        //------------------------------------------------------
        //Record ID
        //Total Count
        //Total amount
        //------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str totalAmount;
    
        //Record ID
        sb.Append('%END');
    
        //Total Count
        sb.Append(SKS_PP_StringFormats::strFill(4, int2str(mCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //Total amount
        totalAmount = num2str(-1 * mTotal,0,2,1,0);
        sb.Append(subStr(totalAmount, strLen(totalAmount), -15));
    
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany, 
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId== mSKS_EFT_FileDetail_BankAccount.RefRecId ;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>