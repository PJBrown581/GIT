<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_Delete</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_Delete
/// </summary>
class SKS_EFT_FormatMetaData_Delete
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteMetadataContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert datacontract values into a container and send to delete method
    /// </summary>
    /// <param name = "_deleteList">
    /// list of formats to be deleted
    /// </param>
    public void deleteMetadataContainer(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDelete> _deleteList)
    {
        container   deleteList;
        int                                numrecords, counter;
        SKG_File.Models.SKGFormatMetadataDelete deleteRecord;
       
        numrecords = _deleteList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {
            deleteRecord = _deleteList.get_item(Counter);
            deleteList = ConIns(deleteList,conLen(deleteList)+1,[deleteRecord.FormatGroup, deleteRecord.FormatId, deleteRecord.DetailType, deleteRecord.DetailsKey1, deleteRecord.DetailsKey2, deleteRecord.DetailsKey3]);
        }

        this.deleteMetaData(deleteList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMetaData</Name>
				<Source><![CDATA[
    public void deleteMetaData (container _deleteList)
    {
        int i;
        str formatGroup;
        str formatID;
        str DetailType;
        str detailskey1, detailskey2, detailskey3;
        container formatDelete;

        for (i = 1 ; i <= conLen(_deleteList) ; i++)
        {
            formatDelete = conPeek(_deleteList,i);

            formatGroup = conpeek(formatDelete, 1);
            formatID = conpeek(formatDelete, 2);
            DetailType = conpeek(formatDelete, 3);
            detailskey1 = conpeek(formatDelete, 4);
            detailskey2 = conpeek(formatDelete, 5);
            detailskey3 = conpeek(formatDelete, 6);

            
            if(!formatGroup && !formatID && DetailType)
            {
                switch (DetailType)
                {
                    case ('DVRule'):
                        this.DeleteDataValidationRule(detailskey1);
                        break;

                    case ('DVDetail'):
                        this.DeleteDataValidationDetail(detailskey1,detailskey2,detailskey3);
                        break;
                }
            }

            if (formatGroup && !formatID && DetailType)
            {
                switch (DetailType)
                {
                    case ('CodeLookup'):
                        this.DeleteCodeLookup(formatGroup,detailskey1);
                        break;

                    case ('CodeLookupValues'):
                        this.DeleteCodeLookupValues(formatGroup,detailskey1,detailskey2);
                        break;
                    case ('BankCodeLookup'):
                        this.DeleteBankCodeLookup(formatGroup,detailskey1);
                        break;

                    case ('BankCodeLookupValues'):
                        this.DeleteBankCodeLookupValues(formatGroup,detailskey1,detailskey2);
                        break;
                }
            }

            if (formatGroup && formatID) 
            {
                if (DetailType)
                {
                    switch (DetailType)
                    {
                        case ('ControlFormat'):
                            this.DeleteControlFormat(formatID, detailskey1);
                            break;

                        case ('formatLookup'):
                            this.DeleteFormatLookup(formatGroup, formatID, detailskey1, detailskey2);
                            break;

                        case ('PaymSpec'):
                            this.DeletePaymSpecs(formatID, detailskey1);
                            break;

                        case ('PaymSpecFields'):
                            this.DeletePaymSpecFields(formatID, detailskey1, detailskey2);
                            break;

                        case ('FormatValidations'):
                            this.DeleteFormatValidations(formatGroup, formatID, detailskey1,detailskey2,detailskey3);
                            break;

                        case ('FormatNotes'):
                            this.DeleteControlFormat(formatID, detailskey1);
                            break;

                        case ('FormatSpecFields'):
                            this.DeleteFormatSpecFields(formatID, detailskey1);
                            break;
                    }
                }
                else
                {
                    this.DeleteFormatHeader(formatID);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFormatHeader</Name>
				<Source><![CDATA[
    private void DeleteFormatHeader(str _formatID)
    {
        SKS_EFT_FileFormat  fileFormat;

        delete_from fileFormat where fileFormat.FormatId == _formatID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteCodeLookup</Name>
				<Source><![CDATA[
    private void DeleteCodeLookup(str _formatGroup,str _CodeId)
    {
        SKS_EB_CodeLookup codeLookup;

        if (_CodeId == '*')     //Wild card to delete all lookup for format group
        {
            delete_from codeLookup where codeLookup.FormatGroup == _formatGroup;
        }
        else
        {
            delete_from codeLookup where codeLookup.codeid == _CodeId && codeLookup.FormatGroup == _formatGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteCodeLookupValues</Name>
				<Source><![CDATA[
    private void DeleteCodeLookupValues(str _formatGroup,str _CodeId,str _displayvalue)
    {
        SKS_EB_CODELOOKUPVALUES  codeLookupValues;

        if (_CodeId == '*')     //Wild card to delete all lookup values for format group
        {
            delete_from codeLookupValues
                where codeLookupValues.FormatGroup == _formatGroup;
        }
        else
        {
            delete_from codeLookupValues 
                where codeLookupValues.codeid == _CodeId
                   && codeLookupValues.DisplayValue == _displayvalue
                   && codeLookupValues.FormatGroup == _formatGroup;
        }                                              
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteBankCodeLookup</Name>
				<Source><![CDATA[
    private void DeleteBankCodeLookup(str _formatGroup,str _CodeId)
    {
        SKS_EB_BankCodeLookup bankcodeLookup;

        if (_CodeId == '*')     //Wild card to delete all lookup for format group
        {
            delete_from bankcodeLookup where bankcodeLookup.FormatGroup == _formatGroup;
        }
        else
        {
            delete_from bankcodeLookup where bankcodeLookup.codeid == _CodeId && bankcodeLookup.FormatGroup == _formatGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteBankCodeLookupValues</Name>
				<Source><![CDATA[
    private void DeleteBankCodeLookupValues(str _formatGroup,str _CodeId,str _displayvalue)
    {
        SKS_EB_BankCodeLookupValues  bankcodeLookupValues;

        if (_CodeId == '*')     //Wild card to delete all lookup values for format group
        {
            delete_from bankcodeLookupValues
                where bankcodeLookupValues.FormatGroup == _formatGroup;
        }
        else
        {
            delete_from bankcodeLookupValues
                where bankcodeLookupValues.codeid == _CodeId
                   && bankcodeLookupValues.DisplayValue == _displayvalue
                   && bankcodeLookupValues.FormatGroup == _formatGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteControlFormat</Name>
				<Source><![CDATA[
    private void DeleteControlFormat(str _formatID,str _EFTControlFileFormatID)
    {
        SKS_EFT_ControlFiles ControlFiles;

        delete_from ControlFiles where ControlFiles.FileFormatID == _formatID && ControlFiles.EFTControlFileFormatID == _EFTControlFileFormatID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFormatLookup</Name>
				<Source><![CDATA[
    private void DeleteFormatLookup(str _formatGroup, str _formatID,str _fieldValue, str _lookupType)
    {
        SKS_EFT_FileFormat          fileFormat;

        if(_formatID == '*')
        {
            while select FormatId from fileFormat where fileFormat.FormatGroup == _formatGroup
            {
                this.DeleteFormatLookup_byFormat(fileFormat.FormatId, _lookupType, _fieldValue);
            }
        }
        else
        {
            this.DeleteFormatLookup_byFormat(_formatID, _lookupType, _fieldValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFormatLookup_byFormat</Name>
				<Source><![CDATA[
    private void DeleteFormatLookup_byFormat(str _formatId, str _lookupType, str _fieldValue)
    {
        SKS_EFT_FileFormatLookups   fileFormatLookups;
        if (_lookupType == '*')
        {
            if (_fieldValue == '*')
            {
                delete_from fileFormatLookups where fileFormatLookups.FormatId == _formatId;
            }
            else
            {
                delete_from fileFormatLookups where fileFormatLookups.FieldValue == _fieldValue
                                    && fileFormatLookups.FormatId == _formatID;
            }
        }
        else
        {
            if (_fieldValue == '*')
            {
                delete_from fileFormatLookups where fileFormatLookups.LookupType == any2Enum(_lookupType)
                                                             && fileFormatLookups.FormatId == _formatID;
            }
            else
            {
                delete_from fileFormatLookups where fileFormatLookups.FieldValue == _fieldValue
                                        && fileFormatLookups.LookupType == any2Enum(_lookupType)
                                        && fileFormatLookups.FormatId == _formatID;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeletePaymSpecs</Name>
				<Source><![CDATA[
    private void DeletePaymSpecs(str _formatID, str _paymSpec)
    {
        SKS_EFT_FileFormatPaymSpec  paymSpecsTable;
        SKS_EFT_FileFormat          fileFormat;

        paymSpecsTable.skipDeleteActions(true);
        delete_from paymSpecsTable where paymSpecsTable.FormatID == _formatID && paymSpecsTable.paymspec == _paymSpec;

        select maxof(UseWithVendors),maxof(UseWithCustomers),maxof(UseWithBanktoBank),maxof(UseWithCustReimbursements)
            from paymSpecsTable group by paymSpecsTable.FormatId where paymSpecsTable.FormatID == _formatID;

        if (paymSpecsTable)
        {
            fileFormat.skipDataMethods(true);
            Update_recordset fileFormat setting UseWithCustomers = paymSpecsTable.UseWithCustomers, UseWithVendors = paymSpecsTable.UseWithVendors,
                UseWithBanktoBank = paymSpecsTable.UseWithBanktoBank, UseWithCustReimbursements = paymSpecsTable.UseWithCustReimbursements
                where fileFormat.FormatId == _formatID;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeletePaymSpecFields</Name>
				<Source><![CDATA[
    private void DeletePaymSpecFields(str _formatID, str _paymSpec, str _formatFieldID)
    {
        SKS_EFT_FileFormatPaymSpec          paymSpecsTable;
        SKS_EFT_FileFormatPaymSpecFields    paymSpecFields;

        select firstonly paymSpecsTable where paymSpecsTable.FormatID == _formatID && paymSpecsTable.paymspec == _paymSpec;

        select forUpdate paymSpecFields where paymSpecFields.FileFormatPaymSpecRecId == paymSpecsTable.RecId
                            && paymSpecFields.FormatFieldId == _formatFieldID;
    
        if(paymSpecFields)
        {
            this.DeleteVendPaymLookupRecord(paymSpecFields.RecId);
            this.DeleteBankPaymLookupRecord(paymSpecFields.RecId);
            this.DeleteCustReimbPaymLookupRecord(paymSpecFields.RecId);
            paymSpecFields.delete();
      
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFormatSpecFields</Name>
				<Source><![CDATA[
    private void DeleteFormatSpecFields(str _formatID, str _formatFieldID)
    {
        SKS_EFT_FileFormat              fileFormat;
        SKS_EFT_FileFormatFields        lSKS_EFT_FileFormatFields;

        select firstonly fileFormat where fileFormat.FormatID == _formatID;

        select firstonly forUpdate lSKS_EFT_FileFormatFields where lSKS_EFT_FileFormatFields.FileFormatRecId == fileFormat.RecId
            && lSKS_EFT_FileFormatFields.FormatFieldId == _formatFieldID;
    
        if(lSKS_EFT_FileFormatFields)
        {
            this.DeleteBankAccountPaymLookupRecord(lSKS_EFT_FileFormatFields.RecId);
            this.DeleteARBankAccountPaymLookupRecord(lSKS_EFT_FileFormatFields.RecId);
            this.DeleteBTBBankAccountPaymLookupRecord(lSKS_EFT_FileFormatFields.RecId);
            this.DeleteCNPBankAccountPaymLookupRecord(lSKS_EFT_FileFormatFields.RecId);
            lSKS_EFT_FileFormatFields.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteBankAccountPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteBankAccountPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_BankAccountPaymLookup    lSKS_EFT_BankAccountPaymLookup;
    
        delete_from lSKS_EFT_BankAccountPaymLookup where lSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == Recid;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteARBankAccountPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteARBankAccountPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_ARBankAccountPaymLookup    lSKS_EFT_ARBankAccountPaymLookup;
    
        delete_from lSKS_EFT_ARBankAccountPaymLookup where lSKS_EFT_ARBankAccountPaymLookup.FileFormatFieldsRecId == Recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteBTBBankAccountPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteBTBBankAccountPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_BTBBankAccountPaymLookup    lSKS_EFT_BTBBankAccountPaymLookup;
    
        delete_from lSKS_EFT_BTBBankAccountPaymLookup where lSKS_EFT_BTBBankAccountPaymLookup.FileFormatFieldsRecId == Recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteCNPBankAccountPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteCNPBankAccountPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_CNPBankAccountPaymLookup    lSKS_EFT_CNPBankAccountPaymLookup;
    
        delete_from lSKS_EFT_CNPBankAccountPaymLookup where lSKS_EFT_CNPBankAccountPaymLookup.FileFormatFieldsRecId == Recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFormatValidations</Name>
				<Source><![CDATA[
    //==========================================Format Validation Delete Begin ========================================================
    private void DeleteFormatValidations(str _formatGroup, str _formatID, str _paymSpec, str _SourceContext, str _SourceField)
    {
        SKS_EFT_FileFormat          fileFormat;

        if(_formatID == '*')
        {
            while select FormatId from fileFormat where fileFormat.FormatGroup == _formatGroup
            {
                this.DeleteFormatValidation_byFormat(fileFormat.FormatId, _paymSpec, _SourceContext, _SourceField);
            }
        }
        else 
        {
            this.DeleteFormatValidation_byFormat(_formatID, _paymSpec, _SourceContext, _SourceField);
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFormatValidation_byFormat</Name>
				<Source><![CDATA[
    private void DeleteFormatValidation_byFormat(str _formatId, str _paymSpec, str _SourceContext, str _SourceField)
    {
        SKS_EFT_BankFormatValidation    formatValidations;

        if (_paymSpec == '*')
        {
            if (_SourceField == '*')
            {
                if (_SourceContext == '*')
                {
                    delete_from formatValidations where formatValidations.FormatId == _formatId;
                }
                else
                {
                    delete_from formatValidations where formatValidations.FormatId == _formatId
                                && formatValidations.SourceContext == any2Enum(_sourceContext);
                }
            }
            else
            {
                if (_SourceContext == '*')
                {
                    delete_from formatValidations where formatValidations.FormatId == _formatId
                                && formatValidations.SourceField == _sourceField;
                }
                else
                {
                    delete_from formatValidations where formatValidations.FormatId == _formatId
                                && formatValidations.SourceContext == any2Enum(_sourceContext)
                                && formatValidations.SourceField == _sourceField;
                }
                        
            }
        }
        else
        {
            if (_SourceField == '*')
            {
                if (_SourceContext == '*')
                {
                    delete_from formatValidations where formatValidations.FormatId == _formatId
                                && formatValidations.PaymSpec == _paymSpec;
                }
                else
                {
                    delete_from formatValidations where formatValidations.FormatId == _formatId
                                && formatValidations.PaymSpec == _paymSpec
                                && formatValidations.SourceContext == any2Enum(_sourceContext);
                }
            }
            else
            {
                if (_SourceContext == '*')
                {
                    delete_from formatValidations where formatValidations.FormatId == _formatId
                                && formatValidations.PaymSpec == _paymSpec
                                && formatValidations.SourceField == _sourceField;
                }
                else
                {
                    delete_from formatValidations where formatValidations.FormatId == _formatID
                                && formatValidations.PaymSpec == _paymSpec
                                && formatValidations.SourceContext == any2Enum(_SourceContext)
                                && formatValidations.SourceField == _SourceField;
                }
                        
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFormatnotes</Name>
				<Source><![CDATA[
    //==========================================Format Validation Delete End ========================================================

    private void DeleteFormatnotes(str _formatID, str _paymSpec)
    {
        SKS_EFT_FileFormatNotes    formatNotes;

        delete_from formatNotes where formatNotes.FormatId == _formatID
                                && formatNotes.PaymSpec == _paymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteDataValidationRule</Name>
				<Source><![CDATA[
    private void DeleteDataValidationRule(str _RuleID)
    {
        SKS_EFT_DataValidationRule  DVRules;

        delete_from DVRules where DVRules.DataRuleId == _RuleID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteDataValidationDetail</Name>
				<Source><![CDATA[
    private void DeleteDataValidationDetail(str _RuleID, str _ValidationFilter, str _Value)
    {
        SKS_EFT_DataValidationRule  DVRules;
        SKS_EFT_DataValidationDetails DVDetails;

        select firstonly DVRules where DVRules.DataRuleID == _RuleID;

        if (!DVRules || DVRules.UserUpdated == NoYes::No)
        {
            delete_from DVDetails where DVDetails.DataRuleId == _RuleID
                            && DVDetails.SKS_EB_ValidationFilter == any2Enum(_ValidationFilter)
                            && DVDetails.Value == _Value;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteVendPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteVendPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_VendorPaymLookup    SKS_EFT_VendorPaymLookup;
    
        delete_from SKS_EFT_VendorPaymLookup where SKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == Recid;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteBankPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteBankPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_BankPaymLookup    SKS_EFT_BankPaymLookup;
    
        delete_from SKS_EFT_BankPaymLookup where SKS_EFT_BankPaymLookup.FileFormatPaymSpecFieldsRecId == Recid;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteCustReimbPaymLookupRecord</Name>
				<Source><![CDATA[
    private void DeleteCustReimbPaymLookupRecord(RecId   Recid)
    {
        SKS_EFT_CustReimbursementPaymLookup    lSKS_EFT_CustReimbursementPaymLookup;
    
        delete_from lSKS_EFT_CustReimbursementPaymLookup where lSKS_EFT_CustReimbursementPaymLookup.FileFormatPaymSpecFieldsRecId == Recid;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteInboundMetaData</Name>
				<Source><![CDATA[
    public void deleteInboundMetaData (container _deleteList)
    {
        int i;
        str formatGroup;
        str formatID;
        str DetailType;
        str detailskey1, detailskey2, detailskey3;
        container formatDelete;

        for (i = 1 ; i <= conLen(_deleteList) ; i++)
        {
            formatDelete = conPeek(_deleteList,i);

            formatGroup = conpeek(_deleteList, 1);
            formatID = conpeek(_deleteList, 2);
            DetailType = conpeek(_deleteList, 3);
            detailskey1 = conpeek(_deleteList, 4);
            detailskey2 = conpeek(_deleteList, 5);
            detailskey3 = conpeek(_deleteList, 6);

            
            if (!formatGroup && formatID)
            {
                if (DetailType)
                {
                    switch (DetailType)
                    {
                        case ('InboundStatuses'):
                            this.DeleteInboundStatus(formatID, detailskey1,detailskey2);
                            break;

                        case ('InboundReasonCodes'):
                            this.DeleteInboundreasonCode(formatID, detailskey1);
                            break;
                    }
                }
                else
                {
                    this.DeleteInboundFormat(formatID);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteInboundFormat</Name>
				<Source><![CDATA[
    private void DeleteInboundFormat(str _formatID)
    {
        SKS_EFT_InboundFileFormat  fileFormat;

        delete_from fileFormat where fileFormat.FormatId == _formatID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteInboundStatus</Name>
				<Source><![CDATA[
    private void DeleteInboundStatus(str _formatID,str _detailskey1,str _detailskey2)
    {
        SKS_EFT_InboundStatuses  inboundStatus;

        delete_from inboundStatus where inboundStatus.FormatId == _formatID
                    && inboundStatus.StatusType == any2Enum(_detailskey1) && inboundStatus.StatusId == _detailskey2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteInboundreasonCode</Name>
				<Source><![CDATA[
    private void DeleteInboundreasonCode(str _formatID,str _detailskey1)
    {
        SKS_EFT_InboundReasonCodes  reasonCodes;

        delete_from reasonCodes where reasonCodes.FormatId == _formatID
                    && reasonCodes.ReasonCode == _detailskey1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>