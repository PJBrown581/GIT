<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_CustDirectDebitMandateEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handler class for cust direct debit mandate
/// </summary>
class SKS_EB_CustDirectDebitMandateEventHandler
{    
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateMandateScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// /// Validates the mandate schemes
    /// </summary>
    /// <param name = "custDirectDebitMandate">Cust direct debit mandate record</param>
    /// <returns>boolean value</returns>
    public static boolean validateMandateScheme(CustDirectDebitMandate custDirectDebitMandate)
    {
        boolean             displayWarning;
        boolean             ret = true;

        SKS_EB_BankTable        sKS_EB_BankTable = SKS_EB_BankTable::find(SKS_PP_Bank::find(custDirectDebitMandate.CreditorBankAccount).BankID);
        
        if(sKS_EB_BankTable.RecId)
        {
            if((custDirectDebitMandate.MandateScheme == CustMandateScheme::B2B && custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Standard) 
                && (sKS_EB_BankTable.B2B !=  NoYes::Yes))
            {
                displayWarning = true;
            }
            else if((custDirectDebitMandate.MandateScheme == CustMandateScheme::CORE 
                    && custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Standard ) && (sKS_EB_BankTable.Core !=  NoYes::Yes))
            {
                displayWarning = true;
            }
            else if((custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Betalings || custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Auddis) && (sKS_EB_BankTable.BetalingsService !=  NoYes::Yes)) //SKS_VSTS_14101
            {
                displayWarning = true;
            }
            else if((custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::BetalingsTotal) && (sKS_EB_BankTable.BetalingsServiceTotal !=  NoYes::Yes))
            {
                displayWarning = true;
            }
            else if((custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Leverander) && (sKS_EB_BankTable.LeverandOrService !=  NoYes::Yes))
            {
                displayWarning = true;
            }

            if(displayWarning)
            {
                ret = checkFailed("@SKS:SKGMandateSchemeNotEnabled");
            }
        }
        else
        {
            // SKS_Bug_10743 -->
            if(SKS_EFT_Setup::find().ModAREFT)
            {
                if(custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Betalings ||
                    custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::BetalingsTotal ||
                    custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Leverander)
                {
                    ret = checkFailed(strFmt("@SKS:SKGCreditorBankAccountNotAffiliated",custDirectDebitMandate.CreditorBankAccount));
                }
            }
            // SKS_Bug_10743 <--
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_onValidatingWrite</Name>
				<Source><![CDATA[
    // Bug 10972 ---> Commented the below event handlers as the bug states to validate the scheme - bank account combination,only on click of OK. 

    ///// <summary>
    ///// Validate field post event handler
    ///// </summary>
    ///// <param name="args"> Args</param>
    //[PostHandlerFor(tableStr(CustDirectDebitMandate), tableMethodStr(CustDirectDebitMandate, validateField))]
    //public static void CustDirectDebitMandate_Post_validateField(XppPrePostArgs args)
    //{
    //    FieldId fieldId = args.getArg('_fieldIdToCheck');
    //    CustDirectDebitMandate  custDirectDebitMandate   = args.getThis();
    //    //CustDirectDebitMandate custDirectDebitMandateOrig = custDirectDebitMandate.orig();
    //    boolean ret = args.getReturnValue();

    //    if(ret)
    //    {
    //        switch (fieldId)
    //        {
    //            case fieldNum(CustDirectDebitMandate, MandateScheme):
    //            case fieldNum(CustDirectDebitMandate, SKS_EB_MandateType ):
    //                args.setReturnValue(SKS_EB_CustDirectDebitMandateEventHandler::validateMandateScheme(custDirectDebitMandate));
    //                break;
    //            default :
    //                break;
    //        }
    //    }
    //}

    ///// <summary>
    ///// Modified field post event handler
    ///// </summary>
    ///// <param name="args"> Args</param>
    //[PostHandlerFor(tableStr(CustDirectDebitMandate), tableMethodStr(CustDirectDebitMandate, modifiedField))]
    //public static void CustDirectDebitMandate_Post_modifiedField(XppPrePostArgs args)
    //{
    //    FieldId fieldId = args.getArg('_fieldId');
    //    CustDirectDebitMandate  custDirectDebitMandate   = args.getThis();
    //    //CustDirectDebitMandate custDirectDebitMandateOrig = custDirectDebitMandate.orig();
    //    switch (fieldId)
    //    {
    //        case fieldNum(CustDirectDebitMandate,CreditorBankAccount):
    //            SKS_EB_CustDirectDebitMandateEventHandler::validateMandateScheme(custDirectDebitMandate);
    //            break;
    //        default :
    //            break;
    //    }
    //}

    // Bug 10972 <-----

    /// <summary>
    /// validates write changes
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">args</param>
    [DataEventHandler(tableStr(CustDirectDebitMandate), DataEventType::ValidatingWrite)]
    public static void CustDirectDebitMandate_onValidatingWrite(Common sender, DataEventArgs e)
    {
        ValidateEventArgs args = e as ValidateEventArgs;
        CustDirectDebitMandate CustDirectDebitMandate = sender as CustDirectDebitMandate;

        args.parmValidateResult(SKS_EB_CustDirectDebitMandateEventHandler::
        validateMandateScheme(custDirectDebitMandate));        
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EB_MandateAutoStatus_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// On validating event handler for form data field SKS_EB_MandateAutoStatus
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">args</param>
    [FormDataFieldEventHandler(formDataFieldStr(CustDirectDebitMandate, CustDirectDebitMandate, SKS_EB_MandateAutoStatus), FormDataFieldEventType::Validating),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void SKS_EB_MandateAutoStatus_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        CustDirectDebitMandate CustDirectDebitMandate = sender.datasource().cursor();
        CustDirectDebitMandate CustDirectDebitMandateOrig = CustDirectDebitMandate.orig();
        FormRun fr = sender.datasource().formRun();
        FormComboBoxControl control = fr.design().controlName(formControlStr(CustDirectDebitMandate, SKS_DD_CustomerSettings_SKS_EB_MandateAutoStatus));
        if(CustDirectDebitMandate.SKS_EB_MandateAutoStatus != SKS_EB_MandateAutoStatus::Canceled)
        {
            control.setEditText(enum2Str(CustDirectDebitMandateOrig.SKS_EB_MandateAutoStatus));
            checkFailed("@SKS:SKGCannotChangeStatus");
        }
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandateDP_Post_processReport</Name>
				<Source><![CDATA[
     /// <summary>
    /// Post handler method for process report
    /// </summary>
    /// <param name="args">args</param>
    [PostHandlerFor(classStr(CustDirectDebitMandateDP), methodStr(CustDirectDebitMandateDP, processReport))]
    public static void CustDirectDebitMandateDP_Post_processReport(XppPrePostArgs args)
    {
        CustDirectDebitMandateDP custDirectDebitMandateDP = args.getThis();
        CustDirectDebitMandateTmp custDirectDebitMandateTmp = custDirectDebitMandateDP.getCustDirectDebitMandateTmp();
        CustDirectDebitMandate locCustDirectDebitMandate;//Bug 11080
        CustBankAccount		   locCustBankAccount;//Bug 11080

        custDirectDebitMandateTmp.CompanyLogo = CompanyImage::findByRecord(CompanyInfo::find()).Image;
        custDirectDebitMandateTmp.CompanyName = CompanyInfo::find().Name;
        custDirectDebitMandateTmp.CompanyAddress = CompanyInfo::find().primaryAddress();
        custDirectDebitMandateTmp.Locator = SKS_EFT_Setup::find().SKS_DD_MandatesReplyToEMail;
        custDirectDebitMandateTmp.CreditorsIBAN = BankAccountTable::find(custDirectDebitMandateTmp.CreditorAccountId).IBAN;
        if(strLen(custDirectDebitMandateTmp.CreditorsIBAN) == 0)
        {
            custDirectDebitMandateTmp.CreditorsBankAccountNo = BankAccountTable::find(custDirectDebitMandateTmp.CreditorAccountId).AccountNum;
        }
        //Bug 11080 -->
        select firstonly locCustDirectDebitMandate
            where locCustDirectDebitMandate.MandateReference == custDirectDebitMandateTmp.MandateReference;

        if(locCustDirectDebitMandate)
        {
            locCustBankAccount = CustBankAccount::find(locCustDirectDebitMandate.CustAccount, locCustDirectDebitMandate.BankAccount);

            custDirectDebitMandateTmp.CustBankAccountNo = locCustBankAccount.AccountNum;
            custDirectDebitMandateTmp.CustBankRoutingNumber = locCustBankAccount.RegistrationNum;
        }
        //Bug 11080 <--
        custDirectDebitMandateTmp.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post handler for form init
    /// </summary>
    /// <param name="args">args</param>
    [PostHandlerFor(formStr(CustDirectDebitMandate), formMethodStr(CustDirectDebitMandate, init))]
    public static void CustDirectDebitMandate_Post_init(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        FormGroupControl groupCtrl = formRun.design().controlName(formControlStr(CustDirectDebitMandate, MandateScheme));
        FormComboBoxControl mandateType = formRun.design().controlName('MandateScheme_SKS_EB_MandateType');

        groupCtrl.moveControl(mandateType.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_Post_updateControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post handler for update controls method
    /// </summary>
    /// <param name="args">args</param>
    [PostHandlerFor(formStr(CustDirectDebitMandate), formMethodStr(CustDirectDebitMandate, updateControls))]
    public static void CustDirectDebitMandate_Post_updateControls(XppPrePostArgs args)
    {
        CustDirectDebitMandate custDirectDebitMandate;
        FormRun formRun = args.getThis();
        custDirectDebitMandate = formRun.dataSource(formDataSourceStr(CustDirectDebitMandate,CustDirectDebitMandate )).cursor();
        FormComboBoxControl mandateType = formRun.design().controlName('MandateScheme_SKS_EB_MandateType');
        mandateType.enabled((custDirectDebitMandate.RecId == 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_Post_validateField</Name>
				<Source><![CDATA[
    //SKG VSTS 11081
    /// <summary>
    /// Post handler method for process report
    /// </summary>
    /// <param name="args">args</param>
    [PostHandlerFor(tableStr(CustDirectDebitMandate), tableMethodStr(CustDirectDebitMandate, validateField))]
    public static void CustDirectDebitMandate_Post_validateField(XppPrePostArgs args)
    {
        CustDirectDebitMandate custDirectDebitMandate = args.getThis();
        FieldId fieldId = args.getArg('_fieldIdToCheck');
        boolean ret = args.getReturnValue();
        CustMandateStatus status;

        //int infoLineNum = infolog.line();//BP obsolete
        int infoLineNum = infologLine();

        switch(fieldId)
        {
            case fieldNum(CustDirectDebitMandate, BankAccount):                
            case fieldNum(CustDirectDebitMandate, SKS_EB_MandateType):
                infolog.clear(infoLineNum - 1);                               
                ret = true;                                    
                if (custDirectDebitMandate.orig().BankAccount != '' &&
                        custDirectDebitMandate.orig().BankAccount != custDirectDebitMandate.BankAccount)
                {
                    status = custDirectDebitMandate.getStatus();
                    if (status != CustMandateStatus::Expired && status != CustMandateStatus::Canceled && status != CustMandateStatus::Incomplete)
                    {
                        switch (custDirectDebitMandate.MandateScheme)
                        {
                            case CustMandateScheme::B2B :
                                ret = checkFailed("@SYS4009872");
                                break;
                            case CustMandateScheme::CORE :
                            case CustMandateScheme::COR1 :
                                info("@SYS4009871");
                                break;
                        }
                    }
                }
                break;
        }
        args.setReturnValue(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EB_MandateType_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hadling the event on modifying the SKS_EB_MandateType field from CustDirectDebitMandate table.
    /// </summary>
    /// <param name = "sender">FormDataObject</param>
    /// <param name = "e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(CustDirectDebitMandate, CustDirectDebitMandate, SKS_EB_MandateType), FormDataFieldEventType::Modified),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void SKS_EB_MandateType_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormRun formRun = sender.datasource().formRun();
        CustDirectDebitMandate custDirectDebitMandate = formRun.dataSource().cursor();
       

        if (custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Auddis)//SKS_VSTS_14101
        {
            custDirectDebitMandate.SKS_EB_AutoType = SKS_EB_AutoType::NA;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustTableRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating customer records based Direct debit mandate setup
    /// </summary>
    /// <param name = "custDirectDebitMandate">Cust direct debit mandate record</param>
    public static void updateCustTableRecords(CustDirectDebitMandate custDirectDebitMandate)
    {
        if(custDirectDebitMandate.getStatus() == CustMandateStatus::New || custDirectDebitMandate.Status == CustMandateStatus::New)
        {            
            SKS_DD_MandateMOPUpdates lSKS_DD_MandateMOPUpdates;
            CustTable       lCustTable;

            lSKS_DD_MandateMOPUpdates = SKS_DD_MandateMOPUpdates::findRecord(custDirectDebitMandate.SKS_EB_MandateType, custDirectDebitMandate.MandateScheme);

            select lCustTable where lCustTable.AccountNum == custDirectDebitMandate.CustAccount;

            if(lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesPaymModeNew)
            {
                if(!lCustTable.BankAccount && custDirectDebitMandate.BankAccount)
                {
                    lCustTable.BankAccount = custDirectDebitMandate.BankAccount;
                }

                lCustTable.PaymMode = lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesPaymModeNew;
                lCustTable.PaymSpec = lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesPaymSpecNew;

                ttsbegin;

                lCustTable.selectForUpdate(true);
                lCustTable.doUpdate();

                ttscommit;

                if(!custDirectDebitMandate.BankAccount)
                {
                    SKS_DD_MandatesCreateBankAccount::CreateBankAccount(lCustTable);
                }

                select lCustTable where lCustTable.AccountNum == custDirectDebitMandate.CustAccount;

                SKS_EB_CustDirectDebitMandateEventHandler::updateCustomerOpenTransactionRecords(lCustTable, CustMandateStatus::New);                
            }
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustTableRecords_OnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating customer records based Direct debit mandate setup
    /// </summary>
    /// <param name = "custDirectDebitMandate">Cust direct debit mandate record</param>
    public static void updateCustTableRecords_OnInsert(CustDirectDebitMandate custDirectDebitMandate)
    {
        SKS_DD_MandateMOPUpdates lSKS_DD_MandateMOPUpdates;
        CustTable       lCustTable;

        lSKS_DD_MandateMOPUpdates = SKS_DD_MandateMOPUpdates::findRecord(custDirectDebitMandate.SKS_EB_MandateType, custDirectDebitMandate.MandateScheme);

        select lCustTable where lCustTable.AccountNum == custDirectDebitMandate.CustAccount;

        if(lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesPaymModeNew)
        {
            if(!lCustTable.BankAccount && custDirectDebitMandate.BankAccount)
            {
                lCustTable.BankAccount = custDirectDebitMandate.BankAccount;
            }

            lCustTable.PaymMode = lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesPaymModeNew;
            lCustTable.PaymSpec = lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesPaymSpecNew;

            ttsbegin;

            lCustTable.selectForUpdate(true);
            lCustTable.doUpdate();

            ttscommit;

            if(!custDirectDebitMandate.BankAccount)
            {
                SKS_DD_MandatesCreateBankAccount::CreateBankAccount(lCustTable);
            }

            select lCustTable where lCustTable.AccountNum == custDirectDebitMandate.CustAccount;

            SKS_EB_CustDirectDebitMandateEventHandler::updateCustomerOpenTransactionRecords(lCustTable, CustMandateStatus::New);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerOpenTransactionRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating customer records based Direct debit mandate setup
    /// </summary>
    /// <param name = "lCustTable">lCustTable</param>
    /// <param name = "_CustMandateStatus">_CustMandateStatus</param>
    public static void updateCustomerOpenTransactionRecords(CustTable lCustTable, CustMandateStatus _CustMandateStatus)
    {
        CustTrans locCustTrans;
        CustTransOpen   locCustTransOpen;

        ttsbegin;

        if(_CustMandateStatus == CustMandateStatus::New)
        {
            if(!lCustTable.BankAccount)
            {
                locCustTrans.skipDataMethods(true);
                locCustTrans.skipEvents(true);

                update_recordset locCustTrans
                    setting PaymMode = lCustTable.PaymMode, PaymSpec = lCustTable.PaymSpec
                    join locCustTransOpen
                    where locCustTrans.RecId == locCustTransOpen.RefRecId &&
                            locCustTransOpen.AccountNum == lCustTable.AccountNum;
            }
            else
            {
                locCustTrans.skipDataMethods(true);
                locCustTrans.skipEvents(true);

                update_recordset locCustTrans
                    setting PaymMode = lCustTable.PaymMode, PaymSpec = lCustTable.PaymSpec, ThirdPartyBankAccountId = lCustTable.BankAccount
                    join locCustTransOpen
                    where locCustTrans.RecId == locCustTransOpen.RefRecId &&
                            locCustTransOpen.AccountNum == lCustTable.AccountNum;
            }
        }
        else if(_CustMandateStatus == CustMandateStatus::Canceled)
        {
            locCustTrans.skipDataMethods(true);
            locCustTrans.skipEvents(true);

            update_recordset locCustTrans
                setting PaymMode = lCustTable.PaymMode, PaymSpec = lCustTable.PaymSpec
                join locCustTransOpen
                where locCustTrans.RecId == locCustTransOpen.RefRecId &&
                        locCustTransOpen.AccountNum == lCustTable.AccountNum;
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>