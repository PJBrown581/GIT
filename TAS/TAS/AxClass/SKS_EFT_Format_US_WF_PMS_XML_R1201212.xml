<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_WF_PMS_XML_R1201212</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_WF_PMS_XML_R1201212 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_WF_PMS_XML_R1201212 extends SKS_EFT_Format
{
    #define.FormatVersion('20230524')
    XmlDocument             xmlDoc;
    XmlElement              nodeFile;
    int                     refID;
    SKS_EFT_SequenceNumber  mSequenceNumber;
    boolean                 mPDP;
    str                     purpCode;    

    #define.ACHCCD('ACH-CCD')
    #define.ACHCCDP('ACH-CCD+')
    #define.ACHCTX('ACH-CTX')
    #define.ACHPPD('ACH-PPD')
    #define.ACHPPDP('ACH-PPD+')
    #define.ACHIAT('ACH-IAT')
    #define.ACHIATNL('ACH-IAT-NL')
    #define.MTS('MTS')
    #define.CHK('CHK')
    #define.DAC('DAC')
    #define.SDC('SDC')
    #define.IWI('IWI')
    #define.IAT('IAT')
    #define.CCR('CCR')
    #define.NRG('NRG')      //SKS#DevOps:16335
    #define.URG('URG')      //SKS#DevOps:16335
    #define.WIREINTL('WIRE-INTL') //SKS#DevOps:17280
    #define.WIREIWI('WIRE-IWI')   //SKS#DevOps:17280
    #define.IWI_USD('IWI-USD')   //SKS#DevOps:21016
    #define.WIREDOMES('WIRE-DOMES')
    #define.CHKND('CHK-ND')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InvoiceNotes</Name>
				<Source><![CDATA[
    private void node_InvoiceNotes(XmlElement _nodeInvoiceInfo, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //      Note
        //          NoteType (Attribute)
        //          NoteText (element)
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeNote;
        str txt;
        txt = _invSKS_EFT_FileDetail.InvoiceTransactionTxt;

        if(mSKS_EFT_FileDetail.UseCheckNumber == true)
        {
            str noteValue = _invSKS_EFT_FileDetail.DocumentNum;

            if(txt)
            {
                txt += ' ' + noteValue;
            }
            else
            {
                txt = noteValue;
            }
        }
        
        if(txt)
        {
            //      Note
            nodeNote = _nodeInvoiceInfo.appendChild(xmlDoc.createElement('Note'));
            
            //          NoteType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeNote, 'NoteType', 'INV');
            
            //          NoteText (Element)
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeNote, 'NoteText', this.CharacterReplacement(txt), 80);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// addressSplit
    /// </summary>
    /// <param name = "_address">_address</param>
    /// <returns>true</returns>
    protected container addressSplit(SKS_EB_Address  _address)
    {
        List            strList = new List(Types::String);
        container       address;
        ListIterator    iterator;
    
        strlist = strSplit(this.CharacterReplacement(_address),';');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            address += iterator.value();
            iterator.next();
        }
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        xmlDoc = XmlDocument::newBlank();
    
        //Get sequence number
        this.getSequence();
    
        this.node_File();
    
        while(mSKS_EFT_FileDetail)
        {                
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);//SKS_VSTS_14292
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get Remittance Address
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SDC);

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
    
            this.node_PmtRec();
    
            next mSKS_EFT_FileDetail;
        }
    
        this.node_FileInfoGrp();
    
        // Increment sequence number
        //this.incrementSequenceNumber(); //FDD-10590
    
        // Set sequence number
        this.setSequence();
    
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    private str getBankPurposeCode()
    {           

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId); //FDD-10590

        purpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
    
        return strReplace(this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText), '\r', ' '); //FDD-10590
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEMail</Name>
				<Source><![CDATA[
    private container getEMail()    //VSTS#13015
    {
        SKS_EB_Vendor lSKS_EB_Vendor;
        SKS_LB_Depositor lSKS_LB_Depositor;
        CustTable                       customerTable;
        DirPartyContactInfoview         mDirPartyContactInfoview;
        // 7536 -->
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
        LogisticsLocationRole           locationRole;
        LogisticsElectronicAddressRole  logisticsElectronicAddressRole;
        SKS_EFT_Setup                   lSKS_EFT_Setup;
    
        lSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        lSKS_LB_Depositor = SKS_LB_Depositor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

        if(mModule == SKS_EFT_Module::CNP)
        {
            lSKS_EFT_Setup = SKS_EFT_Setup::find();

            if(lSKS_EFT_Setup.ModAREFT == NoYes::Yes)
            {
                if(lSKS_LB_Depositor.EM1Customer)
                {
                    customerTable = CustTable::findByCompany(lSKS_LB_Depositor.CustomerCompany, lSKS_LB_Depositor.AccountNum);

                    if(lSKS_EFT_Setup.EmailContactPurpose != '')
                    {
                        select firstonly Locator, Description from logisticsElectronicAddress
                                    where logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                                exists join dirPartyLocation
                                    where dirPartyLocation.Location == logisticsElectronicAddress.Location &&
                                            dirPartyLocation.Party == customerTable.Party
                                exists join logisticsElectronicAddressRole
                                    where logisticsElectronicAddressRole.ElectronicAddress == logisticsElectronicAddress.RecId
                                exists join locationRole
                                   where locationRole.RecId == logisticsElectronicAddressRole.LocationRole
                                        && locationRole.Name == lSKS_EFT_Setup.EmailContactPurpose;

                        return [this.CharacterReplacement(logisticsElectronicAddress.Description), logisticsElectronicAddress.Locator];

                    }
                    else
                    {
                        select firstonly LocationName, Locator from mDirPartyContactInfoview
                                     where mDirPartyContactInfoview.Party == customerTable.Party && mDirPartyContactInfoview.IsPrimary == true
                                           &&  mDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;


                        return [this.CharacterReplacement(mDirPartyContactInfoView.LocationName), mDirPartyContactInfoView.Locator];
                    }
                }
                else
                {
                    return [this.CharacterReplacement(lSKS_LB_Depositor.EM2Name), lSKS_LB_Depositor.EM2Addr];
                }
            }
            else
            {
                customerTable = CustTable::findByCompany(lSKS_LB_Depositor.CustomerCompany, lSKS_LB_Depositor.AccountNum);

                select firstonly LocationName, Locator from mDirPartyContactInfoview
                            where mDirPartyContactInfoview.Party == customerTable.Party && mDirPartyContactInfoview.IsPrimary == true
                                &&  mDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;


                return [this.CharacterReplacement(mDirPartyContactInfoView.LocationName), mDirPartyContactInfoView.Locator];
            }
        }
        else
        {
            if(lSKS_EB_Vendor.EM1Vendor && (mSKS_EFT_FileDetail_VendAddress.LocationName || mSKS_EFT_FileDetail_VendAddress.Locator))
            {
                return [this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.LocationName), mSKS_EFT_FileDetail_VendAddress.Locator];
            }
            else
            {
                return [this.CharacterReplacement(lSKS_EB_Vendor.EM2Name), lSKS_EB_Vendor.EM2Addr];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        select firstonly lSKS_EFT_FileDetail_Extra where lSKS_EFT_FileDetail_Extra.FieldName == 'NextSequenceNumber' &&
                                                        lSKS_EFT_FileDetail_Extra.RefRecId == mSKS_EFT_FileDetail.RecId; //FDD-10590
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = str2Int(mSKS_EFT_FileDetail_Extra.Value); //FDD-10590
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999)
        {
            mSequenceNumber = 0;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Check</Name>
				<Source><![CDATA[
    private void node_Check(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  Check
        //      ChkNum
        //      ChkDocNum
        //      DeliveryCode
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCheck;
    
        //  Check
        nodeCheck = _nodePmtRec.appendChild(xmlDoc.createElement('Check'));
    
        //      ChkNum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCheck, 'ChkNum', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
    
        //      ChkDocNum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCheck, 'ChkDocNum', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CheckFaceStyleId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),18,false);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK) //SKS_VSTS_13912
        {
            //      CourierName
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCheck, 'CourierName', SKS_EFT_Format::getCodelookupvalue('CourierName', mSKS_EFT_FileDetail.RecId),60,false);

            //      CourierAccount
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCheck, 'CourierAccount', SKS_EFT_Format::getCodelookupvalue('CourierAccount', mSKS_EFT_FileDetail.RecId),55,false);
        }

        //      DeliveryCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCheck, 'DeliveryCode', SKS_EFT_Format::getCodelookupvalue('DeliveryCode', mSKS_EFT_FileDetail.RecId),3,false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DocDelivery</Name>
				<Source><![CDATA[
    private void node_DocDelivery(XmlElement _nodePmtRec)
    {
        XmlElement nodeDocDelivery;
        XmlElement nodeFileOut;
        XmlElement nodeDelivery;
        container conEMail;
        str crBillerId, drBillerId;         //SKS#DevOps:18057
    
        if(strUpr(SKS_EFT_Format::getCodelookupvalue('TranHandlingCode', mSKS_EFT_FileDetail.RecId)) == 'U' &&
                                                            (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS  ||
                                                            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI  ||
                                                            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD ||          //SKS#DevOps:21016
                                                            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK  ||
                                                            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DAC  ||
                                                            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT  ||
                                                            mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHCTX      ||
                                                            mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHCCDP))
        {
            nodeDocDelivery = _nodePmtRec.appendChild(xmlDoc.createElement('DocDelivery'));
    
            crBillerId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CreditEDDBillerID', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));//DevOps20073
            drBillerId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DebitEDDBillerID', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));

            if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0 &&  crBillerId)         //SKS#DevOps:18057
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDocDelivery, 'EDDBillerID', crBillerId);
            }
            else if(drBillerId)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDocDelivery, 'EDDBillerID', drBillerId);
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDocDelivery, 'EDDBillerID', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('EDDBillerID', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank)), 35, false);
            }
    
            nodeFileOut = nodeDocDelivery.appendChild(xmlDoc.createElement('FileOut'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFileOut, 'FileType', 'XML');
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFileOut, 'FileFormat', 'PDF');
    
            nodeDelivery = nodeFileOut.appendChild(xmlDoc.createElement('Delivery'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDelivery, 'DeliveryType', 'SECURE');   //SKS#DevOps:15327
    
            conEMail = this.getEMail();
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDelivery, 'DeliveryContactName', conPeek(conEMail,1));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDelivery, 'DeliveryEmailAddress', conPeek(conEMail,2));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_File</Name>
				<Source><![CDATA[
    private void node_File()
    {
        //------------------------------------------------------------------------------------------------------
        //  File
        //      CompanyID (Attribute)
        //      PmtRecCount (Attribute)
        //      PmtRecTotal (Attribute)
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        AmountCur paymentCount;
        AmountCur paymentAmount;
    
        // Select count and sum for this file
        // Credits
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0;
    
        paymentCount = tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur;
        paymentAmount = tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
    
        // Debits
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur >= 0;
    
        paymentCount += tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur;
        paymentAmount += tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
    
        //  File
        nodeFile = xmlDoc.appendChild(xmlDoc.createElement('File'));
    
        if(mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP)
        {
            //      CompanyID
            SKS_EFT_Format::xmlsetAttributeText(nodeFile, 'CompanyID', mSKS_EFT_FileDetail_BankAccount.WOrdPartyId,0,false);
        }
    
        //      PmtRecCount
        SKS_EFT_Format::xmlsetAttributeText(nodeFile, 'PmtRecCount', num2str(paymentCount,0,0,0,0));
    
        //      PmtRecTotal
        SKS_EFT_Format::xmlsetAttributeText(nodeFile, 'PmtRecTotal', num2str(paymentAmount,0,2,0,0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_FileInfoGrp</Name>
				<Source><![CDATA[
    private void node_FileInfoGrp()
    {
        //------------------------------------------------------------------------------------------------------
        //      FileInfoGrp
        //          FileDate (Attribute)
        //          FileTime (Attribute)
        //          FileControlNumber (Attribute)
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeFileInfoGrp;
        str fileControlNumber;
    
        //      FileInfoGrp
        nodeFileInfoGrp = nodeFile.appendChild(xmlDoc.createElement('FileInfoGrp'));
    
        //          FileDate
        SKS_EFT_Format::xmlsetAttributeText(nodeFileInfoGrp, 'FileDate', SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateSeparator::Hyphen));
    
        //          FileTime
        SKS_EFT_Format::xmlsetAttributeText(nodeFileInfoGrp, 'FileTime', time2Str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), TimeSeparator::Colon, TimeFormat::Hour24));
    
        //          FileControlNumber
        fileControlNumber = subStr(mSKS_EFT_File.FileNbr + '-' + int2str(mSequenceNumber),1,15);
    
        SKS_EFT_Format::xmlsetAttributeText(nodeFileInfoGrp, 'FileControlNumber', fileControlNumber);
    
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'FileControlNumber', fileControlNumber, mSKS_EFT_File.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IDInfo</Name>
				<Source><![CDATA[
    private void node_IDInfo(XmlElement _nodePmtRec, str _idType, str _idValue)
    {
        XmlElement nodeIdInfo;
    
        nodeIdInfo = _nodePmtRec.appendChild(xmlDoc.createElement('IDInfo'));
    
        SKS_EFT_Format::xmlsetAttributeText(nodeIdInfo, 'IDType', _idType);
    
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIdInfo, 'ID', _idValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IntermediaryDepAcctID</Name>
				<Source><![CDATA[
    private void node_IntermediaryDepAcctID(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  IntermediaryDepAcctID
        //      DepAcctID
        //          AcctID (Attribute)
        //          AcctType (Attribute)
        //      BankInfo
        //          BankIDType (Attribute)
        //          Name (Attribute)
        //          RefInfo
        //              RefType (Attribute)
        //              RefID
        //          BankID
        //          PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeIntermediaryDepAcctID;
        XmlElement nodeDepAcctID;
        XmlElement nodeBankInfo;
    
        //  IntermediaryDepAcctID
        nodeIntermediaryDepAcctID = _nodePmtRec.appendChild(xmlDoc.createElement('IntermediaryDepAcctID'));
    
        //      DepAcctID
        nodeDepAcctID = nodeIntermediaryDepAcctID.appendChild(xmlDoc.createElement('DepAcctID'));
    
        //          BankInfo
        nodeBankInfo = nodeDepAcctID.appendChild(xmlDoc.createElement('BankInfo'));
    
        //              BankIDType (Attribute)
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'SWT', 0, false);
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'ABA', 0, false);
        }
    
        //          Name (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 0, false);
    
        //          BankID
        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', mSKS_EFT_FileDetail_Intermediary.IntBankId, 0, false);
        }
    
        //          PostAddr
        this.node_IntermediaryDepPostAddr(nodeBankInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IntermediaryDepPostAddr</Name>
				<Source><![CDATA[
    private void node_IntermediaryDepPostAddr(XmlElement _nodeBankInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          Addr2
        //          City
        //          StateProv
        //          PostalCode
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;
        LogisticsAddressCountryRegionISOCode countryRegion;
        str addr = '';
    
        countryRegion = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId);
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankAddr)
        {
            addr += mSKS_EFT_FileDetail_Intermediary.IntBankAddr;
        }
        if(mSKS_EFT_FileDetail_Intermediary.IntBankAddr2 != '')
        {
            if(addr != '')
            {
                addr += ' ';
            }
            addr += mSKS_EFT_FileDetail_Intermediary.IntBankAddr2;
        }
    
        // Only create if address data is populated
        if(addr || mSKS_EFT_FileDetail_Intermediary.IntBankCity || countryRegion)
        {
            //  PostAddr
            nodePostAddr = _nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));
    
            //          Addr1
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(addr), 35, false);
    
            //          City
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankCity), 25, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', countryRegion, 2, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InvoiceInfo</Name>
				<Source><![CDATA[
    private void node_InvoiceInfo(XmlElement _nodePmtDetail, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //      InvoiceInfo
        //          InvoiceType (Attribute)
        //          InvoiceNum (Attribute)
        //          EffDt (Attribute) YYYY-MM-DD
        //          NetCurAmt (Attribute)
        //          TotalCurAmt (Attribute)
        //          DiscountCurAmt (Attribute)
        //          Note
        //          POInfo
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInvoiceInfo;
        int length;
    
        //      InvoiceInfo
        nodeInvoiceInfo = _nodePmtDetail.appendChild(xmlDoc.createElement('InvoiceInfo'));
    
        //          InvoiceType (Attribute)
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur < 0)           //SKS#DevOps:16113
        {
            //          InvoiceType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceType', 'IV');
        }
        else
        {
            //          InvoiceType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceType', 'CM');
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD)     //SKS#DevOps:21016
        {
            length = 100;
        }
        else
        {
            length = 30;
        }
    
        //          InvoiceNum (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceNum', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), length);
    
        if((mModule == SKS_EFT_Module::AR && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #MTS) || mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP)
        {
            //          EffDt (Attribute) YYYY-MM-DD
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'EffDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate,DateSeparator::Hyphen));
    
            if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur < 0)
            {
                //          NetCurAmt (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'NetCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
    
                //          TotalCurAmt (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'TotalCurAmt', num2str((_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1,0,2,0,0));
    
                //          DiscountCurAmt (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'DiscountCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
            }
            else
            {
                //          NetCurAmt (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'NetCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
                
                //          TotalCurAmt (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'TotalCurAmt', num2str((_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1,0,2,0,0));
                
                //          DiscountCurAmt (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'DiscountCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
            }
    
            //          Note
            this.node_InvoiceNotes(nodeInvoiceInfo, _invSKS_EFT_FileDetail);                
    
            //          POInfo
            this.node_POInfo(nodeInvoiceInfo, _invSKS_EFT_FileDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InvoiceCreditMemoInfo</Name>
				<Source><![CDATA[
    private void node_InvoiceCreditMemoInfo(XmlElement _nodePmtDetail, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //      InvoiceInfo
        //          InvoiceType (Attribute)
        //          InvoiceNum (Attribute)
        //          EffDt (Attribute) YYYY-MM-DD
        //          NetCurAmt (Attribute)
        //          TotalCurAmt (Attribute)
        //          DiscountCurAmt (Attribute)
        //          Note
        //          POInfo
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInvoiceInfo;
    
        //      InvoiceInfo
        nodeInvoiceInfo = _nodePmtDetail.appendChild(xmlDoc.createElement('InvoiceInfo'));
    
        //          EffDt (Attribute) YYYY-MM-DD
        SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'EffDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate,DateSeparator::Hyphen));
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            //          InvoiceType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceType', 'CM');          //SKS#VSTS:14050
    
            //          InvoiceNum (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceNum', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), 30);

            //          NetCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'NetCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
    
            //          TotalCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'TotalCurAmt', num2str((_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1,0,2,0,0));
    
            //          DiscountCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'DiscountCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
        }
        else
        {
            //          InvoiceType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceType', 'IV');              //SKS#VSTS:14050
    
            //          InvoiceNum (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'InvoiceNum', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber), 30);

            //          NetCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'NetCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
    
            //          TotalCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'TotalCurAmt', num2str((_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1,0,2,0,0));
    
            //          DiscountCurAmt (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeInvoiceInfo, 'DiscountCurAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
        }
    
        //          Note
        this.node_InvoiceNotes(nodeInvoiceInfo, _invSKS_EFT_FileDetail);
    
        //          POInfo
        this.node_POInfo(nodeInvoiceInfo, _invSKS_EFT_FileDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Message</Name>
				<Source><![CDATA[
    private void node_Message(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //      Message
        //          MsgType (Attribute)
        //          MsgText (Element)
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeMessage;
        LogisticsAddressCountryRegionISOCode countryRegion = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
        str value, msgType;
        str tradingPartnerId;
        int len = 210;
        str customerID = SKS_PP_Setup::find().RegCustomerID;
    
        tradingPartnerId = SKS_EFT_Format::getCodelookupvalue('TradingPartnerId', mSKS_EFT_FileDetail.RecId);

        // For CCR must use either trading partner id or account num.  This becomes the PIN
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCR)
        {
            if(tradingPartnerId != '')
            {
                value = this.CharacterReplacement(tradingPartnerId);
            }
            else
            {
                value = mSKS_EFT_FileDetail.AccountNum;
            }
        }
        else if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'IWI-USD'    ||
                mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-DOMES' ||
                mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH-CCD')    //SKS#VSTS:14434, 16856
        {
            value = msKS_EFT_FileDetail_Instructions.PmtInstText1;

            if(msKS_EFT_FileDetail_Instructions.PmtInstText2)
            {
                value = value + ', ' + msKS_EFT_FileDetail_Instructions.PmtInstText2;
            }
            if(msKS_EFT_FileDetail_Instructions.PmtInstText3)
            {
                value = value + ', ' + msKS_EFT_FileDetail_Instructions.PmtInstText3;
            }
            if(msKS_EFT_FileDetail_Instructions.PmtInstText4)
            {
                value = value + ', ' + msKS_EFT_FileDetail_Instructions.PmtInstText4;
            }
        }
        else if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL'  ||//DevOps21784
        mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-IWI'   ||
                mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH-CTX'   ||
                mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH-IAT'   )
        {
            value = this.getBankPurposeCode();
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NRG)        //SKS#DevOps:16335
        {
            value = this.getBankPurposeCode();
            
            if(value == '')
            
            {
                value = this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText1);
            }
            len = 140;
        }
        else if(countryRegion != 'CA' &&
                countryRegion != 'MX' &&
                countryRegion != 'SG')
        {
            value = this.getBankPurposeCode();
    
            if(value == '')
            {
                value = this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText1);
            }
        }
    
        if(value != '')
        {
            //      Message
            nodeMessage = _nodePmtRec.appendChild(xmlDoc.createElement('Message'));
    
            if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'CHK-ND')//SKS_VSTS_13986
            {
                msgType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CHKMsgType', mSKS_EFT_FileDetail.RecId));       //SKS#DevOps:21568

                //          MsgType (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeMessage, 'MsgType', msgType);

                if(msgType == 'MKN')
                {
                    value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CHKMsgText', mSKS_EFT_FileDetail.RecId));       //SKS#DevOps:21568
                }
            }
            else
            {
                //          MsgType (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeMessage, 'MsgType', 'OBI');
            }
    
            switch(countryRegion)
            {
                case 'AU':
                case 'GB':
                    len = 18;
                    break;
                case 'AT':
                case 'FR':
                case 'DE':
                    len = 160;
                    break;
                case 'IE':
                case 'NZ':
                    len = 12;
                    break;
                case 'BE':
                    len = 106;
                    break;
                case 'NL':
                    len = 128;
                    break;
                case 'ES':
                    len = 72;
                    break;
                case 'CH':
                case 'BR':      //SKS#VSTS:14434
                    len = 140;                   
                    break;
            }
            //          MsgText (Element)
            if(customerID != '10fc93' && mSKS_EFT_FileDetail.PaymSpec == #CHKND)
            {
                 SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMessage, 'MsgText', value, len);
            }

            if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL'  &&
               this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'CN' &&
               strLen(mRemittanceName) > 35)                    //SKS#VSTS:14573
            {
                //      Message
                nodeMessage = _nodePmtRec.appendChild(xmlDoc.createElement('Message'));

                //          MsgType (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeMessage, 'MsgType', 'OBI');

                //          MsgText (Element)
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMessage, 'MsgText', this.CharacterReplacement(subStr(mRemittanceName, 36, strLen(mRemittanceName))));
            }
            if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL'  ||//DevOps21784
            mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-IWI'  ||
                mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH-CTX'   ||
                mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH-IAT'   )
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMessage, 'MsgText', value);

            }
        }

        SKS_EFT_FileDetail_PaymentLine lsks_EFT_FileDetail_PaymentLine = SKS_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId); //FDD-10590

        if (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL' &&
            this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'CN' &&
            lsks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText )        //DevOps #18884
        {
            //      Message
            nodeMessage = _nodePmtRec.appendChild(xmlDoc.createElement('Message'));

            //          MsgType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeMessage, 'MsgType', 'OBI');

            //          MsgText (Element)
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMessage, 'MsgText', this.CharacterReplacement(lsks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Message_Debit</Name>
				<Source><![CDATA[
    private void node_Message_Debit(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //      Message
        //          MsgType (Attribute)
        //          MsgText (Element)
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeMessage;
        str value, msgType;
        int len;
    
        value = this.getBankPurposeCode();
    
        if(value != '')
        {
            //      Message
            nodeMessage = _nodePmtRec.appendChild(xmlDoc.createElement('Message'));
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #DAC:
                    msgType = 'ACH';
                    len = 70;
                    break;
                case #IAT:
                    msgType = 'ACH';
                    len = 160;
                    break;
                case #MTS:
                    msgType = 'OBI';
                    len = 140;
                    break;
            }
            //          MsgType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeMessage, 'MsgType', msgType);
    
            //          MsgText (Element)
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMessage, 'MsgText', value, len);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrgnrDepAcctID</Name>
				<Source><![CDATA[
    private void node_OrgnrDepAcctID(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  OrgnrDepAcctID
        //      DepAcctID
        //          AcctID (Attribute)
        //          AcctType (Attribute)
        //          AcctCur (Attribute)
        //      BankInfo
        //          BankIDType (Attribute)
        //          Name (Attribute)
        //          RefInfo
        //              RefType (Attribute)
        //              RefID
        //          BankID
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOrgnrDepAcctID;
        XmlElement nodeDepAcctID;
        XmlElement nodeBankInfo;
        XmlElement refBankInfo;
        XmlElement nodePostAddr;     
        str accountid, bankId, wireRoutngNumber;

        accountid = SKS_EFT_Format::getCodelookupvalue('OrgnrDepAcctID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        bankId = SKS_EFT_Format::getCodelookupvalue('OrgDepAcct', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        wireRoutngNumber = SKS_EFT_Format::getCodelookupvalue('WireRoutngNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCR && (bankId == 'N' || bankId == ''))   //SKS#DevOps:15322, SKS#DevOps:15524 -->
        {
            //  OrgnrDepAcctID
            nodeOrgnrDepAcctID = _nodePmtRec.appendChild(xmlDoc.createElement('OrgnrDepAcctID'));
    
            //      DepAcctID
            nodeDepAcctID = nodeOrgnrDepAcctID.appendChild(xmlDoc.createElement('DepAcctID'));
    
            //          AcctID (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctID', mSKS_EFT_FileDetail.BankBankAcct);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CCR)
        {
            //  OrgnrDepAcctID
            nodeOrgnrDepAcctID = _nodePmtRec.appendChild(xmlDoc.createElement('OrgnrDepAcctID'));
    
            //      DepAcctID
            nodeDepAcctID = nodeOrgnrDepAcctID.appendChild(xmlDoc.createElement('DepAcctID'));
    
            //          AcctID (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctID', mSKS_EFT_FileDetail.BankBankAcct);

            if((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)&&
                accountid != '' &&
                (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DAC ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT))//SKS_VSTS_14028
            {
                //          AcctID (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctID', this.CharacterReplacement(accountid));
            }
            
            //          AcctType (Attribute)
            if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::FinancialInstitutionAccount)
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'G');
            }
            else if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'S');
            }
            else
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'D');
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD  ||  //SKS#DevOps:21016
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NRG ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG)         //SKS#DevOps:16335
            {
                //          AcctCur (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctCur', mSKS_EFT_FileDetail.CurrencyCode);
            }
    
            //      BankInfo
            nodeBankInfo = nodeDepAcctID.appendChild(xmlDoc.createElement('BankInfo'));
    
            //          BankIDType (Attribute)
            if(mSKS_EFT_FileDetail.BankBankSwiftNo != '' && 
              (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL' || 
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG))      //SKS#DevOps:16335
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'SWT');
            }
            else if(mSKS_EFT_FileDetail.BankBankTransit &&
                   (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NRG ||
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG))      //SKS#DevOps:16335
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'CPA');
            }
            else
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', 'ABA');
            }
    
            //          Name (Attribute)
            if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CAD' && (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SDC))
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 60, false);
            }
            else if(mModule == SKS_EFT_Module::AR)
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), 60, false);
            }
            else
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', 'WELLS FARGO');
            }
    
            switch(mSKS_EFT_FileDetail.PaymSpec)
            {
                case #ACHCCD:
                case #ACHCCDP:
                case #ACHCTX:
                case #ACHPPD:
                case #ACHPPDP:
                case #ACHIAT:
                case #ACHIATNL:
                    //      RefInfo
                    refBankInfo = nodeBankInfo.appendChild(xmlDoc.createElement('RefInfo'));
    
                    //          RefType (Attribute)
                    SKS_EFT_Format::xmlsetAttributeText(refBankInfo, 'RefType', 'ACH');
    
                    //          RefID
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, refBankInfo, 'RefID', mSKS_EFT_FileDetail.FileACHCompanyId);
    
                    break;
            }

            select msks_EFT_FileDetail_BankAddress where
                    msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                    && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

            if(mModule == SKS_EFT_Module::AR && (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS))
            {
                nodePostAddr = nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));
    
                //      Addr1
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.Addr), 35, false);
    
                //      City
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.City), 25, false);
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NRG ||
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG)        //SKS#DevOps:16335
            
            {
                select msks_EFT_FileDetail_BankAddress where                                                    //DevOps19135
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                    && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

                nodePostAddr = nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));
                
                //      City
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.City), 25, false);
                
                //      Country
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.CharacterReplacement(this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId)), 25, false);

            }
            //          BankID
            if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-DOMES')
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('wireRoutngNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
            }
            else
            {
                if(mSKS_EFT_FileDetail.BankBankSwiftNo != '' && (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL' || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI || 
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT ||
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG))       //SKS#DevOps:16335
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', mSKS_EFT_FileDetail.BankBankSwiftNo);
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', mSKS_EFT_FileDetail.BankBankTransit);
                }
            }
            if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-IWI' ||
               mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'IWI-USD')
            {
                
                select msks_EFT_FileDetail_BankAddress where
                    msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                    && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;
    
                if(msks_EFT_FileDetail_BankAddress.City || msks_EFT_FileDetail_BankAddress.CountryRegionId)
                {
                    nodePostAddr = nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));

                    //      City
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.City), 25, false);
                
                    //Country
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.CharacterReplacement(this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId)), 25, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrgnrParty</Name>
				<Source><![CDATA[
    private void node_OrgnrParty(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  OrgnrParty
        //      Name
        //          Name1
        //      PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOrgnrParty;
        XmlElement nodeName;
        XmlElement refBankInfo;
        XmlElement nodeContactInfo;
        XmlElement nodePhoneNum;
        int fieldLength;
        str value;

        value = SKS_EFT_Format::getCodelookupvalue('OrgnrDepAcctID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

    
        //  OrgnrParty
        nodeOrgnrParty = _nodePmtRec.appendChild(xmlDoc.createElement('OrgnrParty'));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCR)             //SKS#VSTS:14176
        {
            nodeContactInfo = nodeOrgnrParty.appendChild(xmlDoc.createElement('ContactInfo'));

            if(mSKS_EFT_FileDetail.FileACHCompanyName)//SKS_VSTS_14292
            {
                //      Name
                nodeName = nodeOrgnrParty.appendChild(xmlDoc.createElement('Name'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName));
            }

            //          PhoneNum
            nodePhoneNum = nodeContactInfo.appendChild(xmlDoc.createElement('PhoneNum'));
    
            //          PhoneType
            SKS_EFT_Format::xmlsetAttributeText(nodePhoneNum, 'PhoneType', 'TE');
    
            //          Phone
            SKS_EFT_Format::xmlsetAttributeText(nodePhoneNum, 'Phone', SKS_EFT_Setup::findByCompany(mSKS_EFT_FileDetail.AccountCompany).APContactPhone);

            //          IntlAccCode
            SKS_EFT_Format::xmlsetAttributeText(nodePhoneNum, 'IntlAccCode', '999');
                

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeContactInfo, 'EmailAddr', SKS_EFT_Setup::findByCompany(mSKS_EFT_FileDetail.AccountCompany).APContactEmail);
        }
        else if(mSKS_EFT_FileDetail.FileACHCompanyName)
        {
            //      Name
            nodeName = nodeOrgnrParty.appendChild(xmlDoc.createElement('Name'));
    
            //          Name1
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI ||     //VSTS 11773
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD)
            {
                fieldLength = 35;
            }
            else if(mSKS_EFT_FileDetail.PaymSpec == #ACHCCD || mSKS_EFT_FileDetail.PaymSpec == #ACHPPD ||
                    mSKS_EFT_FileDetail.PaymSpec == #ACHCCDP || mSKS_EFT_FileDetail.PaymSpec == #ACHPPDP)
            {
                fieldLength = 16;
            }
            else
            {
                fieldLength = 60;
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName),fieldLength);

            if(mSKS_EFT_FileDetail.PaymSpec == #NRG || mSKS_EFT_FileDetail.PaymSpec == #URG)        //SKS#DevOps:16335
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name2', this.CharacterReplacement(value), 15);
            }
        }

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SDC  && mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryName)
        {
            //      RefInfo
            refBankInfo = nodeOrgnrParty.appendChild(xmlDoc.createElement('RefInfo'));
    
            //          RefType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(refBankInfo, 'RefType', 'A7');
    
            //          RefID
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, refBankInfo, 'RefID', mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryName, 30);
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CCR)
        {
            //      PostAddr
            this.node_OrgnrPartyPostAddr(nodeOrgnrParty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrgnrPartyPostAddr</Name>
				<Source><![CDATA[
    private void node_OrgnrPartyPostAddr(XmlElement _nodeOrgnrParty)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          Addr2
        //          City
        //          StateProv
        //          PostalCode
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;       
        int fieldLength;
    
       // Only create if address data is populated
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity ||
           mSKS_EFT_FileDetail_BankAccount.WOrdPartyState || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)
        {
            //  PostAddr
            nodePostAddr = _nodeOrgnrParty.appendChild(xmlDoc.createElement('PostAddr'));
    
            //          Addr1
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS)
            {
                fieldLength = 35;
            }
            else
            {
                fieldLength = 55;
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), fieldLength, false);
    
            //          Addr2
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS)
            {
                fieldLength = 35;
            }
            else
            {
                fieldLength = 55;
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), fieldLength, false);
    
            //          City
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS)
            {
                fieldLength = 25;
            }
            else
            {
                fieldLength = 30;
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), fieldLength, false);
    
            //          StateProv
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 3, false);
    
            //          PostalCode
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(this.validateZipCode(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)), 9, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 2, false);
        }
        else
        {
            
            //postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(),'Direct Debit');
            //this.node_PostAddr_Debit(_nodeOrgnrParty);

            if(mSKS_EFT_FileDetail_BankAccount.Addr || mSKS_EFT_FileDetail_BankAccount.Addr2 || mSKS_EFT_FileDetail_BankAccount.City || mSKS_EFT_FileDetail_BankAccount.State || mSKS_EFT_FileDetail_BankAccount.ZipPostal || mSKS_EFT_FileDetail_BankAccount.CountryRegionId)
            {
                //  PostAddr
                nodePostAddr = _nodeOrgnrParty.appendChild(xmlDoc.createElement('PostAddr'));
    
                //          Addr1
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MTS:
                        fieldLength = 35;
                        break;
                    default:
                        fieldLength = 55;
                        break;
                }
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', mSKS_EFT_FileDetail_BankAccount.Addr, fieldLength, false);
    
                //          Addr2
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', mSKS_EFT_FileDetail_BankAccount.Addr2, fieldLength, false);
    
                //          City
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MTS:
                        fieldLength = 25;
                        break;
                    default:
                        fieldLength = 30;
                        break;
                }
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.City), fieldLength, false);
    
                //          StateProv
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.State), 3, false);
    
                //          PostalCode
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(this.validateZipCode(mSKS_EFT_FileDetail_BankAccount.ZipPostal)), 9, false);
    
                //          Country
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.CountryRegionId), 2, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtDetail</Name>
				<Source><![CDATA[
    private void node_PmtDetail(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  PmtDetail
        //      InvoiceInfo
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodePmtDetail;
    
        if(mSKS_EFT_FileDetail.DepRecord == SKS_EFT_VendorRecordSummary::Payment)
        {
            select invSKS_EFT_FileDetail where
                invSKS_EFT_FileDetail.VendTransRecId != 0 &&
                invSKS_EFT_FileDetail.InvoiceNumber != '' &&
                invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
        }
        else
        {
            select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail.RecId &&
                invSKS_EFT_FileDetail.InvoiceNumber != '';
        }
        // If an invoice exists add the PmtDetail and invoice detail elements
        if(invSKS_EFT_FileDetail)
        {
            //  PmtDetail
            nodePmtDetail = _nodePmtRec.appendChild(xmlDoc.createElement('PmtDetail'));
    
            while(invSKS_EFT_FileDetail)
            {
                if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'CHK-ND' ||
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'CCR')        //SKS#VSTS:13937
                {
                    //      InvoiceInfo
                    this.node_InvoiceCreditMemoInfo(nodePmtDetail, invSKS_EFT_FileDetail);
                }
                else
                {
                    //      InvoiceInfo
                    this.node_InvoiceInfo(nodePmtDetail, invSKS_EFT_FileDetail);
                }
    
                next invSKS_EFT_FileDetail;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtRec</Name>
				<Source><![CDATA[
    private void node_PmtRec()
    {
        //------------------------------------------------------------------------------------------------------
        //  PmtRec
        //      PmtCrDr (Attribute)
        //      PmtMethod (Attribute)
        //      PmtFormat (Attribute) (only DAC or IAT)
        //      TranHandlingCode (Attribute)
        //      PDPHandlingCode
        //      IDinfo
        //      Refinfo
        //      Message
        //      Check (only CHK)
        //      OrgnrParty
        //      RcvrParty
        //      OrgnrDepAcctID
        //      RcvrDepAcctID (only DAC and MTS)
        //      PmtDetail (only CHK, CTX, CCD+, PPD+, CCR, MTS, IWI)
        //      PmtID
        //      CurAmt
        //      CurCode (only CHK and MTS)
        //      ValueDate
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmtRec;
        XmlElement refBankInfo;
        str pdpCode;
        str templateId;
        str tranHandlingCode;
        refID++;
        boolean printInvInfo= true;
        str customerID = SKS_PP_Setup::find().RegCustomerID;
    
        //  File
        nodePmtRec = xmlDoc.documentElement().appendChild(xmlDoc.createElement('PmtRec'));
    
        //      PmtCrDr
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtCrDr', 'D');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtCrDr', 'C');
        }
        
        //      PmtMethod
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT)             //SKS#DevOps:15550
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtMethod', 'IAC');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD)             //SKS#DevOps:21060
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtMethod', 'IWI');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtMethod', mSKS_EFT_FileFormatPaymSpec.TransactionCode);
        }
    
        //      PmtFormat (only DAC or IAT)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #ACHCCD:
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormat', 'CCD');
                break;
            case #ACHCCDP:
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormat', 'CCP');
                break;
            case #ACHCTX:
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormat', 'CTX');
                break;
            case #ACHPPD:
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormat', 'PPD');
                break;
            case #ACHPPDP:
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormat', 'PPP');
                break;
            case #ACHIAT:
            case #ACHIATNL:
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormat', 'IAT');
                break;
            case #URG:          //SKS#DevOps:16335
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormat', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PmtFormat', mSKS_EFT_FileDetail.RecId)), 0, false);
                break;
        }

        if((mSKS_EFT_FileFormatPaymSpec.PaymSpec == #CHKND ||mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHCCD ||mSKS_EFT_FileFormatPaymSpec.PaymSpec == #WIREDOMES||
            mSKS_EFT_FileFormatPaymSpec.PaymSpec == #WIREINTL || mSKS_EFT_FileFormatPaymSpec.PaymSpec == #WIREIWI || mSKS_EFT_FileFormatPaymSpec.PaymSpec == #IWI_USD) && mSKS_EFT_FileDetail.PaymentReference) //DevOps 18814
        {
            //      RefInfo
            refBankInfo = nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));
    
            //          RefType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(refBankInfo, 'RefType', 'BT');
    
            //          RefID
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, refBankInfo, 'RefID', mSKS_EFT_FileDetail.PaymentReference);

            //DevOps 18924
            //      RefInfo
            refBankInfo = nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));
    
            //          RefType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(refBankInfo, 'RefType', 'C2');
    
            //          RefID
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, refBankInfo, 'RefID', mSKS_EFT_FileDetail.PaymentReference);
        }       

        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHIATNL)       //SKS_DevOps_19871
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormatIntl', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SECCodeIAT', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 0, false);
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'PmtFormatIntl', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BusinessFuncCode', mSKS_EFT_FileDetail.RecId)), 0, false);
        }

        tranHandlingCode = SKS_EFT_Format::getCodelookupvalue('TranHandlingCode', mSKS_EFT_FileDetail.RecId);
        //      TranHandlingCode
        if(tranHandlingCode != '')
        {
            if(strUpr(tranHandlingCode) == 'D')//SKS_VSTS_13306
            {
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'TranHandlingCode', 'D');
            }
            else if(strUpr(tranHandlingCode) == 'U')//SKS_VSTS_13306
            {
                SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'TranHandlingCode', 'U');
            }
        }
        else if(mModule == SKS_EFT_Module::AR && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DAC)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePmtRec, 'TranHandlingCode', 'D');
        }
        //      PDPHandlingCode        
        pdpCode = SKS_EFT_Format::getCodelookupvalue('PDPHandlingCode', mSKS_EFT_FileDetail.RecId);
        if(pdpCode == 'T' || pdpCode == 'P')
        {
            mPDP = true;
        }
        else
        {
            mPDP = false;
        }
    
        if(mPDP)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'PDPHandlingCode', pdpCode);
        }
    
        //      IDinfo
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCR ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NRG ||    //SKS#DevOps:16335
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS)     
        {
            this.node_IdInfo(nodePmtRec, 'BatchID', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 10));
            this.node_IdInfo(nodePmtRec, 'CustomerID', subStr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CustomerID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 1, 10)); //SKS_VSTS_14176
        }
        else if((mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP) && mPDP && 
            (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS || 
             mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI ||
             mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD))
        {
            //If PDP for wires, need to supply CEO Template Id so the account information can be looked up at Wells Fargo
            templateId = SKS_EFT_Format::getCodelookupvalue('CEOTemplateId', mSKS_EFT_FileDetail.RecId);
            this.node_IdInfo(nodePmtRec, 'TemplateID', this.CharacterReplacement(templateId));
        }
    
        //      RefInfo
        if((mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP) && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CCR)
        {
            this.node_RefInfo(nodePmtRec);
        }
    
        if(mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP)
        {
            //      Message
            this.node_Message(nodePmtRec);
        }
        else
        {
            this.node_Message_Debit(nodePmtRec);
        }
    
        //      Check
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SDC)
        {
            this.node_Check(nodePmtRec);
        }
    
        //      OrgnrParty
        this.node_OrgnrParty(nodePmtRec);
    
        //      RcvrParty
        this.node_RcvrParty(nodePmtRec);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)     //SKS_VSTS_13912
        {
            //      DeliveryParty
            this.node_DeliveryParty(nodePmtRec);
        }
    
        //      OrgnrDepAcctID
        if(mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP || (mModule == SKS_EFT_Module::AR && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #IAT))
        {
            this.node_OrgnrDepAcctID(nodePmtRec);
        }
    
        //      RcvrDepAcctID
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CCR && !mPDP)
        {
            this.node_RcvrDepAcctID(nodePmtRec);
        }
    
        //      Intermediary
        if(!mPDP && ((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG) &&
           (mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' || mSKS_EFT_FileDetail_Intermediary.IntBankId != '')))
        {
            this.node_IntermediaryDepAcctID(nodePmtRec);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH-CCD' && customerID == '1affa0')//DevOps21255
        {
            printInvInfo = false;
        }

        //      PmtDetail (only CHK, CTX, CCD+, PPD+, CCR, MTS, IWI)
        if((mModule == SKS_EFT_Module::AR ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SDC ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IAT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DAC ||       //SKS#DevOps:16113
           mSKS_EFT_FileDetail.PaymSpec == #CCR||
           mSKS_EFT_FileDetail.PaymSpec == #NRG     ||      //SKS#DevOps:16335
           mSKS_EFT_FileDetail.PaymSpec == #URG) && printInvInfo)            //SKS#DevOps:16335
        {
            this.node_PmtDetail(nodePmtRec);
        }
    
        //      DocDelivery
        this.node_DocDelivery(nodePmtRec);
    
        //      PmtID
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'PmtID', SKS_PP_StringFormats::strRight(int642str(mSKS_EFT_FileDetail.PaymentLineRecId),30));
            this.addFieldElement(gXmlNodeDetailFieldValues, 'PmtID', int642str(mSKS_EFT_FileDetail.PaymentLineRecId), mSKS_EFT_FileDetail.RecId);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'PmtID', SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference,30));
            this.addFieldElement(gXmlNodeDetailFieldValues, 'PmtID', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), mSKS_EFT_FileDetail.RecId);
        }
    
        //      CurAmt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'CurAmt', num2str(abs(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,0,0));
    
        //      CurCode (only CHK and MTS)
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #DAC || mModule == SKS_EFT_Module::AR)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'CurCode', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    
        //      ValueDate
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'ValueDate', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate,DateSeparator::Hyphen));

        //      SequenceNumber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtRec, 'SequenceNumber', lSKS_EFT_FileDetail_Extra.value); //FDD-10590
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_POInfo</Name>
				<Source><![CDATA[
    private void node_POInfo(XmlElement _nodeInvoiceInfo, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          POInfo
        //              POType (Attribute)
        //              PONum (Attribute)
        //------------------------------------------------------------------------------------------------------              
        XmlElement nodePOInfo; 
        LedgerJournalTrans ledgerJournalTrans;

        select PurchIdRange from ledgerJournalTrans where ledgerJournalTrans.Invoice == _invSKS_EFT_FileDetail.InvoiceNumber;

        EventHandlerResult result = new EventHandlerResult();

        this.node_POInfo_delegate(_nodeInvoiceInfo, _invSKS_EFT_FileDetail, ledgerJournalTrans, mSKS_EFT_FileFormatPaymSpec, xmlDoc, result);

        if(!result.result())
        {
            if(_invSKS_EFT_FileDetail.PurchId || ledgerJournalTrans.PurchIdRange ||          //SKS#DevOps:16178
               (_invSKS_EFT_FileDetail.PurchNumberSequence && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)||
                 mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCR)                //SKS#DevOps:17825
            {
                //      POInfo
                nodePOInfo = _nodeInvoiceInfo.appendChild(xmlDoc.createElement('POInfo'));
    
                //          POType (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodePOInfo, 'POType', 'PO');
    
                //          PONum (Attribute)
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCR)     //SKS#DevOps:17825
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePOInfo, 'PONum',  this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentVoucher), 30, false);
                }
                else if(ledgerJournalTrans.PurchIdRange) //SKS#DevOps:16178
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePOInfo, 'PONum',  this.CharacterReplacement(ledgerJournalTrans.PurchIdRange), 30, false);
                }
                else if(_invSKS_EFT_FileDetail.PurchId)  //SKS#DevOps:16178
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePOInfo, 'PONum',  this.CharacterReplacement(_invSKS_EFT_FileDetail.PurchId), 30, false);
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePOInfo, 'PONum', _invSKS_EFT_FileDetail.PurchNumberSequence, 30, false);
                }
            }
        }      
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrBankInfoPostAddr</Name>
				<Source><![CDATA[
    private void node_RcvrBankInfoPostAddr(XmlElement _nodeBankInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          City
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;        
        int fieldLength;            
    
        // Only create if address data is populated
        if(mSKS_EFT_FileDetail_BenBank.BenBankAddr || mSKS_EFT_FileDetail_BenBank.BenBankCity || mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)
        {
            //  PostAddr
            nodePostAddr = _nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));
    
            //          Addr1
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS)
            {
                fieldLength = 35;
            }
            else
            {
                fieldLength = 55;
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), fieldLength, false);
    
            //          City
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS)
            {
                fieldLength = 25;
            }
            else
            {
                fieldLength = 30;
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), fieldLength, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), 2, false);
        }
        else
        {
            //postalAddress = LogisticsLocationEntity::location2PostalAddress(mCustBankAccount.Location);
    
            //this.node_PostAddr_Debit(_nodeBankInfo);

            select msks_EFT_FileDetail_BankAddress where
                    msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                    && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::CustBankAddress;

            if(msks_EFT_FileDetail_BankAddress.Addr || msks_EFT_FileDetail_BankAddress.Addr2 || msks_EFT_FileDetail_BankAddress.City || msks_EFT_FileDetail_BankAddress.State || msks_EFT_FileDetail_BankAddress.ZipCode || msks_EFT_FileDetail_BankAddress.CountryRegionId)
            {
                //  PostAddr
                nodePostAddr = _nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));
    
                //          Addr1
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MTS:
                        fieldLength = 35;
                        break;
                    default:
                        fieldLength = 55;
                        break;
                }
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', msks_EFT_FileDetail_BankAddress.Addr, fieldLength, false);
    
                //          Addr2
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', msks_EFT_FileDetail_BankAddress.Addr2, fieldLength, false);
    
                //          City
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MTS:
                        fieldLength = 25;
                        break;
                    default:
                        fieldLength = 30;
                        break;
                }
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.City), fieldLength, false);
    
                //          StateProv
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.State), 3, false);
    
                //          PostalCode
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(this.validateZipCode(msks_EFT_FileDetail_BankAddress.ZipCode)), 9, false);
    
                //          Country
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId), 2, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrDepAcctID</Name>
				<Source><![CDATA[
    private void node_RcvrDepAcctID(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  RcvrDepAcctID
        //      DepAcctID
        //          AcctID (Attribute)
        //          AcctType (Attribute)
        //      BankInfo
        //          BankIDType (Attribute)
        //          Name (Attribute)
        //          BranchID
        //          BankID
        //          PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRcvrDepAcctID;
        XmlElement nodeDepAcctID;
        XmlElement nodeBankInfo;
        LogisticsAddressCountryRegionISOCode countryRegion;
        str BankIDType, BankID, BranchId;
    
        countryRegion = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
    
        //  RcvrDepAcctID
        nodeRcvrDepAcctID = _nodePmtRec.appendChild(xmlDoc.createElement('RcvrDepAcctID'));
    
        //      DepAcctID
        nodeDepAcctID = nodeRcvrDepAcctID.appendChild(xmlDoc.createElement('DepAcctID'));
    
        //          AcctID (Attribute)
        if(mSKS_EFT_FileDetail.DepBankIBAN != '' &&           
            (mSKS_EFT_FileFormatPaymSpec.TransactionCode == 'IWI' ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD||      //SKS#DevOps:21016
             mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL'  ||
             mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-DOMES' ||        //SKS#VSTS:13937
             mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHIATNL    ||
             mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHIAT))              //SKS#DevOps:19794
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctID', mSKS_EFT_FileDetail.DepBankIBAN);
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctID', mSKS_EFT_FileDetail.DepBankAcct);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SDC)
        {
            //          AcctCur (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctCur', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //          AcctType (Attribute)
            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'S');
            }
            else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::FinancialInstitutionAccount)
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'G');
            }
            else
            {
                SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctType', 'D');
            }
    
            if(mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP ||(mModule == SKS_EFT_Module::AR &&  mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS))
            {
                if(mSKS_EFT_FileDetail.DepBankCurrency && mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHIAT) //SKS_VSTS_14753
                {
                    SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctCur', mSKS_EFT_FileDetail.DepBankCurrency);
                }
                else
                {
                    SKS_EFT_Format::xmlsetAttributeText(nodeDepAcctID, 'AcctCur', mSKS_EFT_FileDetail.PaymentCurrencyCode);
                }
            }
    
            //      BankInfo
            nodeBankInfo = nodeDepAcctID.appendChild(xmlDoc.createElement('BankInfo'));
    
            if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHIAT)
            {
                if(countryRegion == 'MX')
                {
                    BankIDType = 'SWT';
                    BankID = '';
                }
                else if(countryRegion == 'NL')
                {
                    BankIDType = 'SWT';
                    if(mSKS_EFT_FileDetail.DepSwiftNo != '')
                    {
                        BankID = mSKS_EFT_FileDetail.DepSwiftNo;
                    }
                    else
                    {
                        BankID = mSKS_EFT_FileDetail.DepBankAcct;
                    }
                }
                else
                {
                    if(mSKS_EFT_FileDetail.DepSwiftNo != '')
                    {
                        BankIDType = 'SWT';
                        BankID = mSKS_EFT_FileDetail.DepSwiftNo;
                    }
                    BranchId = mSKS_EFT_FileDetail.DepBankTransit;
                }
    
            }            
            else if (mSKS_EFT_FileDetail.DepBankTransit != '' &&
                     mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DAC)
            {
                BankIDType = 'ABA';
                BankID = mSKS_EFT_FileDetail.DepBankTransit;
                BranchId = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankBranch);
            }
            else if((countryRegion == 'US' || countryRegion == '') &&
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode != #IWI &&
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode != #IWI_USD &&      //SKS#DevOps:21016
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec != 'WIRE-INTL' &&
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec != 'WIRE-DOMES' &&//SKS_VSTS_13990
                    mSKS_EFT_FileDetail.DepSwiftNo == '')
            {
                BankIDType = 'ABA';
                BankID = mSKS_EFT_FileDetail.DepBankTransit;
                BranchId = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
            }
            else if((mSKS_EFT_FileDetail.DepSwiftNo != '') &&
                    (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-DOMES' && countryRegion == 'CA'))
            {
                BankIDType = 'SWT';
                BankID = mSKS_EFT_FileDetail.DepSwiftNo;
                BranchId = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
            }
            else if(mSKS_EFT_FileDetail.DepBankTransit != '' &&
                     mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-DOMES')//SKS_VSTS_13990
            {
                BankIDType = 'ABA';
                BankID = mSKS_EFT_FileDetail.DepBankTransit;
                BranchId = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
            }
            else if(mSKS_EFT_FileDetail.DepBankTransit != '' && 
                    mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CAD' &&
                    countryRegion == 'CA' && 
                    (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-IWI' ||
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'IWI-USD'))        //SKS#DevOps:21016
            {
                BankIDType = 'CPA';
                BankID = SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::left);
            }
            else if((mSKS_EFT_FileDetail.DepSwiftNo != '') &&
                    (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL' ||
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-IWI'   ||        //SKS_VSTS_14192
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'IWI-USD'))           //SKS#DevOps:21016
            {
                BankIDType = 'SWT';
                BankID = mSKS_EFT_FileDetail.DepSwiftNo;
                if(mSKS_EFT_FileDetail_BenBank.BenBankBranch) //DevOps18344
                {
                    BranchId = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
                }
                else if(mSKS_EFT_FileDetail.DepBankTransit && 
                       (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-IWI'   ||        //SKS_VSTS_14192
                        mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'IWI-USD'))           //SKS#DevOps:21016
                {
                    BranchId = mSKS_EFT_FileDetail.DepBankTransit;
                }
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NRG)//SKS#DevOps:16335
            {
                BankIDType = 'CPA';
                BankID = mSKS_EFT_FileDetail.DepBankTransit;
                BranchId = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG) //SKS#DevOps:16335
            {
                if(mSKS_EFT_FileDetail.DepSwiftNo)
                {
                    BankIDType = 'SWT';
                    BankID = mSKS_EFT_FileDetail.DepSwiftNo;
                    BranchId = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
                }
                else
                {
                    BankIDType = 'CPA';
                    BankID = mSKS_EFT_FileDetail.DepBankTransit;
                    BranchId = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
                }
            }
            else if((mSKS_EFT_FileDetail.DepBankTransit != '' &&
                    mSKS_EFT_FileDetail.DepSwiftNo == '') &&
                    (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL' ||
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-IWI'   ||//SKS_VSTS_14192
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'IWI-USD'))        //SKS#DevOps:21016
            {
                BankIDType = 'ABA';
                BankID = mSKS_EFT_FileDetail.DepBankTransit;
            }
            else if(countryRegion == 'CA' &&
                   (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI ||      //SKS_VSTS_13900
                    mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'IWI-USD'))           //SKS#DevOps:21016
            {
                if(mSKS_EFT_FileDetail.DepSwiftNo != '')
                {
                    BankIDType = 'SWT';
                    BankID = mSKS_EFT_FileDetail.DepSwiftNo;
                }
                BranchId = mSKS_EFT_FileDetail.DepBankTransit;
            }
            else
            {
                BankIDType = 'SWT';
                BankID = mSKS_EFT_FileDetail.DepSwiftNo;
                BranchId = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHIATNL)
            {
                //          Name (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35, false);

                //          BranchID
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BranchID', mSKS_EFT_FileDetail_BenBank.BenBankBranch, 35, false);

                //          BankIDType (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', BankIDType, 0, false);

                //          PostAddr
                this.node_RcvrBankInfoPostAddr(nodeBankInfo);

                //          BankID
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', BankID, 0, false);
            }
            else
            {
                //          BankIDType (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BankIDType', BankIDType, 0, false);
    
                //          Name (Attribute)
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35, false);
    
                //          BranchID
                SKS_EFT_Format::xmlsetAttributeText(nodeBankInfo, 'BranchID', BranchId, 35, false);
    
                //          BankID
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankID', BankID, 0, false);
    
                //          PostAddr
                this.node_RcvrBankInfoPostAddr(nodeBankInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrParty</Name>
				<Source><![CDATA[
    private void node_RcvrParty(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  RcvrParty
        //      Name
        //          Name1
        //      RefInfo
        //          RefType (Attribute)
        //          RefID
        //      PostAddr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRcvrParty;
        XmlElement nodeName;
        XmlElement nodeRefInfo;
        XmlElement nodeContactInfo;
        str value;
        str value2;
        int fieldLength;
        container conEMail;
    
        //  RcvrParty
        nodeRcvrParty = _nodePmtRec.appendChild(xmlDoc.createElement('RcvrParty'));
    
        //      Name
        if(mRemittanceName || mSKS_EFT_FileDetail.AccountName) // Not always required. Not mandatory for PDP
        {
            nodeName = nodeRcvrParty.appendChild(xmlDoc.createElement('Name'));
    
            //          Name1
            switch(mSKS_EFT_FileDetail.PaymSpec)
            {
                case #ACHIAT:
                case #ACHIATNL:
                case 'WIRE-INTL':
                case 'WIRE-IWI':
                case 'IWI-USD':
                    fieldLength = 35;
                    break;
                default:
                    fieldLength = 60;
                    break;
            }
            if(mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', mRemittanceName, fieldLength);
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), fieldLength);
            }
        }
        
        //      RefInfo
        nodeRefInfo = nodeRcvrParty.appendChild(xmlDoc.createElement('RefInfo'));
    
        //          RefType (Attribute)
        SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', 'VN');
    
        value2 = SKS_EFT_Format::getCodelookupvalue('TradingPartnerId', mSKS_EFT_FileDetail.RecId);

        if(value2 != '')
        {
            value = this.CharacterReplacement(value2);
        }        
        else
        {
            value = mSKS_EFT_FileDetail.AccountNum;
        }
    
        //          RefID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', value,30);

        //      PostAddr
        this.node_RcvrPartyPostAddr(nodeRcvrParty);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCR)
        {
            //      ContactInfo
            nodeContactInfo = nodeRcvrParty.appendChild(xmlDoc.createElement('ContactInfo'));
    
            //          EmailAddr
            conEMail = this.getEMail();
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeContactInfo, 'EmailAddr', conPeek(conEMail,2));
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DeliveryParty</Name>
				<Source><![CDATA[
    private void node_DeliveryParty(XmlElement _nodePmtRec)
    {
        //------------------------------------------------------------------------------------------------------
        //  DeliveryParty
        //      Name
        //          Name1
        //      PostAddr
        //          Addr1
        //          Addr2
        //          City
        //          StateProv
        //          PostalCode
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDeliveryParty;
        XmlElement nodeName;
        XmlElement nodePostAddr;
        
    
        //  RcvrParty
        nodeDeliveryParty = _nodePmtRec.appendChild(xmlDoc.createElement('DeliveryParty'));
    
        //      Name
        if(mRemittanceName || mSKS_EFT_FileDetail.AccountName) // Not always required. Not mandatory for PDP
        {
            nodeName = nodeDeliveryParty.appendChild(xmlDoc.createElement('Name'));
    
            //          Name1
            if(mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', mRemittanceName, 60);
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeName, 'Name1', this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), 60);
            }
        }

        //      PostAddr
        // Only create if address data is populated
        if (mRemittanceAdrLine1 || mRemittanceAdrLine2 || mRemittanceCity ||
            mRemittanceState || mRemittanceZipCode || mRemittanceCountryRegionId)
        {
            //  PostAddr
            nodePostAddr = nodeDeliveryParty.appendChild(xmlDoc.createElement('PostAddr'));
    
            //          Addr1
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', mRemittanceAdrLine1, 55, false);
    
            //          City
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', mRemittanceCity, 30, false);
    
            //          StateProv
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', mRemittanceState, 3, false);
    
            //          PostalCode
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.validateZipCode(mRemittanceZipCode), 9, false);
    
            //          Country
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', mRemittanceCountryRegionId, 2, false);
        }        
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrPartyPostAddr_Custom</Name>
				<Source><![CDATA[
    /// <summary>
    ///Custom method for Northern Tool method.
    /// </summary>
    /// <param name="_nodeRcvrParty">_nodeRcvrParty</param>
    /// <param name="_SKS_EFT_FileFormatPaymSpec">_SKS_EFT_FileFormatPaymSpec</param>
    /// <param name="_RemittanceAdrLine1">_RemittanceAdrLine1</param>
    /// <param name="_RemittanceAdrLine2">_RemittanceAdrLine2</param>
    /// <param name="_RemittanceStreet">_RemittanceStreet</param>
    /// <param name="_RemittanceCity">_RemittanceCity</param>
    /// <param name="_RemittanceState">_RemittanceState</param>
    /// <param name="_RemittanceZipCode">_RemittanceZipCode</param>
    /// <param name="_RemittancePostBox">_RemittancePostBox</param>
    /// <param name="_RemittanceCountryRegionId">_RemittanceCountryRegionId</param>
    /// <param name="_RemittanceAdrLine3">_RemittanceAdrLine3</param>
    /// <param name="_SKS_EFT_FileDetail">_SKS_EFT_FileDetail</param>
    /// <param name="_xmldoc">_xmldoc</param>
    /// <param name="_result">_result</param>
    public void node_RcvrPartyPostAddr_Custom(XmlElement _nodeRcvrParty, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec, str _RemittanceAdrLine1, str _RemittanceAdrLine2, str _RemittanceStreet, str _RemittanceCity, str _RemittanceState, str _RemittanceZipCode, str _RemittancePostBox, str _RemittanceCountryRegionId, str _RemittanceAdrLine3, SKS_EFT_FileDetail _SKS_EFT_FileDetail, XmlDocument _xmldoc, EventHandlerResult _result)
    {
        XmlElement nodePostAddr;
        int fieldLength;
        Array       vendAddrArray = new Array(Types::String);

        SKS_EFT_CustReimbursementPaym       lSKS_EFT_CustReimbursementPaym;

        LogisticsPostalAddress  lRemittancePostalAddress;

        if(_SKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP)
        {
            lSKS_EFT_CustReimbursementPaym = SKS_EFT_CustReimbursementPaym::find(_SKS_EFT_FileDetail.AccountCompany, _SKS_EFT_FileDetail.AccountNum, _SKS_EFT_FileDetail.PaymMode, _SKS_EFT_FileDetail.PaymSpec, _SKS_EFT_FileDetail.DepBankAccountId);

            if (lSKS_EFT_CustReimbursementPaym.WBeneUseCustAddr && lSKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation)
            {
                changecompany(lSKS_EFT_CustReimbursementPaym.CustCompany)
                {
                    select firstonly lRemittancePostalAddress
                            where lRemittancePostalAddress.Location == lSKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation;
                }

                vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
                _RemittanceAdrLine1 = '';
                _RemittanceAdrLine2 = '';
    
                if(vendAddrArray.exists(1))
                {
                    _RemittanceAdrLine1 = vendAddrArray.value(1);
                    if (vendAddrArray.exists(2))
                    {
                        _RemittanceAdrLine2 = vendAddrArray.value(2);
                    }
                    if (vendAddrArray.exists(3))
                    {
                        _RemittanceAdrLine3 = vendAddrArray.value(3);
                    }
                }

                _RemittanceCity = lRemittancePostalAddress.City;
                _RemittanceState = lRemittancePostalAddress.State;
                _RemittanceZipCode = lRemittancePostalAddress.ZipCode;
                _RemittancePostBox = lRemittancePostalAddress.PostBox;
                _RemittanceCountryRegionId = lRemittancePostalAddress.CountryRegionId;
                _RemittanceStreet = lRemittancePostalAddress.Street;
            }
        }


        fieldLength = 55;

        vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(_RemittanceStreet,3);

        if(vendAddrArray.exists(1))
        {
            _RemittanceAdrLine1 = vendAddrArray.value(1);
            if (vendAddrArray.exists(2))
            {
                _RemittanceAdrLine2 = vendAddrArray.value(2);
            }
        }

        if(_SKS_EFT_FileFormatPaymSpec.PaymSpec == 'CHK-ND')
        {
            // Only create if address data is populated
            if(_RemittanceAdrLine1 || _RemittanceAdrLine2 || _RemittanceCity || _RemittancePostBox ||
               _RemittanceState || _RemittanceZipCode || _RemittanceCountryRegionId || _RemittanceAdrLine3)
            {
                //  PostAddr
                nodePostAddr = _nodeRcvrParty.appendChild(_xmlDoc.createElement('PostAddr'));
    
                //          Addr1
                if(_RemittancePostBox)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'Addr1', _RemittancePostBox, 0, false);
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'Addr1', _RemittanceAdrLine1, 55, false);
                }
    
                //          Addr2
                if(_RemittancePostBox)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'Addr2', _RemittanceStreet, fieldLength, false);
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'Addr2', _RemittanceAdrLine2, fieldLength, false);
                }

                if(_RemittanceAdrLine3)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'Addr3', _RemittanceAdrLine3, 0, false);
                }
                //          City
                SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'City', _RemittanceCity, 30, false);
    
                //          StateProv
                SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'StateProv', _RemittanceState, 3, false);
    
                //          PostalCode
                SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'PostalCode', strKeep(_RemittanceZipCode, '0123456789abcdefghijklmnopqrstuvwxyz'), 9, false);
    
                //          Country
                SKS_EFT_Format::xmlAppendChildNodeText(_xmlDoc, nodePostAddr, 'Country', _RemittanceCountryRegionId, 2, false);
            }
            _result.result(true);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrPartyPostAddr</Name>
				<Source><![CDATA[
    private void node_RcvrPartyPostAddr(XmlElement _nodeRcvrParty)
    {
        //------------------------------------------------------------------------------------------------------
        //      PostAddr
        //          Addr1
        //          Addr2
        //          City
        //          StateProv
        //          PostalCode
        //          Country
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePostAddr;
        int fieldLength;
        str AddrLine1;
        str customerID = SKS_PP_Setup::find().RegCustomerID;
    
        EventHandlerResult result = new EventHandlerResult();
        
        if((mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP) && customerID == 'f4e21a')//DevOps20352
        {
            this.node_RcvrPartyPostAddr_Custom(_nodeRcvrParty, mSKS_EFT_FileFormatPaymSpec, mRemittanceAdrLine1, mRemittanceAdrLine2, mRemittanceStreet, mRemittanceCity, mRemittanceState, mRemittanceZipCode, mRemittancePostBox, mRemittanceCountryRegionId, mRemittanceAdrLine3, mSKS_EFT_FileDetail, xmlDoc, result);           //SKS#DevOps:16928
        }
                
        if(!result.result())
        {
            if((mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP) && mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'WIRE-INTL')        //SKS#DevOps:15571
            {
                // Only create if address data is populated
                if(mRemittanceAdrLine1 || mRemittanceAdrLine2 || mRemittanceCity ||
                   mRemittanceState || mRemittanceZipCode || mRemittanceCountryRegionId || mRemittanceAdrLine3)
                {
                    //  PostAddr
                    nodePostAddr = _nodeRcvrParty.appendChild(xmlDoc.createElement('PostAddr'));

                    if(strLen(mRemittanceName) > 35)
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', subStr(mRemittanceName, 36, 35), 35, false);
                    }
                    else
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', mRemittanceAdrLine1, 55, false);
                    }
                    if(strLen(mRemittanceName) > 70)
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', subStr(mRemittanceName, 71, 35), 35, false);
                    }
                    else
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', mRemittanceAdrLine2, 55, false);
                    }

                    //          City
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', mRemittanceCity, 30, false);
    
                    //          StateProv
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', mRemittanceState, 3, false);
    
                    //          PostalCode
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.validateZipCode(mRemittanceZipCode), 9, false);
    
                    //          Country
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', mRemittanceCountryRegionId, 2, false);
                }
            }
            else if((mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP) && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CCR)
            {
                // Only create if address data is populated
                if(mRemittanceAdrLine1 || mRemittanceAdrLine2 || mRemittanceCity ||
                   mRemittanceState || mRemittanceZipCode || mRemittanceCountryRegionId || mRemittanceAdrLine3)
                {
                    //  PostAddr
                    nodePostAddr = _nodeRcvrParty.appendChild(xmlDoc.createElement('PostAddr'));
    
                    //          Addr1
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #MTS:
                        case #IAT:
                            fieldLength = 35;
                            break;
                        default:
                            fieldLength = 55;
                            break;
                    }
                    
                    AddrLine1 = strLRTrim(mRemittancePostBox + ' ' + mRemittanceBuildingComplement + ' ' + mRemittanceStreetNum + ' ' + mRemittanceAdrLine1);//DevOps20469
                    if(AddrLine1 && 
                      (mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'CHK-SD'||
                       mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'CHK-ND'))      //SKS#DevOps:16140, 16782, 19993
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', AddrLine1);
                    }
                    else
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', mRemittanceAdrLine1, fieldLength, false);
                    }

                    if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #IAT)
                    {
                        //          Addr2
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', mRemittanceAdrLine2, fieldLength, false);
                        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'CHK-ND')//DevOpsDevOps20469
                        {
                            //          Addr2
                            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr3', mRemittanceAdrLine3, fieldLength, false);
                        }
                    }

                    //          City
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #MTS:
                            fieldLength = 25;
                            break;
                        default:
                            fieldLength = 30;
                            break;
                    }
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', mRemittanceCity, fieldLength, false);
    
                    //          StateProv
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', mRemittanceState, 3, false);
    
                    //          PostalCode
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.validateZipCode(mRemittanceZipCode), 9, false);
    
                    //          Country
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', mRemittanceCountryRegionId, 2, false);
                }
            }
            else if((mModule == SKS_EFT_Module::AP || mModule == SKS_EFT_Module::CNP) && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCR) // CCR uses the Originator Zip as a PIN
            {
                //  PostAddr
                nodePostAddr = _nodeRcvrParty.appendChild(xmlDoc.createElement('PostAddr'));
    
                //          PostalCode
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(this.validateZipCode(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)), 5, false);
            }
            else
            {
                select msks_EFT_FileDetail_BankAddress where
                        msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                        && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::CustBankAddress;
            
                //postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct Debit');
                //this.node_PostAddr_Debit(_nodeRcvrParty, postalAddress);

                if(msks_EFT_FileDetail_BankAddress.Addr || msks_EFT_FileDetail_BankAddress.Addr2 || msks_EFT_FileDetail_BankAddress.City || msks_EFT_FileDetail_BankAddress.State || msks_EFT_FileDetail_BankAddress.ZipCode || msks_EFT_FileDetail_BankAddress.CountryRegionId)
                {
                    //  PostAddr
                    nodePostAddr = _nodeRcvrParty.appendChild(xmlDoc.createElement('PostAddr'));
    
                    //          Addr1
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #MTS:
                            fieldLength = 35;
                            break;
                        default:
                            fieldLength = 55;
                            break;
                    }
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', msks_EFT_FileDetail_BankAddress.Addr, fieldLength, false);
    
                    //          Addr2
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', msks_EFT_FileDetail_BankAddress.Addr2, fieldLength, false);
    
                    //          City
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #MTS:
                            fieldLength = 25;
                            break;
                        default:
                            fieldLength = 30;
                            break;
                    }
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.City), fieldLength, false);
    
                    //          StateProv
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.State), 3, false);
    
                    //          PostalCode
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(this.validateZipCode(msks_EFT_FileDetail_BankAddress.ZipCode)), 9, false);
    
                    //          Country
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId), 2, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RefInfo</Name>
				<Source><![CDATA[
    private void node_RefInfo(XmlElement _nodePmtRec)
    {
        XmlElement nodeRefInfo;
        str refTypeCd, value, chkAddr;

        refTypeCd = SKS_EFT_Format::getCodelookupvalue('ReferenceTypeCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        value = SKS_EFT_Format::getCodelookupvalue('FeesIndicator', mSKS_EFT_FileDetail.RecId);
        chkAddr = SKS_EFT_Format::getCodelookupvalue('CodeID', mSKS_EFT_FileDetail.RecId); //SKS_DevOps_16098
    
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHIATNL)
        {
            nodeRefInfo = _nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));

            SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', 'FI');

            if(mSKS_EFT_FileDetail.CurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode)     //SKS_VSTS_14734
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', 'FF');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', 'VF');
            }

        }

        value = this.getBankPurposeCode();

        if((value || purpCode)&&
        (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NRG ||
	       mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG))
        {
            
            nodeRefInfo = _nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));
            
            SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', 'BE');
            
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', purpCode);
            
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #URG)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefDesc', value);
            }
        }

        else if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == #ACHIAT)        //SKS_VSTS_14753--->
        {

            nodeRefInfo = _nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));

            SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', refTypeCd);//DevOps20213

            if((mSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.CurrencyCode) &&       //SKS#DevOps:20875 //Transaction currency = Bank Account currency
               (mSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.DepBankCurrency))      //Transaction currency = Vendor Bank account currency
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', 'FF');            //All currencys are same -- Fixed to Fixed FF
            }
            else if(mSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.CurrencyCode &&     //Transaction currency = Bank Account currency
                    mSKS_EFT_FileDetail.PaymentCurrencyCode != mSKS_EFT_FileDetail.DepBankCurrency)    //Transaction currency <> Vendor Bank account currency
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', 'FV');            //Vendor Currency is DIfferent -- Fixed to Variable FV
            }
            else if(mSKS_EFT_FileDetail.PaymentCurrencyCode != mSKS_EFT_FileDetail.CurrencyCode &&     //Transaction currency <> Bank Account currency
                    mSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.DepBankCurrency)    //Transaction currency = Vendor Bank account currency            
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', 'VF');            //Bank currency is different  -- Variable to Fixed VF
            }

            //      RefInfo
            nodeRefInfo = _nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));//DevOps20598

            //          RefType (Attribute)
            SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', 'BT');
    
            //          RefID
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', mSKS_EFT_FileDetail.PaymentReference);

        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MTS ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI || //SKS#DevOps:17272
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #IWI_USD) //SKS#DevOps:21016
        {
            value = SKS_EFT_Format::getCodelookupvalue('FeesIndicator', mSKS_EFT_FileDetail.RecId);

            if(value)
            {
                nodeRefInfo = _nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));

                SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', 'WC');

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', value);
            }
        }
        else if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'CHK-ND' && chkAddr) //SKS_DevOps_16098
        {
            nodeRefInfo = _nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));

            SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', '93');

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', chkAddr);
        }
        else if(refTypeCd)
        {
            nodeRefInfo = _nodePmtRec.appendChild(xmlDoc.createElement('RefInfo'));
    
            SKS_EFT_Format::xmlsetAttributeText(nodeRefInfo, 'RefType', this.CharacterReplacement(refTypeCd));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefID', int2str(refID));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RcvrPartyPostAddr_delegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RcvrPartyPostAddr_delegate
    /// </summary>
    /// <param name = "_nodeRcvrParty">_nodeRcvrParty</param>
    /// <param name = "_SKS_EFT_FileFormatPaymSpec">_SKS_EFT_FileFormatPaymSpec</param>
    /// <param name = "_RemittanceAdrLine1">_RemittanceAdrLine1</param>
    /// <param name = "_RemittanceAdrLine2">_RemittanceAdrLine2</param>
    /// <param name = "_RemittanceStreet">_RemittanceStreet</param>
    /// <param name = "_RemittanceCity">_RemittanceCity</param>
    /// <param name = "_RemittanceState">_RemittanceState</param>
    /// <param name = "_RemittanceZipCode">_RemittanceZipCode</param>
    /// <param name = "_RemittancePostBox">_RemittancePostBox</param>
    /// <param name = "_RemittanceCountryRegionId">_RemittanceCountryRegionId</param>
    /// <param name = "_RemittanceAdrLine3">_RemittanceAdrLine3</param>
    /// <param name = "_SKS_EFT_FileDetail">_SKS_EFT_FileDetail</param>
    /// <param name = "_xmldoc">_xmldoc</param>
    /// <param name = "_result">_result</param>
    delegate void node_RcvrPartyPostAddr_delegate(XmlElement _nodeRcvrParty, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec, str _RemittanceAdrLine1, str _RemittanceAdrLine2, str _RemittanceStreet, str _RemittanceCity, str _RemittanceState, str _RemittanceZipCode, str _RemittancePostBox, str _RemittanceCountryRegionId, str _RemittanceAdrLine3, SKS_EFT_FileDetail _SKS_EFT_FileDetail, XmlDocument _xmldoc, EventHandlerResult _result)       //SKS#DevOps:16928
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
    
        //select firstOnly forUpdate sks_eft_fileformat
        //    where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId; //FDD-10590
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = str2Int(mSKS_EFT_FileDetail_Extra.Value); //FDD-10590
            //sks_eft_fileformat.update(); //FDD-10590
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateZipCode</Name>
				<Source><![CDATA[
    private AddressZipCodeId validateZipCode(AddressZipCodeId _zipcode)
    {
        _zipcode = strKeep(_zipcode, '0123456789abcdefghijklmnopqrstuvwxyz');
    
        return _zipcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
        if(mModule == SKS_EFT_Module::AR)//SKS_VSTS_14262
        {
            select * from mSKS_EFT_FileDetail
              order by mSKS_EFT_FileDetail.RecordSection,
                        mSKS_EFT_FileDetail.PaymMode,
                       mSKS_EFT_FileDetail.PaymSpec,
                       mSKS_EFT_FileDetail.EffectiveDate,
                       mSKS_EFT_FileDetail.DepCountryRegionId,
                       mSKS_EFT_FileDetail.RecordType,
                       mSKS_EFT_FileDetail.BankAccountId,
                       mSKS_EFT_FileDetail.AccountNum,
                       mSKS_EFT_FileDetail.PaymentReference,
                       mSKS_EFT_FileDetail.RecId
              where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        }
        else
        {
            //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
            select * from mSKS_EFT_FileDetail
                join mSKS_EFT_FileDetail_VendAddress
                join mSKS_EFT_FileDetail_BenBank
                join mSKS_EFT_FileDetail_Intermediary
                join mSKS_EFT_FileDetail_CreditParty
                join msKS_EFT_FileDetail_Instructions
                  order by mSKS_EFT_FileDetail.RecordSection,
                       mSKS_EFT_FileDetail.PaymMode,
                       mSKS_EFT_FileDetail.BankAccountId,
                       mSKS_EFT_FileDetail.PaymentCurrencyCode,
                       mSKS_EFT_FileDetail.PaymSpec,
                       mSKS_EFT_FileDetail.EffectiveDate,
                       mSKS_EFT_FileDetail.DepCountryRegionId,
                       mSKS_EFT_FileDetail.RecordType,
                       mSKS_EFT_FileDetail.AccountNum,
                       mSKS_EFT_FileDetail.PaymentReference,
                       mSKS_EFT_FileDetail.RecId
              where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                    mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                    mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                    mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                    mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                    mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);

        mRemittanceAdrLine1 = '';
        mRemittanceAdrLine2 = '';
        mRemittanceAdrLine3 = '';
        mRemittanceCity = '';
        mRemittanceBuildingComplement = '';
        mRemittanceCountryRegionId = '';
        mRemittanceName = '';
        mRemittancePostBox = '';
        mRemittanceState = '';
        mRemittanceStreet = '';
        mRemittanceStreetNum = '';
        mRemittanceZipCode = '';

        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0 && mModule == SKS_EFT_Module::AP)
        {
            select firstonly lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);

            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;

            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,3);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
                if (vendAddrArray.exists(3))
                {
                    mRemittanceAdrLine3 = vendAddrArray.value(3);
                }
            }

            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittancePostBox = this.CharacterReplacement(lRemittancePostalAddress.PostBox);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
            mRemittanceBuildingComplement = this.CharacterReplacement(lRemittancePostalAddress.BuildingCompliment);
            mRemittanceStreet = this.CharacterReplacement(SKS_PP_StringFormats::strRemoveCRLF(lRemittancePostalAddress.Street));
            mRemittanceStreetNum = this.CharacterReplacement(lRemittancePostalAddress.StreetNumber);
        }
        else
        {
            //Populate Remittance Information from Vendor eBanking details
            mRemittanceName = mSKS_EFT_FileDetail_VendAddress.BeneName;
            mRemittanceAdrLine1 = mSKS_EFT_FileDetail_VendAddress.BeneAddr;
            mRemittanceAdrLine2 = mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
            mRemittanceAdrLine3 = mSKS_EFT_FileDetail_VendAddress.BeneAddr3;//SKS_VSTS_14288
            mRemittanceCity = mSKS_EFT_FileDetail_VendAddress.BeneCity;
            mRemittanceState = mSKS_EFT_FileDetail_VendAddress.BeneState;
            mRemittanceZipCode = mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_POInfo_delegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method for node_POInfo
    /// </summary>
    /// <param name = "_nodeInvoiceInfo">nodeInvoiceInfo buffer</param>
    /// <param name = "_invSKS_EFT_FileDetail">SKS_EFT_Filedetail buffer</param>
    /// <param name = "_ledgerJournalTrans">LedgerJournalTrans buffer</param>
    /// <param name = "_SKS_EFT_FileFormatPaymSpec">_SKS_EFT_FileFormatPaymSpec buffer</param>
    /// <param name = "_xmldoc">_xmldoc</param>
    /// <param name = "_result">_result</param>    
    delegate void node_POInfo_delegate(XmlElement _nodeInvoiceInfo, SKS_EFT_FileDetail _invSKS_EFT_FileDetail, LedgerJournalTrans _ledgerJournalTrans, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec, XmlDocument _xmldoc, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>