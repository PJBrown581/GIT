<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BANKOFAM_ML316</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_BANKOFAM_ML316 Extends SKS_PP_Format_BankGroup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    //Bank of America Merrill Lunch
    //              01-12       12      Account Number
    //              13-13       1       Record Type Code("O" - Outstanding/"V" - Void)
    //              14-23       10      Check/Serial Number
    //              24-35       12      Amount($$$$$$$$$$¢¢)
    //              36-41       6       Date(MMDDYY)
    //              42-44       3       Filler(Spaces)
    //              45-300      256     Payee Name or Additional Data
    //             301-316      16      Filler(Spaces)
    //
    protected str txtDetail()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        int Mult;
        str ItemType;
        VendTable   lVendTable;
        //SKS_VSTS_13652 -->
        LogisticsPostalAddress  postalAddress;
        BankChequeTable     lBankChequeTable;
        str fullAddress;
        //SKS_VSTS_13652 <-- 

        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'O';
        }
        else
        {
            ItemType = 'V';
            if(mSKS_PP_FileDetail.chkcuryamt < 0)
            {
                Mult = -1;
            }
        }
    
        lVendTable = VendTable::findByCompany(mSKS_PP_FileDetail.ChkCpnyId, mSKS_PP_FileDetail.VendorAccount);
    
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.Chkcuryamt, 12));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //SKS_VSTS_13652 -->
        select BankNegInstRecipientName, RemittanceAddress from lBankChequeTable where lBankChequeTable.SKS_PP_FILENBR == mSKS_PP_FileDetail.FileNbr &&
            lBankChequeTable.ChequeNum == mSKS_PP_FileDetail.ChkRefNbr &&
            lBankChequeTable.AccountID == mSKS_PP_FileDetail.ChkBankAcct;

        if(lBankChequeTable)
        {
            postalAddress  = LogisticsPostalAddress::findRecId(lBankChequeTable.RemittanceAddress);
        }

        fullAddress += postalAddress.street ? strReplace(postalAddress.Street, '\n', ' ') + ' ' : '';
        fullAddress += postalAddress.City  ? postalAddress.City + ',' : '';
        fullAddress += postalAddress.State ? postalAddress.State + ' ' : '';
        fullAddress += postalAddress.ZipCode;

        //SKS_VSTS_13652 <--
        if(mSKS_PP_FileDetail.VendName || fullAddress)
        {
            sb.Append(SKS_PP_StringFormats::strFill(256, mSKS_PP_FileDetail.VendName + ' ' + fullAddress, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(256, lVendTable.DBA, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>