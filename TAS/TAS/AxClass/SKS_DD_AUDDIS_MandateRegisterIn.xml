<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_AUDDIS_MandateRegisterIn</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_AUDDIS_MandateRegisterIn //extends SKS_DD_MandatesBatchInbound
{
    #define.Archive('Archive')
    #define.Error('Error')
    /*
    System.Text.StringBuilder sbErrorMessage;
    RefRecId mRefRecID;

    public void run()
    {
        Batch bat;

        bat = this.parmCurrentBatch();
        mRefRecID = bat.RecId;

        this.ProcessAllDirectories();
    }

    public void ProcessAllDirectories()
    {
        SKS_EB_BankTable locSKS_EB_BankTable;
        SKS_EB_CommProcess locSKS_EB_CommProcess;

        Set locListDirectoriesToProcess;
        List locListFilesToProcess;
        ListEnumerator locFilesToProcessEnum;
        int  directoryCount = 0;
        str  locFilename;

        Object locClassInstance;
        SysDictClass locSysDictClass;
        str  locFormatClassName = '';
        str  locDestPath = '';
        boolean fSuccess = false;

        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct();

        locListDirectoriesToProcess = new Set(Types::AnyType);

        sbErrorMessage = new System.Text.StringBuilder();

        while select crosscompany locSKS_EB_BankTable
            join locSKS_EB_CommProcess
            where locSKS_EB_CommProcess.CommID == locSKS_EB_BankTable.InboundCommId
            && locSKS_EB_CommProcess.BatchJobId == mRefRecID
            && locSKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound
        {
            if(locSKS_EB_BankTable.InboundFileLoc)
            {
                locListDirectoriesToProcess.add(locSKS_EB_BankTable.InboundFileLoc);
            }

            if(directoryCount < locListDirectoriesToProcess.elements())
            {
                directoryCount = locListDirectoriesToProcess.elements();
                changecompany(locSKS_EB_BankTable.company())
                {
                    if(!locSKS_EB_FileHub.runDirectoryExists(locSKS_EB_BankTable.InboundFileLoc))
                    {
                        sbErrorMessage.AppendLine(strFmt("@SKS:SKGInboundFileDirectoryInvalid", locSKS_EB_BankTable.InboundFileLoc, locSKS_EB_BankTable.company(), locSKS_EB_BankTable.BankAccountId));
                        continue;
                    }

                    locListFilesToProcess = locSKS_EB_FileHub.runDirectoryGetFiles(locSKS_EB_BankTable.InboundFileLoc);

                    if(locListFilesToProcess)
                    {
                        if(!locFilesToProcessEnum && locListFilesToProcess.elements() > 0)
                        {
                            locFilesToProcessEnum = locListFilesToProcess.getEnumerator();

                            while(locFilesToProcessEnum.moveNext())
                            {
                                locFilename = locFilesToProcessEnum.current();

                                locSKS_EB_FileHub.setFileName(locFilename);
                                locSKS_EB_FileHub.runFileInquire();

                                locFormatClassName = this.getFormatClass(locFilename, true);
                                if(strLen(locFormatClassName) > 0)
                                {
                                    locSysDictClass = new SysDictClass(className2Id(locFormatClassName));
                                    locClassInstance = locSysDictClass.makeObject(); // Instantiate the class
                                    fSuccess = locSysDictClass.callObject('getFile', locClassInstance, locFilename, true);
                                    if(!fSuccess)
                                    {
                                        sbErrorMessage.AppendLine(locSysDictClass.callObject('getErrorText', locClassInstance));
                                    }
                                }
                                else
                                {
                                    sbErrorMessage.AppendLine(strFmt("@SKS:SKGDDMandateInboundFormatInvalid",locFilename));
                                }

                                locSysDictClass = null;
                                locClassInstance = null;
                                fSuccess = false;
                                locFormatClassName = '';

                                if(sbErrorMessage.get_Length() != 0) //Move the file to Error directory
                                {
                                    locSKS_EB_FileHub.runDirectoryCreate(System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFilename), #Error));
                                    locDestPath = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFileName), #Error, System.IO.Path::GetFileName(locFileName));
                                }
                                else //Move the file to Archive directory
                                {
                                    locSKS_EB_FileHub.runDirectoryCreate(System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFilename), #Archive));
                                    locDestPath = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFileName), #Archive, System.IO.Path::GetFileName(locFileName));
                                }
                                locSKS_EB_FileHub.runFileMoveTo(locDestPath);
                                if(sbErrorMessage.Length > 0)
                                {
                                    error(sbErrorMessage.ToString());
                                    sbErrorMessage.Clear();
                                }
                            }

                            locFilesToProcessEnum = null;
                            locListFilesToProcess = null;
                        }
                    }
                }
            }
        }
    }

    private str getFormatClass(str _filePathName, boolean _serverPath)
    {
        str retValue = '';

        SysDictClass locSysDictClass;
        Object locClassInstance;
        str locClassName = '';
        str locMatchedClass = '';

        List locListInboundFormatClass;
        ListEnumerator locListInboundClassEnum;

        locListInboundFormatClass = new DictClass(classnum(SKS_DD_InboundFormat)).extendedBy();

        locListInboundClassEnum = locListInboundFormatClass.getEnumerator();

        while(locListInboundClassEnum.moveNext())
        {
            locSysDictClass = new SysDictClass(locListInboundClassEnum.current());

            locClassName = locSysDictClass.name();
            if(!strContains(locClassName,'AUDDIS'))
            {
                continue;
            }
            locClassInstance = locSysDictClass.makeObject(); // Instantiate the class
            locMatchedClass = locSysDictClass.callObject('getFormatId', locClassInstance, _filePathName, _serverPath);

            if(strLen(locMatchedClass) > 0)
            {
                retValue = locMatchedClass;
            }

        }
        return retValue;
    }
*/
}
]]></Declaration>
		<Methods />
	</SourceCode>
</AxClass>