<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LedgerJournalTableFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_LedgerJournalTableFormEventHandler
{
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SKSChangeEFTStatus_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTable, SKSChangeEFTStatus), FormControlEventType::Clicked)]
    public static void SKSChangeEFTStatus_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        int selectedCount = 0;
        boolean multiSelect = false;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTable TmpledgerJournalTable;
        FormDataSource LedgerJournalTable_ds = formRun.dataSource();
        //FDD - 11060 -->
        Map splitJournalsMap = new Map(Types::Record, Types::String);
        SKS_DD_CustVendPaymExceptionList custVendPaymExceptionList;
        // FDD - 11060

        for(TmpledgerJournalTable = LedgerJournalTable_ds.getFirst(true) ? LedgerJournalTable_ds.getFirst(true) : LedgerJournalTable_ds.cursor(); TmpledgerJournalTable; TmpledgerJournalTable = LedgerJournalTable_ds.getNext())
        {
            selectedcount++;
        }

        if(selectedCount > 1)
        {
            multiSelect = true;
        }

        for(ledgerJournalTable = LedgerJournalTable_ds.getFirst(true) ? LedgerJournalTable_ds.getFirst(true) : LedgerJournalTable_ds.cursor(); ledgerJournalTable; ledgerJournalTable = LedgerJournalTable_ds.getNext())
        {
            try
            {
                if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
                {
                    if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable, false, multiSelect))
                    {
                        ledgerJournalTable.update();
                    }
                }
                else
                {
                    if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable, false, multiSelect))
                    {
                        ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::No;

                        if(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)
                        {
                            if(SKS_Table_LedgerJournalTable::checkCustReimbursement(ledgerJournalTable))
                            {
                                SKS_EFT_CNPJournalValidate::validateSet(ledgerJournalTable,false,false);
                            }
                            else
                            {
                                SKS_EFT_JournalValidate::validateSet(ledgerJournalTable.JournalType,ledgerJournalTable);
                                SKS_EB_SplitJournalByDate splitJournalByDate = new SKS_EB_SplitJournalByDate();
                                splitJournalsMap = splitJournalByDate.splitJournalLines(ledgerJournalTable);
                            }
                        }
                                               

                        select firstonly RecId
                        from custVendPaymExceptionList
                        where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum
                            && custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

                        if(custVendPaymExceptionList)
                        {
                            ledgerJournalTable.SKS_EFT_JournalState  = SKS_EFT_JournalState::Errors;
                        }

                        ledgerJournalTable.update();

                        if(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment && !SKS_Table_LedgerJournalTable::checkCustReimbursement(ledgerJournalTable))
                        {
                            SKS_Table_LedgerJournalTable::iterateSplitJournal(splitJournalsMap, ledgerJournalTable);
                        }

                        if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                        {
                            info("@SKS2025");
                        }
                    }
                }
            }
            catch{}
        }
        LedgerJournalTable_ds.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSValidateEFT_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTable, SKSValidateEFT), FormControlEventType::Clicked)]
    public static void SKSValidateEFT_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        LedgerJournalTable ledgerJournalTable = formRun.dataSource().cursor();
        FormDataSource LedgerJournalTable_ds = formRun.dataSource();
        boolean validateSet;
        LedgerJournalFormTable journalFormTable;
        journalFormTable = formRun.journalForm();
        SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();
        switch(journalFormTable.journalTypeId())
        {
            case LedgerJournalType::Payment:
                validateSet = SKS_EFT_APJournalValidate::validateSet(ledgerJournalTable,false,true,false,true,lSKS_EFT_Setup.APFormatValidMultiThread);
                break;
            case LedgerJournalType::CustPayment:
                //validateSet = SKS_EFT_ARJournalValidate::validateSet(ledgerJournalTable,true);
                if(SKS_Table_LedgerJournalTable::checkCustReimbursement(ledgerJournalTable))
                {
                    //TODO: MULTITHREAD? See the AR's SKS_EFT_ARJournalValidate::validateSet 5 lines down.  It has another param "DDFormatValidMultiThread"
                    validateSet = SKS_EFT_CNPJournalValidate::validateSet(ledgerJournalTable,false,false);
                }
                else
                {
                    validateSet = SKS_EFT_ARJournalValidate::validateSet(ledgerJournalTable,false,false, lSKS_EFT_Setup.DDFormatValidJournal, lSKS_EFT_Setup.DDFormatValidMultiThread); //FDD - 11060.
                }
                break;
            case LedgerJournalType::Daily:
                validateSet = SKS_EFT_BTBJournalValidate::validateSet(ledgerJournalTable,false,false); //FDD - 11060.
                break;
        }

        if(validateSet)
        {
            if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
            {
                ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Ready;
            }
        }
        else
        {
            if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready)
            {
                ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
            }
        }

        if (LedgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready)
        {
            info("@SYS17146");
        }

        ledgerJournalTable.update();
        formRun.bookRefresh();
        LedgerJournalTable_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSChangeEFTStatusAuto_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTable, SKSChangeEFTStatusAuto), FormControlEventType::Clicked)]
    public static void SKSChangeEFTStatusAuto_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans lLedgerJournalTrans;
        FormRun formRun = sender.formRun();
        LedgerJournalTable ledgerJournalTable = formRun.dataSource().cursor();
        FormDataSource LedgerJournalTable_ds = formRun.dataSource();

        if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable))
            {
                ledgerJournalTable.update();
                formRun.bookRefresh();
                ledgerJournalTable_DS.research(true);
            }
        }
        else
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable, true))
            {
                ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::Yes;
                ledgerJournalTable.update();

                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                {
                    info("@SKS2025");
                    select lLedgerJournalTrans where lLedgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;
                    SKS_EFT_Processing::PostFromAutoCreate(lLedgerJournalTrans);
                }
                formRun.bookRefresh();
                ledgerJournalTable_DS.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSChangeCNPStatusAuto_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LedgerJournalTable, SKSChangeCNPStatusAuto), FormControlEventType::Clicked)]
    public static void SKSChangeCNPStatusAuto_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans lLedgerJournalTrans;
        FormRun formRun = sender.formRun();
        LedgerJournalTable ledgerJournalTable = formRun.dataSource().cursor();
        FormDataSource LedgerJournalTable_ds = formRun.dataSource();

        if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable))
            {
                ledgerJournalTable.update();
                formRun.bookRefresh();
                ledgerJournalTable_DS.research(true);
            }
        }
        else
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable, true))
            {
                ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::Yes;
                ledgerJournalTable.update();

                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                {
                    info("@SKS2025");
                    select lLedgerJournalTrans where lLedgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;
                    SKS_EFT_Processing::PostFromAutoCreate(lLedgerJournalTrans);
                }
                formRun.bookRefresh();
                ledgerJournalTable_DS.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ChangeBankTransferStatusAuto_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LedgerJournalTable, ChangeBankTransferStatusAuto), FormControlEventType::Clicked)]
    public static void ChangeBankTransferStatusAuto_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans lLedgerJournalTrans;
        FormRun formRun = sender.formRun();
        LedgerJournalTable ledgerJournalTable = formRun.dataSource().cursor();
        FormDataSource LedgerJournalTable_ds = formRun.dataSource();

        if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable))
            {
                ledgerJournalTable.update();
                formRun.bookRefresh();
                ledgerJournalTable_DS.research(true);
            }
        }
        else
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable, true))
            {
                ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::Yes;
                ledgerJournalTable.update();

                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                {
                    info("@SKS2025");
                    select lLedgerJournalTrans where lLedgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum;
                    SKS_EFT_Processing::PostFromAutoCreate(lLedgerJournalTrans);
                }
                formRun.bookRefresh();
                ledgerJournalTable_DS.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSChangeDDStatusAuto_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// SKS_FDD_11060
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTable, SKSChangeDDStatusAuto), FormControlEventType::Clicked)]
    public static void SKSChangeDDStatusAuto_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans lLedgerJournalTrans;
        FormRun formRun = sender.formRun();
        LedgerJournalTable ledgerJournalTable;
        ledgerJournalTable = formRun.dataSource().cursor();
        FormDataSource LedgerJournalTable_ds = formRun.dataSource();
        SKS_DD_CustVendPaymExceptionList    custVendPaymExceptionList;
        SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();
        LedgerJournalTable  ledgerJournalTableMaster; //11060
        Map                 splitJournalsMap = new Map(Types::Record, Types::String); //SKS_FDD_11060

        if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable))
            {
                ledgerJournalTable.update();
                formRun.bookRefresh();
                ledgerJournalTable_DS.research(true);
            }
        }
        else
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable, true))
            {
                ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::Yes;

                SKS_EB_SplitJournalByDate   splitJournalByDate = new SKS_EB_SplitJournalByDate();

                for(ledgerJournalTable = getFirstSelection(ledgerJournalTable_Ds); ledgerJournalTable ; ledgerJournalTable = ledgerJournalTable_Ds.getNext())
                {
                    ledgerJournalTableMaster = ledgerJournalTable;
                    splitJournalsMap = splitJournalByDate.splitJournalLines(ledgerJournalTable);
                    SKS_EFT_ARJournalValidate::validateSet(ledgerJournalTableMaster,false,true,lSKS_EFT_Setup.DDFormatValidJournal,lSKS_EFT_Setup.DDFormatValidMultiThread);

                    select firstonly RecId from custVendPaymExceptionList
                        where custVendPaymExceptionList.JournalId == ledgerJournalTableMaster.JournalNum &&
                        custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

                    if (custVendPaymExceptionList)
                    {
                        ledgerJournalTableMaster.SKS_EFT_JournalState  = SKS_EFT_JournalState::Errors;
                    }
                    ledgerJournalTableMaster.update();
                    SKS_Table_LedgerJournalTable::iterateSplitJournal(splitJournalsMap, ledgerJournalTable); // SKS_FDD_105990
                }

                if(ledgerJournalTableMaster.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                {
                    info("@SKS2025");
                    select lLedgerJournalTrans where lLedgerJournalTrans.JournalNum == ledgerJournalTableMaster.JournalNum;
                    SKS_EFT_Processing::PostFromAutoCreate(lLedgerJournalTrans);
                }
                formRun.bookRefresh();
                ledgerJournalTable_DS.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_Post_enableButtonsActive</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(LedgerJournalTable), formMethodStr(LedgerJournalTable, enableButtonsActive))]
    public static void LedgerJournalTable_Post_enableButtonsActive(XppPrePostArgs args)
    {
        LedgerJournalFormTable journalFormTable;
        FormRun formRun = args.getThis();
        LedgerJournalTable ledgerJournalTable = formRun.dataSource().cursor();
        LedgerJournalName ledgerJournalName = ledgerJournalTable.ledgerJournalName();
        FormDesign formDesign = formRun.design(0);
        FormControl ledgerJournalTable_SKS_EFT_JournalState = formDesign.controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFT_JournalState));
        FormButtonControl sksChangeEFTStatus = formDesign.controlName(formControlStr(LedgerJournalTable, SKSChangeEFTStatus));
        FormButtonControl sksValidateEFT = formDesign.controlName(formControlStr(LedgerJournalTable, SKSValidateEFT));
        FormMenuButtonControl eftActions = formDesign.controlName(formControlStr(LedgerJournalTable, EFTActions));
        FormControl sksChangeEFTStatusAuto = formDesign.controlName(formControlStr(LedgerJournalTable, SKSChangeEFTStatusAuto));
        FormControl sksChangeDDStatusAuto = formDesign.controlName(formControlStr(LedgerJournalTable, SKSChangeDDStatusAuto));
        FormControl btbChangeBankTransferStatusAuto = formDesign.controlName(formControlStr(LedgerJournalTable, ChangeBankTransferStatusAuto));
        FormControl sksChangeCNPStatusAuto = formDesign.controlName(formControlStr(LedgerJournalTable, SKSChangeCNPStatusAuto));
        

        journalFormTable = formRun.journalForm(); //LedgerJournalFormTable::construct(formRun);
        boolean visibleProperty = false;
        SKS_EFT_Setup lSKS_EFT_Setup;

        switch (journalFormTable.journalTypeId())
        {
            case LedgerJournalType::Payment:
                visibleProperty = true;
                eftActions.text("@SKS1623");
                sksValidateEFT.text("@SKS1624");
                sksValidateEFT.helpText("@SKS1625");
                sksChangeEFTStatus.text("@SKS1439");
                sksChangeEFTStatus.helpText("@SKS1438");
                break;
            case LedgerJournalType::CustPayment:
                visibleProperty = true;
                eftActions.text("@SKS4149");
                eftActions.helpText("@SKS4149");
                sksValidateEFT.text("@SKS4151");
                sksValidateEFT.helpText("@SKS4150");
                sksChangeEFTStatus.text("@SKS4152");
                sksChangeEFTStatus.helpText("@SKS4153");
                break;
            default:
                break;
        }

        if(formRun.args().menuItemName() == menuItemDisplayStr(SKS_BTB_BankTransferJournal))
        {
            visibleProperty = true;
            eftActions.text('Bank transfer actions');
            eftActions.helpText('Bank transfer actions');
            sksValidateEFT.text('Validate bank transfer');
            sksValidateEFT.helpText('Validate bank transfer transaction ready for transfer');
            sksChangeEFTStatus.text('Change Bank to bank transfer status – Send file later');
            sksChangeEFTStatus.helpText('');

            FormComboBoxControl fcb = ledgerJournalTable_SKS_EFT_JournalState as FormComboBoxControl;
            fcb.label('Transfer state');

            select firstOnly BTBCreateSendLater, BTBAutoCreate from lSKS_EFT_Setup;

            sksChangeEFTStatus.visible(visibleProperty);

            if(lSKS_EFT_Setup.BTBCreateSendLater == NoYes::Yes)
            {
                SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable , sksChangeEFTStatus, false);
            }
            else
            {
                sksChangeEFTStatus.enabled(false);
            }

            btbChangeBankTransferStatusAuto.visible(lSKS_EFT_Setup.BTBAutoCreate);

            if((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready ||
                ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors) &&
                sksChangeEFTStatus.enabled() == true && lSKS_EFT_Setup.BTBAutoCreate == NoYes::Yes)
            {
                btbChangeBankTransferStatusAuto.enabled(true);
            }
            else
            {
                btbChangeBankTransferStatusAuto.enabled(false);
            }
        }
        else
        {
            btbChangeBankTransferStatusAuto.visible(false);
            btbChangeBankTransferStatusAuto.enabled(false);
            // EFT+ Change state button
            sksChangeEFTStatus.visible(visibleProperty);
            SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable , sksChangeEFTStatus, false);
        }
        // EFT+ Journal state
        ledgerJournalTable_SKS_EFT_JournalState.visible(visibleProperty);
                
        // EFT+ Validate button
        sksValidateEFT.visible(visibleProperty);
        SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable , sksValidateEFT, true);

        // EFT+ Action buttons
        eftActions.visible(visibleProperty);
        eftActions.enabled(sksValidateEFT.enabled()); // This will be the same as EFT+ validate button

        // EFT+ Change state Auto Create button for AP only
        if(journalFormTable.journalTypeId() == LedgerJournalType::Payment)
        {
            select firstOnly APAutoCreate from lSKS_EFT_Setup;
            sksChangeEFTStatusAuto.visible(lSKS_EFT_Setup.APAutoCreate);

            if((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors) &&
                sksChangeEFTStatus.enabled() == true)
            {
                sksChangeEFTStatusAuto.enabled(true);
            }
            else
            {
                sksChangeEFTStatusAuto.enabled(false);
            }
        }
        else
        {
            sksChangeEFTStatusAuto.visible(false);
            sksChangeEFTStatusAuto.enabled(false);
        }

        if(journalFormTable.journalTypeId() == LedgerJournalType::CustPayment)
        {
            if(LedgerJournalName::find(ledgerJournalTable.JournalName).SKS_CNP_CustReimbursementJournal)
            {
                eftActions.text('Customer reimbursement actions');
                eftActions.helpText('Customer reimbursement actions');
                sksValidateEFT.text('Validate customer reimbursement');
                sksValidateEFT.helpText('Validate customer reimbursement transactions are ready for transfer.');
                sksChangeEFTStatus.text('Change Customer reimbursement status – Send file later');
                sksChangeEFTStatus.helpText('Change Customer reimbursement status – Send file later');
                sksChangeDDStatusAuto.visible(false);
                select firstOnly CNPAutoCreate, CNPCreateSendLater from lSKS_EFT_Setup;
                sksChangeCNPStatusAuto.visible(lSKS_EFT_Setup.CNPAutoCreate);

                sksChangeEFTStatus.enabled(lSKS_EFT_Setup.CNPCreateSendLater
                                           && (!ledgerJournalName.WorkflowApproval || ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Approved));
                
                sksChangeCNPStatusAuto.enabled(lSKS_EFT_Setup.CNPAutoCreate
                                               && (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
                                               && (!ledgerJournalName.WorkflowApproval || ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Approved));
            }
            else
            {
                sksChangeCNPStatusAuto.visible(false);
                select firstOnly ARAutoCreate from lSKS_EFT_Setup;
                sksChangeDDStatusAuto.visible(lSKS_EFT_Setup.ARAutoCreate);

                if((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready ||
                    ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors) &&
                    sksChangeEFTStatus.enabled() == true && lSKS_EFT_Setup.ARAutoCreate == NoYes::Yes)
                {
                    sksChangeDDStatusAuto.enabled(true);
                }
                else
                {
                    sksChangeDDStatusAuto.enabled(false);
                }
            }
        }
        else
        {
            sksChangeCNPStatusAuto.visible(false);
            sksChangeCNPStatusAuto.enabled(false);
            sksChangeDDStatusAuto.visible(false);
            sksChangeDDStatusAuto.enabled(false);
        }
        // SKS_FDD_9536
        //select firstOnly EFTAP_PaymRequest from lSKS_EFT_Setup;
        if(formRun.args().menuItemName() == menuItemDisplayStr(SKS_EFTAP_PaymentRequestJournal))
        {
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_CreatedByPaymReq)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_AcceptPaymReq)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PaymentCompany)).visible(true);
            eftActions.enabled(true);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, TopFields)).visible(true); //Bug 10209
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, AllOpenPostedField)).visible(false); //Bug 10209
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, PostJournal)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, Identification)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_Identification)).visible(true);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, PayGroup)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PayGroup)).visible(true);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKSValidateEFT)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKSChangeEFTStatus)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKSChangeEFTStatusAuto)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKSChangeDDStatusAuto)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_SubmitPaymentRequest)).visible(true);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFT_JournalState)).visible(false); //Bug 10209
            formRun.dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable)).object(fieldNum(LedgerJournalTable, SKS_EFTAP_PayGroup)).visible(true);


        }
        else if(formRun.args().menuItemName() == menuItemDisplayStr(LedgerJournalTable5) &&
            ledgerJournalTable.JournalType == LedgerJournalType::Payment &&
            !ledgerJournalTable.SKS_EFTAP_IsPaymReqJournal)
        {
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, Identification)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_Identification)).visible(true); // Bug 10097
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, PayGroup)).visible(true); // Bug 10097
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PayGroup)).visible(false);
            formRun.design().controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PaymentCompany)).visible(false);
            formRun.design().controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PaymJourName)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_SubmitPaymentRequest)).visible(false);
        }        
        else
        {
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, Identification)).visible(true);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_Identification)).visible(false);
            formRun.dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable)).object(fieldNum(LedgerJournalTable, SKS_EFTAP_PayGroup)).visible(false);
            formRun.design().controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PaymentCompany)).visible(false);
            formRun.design().controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PaymJourName)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_SubmitPaymentRequest)).visible(false);
            // SKS_10374 CR -->
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_AcceptPaymReq)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_CreatedByPaymReq)).visible(false);
            // SKS_10374 CR <--
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Post_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTable, Post), FormControlEventType::Clicked)]
    public static void Post_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTable ledgerJournalTable = sender.formRun().dataSource('LedgerJournalTable').cursor();

        ledgerJournalTable.reread();

        if (ledgerJournalTable.Posted == NoYes::Yes &&
            SKS_DD_CustVendPaymExceptionList::findByJournalNum(ledgerJournalTable.JournalNum) != 0) //check if record exists for journal number
        {
            SKS_DD_CustVendPaymExceptionList::deleteExceptionList_JournalNum(ledgerJournalTable.JournalNum);
        }

        SKS_BR_LedgerJournalTransDailyEventhandler::updateBRValues(ledgerJournalTable); //SKS_FDD_13662
    }

]]></Source>
			</Method>
			<Method>
				<Name>JournalName_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate journal,if payment request is on.
    /// </summary>
    /// <param name="sender">It contains the <c>LedgerJournalTable</c> buffer.</param>
    /// <param name="e">Validate journal name event.</param>
    // SKS_FDD_9536
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTable, LedgerJournalTable, JournalName), FormDataFieldEventType::Validating)]
    public static void JournalName_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        LedgerJournalTable ledgerJournalTable = sender.dataSource().cursor();
        SKS_LedgerJournalTableFormEventHandler::validateJournalName(ledgerJournalTable);

        if(LedgerJournalName::find(ledgerJournalTable.JournalName).SKS_BTB_BankTransferJournal
            && sender.datasource().formRun().args().menuItemName() != menuItemDisplayStr('SKS_BTB_BankTransferJournal'))
        {
            throw error('Journal name with Bank transfer option checked can’t be selected.');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_Post_validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate journal,if payment request is on.
    /// </summary>
    /// <param name="args">It contains the <c>LedgerJournalTable</c> record.</param>
    // SKS_FDD_9536
    [PostHandlerFor(tableStr(LedgerJournalTable), tableMethodStr(LedgerJournalTable, validateWrite))]
    public static void LedgerJournalTable_Post_validateWrite(XppPrePostArgs args)
    {
        LedgerJournalTable ledgerJournalTable = args.getThis();
        SKS_LedgerJournalTableFormEventHandler::validateJournalName(ledgerJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate journal,if payment request is on.
    /// </summary>
    /// <param name = "_ledgerJournalTable">It contains the <c>LedgerJournalTable</c> record.</param>
    // SKS_FDD_9536
    public static void validateJournalName(LedgerJournalTable _ledgerJournalTable)
    {
        if(_ledgerJournalTable.JournalName
            && _ledgerJournalTable.JournalType == LedgerJournalType::Payment
            &&  !_ledgerJournalTable.SKS_EFTAP_IsPaymReqJournal)
        {
            if(LedgerJournalName::find(_ledgerJournalTable.JournalName).SKS_IHB_PaymentRequestJournal)
            {
                error("@SKS:SKGIHBJournalValMsg");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable payment request group.
    /// </summary>
    /// <param name="sender">It contains the <c>LedgerJournalTable</c> buffer</param>
    /// <param name="e">Form activate method event</param>
    // SKS_FDD_9536
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTable, LedgerJournalTable), FormDataSourceEventType::Activated)]
    public static void LedgerJournalTable_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        Formdesign formdesign = formrun.design(0);
        FormControl sKS_EFTAP_CreatedByPaymReq = formdesign.controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_CreatedByPaymReq));
        FormControl sKS_EFTAP_AcceptPaymReq = formdesign.controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_AcceptPaymReq));
        FormControl sKS_EFTAP_PaymentCompany = formdesign.controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PaymentCompany));
        FormControl sKS_EFTAP_PayGroup = formdesign.controlName(formControlStr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PayGroup));
        FormDataSource ledgerJournalTable_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable)) as FormDataSource;
        LedgerJournalTable ledgerJournalTable = ledgerJournalTable_ds.cursor();

        // CCA begin
        FormControl sKS_CC_PaymJourBulkPaym = formdesign.controlName(formControlStr(LedgerJournalTable, SKS_CC_PaymJourBulkPaym));
        sKS_CC_PaymJourBulkPaym.visible(SKS_PP_Setup::find().ModCC == NoYes::Yes &&
            ledgerJournalTable.JournalType == LedgerJournalType::CustPayment);
        sKS_CC_PaymJourBulkPaym.enabled(sKS_CC_PaymJourBulkPaym.visible() && !ledgerJournalTable.Posted);
        // CCA end

        if(formRun.args().menuItemName() == menuItemDisplayStr(LedgerJournalTable5) &&
            ledgerJournalTable.JournalType == LedgerJournalType::Payment) // bug 10097
        {
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, Identification)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_Identification)).visible(true);// Bug 10097
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, PayGroup)).visible(true); // Bug 10097
            sKS_EFTAP_PaymentCompany.visible(false);
            sKS_EFTAP_PayGroup.visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_SubmitPaymentRequest)).visible(false);
        }
        else if(formRun.args().menuItemName() == menuItemDisplayStr(SKS_EFTAP_PaymentRequestJournal))
        {
            sKS_EFTAP_CreatedByPaymReq.visible(false);
            sKS_EFTAP_AcceptPaymReq.visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, TopFields)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, Identification)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_Identification)).visible(true);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, PayGroup)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, LedgerJournalTable_SKS_EFTAP_PayGroup)).visible(true);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, PostJournal)).enabled(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKSValidateEFT)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKSChangeEFTStatus)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKSChangeEFTStatusAuto)).visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_SubmitPaymentRequest)).visible(true);
            formRun.dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable)).object(fieldNum(LedgerJournalTable, SKS_EFTAP_PayGroup)).visible(true);
        }
        else
        {
            formRun.dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable)).object(fieldNum(LedgerJournalTable, SKS_EFTAP_PayGroup)).visible(false);
            sKS_EFTAP_PaymentCompany.visible(false);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, Identification)).visible(true);
            formRun.design().controlName(Formcontrolstr(LedgerJournalTable, SKS_EFTAP_SubmitPaymentRequest)).visible(false);
            // SKS_10374 CR -->
            sKS_EFTAP_AcceptPaymReq.visible(false);
            sKS_EFTAP_CreatedByPaymReq.visible(false);
            // SKS_10374 CR <--
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the records based on the journal name payment request journal checkbox
    /// </summary>
    /// <param name="sender">It contains the payment journal query.</param>
    /// <param name="e">Form execute query method event</param>
    // SKS_FDD_9536
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTable, LedgerJournalTable), FormDataSourceEventType::QueryExecuting)]
    public static void LedgerJournalTable_OnQueryExecuting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun;
        QueryBuildDataSource qbdsJournalName;
        QueryBuildDataSource qbdsJournalTable = sender.queryBuildDataSource();

        formRun = sender.formRun();
        if (formRun.args().menuItemName() == menuItemDisplayStr(LedgerJournalTable5))
        {
            qbdsJournalName = qbdsJournalTable.addDataSource(tableNum(LedgerJournalName));
            qbdsJournalName.addLink(fieldNum(LedgerJournalTable, JournalName), fieldNum(LedgerJournalName, JournalName));
            qbdsJournalName.joinMode(JoinMode::ExistsJoin);
            qbdsJournalName.addRange(fieldNum(LedgerJournalName, SKS_IHB_PaymentRequestJournal)).value(queryValue(NoYes::No));
        }
        // Check caller form is payment request journal or not
        else if (formRun.args().menuItemName() == menuItemDisplayStr(SKS_EFTAP_PaymentRequestJournal))
        {
            qbdsJournalName = qbdsJournalTable.addDataSource(tableNum(LedgerJournalName));
            qbdsJournalName.addLink(fieldNum(LedgerJournalTable, JournalName), fieldNum(LedgerJournalName, JournalName));
            qbdsJournalName.joinMode(JoinMode::ExistsJoin);
            qbdsJournalName.addRange(fieldNum(LedgerJournalName, SKS_IHB_PaymentRequestJournal)).value(queryValue(NoYes::Yes));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>JournalName_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for journal name if request journal checkbox is marked
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // SKS_FDD_9536
    [FormControlEventHandler(formControlStr(LedgerJournalTable, JournalName), FormControlEventType::Lookup)]
    public static void JournalName_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormControlCancelableSuperEventArgs cseargs = e as FormControlCancelableSuperEventArgs;

        if (formRun.args().menuItemName() == menuItemDisplayStr(LedgerJournalTable5) && SKS_PP_Setup::find().IHB_Active)
        {
            SKS_LedgerJournalTableFormEventHandler::lookupJournalName(sender, NoYes::No);
            cseargs.CancelSuperCall();
        }
        else if (formRun.args().menuItemName() == menuItemDisplayStr(SKS_EFTAP_PaymentRequestJournal))
        {
            SKS_LedgerJournalTableFormEventHandler::lookupJournalName(sender, NoYes::Yes);
            cseargs.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupJournalName</Name>
				<Source><![CDATA[
    public static void lookupJournalName(FormControl _sender, NoYes _hidePaymReqJournal = NoYes::No)
    {
        Query   query = new Query();
        QueryBuildDataSource    qbdsJournalName;
        QueryBuildRange         queryBuildRangeJournalType;

        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerJournalName), _sender);
        qbdsJournalName = query.addDataSource(tableNum(LedgerJournalName));
        queryBuildRangeJournalType = qbdsJournalName.addRange(fieldNum(LedgerJournalName, JournalType));
        queryBuildRangeJournalType.value(enum2Str(LedgerJournalType::Payment));
        qbdsJournalName.addRange(fieldNum(LedgerJournalName, SKS_IHB_PaymentRequestJournal)).value(queryValue(_hidePaymReqJournal));
        sysTableLookup.addLookupfield(fieldNum(LedgerJournalName, JournalName));
        sysTableLookup.addLookupfield(fieldNum(LedgerJournalName, Name));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the journal is manually created, it will default from TAS parameters.
    /// </summary>
    /// <param name="sender">It contains the caller form.</param>
    /// <param name="e">Form level InitValue event</param>
    // SKS_FDD_9536
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTable, LedgerJournalTable), FormDataSourceEventType::InitValue)]
    public static void LedgerJournalTable_OnInitValue(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        SKS_EFT_Setup  sks_EFT_Setup = SKS_EFT_Setup::find();
        FormDataSource ledgerJournalTable_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable)) as FormDataSource;
        LedgerJournalTable ledgerJournalTable = ledgerJournalTable_ds.cursor();
        if (formRun.args().menuItemName() == menuItemDisplayStr(SKS_EFTAP_PaymentRequestJournal))
        {
            ledgerJournalTable.SKS_EFTAP_PaymentCompany = sks_EFT_Setup.EFTAP_DefaultPaymentCompany;
            ledgerJournalTable.SKS_EFTAP_IsPaymReqJournal = NoYes::Yes;
            ledgerJournalTable.SKS_EFTAP_PaymJourName = sks_EFT_Setup.EFTAP_PaymCompanyJournalName;
            formrun.control(formrun.controlid(Formcontrolstr(LedgerJournalTable, CheckJournal))).visible(false);
        }
        else
        {
            ledgerJournalTable.SKS_EFTAP_IsPaymReqJournal = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the journal name form for the specified journal name.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // SKS_FDD_9536
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTable, LedgerJournalTable), FormDataSourceEventType::Initialized)]
    public static void LedgerJournalTable_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        var overrides = SKS_EFTAP_LedgerJournalTableFormExtensionOverrides::construct();
        sender.object(fieldNum(LedgerJournalTable, SKS_EFTAP_PaymJourName)).registerOverrideMethod(methodStr(FormDataObject, jumpRef),
            methodStr(SKS_EFTAP_LedgerJournalTableFormExtensionOverrides, paymJourName_OnJumpRef), overrides);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFTAP_SubmitPaymentRequest_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the payment request after move to payment journal.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // SKS_FDD_9536
    [FormControlEventHandler(formControlStr(LedgerJournalTable, SKS_EFTAP_SubmitPaymentRequest), FormControlEventType::Clicked)]
    public static void SKS_EFTAP_SubmitPaymentRequest_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTable              ledgerJournalTableLoc;
        MultiSelectionHelper            selectionHelper = MultiSelectionHelper::construct();
        SKS_EFTAP_SubmitPaymentRequest  sKS_EFTAP_SubmitPaymentRequest ;
        FormDataSource ledgerJournalTable_ds = sender.formrun().dataSource(formDataSourceStr(LedgerJournalTable, LedgerJournalTable)) as FormDataSource;

        selectionHelper.parmDataSource(ledgerJournalTable_ds);
        ledgerJournalTableLoc  = selectionHelper.getFirst();
        while (ledgerJournalTableLoc)
        {
            sKS_EFTAP_SubmitPaymentRequest = new SKS_EFTAP_SubmitPaymentRequest();
            sKS_EFTAP_SubmitPaymentRequest.setledgerJournalTable(ledgerJournalTableLoc);
            sKS_EFTAP_SubmitPaymentRequest.run();
            ledgerJournalTableLoc = selectionHelper.getNext();
        }
        ledgerJournalTable_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Approve_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    ///
    [FormControlEventHandler(formControlStr(LedgerJournalTable, Approve), FormControlEventType::Clicked)]
    public static void Approve_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTable journal = sender.formRun().dataSource('LedgerJournalTable').cursor();
        boolean isBankTransferJournal;
        
        if (sender.formRun().args().menuItemName() == 'SKS_BTB_BankTransferJournal')
            isBankTransferJournal = true;

        if(SKS_Table_LedgerJournalTable::EFTMOPExists(journal) || isBankTransferJournal) 
        {
            //The super call on the button is called before the approval process so this code is going to run before
            // the journal has actually been approved.
            if (!(LedgerParameters::isJournalApproval_CN() && journal.JournalType == LedgerJournalType::Daily) && !isBankTransferJournal) 
            {
                journal.markApproved();
            }

            if(journal.Approver)
            {
                try
                {
                    if(isBankTransferJournal) 
                    {
                        if(SKS_EFT_BTBJournalValidate::validateSet(journal, true))
                        {
                            journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Transferred;

                            if(SKS_eft_setup::find().SKS_BTB_WorkflowSendType == SKS_BTB_WorkflowSendType::SendNow && SKS_EFT_Setup::find().BTBAutoCreate)
                            {
                                journal.SKS_EFT_AutoCreate = true;
                            }

                            str returnmessage = SKS_Table_LedgerJournalTable::SyncEFTRecords(true, journal);
                        }
                        else
                        {
                            journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
                        }
                    }
                    else
                    {
                        if(SKS_EFT_JournalValidate::validateSet(journal.JournalType, journal, true))
                        {
                            journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Transferred;

                            if(SKS_eft_setup::find().SKS_EFT_WorkflowSendType == SKS_EFT_WorkflowSendType::SendNow && SKS_EFT_Setup::find().APAutoCreate)
                            {
                                journal.SKS_EFT_AutoCreate = true;
                            }

                            str returnmessage = SKS_Table_LedgerJournalTable::SyncEFTRecords(true, journal);
                        }
                        else
                        {
                            journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
                        }
                    }
                }
                catch
                {
                }
                finally
                {
                    //commit state change
                    //doUpdate to skip the event handler
                    ttsbegin;
                    journal.doUpdate();
                    ttscommit;
                }

                if(journal.SKS_EFT_AutoCreate && journal.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                {
                    info("@SKS2025");

                    LedgerJournalTrans trans;
                    select firstonly trans where trans.JournalNum == journal.JournalNum;

                    SKS_EFT_Processing::PostFromAutoCreate(trans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_OnValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// ValitationWrite method from LedgerJournalTable DataSource
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">e</param>
    //<Issue-19952: Journal name lock for forms
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTable, LedgerJournalTable), FormDataSourceEventType::ValidatedWrite)]
    public static void LedgerJournalTable_OnValidatedWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LedgerJournalTable ledgerJournalTable = sender.formRun().dataSource('LedgerJournalTable').cursor();
        LedgerJournalName ledgerJournalName = LedgerJournalName::find(ledgerJournalTable.JournalName);

        switch(sender.formRun().args().menuItemName())
        {
            case menuItemDisplayStr('SKS_CNP_CustReimbursementJour'):
                if(!ledgerJournalName.SKS_CNP_CustReimbursementJournal)
                {
                    throw error("@SKS:JournalNameError");
                }
                break;
            //<Issue-19951: Journal name lock for forms
            case menuItemDisplayStr('SKS_BTB_BankTransferJournal'):
                if(!ledgerJournalName.SKS_BTB_BankTransferJournal)
                {
                    throw error("@SKS:JournalNameError");
                }
                break;
            //</Issue-19951>
        }
    }
    //</ISSUE-19952>

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>