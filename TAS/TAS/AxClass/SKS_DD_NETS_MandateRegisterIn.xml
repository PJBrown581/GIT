<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_NETS_MandateRegisterIn</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_NETS_MandateRegisterIn extends SKS_DD_MandatesBatchInbound
{
    #define.Archive('Archive')
    #define.Error('Error')

    System.Text.StringBuilder	sbErrorMessage;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runProcess</Name>
				<Source><![CDATA[
    delegate void runProcess(RefRecId _RecId){}

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Batch bat;

        bat = this.parmCurrentBatch();
        this.runProcess(bat.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ProcessAllDirectories</Name>
				<Source><![CDATA[
    public void ProcessAllDirectories(RefRecId _batRecId)
    {
        SKS_EB_BankTable        locSKS_EB_BankTable;
        SKS_EB_CommProcess		locSKS_EB_CommProcess;

        Set locListDirectoriesToProcess;
        List locListFilesToProcess;
        ListEnumerator locFilesToProcessEnum;
        int  directoryCount = 0;
        str  locFilename;

        Object locClassInstance;
        SysDictClass locSysDictClass;
        str  locFormatClassName = '', locDestPath = '';
        boolean fSuccess = false;
        SKS_EB_FileStorage  sks_EB_FileStorage;
        SKS_BF_BankIntType mSKS_BF_BankIntType;

        //BankFabric
        select firstonly sks_EB_FileStorage;
        if (sks_EB_FileStorage.StorageOption_MandateAutomation == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            mSKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }
        else
        {
            mSKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;
        }

        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(mSKS_BF_BankIntType);

        locListDirectoriesToProcess = new Set(Types::AnyType);

        sbErrorMessage = new System.Text.StringBuilder();

        while select crosscompany locSKS_EB_BankTable
            join locSKS_EB_CommProcess
            where locSKS_EB_CommProcess.CommID == locSKS_EB_BankTable.InboundCommId
            && locSKS_EB_CommProcess.BatchJobId == _batRecId
            && locSKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound
        {
            if(mSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            {
                if(locSKS_EB_BankTable.BankFabricInboundFileLocation)
                {
                    locListDirectoriesToProcess.add(locSKS_EB_BankTable.BankFabricInboundFileLocation);
                }
            }
            else
            {
                if(locSKS_EB_BankTable.InboundFileLoc)
                {
                    locListDirectoriesToProcess.add(locSKS_EB_BankTable.InboundFileLoc);
                }
            }

            if(directoryCount < locListDirectoriesToProcess.elements())
            {
                directoryCount = locListDirectoriesToProcess.elements();
                changecompany(locSKS_EB_BankTable.company())
                {
                    if(mSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
                    {
                        if(!locSKS_EB_FileHub.runDirectoryExists(locSKS_EB_BankTable.BankFabricInboundFileLocation))
                        {
                            sbErrorMessage.AppendLine(strFmt("@SKS:SKGInboundFileDirectoryInvalid", locSKS_EB_BankTable.BankFabricInboundFileLocation, locSKS_EB_BankTable.company(), locSKS_EB_BankTable.BankAccountId));
                            continue;
                        }

                        locListFilesToProcess = locSKS_EB_FileHub.runDirectoryGetFiles(locSKS_EB_BankTable.BankFabricInboundFileLocation);
                    }
                    else
                    {
                        if(!locSKS_EB_FileHub.runDirectoryExists(locSKS_EB_BankTable.InboundFileLoc))
                        {
                            sbErrorMessage.AppendLine(strFmt("@SKS:SKGInboundFileDirectoryInvalid", locSKS_EB_BankTable.InboundFileLoc, locSKS_EB_BankTable.company(), locSKS_EB_BankTable.BankAccountId));
                            continue;
                        }

                        locListFilesToProcess = locSKS_EB_FileHub.runDirectoryGetFiles(locSKS_EB_BankTable.InboundFileLoc);
                    }

                    if(locListFilesToProcess)
                    {
                        if(!locFilesToProcessEnum && locListFilesToProcess.elements() > 0)
                        {
                            locFilesToProcessEnum = locListFilesToProcess.getEnumerator();

                            while(locFilesToProcessEnum.moveNext())
                            {
                                locFilename = locFilesToProcessEnum.current();

                                if(mSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
                                {
                                    locFilename = System.IO.Path::Combine(locSKS_EB_BankTable.BankFabricInboundFileLocation, locFilename);
                                }                           

                                locSKS_EB_FileHub.setFileName(locFilename);
                                locSKS_EB_FileHub.runFileInquire();

                                locFormatClassName = this.getFormatClass(locFilename, true, mSKS_BF_BankIntType);
                                if(strLen(locFormatClassName) > 0)
                                {
                                    locSysDictClass = new SysDictClass(className2Id(locFormatClassName));
                                    locClassInstance = locSysDictClass.makeObject(); // Instantiate the class

                                    if(strContains(locFormatClassName,'BS'))
                                    {
                                        if(locSKS_EB_BankTable.BetalingsService == NoYes::Yes)
                                        {
                                            fSuccess = locSysDictClass.callObject('getFileForBS', locClassInstance, locFilename, true, mSKS_BF_BankIntType, SKS_EB_MandateType::Betalings);
                                        }
                                        else if(locSKS_EB_BankTable.BetalingsServiceTotal == NoYes::Yes)
                                        {
                                            fSuccess = locSysDictClass.callObject('getFileForBS', locClassInstance, locFilename, true, mSKS_BF_BankIntType, SKS_EB_MandateType::BetalingsTotal);
                                        }
                                    }
                                    else
                                    {
                                        fSuccess = locSysDictClass.callObject('getFile', locClassInstance, locFilename, true, mSKS_BF_BankIntType);
                                    }

                                    if(!fSuccess)
                                    {
                                        sbErrorMessage.AppendLine(locSysDictClass.callObject('getErrorText', locClassInstance));
                                    }
                                }
                                else
                                {
                                    sbErrorMessage.AppendLine(strFmt("@SKS:SKGDDMandateInboundFormatInvalid",locFilename));
                                }

                                locSysDictClass = null;
                                locClassInstance = null;
                                fSuccess = false;
                                locFormatClassName = '';

                                if(sbErrorMessage.get_Length() != 0) //Move the file to Error directory
                                {
                                    locSKS_EB_FileHub.runDirectoryCreate(System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFilename), #Error));
                                    locDestPath = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFileName), #Error, System.IO.Path::GetFileName(locFileName));
                                }
                                else //Move the file to Archive directory
                                {
                                    locSKS_EB_FileHub.runDirectoryCreate(System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFilename), #Archive));
                                    locDestPath = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(locFileName), #Archive, System.IO.Path::GetFileName(locFileName));
                                }
                                locSKS_EB_FileHub.runFileMoveTo(locDestPath);
                                if(sbErrorMessage.Length > 0)
                                {
                                    error(sbErrorMessage.ToString()); //11030
                                    sbErrorMessage.Clear();
                                }
                            }

                            locFilesToProcessEnum = null;
                            locListFilesToProcess = null;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatClass</Name>
				<Source><![CDATA[
    private str getFormatClass(str _filePathName, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        str retValue = '';

        SysDictClass locSysDictClass;
        Object locClassInstance;
        str locClassName = '';
        str locMatchedClass = '';

        List locListInboundFormatClass;
        ListEnumerator locListInboundClassEnum;

        locListInboundFormatClass = new DictClass(classnum(SKS_DD_InboundFormat)).extendedBy();

        locListInboundClassEnum = locListInboundFormatClass.getEnumerator();

        while(locListInboundClassEnum.moveNext())
        {
            locSysDictClass = new SysDictClass(locListInboundClassEnum.current());

            locClassName = locSysDictClass.name();
            if(!strContains(locClassName,'NETS'))
            {
                continue;
            }
            locClassInstance = locSysDictClass.makeObject(); // Instantiate the class
            locMatchedClass = locSysDictClass.callObject('getFormatId', locClassInstance, _filePathName, _serverPath, _sks_BF_BankIntType);

            if(strLen(locMatchedClass) > 0)
            {
                retValue = locMatchedClass;
            }

        }
        return retValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>