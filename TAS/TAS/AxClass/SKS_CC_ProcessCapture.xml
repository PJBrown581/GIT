<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_ProcessCapture</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_ProcessCapture extends RunBase
{
    NoYes                   sendEmailReceipt;
    SysEmailRecipients      emailRecipient;
    boolean                 isSendEmail;
    boolean                 isRefund;

    DialogField             dfSendEmailReceipt;
    DialogField             dfEmailRecipient;

    CustTable               callerCustTable;
    SKS_CC_CustPaymTable    callerCustPaymTable;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        sendEmailReceipt
    #endmacro


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournalLineBeforeProcessing</Name>
				<Source><![CDATA[
    public void checkJournalLineBeforeProcessing()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTable      ledgerJournalTable;
        AmountCur               markedForSettlementAmt;
        str                     transTypeForMsg;

        if (this.parmIsRefund())
        {
            transTypeForMsg = "@SKS6506";
        }
        else
        {
            transTypeForMsg = "@SKS6507";
        }

        if (transTypeForMsg)
        {
            transTypeForMsg = strLwr(transTypeForMsg);
        }

        ledgerJournalTrans = LedgerJournalTrans::findRecId(callerCustPaymTable.RefRecId, false);
        if (!ledgerJournalTrans.TransDate)
        {
            throw error(strFmt("@SKS6398", transTypeForMsg));
        }

        if (!ledgerjournalTrans.amount())
        {
            throw error(strFmt("@SKS6399", ledgerjournalTrans.Voucher, transTypeForMsg));
        }

        if (ledgerjournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed)
        {
            throw error(strFmt("@SKS6400", ledgerjournalTrans.Voucher, ledgerjournalTrans.PaymentStatus, transTypeForMsg));
        }

        if (!ledgerJournalTrans.LedgerDimension)
        {
            throw error(strFmt("@SKS6401", transTypeForMsg));
        }

        if (!ledgerJournalTrans.OffsetLedgerDimension)
        {
            throw error(strFmt("@SKS6402", transTypeForMsg));
        }

        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        if (ledgerJournalTable.JournalNum && ledgerJournalTable.Posted == NoYes::Yes)
        {
            throw error(strFmt("@SKS6403", ledgerJournalTable.JournalNum, transTypeForMsg));
        }

        // Validate that the amount entered on the journal lines corresponds to invoices/credits selected for payment
        markedForSettlementAmt = SpecTransManager::getTotalSettleAmountForSpecReference(ledgerjournalTrans.Company,
                                                                                    ledgerjournalTrans.TableId,
                                                                                    ledgerjournalTrans.RecId,
                                                                                    ledgerjournalTrans.CurrencyCode,
                                                                                    ledgerjournalTrans.Company,
                                                                                    ledgerjournalTrans.TransDate);

        if (markedForSettlementAmt)
        {
            if (markedForSettlementAmt > 0 && !ledgerjournalTrans.AmountCurCredit)
            {
                throw error("@SKS6404");
            }

            if (markedForSettlementAmt < 0 && !ledgerjournalTrans.AmountCurDebit)
            {
                throw error("@SKS6405");
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerEmail_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the customer email lookup.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormControl</c> object that needs the lookup.
    /// </param>
    private void customerEmail_lookup(FormStringControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        QueryBuildRange         qbrType;
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tableNum(DirPartyContactInfoView));
        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Type));
        qbrType.value(queryValue(LogisticsElectronicAddressMethodType::Email));

        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Party));
        qbrType.value(queryValue(callerCustTable.Party));

        _formControl.lookupButton(FormLookupButton::Always);

        sysTableLookup  = SysTableLookup::newParameters(tableNum(DirPartyContactInfoView), _formControl);
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, Locator));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog;
        Email               custPrimaryEmail;

        dialog = super();

        if (this.parmCallerCustPaymTable().RefTableId == tableNum(SMAServiceOrderTable))
        {
            dialog.caption("@SKS6668");
            dialog.addText("@SKS6668");
        }
        else
        {
            dfSendEmailReceipt = dialog.addFieldValue(enumStr(NoYes), NoYes::Yes, "@SKS6536");
            if (isSendEmail)
            {
                dialog.caption("@SKS6369");
                dfSendEmailReceipt.enabled(false);
            }
            else
            {
                if (this.parmIsRefund())
                {
                    dialog.caption("@SKS6370");
                }
                else
                {
                    dialog.caption("@SKS6371");
                }

                if (SKS_PP_Setup::find().CCDefaultSendEmailReceipt == NoYes::No)
                {
                    dfSendEmailReceipt.value(SysQuery::value(NoYes::No));
                }
            }

            dfEmailRecipient = dialog.addField(extendedtypestr(SysEmailRecipients), "@SYS4466");
            custPrimaryEmail = callerCustTable.email();
            if (custPrimaryEmail)
            {
                dfEmailRecipient.value(custPrimaryEmail);
            }

            dfEmailRecipient.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                          methodStr(SKS_CC_ProcessCapture, customerEmail_lookup),
                                                          this);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (dfSendEmailReceipt)
        {
            sendEmailReceipt = dfSendEmailReceipt.value();
        }
        else
        {
            sendEmailReceipt = false;
        }

        if (dfEmailRecipient)
        {
            emailRecipient = dfEmailRecipient.value();
        }
        else
        {
            emailRecipient = '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRemainAmountToCharge</Name>
				<Source><![CDATA[
    public boolean hasRemainAmountToCharge()
    {
        boolean         ret = true;
        AmountCur       ccAmountToCharge, ccAmountCharged, ccAmountPendingToCharge;
        SKS_PP_Setup    sKS_PP_Setup = SKS_PP_Setup::find();

        ccAmountToCharge = SKS_CC_CustPaymTable::getCreditCardAmountToCharge(callerCustPaymTable.RefTableId, callerCustPaymTable.RefRecId);
        ccAmountCharged = SKS_CC_CustPaymTable::getCreditCardAmountCharged(callerCustPaymTable.RefTableId, callerCustPaymTable.RefRecId);
        if (abs(ccAmountCharged) >= abs(ccAmountToCharge))
        {
            if (callerCustPaymTable.RefTableId == tableNum(SMAServiceOrderTable))
            {
                if (sKS_PP_Setup.CCAllowAmountChangeForSvcOrder == NoYes::No)
                {
                    ret = checkFailed(strFmt("@SKS6372", ccAmountCharged, ccAmountToCharge));
                }
            }
            else
            {
                ret = checkFailed(strFmt("@SKS6372", ccAmountCharged, ccAmountToCharge));
            }
        }

        if (ret)
        {
            ccAmountPendingToCharge = SKS_CC_CustPaymTable::getCreditCardAmountPendingToCharge(callerCustPaymTable.RefTableId, callerCustPaymTable.RefRecId);
            if (abs(ccAmountCharged + ccAmountPendingToCharge) > abs(ccAmountToCharge))
            {
                if (callerCustPaymTable.RefTableId == tableNum(SMAServiceOrderTable))
                {
                    if (sKS_PP_Setup.CCAllowAmountChangeForSvcOrder == NoYes::No)
                    {
                        ret = checkFailed(strFmt("@SKS6373", ccAmountCharged, ccAmountPendingToCharge,
                                          ccAmountCharged + ccAmountPendingToCharge, ccAmountToCharge));
                    }
                }
                else
                {
                    ret = checkFailed(strFmt("@SKS6373", ccAmountCharged, ccAmountPendingToCharge,
                                             ccAmountCharged + ccAmountPendingToCharge, ccAmountToCharge));
                }
            }
        }

        return ret;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerCustPaymTable</Name>
				<Source><![CDATA[
    public SKS_CC_CustPaymTable parmCallerCustPaymTable(SKS_CC_CustPaymTable _callerCustPaymTable = callerCustPaymTable)
    {
        callerCustPaymTable = _callerCustPaymTable;
        return callerCustPaymTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerCustTable</Name>
				<Source><![CDATA[
    public CustTable parmCallerCustTable(CustTable _callerCustTable = callerCustTable)
    {
        callerCustTable = _callerCustTable;
        return callerCustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRefund</Name>
				<Source><![CDATA[
    public boolean parmIsRefund(boolean _isRefund = isRefund)
    {
        isRefund = _isRefund;
        return isRefund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsSendEmail</Name>
				<Source><![CDATA[
    public boolean parmIsSendEmail(boolean _isSendEmail = isSendEmail)
    {
        isSendEmail = _isSendEmail;
        return isSendEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        boolean                 captureOrRefundSuccess = false;
        SKS_CC_CustPaymTable    custPaymTableProc, custPaymTableForEmail;
        CreditCardAuthTrans     creditCardAuthTransApproval;
        str                     transType;
        boolean                 recordsFound;
        MenuFunction            menuFunction;
        Set                     recordsToEmailSet = new Set(Types::Int64);
        Args                    argsSelected = new Args();
        RecId                   custPaymTableRecIdForEmail;
        SKS_PP_Setup            sKS_PP_Setup = SKS_PP_Setup::find();

        #define.authorization('authorization')
        #define.refund('refund')
        #define.capture('capture')

        if (isSendEmail)
        {
            select firstonly1 RecId from custPaymTableProc
            where custPaymTableProc.RefTableId == callerCustPaymTable.RefTableId
               && custPaymTableProc.RefRecId == callerCustPaymTable.RefRecId
               && custPaymTableProc.CreditCardTransStatus == CreditCardProcessorStatus::Approved
               && custPaymTableProc.ApprovalVoid == NoYes::No
               && custPaymTableProc.ApprovalExpired == NoYes::No;

            if (!custPaymTableProc.RecId)
            {
                throw error(strFmt("@SKS6374", enum2str(CreditCardProcessorStatus::Approved)));
            }

            while select RecId from custPaymTableProc
                order by CreditCardTransAmountCur
                where custPaymTableProc.RefTableId == callerCustPaymTable.RefTableId
                   && custPaymTableProc.RefRecId == callerCustPaymTable.RefRecId
                   && custPaymTableProc.CreditCardTransStatus == CreditCardProcessorStatus::Approved
                   && custPaymTableProc.ApprovalVoid == NoYes::No
                   && custPaymTableProc.ApprovalExpired == NoYes::No
            {
                recordsToEmailSet.add(custPaymTableProc.RecId);

                if (!custPaymTableRecIdForEmail)
                {
                    custPaymTableRecIdForEmail = custPaymTableProc.RecId;
                }
            }
        }
        else
        {
            if (callerCustPaymTable.RefTableId == tableNum(LedgerJournalTrans))
            {
                this.checkJournalLineBeforeProcessing();
            }

            while select custPaymTableProc
                order by CreditCardTransAmountCur
                where custPaymTableProc.RefTableId == callerCustPaymTable.RefTableId
                   && custPaymTableProc.RefRecId == callerCustPaymTable.RefRecId
                   && custPaymTableProc.CreditCardTransStatus == CreditCardProcessorStatus::NA
                   && custPaymTableProc.ApprovalVoid == NoYes::No
                   && custPaymTableProc.ApprovalExpired == NoYes::No
            {
                if (!recordsFound)
                {
                    recordsFound = true;
                }

                if (custPaymTableProc.CreditCardTransType == SKS_CC_CreditCardTransType::Authorization)
                {
                    if (custPaymTableProc.CreditCardTransAmountCur <= 0)
                    {
                        throw error(strFmt("@SKS6667", enum2str(custPaymTableProc.CreditCardTransType)));
                    }
                    else
                    {
                        transType = #authorization;
                        if (custPaymTableProc.RefTableId == tableNum(SMAServiceOrderTable))
                        {
                            if (sKS_PP_Setup.CCPreAuthorization == NoYes::No)
                            {
                                warning("@SKS6671");
                                return;
                            }

                            if (!sKS_PP_Setup.CCProjSvcOrderPaymMode)
                            {
                                warning("@SKS6683");
                                return;
                            }
                        }

                        captureOrRefundSuccess = SKS_CC_CreditCardProcess::sKS_CC_DoPreAuth(custPaymTableProc);
                    }
                }
                else
                {
                    if (custPaymTableProc.CreditCardTransAmountCur < 0)
                    {
                        transType = #refund;
                        captureOrRefundSuccess = SKS_CC_CreditCardProcess::sKS_CC_DoRefund(custPaymTableProc);
                    }
                    else
                    {
                        transType = #capture;
                        captureOrRefundSuccess = SKS_CC_CreditCardProcess::sKS_CC_DoCapture(custPaymTableProc,
                                                                                            '', null,
                                                                                            custPaymTableProc.CreditCardTransAmountCur);
                    }

                    try
                    {
                        ttsBegin;
                        custPaymTableProc.selectForUpdate(true);
                        if (!captureOrRefundSuccess)
                        {
                            custPaymTableProc.CreditCardTransStatus = CreditCardProcessorStatus::Declined;
                            error(strFmt("@SKS6375", transType, custPaymTableProc.RefOriginId));
                        }
                        else
                        {
                            custPaymTableProc.CreditCardTransStatus = CreditCardProcessorStatus::Approved;
                            creditCardAuthTransApproval = CreditCardAuthTrans::sKS_CC_FindValidCaptureOrRefundApproval(custPaymTableProc.RecId);

                            if (creditCardAuthTransApproval)
                            {
                                custPaymTableProc.ApprovedDateTime = creditCardAuthTransApproval.ApprovedDateTime;
                                custPaymTableProc.AuthorizationCode = creditCardAuthTransApproval.Authorization;
                                custPaymTableProc.ApprovalCode = creditCardAuthTransApproval.SKS_CC_ApprovalCode;
                            }
                        }
                        custPaymTableProc.update();
                        ttsCommit;

                        if (captureOrRefundSuccess && custPaymTableProc.RefTableId == tableNum(LedgerJournalTrans))
                        {
                            CreditCard::sKS_CC_updateLedgerJournalTrans(custPaymTableProc.RefRecId, null, true);
                        }

                        recordsToEmailSet.add(custPaymTableProc.RecId);

                        if (!custPaymTableRecIdForEmail)
                        {
                            custPaymTableRecIdForEmail = custPaymTableProc.RecId;
                        }
                    }
                    catch (Exception::Deadlock)
                    {
                        retry;
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            throw Exception::UpdateConflict;
                        }
                    }
                    catch(Exception::Error)
                    {
                        ttsAbort;
                        error(strFmt("@SKS6376", custPaymTableProc.CreditCardTypeName,
                                 num2str(custPaymTableProc.CreditCardTransAmountCur,-1,-1,-1,-1)));
                    }
                }
            }

            if (!recordsFound)
            {
                info("@SKS6377");
            }
        }

        if (sendEmailReceipt && emailRecipient)
        {
            if (recordsToEmailSet != null && recordsToEmailSet.elements() > 0)
            {
                custPaymTableForEmail = SKS_CC_CustPaymTable::findByRecID(custPaymTableRecIdForEmail);
                menuFunction = new MenuFunction(menuitemOutputStr(SKS_CC_TransConfirm), MenuItemType::Output);
                argsSelected.parm(emailRecipient);
                argsSelected.parmObject(recordsToEmailSet);
                argsSelected.record(custPaymTableForEmail);
                menuFunction.run(argsSelected);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = runbase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;

        if (sendEmailReceipt == NoYes::Yes)
        {
            if (!emailRecipient)
            {
                ret = checkFailed("@SKS6378");
            }

            if (ret && !SKS_PP_Setup::find().CCReceiptEmailTemplate)
            {
                ret = checkFailed("@SKS6379");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_ProcessCapture construct()
    {
        return new SKS_CC_ProcessCapture();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS6380";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CC_ProcessCapture   sKS_CC_ProcessCapture = new SKS_CC_ProcessCapture();
        CustTable               custTablePaym;
        SKS_CC_CustPaymTable    custPaymTable;

        if (!_args)
        {
            throw(error(Error::wrongUseOfFunction(funcName())));
        }

        if (_args.dataset() != tableNum(SKS_CC_CustPaymTable))
        {
            throw error(Error::missingRecord(tableStr(SKS_CC_CustPaymTable)));
        }

        if (!_args.record())
        {
            throw error(Error::missingRecord(tableStr(SKS_CC_CustPaymTable)));
        }

        custPaymTable = _args.record();
        sKS_CC_ProcessCapture.parmCallerCustPaymTable(CustPaymTable);
        custTablePaym = CustTable::find(CustPaymTable.CustAccount);
        sKS_CC_ProcessCapture.parmCallerCustTable(custTablePaym);
        if (custPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Refund)
        {
            sKS_CC_ProcessCapture.parmIsRefund(true);
        }

        if (_args.parmEnum() == NoYes::Yes)
        {
            sKS_CC_ProcessCapture.parmIsSendEmail(true);
        }

        if (!sKS_CC_ProcessCapture.parmIsSendEmail() && !sKS_CC_ProcessCapture.hasRemainAmountToCharge())
        {
            return;
        }

        if (sKS_CC_ProcessCapture.prompt())
        {
            sKS_CC_ProcessCapture.run();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>