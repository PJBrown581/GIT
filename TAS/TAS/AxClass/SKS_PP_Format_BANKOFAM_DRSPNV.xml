<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BANKOFAM_DRSPNV</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_BANKOFAM_DRSPNV Extends SKS_PP_Format_BankGroup
{
    int mTotal_Cnt;
    real mAmtTotal;
    int mPrintFooter;
    int mHashTotal;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmt</Name>
				<Source><![CDATA[
    real calculateAmt(SKS_PP_FileDetail SKS_PP_FileDetail_2)
    {
        real retVal;
        ;
    
        if (SKS_PP_FileDetail_2.ChkType != SKS_PP_ChequeType::Cheque)
        {
            retVal = 0;
        }
        else
        {
            retVal = Abs(SKS_PP_FileDetail_2.ChkCuryAmt);
        }
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Bank of America - DRS - PNV - Detail Record
    
        // Pos 1-10      10      Check Number - RJ-LZF
        // Pos 11-20     10      Check Amount - RJ-LZF, Voids - zeros
        // Pos 21-30     10      Account Number - RJ-LZF
        // Pos 31-36     6       Check Date (mmddyy)
        // Pos 37-37     1       Issue - blank, Void '-'
        // Pos 38-80     43      Payee information
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        //   RecType: (within Payments)
        //   10V - Voucher
        //   20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
    
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        Str Amt;
        Str ItemType;
        int Mult;
        Str Payee1;
        str Payee2;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = '-';
            Amt='0000000000';
        }
        else
        {
            ItemType = ' ';
            Amt =  SKS_PP_StringFormats::strMoney(mSKS_PP_FileDetail.ChkCuryAmt,10);
        }
    
        // Get Lines 1 & 2 of the check
        Payee1 = mSKS_PP_FileDetail.VendName;
        Payee2 = SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left);
    
        mTotal_Cnt++;
        mAmtTotal = mAmtTotal + this.calculateAmt(mSKS_PP_FileDetail);
        mHashTotal = mHashTotal + str2int(strrem(mSKS_PP_FileDetail.ChkRefNbr, ' '));
    
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(256, Payee1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(13, Payee2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    // Bank of America - DRS - PNV - Header Record
    
        // Pos 1-03      3       Header Record Label 'DRS'
        // Pos 04-06     3       Bank Number
        // Pos 07-18     12      Bank Account Number - RJ-LZF
        // Pos 19-26     8       Prccessing Date (YYYYMMDD)
        // Pos 27-27     1       Blank
        // Pos 28-35     8       Certification Cutoff Date (yyyymmdd)
        // Pos 36-36     1       Final Input Indicator ('N')
        // Pos 37-80     44      Blank
    protected str txtGroupHeader()
    {
        // The valuestring field will hold the Header and/or Trailer information
        // The Grouping of the report is important so the Header/Trailer come out in the correct location
        SKS_PP_FileFormat bFileFormat;
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        select LastEffDate from bFileFormat where bFileFormat.FormatId == mSKS_PP_FileDetail.FormatId;
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
    
    
        sb.Append('DRS');
        sb.Append(SKS_PP_StringFormats::strFill(3, substr(bSKS_PP_Bank.PP01,0,3), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(bFileFormat.LastEffDate));
        sb.Append('N');
        sb.Append(SKS_PP_StringFormats::strFill(44, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //Len 80
        return sb.ToString();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // Bank of America - DRS - PNV - Trailer Record
    
        // Pos 1-04      4       '1EOF'
        // Pos 05-05     1       Blank
        // Pos 06-10     5       Total number of Detail Records (Issues and Voids) RJ-LZF
        // Pos 11-30     20      Blank
        // Pos 31-40     10      Hash Total (summation of All Check Issue numbers (Issues/Voids) RJ-LZF
        // Pos 41-50     10      Summation of amounts (Issues/Voids) RJ-LZF
        // Pos 51-80     30      Blank
    protected str txtGroupTrailer()
    {
        Str chkSum;
        str Cnt;
        str Hash;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // Hash total of Check and Void check numbers
        //HashTotal = trim(toText(Sum ({@CheckAsNumber}), '0000000000'))
        Hash = SKS_PP_StringFormats::strFill(10, int2str(mHashTotal), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        mHashTotal = 0;
    
        // Number of Checks
        // 5 Long Right Justified, LZF
        Cnt =  SKS_PP_StringFormats::strFill(5, int2str(mTotal_Cnt), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        mTotal_Cnt = 0;
    
        chkSum = SKS_PP_StringFormats::strMoney(mAmtTotal, 10);
        mAmtTotal = 0;
    
        sb.Append('1EOF');
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(Cnt);
        sb.Append(SKS_PP_StringFormats::strFill(20, '' , SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(Hash);
        sb.Append(chkSum);
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>