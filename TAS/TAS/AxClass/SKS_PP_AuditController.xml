<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_AuditController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SKS_PP_AuditController</c> class is the controller class for the <c>SKS_PP_Audit</c> SSRS report.
/// </summary>
public class SKS_PP_AuditController extends SrsReportRunController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report controller query.
    /// </summary>
    /// <returns>
    /// The report controller query.
    /// </returns>
    public Query getQuery()
    {
        return this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        SKS_PP_FileDetail       fileDetail;
        Query                   query;
        QueryBuildDataSource    ds;
        QueryBuildRange         range;
    
        super();
    
        if (this.parmArgs().record())
        {
            fileDetail = this.parmArgs().record() as SKS_PP_FileDetail;
    
            if (fileDetail)
            {
                query = this.getQuery();
    
                ds = query.dataSourceTable(tableNum(SKS_PP_FileDetail));
                ds.clearRanges();
    
                range = SysQuery::findOrCreateRange(ds, fieldNum(SKS_PP_FileDetail, FileNbr));
                range.value(SysQuery::value(fileDetail.FileNbr));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        SRSPrintDestinationSettings     printDestinationSetting;
    
        if (this.parmArgs().record())
        {
            printDestinationSetting = new SRSPrintDestinationSettings();    

            printDestinationSetting.fromPage(1);
            printDestinationSetting.toPage(99999999);
    
            // set the print destination in contract
            if(printDestinationSetting)
            {
                this.parmReportContract().parmPrintSettings(printDestinationSetting);
            }
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_PP_AuditController construct()
    {
        return new SKS_PP_AuditController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_PP_AuditController  controller  = SKS_PP_AuditController::construct();
    
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(SKS_PP_Audit, PrecisionDesign1));
        if (_args.record())
        {
            controller.parmShowDialog(false);
            controller.prePromptModifyContract();    
            controller.run();    
        }
        else
        {
            controller.startOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>