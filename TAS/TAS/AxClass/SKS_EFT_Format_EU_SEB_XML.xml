<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_SEB_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_EU_SEB_XML extends SKS_EFT_Format_EU_SEPA_CREDIT_FD
/// </summary>
class SKS_EFT_Format_EU_SEB_XML extends SKS_EFT_Format_EU_SEPA_CREDIT_FD
{
    #define.FormatVersion('20230522')
    #define.P_PBOR('P-PBOR')
    #define.P_PPOR('P-PPOR')
    #define.P_FTWR('P-FTWR')
    #define.P_FTWOR('P-FTWOR')
    #define.STRF('STRF')
    #define.INTP_NUR('INTP-NUR')
    #define.INTP_UR('INTP-UR')
    #define.SEPA_CT('SEPA-CT')
    #define.SEPA_SDE('SEPA-SDE')

    #define.P_KIDR('P-KIDR')
    #define.P_CSTRD('P-CSTRD')
    #define.P_CTWR('P-CTWR')
    #define.P_CTWOR('P-CTWOR')
    #define.LP_URG('LP-URG')

    #define.CTWR('CTWR')
    #define.SDCT('SDCT')
    #define.FI71('FI71')
    #define.GIRO_04('GIRO-04')
    #define.GIRO_15('GIRO-15')
    #define.FI73('FI73')
    #define.FI75('FI75')

    #define.LP_NURG('LP-NURG')
    #define.LP_URGSO('LP-URGSO')
    
    #define.BACS('BACS')
    #define.CHAPS('CHAPS')
    #define.FSTR_PAY('FSTR-PAY')
    #define.SALARY('SALARY')

    #define.CHIPS('CHIPS')              //SKS#VSTS:14237
    #define.FED_WIRE('FED-WIRE')        //SKS#VSTS:14237

    #define.TREA('TREA')                //SKS#DevOps:16494
    #define.INTC('INTC')                //SKS#DevOps:16494
    #define.SDVA('SDVA')                //SKS#DevOps:16494
    #define.COMURG_INT('COMURG-INT')    //SKS#DevOps:17978

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncoding</Name>
				<Source><![CDATA[
    protected str getEncoding()
    {
        return 'ISO-8859-1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf
    /// </summary>
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
    
        batchCount++;
    
        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode;
    
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    
        //      2.5: CtrlSum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        //      2.17: ReqdExctnDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
    
        //      2.19: Dbtr
        this.node_PmtInf_Dbtr(nodePmtInf);
    
        //      2.20: DbtrAcct
        this.node_PmtInf_DbtrAcct(nodePmtInf);
    
        //      2.21: DbtrAgt
        this.node_PmtInf_DbtrAgt(nodePmtInf);
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// formatStructure
    /// </summary>
    protected void formatStructure()
    {
        PaymMode        prevPaymMode;
        PaymSpec        prevPaymSpec;
        CurrencyCode    prevCurrency;
        CompanyBankAccountId    prevBankAccountId;
        SKS_EB_Date     prevEffectiveDate;
    
        xmlDoc = XmlDocument::newBlank();
    
        this.node_MessageRoot();
    
        this.node_GrpHdr();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));
    
            if(prevBankAccountId != mSKS_EFT_FileDetail.BankAccountId ||
               prevPaymMode != mSKS_EFT_FileDetail.PaymMode ||
               prevPaymSpec != mSKS_EFT_FileDetail.PaymSpec ||
               prevCurrency != mSKS_EFT_FileDetail.PaymentCurrencyCode||
               prevEffectiveDate != mSKS_EFT_FileDetail.EffectiveDate)
            {
                this.node_PmtInf();
    
                prevBankAccountId = mSKS_EFT_FileDetail.BankAccountId;
                prevPaymMode = mSKS_EFT_FileDetail.PaymMode;
                prevPaymSpec = mSKS_EFT_FileDetail.PaymSpec;
                prevCurrency = mSKS_EFT_FileDetail.PaymentCurrencyCode;
                prevEffectiveDate = mSKS_EFT_FileDetail.EffectiveDate;
            }
    
            this.node_CdtTrfTxInf();
    
            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAcct
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.BankBankIBAN)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
        }
        else
        {
            //              Othr
            this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct_Id_Othr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAcct_Id_Othr
    /// </summary>
    /// <param name = "_nodeAcctId">_nodeAcctId</param>
    protected void node_PmtInf_DbtrAcct_Id_Othr(XmlElement _nodeAcctId)
    {
        //------------------------------------------------------------------------------------------------------
        //              Othr
        //                  Id
        //                  SchmeNm
        //                      Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
    
        //              Othr
        nodeOthr = _nodeAcctId.appendChild(xmlDoc.createElement('Othr'));
    
        //                  Id
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct);
    
        //                  SchmeNm
        nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
        //                      Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BBAN');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Cdtr_Nm
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
    
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', mSKS_EFT_FileDetail_VendAddress.BeneName, 70);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAcct
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrSchmeNm;
        str iban, acctNum, valuePrtry, valueCd;
        boolean printCdtrAcct = true;

        iban        = mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum     = mSKS_EFT_FileDetail.DepBankAcct;
        valueCd     = 'BBAN';
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO_04 :
                    case #GIRO_15 :
                    case #FI71:
                    case #FI73:
                    case #FI75:
                        iban        = '';
                        valuePrtry  = 'NETS';
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPOR:
                        iban        = '';
                        break;
                    case #P_PBOR:
                        iban        = '';
                        valuePrtry  = 'BGNR';
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        acctNum        = '';
                        break;
                }
                break;
            case 'EU-SEB-XML-US':           //SKS#VSTS:14237
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                    case #FED_WIRE:
                        iban        = '';
                        break;
                }
                break;
        }

        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No  &&
           printCdtrAcct &&
           subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));

            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
            }

            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct);

                //                      SchmeNm
                nodeCdtrSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));
                
                if(valuePrtry)
                {
                    //                      Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Prtry', valuePrtry);
                }
                else if(valueCd)
                {
                    //                          Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Cd', valueCd);
                }
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAgt
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //              ClrSysMmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
        
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        str swift, rtg;
        
        swift = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg   = mSKS_EFT_FileDetail.BankBankTransit;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-INT':      //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TREA:
                    case #INTC:
                    case #SDVA:
                        rtg = '';
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                    case #INTP_NUR:
                    case #INTP_UR:
                        rtg = '';
                        break;
                }
                break;
            case 'EU-SEB-XML-US':              //SKS#DevOps:17978
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #COMURG_INT:
                        rtg = '';
                        break;
                }
                break;
        }
        
        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
        
        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
        
        if(swift)
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
        }
        
        else if(rtg)
        {
            //                  ClrSysMmbId
            this.node_PmtInf_DbtrAgt_MmbId(nodeFinInstnId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_PmtInf_DbtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      DbtrtrAgent
        //          ClrSysMmbId
        //              ClrSysId
        //                  Cd
        //          MmbId
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str value, rtg;
        int len;

        rtg = mSKS_EFT_FileDetail.BankBankTransit;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-UK':
                value = 'GBDSC';
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #CHAPS:
                    case #FSTR_PAY:
                        len = 6;
                        break;
                }
                break;
            case 'EU-SEB-XML-US':       //SKS#VSTS:14237
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                        value = 'USPID';
                        break;
                    case #FED_WIRE:
                        value = 'USABA';
                        break;
                }
                break;
        }

        //          ClrSysMmbId
        nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

        if(value)
        {
            //          ClrSysId
            nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

            //              Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', value);
        }
        //          MmbId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_IntrmyAgt1
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)     //SKS#VSTS:14237
    {
        //------------------------------------------------------------------------------------------------------
        //       IntrmyAgt1
        //          FinInstnId
        //              BIC
        //              ClrSysMmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
        
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeBrnchId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str swift, id, value;
        
        swift = mSKS_EFT_FileDetail_Intermediary.IntBankSwift;
        id    = mSKS_EFT_FileDetail_Intermediary.IntBankId;
         
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-US':       //SKS#VSTS:14237
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                        value = 'USPID';
                        break;
                    case #FED_WIRE:
                        value = 'USABA';
                        break;
                    case #COMURG_INT:                  //SKS#DevOps:17978
                        id = '';
                        break;
                }
                break;
        }
        if(swift != '' || id != '')
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(swift != '')
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
            }
    
            //                  ClrSysMmbId
            else if(id)
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                
                if(value)
                {
                    //          ClrSysId
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                    //              Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', value);
                }

                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', id, 0, false);
            }
    
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 140, false);
    
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, mSKS_EFT_FileDetail_Intermediary.IntBankAddr + '' + mSKS_EFT_FileDetail_Intermediary.IntBankAddr2, '', mSKS_EFT_FileDetail_Intermediary.IntBankCity);
    
            //              BrnchId
            if(mSKS_EFT_FileDetail_Intermediary.IntBankBranch)
            {
                nodeBrnchId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        str swift, rtg;
        boolean printCdtrAgt = true;
        boolean printswiftrtg;

        swift = mSKS_EFT_FileDetail.DepSwiftNo;
        rtg   = mSKS_EFT_FileDetail.DepBankTransit;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        rtg = '';
                        break;
                }
                break;
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FI71:
                    case #FI73:
                    case #FI75:
                    case #GIRO_04:
                    case #GIRO_15:
                        printCdtrAgt = false;
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                    case #SDCT:
                    case #LP_URG:
                    case #CTWR:
                        rtg = '';
                        break;
                }
                break;
            case 'EU-SEB-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        rtg = '';
                        break;
                }
                break;
            case 'EU-SEB-XML-INT':      //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TREA:
                    case #INTC:
                    case #SDVA:
                        printswiftrtg = true;
                        break;
                }
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                    case #P_KIDR:
                    case #P_CSTRD:
                    case #P_CTWR:
                    case #P_CTWOR:
                    case #LP_URG:
                        rtg = '';
                        break;
                }
                break; 
            case 'EU-SEB-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        rtg = '';
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {                    
                    case #P_PPOR:
                    case #P_PBOR:
                        swift = '';
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        rtg = '';
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #CHAPS:
                    case #FSTR_PAY:
                        break;
                    case #SALARY:
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        rtg = '';
                        break;
                }
                break;
        }
 
        if(printCdtrAgt && (swift || rtg))  //SKS#DevOps:17819
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
 
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
 
            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);

                if(printswiftrtg)       //SKS#DevOps:17055
                {
                    //                  ClrSysMmbId
                    this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
                }
            }
 
            else if(rtg)
            {
                //                  ClrSysMmbId
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          ClrSysMmbId
        //              ClrSysId
        //                  Cd
        //          MmbId
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str value, rtg, ClrSysId;
        int len;

        rtg = mSKS_EFT_FileDetail.DepBankTransit;
        if(!rtg)
        {
            rtg = '9900';
        }        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-INT':      //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TREA:
                    case #INTC:
                    case #SDVA:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClrSysId', mSKS_EFT_FileDetail.RecId));                        
                        len = 35;
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                value = 'SESBA';
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #STRF:
                        len = 4;
                        break;
                    case #INTP_NUR:
                        rtg = mSKS_EFT_FileDetail.DepBankAcct;
                        len = 5;
                        break;
                    case #P_FTWOR:
                        rtg = '9900';
                        len = 4;
                        break;
                }
                break; 
            case 'EU-SEB-XML-DE':
                value = 'DEBLZ';
                break;
            case 'EU-SEB-XML-PL':
                value = 'PLKNR';
                break;
            case 'EU-SEB-XML-UK':
                value = 'GBDSC';
                break;
            case 'EU-SEB-XML-US':       //SKS#VSTS:14237
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                        value = 'USPID';
                        break;
                    case #FED_WIRE:
                        value = 'USABA';
                        break;
                    case #COMURG_INT:              //SKS#DevOps:17978
                        ClrSysId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClrSysId', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }
        //          ClrSysMmbId
        nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

        if(value)
        {
            nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', value);
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForCdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_InstrForCdtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_InstrForCdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.82: InstrForCdtrAgt
        //              InstrInf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeInstrForCdtrAgt;
        str instrinf;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #STRF:
                        instrinf = 'TELB';
                        break;
                }                
                break;
        }
    
        if(instrinf)
        {
            //          2.82: InstrForCdtrAgt
            nodeInstrForCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('InstrForCdtrAgt'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInstrForCdtrAgt, 'InstrInf', instrinf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_PmtId
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.29  InstrId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtId;
        str pmtId;

        pmtId = this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference);
            
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));
    
        //              2.29  InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(pmtId, 10));
    
        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(pmtId, 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Purp
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //                   Cd
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePurp;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #LP_URG:
                        value = 'SUPP';
                        break;
                }
                break;
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #LP_URG:
                        value = 'SUPP';
                        break;
                }
                break;
            case 'EU-SEB-XML-INT':          //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TREA:
                    case #INTC:
                    case #SDVA:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Purp', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #LP_URG:
                        value = 'SUPP';
                        break;
                }
                break;
            case 'EU-SEB-XML-US':                 //SKS#DevOps:17978
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #COMURG_INT:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Purp', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }
        
        if(value)
        {
            //          2.86: Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
            //              2.87: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RgltryRptg
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeRgltryRptg;
        XmlElement nodeDtls;
        str bankPurpCode, bankPurpName;
    
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-SEB-XML-INT':          //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TREA:
                    case #INTC:
                    case #SDVA:
                        bankPurpName = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName);
                        bankPurpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
                        break;
                }
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                    case #INTP_UR:
                    case #P_PBOR:
                    case #LP_URG:
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        bankPurpName = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName);
                        bankPurpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                    case #INTP_UR:
                    case #P_PBOR:
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        bankPurpName = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName);
                        bankPurpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
                        break;
                }
                break;
            case 'EU-SEB-XML-US':                  //SKS#DevOps:17978
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #COMURG_INT:
                        bankPurpName = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName);
                        bankPurpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
                        break;
                }
                break;
        }
    
        if((mSKS_EFT_FileDetail.PaymentCurrencyCode == 'SEK' ||
            mSKS_EFT_FileDetail.PaymentCurrencyCode == 'NOK' ||
            mSKS_EFT_FileDetail.PaymentCurrencyCode == 'GBP' ||
            mSKS_EFT_FileDetail.PaymentCurrencyCode == 'EUR' ||
            mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CNY' ||
            mSKS_EFT_FileDetail.PaymentCurrencyCode == 'RMB')&&         //SKS#DevOps:17788
            (bankPurpCode    ||
             bankPurpName))
        {
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRgltryRptg, 'DbtCdtRptgInd', 'DEBT');
            nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));

            if(bankPurpCode)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(bankPurpCode));
            }
            if(bankPurpName)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(bankPurpName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        boolean printstrdRef = false;
        boolean printstrd = false;
        boolean printUstrd = false;
        boolean printRmtInfUstrd = false;
        VendInvoiceJour    vendInvoiceJour;
        SplitPaymentMandatoryRule_PL splitPaymentMandatoryRule_PL;
        TaxTrans                     taxTrans;
        boolean                      printUst;
        AmountMST                    amt;
        SKS_EFT_FileDetail           sks_EFT_FileDetail;
        str                          paymentDetails,description;
        XmlElement                   nodeRmtInf;
        //SKS_VSTS_14076 -->
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        int countRec;

        select firstonly splitPaymentMandatoryRule_PL
                    where splitPaymentMandatoryRule_PL.PaymMode == mSKS_EFT_FileDetail.PaymMode && splitPaymentMandatoryRule_PL.Specification == mSKS_EFT_FileDetail.PaymSpec; //DevOps 20922

        select count(PaymentLineRecId) from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId &&
                  invSKS_EFT_FileDetail.InvoiceNumber != '';

        countRec = int642int(invSKS_EFT_FileDetail.PaymentLineRecId);
        //SKS_VSTS_14076 <--
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:           
                    case #LP_URG:
                    case #INTP_NUR:
                    case #INTP_UR:
                        printUstrd = true;
                        break;
                }
                break;
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        if(countRec > 1)//SKS_VSTS_14076
                        {
                            printUstrd = true;
                        }
                        else
                        {
                            printstrdRef = true;
                        }
                        break;
                    case #LP_URG:
                    case #INTP_NUR:
                    case #INTP_UR:
                    case #CTWR:
                    case #SDCT:
                    case #FI73:
                        printUstrd = true;
                        break;
                    case #FI71:
                    case #GIRO_04:
                    case #GIRO_15:                    
                    case #FI75:
                        printstrd = true;
                        break;
                }
                break;
            case 'EU-SEB-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        printstrd = true;
                        break;
                    case #INTP_NUR:
                    case #INTP_UR:
                        printUstrd = true;                 
                        break;
                }
                break;
            case 'EU-SEB-XML-INT':       //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TREA:
                    case #INTC:
                    case #SDVA:
                        printUstrd = true;
                        break;
                }
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        if(countRec > 1)//SKS_VSTS_14076
                        {
                            printUstrd = true;
                        }
                        else
                        {
                            printstrdRef = true;
                        }
                        break;
                    case #INTP_NUR:
                    case #INTP_UR:
                    case #LP_URG:
                    case #P_CTWR:
                        printUstrd = true;
                        break;
                    case #P_KIDR:
                    case #P_CSTRD:
                        printstrd = true;
                        break;
                }
                break;
            case 'EU-SEB-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        if(countRec > 1)//SKS_VSTS_14076
                        {
                            printUstrd = true;
                        }
                        else
                        {
                            printstrdRef = true;
                        }
                        break;
                    case #INTP_NUR:
                    case #INTP_UR:
                        printUstrd = true;
                        break;
                    case #LP_NURG://DevOps20922
                    case #LP_URGSO:
                        if(splitPaymentMandatoryRule_PL)
                        {
                            printUstrd = false;
                            printUst   =true;
                        }
                        else
                        {
                            printUstrd = true;
                            printUst   = false;
                        }
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                    case #STRF:
                    case #INTP_NUR:
                    case #INTP_UR:          //SKS#DevOps:17862
                        printRmtInfUstrd = true;//SKS_VSTS_13864
                        break;
                    case #P_PPOR:
                    case #P_PBOR:
                    case #P_FTWR:
                        printstrd = true;
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                    case #BACS:
                    case #CHAPS:
                    case #FSTR_PAY:
                    case #SALARY:
                        printUstrd = true;
                        break;
                }
                break;
            case 'EU-SEB-XML-US':       //SKS#VSTS:14237
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                    case #FED_WIRE:                    
                        printUstrd = true;
                        break;
                    case #COMURG_INT:
                        printRmtInfUstrd=true;
                        break;
                }
                break;
        }
        if(printstrdRef)
        {
            this.node_CdtTrfTxInf_RmtInf_StrdRef(_nodeCdtTrfTxInf);
        }
        if(printstrd)
        {
            this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
        }
        if(printUstrd)
        {
            super(_nodeCdtTrfTxInf);
        }
        else if(printUst)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            while select InvoiceNumber, AccountNum, InvoiceDate, InvoiceCompany from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                changecompany(sks_EFT_FileDetail.InvoiceCompany)
                {
                    select firstonly TaxAmountCur from taxTrans
                            join vendInvoiceJour where
                            taxTrans.TransDate == vendInvoiceJour.InvoiceDate &&
                            taxTrans.Voucher == vendInvoiceJour.ledgerVoucher &&
                            taxTrans.Source == TaxModuleType::PurchInvoice &&
                            vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                            vendInvoiceJour.InvoiceDate       ==  sks_EFT_FileDetail.InvoiceDate &&
                            vendInvoiceJour.InvoiceId         ==  sks_EFT_FileDetail.InvoiceNumber;

                    if(!vendInvoiceJour)
                    {
                        select firstonly TaxAmountCur from taxTrans
                                join vendInvoiceJour where
                                taxTrans.TransDate == vendInvoiceJour.InvoiceDate &&
                                taxTrans.Voucher == vendInvoiceJour.ledgerVoucher &&
                                taxTrans.Source == TaxModuleType::PurchInvoice &&
                                vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                                vendInvoiceJour.DocumentDate       ==  sks_EFT_FileDetail.InvoiceDate &&
                                vendInvoiceJour.InvoiceId         ==  sks_EFT_FileDetail.InvoiceNumber;
                    }
                }
                
                amt += taxTrans.TaxAmountCur * -1;
            }
            description = LedgerJournalTrans::findRecId(mSKS_EFT_FileDetail.PaymentLineRecId, false).PaymentNotes;

            paymentDetails = '/VAT/'+num2str(amt,0,2,2,0) + '/IDC/'+mSKS_EFT_FileDetail.VATNum + '/INV/'+this.getInvoiceNbrs() + '/TXT/'+description;

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', paymentDetails, 140);
        }
        if(printRmtInfUstrd)
        {
            this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_Strd
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocInf;
        XmlElement nodeRfrdDocAmt;

        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        SKS_EFT_FileDetail invSKS_EFT_FileDetailTmp;

        str invDetailsString;
        boolean rmtinfAmt = false;
        boolean firstUstrd = true;
        boolean firstRec = true;
        boolean cdtrRefInf = false;
        boolean rfrdDocInf = false;

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId  && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }
            switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
            {
                case 'EU-SEB-XML-DE':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #SEPA_CT:
                        case #SEPA_SDE:
                            cdtrRefInf = true;
                            break;
                    }
                    break;
                case 'EU-SEB-XML-DK':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #FI75:
                            if(firstUstrd)
                            {
                                while select InvoiceNumber,InvoiceSettleAmountPmtCur, PaymentCurrencyCode from invSKS_EFT_FileDetailTmp where invSKS_EFT_FileDetailTmp.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId  && invSKS_EFT_FileDetailTmp.InvoiceNumber != ''
                                {
                                    invDetailsString += strFmt('%1, ', this.CharacterReplacement(invSKS_EFT_FileDetailTmp.InvoiceNumber));
                                }
                                                                   
                                invDetailsString = this.CharacterReplacement(subStr(invDetailsString, 1, strLen(invDetailsString)-2));

                                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invDetailsString, 140);
                                                                        
                                firstUstrd = false;
                            }
                            rmtinfAmt = true;
                            cdtrRefInf = true;
                            break;                            
                        case #FI71:
                        case #GIRO_04:
                        case #GIRO_15:                                
                            rmtinfAmt = true;
                            cdtrRefInf = true;
                            break;
                        case #SEPA_CT:
                        case #SEPA_SDE:
                            cdtrRefInf = true;
                            break;
                    }
                    break;
                case 'EU-SEB-XML-FI':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #SEPA_CT:
                        case #SEPA_SDE:     //SKS#DevOps:18232 Removed Ustrd tag here                            
                            rmtinfAmt = true;
                            cdtrRefInf = true;
                            break;
                    }
                    break;
                case 'EU-SEB-XML-NO':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #P_CSTRD:
                            rfrdDocInf = true;
                            rmtinfAmt = true;
                            break;
                        case #P_KIDR:
                            rmtinfAmt = true;
                            CdtrRefInf = true;
                            break;
                        case #SEPA_CT:
                        case #SEPA_SDE:
                            cdtrRefInf = true;
                            break;
                    }
                    break;
                case 'EU-SEB-XML-PL':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #SEPA_CT:
                        case #SEPA_SDE:
                            cdtrRefInf = true;
                            break;
                    }
                    break;
                case 'EU-SEB-XML-SE':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #P_PBOR:
                            rmtinfAmt = true;
                            rfrdDocInf = true;      //SKS#DevOps:17791
                            break;
                        case #P_PPOR:   //SKS_VSTS_13786
                            rfrdDocInf = true;
                            break;
                    }
                    break;
            }
                
            //               2.100: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
            
            if(rfrdDocInf)
            {
                //              2.101: RfrdDocInf
                nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));

                this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeRfrdDocInf, invSKS_EFT_FileDetail);
            }
                
            if(rmtinfAmt)
            {
                //              2.109 RfrdDocAmt
                nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));

                this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
            }

            if(CdtrRefInf)
            {
                //            2.120: CdtrRefInf
                this.node_RmtInf_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_Id
    /// </summary>
    /// <param name = "_nodeInitgPty">_nodeInitgPty</param>
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //                      9.1.17: SchmeNm
        //                          9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str SenderId, schmeNm;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-SEB-XML-DE':
            case 'EU-SEB-XML-DK':
            case 'EU-SEB-XML-FI':
            case 'EU-SEB-XML-NO':
            case 'EU-SEB-XML-PL':
            case 'EU-SEB-XML-SE':
            case 'EU-SEB-XML-UK':
            case 'EU-SEB-XML-INT':      //SKS#DevOps:16494
                SenderId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SenderId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
                schmeNm = 'CUST';
                break;
            case 'EU-SEB-XML-US':
                SenderId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SenderId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
                schmeNm = 'BANK';
                break;
        }
        if(SenderId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', SenderId, 14);
    
            //                      9.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                          9.1.18: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schmeNm);
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_BtchBookg
    /// </summary>
    /// <param name = "_BtchBookg">_BtchBookg</param>
    protected void node_PmtInf_BtchBookg(XmlElement _BtchBookg)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.3: BtchBookg
        //------------------------------------------------------------------------------------------------------
    
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #LP_URG:
                    case #INTP_NUR:
                    case #SEPA_SDE:
                        value = 'false';
                        break;
                    case #SEPA_CT:
                        value = 'true';
                        break;
                }
                break;
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDCT:
                    case #GIRO_04:
                    case #GIRO_15:
                    case #FI71:
                    case #FI73:
                    case #FI75:
                    case #LP_URG:
                    case #INTP_NUR:
                    case #SEPA_SDE:
                    case #CTWR:
                        value = 'false';
                        break;
                    case #SEPA_CT:
                        value = 'true';
                        break;
                }
                break;
            case 'EU-SEB-XML-FI':
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BtchBookg', mSKS_EFT_FileDetail.RecId));  //SKS#DevOps:17656
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #LP_URG:
                    case #SEPA_SDE:
                    case #INTP_NUR:
                    case #P_KIDR:
                    case #P_CSTRD:
                    case #P_CTWR:
                    case #P_CTWOR:
                        value = 'false';
                        break;
                    case #SEPA_CT:
                        value = 'true';
                        break;
                }
                break;
            case 'EU-SEB-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #LP_NURG:
                    case #LP_URGSO:
                    case #INTP_NUR:
                    case #SEPA_SDE:
                        value = 'false';
                        break;
                    case #SEPA_CT:
                        value = 'true';
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId));
                if(value == 'Y')
                {
                    value = 'true';
                }
                else
                {
                    value ='false';
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #SEPA_CT:
                        value = 'true';
                        break;
                    case #SEPA_SDE:
                    case #INTP_NUR:
                        value = 'false';
                        break;
                }
                break;
        }
        if(value)
        {
            //              2.3: BtchBookg
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _BtchBookg, 'BtchBookg', value);
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_Nm
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)            //SKS#VSTS14237
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 70);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        this.node_PstlAdr_Structured(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_Id
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //          or
        //              PrvtId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgPrvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str        id, schmeNm;
        boolean    printCdtrId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-INT':          //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TREA:
                    case #INTC:
                    case #SDVA:
                        schmeNm     = 'TXID';
                        id          =  mSKS_EFT_FileDetail.VATNum;
                        printCdtrId = true;
                        break;
                }
                break;
        }
        if(printCdtrId && id)
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgPrvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  Othr
            nodeOthr = nodeOrgPrvtId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', id, 35);

            //                  SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

            //                      Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schmeNm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_ChrgBr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      2.24 ChrgBr
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
            case 'EU-SEB-XML-DK':
            case 'EU-SEB-XML-FI':
            case 'EU-SEB-XML-NO':
            case 'EU-SEB-XML-PL':
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SLEV';
                        break;
                    default:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-SEB-XML-INT':      //SKS#DevOps:16494
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #CHAPS:
                    case #FSTR_PAY:
                    case #INTP_NUR:
                    case #INTP_UR:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SLEV';
                        break;
                }
                break;
            case 'EU-SEB-XML-US':       //SKS#VSTS:14237
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                    case #FED_WIRE:
                    case #COMURG_INT:              //SKS#DevOps:17978
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }
        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', value,0,false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_Id
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchmeNm
        //                          Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str BankId;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-SEB-XML-DE':
            case 'EU-SEB-XML-DK':
            case 'EU-SEB-XML-FI':
            case 'EU-SEB-XML-NO':
            case 'EU-SEB-XML-PL':
            case 'EU-SEB-XML-SE':
            case 'EU-SEB-XML-UK':
            case 'EU-SEB-XML-US':       //SKS#VSTS:14237
            case 'EU-SEB-XML-INT':      //SKS#DevOps:16494
                BankId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BankId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
                break;
        }
        if(BankId)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', BankId);
    
            //                      SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                          Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BANK');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      9.1.1: PstlAdr
        //              9.1.10: Ctry
        //------------------------------------------------------------------------------------------------------
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
            case 'EU-SEB-XML-DK':
            case 'EU-SEB-XML-FI':
            case 'EU-SEB-XML-NO':
            case 'EU-SEB-XML-PL':
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA_CT:
                    case #SEPA_SDE:                        
                        this.node_PstlAdr_Structured(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, '');
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0);                        
                        break;
                }
                break;
            case 'EU-SEB-XML-US':       //SKS#DevOps:17978
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #COMURG_INT:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0);
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //              2.9: Cd
        //          2.11: LclInstrm
        //              2.13: Prtry
        //          2.14: CtgyPurp
        //              2.15: Cd
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtTpInf;
        XmlElement nodeSvcLvl;
    
        //          2.6: PmtTpInf
        nodePmtTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.7: InstrPrty
        this.node_PmtInf_PmtTpInf_InstrPrty(nodePmtTpInf);
    
        //          2.8: SvcLvl
        nodeSvcLvl = nodePmtTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
        this.node_PmtInf_PmtTpInf_SvcLvl_Cd(nodeSvcLvl);
    
        //         2.11: LclInstrm
        this.node_PmtInf_PmtTpInf_LclInstrm(nodePmtTpInf);
    
        //          2.14: CtgyPurp
        this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmtTpInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_CtgyPurp
    /// </summary>
    /// <param name = "_nodePmtTpInf">_nodePmtTpInf</param>
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14 CtgyPurp
        //             2.15 Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
        str value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDCT:
                    case #FI71:
                    case #FI75:
                    case #FI73:
                    case #GIRO_04:
                    case #GIRO_15:
                    case #INTP_UR:
                    case #INTP_NUR:
                        value = 'SUPP';
                        break;
                }
                break;
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDCT:
                    case #FI71:
                    case #FI75:
                    case #FI73:
                    case #GIRO_04:
                    case #GIRO_15:
                    case #INTP_UR:
                    case #INTP_NUR:
                        value = 'SUPP';
                        break;
                }
                break;
            case 'EU-SEB-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FI71:
                    case #FI73:
                    case #FI75:
                    case #GIRO_04:
                    case #GIRO_15:
                    case #INTP_UR:
                    case #INTP_NUR:
                        value = 'SUPP';
                        break;
                }
                break;
            case 'EU-SEB-XML-INT':          //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                    default:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_KIDR:
                    case #INTP_UR:
                    case #INTP_NUR:
                    case #P_CSTRD:                        
                    case #P_CTWR:
                    case #P_CTWOR:
                        value = 'SUPP';
                        break;
                }
                break;
            case 'EU-SEB-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_UR:
                    case #INTP_NUR:
                    case #LP_NURG:
                    case #LP_URGSO:
                        value = 'SUPP';                    
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PBOR:
                    case #P_PPOR:
                    case #P_FTWR:
                    case #P_FTWOR:
                    case #STRF:
                    case #INTP_UR:
                    case #INTP_NUR:
                        value = 'SUPP';
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #INTP_UR:
                    case #INTP_NUR:
                        value = 'SUPP';
                        break;
                    case #SALARY:
                        value = 'SALA';
                        break;
                }
                break;
            case 'EU-SEB-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                    case #FED_WIRE:
                        value = 'SUPP';
                        break;
                }
                break;
        }
        
        if(value)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = _nodePmtTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_InstrPrty
    /// </summary>
    /// <param name = "_nodeInstrPrty">_nodeInstrPrty</param>
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodeInstrPrty)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.7: InstrPrty
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
    
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                        value = 'NORM';
                        break;
                    case #LP_URG:
                    case #INTP_UR:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CTWR:
                    case #SDCT:
                    case #FI71:
                    case #GIRO_04:
                    case #GIRO_15:
                    case #FI73:
                    case #FI75:
                    case #INTP_NUR:
                        value = 'NORM';
                        break;
                    case #LP_URG:
                    case #INTP_UR:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-SEB-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                        value = 'NORM';
                        break;
                    case #INTP_UR:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_KIDR:
                    case #P_CSTRD:
                    case #P_CTWR:
                    case #P_CTWOR:
                    case #INTP_NUR:
                        value = 'NORM';
                        break;                    
                    case #INTP_UR:
                    case #LP_URG:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-SEB-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #LP_NURG:
                    case #LP_URGSO:
                    case #INTP_NUR:
                        value = 'NORM';
                        break;
                    case #INTP_UR:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PBOR:
                    case #P_PPOR:
                    case #P_FTWR:
                    case #P_FTWOR:
                    case #STRF:
                    case #INTP_NUR:
                        value = 'NORM';
                        break;
                    case #INTP_UR:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                    case #INTP_NUR:
                        value = 'NORM';
                        break;
                    case #INTP_UR:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-SEB-XML-US':               //SKS#VSTS:14237
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                    case #FED_WIRE:
                        value = 'NORM';
                        break;
                }
                break;
        }
        if(value)
        {
            //             2.7: InstrPrty
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeInstrPrty, 'InstrPrty', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_LclInstrm
    /// </summary>
    /// <param name = "nodePmtTpInf">nodePmtTpInf</param>
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //              2.12: Cd
        //              2.13: Prtry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeLclInstrm;
        str valueCd, valuePrtry;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                    case #INTP_UR:
                        valueCd = 'TRF';
                        break;
                    case #SEPA_SDE:
                        valueCd = 'SDCL';
                        break;
                }
                break;
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CTWR:
                        valuePrtry = 'IBK356';
                        break;
                    case #SDCT:
                    case #SEPA_SDE:
                        valueCd = 'SDCL';
                        break;
                    case #FI71:
                        valuePrtry = 'IBK71';
                        break;
                    Case #GIRO_04:
                        valuePrtry = 'IBK04';
                        break;
                    Case #GIRO_15:
                        valuePrtry = 'IBK15';
                        break;
                    Case #FI73:
                        valuePrtry = 'IBK73';
                        break;
                    Case #FI75:
                        valuePrtry = 'IBK75';
                        break;                    
                    case #INTP_NUR:
                    case #INTP_UR:
                        valueCd = 'TRF';
                        break;
                }
                break;            
            case 'EU-SEB-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                    case #INTP_UR:
                        valueCd = 'TRF';
                        break;
                    case #SEPA_SDE:
                        valueCd = 'SDCL';
                        break;
                }
                break;
            case 'EU-SEB-XML-INT':          //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TREA:
                    case #INTC:
                    case #SDVA:
                        valueCd = 'TRF';
                        break;
                }
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                    case #INTP_UR:
                        valueCd = 'TRF';
                        break;
                    case #SEPA_SDE:
                        valueCd = 'SDCL';
                        break;
                }
                break;
            case 'EU-SEB-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                    case #INTP_UR:
                        valueCd = 'TRF';
                        break;
                    case #SEPA_SDE:
                        valueCd = 'SDCL';
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {                    
                    case #STRF:
                    case #SEPA_SDE:
                        valueCd = 'SDCL';
                        break;
                    case #INTP_NUR:
                    case #INTP_UR:
                        valueCd = 'TRF';
                        break;
                    case #P_PBOR:
                    case #P_PPOR:
                    case #P_FTWR:
                    case #P_FTWOR:
                        valuePrtry = 'DO';
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                        valuePrtry = 'DO';
                        break;
                    case #INTP_NUR:
                    case #INTP_UR:
                        valueCd = 'TRF';
                        break;
                    case #SEPA_SDE:
                        valueCd = 'SDCL';
                        break;
                }
                break;
            case 'EU-SEB-XML-US':               //SKS#DevOps:17978
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #COMURG_INT:
                        valueCd = 'IN';
                        break;
                }
                break;
        }
            
        if(valueCd || valuePrtry)
        {
            //         2.11: LclInstrm
            nodeLclInstrm = nodePmtTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
            if(valueCd)
            {
                //              2.12: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', valueCd);
            }
            else
            {
                //              2.13: Prty
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', valuePrtry);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_SvcLvl_Cd
    /// </summary>
    /// <param name = "nodeSvcLvl">nodeSvcLvl</param>
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
    
        str value, valuePrtry;
        boolean prtry = false;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #LP_URG:
                    case #INTP_UR:
                        value = 'URGP';
                        break;
                    case #INTP_NUR:
                        value = 'NURG';
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CTWR:
                    case #SDCT:
                        value = 'NURG';
                        prtry = true;
                        break;
                    case #FI71:
                    case #GIRO_04:
                    case #GIRO_15:
                    case #FI75:
                    case #INTP_NUR:
                        value = 'NURG';
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SEPA';
                        break;
                    case #INTP_UR:
                    case #LP_URG:
                        value = 'URGP';
                        break;
                }
                break;
            case 'EU-SEB-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                        value = 'NURG';
                        break;
                    case #INTP_UR:
                        value = 'URGP';
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-SEB-XML-INT':             //SKS#DevOps:16494
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SDVA:
                        value = 'SDVA';
                        break;
                    case #INTC:
                        value = 'URGP';
                        break;
                    case #TREA:
                        value = 'NURG';
                        break;
                }
                break;
            case 'EU-SEB-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                        value = 'NURG';
                        break;
                    case #P_KIDR:
                    case #P_CSTRD:
                    case #P_CTWR:
                    case #P_CTWOR:
                        value = 'NURG';
                        prtry = true;
                        break;
                    case #INTP_UR:
                    case #LP_URG:
                        value = 'URGP';
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-SEB-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                    case #LP_NURG:
                        value = 'NURG';
                        break;
                    case #INTP_UR:
                    case #LP_URGSO:
                        value = 'URGP';
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTP_NUR:
                    case #STRF:
                        value = 'NURG';
                        break;
                    case #P_PBOR:
                    case #P_PPOR:
                        valuePrtry = 'MPNS';//SKS_VSTS_14421
                        break;
                    case #P_FTWR:
                    case #P_FTWOR:
                        value = 'NURG';
                        prtry = true;
                        break;
                    case #INTP_UR:
                        value = 'URGP';
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-SEB-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BACS:
                        value = 'NURG';       //SKS_VSTS_13889//Changed in 19715
                        break;
                    case #SALARY:
                    case #INTP_NUR:
                        value = 'NURG';
                        break;
                    case #CHAPS:
                        value = 'URGP';
                        break;  
                    case #INTP_UR:
                        value = 'URGP';
                        break;
                    case #FSTR_PAY:
                        value = 'URNS';
                        break;
                    case #SEPA_CT:
                    case #SEPA_SDE:
                        value = 'SEPA';
                        break;
                }
                break;

            case 'EU-SEB-XML-US':           //SKS_DevOps:16094
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHIPS:
                        value = 'URNS';
                        break;
                    case #FED_WIRE:
                    case #COMURG_INT:           //SKS_DevOps:17978
                        value = 'URGP';
                        break;
                }
                break;

        }
        if(mSKS_EFT_FileDetail.DepSwiftNo && prtry)
        {
            //              2.10: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc,nodeSvcLvl, 'Prtry', 'MPNS');
        }
        else if(valuePrtry)         //SKS_VSTS_13889
        {
            //              2.10: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc,nodeSvcLvl, 'Prtry', valuePrtry);
        }
        else
        {
            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc,nodeSvcLvl, 'Cd', value);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">_nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              CdtNoteAmt
        //              RmtdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            Gross = (_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1;
            Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
        }
    
        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_RfrdDocInf
    /// </summary>
    /// <param name = "nodeRfrdDocInf">nodeRfrdDocInf</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement nodeRfrdDocInf, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        boolean printRltdDt;

        switch(mSKS_EFT_FileDetail.FormatId)//SKS_VSTS_13786
        {
            case 'EU-SEB-XML-SE':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #P_PPOR:
                        printRltdDt = false;
                        break;
                }
                break;
        }

        //              2.121: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));

        //                  2.122: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

        //              2.104: Cd
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');

            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', _invSKS_EFT_FileDetail.InvoiceNumber, 0, false);

            if(printRltdDt)//SKS_VSTS_13786
            {
                //              2.108: RltdDt
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
            }
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', _invSKS_EFT_FileDetail.InvoiceNumber, 0, false);

            if(printRltdDt)//SKS_VSTS_13786
            {
                //              2.108: RltdDt
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_CdtrRefInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_CdtrRefInf
    /// </summary>
    /// <param name = "nodeStrd">nodeStrd</param>
    /// <param name = "invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_CdtrRefInf(XmlElement nodeStrd, SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        XmlElement nodeCdtrRefInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;

        str fik;

        fik = invSKS_EFT_FileDetail.PaymId;
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-SEB-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FI71:
                    case #FI75:
                        fik = subStr(invSKS_EFT_FileDetail.PaymId, 1, 15);
                        break;
                    case #GIRO_04:
                    case #GIRO_15:
                        fik = subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                        break;
                }
                break;  
            case 'EU-SEB-XML-SE'://SKS_VSTS_13786
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PBOR:
                        if(!fik)
                        {
                            fik = invSKS_EFT_FileDetail.InvoiceNumber;
                        }
                        break;
                }
                break;
        }
        if(fik)
        {
            //            2.120: CdtrRefInf
            nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));

            //              2.121: Tp
            nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));

            //                  2.122: CdOrPrtry
            nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

            //                      2.123: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');
    
            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', this.CharacterReplacement(fik), 26, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_StrdRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_StrdRef
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_StrdRef(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeCdtrRefInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail, invSKS_EFT_FileDetailOCR;
        boolean firstRec = true;
        str paymentId;
        int countRec;
        str invNumbers = this.getInvoiceNbrs();

        select count(PaymentLineRecId) from invSKS_EFT_FileDetailOCR where invSKS_EFT_FileDetailOCR.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
        countRec = int642int(invSKS_EFT_FileDetailOCR.PaymentLineRecId);

        while select invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(invSKS_EFT_FileDetail.PaymId)//SKS_VSTS_13843
            {
                paymentId += strFmt('%1,', invSKS_EFT_FileDetail.PaymId);
            }
            
            if(paymentId)
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                    //               2.100: Strd
                    nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
                    firstRec = false;
                }
                            
                if(countRec == 1)
                {
                    //            2.120: CdtrRefInf
                    nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
    
                    //              2.121: Tp
                    nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
    
                    //                  2.122: CdOrPrtry
                    nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
                    //                      2.123: Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');

                    //               2.126: Ref
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', this.CharacterReplacement(subStr(paymentId, 1, strLen(paymentId)-1)), 0, false);
                }
                countRec--;
            }
            else if(invNumbers) //DevOps22166
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                   
                    firstRec = false;
                }
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_Ustrd
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)    
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        LedgerJournalTrans  ledgerJournalTrans;
        str value;
        str invNumbers;
        str RmtPurp;
    
        invNumbers = this.getInvoiceNbrs();
        if(mSKS_EFT_FileDetail.PaymSpec==#COMURG_INT)
        {
            if(invNumbers)
            {
                RmtPurp = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RmtPurp', mSKS_EFT_FileDetail.RecId));
            
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
                if(RmtPurp)
                {
                    //              2.99: Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd','/'+RmtPurp+'/'+' '+invNumbers, 140);
                }
                else
                {
                    //              2.99: Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);
                }
            }
        }
        else
        {
        
            changecompany(mSKS_EFT_FileDetail.PaymentCompany)
            {
                select firstOnly PaymentNotes from ledgerJournalTrans where
                ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
            }
        
            value = ledgerJournalTrans.PaymentNotes;
        
            if(!value)
            {
                value = this.getInvoiceNbrs();
            }
        
            if(value)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
            
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(value), 140);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]

    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>