<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_AutoSettlementBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Auto settlement batch job
/// </summary>
class SKS_LB_AutoSettlementBatch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAutoSettlementBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create batch job for auto-settlement process.
    /// </summary>
    /// <param name = "_element"> object reference </param>
    /// <returns> returns record id </returns>
    public static RecId createAutoSettlementBatch(Object _element)
    {
        RecId recid;

        Dialog              dialog;
        DialogField         dialogField;
        DialogField         threads;
        Batch               Batch;
        BatchHeader         batchHeader;
        BatchInfo           processBatchInfo;
        SysRecurrenceData   recurData;

        Args args = new Args();
        FormRun formrun;

        //dialog
        dialog = new Dialog("@SYS114518");
        dialogField = dialog.addField(extendedTypeStr(BatchCaption), "@SYS114518");
        threads = dialog.addField(extendedTypeStr(PositiveNumber), "@SYS109551");

        if (dialog.run())
        {
            select firstOnly Batch where Batch.Caption == dialogField.value();

            if (!Batch)
            {
                SKS_LB_AutoSettlement autoSettlement = SKS_LB_AutoSettlement::construct();
                autoSettlement.parmNumberOfThreads(threads.value());

                autoSettlement.pack();

                ttsbegin;
                processBatchInfo = autoSettlement.batchInfo();
                processBatchInfo.parmCaption(dialogField.value()); // Description Batch Job
                processBatchInfo.parmGroupId(''); // Batch Gorup
                processBatchInfo.parmBatchExecute(NoYes::Yes);

                // set recurrence
                recurData = SysRecurrence::defaultRecurrence();
                // start at 04:00:00
                recurData = SKS_LB_AutoSettlementBatch::setRecurrenceStartDateTimeAdjusted(recurData, DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 14400));
                // recur every day 04:00:00
                recurData = SysRecurrence::setRecurrenceUnit(recurData, SysRecurrenceUnit::Day, 1);

                // Setup the RunBaseBatch Job
                batchHeader = BatchHeader::construct();
                batchHeader.addTask(autoSettlement);
                batchHeader.parmRecurrenceData(recurData);
                batchHeader.save();
                Batch = processBatchInfo.parmBatch();
                ttscommit;
                info(strFmt("@SKS2466", dialogField.value()));
    
    
                info("@SKS2464");
    
                args.parmObject(formrun);
                args.caller(_element);
                formrun = new MenuFunction( menuitemdisplaystr( BatchJob ), MenuItemType::Display).create(args);
                formrun.run();
                return Batch.RecId;
            }
        }

        return recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecurrenceStartDateTimeAdjusted</Name>
				<Source><![CDATA[
    public static SysRecurrenceData setRecurrenceStartDateTimeAdjusted(
        SysRecurrenceData _sysRecurrenceData, UTCDateTime _dateTime)
    {
        date startDate;
        timeOfDay startTime;
        TimeOfDay tmpStartTime;
        Timezone timezone;
        SysRecurrenceData sysRecurrenceData;

        sysRecurrenceData = _sysRecurrenceData;
        timezone = conpeek(sysRecurrenceData, 9);
        tmpStartTime = DateTimeUtil::time(_dateTime);
    
        startDate = DateTimeUtil::date(_dateTime);
        startTime = DateTimeUtil::time(_dateTime);
        sysRecurrenceData = SysRecurrence::setRecurrenceStartDate(sysRecurrenceData, startDate);
        return SysRecurrence::setRecurrenceTime(sysRecurrenceData, startTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>