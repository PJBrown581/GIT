<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_UNION_PM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_UNION_PM extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_UNION_PM extends SKS_EFT_Format
{
    //----------------------------------------------------------------------------------------------------------------------------
    // ACH and Wire Transfers
    // US – Union Bank – Payables Management
    // Structure:
    // Summary Record
    // Payee Details
    //----------------------------------------------------------------------------------------------------------------------------
    #define.FormatVersion('20230509')
    #define.Comma(',')
    #define.DoubleQuote('"')
    #define.WIREFED('WIRE-FED')
    #define.WIRESWT('WIRE-SWT')
    #define.CHKD('CHK-D')
    #define.CHKZ('CHK-Z')
    #define.CHKR('CHK-R')
    #define.CHKX('CHK-X')
    #define.CHKF('CHK-F')
    #define.CHK('CHK')
    #define.ACH_CCD('ACH-CCD')
    #define.ACH_PPD('ACH-PPD')
    #define.ACH_CTX('ACH-CTX')

    BankAccountTable mBankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressFormat</Name>
				<Source><![CDATA[
    private str addressFormat(str addr1 = '', str addr2 = '', str city = '', str state = '', str zip = '', str country = '')
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str address = '';
        int length;
    
        void buildAddress(str value, int separator = 0)
        {
            //separator 0 = no separator;
            //separator 1 = space;
            //separator 2 = comma space;
    
            if(value != '')
            {
                length = sb.get_Length();
                if(length > 0)
                {
                    switch(separator)
                    {
                        case 2:
                            sb.Append(', ');
                            break;
                        case 1:
                            sb.Append(' ');
                            break;
                    }
                }
    
                sb.Append(Value);
            }
        }
    
        buildAddress(this.CharacterReplacement(addr1));
        buildAddress(this.CharacterReplacement(addr2), 2);
        buildAddress(this.CharacterReplacement(city), 2);
        buildAddress(this.CharacterReplacement(state), 2);
        buildAddress(this.CharacterReplacement(zip), 1);
        buildAddress(country, 1);
    
        address = sb.ToString();
    
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get Bank account
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));
    
            // Detail lines
            this.rec_Summary();
            this.rec_PayeeDetails();
    
            switch(mSKS_EFT_FileDetail.PaymSpec)
            {
                Case #WIREFED:
                Case #WIRESWT:
                case #ACH_CCD:
                case #ACH_PPD:
                    break;
                default:
                    while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                    {
                        this.rec_DetailRecord(invSKS_EFT_FileDetail);
                    }    
                    break;
            }
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DetailRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_DetailRecord
    /// </summary>
    /// <param name = "_SKS_EFT_FileDetail">_SKS_EFT_FileDetail</param>
    /// <returns>boolean</returns>
    public boolean rec_DetailRecord(SKS_EFT_FileDetail _SKS_EFT_FileDetail)
    {
        //----------------------------------------------------------------------------------------------------------------------------
        //Each Field separated by commas
        //Nbr   Description
        // 1    Record Type
        // 2    Check Number
        // 3    Invoice Number
        // 4    Invoice Date
        // 5    Invoice Description
        // 6    Invoice Gross
        // 7    Invoice Discount
        // 8    Invoice Net
        //----------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //Nbr   Description        
        // 1    Record Type
        sb.Append(this.wrapField('I'));
    
        // 2    Check Number
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,10)));
    
        // 3    Invoice Number
        if(mSKS_EFT_FileDetail.TransactionCode == #ACH_CCD   ||
           mSKS_EFT_FileDetail.TransactionCode == #ACH_PPD   ||
           mSKS_EFT_FileDetail.TransactionCode == #ACH_CTX)
        {
            sb.Append(this.wrapField(subStr(_SKS_EFT_FileDetail.InvoiceNumber, 1, 20)));
        }
        else
        {
            sb.Append(this.wrapField((_SKS_EFT_FileDetail.InvoiceNumber)));
        }
    
        // 4    Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(_SKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash)));
    
        // 5    Invoice Description
        sb.Append(this.wrapField(subStr((this.CharacterReplacement(_SKS_EFT_FileDetail.InvoiceTransactionTxt)),1,30), true));
    
        // 6    Invoice Gross
        sb.Append(this.wrapField(subStr(num2str((_SKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _SKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 1,14)));
    
        // 7    Invoice Discount
        sb.Append(this.wrapField(subStr(num2str(_SKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,1,0), 1,14)));
    
        // 8    Invoice Net
        sb.Append(subStr(num2str(_SKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 1,14));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayeeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PayeeDetails
    /// </summary>
    /// <returns>boolean</returns>
    public boolean rec_PayeeDetails()
    {
        //----------------------------------------------------------------------------------------------------------------------------
        //Each Field separated by commas
        //Nbr   Description
        // 1    Record Type
        // 2    Payee Number
        // 3    Payee Name
        // 4    Payee Address 1
        // 5    Payee Address 2
        // 6    Payee Address 3
        // 7    Payee Address 4
        // 8    Payee Address 5
        // 9    Payee Routing Number
        //10    Payee Account Number
        //11    Payee Account Type
        //12    Intermediary Bank Routing Method
        //13    Intermediary Bank Identification Code
        //14    Intermediary Account Number Qualifier
        //15    Payee Routing ID
        //16    Bank Fees
        //17    Payment Details 1
        //18    Payment Details 2
        //19    Payment Details 3
        //20    Payment Details 4
        //----------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invDetails = '', strAddress;
        SKS_EFT_FileDetail sks_EFT_FileDetail;
        container           ConAddress;
        str value, address;
        int length;
    
        //Nbr   Description
        // 1    Record Type
        sb.Append(this.wrapField('P'));
        // 2    Payee Number (Unused)
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.AccountNum, 1, 10)));

        if(mSKS_EFT_FileDetail.PaymSpec == #WIREFED ||
           mSKS_EFT_FileDetail.PaymSpec == #WIRESWT)
        {
            // 3    Payee Name
            mRemittanceName = this.RemittanceNamePopulate(mSKS_EFT_FileDetail_VendAddress.BeneName, mSKS_EFT_FileDetail, mSKS_EFT_FileDetail.PaymSpec);
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mRemittanceName),1,70), true));          

            // 4    Payee Address 1
            strAddress = mSKS_EFT_FileDetail_VendAddress.BeneAddr + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
            ConAddress = this.AddressPopulate(strAddress, mSKS_EFT_FileDetail);//This is an extension point for customizations
            if(ConAddress != conNull())
            {
                strAddress = conPeek(ConAddress,1);
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(strAddress),1,70), true));                
            }
            else
            {
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(strAddress),1,70), true));
            }
            // 5    Payee Address 2
            sb.Append(this.wrapField(''));

            // 6    Payee Address 3
            sb.Append(this.wrapField(''));
        }
        else if(mSKS_EFT_FileDetail.PaymSpec == #ACH_CCD ||
                mSKS_EFT_FileDetail.PaymSpec == #ACH_CTX ||
                mSKS_EFT_FileDetail.PaymSpec == #ACH_PPD )
        {
            // 3    Payee Name
            mRemittanceName = this.RemittanceNamePopulate(mSKS_EFT_FileDetail_VendAddress.BeneName, mSKS_EFT_FileDetail, mSKS_EFT_FileDetail.PaymSpec);
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mRemittanceName),1,70), true));

            // 4    Payee Address 1
            strAddress = mSKS_EFT_FileDetail_VendAddress.BeneAddr + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
            ConAddress = this.AddressPopulate(strAddress, mSKS_EFT_FileDetail);//This is an extension point for customizations
            if(ConAddress != conNull())
            {
                strAddress = conPeek(ConAddress,1);
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(strAddress),1,70), true));
                // 5    Payee Address 2
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(conPeek(ConAddress,2)),1,40), true));
            }
            else
            {
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(strAddress),1,70), true));
                // 5    Payee Address 2
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity),1,40), true));
            }
    
            // 6    Payee Address 3
            sb.Append(this.wrapField(''));
        }
        else
        {
            // 3    Payee Name
            switch(mSKS_EFT_FileDetail.PaymSpec)        //SKS#VSTS:14293
            {
                Case #CHKD:
                Case #CHKZ:
                Case #CHKR:
                Case #CHKX:
                Case #CHKF:
                Case #CHK:
                    length = 64;
                    break;
                default:
                    length = 40;
                    break;
            }
            mRemittanceName = this.RemittanceNamePopulate(mSKS_EFT_FileDetail_VendAddress.BeneName, mSKS_EFT_FileDetail, mSKS_EFT_FileDetail.PaymSpec);
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mRemittanceName),1,length), true));

            // 4    Payee Address 1
            strAddress = mSKS_EFT_FileDetail_VendAddress.BeneAddr + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
            ConAddress = this.AddressPopulate(strAddress, mSKS_EFT_FileDetail);//This is an extension point for customizations
            if(ConAddress != conNull())
            {
                strAddress = conPeek(ConAddress,1);
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(strAddress),1,70), true));

                // 5    Payee Address 2
                sb.Append(this.wrapField(''));
    
                // 6    Payee Address 3
                sb.Append(this.wrapField(''));
            }
            else
            {
                sb.Append(this.wrapField(subStr(this.CharacterReplacement(strAddress),1,70), true));

                // 5    Payee Address 2
                sb.Append(this.wrapField(''));
    
                // 6    Payee Address 3
                sb.Append(this.wrapField(''));
            }
        }
        if(mSKS_EFT_FileDetail.PaymSpec == #WIREFED  ||
           mSKS_EFT_FileDetail.TransactionCode == #CHK)   //SKS#DevOps:16334
        {
            // 7    Payee Address 4
            address = mSKS_EFT_FileDetail_VendAddress.BeneCity;
    
            if(address != '')
            {
                if(mSKS_EFT_FileDetail_VendAddress.BeneState != '')
                {
                    address += #Comma + ' ';
                }
            }
    
            address += mSKS_EFT_FileDetail_VendAddress.BeneState;
    
            if(address != '')
            {
                if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal != '')
                {
                    address += #Comma + ' ';
                }                
            }
    
            address += mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
           
            sb.Append(this.wrapField(this.CharacterReplacement(address), true));

            // 8    Payee bank account number
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));    
        }
        else if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == #WIRESWT)     //SKS#DevOps:16334
        {
            // 7    Payee Address 4
            address = mSKS_EFT_FileDetail_VendAddress.BeneCity;
    
            if(address != '')
            {
                if(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId != '')
                {
                    address += #Comma + ' ';
                }
            }
            address += this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);

            sb.Append(this.wrapField(address, true));

            // 8    Payee bank account number
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));   
        }
        else if(ConAddress != conNull())
        {
            // 7    Payee Address 4
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(conPeek(conaddress,4)),1,40), true));
            // 8    Payee Address 5
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(conpeek(ConAddress,5)), true));          //VSTS#11496
        }
        else
        {
            // 7    Payee Address 4
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal),1,40), true));
            // 8    Payee Address 5
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), true));          //VSTS#11496
        }
            
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #WIREFED:
            Case #WIRESWT:
            Case #CHKD:
            Case #CHKZ:
            Case #CHKR:
            Case #CHKX:
            Case #CHKF:
            Case #CHK:          //SKS#DevOps:16334                 
                // 9    Payee account type
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {                        
                    sb.Append(this.wrapField('SA', true));
                }
                else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::CheckingAccount)
                {
                    sb.Append(this.wrapField('DA', true));
                }    
                if(mSKS_EFT_FileDetail.DepSwiftNo != '' && mSKS_EFT_FileDetail.PaymSpec == #WIRESWT)
                {
                    // 10    Payee SWIFT Number
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo,1,11)));
                }
                else
                {
                    // 10    Payee Routing Number
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,34)));
                }
    
                //11    Bank name
                sb.Append(this.wrapField(''));
                
                //12    Payee bank country code
                sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), true));
                
                //13    intermediary bank info
                sb.Append(this.wrapField(''));

                //14    intermediary bank info
                sb.Append(this.wrapField(''));

                //15    intermediary bank info
                sb.Append(this.wrapField(''));

                //16    intermediary bank info
                sb.Append(this.wrapField(''));

                //17    intermediary bank info
                sb.Append(this.wrapField(''));

                //18    Bank Fees
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId));

                if(value)
                {
                    sb.Append(this.wrapField(value, true));
                }
                else
                {
                    sb.Append(this.wrapField(''));
                }
                
                if(mSKS_EFT_FileDetail.PaymSpec == #WIREFED ||
                   mSKS_EFT_FileDetail.PaymSpec == #WIRESWT)        //SKS#DevOps:16334
                {
                    //19    Payment Details 1
                    while select InvoiceNumber from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                    {
                        if(strLen(invDetails) != 0)
                        {
                            invDetails += ' ';
                        }
                        invDetails += sks_EFT_FileDetail.InvoiceNumber;
                    }
                    sb.Append(this.wrapField(subStr(this.CharacterReplacement(invDetails),1,35)));//SKS_VSTS_13194

                    //20    Payment Details 2
                    sb.Append(this.wrapField(subStr(this.CharacterReplacement(invDetails),36,35)));//SKS_VSTS_13194
                    
                    //21    Payment Details 3
                    sb.Append(this.wrapField(subStr(this.CharacterReplacement(invDetails),71,35)));//SKS_VSTS_13194
                    
                    //22    Payment Details 4
                    sb.Append(this.wrapField(subStr(this.CharacterReplacement(invDetails),106,35), false, false));//SKS_VSTS_13194
                }
                else
                {
                    //19    payment detail info
                    sb.Append(this.wrapField(''));

                    //20    payment detail info
                    sb.Append(this.wrapField(''));

                    //21    payment detail info
                    sb.Append(this.wrapField(''));

                    //22    payment detail info
                    sb.Append(this.wrapField('', false, false));
                }
                break;
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                //  8    Payee Routing Number
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,9)));

                //  9   Payee Account Number
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct,1,34)));

                //  10  Payee account type
                sb.Append(this.wrapField('DA'));
                
                //11    Intermediary Bank Routing Method
                sb.Append(#Comma);
                //12    Intermediary Bank Identification Code
                sb.Append(#Comma);
                //13    Intermediary Account Number Qualifier
                sb.Append(#Comma);
                //14    Payee Routing ID
                sb.Append(#Comma);
                //15    Bank Fees
                sb.Append(#Comma);
                //16    Payment Details 1
                sb.Append(#Comma);
                //17    Payment Details 2
                sb.Append(#Comma);
                //18    Payment Details 3
                sb.Append(#Comma);
                //19    Payment Details 4
                break;
            Default:
                // 8    Payee Routing Number
                sb.Append(#Comma);
                // 9    Payee Account Number
                sb.Append(#Comma);
                //10    Payee Account Type
                sb.Append(#Comma);
                //11    Intermediary Bank Routing Method
                sb.Append(#Comma);
                //12    Intermediary Bank Identification Code
                sb.Append(#Comma);
                //13    Intermediary Account Number Qualifier
                sb.Append(#Comma);
                //14    Payee Routing ID
                sb.Append(#Comma);
                //15    Bank Fees
                sb.Append(#Comma);
                //16    Payment Details 1
                sb.Append(#Comma);
                //17    Payment Details 2
                sb.Append(#Comma);
                //18    Payment Details 3
                sb.Append(#Comma);
                //19    Payment Details 4
                break;
        }
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Summary</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Summary
    /// </summary>
    /// <returns>boolean</returns>
    public boolean rec_Summary()
    {
        //----------------------------------------------------------------------------------------------------------------------------
        //Each Field separated by commas
        //Nbr   Description
        // 1    Record Type
        // 2    Payment Code
        // 3    Check Number
        // 4    Check Date
        // 5    Check Amount
        // 6    Company (Payer) name
        // 7    Payer Address 1
        // 8    Payer Address 2
        // 9    Payer Address 3
        //10    Payer Address 4
        //11    Payer Routing Number
        //12    Payer Account Number
        //13    Payment Type
        //14    Prenote
        //15    Handling Code
        //16    Service Class Code
        //17    ACH format type
        //18    Payment Method Code
        //19    Currency Code
        //20    Payer Routing ID
        //21    TIC
        //22    SIC
        //23    Security Code
        //----------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str strAddress;
    
        // 1    Record Type
        sb.Append(this.wrapField('S'));
        // 2    Payment Code
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3)));
        // 3    Check Number
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,14)));
        // 4    Check Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Slash)));
        // 5    Check Amount
        sb.Append(this.wrapField(subStr(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0),1,14)));
        // 6    Company (Payer) name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),1,40), true));
        // 7    Payer Address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr),1,40), true));
        // 8    Payer Address 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2),1,40), true));
        // 9    Payer Address 3
        sb.Append(#Comma);
        //10    Payer Address 4
        strAddress = mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;
    
        if(strAddress != '')
        {
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '')
            {
                strAddress += #Comma + ' ';
            }
        }
    
        strAddress += mSKS_EFT_FileDetail_BankAccount.WOrdPartyState;
    
        if(strAddress != '')
        {
            strAddress += #Comma + ' ';
        }
    
        strAddress += mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode;
    
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(strAddress),1,40), true, true));

        //11    Payer Routing Number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankTransit,1,9)));

        //12    Payer Account Number
        if(mSKS_EFT_FileDetail.BankBankIBAN != '' && 
           (mSKS_EFT_FileDetail.TransactionCode != #ACH_CCD  &&
            mSKS_EFT_FileDetail.TransactionCode != #ACH_PPD  &&
            mSKS_EFT_FileDetail.TransactionCode != #ACH_CTX))
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankIBAN,1,34)));
        }
        else
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct,1,16)));
        }
    
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #WIREFED:
            Case #WIRESWT:
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                //13    Payment Type
                if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur >= 0)
                {
                    sb.Append('DEBIT');
                }
                else
                {
                    sb.Append('CREDIT');
                }
                sb.Append(#Comma);
                break;
            default:
                sb.Append(#Comma);
                break;
        }
        //14    Prenote (Unused ACH)
        sb.Append(#Comma);
        //15    Handling Code
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #CHKD:
                sb.Append(this.wrapField('D'));
                break;
            Case #CHKZ:
                sb.Append(this.wrapField('Z'));
                break;
            Case #CHKR:
                sb.Append(this.wrapField('R'));
                break;
            Case #CHKX:
                sb.Append(this.wrapField('X'));
                break;
            Case #CHKF:
                sb.Append(this.wrapField('F'));
                break;
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('HndlgCd', mSKS_EFT_FileDetail.RecId)), true));
                break;
            Default:
                sb.Append(#Comma);
                break;
        }
        //16    Service Class Code
        if(mSKS_EFT_FileDetail.TransactionCode == #ACH_CCD   ||
           mSKS_EFT_FileDetail.TransactionCode == #ACH_PPD   ||
           mSKS_EFT_FileDetail.TransactionCode == #ACH_CTX)
        {
            if(mSKS_EFT_FileFormatPaymSpec.UseWithVendors == NoYes::Yes &&
               mSKS_EFT_FileFormatPaymSpec.UseWithCustomers == NoYes::Yes)
            {
                sb.Append(this.wrapField('200'));
            }
            else if(mSKS_EFT_FileFormatPaymSpec.UseWithVendors == NoYes::Yes)
            {
                sb.Append(this.wrapField('220'));
            }
            else
            {
                sb.Append(this.wrapField('225'));
            }
        }
        else
        {
            sb.Append(#Comma);
        }
        //17    ACH format type (unused ACH)
        switch(mSKS_EFT_FileDetail.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.TransactionCode, strLen(mSKS_EFT_FileDetail.TransactionCode), -3)));
                break;
            default:
                sb.Append(#Comma);
                break;
        }
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            Case #WIREFED:
            Case #WIRESWT:
                if(mSKS_EFT_FileDetail.PaymSpec == #WIREFED)
                {
                    //18    Payment Method Code
                    sb.Append(this.wrapField('FWT'));
                }
                else
                {
                    //18    Payment Method Code
                    sb.Append(this.wrapField('SWT'));
                }
    
                //19    Currency Code
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentCurrencyCode,1,3)));
    
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        //20    Payer Routing ID
                        sb.Append(this.wrapField('01'));
                        break;
                    case #WIRESWT:
                        if(mSKS_EFT_FileDetail.BankBankSwiftNo != '')
                        {
                            //20    Payer Routing ID
                            sb.Append(this.wrapField('02', false, false));
                        }
                        else
                        {
                            //20    Payer Routing ID
                            sb.Append(this.wrapField('', false, false));
                        }
                        break;
                    default:
                        //20    Payer Routing ID
                        sb.Append(this.wrapField('', false, false));
                        break;                        
                }
                break;
            default:
                //18    Payment Method Code
                sb.Append(#Comma);
                //19    Currency Code
                sb.Append(#Comma);
                //20    Payer Routing ID
                break;
        }
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #WIREFED:
            case #WIRESWT:
                sb.Append(#Comma);

                //21    TIC
                sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('TransactionID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));

                //22    SIC
                sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('ShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
                
                //23    Security Code
                sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('SecCd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), false, false));
                break;
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _quotations = false, boolean _addcomma = true)
    {
        str text;
    
        if(_quotations)
        {
            text = #DoubleQuote + _field + #DoubleQuote;
        }
        else
        {
            text = _field;
        }
        if(_addcomma)
        {
            text += #Comma;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddressPopulate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public container AddressPopulate(str _strAddress, SKS_EFT_FileDetail  _FileDetail)
    {
        container conAddress;
        return conAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RemittanceNamePopulate</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public str RemittanceNamePopulate(str _remittanceName, SKS_EFT_FileDetail  _FileDetail, paymSpec _PaymSpec)
    {
        return _remittanceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>