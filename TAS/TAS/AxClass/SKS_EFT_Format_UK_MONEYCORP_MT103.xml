<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_MONEYCORP_MT103</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_SVB_MT103 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_MONEYCORP_MT103 extends SKS_EFT_Format
{
    #define.FormatVersion('20221212')
    #define.DOM('DOM')
    #define.INT('INT')
    str invNum;
    str Irs, Seco;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();            
            
            this.rec_BasicHeaderBlock();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BasicHeaderBlock</Name>
				<Source><![CDATA[
    private void rec_BasicHeaderBlock()
    {
        str amount, idn;
        invNum = this.getInvoiceDetails();
    
        //Block Id
        this.fileWrite('{1:F012300000400000000000031}');

        //SWIFT address
        this.fileWrite('{2:I103' + subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 12) +'000003003}');

        this.fileWrite('{4:');

        this.fileWrite(':20:' + subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16));

        this.fileWrite(':23B:CRED');

        amount = num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0);

        this.fileWrite(':32A:' + SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)
                               + mSKS_EFT_FileDetail.PaymentCurrencyCode
                               + amount);   //DevOps18369

        //  :50/D:Our IBAN
        if(mSKS_EFT_FileDetail.BankBankIBAN != '' && (mSKS_EFT_FileDetail.BankBankTransit == mSKS_EFT_FileDetail.DepBankTransit))
        {
            this.fileWrite(':50:/D/' + subStr(mSKS_EFT_FileDetail.BankBankIBAN, 1, 34));
        }
        else
        {
            this.fileWrite(':50:/D/' + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 34));
        }       
           
        //  Our Name
        if(mSKS_EFT_FileDetail.FileACHCompanyName != '')
        {
            this.fileWrite('/NAME/' + this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.FileACHCompanyName, 1, 35)));
        }
        Irs  = SKS_EFT_Format::getCodelookupvalue('IRS', mSKS_EFT_FileDetail.RecId);
        Seco = SKS_EFT_Format::getCodelookupvalue('SECO', mSKS_EFT_FileDetail.RecId);

        if(Irs)
        {
            this.fileWrite('/IRS/' + this.CharacterReplacement(Irs));
        }

        if(Seco)
        {
            this.fileWrite('/SECO/'+ this.CharacterReplacement(Seco));
        }

        this.fileWrite(':52B:' + subStr(mSKS_EFT_FileDetail.BankBankSwiftNo, 1, 15));

        this.fileWrite(':57C:' + subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 15));             
               
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            this.fileWrite(':59:' + subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 35));
        }
        else
        {
            this.fileWrite(':59:' + subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35));
        }

        //  Beneficiary Name/Address
        if(mSKS_EFT_FileDetail_VendAddress.BeneName != '')  
        {
            this.fileWrite('/NAME/' + this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 1, 35)));
        }

        idn = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IDN', mSKS_EFT_FileDetail.RecId));
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INT && idn)
        {       
            if(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId) =='KZ')
            {
                this.fileWrite('/IDN/'+'BIN' + this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IDN', mSKS_EFT_FileDetail.RecId)));
            }
            else if(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId) =='RU')
            {
                this.fileWrite('/IDN/'+'INN' + this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IDN', mSKS_EFT_FileDetail.RecId)));
            }
        }
        
        if(mSKS_EFT_FileDetail_VendAddress.BeneAddr != '' || mSKS_EFT_FileDetail_VendAddress.BeneAddr2 != '')
        {
            this.fileWrite('/ADDRESS/' + this.CharacterReplacement(subStr(strLRTrim(mSKS_EFT_FileDetail_VendAddress.BeneAddr + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 1, 35)));
        }
      
        //iso contry code
        this.fileWrite(subStr('/COUNTRYCODE/'+ this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 1,20));
        

        if(Irs)
        {
            this.fileWrite('/IRS/' + this.CharacterReplacement(Irs));
        }

        if(Seco)
        {
            this.fileWrite('/SECO/'+ this.CharacterReplacement(Seco));
        }

        this.fileWrite(':70:');

        
        this.fileWrite('/NUM/'+ SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate) + subStr(invNum, 1,strFind(invNum,'|',1,35)-1));

        //Payment Document Date
        this.fileWrite('/DATE/' + SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate));

        this.fileWrite('/KNP/710');

        //Removing the last | from the invoice number string
        invNum = subStr(invNum,1,strLen(invNum)-1);

        ///INV/
        if(subStr(invNum, 1, 30) != '')
        {
            this.fileWrite('/INV/' + subStr(invNum, 1,35));
        }

        this.fileWrite('/ASSIGN/' + 'INVOICE ' + subStr(invNum, 1,28));
       
       
        if(subStr(invNum, 29, 35) != '')
        {
            this.fileWrite(subStr(invNum, 29, 35));
        }
        if(subStr(invNum, 64, 35) != '')
        {
            this.fileWrite(subStr(invNum, 65, 35));
        }
        if(subStr(invNum, 99, 35) != '')
        {
            this.fileWrite(subStr(invNum, 99, 35));
        }

        this.fileWrite(':71A:OUR');

        
        this.fileWrite(':71B:');

        this.fileWrite(':72:');

        //SAPNumber
        if(subStr(invNum, 1, 29) != '')
        {
            this.fileWrite('/NOTE/' + subStr(invNum, 1,29));
        }
        if(subStr(invNum, 30, 35) != '')
        {
            this.fileWrite(subStr(invNum, 30, 35));
        }
        if(subStr(invNum, 65, 35) != '')
        {
            this.fileWrite(subStr(invNum, 65, 35));
        }
        if(subStr(invNum, 100, 35) != '')
        {
            this.fileWrite(subStr(invNum, 100, 35));
        }

        //Routing Number
        this.fileWrite('/BRANCH/' + subStr(mSKS_EFT_FileDetail.DepBankTransit, 1,9));

        this.fileWrite('-}');                     


    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get invocie details
    /// </summary>
    /// <returns>str</returns>
    private str getInvoiceDetails()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invInvoiveNumber;
            
        while select InvoiceNumber  from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
               && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invInvoiveNumber += strFmt('%1|', invSKS_EFT_FileDetail.InvoiceNumber);
        }       
        return invInvoiveNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    /// <summary>
    ///selectPaymentRecords
    /// </summary>
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>