<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_BulkSendWalletLinks</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_BulkSendWalletLinks extends RunBaseBatch
{
    #OCCRetryCount
    QueryRun            queryRun;
    DialogField         dfNumberOfThreads;
    DialogField         dfSkipCustWithCards;
    DialogField         dfDisplaySendWalletLinkResults;    
    PositiveNumber      numberOfThreads;
    NoYes               skipCustWithCards;
    NoYes               displaySendWalletLinkResults;    
    Map                 recordsToProcessMap;
    Counter             walletLinkCounter;
    date                currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

    #define.CurrentVersion(1)
    #localmacro.CurrentList        
        numberOfThreads,        
        displaySendWalletLinkResults,
        skipCustWithCards
    #endmacro    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super();        
        
        dfNumberOfThreads = dialog.addFieldValue(extendedTypeStr(PositiveNumber), numberOfThreads, "@SYS109551");
        dfDisplaySendWalletLinkResults = dialog.addFieldValue(extendedTypeStr(NoYesId), displaySendWalletLinkResults, "@SKS:SKGCCDispEachLinkResults");        
        dfSkipCustWithCards = dialog.addFieldValue(extendedTypeStr(NoYesId), skipCustWithCards, "@SKS:SKGCCSkipCustWithCards", "@SKS:SKGCCSkipCustWithCardsHelpText");
        
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();        
        
        numberOfThreads = dfNumberOfThreads.value();
        displaySendWalletLinkResults = dfDisplaySendWalletLinkResults.value();
        skipCustWithCards = dfSkipCustWithCards.value();
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (numberOfThreads > 8)
        {
            ret = checkFailed("@SKS:SKGCCMaxNbrOfThreadsAllowedIsEight");
        }

        if (ret)
        {
            QueryRun qryRun = new QueryRun(this.getCustomerListQuery(true));
            while (qryRun.next())
            {
                CustTable custTable = qryRun.get(tableNum(CustTable));

                if (custTable.RecId)
                {
                    if (Box::okCancel(strFmt("@SKS:SKGCCBulkSendWalletLinkDlgMsg", int642Str(custTable.RecId)),
                        DialogButton::Cancel, "@SKS:SKGCCConfirmBulkSendWalletLinks") == DialogButton::Cancel)
                    {
                        ret = false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerListQuery</Name>
				<Source><![CDATA[
    protected Query getCustomerListQuery(boolean _isCountQuery = false)
    {
        Query qry = new Query(queryRun.query());

        QueryBuildDataSource qbdsCustTable = qry.dataSourceTable(tableNum(CustTable));
        QueryBuildFieldList qbFieldList = qbdsCustTable.fields();
        qbFieldList.clearFieldList();
        if (_isCountQuery)
        {
            qbFieldList.addField(fieldNum(CustTable, RecId), SelectionField::Count);
        }
        else
        {
            qbFieldList.addField(fieldNum(CustTable, RecId), SelectionField::Database);
        }

        QueryBuildDataSource qbdsPayLinkQueue = qbdsCustTable.addDataSource(tableNum(SKS_CC_PayLinkQueue));        
        qbdsPayLinkQueue.joinMode(JoinMode::NoExistsJoin);
        qbdsPayLinkQueue.addLink(fieldNum(CustTable, AccountNum), fieldNum(SKS_CC_PayLinkQueue, AccountNum));

        QueryBuildRange qbrLinkStatus = qbdsPayLinkQueue.addRange(fieldNum(SKS_CC_PayLinkQueue, Status));
        qbrLinkStatus.value(SysQuery::value(SKS_CC_PayLinkProcessStatus::Pending));

        if (skipCustWithCards)
        {
            QueryBuildDataSource qbdsCreditCardCustView = qbdsCustTable.addDataSource(tableNum(SKS_CC_CreditCardCustView));
            qbdsCreditCardCustView.joinMode(JoinMode::NoExistsJoin);
            qbdsCreditCardCustView.addLink(fieldNum(CustTable, AccountNum), fieldNum(SKS_CC_CreditCardCustView, CustAccount));

            QueryBuildRange qbrExpirationDate = qbdsCreditCardCustView.addRange(fieldNum(SKS_CC_CreditCardCustView, ExpirationDate));
            qbrExpirationDate.value(SysQuery::range(currentDate, dateMax()));
        }

        return qry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {        
        Query qry = new Query();

        QueryBuildDataSource qbdsCustTable = qry.addDataSource(tableNum(CustTable));
        qbdsCustTable.addOrderByField(fieldNum(CustTable, RecId));
        
        qbdsCustTable.addRange(fieldNum(CustTable, AccountNum));
        qbdsCustTable.addRange(fieldNum(CustTable, CustGroup));
        qbdsCustTable.addRange(fieldNum(CustTable, PaymTermId));
        
        return qry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        if (!queryRun)
        {
            queryRun = new QueryRun(this.buildQuery());
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        queryRun = new QueryRun(this.buildQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        PackedQueryRun packedQueryRun;        

        switch (version)
        {
            case(#CurrentVersion):
                [version, #Currentlist, packedQueryRun] = _packedClass;

                if (packedQueryRun)
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecordList</Name>
				<Source><![CDATA[
    protected void processRecordList()
    {
        BatchHeader batchHeader;
        container rangesPerThreadCon;
        container keyRangesCon;
        container custList, keysRangeList;

        if (this.isInBatch())
        {
            if (!numberOfThreads)
            {
                numberOfThreads = 4;
            }

            if (walletLinkCounter <= numberOfThreads)
            {
                numberOfThreads = 1;
            }
        }
        else
        {
            numberOfThreads = 1;
        }

        [rangesPerThreadCon, keyRangesCon] = this.setRangePerThread(walletLinkCounter);

        if (this.isInBatch())
        {            
            str batchThreadCaption;
            int i;
            for (i = 1; i <= numberOfThreads; i++)
            {
                if (!batchHeader)
                {
                    batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
                }

                custList = conPeek(rangesPerThreadCon, i);
                if (!custList)
                {
                    continue;
                }
                keysRangeList = conPeek(keyRangesCon, i);

                int curTaskRangeFrom, curTaskRangeTo, curTaskNbrOfRecords;
                curTaskRangeFrom = conPeek(keysRangeList, 1);
                curTaskNbrOfRecords = conLen(keysRangeList);
                curTaskRangeTo = conPeek(keysRangeList, curTaskNbrOfRecords);
                
                batchThreadCaption = strFmt("@SKS:SKGCCPayLinkBatchThreadCaption", SKS_CC_BulkSendWalletLinksSubTask::description(), i, curTaskRangeFrom, curTaskRangeTo);
                SKS_CC_BulkSendWalletLinksSubTask bulkSendWalletLinksSubTask = SKS_CC_BulkSendWalletLinksSubTask::newSubTask(custList, batchThreadCaption, displaySendWalletLinkResults, true);

                batchHeader.addRuntimeTask(bulkSendWalletLinksSubTask, this.parmCurrentBatch().RecId);
            }
            
            if (batchHeader)
            {
                batchHeader.save();
            }
        }
        else
        {
            // when not in batch
            custList = conPeek(rangesPerThreadCon, 1);
            SKS_CC_BulkSendWalletLinksSubTask::newSubTask(custList, '', displaySendWalletLinkResults, false).run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangePerThread</Name>
				<Source><![CDATA[
    private container setRangePerThread(int _nbrToProc)
    {
        container       recordsToProcCon, keysToProcCon;
        container       curRecsCon, curKeysCon;
        int             intDiv, lastUsedRange, i;
        int             curKey;
        int64           curValue;
        MapEnumerator   me;

        intDiv = _nbrToProc div numberOfThreads;

        i = 1;
        lastUsedRange = intDiv;
        me = recordsToProcessMap.getEnumerator();
        while (me.moveNext())
        {
            curKey = me.currentKey();
            curValue = me.currentValue();
            curRecsCon += curValue;
            curKeysCon += curKey;

            if (i < numberOfThreads && curKey == lastUsedRange)
            {
                lastUsedRange += intDiv;
                recordsToProcCon = conIns(recordsToProcCon, i, curRecsCon);
                keysToProcCon = conIns(keysToProcCon, i, curKeysCon);
                curRecsCon = conNull();
                curKeysCon = conNull();
                i++;
            }
        }

        if (curRecsCon && conLen(curRecsCon) != 0)
        {
            recordsToProcCon = conIns(recordsToProcCon, i, curRecsCon);
            keysToProcCon = conIns(keysToProcCon, i, curKeysCon);
        }

        return [recordsToProcCon, keysToProcCon];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        recordsToProcessMap = new Map(Types::Integer, Types::Int64);

        QueryRun qryRun = new QueryRun(this.getCustomerListQuery());
        while (qryRun.next())
        {
            CustTable custTable = qryRun.get(tableNum(CustTable));

            walletLinkCounter++;
            recordsToProcessMap.insert(walletLinkCounter, custTable.RecId);
        }

        if (!walletLinkCounter || !recordsToProcessMap || recordsToProcessMap.empty())
        {
            return;
        }

        info(strFmt("@SKS:SKGCCWalletLinksToSend", walletLinkCounter));

        this.processRecordList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_BulkSendWalletLinks construct()
    {
        return new SKS_CC_BulkSendWalletLinks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS:SKGCCBulkSendWalletLinks";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CC_BulkSendWalletLinks bulkSendWalletLinks = SKS_CC_BulkSendWalletLinks::construct();

        SKS_CC_BulkSendWalletLinks::checkWalletLinkModuleIsEnabled();

        if (bulkSendWalletLinks.prompt())
        {
            bulkSendWalletLinks.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWalletLinkModuleIsEnabled</Name>
				<Source><![CDATA[
    public static void checkWalletLinkModuleIsEnabled(SKS_PP_Setup _sKS_PP_Setup = SKS_PP_Setup::find())
    {
        if (!SKS_CC_PayFabricWalletHandler::isPayFabricActiveProcessor())
        {
            throw error("@SKS:SKGCCPayFabricNotActivePaymProc");
        }

        if (_sKS_PP_Setup.ModCC == NoYes::No || _sKS_PP_Setup.CCPLEnableWalletLinks == NoYes::No)
        {
            throw error("@SKS:SKGCCSendWalletLinkIsNotAllowedErrorMsg");
        }

        if (!_sKS_PP_Setup.CCPayLinkEnumUpgraded)
        {
            throw error("@SKS:SKGCCRefreshLinkIsNotAllowedDueToUpgrade");
        }

        if (_sKS_PP_Setup.CCPLContactDefaultPreference == SKS_CC_PLContactDefaultPreference::None)
        {
            throw error(strFmt("@SKS:SKGCCContactDfltPrefSetToNone",
                fieldId2PName(tableNum(SKS_PP_Setup), fieldNum(SKS_PP_Setup, CCPLContactDefaultPreference)),
                enum2Str(SKS_CC_PLContactDefaultPreference::None)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>