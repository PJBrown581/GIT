<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_ReconcileAll</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CCR_ReconcileAll
{        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer locBankAccountStatement is selected forUpdate and is passed to other methods where it is modified.")]
    public static void main(Args _args)
    {
        BankAccountStatement locBankAccountStatement ;
        SKS_BR_ClickNMatchSessions locSKS_BR_ClickNMatchSessions;
        BankAccountReconcile locBankAccountReconcile;
        container locCrossCompanyList;
        SKS_CCR_BankAccountStatementFilter   StatementFilter;

        StatementFilter = _args.parmobject();

        locCrossCompanyList = StatementFilter.GetSetCompany() == '' ? SKS_EB_VirtualCompany::getCCRRecCompanies() : str2con(StatementFilter.GetSetCompany());

        if(StatementFilter.GetSetBankAccount() == '')
        {
            select forupdate crosscompany:locCrossCompanyList *  from locBankAccountStatement
            where locBankAccountStatement.ReconcileDate == dateNull()
            && locBankAccountStatement.SKS_CCR_BankHeaderRecId > 0;
        }
        else
        {
            select forupdate crosscompany:locCrossCompanyList *  from locBankAccountStatement
            where locBankAccountStatement.ReconcileDate == dateNull()
                && locBankAccountStatement.AccountId == StatementFilter.GetSetBankAccount()
                && locBankAccountStatement.SKS_CCR_BankHeaderRecId > 0;
        }

        while(locBankAccountStatement)
        {
            changecompany(locBankAccountStatement.company() )
            {
                locSKS_BR_ClickNMatchSessions = SKS_BR_MatchAll::getClickNMatchSession(locBankAccountStatement);
                if(locSKS_BR_ClickNMatchSessions)
                {
                    warning(strFmt("@SKS:SKGCurrentlyInClickNMatch"
                            ,locBankAccountStatement.company()
                            ,locBankAccountStatement.AccountId
                            ,SKS_PP_StringFormats::strDateMMDDYYYY(locBankAccountStatement.AccountStatementDate,DateSeparator::Slash)
                            ,locBankAccountStatement.AccountStatementNum
                            ,new xSession(locSKS_BR_ClickNMatchSessions.SessionId).userId()));
                    continue;
                }
                else if((locBankAccountStatement.SKS_CCR_SessionId ? new xSession(locBankAccountStatement.SKS_CCR_SessionId).userId() : '') != '')
                {
                    warning(strfmt("@SKS:SKGCurrentlyInStatement"
                        ,locBankAccountStatement.company()
                        ,locBankAccountStatement.AccountId
                        ,SKS_PP_StringFormats::strDateMMDDYYYY(locBankAccountStatement.AccountStatementDate,DateSeparator::Slash)
                        ,locBankAccountStatement.AccountStatementNum
                        ,new xSession(locBankAccountStatement.SKS_CCR_SessionId).userId()));
                    continue;
                }
                else if (SKS_CCR_BankAcctStmt::importUnmatchedCount(locBankAccountStatement) == 0
                    && SKS_CCR_BankAcctStmt::unReconciledCurrencyBalance(locBankAccountStatement) == 0)
                {
                    try
                    {
                        ttsbegin;
                        // Perform the currency adjustments.
                        SKS_CCR_CurrencyAdjustment::processCurrencyAdjustment(locBankAccountStatement);

                        locBankAccountReconcile = null;
                        locBankAccountReconcile = new BankAccountReconcile();
                        locBankAccountReconcile.setParameters(locBankAccountStatement);
                        locBankAccountReconcile.isCalledFromCCR(true);
                        locBankAccountReconcile.run();
                        info(strfmtLB(strFmt("@SKS3049",
                              locBankAccountStatement.AccountStatementNum,
                              date2Str(locBankAccountStatement.AccountStatementDate,-1,-1,-1,-1,-1,-1,DateFlags::None),
                              locBankAccountStatement.AccountId,
                              locBankAccountStatement.company())));
                        ttscommit;
                    }
                    catch
                    {
                        warning(strFmt("@SKS:SKGTASStatementErrorsExist"
                            ,locBankAccountStatement.company()
                            ,locBankAccountStatement.AccountId
                            ,SKS_PP_StringFormats::strDateMMDDYYYY(locBankAccountStatement.AccountStatementDate,DateSeparator::Slash)
                            ,locBankAccountStatement.AccountStatementNum));

                    }
                }
            }
            next locBankAccountStatement;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>