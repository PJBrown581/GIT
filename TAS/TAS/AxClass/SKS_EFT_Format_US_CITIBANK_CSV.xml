<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITIBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITIBANK_CSV
/// </summary>
class SKS_EFT_Format_US_CITIBANK_CSV extends SKS_EFT_Format
{
    #define.Separator(',')
    #define.DoubleQuote('"')
    SKS_EB_Vendor       mSKS_EB_Vendor;
    int recCount;

    #define.FormatVersion('20221212')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
    
        //  Header Record
        this.rec_Header();
    
        //Head-GlobInv
        this.rec_Head_GlobInv();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();
    
            // Details
            this.rec_Details();
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_Line_GlobInv(invSKS_EFT_FileDetail);
            }
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Details
    /// </summary>
    /// <returns>boolean</returns>
    public boolean rec_Details()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        // 1    Action Type
        // 2    RecordId
        // 3    IssuerId
        // 4    IcaNumber
        // 5    BankNumber
        // 6    UserName
        // 7    RequestId
        // 8    MaxPurchaseAmount
        // 9    MinPurchaseAmount
        //10    PurchaseCurrency
        //11    PurchaseType
        //12    VCardAlias
        //13    SupplierName
        //14    SupplierEmail
        //15    MultiUse
        //16    ValidFrom
        //17    ValidTo
        //18    ValidFor
        //19    CDF_Payment ID
        //20    CDF_Vendor Number
        //21    CDF_Vendor Name
        //22    CDF_Account Number
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str purchType, supplierName, multiUse, validFor;
        VendTable               vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;
        int days;
        str valueDate, value;
    
        recCount++;
    
        // 1    Action Type
        sb.Append(this.wrapField('CreateApprovedPurchase'));
    
        // 2    RecordId
        sb.Append(this.wrapField(num2str(recCount,0,0,0,0)));
    
        // 3    IssuerId
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IssuerId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))));
    
        // 4    IcaNumber
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IcaNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))));
    
        // 5    BankNumber
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BankNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))));
    
        // 6    UserName
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UserName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))));
    
        // 7    RequestId
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference)));
    
        // 8    MaxPurchaseAmount
        sb.Append(this.wrapField(num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0, 2, 1, 0)));
    
        // 9    MinPurchaseAmount
        sb.Append(this.wrapField(num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0, 2, 1, 0)));     //SKS#DevOps:20466
    
        //10    PurchaseCurrency
        sb.Append(this.wrapField('840'));       //SKS#DevOps:20466
    
        //11    PurchaseType
        purchType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PurchaseType', mSKS_EFT_FileDetail.RecId));
        sb.Append(this.wrapField(purchType));
    
        //12    VCardAlias
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('VCardAlias', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))));
    
        //13    SupplierName
        supplierName = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SupplierName', mSKS_EFT_FileDetail.RecId));
    
        if(supplierName == '')
        {
            supplierName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
        }
        sb.Append(this.wrapField(supplierName));
    
        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select * from DirPartyContactInfoview
                where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                    &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
        }
    
        //14    SupplierEmail
        sb.Append(this.wrapField(DirPartyContactInfoView.Locator));
    
        //15    MultiUse
        multiUse = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MultiUse', mSKS_EFT_FileDetail.RecId));
    
        if(multiUse)
        {
            sb.Append(this.wrapField(multiUse));
        }
    
        //16    ValidFrom
        valueDate = strFmt('%1 %2',SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate,DateSeparator::Hyphen), time2str(timeNow(),TimeSeparator::Colon,TimeFormat::Hour24)+'.'+'00'+ ' -0000');
        sb.Append(this.wrapField(valueDate));
    
        //17    ValidTo
        validFor = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ValidFor', mSKS_EFT_FileDetail.RecId));
        switch(validFor)
        {
            case '6M':
            case '6':
                days = 186;
                break;
            case '45D':
                days = 45;
                break;
            default:
                value = subStr(validFor, strLen(validFor), strLen(validFor)-1);
                if(value == 'D')
                {
                    days = str2int(subStr(validFor, 1, strLen(validFor)-1));
                }
                else if(value == 'M')
                {
                    days = str2int(subStr(validFor, 1, strLen(validFor)-1))*30;
                }
                else if(value == 'Y')
                {
                    days = str2int(subStr(validFor, 1, strLen(validFor)-1))*365;
                }
                else
                {
                    days = str2int(validFor)*30;
                }
                break;
        }
        valueDate = strFmt('%1 %2',SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate + days,DateSeparator::Hyphen), time2str(timeNow(),TimeSeparator::Colon,TimeFormat::Hour24)+'.'+'00'+ ' -0000');
        sb.Append(this.wrapField(valueDate));
    
        //18    ValidFor
        sb.Append(this.wrapField(validFor));
    
        //19    CDF_Payment ID
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference)));
    
        //20    CDF_Vendor Number
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountNum)));
    
        //21    CDF_Vendor Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName)));
    
        //22    CDF_Account Number
        sb.Append(this.wrapField('', false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Head_GlobInv</Name>
				<Source><![CDATA[
    private boolean rec_Head_GlobInv()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    Head-GlobInv
        sb.Append(this.wrapField('Head-GlobInv'));
    
        // 2    InvoiceNumber
        sb.Append(this.wrapField('InvoiceNumber'));
    
        // 3    TotalAmount
        sb.Append(this.wrapField('TotalAmount'));
    
        // 4    CurrencyCode
        sb.Append(this.wrapField('CurrencyCode'));
    
        // 5    InvoiceDate
        sb.Append(this.wrapField('InvoiceDate'));
    
        // 6    PONumber
        sb.Append(this.wrapField('PONumber', false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    private boolean rec_Header()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        // 1    Action Type
        // 2    RecordId
        // 3    IssuerId
        // 4    IcaNumber
        // 5    BankNumber
        // 6    UserName
        // 7    RequestId
        // 8    MaxPurchaseAmount
        // 9    MinPurchaseAmount
        //10    PurchaseCurrency
        //11    PurchaseType
        //12    VCardAlias
        //13    SupplierName
        //14    SupplierEmail
        //15    MultiUse
        //16    ValidFrom
        //17    ValidTo
        //18    ValidFor
        //19    CDF_Payment ID
        //20    CDF_Vendor Number
        //21    CDF_Vendor Name
        //22    CDF_Account Number
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    ActionType
        sb.Append(this.wrapField('ActionType'));
    
        // 2    RecordId
        sb.Append(this.wrapField('RecordId'));
    
        // 3    IssuerId
        sb.Append(this.wrapField('IssuerId'));
    
        // 4    IcaNumber
        sb.Append(this.wrapField('IcaNumber'));
    
        // 5    BankNumber
        sb.Append(this.wrapField('BankNumber'));
    
        // 6    UserName
        sb.Append(this.wrapField('UserName'));
    
        // 7    RequestId
        sb.Append(this.wrapField('RequestId'));
    
        // 8    MaxPurchaseAmount
        sb.Append(this.wrapField('MaxPurchaseAmount'));
    
        // 9    MinPurchaseAmount
        sb.Append(this.wrapField('MinPurchaseAmount'));
    
        //10    PurchaseCurrency
        sb.Append(this.wrapField('PurchaseCurrency'));
    
        //11    PurchaseType
        sb.Append(this.wrapField('PurchaseType'));
    
        //12    VCardAlias
        sb.Append(this.wrapField('VCardAlias'));
    
        //13    SupplierName
        sb.Append(this.wrapField('SupplierName'));
    
        //14    SupplierEmail
        sb.Append(this.wrapField('SupplierEmail'));
    
        //15    MultiUse
        sb.Append(this.wrapField('MultiUse'));
    
        //16    ValidFrom
        sb.Append(this.wrapField('ValidFrom'));
    
        //17    ValidTo
        sb.Append(this.wrapField('ValidTo'));
    
        //18    ValidFor
        sb.Append(this.wrapField('ValidFor'));
    
        //19    CDF_Payment ID
        sb.Append(this.wrapField('CDF_Payment ID'));
    
        //20    CDF_Vendor Number
        sb.Append(this.wrapField('CDF_Vendor Number'));
    
        //21    CDF_Vendor Name
        sb.Append(this.wrapField('CDF_Vendor Name'));
    
        //22    CDF_Account Number
        sb.Append(this.wrapField('CDF_Account Number', false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Line_GlobInv</Name>
				<Source><![CDATA[
    private boolean rec_Line_GlobInv(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    Head-GlobInv
        sb.Append(this.wrapField('Line-GlobInv'));
    
        // 2    InvoiceNumber
        sb.Append(this.wrapField(invSKS_EFT_FileDetail.InvoiceNumber));
    
        // 3    TotalAmount
        sb.Append(this.wrapField(num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0, 2, 1, 0)));     //SKS#DevOps:20466
    
        // 4    CurrencyCode
        sb.Append(this.wrapField('840'));
    
        // 5    InvoiceDate
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate,DateSeparator::Hyphen)));
    
        // 6    PONumber
        sb.Append(this.wrapField('', false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _addSeparator = true)
    {
        str text;
        if(_addSeparator)
        {
            if(_field != '' && strContains(_field, ','))
            {
                text = #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                text = _field + #Separator;
            }
        }
        else
        {
            text = _field;
        }
        return Text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_BankAccount
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>