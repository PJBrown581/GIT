<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_NORDEA_EDI4_DK</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_EU_NORDEA_EDI4_DK extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_EU_NORDEA_EDI4_DK extends SKS_EFT_Format
{
    #define.FormatVersion('20220312')
    BankAccountTable mBankAccountTable;

    #define.UBT043('043')
    #define.UBT045('045')
    #define.UBT046('046')
    #define.UBT047('047')
    #define.UBT049('049')
    #define.UBT050('050')
    #define.UBT051('051')
    #define.UBT052('052')
    #define.UBT055('055')
    #define.UBT056('056')
    #define.UBT057('057')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get RemittanceAddress
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get SKS_EFT_Bank
                this.getSKS_EFT_Bank();
    
                // Get Bank account
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Detail Record
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #UBT043:
                    this.rec_UBT043();
                    break;
                case #UBT045:
                    this.rec_UBT045();
                    break;
                case #UBT046:
                    this.rec_UBT046();
                    break;
                case #UBT047:
                    this.rec_UBT047();
                    break;
                case #UBT055:
                    this.rec_UBT055();
                    break;
                case #UBT056:
                    this.rec_UBT056();
                    break;
                case #UBT057:
                    this.rec_UBT057();
                    break;
                default:
                    this.rec_UBTVar();
                    break;
            }
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerBlock</Name>
				<Source><![CDATA[
    private str headerBlock()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value;
    
        // 01       System                                           1      3
        sb.Append('UBT');
    
        // 02       Type                                             4      3
        sb.Append(mSKS_EFT_FileFormatPaymSpec.TransactionCode);
    
        // 03       Kind                                             7      2
        sb.Append('00');
    
        // 04       Type of Advice                                   9      2
        sb.Append('00');
    
        // 05       Account information, remitter                   11     35
        if(mBankAccountTable.IBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mBankAccountTable.IBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mBankAccountTable.BankSortCode + mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 06       Amount                                          46     15
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 15));
    
        // 07       Currency Code                                   61      3
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        // 08       Currency equivalent                             64      1
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #UBT057)
        {
            sb.Append(' ');
        }
        else
        {
            sb.Append('N');
        }
    
        // 09       Transfer Date                                   65      8
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        // 10       Own reference                                   73     20
        sb.Append(SKS_PP_StringFormats::strFill(20, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        value = sb.ToString();
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>messageBlock</Name>
				<Source><![CDATA[
    private str messageBlock(int _length = 35, str _string1 = '', str _string2 = '', str _string3 = '', str _string4 = '', str _string5 = '')
    {
        //Takes in a string or series of string values and determines how to parse them into one or more fields. returns a string containing the count followed by strings.
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str returnValue;
        int lineCount;
    
        if( _string1 != '')
        {
            lineCount++;
            sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string1, 0, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            if(strLen(_string1) > _length)
            {
                lineCount++;
                sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string1, 36, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
    
            if( _string2 != '')
            {
                lineCount++;
                sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string2, 0, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                if(strLen(_string2) > _length)
                {
                    lineCount++;
                    sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string2, 36, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
            }
    
            if( _string3 != '')
            {
                lineCount++;
                sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string3, 0, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                if(strLen(_string3) > _length)
                {
                    lineCount++;
                    sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string3, 36, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
            }
    
            if( _string4 != '')
            {
                lineCount++;
                sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string4, 0, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                if(strLen(_string4) > _length)
                {
                    lineCount++;
                    sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string4, 36, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
            }
    
            if( _string5 != '')
            {
                lineCount++;
                sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string5, 0, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                if(strLen(_string5) > _length)
                {
                    lineCount++;
                    sb.Append(SKS_PP_StringFormats::strFill(35, subStr(_string5, 36, 35), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
            }
        }
    
        returnValue = sb.ToString();
    
        return SKS_PP_StringFormats::strFill(2, int2str(lineCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left) + returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UBT043</Name>
				<Source><![CDATA[
    public boolean rec_UBT043()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     34
        // 06       Amount                                          45     15
        // 07       Transfer Date                                   60      8
        // 08       Own reference                                   68     16
        // 09       Account Information, beneficiary                84     34
        // 10       Currency Code                                  118      3
        // 11       Expense Code                                   121      1
        // 12       Transfer type                                  122      3
        // 13       Beneficiary's Bank Number                      125      2
        // 14       Beneficiary's Bank                             127    140*
        // 15       BIC-Code                                       267     11
        // 16       Beneficiary's name number                      278      2
        // 17       Beneficiary's name                             280    140*
        // 18       Message to Beneficiary number                  420      2
        // 19       Message to Beneficiary                         422    140*
        // 20       Owner of remitter account number               562      2
        // 21       Owner of remitter account                      564    140*
        // 22       Central Bank Notification number               704      2
        // 23       Central Bank Notification                      706    105*
        // 24       Fields 25 to 31 have been used                 811      1
        // 25       Authorization                                  812     35*
        // 26       Exchange rate reference                        847     16*
        // 27       To be sent via                                 863    140
        // 28       Original currency code                        1003      3
        // 29       Original amount                               1006     15
        // 30       Expense account number                        1021     34
        // 31       Exchange rate                                 1055     12
        //*Variable length fields.
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 01       System                                           1      3
        sb.Append('UBT');
    
        // 02       Type                                             4      3
        sb.Append(mSKS_EFT_FileFormatPaymSpec.TransactionCode);
    
        // 03       Kind                                             7      2
        sb.Append('00');
    
        // 04       Type of Advice                                   9      2
        sb.Append('00');
    
        // 05       Account information, remitter                   11     34
        if(mBankAccountTable.IBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mBankAccountTable.IBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mBankAccountTable.BankSortCode + mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 06       Amount                                          45     15
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 15));
    
        // 07       Transfer Date                                   60      8
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        // 08       Own reference                                   68     16
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 09       Account Information, beneficiary                84     34
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 10       Currency Code                                  118      3
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        // 11       Expense Code                                   121      1
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 12       Transfer type                                  122      3
        sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        if(!mSKS_EFT_FileDetail.DepSwiftNo)
        {
            // 13       Beneficiary's Bank Number                      125      2
            // 14       Beneficiary's Bank                             127    140*
            sb.Append(this.messageBlock(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity) + ' ' + mSKS_EFT_VendorPaym.WBenBankCountryRegionId));
        }
        else
        {
            // 13       Beneficiary's Bank Number                      125      2
            // 14       Beneficiary's Bank                             127    140*
            sb.Append('00');
    
            // 15       BIC-Code                                       267     11
            sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 16       Beneficiary's name number                      278      2
        // 17       Beneficiary's name                             280    140*
        // 18       Message to Beneficiary number                  420      2
        // 19       Message to Beneficiary                         422    140*
        // 20       Owner of remitter account number               562      2
        // 21       Owner of remitter account                      564    140*
        sb.Append(this.remitterBlock());
    
        // 22       Central Bank Notification number               704      2
        // 23       Central Bank Notification                      706    105*
        sb.Append('00');
    
        // 24       Fields 25 to 31 have been used                 811      1
        sb.Append('N');
    
        // 25       Authorization                                  812     35
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 26       Exchange rate reference                        847     16
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 27       To be sent via                                 863    140
        sb.Append(SKS_PP_StringFormats::strFill(140, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 28       Original currency code                        1003      3
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 29       Original amount                               1006     15
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 30       Expense account number                        1021     34
        sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 31       Exchange rate                                 1055     12
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UBT045</Name>
				<Source><![CDATA[
    public boolean rec_UBT045()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        // 11       Account Information, beneficiary                93     35
        // 12       Express advice                                 128      1
        // 13       Text code                                      129      3
        // 14       Text code line                                 132     20
        // 15       Beneficiary's identification of remitter       152     35
        // 16       Ref to primary document                        187     35
        // 17       Batch entry                                    222      3
        // 18       Beneficiary's name number                      225      2
        // 19       Beneficiary's name                             227    140*
        // 20       Message to Beneficiary number                  367      2
        // 21       Message to Beneficiary                         369   1435*
        // 22       Alternative remitter number                   1804      2
        // 23       Alternative remitter                          1806    105*
        // 24       Filler                                        1911    153
        // 25       Competition neutral disposition day           2064      3
        // 26       Debtors identification of the payment         2067     35
        //*Variable length fields.
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        sb.Append(this.headerBlock());
    
        // 11       Account Information, beneficiary                93     35
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 12       Express advice                                 128      1
        sb.Append('N');
    
        // 13       Text code                                      129      3
        sb.Append('000');
    
        // 14       Text code line                                 132     20
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 15       Beneficiary's identification of remitter       152     35
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 16       Ref to primary document                        187     35
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 17       Batch entry                                    222      3
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 18       Beneficiary's name number                      225      2
        // 19       Beneficiary's name                             227    140
        // 20       Message to Beneficiary number                  367      2
        // 21       Message to Beneficiary                         369   1435*
        // 22       Alternative remitter number                   1804      2
        // 23       Alternative remitter                          1806    105*
        sb.Append(this.remitterBlock());
    
        // 24       Filler                                        1911    153
        sb.Append(SKS_PP_StringFormats::strFill(153, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 25       Competition neutral disposition day           2064      3
        sb.Append(SKS_PP_StringFormats::strFill(3, 'N', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 26       Debtors identification of the payment         2067     35
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UBT046</Name>
				<Source><![CDATA[
    public boolean rec_UBT046()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        // 11       Account Information, beneficiary                93     10
        // 12       Form type code                                 103      2
        // 13       Payment reference                              105     19
        // 14       Batch entry                                    222      3
        // 15       Beneficiary's name number                      225      2
        // 16       Beneficiary's name                             227    140*
        // 17       Message to Beneficiary number                  367      2
        // 18       Message to Beneficiary                         369   1435*
        // 19       Alternative remitter number                   1804      2
        // 20       Alternative remitter                          1806    105*
        //*Variable length fields.
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        sb.Append(this.headerBlock());
    
        // 11       Account Information, beneficiary                93     10
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 12       Form type code                                 103      2
        str TypeCode, OcrRef;
        TypeCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TypeCode', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(2, TypeCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

    
        // 13       Payment reference                              105     19
        OcrRef = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('OcrRef', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(19, OcrRef, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 14       Batch entry                                    222      3
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 15       Beneficiary's name number                      225      2
        // 16       Beneficiary's name                             227    140
        // 17       Message to Beneficiary number                  367      2
        // 18       Message to Beneficiary                         369   1435*
        // 19       Alternative remitter number                   1804      2
        // 20       Alternative remitter                          1806    105*
        sb.Append(this.remitterBlock());
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UBT047</Name>
				<Source><![CDATA[
    public boolean rec_UBT047()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        // 11       Cheque delivery remit/benef                     93      1
        // 12       Beneficiary's name number                       94      2
        // 13       Beneficiary's name                              96    175*
        // 14       Message to Beneficiary number                  271      2
        // 15       Message to Beneficiary                         273    140*
        // 16       Alternative remitter number                    413      2
        // 17       Alternative remitter                           415    105*
        //*Variable length fields.
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        sb.Append(this.headerBlock());
    
        // 11       Cheque delivery remit/benef                     93      1
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RmtLctnMtd', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 12       Beneficiary's name number                       94      2
        // 13       Beneficiary's name                              96    175*
        // 14       Message to Beneficiary number                  271      2
        // 15       Message to Beneficiary                         273    175*
        // 16       Alternative remitter number                    413      2
        // 17       Alternative remitter                           415    105*
        sb.Append(this.remitterBlock());
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UBT055</Name>
				<Source><![CDATA[
    public boolean rec_UBT055()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        // 11       Account Information, beneficiary                93     35
        //*Variable length fields.
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        sb.Append(this.headerBlock());
    
        // 11       Account Information, beneficiary                93     35
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UBT056</Name>
				<Source><![CDATA[
    public boolean rec_UBT056()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        // 11       Account Information, beneficiary                93     35
        // 12       Exchange rate reference                        128     11
        // 13       Exchange rate                                  139     12
        // 14       Filler                                         151      1
        // 15       Beneficiary's name number                      304      2
        // 16       Beneficiary's name                             306    140*
        // 17       Message to Beneficiary number                  446      2
        // 18       Message to Beneficiary                         448   1435*
        // 19       Alternative remitter number                    588      2
        // 20       Alternative remitter                           590    105*
        // 21       Message to Nordea                              695     40
        //*Variable length fields.
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        sb.Append(this.headerBlock());
    
        // 11       Account Information, beneficiary                93     35
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 12       Exchange rate reference                        128     11
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 13       Exchange rate                                  139     12
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 14       Filler                                         151      1
        sb.Append(' ');
    
        // 15       Beneficiary's name number                      225      2
        // 16       Beneficiary's name                             227    140*
        // 17       Message to Beneficiary number                  367      2
        // 18       Message to Beneficiary                         369   1435*
        // 19       Alternative remitter number                   1804      2
        // 20       Alternative remitter                          1806    105*
        sb.Append(this.remitterBlock());
    
        // 21       Message to Nordea                              695     40
        sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UBT057</Name>
				<Source><![CDATA[
    public boolean rec_UBT057()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        // 11       Account Information, beneficiary                93     35
        // 12       Filler                                         128      1
        // 13       Text code                                      129      3
        // 14       Text code line                                 132     20
        // 15       Beneficiary's identification of remitter       152     35
        // 16       Ref to primary document                        187     35
        // 17       Batch entry                                    222      3
        // 18       Beneficiary's name number                      225      2
        // 19       Beneficiary's name                             227    140*
        // 20       Message to Beneficiary number                  367      2
        // 21       Message to Beneficiary                         369   1435*
        // 22       Alternative remitter number                   1804      2
        // 23       Alternative remitter                          1806    105*
        // 24       Filler                                        1911    153
        // 25       Competition neutral disposition day           2064      3
        // 26       Debtors identification of the payment         2067     35
        // 27       Urgency code                                  2102      1
        // 28       Creditor Reference                            2103     25
        // 29       End-to-End Reference                          2128     35
        //*Variable length fields.
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        sb.Append(this.headerBlock());
    
        // 11       Account Information, beneficiary                93     35
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 12       Filler                                         128      1
        sb.Append(' ');
    
        // 13       Text code                                      129      3
        sb.Append('000');
    
        // 14       Text code line                                 132     20
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 15       Beneficiary's identification of remitter       152     35
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 16       Ref to primary document                        187     35
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 17       Batch entry                                    222      3
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 18       Beneficiary's name number                      225      2
        // 19       Beneficiary's name                             227    140*
        // 20       Message to Beneficiary number                  367      2
        // 21       Message to Beneficiary                         369   1435*
        // 22       Alternative remitter number                   1804      2
        // 23       Alternative remitter                          1806    105*
        sb.Append(this.remitterBlock());
    
        // 24       Filler                                        1911    153
        sb.Append(SKS_PP_StringFormats::strFill(153, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 25       Competition neutral disposition day           2064      3
        sb.Append(SKS_PP_StringFormats::strFill(3, 'N', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 26       Debtors identification of the payment         2067     35
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 27       Urgency code                                  2102      1
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'UBT-057-ST')
        {
            sb.Append('1');
        }
        else
        {
            sb.Append('2');
        }
    
        // 28       Creditor Reference                            2103     25
        sb.Append(SKS_PP_StringFormats::strFill(25, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 29       End-to-End Reference                          2128     35
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UBTVar</Name>
				<Source><![CDATA[
    public boolean rec_UBTVar()
    {
        //----------------------------------------------------------------------------------------
        //Field   Description                                    Start   Size
        //                                                       Pos
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        // 11       Exchange rate reference                         93     11
        // 12       Exhange rate                                   104     12
        // 13       Expense code                                   116      1
        // 14       Bank code                                      117     17
        // 15       Account Information, beneficiary               134     35
        // 16       Beneficiary's Bank                             169    140
        // 17       SWIFT address                                  309     11
        // 18       Country code                                   320      2
        // 19       Filler                                         322    153
        // 20       Beneficiary's name number                      475      2
        // 21       Beneficiary's name                             477    140*
        // 22       Message to beneficiary number                  617      2
        // 23       Message to beneficiary                         619    140*
        // 24       Alternative remitter number                    759      2
        // 25       Alternative remitter                           761    105*
        // 26       Message to Nordea                              866     40
        //*Variable length fields.
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str BCType = '';
    
        // 01       System                                           1      3
        // 02       Type                                             4      3
        // 03       Kind                                             7      2
        // 04       Type of Advice                                   9      2
        // 05       Account information, remitter                   11     35
        // 06       Amount                                          46     15
        // 07       Currency Code                                   61      3
        // 08       Currency equivalent                             64      1
        // 09       Transfer Date                                   65      8
        // 10       Own reference                                   73     20
        sb.Append(this.headerBlock());
    
        // 11       Exchange rate reference                         93     11
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 12       Exhange rate                                   104     12
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 13       Expense code                                   116      1
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 14       Bank code                                      117     17
        if(mSKS_EFT_FileDetail.DepBankCodeType != BankCodeType::Code_None)
        {
            BCType = enum2str(mSKS_EFT_FileDetail.DepBankCodeType);
        }
    
        sb.Append(SKS_PP_StringFormats::strFill(17, BCType + mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 15       Account Information, beneficiary               134     35
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35,mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 16       Beneficiary's Bank                             169    140
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 17       SWIFT address                                  309     11
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 18       Country code                                   320      2
        sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 19       Filler                                         322    153
        sb.Append(SKS_PP_StringFormats::strFill(153, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 20       Beneficiary's name number                      475      2
        // 21       Beneficiary's name                             477    140*
        // 22       Message to beneficiary number                  617      2
        // 23       Message to beneficiary                         619    140*
        // 24       Alternative remitter number                    759      2
        // 25       Alternative remitter                           761    105*
        sb.Append(this.remitterBlock());
    
        // 26       Message to Nordea                              866     40
        sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remitterBlock</Name>
				<Source><![CDATA[
    private str remitterBlock()
    {
        //------------------------------------------------------------------------------------------------------
        // 20       Beneficiary's name number                      475      2
        // 21       Beneficiary's name                             477    140*
        // 22       Message to beneficiary number                  617      2
        // 23       Message to beneficiary                         619    140*
        // 24       Alternative remitter number                    759      2
        // 25       Alternative remitter                           761    105*
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str city;
        str returnValue;
    
        city = mRemittanceCity;
    
        if(city != '')
        {
            city += ', ';
        }
    
        // 15       Beneficiary's name number                      225      2
        // 16       Beneficiary's name                             227    140*
        sb.Append(this.messageBlock(35, mRemittanceName, mRemittanceAdrLine1 + ' ' + mRemittanceAdrLine2, city + mRemittanceState + ' ' + mRemittanceZipCode + ' ' + mRemittanceCountryRegionId));
    
        // 17       Message to Beneficiary number                  367      2
        sb.Append('00');
    
        // 18       Message to Beneficiary                         369   1435*
        sb.Append('');
    
        // 19       Alternative remitter number                   1804      2
        // 20       Alternative remitter                          1806    105*
        sb.Append(this.messageBlock(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr) + this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2), this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity) + ', ' + mSKS_EFT_VendorPaym.WIntBankCountryRegionId));
    
        returnValue = sb.ToString();
    
        return returnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>