<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_CreateAndSendBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_CreateAndSendBatch extends Runbasebatch
{
    RefRecId journalRecid;

    #Define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        journalRecId
    #ENDMACRO





}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createMultiThreadBatch</Name>
				<Source><![CDATA[
    public static void createMultiThreadBatch(LedgerJournalTable _LedgerJournalTable)
    {
        Batch Batch;
        BatchHeader batchHeader = BatchHeader::construct();
        SKS_EFT_CreateAndSendBatch rbbTask = new SKS_EFT_CreateAndSendBatch();
        BatchInfo batchInfo = rbbTask.batchInfo();

        ttsBegin;
        batchInfo.parmGroupId(''); // The "Empty batch group".
        batchInfo.parmAutomaticTransaction(true);
        batchInfo.parmCaption(strFmt("@SKS:SKGCreateAndSendBatchDescription",
                                        enum2Str(_LedgerJournalTable.JournalType),
                                        _LedgerJournalTable.JournalNum,
                                        curExt()));

        batchHeader.addTask(rbbTask);
        batchHeader.save();
        Batch = batchInfo.parmBatch();

        if(Batch)
        {
            Batch.reread();
            Batch.selectForUpdate(true);
            Batch.Parameters = [#CurrentVersion, _LedgerJournalTable.RecId];
            Batch.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    Public static void main(Args _args)
    {
        SKS_EFT_CreateAndSendBatch SKS_EFT_CreateAndSendBatch = new SKS_EFT_CreateAndSendBatch();

        if(SKS_EFT_CreateAndSendBatch.prompt())
        {
            SKS_EFT_CreateAndSendBatch.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        boolean     retVal = true;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                retVal = false;
                break;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Batch   Batch;
        //exit batch transaction for EFT process
        ttscommit;

        while select Batch where Batch.Status == BatchStatus::Executing && Batch.ClassNumber == className2Id('SKS_EFT_CreateAndSendBatch') && Batch.SessionIdx < SessionId()
        {
            sleep(30000);
        }

        SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();
        LedgerJournalTable journal;

        select forupdate journal where journal.RecId == journalRecId;
        LedgerJournalName journalName = LedgerJournalName::find(journal.JournalName);

        LedgerJournalTable orig = journal.data();

        if((lSKS_EFT_Setup.SKS_EFT_WorkflowSendType == SKS_EFT_WorkflowSendType::SendNow && lSKS_EFT_Setup.APAutoCreate && journal.JournalType == LedgerJournalType::Payment)
            || 
            (SKS_eft_setup::find().SKS_DD_WorkFlowSendType == SKS_DD_WorkflowSendType::SendNow && SKS_EFT_Setup::find().ARAutoCreate && journal.JournalType == LedgerJournalType::CustPayment && !journalName.SKS_CNP_CustReimbursementJournal)
            ||
            (SKS_EFT_Setup::find().SKS_BTB_WorkflowSendType == SKS_BTB_WorkFlowSendType::SendNow && SKS_EFT_Setup::find().BTBAutoCreate && journalName.SKS_BTB_BankTransferJournal)
            ||
            (SKS_EFT_Setup::find().CNPWorkflowSendType == SKS_CNP_WorkFlowSendType::SendNow && SKS_EFT_Setup::find().CNPAutoCreate && journalName.SKS_CNP_CustReimbursementJournal))
        {
            journal.SKS_EFT_AutoCreate = true;
        }

        if(journal.JournalType == LedgerJournalType::Payment && lSKS_EFT_Setup.ModAPEFT)
        {
            if (SKS_EFT_APJournalValidate::validateSet(journal,false,true,false,lSKS_EFT_Setup.APFormatValidJournal,lSKS_EFT_Setup.APFormatValidMultiThread))
            {
                journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Transferred;
            }
            else
            {
                journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
            }
        }
        else if(LedgerJournalName::find(journal.JournalName).SKS_BTB_BankTransferJournal)
        {
            if (SKS_EFT_BTBJournalValidate::validateSet(journal,false))
            {
                journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Transferred;
            }
            else
            {
                journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
            }
        }
        else
        {
            if (SKS_EFT_ARJournalValidate::validateSet(journal,false,true,lSKS_EFT_Setup.DDFormatValidJournal,lSKS_EFT_Setup.DDFormatValidMultiThread))
            {
                journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Transferred;
            }
            else
            {
                journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
            }
        }

        try
        {
            str returnMessage = SKS_Table_LedgerJournalTable::CreateAndSend(orig, journal);

            if(returnMessage != '')
            {
                throw Exception::Error;
            }
        }
        catch (Exception::CLRError)
        {
            //begin transaction so batch will end in error
            ttsbegin;
            System.Exception netExcepn = CLRInterop::getLastException();
            throw error(netExcepn.ToString());
        }
        catch
        {
            //begin transaction so batch will end in error
            ttsbegin;
            throw Exception::Error;
        }
        finally
        {
            UserConnection conn = new UserConnection();
            journal.setConnection(conn);
            journal.ttsbegin();
            //commit any changes made by above method
            //doUpdate to skip the event handler
            journal.doUpdate();
            journal.ttscommit();
        }

        if(journal.SKS_EFT_AutoCreate && journal.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
        {
            LedgerJournalTrans trans;

            select firstonly trans where trans.JournalNum == journal.JournalNum;

            try
            {
                boolean postSuccess = SKS_EFT_Processing::PostFromAutoCreate(trans);

                if(!postSuccess)
                {
                    throw Exception::Error;
                }
            }
            catch
            {
                //begin transaction so batch will end in error
                ttsbegin;
                throw error("@SKS3370");
            }
        }

        //begin transaction for batch process
        ttsbegin;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>