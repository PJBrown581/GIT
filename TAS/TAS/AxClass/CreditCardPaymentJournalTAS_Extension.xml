<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardPaymentJournalTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The CreditCardPaymentJournalTAS_Extension class is used to fix issues or override
/// the implementation of the standard D365 credit card payment journal functionality
/// whihc is used by the sales order invoice processing to record the credit card payment.
/// </summary>
[ExtensionOf(classStr(CreditCardPaymentJournal))]
final class CreditCardPaymentJournalTAS_Extension
{
    public SKS_PP_Setup sKS_PP_Setup;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fixes issues with setting the offset account type on CC payment journal lines.
    /// If an account has been specified on the journal name which is related to
    /// an specific credit card type then this offset account should be used 
    /// during the creation of the payment journal line. Standard D365 code is
    /// using the account from the method of payment instead.
    /// </summary>
    protected void createJournal()
    {
        next createJournal();
        
        if (ledgerJournalTable && ledgerJournalTrans && sKS_PP_Setup.ModCC == NoYes::Yes)
        {
            LedgerJournalName ledgerJournalNameSKSLoc = LedgerJournalName::find(ledgerJournalTable.JournalName);            

            if (ledgerJournalNameSKSLoc.OffsetLedgerDimension)
            {
                LedgerJournalTrans ledgerJournalTransSKSUpd = ledgerJournalTrans;

                ttsbegin;
                ledgerJournalTransSKSUpd.OffsetAccountType = ledgerJournalNameSKSLoc.OffsetAccountType;
                if (ledgerJournalNameSKSLoc.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    ledgerJournalTransSKSUpd.parmOffsetLedgerDimension(
                        ledgerJournalTransSKSUpd.getOffsetLedgerDimensionForLedgerType(ledgerJournalNameSKSLoc.OffsetLedgerDimension, ledgerJournalTransSKSUpd.getOffsetCompany()));
                }
                else
                {                    
                    ledgerJournalTransSKSUpd.parmOffsetAccount(ledgerJournalNameSKSLoc.parmOffsetAccount(), ledgerJournalNameSKSLoc.OffsetAccountType);
                }

                ledgerJournalTransSKSUpd.update();
                ttscommit;
                ledgerJournalTransSKSUpd.reread();
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    boolean run()
    {
        sKS_PP_Setup = SKS_PP_Setup::find();

        boolean ret = next run();
        
        if (ret && salesTable && sKS_PP_Setup.ModCC == NoYes::Yes && 
            sKS_PP_Setup.CCSkipSONewAuthForPartialShip == NoYes::Yes)
        { 
            boolean canBeInvoiced_SKS = this.canInvoiceOrderFromCurrentSalesStatus_SKS();

            if (canBeInvoiced_SKS || salesTable.SKS_CC_SkipAutoAuthDueToPartialShip == NoYes::Yes)
            {
                SalesTable salesTableUpdSKS = salesTable;            
                ttsbegin;
                salesTableUpdSKS.selectForUpdate(true);

                if (canBeInvoiced_SKS)
                {
                    salesTableUpdSKS.SKS_CC_SkipAutoAuthDueToPartialShip = NoYes::Yes;
                    salesTableUpdSKS.SKS_CC_TmpCreditCardCustRefIdForSkipAuth = salesTableUpdSKS.CreditCardCustRefId;
                    salesTableUpdSKS.CreditCardCustRefId = 0;
                }
                else
                {
                    salesTableUpdSKS.SKS_CC_SkipAutoAuthDueToPartialShip = NoYes::No;
                }

                salesTableUpdSKS.update();
                ttscommit;
                salesTableUpdSKS.reread();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInvoiceOrderFromCurrentSalesStatus_SKS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the sales order can be invoiced from the current status it is in.
    /// </summary>
    /// <returns>true, if the order can be invoiced; otherwise, false.</returns>
    private boolean canInvoiceOrderFromCurrentSalesStatus_SKS()
    {
        switch (salesTable.SalesStatus)
        {
            case SalesStatus::None:
            case SalesStatus::Backorder:
            case SalesStatus::Delivered:
                return true;
            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>