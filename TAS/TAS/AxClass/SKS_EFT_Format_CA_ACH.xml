<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_ACH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_ACH extends SKS_EFT_Format
/// </summary>
// H
// P
//   EC1
//       V
//           A/S1    (Batch 5)
//                   (Batch 8)
//           A/S2    (Batch 5)
//                   (Batch 8)
//       P           (Batch 5)
//                   (Batch 8)
//   EC2
// B
// T
class SKS_EFT_Format_CA_ACH extends SKS_EFT_Format
{
    int mBatchCount;                // Batch Count
    AmountMST mBatchCreditAmount;   // Batch DR amount
    AmountMST mBatchDebitAmount;    // Batch CR amount
    int64 mBatchHash;               // Batch Hash Total
    int mBatchNumber;               // Batch Number

    int mFileEntryCount;            // File Entry Count
    AmountMST mFileCreditAmount;    // File DR amount
    AmountMST mFileDebitAmount;     // File CR amount
    int64 mFileHash;                // File Hash Total

    SKS_EFT_FileDetail prevSKS_EFT_FileDetail;
    SKS_EFT_BankGateway mSKS_EFT_BankGateway;

    SKS_EFT_Addenda mSKS_EFT_Addenda;

    str mServiceCode;
    str mACHFileIdMod;
    str mCTXString;
    int mCTXAddenda;
    #define.IAT('IAT')
    #define.FormatVersion('20221123')
    SKS_EFT_AddendaFormats mSKS_EFT_AddendaFormats;

        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EDI820_003010</Name>
				<Source><![CDATA[
    /// <summary>
    /// EDI820_003010
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">sks_eft_FileDetail</param>
    /// <returns>value</returns>
    str EDI820_003010(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str ret;
        int pmtCuryPrec;
        int invCuryPrec;
        str invAmt;
        ;

        pmtCuryPrec = SKS_EB_Currency::getCurrencyPrecision(_sks_eft_FileDetail.PaymentCurrencyCode);
        invCuryPrec = SKS_EB_Currency::getCurrencyPrecision(_sks_eft_FileDetail.InvoiceCurrencyCode);

        sb.Append('RMT');
        sb.Append('*');
        if(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append('CM');
        }
        else
        {
            sb.Append('IV');
        }
        sb.Append('*');
        sb.Append(substr(_sks_eft_FileDetail.InvoiceNumber,1,30));
        sb.Append('*');
        sb.Append(num2str(this.getPositiveAmount(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur),0,pmtCuryPrec,0,0));
        sb.Append('*');

        invAmt = num2str(this.getPositiveAmount(_sks_eft_FileDetail.InvoiceOrigAmountCur),0,invCuryPrec,0,0);
        invAmt = strRem(invAmt, '.');
        sb.Append(invAmt);

        sb.Append('*');
        sb.Append('0');
        sb.Append('*');
        sb.Append('0');
        sb.Append('*');
        sb.Append('0');
        sb.Append('*');
        sb.Append(num2str(this.getPositiveAmount(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur),0,pmtCuryPrec,0,0));
        sb.Append('*');
        sb.Append('0');
        sb.Append('*');
        sb.Append(substr(_sks_eft_FileDetail.InvoiceTransactionTxt,1,80));

        ret = sb.ToString();
        return substr(ret,1,79) + @'\';
    }

]]></Source>
			</Method>
			<Method>
				<Name>EDI820_003040</Name>
				<Source><![CDATA[
    /// <summary>
    /// EDI820_003040
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <returns>value</returns>
    str EDI820_003040(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str ret;
        int pmtCuryPrec;
        ;

        pmtCuryPrec = SKS_EB_Currency::getCurrencyPrecision(_sks_eft_FileDetail.PaymentCurrencyCode);

        sb.Append('RMR');
        sb.Append('*');
        if(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append('CM');
        }
        else
        {
            sb.Append('IV');
        }
        sb.Append('*');
        sb.Append(substr(_sks_eft_FileDetail.InvoiceNumber,1,30));
        sb.Append('*');
        sb.Append('*');
        sb.Append(num2str(this.getPositiveAmount(_sks_eft_FileDetail.InvoiceSettleAmountPmtCur),0,pmtCuryPrec,0,0));

        ret = sb.ToString();
        return substr(ret,1,79) + @'\';
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        #define.FormatVersion('20210907')
        boolean offSet;
        boolean ret;
        str groupKey;
        ;

        // Format header
        this.rec_One();

        while(mSKS_EFT_FileDetail)
        {
            mSKS_EFT_BankGateway = SKS_EFT_BankGateway::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode, mSKS_EFT_FileDetail.DepCountryRegionId);

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get Tax/Child Support Addenda Information
            if(mSKS_EFT_FileFormatPaymSpec.AddendaSpec)
            {
                select msks_eft_FileDetail_AddendaHeader where msks_eft_FileDetail_AddendaHeader.AddendaCodeID == mSKS_EFT_FileFormatPaymSpec.AddendaCodeID; //FDD-10590               

                mSKS_EFT_Addenda = new SKS_EFT_Addenda();
                mSKS_EFT_Addenda.setAddendaHeaderFormats(msks_eft_FileDetail_AddendaHeader); //FDD-10590
                mSKS_EFT_Addenda.setFileFormatPaymSpec(mSKS_EFT_FileFormatPaymSpec);
                mSKS_EFT_Addenda.setFile(mSKS_EFT_File);
                mSKS_EFT_Addenda.setFileDetail(mSKS_EFT_FileDetail);
            }

            if(groupKey != mSKS_EFT_FileDetail.PaymMode + mSKS_EFT_FileDetail.PaymSpec + mSKS_EFT_FileDetail.BankAccountId +
                SKS_PP_StringFormats::strDateMMDDYY(mSKS_EFT_FileDetail.EffectiveDate,DateSeparator::Hyphen) + enum2str(mSKS_EFT_FileDetail.RecordType))
            {
                mBatchHash = 0;
                mBatchCreditAmount = 0;
                mBatchDebitAmount = 0;
                mBatchCount = 0;

                this.rec_Five();
            }
            groupKey = mSKS_EFT_FileDetail.PaymMode + mSKS_EFT_FileDetail.PaymSpec + mSKS_EFT_FileDetail.BankAccountId +
                SKS_PP_StringFormats::strDateMMDDYY(mSKS_EFT_FileDetail.EffectiveDate,DateSeparator::Hyphen) + enum2str(mSKS_EFT_FileDetail.RecordType);

            if(mSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote && mSKS_EFT_FileDetail.AccountNum == '')
            {
                offSet = true;
            }
            else
            {
                offSet = false;
            }

            ret = this.rec_Six(offSet, mSKS_EFT_FileDetail);
            if(!ret)
            {
                return;
            }

            // Save values to use in group trailer
            buf2buf(mSKS_EFT_FileDetail, prevSKS_EFT_FileDetail);

            next mSKS_EFT_FileDetail;

            // Group trailer
            if((groupKey != mSKS_EFT_FileDetail.PaymMode + mSKS_EFT_FileDetail.PaymSpec + mSKS_EFT_FileDetail.BankAccountId +
                SKS_PP_StringFormats::strDateMMDDYY(mSKS_EFT_FileDetail.EffectiveDate,DateSeparator::Hyphen) + enum2str(mSKS_EFT_FileDetail.RecordType)) && mBatchCount > 0)
            {
                this.rec_Eight(prevSKS_EFT_FileDetail);
            }
        }

        // Format trailer
        this.rec_Nine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Eight</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Eight
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    // Record Eight - output at end of a batch
    // also may output an offset Six Record
    void rec_Eight(SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
        ;

        mFileRecCount++;

        sb.Append('8');


        if((mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP && mSKS_EFT_FileDetail_BankAccount.APACHInclDR) ||
           (mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AR && mSKS_EFT_FileDetail_BankAccount.ARACHInclCR)) //FDD-10590
        {
            select maxOf(paymentreference) from locSKS_EFT_FileDetail
                where locSKS_EFT_FileDetail.FileRecId == _sks_eft_FileDetail.FileRecId
                && locSKS_EFT_FileDetail.PaymMode == _sks_eft_FileDetail.PaymMode
                && locSKS_EFT_FileDetail.PaymSpec == _sks_eft_FileDetail.PaymSpec
                && locSKS_EFT_FileDetail.BankAccountId == _SKS_EFT_FileDetail.BankAccountId;
            _sks_eft_FileDetail.PaymentReference = int2str(str2int(locSKS_EFT_FileDetail.paymentReference) + 1);
            this.rec_Six(true, _sks_eft_FileDetail);
        }

        sb.Append('220'); // Determined in 5 record

        mFileDebitAmount += mBatchDebitAmount;
        mFileCreditAmount += mBatchCreditAmount;

        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(mBatchCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mBatchDebitAmount, 12));
        sb.Append(SKS_PP_StringFormats::strMoney(mBatchCreditAmount * -1, 12));
        sb.Append(SKS_PP_StringFormats::strFill(10, _sks_eft_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(19, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(7, num2str(mBatchNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        mFileHash = SKS_EFT_Format_US_ACH::hashTotal(mFileHash, mBatchHash);

        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Five</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Five
    /// </summary>
    void rec_Five()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        mBatchNumber++;
        mFileRecCount++;

        //   1
        sb.Append('5');

        // 2- 4
        sb.Append('220');

        // IAT
        if(substr(mSKS_EFT_FileDetail.PaymSpec,1,3) == #IAT)
        {
            // 05-20 IAT Indicator " "
            sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 21-22 Foreign Exchange Indicator FF-fixed-fixed, FV-fixed-var (orig fixed), VF-var-fixed (recv fixed)
            switch(mSKS_EFT_BankGateway.FXIndicator)
            {
                case SKS_EFT_ForeignExchInd::FixedToFixed:
                    sb.Append('FF');
                    break;
                case SKS_EFT_ForeignExchInd::FixedToVariable:
                    sb.Append('FV');
                    break;
                case SKS_EFT_ForeignExchInd::VariableToFixed:
                    sb.Append('VF');
                    break;
            }

            // 23-23 Foreign Exchange Ref Indicator - 1-FX rate, 2-FX refnbr, 3-space
            sb.Append('3');

            // 24-38 Foreign Exchange Reference - Rate (if FF, then blank)
            sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 39-40 IS Destination Country Code
            sb.Append(SKS_PP_StringFormats::strFill(2, mSKS_EFT_FileDetail.DepCountryRegionId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 41-50 Originator Identification (TIN number) (Wire Plus/IAT tab, ID)
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 51-53 Standard Entry Class Code
            sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileFormatPaymSpec.TransactionCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 54-63 Company Entry Description
            sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileFormatPaymSpec.PaymSpecName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 64-66 ISO Originating Currency Code
            sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.CurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 67-69 ISO Destination Currency Code
            if (mSKS_EFT_BankGateway.FXIndicator == SKS_EFT_ForeignExchInd::FixedToVariable)
            {
                sb.Append(mSKS_EFT_BankGateway.DestCntryCurrenceyCode);
            }
            else
            {
                sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
            }
        }
        // All Others
        else
        {
            // 5-20
            if(mSKS_EFT_AddendaFormats.CompanyName != '')
            {
                sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.CompanyNameMask), strupr(this.CharacterReplacement(msks_eft_FileDetail_AddendaHeader.CompanyName)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.CompanyNameMask), strupr(this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            //21-21
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //22-23
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //24-26     Origination Curr
            sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.CurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //27-28
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //29-31         Destination Curr
            sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);

            //32-40
            sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //41-50
            if(mSKS_EFT_AddendaFormats.CompanyID != '')
            {
                sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.CompanyIdMask), strupr(this.CharacterReplacement(msks_eft_FileDetail_AddendaHeader.CompanyID)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.CompanyIdMask), strupr(mSKS_EFT_FileDetail.FileACHCompanyId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            //51-53
            sb.Append(substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3));

            //54-63
            if(msks_eft_FileDetail_AddendaHeader.CompanyDescription != '')
            {
                sb.Append(SKS_PP_StringFormats::strFill(10, strupr(this.CharacterReplacement(msks_eft_FileDetail_AddendaHeader.CompanyDescription)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strFill(10, strupr(mSKS_EFT_FileFormatPaymSpec.PaymSpecName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            //64-69
            sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 70-75 Effective Entry Date
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        // 76-78 Settlement Date
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 79-79 Originator Status Code
        sb.Append('1');

        // 80-87 GO Originating DFI Identification
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 88-94 Batch Number
        sb.Append(SKS_PP_StringFormats::strFill(7, num2str(mBatchNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_710</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_710
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    /// <param name = "_amt">amount</param>
    void rec_IAT_710(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr, AmountMST _amt)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        if(_sks_eft_FileDetail.PaymSpec == 'IATB')
        {
            // 1-3 Record Type/Addenda Type
            sb.Append('710');

            // 4-6 Transaction Type Code
            sb.Append('BUS');

            // 7-24 Foreign Payment Amount
            if(mSKS_EFT_BankGateway.FXIndicator == SKS_EFT_ForeignExchInd::FixedToVariable)
            {
                sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(_amt), 18));
            }

            //25-46 Foreign Trace Number
            sb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 47-81 Receiving Company/Indiv Name
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 82-87 Reserved
            sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(87, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_711</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_711
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_711(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('711');

        // 4-38 Originator Name
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 39-73 Originator Street Address
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 74-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_712</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_712
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_712(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('712');

        // 4-38 Originator City & State/Prov
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState == '')
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity + '*' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyState + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 39-73 Originator Country & Postalcd
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode == '')
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId + '*' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 74-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_713</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_713
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_713(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('713');

        // 4-38 Originating DFI Name
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.ACHOrigDFIName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 39-40 ODFI Number Qualifier
        sb.Append('01');

        // 41-74 ODFI ID
        sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_BankAccount.ACHOrigDFI, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 75-77 ODFI Brank Country Code
        sb.Append('CA ');

        // 78-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_714</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_714
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_714(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('714');

        // 4-38 Receiving DFI Name
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BenBank.BenBankName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 39-40 RDFI Number Qualifier
        //sb.Append(SKS_PP_StringFormats::strFill(2, mSKS_EFT_VendorPaym.WBenBankQualifier, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 39-40 RDFI Number Qualifier AND 41-74 RDFI ID
        if(_sks_eft_FileDetail.DepBankIBAN != '') // IBAN
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '03', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(34, _sks_eft_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(_sks_eft_FileDetail.DepSwiftNo != '') // SWIFT
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '02', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(34, _sks_eft_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else // ABA
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '01', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(34, _sks_eft_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        // 75-77 RDFI Branch Country Code
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 78-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_715</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_715
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_715(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('715');

        // 4-18 Receiver ID Number
        sb.Append(SKS_PP_StringFormats::strFill(15, _sks_eft_FileDetail.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 19-53 Receiver Street Address
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_VendAddress.BeneAddr, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 54-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_716</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_716
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_716(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('716');

        // 4-38 Receiver City & State
        if(mSKS_EFT_FileDetail_VendAddress.BeneState == '')
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_VendAddress.BeneCity + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_VendAddress.BeneCity + '*' + mSKS_EFT_FileDetail_VendAddress.BeneState + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 39-73 Receiver Country & Postalcode
        if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal == '')
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId + '*' + mSKS_EFT_FileDetail_VendAddress.BeneZipPostal + @'\', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 74-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_717</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_717
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_717(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str addenda;
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('717');

        // 4-87 Segment of 820 txn
        addenda = this.EDI820_003040(_sks_eft_FileDetail);
        sb.Append(SKS_PP_StringFormats::strFill(84, addenda, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_718_A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_718_A
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_718_A(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str intBankQualifier;
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('718');

        // 4-38 Intermediary Bank Name
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_Intermediary.IntBankName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 39-40 Intermediary Bank Number Qualifier
        intBankQualifier = SKS_EFT_Format::getCodelookupvalue('IntBankQualifier', mSKS_EFT_FileDetail.RecId);
        sb.Append(SKS_PP_StringFormats::strFill(2, intBankQualifier, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 41-74 Intermediary Bank ID
        if(intBankQualifier == '2') // BIC-SWIFT
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_Intermediary.IntBankSwift, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(intBankQualifier == '3')  // IBAN
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_Intermediary.IntBankSwift + mSKS_EFT_FileDetail_Intermediary.IntBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else // ABA
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_Intermediary.IntBankId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 75-77 Intermediary Bank Branch Country Code
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 78-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_718_B</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_718_B
    /// </summary>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_718_B(SKS_EFT_FileDetail _sks_eft_FileDetail, str _entryDetailSeqNbr)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1-3 Record Type/Addenda Type
        sb.Append('718');

        // 4-38 Credit Party Bank Name
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_CreditParty.CrePartyBankName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 39-40 Credit Party Bank Number Qualifier
        // 41-74 Credit Party Bank ID
        if(mSKS_EFT_FileDetail_CreditParty.CrePartyBankId != '')
        {
            sb.Append('01');
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_CreditParty.CrePartyBankId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(mSKS_EFT_FileDetail_CreditParty.CrePartySwift != '' && mSKS_EFT_FileDetail_CreditParty.CrePartyAcct == '')
        {
            sb.Append('02');
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_CreditParty.CrePartySwift, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(mSKS_EFT_FileDetail_CreditParty.CrePartySwift != '' && mSKS_EFT_FileDetail_CreditParty.CrePartyAcct != '')
        {
            sb.Append('03');
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail_CreditParty.CrePartySwift + mSKS_EFT_FileDetail_CreditParty.CrePartyAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 75-77 Intermediary Bank Branch Country Code
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail_CreditParty.CrePartyCountryRegionId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 78-87 Reserved
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.rec_IAT_write(sb.ToString(), _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IAT_write</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IAT_write
    /// </summary>
    /// <param name = "_sevenRec">_sevenRec</param>
    /// <param name = "_entryDetailSeqNbr">_entryDetailSeqNbr</param>
    void rec_IAT_write(str _sevenRec, str _entryDetailSeqNbr)
    {
        ;
        this.fileWrite(strUpr(_sevenRec) + _entryDetailSeqNbr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Nine</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Nine
    /// </summary>
    void rec_Nine()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int blockCount;
        ;
        // File control - file record count includes "9" record
        mFileRecCount++;

        sb.Append('9');

        // Record count/block count - totals records/10 rounded up
        if((mFileRecCount/10) == real2int(mFileRecCount/10))
        {
            blockCount = real2int(mFileRecCount/10);
        }
        else
        {
            blockCount = real2int(mFileRecCount/10) + 1;
        }

        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(mBatchNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(blockCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(8, num2str(mFileEntryCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mFileDebitAmount, 12));
        sb.Append(SKS_PP_StringFormats::strMoney(mFileCreditAmount * -1, 12));
        sb.Append(SKS_PP_StringFormats::strFill(39, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_One</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_One
    /// </summary>
    protected void rec_One()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        mFileRecCount++;

        busDate = SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        busTime = SKS_PP_StringFormats::strTimeHHMM();

        sb.Append('1');
        sb.Append('01');
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(strLen(mSKS_EFT_FileFormat.ImmOriginMask), mSKS_EFT_FileDetail.FileACHImmOrigin, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(busDate);
        sb.Append(busTime);
        
        if((mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP && mSKS_EFT_FileDetail_BankAccount.ACHFileIDModifier == SKS_AlphaNumeric::Numeric))
        {
            mACHFileIdMod = num2str(mFileIdMod,0,0,0,0);
        }
        else
        {
            mACHFileIdMod = num2char(64 + mFileIdMod); //ASCII A starts at 65
        }
        sb.Append(mACHFileIdMod);

        sb.Append('094101');
        sb.Append(SKS_PP_StringFormats::strFill(23, mSKS_EFT_FileDetail.FileACHImmDestName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(23, mSKS_EFT_FileDetail.FileACHImmOriginName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Seven</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Seven
    /// </summary>
    /// <param name = "entryDetailSeqNbr">entryDetailSeqNbr</param>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <returns>true</returns>
    boolean rec_Seven(str entryDetailSeqNbr, SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str addenda;
        ;

        sb.Append('705');
        if(mSKS_EFT_FileFormatPaymSpec.AddendaSpec)
        {
            addenda = mSKS_EFT_Addenda.buildAddenda();
        }
        else
        {
            switch(mSKS_EFT_VendorPaym.EDIVersion)
            {
                case SKS_EFT_EDIVersion::v003010:
                    addenda = this.EDI820_003010(_sks_eft_FileDetail);
                    break;

                case SKS_EFT_EDIVersion::v003040:
                    addenda = this.EDI820_003040(_sks_eft_FileDetail);
                    break;
            }
        }
        // Pmt Related Info 04-83
        sb.Append(SKS_PP_StringFormats::strFill(80, addenda, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // Addenda Sequence Number 84-87
        sb.Append('0001');

        // Entry Detail Sequence Number(TraceNbr) 88-94
        sb.Append(entryDetailSeqNbr);

        // Write Seven record
        this.fileWrite(sb.ToString());

        mBatchCount++;
        mFileRecCount++;
        mFileEntryCount++;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Six</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Six
    /// </summary>
    /// <param name = "offSet">offSet</param>
    /// <param name = "_sks_eft_FileDetail">_sks_eft_FileDetail</param>
    /// <returns>true</returns>
    boolean rec_Six(boolean offSet, SKS_EFT_FileDetail _sks_eft_FileDetail)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        boolean zeroDollar;
        boolean preNote = false;
        boolean achTest = false;
        boolean sevenRec = false;
        boolean debitAmount = false;

        BankAccountType acctType;
        str bankTransit;
        str bankAccount;
        AmountMST amt;
        str uprSix;
        str id;
        str name;
        str entryDetailSeqNbr;
        int sevenRecCount;
        ;

        mSeqNumber++;
        //    1
        sb.Append('6');

        if(_sks_eft_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
        {
            preNote = true;
        }

        achTest = mSKS_EFT_FileDetail_BankAccount.APTest; //FDd-10590

        if(((substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3) == 'CCD' || substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3) == 'PPD') &&
        strLen(mSKS_EFT_FileFormatPaymSpec.TransactionCode) == 4))
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == 'CCDT' && preNote)
            {
                zeroDollar = true;
            }

            sevenRec = !preNote && !offSet && !achTest;
        }

        if(offSet)
        {
            acctType = _sks_eft_FileDetail.BankAcctType;
            bankTransit = SKS_PP_StringFormats::strFill(9, _sks_eft_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            bankAccount = SKS_PP_StringFormats::strFill(17, _sks_eft_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            amt = ((mBatchCreditAmount * -1) - mBatchDebitAmount);

        }
        else
        {
            acctType = _sks_eft_FileDetail.DepBankAcctType;
            bankTransit = SKS_PP_StringFormats::strFill(9, _sks_eft_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            bankAccount = SKS_PP_StringFormats::strFill(17, _sks_eft_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            amt = _sks_eft_FileDetail.InvoiceSettleAmountPmtCur;
        }

        if(achTest)
        {
            if(!offSet)
            {
                amt = -0.01;
            }
        }
        else
        {
            if(preNote)
            {
                amt = 0.00;
            }
        }

        // ----------------------------------------------
        // Determine Credit or Debit
        // ----------------------------------------------
        if(amt > 0 )
        {
            debitAmount = true;
        }
        else if (amt < 0)
        {
            debitAmount = false;
        }
        else
        {
            debitAmount = false;
        }

        //02-03
        if(acctType == BankAccountType::CheckingAccount) // Checking
        {
            if (preNote)
            {
                sb.Append('23'); // checking/credit/prenote
            }
            else
            {
                sb.Append('22'); // checking/credit/regular
            }
        }
        else if(acctType == BankAccountType::SavingsAccount) // Savings
        {
            if (preNote)
            {
                sb.Append('33'); // savings/credit/prenote
            }
            else
            {
                sb.Append('32'); // savings/credit/regular
            }
        }

        // IAT
        if(!offSet && substr(_sks_eft_FileDetail.PaymSpec,1,3) == #IAT)
        {
            // 04-12 - GO Identification + Check Digit
            bankTransit = SKS_PP_StringFormats::strFill(9, mSKS_EFT_BankGateway.GatewayOperID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
            sb.Append(bankTransit);

            // Always have at least 7 seven addenda records
            sevenRecCount = 7;

            // Count optional 7 seven addenda records
            if(mSKS_EFT_FileDetail_Intermediary.IntBankName != '')
            {
                sevenRecCount++;
            }
            if(mSKS_EFT_FileDetail_CreditParty.CrePartyBankName != '' && (mSKS_EFT_FileDetail_CreditParty.CrePartyBankId + mSKS_EFT_FileDetail_CreditParty.CrePartySwift) != '')
            {
                sevenRecCount++;
            }
            if(_sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice)
            {
                sevenRecCount++;
            }

            // 13-16 Number of seven addenda records
            sb.Append(SKS_PP_StringFormats::strFill(4, num2str(sevenRecCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));


            // 17-29 Reserved - blank
            sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            //04-12
            sb.Append(bankTransit);
            //13-29
            sb.Append(bankAccount);
        }

        // Amount 30-39
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(amt), 10));

        // IAT
        if(!offSet && substr(_sks_eft_FileDetail.PaymSpec,1,3) == #IAT)
        {
            // 40-74 Foreign Receiver's Account Number/DFI Account Number (35)
            sb.Append(SKS_PP_StringFormats::strFill(35, _sks_eft_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // 75-76 Reserved
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //' 77-77 GO OFAC Screening Indicator
            sb.Append(' '); // changed from "0" to blank

            // 78-78 Secondary OFAC Screening Indicator
            sb.Append(' ');

            // 79-79 Addenda record indicator
            sb.Append('1');

            sevenRec = true;

        }
        else
        {
            if(offSet || (preNote && _sks_eft_FileDetail.AccountNum == ''))
            {
                // Bank Offset
                // or A prenote to a Bank record (will not have Vendor ID)
                id = _sks_eft_FileDetail.BankBankTransit;
                name = _sks_eft_FileDetail.FileACHCompanyName;
            }
            else
            {
                id = _sks_eft_FileDetail.AccountNum;
                name = _sks_eft_FileDetail.AccountName;
            }

            // ID Number 40-54 (15)
            switch(msks_eft_FileDetail_AddendaHeader.AccountIDOvr)
            {
                case SKS_EFT_AddendaOverwrite::AccountName:
                    sb.Append(SKS_PP_StringFormats::strFill(15, _sks_eft_FileDetail.AccountName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
                case SKS_EFT_AddendaOverwrite::AccountNum:
                    sb.Append(SKS_PP_StringFormats::strFill(15, _sks_eft_FileDetail.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
                case SKS_EFT_AddendaOverwrite::BeneName:
                    sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
                case SKS_EFT_AddendaOverwrite::Fixed:
                    sb.Append(SKS_PP_StringFormats::strFill(15, msks_eft_FileDetail_AddendaHeader.IdentificationFixedValue, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
                default:
                    sb.Append(SKS_PP_StringFormats::strFill(15, id, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
            }

            // Receiving Company Name/ID Number 55-76
            switch(msks_eft_FileDetail_AddendaHeader.RecCompany)
            {
                case SKS_EFT_AddendaOverwrite::AccountName:
                    sb.Append(SKS_PP_StringFormats::strFill(22, _sks_eft_FileDetail.AccountName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
                case SKS_EFT_AddendaOverwrite::AccountNum:
                    sb.Append(SKS_PP_StringFormats::strFill(22, _sks_eft_FileDetail.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
                case SKS_EFT_AddendaOverwrite::BeneName:
                    sb.Append(SKS_PP_StringFormats::strFill(22, mSKS_EFT_FileDetail_VendAddress.BeneName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
                case SKS_EFT_AddendaOverwrite::Fixed:
                    sb.Append(SKS_PP_StringFormats::strFill(22, msks_eft_FileDetail_AddendaHeader.RecCompanyFixedValue, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
                default:
                    sb.Append(SKS_PP_StringFormats::strFill(22, this.CharacterReplacement(name), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    break;
            }

            // Discretionary Data 77-78
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            // Addenda Record Indicator 79-79
            if(SevenRec)
            {
                sb.Append('1');
            }
            else
            {
                sb.Append('0');
            }
        }

        // Trace Number 80-94
        sb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail_BankAccount.ACHOrigDFI, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // Trace Number 94-100
        entryDetailSeqNbr = SKS_PP_StringFormats::strFill(7, SKS_PP_StringFormats::strLTrimZeroes(_SKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        sb.Append(entryDetailSeqNbr);

        // Write Six record
        uprSix = sb.ToString();
        this.fileWrite(strUpr(uprSix));

        mBatchCount++;
        mFileRecCount++;
        mFileEntryCount++;

        if(debitAmount)
        {
            mBatchDebitAmount += amt;
        }
        else
        {
            mBatchCreditAmount += amt;
        }

        mBatchHash = SKS_EFT_Format_US_ACH::hashTotal(mBatchHash, str2int64(substr(bankTransit,1,8)));

        if(sevenRec)
        {
            if(!offSet && substr(_sks_eft_FileDetail.PaymSpec,1,3) == #IAT)
            {
                // 710  Foreign Pmt Amt/Receiver's Name
                this.rec_IAT_710(_sks_eft_FileDetail, entryDetailSeqNbr, amt);

                // 711  Originator's Name/Street
                this.rec_IAT_711(_sks_eft_FileDetail, entryDetailSeqNbr);

                // 712  Originator's City/State/Country/PostalCode
                this.rec_IAT_712(_sks_eft_FileDetail, entryDetailSeqNbr);

                // 713  ODFI Name/Qual/ID/Branch Country Code
                this.rec_IAT_713(_sks_eft_FileDetail, entryDetailSeqNbr);

                // 714  RDFI Name/Qual/ID/Branch Country Code
                this.rec_IAT_714(_sks_eft_FileDetail, entryDetailSeqNbr);

                // 715  Receiver's ID Nbr (VendID)/Street
                this.rec_IAT_715(_sks_eft_FileDetail, entryDetailSeqNbr);

                // 716  Receivers' City/State/Cntry/Postal Code
                this.rec_IAT_716(_sks_eft_FileDetail, entryDetailSeqNbr);

                // 717  Remittance
                if(_sks_eft_FileDetail.RecordSummary == SKS_EFT_RecordSummary::Invoice)
                {
                    this.rec_IAT_717(_sks_eft_FileDetail, entryDetailSeqNbr);
                }

                // A718_A - Intermediary Bank
                if(mSKS_EFT_FileDetail_Intermediary.IntBankName != '')
                {
                    this.rec_IAT_718_A(_sks_eft_FileDetail, entryDetailSeqNbr);
                }

                // A718_B - Credit Party Bank
                if(mSKS_EFT_FileDetail_CreditParty.CrePartyBankName != '' && (mSKS_EFT_FileDetail_CreditParty.CrePartyBankId + mSKS_EFT_FileDetail_CreditParty.CrePartySwift) != '')
                {
                    this.rec_IAT_718_B(_sks_eft_FileDetail, entryDetailSeqNbr);
                }

                mBatchCount++;
                mFileRecCount++;
                mFileEntryCount++;
            }
            if((substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3) == 'CCD' ||
                substr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3) == 'PPD') &&
                strLen(mSKS_EFT_FileFormatPaymSpec.TransactionCode) == 4)
            {
                this.rec_Seven(entryDetailSeqNbr, _sks_eft_FileDetail);
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
                order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                    mSKS_EFT_FileDetail.BankAccountId,
                    mSKS_EFT_FileDetail.PaymentCurrencyCode,
                    mSKS_EFT_FileDetail.PaymSpec,
                    mSKS_EFT_FileDetail.EffectiveDate,
                    mSKS_EFT_FileDetail.DepCountryRegionId,
                    mSKS_EFT_FileDetail.RecordType,
                    mSKS_EFT_FileDetail.AccountNum,
                    mSKS_EFT_FileDetail.PaymentReference,
                    mSKS_EFT_FileDetail.RecId
            where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>hashTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduce hash total so it is always 10 digits or less
    /// </summary>
    /// <param name = "_hash">Hash</param>
    /// <param name = "_addHash">Add hash</param>
    /// <returns>Returns hash value</returns>
    public static int64 hashTotal(int64 _hash, int64 _addHash)
    {
        str strNum;
        int64 value;
        ;

        value = _hash + _addHash; // Add new hash
        if(value > 9999999999)
        {
            strNum = SKS_PP_StringFormats::strRight(int642Str(value), 10);
            value = str2int64(strNum);
        }

        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>