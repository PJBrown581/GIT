<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_SCOTIA_761_ADDR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_SCOTIA_761_ADDR Extends SKS_PP_Format_BankGroup
{
    SKS_PP_Bank gSKS_PP_Bank;
    BankAccountTable gBankAccountTable;
    AmountCur gGroupIssueAmountSum, gGroupVoidAmountSum;
    int gGroupIssueCount, gGroupVoidCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Scotiabank Issued Cheque File Specification Version 2
    // Detail Record
    // 1    1       'J' (1!x)
    // 2    2-6     Transit number (5!n)
    // 3    7-10    '0002' Institution Code (4!n)
    // 4    11-17   SPACE FILL (7!SPACES)
    // 5    18-24   Account Number (7!n)
    // 6    25-38   Cheque Number   (14!n)
    // 7    39-48   Amount (10!n)
    // 8    49-60   Transactoin code (12!x)
    // 9    61-68   Issued Date (8!n)
    // 10   69-98   PayeeRef/Customer Reference Number (30!x) may be totally spaces.
    // 11   99-128  Vendor number in client system (30!x) may be totally space filled.
    // 12   128-158 Trace Number (30!x) may be totally space filled.
    // 13   159-161 Currency Code (3!a)
    // 14   162-221 Payee Zone One (60a) no padding(based on sample file from cust)
    protected str txtDetail()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int locMult = 1;
        str locTransCode;
        DirPartyNamePrimaryAddressView DirPartyNamePrimaryAddressView;
        str vendorDetails;
        VendTable   vendtable;
        container   company;
        str transitNumber;
        Array vendAddrArray = new Array(Types::String);//SKS_VSTS_14518
        ;

        sb = new System.Text.StringBuilder();
        if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
        locMult = -1;
        if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::Cheque)
        {
            locTransCode = 'ISSUED';
            gGroupIssueAmountSum = gGroupIssueAmountSum + locMult * mSKS_PP_FileDetail.ChkCuryAmt;
            gGroupIssueCount++;
        }
        else
        {
            locTransCode = 'VOID';
            gGroupVoidAmountSum = gGroupVoidAmountSum + locMult * mSKS_PP_FileDetail.ChkCuryAmt;
            gGroupVoidCount++;
        }

        // 1    1       'J' (1!x)
        sb.Append('J');

        // 2    2-6     Transit number (5!n)
        if(gSKS_PP_Bank.PP02)//SKS_devOps_15042
        {
            transitNumber = gSKS_PP_Bank.PP02;
        }
        else
        {
            transitNumber = mSKS_PP_FileDetail.BnkBankTransit;
        }
        sb.Append(SKS_PP_StringFormats::strFill(5, transitNumber, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 3    7-10    '0002' Institution Code (4!n)
        sb.Append(SKS_PP_StringFormats::strFill(4,'2', SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 4    11-17   SPACE FILL (7!SPACES)
        sb.Append(SKS_PP_StringFormats::strFill(7,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        // 5    18-24   Account Number (7!n)
        sb.Append(SKS_PP_StringFormats::strFill(7, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 6    25-38   Cheque Number   (14!n)
        sb.Append(SKS_PP_StringFormats::strFill(14, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 7    39-48   Amount (10!n)
        sb.Append(SKS_PP_StringFormats::strMoney(locMult * mSKS_PP_FileDetail.ChkCuryAmt, 10));

        // 8    49-60   Transactoin code (12!x)
        sb.Append(SKS_PP_StringFormats::strFill(12, locTransCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    61-68   Issued Date (8!n)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));

        // 10   69-98   PayeeRef/Customer Reference Number (30!x) may be totally spaces.
        sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        // 11   99-128  Vendor number in client system (30!x) may be totally space filled.
        sb.Append(SKS_PP_StringFormats::strFill(30,mSKS_PP_FileDetail.VendorAccount, SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));

        // 12   128-158 Trace Number (30!x) may be totally space filled.
        sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        // 13   159-161 Currency Code (3!a)
        sb.Append(SKS_PP_StringFormats::strFill(3,gBankAccountTable.CurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        // 14   162-221 Vendor Number field (60a) no padding(based on sample file from cust)
        sb.Append(SKS_PP_StringFormats::strFill(60, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));

        // 15 222-282 Payee Zone 2 (Empty)
        sb.Append(SKS_PP_StringFormats::strFill(60,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company Street, ZipCode, City, State, ISOcode               //SKS#VSTS:14443
            from DirPartyNamePrimaryAddressView
            join vendtable
            where DirPartyNamePrimaryAddressView.Party == vendtable.Party &&
                vendtable.AccountNum == mSKS_PP_FileDetail.VendorAccount;

        // 16 282-761 Payee Zone 3
        if(DirPartyNamePrimaryAddressView.Street)
        {
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(DirPartyNamePrimaryAddressView.Street,1);//SKS_VSTS_14518
            if(vendAddrArray.exists(1))
            {
                vendorDetails = vendorDetails + '' + vendAddrArray.value(1);
            }
        }
        if(DirPartyNamePrimaryAddressView.ZipCode)
        {
            vendorDetails = vendorDetails + ' ' + DirPartyNamePrimaryAddressView.ZipCode;
        }
        if(DirPartyNamePrimaryAddressView.City)
        {
            vendorDetails = vendorDetails + ' ' + DirPartyNamePrimaryAddressView.City;
        }
        if(DirPartyNamePrimaryAddressView.State)
        {
            vendorDetails = vendorDetails + ' ' + DirPartyNamePrimaryAddressView.State;
        }
        if(DirPartyNamePrimaryAddressView.ISOcode)
        {
            vendorDetails = vendorDetails + ' ' + DirPartyNamePrimaryAddressView.ISOcode;
        }
        sb.Append(SKS_PP_StringFormats::strFill(480, vendorDetails, SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));

        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    // SCotiabank Issued Cheque File Specification Version 2
    // Account Header Record
    // 1        'A' (1!a)
    // 2-11     CustomerNumber Assigned by Bank.  If RS9999999999 the RS will be stripped. (10!n)
    // 12-16    Transit Number (5!n)
    // 17-20    Insitiution Code '0002' (4!n)
    // 21-27    FILLER SPACES (7!SPACES)
    // 28-34    Account Number (7!n)
    // 35-37    Currency Always 'USD' or 'CAD' no other currencies allowed
    // 38-39    'CA' (2!x)
    // 40-69    FILLER SPACES (30!SPACES)
    // 70-77    YYYYMMDD File creation date (8!n)
    // 78-85    'ISSUED' (8!x)
    // 86-93    FILLER SPACES (8!SPACES)
    // 94-103   'BNS' (10!X)
    // 104-761  *Optional* Omitted - if used, must be space or zero filled [658!SPACES] or [658!ZEROS]

    protected str txtGroupHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str locCustomerNumber;
        utcDateTime locUtcDateTime;
        date locDate;
        Container company;
        str transitNumber;
        ;

        //Clear Accumulators
        gGroupIssueAmountSum = 0;
        gGroupIssueCount = 0;
        gGroupVoidAmountSum = 0;
        gGroupVoidCount = 0;

        gSKS_PP_Bank = null;
        gBankAccountTable = null;
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP01 from gSKS_PP_Bank where gSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
        select crossCompany:company CurrencyCode from gBankAccountTable where gBankAccountTable.AccountID == mSKS_PP_FileDetail.ChkBankAcct;

        // 1        'A' (1!a)
        sb.Append('A');

        // 2-11     CustomerNumber Assigned by Bank.  If RS9999999999 the RS will be stripped. (10!n)
        if(strStartsWith(strUpr(gSKS_PP_Bank.PP01), 'RS'))
            locCustomerNumber = SKS_PP_StringFormats::strSub(gSKS_PP_Bank.PP01, 3);
        else
           locCustomerNumber = gSKS_PP_Bank.PP01;

        sb.Append(SKS_PP_StringFormats::strFill(10, locCustomerNumber, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 12-16    Transit Number (5!n)

        if(gSKS_PP_Bank.PP02)//SKS_devOps_15008
        {
            transitNumber = gSKS_PP_Bank.PP02;
        }
        else
        {
            transitNumber = mSKS_PP_FileDetail.BnkBankTransit;
        }
        sb.Append(SKS_PP_StringFormats::strFill(5, transitNumber, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 17-20    Insitiution Code '0002' (4!n)
        sb.Append(SKS_PP_StringFormats::strFill(4,'2', SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 21-27    FILLER SPACES (7!SPACES)
        sb.Append(SKS_PP_StringFormats::strFill(7,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        // 28-34    Account Number (7!n)
        sb.Append(SKS_PP_StringFormats::strFill(7, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 35-37    Currency Always 'USD' or 'CAD' no other currencies allowed
        sb.Append(gBankAccountTable.CurrencyCode);

        // 38-39    'CA' (2!x)
        sb.Append('CA');

        // 40-69    FILLER SPACES (30!SPACES)
        sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        // 70-77    YYYYMMDD File creation date (8!n)
        locUtcDateTime = DateTimeUtil::getSystemDateTime();
        locDate = DateTimeUtil::date(locUtcDateTime);
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(locDate));

        // 78-85    'ISSUED' (8!x)
        sb.Append(SKS_PP_StringFormats::strFill(8,'ISSUED', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));

        // 86-93    FILLER SPACES (8!SPACES)
        sb.Append(SKS_PP_StringFormats::strFill(8,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        // 94-103   'BNS' (10!x)
        sb.Append(SKS_PP_StringFormats::strFill(10,'BNS', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));

        // 104-761  *Optional* Omitted - if used, must be space or zero filled (658SPACES) or (658ZEROS)

        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // Scotiabank Issued Cheque File Specification Version 2
    // Detail Record
    // 1        1       'Z' (1!a)
    // 2        2-23    SPACE FILLER (22!SPACES)
    // 3        24-31   Issued Item Count (8!n)
    // 4        32-45   Issued Item Total (14!n)
    // 5        46-53   Void Item Count(8!n)
    // 6        54-67   Void Item Total (14!n)
    // 7        68-89   SPACE FILLED (22!SPACES)
    // 8        90-761  OMITTED [672!ZERO] or [672!SPACES] if used
    protected str txtGroupTrailer()
    {
        System.Text.StringBuilder sb;
        ;

        sb = new System.Text.StringBuilder();
        sb.Append('Z');

        // 2        2-23    SPACE FILLER (22!SPACES)
        sb.Append(SKS_PP_StringFormats::strFill(22,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        // 3        24-31   Issued Item Count (8!n)
        sb.Append(SKS_PP_StringFormats::strFill(8,int2str(gGroupIssueCount), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 4        32-45   Issued Item Total (14!n)
        sb.Append(SKS_PP_StringFormats::strMoney(gGroupIssueAmountSum, 14));

        // 5        46-53   Void Item Count(8!n)
        sb.Append(SKS_PP_StringFormats::strFill(8,int2str(gGroupVoidCount), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        // 4        32-45   Void Item Total (14!n)
        sb.Append(SKS_PP_StringFormats::strMoney(gGroupVoidAmountSum, 14));

        // 7        68-89   SPACE FILLED (22!SPACES)
        sb.Append(SKS_PP_StringFormats::strFill(22,'', SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Right));

        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>