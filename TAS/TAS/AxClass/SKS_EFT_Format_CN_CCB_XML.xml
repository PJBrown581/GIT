<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CN_CCB_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CN_CCB_XML
/// </summary>
class SKS_EFT_Format_CN_CCB_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20221212')
    #define.INTRA('INTRA')
    #define.INTER_BT('INTER-BT')
    #define.BATCH_TRF('BATCH-TRF')

    XmlDocument         xmlDoc;
    XmlElement          nodeRoot;
    int                 mWHTSerialNumber,serialno;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getcodepage</Name>
				<Source><![CDATA[
    /// <summary>
    /// getcodepage
    /// </summary>
    /// <returns>int</returns>
    protected int getcodepage()
    {
        return 936;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //Initialize XML
        xmlDoc = XmlDocument::newBlank(this.getEncoding());
    
        this.node_MessageRoot();
    
        this.node_TransactionHeader();
    
        while(mSKS_EFT_FileDetail)
        {
            if(mSKS_EFT_FileDetail.PaymSpec ==#INTRA)
            {
                this.node_TransInfo();
            }
            else if(mSKS_EFT_FileDetail.PaymSpec ==#INTER_BT)
            {
                this.node_TransInfo_InterBt();
            }
            else if(mSKS_EFT_FileDetail.PaymSpec ==#BATCH_TRF)
            {
                this.node_TransInfo_BatchTrf();
            }
    
            next mSKS_EFT_FileDetail;
        }

        this.node_SignInfo();

        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_MessageRoot
    /// </summary>
    protected void node_MessageRoot()
    {
        nodeRoot = xmldoc.appendChild(xmlDoc.createElement('TX'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncoding</Name>
				<Source><![CDATA[
    protected str getEncoding()
    {
        return 'gb2312';
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_TransactionHeader</Name>
				<Source><![CDATA[
    private void node_TransactionHeader()
    {
        str w01, w02, w03;
    
        w01 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CustomerID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        w02 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UserID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        w03 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Password', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        //      <REQUEST_SN>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'REQUEST_SN', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 16));

        //      <CUST_ID>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'CUST_ID', w01, 21);
  
        //      <USER_ID>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'USER_ID', w02, 21);

        //      <PASSWORD>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'PASSWORD', w03, 21);

        //      <TX_CODE>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'TX_CODE', '6W8010');

        //      <LANGUAGE>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'LANGUAGE', 'CN');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_TransInfo</Name>
				<Source><![CDATA[
    private void node_TransInfo()
    {
        XmlElement  nodeTXINFO;

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId); 

        //      <TX_INFO>
        nodeTXINFO = nodeRoot.appendChild(xmlDoc.createElement('TX_INFO'));

        //          <PAY_ACCNO>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'PAY_ACCNO', mSKS_EFT_FileDetail.BankBankAcct, 32);

        //          <RECV_ACCNO>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'RECV_ACCNO', mSKS_EFT_FileDetail.DepBankAcct, 32);

        //  <RECV_ACC_NAME>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'RECV_ACC_NAME', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 100);

        //  <CHK_RECVNAME>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'CHK_RECVNAME', '');

        //  <RECV_OPENACC_DEPT>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'RECV_OPENACC_DEPT', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 100);


        //  <AMOUNT>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'AMOUNT',num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));

        //  <CUR_TYPE>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'CUR_TYPE', '1');

        //  <USEOF>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'USEOF', this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode), 100);

        //  <CST_PAY_NO>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'CST_PAY_NO', '');
        
        //  <REM1>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'REM1', '');

        //  <REM2>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'REM2', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_TransInfo_InterBt</Name>
				<Source><![CDATA[
    private void node_TransInfo_InterBt()
    {
        XmlElement  nodeTXINFO;

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        //      <TX_INFO>
        nodeTXINFO = nodeRoot.appendChild(xmlDoc.createElement('TX_INFO'));

        //          <PAY_ACCNO>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'PAY_ACCNO', mSKS_EFT_FileDetail.BankBankAcct, 32);

        //          <RECV_ACCNO>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'RECV_ACCNO', mSKS_EFT_FileDetail.DepBankAcct, 32);

        //  <RECV_ACC_NAME>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'RECV_ACC_NAME', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 100);

        //  <RECV_OPENACC_DEPT>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'RECV_OPENACC_DEPT', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 100);

        //RECV_UBANKNO
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'RECV_UBANKNO', '');

        //  <AMOUNT>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'AMOUNT',num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));

        //  <CUR_TYPE>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'CUR_TYPE', '1');

        //  <USEOF>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'USEOF', this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode), 100);

        //  <CST_PAY_NO>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'CST_PAY_NO', '');
        
        //  <REM1>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'REM1', '');

        //  <REM2>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'REM2', '');

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_TransInfo_BatchTrf</Name>
				<Source><![CDATA[
    private void node_TransInfo_BatchTrf()
    {
        XmlElement  nodeTXINFO;
        serialno++;
        str w04, FileCtx,SameBank,bankPurpCode;

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
       
        bankPurpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);

        w04= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Branch', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
        SameBank= this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SameBank', mSKS_EFT_FileDetail.RecId));
        FileCtx = int2str(serialno)+'|@|'+ mSKS_EFT_Bank.WOrdPartyName+'|@|' + mSKS_EFT_FileDetail.BankBankAcct+'|@|' + w04+'|@|' + mSKS_EFT_FileDetail.DepBankAcct+'|@|' + mSKS_EFT_FileDetail_VendAddress.BeneName+'|@|' + mSKS_EFT_FileDetail_BenBank.BenBankBranch +'|@|'+ mSKS_EFT_FileDetail_BenBank.BenBankName+'|@|'+'|@|'+'|@|' +SameBank+num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0)+'|@|'+ mSKS_EFT_FileDetail.PaymentCurrencyCode+'|@|'+bankPurpCode+'|@|';

        //      <TX_INFO>
        nodeTXINFO = nodeRoot.appendChild(xmlDoc.createElement('TX_INFO'));

        
        //  <AMOUNT>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'AMOUNT',num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));

        //  <COUNT>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'COUNT', '');

        
        //  <CHK_RECVNAME>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'CHK_RECVNAME', '');

        //CHNL_TYPE
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'CHNL_TYPE', '');

        //FILE_CTX
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTXINFO, 'FILE_CTX',this.CharacterReplacement(FileCtx));

        
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_SignInfo</Name>
				<Source><![CDATA[
    private void node_SignInfo()
    {
        //  <SIGN_INFO>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'SIGN_INFO', '');

        //  <SIGNCERT>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'SIGNCERT', '');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>