<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_BMO_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_BMO_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_CA_BMO_XML  extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.FormatVersion('20230518')
    #define.ACH_CCD('ACH-CCD')
    #define.ACH_PPD('ACH-PPD')
    #define.ACH_CTX('ACH-CTX')
    #define.EFT('EFT')
    #define.FEDWIRE('FEDWIRE')
    #define.INT_WIRE('INT-WIRE')
    #define.EFT2('EFT2')
    #define.ACH_CTX2('ACH-CTX2')

    str name;
    str customerID;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.11: LclInstrm
        //              2.13: Prtry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmftTpInf;
        XmlElement nodeLclInstrm;
        XmlElement nodeCtgyPurp;
        str prtry,value,cd;
    
        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX:           
                prtry = 'DXC';
                break;
            case #ACH_CCD:
                cd = 'CCD';//DevOps20393
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
                break;
            case #ACH_PPD:
                prtry = 'ADC';
                break;
            case #FEDWIRE:
                prtry = 'FWT';
                break;
            case #INT_WIRE:
                prtry ='SWT';
                break;
            case #EFT:
                prtry ='DXC';//DevOps20809
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
                break;
            case #EFT2:
                prtry = 'EFT';
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
                break;
            case #ACH_CTX2:  //SKS#DevOps:22008
                cd = 'CTX';
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookup));
                break;

        }    
        if(prtry)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
                
            //              2.13: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', prtry);
        }
        else if(cd)//DevOps20393
        {
            //          2.11: LclInstrm
            nodeLclInstrm = nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
                
            //              Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', Cd);
        }
        if(value)
        {
            //                  CtgyPurp
            nodeCtgyPurp = nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
          
            //                  Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------       

        name = mSKS_EFT_FileDetail.AccountName;     //SKS#VSTS:14475

        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), 140);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatID)
        {
            case 'CA-BMO-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FEDWIRE:
                        this.node_PstlAdr_Structured(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrline2, mRemittanceState );
                        break;
                    case #INT_WIRE:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
                        break;
                    default:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, '', '', '');
                        break;
                }
                break;
            case 'CA-BMO-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FEDWIRE:
                    case #INT_WIRE:
                    case #EFT2:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
                        break;
                    default:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, '', '', '');
                        break;
                }

                break;
            default:
                this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, '', '', '');
                break;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrAcctTp;
        str        value;
        
        if(mSKS_EFT_FileDetail.DepBankAcct || (mSKS_EFT_FileDetail.DepBankIBAN != '' && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FEDWIRE))
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(mSKS_EFT_FileDetail.DepBankIBAN != '' &&( mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FEDWIRE||mSKS_EFT_FileDetail.PaymSpec == #INT_WIRE ))
            {
                //                  IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
            }
            else
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct);
            }
            if((mSKS_EFT_FileDetail.PaymSpec == #ACH_CTX && mSKS_EFT_FileDetail.formatID == 'CA-BMO-XML-US') || (mSKS_EFT_FileDetail.PaymSpec == #ACH_CCD && mSKS_EFT_FileDetail.FormatId == 'CA-BMO-XML'))
            {
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    value = 'SVGS';
                }
                else
                {
                    value = 'CACC';
                }
                nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodePstlAdr;

        //          2.77: CdtrAgt
        nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //              FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        
        if((mSKS_EFT_FileDetail.PaymSpec == #FEDWIRE  || mSKS_EFT_FileDetail.PaymSpec == #INT_WIRE) && mSKS_EFT_FileDetail.DepSwiftNo)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 9);
        }
        else  if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 9);
        }

        if(mSKS_EFT_FileDetail_BenBank.BenBankName)//DevOps20393
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName));
        }

        if(mSKS_EFT_FileDetail.PaymSpec == #INT_WIRE || mSKS_EFT_FileDetail.PaymSpec == #FEDWIRE)
        {
            select msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress;
            //      PstlAdr            
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, msks_EFT_FileDetail_BankAddress.ZipCode, mSKS_EFT_FileDetail_BenBank.BenBankCity, 35, '', msks_EFT_FileDetail_BankAddress.State, true);
            
        }        
        else if(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)
        {
            //      PstlAdr
            nodePstlAdr = nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));
            
            //          Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), 2, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeBrnchId;
        boolean IntrmyAgt1 = true;

        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #INT_WIRE:
            case #FEDWIRE:
            case #ACH_CTX2: //SKS#DevOps:22008
                IntrmyAgt1=false;
                break;
        }

        if((mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' || mSKS_EFT_FileDetail_Intermediary.IntBankId != '') && IntrmyAgt1)
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
            }
    
            //                  ClrSysMmbId
            if(mSKS_EFT_FileDetail_Intermediary.IntBankId != '')
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail_Intermediary.IntBankId, 0, false);
            }
    
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 140, false);
    
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, mSKS_EFT_FileDetail_Intermediary.IntBankAddr + '' + mSKS_EFT_FileDetail_Intermediary.IntBankAddr2, '', mSKS_EFT_FileDetail_Intermediary.IntBankCity);
    
            //              BrnchId
            if(mSKS_EFT_FileDetail_Intermediary.IntBankBranch != '')
            {
                nodeBrnchId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //                  InstrId
        //                  EndToEndId
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePmtId;
        int len;
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        //                  InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 19));

        
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #ACH_CTX2:
                len = 15;
                break;
            default:
                len = 19;
                break;
        }

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), len));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;

        str  InitgptyId;
        boolean printInitgptylookup = false,prinCompanyId=false;

        InitgptyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitgptyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'CA-BMO-XML':
                switch(mSKS_EFT_FileDetail.PaymSpec)
                {
                    case #EFT2:
                        if(InitgptyId)
                        {
                            printInitgptylookup = true;
                        }
                        break;
                    default:
                        if(mSKS_EFT_FileDetail.FileACHCompanyId)
                        {
                            prinCompanyId = true;
                        }
                        break;
                }
                break;
            default:
                if(mSKS_EFT_FileDetail.FileACHCompanyId)
                {
                    prinCompanyId = true;
                }
                break;
        }

        if(prinCompanyId || printInitgptylookup)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));

            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            if(mSKS_EFT_FileDetail.PaymSpec == #INT_WIRE || mSKS_EFT_FileDetail.PaymSpec == #FEDWIRE)
            {
                //                      9.1.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyId), 10);
            }
            else if(mSKS_EFT_FileDetail.PaymSpec == #EFT2)
            {
                //                      9.1.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(InitgptyId), 35);
            }
            else
            {
                //                      9.1.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyId), 8);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        int len ;

        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #EFT2:
                len = 140;
                break;
            case #ACH_CTX2:
                len = 16;
                break;
            default:
                len = 15;
                break;
        }
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        //          PstlAdr
        if(mSKS_EFT_FileDetail.PaymSpec == #FEDWIRE || mSKS_EFT_FileDetail.PaymSpec == #INT_WIRE || mSKS_EFT_FileDetail.PaymSpec == #EFT2)
        {
            this.node_PstlAdr(_nodeDbtr,  mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId,  mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr,  mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
        }
        else
        {
            this.node_PstlAdr_Structured(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //-----------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str        dunsNum, partyId;

        dunsNum = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DUNSNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        partyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PartyID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(dunsNum)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', dunsNum, 10);       //SKS#DevOps:17099

            if(partyId &&                                           //SKS#DevOps:17099
              (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CTX ||//SKS_VSTS_14655
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CTX2 || //SKS#DevOps:22008
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT||        //SKS#DevOps:17611
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT2))
            {
                nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
                
                //                      Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', partyId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr

        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XMLElement nodeDbtrAcctTp;
        str        value;
        boolean    printDbtrAcctTp;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'CA-BOA-XML-US':
                printDbtrAcctTp = true;
                break;
        }

        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));

            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

            //          Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //              Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct);

            select msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

            if(( mSKS_EFT_FileDetail.PaymSpec==#EFT || mSKS_EFT_FileDetail.PaymSpec==#EFT2) && msks_EFT_FileDetail_BankAddress.Name)
            {
                //                  Nm
                   
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Nm',msks_EFT_FileDetail_BankAddress.Name,70);
            }

            if(printDbtrAcctTp)
            {
                if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
                {
                    value = 'SVGS';
                }
                else
                {
                    value = 'CACC';
                }
                if(value == 'SVGS' || value == 'CACC')
                {
                    nodeDbtrAcctTp = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Tp'));
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', value);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XMLElement nodeBrnchId;
        boolean Printdbtrid=true;

        if(mSKS_EFT_FileDetail.BankBankTransit)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));

            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, 9);
            
            switch(mSKS_EFT_FileDetail.PaymSpec)
            {
                case #EFT2:
                case #ACH_CTX2: //SKS#DevOps:22008
                    Printdbtrid=false;
                    break;
            }

            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId !='' && Printdbtrid)
            {
                //                  BrnchId
                nodeBrnchId = nodeDbtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, 35);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
    
        //              PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);
    
        //              Id
        this.node_PmtInf_Cdtr_Id(nodeCdtr);

        //      CtctDtls
        this.node_PmtInf_Cdtr_CtctDtls(nodeCdtr);      
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_CtctDtls</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_CtctDtls
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_CtctDtls(XmlElement _nodeCdtr)//SKS_VSTS_13567
    {
        //------------------------------------------------------------------------------------------------------
        //      4.1: CtclDtls
        //      4.10.1: Nm
        //      4.10.2: PhneNb
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtctDtls;
        SKS_EB_Vendor sks_eb_vendor;
        str         email;
        boolean crcrDtls;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'CA-BMO-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.PaymSpec)
                {
                    case #ACH_CTX2:
                        crcrDtls = false;
                        break;
                    default:
                        crcrDtls =true;
                        break;
                }
                break;
        }
        
        if(crcrDtls)
        {
            nodeCtctDtls = _nodeCdtr.appendChild(xmlDoc.createElement('CtctDtls'));

            sks_eb_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
            
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'Nm', mSKS_EFT_FileDetail_VendAddress.BeneName, 70);
            
            if(sks_eb_Vendor.EM1Vendor)
            {
                email =  VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).email();

                email = email ? email + ';' : email;
            }

            email = sks_eb_Vendor.EM2Addr ? email + sks_eb_Vendor.EM2Addr + ';' : email;

            email = sks_eb_Vendor.EM3Addr ? email + sks_eb_Vendor.EM3Addr + ';' : email;

            email = sks_eb_Vendor.EM4Addr ? email + sks_eb_Vendor.EM4Addr + ';' : email;

            if(email)
            {
                //          E mail Address
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'EmailAdr', this.CharacterReplacement(email));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        customerID = SKS_PP_Setup::find().RegCustomerID;
        XmlElement nodeRmtInf;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'CA-BMO-XML-US':
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                break;
            default:
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CTX:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    case #EFT:
                    case #EFT2:
                        break;
                    case #FEDWIRE:
                        if(customerID == '5012fd')//DevOps21026
                        {
                            //          2.98: RmtInf
                            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
                            //              2.99: Ustrd
                            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd',mSKS_EFT_FileDetail.PaymentReference);
                        }
                        else
                        {
                            this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);

                        }
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }        
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocInf;
        XmlElement nodeRfrdDocAmt;
        SKS_EFT_FileDetail   invSKS_EFT_FileDetail;
        boolean firstRec = true;

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId  && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }
            //               2.100: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
            
            //              2.101: RfrdDocInf
            nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));

            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeRfrdDocInf, invSKS_EFT_FileDetail);
                
            //              2.109 RfrdDocAmt
            nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));

            this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_RfrdDocInf
    /// </summary>
    /// <param name = "nodeRfrdDocInf">nodeRfrdDocInf</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement nodeRfrdDocInf, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;

        //              2.121: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));

        //                  2.122: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

        //              2.104: Cd
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');

            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', _invSKS_EFT_FileDetail.InvoiceNumber, 0, false);

            //              2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
            //               2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', _invSKS_EFT_FileDetail.InvoiceNumber, 0, false);

            //              2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">_nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              2.43: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;

        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }

        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>