<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class that all Positive Pay formats use.
/// </summary>
/// <remarks>
/// Class selects records and provides the basic file structure
/// Child classes override any methods that need data in the format
/// </remarks>

// Format structure:
//  File header
//      Format header
//      Format header line 2
//          Group header
//              Detail
//              Detail line 2
//          Group trailer
//          Group trailer line 2
//      Format trailer
//  File trailer

class SKS_PP_Format
{
    SKS_PP_FileFormat mSKS_PP_FileFormat;
    SKS_PP_FileNbr mFileNumber;
    SKS_PP_FileDetail mSKS_PP_FileDetail;
    SKS_PP_File mSKS_PP_File;
    SKS_EB_FileHub mFileHub;
    str mErrorText;
    SKS_BF_BankIntType mSKS_BF_BankIntType;
    SKS_EB_FileName     mBFNewFileName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBFNewFileName</Name>
				<Source><![CDATA[
    public SKS_EB_FileName  getBFNewFileName()
    {
        return mBFNewFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileClose</Name>
				<Source><![CDATA[
    private void fileClose()
    {
        // Flushs all in memory lines to file
        // Until this is called, the file will not exist.
        mFileHub.runAppendLineFlush();

        if(mFileHub.errorHasException())
        {
            mErrorText = mFileHub.errorException();
        }
        else
            mBFNewFileName = mFileHub.getBFNewFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileCreate</Name>
				<Source><![CDATA[
    private void fileCreate()
    {
        SKS_EB_FileStorage locSKS_EB_FileStorage;
        str fileName;
       
        
        mSKS_BF_BankIntType = mSKS_PP_File.SKS_BF_BankIntType;
        fileName = mSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal ? mSKS_PP_File.FilePath + @'\' + mSKS_PP_File.FileName : mSKS_PP_File.FilePath + @'\';
        
        mFileHub = SKS_EB_FileHub::construct(mSKS_BF_BankIntType);
        mFileHub.parmThrowErrorIfException(false);
        mFileHub.parmEncoding(0);
        mFileHub.setFileName(fileName,'','','','',mSKS_PP_File.FilePath,mSKS_PP_File.FileNbr,mSKS_PP_File.DataAreaId,mSKS_PP_File.BankFabricFileNameName);      //Bankfabric
        //mFileHub.setFileName(fileName);
        mFileHub.parmFileRemoveUTF8BOM(this.getRemoveBOM());
        if(mSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            mFileHub.runFileInquire();
            if(mFileHub.attrFileExists())
               mFileHub.runFileDelete(fileName);
        }
        if(mFileHub.errorHasException())
        {
            mErrorText = mFileHub.errorException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoveBOM</Name>
				<Source><![CDATA[
    protected boolean getRemoveBOM()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCRLF</Name>
				<Source><![CDATA[
    protected boolean getCRLF()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileCRLF</Name>
				<Source><![CDATA[
    private void fileCRLF()
    {
        //FileHub implementation is different than 2012
        // Set getCRLF to false if No CRLF is needed.
        // Add LF after each line if needed
        // FileFormat CRLF property is not currently used
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
            mFileHub.runAppendLine(_result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    public str getErrorText()
    {
        ;
        return mErrorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the driver for all Positive Pay file formats
    /// </summary>
    /// <remarks>
    /// Selects records from SKS_PP_FileDetail and iterates through them
    /// </remarks>
    
    private void run()
    {
        // Load file info
        mSKS_PP_File = SKS_PP_File::find(mFileNumber);
        if(!mSKS_PP_File)
            error(strFmt("@SKS862", mFileNumber));
    
        // Load format info
        mSKS_PP_FileFormat = SKS_PP_FileFormat::find(mSKS_PP_File.FormatId);
        if(!mSKS_PP_FileFormat)
            error(strFmt("@SKS863", mSKS_PP_File.FormatId));
    
        // Create file
        this.fileCreate();
        if(mErrorText != '')
        {
            return;
        }
    
        // File header from PP Header/Trailer
        this.sectionFileHeader();
    
        // Select all payment records
        this.selectPaymentRecords();
    
        // Format header
        this.sectionFormatHeader();
        this.sectionFormatHeaderLine2();
    
        while(mSKS_PP_FileDetail)
        {
            // Group header
            this.sectionGroupHeader();
    
            // Detail lines
            this.sectionDetail();
            this.sectionDetailLine2();
    
            next mSKS_PP_FileDetail;
    
            // Group trailer
            this.sectionGroupTrailer();
            this.sectionGroupTrailerLine2();
        }
    
        // Format trailer
        this.sectionFormatTrailer();
    
        // File trailer from PP Header/Trailer
        this.sectionFileTrailer();
    
        // Close file
        this.fileClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionDetail</Name>
				<Source><![CDATA[
    protected void sectionDetail()
    {
        this.fileWrite(this.txtDetail());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionDetailLine2</Name>
				<Source><![CDATA[
    private void sectionDetailLine2()
    {
        this.fileWrite(this.txtDetailLine2());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFileHeader</Name>
				<Source><![CDATA[
    // This code is the same for all reports
    private void sectionFileHeader()
    {
        ;
        select ValueString from mSKS_PP_FileDetail
            where mSKS_PP_FileDetail.FileNbr == mFileNumber &&
                  mSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Header;
    
        while(mSKS_PP_FileDetail)
        {
            this.fileWrite(this.txtFileHeaderTrailer());
    
            next mSKS_PP_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFileTrailer</Name>
				<Source><![CDATA[
    // This code is the same for all reports
    private void sectionFileTrailer()
    {
        ;
        select ValueString from mSKS_PP_FileDetail
            where mSKS_PP_FileDetail.FileNbr == mFileNumber &&
                  mSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Trailer;
    
        while(mSKS_PP_FileDetail)
        {
            this.fileWrite(this.txtFileHeaderTrailer());
    
            next mSKS_PP_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFormatHeader</Name>
				<Source><![CDATA[
    private void sectionFormatHeader()
    {
        this.fileWrite(this.txtFormatHeader());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFormatHeaderLine2</Name>
				<Source><![CDATA[
    private void sectionFormatHeaderLine2()
    {
        this.fileWrite(this.txtFormatHeaderLine2());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFormatTrailer</Name>
				<Source><![CDATA[
    private void sectionFormatTrailer()
    {
        this.fileWrite(this.txtFormatTrailer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionGroupHeader</Name>
				<Source><![CDATA[
    protected void sectionGroupHeader()
    {
        this.fileWrite(this.txtGroupHeader());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionGroupTrailer</Name>
				<Source><![CDATA[
    protected void sectionGroupTrailer()
    {
        this.fileWrite(this.txtGroupTrailer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionGroupTrailerLine2</Name>
				<Source><![CDATA[
    protected void sectionGroupTrailerLine2()
    {
        this.fileWrite(this.txtGroupTrailerLine2());
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        switch(this.setOrderBy())
        {
            case SKS_PP_OrderBy::BankAcct_ChkType_RefNbr:
                select * from mSKS_PP_FileDetail
                  order by mSKS_PP_FileDetail.BnkBankAcct, mSKS_PP_FileDetail.ChkType, mSKS_PP_FileDetail.ChkRefNbr
                  where mSKS_PP_FileDetail.FileNbr == mFileNumber &&
                        mSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Payments;
                break;
    
            case SKS_PP_OrderBy::RefNbr:
                select * from mSKS_PP_FileDetail
                  order by mSKS_PP_FileDetail.ChkRefNbr
                  where mSKS_PP_FileDetail.FileNbr == mFileNumber &&
                        mSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Payments;
                break;
    
            default:
                select * from mSKS_PP_FileDetail
                  order by mSKS_PP_FileDetail.BnkBankAcct, mSKS_PP_FileDetail.ChkRefNbr
                  where mSKS_PP_FileDetail.FileNbr == mFileNumber &&
                        mSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Payments;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileNbr</Name>
				<Source><![CDATA[
    public void setFileNbr(SKS_PP_FileNbr _fileNbr)
    {
        mFileNumber = _fileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override this method if you need to change the OrderBy of the checks.
    /// </summary>
    /// <remarks>
    /// The default is ChkRefNbr.
    /// </remarks>
    /// <returns>
    /// Returns the order by enum
    /// </returns>
    protected SKS_PP_OrderBy setOrderBy()
    {
        return SKS_PP_OrderBy::RefNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetailLine2</Name>
				<Source><![CDATA[
    protected str txtDetailLine2()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFileHeaderTrailer</Name>
				<Source><![CDATA[
    // This code is the same for all reports
    private str txtFileHeaderTrailer()
    {
        str result;
        ;
        result = SKS_PP_StringFormats::strFill(mSKS_PP_FileFormat.RecordLen, mSKS_PP_FileDetail.ValueString, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    protected str txtFormatHeader()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeaderLine2</Name>
				<Source><![CDATA[
    protected str txtFormatHeaderLine2()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatTrailer</Name>
				<Source><![CDATA[
    protected str txtFormatTrailer()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    protected str txtGroupHeader()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    protected str txtGroupTrailer()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailerLine2</Name>
				<Source><![CDATA[
    protected str txtGroupTrailerLine2()
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>