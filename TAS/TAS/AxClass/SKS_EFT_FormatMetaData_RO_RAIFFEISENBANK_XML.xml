<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_RO_RAIFFEISENBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_RO_RAIFFEISENBANK_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_RO_RAIFFEISENBANK_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20221208';
        dataContractVersion = '1.0';
        conFormatID = ['RO-RAIFFEISENBANK-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',1,'RO - Raiffeisen Bank - ISO20022',0,'','','RO-RAIFFEISENBANK-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,1,0,'RO-RAIFFEISENBANK-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('RO-RAIFFEISENBANK-XML'):
                paymSpecList = this.getPaymSpecsMetaData_RO_RAIFFEISENBANK_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_RO_RAIFFEISENBANK_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_RO_RAIFFEISENBANK_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'HUF book transfer',1,'HVE','','HVE','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'HCT transfer',1,'HCT','','HCT','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'SEPA credit transfer',1,'SCX','','SCX','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Internal FX transfer',1,'DBB','','DBB','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'FX transfer',1,'DEV','','DEV','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Real-time gross settlement VIBER',1,'VIB','','VIB','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Romanian Domestic Payments',1,'ROD','','ROD','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'SEPA Payment',1,'SPUNI','','SPUNI','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Romanian International Payments',1,'INTL','','INTL','TRADE PAY',0,'RO-RAIFFEISENBANK-XML',0,0,0,1,1,0,0,0,1,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);


        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('RO-RAIFFEISENBANK-XML'):
                notesList = this.getNotesMetaData_RO_RAIFFEISENBANK_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_RO_RAIFFEISENBANK_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_RO_RAIFFEISENBANK_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['RO-RAIFFEISENBANK-XML','HVE','-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab.:--Debtor Name is required and stored in the Name field.::-Cash and bank management > Bank Accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor bank accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab:--Creditor name is required and stored in the Name field of Beneficiary section.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab.:--Name and Address information will be included if set.:--SWIFT code will take precedence if both Bank ID and SWIFT code are set.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['RO-RAIFFEISENBANK-XML','VIB','-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab.:--Debtor Name is required and stored in the Name field.::-Cash and bank management > Bank Accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor bank accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab:--Creditor name is required and stored in the Name field of Beneficiary section.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab.:--Name and Address information will be included if set.:--SWIFT code will take precedence if both Bank ID and SWIFT code are set.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['RO-RAIFFEISENBANK-XML','HCT','-Review Code lookup fields:-EFT+ file formats > Payment specifications > Code lookup fields tab.:-Vendor ebanking details > Payment specifications > Additional fields.::-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab.:--Debtor Id is required stored in the ID field.::-Cash and bank management > Bank Accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor bank accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab:--Creditor name is required and stored in the Name field of Beneficiary section.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab.:--Name and Address information will be included if set.:--SWIFT code will take precedence if both Bank ID and SWIFT code are set.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['RO-RAIFFEISENBANK-XML','SCX','-Review Code lookup fields:-EFT+ file formats > Payment specifications > Code lookup fields tab.:-Vendor ebanking details > Payment specifications > Additional fields.::-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab.:--Debtor Id is required stored in the ID field.:--Debtor Name is required and stored in the Name field.::-Cash and bank management > Bank Accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor bank accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab:--Creditor name is required and stored in the Name field of Beneficiary section.:--Creditor country is stored in the Country/region field.:--First address line stored in the Address 1 field.:--Second address line stored in the Zip/postal code and City fields.:-Charge bearer is stored in the Charges field in the Other notes section::-Creditor Id is stored in the Tax exempt number field on the Vendor > Invoice and delivery tab.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab.:--Name and Address information will be included if set.:--SWIFT code will take precedence if both Bank ID and SWIFT code are set.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['RO-RAIFFEISENBANK-XML','DBB','-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab.:--Debtor Name is required and stored in the Name field.::-Cash and bank management > Bank Accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor bank accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab:--Creditor name is required and stored in the Name field of Beneficiary section.:-Charge bearer is stored in the Charges field in the Other notes section::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab.:--Name and Address information will be included if set.:--SWIFT code will take precedence if both Bank ID and SWIFT code are set.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['RO-RAIFFEISENBANK-XML','DEV','-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab.:--Debtor Name is required and stored in the Name field.::-Cash and bank management > Bank Accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor bank accounts:--Either IBAN or Bank account number is required. If both are exist IBAN will take the precedence.:--SWIFT code is required.::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab:--Creditor name is required and stored in the Name field of Beneficiary section.::-Creditor Agent name is stored in the Name field of Beneficiary bank  section.:--Creditor Agent country is stored in the Country/region field.:--Creditor Agent address is stored in the Address field.:-Charge bearer is stored in the Charges field in the Other notes section::-Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab.:--Name and Address information will be included if set.:--SWIFT code will take precedence if both Bank ID and SWIFT code are set.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('RO-RAIFFEISENBANK-XML'):
                validationsList = this.getValidationsMetaData_RO_RAIFFEISENBANK_XML();
                break;
        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_RO_RAIFFEISENBANK_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_RO_RAIFFEISENBANK_XML()
    {
        container   validationsList;
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,'0',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','Company id','TAS > Set up > Bank account > Select AP EFT+ > Company info(Fast tab) > Company id','Dbtr > Id > OrgId > Othr > Id','Company Id related to Bank','15','ACHCompanyID','','',0,'2',1,'10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > IBAN','PmtInf > DbtrAcct > IBAN','IBAN related to Bank',0,'IBAN','','','0',1,1,'24',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Address','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > AdrLine','Address related to Vendor bank','16','WBenBankAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/region','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > Ctry','Address related to Vendor bank','16','WBenBankCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,'0',1,'22',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','ROD','','Bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','0',1,'','24',0,0]);


        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,'0',1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > IBAN','PmtInf > DbtrAcct > IBAN','IBAN related to Bank',0,'IBAN','','','0',1,1,'27',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Address','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > AdrLine','Address related to Vendor bank','16','WBenBankAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/region','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > Ctry','Address related to Vendor bank','16','WBenBankCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > Nm','Name related to Vendor Bank','16','WBenBankName','','',0,1,1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,'0',1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','Bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','0',1,'','27',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','SPUNI','','SWIFT code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > SWIFT code','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','0','0',1,'11',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,'0',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > IBAN','PmtInf > DbtrAcct > IBAN','IBAN related to Bank',0,'IBAN','','','0',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Address','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > AdrLine','Address related to Vendor bank','16','WBenBankAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/region','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > Ctry','Address related to Vendor bank','16','WBenBankCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > Nm','Name related to Vendor Bank','16','WBenBankName','','',0,1,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,'0',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','0',1,'','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','SWIFT code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > SWIFT code','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','0','0',1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Vendor Zip/postal code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Zip/postal code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > PstCd','ZipCode related to vendor','16','WBeneZipPostal','','',1,1,'','16',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Vendor TownName','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > TwnNm','TownName related to vendor','16','WBeneCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Vendor State','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > CtrySubDvsn','State related to vendor','16','WBeneState','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['RO-RAIFFEISENBANK-XML','INTL','','Vendor Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','AU','5',1,1,'','35',0,0]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['RO-RAIFFEISENBANK-XML','OrgPrvId','Organization or Private Individual']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['RO-RAIFFEISENBANK-XML','Charges','Charges']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['RO-RAIFFEISENBANK-XML','OrgPrvId','Organization','OrgId']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['RO-RAIFFEISENBANK-XML','OrgPrvId','Private Individual','PrvtId']);

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['RO-RAIFFEISENBANK-XML','Charges','BorneByCreditor','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['RO-RAIFFEISENBANK-XML','Charges','BorneByDebtor','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['RO-RAIFFEISENBANK-XML','Charges','Service level','SLEV']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['RO-RAIFFEISENBANK-XML','Charges','Shared','SHAR']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('RO-RAIFFEISENBANK-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_RO_RAIFFEISENBANK_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_RO_RAIFFEISENBANK_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_RO_RAIFFEISENBANK_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['RO-RAIFFEISENBANK-XML','RO-RAIFFEISENBANK-XML','SCX','Purp','Purpose',1,'Purp','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > Purp > Prtry']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['RO-RAIFFEISENBANK-XML','RO-RAIFFEISENBANK-XML','SCX','CdtrId','Creditor Identification',0,'OrgPrvId','Organization',0,'','','PmtInf > CdtTrfTxInf > Cdtr > Id > (OrgId or PrvId)']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['RO-RAIFFEISENBANK-XML','RO-RAIFFEISENBANK-XML','HCT','CdtrId','Creditor Identification',0,'OrgPrvId','Organization',0,'','','PmtInf > CdtTrfTxInf > Cdtr > Id > (OrgId or PrvId)']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['RO-RAIFFEISENBANK-XML','RO-RAIFFEISENBANK-XML','SCX','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['RO-RAIFFEISENBANK-XML','RO-RAIFFEISENBANK-XML','DEV','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['RO-RAIFFEISENBANK-XML','RO-RAIFFEISENBANK-XML','DBB','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['RO-RAIFFEISENBANK-XML','RO-RAIFFEISENBANK-XML','ROD','CtgyPurp','Category Purpose',1,'CtgyPurp','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf >  CtgyPurp > Cd']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3
        
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['RO-RAIFFEISENBANK-XML','*','FormatLookup','*','*','']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('RO-RAIFFEISENBANK-XML'):
                if(gSKS_EFT_VendorPaym.WChargesIndic)
                {
                    this.updateVendorFields('Charges', gSKS_EFT_VendorPaym.WChargesIndic, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>