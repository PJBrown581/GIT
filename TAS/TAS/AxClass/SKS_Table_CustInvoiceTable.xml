<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_CustInvoiceTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_CustInvoiceTable
{
    
    
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustInvoiceTable_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    //[DataEventHandler(tableStr(CustInvoiceTable), DataEventType::Updating)]
    //public static void CustInvoiceTable_onUpdating(Common sender, DataEventArgs e)
    //{
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(CustInvoiceTable), DataEventType::Updated)]
    public static void CustInvoiceTable_onUpdated(Common sender, DataEventArgs e)
    {
        CustInvoiceTable            lCustInvoiceTable;
        CustInvoiceTable            origCustInvoiceTable;
        CustInvoiceJour             CustInvoiceJour;
        CustInvoiceTable            tempCustInvoiceTable;
        SKS_LB_InvoiceMatch         lInvoiceMatch;
        CustTransOpen               lCustTransOpen;
        CustTrans                   lCustTrans;
        recordInsertList            ril;
        SKS_PP_Setup                setup;
        container                   companies = CustVendOpenTransManager::findSharedServiceCompanies(curext());

        //origCustInvoiceTable = sender.orig();
        lCustInvoiceTable = sender;
        ttsbegin;

        select firstonly crosscompany:companies ModLockbox, ModBR, Recid from setup where setup.ModLockbox == NoYes::Yes || setup.ModBR == NoYes::Yes;

        if(setup)
        {

            select * from lCustTrans join CustInvoiceJour
                where CustInvoiceJour.InvoiceID == lCustTrans.Invoice
                    && CustInvoiceJour.InvoiceAccount == lCustTrans.AccountNum
                    && CustInvoiceJour.InvoiceDate == lCustTrans.TransDate
                    && lCustInvoiceTable.InvoiceId == CustInvoiceJour.InvoiceId
                    && lCustInvoiceTable.InvoiceDate == CustInvoiceJour.InvoiceDate
                    && lCustInvoiceTable.numberSequenceGroup == CustInvoiceJour.numberSequenceGroup;

            select forupdate lInvoiceMatch where lInvoiceMatch.CustTransRecId == lCustTrans.recid
                && lInvoiceMatch.Direction == sks_lb_matchtypedirection::Forward
                && lInvoicematch.MatchType == sks_lb_matchtype::ExternalID;

            if(lInvoiceMatch)
            {
                if(lCustInvoiceTable.ExternalInvoiceId == '')
                {
                    delete_from lInvoiceMatch where lInvoiceMatch.CustTransRecId == lCustTrans.recid && lInvoicematch.MatchType == sks_lb_matchtype::ExternalID;
                }
                else
                {
                    while select forupdate lInvoiceMatch where lInvoiceMatch.CustTransRecId == lCustTrans.recid
                        && lInvoiceMatch.Direction == sks_lb_matchtypedirection::Forward
                        && lInvoicematch.MatchType == sks_lb_matchtype::ExternalID
                    {
                        lInvoiceMatch.MatchValue = lCustInvoiceTable.ExternalInvoiceId;
                        lInvoiceMatch.update();
                    }

                    while select forupdate lInvoiceMatch where lInvoiceMatch.CustTransRecId == lCustTrans.recid
                        && lInvoiceMatch.Direction == sks_lb_matchtypedirection::Reverse
                        && lInvoicematch.MatchType == sks_lb_matchtype::ExternalID
                    {
                        lInvoiceMatch.MatchValue = SKS_PP_Stringformats::reverse_String(lCustInvoiceTable.ExternalInvoiceId);
                        lInvoiceMatch.update();
                    }
                }
            }
            else if(lCustTrans)
            {
                ril = new RecordInsertList(lInvoiceMatch.TableId);
                while select lCustTransOpen where lCustTransOpen.RefRecId == lCustTrans.recid
                {
                    lInvoiceMatch.MatchType = SKS_LB_MatchType::ExternalID;
                    lInvoiceMatch.Direction  = SKS_LB_MatchTypeDirection::Reverse;
                    lInvoiceMatch.MatchValue = SKS_PP_Stringformats::reverse_String(lCustInvoiceTable.ExternalInvoiceId);
                    lInvoiceMatch.CustTransRecId = lCustTrans.RecId;
                    lInvoiceMatch.CustTransOpenRecId = lCustTransOpen.RecId;
                    lInvoiceMatch.CustAccount = lCustTransOpen.AccountNum;
                    lInvoiceMatch.DueDate = lCustTransOpen.DueDate;
                    lInvoiceMatch.CTOAmountCur = lCustTransOpen.AmountCur;
                    ril.add(lInvoiceMatch);

                    // Add the forward search information so the lookup can be a Inner Join VS an Outer join
                    lInvoiceMatch.MatchType = SKS_LB_MatchType::ExternalID;
                    lInvoiceMatch.Direction  = SKS_LB_MatchTypeDirection::Forward;
                    lInvoiceMatch.MatchValue = lCustInvoiceTable.ExternalInvoiceId;
                    lInvoiceMatch.CustTransRecId = lCustInvoiceTable.RecId;
                    lInvoiceMatch.CustTransOpenRecId = lCustTransOpen.RecId;
                    lInvoiceMatch.CustAccount = lCustTransOpen.AccountNum;
                    lInvoiceMatch.DueDate = lCustTransOpen.DueDate;
                    lInvoiceMatch.CTOAmountCur = lCustTransOpen.AmountCur;
                    ril.add(lInvoiceMatch);
                }
                ril.insertDatabase();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>