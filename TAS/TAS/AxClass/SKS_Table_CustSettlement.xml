<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_CustSettlement</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_CustSettlement
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EH_insert_post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(CustSettlement), tableMethodStr(CustSettlement, insert))]
    public server static void EH_insert_post(XppPrePostArgs _args)
    {
        CustSettlement      lCustSettlement;
        CustSettlement      tmpCustSettlement;
        SKS_EPY_Queue       sks_epy_queue;
        sks_EPY_Queue       newSKS_EPY_Queue;
        SKS_EPY_QueueData   sks_epy_queuedata;
        sks_epy_queuedata   newSKS_epy_queuedata;
        CustTrans           lCustTrans;
        CustTable           lCustTable;
        LedgerJournalTrans  lLedgerJournalTrans;
        DirPartyTable       dirPartyTable;
        boolean             queuefound;
        ;

        queuefound = false;
        lCustSettlement = _args.getThis();

        Select lCustTable where lCustTable.AccountNum == lCustSettlement.AccountNum
            join Name from dirPartyTable where dirPartyTable.RecId == lCustTable.Party;
        if(lCustTable)
        {
            //IF it was not already sent to ePay, IF not an invoice for an ePay Customer, return now.
            if(!SKS_Table_CustTable::isEpayCustomer(lCustTable))
            {
                return;
            }
            else
            {
                if(lCustSettlement.SettleAmountCur >= 0)
                {
                    select firstOnly lCustTrans where lCustTrans.RecId == lCustSettlement.TransRecId
                                        && lCustTrans.TransType == LedgerTransType::Payment;
                }
                else
                {
                    select firstOnly lCustTrans where lCustTrans.RecId == lCustSettlement.TransRecId;
                }

                if(lCustTrans)
                {

                    select firstOnly tmpCustSettlement where tmpCustSettlement.TransRecId == lCustSettlement.TransRecId
                            join sks_epy_queuedata
                                where sks_epy_queuedata.TableRecId == tmpCustSettlement.SettlementGroup
                                    && sks_epy_queuedata.SourceTable == SKS_EPY_Table::CustSettlement
                                    join RecId, Entity, Status from sks_epy_queue
                                        where sks_epy_queue.RecId == sks_epy_queuedata.QueueRecId
                                            && sks_epy_queue.Entity == SKS_EPY_Entity::Settlement
                                            && sks_epy_queue.Status == SKS_EPY_Status::New;

                    if(!tmpCustSettlement)
                    {
                        select firstOnly RecId, SKS_EPY_PmtNbr, invoice, AmountCurCredit, AmountCurDebit from lLedgerJournalTrans where lLedgerJournalTrans.Voucher == lCustTrans.Voucher && lLedgerJournalTrans.LedgerDimension == LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(lCustTrans.AccountNum, LedgerJournalACType::Cust);;
                        if(lLedgerJournalTrans.SKS_EPY_PmtNbr != '')
                        {
                            ttsBegin;
                            newSKS_EPY_Queue.PaymNum = lLedgerJournalTrans.SKS_EPY_PmtNbr;
                            newSKS_EPY_Queue.Entity = SKS_EPY_Entity::Settlement;
                            select * from lCustTable join dirPartyTable where lcustTable.Party == dirPartyTable.recid
                            && lcustTable.accountNum == lCustSettlement.AccountNum;
                            newSKS_EPY_Queue.AccountName = dirPartyTable.Name;
                            newSKS_EPY_Queue.AccountNum = lCustSettlement.AccountNum;
                            newSKS_EPY_Queue.Action = SKS_EPY_Action::SendToEpay;
                            newSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Created;

                            if(lLedgerJournalTrans.recid != 0)
                            {
                                newSKS_EPY_Queue.PaymLineRecID = lLedgerjournalTrans.RecId;
                            }
                            newSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustSettlement;
                            newSKS_EPY_Queue.Status = SKS_EPY_Status::New;
                            newSKS_EPY_Queue.Amount = lLedgerJournalTrans.AmountCurCredit - lLedgerJournalTrans.AmountCurDebit;
                            newSKS_EPY_Queue.CurrencyCode = lLedgerJournalTrans.CurrencyCode;
                            newSKS_EPY_Queue.insert();

                            newSKS_epy_queuedata.QueueRecId = newSKS_EPY_Queue.RecId;
                            newSKS_epy_queuedata.SourceTable = SKS_EPY_Table::CustSettlement;

                            if(lCustSettlement.SettlementGroup == 0)
                            {
                                newSKS_epy_queuedata.TableRecId = lCustSettlement.recid;
                            }
                            else
                            {
                                newSKS_epy_queuedata.TableRecId = lCustSettlement.settlementgroup;
                            }
                            newSKS_epy_queuedata.insert();

                            ttsCommit;
                        }
                    }
                    else
                    {
                        ttsBegin;
                        newSKS_epy_queuedata.QueueRecId = sks_epy_queue.RecId;
                        newSKS_epy_queuedata.SourceTable = SKS_EPY_Table::CustSettlement;
                        if(lCustSettlement.SettlementGroup == 0)
                        {
                            newSKS_epy_queuedata.TableRecId = lCustSettlement.recid;
                        }
                        else
                        {
                            newSKS_epy_queuedata.TableRecId = lCustSettlement.settlementgroup;
                        }
                        newSKS_epy_queuedata.insert();
                        ttsCommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_insert_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(CustSettlement), tableMethodStr(CustSettlement, insert))]
    public server static void EH_insert_pre(XppPrePostArgs _args)
    {
        CustSettlement  lCustSettlement;
        CustTransOpen   lCustTransOpen;
        CustTrans       lCustTrans;
        ;

        lCustSettlement = _args.getThis();

        // Get the custTransOpen buffer for the transaction which is going to be settled.
        select RefRecId, RecId from lCustTransOpen
            where lCustTransOpen.RefRecId == lCustSettlement.TransRecId &&
            lCustTransOpen.DueDate == lCustSettlement.DueDate
                join RecId from lCustTrans
                where lCustTrans.RecId == lCustTransOpen.RefRecId;

        lCustSettlement.SKS_EPY_TransOpenRecId = lCustTransOpen.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>