<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_FixOneTimeCustCreditCardJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Job (runable class) to fix a single one-time customer invalid credit card.
/// </summary>
class SKS_CC_FixOneTimeCustCreditCardJob
{        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to fix a record from <b>CreditCardCust</b> table for a one-time customer
    /// if the fields were not correctly populated during PayLink/WalletLink import.
    /// This is to avoid issues with one-time customer credit cards.
    /// NOTE: This job should only be executed if an issue was encountered
    /// and SKG personnel has instructed the client to execute the job.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();
        if (!sKS_PP_Setup || sKS_PP_Setup.ModCC == NoYes::No)
        {
            return;
        }

        Dialog dialog = new Dialog("@SKS:SKGCCSetOneTimeCustCreditCardValues");

        dialog.addText("@SKS:SKGCCOneTimeCustJobMsg", 500);
        dialog.addText("@SKS:SKGCCOneTimeCustInstructionMsg", 500);

        str fieldLabelForCtrl = "@SKS:SKGCCRecIdOfRecordToFix";
        DialogField dfRecIdToFix = dialog.addField(ExtendedTypeStr(RefRecId), fieldLabelForCtrl);
        dfRecIdToFix.lookupButton(FormLookupButton::Never);
        DialogField dfSalesId = dialog.addField(ExtendedTypeStr(SalesId));
        dfSalesId.lookupButton(FormLookupButton::Always);

        dialog.run();

        if (!dialog.closedOk())
        {
            return;
        }

        RefRecId recIdToFix = dfRecIdToFix.value();
        if (!recIdToFix)
        {
            throw error(strFmt("@SYS26332", fieldLabelForCtrl));
        }

        SalesId salesId = dfSalesId.value();
        if (!salesId)
        {
            throw error(strFmt("@SYS26332", fieldId2PName(tableNum(SalesTable), fieldNum(SalesTable, SalesId))));
        }

        SalesTable salesTable = SalesTable::find(salesId);
        if (!salesTable)
        {
            throw error(strFmt("@SKS:SKGCCUnableToFindSalesOrderWithSalesId1", salesId));
        }

        CreditCardCust creditCardCust;        

        select firstonly1 creditCardCust
            where creditCardCust.RecId == recIdToFix;

        if (!creditCardCust)
        {
            throw error(strFmt("@SKS:SKGCCUnableToFindCustCreditCardWithRecId1", recIdToFix));
        }

        CustTable custTable = CustTable::find(creditCardCust.CustAccount);
        if (!custTable)
        {
            throw error(strFmt("@SKS:SKGCCUnableToFindCustRecwithCCRecId1", recIdToFix));
        }

        if (custTable.OneTimeCustomer == NoYes::No)
        {
            throw error(strFmt("@SKS:SKGCCCust1NotDesignatedAsOneTimeCust", custTable.AccountNum, recIdToFix));
        }

        if (salesTable.InvoiceAccount != custTable.AccountNum)
        {
            throw error(strFmt("@SKS:SKGCCCust1DoesNotMatchInvoiceAccount2", custTable.AccountNum, salesTable.InvoiceAccount, salesTable.SalesId));
        }
        
        if (creditCardCust.SKS_CC_OneTimeCustRefRecId && creditCardCust.SKS_CC_OneTimeCustRefTableId)
        {
            str confMsg = strFmt("@SKS:SKGCCCustCreditCardHasOneTimeCustFieldsSet", recIdToFix);
            if (Box::yesNo(confMsg, DialogButton::No) == DialogButton::No)
            {
                return;
            }
        }

        ttsbegin;
        creditCardCust.selectForUpdate(true);
        creditCardCust.SKS_CC_OneTimeCustRefTableId = salesTable.TableId;
        creditCardCust.SKS_CC_OneTimeCustRefRecId = salesTable.RecId;
        creditCardCust.doUpdate();
        ttscommit;        

        info(strFmt("@SKS:SKGCCOneTimeCustCreditCardHasBeenFixed", recIdToFix));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>