<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_DANSKEBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_EU_DANSKEBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_EU_DANSKEBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230505')
    #define.ACCTRFR('ACC-TRFR')
    #define.ACCTRFS('ACC-TRFS')
    #define.XPSTRFR('XPS-TRFR')
    #define.XPSTRFS('XPS-TRFS')
    #define.MT101INTC('MT101-INTC')
    #define.MT101TRF('MT101-TRF')
    #define.MT101URGP('MT101-URGP')
    #define.FTF('FTF')
    #define.FTFURGP('FTF-URGP')
    #define.FTFINTC('FTF-INTC')
    #define.FTFSEPA('FTF-SEPA')
    #define.DAT('DAT')
    #define.DATSD('DAT-SDCL')
    #define.DATXP('DAT-URGP')
    #define.FIK71('FIK-71')
    #define.FIK73('FIK-73')
    #define.FIK75('FIK-75')
    #define.GIRO04('GIRO-04')
    #define.WIRE_DOM('WIRE-DOM')
    #define.ACCTRFSA('ACC-TRFSA')
    #define.ACCTRFLA('ACC-TRFLA')
    #define.ACCTRFIN('ACC-TRFIN')
    #define.ACTRFKID('ACT-RFKID')
    #define.GIRO01('GIRO-01')
    #define.GIRO15('GIRO-15')
    #define.SALARY('SALARY')                //SKG#VSTS:13629
    #define.BPTR('BP-TR')
    #define.BPOR('BP-OR')
    #define.PPTR('PP-TR')
    #define.PPOR('PP-OR')
    #define.ACCTWDS('ACCT-WDS')
    #define.ACCTWDR('ACCT-WDR')
    #define.ACCTWOD('ACCT-WOD')
    #define.ACCTZUS('ACCT-ZUS')
    #define.EXPWD('EXP-WD')
    #define.EXPWOD('EXP-WOD')

    #define.ACCTSADV('ACCT-SADV')          //SKG#VSTS:11563
    #define.ACCTLADV('ACCT-LADV')          //SKG#VSTS:11563

    #define.CHK('CHK')                     //SKG#VSTS:13629, 13630

    #define.FST('FST')                    //SKG#VSTS:13682
    #define.CHAPS('CHAPS')                //SKG#VSTS:13682
    #define.INTERNL('INTERNL')            //SKG#VSTS:13682
    #define.INDRT_BACS('INDRT-BACS')      //SKG#VSTS:13682

    #define.CPR('CPR')                //SKS#DevOps:15033
    #define.CVR('CVR')                //SKS#DevOps:15033

    #define.IATEP('IAT-EP')                  //SKS#DevOps:16256
    #define.IATDOM('IAT-DOM')                //SKS#DevOps:16256
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncoding</Name>
				<Source><![CDATA[
    protected str getEncoding()
    {
        return 'ISO-8859-1';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 28591;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalPaymentNotes</Name>
				<Source><![CDATA[
    private str getJournalPaymentNotes()
    {
        str value = '';
        LedgerJournalTrans lLedgerJournalTrans;
    
        select PaymentNotes from lLedgerJournalTrans where
            lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
        
        if(lLedgerJournalTrans.PaymentNotes != '')
        {
            value = strReplace(lLedgerJournalTrans.PaymentNotes, '\r', ' ');
        }
    
        return this.CharacterReplacement(value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeId;
        XmlElement  nodeOrgId;
        XmlElement  nodeOther;
        XmlElement  nodeSchmeNm;
        str         InitiatingPartyId, value;
        boolean     printInitgPty;

        InitiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #CHK:
                        printInitgPty   =   true;
                        value           =   'BANK';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':        //SKS#DevOps:16657
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #WIRE_DOM:
                    case #GIRO01:
                    case #GIRO15:                        
                    case #CPR:              //SKS#DevOps:15033
                    case #CVR:              //SKS#DevOps:15033
                    case #FIK71://DevOps20762
                    case #FIK73:
                    case #FIK75:
                        printInitgPty   =   true;
                        value           =   'BANK';     //SKS#DevOps:17453
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #CHK:
                        printInitgPty   =   true;
                        value           =   'BANK';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACTRFKID:
                    case #ACCTRFIN:
                        printInitgPty   =   true;
                        value           =   'CUST';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTWDR:
                    case #ACCTWDS:
                    case #ACCTWOD:
                    case #ACCTZUS:
                    case #EXPWD:
                    case #EXPWOD:
                        printInitgPty =     true;
                        value           =   'BANK';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #BPTR:
                    case #BPOR:
                    case #PPTR:
                    case #PPOR:
                    case #ACCTSADV:
                    case #ACCTLADV:
                        printInitgPty   =   true;
                        value           =   'BANK';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FST:
                    case #CHAPS:
                    case #INTERNL:
                    case #INDRT_BACS:
                        printInitgPty   =   true;
                        value           =   'BANK';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-IE':      //SKS_DevOps_16256
                printInitgPty   =   true;
                value           =   'BANK';
                break;
        }
        if(printInitgPty && InitiatingPartyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
            
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
            
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', InitiatingPartyId, 35);

            //                          9.1.17 : SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));

            //                          9.1.18 : Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                      Id
        //                      SchmeNm
        //                          Prtry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeCdtrAcct;
        XmlElement  nodeCdtrAcctId;
        XmlElement  nodeOthr;
        XmlElement  nodeSchmeNm;
        int         len;
        str         iban, acctNum, cd, prtry;
        boolean     printCdtrAcct = true;

        iban    = mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum = mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHK:
                        printCdtrAcct = false;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO04:
                    case #GIRO01:
                    case #GIRO15:
                        iban          = '';
                        prtry         = 'OCR';
                        len           = 8;
                        break;
                    case #WIRE_DOM:
                        iban          = '';
                        len           = 34;
                        break;
                    case #DAT:
                    case #DATXP:
                    case #DATSD:
                        prtry         = 'BBAN';
                        acctNum       = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;
                        break;
                    case #CPR:          //SKS#DevOps:15033
                        iban          = '';
                        prtry         = 'NKC';
                        len           = 10;
                        break;
                    case #CVR:          //SKS#DevOps:15033, 15357
                        iban          = '';
                        prtry         = 'NKV';
                        len           = 8;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHK:
                        printCdtrAcct = false;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACTRFKID:
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACCTRFIN:
                        acctNum       = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;
                        prtry         = 'BBAN';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTZUS:
                        iban          = '';
                        cd            = 'BBAN';
                        len           = 34;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #PPTR:
                    case #PPOR:
                        iban          = '';
                        cd            = 'BBAN';
                        len           = 8;
                        break;
                    case #BPTR:
                    case #BPOR:
                        iban          = '';
                        Prtry         = 'BGNR';
                        len           = 8;
                        break;
                    case #ACCTSADV:                   //SKG#VSTS:11563
                    case #ACCTLADV:                   //SKG#VSTS:11563
                    case #SALARY:
                        iban          = '';
                        cd            = 'BBAN';
                        len           = 34;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FST:
                    case #CHAPS:
                    case #INTERNL:
                    case #INDRT_BACS:
                        cd            = 'BBAN';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-IE':    //SKS_DevOps_16256
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #IATDOM:
                    case #IATEP:
                        cd = 'BBAN';

                        acctNum = subStr(mSKS_EFT_FileDetail.DepBankTransit,1,6) + subStr(acctNum,1,8);  //SKS_DevOps_16474
                        if(acctNum)
                        {
                            iban = '';
                        }
                        break;
                }
                break;

        }

        if(printCdtrAcct)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));

            //                      Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //                          Othr
                nodeOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, len);

                if(cd)
                {
                    //                      SchmeNm
                    nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

                    //                          Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', cd);
                }
                else if(prtry)
                {
                    //                      SchmeNm
                    nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

                    //                          Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', prtry);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        boolean    cdtrAgtNm;
        boolean    cdtrAgtPstlAddr;
        boolean    cdtrAgtswiftrtg;
        boolean    printCdtrAgt =   true;
        str        swift, rtg;

        swift   =   mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =   mSKS_EFT_FileDetail.DepBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                        cdtrAgtPstlAddr = true;
                        break;
                    case #CHK:
                        printCdtrAgt = false;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #WIRE_DOM:
                        if(mSKS_EFT_FileDetail.DepBankTransit)
                        {
                            swift = '';
                        }
                        else if(mSKS_EFT_FileDetail.DepSwiftNo)
                        {
                            rtg = '';
                        }
                        cdtrAgtNm    = true;
                        cdtrAgtPstlAddr = true;
                        break;
                    case #GIRO01:
                        cdtrAgtNm    = true;
                        cdtrAgtPstlAddr = true;
                        break;
                    case #CPR:          //SKS#DevOps:15033
                    case #CVR:          //SKS#DevOps:15033
                        cdtrAgtPstlAddr = true;
                        break;
                    default:
                        cdtrAgtswiftrtg    = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-FI':
            case 'EU-DANSKEBANK-XML-INT':
                cdtrAgtswiftrtg     = true;
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                        cdtrAgtPstlAddr = true;
                        break;
                    case #CHK:
                        printCdtrAgt = false;
                        break;
                }
                break;            
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTF:
                    case #FTFINTC:
                    case #FTFSEPA:
                    case #FTFURGP:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                        cdtrAgtswiftrtg    = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTWDR:
                    case #ACCTWOD:
                    case #ACCTZUS:
                    case #EXPWD:
                    case #EXPWOD:
                        if(mSKS_EFT_FileDetail.DepBankTransit)
                        {
                            swift = '';
                        }
                        else if(mSKS_EFT_FileDetail.DepSwiftNo)
                        {
                            rtg = '';
                        }
                        cdtrAgtNm    = true;
                        cdtrAgtPstlAddr = true;
                        break;
                    case #FTF:
                    case #FTFINTC:
                    case #FTFSEPA:
                    case #FTFURGP:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                        cdtrAgtswiftrtg    = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTF:
                    case #FTFINTC:
                    case #FTFSEPA:
                    case #FTFURGP:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                        cdtrAgtswiftrtg    = true;
                        break;
                    case #SALARY:
                    case #BPTR:
                    case #BPOR:
                    case #PPTR:
                    case #PPOR:
                    case #ACCTSADV:
                    case #ACCTLADV:
                        cdtrAgtPstlAddr = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FST:
                    case #CHAPS:
                    case #INTERNL:
                    case #INDRT_BACS:
                        cdtrAgtPstlAddr = true;
                        break;
                    //SKS_VSTS_13834 -->
                    case #FTF:
                    case #FTFINTC:
                    case #FTFSEPA:
                    case #FTFURGP:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                        cdtrAgtswiftrtg    = true;
                        break;
                    //SKS_VSTS_13834 <--
                }
                break;
            case 'EU-DANSKEBANK-XML-IE':          //SKS_DevOps_16256
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #IATDOM:
                    case #IATEP:
                        cdtrAgtPstlAddr = true;
                        break;
                }
                break;
        }

        if(printCdtrAgt)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(cdtrAgtswiftrtg)
            {
                if(swift)
                {
                    //                  BIC
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
                }
                if(rtg)
                {
                    //                  ClrSysMmbId
                    this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
                }
            }
            else if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
            }
            else if(rtg)
            {
                //                  ClrSysMmbId
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }
            if(cdtrAgtNm)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 140, false);
            }
            if(cdtrAgtPstlAddr)
            {
                //                  PstlAdr
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, '', '', '');
            }
            else
            {
                //                  PstlAdr
                this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
       //      2.77: CdtrAgent-
        //          ClrSysMmbId
        //              ClrSysId
        //                  Cd
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str value;

        value = SKS_EFT_Format::getCodelookupvalue('ClrSysIdCd', mSKS_EFT_FileDetail.RecId);

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTWDR:
                    case #ACCTWDS:
                    case #ACCTWOD:
                    case #ACCTZUS:
                    case #EXPWD:
                    case #EXPWOD:
                        value = 'PLKNR';
                        break;
                }
                break;
        }

        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            //          ClrSysMmbId
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            if(value != '')
            {
                //              ClrSysId
                nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
    
                //                  Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', value, 0);
            }
            //          MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //              2.88: Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePurp;
        str value;
        int len;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DAT:
                    case #DATXP:
                    case #DATSD:
                    case #CPR:          //SKS#DevOps:15033
                    case #CVR:          //SKS#DevOps:15033
                        value = this.getJournalPaymentNotes();
                        len   = 20;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACCTRFIN:
                        value = this.getJournalPaymentNotes();
                        len   = 20;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BPTR:
                    case #PPTR:
                    case #ACCTSADV:
                        value = this.getJournalPaymentNotes();
                        len   = 20;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FST:
                    case #INTERNL:
                    case #INDRT_BACS:
                        value = this.getJournalPaymentNotes();
                        len   = 18;
                        break;
                }
                break;
        }
        if(value != '')
        {
            //          2.86: Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
    
            //              2.88: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Prtry', value, len);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO01:
                    case #GIRO15:
                    case #GIRO04:
                    case #WIRE_DOM:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFR:
                    case #ACCTRFS:
                    case #XPSTRFR:
                    case #XPSTRFS:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACTRFKID:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTSADV:                           //SKG#VSTS:11563
                    case #ACCTLADV:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);//SKS_VSTS_14336
                        break;
                    case #BPOR:
                    case #PPOR:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FST:
                    case #INTERNL:
                    case #INDRT_BACS:
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            default:
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_CdtrRefInf</Name>
				<Source><![CDATA[
    private void node_CdtTrfTxInf_RmtInf_CdtrRefInf(XmlElement _nodeStrd, PaymId  _paymId = '', VendInvoiceId invoice = '')
    {
        //------------------------------------------------------------------------------------------------------
        //                  2.120: CdtrRefInf
        //                      2.121: Tp
        //                          2.122: CdOrPrtry
        //                              2.123: Cd
        //                      2.126: Ref
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrRefInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        int len;
        str value, issr;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #WIRE_DOM:
                        len = 35;
                        value = _paymId;
                        break;
                    case #GIRO04:
                        value = '04/' + subStr(_paymId, 1, 16);
                        break;
                    case #FIK71:
                        if(subStr(_paymId, 1, 4) == '>71<')
                        {
                            value = '71/' + SKS_PP_StringFormats::strFill(15, subStr(_paymId, 5, 15), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                        }
                        else
                        {
                            value = '71/' + subStr(_paymId, 1, 15);
                        }
                        break;
                    case #FIK75:
                        if(subStr(_paymId, 1, 4) == '>75<')
                        {
                            value = '75/' + SKS_PP_StringFormats::strFill(16, subStr(_paymId, 5, 16), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                        }
                        else
                        {
                            value = '75/' + subStr(_paymId, 1, 16);
                        }
                        break;
                    case #FIK73:
                        value = '73/';
                        break;
                    case #GIRO01:
                        value = '01/';
                        break;
                    case #GIRO15:
                        value = '15/'+subStr(_paymId, 1, 16);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFR:
                    case #XPSTRFR:
                        len = 26;
                        if(_paymId)
                        {
                            value = _paymId;
                        }
                        else
                        {
                            value = invoice;
                        }
                        if(subStr(value,1,2) == 'RF')
                        {
                            issr = 'ISO';
                        }
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACTRFKID:
                        len = 35;
                        value = _paymId;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BPOR:
                    case #PPOR:
                        value = subStr(_paymId, 1, 35);
                        break;
                }
                break;
        }

        if(value)
        {
            //                  2.120: CdtrRefInf
            nodeCdtrRefInf = _nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
        
            //                      2.121: Tp
            nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
        
            //                          2.122: CdOrPrtry
            nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
        
            //                              2.123: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');
        
            if(issr)
            {
                //                                  Issr
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTp, 'Issr',issr);
            }

            //                      2.126: Ref
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', value, len);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    private void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement _nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.101: RfrdDocInf
        //                  2.102: Tp
        //                      2.103: CdOrPrtry
        //                          2.104: Cd
        //                  2.107: Number
        //                  2.108: RltdDt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        XmlElement nodeRfrdDocAmt;
        boolean  printNumber = true;
        boolean  printInvDate = true;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case  #WIRE_DOM:
                        printInvDate = false;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case  #ACCTRFR:
                        printNumber = false;
                        printInvDate   = false;
                        break;
                }
                break;
        }
    
        //              2.101: RfrdDocInf
        nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
        //                  2.102: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
        //                      2.103: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
        //                          2.104: Cd
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
        }
        
        if(printNumber)
        {
            //                  2.107: Number
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', _invSKS_EFT_FileDetail.InvoiceNumber);
        }
        
        if(printInvDate)
        {
            //                  2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }

        //                  2.109 RfrdDocAmt
        nodeRfrdDocAmt = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
    
        this.node_RmtInf_Amt(nodeRfrdDocAmt, _invSKS_EFT_FileDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.100: Strd
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        Boolean firstRec = true;

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #GIRO01)
                {
                    //              2.99: Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.getInvoiceNbrs(), 945);
                }
                firstRec = false;
            }

            //              2.100: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

            switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
            {
                case 'EU-DANSKEBANK-XML-DK':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #WIRE_DOM:
                            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                            this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail.PaymId);
                            break;
                        case #GIRO01:                        
                        case #FIK71:
                        case #FIK75:
                        case #FIK73:
                        case #GIRO15:
                            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                            this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail.PaymId);
                            break; 
                        case #GIRO04:               //SKS#DevOps:15828
                            this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail.PaymId);
                            break;
                    }
                    break;
                case 'EU-DANSKEBANK-XML-FI':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #ACCTRFS:
                            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                            break;
                        case #XPSTRFR:
                            this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail.PaymId, invSKS_EFT_FileDetail.InvoiceNumber);
                            break;
                        case #XPSTRFS:
                            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                            break;
                        case #ACCTRFR:
                            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                            this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail.PaymId, invSKS_EFT_FileDetail.InvoiceNumber);
                            break;
                    }
                    break;
                case 'EU-DANSKEBANK-XML-NO':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #ACTRFKID:
                            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                            this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail.PaymId);
                            break;
                    }
                    break;
                case 'EU-DANSKEBANK-XML-SE':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #BPOR:
                        case #PPOR:
                            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
                            this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(nodeStrd, invSKS_EFT_FileDetail.PaymId);
                            break;
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeRmtInf;
        str         invNumbers, paymentNotes;
        boolean     printUstrd = true;
        paymentNotes = this.getJournalPaymentNotes();   //SKS#DevOps:15381
        invNumbers = this.getInvoiceNbrs();
        boolean     printUst;
        AmountMST   amt;        
        SKS_EFT_FileDetail sks_EFT_FileDetail;
        str                paymentDetails,description;
        SplitPaymentMandatoryRule_PL splitPaymentMandatoryRule_PL;
        TaxTrans taxTrans;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-PL':

                select firstonly splitPaymentMandatoryRule_PL
                    where splitPaymentMandatoryRule_PL.PaymMode == mSKS_EFT_FileDetail.PaymMode && splitPaymentMandatoryRule_PL.Specification == mSKS_EFT_FileDetail.PaymSpec; //DevOps 18774
                   
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTWOD:
                    case #EXPWOD:
                    case #ACCTWDS:
                    case #ACCTWDR:
                    case #ACCTZUS:
                    case #EXPWD:
                        if(splitPaymentMandatoryRule_PL)
                        {
                            printUstrd = false;
                            printUst   =true;
                        }
                        else
                        {
                            printUstrd = true;
                            printUst   = false;
                        }
                        break;
                }
                break;
        }
        
        if(printUstrd && (invNumbers || paymentNotes))
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            if(invNumbers)
            {
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);
            }
            else if(paymentNotes)
            {
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', paymentNotes, 140);
            }
        }
        else if(printUst)
        {
            VendTrans vendTrans;

            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            while select InvoiceNumber, AccountNum, InvoiceDate, InvoiceCompany, VendTransRecId from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                changecompany(sks_EFT_FileDetail.InvoiceCompany)//DevOps20811
                {
                    select firstonly TaxAmountCur from taxTrans//DevOps20993
                    join vendTrans where
                            taxTrans.TransDate == vendTrans.TransDate &&
                            taxTrans.Voucher == vendTrans.Voucher &&
                            vendTrans.RecId == sks_EFT_FileDetail.VendTransRecId;
                }
                
                amt += taxTrans.TaxAmountCur;
            }
            description = LedgerJournalTrans::findRecId(mSKS_EFT_FileDetail.PaymentLineRecId, false).PaymentNotes;

            paymentDetails = '/VAT/'+num2str(amt,0,2,2,0) + '/IDC/'+mSKS_EFT_FileDetail.VATNum + '/INV/'+this.getInvoiceNbrs() + '/TXT/'+description;

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', paymentDetails, 140);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.3: BtchBookg
        //------------------------------------------------------------------------------------------------------
        str value, Btchbkg;

        Btchbkg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-DK':
            case 'EU-DANSKEBANK-XML-PL':
                if(strUpr(Btchbkg) == 'N')
                {
                    value = 'false';
                }
                else
                {
                    value = 'true';
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACTRFKID:
                    case #ACCTRFIN:
                        if(strUpr(Btchbkg) == 'N')
                        {
                            value = 'false';
                        }
                        else
                        {
                            value = 'true';
                        }
                        break;
                    default:
                        value = 'false';
                        break;
                }
                break;            
            case 'EU-DANSKEBANK-XML-SE':
                if(strUpr(Btchbkg) == 'N')
                {
                    value = 'false';
                }
                else
                {
                    value = 'true';
                }
                break;
            case 'EU-DANSKEBANK-XML-UK'://DevOps20467
                if(strUpr(Btchbkg) == 'N')
                {
                    value = 'false';
                }
                else if(strUpr(Btchbkg) == 'Y')
                {
                    value = 'true';
                }
                break;
            default:
                value = 'false';
                break;
        }
        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    //SKS_DevOps_16256
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        boolean value = true;
    
        batchCount++;
    
        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode;
    
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'DD');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
    
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-IE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #IATDOM:
                    case #IATEP:
                        value = false;
                        break;
                }
                break;
        }

        if(value)  //SKS_DevOps_16256
        {
            //      2.4: NbOfTxs
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    
            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP || mSKS_EFT_FileDetail.Module == SKS_EFT_Module::BTB || mSKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP)
            {
                //      2.5: CtrlSum
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
            }
            else
            {
                //      2.5: CtrlSum
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0));
            }
        }
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            //      2.18: ReqdColltnDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdColltnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
        else
        {
            //      2.17: ReqdExctnDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP || mSKS_EFT_FileDetail.Module == SKS_EFT_Module::BTB || mSKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP)
        {
            this.node_PmtInf_DbtrNodes(nodePmtInf);
        }
        else
        {
            this.node_PmtInf_CdtrNodes(nodePmtInf);
        }
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_Authstn</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_Authstn(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.3: Authstn
        //              Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeAuthstn;
        str TestFileInd, ReturnFilePrefix;

        // Get SKS_EFT_FileFormatPaymSpec
        this.getSKS_EFT_FileFormatPaymSpec();

        TestFileInd = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TestFileInd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        ReturnFilePrefix = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ReturnFilePrefix', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(strUpr(TestFileInd) == 'Y')
        {
            //      1.3: Authstn
            nodeAuthstn = _nodeGrpHdr.appendChild(xmlDoc.createElement('Authstn'));

            //              Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAuthstn, 'Prtry', 'TEST');
        }

        if(ReturnFilePrefix)
        {
            //      1.3: Authstn
            nodeAuthstn = _nodeGrpHdr.appendChild(xmlDoc.createElement('Authstn'));
    
            //              Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAuthstn, 'Prtry', this.CharacterReplacement(ReturnFilePrefix));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFR:
                    case #ACCTRFS:
                    case #XPSTRFR:
                    case #XPSTRFS:
                    case #FTFSEPA:
                        value = 'SLEV';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-INT':
            case 'EU-DANSKEBANK-XML-UK'://SKS_VSTS_13834
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTFSEPA:
                        value = 'SLEV';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTFSEPA:
                        value = 'SLEV';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTFSEPA:
                        value = 'SLEV';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTFSEPA:
                        value = 'SLEV';
                        break;
                }
                break;
        }
        //      2.24 ChrgBr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ChrgBr', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every WorkflowTrackingStatusTable record(inner loop) for every relevant WorkflowTrackingTable record(outer loop)")]
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        boolean    printDbtrId;
        str        schmeNm;
        str idNumber;
        str idType;
        container identification;

        if(mSKS_EFT_FileFormatPaymSpec.FormatId == 'EU-DANSKEBANK-XML-NO')
        {           
            WorkflowTrackingStatusTable     workflowTrackingStatus;
            WorkflowTrackingTable           workflowTrackingTable;
            WorkflowTrackingCommentTable    workflowTrackingCommentTable;
            UserInfo userInfo;
            HcmPersonIdentificationNumber   lHcmPersonIdentificationNumber;
            DirPerson   lDirPerson;

            while select firstFast RecId,CreatedDateTime, User from workflowTrackingTable
            order by workflowTrackingTable.CreatedDateTime,workflowTrackingTable.RecId asc
            join workflowTrackingCommentTable
            where workflowTrackingCommentTable.WorkflowTrackingTable == workflowTrackingTable.RecId
            join UserInfo where UserInfo.id == WorkflowTrackingTable.User
            exists join workflowTrackingStatus
            where workflowTrackingTable.WorkflowTrackingStatusTable ==  workflowTrackingStatus.RecId
                && workflowTrackingStatus.ContextRecId == LedgerJournalTable::find(LedgerJournalTrans::findByRef(curExt(),mSKS_EFT_FileDetail.PaymentLineRecId).JournalNum).RecId   //SKS#DevOps:15791
            && workflowTrackingTable.TrackingType == WorkflowTrackingType::Approval
            {
                lDirPerson = DirPerson::find(DirPersonUser::find(userInfo.id).PersonParty);
                boolean first = true;

                while select lHcmPersonIdentificationNumber where lHcmPersonIdentificationNumber.Person == lDirPerson.RecId
                {
                    if(first && (HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId == 'SOSE' ||
                    HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId == 'NIDN'))
                    {
                        first = false;
                        idNumber = lHcmPersonIdentificationNumber.IdentificationNumber;
                        idType   = HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId;
                        identification += [idNumber, idType];
                    }
                }
            }
        }
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                    case #FTF:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #FTFSEPA:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #WIRE_DOM:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                    case #FTF:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #FTFSEPA:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-FI':
                printDbtrId = true;
                break;
            case 'EU-DANSKEBANK-XML-INT':
                printDbtrId = true;
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                    case #FTF:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #FTFSEPA:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACCTRFIN:
                    case #ACTRFKID:
                        printDbtrId = true;
                        schmeNm     = 'CUST';
                        break;
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                    case #FTF:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #FTFSEPA:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                    case #FTF:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #FTFSEPA:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                    case #FTF:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #FTFSEPA:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INDRT_BACS:
                    case #MT101INTC://SKS_VSTS_13834 -->
                    case #MT101TRF:
                    case #MT101URGP:
                    case #FTF:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #FTFSEPA:
                        printDbtrId = true;
                        break;//SKS_VSTS_13834 <--
                }
                break;
                
        }
        
        if((printDbtrId  && mSKS_EFT_FileDetail_BankAccount.WOrdPartyId) || idType)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId));
                   
            if(schmeNm)
            {
                //                          9.1.17 : SchmeNm
                nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
                        
                //                          9.1.18 : Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schmeNm);
            }

            int counter;
            for(counter = 1; counter <= conlen(identification); counter++)
            {
                //                  Othr
                nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', conPeek(identification, counter));

                //                          9.1.17 : SchmeNm
                nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
                        
                //                          9.1.18 : Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', conPeek(identification, counter+1));

                counter += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #CHK:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId,'','','',0,'','');
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DAT:
                    case #DATXP:
                    case #DATSD:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO04:
                    case #WIRE_DOM:
                    case #GIRO01:
                    case #GIRO15:
                    case #CPR:          //SKS#DevOps:15033
                    case #CVR:          //SKS#DevOps:15033
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #CHK:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId,'','','',0,'','');
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACCTRFIN:
                    case #ACTRFKID:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTWDR:
                    case #ACCTWDS:
                    case #ACCTWOD:
                    case #ACCTZUS:
                    case #EXPWD:
                    case #EXPWOD:            
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId,'','','',0,'','');
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #BPTR:
                    case #BPOR:
                    case #PPTR:
                    case #PPOR:
                    case #ACCTSADV:                             //SKG#VSTS:11563
                    case #ACCTLADV:                             //SKG#VSTS:11563                        
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId,'','','',0,'','');
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FST:
                    case #CHAPS:
                    case #INTERNL:
                    case #INDRT_BACS:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId,'','','',0,'','');
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-IE':
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId,'','','',0,'','');    //SKS_DevOps_16256
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //          Ccy
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        str        iban, acctNum;
        boolean    printIban = true;

        iban    =   mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum =   mSKS_EFT_FileDetail.BankBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #BPTR:
                    case #BPOR:
                    case #PPTR:
                    case #PPOR:
                    case #ACCTSADV:
                    case #ACCTLADV:
                        printIban = false;
                        break;
                }
                break;
        }
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(printIban && iban)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', iban);
        }
        else
        {
            //              Othr
            this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
        }
    
        //              Ccy
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //              2.15: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtgyPurp;
        str         value;
        SplitPaymentMandatoryRule_PL splitPaymentMandatoryRule_PL;
        boolean     printPrtry = false;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                        value = 'SALA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101INTC:
                    case #FTFINTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101INTC:
                    case #FTFINTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-INT':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101INTC:
                    case #FTFINTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                        value = 'SALA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101INTC:
                    case #FTFINTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case  #ACCTZUS:
                        value = 'SECU';
                        break;
                }

                select firstonly splitPaymentMandatoryRule_PL
                    where splitPaymentMandatoryRule_PL.PaymMode == mSKS_EFT_FileDetail.PaymMode && splitPaymentMandatoryRule_PL.Specification == mSKS_EFT_FileDetail.PaymSpec;
                
                if(splitPaymentMandatoryRule_PL)
                {
                    value = 'SPLT';
                    printPrtry = true;
                }

                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                        value = 'SALA';
                        break;
                    case #MT101INTC:
                    case #FTFINTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTERNL:
                    case #MT101INTC://SKS_VSTS_13834 -->
                    case #FTFINTC:
                        value = 'INTC';
                        break;//SKS_VSTS_13834 <--
                }
                break;
        }
        if(value)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));

            if(printPrtry)
            {
                //              2.15: Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', value);
            }
            else
            {
                //              2.15: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeLclInstrm;
        str         value;
        boolean     printCd;
        boolean     printPrtry;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHK:
                        value           = 'CII';
                        printPrtry      =  true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DATSD:
                    case #DATXP:
                    case #WIRE_DOM:
                        value       = 'SDCL';
                        printCd     =  true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHK:
                        value           = 'CII';
                        printPrtry      =  true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':            //SKSDevOps21653
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTFURGP:
                        value           = 'SDCL';
                        printCd         = true;
                        break;
                }
                break;
        }
        if(value)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              Cd
            if(printCd)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
            }
            //              Prtry
            if(printPrtry)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101URGP:
                    case #FTFURGP:
                    case #FTFINTC:
                        value = 'URGP';
                        break;
                    case #FTF:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #SALARY:
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101URGP:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #DATXP:
                        value = 'URGP';
                        break;
                    case #FTF:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #DAT:
                    case #DATSD:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO04:
                    case #GIRO01:
                    case #GIRO15:
                    case #WIRE_DOM:
                    case #CPR:          //SKS#DevOps:15033
                    case #CVR:          //SKS#DevOps:15033
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101URGP:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #XPSTRFS:
                    case #XPSTRFR:
                        value = 'URGP';
                        break;
                    case #FTF:
                    case #MT101INTC:
                    case #MT101TRF:
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-INT':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101URGP:
                    case #FTFURGP:
                    case #FTFINTC:
                        value = 'URGP';
                        break;
                    case #FTF:
                    case #MT101INTC:
                    case #MT101TRF:
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101URGP:
                    case #FTFURGP:
                    case #FTFINTC:
                        value = 'URGP';
                        break;
                    case #FTF:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #SALARY:
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101URGP:
                    case #FTFURGP:                   
                        value = 'URGP';
                        break;
                    case #FTF:
                    case #MT101INTC:
                    case #MT101TRF:                                
                    case #ACTRFKID:
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACCTRFIN:
                    case #FTFINTC:                        //DevOps18801
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101URGP:
                    case #FTFURGP:
                    case #FTFINTC:
                    case #EXPWD:
                    case #EXPWOD:
                        value = 'URGP';
                        break;
                    case #FTF:
                    case #MT101INTC:
                    case #MT101TRF:                        
                    case #ACCTWDS:
                    case #ACCTWDR:
                    case #ACCTWOD:
                    case #ACCTZUS:
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MT101URGP:
                    case #FTFURGP:                    
                        value = 'URGP';
                        break;
                    case #FTF:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #SALARY:
                    case #BPTR:
                    case #BPOR:
                    case #PPTR:
                    case #PPOR:
                    case #FTFINTC:                   //DevOps18802
                    case #ACCTSADV:                 //SKG#VSTS:11563
                    case #ACCTLADV:                 //SKG#VSTS:11563
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHAPS:
                    case #MT101URGP://SKS_VSTS_13834 -->
                    case #FTFURGP:
                    case #FTFINTC:
                        value = 'URGP';
                        break;//SKS_VSTS_13834 <--
                    case #FST:
                    case #INTERNL:
                    case #INDRT_BACS:
                    case #FTF://SKS_VSTS_13834 -->
                    case #MT101INTC:
                    case #MT101TRF:
                        value = 'NURG';
                        break;
                    default:
                        value = 'SEPA';
                        break;//SKS_VSTS_13834 <--
                }
                break;
            case 'EU-DANSKEBANK-XML-IE':    //SKS_DevOps_16256
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #IATDOM:
                        value = 'URGP';
                        break;
                    case #IATEP:
                        value = 'NURG';
                        break;
                }
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodePmtId;
        str         instrId;
        boolean     printInstrId = true;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTF:
                    case #FTFINTC:
                    case #FTFSEPA:
                    case #FTFURGP:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                        instrId         =   SKS_PP_StringFormats::strRight(this.CharacterReplacement(mRemittanceName), 35);
                        break;

                    default:
                        printInstrId    =   false;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
            case 'EU-DANSKEBANK-XML-SE':
            case 'EU-DANSKEBANK-XML-UK':
            case 'EU-DANSKEBANK-XML-BE':
            case 'EU-DANSKEBANK-XML-DK':
            case 'EU-DANSKEBANK-XML-FI':
            case 'EU-DANSKEBANK-XML-INT':
            case 'EU-DANSKEBANK-XML-IE': //SKS_DevOps_16256
            case 'EU-DANSKEBANK-XML-NL':
                instrId                 =   SKS_PP_StringFormats::strRight(this.CharacterReplacement(mRemittanceName), 35);//SKS_DevOps_16158
                break;
        }

        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        if(printInstrId)
        {
            //              2.29: InstrId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', instrId);
        }

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE' :
            case 'EU-DANSKEBANK-XML-NL' :
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #CHK:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId)), 0, false);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':        //SKS#DevOps:16234 
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId)); 
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value, 0, false);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChqInstr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChqInstr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.52 ChqInstr
        //              2.58 DlvryMtd
        //              2.65 ChqMtrtyDt
        //              2.69: PrtLctn
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeChqInstr;
        XmlElement nodeDlvryMtd;
        str chqTp, DlvryMtd;
        boolean dlvryMtdFlag = false;
        
        chqTp    = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Chqtp', mSKS_EFT_FileDetail.RecId));
        DlvryMtd = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DlvryMtd', mSKS_EFT_FileDetail.RecId));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHK:
                        DlvryMtdFlag = true;
                        break;
                }
                break;
        }

        //          2.52 ChqInstr
        nodeChqInstr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('ChqInstr'));
    
        //              2.53 ChqTp
        if(chqTp)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqTp', chqTp, 0, false);
        }
        
        if(DlvryMtdFlag && DlvryMtd)
        {
            //              2.58 DlvryMtd
            nodeDlvryMtd = nodeChqInstr.appendChild(xmlDoc.createElement('DlvryMtd'));

            //                  2.59: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Cd', DlvryMtd, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.7: InstrPrty
        //------------------------------------------------------------------------------------------------------
        str value;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #WIRE_DOM:
                        value = 'NORM';
                        break;
                }
                break;
        }
        if(value)
        {
            //          InstrPrty
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">_nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              CdtNoteAmt
        //              RmtdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   Remitted;
        AmountMST   CreditNote;
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
        }
    
        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                      MmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #WIRE_DOM:
                        if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' || mSKS_EFT_FileDetail_Intermediary.IntBankId != '')
                        {
                            //          2.71: IntrmyAgt1
                            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
                            //              FinInstnId
                            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
                            //                  ClrSysMmbId
                            if(mSKS_EFT_FileDetail_Intermediary.IntBankId)
                            {
                                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                                //                      MmbId
                                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
                            }
                            else
                            {
                                //                  BIC
                                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankId, 0, false);
                            }
                            //                  PstlAdr
                            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, '', '', '');
                        }
                        break;
                    default:
                        super(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            default:
                super(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACTRFKID:
                    case #ACCTRFIN:
                        this.node_PstlAdr_Structured(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState);
                        break;
                    default:
                        super(_nodeCdtr);
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #BPTR:
                    case #BPOR:
                    case #PPTR:
                    case #PPOR:
                    case #ACCTSADV:
                    case #ACCTLADV:
                        this.node_PstlAdr_Structured(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState);
                        break;
                    default:
                        super(_nodeCdtr);
                        break;
                }
                break;
            default:
                super(_nodeCdtr);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeDbtrAgt;
        XmlElement  nodeFinInstnId;
        boolean     printPstlAdr;
        str         swift;

        swift = mSKS_EFT_FileDetail.BankBankSwiftNo;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #CHK:
                        printPstlAdr = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO01:
                    case #GIRO15:
                    case #CPR:          //SKS#DevOps:15033
                    case #CVR:          //SKS#DevOps:15033
                        printPstlAdr = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #CHK:
                        printPstlAdr = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACTRFKID:
                    case #ACCTRFIN:
                        printPstlAdr = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTWDR:
                    case #ACCTWDS:
                    case #ACCTWOD:
                    case #ACCTZUS:
                    case #EXPWD:
                    case #EXPWOD:
                        printPstlAdr = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #BPTR:
                    case #BPOR:
                    case #PPTR:
                    case #PPOR:
                    case #ACCTSADV:              //SKG#VSTS:11563
                    case #ACCTLADV:
                        printPstlAdr = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-UK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FST:
                    case #CHAPS:
                    case #INTERNL:
                    case #INDRT_BACS:
                        printPstlAdr = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-IE':
                printPstlAdr = true;  //SKS_DevOps_16256
                break;
        }
        
        if(swift || printPstlAdr)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);

            if(printPstlAdr)
            {
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, '', '', '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt_PstlAdr(XmlElement _nodeCdtrAgt)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACTRFKID:
                    case #ACCTRFIN:
                        this.node_PstlAdr_Structured(_nodeCdtrAgt, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity, 0, '', '');
                        break;
                    default:
                        super(_nodeCdtrAgt);
                        break;
                }
                break;
            default:
                super(_nodeCdtrAgt);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeRgltryRptg;
        XmlElement  nodeDtls;
        str         bankPurpCode, bankPurpName;
        boolean     printRgltryRptg;
    
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        bankPurpName = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName);
        bankPurpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
        
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-DANSKEBANK-XML-BE':
            case 'EU-DANSKEBANK-XML-DK':
            case 'EU-DANSKEBANK-XML-FI':
            case 'EU-DANSKEBANK-XML-INT':
            case 'EU-DANSKEBANK-XML-NL':
            case 'EU-DANSKEBANK-XML-PL':
            case 'EU-DANSKEBANK-XML-UK'://SKS_VSTS_13834
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FTF:
                    case #FTFINTC:
                    case #FTFSEPA:
                    case #FTFURGP:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                        printRgltryRptg = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACCTRFSA:
                    case #ACCTRFLA:
                    case #ACTRFKID:
                    case #ACCTRFIN:
                        if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'NOK')
                        {
                            printRgltryRptg = true;                            
                        }
                        break;
                    case #FTF:
                    case #FTFINTC:
                    case #FTFSEPA:
                    case #FTFURGP:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                        printRgltryRptg = true;
                        break;
                }
                break;
            case 'EU-DANSKEBANK-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SALARY:
                    case #BPTR:
                    case #BPOR:
                    case #PPTR:
                    case #PPOR:
                    case #ACCTSADV:
                    case #ACCTLADV:
                        if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'SEK')
                        {
                            printRgltryRptg = true;
                        }                        
                        break;
                    case #FTF:
                    case #FTFINTC:
                    case #FTFSEPA:
                    case #FTFURGP:
                    case #MT101INTC:
                    case #MT101TRF:
                    case #MT101URGP:
                        printRgltryRptg = true;
                        break;
                }
                break;
        }
    
        if((bankPurpCode || bankPurpName)   &&
            printRgltryRptg)
        {
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRgltryRptg, 'DbtCdtRptgInd', 'DEBT');
            nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));

            if(bankPurpCode)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(bankPurpCode));
            }
            if(bankPurpName)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(bankPurpName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Amt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Amt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              2.43: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement currentElement;
        XmlElement nodeAmt;
    
        //          2.42: Amt
        nodeAmt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Amt'));
    
        //              2.43: InstdAmt

        if(mSKS_EFT_FileDetail.FormatId == 'EU-DANSKEBANK-XML-NO')
        {
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAmt, 'InstdAmt',
                num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0));
        }
        else
        {
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAmt, 'InstdAmt',
            num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
        }
        SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
        mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
        mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
        mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
        mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
        mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIdType</Name>
				<Source><![CDATA[
    void getIdType()
    {
    

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>