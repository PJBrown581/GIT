<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITI_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITI_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CITI_EDI820 extends SKS_EFT_Format
{
    #define.FormatVersion('20220315')
    #define.ACHCCD('ACH-CCD')
    #define.ACHPPD('ACH-PPD')
    #define.WWT('WWT')
    #define.FWT('FWT')
    #define.CHK('CHK')
    #define.ACHCTX('ACH-CTX')
    SKS_EFT_EDI mSKS_EFT_EDI;
    BankAccountTable mBankAccountTable;
    System.Text.StringBuilder msb;
    str mSenderControlNbr;
    int mTranSetCount;
    int mSegmentCount;
    int mRecordCount;
    int mCtrlQuantity;
    str mLineEnd;
    str mSeparator;
    str mBPR_03;
    boolean CanadianWWT;
    AmountMST mAMTTotal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildString</Name>
				<Source><![CDATA[
    boolean buildString()
    {
        System.Text.StringBuilder sb;
        str record = msb.ToString();
        int pos = 1;
        int length;
        int recMod;
        int lineCount;
        str value;
        int totalCount = 1;
    
        length = strLen(record);
        lineCount = length div 80;
        recMod = length mod 80;
    
        if(recMod > 0)
        {
            lineCount++;
        }
    
        // Create the compressed records
        while(lineCount >= totalCount)
        {
            sb = new System.Text.StringBuilder();
            value = subStr(record, pos, 80);
            pos = pos + 80;
    
            // Pmt Related Info 04-83
            sb.Append(value);
            this.fileWrite(sb.ToString());
            totalCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
    
        msb = new System.Text.StringBuilder();
        mRecordCount = 0;
    
        while(mSKS_EFT_FileDetail)
        {
            mCtrlQuantity++;
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get Bank account
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            //Set Canadian World Link Wire flag
            CanadianWWT = mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT && (mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CAD' && this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId) == 'CA');
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_VendorPaym.EDI820Layout, mSKS_EFT_File.RecId);
            mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileFormat.NextFileId,0,0,0,0));
            mSeparator = mSKS_EFT_EDI.getDataElementSeparator();
            mLineEnd = mSKS_EFT_EDI.getSegmentTerminator();
    
            if(firstRec)
            {
                firstRec = false;
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Heading
            this.rec_ST();
            this.rec_BPR();
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
            {
                this.rec_CUR();
            }
    
            this.rec_REFTN();
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT)
            {
                this.rec_REF54();
            }
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
            {
                this.rec_REFFI();
            }
    
            this.rec_N1PR();
            this.rec_N1PE();
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
            {
                this.rec_N1BK();
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
            {
                if((CanadianWWT && mSKS_EFT_FileDetail.DepSwiftNo != '') || mSKS_EFT_VendorPaym.WIntBankId != '' || mSKS_EFT_VendorPaym.WIntBankSwift != '')
                {
                    this.rec_N1IK();
                }
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
            {
                this.rec_ENT();
                while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                {
                    this.rec_RMRIV(invSKS_EFT_FileDetail);
    
                    if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
                    {
                        this.rec_REFDS(invSKS_EFT_FileDetail);
                    }
                    this.rec_DTM(invSKS_EFT_FileDetail);
                }
            }
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
            {
                this.rec_RMRTT(mSKS_EFT_FileDetail);
            }
    
            this.rec_SE(mSegmentCount);
    
            mSegmentCount = 0;
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE(mTranSetCount);
        this.rec_IEA();
    
        this.fileWrite(msb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    boolean rec_BPR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //------------------------------------------------------------------------------------------------------
        AmountMST amt;
        str value;
    
        mRecordCount++;
        mSegmentCount++;
    
        msb.Append('BPR');
        msb.Append(mSeparator);
    
        //01    Trans. Handling Code
        if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCCD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX) &&
            mSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
        {
            msb.Append('C');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
        {
            msb.Append('D');
        }
        else
        {
            msb.Append('X');
        }
        msb.Append(mSeparator);
    
        //02    Monetary Amount
        amt = -1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        mAMTTotal += amt;
        msb.Append(num2str((amt),0,2,0,0));
        msb.Append(mSeparator);
    
        //03    Credit/Debit Flag Code
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
        }
        else
        {
            mBPR_03 = 'C';
        }
        msb.Append(mBPR_03);
        msb.Append(mSeparator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            case #ACHPPD:
            case #ACHCTX:
                msb.Append('ACH');
                break;
            Case #WWT:
                msb.Append('WWT');
                break;
            Case #FWT:
                msb.Append('FWT');
                break;
            Case #CHK:
                msb.Append('CHK');
                break;
        }
        msb.Append(mSeparator);
    
        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
                msb.Append('CCD');
                break;
            Case #ACHPPD:
                msb.Append('PPD');
                break;
            Case #ACHCTX:
                msb.Append('CTX');
                break;
        }
        msb.Append(mSeparator);
    
        //06    DFI ID No. Qualifier
        msb.Append('01');
        msb.Append(mSeparator);
    
        //07    DFI ID Number
        if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCCD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX) &&
            mSKS_EFT_FileDetail.BankOrigDFI != '')
        {
            msb.Append(mSKS_EFT_FileDetail.BankOrigDFI);
        }
        else
        {
            msb.Append(mSKS_EFT_FileDetail.BankBankTransit);
        }
        msb.Append(mSeparator);
    
        //08    Acct. No. Qual. Code
        msb.Append('DA');
        msb.Append(mSeparator);
    
        //09    Account Number
        msb.Append(mSKS_EFT_FileDetail.BankBankAcct);
        msb.Append(mSeparator);
    
        //10    Orig. Co. ID
        msb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
        msb.Append(mSeparator);
    
        //11    Orig. Co. Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
        {
            msb.Append(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('WorldlinkClientID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
        }
        msb.Append(mSeparator);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)
        {
            if(!CanadianWWT)
            {
                //12    DFI ID No. Qualifier
                if(mSKS_EFT_FileDetail.DepSwiftNo != '' &&
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACHPPD &&
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACHCCD &&
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACHCTX)
                {
                    msb.Append('02');
                    value = mSKS_EFT_FileDetail.DepSwiftNo;
                }
                else
                {
                    if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
                    {
                        msb.Append('ZZ');
                    }
                    else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT && mSKS_EFT_FileDetail.DepBankCodeType == BankCodeType::Code_CH)
                    {
                        msb.Append('03');
                    }
                    else
                    {
                        msb.Append('01');
                    }
                    value = mSKS_EFT_FileDetail.DepBankTransit;
                }
                msb.Append(mSeparator);
    
                //13    DFI ID Number
                msb.Append(value);
            }
            else
            {
                //12    DFI ID No. Qualifier
                msb.Append(mSeparator);
            }
            msb.Append(mSeparator);
    
            //14    Acct. No. Qual Code
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
            {
                msb.Append('ZZ');
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCCD ||
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD ||
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
            {
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    msb.Append('SG');
                }
                else
                {
                    msb.Append('DA');
                }
            }
            msb.Append(mSeparator);
    
            //15    Account Number
            msb.Append(mSKS_EFT_FileDetail.DepBankAcct);
            msb.Append(mSeparator);
        }
        else
        {
            //12    DFI ID No. Qualifier
            msb.Append(mSeparator);
            //13    DFI ID Number
            msb.Append(mSeparator);
            //14    Acct. No. Qual Code
            msb.Append(mSeparator);
            //15    Account Number
            msb.Append(mSeparator);
        }
    
        //16    Effective Entry Date
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
        msb.Append(mLineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CUR</Name>
				<Source><![CDATA[
    boolean rec_CUR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Currency Code                                       3       ID      Payment currency
        //03    Exchange Rate                                       10      R
        //04    Entity ID Code                                      3       ID
        //05    Currency Code                                       3       ID      Payment currency
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        msb.Append('CUR');
        msb.Append(mSeparator);
    
        //01     Entity ID Code
        msb.Append('PE');
        msb.Append(mSeparator);
    
        //02    Currency Code
        msb.Append(mBankAccountTable.CurrencyCode);
        msb.Append(mSeparator);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACHCTX)
        {
            //03    Exchange Rate
            msb.Append(mSeparator);
    
            //04    Entity ID Code
            msb.Append('SE');
            msb.Append(mSeparator);
    
            //05    Currency Code
            msb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    
        msb.Append(mLineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Date/Time Qualifier                                 3       ID
    //02    Date                                                4       Date    CCYYMMDD
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            mSegmentCount++;
    
            msb.Append('DTM');
            msb.Append(mSeparator);
    
            //01     Date/Time Qualifier
            msb.Append('003');
            msb.Append(mSeparator);
    
            //03    Description
            msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
    
            msb.Append(mLineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Assigned Number                                     6       N0
    boolean rec_ENT()
    {
        mSegmentCount++;
    
        msb.Append('ENT');
        msb.Append(mSeparator);
    
        //01    Assigned Number
        msb.Append('1');
    
        msb.Append(mLineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    boolean rec_GE(int _count)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        mSKS_EFT_EDI.setTranSetCount(_count);
        value = mSKS_EFT_EDI.buildGE();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    boolean rec_GS()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    boolean rec_IEA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        mSKS_EFT_EDI.setFunctionalGroupCount(2);
        value = mSKS_EFT_EDI.buildIEA();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1BK</Name>
				<Source><![CDATA[
    boolean rec_N1BK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Receiving Bank Name
        //03    NA
        //04    NA
        //------------------------------------------------------------------------------------------------------
        str address = '';
        mSegmentCount++;
    
    
        msb.Append('N1');
        msb.Append(mSeparator);
    
        //01     Entity ID Code
        msb.Append('BK');
        msb.Append(mSeparator);
    
        if(CanadianWWT)
        {
            //02     Branch Information
            msb.Append(substr(mSKS_EFT_FileDetail.DepSwiftNo,1,35));
        }
        else
        {
            //02     Name
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),1,35));
        }
    
        //03    NA
        //04    NA
        msb.Append(mLineEnd);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
        {
            this.rec_N2BK();
        }
    
        this.rec_N3(subStr(mSKS_EFT_VendorPaym.WBenBankAddr, 1, 35), subStr(mSKS_EFT_VendorPaym.WBenBankAddr, 36, 35), address);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
        {
            this.rec_N4BK();
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1IK</Name>
				<Source><![CDATA[
    boolean rec_N1IK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Entity ID Code
        //02    SWIFT Code/Routing Code
        //03    NA
        //04    NA
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        msb.Append('N1');
        msb.Append(mSeparator);
    
        //01     Entity ID Code
        if(CanadianWWT)
        {
            msb.Append('IK');
            msb.Append(mSeparator);
    
            //02
            msb.Append(mSKS_EFT_FileDetail.DepSwiftNo);
        }
        else if(mSKS_EFT_VendorPaym.WIntBankSwift != '')
        {
            msb.Append('IK');
            msb.Append(mSeparator);
    
            //02
            msb.Append(mSKS_EFT_VendorPaym.WIntBankSwift);
        }
        else
        {
            msb.Append('GG');
            msb.Append(mSeparator);
    
            //02
            msb.Append(mSKS_EFT_VendorPaym.WIntBankId);
        }
    
        //03    NA
        //04    NA
        msb.Append(mLineEnd);
    
        this.rec_N2IK();
        this.rec_N3(substr(mSKS_EFT_VendorPaym.WIntBankAddr, 1, 35), substr(mSKS_EFT_VendorPaym.WIntBankAddr, 36, 35), mSKS_EFT_VendorPaym.WIntBankAddr2);
        this.rec_N4IK();
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    boolean rec_N1PE()
    {
        //------------------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Entity ID Code
        //02    Name
        //------------------------------------------------------------------------------------------------------------------
        str vendName;
    
        mRecordCount++;
        mSegmentCount++;
    
        msb.Append('N1');
        msb.Append(mSeparator);
    
        //01     Entity ID Code
        msb.Append('PE');
        msb.Append(mSeparator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            vendName = mRemittanceName;
        }
        else
        {
            vendName = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
        {
            msb.Append(substr(vendName, 1, 40));
        }
        else
        {
            msb.Append(substr(vendName, 1, 35));
        }
        msb.Append(mLineEnd);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT && strLen(vendName) > 35)
        {
            this.rec_N2PE(substr(vendName, 36, 35));
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
        {
            this.rec_N2PE1();
            this.rec_N3PE1();
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT )
        {
            this.rec_N3PE();
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
        {
            this.rec_N4PE();
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT)
        {
            this.rec_REFRU();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    boolean rec_N1PR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //------------------------------------------------------------------------------------------------------
    
        //BP Deviation Documented
        mSegmentCount++;
        mRecordCount++;
    
        msb.Append('N1');
        msb.Append(mSeparator);
    
        //01     Entity ID Code
        msb.Append('PR');
        msb.Append(mSeparator);
    
        //02     Name
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
        {
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 1, 40));
        }
        else
        {
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 1, 35));
        }
        //03    Identification Code Qualifier
        //04    Identification Code
    
        msb.Append(mLineEnd);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
        {
            this.rec_N2PR();
            if(strLen(mSKS_EFT_Bank.WOrdPartyAddr) > 35 && mSKS_EFT_Bank.WOrdPartyAddr2 == '')
            {
                this.rec_N3(subStr(mSKS_EFT_Bank.WOrdPartyAddr, 1, 35), subStr(mSKS_EFT_Bank.WOrdPartyAddr, 36, 35), '');
            }
            else
            {
                this.rec_N3(subStr(mSKS_EFT_Bank.WOrdPartyAddr, 1, 35), subStr(mSKS_EFT_Bank.WOrdPartyAddr2, 1, 35), '');
            }
            this.rec_N4PR();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2BK</Name>
				<Source><![CDATA[
    boolean rec_N2BK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Additional Name                                      3       ID
        //02    NA
        //------------------------------------------------------------------------------------------------------
    
        if((CanadianWWT && mSKS_EFT_VendorPaym.WBenBankName != '') || strLen(mSKS_EFT_VendorPaym.WBenBankName) > 35)
        {
            mSegmentCount++;
            msb.Append('N2');
    
            if(CanadianWWT)
            {
                //01     Additional Name
                msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 1, 35));
    
            }
            else
            {
                //01     Additional Name
                msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 36, 35));
            }
    
            msb.Append(mLineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2IK</Name>
				<Source><![CDATA[
    boolean rec_N2IK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Additional Name
        //------------------------------------------------------------------------------------------------------
    
        if(mSKS_EFT_VendorPaym.WIntBankName !='')
        {
            mSegmentCount++;
            msb.Append('N2');
    
            //01     Additional Name
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), 1, 35));
            msb.Append(mLineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2PE</Name>
				<Source><![CDATA[
    boolean rec_N2PE(str _vendName)
    {
        //------------------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Entity ID Code
        //02    Additional Name
        //------------------------------------------------------------------------------------------------------------------
        mSegmentCount++;
        msb.Append('N2');
        msb.Append(mSeparator);
    
        //01     Additional Name
        msb.Append(_vendName);
        msb.Append(mLineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2PE1</Name>
				<Source><![CDATA[
    boolean rec_N2PE1()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Address 1
        //------------------------------------------------------------------------------------------------------
    
        if(mRemittanceAdrLine1 != '')
        {
            msb.Append('N2');
            msb.Append(mSeparator);
            mSegmentCount++;
    
            //01    Address Information
            msb.Append(substr(mRemittanceAdrLine1, 1, 40));
            msb.Append(mLineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2PR</Name>
				<Source><![CDATA[
    boolean rec_N2PR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Name
        //------------------------------------------------------------------------------------------------------
    
        if(strLen(mSKS_EFT_Bank.WOrdPartyName) > 35)
        {
            mSegmentCount++;
            msb.Append('N2');
    
            //01     Additional Name
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 36, 35));
            msb.Append(mLineEnd);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3</Name>
				<Source><![CDATA[
    boolean rec_N3(str _address1, str _address2, str _address3)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Address 1
        //02    Address 2
        //------------------------------------------------------------------------------------------------------
        str address1 = this.CharacterReplacement(_address1);
        str address2 = this.CharacterReplacement(_address2);
        str address3 = this.CharacterReplacement(_address3);
    
        if(address1 == '')
        {
            if(address2 == '')
            {
               address1 = address3;
            }
            else
            {
                address1 = this.CharacterReplacement(_address2);
                address2 = this.CharacterReplacement(_address3);
                address3 = '';
            }
        }
        else if(address2 == '')
        {
            address2 = this.CharacterReplacement(_address3);
            address3 = '';
        }
    
        if(address1 != '')
        {
            msb.Append('N3');
            msb.Append(mSeparator);
            mSegmentCount++;
    
            //01    Address Information
            msb.Append(substr(address1, 1, 35));
    
            if(address2 != '')
            {
                msb.Append(mSeparator);
    
                //02    Address Information
                msb.Append(substr(address2, 1, 35));
                msb.Append(mLineEnd);
    
                if(strLen(address2) >= 35)
                {
                    this.rec_N3(subStr(address2, 36, 35), address3, '');
                }
                else if(address3 != '')
                {
                    this.rec_N3(subStr(address3, 1, 35), subStr(address3, 36, 35), '');
                }
            }
            else
            {
                msb.Append(mLineEnd);
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    boolean rec_N3PE()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Address 1
        //02    Address 2
        //
        //01    Address 3
        //------------------------------------------------------------------------------------------------------
        str address = '';
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT && (mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != ''))
        {
            address = mRemittanceCity;
    
            if(address != '')
            {
                address += ' ';
            }
    
            address += mRemittanceState;
    
            if(address != '')
            {
                address += ' ';
            }
    
            address += mRemittanceZipCode;
    
            if(address != '')
            {
                address += ' ';
            }
    
            address += mRemittanceCountryRegionId;
        }
    
        if(strLen(mRemittanceAdrLine1) > 35 && mRemittanceAdrLine2 == '')
        {
            this.rec_N3(subStr(mRemittanceAdrLine1, 1, 35), subStr(mRemittanceAdrLine1, 36, 35), address);
        }
        else
        {
            this.rec_N3(mRemittanceAdrLine1, mRemittanceAdrLine2, address);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE1</Name>
				<Source><![CDATA[
    boolean rec_N3PE1()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        //01    Address 1
        //------------------------------------------------------------------------------------------------------
    
        if(mRemittanceAdrLine2 != '')
        {
            msb.Append('N3');
            msb.Append(mSeparator);
            mSegmentCount++;
    
            //01    Address Information
            msb.Append(substr(mRemittanceAdrLine2, 1, 40));
            msb.Append(mLineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4BK</Name>
				<Source><![CDATA[
    boolean rec_N4BK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WBenBankCity != '' || (mSKS_EFT_VendorPaym.WBenBankCountryRegionId != '' && this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) != 'US'))
        {
            msb.Append('N4');
            msb.Append(mSeparator);
    
            //01    City Address
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity), 1, 19));
    
            if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) != '' && this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) != 'US')
            {
                msb.Append(mSeparator);
    
                //02    State or Province Code
                msb.Append(mSeparator);
    
                //03    Postal Code
                msb.Append(mSeparator);
    
                if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) == 'AE')
                {
                    //04    Country Code
                    msb.Append('UAE');
                }
                else
                {
                    //04    Country Code
                    msb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId));
                }
            }
    
            msb.Append(mLineEnd);
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4IK</Name>
				<Source><![CDATA[
    boolean rec_N4IK()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WIntBankCity != '' || (mSKS_EFT_VendorPaym.WIntBankCountryRegionId != '' && this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId) != 'US'))
        {
            msb.Append('N4');
            msb.Append(mSeparator);
    
            //01    City Address
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity), 1, 23));
    
            if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId) != '' && this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId) != 'US')
            {
                msb.Append(mSeparator);
    
                //02    State or Province Code
                msb.Append(mSeparator);
    
                //03    Postal Code
                msb.Append(mSeparator);
    
                if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId) == 'AE')
                {
                    //04    Country Code
                    msb.Append('UAE');
                }
                else
                {
                    //04    Country Code
                    msb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId));
                }
            }
    
            msb.Append(mLineEnd);
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    boolean rec_N4PE()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //------------------------------------------------------------------------------------------------------
        if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || (mRemittanceCountryRegionId != '' && mRemittanceCountryRegionId != 'US'))
        {
            msb.Append('N4');
            msb.Append(mSeparator);
    
            //01    City Address
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
            {
                msb.Append(substr(mRemittanceCity, 1, 19));
            }
            else
            {
                msb.Append(substr(mRemittanceCity, 1, 23));
            }
    
            if(mRemittanceState != '' || mRemittanceZipCode != '' || (mRemittanceCountryRegionId != '' && mRemittanceCountryRegionId != 'US'))
            {
                msb.Append(mSeparator);
    
                //02    State or Province Code
                msb.Append(substr(mRemittanceState, 1, 2));
    
                if(mRemittanceZipCode != '' || (mRemittanceCountryRegionId != '' && mRemittanceCountryRegionId != 'US'))
                {
                    msb.Append(mSeparator);
    
                    //03    Postal Code
                    if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
                       mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
                    {
                        msb.Append(substr(mRemittanceZipCode,1,9));
                    }
                    else
                    {
                        msb.Append(substr(mRemittanceZipCode,1,10));
                    }
    
                    if(mRemittanceCountryRegionId != '' && mRemittanceCountryRegionId != 'US')
                    {
                        msb.Append(mSeparator);
    
                        if(mRemittanceCountryRegionId == 'AE')
                        {
                            //04    Country Code
                            msb.Append('UAE');
                        }
                        else
                        {
                            //04    Country Code
                            msb.Append(mRemittanceCountryRegionId);
                        }
                    }
                }
            }
            msb.Append(mLineEnd);
            mSegmentCount++;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    boolean rec_N4PR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_Bank.WOrdPartyCity != '' || mSKS_EFT_Bank.WOrdPartyState != '' || mSKS_EFT_Bank.WOrdPartyZipCode != '' || (mSKS_EFT_Bank.WOrdPartyCountryRegionId != '' && this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId) != 'US'))
        {
            msb.Append('N4');
            msb.Append(mSeparator);
    
            //01    City Address
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity), 1, 19));
    
            if(mSKS_EFT_Bank.WOrdPartyState != '' || mSKS_EFT_Bank.WOrdPartyZipCode != '' || (mSKS_EFT_Bank.WOrdPartyCountryRegionId != '' && this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId) != 'US'))
            {
                msb.Append(mSeparator);
    
                //02    State or Province Code
                msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyState), 1, 2));
    
                if(mSKS_EFT_Bank.WOrdPartyZipCode != '' || (mSKS_EFT_Bank.WOrdPartyCountryRegionId != '' && this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId) != 'US'))
                {
                    msb.Append(mSeparator);
    
                    //03    Postal Code
                    msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyZipCode),1,11));
    
                    if(mSKS_EFT_Bank.WOrdPartyCountryRegionId != '' && this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId) != 'US')
                    {
                        msb.Append(mSeparator);
    
                        if(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId) == 'AE')
                        {
                            //04    Country Code
                            msb.Append('UAE');
                        }
                        else
                        {
                            //04    Country Code
                            msb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId));
                        }
                    }
                }
            }
            msb.Append(mLineEnd);
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF54</Name>
				<Source><![CDATA[
    boolean rec_REF54()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    30      AN      Check Printing Codes
        //03    Description                                         80      AN      Not Used
        //------------------------------------------------------------------------------------------------------
        SKS_EB_Vendor sks_eb_Vendor;
        VendTable   vendorTable;
        str Vendemail;
        mSegmentCount++;
    
        msb.Append('REF');
        msb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        msb.Append('54');
        msb.Append(mSeparator);
    
        //02     Reference Identification
        msb.Append('FREEFORM');
    
        //03    Details of Payment Line 1
        sks_eb_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        if(sks_eb_Vendor.EM1Vendor)
        {
            msb.Append(mSeparator);
    
            vendorTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
            //eMail = vendorTable.Email;
            Vendemail = vendorTable.email();
    
            msb.Append('/EMAIL/' + strReplace(Vendemail, '@', '+'));
        }
    
        msb.Append(mLineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFDS</Name>
				<Source><![CDATA[
    boolean rec_REFDS(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
     //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type
        //01    Reference No. Qualifier                             3       ID
        //02    N/A
        //03    Description                                         35      AN
     //------------------------------------------------------------------------------------------------------
    
        if(invSKS_EFT_FileDetail.InvoiceTransactionTxt != '')
        {
            mSegmentCount++;
    
            msb.Append('REF');
            msb.Append(mSeparator);
    
            //01    Reference Number Qualifier
            msb.Append('DS');
            msb.Append(mSeparator);
    
            //02    N/A
            msb.Append(mSeparator);
    
            //03    Description
            msb.Append(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt));
            msb.Append(mLineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFFI</Name>
				<Source><![CDATA[
    boolean rec_REFFI()
    {
         //------------------------------------------------------------------------------------------------------
            //Nbr   Description                                         Max     Type    Comment
            //01    Reference No. Qualifier                             3       ID
            //02    Form code                                           5       A       Check Printing Codes
            //03    Special Handling Codes                              5       AN
         //------------------------------------------------------------------------------------------------------
    
        str value1, value2;

        value1 = SKS_EFT_Format::getCodelookupvalue('CheckFromCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        value2 = SKS_EFT_Format::getCodelookupvalue('SpclHandlingCd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(value1 != '' || value2 != '' )
        {
            mSegmentCount++;
    
            msb.Append('REF');
            msb.Append(mSeparator);
    
            //01    Reference Number Qualifier
            msb.Append('FI');
            msb.Append(mSeparator);
    
            //02    Form code
            msb.Append(this.CharacterReplacement(value1));
    
            if(value2)
            {
                //03    Special Handling Codes
                msb.Append(mSeparator);
                msb.Append(this.CharacterReplacement(value2));
            }
            msb.Append(mLineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFRU</Name>
				<Source><![CDATA[
    boolean rec_REFRU()
    {
        //-----------------------------------
        //Nbr   Description
        //01    Reference Number Qualifier
        //02    Credit Party Account/ID Type
        //-----------------------------------
        mSegmentCount++;
        msb.Append('REF');
        msb.Append(mSeparator);
    
        //01    Reference Number Qualifier
        msb.Append('RU');
        msb.Append(mSeparator);
    
        //02    Credit Party Account/ID Type
        msb.Append('B');
    
        msb.Append(mLineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFTN</Name>
				<Source><![CDATA[
    boolean rec_REFTN()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    30      AN      Check Printing Codes
        //03    Description                                         80      AN      Not Used
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        msb.Append('REF');
        msb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            msb.Append('CK');
        }
        else
        {
            msb.Append('TN');
        }
        msb.Append(mSeparator);
    
        //02     Reference Identification
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
        {
            msb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),strLen(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference)),-16));
        }
    
        //03    Remit Currency
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WWT)
        {
            msb.Append(mSeparator);
            msb.Append(mBankAccountTable.CurrencyCode);
        }
    
        msb.Append(mLineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    20       AN
    //04    Net Amount
    //05    Gross Amount
    //06    Discount Amount
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        AmountMST amt;
    
        mSegmentCount++;
    
        msb.Append('RMR');
        msb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            msb.Append('IV'); // Only write IV if an invoice number exists
        }
        msb.Append(mSeparator);
    
        //02     Reference Number
        msb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,20));
        msb.Append(mSeparator);
    
        //03    Payment Action Code
        msb.Append(mSeparator);
    
        //04    Net Amount
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        msb.Append(num2str(amt,0,2,0,0));
        msb.Append(mSeparator);
    
        //05    Gross Amount
        amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
        msb.Append(num2str(amt,0,2,0,0));
        msb.Append(mSeparator);
    
        //06    Discount Amount
        amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
        msb.Append(num2str(amt,0,2,0,0));
    
        msb.Append(mLineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRTT</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type
    //01    Reference No. Qualifier                             3       ID
    //02    Constant                                            20      AN
    //03    N/A
    //04    Net Amount
    //05    Gross Amount
    //06    Discount Amount
    boolean rec_RMRTT(SKS_EFT_FileDetail _mSKS_EFT_FileDetail)
    {
        AmountMST amt;
    
        mSegmentCount++;
    
        msb.Append('RMR');
        msb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        msb.Append('TT');
        msb.Append(mSeparator);
    
        //02     Constant
        msb.Append('TOTAL');
        msb.Append(mSeparator);
    
        //03    N/A
        msb.Append(mSeparator);
    
        //04    Net Amount
        amt = _mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        msb.Append(num2str(amt,0,2,0,0));
        msb.Append(mSeparator);
    
        //05    Gross Amount
        amt = (_mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _mSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
        msb.Append(num2str(amt,0,2,0,0));
        msb.Append(mSeparator);
    
        //06    Discount Amount
        amt = _mSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
        msb.Append(num2str(amt,0,2,0,0));
    
        msb.Append(mLineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    boolean rec_SE(int _count)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------------------------
        _count++;
    
        msb.Append('SE');
        msb.Append(mSeparator);
    
        //1     Number of Included Segments
        msb.Append(num2str(_count,0,0,0,0));
        msb.Append(mSeparator);
    
        //2     Trans. Set Cont. Number
        msb.Append(mSenderControlNbr);
        msb.Append(mLineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    boolean rec_ST()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //---------------------------------------------------------------------------------
    
        mSegmentCount++;
        mTranSetCount++;
    
        msb.Append('ST');
        msb.Append(mSeparator);
    
        //1     Transaction Set ID Code
        msb.Append('820');
        msb.Append(mSeparator);
    
        //2     Trans. Set Cont. Number
        if(strLen(mSKS_EFT_FileDetail.PaymentReference) < 4)
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),9);
        }
    
        msb.Append(mSenderControlNbr);
        msb.Append(mLineEnd);
    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>