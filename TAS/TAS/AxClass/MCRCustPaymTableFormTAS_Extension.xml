<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRCustPaymTableFormTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formstr(MCRCustPaymTable))]
final class MCRCustPaymTableFormTAS_Extension
{
    public boolean      isPayFabricActiveProcessor;
    public boolean      isSKSOneTimeCustLogicEnabled;
    public SalesTable   salesTableCallerSKS;    
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>MCRCustPaymTable_OnInitialized</Name>
				<Source><![CDATA[
    [FormEventHandler(formStr(MCRCustPaymTable), FormEventType::Initialized)]
    public void MCRCustPaymTable_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {        
        FormRun elementSKS = _sender;
        isPayFabricActiveProcessor = SKS_CC_PayFabricWalletHandler::isPayFabricActiveProcessor();
        SKS_PP_Setup sksParmsLoc = SKS_PP_Setup::find();
        if (isPayFabricActiveProcessor)
        {
            if (sksParmsLoc.ModCC == NoYes::No)
            {
                isPayFabricActiveProcessor = false;
            }
            else
            {
                isSKSOneTimeCustLogicEnabled = sksParmsLoc.CCUseOneTimeCustomerLogic;
                elementSKS.design().controlName(formControlStr(MCRCustPaymTable, SKS_CC_CreditCardCust)).visible(true);

                if (elementSKS.args() && elementSKS.args().dataset() == tableNum(SalesTable))
                {
                    salesTableCallerSKS = elementSKS.args().record();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_CreditCardCust_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(MCRCustPaymTable, SKS_CC_CreditCardCust), FormControlEventType::Clicked)]
    public void SKS_CC_CreditCardCust_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (!isPayFabricActiveProcessor)
        {
            return;
        }

        CustAccount custAccountSKSLoc = MCRCustPaymTable.CustAccount;

        if (!custAccountSKSLoc && salesTableCallerSKS)
        {
            custAccountSKSLoc = salesTableCallerSKS.InvoiceAccount;
        }

        CustTable custTableCallerSKS = CustTable::find(custAccountSKSLoc);
        if (!custTableCallerSKS)
        {
            return;
        }

        RefTableId sKS_CC_OneTimeCustRefTableId;
        RefRecId sKS_CC_OnetimeCustRefRecId;

        if (MCRCustPaymTable.RefTableId == tableNum(SalesTable))
        {
            sKS_CC_OneTimeCustRefTableId = MCRCustPaymTable.RefTableId;
            sKS_CC_OnetimeCustRefRecId = MCRCustPaymTable.RefRecId;
        }
        else if (salesTableCallerSKS)
        {
            sKS_CC_OneTimeCustRefTableId = salesTableCallerSKS.TableId;
            sKS_CC_OnetimeCustRefRecId = salesTableCallerSKS.RecId;
        }

        MenuFunction menuFunction;
        Args args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(CreditCardCust), MenuItemType::Display);        

        if (custTableCallerSKS.OneTimeCustomer &&
            isSKSOneTimeCustLogicEnabled &&
            sKS_CC_OneTimeCustRefTableId &&
            sKS_CC_OnetimeCustRefRecId)
        {
            args.parm(int642Str(sKS_CC_OnetimeCustRefRecId));
        }
            
        args.record(custTableCallerSKS);
        args.caller(this);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRCustPaymTable_OnSelectionChanged</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(MCRCustPaymTable, MCRCustPaymTable), FormDataSourceEventType::SelectionChanged)]
    public void MCRCustPaymTable_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (!isPayFabricActiveProcessor)
        {
            return;
        }

        if (salesTableCallerSKS)
        {
            // Visible property is used to override the standard D365 Call Center 
            // functionality which has code after super() of SelectionChanged method.
            if (CreditCardPreauthorize.visible() && CreditCardPreauthorize.enabled())
            {
                CreditCardPreauthorize.visible(salesTableCallerSKS.SalesStatus != SalesStatus::Invoiced &&
                    salesTableCallerSKS.SalesStatus != SalesStatus::Canceled);
            }

            if (CreditCardVoidAuth.visible() && CreditCardVoidAuth.enabled())
            {
                CreditCardVoidAuth.visible(salesTableCallerSKS.SalesStatus != SalesStatus::Invoiced &&
                    salesTableCallerSKS.SalesStatus != SalesStatus::Canceled);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>