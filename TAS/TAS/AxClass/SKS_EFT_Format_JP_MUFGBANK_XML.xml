<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_JP_MUFGBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_JP_MUFGBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_JP_MUFGBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20221017')
    #define.ACH_CCD('ACH-CCD')
    #define.ACH_PPD('ACH-PPD')
    #define.ACH_CTX('ACH-CTX')
    #define.SWIFT_WIRE('SWIFT-WIRE')
    #define.FED_WIRE('FED-WIRE')
    #define.CHK('CHK')
    #define.GPH('GPH')  //SKS#DevOps:15592

    #define.GPH_DOM('GPH-DOM') //SKS#DevOps:15740
    #define.GPH_LTP('GPH-LTP') //SKS#DevOps:15740

    str bankCode;  //SKS#DevOps:15592
    str bankCodeText;  //SKS#DevOps:15592

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_Authstn</Name>
				<Source><![CDATA[
      protected void node_GrpHdr_Authstn(XmlElement _nodeGrpHdr)    
    {
        //------------------------------------------------------------------------------------------------------
        //      1.3: Authstn
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeAuthstn;
        str value,value1;
        boolean chkPmtIsExist;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;

        //SKS_DevOps_18261--->
        while select PaymSpec from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.PaymSpec == #CHK
        {
            chkPmtIsExist = true;
        }
        //SKS_DevOps_18261<---

        if(chkPmtIsExist) //DevOps18261
        {
            value=this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Authorisation', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
            value1=this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Authorisation-Prtry', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
            if(value||value1)
            {
                //      1.3: Authstn
                nodeAuthstn = _nodeGrpHdr.appendChild(xmlDoc.createElement('Authstn'));
            }
            if(value)
            {
                //          1.5: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAuthstn, 'Cd', value);
            }
            if(value1)
            {
                //Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAuthstn, 'Prtry', value1);
            }
        }

        else if(mSKS_EFT_FileDetail.PaymSpec != #GPH && mSKS_EFT_FileDetail.PaymSpec != #GPH_LTP && mSKS_EFT_FileDetail.PaymSpec != #GPH_DOM)
        {
            //      1.3: Authstn
            nodeAuthstn = _nodeGrpHdr.appendChild(xmlDoc.createElement('Authstn'));
    
            //          1.4: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAuthstn, 'Cd', 'AUTH');      //SKS#DevOps:15656
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoveBOM</Name>
				<Source><![CDATA[
    protected boolean getRemoveBOM()
    {
        return true;        //SKS#DevOps:15656
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
    
        batchCount++;
    
        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode;
    
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'DD');
        }        
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
    
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #GPH_LTP && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #GPH_DOM)
            {
                //      2.5: CtrlSum
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
            }
        }
        else
        {
            //      2.5: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0));
        }
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            //      2.18: ReqdColltnDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdColltnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
        else
        {
            //      2.17: ReqdExctnDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            this.node_PmtInf_DbtrNodes(nodePmtInf);
        }
        else
        {
            this.node_PmtInf_CdtrNodes(nodePmtInf);
        }
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrNodes</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrNodes(XmlElement _nodePmtInf)
    {
        //      2.19: Dbtr
        this.node_PmtInf_Dbtr(_nodePmtInf);
    
        //      2.20: DbtrAcct
        this.node_PmtInf_DbtrAcct(_nodePmtInf);
    
        //      2.21: DbtrAgt
        this.node_PmtInf_DbtrAgt(_nodePmtInf);

        //      2.22: DbtrAgtAcct
        this.node_PmtInf_DbtrAgtAcct(_nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #GPH_LTP &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #GPH_DOM &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)         //SKS#DevOps:17784)
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

            //          2.8: SvcLvl
            this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);
    
            //          2.11: LclInstrm
            this.node_PmtInf_PmtTpInf_LclInstrm(nodePmftTpInf);
    
            //          2.14: CtgyPurp
            this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmftTpInf);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK) //DevOps18261
        {
            //      2.6: PmtTpInf
            nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
            //          2.11: LclInstrm
            this.node_PmtInf_PmtTpInf_LclInstrm(nodePmftTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeSvcLvl;
        str         value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                value = 'NURG';
                break;
            case #FED_WIRE:
            case #SWIFT_WIRE:
                value = 'URGP';
                break;
        }
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
        {
            if(value)
            {
                //          2.8: SvcLvl
                nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
            
                //              2.9: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        boolean printPstlAdr;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
            case #GPH:
            case #SWIFT_WIRE:
            case #FED_WIRE:
            case #GPH_LTP:
                printPstlAdr = true;
                break;
        }
        if(printPstlAdr)
        {
            this.node_PstlAdr_Structured(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrAcctTp;
        str iban, acctNum, value;
        VendBankAccount mVendBankAccount;
        BankGroup   bankGroup;

        iban    =   mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum =   mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
            case #CHK:
            case #GPH:    //SKS#DevOps:15592
                iban = '';
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrAcctTp', mSKS_EFT_FileDetail.RecId));
                break;
            case #SWIFT_WIRE:
            case #FED_WIRE:
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrAcctTp', mSKS_EFT_FileDetail.RecId));
                break;
            case #GPH_DOM:  //SKS#DevOps:15946
                iban = '';

                mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);        //SKS#DevOps:15946
                select firstonly * from bankGroup where bankGroup.BankGroupId == mVendBankAccount.BankGroupID;

                if(bankGroup.Code_JP || bankGroup.BranchCode_JP || mVendBankAccount.TransType_JP)
                {
                    switch(mVendBankAccount.TransType_JP)
                    {
                        case VendBankTransType_JP::Checking:
                            value = '2';
                            break;
                        case VendBankTransType_JP::OrdinarySavings:
                            value = '1';
                            break;
                    }
                    acctNum = subStr(bankGroup.Code_JP, 1, 4) + subStr(bankGroup.BranchCode_JP, 1, 3) + value + subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 12);
                }
                break;
        }
        if(iban || acctNum)
        {
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
                
                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', acctNum, 34);

                if(value)
                {
                    nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Prtry', value);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty</Name>
				<Source><![CDATA[
    //SKS#DevOps:15740 -->
    protected void node_GrpHdr_InitgPty(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInitgPty;
    
    
        //      1.8: InitgPty
        nodeInitgPty = _nodeGrpHdr.appendChild(xmlDoc.createElement('InitgPty'));

        if(mSKS_EFT_FileDetail.PaymSpec != #GPH_LTP && mSKS_EFT_FileDetail.PaymSpec != #GPH_DOM)
        {
            //          Nm
            this.node_GrpHdr_InitgPty_Nm(nodeInitgPty);
    
            //          Id
            this.node_GrpHdr_InitgPty_Id(nodeInitgPty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    //SKS#DevOps:15740 <--

    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str swift, rtg, clrsysId;
        int len;
        boolean     printName;
        boolean     printPstlAdr, printGPHPstlAdr;  //SKS#DevOps:15592
        boolean     printMmbId;  //SKS#DevOps:15540
        
        swift   =    mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =    mSKS_EFT_FileDetail.DepBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                len     = 9;
                swift   = '';
                break;
            case #FED_WIRE:
            case #SWIFT_WIRE:
                len         =   14;
                clrsysId    =   this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrAgtClrsysId', mSKS_EFT_FileDetail.RecId));
                printName   =   true;
                printPstlAdr=   true;
                printMmbId  =   true;
                break;
            case #CHK:
                swift   = '';
                rtg     = '';
                break;
            case #GPH:  //SKS#DevOps:15592
                rtg     = '';
                if(swift == '')     //SKS#DevOps:16058
                {
                    printName   =   true;
                    printGPHPstlAdr =   true;
                }
                break;

        }
        if(swift || rtg || printName || printGPHPstlAdr)        //SKS#DevOps:16058
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));

            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(printMmbId)  //SKS#DevOps:15540
            {
                if(swift)
                {
                    //                  BIC
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 11, false);
                }

                if(rtg)
                {
                    //                  ClrSysMmbId
                    nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
   
                    if(clrsysId)
                    {
   
                        nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', clrsysId, 0, false);
                    }
      
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, len, false);
                }
            }
            else if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 11, false);
            }
            else if(rtg)
            {
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
   
                if(clrsysId)
                {
   
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'clrsysId', 0, false);
                }
      
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, len, false);
            }
            if(printName)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 0, false); 
            }
            if(printPstlAdr)
            {
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, '', '', '');
            }
            else if(printGPHPstlAdr)   //SKS#DevOps:15592
            {
                this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, '', '', mSKS_EFT_FileDetail_BenBank.BenBankCity,0,'','',true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        int len;
        str name;
        name = mSKS_EFT_FileDetail.AccountName;

        select firstonly * from msks_EFT_FileDetail_BankAddress where
            msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
            msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress;    //SKS#DevOps:16058
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #GPH_DOM &&
           msks_EFT_FileDetail_BankAddress.BankAccountNameKana_JP)          //SKS#DevOps:15946
        {
            name = msks_EFT_FileDetail_BankAddress.BankAccountNameKana_JP;
        }
        else if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:            
                len = 22;
                break;
            case #ACH_CTX:
                len = 16;
                break;
            case #GPH:      //SKS#DevOps:15592
                len = 66;
                break;
            default:
                len = 140;
                break;
        }
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), len);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str initiatingPartyId;
        int len;
        this.getSKS_EFT_FileFormatPaymSpec();

        initiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #FED_WIRE:
            case #SWIFT_WIRE:    //SKS#DevOps:17950
                len = 8;
                break;
            default:
                len = 10;
                break;
        }
        if(initiatingPartyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', SKS_PP_StringFormats::strFill(len, initiatingPartyId, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));      //SKS#DevOps:16174
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------        
        XmlElement nodePstlAdr;
        LogisticsAddressCountryRegionISOCode countryRegion;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SWIFT_WIRE:
            case #FED_WIRE:
                if(mRemittanceCountryRegionId || mRemittanceAdrline1 || mRemittanceZipCode || mRemittanceCity || mRemittanceAdrLine2 || mRemittanceState)
                {
                    countryRegion = this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId);

                    //      PstlAdr
                    nodePstlAdr = _nodeCdtr.appendChild(xmlDoc.createElement('PstlAdr'));

                    //          Ctry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', countryRegion, 2, false);

                    //          PstCd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', mRemittanceZipCode, 16, false);

                    //          TwnNm
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(mRemittanceCity), 35, false);
    
                    //          CtrySubDvsn
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'CtrySubDvsn', this.CharacterReplacement(mRemittanceState), 35, false);

                    //          AdrLine
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(mRemittanceAdrline1), 35, false);
                }
                break;
            case #GPH:    //SKS#DevOps:15592
                this.node_PstlAdr_Structured(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState);
                break;
            case #CHK:
                this.node_PstlAdr_Structured(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, strRem(mRemittanceZipCode, '-'), mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        //                          9.1.17: SchmeNm
        //                              9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeId;
        XmlElement  nodeOrgId;
        XmlElement  nodeOther;
        str         value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                value = mSKS_EFT_FileDetail.FileACHCompanyId;
                break;
        }
        if(value)
        {
            //          9.1.12: Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(value), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
    
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeSchemeNm;
        int len;
        str acctNum, value;
        BankGroup   bankGroup;  //SKS#DevOps:15946
        boolean schemeNm;  //SKS#DevOps:15740

        acctNum = mSKS_EFT_FileDetail.BankBankAcct;     //SKS#DevOps:15946
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #GPH_DOM: //SKS#DevOps:15740
                len = 15;
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);      //SKS#DevOps:15946

                select firstonly * from bankGroup where bankGroup.BankGroupId == mBankAccountTable.BankGroupId;

                if(bankGroup.Code_JP || bankGroup.BranchCode_JP || mBankAccountTable.TransType_JP)
                {
                    switch(mBankAccountTable.TransType_JP)
                    {
                        case BankTransType_JP::Checking:
                            value = '2';
                            break;
                        case BankTransType_JP::OrdinarySavings:
                            value = '1';
                            break;
                    }
                    acctNum = subStr(bankGroup.Code_JP, 1, 4) + subStr(bankGroup.BranchCode_JP, 1, 3) + value + subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 12);
                }
                break;
            case #GPH_LTP:  //SKS#DevOps:15740
                len = 15;
                schemeNm = true;
            default:
                len = 34;
                break;
        }

        if(acctNum)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

            //              Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, len);

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK      ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #GPH      ||     //SKS#DevOps:16221
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FED_WIRE ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWIFT_WIRE)      //SKS#DevOps:16759
            {
                //              Ccy
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
            }

            if(schemeNm)  //SKS#DevOps:15740
            {
                //          SchemeNm
                nodeSchemeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));       //SKS#DevOps:16005

                //                  Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchemeNm, 'Prtry', 'A');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_XchgRateInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_XchgRateInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_XchgRateInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.47 XchgRateInf
        //              2.49 RateTp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeXchgRateInf;
    
        //          2.47 XchgRateInf
        nodeXchgRateInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('XchgRateInf'));
    
        //             2.49 RateTp
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXchgRateInf, 'RateTp', 'SPOT');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //              ClrSysMmbId
        //                  MmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        str     swift, rtg;
        boolean     printMmbId; //SKS#DevOps:15540

        swift   = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg     = mSKS_EFT_FileDetail.BankBankTransit;
            
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
            case #CHK:
                swift   =   '';
                break;
            case #FED_WIRE:   //SKS#DevOps:15540
            case #SWIFT_WIRE:
                printMmbId  =   true;
                break; 
            case #GPH_LTP:  //SKS#DevOps:15740
            case #GPH_DOM:
                swift   =   '';
                rtg     = '';

                //      2.21: DbtrAgt
                nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
                //          FinInstnId
                nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
                break;
        }

        if(swift || rtg)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(printMmbId)   //SKS#DevOps:15540
            {
                if(swift)
                {
                    //              BIC
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC',swift, 11);
                }

                if(rtg)
                {
                    this.node_PmtInf_DdtrAgt_MmbId(nodeFinInstnId);
                }
            }
            else if(swift)
            {
                //              BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC',swift, 11);
            }
            else
            {
                this.node_PmtInf_DdtrAgt_MmbId(nodeFinInstnId);
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_PmtInf_DdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        XmlElement  nodeClrSysMmBId;
        XmlElement  nodeClrSysId;
        int         length;
        str         clrSysId;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX:
            case #ACH_CCD:
            case #ACH_PPD:
            case #CHK:
                length        =  9;
                break;            
            case #FED_WIRE:
            case #SWIFT_WIRE:
                clrSysId      = 'USABA';
                length        =  9;
                break;
        }
        //              ClrSysMmbId
        nodeClrSysMmBId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

        if(clrSysId)
        {
            nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', clrSysId);
        }
        //                  MmbId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, length, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
        XmlElement nodeCtctDtls;
    
        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //          Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);
    
        //          PstlAdr
        this.node_PmtInf_Dbtr_PstlAdr(nodeDbtr);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #GPH_LTP)
        {
            //       CtctDtls
            nodeCtctDtls = nodeDbtr.appendChild(xmlDoc.createElement('CtctDtls'));

            //          Othr
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'Othr', SKS_EFT_Format_JP_MUFGBANK_XML::strDateYYYYMM(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)); //SKS#DevOps:16005
        }
    
        //          Id
        this.node_PmtInf_Dbtr_Id(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strDateYYYYMM</Name>
				<Source><![CDATA[
    /// <summary>
    /// strDateYYYYMM
    /// </summary>
    /// <param name = "_date">_date</param>
    /// <param name = "_seperator">_seperator</param>
    /// <returns>true</returns>
    public static str strDateYYYYMM( Date _date, DateSeparator _seperator = DateSeparator::None)
    {
        str result;
        result = Date2str(_date, 321, DateDay::None, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4, DateFlags::None);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgtAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAgtAcct
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_DbtrAgtAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
    
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;

        if(mSKS_EFT_FileDetail.FileACHCompanyId && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            //      2.20: DbtrAgtAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgtAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

            //              Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.FileACHCompanyId, 34);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SWIFT_WIRE:
            case #FED_WIRE:
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId));
                if(!value)
                {
                    value = 'SHAR';
                }
                break;            
        }
        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.29: InstrId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodePmtId;
        boolean     printInstrId;
        str         instructIdentification;
        str         value;  //SKS#DevOps:15592
    
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
            case #SWIFT_WIRE:
                printInstrId = true;
                instructIdentification = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstructIdentification', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
                break;
            case #GPH:  //SKS#DevOps:15592
            case #FED_WIRE:
                value = this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference);
                break;
        }
        //          2.29: InstrId
        if(printInstrId && instructIdentification)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(instructIdentification), 35));
        }
        else if(value) //SKS#DevOps:15592
        {
            //              2.29: InstrId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', value, 16);
        }

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
            case #GPH:    //SKS#DevOps:15592
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId));
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChqInstr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChqInstr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.52 ChqInstr
        //              2.58 DlvryMtd
        //              2.65 ChqMtrtyDt
        //              2.69: PrtLctn
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeChqInstr;
        XmlElement nodeDlvryMtd;
        str        dlvryMtd;
    
        //          2.52 ChqInstr
        nodeChqInstr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('ChqInstr'));        
    
        //              2.54 ChqNb
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqNb', SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //              2.58 DlvryMtd
        nodeDlvryMtd = nodeChqInstr.appendChild(xmlDoc.createElement('DlvryMtd'));
        
        dlvryMtd = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DlvryMtd', mSKS_EFT_FileDetail.RecId));
        
        //                  2.60: Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Prtry', dlvryMtd, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
        str value;
        boolean printCtgyPurp;

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
            case #FED_WIRE:
            case #SWIFT_WIRE:
            case #CHK:
            case #GPH:
                printCtgyPurp = true;
                break;
        }
        if(value && printCtgyPurp)
        {
            //           2.14: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));

            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);      //SKS#DevOps:16174
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeLclInstrm;
        str         value;
        boolean     prtry;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
                value = 'CCD';
                break;
            case #ACH_PPD:
                value = 'PPD';
                break;
            case #ACH_CTX:
                value = 'CTX';
                break;
            case #GPH:  //SKS#DevOps:15592
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Prtry', mSKS_EFT_FileDetail.RecId));
                prtry = true;
                break;
            case #CHK:
                value='CHK';
                prtry=true;
                break;
        }
        if(value)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
            
            if(prtry)
            {
                //              Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', value);
            }
            else
            {
                //              Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        int len;
        boolean isRequired = true;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                len = 16;
                break;
            case #SWIFT_WIRE:
            case #FED_WIRE:
            case #CHK:
                len = 140;
                break;
            case #GPH_LTP:  //SKS#DevOps:15740
                len = 40;
                break;
            case #GPH_DOM:  //SKS#DevOps:15740
                isRequired = false;
                break;
            default:
                len = 70;
                break;
        }

        if(isRequired)
        {
            //          Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), len, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------

        XmlElement  nodeIntrmyAgt1;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeClrSysMmbId;
        XmlElement  nodeClrSysId;
        boolean     printIntrmyAgt;
        str         intSwift, intBankId, clrsysId; 
 
        intSwift   =    mSKS_EFT_FileDetail_Intermediary.IntBankSwift;
        intBankId  =    mSKS_EFT_FileDetail_Intermediary.IntBankId;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #FED_WIRE:
            case #SWIFT_WIRE:
                clrsysId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IntrmyClrsysId', mSKS_EFT_FileDetail.RecId));
                printIntrmyAgt = true;
                break;
        }
        if((intSwift || intBankId)  && printIntrmyAgt)
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));

            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));

            if(intSwift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', intSwift, 11, false);
            }
            else if(intBankId)
            {
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
   
                if(clrsysId)
                {
   
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'clrsysId', 0, false);
                }
      
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', intBankId, 14, false);
            }

            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, '', '', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------

        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocAmt;
        boolean firstRec = true;
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        XmlElement  currentElement;
        AmountMST   Remitted;
        AmountMST   CreditNote;
        str value;
        int len;

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdOrPrtry', mSKS_EFT_FileDetail.RecId));
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
                this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                break;
            case #GPH_LTP:  //SKS#DevOps:15740
                while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
                {
                    if(firstRec)
                    {
                        //          2.98: RmtInf
                        nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                        firstRec = false;
                    }
    
                    //              2.100: Strd
                    nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
                    
                    //              2.101: RfrdDocInf
                    nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
                    //                  2.102: Tp
                    nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
                    //                      2.103: CdOrPrtry
                    nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', value);

                    switch(value)
                    {
                        case '1':
                            len = 5;
                            break;
                        case '2':
                            len = 5;
                            break;
                        case '3':
                            len = 3;
                            break;
                    }

                    if(len)
                    {
                        //                  2.107: Number
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), len);
                    }
                    
                    AmountMST   gross = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

                    //              2.109 RfrdDocAmt
                    nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));

                    if(invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
                    {
                        Remitted = 0;
                        CreditNote = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

                        //      2.110
                        currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * 1,0,2,1,0));
                        SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', invSKS_EFT_FileDetail.PaymentCurrencyCode);
                    }
                    else
                    {
                        Remitted = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
                        CreditNote = 0;
                        //      2.110
                        currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1,0,2,1,0));
                        SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', invSKS_EFT_FileDetail.PaymentCurrencyCode);
                    }
                }
                break;
            default:
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocAmt;
        boolean firstRec = true;
        
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }
    
            //              2.100: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
                    
            //              2.101: RfrdDocInf
            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
    
            //              2.109 RfrdDocAmt
            nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
            this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
        }               
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">_nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              2.43: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;

        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * 1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }

        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    private void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement _nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.101: RfrdDocInf
        //                  2.102: Tp
        //                      2.103: CdOrPrtry
        //                          2.104: Cd
        //                  2.107: Number
        //                  2.108: RltdDt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
    
        //              2.101: RfrdDocInf
        nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
        //                  2.102: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
        //                      2.103: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
        //                          2.104: Cd
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');

            //                  2.107: Number
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

            //                  2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');

            //                  2.107: Number
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

            //                  2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    //SKS#DevOps:15592 -->
    private void getBankPurposeCode()
    {
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
    
        bankCode     = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
        bankCodeText = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText);
    
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncoding</Name>
				<Source><![CDATA[
    protected str getEncoding()
    {
        return 'Shift-JIS';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 932;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //              Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePurp;
        str value;
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Purp', mSKS_EFT_FileDetail.RecId));

        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #GPH:
                this.getBankPurposeCode();
                break;
        }
        
        if(bankCodeText != '')
        {
            //                  Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            //                      Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Prtry', this.CharacterReplacement(bankCodeText));
        }
        else if(value)
        {
            //                  Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            //                      Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeRgltryRptg;
        XmlElement nodeDtls;
        str beneficiaryPhoneNumber, regulatoryReport;
    
        beneficiaryPhoneNumber = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BenePhoneNum', mSKS_EFT_FileDetail.RecId));
        regulatoryReport = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryReport', mSKS_EFT_FileDetail.RecId));
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #GPH)
        {
            //          RgltryRptg
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));

            //              Dtls
            nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));

            if((mSKS_EFT_FileDetail.PaymentCurrencyCode == 'KRW' || mSKS_EFT_FileDetail.PaymentCurrencyCode == 'TWD') && beneficiaryPhoneNumber)
            {                         
                //                  Inf
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', beneficiaryPhoneNumber);
            }
            else if(regulatoryReport)
            {
                //                  Inf
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', regulatoryReport);  //SKS#DevOps:16005
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    //SKS#DevOps:15592 <--

    //SKS#DevOps:15740 -->
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
    
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);   
        
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #GPH &&
          (mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode))        //SKS#DevOps:1221
        {
            this.node_CdtTrfTxInf_XchgRateInf(nodeCdtTrfTxInf);
        }
    
        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        //          2.71: IntrmyAgt1
        this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #GPH_LTP)
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #GPH_DOM)
            {
                //          2.77: CdtrAgt
                this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
            }
    
            //          2.79: Cdtr
            this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
            //          2.80: CdtrAcct
            this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
        }
    
        //          2.82: InstrForCdtrAgt
        this.node_CdtTrfTxInf_InstrForCdtrAgt(nodeCdtTrfTxInf);
    
        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);
    
        //          2.89: RgltryRptg
        this.node_CdtTrfTxInf_RgltryRptg(nodeCdtTrfTxInf);
    
        //          2.91: RltdRmtInf
        this.node_CdtTrfTxInf_RltdRmtInf(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RltdRmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RltdRmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.91: RltdRmtInf
        //              2.93: RmtLctnMtd
        //              2.94: RmtLctnElctrncAdr
        //------------------------------------------------------------------------------------------------------
        SKS_EB_Vendor   sks_eb_Vendor;
        VendTable       vendorTable;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #GPH_LTP)
        {
            sks_eb_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

            if(sks_eb_Vendor.EM1Vendor || sks_eb_Vendor.EM2Addr || sks_eb_Vendor.EM3Addr || sks_eb_Vendor.EM4Addr)
            {
    
                if(sks_eb_Vendor.EM1Vendor)
                {
                    vendorTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
    
                    this.node_CdtTrfTxInf_Rltd_RmtLctnPstlAdr(_nodeCdtTrfTxInf, '', '', DirParty::primaryElectronicAddress(vendorTable.Party, LogisticsElectronicAddressMethodType::Email).Description, '');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Rltd_RmtLctnPstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Rltd_RmtLctnPstlAdr
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    /// <param name = "_value">_value</param>
    /// <param name = "_email">_email</param>
    /// <param name = "_name">_name</param>
    /// <param name = "_countryId">_countryId</param>
    protected void node_CdtTrfTxInf_Rltd_RmtLctnPstlAdr(XmlElement _nodeCdtTrfTxInf, str _value, Email _email, Name _name,  LogisticsAddressCountryRegionISOCode _countryId)
    {
        XmlElement      nodeRltdRmtInf;
        XmlElement      nodeRmtLctnPstlAdr;
        XmlElement      nodeAdr;
        str value, name;
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MunicipalityCode', mSKS_EFT_FileDetail.RecId));

        //          2.91: RltdRmtInf
        nodeRltdRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RltdRmtInf'));
       
        nodeRmtLctnPstlAdr = nodeRltdRmtInf.appendChild(xmlDoc.createElement('RmtLctnPstlAdr'));
    
        //--> SKS#VSTS:16005
        name = mSKS_EFT_FileDetail.AccountName;

        select firstonly * from msks_EFT_FileDetail_BankAddress where
            msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
            msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress;        //SKS#DevOps:16058

        if(msks_EFT_FileDetail_BankAddress.BankAccountNameKana_JP)
        {
            name = msks_EFT_FileDetail_BankAddress.BankAccountNameKana_JP;
        }
        else if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }
        //<--SKS#VSTS:16005

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtLctnPstlAdr, 'Nm', name, 0, false);
    
        nodeAdr = nodeRmtLctnPstlAdr.appendChild(xmlDoc.createElement('Adr'));
    
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'Dept', value, 0, false);
    }
    //SKS#DevOps:15740 <--

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>