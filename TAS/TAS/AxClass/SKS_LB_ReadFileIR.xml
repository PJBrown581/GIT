<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileIR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_LB_ReadFileIR extends SKS_LB_ReadFile
{
    SKS_EB_FileHub fileHub;
    TextStreamIo IRFile;
    SKS_LB_FileFormatDet FileHeadBankAcctFieldFormat;
    SKS_LB_Bank mSKS_LB_Bank;
    str curline;
    #define.RecordCodeFileHeader('FH')
    #define.RecordCodeCheckTS('TS')
    #define.RecordCodeCheckPD('PD')
    #define.RecordCodeCheckTD('TD')
    #define.RecordCodeInvoiceDR('DR')
    #define.RecordCodeInvoiceID('ID')
    #define.RecordCodeInvoiceSA('SA')
    #define.RecordCodeFileTrailer('FT')

    List RecordCodeFileHeader, RecordCodeCheckTS, RecordCodeCheckPD, RecordCodeCheckTD, RecordCodeInvoiceDR, RecordCodeInvoiceID, RecordCodeInvoiceSA, RecordCodeFileTrailer;
    SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFileHub</Name>
				<Source><![CDATA[
    private SKS_EB_FileHub initFileHub(SKS_EB_FileHub _fileHub = fileHub)
    {
        fileHub = _fileHub;

        if(!fileHub)
        {
            SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;

            if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;

            fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

            if (Fileformat.CodePage)
            {
                fileHub.parmEncoding(Fileformat.CodePage);
            }
        }
      
        return fileHub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>IRFormatError</Name>
				<Source><![CDATA[
    void IRFormatError(str _Linetype, int linenumber)
    {
        ;

        ttsabort;
        ImportCount = 0;

        error(strfmt("@SKS558", _Linetype, int2str(linenumber)),' ');
        error("@SKS:IntRecFormatPaymentsError");
        importing = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    public void closeFile()
    {
        IRFile.finalize();
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.StreamClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    void openFile(boolean _Relocation = false)
    {
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }

        fileHub.runFileInquire(Filename);
        if(!_Relocation)
        {
            if(!fileHub.attrFileExists())
            {
                // The file %1 does not exist.
                error(strfmt("@SYS62207", fileName));
                return;
            }
        }
        fileHub.runFileLoad(Filename);
        fileHub.StreamInit();

        if (Fileformat.CodePage)
        {
            IRFile = TextStreamIo::constructForRead(fileHub.StreamGet(), Fileformat.CodePage);
        }
        else
        {
            IRFile = TextStreamIo::constructForRead(fileHub.StreamGet());
        }

        if (IRFile == null || IRFile.status() != IO_Status::Ok)
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", fileName));
        }
    
        IRFile.inFieldDelimiter('|');
        IRFile.inRecordDelimiter('~');
    
        if(!_Relocation)
        {

            RecordCodeFileHeader = new List(Types::Record);
            while select FieldFormat order by Fieldnbr, FormatDetType asc 
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.IRLineIndicator == SKS_LB_IRLineIndicator::FH
            {
                RecordCodeFileHeader.addEnd(FieldFormat);
            }

            RecordCodeCheckTS = new List(Types::Record);
            while select FieldFormat order by Fieldnbr, FormatDetType asc 
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.IRLineIndicator == SKS_LB_IRLineIndicator::TS
            {
                RecordCodeCheckTS.addEnd(FieldFormat);
            }

            RecordCodeCheckPD = new List(Types::Record);
            while select FieldFormat order by Fieldnbr, FormatDetType asc 
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.IRLineIndicator == SKS_LB_IRLineIndicator::PD
            {
                RecordCodeCheckPD.addEnd(FieldFormat);
            }

            RecordCodeCheckTD = new List(Types::Record);
            while select FieldFormat order by Fieldnbr, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.IRLineIndicator == SKS_LB_IRLineIndicator::TD
            {
                RecordCodeCheckTD.addEnd(FieldFormat);
            }

            RecordCodeInvoiceDR = new List(Types::Record);
            while select FieldFormat order by Fieldnbr, FormatDetType asc 
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.IRLineIndicator == SKS_LB_IRLineIndicator::DR
            {
                RecordCodeInvoiceDR.addEnd(FieldFormat);
            }
            
            RecordCodeInvoiceID = new List(Types::Record);
            while select FieldFormat order by Fieldnbr, FormatDetType asc 
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.IRLineIndicator == SKS_LB_IRLineIndicator::ID
            {
                RecordCodeInvoiceID.addEnd(FieldFormat);
            }

            RecordCodeInvoiceSA = new List(Types::Record);
            while select FieldFormat order by Fieldnbr, FormatDetType asc 
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.IRLineIndicator == SKS_LB_IRLineIndicator::SA
            {
                RecordCodeInvoiceSA.addEnd(FieldFormat);
            }

            RecordCodeFileTrailer = new List(Types::Record);
            while select FieldFormat order by Fieldnbr, FormatDetType asc 
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.IRLineIndicator == SKS_LB_IRLineIndicator::FT
            {
                RecordCodeFileTrailer.addEnd(FieldFormat);
            }
        }
        select firstOnly BankAcctFieldFormat where BankAcctFieldFormat.formatid == Fileformat.FormatID && BankAcctFieldFormat.FieldType == SKS_LB_FieldType::LBBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readfile</Name>
				<Source><![CDATA[
    TmpSKS_LB_Importing readfile()
    {
        int RecordCode;
        int PrevRecordCode = 0;
        int linecnt = 1;
        int paymentrecid = 1;
        Container line;
        str prevLine, lineStr, nextLineStr;
        SKS_EB_FilePath         lbpath;
        //SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        boolean PaymentFound, InvFound, WriteTransAction, PDFound, TDFound;

        ListEnumerator fieldFormatsListEnumeratorFileHeader = RecordCodeFileHeader.getEnumerator();
        ListEnumerator fieldFormatsListEnumeratorCheckTS = RecordCodeCheckTS.getEnumerator();
        ListEnumerator fieldFormatsListEnumeratorCheckPD = RecordCodeCheckPD.getEnumerator();
        ListEnumerator fieldFormatsListEnumeratorCheckTD = RecordCodeCheckTD.getEnumerator();
        ListEnumerator fieldFormatsListEnumeratorInvoiceDR = RecordCodeInvoiceDR.getEnumerator();
        ListEnumerator fieldFormatsListEnumeratorInvoiceID = RecordCodeInvoiceID.getEnumerator();
        ListEnumerator fieldFormatsListEnumeratorInvoiceSA = RecordCodeInvoiceSA.getEnumerator();
        ListEnumerator fieldFormatsListEnumeratorFileTrailer = RecordCodeFileTrailer.getEnumerator();

       
        lbpath =  System.IO.Path::GetDirectoryName(Filename);
        line = IRFile.read();
        [lineStr] = conPeek(line, 2);
        linestr = strLRTrim(strrem(lineStr, '\n\r'));

        while(IRFile.status() == IO_status::Ok || (line != conNull() && IRFile.status() == IO_Status::FileTooShort))
        {
            fieldFormatsListEnumeratorFileHeader.reset();
            fieldFormatsListEnumeratorCheckTS.reset();
            fieldFormatsListEnumeratorCheckPD.reset();
            fieldFormatsListEnumeratorCheckTD.reset();
            fieldFormatsListEnumeratorInvoiceDR.reset();
            fieldFormatsListEnumeratorInvoiceID.reset();
            fieldFormatsListEnumeratorInvoiceSA.reset();
            fieldFormatsListEnumeratorFileTrailer.reset();
            //linecnt++;
            lineStr = strrem(lineStr, '\n\r');

            if(!PaymentFound)
            {
                switch(linestr)
                {
                    case #RecordCodeFileHeader:
                        this.SimpleRecordMappingSearch(fieldFormatsListEnumeratorFileHeader, line);
                        break;
                    case #RecordCodeCheckTS://start of a new payment record
                        //File format spec states that this record is mandatory in the file
                        PaymentFound = true;
                        TDFound = false;
                        importing.CustAccount = '';
                        importing.CustName = '';
                        importing.CustomerCompany = '';
                        paymentrecid = linecnt;
                        this.SimpleRecordMappingSearch(fieldFormatsListEnumeratorCheckTS, line);
                        break;
                    default:
                        //Throw error for invalid file
                        break;
                }
            }
            else if(PaymentFound)
            {
                switch(linestr)
                {
                    case #RecordCodeCheckPD://Payment addenda
                        this.SimpleRecordMappingSearch(fieldFormatsListEnumeratorCheckPD, line);
                        PDFound = true;
                        break;
                    case #RecordCodeCheckTD://Payment addenda
                        if(!PDFound)
                        {
                            this.IRFormatError(#RecordCodeCheckPD, linecnt);
                            return importing;
                        }
                        PDFound = false;
                        TDFound = true;
                        this.SimpleRecordMappingSearch(fieldFormatsListEnumeratorCheckTD, line);
                        break;
                    case #RecordCodeInvoiceDR:
                        if(!TDFound)
                        {
                            this.IRFormatError(#RecordCodeCheckTD, linecnt);
                            return importing;
                        }
                        this.RecordMappingSearch(fieldFormatsListEnumeratorInvoiceDR, line);
                        InvFound = true;
                        break;
                    case #RecordCodeInvoiceID:
                        if(!TDFound)
                        {
                            this.IRFormatError(#RecordCodeCheckTD, linecnt);
                            return importing;
                        }
                        this.SimpleRecordMappingSearch(fieldFormatsListEnumeratorInvoiceID, line);
                        InvFound = true;
                        break;
                    case #RecordCodeInvoiceSA:
                        this.RecordMappingSearch(fieldFormatsListEnumeratorInvoiceSA, line);
                        break;
                    case #RecordCodeFileTrailer:
                        PaymentFound = false;
                        this.SimpleRecordMappingSearch(fieldFormatsListEnumeratorFileTrailer, line);
                        break;
                    default:
                        //Throw error for invalid file
                        break;
                }
            }

            //Look ahead at next line
            line = IRFile.read();
            [lineStr] = conPeek(line, 2);
            linestr = strrem(lineStr, '\n\r');
            linestr = strLRTrim(lineStr);
            linecnt++;

            if((lineStr == #RecordCodeCheckTS || lineStr == #RecordCodeFileTrailer) && PaymentFound )
            {
                PaymentFound = false;                
                WriteTransaction = true;
            }
            else if((lineStr == #RecordCodeInvoiceDR || lineStr == #RecordCodeInvoiceID) && InvFound)
            {
                InvFound = false;
                WriteTransaction = true;
            }

            if(WriteTransAction)
            {
                WriteTransaction = false;

                ttsbegin;
                importing.FileLineNbrBegin = linecnt;
                importing.ParentRecId = PaymentRecId;
                importing.insert();
                ttscommit;

                // reset invoice info from line, if terminating invoice reset check info too
                importing.InvAmount = 0;
                importing.InvoiceNumber = ' ';
                importing.BankPmtCnt = 0;
                importing.BankPmtTotal = 0;
                importing.DiscAmount = 0;
                importing.LBInvoice = '';
                importing.PaymNote ='';
            }
        }

        return importing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecordMappingSearch</Name>
				<Source><![CDATA[
    private void RecordMappingSearch(ListEnumerator _ListEnumerator, container _line)
    {
        SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        int position;
        str value;

        while(_ListEnumerator.moveNext())
        {
            localSKS_LB_FileFormatDet = _ListEnumerator.current();
            if(localSKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::InvNumber 
                || localSKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::InvAmt 
                || localSKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::CustomerId)
            {
                value = conpeek(_line, localSKS_LB_FileFormatDet.FieldNbr + 1);
                if((localSKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::InvNumber && strScan(value, 'Invoice number', 0 ,strLen(value) != 0))
                     || (localSKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::InvAmt && strScan(value, 'Invoice amount', 0 ,strLen(value) != 0 ))
                     || (localSKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::CustomerId && strScan(value, 'Customer number', 0 ,strLen(value) != 0))
                    )
                {
                    position = strFind(value, '=', 1, strLen(value));
                    if(position != 0)
                    {
                        value = subStr(value, position+ 1, strLen(value) - position);
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                }
            }
            else if(localSKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::Note)
            {
                For(int Counter = 3; Counter <= conLen(_line); Counter++)
                {
                    this.ReadOneField(conpeek(_line, counter), localSKS_LB_FileFormatDet.FieldType);
                }
            }
            else
            {
                localSKS_LB_FileFormatDet = _ListEnumerator.current();
                this.ReadOneField(conpeek(_line, localSKS_LB_FileFormatDet.FieldNbr + 1), localSKS_LB_FileFormatDet.FieldType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SimpleRecordMappingSearch</Name>
				<Source><![CDATA[
    private void SimpleRecordMappingSearch(ListEnumerator _ListEnumerator, container _line)
    {
        SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        int position;
        str value;

        while(_ListEnumerator.moveNext())
        {
            localSKS_LB_FileFormatDet = _ListEnumerator.current();
            this.ReadOneField(conpeek(_line, localSKS_LB_FileFormatDet.FieldNbr + 1), localSKS_LB_FileFormatDet.FieldType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Line</Name>
				<Source><![CDATA[
    int Read_Line( int DesiredLine )
    {
        container line;
        str lineStr;
        int CurrentLine = 0;

        if (DesiredLine > 0 && IRFile.status() == IO_status::Ok)
        {
            // Position on the desired line
            CurrentLine = 0;
            while (IRFile.status() == IO_status::Ok && CurrentLine < DesiredLine)
            {
                line = IRFile.read();
                CurrentLine = CurrentLine + 1;
            }

            if (IRFile.status() != IO_status::Ok)
            {
                return 1;
            }

            curline = strLTrim(strrem(con2Str(line), '\n\r'));
        }
        else
        {
            return 1;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Next</Name>
				<Source><![CDATA[
    int Read_Next()
    {
        container line;
        str lineStr;

        line = IRFile.read();

        if (IRFile.status() != IO_status::Ok)
        {
            return 1;
        }

        curline = strLTrim(strrem(con2Str(line), '\n\r'));

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Get_Current_Line</Name>
				<Source><![CDATA[
    str Get_Current_Line()
    {
        ;

        return curline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveBankAccountNumberFromFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve bank account number from file
    /// </summary>
    /// <returns>container</returns>
    Container RetrieveBankAccountNumberFromFile()
    {
        str         RecordCode;
        Container   line;
        container   BankAcctCon;
        str         lineStr;
        str         AcctNum;
        RecordCode = 'TS';

        while(IRFile.status() == IO_status::Ok)
        {
            line = IRFile.read();
            [lineStr] = conPeek(line, 2);
            linestr = strrem(lineStr, '\n\r');
            linestr = strLRTrim(lineStr);
            if(lineStr == RecordCode)
            {
                AcctNum = conpeek(line, 12);
                if(conFind(BankAcctCon, AcctNum) == 0)//Makes sure the account number is unique and not already in the container
                {
                    BankAcctCon += AcctNum;
                }
            }
        }
        return BankAcctCon;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>