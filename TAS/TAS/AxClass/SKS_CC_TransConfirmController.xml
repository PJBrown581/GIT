<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_TransConfirmController</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_CC_TransConfirmController extends SrsReportRunController
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {

        SRSPrintDestinationSettings     printDstnSettings;
        SKS_CC_TransConfirmController   controller = new SKS_CC_TransConfirmController();        
        SKS_CC_CustPaymTable            sks_CC_CustPaymTable = _args.record() as SKS_CC_CustPaymTable;
        Filename                        fileName;        
        SysEmailRecipients              senderEmailAddress = _args.parm();        
        SysMailerMessageBuilder         messageBuilder;          
        SysEmailTable                   sysEmailtable = SysEmailTable::find(SKS_PP_Setup::find().CCReceiptEmailTemplate);        
        SysEmailMessageTable            sysEmailMessage;
        LanguageId                      languageIdForEmail;
        System.DateTime                 currentDateTime = System.DateTime::get_UtcNow();
        str                             dateTimeFileName;
        SRSReportExecutionInfo          executionInfo = new SRSReportExecutionInfo();        
        Map                             reportParametersMap;
        Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService.ParameterValue[]  parameterValueArray;
        SRSProxy                        srsProxy;
        System.Byte[]                   reportBytes = null;
        SRSReportRunService             srsReportRunService = new SrsReportRunService();     
        boolean                         ret = true;        
        Set                             selectedRecIDSetlocal = _args.parmObject();
        SKS_CC_TransConfirmContract     contract;
        SetIterator                     setIterator;
        Notes                           selectedRecIDs;        
        #define.cc_Receipt('CC_Receipt_')
        #define.format('.PDF')
        #define.dateTimeFormat('yyyyMdHHmmss')

        const str commaSeparatorForSet = ',';
        
                                  
        if(_args.parm() && _args.parmObject())
        {     
            languageIdForEmail = CustTable::find(sks_CC_CustPaymTable.CustAccount).languageId();
            if (!languageIdForEmail)
            {
                languageIdForEmail = CompanyInfo::find().LanguageId;
            }

            sysEmailMessage = SysEmailMessageTable::find(sysEmailtable.EmailId, languageIdForEmail);

            dateTimeFileName = currentDateTime.ToString(#dateTimeFormat);
            messageBuilder = new SysMailerMessageBuilder();
            messageBuilder.setFrom(sysEmailtable.SenderAddr, sysEmailtable.SenderName);
            messageBuilder.setSubject(sysEmailMessage.SubJect);
            messageBuilder.addTo(senderEmailAddress);
            messageBuilder.setPriority(System.Net.Mail.MailPriority::Normal);
            if (sysEmailMessage.Mail)
            {
                messageBuilder.setBody(strReplace(sysEmailMessage.Mail, '\r\n', '<br>'));
            }
            fileName =  #cc_Receipt+  sks_CC_CustPaymTable.CustAccount + '_' +  dateTimeFileName + #format;
            controller.parmReportName(ssrsReportStr(SKS_CC_TransConfirmReport, Report));           
            controller.parmShowDialog(false);        
            contract = controller.parmreportcontract().parmRdpContract();
            setIterator = new SetIterator(selectedRecIDSetlocal);
            while (setIterator.more())
            {
                selectedRecIDs +=  int642str(setIterator.value()) + commaSeparatorForSet;
                setIterator.next();
            }
            contract.parmSelectedRecIDS(selectedRecIDs);            
            printDstnSettings = controller.parmReportContract().parmPrintSettings();
            printDstnSettings.printMediumType(SRSPrintMediumType::Email);
            printDstnSettings.fileFormat(SRSReportFileFormat::PDF);           

            // Below is a part of code responsible for rendering the report
            controller.parmReportContract().parmReportServerConfig(SRSConfiguration::getDefaultServerConfiguration());
            controller.parmReportContract().parmReportExecutionInfo(executionInfo);
            
            srsReportRunService.getReportDataContract(controller.parmreportcontract().parmReportName());
            srsReportRunService.preRunReport(controller.parmreportcontract());
                
            // 19239 Docentric integration 
            SKS_RenderResult renderResult = new SKS_RenderResult();
            controller.renderAttachment(controller, renderResult);
            reportBytes = renderResult.reportBytes();

            if (!reportBytes)
            {
                reportParametersMap = srsReportRunService.createParamMapFromContract(controller.parmReportContract());
                parameterValueArray = SrsReportRunUtil::getParameterValueArray(reportParametersMap);

                srsProxy = SRSProxy::constructWithConfiguration(controller.parmReportContract().parmReportServerConfig());
                // Actual rendering to byte array
                reportBytes = srsproxy.renderReportToByteArray(controller.parmreportcontract().parmreportpath(),
                                                      parameterValueArray,
                                                      printDstnSettings.fileFormat(),
                                                      printDstnSettings.deviceinfo());
            }

            messageBuilder.addAttachment(new System.IO.MemoryStream(reportBytes), fileName);            

            if(ret)
            {
                System.Exception exception;
                try
                {                    
                    ret = SysMailerFactory::sendNonInteractive(messageBuilder.getMessage());
                }
                catch(exception)
                {
                    error(exception.get_Message());
                    ret=false ;
                }
            }
        }
        else
        {
            error("@SYS22539");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Docentric integration
    /// </summary>
    /// <param name = "_controller">Controller</param>
    /// <param name = "_result">Result</param>
    delegate void renderAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAPAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Docentric integration
    /// </summary>
    /// <param name = "_controller">Controller</param>
    /// <param name = "_result">Result</param>
    delegate void renderAPAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>