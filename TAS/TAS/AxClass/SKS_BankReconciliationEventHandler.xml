<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BankReconciliationEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_BankReconciliationEventHandler
{
    public static  formRun      gSKS_BR_BankTranForm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_BankReconciliationEventHandler construct()
    {
        return new SKS_BankReconciliationEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SalesLine_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(BankReconciliation, BankAccountTrans), FormDataSourceEventType::Initialized)]
    public static void SalesLine_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var overrides = SKS_BankReconciliationEventHandler::construct();

        _sender.object(fieldNum(BankAccountTrans, Included)).registerOverrideMethod(methodStr(FormDataObject, validate),
            methodStr(SKS_BankReconciliationEventHandler, Included_OnValidate), overrides);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Included_OnValidate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>Included</c> is valid.
    /// </summary>
    /// <param name = "_targetField"> The <c>FormDataObject</c> where the Validate is triggered.</param>
    public boolean Included_OnValidate(FormDataObject _targetField)
    {
        //emulate super() call. Comment out to skip.
        boolean ret = _targetField.validate();

        #SKS_Global

        if (ret)
        {
            FormDataSource bankAccountTransDS = _targetField.datasource();
            BankAccountTrans bankAccountTrans = bankAccountTransDS.cursor();

            if(ret && !bankAccountTrans.Included && bankAccountTrans.SKS_BR_ManualReconciliationID != str2guid(#Emptyguidstring))
            {
                if(Box::yesNo("@SKS3741", DialogButton::No) == DialogButton::Yes)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else if(ret && bankAccountTrans.Included && bankAccountTrans.SKS_BR_IntermMatch)
            {
                if(SKS_BR_Matching::boolValidatePrematchedContine(bankAccountTrans.SKS_BR_IntermMatch, "@SYS320983"))
                {
                    ttsBegin;
                    SKS_BR_Matching::breakMatchSKS_BR_BankTran(bankAccountTrans.SKS_BR_ManualReconciliationID);
                    bankAccountTrans.SKS_BR_IntermMatch = NoYes::No;
                    bankAccountTrans.SKS_BR_ManualReconciliationID = str2guid(#Emptyguidstring);
                    bankAccountTrans.update();
                    ttsCommit;
                }
                else
                {
                    ret = false;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportTransactions_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(BankReconciliation, ImportTransactions), FormControlEventType::Clicked)]
    public static void ImportTransactions_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        Args args;
        FormRun _element = sender.formRun();
        BankAccountStatement bankAccountStatement = _element.args().record();

        args = new Args();
        args.record(bankAccountStatement);
        args.name(formstr(SKS_BR_BankTran));
        args.caller(_element);
        gSKS_BR_BankTranForm = classFactory.formRunClass(args);
        gSKS_BR_BankTranForm.run();
        gSKS_BR_BankTranForm.wait(false);
        _element.dataSource('BankAccountTrans').research(true);
        bankAccountStatement.dataSource().research(true);

    }

]]></Source>
			</Method>
			<Method>
				<Name>RemoveMatch_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(BankReconciliation, RemoveMatch), FormControlEventType::Clicked)]
    public static void RemoveMatch_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        BankAccountTrans bankAccountTrans = sender.formRun().dataSource().cursor();

        SKS_BR_BankTran skBankTran;

        select Voucher from skBankTran where skBankTran.ManualReconciliationID == BankAccountTrans.SKS_BR_ManualReconciliationID;

        if(skBankTran.Voucher != '')
        {
            error("@SKS:SKGBRCannotUnmatchVoucher");
            return;
        }

        SKS_BR_Matching::breakMatchBankAccountTrans(bankAccountTrans.SKS_BR_ManualReconciliationID);
        SKS_BR_Matching::breakMatchSKS_BR_BankTran(bankAccountTrans.SKS_BR_ManualReconciliationID);

        sender.formRun().dataSource().research(true);
        sender.formRun().dataSource().refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_BtnSelectAll_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(BankReconciliation, SKS_BtnSelectAll), FormControlEventType::Clicked)]
    public static void SKS_BtnSelectAll_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        Query locQuery;
        QueryRun locQueryRun;
        int locRangeCount;
        locQuery = new Query( );
        FormRun locFormRun = sender.formRun();
        FormDataSource locBankAccountTrans_ds = locFormRun.dataSource(); 
        BankAccountTrans locBankAccountTrans;
        BankAccountStatement locBankAccountStatement = locFormRun.bankAccountStatement();
        int locPosition = locBankAccountTrans_ds.getPosition();
        locQuery = locBankAccountTrans_ds.queryRun().query();
        locQueryRun = new QueryRun(locQuery);
        while(locQueryRun.next())
        {
            locBankAccountTrans = locQueryRun.get(tableNum(BankAccountTrans));
            locBankAccountTrans.selectForUpdate(true);
            locBankAccountTrans.Included = NoYes::Yes;
            locBankAccountTrans.AccountStatement = locBankAccountStatement.AccountStatementNum;
            locBankAccountTrans.AccountStatementDate = locBankAccountStatement.AccountStatementDate;

            //SKS_18843 start
            locBankAccountTrans.ClearedDate = locBankAccountStatement.AccountStatementDate;
            //SKS_18843 end

            ttsbegin;
            locBankAccountTrans.update();
            ttscommit;
        }
        

        locBankAccountTrans_ds.refreshEx(locPosition);
        locFormRun.dataSource().research(true);
        locFormRun.updateAmountCleared();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_BtnClearAll_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(BankReconciliation, SKS_BtnClearAll), FormControlEventType::Clicked)]
    public static void SKS_BtnClearAll_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        Query locQuery;
        QueryRun locQueryRun;
        int locRangeCount;
        locQuery = new Query( );
        FormRun locFormRun = sender.formRun();
        FormDataSource locBankAccountTrans_ds = locFormRun.dataSource();
        BankAccountTrans locBankAccountTrans;
        BankAccountStatement locBankAccountStatement = locFormRun.bankAccountStatement();
        int locPosition = locBankAccountTrans_ds.getPosition();
        locQuery = locBankAccountTrans_ds.queryRun().query();
        locQueryRun = new QueryRun(locQuery);
        while(locQueryRun.next())
        {
            locBankAccountTrans = locQueryRun.get(tableNum(BankAccountTrans));
            locBankAccountTrans.selectForUpdate(true);
            locBankAccountTrans.Included = NoYes::No;
            locBankAccountTrans.AccountStatement = Global::strMin();
            locBankAccountTrans.AccountStatementDate = Global::dateNull();
            
            //SKS_18843 start
            locBankAccountTrans.ClearedDate = Global::dateNull();
            //SKS_18843 end

            ttsbegin;
            locBankAccountTrans.update();
            ttscommit;
        }
        locBankAccountTrans_ds.refreshEx(locPosition);
        locFormRun.dataSource().research(true);
        locFormRun.updateAmountCleared();
      
    }

]]></Source>
			</Method>
			<Method>
				<Name>Included_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(BankReconciliation, BankAccountTrans, Included), FormDataFieldEventType::Modified)]
    public static void Included_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource bankAccountTrans_ds = sender.datasource();
        BankAccountTrans bankAccountTrans = bankAccountTrans_ds.cursor();
        FormObjectSet locSKS_BR_bankTranFormsDatasource;

        if (!bankAccountTrans.Included)
        {

            if (bankAccountTrans.SKS_BR_ManualReconciliationID == emptyGuid())
            {
                ttsbegin;
                bankAccountTrans.SKS_BR_ManualReconciliationID = newGuid();
                bankAccountTrans.update();
                ttscommit;
            }

            SKS_BR_Matching::removeGuidMatch(bankAccountTrans.SKS_BR_ManualReconciliationID);
            bankAccountTrans_ds.reread();
            if(gSKS_BR_BankTranForm)
            {
                locSKS_BR_bankTranFormsDatasource = gSKS_BR_BankTranForm.dataSource(1);
                locSKS_BR_bankTranFormsDatasource.research(true);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BankReconciliation_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(BankReconciliation), formMethodStr(BankReconciliation, init))]
    public static void BankReconciliation_Post_init(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        FormComboBoxControl  formComboBoxControl;
        //Bug 10799 -->
        FormDataSource       bankAccountTrans_ds =   formRun.dataSource('BankAccountTrans');
        BankAccountStatement bankActStatement    = formrun.args().record();
        //Bug 10799 <--

        if (formRun.args().parmEnum())
        {
            formRun.design().caption("@SKS4419");
            formComboBoxControl = formRun.design().controlName('AllCleared') as formComboBoxControl;
            formComboBoxControl.selection(AllNotCleared::NotCleared);
            //Bug 10799 -->
            bankAccountTrans_ds.queryBuildDataSource().addRange(fieldNum(BankAccountTrans, TransDate)).value(queryRange(datenull(),bankActStatement.AccountStatementDate));
            bankAccountTrans_ds.queryBuildDataSource().addRange(fieldNum(BankAccountTrans, AccountId)).value(queryvalue(bankActStatement.AccountId));
            //Bug 10799 <--
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlsEnables</Name>
				<Source><![CDATA[
    public static void setControlsEnables(FormDataSource sender)
    {
        str formCaller;
        FormRun formRun = sender.formRun();
        FormDataSource bankAccountTrans_ds =   formRun.dataSource('BankAccountTrans');
        BankAccountTrans bankAccountTrans = bankAccountTrans_ds.cursor();
        BankAccountStatement bankActStatement = formrun.args().record();
        FormDesign formDesign = formRun.design(0);
        FormControl bankAccountReconcile = formDesign.controlName(formControlStr(BankReconciliation, BankAccountReconcile));
        FormControl bankMarkChequeReconcile = formDesign.controlName(formControlStr(BankReconciliation, bankMarkChequeReconcile));
        FormControl importTransactions = formDesign.controlName(formControlStr(BankReconciliation, ImportTransactions));
        FormControl removeMatch = formDesign.controlName(formControlStr(BankReconciliation, RemoveMatch));
        FormControl bankAccountTrans_AmountCorrected = formDesign.controlName(formControlStr(BankReconciliation, BankAccountTrans_AmountCorrected));
        FormControl locSKS_BtnSelectAll = formDesign.controlName(formControlStr(BankReconciliation, SKS_BtnSelectAll));
        FormControl locSKS_BtnClearAll = formDesign.controlName(formControlStr(BankReconciliation, SKS_BtnClearAll));

        locSKS_BtnSelectAll.visible(bankActStatement.SKS_BR_BankHeaderRecId == 0); //The Select all button is only visible on MANUALLY created statements. it is not allowed for TAS BR created statements.
        locSKS_BtnClearAll.visible(bankActStatement.SKS_BR_BankHeaderRecId == 0); //The Clear all button is only visible on MANUALLY created statements. it is not allowed for TAS BR created statements.

        // If statement was auto-created the user can only match to items that were imported using eBankRec
        // No manual marking Cleared
        // The user can create new transactions (manual)
        if(bankActStatement.SKS_BR_BankHeaderRecId > 0 && bankAccountTrans.SKS_BR_ManualReconciliationID == emptyGuid())
        {
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,Included)).enabled(true);
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,AmountCorrect)).enabled(false);
            bankAccountTrans_AmountCorrected.enabled(false);
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,AmountCur)).enabled(false);
            bankMarkChequeReconcile.enabled(false);
        }
        // If statement was auto-created the user can only match to items that were imported using eBankRec
        // No manual marking Cleared
        // The user can create new transactions (manual)
        else if(bankActStatement.SKS_BR_BankHeaderRecId > 0 && !bankAccountTrans.Manual)
        {
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,Included)).enabled(false);
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,AmountCorrect)).enabled(false);
            bankAccountTrans_AmountCorrected.enabled(false);
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,AmountCur)).enabled(false);
            bankMarkChequeReconcile.enabled(false);
        }
        else if(bankActStatement.SKS_BR_BankHeaderRecId > 0 && bankAccountTrans.SKS_BR_ManualReconciliationID == emptyGuid())
        {
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,Included)).enabled(true);
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,AmountCorrect)).enabled(false);
            bankAccountTrans_AmountCorrected.enabled(false);
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,AmountCur)).enabled(false);
            bankMarkChequeReconcile.enabled(false);
        }
        else
        {
            bankAccountTrans_ds.allowEdit(!bankAccountTrans.Reconciled);
        }
        //SKS_FDD_13903 Begin
        if(bankActStatement.SKS_CCR_BankHeaderRecID > 0)
        {
            bankAccountTrans_ds.object(fieldNum(BankAccountTrans,AmountCorrect)).enabled(false);
            bankAccountTrans_AmountCorrected.enabled(false);
            FormControl newButton = formDesign.controlName(formControlStr(BankReconciliation, NewButton));

            bankAccountReconcile.enabled(false);
            importTransactions.enabled(false);
            newButton.enabled(false);
        }
        //SKS_FDD_13903 End

        if(bankActStatement.ReconcileDate != dateNull()
            || bankAccountTrans.SKS_BR_ManualReconciliationID == emptyGuid())
        {
            removeMatch.enabled(false);
        }
        else
        {
            removeMatch.enabled(true);
        }

        // if called from Imported bank statements then disable reconcile and mark buttons
        if(formRun.args() && formRun.args().caller())
        {
            formCaller = formRun.args().caller().toString();
            if(strScan(formCaller,'ImportedBankStmt_BankReconciliation',0,strLen(formCaller))>0)
            {
                bankAccountTrans_ds.allowDelete(false);
                bankAccountTrans_ds.allowCreate(false);
                bankAccountTrans_ds.allowEdit(false);
                bankAccountReconcile.enabled(false);
                importTransactions.enabled(false);
                removeMatch.enabled(false);
            }
        }
        
        // disable Clear all button for Reconciled transactions
        if(bankActStatement.ReconcileDate != dateNull())
        {
            locSKS_BtnClearAll.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BankAccountTrans_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(BankReconciliation, BankAccountTrans), FormDataSourceEventType::Activated),
    FormDataSourceEventHandler(formDataSourceStr(BankReconciliation, BankAccountTrans), FormDataSourceEventType::PostLinkActive),
    FormDataSourceEventHandler(formDataSourceStr(BankReconciliation, BankAccountTrans), FormDataSourceEventType::InitValue),
    FormDataSourceEventHandler(formDataSourceStr(BankReconciliation, BankAccountTrans), FormDataSourceEventType::SelectionChanged)]
    public static void BankAccountTrans_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        SKS_BankReconciliationEventHandler::setControlsEnables(sender);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>