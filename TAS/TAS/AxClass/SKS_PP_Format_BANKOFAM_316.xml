<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BANKOFAM_316</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_PP_Format_BANKOFAM_316 extends SKS_PP_Format_BankGroup
/// </summary>
class SKS_PP_Format_BANKOFAM_316 Extends SKS_PP_Format_BankGroup
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        //Bank of America - 316
        //  001-012     Account Number (right Justified & Zero Padded)
        //  013-013     Record Type ("O" Outstanding/"V" Void)
        //  014-023     Check Number (Right Justified & Zero Padded)
        //  024-035     Amount(9(9)V99 Right Justified and Zero Padded)
        //  036-041     Date (MMDDYY)
        //  042-044     SPACE FILL
        //  045-300     Payee Name Information for Payee postiive Pay and other additional Data
        //  301-316     SPACE FILL
        System.Text.StringBuilder sb;
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        str locItemType;
        ;
    
    
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            locItemType = 'V';
        }
        else
        {
            locItemType = 'O';
        }
    
        sb = new System.Text.StringBuilder();
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;

        if(bSKS_PP_Bank.PP01)
        {
            sb.Append(SKS_PP_StringFormats::strFill(12, bSKS_PP_Bank.PP01, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_PP_FileDetail.BnkBankAcct,SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        sb.Append(locItemType);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mSKS_PP_FileDetail.ChkCuryAmt, 12));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(3,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(256, this.getVenderNameFromSKS_PP_FileDetail(mSKS_PP_FileDetail), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(16,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVenderNameFromSKS_PP_FileDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return name from the Filedetail table
    /// </summary>
    /// <param name = "_sks_PP_FileDetail">_sks_PP_FileDetail</param>
    /// <returns>Filedetail table vendor name</returns>
    public VendName getVenderNameFromSKS_PP_FileDetail(SKS_PP_FileDetail _sks_PP_FileDetail)
    {
        return _sks_PP_FileDetail.VendName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>