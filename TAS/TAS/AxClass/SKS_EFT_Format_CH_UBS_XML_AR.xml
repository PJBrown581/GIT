<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CH_UBS_XML_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CH_UBS_XML_AR extends SKS_EFT_Format_ISO_20022_00800102
/// </summary>
class SKS_EFT_Format_CH_UBS_XML_AR extends SKS_EFT_Format_ISO_20022_00800102
{
    #define.FormatVersion('20220708')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInitgPty;
        XmlElement nodeCtctDtls;
        str contactName;

        contactName = SKS_EFT_Format::getCodelookupvalue('ContactName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        //      1.8: InitgPty
        nodeInitgPty = _nodeGrpHdr.appendChild(xmlDoc.createElement('InitgPty'));

        //          Nm
        this.node_GrpHdr_InitgPty_Nm(nodeInitgPty);

        //          Id
        this.node_GrpHdr_InitgPty_Id(nodeInitgPty);

        if(contactName != '')
        {
            nodeCtctDtls = nodeInitgPty.appendChild(xmlDoc.createElement('CtctDtls'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'Nm', this.CharacterReplacement(contactName), 70);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //                      9.1.17: SchmeNm
        //                          9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        str initiatingprtyId;

        initiatingprtyId = SKS_EFT_Format::getCodelookupvalue('InitiatingprtyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(initiatingprtyId!= '')
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(initiatingprtyId), 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
    
        batchCount++;
    
        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode;
    
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'DD');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
    
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    
        //      2.5: CtrlSum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0));
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        //      2.18: ReqdColltnDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdColltnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        
        this.node_PmtInf_CdtrNodes(nodePmtInf);
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
       
        //      CdtrSchmeId
        this.node_PmtInf_CdtrSchmeId(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23 BtchBookg
        //------------------------------------------------------------------------------------------------------
        str btchbkg;

        btchbkg = SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(strUpr(btchbkg) == 'N')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'false');
        }
        else if(strUpr(btchbkg) == 'Y')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', 'true');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.15: Cdtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
        //      2.15: Cdtr
        nodeCdtr = nodePmtInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //          Nm
        this.node_PmtInf_Cdtr_Nm(nodeCdtr);
    
        //           PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrSchmeId</Name>
				<Source><![CDATA[
    protected void node_PmtInf_CdtrSchmeId(XmlElement _nodeDrctDbtTx)
    {
        //------------------------------------------------------------------------------------------------------
        //      CdtrSchmeId
        //          Id
        //              PrvtId
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
        
        XmlElement nodeCdtrSchmeId;
        XmlElement nodeId;
        XmlElement nodePrvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
    
        if(mSKS_EFT_FileDetail.FileACHCompanyId != '')
        {
            //          CdtrSchmeId
            nodeCdtrSchmeId = _nodeDrctDbtTx.appendChild(xmlDoc.createElement('CdtrSchmeId'));

            //              Id
            nodeId = nodeCdtrSchmeId.appendChild(xmlDoc.createElement('Id'));
    
            //                  PrvtId
            nodePrvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
    
            //                      Othr
            nodeOthr = nodePrvtId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyId), 35, false);

            //                          SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
            
            //                              Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', 'SEPA');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.15: CtgyPurp
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtTpInf;
        nodePmtTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.7: InstrPrty
        this.node_PmtInf_PmtTpInf_InstrPrty(nodePmtTpInf);
    
        //          2.8: SvcLvl
        this.node_PmtInf_PmtTpInf_SvcLvl(nodePmtTpInf);
    
        //          2.11: LclInstrm
        this.node_PmtInf_PmtTpInf_LclInstrm(nodePmtTpInf);
    
        //          2.15: CtgyPurp
        this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmtTpInf);
    
        this.node_PmtInf_PmtTpInf_SeqTp(nodePmtTpInf);

        //Remove if no children
        if(!nodePmtTpInf.hasChildNodes())
        {
            _nodePmtInf.removeChild(nodePmtTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
    
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
        {
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
            //              2.9: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', 'SEPA');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str value;
                
        if(msks_EFT_FileDetail_Mandate.MandateScheme == CustMandateScheme::CORE)
        {
            value = 'CORE';
        }
        else 
        {
            value = 'B2B';
        }

        if(value)
        {
            //              2.11: LclInstrm
            nodeLclInstrm = _nodePmtTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SeqTp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SeqTp(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: SeqTp
        //------------------------------------------------------------------------------------------------------      
        str value;
        //              SeqTp
        if(msks_EFT_FileDetail_Mandate.MandatePaymentType == CustMandatePaymentType::Recurring)
        {
            value = 'RCUR';
        }
        else
        {
            value = 'OOFF';
        }
    
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtTpInf, 'SeqTp', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), 140, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        
        mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
    
        this.node_PstlAdr(_nodeCdtr, mSKS_EFT_FileDetail_BankAccount.CountryRegionId, mSKS_EFT_FileDetail_BankAccount.Addr, mSKS_EFT_FileDetail_BankAccount.ZipPostal, mSKS_EFT_FileDetail_BankAccount.City, 0, '', mSKS_EFT_FileDetail_BankAccount.State);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_CdtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: CdtrAcct
        //          Id
        //              IBAN
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOthr;
    
        if(mSKS_EFT_FileDetail.BankBankIBAN)
        {
            //      2.20: CdtrAcct
            nodeCdtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //          Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
    
            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_CdtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.17: CdtrAgt
        //               FinInstnId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
       
        if(mSKS_EFT_FileDetail.BankBankSwiftNo)
        {
            //      2.21: CdtrAgt
            nodeCdtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
            
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC',  mSKS_EFT_FileDetail.BankBankSwiftNo, 21);
           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      2.24 ChrgBr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'SLEV');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_PmtId(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.29: PmtId
        //              2.31: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtId;
    
        //          2.28: PmtId
        nodePmtId = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('PmtId'));
    
        //              2.30: InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    
        //              2.31: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.28: DrctDbtTxInf
        //          2.29: PmtId
        //          2.32: PmtTpInf
        //          2.44: InstdAmt
        //          2.45: ChrgBr
        //          2.70: DbtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDrctDbtTxInf;
    
        //      2.28: DrctDbtTxInf
        nodeDrctDbtTxInf = nodePmtInf.appendChild(xmlDoc.createElement('DrctDbtTxInf'));
    
        //          2.29: PmtId
        this.node_DrctDbtTxInf_PmtId(nodeDrctDbtTxInf);
    
        //          2.32 PmtTpInf
        this.node_DrctDbtTxInf_PmtTpInf(nodeDrctDbtTxInf);
    
        //          2.44: InstdAmt
        this.node_DrctDbtTxInf_Amt(nodeDrctDbtTxInf);
    
        //          DrctDbtTx
        this.node_DrctDbtTxInf_DrctDbtTx(nodeDrctDbtTxInf);
    
        //          2.45: ChrgBr
        this.node_DrctDbtTxInf_ChrgBr(nodeDrctDbtTxInf);
    
        //          2.70: DbtrAgt
        this.node_DrctDbtTxInf_DbtrAgt(nodeDrctDbtTxInf);
    
        //          2.72: Dbtr
        this.node_DrctDbtTxInf_Dbtr(nodeDrctDbtTxInf);
    
        //          2.73: DbtrAcct
        this.node_DrctDbtTxInf_DbtrAcct(nodeDrctDbtTxInf);
    
        //          2.75: InstrForCdtrAgt
        this.node_DrctDbtTxInf_InstrForCdtrAgt(nodeDrctDbtTxInf);
    
        //          2.88: RmtInf
        this.node_DrctDbtTxInf_RmtInf(nodeDrctDbtTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DrctDbtTx</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_DrctDbtTx(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          DrctDbtTx
        //              MndtRltdInf
        //                  MndtId
        //                  DtOfSgntr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDrctDbtTx;
        XmlElement nodeMndtRltdInf;

        //          DrctDbtTx
        nodeDrctDbtTx = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DrctDbtTx'));

        if(msks_EFT_FileDetail_Mandate.MandateReference)
        {
            //              MndtRltdInf
            nodeMndtRltdInf = nodeDrctDbtTx.appendChild(xmlDoc.createElement('MndtRltdInf'));
    
            //                  MndtId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMndtRltdInf, 'MndtId', msks_EFT_FileDetail_Mandate.MandateReference);
    
            //                  DtOfSgntr
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMndtRltdInf, 'DtOfSgntr', SKS_PP_StringFormats::strDateYYYYMMDD(msks_EFT_FileDetail_Mandate.SignatureDate, DateSeparator::Hyphen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_DbtrAgt(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.70: DbtrAgt
        //              FinInstnId
        //                  BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
            
        if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            //          2.70: DbtrAgt
            nodeDbtrAgt = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
            
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_Dbtr(XmlElement _node_DrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //          2.72: Dbtr
        nodeDbtr = _node_DrctDbtTxInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //              Nm
        this.node_DrctDbtTxInf_Dbtr_Nm(nodeDbtr);

        this.node_DrctDbtTxInf_Dbtr_PstlAdr(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          Dbtr
        //              PstlAdr
        //------------------------------------------------------------------------------------------------------
        /*LogisticsPostalAddress  postalAddress;
    
    
        if(mSKS_EFT_FileDetail.AccountNum && mSKS_EFT_FileDetail.AccountType == LedgerJournalACType::Cust)
        {
            postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct Debit');
    
            if(postalAddress)
            {
                this.node_PstlAdr(_nodeDbtr, postalAddress.CountryRegionId, strReplace(postalAddress.Street, '\n', ' '), postalAddress.ZipCode, postalAddress.City, 70, '', postalAddress.State);
            }
        }*/

        this.node_PstlAdr(_nodeDbtr, msks_EFT_FileDetail_CustAddress.CustCountryRegionId, strReplace(msks_EFT_FileDetail_CustAddress.CustAddr, '\n', ' '), msks_EFT_FileDetail_CustAddress.CustZipPostal, msks_EFT_FileDetail_CustAddress.CustCity, 70, '', msks_EFT_FileDetail_CustAddress.CustState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_DbtrAcct(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.73: DbtrAcct
        //              Id
        //                  IBAN
        
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            //          2.73: DbtrAcct
            nodeDbtrAcct = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //              Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //                  IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_RmtInf(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        str invDetailsString;
        boolean firstRec = true;
    
        while select InvoiceNumber, RecordSummaryRecId from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //              RmtInf
                nodeRmtInf = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }
    
            invDetailsString += strFmt('%1, ', invSKS_EFT_FileDetail.InvoiceNumber);
        }
    
        if(invDetailsString)
        {
            invDetailsString = subStr(invDetailsString, 1, strLen(invDetailsString)-2);
    
            //                  Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(invDetailsString), 140);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()           
    {
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('Document'));
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns:schemaLocation', 'http://www.six-interbank-clearing.com/de/pain.008.001.02.chsdd.02.xsd pain.008.001.02.chsdd.02.xsd');  //SKS#DevOps:15601
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns', 'http://www.six-interbank-clearing.com/de/pain.008.001.02.chsdd.02.xsd');  //SKS#DevOps:15601
        nodeRoot = nodeRoot.appendChild(xmlDoc.createElement('CstmrDrctDbtInitn'));  //SKS#DevOps:15601
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        CompanyBankAccountId    prevBankAccountId;
        PaymMode                prevPaymMode;
        PaymSpec                prevPaymSpec;
        CurrencyCode            prevCurrency;
        SKS_EB_Date             prevEffectiveDate;
    
        xmlDoc = XmlDocument::newBlank(strUpr(this.getEncoding()));     //SKS#DevOps:15601
    
        this.node_MessageRoot();
    
        this.node_GrpHdr();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // get SKS_EFT_CustomerPaym
            this.getSKS_EFT_CustomerPaym();
            
    
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // get SKS_EFTAR_Bank
                this.getSKS_EFTAR_Bank();                
    
                // Get Bank account
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
    
            if(prevBankAccountId != mSKS_EFT_FileDetail.BankAccountId ||
               prevPaymMode != mSKS_EFT_FileDetail.PaymMode ||
               prevPaymSpec != mSKS_EFT_FileDetail.PaymSpec ||
               prevCurrency != mSKS_EFT_FileDetail.PaymentCurrencyCode ||
               prevEffectiveDate != mSKS_EFT_FileDetail.EffectiveDate
               )
            {
                this.node_PmtInf();
    
                prevBankAccountId = mSKS_EFT_FileDetail.BankAccountId;
                prevPaymMode = mSKS_EFT_FileDetail.PaymMode;
                prevPaymSpec = mSKS_EFT_FileDetail.PaymSpec;
                prevCurrency = mSKS_EFT_FileDetail.PaymentCurrencyCode;
                prevEffectiveDate = mSKS_EFT_FileDetail.EffectiveDate;
            }
    
            //For AR
            this.node_DrctDbtTxInf();
            
    
            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment

        select * from mSKS_EFT_FileDetail
            join msks_EFT_FileDetail_Mandate
            join msks_EFT_FileDetail_CustAddress
            order by msks_EFT_FileDetail_Mandate.MandateScheme,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                msks_EFT_FileDetail_Mandate.RefRecId == mSKS_EFT_FileDetail.RecId &&
                msks_EFT_FileDetail_CustAddress.RefRecId == mSKS_EFT_FileDetail.RecId;
                
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>