<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CustBankAccountsEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_CustBankAccountsEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CustBankAccountsEventHandler construct()
    {
        return new SKS_CustBankAccountsEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>AccountNum_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, AccountNum), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, BankAccountType), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, BankGroupId), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, BankIBAN), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, RegistrationNum), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SWIFTNo), FormDataFieldEventType::Modified)]
    public static void AccountNum_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        SKS_EFT_CustomerPaym msks_eft_customerpaym;        
        FormRun formRun = sender.datasource().formRun();
        CustBankAccount custBankAccount = sender.datasource().cursor();
        SKS_EFT_Setup msks_eft_setup = SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(formRun);

        SKS_CustBankAccountsEventHandler::SKS_changePreNoteStatus(custBankAccount, msks_eft_setup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustBankAccount_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CustBankAccounts, CustBankAccount), FormDataSourceEventType::Activated)]
    public static void CustBankAccount_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        CustBankAccount custBankAccount = sender.cursor();
        SKS_EFT_FileFormat sks_eft_fileformat;
        SKS_EFT_FileFormatPaymSpec sks_eft_fileformatpaymspec;
        SKS_EB_PreNoteStatus mOrigPreNoteStatus;
        FormControl eftPlusPreNote = sender.formRun().design(0).controlName(formControlStr(CustBankAccounts, EFTPlusPreNote));
        FormControl custBankAccount_SKS_EFT_PreNoteStatus = sender.formRun().design(0).controlName(formControlStr(CustBankAccounts, CustBankAccount_SKS_EFT_PreNoteStatus));
        FormControl isVisibleValue  = sender.formRun().design(0).controlName(formControlStr(CustBankAccounts, IsVisibleValue));
        SKS_EFT_CustomerPaym msks_eft_customerpaym;        
        FormRun formRun = sender.formRun();
        SKS_EFT_Setup msks_eft_setup = SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(formRun);
        SKS_CustBankAccountsEventHandler::SKS_setAccountApprovalEnabled(formRun);

        mOrigPreNoteStatus = custBankAccount.SKS_EFT_PreNoteStatus;

        if(msks_eft_setup.ARReqPreNote)
        {
            if(msks_eft_customerpaym && custBankAccount.SKS_EFT_PreNoteStatus != SKS_EB_PreNoteStatus::NotApplicable)
            {
                changeCompany(msks_eft_setup.dataAreaId)
                {
                    select firstonly prenote, formatid from sks_eft_fileformat
                        where sks_eft_fileformat.PreNote == NoYes::Yes && 
                            sks_eft_fileformat.FormatId == msks_eft_customerpaym.FormatId
                        join prenote, formatid, paymspec from sks_eft_fileformatpaymspec
                        where sks_eft_fileformatpaymspec.FormatId == msks_eft_customerpaym.FormatId && 
                            sks_eft_fileformatpaymspec.PaymSpec == msks_eft_customerpaym.PaymSpec && 
                            sks_eft_fileformatpaymspec.PreNote == NoYes::Yes;
                }
                if(sks_eft_fileformat)
                {
                    eftPlusPreNote.visible(true);
                    custBankAccount_SKS_EFT_PreNoteStatus.enabled(true);
                }
                else
                {
                    eftPlusPreNote.visible(false);
                }
            }
            else
            {
                if(custBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::NotApplicable)
                {
                    eftPlusPreNote.visible(false);
                }
                else
                {
                    eftPlusPreNote.visible(true);
                    custBankAccount_SKS_EFT_PreNoteStatus.enabled(true);
                }
            }
        }
        else
        {
            eftPlusPreNote.visible(false);
        }
       
        if(!eftPlusPreNote.isVisible())
        {
            isVisibleValue.visible(true);
        }
        else
        {
            isVisibleValue.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustBankAccount_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CustBankAccounts, CustBankAccount), FormDataSourceEventType::Initialized)]
    public static void CustBankAccount_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        SKS_EFT_CustomerPaym msks_eft_customerpaym;    
        FormRun formRun = sender.formRun();
        QueryBuildRange qbrBank;
        QueryBuildRange qbrCust;
        
        var overrides = SKS_CustBankAccountsEventHandler::construct();

        sender.object(fieldNum(CustBankAccount, SKS_EFT_PreNoteStatus)).registerOverrideMethod(methodStr(FormDataObject, validate),
            methodStr(SKS_CustBankAccountsEventHandler, SKS_EFT_PreNoteStatus_OnValidated), overrides);

        if(formRun.args().dataset()    ==  tableNum(CustTable))
        {
            if(msks_eft_customerpaym.CustBankAccountId)
            {
                qbrCust = sender.query().dataSourceNo(1).addRange(fieldnum(CustBankAccount, AccountID));
                qbrCust.value(msks_eft_customerpaym.CustBankAccountId);
        
                qbrBank = sender.query().dataSourceNo(1).addRange(fieldnum(CustBankAccount, CustAccount));
                qbrBank.value(formRun.args().record().(fieldname2id(formRun.args().dataset(),fieldstr(CustTable, AccountNum))));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PreNoteStatus_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_EFT_PreNoteStatus), FormDataFieldEventType::Modified)]
    public static void SKS_EFT_PreNoteStatus_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        SKS_EB_PreNoteStatus currentPreNoteStatus;
        SKS_EB_PreNoteStatus mOrigPreNoteStatus;
        CustBankAccount custBankAccount = sender.datasource().cursor();
        
        ttsbegin;            
        currentPreNoteStatus = custBankAccount.SKS_EFT_PreNoteStatus;

        if(mOrigPreNoteStatus != currentPreNoteStatus)
        {
            if(custBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::New && mOrigPreNoteStatus != SKS_EB_PreNoteStatus::New)
            {
                info("@SKS1864");
                custBankAccount.SKS_EFT_PreNoteDate = dateNull();
            }
            else if(custBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::Approved && mOrigPreNoteStatus == SKS_EB_PreNoteStatus::Pending)
            {
                info("@SKS1575");
                custBankAccount.SKS_EFT_PreNoteDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
            
        mOrigPreNoteStatus = custBankAccount.SKS_EFT_PreNoteStatus;            
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PreNoteStatus_OnValidated</Name>
				<Source><![CDATA[
    public boolean SKS_EFT_PreNoteStatus_OnValidated(FormDataObject sender)
    {
        boolean ret;
        SKS_EB_PreNoteStatus currentPreNoteStatus;
        CustBankAccount custBankAccount;
        SKS_EB_PreNoteStatus mOrigPreNoteStatus;
        SKS_EFT_CustomerPaym sks_custPaym;
        SKS_EFT_FileFormat sks_eft_fileformat;
        SKS_EFT_FileFormatPaymSpec sks_eft_fileformatpaymspec;       
        SKS_EFT_CustomerPaym msks_eft_customerpaym;        
        FormRun formRun = sender.datasource().formRun();        
        SKS_EFT_Setup msks_eft_setup = SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(formRun);
        ret = sender.validate();

        currentPreNoteStatus = custBankAccount.SKS_EFT_PreNoteStatus;

        if(ret && mOrigPreNoteStatus != currentPreNoteStatus)
        {
            changeCompany(msks_eft_setup.dataAreaId)
            {
                switch(custBankAccount.SKS_EFT_PreNoteStatus)
                {
                    case SKS_EB_PreNoteStatus::NotApplicable:
                        select firstonly sks_custPaym
                            where sks_custPaym.CustAccount == custBankAccount.CustAccount &&
                                sks_custPaym.CustBankAccountId == custBankAccount.AccountID
                            join PreNote, FormatId from sks_eft_FileFormat 
                            where sks_eft_FileFormat.FormatId == sks_custPaym.FormatId &&
                                sks_eft_FileFormat.PreNote == NoYes::Yes
                            join PreNote, FormatId, PaymSpec from sks_eft_fileformatpaymspec 
                            where sks_eft_fileformatpaymspec.FormatId == sks_custPaym.FormatId &&
                                sks_eft_fileformatpaymspec.PaymSpec == sks_custpaym.PaymSpec &&
                                sks_eft_fileformatpaymspec.PreNote == NoYes::Yes;
        
                        if(sks_custPaym) // Prenotes on for spec and in use by customer so can't set to Not applicable
                        {
                            return   checkfailed("@SKS1571");
                        }
                        break;    
                    case SKS_EB_PreNoteStatus::Pending:
                        if(mOrigPreNoteStatus != SKS_EB_PreNoteStatus::Pending)
                        {
                            return  checkfailed("@SKS1572");
                        }
                        break;    
                    case SKS_EB_PreNoteStatus::Approved:
                        if(mOrigPreNoteStatus == SKS_EB_PreNoteStatus::New || mOrigPreNoteStatus == SKS_EB_PreNoteStatus::NotApplicable)
                        {
                            return  checkfailed("@SKS1573");
                        }
                        break;    
                    default:
                        break;
                }
            }
            return  true;            
        }            
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_changePreNoteStatus</Name>
				<Source><![CDATA[
    public static void SKS_changePreNoteStatus(CustBankAccount _custBankAccount, SKS_EFT_Setup msks_eft_setup)
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        SKS_EFT_FileFormatPaymSpec sks_eft_fileformatpaymspec;
        SKS_EFT_CustomerPaym sks_eft_customerpaym;
        SKS_EB_PreNoteStatus mOrigPreNoteStatus;

        if(_custBankAccount.SKS_EFT_PreNoteStatus != SKS_EB_PreNoteStatus::New)
        {
            changeCompany(msks_eft_setup.dataAreaId)
            {
                select firstonly prenote, formatid from sks_eft_fileformat
                    where sks_eft_fileformat.PreNote == NoYes::Yes
                    join formatid, paymspec, custbankaccountid from sks_eft_customerpaym
                    where sks_eft_customerpaym.CustBankAccountId == _custBankAccount.AccountID && 
                        sks_eft_customerpaym.FormatId == sks_eft_fileformat.FormatId && 
                        sks_eft_customerpaym.CustAccount == _custBankAccount.AccountNum
                    join prenote, formatid, paymspec from sks_eft_fileformatpaymspec
                    where sks_eft_fileformatpaymspec.FormatId == sks_eft_customerpaym.FormatId &&
                        sks_eft_fileformatpaymspec.PaymSpec == sks_eft_customerpaym.PaymSpec && 
                        sks_eft_fileformatpaymspec.PreNote == NoYes::Yes;
    
                if(sks_eft_fileformat && msks_eft_setup.ARReqPreNote)
                {
                    _custBankAccount.SKS_EFT_PreNoteStatus = SKS_EB_PreNoteStatus::New;
                    mOrigPreNoteStatus = SKS_EB_PreNoteStatus::New;
                    _custBankAccount.SKS_EFT_PreNoteDate = global::dateNull();
                    info("@SKS1864");
                }    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_setAccountApprovalEnabled</Name>
				<Source><![CDATA[
    static void SKS_setAccountApprovalEnabled(FormRun  _formRun)
    {
        FormDesign formDesign = _formRun.design();
        FormGroupControl accountApproval = formDesign.controlName(formControlStr(CustBankAccounts, AccountApproval));
        FormDataSource custBankAccount_ds = _formRun.dataSource(formDataSourceStr(CustBankAccounts, CustBankAccount)) as FormDataSource;
        CustBankAccount custBankAccount = custBankAccount_ds.cursor();
        FormComboBoxControl custBankAccount_SKS_EFT_AcctStatus = formDesign.controlName(formControlStr(CustBankAccounts, CustBankAccount_SKS_EFT_AcctStatus));
        SKS_EFT_Setup msks_eft_setup = SKS_CustBankAccountsEventHandler::getSKS_EFT_Setup(_formRun);
        //SKS FDD 9536 -->
        FormGroupControl IHB_WireIntermediaryBank = formDesign.controlName(formControlStr(CustBankAccounts, SKS_IHB_WireIntermediaryBank));
        FormGroupControl IHB_WireCreditParty = formDesign.controlName(formControlStr(CustBankAccounts, SKS_IHB_WireCreditParty));
        //SKS FDD 9536 <--

        if(msks_eft_setup.CNPAcctApproval == NoYes::No)
        {
            accountApproval.visible(false);
        }
        else
        {
            //if(msks_eft_setup.APApproverChangeInfo == NoYes::Yes)
            //{
            //    //Sks_Bug_7538 --->
            //    if(SKS_CustBankAccountsEventHandler::SKS_getUserGroupList(_formRun))
            //    {
            //        //Sks_Bug_7538 <---
            //        CustBankAccount_ds.object(fieldnum(CustBankAccount, Name)).allowedit(false);
            //        CustBankAccount_ds.object(fieldnum(CustBankAccount, BankGroupID)).allowedit(false);
            //        CustBankAccount_ds.object(fieldnum(CustBankAccount, BankCodeType)).allowedit(false);
            //        CustBankAccount_ds.object(fieldnum(CustBankAccount, RegistrationNum)).allowedit(false);
            //        CustBankAccount_ds.object(fieldnum(CustBankAccount, AccountNum)).allowedit(false);
            //        CustBankAccount_ds.object(fieldnum(CustBankAccount, SWIFTNo)).allowedit(false);
            //        CustBankAccount_ds.object(fieldnum(CustBankAccount, BankIBAN)).allowedit(false);
            //        CustBankAccount_ds.object(fieldnum(CustBankAccount, BankAccountType)).allowedit(false);
            //        //Sks_Bug_7538 --->

            //        //SKS FDD 9536 -->
            //        IHB_WireIntermediaryBank.enabled(false);
            //        IHB_WireCreditParty.enabled(false);
            //        //SKS FDD 9536 <--
            //    }
            //    //Sks_Bug_7538 <----
            //}
            
            accountApproval.visible(true);
            
            if(custBankAccount.SKS_EFT_AcctStatus != SKS_EFT_AcctApprovalStatus::Approved &&
               custBankAccount.SKS_EFT_AcctModifier != curuserid() &&
               SKS_CustBankAccountsEventHandler::SKS_getUserGroupList(_formRun))//Sks_Bug_7538
            {
                custBankAccount_SKS_EFT_AcctStatus.enabled(true);
            }
            else
            {
                custBankAccount_SKS_EFT_AcctStatus.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_Setup</Name>
				<Source><![CDATA[
    public static SKS_EFT_Setup getSKS_EFT_Setup(FormRun  _formRun)
    {
        SKS_EFT_Setup msks_eft_setup;
        SKS_EFT_CustReimbursementPaym mSKS_EFT_CustReimbursementPaym;

        if (_formRun.args().parm())
        {
            mSKS_EFT_CustReimbursementPaym = SKS_CustBankAccountsEventHandler::getSKS_EFT_CustReimbursementPaym(_formRun.args().parm());
            changeCompany(mSKS_EFT_CustReimbursementPaym.company())
            {
                select msks_eft_setup;
            }
        }
        else
        {
            select msks_eft_setup;
        }

        return msks_eft_setup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_CustReimbursementPaym</Name>
				<Source><![CDATA[
    public static SKS_EFT_CustReimbursementPaym getSKS_EFT_CustReimbursementPaym(str _parmValue)
    {
        SKS_EFT_CustReimbursementPaym mSKS_EFT_CustReimbursementPaym;

        if (_parmValue)
        {
            select crosscompany mSKS_EFT_CustReimbursementPaym where mSKS_EFT_CustReimbursementPaym.RecId == str2int64(_parmValue);
        }
        return mSKS_EFT_CustReimbursementPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_getUserGroupList</Name>
				<Source><![CDATA[
    static boolean SKS_getUserGroupList(FormRun  _formRun)
    {
        boolean ret;
        UserGroupList   usergrouplist;
        
        select * from usergrouplist where usergrouplist.userid == curuserid() && usergrouplist.groupId == SKS_CustBankAccountsEventHandler::getSKS_EFT_Setup(_formRun).CNPAccountApprGroup;
        
        if(usergrouplist)
        {
            ret = true;
        }
        else
        {
            ret = false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BankAccountType_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, BankAccountType), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, BankGroupID), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, BankIBAN), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, RegistrationNum), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SWIFTNo), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, AccountNum), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankId), FormDataFieldEventType::Modified), // SKS FDD 9536 -->//
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankSwift), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankAcct), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankName), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankBranch), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankAddr), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankAddr2), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankCity), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WIntBankCountryRegionId), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WCrePartyBankId), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WCrePartySwift), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WCrePartyAcct), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WCrePartyBankName), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WCrePartyName), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WCrePartyAddr), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WCrePartyCity), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_IHB_WCrePartyCountryRegionId), FormDataFieldEventType::Modified)] // SKS FDD 9536 <--//
    public static void BankAccountType_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource CustBankAccount_ds = sender.dataSource();
        FormRun form = CustBankAccount_ds.formRun();

        //SKS_CustBankAccountsEventHandler::SKS_changePreNoteStatus(form);
        SKS_CustBankAccountsEventHandler::SKS_changeAccountApproval(form);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_changeAccountApproval</Name>
				<Source><![CDATA[
    static void SKS_changeAccountApproval(FormRun  _formRun)
    {
        FormDataSource  CustBankAccount_ds = _formRun.dataSource(formDataSourceStr(CustBankAccounts, CustBankAccount)) as FormDataSource;
        CustBankAccount CustBankAccount = CustBankAccount_ds.cursor();
        FormComboBoxControl CustBankAccount_SKS_EFT_AcctStatus = _formRun.Design().controlName(formControlStr(CustBankAccounts,CustBankAccount_SKS_EFT_AcctStatus));
        
        if(SKS_CustBankAccountsEventHandler::getSKS_EFT_Setup(_formRun).CNPAcctApproval == NoYes::Yes)
        {
            CustBankAccount.SKS_EFT_AcctStatus = SKS_EFT_AcctApprovalStatus::Pending;
            CustBankAccount.SKS_EFT_AcctModifier = curuserid();
            CustBankAccount.SKS_EFT_AcctModifiedDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            CustBankAccount.SKS_EFT_AcctApprover = '';
            CustBankAccount.SKS_EFT_AcctApprovalDate = dateNull();
            
            // Disable field in case this user was allowed to approve and has now changed a field
            CustBankAccount_SKS_EFT_AcctStatus.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_AcctStatus_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(CustBankAccounts, CustBankAccount, SKS_EFT_AcctStatus), FormDataFieldEventType::Modified)]
    public static void SKS_EFT_AcctStatus_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource custBankAccount_ds = sender.datasource();
        CustBankAccount custBankAccount = custBankAccount_ds.cursor();

        ttsbegin;
        if(custBankAccount.SKS_EFT_AcctStatus == SKS_EFT_AcctApprovalStatus::Approved)
        {
            custBankAccount.SKS_EFT_AcctApprover = curuserid();
            custBankAccount.SKS_EFT_AcctApprovalDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            custBankAccount.SKS_EFT_AcctApprover = '';
            custBankAccount.SKS_EFT_AcctApprovalDate = dateNull();
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>