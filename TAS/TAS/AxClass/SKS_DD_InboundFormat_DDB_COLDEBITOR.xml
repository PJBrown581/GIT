<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_InboundFormat_DDB_COLDEBITOR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_InboundFormat_DDB_COLDEBITOR extends SKS_DD_InboundFormat
{
    str mFileName;
    str mFileID;
    str mFieldDelimiter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_sks_BF_BankIntType);

        str rtnval = '';
        int classId;
        CommaStreamIo locCommaIo;
        int i;//index of the current location in the container
        container locRecord;
        //BEGIN VALIDATION VARIABLES
        boolean FirstRecordFound = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none
        //END VALIDATION VARIABLES
        ;

        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locCommaIo = CommaStreamIo::ConstructForRead(fileHub.StreamGet());
        locCommaIo.inRecordDelimiter(';');
        mFieldDelimiter = ',';
        locCommaIo.inFieldDelimiter(mFieldDelimiter);
        while(locCommaIo.status() == IO_Status::Ok)
        {
            locRecord = locCommaIo.read();

            if(conLen(locRecord) > 0 )
            {
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }

                if(strUpr(conPeek(locRecord,1)) == 'COLDEBITOR')
                {
                    FirstRecordFound = true;
                }
            }
            if(FirstRecordFound)
            {
                break;
            }
        }
        if(FirstRecordFound)
        {
            //ALl Qualifers show this a
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        if(locCommaIo)
        {
            locCommaIo.finalize();
            locCommaIo = null;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public boolean getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_sks_BF_BankIntType);
        TextStreamIo locTextIo;
        container locRecord;
        System.String locString;
        int i;  //index of the current location in the container

        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locTextIo = TextStreamIo::ConstructForRead(fileHub.StreamGet());

        locTextIo.inRecordDelimiter(';');
        locTextIo.inFieldDelimiter(',');

        while(locTextIo.status() == IO_Status::Ok)
        {
            locRecord = locTextIo.read();
            if(conLen(locRecord) > 0)
            {
                //Remove any carriage Returns
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }
                locString  = strRem(strLRTrim(conPeek(locRecord, 1)), '"');

                if(!System.String::IsNullOrEmpty(locString))
                {
                    if(locString.StartsWith('COLDEBITOR'))
                    {
                        this.processRecord(locRecord);
                    }
                }
            }
           
        }
        if(locTextIo)
        {
            locTextIo.finalize();
            locTextIo = null;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord(container _CurrentRecord)
    {
        SKS_EB_BankRegisterStatus	locBankRegisterStatus;
        SKS_EB_MandateType			locMandateScheme;
        CustAccount					locCustAccountNumber;

        str locEffectiveDateStr, locEndDateStr, locDebtorNumber,locCollectionType;
        SKS_EB_DateTime locEffectiveDate, locEndDate;
        str locDay, locMonth, locYear;

        if(strLen(con2Str(_CurrentRecord)) > 0)
        {

            locEffectiveDateStr = strRem(strLRTrim(conPeek(_CurrentRecord, 8)), '"');
            locEndDateStr = strRem(strLRTrim(conPeek(_CurrentRecord, 9)), '"');

            locYear = SKS_PP_StringFormats::strSub(locEffectiveDateStr,1,4);
            locMonth = SKS_PP_StringFormats::strSub(locEffectiveDateStr,5,2);
            locDay = SKS_PP_StringFormats::strSub(locEffectiveDateStr,7,2);

            locEffectiveDate = DateTimeUtil::newDateTime(str2Date(locDay + '-' + locMonth + '-'+ locYear, 123),0);

            locYear = SKS_PP_StringFormats::strSub(locEndDateStr,1,4);
            locMonth = SKS_PP_StringFormats::strSub(locEndDateStr,5,2);
            locDay = SKS_PP_StringFormats::strSub(locEndDateStr,7,2);
  
            locEndDate = DateTimeUtil::newDateTime(str2Date(locDay + '-' + locMonth + '-'+ locYear, 123),0);

            locDebtorNumber = strRem(strLRTrim(conPeek(_CurrentRecord, 10)), '"');
            locBankRegisterStatus = (strLen(locDebtorNumber) == 0)? SKS_EB_BankRegisterStatus::Rejected : SKS_EB_BankRegisterStatus::Accepted;

            locCollectionType = strRem(strLRTrim(conPeek(_CurrentRecord, 6)), '"');
            if(locCollectionType == '101')
            {
                locMandateScheme = SKS_EB_MandateType::Betalings;
            }
            else if(locCollectionType == '103')
            {
                locMandateScheme = SKS_EB_MandateType::Leverander;
            }

            locCustAccountNumber = strRem(strLRTrim(conPeek(_CurrentRecord, 5)), '"');

            this.setMandateStatus(locCustAccountNumber, locBankRegisterStatus, locEffectiveDate, locEndDate,''/*no mandate number for DDB_COLDEBTOR*/, locMandateScheme);
        }       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>