<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PreliminaryRemitAdvice_Emailing</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.SSRSReportRuntime.Instrumentation;
class SKS_PreliminaryRemitAdvice_Emailing
{
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAttachmentToMail</Name>
				<Source><![CDATA[
    public void addAttachmentToMail(SKS_EFTAP_File _sks_EFTAP_File,
        Filename                _attachmentFileName,
        SRSReportFileFormat     _fileFormat,
        Name                    _srsControllerClass,
        AccountNum              _custAccount,
        SysMailerMessageBuilder _messageBuilder,
        NoYes                   _advEmail,
        NoYes                   _callerPrintRemitButton = NoYes::No // CR-9196        
       )
                
    {

        SRSReportRunService             srsReportRunService = new SrsReportRunService();
        Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService.ParameterValue[]  parameterValueArray;
        Map                             reportParametersMap;
        SRSReportExecutionInfo          executionInfo = new SRSReportExecutionInfo();
        System.Byte[]                   reportBytes = null;
        SKS_DDR_AttachAdviceController  ddRController;
        SKS_DDRA_AttachAdviceController ddrAController;
        SRSProxy                        srsProxy;
        SKS_DDR_RemitAttachContract     remitAttachDataContract = new SKS_DDR_RemitAttachContract();
        SRSPrintDestinationSettings     settings;
        Filename                        attachmentFileName = _attachmentFileName;
        SKS_EFT_FileDetail              report_EFT_fileDetail;
        SKS_DDR_RemitAttachReportTmp    locSKS_DDR_RemitAttachReportTmp;
        Args                            args = new Args(); // CR-9196
        LanguageId                      languageId; // CR 10257

        select firstonly report_EFT_fileDetail
            where report_EFT_fileDetail.FileRecId   == _sks_EFTAP_File.RecId
                && report_EFT_fileDetail.AccountNum == _custAccount;                

        attachmentFileName = SKS_FileNameReplace::replaceDateFormatValue(attachmentFileName,dateNull(),true); // 10265
        attachmentFileName = strReplace(attachmentFileName,'%AccountNum%', report_EFT_fileDetail.AccountNum);
        attachmentFileName = strReplace(attachmentFileName,'%CompanyName%', report_EFT_fileDetail.company());
        attachmentFileName = strReplace(attachmentFileName,'%DDFileNumber%', _sks_EFTAP_File.FileNbr);

        remitAttachDataContract.parmSKS_EFTAP_File_RecordId(_sks_EFTAP_File.RecId);
        remitAttachDataContract.parmCustAccount(_custAccount);
        remitAttachDataContract.parmPaymentCompany(report_EFT_fileDetail.PaymentCompany ?report_EFT_fileDetail.PaymentCompany : report_EFT_fileDetail.DataAreaId); //FDD-10590

        args.menuItemType(MenuItemType::Output); // CR-9196
        //messageBuilder = new SysMailerMessageBuilder();
        // Provide details to controller and add contract
        if (_advEmail)
        {
            ddrAController = SKS_DDRA_AttachAdviceController::construct(_srsControllerClass);
            
            ddrAController.parmShowDialog(false);
            ddrAController.parmLoadFromSysLastValue(false);
        
            //remitAttachDataContract.parmSKS_EFTAP_File_RecordId(_sks_EFTAP_File.RecId);
            ddrAController.parmReportContract().parmRdpContract(remitAttachDataContract);
            // Provide printer settings
            settings = ddrAController.parmReportContract().parmPrintSettings();
            // CR-9196 -->
            if(_callerPrintRemitButton)
            {
                if(attachmentFileName)
                {
                    ddrAController.parmDialogCaption(attachmentFileName);
                }
                args.menuItemName(identifierStr(SKS_DDRA_RemitAttachController));
                ddrAController.parmArgs(args);
                settings.printMediumType(SRSPrintMediumType::Screen);
            }
            else
            {
                // CR-9196 <--
                settings.printMediumType(SRSPrintMediumType::File);
                // CR-9196 -->
            }
            // CR-9196 <--
            settings.fileFormat(_fileFormat);

            // Below is a part of code responsible for rendering the report
            ddrAController.parmReportContract().parmReportServerConfig(SRSConfiguration::getDefaultServerConfiguration());
            ddrAController.parmReportContract().parmReportExecutionInfo(executionInfo);
            //CR-10257 --->
            languageId = this.findReportLanguageId(report_EFT_fileDetail);
            if(_srsControllerClass == identifierStr(SKS_DDRA_BS_RemitAttachController) && languageId)
            {
                ddrAController.parmReportContract().parmRdlContract().parmLanguageID(languageId);
                ddrAController.parmReportContract().parmRdlContract().parmLabelLanguageId(languageId);
            }
            // CR-10257 <---
            srsReportRunService.getReportDataContract(ddrAController.parmreportcontract().parmReportName());
            srsReportRunService.preRunReport(ddrAController.parmreportcontract());
            // CR-9196 -->
            if(_callerPrintRemitButton)
            {
                ddrAController.runReport();
            }
            else
            {
                // CR-9196 <--
                reportParametersMap = srsReportRunService.createParamMapFromContract(ddrAController.parmReportContract());
                parameterValueArray = SrsReportRunUtil::getParameterValueArray(reportParametersMap);

                srsProxy = SRSProxy::constructWithConfiguration(ddrAController.parmReportContract().parmReportServerConfig());
                // Actual rendering to byte array
                reportBytes = srsproxy.renderReportToByteArray(ddrAController.parmreportcontract().parmreportpath(),
                                                      parameterValueArray,
                                                      settings.fileFormat(),
                                                      settings.deviceinfo());
                // CR-9196 -->
            }
            // CR-9196 <--
        }
        else
        {
            ddRController = SKS_DDR_AttachAdviceController::construct(_srsControllerClass);

            ddRController.parmShowDialog(false);
            ddRController.parmLoadFromSysLastValue(false);
        
            ddRController.parmReportContract().parmRdpContract(remitAttachDataContract);
            // Provide printer settings
            settings = ddRController.parmReportContract().parmPrintSettings();
            // CR-9196 -->
            if(_callerPrintRemitButton)
            {
                if(attachmentFileName)
                {
                    ddRController.parmDialogCaption(attachmentFileName);
                }
                args.menuItemName(identifierStr(SKS_DDR_RemitAttachController));
                ddRController.parmArgs(args);
                settings.printMediumType(SRSPrintMediumType::Screen);
            }
            else
            {
                // CR-9196 <--
                settings.printMediumType(SRSPrintMediumType::Email);
                // CR-9196 -->
            }
            // CR-9196 <--
            settings.fileFormat(_fileFormat);

            // Below is a part of code responsible for rendering the report
            ddRController.parmReportContract().parmReportServerConfig(SRSConfiguration::getDefaultServerConfiguration());
            ddRController.parmReportContract().parmReportExecutionInfo(executionInfo);
            //CR-10257 --->
            languageId = this.findReportLanguageId(report_EFT_fileDetail);
            if(_srsControllerClass == identifierStr(SKS_DDR_BS_RemitAttachController) && languageId)
            {
                ddRController.parmReportContract().parmRdlContract().parmLanguageID(languageId);
                ddRController.parmReportContract().parmRdlContract().parmLabelLanguageId(languageId);
            }
            // CR-10257 <---
            srsReportRunService.getReportDataContract(ddRController.parmreportcontract().parmReportName());
            srsReportRunService.preRunReport(ddRController.parmreportcontract());
            // CR-9196 -->
            if(_callerPrintRemitButton)
            {
                ddRController.runReport();
            }
            else
            {
                // CR-9196 <--
                
                // 19239 Docentric integration 03Jun2022 ->
                SKS_RenderResult renderResult = new SKS_RenderResult();
                this.renderAttachment(ddRController, renderResult);
                reportBytes = renderResult.reportBytes();

                if (!reportBytes)
                {
                    reportParametersMap = srsReportRunService.createParamMapFromContract(ddRController.parmReportContract());
                    parameterValueArray = SrsReportRunUtil::getParameterValueArray(reportParametersMap);

                    srsProxy = SRSProxy::constructWithConfiguration(ddRController.parmReportContract().parmReportServerConfig());
                    // Actual rendering to byte array
                    reportBytes = srsproxy.renderReportToByteArray(ddRController.parmreportcontract().parmreportpath(),
                                                      parameterValueArray,
                                                      settings.fileFormat(),
                                                      settings.deviceinfo());
                // CR-9196 -->
                }
                // 19239 Docentric integration 03Jun2022 <-
                // CR-9196 <--
            }
            // CR-9196 <--
        }
        delete_from locSKS_DDR_RemitAttachReportTmp;
        // CR-9196 -->
        if(!_callerPrintRemitButton)
        {
            _messageBuilder.addAttachment(new System.IO.MemoryStream(reportBytes), attachmentFileName);
        }
        // CR-9196 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAPAttachmentToMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// 
    /// </summary>
    /// <param name = "_sks_EFTAP_File"></param>
    /// <param name = "_attachmentFileName"></param>
    /// <param name = "_fileFormat"></param>
    /// <param name = "_srsControllerClass"></param>
    /// <param name = "_vendAccount"></param>
    /// <param name = "_messageBuilder"></param>
    /// <param name = "_callerPrintRemitButton"></param>
    /// <param name = "_IHB"></param>
    /// <param name = "_reportColumnOptions"></param>
    // CR-9496 start
    public void addAPAttachmentToMail(SKS_EFTAP_File _sks_EFTAP_File,
        SKS_EFT_FileDetail              report_EFT_fileDetail,
        Filename                _attachmentFileName,
        SRSReportFileFormat     _fileFormat,
        Name                    _srsControllerClass,        
		SysMailerMessageBuilder _messageBuilder,
        NoYes                   _callerPrintRemitButton = NoYes::No,
        BankAccountID           _IHB = '', //SKS IHB 9615
        container               _reportColumnOptions = conNull()//16746 added as a container to support future field options       
        )
                
    {

        SRSReportRunService             srsReportRunService = new SrsReportRunService();
        Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService.ParameterValue[]  parameterValueArray;
        Map                             reportParametersMap;
        SRSReportExecutionInfo          executionInfo = new SRSReportExecutionInfo();
        System.Byte[]                   reportBytes = null;
        SKS_APR_AttachAdviceController  apRController;
        SRSProxy                        srsProxy;
        SKS_APR_RemitAttachContract     remitAttachDataContract = new SKS_APR_RemitAttachContract();
        SRSPrintDestinationSettings     settings;
        Filename                        attachmentFileName = _attachmentFileName;      
        SKS_APR_RemitAttachReportTmp    locSKS_APR_RemitAttachReportTmp;
        Args                            args = new Args();
       
        attachmentFileName = SKS_FileNameReplace::replaceDateFormatValue(attachmentFileName,dateNull(),true); // 10265
        attachmentFileName = strReplace(attachmentFileName,'%AccountNum%', report_EFT_fileDetail.AccountNum);
        attachmentFileName = strReplace(attachmentFileName,'%CompanyName%', report_EFT_fileDetail.company());
        attachmentFileName = strReplace(attachmentFileName,'%APFileNumber%', _sks_EFTAP_File.FileNbr);

        remitAttachDataContract.parmSKS_EFTAP_File_RecordId(_sks_EFTAP_File.RecId);
        remitAttachDataContract.parmVendAccount(report_EFT_fileDetail.AccountNum);
        remitAttachDataContract.parmIHB(_IHB); //SKS IHB 9615
        remitAttachDataContract.parmPaymentCompany(report_EFT_fileDetail.PaymentCompany ?report_EFT_fileDetail.PaymentCompany : report_EFT_fileDetail.DataAreaId); //FDD-10590
        remitAttachDataContract.parmAccountCompany(report_EFT_fileDetail.AccountCompany);
        remitAttachDataContract.parmBankAccountID(report_EFT_fileDetail.BankAccountId);
        remitAttachDataContract.parmHideDueDate(conPeek(_reportColumnOptions,1));

        remitAttachDataContract.parmIsRemitAttachControllerV2(this.SetV2Report(_srsControllerClass));//Added as extension point

        args.menuItemType(MenuItemType::Output); 
        // Provide details to controller and add contract
        
        apRController = SKS_APR_AttachAdviceController::construct(_srsControllerClass);

        apRController.parmShowDialog(false);
        apRController.parmLoadFromSysLastValue(false);
        
        apRController.parmReportContract().parmRdpContract(remitAttachDataContract);
        // Provide printer settings
        settings = apRController.parmReportContract().parmPrintSettings();
        
        if(_callerPrintRemitButton)
        {
            if(attachmentFileName)
            {
                apRController.parmDialogCaption(attachmentFileName);
            }
            args.menuItemName(identifierStr(SKS_APR_RemitAttachController));
            apRController.parmArgs(args);
            settings.printMediumType(SRSPrintMediumType::Screen);
        }
        else
        {
            settings.printMediumType(SRSPrintMediumType::Email);
        }
        settings.fileFormat(_fileFormat);

        // Below is a part of code responsible for rendering the report
        apRController.parmReportContract().parmReportServerConfig(SRSConfiguration::getDefaultServerConfiguration());
        apRController.parmReportContract().parmReportExecutionInfo(executionInfo);

        srsReportRunService.getReportDataContract(apRController.parmreportcontract().parmReportName());
        srsReportRunService.preRunReport(apRController.parmreportcontract());
        if(_callerPrintRemitButton)
        {
            apRController.runReport();
        }
        else
        {
            // 19239 Docentric integration 03Jun2022 ->
            SKS_RenderResult renderResult = new SKS_RenderResult();
            this.renderAPAttachment(apRController, renderResult);
            reportBytes = renderResult.reportBytes();

            if (!reportBytes)
            {
                reportParametersMap = srsReportRunService.createParamMapFromContract(apRController.parmReportContract());
                parameterValueArray = SrsReportRunUtil::getParameterValueArray(reportParametersMap);

                srsProxy = SRSProxy::constructWithConfiguration(apRController.parmReportContract().parmReportServerConfig());
                // Actual rendering to byte array
                reportBytes = srsproxy.renderReportToByteArray(apRController.parmreportcontract().parmreportpath(),
                                                    parameterValueArray,
                                                    settings.fileFormat(),
                                                    settings.deviceinfo());
            }
            // 19239 Docentric integration 03Jun2022 <-
        }
        
        delete_from locSKS_APR_RemitAttachReportTmp;
        
        if(!_callerPrintRemitButton)
        {
            _messageBuilder.addAttachment(new System.IO.MemoryStream(reportBytes), attachmentFileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportLanguageId</Name>
				<Source><![CDATA[
    /// <summary>
    /// To find the SRS report language based on setup.
    /// </summary>
    /// <param name = "_report_EFT_fileDetail">It contains the <C>SKS_EFT_FileDetail</C>.</param>
    /// <returns>Return language id.</returns>
    //  CR-10257
    public LanguageId findReportLanguageId(SKS_EFT_FileDetail  _report_EFT_fileDetail)
    {
        LanguageId                      languageId; 
        SKS_LB_Depositor                sKS_LB_Depositor;

        sKS_LB_Depositor = SKS_LB_Depositor::find(_report_EFT_fileDetail.AccountCompany, _report_EFT_fileDetail.AccountNum);
        if(sKS_LB_Depositor.EMTemplateFromBank)
        {
            languageId = SKS_EFTAR_Bank::find(_report_EFT_fileDetail.BankAccountId, _report_EFT_fileDetail.PaymMode).AREMTemplateLanguage;
        }
        else
        {
            languageId = sKS_LB_Depositor.EMTemplateLanguage;
        }
        return languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetV2Report</Name>
				<Source><![CDATA[
    public boolean SetV2Report(Name _srsControllerClass)
    {
        boolean ret;
        //SKS 14816, RemitAttachControllerV2 -->
        if (_srsControllerClass == classStr(SKS_APR_RemitAttachControllerV2))
        {
            ret = true;
        }
        //SKS 14816, RemitAttachControllerV2 <--

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAttachment</Name>
				<Source><![CDATA[
    // 19239 Docentric integration 03Jun2022
    delegate void renderAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAPAttachment</Name>
				<Source><![CDATA[
    // 19239 Docentric integration 03Jun2022
    delegate void renderAPAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>