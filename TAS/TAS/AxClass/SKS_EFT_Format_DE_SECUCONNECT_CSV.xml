<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_DE_SECUCONNECT_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_DE_SECUCONNECT_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_DE_SECUCONNECT_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220429')
    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Details
            this.rec_Details();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //---------------------------------------------------------------------------------
        str value;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1  Name
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_VendAddress.BeneName, true));
    
        // 2   Vorname
        sb.Append(this.wrapField(''));
    
        // 3    Amount
        sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0)));
    
        select TransactionTxt from  mSKS_EFT_FileDetail_PaymentLine
            where mSKS_EFT_FileDetail_PaymentLine.RefRecId == mSKS_EFT_FileDetail.RecId;
        // 4 Purpose
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_PaymentLine.TransactionTxt));
        
        value = subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 2);
    
        //6    BIC
        if(value != 'DE')
        {
            //5  IBAN
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN));
    
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo));
        }
        else
        {
            //5  IBAN
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN));
            sb.Append(#Separator);
        }

        //7   User ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum,false, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    public boolean rec_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append(this.wrapField('Name'));

        sb.Append(this.wrapField('Vorname'));
    
        sb.Append(this.wrapField('Amount'));
    
        sb.Append(this.wrapField('Purpose'));
    
        sb.Append(this.wrapField('IBAN'));
    
        sb.Append(this.wrapField('BIC'));

        sb.Append(this.wrapField('User ID', false, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _Quote = false, boolean _addSeparator = true)
    {
        if(_addSeparator)
        {
            if(_Quote && _field != '')
            {
                return #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                return _field + #Separator;
            }
        }
        else
        {
            if(_Quote && _field != '')
            {
                return #DoubleQuote + _field + #DoubleQuote;
            }
            else
            {
                return _field;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
        join mSKS_EFT_FileDetail_VendAddress
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId ;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>