<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_PL_MBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_PL_MBANK_XML
/// </summary>
Class SKS_EFT_Format_PL_MBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    //------------------------------------------------------------------------------------------------------
    /// <summary>
    /// Poland MBank
    /// </summary>
    //------------------------------------------------------------------------------------------------------
    #define.FormatVersion('20221212')
    #define.DOM('DOM')
    #define.SORBNET('SORBNET')
    #define.ELIXIR('ELIXIR')
    #define.BLUE_CASH('BLUE-CASH')
    #define.DOM_NPLN('DOM-NPLN')
    #define.INTRL_CUR('INTRL-CUR')
    #define.FRGN('FRGN')
    #define.TAX('TAX')
    #define.EURO_EKSP('EURO-EKSP')
    #define.SEPA('SEPA')
    #define.SEPA_PRSN('SEPA-PRSN')

    str invDetails;
    AmountMST amt;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        //                          9.1.17: SchmeNm
        //                              9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str     w01, w02;

        w01 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DebtorId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        w02 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DebtorSchemeNm', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if((mSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo || w01) &&
            mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'SEPA-PRSN')
        {
            //          9.1.12: Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'BICOrBEI', mSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo);
            }
            else if(w01)
            {
                //                  9.1.15: Othr
                nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
                //                      9.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', w01, 35);
 
                //                          9.1.17: SchmeNm
                nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
                //                              9.1.18: Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', W02);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------

        //Override in format if element needed
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_PmtTpInf_InstrPrty
    /// </summary>
    /// <param name = "_nodePmftTpInf">_nodePmftTpInf</param>
    protected void node_CdtTrfTxInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.7: InstrPrty
        //------------------------------------------------------------------------------------------------------
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DOM_NPLN:
            case #FRGN:
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty', mSKS_EFT_FileDetail.RecId));
                break;
        }
        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', value, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;

        //          2.80: CdtrAcct
        nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
        //              Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.DepBankIBAN != ''                    &&
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EURO_EKSP ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA))
        {
            //                  IBAN
            nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
        }         
        else if(mSKS_EFT_FileDetail.DepBankAcct)
        {
            //                  Othr
            nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct, 26);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //          or
        //              PrvtId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str CdtrId;
        str typeOfId;

        cdtrId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrId', mSKS_EFT_FileDetail.RecId));
        typeOfId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TypeOfId', mSKS_EFT_FileDetail.RecId));     

        if(cdtrId &&
           mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'SEPA-PRSN')
        {
            //          9.1.12: Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  9.1.15: Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', cdtrId, 35);
 
            //                          9.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                              9.1.18: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', typeOfId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        
        //          2.77: CdtrAgt
        nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //              FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(mSKS_EFT_FileDetail.DepSwiftNo != ''                         &&
           (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FRGN ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EURO_EKSP ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA))
        {
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
        }
        else if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            //                  ClrSysMmbId
            nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 8, false);
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SORBNET)
        {
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 70, false);
        }

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SORBNET)
        {
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity, 0, '', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        str name = mSKS_EFT_FileDetail.AccountName;
    
        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }
    
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), 70);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentNotes</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    private str getPaymentNotes()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select crossCompany Paymentnotes from ledgerJournalTrans where
        ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        return ledgerJournalTrans.Paymentnotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str value;
        SplitPaymentMandatoryRule_PL   splitPaymentMandatoryRule_PL  ;

        select firstonly splitPaymentMandatoryRule_PL
                    where splitPaymentMandatoryRule_PL.PaymMode == mSKS_EFT_FileDetail.PaymMode && splitPaymentMandatoryRule_PL.Specification == mSKS_EFT_FileDetail.PaymSpec;//DevOps18800
         
        this.getVATAmount();
       
        value = strFmt('/VAT/%1/IDC/%2/INV/%3/TXT/%4', num2str(this.getPositiveAmount(amt),0,2,2,0), mSKS_EFT_FileDetail.VATNum, invdetails, this.getPaymentNotes());
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DOM:
            case #SORBNET:
            case #ELIXIR:
            case #BLUE_CASH:
                if(value && splitPaymentMandatoryRule_PL)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
                    //              2.99: Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(value), 140);
                }
                break;
            case #TAX:
                break;
            default:
                super(_nodeCdtTrfTxInf);
                break;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Tax</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Tax
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_Tax(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement  nodeTax;
        XmlElement  nodeRcrd;
        XmlElement  nodeDbtr;
        str regnId, type, FrmsCd;

        regnId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RegnId', mSKS_EFT_FileDetail.RecId));
        type = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Type', mSKS_EFT_FileDetail.RecId));
        FrmsCd = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('FrmsCd', mSKS_EFT_FileDetail.RecId));

        if(( regnId|| type || FrmsCd)  &&
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #TAX)
        {
            //          Tax
            nodeTax = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Tax'));

            //                  Dbtr
            nodeDbtr = nodeTax.appendChild(xmlDoc.createElement('Dbtr'));

            //                              RegnId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtr, 'RegnId', regnId, 15);

            //                  Rcrd
            nodeRcrd = nodeTax.appendChild(xmlDoc.createElement('Rcrd'));

            //                      Tp
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRcrd, 'Tp', type, 35);

            //                      FrmsCd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRcrd, 'FrmsCd', FrmsCd, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATAmount</Name>
				<Source><![CDATA[
    private void getVATAmount()
    {
        SKS_EFT_FileDetail  sks_EFT_FileDetail;
        VendInvoiceJour     vendInvoiceJour;

        while select InvoiceNumber, AccountNum, InvoiceDate from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            invDetails += sks_EFT_FileDetail.InvoiceNumber;

            vendInvoiceJour.clear();
            select firstOnly SumTax from  vendInvoiceJour
                where vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                vendInvoiceJour.InvoiceDate      ==  sks_EFT_FileDetail.InvoiceDate &&
                vendInvoiceJour.InvoiceId         ==  sks_EFT_FileDetail.InvoiceNumber;

            if(!vendInvoiceJour)
            {
                select firstOnly SumTax from  vendInvoiceJour
                    where vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                    vendInvoiceJour.DocumentDate            ==  sks_EFT_FileDetail.InvoiceDate &&
                    vendInvoiceJour.InvoiceId               ==  sks_EFT_FileDetail.InvoiceNumber;
            }

            amt = vendInvoiceJour.SumTax;   //DevOps18799
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------
        
        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //              ClrSysMmbId
        //                  MmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeClrSysId;
    
        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(mSKS_EFT_FileDetail.BankBankSwiftNo &&
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode ==  #FRGN ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode ==  #SEPA))
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.BankBankSwiftNo, 0, false);
        }
        else if(mSKS_EFT_FileDetail.BankBankTransit)
        {
            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            
            //                  ClrSysId
            nodeClrSysId = nodeClrSysMmBId.appendChild(xmlDoc.createElement('ClrSysId'));

            //                         Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'PLKNR');
            
            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, 8, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtTpInf(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodePmtTpInf;
        boolean printSvclvlCd;
        boolean printCtgyPurp;
        boolean printInstrPrtry;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SORBNET:
                printSvclvlCd = true;
                printCtgyPurp = true;
                break;
            case #ELIXIR:
            case #BLUE_CASH:
            case #TAX:
            case #EURO_EKSP:
                printCtgyPurp = true;
                break;
            case #DOM_NPLN:
                printInstrPrtry = true;
                break;
            case #FRGN:
                printInstrPrtry = true;
                printSvclvlCd = true;
                printCtgyPurp = true;
                break;
            case #SEPA:
                printSvclvlCd = true;
                printCtgyPurp = true;
                break;
        }
        if(printInstrPrtry || printSvclvlCd || printCtgyPurp)
        {
            //          PmtTpInf
            nodePmtTpInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtTpInf'));

            //              InstrPrtry
            this.node_CdtTrfTxInf_PmtTpInf_InstrPrty(nodePmtTpInf);

            //              SvcLvl
            this.node_CdtTrfTxInf_PmtTpInf_SvcLvl(nodePmtTpInf);

            //                  CtgyPurp
            this.node_CdtTrfTxInf_PmtTpInf_CtgyPurp(nodePmtTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_PmtTpInf_SvcLvl
    /// </summary>
    /// <param name = "nodePmtTpInf">nodePmtTpInf</param>
    protected void node_CdtTrfTxInf_PmtTpInf_SvcLvl(XmlElement nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        str value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SORBNET:
                value = 'RTGS';
                break;
            case #DOM_NPLN:
            case #FRGN:
                value = 'SDVA';
                break;
            case #SEPA:
                value = 'SEPA';
                break;
        }
        if(value)
        {
            //          2.8: SvcLvl
            nodeSvcLvl = nodePmtTpInf.appendChild(xmlDoc.createElement('SvcLvl'));

            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;

        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));

        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);

        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtTpInf(nodeCdtTrfTxInf);

        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);

        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
        
        //          2.71: IntrmyAgt1
        this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);

        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);

        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
        
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);

        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);

        //          2.90: Tax
        this.node_CdtTrfTxInf_Tax(nodeCdtTrfTxInf);

        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------
        XmlElement nodePmtId;
    
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));
        
        //              2.29: InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 16));        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_PmtTpInf_CtgyPurp
    /// </summary>
    /// <param name = "_nodePmftTpInf">_nodePmftTpInf</param>
    protected void node_CdtTrfTxInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SORBNET:
            case #ELIXIR:
            case #BLUE_CASH:
                value = 'VATX';
                break;
            case #DOM_NPLN:
            case #FRGN:
            case #EURO_EKSP:
                value = 'INTC';
                break;
            case #TAX:
                value = 'TAXS';
                break;
            case #SEPA:
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));
                break;
        }
        if(value)
        {
            //              2.15: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));

            //                  2.16: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;

        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.BankBankIBAN)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.88: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DOM:
            case #SORBNET:
            case #DOM_NPLN:
                value = 'PLKR';
                break;
            case #ELIXIR:
                value = 'SRPN';
                break;
            case #BLUE_CASH:
                value = 'BLUE';
                break;
            case #INTRL_CUR:
                value = 'PLWW';
                break;
            case #FRGN:
                value = 'FRGN';
                break;
            case #EURO_EKSP:
                value = 'EURO';
                break;
        }
        if(value)
        {
            nodeId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;
        
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', 'SLEV');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value, 0, false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>