<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_US_CHASE_SUA_23_RES</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_US_CHASE_SUA_23_RES extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;
    str mFileName;
    str mFileID;
    str mFieldDelimiter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        TextStreamIo locTextIo;
        container locRecord;
        System.String locString;
        int i;  //index of the current location in the container
        ;

        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locTextIo = TextStreamIo::ConstructForRead(fileHub.StreamGet());

        locTextIo.inRecordDelimiter('\n');
        locTextIo.inFieldDelimiter(',');

        if(!mSKS_EFT_RF_File)
        {
            mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        }

        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();

        while(locTextIo.status() == IO_Status::Ok)
        {
            locRecord = locTextIo.read();
            if(conLen(locRecord) > 0)
            {
                //Remove any carriage Returns
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }
                locString = strLRTrim(conPeek(locRecord, 1));

                if(!System.String::IsNullOrEmpty(locString))
                {
                    if(locString.StartsWith('4000'))
                    {
                        this.processNode(locRecord);
                    }
                }
                //if(!System.String::IsNullOrEmpty(locString))
            }
            //if(conLen(locRecord) > 0)
        }
        //while(locStreamReader.get_EndOfStream());
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        if(locTextIo)
        {
            locTextIo.finalize();
            locTextIo = null;
        }

        if(gErrorsExist)
        {
            mSKS_EFT_RF_File = null;
        }
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);

        str rtnval = '';
        int classId;
        CommaStreamIo locCommaIo;
        int i;//index of the current location in the container
        container locRecord;
        //BEGIN VALIDATION VARIABLES
        boolean FirstRecordFound = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none
        //END VALIDATION VARIABLES
        ;

        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locCommaIo = CommaStreamIo::ConstructForRead(fileHub.StreamGet());
        locCommaIo.inRecordDelimiter('\n');
        mFieldDelimiter = ',';
        locCommaIo.inFieldDelimiter(mFieldDelimiter);
        while(locCommaIo.status() == IO_Status::Ok)
        {
            locRecord = locCommaIo.read();

            if(conLen(locRecord) > 0 )
            {
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }

                if(strUpr(conPeek(locRecord,1)) == '4000' && strUpr(conPeek(locRecord,2)) == '1.0')
                {
                    FirstRecordFound = true;
                }
            }
            if(FirstRecordFound)
            {
                break;
            }
        }
        if(FirstRecordFound)
        {
            //ALl Qualifers show this a
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        if(locCommaIo)
        {
            locCommaIo.finalize();
            locCommaIo = null;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {

        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }

        return mSKS_EFT_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(container locRecord)
    {
        System.String locStatCode;

        locStatCode = strLRTrim(conPeek(locRecord, 4));

        mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();

        if(mSKS_EFT_RF_Transaction != null)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
        }
        if(!System.String::IsNullOrEmpty(conPeek(locRecord, 3)))
        {
            mSKS_EFT_RF_Transaction.setID(conPeek(locRecord, 3));
        }
        if(!System.String::IsNullOrEmpty(locStatCode))
        {
            mSKS_EFT_RF_Transaction.setStatus(locStatCode);
        }
        if(locStatCode.Equals('Failure') && !System.String::IsNullOrEmpty(conPeek(locRecord, 6)))
        {
            mSKS_EFT_RF_Transaction.setStatusReason(conPeek(locRecord, 6));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File locSKS_EFTAP_File = null)
    {
        ;

        return locSKS_EFTAP_File.FileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        str rtnval;
        ;

        rtnval = _SKS_EFT_FileDetail.PaymentReference;
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>