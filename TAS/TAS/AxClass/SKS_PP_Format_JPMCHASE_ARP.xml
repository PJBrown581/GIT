<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_JPMCHASE_ARP</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_JPMCHASE_ARP Extends SKS_PP_Format
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // JPMChase-ARP (originally Bank One Format, but 200 length)
        // Courtesy of Franco Mfg.
    
    // Pos 1-1       1       Record Type V=Void, P=Paid, R=Reconciled, O=Outstanding, S=Stopped, C=Misc Credit, D=Misc. Debit
        // Pos 2-2       1       Filler - Space
        // Pos 3-22      20      Account Number RJ-LZF
        // Pos 23-23     1       Filler - Space
        // Pos 24-41     18      Serial/Check Number RJ-LZF
        // Pos 42-42     1       Filler - Space
        // Pos 43-60     18      Amount RJ-LZF 9(16)V99 - must not contain signed data
        // Pos 61-61     1       Filler - Space
        // Pos 62-69     8       Issue Date  YYYYMMDD
        // Pos 70-70     1       Filler - Space
        // Pos 71-78     8       Paid Date  YYYYMMDD - only with Output files - not used here in Pos Pay
        // Pos 79-79     1       Filler - Space
        // Pos 80-94     15      Additional Data - we use Payee Name
        // Pos 95-144    50      Expanded Additional Data - continue Payee Name
        // Pos 145-194   50      Second Payee Name
        // Pos 195-195   1       Filler - Space
        // Pos 196-200   6       Bank Number RJ-LZF - Optional - only reqd when account numbers are from different banks
    protected str txtDetail()
    {
        int Mult;
        str ItemType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = 'I';
        }
    
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(18, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(18, strrem(Num2Str(mSKS_PP_FileDetail.ChkCuryAmt * Mult,1, 2, 0,0), '.'), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(50, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(55, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>