<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_BMO_80</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_BMO_80 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_BMO_80 extends SKS_EFT_Format
{
    #define.FormatVersion('20220302')
    #define.PAYMT('PMT-430')
    int mRecordCount;
    int mBatchCount;
    AmountMST mPaymentAmount;
    AmountMST mBatchAmount;
    SKS_EFT_SequenceNumber mSequenceNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountId prevBankAccount;
    
        //Get sequence number
        this.getSequence();
    
        // Format header
        this.rec_File_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Batch Header
                this.rec_Batch_Header();
            }
    
            // Detail Record
            this.rec_Details();
    
            prevBankAccount = mSKS_EFT_FileDetail.BankAccountId;
    
            next mSKS_EFT_FileDetail;
    
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Format trailer
                this.rec_Batch_Control();
            }
        }
    
        // Format trailer
        this.rec_Trailer();
    
        //Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJulianDate</Name>
				<Source><![CDATA[
    private str getJulianDate(date _Date)
    {
        str value;
    
        value = '0' + subStr(date2julian(_Date),3,5);
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Batch_Control</Name>
				<Source><![CDATA[
    public boolean rec_Batch_Control()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        // 1    Record Type                     (    1)
        // 2    Batch Payment Type              (    2)
        // 3    Batch Record Count              ( 3-10)
        // 4    Batch Amount                    (11-24)
        // 5    Filler                          (25-80)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;
    
        // 1    Record Type                     (    1)
        sb.Append('Y');
    
        // 2    Batch Payment Type              (    2)
        sb.Append('C');
    
        // 3    Batch Record Count              ( 3-10)
        sb.Append(SKS_PP_StringFormats::strFill(8, int2str(mBatchCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 4    Batch Amount                    (11-24)
        sb.Append(SKS_PP_StringFormats::strMoney(mBatchAmount * -1, 14));
    
        // 5    Filler                          (25-80)
        sb.Append(SKS_PP_StringFormats::strFill(56, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //Reset Batch values
        mBatchCount = 0;
        mBatchAmount = 0;
    
        OutPut = sb.ToString();
        this.fileWrite(strUpr(OutPut));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Batch_Header</Name>
				<Source><![CDATA[
    public boolean rec_Batch_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record Type                                             (    1)
        // 2    Batch payment type                                      (    2)
        // 3    Transaction Type Code                                   ( 3- 5)
        // 4    Payable Date                                            ( 6-11)
        // 5    Originator's Short Name                                 (12-26)
        // 6    Originator's Long Name                                  (27-56)
        // 7    Institution Id                                          (57-65)
        // 8    Account number for returns                              (66-77)
        // 9    Filler                                                  (78-80)
        //------------------------------------------------------------------------------------------------------
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str ShortName;
        str OutPut;
    
        //Nbr   Content
        // 1    Record Type                                             (    1)
        sb.Append('X');
    
        // 2    Batch payment type                                      (    2)
        sb.Append('C');
    
        // 3    Transaction Type Code                                   ( 3- 5)
        sb.Append(mSKS_EFT_FileFormatPaymSpec.TransactionCode);
    
        // 4    Payable Date                                            ( 6-11)
        sb.Append(this.getJulianDate(mSKS_EFT_File.EffectiveDate));
    
        // 5    Originator's Short Name                                 (12-26)
        shortName = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
    
        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(ShortName),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        // 6    Originator's Long Name                                  (27-56)
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        // 7    Institution Id                                          (57-65)
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); //SKS_DevOps_16522
    
        // 8    Account number for returns                              (66-77)
        sb.Append(SKS_PP_StringFormats::strFill(12,mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 9    Filler                                                  (78-80)
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        OutPut = sb.ToString();
        this.fileWrite(strUpr(OutPut));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description
        // 1    Record Type                     (    1)
        // 2    Amount                          ( 2-11)
        // 3    Institution ID                  (12-20)
        // 4    Account Number                  (21-32)
        // 5    Payor/Payee Name                (33-61)
        // 6    Cross Reference No.             (62-80)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;
        mRecordCount++;
        mBatchCount++;
    
        // 1    Record Type                     (    1)
        sb.Append('C');
    
        // 2    Amount                          ( 2-11)
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        mBatchAmount   += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 10));
    
        // 3    Institution ID                  (12-20)
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));  //SKS_DevOps_16522
    
        // 4    Account Number                  (21-32)
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 5    Payor/Payee Name                (33-61)
        sb.Append(SKS_PP_StringFormats::strFill(29, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 6    Cross Reference No.             (62-80)
        sb.Append(SKS_PP_StringFormats::strFill(19, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        OutPut = sb.ToString();
        this.fileWrite(strUpr(OutPut));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_File_Header</Name>
				<Source><![CDATA[
    public boolean rec_File_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record Type                                             (    1)
        // 2    Originator ID Number                                    ( 2-11)
        // 3    File Creation Number                                    (12-15)
        // 4    File Creation Date                                      (16-21)
        // 5    Destination Date Centre Code                            (22-26)
        // 6    Filler                                                  (27-80))
        //------------------------------------------------------------------------------------------------------
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;
        str dataCentCode;
        this.incrementSequenceNumber();
    
        //Nbr   Content
        // 1    Record Type                                             (    1)
        sb.Append('A');
    
        // 2    Originator ID Number                                    ( 2-11)
        sb.Append(SKS_PP_StringFormats::strFill(10,subStr(strUpr(mSKS_EFT_Bank.WOrdPartyId),1,10), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 3    File Creation Number                                    (12-15)
        sb.Append(SKS_PP_StringFormats::strFill(4,num2str(mSequenceNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 4    File Creation Date                                      (16-21)
        sb.Append(this.getJulianDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    
        // 5    Destination Date Centre Code                            (22-26)
        dataCentCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DataCentCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(dataCentCode), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 6    Filler                                                  (27-80)
        sb.Append(SKS_PP_StringFormats::strFill(54, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        OutPut = sb.ToString();
        this.fileWrite(strUpr(OutPut));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    private boolean rec_Trailer()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record Type                     (    1)
        // 2    Total Value  of D Records       ( 2-15)
        // 3    Total Number of D Records       (16-20)
        // 4    Total Value of C Records        (21-34)
        // 5    Total Number of C Records       (35-39)
        // 6    Filler                          (40-80)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;
    
        // 1    Record Type                     (    1)
        sb.Append('Z');
        // 2    Total Value  of D Records       ( 2-15)
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        // 3    Total Number of D Records       (16-20)
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        // 4    Total Value of C Records        (21-34)
        sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount * -1, 14));
        // 5    Total Number of C Records       (35-39)
        sb.Append(SKS_PP_StringFormats::strFill(5, int2str(mRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        // 6    Filler                          (40-80)
        sb.Append(SKS_PP_StringFormats::strFill(41, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        OutPut = sb.ToString();
        this.fileWrite(strUpr(OutPut));
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>