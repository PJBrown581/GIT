<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_OutboundFormat_ISO_20022</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_DD_OutboundFormat_ISO_20022 for ISO formats
/// </summary>
class SKS_DD_OutboundFormat_ISO_20022 extends SKS_DD_OutboundFormat
{
    XmlDocument             xmlDoc;
    XmlElement              nodeRoot;
    XmlElement              GrpHdr;
    XmlElement              nodePmtInf;
    int batchCount;
    str ddMandateDataDeliveryReference;
    int gNbOfTxs;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_MessageRoot for Message of file
    /// </summary>
    protected void node_MessageRoot()
    {
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('Document'));
        
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns', 'urn:iso:std:iso:20022:tech:xsd:pain.008.001.02');
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
        nodeRoot = nodeRoot.appendChild(xmlDoc.createElement('CstmrDrctDbtInitn'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr
    /// </summary>
    protected void node_GrpHdr()
    {
        //------------------------------------------------------------------------------------------------------
        //  1.0: GrpHdr
        //      1.1: MsgId
        //      1.2: CreDtTm
        //      1.6: NbOfTxs
        //      1.7: CtrlSum
        //      1.8: InitgPty
        //          Nm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeGrpHdr;
    
        //  1.0: GrpHdr
        nodeGrpHdr = nodeRoot.appendChild(xmlDoc.createElement('GrpHdr'));
    
        //      1.1: MsgId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'MsgId', SKS_PP_StringFormats::strRight(System.DateTime::UtcNow.ToString('yyyyMMddhhmm'), 35));
    
        //      1.2: CreDtTm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'CreDtTm', DateTimeUtil::toStr(DateTimeUtil::utcNow()));
    
        //      1.6: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'NbOfTxs', '1');
    
        //      1.7: CtrlSum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'CtrlSum', '0.00');
        
    
        //      1.8: InitgPty
        this.node_GrpHdr_InitgPty(nodeGrpHdr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty
    /// </summary>
    /// <param name = "_nodeGrpHdr">Parent buffer</param>
    protected void node_GrpHdr_InitgPty(XmlElement _nodeGrpHdr)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInitgPty;
    
    
        //      1.8: InitgPty
        nodeInitgPty = _nodeGrpHdr.appendChild(xmlDoc.createElement('InitgPty'));
    
        //          Nm
        this.node_GrpHdr_InitgPty_Nm(nodeInitgPty);

        //          Id
        this.node_GrpHdr_InitgPty_Id(nodeInitgPty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_Id
    /// </summary>
    /// <param name = "_nodeInitgPty">Parent buffer</param>
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      InitgPty
        //          Id
        //------------------------------------------------------------------------------------------------------
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_Nm
    /// </summary>
    /// <param name = "_nodeInitgPty">Parent buffer</param>
    protected void node_GrpHdr_InitgPty_Nm(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //------------------------------------------------------------------------------------------------------
        Name companyName;
    
        //          Nm
        companyName = CompanyInfo::find().Name();
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeInitgPty, 'Nm', this.CharacterReplacement(companyName), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf
    /// </summary>
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        
        batchCount++;
    
        // Select count and sum for this bank account
        
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(System.DateTime::UtcNow.ToString('yyyyMMddhhmm') + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'DD');

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', '0');
    
        //      2.5: CtrlSum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', '0.00');
        
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        //      2.18: ReqdColltnDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdColltnDt', SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::utcNow(), 1)), DateSeparator::Hyphen));
        
        this.node_PmtInf_CdtrNodes(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.15: CtgyPurp
        //------------------------------------------------------------------------------------------------------
    
        // Override in format if element is needed
        /*
        XmlElement nodePmtTpInf;
        nodePmtTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.8: SvcLvl
        this.node_PmtInf_PmtTpInf_SvcLvl(nodePmtTpInf);
    
        //          2.11: LclInstrm
        this.node_PmtInf_PmtTpInf_LclInstrm(nodePmtTpInf);
    
        //Remove if no children
        if(!nodePmtTpInf.hasChildNodes())
        {
            _nodePmtInf.removeChild(nodePmtTpInf);
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_SvcLvl
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
    
        nodeSvcLvl = _nodePmtInf.appendChild(xmlDoc.createElement('SvcLvl'));
        //              Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', 'NURG');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_LclInstrm
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeLclInstrm;
        CustMandateStatus status;
        str value;

        status = mCustDirectDebitMandate.getStatus();

        if(status == CustMandateStatus::New)
        {
            value = '0N';
        }
        else if(status == CustMandateStatus::Canceled)
        {
            value = '0C';
        }

        if(value)
        {
            //              2.11: LclInstrm
            nodeLclInstrm = _nodePmtInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            status = this.getMandateStatus();

            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_CdtrNodes
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_PmtInf_CdtrNodes(XmlElement _nodePmtInf)
    {
        //      2.19: Cdtr
        this.node_PmtInf_Cdtr(_nodePmtInf);
    
        //      2.20: CdtrAcct
        this.node_PmtInf_CdtrAcct(_nodePmtInf);
    
        //      2.21: CdtrAgt
        this.node_PmtInf_CdtrAgt(_nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_PmtInf_Cdtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.15: Cdtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //      2.15: Cdtr
        nodeCdtr = nodePmtInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //          Nm
        this.node_PmtInf_Cdtr_Nm(nodeCdtr);

        //              Id
        this.node_PmtInf_Cdtr_Id(nodeCdtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_Nm
    /// </summary>
    /// <param name = "_nodeCdtr">Parent buffer</param>
    protected void node_PmtInf_Cdtr_Nm(XmlElement _nodeCdtr)    
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        str name;

        name = SKS_EFT_Common::getCustomerName(mCustDirectDebitMandate.company(), mCustDirectDebitMandate.CustAccount);

        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_Id
    /// </summary>
    /// <param name = "_nodeCdtr">Node cdtr</param>
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //------------------------------------------------------------------------------------------------------
    
        // Override in format if element is needed
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_CdtrAcct
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_PmtInf_CdtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: CdtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOthr;
    
        //      2.20: CdtrAcct
        nodeCdtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
        //          Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(BankAccountTable::find(mSKS_PP_Bank.BankAccountId).IBAN)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', BankAccountTable::find(mSKS_PP_Bank.BankAccountId).IBAN);
        }
        else
        {
            //              Othr
            nodeOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', BankAccountTable::find(mSKS_PP_Bank.BankAccountId).AccountNum);
        }

        //              Ccy
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcct, 'Ccy', BankAccountTable::find(mSKS_PP_Bank.BankAccountId).CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_CdtrAgt
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_PmtInf_CdtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.17: CdtrAgt
        //               FinInstnId
        //                     CmbndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;

        //      2.21: CdtrAgt
        nodeCdtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //          FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(BankAccountTable::find(mSKS_PP_Bank.BankAccountId).SWIFTNo)
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', BankAccountTable::find(mSKS_PP_Bank.BankAccountId).SWIFTNo, 11);
        }
        else
        {
            //          ClrSysMmbId
            nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', BankAccountTable::find(mSKS_PP_Bank.BankAccountId).RegistrationNum, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run method
    /// </summary>
    /// <param name = "_custDirectDebitMandate">CustDirectDebitMandate</param>
    /// <returns>string value</returns>
    public str formatStructure(CustDirectDebitMandate  _custDirectDebitMandate)
    {
        XmlElement locXmlNode;
        boolean    first = true;
        boolean    mandatesFound = false;
        CustMandateStatus status;
    
        xmlDoc = XmlDocument::newBlank();
    
        this.node_MessageRoot();
    
        mSKS_PP_Bank = SKS_PP_Bank::find(_custDirectDebitMandate.CreditorBankAccount);
        mSKS_EB_BankTable = SKS_EB_BankTable::find(mSKS_PP_Bank.BankID);

        mSKS_EB_CharacterReplacement = new SKS_EB_CharacterReplacement(SKS_EFT_Setup::find().ARCRGroupId);

        this.node_GrpHdr();
    
        while(_custDirectDebitMandate)
        {
            mCustDirectDebitMandate = _custDirectDebitMandate;
    
            if(_custDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Sent || _custDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Rejected ||
             (_custDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Accepted && (_custDirectDebitMandate.Status == CustMandateStatus::New || _custDirectDebitMandate.Status == CustMandateStatus::Active))) // only one mandate record can be at sent status per customer
            {
                next _custDirectDebitMandate;
                continue;
            }

            //status = mCustDirectDebitMandate.getStatus();
            status = this.getMandateStatus();

            if(status != CustMandateStatus::Modified)
            {
                ttsbegin; //SKS_Bug_10977
                ddMandateDataDeliveryReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefDDMandateDataDeliveryNextReferenceNo()).num();
                ttscommit; //SKS_Bug_10977

                ttsbegin;

                mCustDirectDebitMandate.selectForUpdate(true);

                if(mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Ready && status == CustMandateStatus::New)
                {
                    mCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
                    mCustDirectDebitMandate.Status = CustMandateStatus::New;
                }
                else if((mCustDirectDebitMandate.Status == CustMandateStatus::Canceled ||
                        status == CustMandateStatus::Canceled) ||
                        (mCustDirectDebitMandate.Status == CustMandateStatus::Expired ||
                            status == CustMandateStatus::Expired))
                {
                    mCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Sent;
                }
                mCustDirectDebitMandate.SKS_EB_RegisterStatusSent = NoYesCombo::Yes;
                mCustDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
                mCustDirectDebitMandate.SKS_EB_RegisterStatusDate = DateTimeUtil::getSystemDateTime();
                mCustDirectDebitMandate.SKS_EB_DataDeliveryReference = ddMandateDataDeliveryReference;
                mCustDirectDebitMandate.update();
                ttscommit;

                if(first)
                {
                    this.node_PmtInf();
                    first = false;
                    mandatesFound = true;
                }
    
                //For AR
                this.node_DrctDbtTxInf();
    
                next _custDirectDebitMandate;
            }
            else
            {
                next _custDirectDebitMandate;
            }
        }

        if(mandatesFound)
        {
            locXMLNode = xmlDoc.selectSingleNode('//CstmrDrctDbtInitn/GrpHdr/NbOfTxs');
            locXmlNode.innerText(num2Str(gNbOfTxs, 0,0,0,0));

            locXMLNode = xmlDoc.selectSingleNode('//CstmrDrctDbtInitn/PmtInf/NbOfTxs');
            locXmlNode.innerText(num2Str(gNbOfTxs, 0,0,0,0));

            return xmlDoc.toString();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf method
    /// </summary>
    protected void node_DrctDbtTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.28: DrctDbtTxInf
        //          2.29: PmtId
        //          2.32: PmtTpInf
        //          2.44: InstdAmt
        //          2.45: ChrgBr
        //          2.70: DbtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDrctDbtTxInf;
        
        gNbOfTxs++;

        ttsbegin;
        ddMandateDataDeliveryReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefDDMandateDataDeliveryNextReferenceNo()).num();
        ttscommit;
    
        //      2.28: DrctDbtTxInf
        nodeDrctDbtTxInf = nodePmtInf.appendChild(xmlDoc.createElement('DrctDbtTxInf'));
    
        //          2.29: PmtId
        this.node_DrctDbtTxInf_PmtId(nodeDrctDbtTxInf);
    
        //          2.32 PmtTpInf
        this.node_DrctDbtTxInf_PmtTpInf(nodeDrctDbtTxInf);
    
        //          2.44: InstdAmt
        this.node_DrctDbtTxInf_Amt(nodeDrctDbtTxInf);
    
        //          2.45: ChrgBr
        //this.node_DrctDbtTxInf_ChrgBr(nodeDrctDbtTxInf);
    
        //          2.48: DrctDbtTx
        this.node_DrctDbtTxInf_DrctDbtTx(nodeDrctDbtTxInf);

        //          2.70: DbtrAgt
        this.node_DrctDbtTxInf_DbtrAgt(nodeDrctDbtTxInf);
    
        //          2.72: Dbtr
        this.node_DrctDbtTxInf_Dbtr(nodeDrctDbtTxInf);
    
        //          2.73: DbtrAcct
        this.node_DrctDbtTxInf_DbtrAcct(nodeDrctDbtTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_PmtId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_PmtId
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">Parent buffer</param>
    protected void node_DrctDbtTxInf_PmtId(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.29: PmtId
        //              2.31: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtId;
    
        //          2.28: PmtId
        nodePmtId = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('PmtId'));
    
        //              2.31: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(ddMandateDataDeliveryReference, 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_PmtTpInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_PmtTpInf
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">Parent buffer</param>
    protected void node_DrctDbtTxInf_PmtTpInf(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.31 PmtTpInf
        //------------------------------------------------------------------------------------------------------
    
        // Override in format if element is needed

        XmlElement nodePmtTpInf;

        nodePmtTpInf = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.8: SvcLvl
        this.node_DrctDbtTxInf_PmtTpInf_SvcLvl(nodePmtTpInf);
    
        //          2.11: LclInstrm
        this.node_DrctDbtTxInf_PmtTpInf_LclInstrm(nodePmtTpInf);
    
        
        //Remove if no children
        if(!nodePmtTpInf.hasChildNodes())
        {
            _nodeDrctDbtTxInf.removeChild(nodePmtTpInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_PmtTpInf_SvcLvl
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_DrctDbtTxInf_PmtTpInf_SvcLvl(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
    
        nodeSvcLvl = _nodePmtInf.appendChild(xmlDoc.createElement('SvcLvl'));
        //              Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', 'NURG');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_PmtTpInf_LclInstrm
    /// </summary>
    /// <param name = "_nodePmtInf">Parent buffer</param>
    protected void node_DrctDbtTxInf_PmtTpInf_LclInstrm(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeLclInstrm;
        CustMandateStatus status;
        str value;

        status = mCustDirectDebitMandate.getStatus();

        if(status == CustMandateStatus::New)
        {
            value = '0N';
        }
        else if(status == CustMandateStatus::Canceled)
        {
            value = '0C';
        }

        if(value)
        {
            //              2.11: LclInstrm
            nodeLclInstrm = _nodePmtInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            status = this.getMandateStatus();

            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_Amt method
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">XmlElement buffer</param>
    protected void node_DrctDbtTxInf_Amt(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.44: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeAmt;
    
        //          2.44: InstdAmt
        nodeAmt = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDrctDbtTxInf, 'InstdAmt', '0.00');
        SKS_EFT_Format::xmlsetAttributeText(nodeAmt, 'Ccy', 'GBP'); //TODO
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DbtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_DbtrAgt method
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">XmlElement buffer</param>
    protected void node_DrctDbtTxInf_DbtrAgt(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.70: DbtrAgt
        //              FinInstnId
        //                  BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
    
        //          2.70: DbtrAgt
        nodeDbtrAgt = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
        //              FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        //          ClrSysMmbId
        nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', CustBankAccount::find(mCustDirectDebitMandate.CustAccount, mCustDirectDebitMandate.BankAccount).RegistrationNum, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DbtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_DbtrAcct method
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">XmlElement buffer</param>
    protected void node_DrctDbtTxInf_DbtrAcct(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.73: DbtrAcct
        //              Id
        //                  IBAN
        //              Tp
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
    
        //          2.73: DbtrAcct
        nodeDbtrAcct = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //              Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        //              Othr
        nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
        //                  Id
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', CustBankAccount::find(mCustDirectDebitMandate.CustAccount, mCustDirectDebitMandate.BankAccount).AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_Dbtr
    /// </summary>
    /// <param name = "_node_DrctDbtTxInf">Parent buffer</param>
    protected void node_DrctDbtTxInf_Dbtr(XmlElement _node_DrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //          2.72: Dbtr
        nodeDbtr = _node_DrctDbtTxInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //              Nm
        this.node_DrctDbtTxInf_Dbtr_Nm(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_Dbtr_Nm
    /// </summary>
    /// <param name = "_nodeDbtr">parent buffer</param>
    protected void node_DrctDbtTxInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
    
        CustTable locCustTable;
        str custname;

        locCustTable = CustTable::find(mCustDirectDebitMandate.CustAccount);

        custname = SKS_EFT_Common::getCustomerNameByParty(locCustTable.Party);
        
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(custname), 140);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DrctDbtTx</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_DrctDbtTxInf_DrctDbtTx
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">parent buffer</param>
    protected void node_DrctDbtTxInf_DrctDbtTx(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          DrctDbtTx
        //              MndtRltdInf
        //                  MndtId
        //                  DtOfSgntr
        //------------------------------------------------------------------------------------------------------
        // Override in format if element is needed
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Printing Postal address from this method
    /// </summary>
    /// <param name = "_node">XmlElement</param>
    /// <param name = "_countryId">AddressCountryRegionId</param>
    /// <param name = "_address">SKS_EB_Address</param>
    /// <param name = "_postalCode">AddressZipCodeId</param>
    /// <param name = "_city">AddressCity</param>
    /// <param name = "_length">Length</param>
    /// <param name = "_address2">Address 2</param>
    /// <param name = "_state">AddressCountryRegionName</param>
    /// <param name = "isStructured">True or False</param>
    protected void node_PstlAdr(XmlElement _node,
                                AddressCountryRegionId _countryId,
                                SKS_EB_Address _address,
                                AddressZipCodeId _postalCode,
                                AddressCity _city,
                                int _length = 35,
                                SKS_EB_Address _address2 = '',
                                AddressCountryRegionName  _state = '',
                                boolean isStructured = false)
    {
        //------------------------------------------------------------------------------------------------------
        //          PstlAdr
        //              Ctry
        //              AdrLine
        //              AdrLine
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePstlAdr;
        LogisticsAddressCountryRegionISOCode countryRegion;
    
        countryRegion = this.getLogisticsAddressCountryISO(_countryId);
    
        if(!isStructured)
        {
            if(countryRegion || _address || _postalCode || _city)
            {
                //      PstlAdr
                nodePstlAdr = _node.appendChild(xmlDoc.createElement('PstlAdr'));
    
                //          Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', countryRegion, 2, false);
    
                //          AdrLine
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(_address), _length, false);
    
                //          AdrLine
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', strLTrim(_postalCode + ' ' + this.CharacterReplacement(_city)), _length, false);
            }
        }
        else
        {
            if( _address || _address2 || _postalCode || _city || _state || countryRegion)
            {
                //      PstlAdr
                nodePstlAdr = _node.appendChild(xmlDoc.createElement('PstlAdr'));

                //          StrtNm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'StrtNm', this.CharacterReplacement(_address), 70, false);
    
                //          BldgNb
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'BldgNb', this.CharacterReplacement(_address2), 16, false);
    
                //          PstCd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', _postalCode, 16, false);
    
                //          TwnNm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(_city), 35, false);
    
                //          CtrySubDvsn
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'CtrySubDvsn', this.CharacterReplacement(_state), 35, false);
    
                //          Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', countryRegion, 2, false);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>