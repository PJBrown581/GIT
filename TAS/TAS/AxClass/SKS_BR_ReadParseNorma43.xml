<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadParseNorma43</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains reading process of Norma43 files.
/// </summary>
class SKS_BR_ReadParseNorma43 extends SKS_BR_ReadParseBase
{
    //*********
    //*** do NOT use :CommaStreamIo
    //*** do NOT use :CommaTextStreamIo
    //*** implments a broken fields parse and malfuctions on non-comma separated files(like semi-colon delimited) with empty fields.
    //*** use TextStreamIO this implements it's own classes and will fucntion with any infielddelimiter
    //*** Referce link: https://www.yammer.com/dynamicsaxfeedbackprograms/#/threads/show?threadId=396866031673344
    //*********
    TextStreamIo locTextStreamIO;
    container FieldFormat[];
    int maxFieldFormats;
    str Fields[];
    str Raw_Fields[];



    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetInboundFile</Name>
				<Source><![CDATA[
    public SKS_BR_InboundFile GetInboundFile(SKS_EB_FilePathName _FilePathAndName, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        //str locTempTagName;
        ;

        this.InitializeFileInfo(_FilePathAndName);
        if (!this.openFile())
        {
            return null;
        }

        return this.parseFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a file.
    /// </summary>
    /// <returns>Returns true if process was successful</returns>
    boolean openFile()
    {
        if (!gSKS_EB_FileHub.attrfileExists())
        {
            throw error((strfmt("@SYS62207",gSKS_EB_FileHub.fileName())));
        }
        gSKS_EB_FileHub.runFileLoad(gSKS_EB_FileHub.getSKS_BF_BankIntType() == SKS_BF_BankIntType::FileHubLocal ? gSKS_EB_FileHub.fileName() : strFmt(@'%1\%2', gSKS_EB_FileHub.getBFFilePath(),gSKS_EB_FileHub.fileName())
                                    ,gBRPreReadScript
                                    ,gBRPreReadScriptParams
                                    ,gBRPostReadScript
                                    ,gBRPostReadScriptParams);
        gSKS_EB_FileHub.streamInit();
        locTextStreamIO = TextStreamIo::constructForRead(gSKS_EB_FileHub.streamGet());
        if (locTextStreamIO)
        {
            locTextStreamIO.inFieldDelimiter('\r\n');
            locTextStreamIO.inRecordDelimiter('\r\n');
        }
        if (!locTextStreamIO || locTextStreamIO.status() != IO_Status::Ok )
        {
            //file could not be opened
            throw error((strfmt("@SYS19312",gSKS_EB_FileHub.fileName())));
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses a file.
    /// </summary>
    /// <returns>Returns inbound file record</returns>
    protected SKS_BR_InboundFile parseFile()
    {
        AmountMST transAmt, endAmt;
        str lineStr;
        System.String locString;
        System.IO.StreamReader locStreamReader;
        str note;
        int num_lines_in_file = this.fileLineCount();
        int linecnt = 0;

        if (!this.openFile())
        {
            return null;
        }

        gSKS_EB_FileHub.StreamInit();

        locStreamReader = new System.IO.StreamReader(gSKS_EB_FileHub.streamGet());
        locString = locStreamReader.ReadLine();
        
        lineStr = strrem(locString, '\n\r');

        while(locString != null)
        {
            linecnt++;
            if(linecnt > gSKS_BR_FileFormat.OmitHeaderRecs && linecnt < (num_lines_in_file - gSKS_BR_FileFormat.OmitTrailerRecs + 1))
            {
                if(strlen(lineStr) == 0) //skip blank lines
                {
                    continue;
                }

                if(subStr(lineStr, 1, 2) == '11')
                {
                    gSKS_BR_InboundStmt = new SKS_BR_InboundStmt();
                
                    if(!gSKS_BR_InboundFile)
                    {
                        gSKS_BR_InboundFile = new SKS_BR_InboundFile();
                    }
                
                
                    gSKS_BR_InboundStmt.SetDate(SKS_PP_StringFormats::strDateYYMMDD(this.str2date(subStr(lineStr, 27, 6) ,321)));
                    gSKS_BR_InboundStmt.SetNbr(subStr(lineStr, 27, 6));
                    gSKS_BR_InboundStmt.SetAccount(this.parseRefernceNumber(subStr(lineStr, 11, 10)));
                }

                if(subStr(lineStr, 1, 2) == '22')
                {
                    if(gSKS_BR_InboundTran)
                    {  
                        gSKS_BR_InboundStmt.PushTrans(gSKS_BR_InboundTran);
                        gSKS_BR_InboundTran = null;
                        gSKS_BR_InboundTran = new SKS_BR_InboundTran();
                    }
                    else
                    {
                        gSKS_BR_InboundTran = new SKS_BR_InboundTran();
                    }

                    note = null;

                    gSKS_BR_InboundTran.SetDate(SKS_PP_StringFormats::strDateYYYYMMDD(this.str2date(subStr(lineStr, 11, 6) ,321)));
                    gSKS_BR_InboundTran.SetValueDate(SKS_PP_StringFormats::strDateYYYYMMDD(this.str2date(subStr(lineStr, 17, 6) ,321)));

                    transAmt = str2Int(subStr(lineStr, 29, 14));
                    transAmt = transAmt/100;

                    if(subStr(lineStr, 28, 1) == '1')
                    {
                        transAmt = -1*transAmt;
                    }

                    gSKS_BR_InboundTran.SetAmt(transAmt);
                    gSKS_BR_InboundTran.SetTranType(global::strLRTrim(subStr(lineStr, 25, 3)));
                
                    gSKS_BR_InboundTran.SetCustRefNbr(subStr(lineStr, 43, 10));
                    gSKS_BR_InboundTran.SetIsCredit(true);                
                }

                if(subStr(lineStr, 1, 2) == '23')
                {
                    note = strRTrim(subStr(lineStr, 5,  76));
                    if(strLen(note) > 0)
                    {
                        gSKS_BR_InboundTran.AppendDesc(note);
                        gSKS_BR_InboundTran.AppendDescUser(note);
                    }
                }

                if(subStr(lineStr, 1, 2) == '33')
                {
                    endAmt = str2Int(subStr(lineStr, 60, 14));
                    endAmt = endAmt/100;

                    if(subStr(lineStr, 59, 1) == '1')
                    {
                        endAmt = -1 * endAmt;
                    }

                    gSKS_BR_InboundStmt.SetEndingBalance(endAmt);
                    gSKS_BR_InboundStmt.SetIsCredit(true);
                    gSKS_BR_InboundFile.PushStmt(gSKS_BR_InboundStmt);

                    if(gSKS_BR_InboundTran)
                    {
                        gSKS_BR_InboundStmt.PushTrans(gSKS_BR_InboundTran);
                        gSKS_BR_InboundTran = null;
                    }

                    gSKS_BR_InboundStmt = null;
                }

            }
            
            locString = locStreamReader.ReadLine();
            lineStr = strrem(locString, '\n\r');
        }

        locStreamReader.Close();

        this.closeFile();

        if(gSKS_BR_InboundStmt)
        {
            gSKS_BR_InboundFile.PushStmt(gSKS_BR_InboundStmt);
            gSKS_BR_InboundStmt = null;
        }

        return gSKS_BR_InboundFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileLineCount</Name>
				<Source><![CDATA[
    private int fileLineCount()
    {
        int linecnt = 0;
        Container line;

        if (!this.openFile())
        {
            return 0;
        }

        while(locTextStreamIO.status() == IO_status::Ok)
        {
            line = locTextStreamIO.read();
            if(line)
            {
                linecnt++;
            }
        }
        this.closeFile();
        return linecnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes file stream object.
    /// </summary>
    void closeFile()
    {
        if(locTextStreamIO)
        {
            locTextStreamIO.finalize();
            locTextStreamIO = null;
            gSKS_EB_fileHub.streamClose();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>