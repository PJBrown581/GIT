<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileCSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
//This is copied from SKS_BR_ReadFileCSV.  If you change one of these,
//consider changing the other.
public class SKS_LB_ReadFileCSV extends SKS_LB_ReadFile
{
    SKS_EB_FileHub fileHub;
    CommaStreamIo csvFile;
    boolean useTab;
    str curline;
    List FieldFormatsList;
    SKS_EB_FilePath         lbpath;
    SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFileHub</Name>
				<Source><![CDATA[
    private SKS_EB_FileHub initFileHub(SKS_EB_FileHub _fileHub = fileHub)
    {
        fileHub = _fileHub;

        if(!fileHub)
        {
            SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;

            if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;

            fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

            if (Fileformat.CodePage)
            {
                fileHub.parmEncoding(Fileformat.CodePage);
            }
        }

        return fileHub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    public void closeFile()
    {
        csvFile.finalize();
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.StreamClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileLineCount</Name>
				<Source><![CDATA[
    private int fileLineCount(boolean _Relocation = false)
    {
        int linecnt = 0;
        Container line;
    
        this.openFile(_Relocation);
        while (csvFile.status() == IO_status::Ok)
        {
            line = csvFile.read();
    
            if (line)
            {
                linecnt++;
            }
        }
        return linecnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Get_Current_Line</Name>
				<Source><![CDATA[
    str Get_Current_Line()
    {
        ;
    
        return curline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        useTab = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    void openFile(boolean _Relocation = false)
    {
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.runFileInquire(FileName);
        if(!_Relocation)
        {
            if(!fileHub.attrFileExists())
            {
                // The file %1 does not exist.
                error(strfmt("@SYS62207", FileName));
                return;
            }
        }
        
        fileHub.runFileLoad(FileName);
        fileHub.StreamInit();
        
        if (Fileformat.CodePage)
        {
            csvFile = CommaTextStreamIo::constructForRead(fileHub.StreamGet(), Fileformat.CodePage);
        }
        else
        {
            csvFile = CommaStreamIo::constructForRead(fileHub.StreamGet());
        }

        if(Fileformat.LineEndingType == SKS_LB_LineEndingType::CRLF)
        {
            csvFile.inRecordDelimiter('\r\n');
            csvFile.outRecordDelimiter('\r\n');
        }
        else if(Fileformat.LineEndingType == SKS_LB_LineEndingType::LFCR)
        {
            csvFile.inRecordDelimiter('\n\r');
            csvFile.outRecordDelimiter('\n\r');
        }
        else if(Fileformat.LineEndingType == SKS_LB_LineEndingType::CR)
        {
            csvFile.inRecordDelimiter('\r');
            csvFile.outRecordDelimiter('\r');
        }
        else if(Fileformat.LineEndingType == SKS_LB_LineEndingType::LF)
        {
            csvFile.inRecordDelimiter('\n');
            csvFile.outRecordDelimiter('\n');
        }

        if (!csvFile || csvFile.status() != IO_Status::Ok )
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", fileName));
        }
    
        if (useTab)
        {
            csvFile.inFieldDelimiter('\t');
        }
        else if (Fileformat.Delimiter)
        {
            csvFile.inFieldDelimiter(Fileformat.Delimiter);
        }
        else
        {
            csvFile.inFieldDelimiter(',');
        }
    
        if(!_Relocation)
        {
            FieldFormatsList = new List(Types::Record);
            while select FieldFormat order by Fieldnbr asc where FieldFormat.FormatID == FileFormat.FormatID
            {
                FieldFormatsList.addEnd(FieldFormat);
            }
        }
        select firstOnly BankAcctFieldFormat where BankAcctFieldFormat.formatid == Fileformat.FormatID && BankAcctFieldFormat.FieldType == SKS_LB_FieldType::LBBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Line</Name>
				<Source><![CDATA[
    int Read_Line( int DesiredLine )
    {
        container line;
        int CurrentLine = 0;
        int i = 1;
    
        if (DesiredLine > 0 && csvFile.status() == IO_status::Ok)
        {
            // Position on the desired line
            CurrentLine = 0;
            while (csvFile.status() == IO_status::Ok && CurrentLine < DesiredLine)
            {
                line = csvFile.read();
                CurrentLine = CurrentLine + 1;
            }
    
            if (csvFile.status() != IO_status::Ok)
            {
                return 1;
            }
    
            if (!useTab)
            {
                curline = strrem(con2str(line), '\n\r');
            }
            else
            {
                // Special processing for tab delimited lines
                // When tab deliminted lines are read with CommaIo and con2str is used to convert it to a string,
                // is uses commas as the field delimiter. We don't want commans, we want a placeholder to indicate tabs.
                // So we do our own conversion to string and insert the 'white space' character (?) as the delmiter.
    
                curline = '';
                while (i <= conLen(line))
                {
                    curline = curline + conPeek(line, i);
                    if (i != conLen(line))
                    {
                        // append a whitespace character
                        curline = curline + '?';
                    }
                    i += 1;
                }
            }
        }
        else
        {
            return 1;
        }
    
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    // This readfile is specific to a Lockbox file
    // It will read transactions from a file.
    // It will ONLY read the records from the file that match the Account number specified in the
    // Properties of this class.
    TmpSKS_LB_Importing readFile()
    {
        // Comma separated File
        int linecnt = 0;
        Container line;
        str value;
        int fieldPos;
        int num_lines_in_file = this.fileLineCount();
        ListEnumerator fieldFormatsListEnumerator;
        SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        ;
    
        ImportCount = 0;
        fieldFormatsListEnumerator = FieldFormatsList.getEnumerator();
        select firstOnly setup;
        this.closeFile();//filelinecount method call in variable declarations opens the file but never closes it
        this.openFile();
        ttsbegin;
        lbpath =  System.IO.Path::GetDirectoryName(Filename);
        while (csvFile.status() == IO_status::Ok || (line != conNull() && csvFile.status() == IO_Status::FileTooShort))
        {
            fieldPos = 1;
            line = csvFile.read();
            linecnt++;
            fieldFormatsListEnumerator.reset();
    
            // If we are within the range of records we care about, then process the line of data
            if (line && linecnt > OmitHeaderRecsNbr && linecnt < (num_lines_in_file - OmitTrailerRecsNbr + 1))
            {
                if (strlen(con2Str(line)) == 0) //skip blank lines
                {
                    continue;
                }

                while (fieldFormatsListEnumerator.moveNext())
                {
                    localSKS_LB_FileFormatDet = fieldFormatsListEnumerator.current();
                    value = conpeek(line, fieldPos);
                    this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    fieldPos++;
                }
    
                importing.FileDate = FileDate;
                importing.FileFormatId = formatId;
                importing.FileName = fileName;
                importing.FileLineNbrBegin = linecnt;
    
                if(this.ValidatePathAcctCombo(lbpath))
                {
                    ImportCount++;
                    importing.insert();
                    importing.Description = '';
                    importing.PaymNote = '';
                }
    
            }
        }
        ttscommit;
        this.closeFile();
        return importing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveBankAccountNumberFromFile</Name>
				<Source><![CDATA[
    Container RetrieveBankAccountNumberFromFile()
    {
        container   BankAcctCon;
        Container   line;
        str         AcctNum;
        Boolean     Exit = false;
        int linecnt = 0;
        int num_lines_in_file = this.fileLineCount(true);
        this.closeFile();//filelinecount method call in variable declarations opens the file but never closes it
        this.openFile(true);
        while (csvFile.status() == IO_status::Ok && !Exit)
        {
            line = csvFile.read();
            linecnt++;
            if (line && linecnt > OmitHeaderRecsNbr && linecnt < (num_lines_in_file - OmitTrailerRecsNbr + 1))
            {
                if (strlen(con2Str(line)) == 0) //skip blank lines
                {
                    continue;
                }
                AcctNum = conpeek(line, BankAcctFieldFormat.FieldNbr);
                if(conFind(BankAcctCon,AcctNum) == 0)//Makes sure the account number is unique and not already in the container
                {
                    BankAcctCon += AcctNum;
                    Exit = !FileFormat.VerifyAcct ? true : false;
                }
            }
        }
        return BankAcctCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTabDelimiter</Name>
				<Source><![CDATA[
    void useTabDelimiter()
    {
        useTab = true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>