<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileCAMT54</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains reading process of CAMT54 files.
/// </summary>
class SKS_LB_ReadFileCAMT54 extends SKS_LB_ReadFile
{
    int parentRecid;
    int fileRecNum;
    SKS_EB_FilePath lbPath;
    boolean ValidAcctPathcombo;
    boolean NotificationFlag;
    str checknum;
    BankChequeNum   precedingCheckNum;
    SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EnterChildNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process child XML nodes.
    /// </summary>
    /// <param name = "_XmlNode">XML node</param>
    public void EnterChildNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
        System.Xml.XmlNode locXMLNode;
        str locNodeName;
    
        if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode = locXMLNodeListEnum.get_Current();
                locNodeName = locXMLNode.get_Name();
                if(strUpr(locNodeName) != '#TEXT')
                {
                    this.processNode(locXMLNode);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EnterChildNodeBankAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds bank account node inside of child nodes.
    /// </summary>
    /// <param name = "_XmlNode">XML node</param>
    /// <returns>Returns XML node</returns>
    protected System.Xml.XmlNode EnterChildNodeBankAcct(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
        System.Xml.XmlNode locXMLNode;
    
        if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode = locXMLNodeListEnum.get_Current();
                return locXMLNode;
            }
        }
        return _XmlNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public TmpSKS_LB_Importing getFile()
    {
        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;

        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }

        SKS_EB_FileHub  locSKS_EB_FileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);
        
        System.Xml.XmlDocument locXmlDocument;
        System.Xml.XmlNode locXMLNode;
        str locTempTagName;
        locXmlDocument = new System.Xml.XmlDocument();

        if (Fileformat.CodePage)
        {
            locSKS_EB_FileHub.parmEncoding(Fileformat.CodePage);
        }

        locSKS_EB_FileHub.runFileLoad(Filename);
        locXmlDocument.LoadXML(locSKS_EB_FileHub.fileBody());
    
        parentrecid = 1;
        filerecnum = 1;
        NotificationFlag = false;
        lbpath =  System.IO.Path::GetDirectoryName(Filename);
        ValidAcctPathcombo = this.validatepathacctcombo(lbPath);
    
        if(locXmlDocument.get_HasChildNodes())
        {
            locXMLNode = locXmlDocument.get_FirstChild(); //<?XML ... node.
            locXMLNode = locXMLNode.get_NextSibling();//<Document xmlns...
            locTempTagName = locXMLNode.get_Name();
            if(strUpr(locTempTagName) == 'DOCUMENT')
            {
                this.processNode(locXMLNode);
            }
        }
    
        return Importing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes XML node.
    /// </summary>
    /// <param name = "_XmlNode">XML node object</param>
    public void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locParentXMLNode;
        SKS_LB_CustomerMatching sks_lb_customermatching;
        System.Xml.XmlNode  locXMLNode;
        str                 locNodeName;
        System.Xml.XmlNode locGrandParentXMLNode;
        System.Xml.XmlNode locGreatGrandParentXMLNode;
        System.Xml.XmlNode locGreatGreatGrandParentXMLNode;
        str locTempGreatGreatGrandParentNodeName;
        str locTempGreatGrandParentNodeName;
        str locTempGrandParentNodeName;
        Str locTempParentNodeName;
        Str locTempNodeName;
        str InnerText;
        str text;
        container   VirtualCompanyCompanies;
        locParentXMLNode = _XmlNode.get_ParentNode();
        locTempParentNodeName = locParentXMLNode.get_Name();
        locTempNodeName = _XmlNode.get_Name();
    
        if(locParentXMLNode != null)
        {
            locTempParentNodeName = locParentXMLNode.get_Name();
            locTempParentNodeName = strUpr(locTempParentNodeName);
            locGrandParentXMLNode = locParentXMLNode.get_ParentNode();
            if(locGrandParentXMLNode != null)
            {
                locTempGrandParentNodeName = locGrandParentXMLNode.get_Name();
                locTempGrandParentNodeName = strUpr(locTempGrandParentNodeName);
                locGreatGrandParentXMLNode = locGrandParentXMLNode.get_ParentNode();
                if(locGreatGrandParentXMLNode != null)
                {
                    locTempGreatGrandParentNodeName = locGreatGrandParentXMLNode.get_Name();
                    locTempGreatGrandParentNodeName = strUpr(locTempGreatGrandParentNodeName);
                    locGreatGreatGrandParentXMLNode = locGreatGrandParentXMLNode.get_ParentNode();
                    if(locGreatGreatGrandParentXMLNode != null)
                    {
                        locTempGreatGreatGrandParentNodeName = locGreatGreatGrandParentXMLNode.get_Name();
                        locTempGreatGreatGrandParentNodeName = strUpr(locTempGreatGreatGrandParentNodeName);
                    }
                }
            }
        }
    
        switch(strUpr(locTempNodeName))
        {
            case 'DOCUMENT', 'Dbtr':
                this.EnterChildNode(_XmlNode);
                break;
            case 'BkToCstmrDbtCdtNtfctn':
                this.EnterChildNode(_XmlNode);
                break;
            case 'NTFCTN':
                this.EnterChildNode(_XmlNode);
                break;
            case 'NTRY':
                importing.CustName = '';
                importing.CustAccount = '';
                this.EnterChildNode(_XmlNode);
                importing.PaymNote = '';
                break;
            case 'NTRYREF':
                if(strUpr(locTempParentNodeName) == 'NTRY' && strUpr(locTempGrandParentNodeName) == 'NTFCTN')
                {
                    if(Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::NtryRefMsgId)
                    {
                        this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::BatchNumber);
                        importing.CheckNumber = '';
                        checknum = _XmlNode.get_InnerText();
                    }
                    else if( Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::NtryRef)
                    {
                        text = _XmlNode.get_InnerText();
                        this.ReadOneField(text, SKS_LB_FieldType::CheckNumber);
                    }
                    importing.PaymNote += _XmlNode.get_InnerText();
                }
                break;
            case 'VALDT':
                if(Fileformat.CAMT54PaymDate == SKS_LB_CAMT54Paymdate::VALDT)
                {
                    if(locTempParentNodeName == 'NTRY' && locTempGrandParentNodeName == 'NTFCTN')
                    {
                        InnerText = _XmlNode.get_InnerText();
                        if(InnerText != '')
                        {
                            this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::HeadDateYYYYMMDD);
                        }
                    }
                }
                break;
            case 'BOOKGDT':
                if(Fileformat.CAMT54PaymDate == SKS_LB_CAMT54Paymdate::BOOKDT)
                {
                    if(locTempParentNodeName == 'NTRY' && locTempGrandParentNodeName == 'NTFCTN')
                    {
                        InnerText = _XmlNode.get_InnerText();
                        if(InnerText != '')
                        {
                            this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::HeadDateYYYYMMDD);
                            this.EnterChildNode(_XmlNode);
                        }
                    }
                }
                break;
            case 'NTRYDTLS':
                this.EnterChildNode(_XmlNode);
                break;
            case 'AmtDtls':
                this.EnterChildNode(_XmlNode);
                break;
            case 'TxAmt':
                this.EnterChildNode(_XmlNode);
                break;    
            case 'InstdAmt':
                this.EnterChildNode(_XmlNode);
                break;
            case 'AMT':
                if(strUpr(locTempParentNodeName) == 'TXAMT'
                    && strUpr(locTempGrandParentNodeName) == 'AMTDTLS'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TXDTLS'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'NTRYDTLS')
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::CheckAmount);
                }
                if(strUpr(locTempParentNodeName) == 'InstdAmt'
                    && strUpr(locTempGrandParentNodeName) == 'AMTDTLS'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TXDTLS'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'NTRYDTLS')
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::CheckAmount);
                }
                break;
            case 'CHQNB':
                if(strUpr(locTempParentNodeName) == 'REFS'
                    && strUpr(locTempGrandParentNodeName) == 'TXDTLS'
                    && strUpr(locTempGreatGrandParentNodeName) == 'NTRYDTLS'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'NTRY')
                {
                    if(Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::ChqNb)
                    {
                        this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::CheckNumber);
                    }
                }
                break;
            case 'NM':
                if(strUpr(locTempParentNodeName) == 'ULTMTDBTR'
                    && strUpr(locTempGrandParentNodeName) == 'RLTDPTIES'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TXDTLS'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'NTRYDTLS')
                {
                    InnerText = _XmlNode.get_InnerText();
                    
                    if(importing.CustAccount == '' && InnerText != '')
                    {
                        SKS_LB_CustomerMatching = new SKS_LB_CustomerMatching();
                        VirtualCompanyCompanies = SKS_LB_54000Bas::LBFindSharedServiceCompanies(SKS_LB_Bank::FindByPath(lbPath));
                        SKS_LB_CustomerMatching.GetSetCrossCompanyContainer(VirtualCompanyCompanies);
                            
                        sks_lb_customermatching.CustNameMatch(InnerText);
                        this.ReadOneField(sks_lb_customermatching.ParmCustomerName(), SKS_LB_FieldType::CustomerName);
                        if(SKS_LB_Bank::FindByPath(lbPath).LBSuggCustGood)
                        {
                            this.ReadOneField(sks_lb_customermatching.ParmAccountNum(), SKS_LB_FieldType::CustomerId);
                        }
                    }
                }
                else if(strUpr(locTempParentNodeName) == 'Dbtr'
                    && strUpr(locTempGrandParentNodeName) == 'RltdPties'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TXDTLS'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'NTRYDTLS')
                {
                    InnerText = _XmlNode.get_InnerText();
                    if(importing.CustAccount == '' && InnerText != '')
                    {
                        SKS_LB_CustomerMatching = new SKS_LB_CustomerMatching();
                        VirtualCompanyCompanies = SKS_LB_54000Bas::LBFindSharedServiceCompanies(SKS_LB_Bank::FindByPath(lbPath));
                        SKS_LB_CustomerMatching.GetSetCrossCompanyContainer(VirtualCompanyCompanies);
                        sks_lb_customermatching.CustNameMatch(InnerText);
                        this.ReadOneField(sks_lb_customermatching.ParmCustomerName(), SKS_LB_FieldType::CustomerName);
                        if(SKS_LB_Bank::FindByPath(lbPath).LBSuggCustGood)
                        {
                            this.ReadOneField(sks_lb_customermatching.ParmAccountNum(), SKS_LB_FieldType::CustomerId);
                        }
                    }
                }
                break;
            case 'DT':
                if(strUpr(locTempParentNodeName) == 'BOOKGDT'
                    && strUpr(locTempGrandParentNodeName) == 'NTRY'
                    && strUpr(locTempGreatGrandParentNodeName) == 'NTFCTN' )
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::DateYYYYMMDD);
                }
                break;
            case 'RMTINF':
                importing.PaymNote  += SKS_LB_ReadFileCAMT54::formatRmtInf(_XmlNode);
                this.EnterChildNode(_XmlNode);
                break;
            case 'USTRD':
                importing.FileLineNbrBegin = FileRecNum;
                FileRecNum++;
                this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::TxnDescription);
                break;
            case 'TxDtls':
                this.EnterChildNode(_XmlNode);
                if(ValidAcctPathcombo)
                {
                    importing.ParentRecid = parentRecid;
                    importing.insert();
                }
                importing.InvAmount = 0;
                importing.InvoiceNumber = '';
                importing.LBInvoice = '';
                importing.DiscAmount = 0;
                importing.Description = '';
                importing.PaymNote = '';
                importing.BankPmtTotal = 0;
                importing.CustBankAccountNum = '';
                importing.CustBankRegNum = '';
                importing.InvSettleType = SKS_LB_Invoicesettletype::Debit;
                importing.CheckNumber = '';
                parentRecid++;
                break;
            case 'REFS':
                this.EnterChildNode(_XmlNode);
                break;
            case 'RltdPties':
                this.EnterChildNode(_XmlNode);
                break;
            case 'UltmtDbtr':
                this.EnterChildNode(_XmlNode);
                break;
            case 'PstlAdr':
                this.EnterChildNode(_XmlNode);
                break;
            case 'AdrLine':
                if(strUpr(locTempParentNodeName) == 'PSTLADR'
                    && strUpr(locTempGrandParentNodeName) == 'ULTMTDBTR'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RLTDPTIES'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'TXDTLS')
                {
                    InnerText = _XmlNode.get_InnerText();
                    if(importing.CustAccount == '' && InnerText != '')
                    {
                        sks_lb_customermatching = new sks_lb_customermatching();
                        VirtualCompanyCompanies = SKS_LB_54000Bas::LBFindSharedServiceCompanies(SKS_LB_Bank::FindByPath(lbPath));
                        SKS_LB_CustomerMatching.GetSetCrossCompanyContainer(VirtualCompanyCompanies);
                        sks_lb_customermatching.CustNameMatch(InnerText);
                        if(sks_lb_customermatching.ParmCustomerName() != '')
                        {
                            this.ReadOneField(sks_lb_customermatching.ParmCustomerName(), SKS_LB_FieldType::CustomerName);
                        }
                        if(SKS_LB_Bank::FindByPath(lbPath).LBSuggCustGood)
                        {
                            this.ReadOneField(sks_lb_customermatching.ParmAccountNum(), SKS_LB_FieldType::CustomerId);
                        }
                    }
                }
                break;
            case 'ACCT':
                this.EnterChildNode(_XmlNode);
                break;
            case 'Svcr':
                this.EnterChildNode(_XmlNode);
                break;
            case 'FinInstnId':
                this.EnterChildNode(_XmlNode);
                break;
            case 'BIC':
                if(strUpr(locTempParentNodeName) == 'FININSTNID'
                    && strUpr(locTempGrandParentNodeName) == 'DBTRAGT'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RLTDAGTS')
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::BankTransit_RoutingNumber);
                }
                break;
            case 'Strd':
                this.EnterChildNode(_XmlNode);
                locXMLNode = _XmlNode.get_NextSibling();
                if(locXMLNode != null)
                {
                    locNodeName = locXMLNode.get_Name();
                    if(strUpr(locNodeName) == 'Strd')
                    {
                        importing.ParentRecid = parentRecid;
                        if(ValidAcctPathcombo)
                        {
                            importing.insert();
                        }
                        importing.InvAmount = 0;
                        importing.InvoiceNumber = '';
                        importing.LBInvoice = '';
                        importing.DiscAmount = 0;
                        importing.Description = '';
                        importing.PaymNote = '';
                        importing.InvSettleType = SKS_LB_Invoicesettletype::Debit;
                    }
                }
                break;
            case 'RfrdDocAmt':
                this.EnterChildNode(_XmlNode);
                break;
            case 'CdtNoteAmt':
                if(strUpr(locTempParentNodeName) == 'RfrdDocAmt'
                    && strUpr(locTempGrandParentNodeName) == 'STRD'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RMTINF')
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::InvAmt);
                    //This node represents a negative settlement amount. Credit indicator is set to blank so passing a blank to the DocType field will effectively set this record toa credit amount
                    this.ReadOneField('', SKS_LB_FieldType::DocumentType);
                }
                break;
            case 'RmtdAmt':
                if(strUpr(locTempParentNodeName) == 'RfrdDocAmt'
                    && strUpr(locTempGrandParentNodeName) == 'STRD'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RMTINF')
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::InvAmt);
                    this.ReadOneField('Debit', SKS_LB_FieldType::DocumentType);
                }
                break;
            case 'CdtrRefInf':
                this.EnterChildNode(_XmlNode);
                break;
            case 'Ref':
                if(strUpr(locTempParentNodeName) == 'CdtrRefInf'
                    && strUpr(locTempGrandParentNodeName) == 'STRD'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RMTINF')
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::InvNumber);
                }
                else if(strUpr(locTempParentNodeName) == 'CdtrRefInf'
                    && strUpr(locTempGrandParentNodeName) == 'Strd'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RmtInf'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'NtryDtls')
                {
                    importing.PaymNote += _XmlNode.get_InnerText();
                }
                break;
            case 'Nb':
                if(strUpr(locTempParentNodeName) == 'RfrdDocInf'
                    && strUpr(locTempGrandParentNodeName) == 'Strd'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RMTINF')
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::InvNumber);
                }
                break;
            case 'DbtrAcct':
                this.EnterChildNode(_XmlNode);
                break;
            case 'Id':
                if(strUpr(locTempParentNodeName) == 'DbtrAcct'
                    && strUpr(locTempGrandParentNodeName) == 'RLTDPTIES'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TXDTLS'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'NTRYDTLS')
                {
                    this.EnterChildNode(_XmlNode);
                }
                else if(strUpr(locTempParentNodeName) == 'OTHR'
                    && strUpr(locTempGrandParentNodeName) == 'ID'
                    && strUpr(locTempGreatGrandParentNodeName) == 'DbtrAcct'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'RLTDPTIES')
                {
                    InnerText = _XmlNode.get_InnerText();
                    if(importing.CustAccount == '' && InnerText != '')
                    {
                        sks_lb_customermatching = new sks_lb_customermatching();
                        VirtualCompanyCompanies = SKS_LB_54000Bas::LBFindSharedServiceCompanies(SKS_LB_Bank::FindByPath(lbPath));
                        sks_lb_customermatching.CustIBANMatch(InnerText, virtualCompanyCompanies);
                        if(sks_lb_customermatching.ParmAccountNum() != '')
                        {
                            this.ReadOneField(sks_lb_customermatching.ParmAccountNum(), SKS_LB_FieldType::CustomerId);
                        }
                    }
                    this.ReadOneField(InnerText, SKS_LB_FieldType::BankAccountNumber);
                }
                else if(strUpr(locTempParentNodeName) == 'CDTRACCT'
                    && strUpr(locTempGrandParentNodeName) == 'RLTDPTIES'
                    && strUpr(locTempGreatGrandParentNodeName) == 'TXDTLS'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'NtryDtls')
                {
                    if(!NotificationFlag)
                    {
                        InnerText = _XmlNode.get_InnerText();
                        this.ReadOneField(InnerText, SKS_LB_FieldType::LBBankAccount);
                        ValidAcctPathcombo = this.validatepathacctcombo(lbPath);
                    }
                    this.EnterChildNode(_XmlNode);
                }
                else if(strUpr(locTempParentNodeName) == 'ACCT'
                    && strUpr(locTempGrandParentNodeName) == 'NTFCTN'
                    && strUpr(locTempGreatGrandParentNodeName) == 'BkToCstmrDbtCdtNtfctn')
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::LBBankAccount);
                    ValidAcctPathcombo = this.validatepathacctcombo(lbPath);
                    this.EnterChildNode(_XmlNode);
                }
                else if(strUpr(locTempParentNodeName) == 'Othr'
                    && strUpr(locTempGrandParentNodeName) == 'ID'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Acct')
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::LBBankAccount);
                    ValidAcctPathcombo = this.validatepathacctcombo(lbPath);
                }
                else if(strUpr(locTempParentNodeName) == 'Othr'
                    && strUpr(locTempGrandParentNodeName) == 'ID'
                    && strUpr(locTempGreatGrandParentNodeName) == 'CDTRACCT')
                {
                    InnerText = _XmlNode.get_InnerText();
                    this.ReadOneField(InnerText, SKS_LB_FieldType::LBBankAccount);
                    ValidAcctPathcombo = this.validatepathacctcombo(lbPath);
                }
                break;
            case 'IBAN':
                if(strUpr(locTempParentNodeName) == 'ID'
                    && strUpr(locTempGrandParentNodeName) == 'DbtrAcct'
                    && strUpr(locTempGreatGrandParentNodeName) == 'RLTDPTIES'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'AMTDTLS')
                {
                    InnerText = _XmlNode.get_InnerText();
                    if(importing.CustAccount == '' && InnerText != '')
                    {
                        sks_lb_customermatching = new sks_lb_customermatching();
                        VirtualCompanyCompanies = SKS_LB_54000Bas::LBFindSharedServiceCompanies(SKS_LB_Bank::FindByPath(lbPath));
                        sks_lb_customermatching.CustIBANMatch(InnerText, VirtualCompanyCompanies);
                        if(sks_lb_customermatching.ParmAccountNum() != '')
                        {
                            this.ReadOneField(sks_lb_customermatching.ParmAccountNum(), SKS_LB_FieldType::CustomerId);
                        }
                    }
                    this.ReadOneField(InnerText, SKS_LB_FieldType::BankAccountNumber);
                }
                else if(strUpr(locTempParentNodeName) == 'ID'
                    && strUpr(locTempGrandParentNodeName) == 'Acct'
                    && strUpr(locTempGreatGrandParentNodeName) == 'NTFCTN')
                {
                    this.ReadOneField(InnerText, SKS_LB_FieldType::LBBankAccount);
                    ValidAcctPathcombo = this.validatepathacctcombo(lbPath);
                    NotificationFlag = true;
                }
                break;
            case 'Othr':
                this.EnterChildNode(_XmlNode);
                break;
            case 'DbtrAgt':
                if(strUpr(locTempParentNodeName) == 'RltdAgts')
                {
                    this.EnterChildNode(_XmlNode);
                }
                break;
            case 'RltdAgts':
                this.EnterChildNode(_XmlNode);
                break;
            case 'RfrdDocInf':
                this.EnterChildNode(_XmlNode);
                break;
            case 'CdtrAcct':
                if(strUpr(locTempParentNodeName) == 'RltdPties')
                {
                    this.EnterChildNode(_XmlNode);
                }
                break;
            case 'MsgId':
                if(strUpr(locTempParentNodeName) == 'Refs'
                    && strUpr(locTempGrandParentNodeName) == 'TxDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'NtryDtls')
                {
                    if(Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::NtryRefMsgId)
                    {
                        text = _XmlNode.get_InnerText();
                        this.ReadOneField(strFmt(checknum + '-' + text), SKS_LB_FieldType::CheckNumber);
                    }
                    else if(Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::MsgId)
                    {
                        text = _XmlNode.get_InnerText();
                        this.ReadOneField(text, SKS_LB_FieldType::CheckNumber);
                    }
    
                }
                break;
            case 'BkTxCd':
                this.EnterChildNode(_XmlNode);
                break;
            case 'Prtry':
                this.EnterChildNode(_XmlNode);
                break;
            case 'CD':
                if(strUpr(locTempParentNodeName) == 'Prtry'
                    && strUpr(locTempGrandParentNodeName) == 'BkTxCd'
                    && strUpr(locTempGreatGrandParentNodeName) == 'Ntry'
                    && strUpr(locTempGreatGreatGrandParentNodeName) == 'Ntfctn')
                {
                    this.ReadOneField(_XmlNode.get_InnerText(), SKS_LB_FieldType::PaymentType);
                }
                break;
            case 'AddtlNtryInf':
                if(strUpr(locTempParentNodeName) == 'Ntry'
                    && strUpr(locTempGrandParentNodeName) == 'Ntfctn')
                {
                    if(ValidAcctPathcombo)
                    {
                        importing.PaymNote += _XmlNode.get_InnerText();
                        importing.update();
                    }
                }
                break;
            case 'EndToEndID':
                if(strUpr(locTempParentNodeName) == 'Refs'
                    && strUpr(locTempGrandParentNodeName) == 'TxDtls'
                    && strUpr(locTempGreatGrandParentNodeName) == 'NtryDtls')
                {
                    importing.PaymNote += _XmlNode.get_InnerText();
                }
                break;
            case 'AcctSvcrRef':
                if(strUpr(locTempParentNodeName) == 'Ntry'
                    && strUpr(locTempGrandParentNodeName) == 'Ntfctn'
                    && strUpr(locTempGreatGrandParentNodeName) == 'BkToCstmrDbtCdtNtfctn')
                {
                    if(Fileformat.CAMTChkNumType == SKS_LB_CAMTChkNumType::AcctSvcrRef)
                    {
                        text = _XmlNode.get_InnerText();
                        this.ReadOneField(text, SKS_LB_FieldType::CheckNumber);
                    }
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveBankAccountNumberFromFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves bank account number from file.
    /// </summary>
    /// <returns>Returns bank account number</returns>
    container RetrieveBankAccountNumberFromFile()
    {
        container   BankAcctCon;
        System.Xml.XmlDocument  locXmlDocument = new System.Xml.XmlDocument();
        System.Xml.XmlNode      locXMLNode;
        System.Xml.XmlNodeList  xmlNodeList;
      
        int                     countxml;
        int                     iter;
        str                     AcctNum;
        str                     TmpAcct;
        str                     NodeName;
        boolean                 NoteIDFound;

        SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;

        if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
        }

        SKS_EB_FileHub  lFileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

        lFileHub.runFileLoad(Filename);
        locXmlDocument.LoadXML(lFileHub.fileBody());
    
        if(locXmlDocument.get_HasChildNodes())
        {
            xmlNodeList = locXmlDocument.GetElementsByTagName('Ntfctn');
            countxml = xmlNodeList.get_Count();
            for(iter = 0; iter < countxml; iter++)
            {
                NoteIDFound = false;
                locXMLNode = xmlNodeList.Item(iter);
                locXMLNode = locXMLNode.get_FirstChild();
                while(locXMLNode != null)
                {
                    NodeName = locXMLNode.get_Name();
                    if(NodeName == 'Acct')
                    {
                        locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                        NodeName = locXMLNode.get_Name();
                        if(NodeName == 'Id')
                        {
                            locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                            NodeName = locXMLNode.get_Name();
                            if(NodeName == 'IBAN')
                            {
                                TmpAcct = locXMLNode.get_InnerText();
                                if(conFind(BankAcctCon, TmpAcct) == 0)//Makes sure the account number is unique and not already in the container
                                {
                                    BankAcctCon += TmpAcct;
                                    if(!FileFormat.VerifyAcct)
                                    {
                                        iter = countxml;
                                    }
                                    noteIDFound = true;
                                }
                            }
                            else if(NodeName == 'Othr')
                            {
                                locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                                NodeName = locXMLNode.get_Name();
                                if(NodeName == 'Id')
                                {
                                    TmpAcct = locXMLNode.get_InnerText();
                                    if(conFind(BankAcctCon, TmpAcct) == 0)//Makes sure the account number is unique and not already in the container
                                    {
                                        BankAcctCon += TmpAcct;
                                        if(!FileFormat.VerifyAcct)
                                        {
                                            iter = countxml;
                                        }
                                        NoteIDFound = true;
                                    }
                                }
                            }
                        }
                    }
                    locXMLNode = locXMLNode.get_NextSibling();
                }
            }
        }
    
        if(!NoteIDFound)
        {
            xmlNodeList = locXmlDocument.GetElementsByTagName('CdtrAcct');
            countxml = xmlNodeList.get_Count();
            for(iter = 0; iter < countxml; iter++)
            {
                locXMLNode = xmlNodeList.Item(iter);
                AcctNum = locXMLNode.get_InnerText();

                locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                NodeName = locXMLNode.get_Name();
                if(NodeName == 'Id')
                {
                    locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                    NodeName = locXMLNode.get_Name();
                    if(NodeName == 'Othr')
                    {
                        locXMLNode = this.EnterChildNodeBankAcct(locXMLNode);
                        NodeName = locXMLNode.get_Name();
                        if(NodeName == 'Id')
                        {
                            TmpAcct = locXMLNode.get_InnerText();
                            if(conFind(BankAcctCon, TmpAcct) == 0)//Makes sure the account number is unique and not already in the container
                            {
                                BankAcctCon += AcctNum;
                                if(!FileFormat.VerifyAcct)
                                {
                                    iter = countxml;
                                }
                            }
                        }
                    }
                }
    
                if(conFind(BankAcctCon, AcctNum) == 0)//Makes sure the account number is unique and not already in the container
                {
                    BankAcctCon += AcctNum;
                    if(!FileFormat.VerifyAcct)
                    {
                        iter = countxml;
                    }
                }
            }
        }
        return BankAcctCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatRmtInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds payment notes inside of an XML node.
    /// </summary>
    /// <param name = "_xmlNode">XML node object</param>
    /// <returns>Returns payment notes</returns>
    public static str formatRmtInf(System.Xml.XmlNode _xmlNode)
    {
        str                     ret;
        str                     ustrd;
        System.Xml.XmlNodeList  xmlNodeList;
        integer                 i;
        Counter                 totalElements;
        System.Xml.XmlNode      xmlElement;
    
        try
        {
            if (_xmlNode)
            {
                xmlNodeList = _xmlNode.get_ChildNodes();
    
                if (!xmlNodeList)
                {
                    return ret;
                }
    
                totalElements = xmlNodeList.get_Count();
    
                for (i=0; i < totalElements; i++)
                {
                    xmlElement  = xmlNodeList.get_ItemOf(i);
                    if (xmlElement)
                    {
                        ustrd = xmlElement.get_InnerXml();
    
                        ret += ret ? '\r\n' + ustrd : ustrd;
                    }
                }
            }
        }
        catch(Exception::CLRError)
        {
            ret = '';
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>