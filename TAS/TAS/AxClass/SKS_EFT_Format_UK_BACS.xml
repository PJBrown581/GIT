<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_BACS</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_BACS extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_BACS extends SKS_EFT_Format
{
    #define.FormatVersion('20221221')
    System.Text.StringBuilder msb;
    SKS_EFT_SequenceNumber mSequenceNumber;
    SKS_EFT_FileDetail     sKS_EFT_FileDetail;
    AmountMST       mDPaymentAmount;
    AmountMST       mCPaymentAmount;
    int             mDRecordCount;
    int             mCRecordCount;
    date            effectivDate;
    str  idValue;

    #define.LineEnd('\n')


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// formatStructure
    /// </summary>
    protected void formatStructure()
    {
        msb = new System.Text.StringBuilder();

        // Get sequence number
        this.getSequence();

        this.rec_VOL1();

        this.rec_HDR1();

        this.rec_HDR2();

        this.rec_UHL1();

        while(mSKS_EFT_FileDetail)
        {
           
            //Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            this.getSKS_EFT_VendorPaym();

            //Get Remittance Information
            this.getRemittanceAddress(false);

            // Detail Record
            this.rec_Detail();

            // Contra Record
            this.rec_Contra();

            idValue = mSKS_EFT_FileDetail_BankAccount.WOrdPartyId;
            next mSKS_EFT_FileDetail;
        }
        this.rec_EOF1();

        this.rec_EOF2();

        this.rec_UTL1();

        // Write to file
        this.fileWrite(msb.ToString());

        // Increment sequence number
        this.incrementSequenceNumber();

        // Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 999 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;

        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;

        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_VOL1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_VOL1
    /// </summary>
    /// <returns>boolean</returns>
    boolean rec_VOL1()
    {
        //  Label identifier
        msb.Append('VOL');

        //  Label identifier
        msb.Append('1');
        
        //  Submission serial number
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(mSKS_EFT_File.FileNbr, strLen(mSKS_EFT_File.FileNbr), -6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Accessibility indicator
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Owner identification
        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(32, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Label standard level
        msb.Append('1');

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HDR1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_HDR1
    /// </summary>
    /// <returns>true or false</returns>
    boolean rec_HDR1()
    {

        //   Label identifier
        msb.Append('HDR');

        //   Label number
        msb.Append('1');

        //  File identifier
        msb.Append('A');

        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('S');

        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('1');

        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Set identification
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(mSKS_EFT_File.FileNbr, strLen(mSKS_EFT_File.FileNbr), -6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  File section number
        msb.Append('0001');

        //  File sequence number
        msb.Append('0001');

        //  Generation number
        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Generation version number
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Creation date
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Expiration date
        this.selectRecord();

        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            mSKS_EFT_Bank = SKS_EFT_Bank::findByCompany(mSKS_EFT_FileDetail.AccountCompany,mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);
            effectivDate = SKS_EFT_Processing::GetOffsetDate(6, sKS_EFT_FileDetail.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
        }
        else if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::BTB)
        {
            mSKS_EFTBTB_Bank= SKS_EFTBTB_Bank::findByCompany(mSKS_EFT_FileDetail.AccountCompany,mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);
            effectivDate = SKS_EFT_Processing::GetOffsetDate(6, sKS_EFT_FileDetail.EffectiveDate, mSKS_EFTBTB_Bank.BankHolidayGroupId);
        }
        else if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP)
        {
            mSKS_EFTCNP_Bank = SKS_EFTCNP_Bank::findByCompany(mSKS_EFT_FileDetail.AccountCompany,mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);
            effectivDate = SKS_EFT_Processing::GetOffsetDate(6, sKS_EFT_FileDetail.EffectiveDate,mSKS_EFTCNP_Bank.BankHolidayGroupId);
        }

        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(effectivDate),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Accessibility indicator
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Block count
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  System code
        msb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRecord</Name>
				<Source><![CDATA[
    private void selectRecord()
    {
        select firstonly EffectiveDate from sKS_EFT_FileDetail
            order by
                sKS_EFT_FileDetail.EffectiveDate asc
             where sKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                sKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                sKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// getInvoiceDetails
    /// </summary>
    /// <returns>str</returns>
    private str getInvoiceDetails()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invDetailsString;

        while select InvoiceNumber from invSKS_EFT_FileDetail
        where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
           && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invDetailsString += strFmt('%1, ', invSKS_EFT_FileDetail.InvoiceNumber);
        }

        invDetailsString = subStr(invDetailsString, 1, strLen(invDetailsString)-2);

        return invDetailsString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HDR2</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_HDR2
    /// </summary>
    /// <returns>boolean</returns>
    boolean rec_HDR2()
    {
        //   Label identifier
        msb.Append('HDR');

        //   Label number
        msb.Append('2');

        //   Record format
        msb.Append('F');

        //   Block length
        msb.Append('00128');

        //   Record length
        msb.Append('00100');

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Buffer offset
        msb.Append('00');

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(28, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UHL1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UHL1
    /// </summary>
    /// <returns>boolean</returns>
    boolean rec_UHL1()
    {
        //  Label identifier
        msb.Append('UHL');

        //   Label number
        msb.Append('1');

        //   Processing date
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(mSKS_EFT_FileDetail.EffectiveDate), 3, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Identifying number of receiving party
        msb.Append('999999');

        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Currency code
        msb.Append('00');

        //   Country code
        msb.Append('000000');

        //   Work code
        msb.Append('1 DAILY  ');

        //   File number
        msb.Append(SKS_PP_StringFormats::strFill(3, num2Str(mSequenceNumber, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Audit print identifier
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(26, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail
    /// </summary>
    /// <returns>boolean</returns>    
    boolean rec_Detail()
    {
        str invDetailsString, value;

        invDetailsString = this.getInvoiceDetails();

        //  Destination sorting code
        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Destination a/c number
        msb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Destination a/c type
        msb.Append('0');

        //  Transaction code        
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mDRecordCount++;
            msb.Append('17');                   //SKS#DevOps:20460
            mDPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            mCRecordCount++;
            msb.Append('99');
            mCPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }        

        //  Originating sorting code
        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Originating account number
        msb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Free format
        msb.Append('0000');

        //  Amount in pence
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 11));

        //  Service user’s name
        msb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //  Service user’s reference
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'BACS-REF')          //SKS#DevOps:18067
        {
            if(strLen(mSKS_EFT_FileDetail.PaymentReference) <= 6)
            {
                value = SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right);        //SKS#DevOps:20961
            }
            else
            {
                value = mSKS_EFT_FileDetail.PaymentReference;        //SKS#DevOps:20961
            }
            msb.Append(SKS_PP_StringFormats::strFill(18, value, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            if(strLen(invDetailsString) <= 6)
            {
                value = SKS_PP_StringFormats::strFill(6, invDetailsString, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right);        //SKS#DevOps:21000
            }
            else
            {
                value = invDetailsString;        //SKS#DevOps:21000
            }
            msb.Append(SKS_PP_StringFormats::strFill(18, value, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //  Destination account name
        msb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mRemittanceName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'BACS-REF')          //SKS#DevOps:18067
        {
            //  BACS processing day of data
            msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())), 3, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        }
        
        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Contra</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Contra
    /// </summary>
    /// <returns>boolean</returns>
    boolean rec_Contra()
    {
        str invDetailsString;

        invDetailsString = this.getInvoiceDetails();

        //  Destination sorting code

        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Destination a/c number
        msb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Destination a/c type
        msb.Append('0');

        //  Transaction code
        
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mCRecordCount++;
            msb.Append('99');                          //SKS#DevOps:20460, 20961
            mCPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            mDRecordCount++;
            msb.Append('17');
            mDPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }

        //  Originating sorting code
        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));//SKS#DevOps:20961

        //  Originating account number
        msb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));//SKS#DevOps:20961

        //   Free format
        msb.Append('0000');

        //  Amount in pence
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 11));

        //  Service user’s name
        msb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Service user’s reference
        msb.Append(SKS_PP_StringFormats::strFill(18, 'CONTRA', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Destination account name
        msb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'BACS-REF')          //SKS#DevOps:18067
        {
            //  BACS processing day of data
            msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())), 3, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        }

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_EOF1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_EOF1
    /// </summary>
    /// <returns>boolean</returns>
    boolean rec_EOF1()
    {
        //  Label identifier
        msb.Append('EOF');

        //  Label number
        msb.Append('1');

        //  Same as HDR1 fields 3 to 11

        //  File identifier
        msb.Append('A');

        msb.Append(SKS_PP_StringFormats::strFill(6,idValue, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('S');

        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('1');

        msb.Append(SKS_PP_StringFormats::strFill(6,idValue, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //  Set identification
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(mSKS_EFT_File.FileNbr, strLen(mSKS_EFT_File.FileNbr), -6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  File section number
        msb.Append('0001');

        //  File sequence number
        msb.Append('0001');

        //  Generation number
        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Generation version number
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Creation date
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())), 3, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Expiration date
        this.selectRecord();

        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(effectivDate), 3, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Accessibility indicator
        msb.Append(' ');

        //  Block count
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  System code
        msb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_EOF2</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_EOF2
    /// </summary>
    /// <returns>boolean</returns>
    boolean rec_EOF2()
    {
        //  Label identifier
        msb.Append('EOF');

        //  Label number
        msb.Append('2');

        //  Record format
        msb.Append('F');

        //  Block length
        msb.Append('00128');

        //  Record length
        msb.Append('00100');

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Buffer offset
        msb.Append('00');

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(28, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UTL1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UTL1
    /// </summary>
    /// <returns>boolean</returns>
    boolean rec_UTL1()
    {
        //  Label identifier
        msb.Append('UTL');

        //  Label number
        msb.Append('1');

        //  Debit value total
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mDPaymentAmount), 13));

        //  Credit value total
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mCPaymentAmount), 13));

        //  Debit item count
        msb.Append(SKS_PP_StringFormats::strFill(7, num2Str(mDRecordCount, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        //  Credit item count
        msb.Append(SKS_PP_StringFormats::strFill(7, num2Str(mCRecordCount, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  DDI count
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  For use by service user
        msb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        //Populate Remittance Information from Vendor eBanking details
        mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
        mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
        mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
        mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
        mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
        mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
       
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>