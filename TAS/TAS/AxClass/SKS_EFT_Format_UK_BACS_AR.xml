<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_BACS_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_BACS_AR
/// </summary>
class SKS_EFT_Format_UK_BACS_AR extends SKS_EFT_Format
{
    #define.FormatVersion('20221017')
    System.Text.StringBuilder msb;
    SKS_EFT_FileDetail     sKS_EFT_FileDetail;
    int mRecordCount;
    str mSequenceNumber, w01;

    #define.LineEnd('\n')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        msb = new System.Text.StringBuilder();

        this.rec_VOL1();

        this.rec_HDR1();

        this.rec_HDR2();

        this.rec_UHL1();

        while(mSKS_EFT_FileDetail)
        {
            // Detail Record
            this.rec_Detail();

            next mSKS_EFT_FileDetail;
        }
        this.rec_EOF1();

        this.rec_EOF2();

        this.rec_UTL1();

        // Write to file
        this.fileWrite(msb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_VOL1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_VOL1
    /// </summary>
    /// <returns>true</returns>
    boolean rec_VOL1()
    {
        //  Label identifier
        msb.Append('VOL');

        //  Label identifier
        msb.Append('1');
        
        //  Submission serial number
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(mSKS_EFT_File.FileNbr, strLen(mSKS_EFT_File.FileNbr), -6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Accessibility indicator
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Owner identification
        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        w01 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ServiceUserNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        msb.Append(SKS_PP_StringFormats::strFill(6, w01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(32, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Label standard level
        msb.Append('1');

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HDR1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_HDR1
    /// </summary>
    /// <returns>true</returns>
    boolean rec_HDR1()
    {
        //   Label identifier
        msb.Append('HDR');

        //   Label number
        msb.Append('1');

        //  File identifier
        msb.Append('A');

        msb.Append(SKS_PP_StringFormats::strFill(6, w01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('S');

        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('1');

        msb.Append(SKS_PP_StringFormats::strFill(6, w01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //  Set identification
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(mSKS_EFT_File.FileNbr, strLen(mSKS_EFT_File.FileNbr), -6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  File section number
        msb.Append('0001');

        //  File sequence number
        msb.Append('0001');

        //  Generation number
        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Generation version number
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Creation date
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Expiration date
        this.selectRecord();

        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(mSKS_EFT_FileDetail.EffectiveDate),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Accessibility indicator
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Block count
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  System code
        msb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectRecord</Name>
				<Source><![CDATA[
    private void selectRecord()
    {
        select firstonly EffectiveDate from sKS_EFT_FileDetail
            order by
                sKS_EFT_FileDetail.EffectiveDate asc
             where sKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                sKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                sKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    private str getInvoiceDetails()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invDetailsString;

        while select InvoiceNumber from invSKS_EFT_FileDetail
        where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
           && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invDetailsString += strFmt('%1, ', invSKS_EFT_FileDetail.InvoiceNumber);
        }

        invDetailsString = subStr(invDetailsString, 1, strLen(invDetailsString)-2);

        return invDetailsString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HDR2</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_HDR2
    /// </summary>
    /// <returns>true</returns>
    boolean rec_HDR2()
    {
        //   Label identifier
        msb.Append('HDR');

        //   Label number
        msb.Append('2');

        //   Record format
        msb.Append('F');

        //   Block length
        msb.Append('00128');

        //   Record length
        msb.Append('00100');

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Buffer offset
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(28, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UHL1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UHL1
    /// </summary>
    /// <returns>true</returns>
    boolean rec_UHL1()
    {
       //  Label identifier
        msb.Append('UHL');

        //   Label number
        msb.Append('1');

        //   Bacs processing day
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(mSKS_EFT_FileDetail.EffectiveDate), 3, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Identifying number of receiving party
        msb.Append('999999');

        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Currency code
        msb.Append('00');

        //   Country code
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //   Work code        
        msb.Append('2 FPS' + SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   File number
        mSequenceNumber = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId));
        msb.Append(SKS_PP_StringFormats::strFill(3, mSequenceNumber, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Audit print identifier        
        msb.Append(SKS_PP_StringFormats::strFill(7, 'AUD'+ this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AuditPrintIdentifier', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(26, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail
    /// </summary>
    /// <returns>true</returns>
    boolean rec_Detail()
    {
        str invDetailsString;

        mRecordCount++;
        invDetailsString = this.getInvoiceDetails();

        //  Destination sorting code
        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Destination a/c number
        msb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Destination a/c type
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Transaction code
        msb.Append(SKS_PP_StringFormats::strFill(2, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TransactionCode', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Originating sorting code
        msb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Originating account number
        msb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Free format
        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Amount in pence
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 11));

        //  User’s name
        msb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  User’s reference
        msb.Append(SKS_PP_StringFormats::strFill(18, invDetailsString, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Destination account name
        msb.Append(SKS_PP_StringFormats::strFill(18, this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //  Bacs processing day of data
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(mSKS_EFT_FileDetail.EffectiveDate), 3, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        
        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_EOF1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_EOF1
    /// </summary>
    /// <returns>true</returns>
    boolean rec_EOF1()
    {
        //  Label identifier
        msb.Append('EOF');

        //  Label number
        msb.Append('1');

        //  Same as HDR1 fields 3 to 11

        //  File identifier
        msb.Append('A');

        msb.Append(SKS_PP_StringFormats::strFill(6, w01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('S');

        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append('1');

        msb.Append(SKS_PP_StringFormats::strFill(6, w01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //  Set identification
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(mSKS_EFT_File.FileNbr, strLen(mSKS_EFT_File.FileNbr), -6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  File section number
        msb.Append('0001');

        //  File sequence number
        msb.Append('0001');

        //  Generation number
        msb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Generation version number
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Creation date
        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Expiration date
        this.selectRecord();

        msb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(mSKS_EFT_FileDetail.EffectiveDate),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        //  Accessibility indicator
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Block count
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  System code
        msb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_EOF2</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_EOF2
    /// </summary>
    /// <returns>true</returns>
    boolean rec_EOF2()
    {
        //  Label identifier
        msb.Append('EOF');

        //  Label number
        msb.Append('2');

        //   Record format
        msb.Append('F');

        //   Block length
        msb.Append('00128');

        //   Record length
        msb.Append('00100');

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //   Buffer offset
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //   Reserved
        msb.Append(SKS_PP_StringFormats::strFill(28, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));


        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UTL1</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_UTL1
    /// </summary>
    /// <returns>true</returns>
    boolean rec_UTL1()
    {
        //  Label identifier
        msb.Append('UTL');

        //  Label number
        msb.Append('1');

        //  Monetary total of debit records
        msb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Monetary total of credit records
        msb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Count of debit records
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        //  Count of credit records
        msb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        //  Reserved
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  DDI count
        msb.Append(SKS_PP_StringFormats::strFill(7, num2Str(mRecordCount, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  For use by service user
        msb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>