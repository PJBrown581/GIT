<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_TranTypeProcessing</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BR_TranTypeProcessing
{
    str errorText;
    SKS_BR_FileTranType fileTranType;
    DimensionDefault dimension;
    boolean ignoreTranType;
    boolean validateTranType;
    boolean bankCredit;
    CompanyBankAccountId bankAccountId;
    SKS_BR_GLMappingRuleGroupId glMappingRuleGroupId;
    SKS_BR_MatchingRuleGroupId matchingRuleGroupId;
    BankTransactionType bankTranType;
    SKS_BR_FormatId formatId;
    SKS_BR_FileFormatTranMapping sks_br_fileformattranmapping;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankCredit</Name>
				<Source><![CDATA[
    boolean getBankCredit()
    {
        ;
        return bankCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankTranType</Name>
				<Source><![CDATA[
    str getBankTranType()
    {
        ;
        return bankTranType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimension</Name>
				<Source><![CDATA[
    DimensionDefault getDimension()
    {
        ;
        return dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    str getErrorText()
    {
        ;
        return errorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGLMappingRuleGroupId</Name>
				<Source><![CDATA[
    public SKS_BR_GLMappingRuleGroupId getGLMappingRuleGroupId()
    {
        ;
        return glMappingRuleGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIgnoreTranType</Name>
				<Source><![CDATA[
    boolean getIgnoreTranType()
    {
        ;
        return ignoreTranType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingRuleGroupId</Name>
				<Source><![CDATA[
    public SKS_BR_MatchingRuleGroupId getMatchingRuleGroupId()
    {
        ;
        return matchingRuleGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTranTypeMapping</Name>
				<Source><![CDATA[
    private void getTranTypeMapping(boolean _isCalledFromCCR = false)// SKS_FDD_13903 This parameter will set yes when this method is called from CCR related classes
    {
        SKS_BR_TranTypeBankAccount SKS_BR_TranTypeBankAccount;
        ;
    
        // See if record exists for All bank account
        select sks_br_fileformattranmapping where
         sks_br_fileformattranmapping.FormatID == formatId &&
         sks_br_fileformattranmapping.FileTranType == fileTranType &&
         sks_br_fileformattranmapping.BankAccountSpecifier == SKS_BR_BankAccountSpecifier::All &&
         sks_br_fileformattranmapping.CCR_IsCCRFormat == _isCalledFromCCR; // SKS_FDD_13903
        // If no All bank account, check for specific bank account
        if(!sks_br_fileformattranmapping)
        {
            select sks_br_fileformattranmapping
            join BankAccountId, FileTranTypeRecId from SKS_BR_TranTypeBankAccount
            where
             sks_br_fileformattranmapping.RecId == SKS_BR_TranTypeBankAccount.FileTranTypeRecId &&
             sks_br_fileformattranmapping.FormatID == formatId &&
             sks_br_fileformattranmapping.FileTranType == fileTranType &&
             sks_br_fileformattranmapping.BankAccountSpecifier == SKS_BR_BankAccountSpecifier::Specific &&
             sks_br_fileformattranmapping.CCR_IsCCRFormat == _isCalledFromCCR && // SKS_FDD_13903
             SKS_BR_TranTypeBankAccount.BankAccountId == bankAccountId;
        }
    
        bankCredit = true;
    
        if(sks_br_fileformattranmapping)
        {
            bankTranType = sks_br_fileformattranmapping.BankTranType;
            ignoreTranType = sks_br_fileformattranmapping.DoNotImport;
            matchingRuleGroupId = sks_br_fileformattranmapping.MatchingRuleGroupId;
            glMappingRuleGroupId = sks_br_fileformattranmapping.GLMappingRuleGroupId;
            if(glMappingRuleGroupId)
            {
                dimension = sks_br_fileformattranmapping.DefaultDimension;
            }
    
            if (sks_br_fileformattranmapping.BankDebitCredit == SKS_BR_BankDebitCredit::BankDebit)
            {
                bankCredit = false;
            }
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run(boolean _isCalledFromCCR = false)// SKS_FDD_13903 This parameter will set to yes when this method is called from CCR related classes
    {
        this.getTranTypeMapping(_isCalledFromCCR);
    
        if(!this.validateFileTranType())
            errorText = strFmt("@SKS527", fileTranType);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankAccountId</Name>
				<Source><![CDATA[
    void setBankAccountId(CompanyBankAccountId _bankAccountId)
    {
        ;
        bankAccountId = _bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileTranType</Name>
				<Source><![CDATA[
    void setFileTranType(str tranType)
    {
        ;
        fileTranType = tranType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatId</Name>
				<Source><![CDATA[
    void setFormatId(str _formatId)
    {
        ;
        formatId = _formatId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValidateTranType</Name>
				<Source><![CDATA[
    void setValidateTranType(boolean _validateTranType)
    {
        ;
        validateTranType = _validateTranType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFileTranType</Name>
				<Source><![CDATA[
    private boolean validateFileTranType()
    {
        if(validateTranType)
        {
            if(!sks_br_fileformattranmapping)
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>