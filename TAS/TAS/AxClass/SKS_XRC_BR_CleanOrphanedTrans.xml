<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_XRC_BR_CleanOrphanedTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_XRC_BR_CleanOrphanedTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        if (Box::okCancel("@SKS:SKGXRCWarning", DialogButton::Cancel, '') == DialogButton::Cancel)
        {
            return;
        }

        setPrefix("@SKS:SKGXRCBRCleanedTrans");
        int skCount = SKS_XRC_BR_CleanOrphanedTrans::processSKTrans();
        info(int2Str(skCount));

        int axCount = SKS_XRC_BR_CleanOrphanedTrans::processAXTrans();
        info(int2Str(axCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSKTrans</Name>
				<Source><![CDATA[
    public static int processSKTrans()
    {
        int tranCount = 0;
        SKS_BR_BankTran skBankTran;

        setPrefix("@SKS:SKGXRCBRImportedTrans");
        while select forupdate crosscompany * from skBankTran
            where skBankTran.ManualReconciliationID == emptyGuid()
                && skBankTran.Matched == NoYes::Yes
        {
            changecompany(skBankTran.company())
            {
                BankAccountStatement statement;
                Select DataAreaId, RecId, ReconcileDate from statement
                where statement.AccountId == skBankTran.AccountId
                    && statement.AccountStatementDate == skBankTran.AccountStatementDate
                    && statement.AccountStatementNum == skBankTran.AccountStatementNum;

                if(!statement)
                {
                    continue;
                }
                else if(statement.ReconcileDate != dateNull())
                {
                    continue;
                }

                info(strFmt("@SKS:SKGXRCBRTranFound", skBankTran.company(), skBankTran.AccountId, SKS_PP_StringFormats::strDateMMDDYYYY(skBankTran.AccountStatementDate, DateSeparator::Slash), skBankTran.AccountStatementNum));

                SKS_BR_Matching::removeMatchSKS_BR_BankTran(skBankTran);

                ttsbegin;
                skBankTran.update();
                tranCount++;
                ttscommit;
            }
        }

        return tranCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAXTrans</Name>
				<Source><![CDATA[
    public static int processAXTrans()
    {
        int tranCount = 0;
        BankAccountTrans axBankTrans;
        SKS_BR_BankTran skBankTran;
        setPrefix("@SKS:SKGXRCBRBankAccountTrans");

        while select crosscompany * from axBankTrans
            where axBankTrans.SKS_BR_ManualReconciliationID != emptyGuid()
                && axBankTrans.Reconciled == NoYes::No
            notexists join skBankTran where axBankTrans.SKS_BR_ManualReconciliationID == skBankTran.ManualReconciliationID
        {
            changecompany(axBankTrans.company())
            {
                BankAccountStatement statement;
                Select DataAreaId, RecId, ReconcileDate from statement
                where statement.AccountId == axBankTrans.AccountId
                    && statement.AccountStatementDate == axBankTrans.AccountStatementDate
                    && statement.AccountStatementNum == axBankTrans.AccountStatement;

                if(!statement)
                {
                    continue;
                }
                else if(statement.ReconcileDate != dateNull())
                {
                    continue;
                }

                BankAccountTrans secondBankTrans;
                Select RecId from secondBankTrans
                where secondBankTrans.SKS_BR_ManualReconciliationID == axBankTrans.SKS_BR_ManualReconciliationID
                    && secondBankTrans.RecId != axBankTrans.RecId;

                if(secondBankTrans.RecId != 0)//if a match exists in the BankAccountTrans table, then skip and go on
                {
                    continue;
                }

                info(strFmt("@SKS:SKGXRCBRTranFound", axBankTrans.company(), axBankTrans.AccountId, SKS_PP_StringFormats::strDateMMDDYYYY(axBankTrans.AccountStatementDate, DateSeparator::Slash), axBankTrans.AccountStatement));

                SKS_BR_Matching::removeGuidMatch(axBankTrans.SKS_BR_ManualReconciliationID);
                tranCount++;
            }
        }

        return tranCount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>