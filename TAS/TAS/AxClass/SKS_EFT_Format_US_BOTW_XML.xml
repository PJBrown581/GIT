<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOTW_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BOTW_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_US_BOTW_XML extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.FormatVersion('20220120')
    #define.WIREDOM('WIRE-DOM')
    #define.USD_USD('USD-USD')
    #define.USD_NON('USD-NON')
    #define.ACH_CTX('ACH-CTX')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Nm</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Nm(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //------------------------------------------------------------------------------------------------------
        Name companyName;
        int lengthNm;
        this.getSKS_EFT_FileFormatPaymSpec();

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :
                lengthNm = 140;
                break;
            case #ACH_CTX :
                lengthNm = 16;
                break;
            default : 
                lengthNm = 70;
                break;
        }

        //          Nm
        companyName = CompanyInfo::find().Name();
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeInitgPty, 'Nm', this.CharacterReplacement(companyName), lengthNm, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        str initgPtyId;
    
        initgPtyId = SKS_EFT_Format::getCodelookupvalue('InitgPtyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(initgPtyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                      9.1.15 Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                              Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', this.CharacterReplacement(initgPtyId), 14);
            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        int lengthPmtInfId;
    
        batchCount++;
    
        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode;
    
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :
                lengthPmtInfId = 35;
                break;
            case #ACH_CTX :
                lengthPmtInfId = 20;
                break;
        }
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount), lengthPmtInfId));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'DD');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
    
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            //      2.5: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
        }
        else
        {
            //      2.5: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0));
        }
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            //      2.18: ReqdColltnDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdColltnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
        else
        {
            //      2.17: ReqdExctnDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            this.node_PmtInf_DbtrNodes(nodePmtInf);
        }
        else
        {
            this.node_PmtInf_CdtrNodes(nodePmtInf);
        }
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        boolean printLclInstrmCd = false;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM : 
            case #USD_USD :
            case #USD_NON :
                printLclInstrmCd = true;
                value = 'CTR';
                break;
            case #ACH_CTX :
                printLclInstrmCd = true;
                value = 'CTX';
                break;
        }

        if(printLclInstrmCd && value)
        {
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtgyPurp;
        str value;
        int lengthCtgyPurpPrtry;
        boolean printCtgyPurpPrtry = false;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX :
                printCtgyPurpPrtry = true;
                lengthCtgyPurpPrtry = 10;
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));
                break;
        }

        if(printCtgyPurpPrtry && value)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
                
            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', value, lengthCtgyPurpPrtry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.7: InstrPrty
        //------------------------------------------------------------------------------------------------------
        str value;
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :
                value = 'HIGH';
                break;

            case #ACH_CTX :
                value = 'NORM';
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        int length;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD:
            case #USD_NON :
            case #ACH_CTX :
                length = 35;
                break;
            default :
                length = 70;
                break;
        }
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), length, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD:
            case #USD_NON :
                //                  PstlAdr
                this.node_PstlAdr_Structured(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr,  mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode,mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState);
                break;
            case #ACH_CTX :
                //                  PstlAdr
                this.node_PstlAdr_Structured(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr,  mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode,mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, '', mSKS_EFT_FileDetail_BankAccount.WOrdPartyState);   //SKS#VSTS:14219
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        boolean printDbtrId = false;
        str valueDbtrId;
        int lengthDbtrId;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX :
                printDbtrId = true;
                lengthDbtrId = 10;
                valueDbtrId = this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId);
                break;
        }

        if(printDbtrId && valueDbtrId)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', valueDbtrId, lengthDbtrId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId,nodeDbtrAcctTp;
        boolean printTpCd = false, printDbtrAcctId = false,printCcy = false;
        str valueTpCd;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD:
            case #USD_NON :
            case #ACH_CTX :
                printTpCd = true;
                printDbtrAcctId = true;
                printCcy = true;
                if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount) // Checking
                {
                    valueTpCd = 'CACC';
                }
                else  // Savings
                {
                    valueTpCd = 'SVGS';
                }
               
                break;
        }
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        if(printTpCd && valueTpCd)
        {
            nodeDbtrAcctTp = nodeDbtrAcct.appendChild(xmlDoc.createElement('Tp'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', valueTpCd);
        }

        if(printDbtrAcctId)
        {
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //              Othr
            this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
        }

        if(printCcy)
        {
            //          Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct_Id_Othr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct_Id_Othr(XmlElement _nodeAcctId)
    {
        //------------------------------------------------------------------------------------------------------
        //              Othr
        //                  Id
        //                  SchmeNm
        //                      Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeOthr;
        int         length;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD:
            case #USD_NON :
                length = 34;
                break;

            default :
                length = 35;
                break;
        }
        //              Othr
        nodeOthr = _nodeAcctId.appendChild(xmlDoc.createElement('Othr'));
    
        //                  Id
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct, length);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeDbtrAgt;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeClrSysMmBId;
        boolean     printMmbid = false;
        int         MmbidLength;
        str         MmbidValue;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :
            case #ACH_CTX:
                printMmbid = true;
                MmbidLength = 35;
                MmbidValue = mSKS_EFT_FileDetail.BankBankTransit;
                
                break;
        }

        if( printMmbid && MmbidValue)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));

            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            //          MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', MmbidValue, MmbidLength);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        boolean printSvcLvlCd= true;
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :
            case #ACH_CTX :
                printSvcLvlCd= false;
                break;
        }

        if(printSvcLvlCd)
        {
            if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
            {
                //          2.8: SvcLvl
                nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
                //              2.9: Cd
                this.node_PmtInf_PmtTpInf_SvcLvl_Cd(nodeSvcLvl);
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_XchgRateInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_XchgRateInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_XchgRateInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.47: XchgRateInf
        //          2.49: RateTp
        //          2.50: CtrctId
        //------------------------------------------------------------------------------------------------------
        XmlElement      nodeXchgRateInf;
        boolean         printRateTp = false,printCtrctId = false;
        str             rateTpValue,ctrctIdValue;
        int             lengthRateTp,lengthCtrctId;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :

                printRateTp = true;
                lengthRateTp = 4;
                rateTpValue = SKS_EFT_Format::getCodelookupvalue('RateTp', mSKS_EFT_FileDetail.RecId);

                printCtrctId = true;
                lengthCtrctId = 13;
                ctrctIdValue = SKS_EFT_Format::getCodelookupvalue('XchgRateInfRateTp', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
                break;
        }

        if(printRateTp || printCtrctId)
        {
            //      2.47 XchgRateInf
            nodeXchgRateInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('XchgRateInf'));

            if(printRateTp && rateTpValue)
            {
                //          2.49: RateTp
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXchgRateInf, 'RateTp', this.CharacterReplacement(rateTpValue), lengthRateTp,false);
            }

            if((ctrctIdValue && ctrctIdValue ) && (rateTpValue == 'ARGD'))
            {
                //          2.50: CtrctId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeXchgRateInf, 'CtrctId', this.CharacterReplacement(ctrctIdValue), lengthCtrctId,false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
    
        boolean printIntrmyAgt1= false, printXchgRateInf = false;
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :
                printIntrmyAgt1= true;
                printXchgRateInf = true;
                break;
        }

        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
    
        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtTpInf(nodeCdtTrfTxInf);
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);

        if(printXchgRateInf)
        {
            //      2.47 XchgRateInf
            this.node_CdtTrfTxInf_XchgRateInf(nodeCdtTrfTxInf);
        }
    
        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        if(printIntrmyAgt1)
        {
            //          2.71: IntrmyAgt1
            this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
        }
    
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
    
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
    
        //          2.82: InstrForCdtrAgt
        this.node_CdtTrfTxInf_InstrForCdtrAgt(nodeCdtTrfTxInf);
    
        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);
    
        //          2.89: RgltryRptg
        this.node_CdtTrfTxInf_RgltryRptg(nodeCdtTrfTxInf);
    
        //          2.91: RltdRmtInf
        this.node_CdtTrfTxInf_RltdRmtInf(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //------------------------------------------------------------------------------------------------------
        XmlElement      nodeCdtrAgt;
        XmlElement      nodeFinInstnId;
        XmlElement      nodeClrSysMmbId;
        str             valueMmbId,valueBIC;
        boolean         printMmbId = false, printBIC = false, printNm = false, printPstlAdr = false;
        int             lengthMmbId, lengthBIC;
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            
                if( mSKS_EFT_FileDetail.DepBankTransit)
                {
                    printMmbId = true;
                    printNm = true;
                    printPstlAdr = true;
                    valueMmbId = mSKS_EFT_FileDetail.DepBankTransit;
                    lengthMmbId = 35;
                }
                break;

            case #USD_USD :
            case #USD_NON :
                if(mSKS_EFT_FileDetail.DepSwiftNo)
                {
                    printBIC = true;
                    printMmbId = true;
                    printNm = true;
                    printPstlAdr = true;
                    valueBIC = mSKS_EFT_FileDetail.DepSwiftNo;
                    lengthBIC = 11;
                    valueMmbId = mSKS_EFT_FileDetail.DepBankTransit;
                    lengthMmbId = 35;
                }
                break;

            case #ACH_CTX :
                if( mSKS_EFT_FileDetail.DepBankTransit)
                {
                    printMmbId = true;
                    printNm = true;
                    valueMmbId = mSKS_EFT_FileDetail.DepBankTransit;
                    lengthMmbId = 35;
                }
                break;
        }


        if(printMmbId ||printBIC)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(printBIC && valueBIC)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC',valueBIC, lengthBIC, false);
            }

            if(printMmbId && valueMmbId)
            {
                //          ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

                //          MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', valueMmbId, lengthMmbId);
            }
    
            if(printNm)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35, false);
            }

            if(printPstlAdr)
            {
                //                  PstlAdr
                this.node_PstlAdr_Structured(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr,'' , mSKS_EFT_FileDetail_BenBank.BenBankCity, 0, '', '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PstlAdr_Structured</Name>
				<Source><![CDATA[
    protected void node_PstlAdr_Structured(XmlElement _node,
                                AddressCountryRegionId _countryId,
                                SKS_EB_Address _address,
                                AddressZipCodeId _postalCode,
                                AddressCity _city,
                                int _length = 35,
                            SKS_EB_Address _address2 = '',
                            AddressCountryRegionName _state = '')
    {
        //------------------------------------------------------------------------------------------------------
        //          PstlAdr
        //              Ctry
        //              AdrLine
        //              AdrLine
        //------------------------------------------------------------------------------------------------------
        XmlElement                              nodePstlAdr;
        LogisticsAddressCountryRegionISOCode    countryRegion;
    
        countryRegion = this.getLogisticsAddressCountryISO(_countryId);
    
        if(countryRegion || _address || _postalCode || _city || _address2 || _state)
        {
            //      PstlAdr
            nodePstlAdr = _node.appendChild(xmlDoc.createElement('PstlAdr'));
    
            //          Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', countryRegion, 2, false);

            //          AdrLine
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(_address), _length, false);//SKS_VSTS_14169
    
            //          AdrLine
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(_address2), _length, false);//SKS_VSTS_14169

            //          TwnNm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(_city), 20, false);
    
            //          CtrySubDvsn
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'CtrySubDvsn', this.CharacterReplacement(_state), 20, false);

            //          PstCd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', _postalCode, 10, false);
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        str     name = mSKS_EFT_FileDetail.AccountName;
        boolean printCdtrNm = false;
        int     lengthCdtrNm;
    
        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :
                printCdtrNm = true;
                lengthCdtrNm = 35;
                break;

            case #ACH_CTX :
                lengthCdtrNm = 16;
                break;

            default :
                printCdtrNm = true;
                lengthCdtrNm = 140;
                break;
        }
        
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), lengthCdtrNm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePstlAdr;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX :
                mRemittanceAdrline3 = '';
                break;
        }

        if((mRemittanceZipCode != '' || mRemittanceCity != '' || mRemittanceCountryRegionId != '' || mRemittanceAdrline1 != '' || mRemittanceAdrline2 != '') ||
            mRemittanceState != '')
        {
            //      PstlAdr
            nodePstlAdr = _nodeCdtr.appendChild(xmlDoc.createElement('PstlAdr'));
    
            //          Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId), 2, false);

            //          AdrLine
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(mRemittanceAdrline1), 35, false);//SKS_VSTS_14169
                
            //          AdrLine
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(mRemittanceAdrline2), 35, false);//SKS_VSTS_14169
            
            //          TwnNm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(mRemittanceCity), 20, false);

            //          CtrySubDvsn
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'CtrySubDvsn', this.CharacterReplacement(mRemittanceState), 20, false);

            //          PstCd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', mRemittanceZipCode, 10, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  IBAN
        //------------------------------------------------------------------------------------------------------
    
        XmlElement      nodeCdtrAcct;
        XmlElement      nodeCdtrAcctId;
        XmlElement      nodeAcct;
        XmlElement      nodeCdtrAcctTp;
        int             lengthOthrId;
        boolean         printOthrId = false,printTpCd = false, printCcy = false;
        str             valueOthrId,valueTpCd;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :

                printOthrId = true;
                valueOthrId = mSKS_EFT_FileDetail.DepBankAcct;
                lengthOthrId = 34;
                printCcy = true;
                break;

            case #ACH_CTX :

                printOthrId = true;
                valueOthrId = mSKS_EFT_FileDetail.DepBankAcct;
                lengthOthrId = 35;
                printTpCd = true;
                printCcy = true;
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    valueTpCd = 'SVGS';
                }
                else
                {
                    valueTpCd = 'CACC';
                }
                break;
        }

        if(printOthrId && valueOthrId)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            //                  Othr
            nodeAcct = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAcct, 'Id', valueOthrId, lengthOthrId);
        }
    
        //                      Tp
        if(printTpCd && valueTpCd )
        {
            nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
    
            //                          Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', valueTpCd);
        }

        if(printCcy)
        {
            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcct, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.88: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeId;
        str value;
        boolean printPurpPrtry = false;
    
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Purp', mSKS_EFT_FileDetail.RecId));
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX :
                printPurpPrtry = true;
                break;
        }

        if(value != '' && printPurpPrtry)
        {
            //                      Purp
            nodeId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
    
            //                          Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Prtry', value, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
    
        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers;
        int lengthUstrd;

        invNumbers = this.getInvoiceNbrs();

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIREDOM :
            case #USD_USD :
            case #USD_NON :
                lengthUstrd = 140;
                break;
            case #ACH_CTX :
                lengthUstrd = 80;
                break;
        }

        if(invNumbers)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, lengthUstrd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        //Populate Remittance Information from Vendor eBanking details
        mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
        mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
        mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
        mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
        mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
        mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>