<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Reversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_Reversal
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the reversed <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name = "_custVendTrans">It contains the customer or vendor transactions record.</param>
    /// <param name = "header">It contains the <c>LedgerJournalTable</c> Record.</param>
    /// <param name = "lLedgerJournalTrans">It contains the <c>LedgerJournalTrans</c> Record.</param>
    /// <param name = "_revPaymMode">The reversal payment mode for APEFT or direct debit.</param>
    /// <param name = "_voucher">The voucher number of the <c>LedgerJournalTrans</c> Record.</param>
    private static void createLedgerTrans(
        CustVendTrans _custVendTrans,
        LedgerJournalTable header,
        LedgerJournalTrans lLedgerJournalTrans,
        PaymMode _revPaymMode,
        TransDate _reversalDate,
        Voucher _voucher,
        LedgerDimensionAccount  _ledgerDimension) // CR-9541 //SKS_Bug_10597
    {
        AmountCur                       revAmt;
        LedgerJournalTrans              trans;
        LedgerJournalTrans              locLedgerJournalTrans;
        LedgerJournalACType             locLedgerJournalACType;
        // CR-9541 -->
        VendTrans                       vendTrans;
        CustTrans                       custTrans;
        // CR-9541 <--

        trans.clear();
        trans.initValue();
        trans.JournalNum = header.JournalNum;
        trans.TransDate = _reversalDate;

        if(lLedgerJournalTrans.DocumentDate)
        {
            trans.DocumentDate = lLedgerJournalTrans.DocumentDate; //SKS_FDD_9564 - Value date changes
        }
        else
        {
            trans.DocumentDate = lLedgerJournalTrans.TransDate;
        }

        trans.AccountType = lLedgerJournalTrans.AccountType; // CR-9541
        // CR-9541 -->
        if(_custVendTrans && !_voucher)
        {
            // CR-9541 <--
            LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(LedgerJournalType::Payment);
            if(ledgerJournalEngine.takeNewVoucher())
                trans.Voucher = new JournalVoucherNum(JournalTableData::newTable(header)).getNew(false);

            ledgerJournalEngine.accountModified(trans);
            ledgerJournalEngine.initTaxItemGroup(trans);
            // CR-9541 -->

            //SKS_DevOps_20387--->
            if(lLedgerJournalTrans.AccountType == LedgerJournalACType::Cust)
            {
                trans.SKS_EFTAR_RevOrigRecId = lLedgerJournalTrans.RecId;
            }
            else
            {
                trans.SKS_EFTAP_RevOrigRecId = lLedgerJournalTrans.RecId; // SKS_FDD_9664
            }
            //SKS_DevOps_20387<---
        }
        else
        {
            trans.Voucher = _voucher;
            trans.SKS_BR_BankTranRecId = lLedgerJournalTrans.SKS_BR_BankTranRecId;
            trans.SKS_CCR_BankTranRecId = lLedgerJournalTrans.SKS_CCR_BankTranRecId;
            // SKS_Bug_9726
            trans.TaxGroup = lLedgerJournalTrans.TaxGroup;
            trans.TaxItemGroup = lLedgerJournalTrans.TaxItemGroup;
            // SKS_Bug_9726

            trans.SKS_EFTAR_RevOrigRecId = lLedgerJournalTrans.RecId;
        }
        trans.PaymentStatus = CustVendPaymStatus::None;
        trans.PaymSpec = '';
        trans.PaymReference = '';
        // CR-9541 <--
        if(lLedgerJournalTrans.AmountCurCredit != 0)
        {
            revamt = lLedgerJournalTrans.AmountCurCredit;
            trans.AmountCurDebit = revamt;
            trans.AmountCurCredit = 0;
        }
        else
        {
            revamt = lLedgerJournalTrans.AmountCurDebit;
            trans.AmountCurDebit = 0;
            trans.AmountCurCredit = revamt;
        }
        // CR-9541 -->
        if(_revPaymMode)
        {
            trans.PaymMode = _revPaymMode;
        }
        else
        {
            trans.PaymMode = lLedgerJournalTrans.PaymMode;
        }
        // CR-9541 <--
        // SKS_Bug_10597 -->
        if(_ledgerDimension)
        {
            trans.LedgerDimension = _ledgerDimension;
        }
        else
        {
            // SKS_Bug_10597 <--
            trans.LedgerDimension = lLedgerJournalTrans.LedgerDimension;
        }// SKS_Bug_10597
        trans.DefaultDimension = lLedgerJournalTrans.DefaultDimension; // 9849
        trans.company = lLedgerJournalTrans.Company;
        trans.SKS_IHB_ValueDate = lLedgerJournalTrans.SKS_IHB_ValueDate; // SKS_FDD_9664
        Trans.CashDiscAmount = 0;
        trans.CurrencyCode = lLedgerJournalTrans.CurrencyCode;
        //81 added new reporting currency fields. The below method check will ensure those fields exist on the version before attempting to populate them
        SysDictClass sysDictClass = new SysDictClass(className2Id(classStr(LedgerJournalEngine_Server)));
        if (sysDictClass && sysDictClass.hasStaticMethod('reportingCurrencyModified'))
        {
            trans.(fieldName2id(tableNum(LedgerJournalTrans), 'ReportingCurrencyExchRate')) = lLedgerJournalTrans.(fieldName2id(tableNum(LedgerJournalTrans), 'ReportingCurrencyExchRate'));
            trans.(fieldName2id(tableNum(LedgerJournalTrans), 'ReportingCurrencyExchRateSecondary')) = lLedgerJournalTrans.(fieldName2id(tableNum(LedgerJournalTrans), 'ReportingCurrencyExchRateSecondary'));
        }
        trans.ExchRate = lLedgerJournalTrans.ExchRate;
        trans.CashDiscCode = '';
        trans.SettleVoucher = _custVendTrans ? SettlementType::SelectedTransact : SettlementType::None;
        trans.PostingProfile = lLedgerJournalTrans.PostingProfile;
        trans.BankTransType = lLedgerJournalTrans.BankTransType;
        trans.PaymentNotes = lLedgerJournalTrans.PaymentNotes;
        trans.TransactionType = lLedgerJournalTrans.TransactionType;
        trans.Approved = lLedgerJournalTrans.Approved;
        trans.Approver = lLedgerJournalTrans.Approver; //Make the currentuser? (curuserid())
        trans.Payment = lLedgerJournalTrans.Payment;
        trans.CustVendBankAccountId = lLedgerJournalTrans.CustVendBankAccountId;
        trans.OffsetDefaultDimension = lLedgerJournalTrans.OffsetDefaultDimension;
        trans.OffsetLedgerDimension = lLedgerJournalTrans.OffsetLedgerDimension;
        trans.RemittanceLocation = lLedgerJournalTrans.RemittanceLocation;
        trans.RemittanceAddress = lLedgerJournalTrans.RemittanceAddress;
        trans.Tax1099Fields = lLedgerJournalTrans.Tax1099Fields;
        trans.OffsetAccountType = lLedgerJournalTrans.OffsetAccountType;
        trans.OffsetCompany = lLedgerJournalTrans.OffsetCompany;
        trans.Txt  ="@SYS22512";
        // SKS_Bug_10391 -->
        trans.SKS_IHB_IntercoCompany          = lLedgerJournalTrans.SKS_IHB_IntercoCompany;
        trans.SKS_IHB_IntercoAccountType      = lLedgerJournalTrans.SKS_IHB_IntercoAccountType;
        trans.SKS_IHB_IntercoLedgerDimension  = lLedgerJournalTrans.SKS_IHB_IntercoLedgerDimension;
        // SKS_Bug_10391 <--
        locLedgerJournalACType = trans.offsetaccountType;
        trans.insert();
        ttsBegin;
        select forupdate offsetAccountType from locLedgerJournalTrans where locLedgerJournalTrans.RecId == trans.RecId;
        locLedgerJournalTrans.OffsetAccountType = locLedgerJournalACType;
        locLedgerJournalTrans.update();
        ttsCommit;
        // CR-9541 -->
        if(_custVendTrans.TableId == tableNum(VendTrans))
        {
            vendtrans = _custVendTrans;
            SKS_EFT_Reversal::createSpecTrans(vendtrans, trans);
        }
        else if(_custVendTrans.TableId == tableNum(CustTrans))
        {
            custTrans = _custVendTrans;
            SKS_EFT_Reversal::createCustSpecTrans(custTrans, trans);
        }
        // CR-9541 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePaymJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create reversal journal based on setup.
    /// </summary>
    /// <param name = "_custVendTrans">It contains the customer or vendor transactions record.</param>
    /// <param name = "_lLedgerJournalTrans">It contains the <c>LedgerJournalTrans</c> record.</param>
    /// <param name = "_revPaymMode">The reversal payment mode for APEFT or direct debit.</param>
    /// <param name = "_revJournalName">The reversal journal name for APEFT or direct debit or bank reversal.</param>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <param name = "_voucher">The voucher number of the <c>LedgerJournalTrans</c> Record.</param>
    /// <returns>Return <c>LedgerJournalTable</c> buffer.</returns>
    public static LedgerJournalTable CreatePaymJournal(
        CustVendTrans           _custVendTrans,
        ledgerJournalTrans      _lLedgerJournalTrans,
        PaymMode                _revPaymMode,
        TransDate               _reversalDate,
        LedgerJournalNameId     _revJournalName = '',
        LedgerJournalTable      _ledgerJournalTable = null,
        Voucher                 _voucher = null,
        boolean                 _isIHBReversalJournal = false,
        LedgerDimensionAccount  _ledgerDimension = 0) // CR-9192 // CR-9541 // SKS_FDD_9664 // SKS_Bug_10597
    {
        LedgerJournalTable  header;

        // 9192 CR -->
        if(_ledgerJournalTable == null && _revJournalName) // CR-9541
        {
            header.clear();
            header.JournalName = _revJournalName;
            header.initFromLedgerJournalName(header.JournalName);
            // SKS_FDD_9664 -->
            if(_isIHBReversalJournal)
            {
                header.SKS_EFTAP_IsIHBJournal = _isIHBReversalJournal;
            }
            // SKS_FDD_9664 <--
            header.insert();
        }
        else
        {
            header = _ledgerJournalTable;
        }
        // 9192 CR <--

        SKS_EFT_Reversal::createledgerTrans(_custVendTrans, header, _lLedgerJournalTrans, _revPaymMode, _reversalDate, _voucher, _ledgerDimension); // SKS_Bug_10597

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSpecTrans</Name>
				<Source><![CDATA[
    private static void createSpecTrans(VendTrans vendtrans, LedgerJournalTrans  trans)
    {
        SpecTransManager        spectransmanager;
        VendTransOpen           VendTransOpen;

        spectransmanager = SpecTransManager::newFromSpec(trans);

        select crosscompany * from vendtransopen where vendtransopen.AccountNum == VendTrans.AccountNum && VendTransOpen.RefRecId == VendTrans.RecId;

        if(VendTransOpen)
        {
            spectransmanager.insert(VendTransOpen.dataareaid, VendTransOpen.tableid, VendTransOpen.recid, VendTransOpen.AmountCur, VendTrans.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustSpecTrans</Name>
				<Source><![CDATA[
    private static void createCustSpecTrans(CustTrans custTrans, LedgerJournalTrans  trans)
    {
        SpecTransManager        spectransmanager;
        CustTransOpen           custTransOpen;

        spectransmanager = SpecTransManager::newFromSpec(trans);

        select crosscompany * from custTransOpen where custTransOpen.AccountNum == CustTrans.AccountNum && custTransOpen.RefRecId == CustTrans.RecId; // 9192 CR

        if(custTransOpen)
        {
            spectransmanager.insert(custTransOpen.dataareaid, custTransOpen.tableid, custTransOpen.recid, custTransOpen.AmountCur, CustTrans.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Reversal</Name>
				<Source><![CDATA[
    public static VendTransOpen Reversal(LedgerJournalTrans lLedgerJournalTrans, spectransManager SpecTransManager, TransDate _reversalDate)
    {
        VendSettlement      lvendsettlement;
        VendTrans           lVendTrans;
        VendTable           lVendTable;
        VendTransOpen       lVendTransOpen;
        VendSettlement      localVendSettlement;

        while select lVendSettlement join Accountnum, RecId, DataAreaId, currencyCode from lVendTrans order by lvendsettlement.RecId where lvendsettlement.transrecid == lVendTrans.recid
            && lvendsettlement.transcompany == lVendTrans.dataAreaId && lvendsettlement.accountnum == lVendTrans.accountnum
            && lVendTrans.recid == lLedgerJournalTrans.VendTransId
        {
            if(lvendsettlement)
            {
                if(lvendsettlement.CanBeReversed == NoYes::Yes)
                {
                    lvendtable = VendTable::findByCompany(curext(), lVendTrans.AccountNum);

                    specTransManager = SpecTransManager::newRefTableId(lVendTable, tableNum(VendSettlement), true);

                    if (specTransManager.existForOtherSpec(lvendsettlement.DataAreaId, lvendsettlement.TableId, lvendsettlement.RecId) == false)
                    {
                        specTransManager.insert(lvendsettlement.DataAreaId, lvendsettlement.TableId, lvendsettlement.RecId, lvendsettlement.SettleAmountCur, lvendTrans.CurrencyCode);
                        lvendsettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, lvendTrans.CurrencyCode);
                    }
                    else
                    {
                        error("@SYS117108");
                        ttsAbort;
                        return null;
                    }

                    if(VendTrans::reverseTransact(lVendTable, null, SettleDatePrinc::SelectDate, _reversalDate))
                    {
                        specTransManager.deleteAll();

                        select forUpdate localvendsettlement where localvendsettlement.TransRecId == lVendTrans.RecId;
                        localvendsettlement.CanBeReversed = NoYes::No;
                        localvendsettlement.update();

                    }
                }
                else
                {
                    // SKS_Bug_11989 -->
                    throw error("@SKS3016");
                    /*ttsAbort;
                    return null;*/
                    // SKS_Bug_11989 <--
                }
            }
        }

        select firstonly lVendTransOpen join RecId from lVendTrans where lVendTransOpen.RefRecId == lVendTrans.RecId
            && lLedgerJournalTrans.vendtransid == lvendTrans.recid;

        return lVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the customer transactions based on company
    /// </summary>
    // 9192 CR
    public static CustTransOpen custReversal(LedgerJournalTrans lLedgerJournalTrans, spectransManager SpecTransManager, TransDate _reversalDate)
    {
        CustTable           lCustTable;
        CustTrans           lCustTrans;
        CustSettlement      lCustSettlement;
        CustSettlement      localCustSettlement;
        CustTransOpen       lCustTransOpen;

        while select lCustSettlement join Accountnum, RecId, DataAreaId, currencyCode from lCustTrans order by lCustSettlement.RecId
            where lCustSettlement.transrecid == lCustTrans.recid
            && lCustSettlement.transcompany == lCustTrans.dataAreaId && lCustSettlement.accountnum == lCustTrans.accountnum
            && lCustTrans.recid == lLedgerJournalTrans.CustTransId
        {
            if(lCustSettlement)
            {
                if(lCustSettlement.CanBeReversed == NoYes::Yes)
                {
                    lCusttable = CustTable::findByCompany(curext(), lcustTrans.AccountNum);

                    specTransManager = SpecTransManager::newRefTableId(lCustTable, tableNum(CustSettlement), true);

                    if (specTransManager.existForOtherSpec(lCustSettlement.DataAreaId, lCustSettlement.TableId, lCustSettlement.RecId) == false)
                    {
                        specTransManager.insert(lCustSettlement.DataAreaId, lCustSettlement.TableId, lCustSettlement.RecId, lCustSettlement.SettleAmountCur, lCustTrans.CurrencyCode);
                        lCustSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, lCustTrans.CurrencyCode);
                    }
                    else
                    {
                        error("@SYS117108");
                        ttsAbort;
                        return null;
                    }

                    if(custTrans::reverseTransact(lCustTable, null, SettleDatePrinc::SelectDate, _reversalDate))
                    {
                        specTransManager.deleteAll();

                        select forUpdate localCustSettlement where localCustSettlement.TransRecId == lcustTrans.RecId;
                        localCustSettlement.CanBeReversed = NoYes::No;
                        localCustSettlement.update();
                    }
                }
                else
                {
                    // SKS_Bug_11989 -->
                    throw error("@SKS3016");
                    /*ttsAbort;
                    return null;*/
                    // SKS_Bug_11989 <--
                }
            }
        }
        select firstonly lCustTransOpen join RecId from lCustTrans where lCustTransOpen.RefRecId == lCustTrans.RecId
            && lLedgerJournalTrans.CustTransId == lCustTrans.recid;

        return lCustTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVendTransCanBeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check wheather vendor transaction can be reversed or not.
    /// </summary>
    // 9192 CR
    public static boolean checkVendTransCanBeReversed(LedgerJournalTrans localLedgerjournaltrans, SKS_EFT_FileDetail _sKS_EFT_FileDetail)
    {
        boolean                 ret;
        VendTrans               lVendTrans;
        VendSettlement          lvendsettlement;
        Ledgerjournaltrans      lLedgerJournalTransLoc;

        select crosscompany //FDD-10590
            VendTransId from lLedgerJournalTransLoc join lVendTrans
            where lLedgerJournalTransLoc.VendTransId == lVendTrans.recid
                && (lLedgerJournalTransLoc.recid == _sKS_EFT_FileDetail.paymentlineRecid
                || lLedgerJournalTransLoc.RecId == localLedgerjournaltrans.RecId)
            join lvendsettlement where  lvendsettlement.transcompany == lVendTrans.dataAreaId
                && lvendsettlement.accountnum == lVendTrans.accountnum
                && lvendsettlement.TransRecId == lVendTrans.RecId
                && lvendsettlement.CanBeReversed ==  NoYes::No;

        if(lvendsettlement.RecId)
        {
            ret = false;
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankTransCanBeReversed</Name>
				<Source><![CDATA[
    public static boolean checkBankTransCanBeReversed(LedgerJournalTrans localLedgerjournaltrans, SKS_EFT_FileDetail _sKS_EFT_FileDetail)
    {
        boolean                 ret;
        //TODO validation for rever jurnnal
                
            ret = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustTransCanBeReversed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check wheather customer transaction can be reversed or not.
    /// </summary>
    // 9192 CR
    public static boolean checkCustTransCanBeReversed(LedgerJournalTrans localLedgerjournaltrans, SKS_EFT_FileDetail _sKS_EFT_FileDetail)
    {
        boolean                 ret;
        CustTrans               lCustTrans;
        CustSettlement          lCustSettlement;
        LedgerJournalTrans      lLedgerJournalTransLoc;

        select custTransId from lLedgerJournalTransLoc join lCustTrans
            where lLedgerJournalTransLoc.CustTransId == lcusttrans.recid
                && (lLedgerJournalTransLoc.recid == _sKS_EFT_FileDetail.paymentlineRecid
                || lLedgerJournalTransLoc.RecId == localLedgerjournaltrans.RecId)
            join lCustSettlement where lCustSettlement.transrecid == lcusttrans.recid
                && lCustSettlement.transcompany == lcustTrans.dataAreaId
                && lCustSettlement.accountnum == lcustTrans.accountnum
                && lCustSettlement.CanBeReversed == NoYes::No;

        if(lCustSettlement.RecId)
        {
            ret = false;
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse the posted bank transaction record.
    /// </summary>
    /// <param name = "_sks_BR_BankTran">The bank transactions record.</param>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <param name = "_voucher">The voucher number of the <c>LedgerJournalTrans</c> Record.</param>
    /// <param name = "_revJournalName">The reversal journal name for APEFT or direct debit or bank reversal.</param>
    /// <returns>Return <c>LedgerJournalTable</c> buffer.</returns>
    // CR-9541
    public static LedgerJournalTable bankReversal(
        SKS_BR_BankTran         _sks_BR_BankTran,
        LedgerJournalTable      _ledgerJournalTable,
        Voucher                 _voucher,
        LedgerJournalNameId     _revJournalName,
        TransDate               _reversalDate)
    {
        LedgerJournalTrans  lLedgerJournalTrans;
        LedgerJournalTable  paymJournal;

        while select lLedgerJournalTrans
            where lLedgerJournalTrans.JournalNum == _sks_BR_BankTran.PaymentJournalNum &&
                lLedgerJournalTrans.Voucher == _sks_BR_BankTran.Voucher
        {
            ttsBegin;
            if(lLedgerJournalTrans.AccountType == LedgerJournalACType::Vend ||
                lLedgerJournalTrans.AccountType == LedgerJournalACType::Cust)
            {
                paymJournal = SKS_EFT_Reversal::createCustVendBankReversal(_ledgerJournalTable, lLedgerJournalTrans, null, _reversalDate, null, _voucher, _revJournalName);
            }
            else if(lLedgerJournalTrans.AccountType == LedgerJournalACType::Ledger ||
                lLedgerJournalTrans.AccountType == LedgerJournalACType::Bank)
            {
                PaymJournal = SKS_EFT_Reversal::CreatePaymJournal(null, lLedgerJournalTrans, null, _reversalDate, _revJournalName, _ledgerJournalTable, _voucher);
            }
            _ledgerJournalTable = PaymJournal;
            ttscommit;
        }
        return paymJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ccrBankReversal</Name>
				<Source><![CDATA[
    // SKS_FDD_13903 -->
    public static LedgerJournalTable ccrBankReversal(
        SKS_CCR_BankTran         _sks_CCR_BankTran,
        LedgerJournalTable      _ledgerJournalTable,
        Voucher                 _voucher,
        LedgerJournalNameId     _revJournalName,
        TransDate               _reversalDate)
    {
        LedgerJournalTrans  lLedgerJournalTrans;
        LedgerJournalTable  paymJournal;

        while select lLedgerJournalTrans
            where lLedgerJournalTrans.JournalNum == _sks_CCR_BankTran.PaymentJournalNum &&
                lLedgerJournalTrans.Voucher == _sks_CCR_BankTran.Voucher
        {
            ttsBegin;
            if(lLedgerJournalTrans.AccountType == LedgerJournalACType::Vend ||
                lLedgerJournalTrans.AccountType == LedgerJournalACType::Cust)
            {
                paymJournal = SKS_EFT_Reversal::createCustVendBankReversal(_ledgerJournalTable, lLedgerJournalTrans, null, _reversalDate, null, _voucher, _revJournalName);
            }
            else if(lLedgerJournalTrans.AccountType == LedgerJournalACType::Ledger ||
                lLedgerJournalTrans.AccountType == LedgerJournalACType::Bank)
            {
                PaymJournal = SKS_EFT_Reversal::CreatePaymJournal(null, lLedgerJournalTrans, null, _reversalDate, _revJournalName, _ledgerJournalTable, _voucher);
            }
            _ledgerJournalTable = PaymJournal;
            ttscommit;
        }
        return paymJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AutoPostJournal</Name>
				<Source><![CDATA[
    // SKS_FDD_13903 <--
    /// <summary>
    /// To post the reversed journal, if autopost is set to yes in TAS parameters.
    /// </summary>
    /// <param name = "autopost">The value to post reversed journal.</param>
    /// <param name = "_jourTable">The <c>LedgerJournalTable</c> record to post.</param>
    // CR-9541
    public static void AutoPostJournal(boolean autopost, LedgerJournalTable _jourTable)
    {
        LedgerJournalCheckPost  jourCheckPost;

        try
        {
            if(autopost)
            {
                jourCheckPost = ledgerJournalCheckPost::newLedgerJournalTable(_jourTable, NoYes::Yes, NoYes::Yes);
                jourCheckPost.run();
                info(strFmt("@SKS:SKGIHBCreatedInCompany", _jourTable.JournalNum,_jourTable.DataAreaId)); // SKS_FDD_9664
            }
            else
            {
                info("@SKS3017");
                info(strFmt("@SKS:SKGIHBCreatedInCompany", _jourTable.JournalNum, _jourTable.DataAreaId)); // SKS_FDD_9664
            }
        }
        catch
        {
            error("@SYS23002");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Mark the cleared checkbox in bank account transaction after reversed journal posted.
    /// </summary>
    /// <param name = "_sks_BR_BankTran">The bank transactions record.</param>
    /// <param name = "_voucher">The voucher number of the <c>LedgerJournalTrans</c> Record.</param>
    // CR-9541
    public static void markBankAccountTrans(Recid _sks_BR_BankTran, Voucher _voucher)
    {
        SKS_BR_BankTran         sKS_BR_BankTran;
        BankAccountStatement    locBankAccountStatement;
        LedgerJournalTrans      ledgerJournalTrans;
        SKS_BR_BankTran         sKS_BR_BankTranloc;

        select crosscompany AccountId, ImportedStatementNum, TranDate, TranAmount, Voucher, RevVoucher, OrigBankVoucher, RecId, OriginalStatementRecId, ImportedStatementDate //Bug 10853
            from sKS_BR_BankTran
                where (sKS_BR_BankTran.RecId == _sks_BR_BankTran ||
                    sKS_BR_BankTran.RevVoucher == _voucher);

        select sum(AmountCurCredit), sum(AmountCurDebit) from ledgerJournalTrans
            where ledgerJournalTrans.voucher == _voucher &&
                ledgerJournalTrans.AccountType == LedgerJournalACType::Bank;

        select crosscompany RecId,ReconcileDate from locBankAccountStatement
            where locBankAccountStatement.RecId == sKS_BR_BankTran.OriginalStatementRecId &&
                locBankAccountStatement.DataAreaId == sKS_BR_BankTran.DataAreaId;

        if(locBankAccountStatement.ReconcileDate != dateNull())
        {
            throw error("@SKS:SKSErrorStatementReconciled");
        }
        else
        {
            if(sKS_BR_BankTran.RevVoucher == _voucher)
            {
                changeCompany(sKS_BR_BankTran.company())
                {
                    sKS_BR_BankTranloc = sKS_BR_BankTran;
                    //Removed the Comparison abs(amount) because if you have Journals created 
                    //  via the payment journal mixed with journals created via the Process Bank Statements > Trans reconciliaton form your amounts won't match.
                    SKS_EFT_Reversal::clearBankAccountTrans(_voucher, sKS_BR_BankTranloc);
                }
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustVendBankReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// APEFT , Direct debit and bank reversal for customer or vendor related transactions.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <param name = "_ledgerJournalTrans">It contains the <c>LedgerJournalTrans</c> Record.</param>
    /// <param name = "_revPaymMode">The reversal payment mode for APEFT or direct debit.</param>
    /// <param name = "_sKS_EFT_FileDetail">The <c>SKS_EFT_FileDetail</c> buffer.</param>
    /// <param name = "_voucher">The voucher number to set.</param>
    /// <param name = "_revJournalName">The reversal journal name for APEFT or direct debit or bank reversal.</param>
    /// <param name = "_sKS_EFT_InboundFileLine">The <c>SKS_EFT_InboundFileLine</c> buffer.</param>
    /// <returns>Return <c>LedgerJournalTable</c> buffer.</returns>
    // CR-9541
    public static LedgerJournalTable createCustVendBankReversal(
        LedgerJournalTable          _ledgerJournalTable,
        LedgerJournalTrans          _ledgerJournalTrans,
        PaymMode                    _revPaymMode,
        TransDate                   _reversalDate,
        SKS_EFT_FileDetail          _sKS_EFT_FileDetail,
        Voucher                     _voucher,
        LedgerJournalNameId         _revJournalName,
        SKS_EFT_InboundFileLine     _sKS_EFT_InboundFileLine = null,
        boolean                     _isIHBReversalJournal = false) // SKS_FDD_9664
    {
        SpecTrans           specTrans;
        VendTrans           lVendTrans;
        VendTransOpen       lVendTransOpen;
        CustTrans           lCustTrans;
        CustTransOpen       lCustTransOpen;
        SpecTransManager    specTransManager;
        LedgerJournalTable  paymJournal;
        ttsbegin;
        if((_sKS_EFT_FileDetail && _sKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            if(_ledgerJournalTrans.Company != curext())
            {
                changeCompany(_ledgerJournalTrans.Company)
                {
                    LedgerJournalTrans  localLedgerjournaltrans;
                    select localLedgerjournaltrans where localLedgerjournaltrans.ForeignVoucher == _ledgerJournalTrans.voucher
                        && localLedgerJournalTrans.ForeignCompany == _ledgerJournalTrans.DataAreaId
                        && localLedgerjournaltrans.Invoice == _ledgerJournalTrans.Invoice
                        && localLedgerjournaltrans.AmountCurCredit == _ledgerJournalTrans.AmountCurCredit
                        && localLedgerjournaltrans.AmountCurDebit == _ledgerJournalTrans.AmountCurDebit
                        && localLedgerjournaltrans.TransDate == _ledgerJournalTrans.TransDate
                        && localLedgerjournaltrans.LedgerDimension == _ledgerJournalTrans.LedgerDimension
                        && localLedgerjournaltrans.VendTransId != 0;

                    lVendTransOpen = SKS_EFT_Reversal::Reversal(localLedgerjournaltrans, specTransManager, _reversalDate);
                    lVendTrans = lVendTransOpen.vendTrans();
                }
            }
            else
            {
                lVendTransOpen = SKS_EFT_Reversal::Reversal(_ledgerJournalTrans, specTransManager, _reversalDate);
                lVendTrans = lVendTransOpen.vendTrans();
            }

            if(lVendTransOpen)
            {
                select firstOnly SpecTrans where SpecTrans.refrecid == lvendtransopen.recid &&
                    SpecTrans.reftableid == tableNum(VendTransOpen) &&
                    SpecTrans.refcompany == lVendTransopen.company();

                if(SpecTrans)
                {
                    error("@SYS117108");
                    ttsAbort;
                    return null;
                }
                else
                {
                    PaymJournal = SKS_EFT_Reversal::CreatePaymJournal(lvendtrans, _ledgerJournalTrans, _revPaymMode, _reversalDate, _revJournalName, _ledgerJournalTable, _voucher, _isIHBReversalJournal /*SKS_FDD_9664*/); // 9192 CR
                    if(_sKS_EFT_FileDetail)
                    {
                        SKS_EFT_Reversal::createSKS_EFT_FileHistory(_sKS_EFT_FileDetail, PaymJournal.JournalNum);
                    }
                    else if(_sKS_EFT_InboundFileLine)
                    {
                        SKS_EFT_Reversal::createInboundFileHistory(_sKS_EFT_InboundFileLine, PaymJournal.JournalNum);
                    }
                }
            }
            else
            {
                error("@SKS3016");
                ttsAbort;
                return null;
            }
        }
        else if((_sKS_EFT_FileDetail && _sKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
            || _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            // 9192 CR -->
            if(_ledgerJournalTrans.Company != curext())
            {
                changeCompany(_ledgerJournalTrans.Company)
                {
                    LedgerJournalTrans  localLedgerjournaltrans;
                    select localLedgerjournaltrans where localLedgerjournaltrans.ForeignVoucher == _ledgerJournalTrans.voucher
                        && localLedgerJournalTrans.ForeignCompany == _ledgerJournalTrans.DataAreaId
                        && localLedgerjournaltrans.Invoice == _ledgerJournalTrans.Invoice
                        && localLedgerjournaltrans.AmountCurCredit == _ledgerJournalTrans.AmountCurCredit
                        && localLedgerjournaltrans.AmountCurDebit == _ledgerJournalTrans.AmountCurDebit
                        && localLedgerjournaltrans.TransDate == _ledgerJournalTrans.TransDate
                        && localLedgerjournaltrans.LedgerDimension == _ledgerJournalTrans.LedgerDimension
                        && localLedgerjournaltrans.CustTransId != 0;

                    lcustTransOpen = SKS_EFT_Reversal::custReversal(localLedgerjournaltrans, specTransManager, _reversalDate);
                    lcustTrans = lcustTransOpen.custTrans();
                }
            }
            else
            {
                lcustTransOpen = SKS_EFT_Reversal::custReversal(_ledgerJournalTrans, specTransManager, _reversalDate);
                lcustTrans = lcustTransOpen.custTrans();
            }
            // 9192 CR <--
            if(lcustTransOpen)
            {
                select firstOnly SpecTrans where SpecTrans.refrecid == lcustTransopen.recid && SpecTrans.reftableid == tableNum(custTransOpen)
                            && SpecTrans.refcompany == lcustTransopen.company();

                if(SpecTrans)
                {
                    error("@SYS117108");
                    ttsAbort;
                    return null;
                }
                else
                {
                    PaymJournal = SKS_EFT_Reversal::CreatePaymJournal(lcustTrans, _ledgerJournalTrans, _revPaymMode, _reversalDate, _revJournalName, _ledgerJournalTable, _voucher, _isIHBReversalJournal /*SKS_FDD_9664*/); // 9192 CR
                    if(_sKS_EFT_FileDetail)
                    {
                        SKS_EFT_Reversal::createSKS_EFT_FileHistory(_sKS_EFT_FileDetail, PaymJournal.JournalNum);
                    }
                    else if(_sKS_EFT_InboundFileLine)
                    {
                        SKS_EFT_Reversal::createInboundFileHistory(_sKS_EFT_InboundFileLine, PaymJournal.JournalNum);
                    }
                }
            }
            else
            {
                error("@SKS3016");
                ttsAbort;
                return null;
            }
        }
        ttscommit;
        return PaymJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSKS_EFT_FileHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the reversed journal history for APEFT and Direct debit reversal.
    /// </summary>
    /// <param name = "_sKS_EFT_FileDetail">The <c>SKS_EFT_FileDetail</c> buffer.</param>
    /// <param name = "_journalNum">The journal number.</param>
    // CR-9541
    public static void createSKS_EFT_FileHistory(
        SKS_EFT_FileDetail  _sKS_EFT_FileDetail,
        LedgerJournalId     _journalNum)
    {
        SKS_EFT_inboundFile     sks_eft_inboundfile;
        SKS_EFT_FileHistory     lSKS_EFT_FileHistory;

        select firstonly inboundfilenbr,OutboundFileRecId from sks_eft_inboundfile
            where sks_eft_inboundfile.outboundfilerecid == _sKS_EFT_FileDetail.filerecid; // 9192 CR

        // 9192 CR -->
        select RecId from lSKS_EFT_FileHistory
            where lSKS_EFT_FileHistory.OutboundFileRecId == sks_eft_inboundfile.OutboundFileRecId &&
                lSKS_EFT_FileHistory.JournalNum == _journalNum;
        if(lSKS_EFT_FileHistory.RecId == 0)
        {
            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalCreated, _sKS_EFT_FileDetail.filerecid, sks_eft_inboundfile.InboundFileNbr, '', _journalNum, 
                SKS_EFT_FileStatus::NotApplicable, _sKS_EFT_FileDetail.RecId); //Issue20565
        }
        // 9192 CR <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Original bank transaction and the reversing transaction should be marked as “Cleared”.
    /// </summary>
    /// <param name = "_voucher">The voucher number to cleared.</param>
    /// <param name = "_sks_BR_BankTran">The bank transaction record.</param>
    // CR-9541
    public static void clearBankAccountTrans(Voucher _voucher, SKS_BR_BankTran _sks_BR_BankTran)
    {
        BankAccountTrans    locBankAccountTransUpd;

        ttsBegin;
        while select forupdate locBankAccountTransUpd
            where (locBankAccountTransUpd.Voucher == _voucher ||
                locBankAccountTransUpd.Voucher == _sks_BR_BankTran.OrigBankVoucher) &&
                locBankAccountTransUpd.AccountId == _sks_BR_BankTran.AccountId
        {
            if(locBankAccountTransUpd)
            {
                locBankAccountTransUpd.AccountStatement = _sks_BR_BankTran.ImportedStatementNum;
                locBankAccountTransUpd.AccountStatementDate = _sks_BR_BankTran.ImportedStatementDate; //Bug 10853
                locBankAccountTransUpd.Included = NOYES::Yes;
                locBankAccountTransUpd.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInboundFileHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the reversed journal history for APEFT and Direct debit reversal from inbound line.
    /// </summary>
    /// <param name = "_sKS_EFT_InboundFileLine">The <c>SKS_EFT_InboundFileLine</c> buffer.</param>
    /// <param name = "_journalNum">The journal number.</param>
    // CR-9541
    private static void createInboundFileHistory(SKS_EFT_InboundFileLine _sKS_EFT_InboundFileLine, LedgerJournalId  _journalNum)
    {
        SKS_EFT_InboundFile     lSKS_EFT_InboundFile;
        SKS_EFT_FileHistory     lSKS_EFT_FileHistory;

        select outboundfilerecid from lSKS_EFT_InboundFile
            where lSKS_EFT_InboundFile.InboundFileNbr == _sKS_EFT_InboundFileLine.InboundFileNbr;

        select RecId from lSKS_EFT_FileHistory
            where lSKS_EFT_FileHistory.OutboundFileRecId == lSKS_EFT_InboundFile.OutboundFileRecId &&
                lSKS_EFT_FileHistory.JournalNum == _journalNum;
        if(lSKS_EFT_FileHistory.RecId == 0)
        {
            SKS_EFT_Processing::createFileHistory(SKS_EFT_ActionHistory::paymReversalCreated, lSKS_EFT_InboundFile.OutboundFileRecId, _sKS_EFT_InboundFileLine.InboundFileNbr,
                                    '', _journalNum);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>