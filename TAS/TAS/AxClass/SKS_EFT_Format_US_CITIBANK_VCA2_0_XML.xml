<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITIBANK_VCA2_0_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITIBANK_VCA2_0_XML extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CITIBANK_VCA2_0_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20230412')
    XmlDocument         xmlDoc;
    XmlElement          nodeOrbiscomRequest;
    XmlElement          nodeOrbiscomTransactionRequest;
    XmlElement          nodeCreateApprovedPurchaseRequest;
    BankAccountTable    mBankAccountTable;
    SKS_EB_Vendor       mSKS_EB_Vendor;
    str                 purchType;
    str                 validFor, currencyCode;
    int                 recCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //Initialize XML
        xmlDoc = XmlDocument::newBlank();
    
        this.node_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get Bank Account Table
            mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
    
            //  OrbiscomTransactionRequest
            this.node_OrbiscomTransactionRequest();
    
            //  CDF's
            this.node_CDFs();
    
            //  ALSRules
            this.node_ALSRules();
    
            //  SetPurchaseSupplierNotificationEMailRequest
            this.node_PurchSuppNotificationEMailRequest();
    
            next mSKS_EFT_FileDetail;
        }
    
        //  Trailer
        this.node_Trailer();

        System.Text.StringBuilder   sb;
        sb = new System.Text.StringBuilder();

        XmlTextWriter writer = XmlTextWriter::newXml();
        writer.formatting(XmlFormatting::Indented);
        xmlDoc.writeTo(writer);

        sb.Append(writer.writeToString());
        sb.Append(System.Environment::NewLine);
    
        this.fileWrite(sb.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_ALSRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_ALSRules
    /// </summary>
    private void node_ALSRules()
    {
        XmlElement  nodeALSRules;
        XmlElement  nodeRule;
        XmlElement  nodeControls;
        XmlElement  nodeValidityPeriod;
        XmlElement  nodeVelocityControl;
        int days;
        str valueDate;
    
        //  ALSRules
        nodeALSRules = nodeCreateApprovedPurchaseRequest.appendChild(xmlDoc.createElement('ALSRules'));
    
        //      Rule
        nodeRule = nodeALSRules.appendChild(xmlDoc.createElement('Rule'));
    
        //      Action
        SKS_EFT_Format::xmlsetAttributeText(nodeRule, 'Action', 'A');
    
        //      Alias
        SKS_EFT_Format::xmlsetAttributeText(nodeRule, 'Alias', 'PCRule');
    
        //      Controls
        nodeControls = nodeRule.appendChild(xmlDoc.createElement('Controls'));

        //          OPMCCControl
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeControls, 'OPMCCControl', '');
        
        //          OPMIDControl
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeControls, 'OPMIDControl', '');        
    
        //      ValidityPeriod
        nodeValidityPeriod = nodeControls.appendChild(xmlDoc.createElement('ValidityPeriod'));
    
        //      Negate
        SKS_EFT_Format::xmlsetAttributeText(nodeValidityPeriod, 'Negate', 'false');
    
        //      ValidFrom
        valueDate = strFmt('%1 %2',SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate,DateSeparator::Hyphen), time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),TimeSeparator::Colon,TimeFormat::Hour24)+'.'+'00'+ ' -0000');
        
        SKS_EFT_Format::xmlsetAttributeText(nodeValidityPeriod, 'ValidFrom', valueDate);
        
        //      ValidTo
        switch(validFor)
        {
            case '6M':
            case '6':
                days = 186;
                break;
            case '45D':
                days = 45;
                break;
        }
        valueDate = strFmt('%1 %2',SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate + days,DateSeparator::Hyphen), time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),TimeSeparator::Colon,TimeFormat::Hour24)+'.'+'00'+ ' -0000');

        SKS_EFT_Format::xmlsetAttributeText(nodeValidityPeriod, 'ValidTo', valueDate);

        //      VelocityControl
        nodeVelocityControl = nodeControls.appendChild(xmlDoc.createElement('VelocityControl'));
    
        //      CumulativeLimit
        SKS_EFT_Format::xmlsetAttributeText(nodeVelocityControl, 'CumulativeLimit', num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));
    
        //      MaxTrans
        SKS_EFT_Format::xmlsetAttributeText(nodeVelocityControl, 'MaxTrans', '0');
    
        //      Period
        SKS_EFT_Format::xmlsetAttributeText(nodeVelocityControl, 'Period', 'C');
    
        //      CurrencyType
        SKS_EFT_Format::xmlsetAttributeText(nodeVelocityControl, 'CurrencyType', 'B');
    
        //      CurrencyCode
        SKS_EFT_Format::xmlsetAttributeText(nodeVelocityControl, 'CurrencyCode', currencyCode, 3, false);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CDFs</Name>
				<Source><![CDATA[
    private void node_CDFs()
    {
        XmlElement  nodeCDFs;
        XmlElement  nodeCDF;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str                invDetailsString;
    
        //  CDF's
        nodeCDFs = nodeCreateApprovedPurchaseRequest.appendChild(xmlDoc.createElement('CDFs'));
    
        //  CDF
        nodeCDF = nodeCDFs.appendChild(xmlDoc.createElement('CDF'));
    
        //      FieldName
        SKS_EFT_Format::xmlsetAttributeText(nodeCDF, 'FieldName', 'PurchaseType');
    
        //      FieldValue
        SKS_EFT_Format::xmlsetAttributeText(nodeCDF, 'FieldValue', purchType);
    
        //  CDF
        nodeCDF = nodeCDFs.appendChild(xmlDoc.createElement('CDF'));
    
        //      FieldName
        SKS_EFT_Format::xmlsetAttributeText(nodeCDF, 'FieldName', 'PaymentID');
    
        //      FieldValue
        SKS_EFT_Format::xmlsetAttributeText(nodeCDF, 'FieldValue', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
    
        //  CDF
        nodeCDF = nodeCDFs.appendChild(xmlDoc.createElement('CDF'));
    
        //      FieldName
        SKS_EFT_Format::xmlsetAttributeText(nodeCDF, 'FieldName', 'VendorID');
    
        //      FieldValue
        SKS_EFT_Format::xmlsetAttributeText(nodeCDF, 'FieldValue', mSKS_EFT_FileDetail.AccountNum);
    
        while select InvoiceNumber, InvoiceSettleAmountPmtCur from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                && invSKS_EFT_FileDetail.InvoiceNumber != ''        
        {
            invDetailsString += strFmt('%1 %2;', invSKS_EFT_FileDetail.InvoiceNumber, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
        }
        invDetailsString = subStr(subStr(invDetailsString, 1, strLen(invDetailsString)-1), 1, 80);
        
        //  CDF
        nodeCDF = nodeCDFs.appendChild(xmlDoc.createElement('CDF'));
        
        //      FieldName
        SKS_EFT_Format::xmlsetAttributeText(nodeCDF, 'FieldName','RemitInfo');
        
        //      FieldValue
        SKS_EFT_Format::xmlsetAttributeText(nodeCDF, 'FieldValue', invDetailsString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Header</Name>
				<Source><![CDATA[
    protected void node_Header()
    {
        XmlElement nodeHeaderRequest;
        str valueDate;
        TimeInMS                startTime,endTime;
        //startTime               = WinAPI::getTickCount(); //BP obsolete
        startTime               = WinAPIServer::getTickCount();
        sleep(100);
        //endTime                 = WinAPI::getTickCount(); //BP obsolete
        endTime                 = WinAPIServer::getTickCount();
    
        nodeOrbiscomRequest = xmlDoc.appendChild(xmlDoc.createElement('OrbiscomRequest'));
    
        //          IssuerId
        SKS_EFT_Format::xmlsetAttributeText(nodeOrbiscomRequest, 'IssuerId', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IssuerId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 0, false);
    
        //          Version
        SKS_EFT_Format::xmlsetAttributeText(nodeOrbiscomRequest, 'Version', '14.2');
    
        //          HeaderRequest
        nodeHeaderRequest = nodeOrbiscomRequest.appendChild(xmlDoc.createElement('HeaderRequest'));
    
        //              FileId
        valueDate = strFmt('%1 %2',SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateSeparator::Dot), time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),TimeSeparator::Colon,TimeFormat::Hour24)+':'+int2str(endTime-startTime));
        SKS_EFT_Format::xmlsetAttributeText(nodeHeaderRequest, 'FileId', valueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_OrbiscomTransactionRequest</Name>
				<Source><![CDATA[
    protected void node_OrbiscomTransactionRequest()
    {
        str supplierName;

        recCount++;
    
        //  OrbiscomTransactionRequest
        nodeOrbiscomTransactionRequest = nodeOrbiscomRequest.appendChild(xmlDoc.createElement('OrbiscomTransactionRequest'));
    
        //      CommonName
        SKS_EFT_Format::xmlsetAttributeText(nodeOrbiscomTransactionRequest, 'CommonName', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CommonName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 19, false);
        
        //      BankNumber
        SKS_EFT_Format::xmlsetAttributeText(nodeOrbiscomTransactionRequest, 'BankNumber', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BankNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 0, false);
        
        //      IcaNumber
        SKS_EFT_Format::xmlsetAttributeText(nodeOrbiscomTransactionRequest, 'IcaNumber', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IcaNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 0, false);
        
        //  CreateApprovedPurchaseRequest
        nodeCreateApprovedPurchaseRequest = nodeOrbiscomTransactionRequest.appendChild(xmlDoc.createElement('CreateApprovedPurchaseRequest'));
    
        //      RequestId
        SKS_EFT_Format::xmlsetAttributeText(nodeCreateApprovedPurchaseRequest, 'RequestId', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
    
        //      Amount
        SKS_EFT_Format::xmlsetAttributeText(nodeCreateApprovedPurchaseRequest, 'Amount', num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));
    
        //      PurchaseType
        purchType = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('PurchaseType', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        SKS_EFT_Format::xmlsetAttributeText(nodeCreateApprovedPurchaseRequest, 'PurchaseType', purchType, 0, false);
    
        //      SupplierName
        supplierName = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('SupplierName', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        if(supplierName == '')
        {
            supplierName = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName);
        }        
        SKS_EFT_Format::xmlsetAttributeText(nodeCreateApprovedPurchaseRequest, 'SupplierName', supplierName, 25, false);        
    
        //      VCardAlias
        SKS_EFT_Format::xmlsetAttributeText(nodeCreateApprovedPurchaseRequest, 'VCardAlias', this.CharacterReplacement(mBankAccountTable.Name), 0, false);
    
        //      ValidFor
        validFor = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('ValidFor', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        SKS_EFT_Format::xmlsetAttributeText(nodeCreateApprovedPurchaseRequest, 'ValidFor', validFor, 0, false);
    
        //      CurrencyCode
        currencyCode = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('CurrencyCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        SKS_EFT_Format::xmlsetAttributeText(nodeCreateApprovedPurchaseRequest, 'CurrencyCode', currencyCode, 3, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PurchSuppNotificationEMailRequest</Name>
				<Source><![CDATA[
    protected void node_PurchSuppNotificationEMailRequest()
    {
        XmlElement              nodePurchEmailReq;
        XmlElement              nodePaymEmailReq;
        VendTable               vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;
    
    
        //  SetPurchaseSupplierNotificationEMailRequest
        nodePurchEmailReq = nodeOrbiscomTransactionRequest.appendChild(xmlDoc.createElement('SetPurchaseSupplierNotificationEMailRequest'));
    
        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select * from DirPartyContactInfoview
                where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                    &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
        }
    
        //      EMailAddress
        SKS_EFT_Format::xmlsetAttributeText(nodePurchEmailReq, 'EMailAddress', this.CharacterReplacement(DirPartyContactInfoView.Locator), 0, false);
    
        //      AutoSend
        SKS_EFT_Format::xmlsetAttributeText(nodePurchEmailReq, 'AutoSend', 'true');
    
        //      RequestId
        SKS_EFT_Format::xmlsetAttributeText(nodePurchEmailReq, 'RequestId', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
    
        //  SendSupplierPaymentNotificationEMailRequest
        nodePaymEmailReq = nodeOrbiscomTransactionRequest.appendChild(xmlDoc.createElement('SendSupplierPaymentNotificationEMailRequest'));
    
        //      RequestId
        SKS_EFT_Format::xmlsetAttributeText(nodePaymEmailReq, 'RequestId', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Trailer</Name>
				<Source><![CDATA[
    protected void node_Trailer()
    {
        XmlElement nodeTrailerRequest;
    
        //          TrailerRequest
        nodeTrailerRequest = nodeOrbiscomRequest.appendChild(xmlDoc.createElement('TrailerRequest'));
    
        //              RecordCount
        SKS_EFT_Format::xmlsetAttributeText(nodeTrailerRequest, 'RecordCount',  int2str(recCount));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>