<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_JP_SMBC_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_JP_SMBC_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_JP_SMBC_XML extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.DOM('DOM')
    #define.CBFT('CBFT')
    #define.SIN_TRA('SIN-TRA')
    #define.MUL_TRA('MUL-TRA')
    #define.ACH_CCD('ACH-CCD')
    #define.ACH_PPD('ACH-PPD')
    #define.ACH_CTX('ACH-CTX')
    #define.FED_WIRE('FED-WIRE')
    #define.SWIFT_WIRE('SWIFT-WIRE')
    #define.CHIPS('CHIPS')                  //SKS#DevOps:17850

    #define.FormatVersion('20230428')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Nm</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Nm(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //------------------------------------------------------------------------------------------------------
        Name companyName;
    
        //          Nm
        if(mSKS_EFT_FileDetail.PaymSpec == 'ACH-CTX')       //SKS#DevOps:18084
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeInitgPty, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), 70, false);
        }
        else
        {
            companyName = CompanyInfo::find().Name();
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeInitgPty, 'Nm', this.CharacterReplacement(companyName), 70, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        str address;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                        address = strLRTrim(mRemittanceAdrline1 + ' ' + mRemittanceCity + ' ' + mRemittanceState + ' ' + mRemittanceZipCode + ' ' + this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId));
                        this.node_PstlAdr(_nodeCdtr, '', address, '', '', 70, '', '');       //SKS#DevOps:20251
                        break;
                    case #CHIPS:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity );
                        break;
                }
                break;
            default:
                this.node_PstlAdr(_nodeCdtr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr, mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, mSKS_EFT_FileDetail_VendAddress.BeneCity);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForCdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_InstrForCdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.82: InstrForCdtrAgt
        //              InstrInf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeInstrForCdtrAgt;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        //          2.82: InstrForCdtrAgt
                        nodeInstrForCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('InstrForCdtrAgt'));
    
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInstrForCdtrAgt, 'InstrInf', 'PAY IN FULL');
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_CtctDtls</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_CtctDtls
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_CtctDtls(XmlElement _nodeCdtr)
    {
        XmlElement nodeCtctDtls;
        str phone;
        
        phone = SKS_EFT_Format::getCodelookupvalue('PayeePhone', mSKS_EFT_FileDetail.RecId);

        if(phone  && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT)
        {
            //              CtctDtls
            nodeCtctDtls = _nodeCdtr.appendChild(xmlDoc.createElement('CtctDtls'));
            
            //                  EmailAdr
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'PhneNb', phone, 20);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
    
        //              PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);
    
        //              CtctDtls
        this.node_PmtInf_Cdtr_CtctDtls(nodeCdtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()
    {
        if(mSKS_EFT_FileDetail.PaymSpec == 'SIN-TRA' ||
           mSKS_EFT_FileDetail.PaymSpec == 'MUL-TRA')
        {
            nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('Document'));
            SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns', 'urn:iso:std:iso:20022:tech:xsd:pain.001.001.02');
            SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
            nodeRoot = nodeRoot.appendChild(xmlDoc.createElement('pain.001.001.02'));
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtgyPurp;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'JP-SMBC-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                        value = '35';
                        break;
                    case #DOM:
                        value = '21';
                        break;
                }
                break;
        }
        if(value)
        {
            //              2.15: CtgyPurp
            nodeCtgyPurp = _nodePmtTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //                  2.16: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //        2.8: Cd
        //------------------------------------------------------------------------------------------------------
        str cd;

        //              Cd
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':          //SKS#DevOps:17850
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        cd = 'NURG';
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        cd = 'URGP';
                        break;
                }
                break;
            case 'JP-SMBC-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SIN_TRA:
                    case #MUL_TRA:
                        cd = 'SEPA';
                        break;
                }
                break;
        }
    
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', cd);

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
    
        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.8: SvcLvl
        this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);

        //LclInstrm
        this.node_PmtInf_PmtTpInf_LclInstrm(nodePmftTpInf);

        //          2.14: CtgyPurp
        this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmftTpInf);

       
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr</Name>
				<Source><![CDATA[
    protected void node_GrpHdr()
    {
        //------------------------------------------------------------------------------------------------------
        //  1.0: GrpHdr
        //      1.1: MsgId
        //      1.2: CreDtTm
        //      1.4: Batch Booking
        //      1.5: NbOfTxs
        //      1.6: CtrlSum
        //      1.7: Grouping
        //      1.8: InitgPty
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeGrpHdr;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
    
        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    
        //  1.0: GrpHdr
        nodeGrpHdr = nodeRoot.appendChild(xmlDoc.createElement('GrpHdr'));
    
        //      1.1: MsgId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'MsgId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,35));
    
        //      1.2: CreDtTm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'CreDtTm', DateTimeUtil::toStr(DateTimeUtil::utcNow()),19);
    
        if(mSKS_EFT_FileDetail.PaymSpec == 'SIN-TRA' ||
           mSKS_EFT_FileDetail.PaymSpec == 'MUL-TRA')
        {
            this.node_GrpHdr_BtchBookg(nodeGrpHdr);
    
            //      1.3: Authstn
            this.node_GrpHdr_Authstn(nodeGrpHdr);
        }
    
        //      1.5: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0),15);
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            //      1.6: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0),35);
        }
        else
        {
            //      1.6: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0),35);
        }

        if(mSKS_EFT_FileDetail.PaymSpec == 'SIN-TRA' ||
           mSKS_EFT_FileDetail.PaymSpec == 'MUL-TRA')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeGrpHdr, 'Grpg', 'MIXD');
        }
    
        //      1.8: InitgPty
        this.node_GrpHdr_InitgPty(nodeGrpHdr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_BtchBookg</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_BtchBookg
    /// </summary>
    /// <param name = "_BtchBookg">_BtchBookg</param>
    protected void node_GrpHdr_BtchBookg(XmlElement _BtchBookg)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.4: BtchBookg
        //------------------------------------------------------------------------------------------------------
       
        //              1.4: BtchBookg
        str btchbkg;

        btchbkg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(mSKS_EFT_FileDetail.PaymSpec == 'SIN-TRA' ||
           mSKS_EFT_FileDetail.PaymSpec == 'MUL-TRA')
        {
            if(strUpr(btchbkg) == 'Y')
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _BtchBookg, 'BtchBookg', 'true');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _BtchBookg, 'BtchBookg', 'false');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                   9.1.17: SchmeNm
        //                      9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeId;
        XmlElement  nodeOrgId;
        boolean     printSwiftCode;
        XmlElement  nodePrtryOrOthrId;
        str         initiatingPartyId;
        boolean     printPrtryId;
        int         len;
        boolean     printInitgPtyId = true;   

        initiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        this.getSKS_EFT_FileFormatPaymSpec();
        
        switch(mSKS_EFT_FileDetail.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                len = 10;
                break;
            case #FED_WIRE:
            case #SWIFT_WIRE:
            case #CHIPS:
                len = 35;
                break;
            case #CBFT:
                printSwiftCode = true;
                break;
            case #DOM:
                printInitgPtyId = false;
                break;
            default:
                printPrtryId = true;
                len = 35;
                break;
        }
        if(printInitgPtyId)
        {
            if(printSwiftCode)
            {
                //          9.1.12: Id
                nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
                //              9.1.13: OrgId
                nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

                //              BICOrBEI
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'BICOrBEI', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo), 35);
            }
            else if(initiatingPartyId)
            {
                //          9.1.12: Id
                nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
                //              9.1.13: OrgId
                nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

                //                  9.1.15: Other
                if(printPrtryId)
                {
                    nodePrtryOrOthrId = nodeOrgId.appendChild(xmlDoc.createElement('PrtryId'));
                }
                else
                {
                    nodePrtryOrOthrId = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
                }

                //                      9.1.1.16: Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePrtryOrOthrId, 'Id', this.CharacterReplacement(initiatingPartyId), len);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              InstrPrty
        //------------------------------------------------------------------------------------------------------
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FED_WIRE     ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWIFT_WIRE   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHIPS)
        {
            //             InstrPrty
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty', mSKS_EFT_FileDetail.RecId)), 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SIN_TRA ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MUL_TRA)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'SLEV');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //              2.13: Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeLclInstrm;
        str         value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                        value = 'CCD';
                        break;
                    case #ACH_PPD:
                        value = 'PPD';
                        break;
                    case #ACH_CTX:
                        value = 'CTX';
                        break;
                }
                break;
        }
        if(value)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmtTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeDbtrAcctTp;
        boolean    printDbtrAcctType;
        str iban, acctNum, value;
        int acctLen;

        iban    = mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum = mSKS_EFT_FileDetail.BankBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                    case #DOM:
                        if(mSKS_EFT_FileDetail.BankBankAcct)
                        {
                            iban = '';
                        }
                        acctLen = 10;
                        printDbtrAcctType = true;
                        break;
                    default:
                        acctNum = '';
                        break;
                }
                break;
            case 'JP-SMBC-XML-US':          //SKS#DevOps:17850
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        iban = '';
                        acctLen  = 34;
                        printDbtrAcctType = true;
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        iban = '';
                        acctLen  = 12;
                        break;
                }
                break;
        }

        if(iban || acctNum)
        {
            //          DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));

            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //              IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', iban, 34);
            }
            else if(acctNum)
            {
                //              Othr
                nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                  Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', acctNum, acctLen);

                if(printDbtrAcctType)
                {
                    if(mSKS_EFT_FileDetail.PaymSpec == #DOM && mSKS_EFT_FileDetail.FormatId == 'JP-SMBC-XML')//DevOps21812
                    {
                        value = 'SVGS';
                    }
                    else if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
                    {
                        value = 'SVGS';
                    }
                    else
                    {
                        value = 'CACC';
                    }
                    //              Tp
                    nodeDbtrAcctTp = nodeDbtrAcct.appendChild(xmlDoc.createElement('Tp'));

                    //                  Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', value);
                }
            }

            //          Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        str address;
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, '', mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                        address = strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyState + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
                        this.node_PstlAdr(_nodeDbtr, '', address, '', '', 70, '', '');
                        break;
                    default:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                }
                break;
            default:
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        //                          9.1.17: SchmeNm
        //                              9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeId;
        XmlElement  nodeOrgId;
        XmlElement  nodeOther;
        str         value;
        int         len;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        value   = mSKS_EFT_FileDetail.FileACHCompanyId;
                        len     = 10;
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DebtorId', mSKS_EFT_FileDetail.RecId));
                        len     = 35;
                        break;
                }
                break;
        }
        if(value)
        {
            //          9.1.12: Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(value), len);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------    
        int len;

        mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        len  = 16;
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        len  = 68;
                        break;
                }
                break;
            case 'JP-SMBC-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                        len = 40;
                        break;
                    default:
                        len  = 34;
                        break;
                }
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);       
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
            mRemittanceAdrLine3 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
                if (vendAddrArray.exists(3))
                {
                    mRemittanceAdrLine3 = vendAddrArray.value(3);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            //Populate Remittance Information from Vendor eBanking details
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        CompanyBankAccountId    prevBankAccountId;
        PaymMode                prevPaymMode;
        PaymSpec                prevPaymSpec;
        CurrencyCode            prevCurrency;
        SKS_EB_Date             prevEffectiveDate;
        DataAreaId              prevPaymCompany;
    
        xmlDoc = XmlDocument::newBlank(this.getEncoding());
    
        this.node_MessageRoot();
    
        this.node_GrpHdr();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get RemittanceAddress
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
    
            if(prevBankAccountId != mSKS_EFT_FileDetail.BankAccountId ||
               prevPaymMode != mSKS_EFT_FileDetail.PaymMode ||
               prevPaymSpec != mSKS_EFT_FileDetail.PaymSpec ||
               prevCurrency != mSKS_EFT_FileDetail.PaymentCurrencyCode ||
               prevEffectiveDate != mSKS_EFT_FileDetail.EffectiveDate  ||
               prevPaymCompany != mSKS_EFT_FileDetail.PaymentCompany//SKS_Bug_12510
               )
            {
                this.node_PmtInf();
    
                prevBankAccountId = mSKS_EFT_FileDetail.BankAccountId;
                prevPaymMode = mSKS_EFT_FileDetail.PaymMode;
                prevPaymSpec = mSKS_EFT_FileDetail.PaymSpec;
                prevCurrency = mSKS_EFT_FileDetail.PaymentCurrencyCode;
                prevEffectiveDate = mSKS_EFT_FileDetail.EffectiveDate;
                prevPaymCompany   = mSKS_EFT_FileDetail.PaymentCompany;//SKS_Bug_12510
            }
    
            //For AP
            this.node_CdtTrfTxInf();

            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeClrSysId;
        XmlElement nodeBrnchId;
        boolean printName;
        boolean printCountry;
        str swift, rtg, clrSysId, w03;
        int length;

        swift   = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg     = mSKS_EFT_FileDetail.BankBankTransit;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':          //SKS#DevOps:17850
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        swift       = '';
                        length      = 9;
                        clrSysId    = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClrSysId', mSKS_EFT_FileDetail.RecId));
                        printName   = true;
                        printCountry= true;
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        rtg = '';
                        break;
                }
                break;
            case 'JP-SMBC-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                    case #DOM:
                        w03 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DbtrAgtBrnchId',mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));//DevOPs20237 
                        rtg = '';
                        break;
                    default:
                        rtg = '';
                        break;
                }
                break;
        }

        if(swift || rtg)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(swift)
            {
                //              BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC',swift, 11, false);
            }
            else if(rtg)
            {
                //              ClrSysMmbId
                nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

                if(clrSysId)
                {
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', clrSysId);
                }
                //                  MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', rtg, length, false);
            }
            select firstonly msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;

            if(printName)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(LogisticsLocation::find(msks_EFT_FileDetail_BankAddress.Location).Description), 140, false);//SKS_VSTS_14068
            }

            if(printCountry)
            {
                this.node_PstlAdr(nodeFinInstnId, msks_EFT_FileDetail_BankAddress.CountryRegionId, '', '', '', 0, '', '');
            }
            if(w03)
            {
                //                  BrnchId
                nodeBrnchId = nodeDbtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

                //                         Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', w03, 3, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  IBAN
        //------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrAcctTp;
        boolean acctType;
        str value, iban, acctNum;
        int len;
    
        iban    = mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum = mSKS_EFT_FileDetail.DepBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        iban = '';
                        len = 34;
                        acctType = true;
                        break;
                }
                break;
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        iban = '';
                        len = 17;
                        break;
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        iban = '';
                        len = 17;
                        acctType = true;
                        break;
                }
                break;
        }

        if(iban || acctNum)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', acctNum, len);

                if(acctType)
                {
                    if(mSKS_EFT_FileDetail.PaymSpec == #DOM && mSKS_EFT_FileDetail.FormatId == 'JP-SMBC-XML')//DevOps21812
                    {
                        value = 'SVGS';
                    }
                    else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                    {
                        value = 'SVGS';
                    }
                    else
                    {
                        value = 'CACC';
                    }

                    nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', value);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str ustrdValue,value;
        boolean printRmtinf = true;
        
        value =this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UseRmtinf', mSKS_EFT_FileDetail.RecId));
        if(value == 'No')
        {
            printRmtinf = false;
        }
        

        if (mSKS_EFT_FileFormatPaymSpec.AddendaSpec)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
            
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPD)
            {
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', mSKS_EFT_Addenda.buildAddenda(), 80, false);
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CTX)
            {
                for(int i = 0; i < strLen(ustrdValue); i+= 80)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', substr(ustrdValue, i+1, 80), 0, false);
                }
            }
        }
        else if(printRmtinf)
        {
            super(_nodeCdtTrfTxInf);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
    
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
    
        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtTpInf(nodeCdtTrfTxInf);
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);
    
        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        //          2.71: IntrmyAgt1
        this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
    
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
    
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
    
        //          2.85: InstrForDbtrAgt
        this.node_CdtTrfTxInf_InstrForDbtrAgt(nodeCdtTrfTxInf);
    
        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);
    
        //          2.89: RgltryRptg
        this.node_CdtTrfTxInf_RgltryRptg(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.88: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;

        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT && msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText)
        {
            nodeId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Prtry', this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForDbtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_InstrForDbtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_InstrForDbtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.82: InstrForDbtrAgt
        //------------------------------------------------------------------------------------------------
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT)
        {
            //          2.85: InstrForDbtrAgt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'InstrForDbtrAgt', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrForDbtrAgt', mSKS_EFT_FileDetail.RecId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.29: InstrId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodePmtId;
        int         length;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':          //SKS#DevOps:17850
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        length      = 15;
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        length      = 16;
                        break;
                }
                break;
            case 'JP-SMBC-XML':
                length      = 35;
                break;
        }
    
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        //              2.29: InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 35));

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, length));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':          //SKS#DevOps:17850
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        value = 'DEBT';
                        break;
                }
                break;
            case 'JP-SMBC-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }
        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeClrSysId;
        XmlElement nodeBrnchId;
        str        swift, rtg, cd;
        boolean     printName;
        boolean     printPstlAddr;
        int         length;
        boolean     printBrnchId, ustrdPstlAdr;

        str         branchID;
        VendBankAccount lVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);

        BankGroupId vendBankGroupId = lVendBankAccount.BankGroupId;
        BankGroup   bankGroup      = BankGroup::find(vendBankGroupId);

        branchID=  mSKS_EFT_FileDetail_BenBank.BenBankBranch;
        swift   =   mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =   mSKS_EFT_FileDetail.DepBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        swift           = '';
                        length          = 9;
                        printName       = true;
                        printPstlAddr   = true;
                        cd              = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrClrSysId', mSKS_EFT_FileDetail.RecId));
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                        length          = 9;
                        printName       = true;
                        printPstlAddr   = true;
                        cd              = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrClrSysId', mSKS_EFT_FileDetail.RecId));
                        ustrdPstlAdr    =   true;   //SKS#DevOps:20251
                        break;
                    case #CHIPS:
                        length          = 9;
                        printName       = true;
                        printPstlAddr   = true;
                        cd              = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrClrSysId', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'JP-SMBC-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        swift = '';
                        length          = 9;
                        printName       = true;
                        printPstlAddr   = true;
                        cd              = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrClrSysId', mSKS_EFT_FileDetail.RecId));
                        printBrnchId    = true;
                        rtg = bankgroup.Code_JP;//DevOps20858
                        branchID = bankgroup.BranchCode_JP;
                        break;
                    case #CBFT:
                        length          = 9;
                        printName       = true;
                        printPstlAddr   = true;
                        cd              = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrClrSysId', mSKS_EFT_FileDetail.RecId));
                        printBrnchId    = true;
                        rtg = bankgroup.Code_JP;//DevOps20858
                        branchID = bankgroup.BranchCode_JP;
                        break;
                    default:
                        rtg = '';
                        break;
                }
                break;
        }
        if(swift || rtg)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 11);

            }
            else if(rtg)
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

                if(cd)
                {
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                    if(cd)
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', cd);
                    }
                }
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, length);
            }

            if(printName)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 68, false);
            }

            if(printPstlAddr  &&
              (mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId || mSKS_EFT_FileDetail_BenBank.BenBankAddr))
            {
                if(ustrdPstlAdr)            //SKS#DevOps:20251
                {
                    this.node_PstlAdr(nodeFinInstnId, '', strLRTrim(mSKS_EFT_FileDetail_BenBank.BenBankAddr + ' ' + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId)), '', '');
                }
                else
                {
                    this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', '');
                }
            }
            if(branchID && printBrnchId)
            {
                nodeBrnchId = nodeCdtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', branchID,35);
                
            }
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        str name = mSKS_EFT_FileDetail.AccountName;
        int length;

        if(mRemittanceName != '')
        {
            name = mRemittanceName;
        }
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'JP-SMBC-XML-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_PPD:
                    case #ACH_CTX:
                        length  = 22;
                        break;
                    case #FED_WIRE:
                    case #SWIFT_WIRE:
                    case #CHIPS:
                        length  = 68;
                        break;
                }
                break;
            default:
                length = 35;
                break;
        }
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(name), length);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PstlAdr(XmlElement _node,
                                AddressCountryRegionId _countryId,
                                SKS_EB_Address _address,
                                AddressZipCodeId _postalCode,
                                AddressCity _city,
                                int _length = 35,
                                SKS_EB_Address _address2 = '',
                                AddressCountryRegionName  _state = '',
                                boolean isStructured = false)
    {
        //------------------------------------------------------------------------------------------------------
        //          PstlAdr
        //              Ctry
        //              AdrLine
        //              AdrLine
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePstlAdr;
        LogisticsAddressCountryRegionISOCode countryRegion;
    
        countryRegion = this.getLogisticsAddressCountryISO(_countryId);
    
        if(countryRegion || _address || _postalCode || _city)
        {
            //      PstlAdr
            nodePstlAdr = _node.appendChild(xmlDoc.createElement('PstlAdr'));
        
            //          AdrLine
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', this.CharacterReplacement(_address), _length, false);
    
            //          AdrLine
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'AdrLine', strLTrim(_postalCode + ' ' + this.CharacterReplacement(_city)), _length, false);
            
            //          Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', countryRegion, 2, false);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>