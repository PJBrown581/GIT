<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_ACCESS_CHK</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_ACCESS_CHK extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_ACCESS_CHK extends SKS_EFT_Format
{
    #define.FormatVersion('20220616')
    #define.Separator(',')
    int64   mPaymentCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        this.rec_FileHeader();

        while(mSKS_EFT_FileDetail)
        {
            this.rec_PaymentHeader();

            this.rec_PayeeName();

            this.rec_PayeeAddress();

            this.rec_AdditionalPayeeAddress();

            this.rec_PayeePostalRecord();

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                {
                    this.rec_RemittenceDetail(invSKS_EFT_FileDetail);
                }
            }
            next mSKS_EFT_FileDetail;
        }

        this.rec_FileTrailerRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_AdditionalPayeeAddress</Name>
				<Source><![CDATA[
    private boolean rec_AdditionalPayeeAddress()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append('ADDPYE');

        sb.Append(SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(52, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileHeader</Name>
				<Source><![CDATA[
    private boolean rec_FileHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append('FILHDR');

        // 2 File Destination
        sb.Append(SKS_PP_StringFormats::strFill(10, 'PWS', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3 Customer ID
        sb.Append(SKS_PP_StringFormats::strFill(32, mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4 Transaction Date
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::Slash));

        // 5 Transaction time
        sb.Append(SKS_PP_StringFormats::strTimeHHMM());

        // 6 Filler
        sb.Append(SKS_PP_StringFormats::strFill(66, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileTrailerRecord</Name>
				<Source><![CDATA[
    private boolean rec_FileTrailerRecord()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append('FILTRL');

        // 2 Number of records
        sb.Append(SKS_PP_StringFormats::strFill(6, int642str(mPaymentCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3 Filler
        sb.Append(SKS_PP_StringFormats::strFill(116, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayeeAddress</Name>
				<Source><![CDATA[
    private boolean rec_PayeeAddress()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append('PYEADD');

        // 2    Payee Address 1
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Payee Address 2
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Phone
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Filler
        sb.Append(SKS_PP_StringFormats::strFill(32, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayeeName</Name>
				<Source><![CDATA[
    private boolean rec_PayeeName()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append('PAYENM');
        
        // 2 Payee name 1 , 2
        sb.Append(SKS_PP_StringFormats::strFill(70, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3 Vendor number
        sb.Append(SKS_PP_StringFormats::strFill(19, mSKS_EFT_FileDetail.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4 Filler
        sb.Append(SKS_PP_StringFormats::strFill(33, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayeePostalRecord</Name>
				<Source><![CDATA[
    private boolean rec_PayeePostalRecord()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append('PYEPOS');

        // 2 Payee city
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3 Payee state
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4 Payee ZIP
        sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5 Payee country
        sb.Append(SKS_PP_StringFormats::strFill(3, this.CharacterReplacement(LogisticsAddressCountryRegion::findByISOCode(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).CountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6 Filler
        sb.Append(SKS_PP_StringFormats::strFill(39, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentHeader</Name>
				<Source><![CDATA[
    private boolean rec_PaymentHeader()
    {
        str sign;//SKS_VSTS_14100
        int length;//SKS_VSTS_14100
        AmountMST amt;//SKS_VSTS_14100
        str                         value1,value2;
        SKS_EFT_FileDetail          eft_fileDetail_paymentAmount;
        System.Text.StringBuilder   sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append('PMTHDR');

        // 2 Courier code
        value1 = SKS_EFT_Format::getCodelookupvalue('CourierCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(value1), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3 Form code
        value2 = SKS_EFT_Format::getCodelookupvalue('FormCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(value2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4 Payment date
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Slash));

        // 5 Payment amount
        select sum(InvoiceSettleAmountPmtCur) from eft_fileDetail_paymentAmount
            where eft_fileDetail_paymentAmount.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;

        amt = eft_fileDetail_paymentAmount.InvoiceSettleAmountPmtCur;
        if(eft_fileDetail_paymentAmount.InvoiceSettleAmountPmtCur > 0)//SKS_VSTS_14100
        {
            sign = '-';
            length = 10;
        }
        else
        {
            length = 11;//SKS_VSTS_14100
            amt = amt * -1;
        }
        sb.Append(sign + SKS_PP_StringFormats::strFill(length,num2str(amt,0,2,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_14029

        // 6 Account number
        sb.Append(SKS_PP_StringFormats::strFill(17, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7 Check Number
        sb.Append(SKS_PP_StringFormats::strFill(10,this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8 Filler
        sb.Append(SKS_PP_StringFormats::strFill(52, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_14029

        this.fileWrite(sb.ToString());

        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RemittenceDetail</Name>
				<Source><![CDATA[
    private boolean rec_RemittenceDetail(SKS_EFT_FileDetail  invSKS_EFT_FileDetail)
    {
        str sign;//SKS_VSTS_14100
        int length;
        AmountMST amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append('RMTDTL');

        // 2 Invoice number
        sb.Append(SKS_PP_StringFormats::strFill(30, invSKS_EFT_FileDetail.InvoiceNumber, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3 Description
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4 Invoice Date
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash));

        // 5 Net amount
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        if(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)//SKS_VSTS_14100
        {
            sign = '-';
            length = 10;
        }
        else
        {
            sign = '';
            length = 11;
            amt = amt * -1;
        }
        sb.Append(sign + SKS_PP_StringFormats::strFill(length, num2str(amt,0,2,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_14029

        // 6 Gross Amount
        amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
        if(amt > 0)//SKS_VSTS_14100
        {
            sign = '-';
            length = 10;
        }
        else
        {
            sign = '';
            length = 11;
            amt = amt * -1;
        }
        sb.Append( sign + SKS_PP_StringFormats::strFill(length, num2str(amt,0,2,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_14029

        // 7 Discount Amount
        amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
        if(amt > 0)//SKS_VSTS_14100
        {
            sign = '-';
            length = 10;
        }
        else
        {
            sign = '';
            length = 11;
            amt = amt * -1;
        }
        sb.Append( sign + SKS_PP_StringFormats::strFill(length,num2str(amt,0,2,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8 Filler
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_14029

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId 
        join mSKS_EFT_FileDetail_VendAddress
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>