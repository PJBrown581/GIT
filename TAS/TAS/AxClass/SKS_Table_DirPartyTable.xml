<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_DirPartyTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_DirPartyTable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EH_update_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(DirPartyTable), tableMethodStr(DirPartyTable, update))]
    public static void EH_update_pre(XppPrePostArgs _args)
    {
    
        ;
        SKS_Table_DirPartyTable::UpdateCustomerInfoEPay(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerInfoEPay</Name>
				<Source><![CDATA[
    private static void UpdateCustomerInfoEPay(XppPrePostArgs _args)
    {
        #SKS_Global
        DirPartyTable       locDirPartyTable, locOrigDirPartyTable;
        boolean             locQueueCreated = false;
        CustTable           locCustTable;
        ;
    
        //The only field we care about is the Name.  it hasn't changed, we don't need to queue this.
        //Note: A customer may still end up being queued by another table, even if they name hasn't
        //changed.  Changes in other fields could still cause queueing.
        if(locOrigDirPartyTable.Name == locDirPartyTable.Name)
        {
            return;
        }
    
        //customerTable
        While select crossCompany locCustTable where locCustTable.Party == locDirPartyTable.RecId
        {
            ChangeCompany(locCustTable.company())
            {
                SKS_Table_CustTable::QueueCustomer(locCustTable,
                                                    SKS_EPY_ChangeType::Updated,
                                                    SKS_EPY_Table::DirPartyTable,
                                                    locDirPartyTable.Recid);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>