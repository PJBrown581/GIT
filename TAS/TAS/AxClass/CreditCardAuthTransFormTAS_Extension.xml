<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardAuthTransFormTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formstr(CreditCardAuthTrans))]
final class CreditCardAuthTransFormTAS_Extension
{
    public SKS_PP_Setup sKS_PP_Setup;
    public FormDataSource callerDataSource;
    
    public FormRun elementLocal;
    public str jsonPayloadResult, jsonPayloadRequest;
    public boolean callingFromSalesTable;
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializingFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to initialize form level variables
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormEventHandler(formStr(CreditCardAuthTrans), FormEventType::Initializing)]    
    public void initializingFormHandler(xFormRun _formRun, FormEventArgs _e)
    {
        elementLocal = _formRun;    

        sKS_PP_Setup = SKS_PP_Setup::find();
        callingFromSalesTable = (elementLocal.args().dataset() == tableNum(SalesTable));
        if (callingFromSalesTable)
        {
            if (TradeFormHelper::isCalledFromForm(elementLocal.args(), formStr(SalesTable)))
            {
                callerDataSource = elementLocal.args().record().dataSource();
            }
        }
        else if (elementLocal.args().dataset() == tableNum(SKS_CC_CustPaymTable))
        {
            if (TradeFormHelper::isCalledFromForm(elementLocal.args(), formStr(SKS_CC_CustPaymTable)))
            {
                callerDataSource = elementLocal.args().record().dataSource();
            }
        }
        else if (elementLocal.args().dataset() == tableNum(MCRCustPaymTable))
        {
            if (TradeFormHelper::isCalledFromForm(elementLocal.args(), formStr(MCRCustPaymTable)))
            {
                callerDataSource = elementLocal.args().record().dataSource();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to set visibility of CCA form controls
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormEventHandler(formStr(CreditCardAuthTrans), FormEventType::Initialized)]
    public void initializedFormHandler(xFormRun _formRun, FormEventArgs _e)
    {
        SKS_CC_ShowJSONPayload.visible(sKS_PP_Setup.ModCC == NoYes::Yes);
        SKS_CC_VoidPreAuthTrans.visible(sKS_PP_Setup.ModCC == NoYes::Yes);
        SKS_CC_VoidCaptureTrans.visible(sKS_PP_Setup.ModCC == NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardAuthTransDSOnInitializedFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to set range when called from <B>SKS_CC_CustPaymTable</B> record.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CreditCardAuthTrans, CreditCardAuthTrans), FormDataSourceEventType::Initialized)]
    public void creditCardAuthTransDSOnInitializedFormHandler(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        SKS_CC_CustPaymTable    custPaymTable;
        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;        

        if (elementLocal.args() && elementLocal.args().dataset() == tableNum(SKS_CC_CustPaymTable))
        {
            custPaymTable = elementLocal.args().record();
            qbds = _sender.query().dataSourceTable(tableNum(CreditCardAuthTrans));
            qbr = qbds.addRange(fieldNum(CreditCardAuthTrans, SKS_CC_CustPaymTable));
            qbr.value(SysQuery::value(custPaymTable.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardAuthTransDSOnActivatedFormHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to get and set JSON payload and menu item buttons
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CreditCardAuthTrans, CreditCardAuthTrans), FormDataSourceEventType::Activated)]
    public void creditCardAuthTransDSOnActivatedFormHandler(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (sKS_PP_Setup.ModCC == NoYes::No)
        {
            return;
        }

        boolean isReturnOrder, isMCRSalesOrder;

        jsonPayloadResult = '';
        jsonPayloadRequest = '';

        if (creditCardAuthTrans.CardTokenResult)
        {
            jsonPayloadResult = SKS_CC_UtilityAndEventHandler::getPayFabricJSONPayload(
                CreditCardPaymentProperties::fromXmlString(creditCardAuthTrans.CardTokenResult));
        }

        if (creditCardAuthTrans.CardTokenRequest)
        {
            jsonPayloadRequest = SKS_CC_UtilityAndEventHandler::getPayFabricJSONPayload(
                CreditCardPaymentProperties::fromXmlString(creditCardAuthTrans.CardTokenRequest));
        }

        if (creditCardAuthTrans.SalesId)
        {
            SalesTable salesTableCheckSKS = SalesTable::find(creditCardAuthTrans.SalesId);
            
            if (salesTableCheckSKS.SalesType == SalesType::ReturnItem)
            {
                isReturnOrder = true;
            }

            if (salesTableCheckSKS.mcrIsCallCenter() && RetailMCRChannelTable::mcrEnableOrderCompletion(salesTableCheckSKS))
            {
                isMCRSalesOrder = true;
            }
        }
        else
        {
            if (creditCardAuthTrans.ApprovalType == CreditCardOperation::Refund)
            {
                isReturnOrder = true;
            }
        }

        SKS_CC_ShowJSONPayload.enabled(jsonPayloadResult != '' || jsonPayloadRequest != '');

        SKS_CC_VoidPreAuthTrans.enabled(!isMCRSalesOrder &&
            creditCardAuthTrans.ApprovalType == CreditCardOperation::Authorize &&
            creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved &&
            creditCardAuthTrans.ApprovalVoid == NoYes::No &&
            creditCardAuthTrans.ApprovalExpired == NoYes::No);

        if (isReturnOrder)
        {
            SKS_CC_VoidCaptureTrans.caption('Void refund');
            SKS_CC_VoidCaptureTrans.enabled(sKS_PP_Setup.CCAllowVoidOfCaptureTrans == NoYes::Yes &&
                creditCardAuthTrans.ApprovalType == CreditCardOperation::Refund &&
                creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved &&
                creditCardAuthTrans.ApprovalVoid == NoYes::No &&
                creditCardAuthTrans.SKS_CC_ReversedPayment == NoYes::No);
        }
        else
        {
            SKS_CC_VoidCaptureTrans.caption('Void capture');
            SKS_CC_VoidCaptureTrans.enabled(sKS_PP_Setup.CCAllowVoidOfCaptureTrans == NoYes::Yes &&
                (creditCardAuthTrans.ApprovalType == CreditCardOperation::AuthorizeAndCapture ||
                    creditCardAuthTrans.ApprovalType == CreditCardOperation::CaptureAfterAuthorize) &&
                creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved &&
                creditCardAuthTrans.ApprovalVoid == NoYes::No &&
                creditCardAuthTrans.SKS_CC_ReversedPayment == NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidPreAuthTransButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to refresh calling datasource.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormControlEventHandler(formControlStr(CreditCardAuthTrans, SKS_CC_VoidPreAuthTrans), FormControlEventType::Clicked)]
    public void voidPreAuthTransButton_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (callerDataSource)
        {
            callerDataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidCaptureTransButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to refresh calling datasource.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormControlEventHandler(formControlStr(CreditCardAuthTrans, SKS_CC_VoidCaptureTrans), FormControlEventType::Clicked)]
    public void voidCaptureTransButton_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (callerDataSource)
        {
            callerDataSource.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showJSONPayloadButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to display JSON payload.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormControlEventHandler(formControlStr(CreditCardAuthTrans, SKS_CC_ShowJSONPayload), FormControlEventType::Clicked)]
    public void showJSONPayloadButton_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        if (jsonPayloadResult || jsonPayloadRequest)
        {
            CreditCardAuthTrans ccTransSKS;            

            if (jsonPayloadResult)
            {
                ccTransSKS.CardTokenResult = jsonPayloadResult;                
            }

            if (jsonPayloadRequest)
            {
                ccTransSKS.CardTokenRequest = jsonPayloadRequest;                
            }

            Args args = new Args();
            args.caller(this);
            args.record(ccTransSKS);            

            MenuFunction menuFunction;
            menuFunction = new MenuFunction(menuitemDisplayStr(SKS_CC_JSONPayloadDialog), MenuItemType::Display);
            menuFunction.run(args);            
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>