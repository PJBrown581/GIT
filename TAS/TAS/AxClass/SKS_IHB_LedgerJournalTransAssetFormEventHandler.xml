<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_LedgerJournalTransAssetFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handler for Fixed Asset Journal form
/// </summary>
class SKS_IHB_LedgerJournalTransAssetFormEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LedgerJournalTrans_Company_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable the IHB bank control
    /// </summary>
    /// <param name = "sender">FormControl</param>
    /// <param name = "e">FormControlEventArgs</param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransAsset, LedgerJournalTrans_Company), FormControlEventType::Modified),
        SuppressBPWarning('BPParameterNotUsed', 'Parameter required by the event interface')]
    public static void LedgerJournalTrans_Company_OnModified(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();

        FormDataSource fds = formRun.dataSource();
        LedgerJournalTrans journaltrans = fds.cursor();
        FormControl assetIHBBankCntrl = formRun.design().controlName(formControlStr(LedgerJournalTransAsset, LedgerJournalTrans_SKS_EFTAsset_IHBBankAccount));

        if (journaltrans.company != curExt() && SKS_PP_Setup::find().IHB_Active)
        {
            // Set mandatory and editable
            assetIHBBankCntrl.allowEdit(true);
        }
        else
        {
            assetIHBBankCntrl.allowEdit(false);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validation for the Inhouse bank field
    /// </summary>
    /// <param name = "sender">FormDataSource</param>
    /// <param name = "e">FormDataSourceEventArgs</param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransAsset, LedgerJournalTrans), FormDataSourceEventType::ValidatedWrite),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter required by the event interface')]
    public static void LedgerJournalTrans_OnValidatedWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LedgerJournalTrans ledgerJournalTrans = sender.cursor();

        if (ledgerJournalTrans.Company != curExt() && SKS_PP_Setup::find().IHB_Active && !ledgerJournalTrans.SKS_EFTAsset_IHBBankAccount)
        {
            throw error("@SKS:SKGIHBBankMandatory");
        }
        SKS_EFTAP_PaymJourCreate::validateInHouseBank(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable the IHB bank control
    /// </summary>
    /// <param name = "sender">FormControl</param>
    /// <param name = "e">FormControlEventArgs</param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransAsset, LedgerJournalTrans), FormDataSourceEventType::SelectionChanged),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter required by the event interface')]
    public static void LedgerJournalTrans_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();

        LedgerJournalTrans journaltrans = sender.cursor();
        FormControl assetIHBBankCntrl = formRun.design().controlName(formControlStr(LedgerJournalTransAsset, LedgerJournalTrans_SKS_EFTAsset_IHBBankAccount));

        if (journaltrans.company != curExt() && SKS_PP_Setup::find().IHB_Active)
        {
            // Set mandatory and editable
            assetIHBBankCntrl.allowEdit(true);
        }
        else
        {
            assetIHBBankCntrl.allowEdit(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_SKS_EFTAsset_IHBBankAccount_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// FixedAsset IHB bank account lookup value based on account company selection
    /// </summary>
    /// <param name = "sender">FormControl</param>
    /// <param name = "e">FormControlEventArgs</param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransAsset, LedgerJournalTrans_SKS_EFTAsset_IHBBankAccount), FormControlEventType::Lookup),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter required by the event interface')]
    public static void LedgerJournalTrans_SKS_EFTAsset_IHBBankAccount_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SKS_PP_Bank), sender);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        LedgerJournalTrans      ledgerJournalTrans = sender.formRun().dataSource().cursor();

        queryBuildDataSource = query.addDataSource(tableNum(SKS_PP_Bank));
        queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBInhouseBank)).value("1");
        queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBLinkedinhousebankcompany)).value(ledgerJournalTrans.Company);
        sysTableLookup.addLookupfield(fieldNum(SKS_PP_Bank, BankAccountId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        FormControlCancelableSuperEventArgs event = e as FormControlCancelableSuperEventArgs;

        event.CancelSuperCall();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>