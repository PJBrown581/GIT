<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_InboundFormat_AUDDIS</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_InboundFormat_AUDDIS //extends SKS_DD_InboundFormat
{
    str serialnumber;
    /*
    public str getFormatId(str _filename, boolean _serverPath)
    {
        str rtnval = '';
        int classId;
        int locRecLen;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean pos1to2HeaderRecType = false;
        boolean pos37to42SequenceNumber = false;
        boolean recordLength = true;
        //BEGIN DISQUALIFIER VARIABLES
        //none

        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct();
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad();
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        //priming read

        while(!locStreamReader.get_EndOfStream())
        {
            locString = locStreamReader.ReadLine();

            if(!System.String::IsNullOrEmpty(locString))
            {
                locRecLen = locString.get_Length();

                if(!System.String::IsNullOrWhiteSpace(locString))
                {
                    if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'HD')
                    {
                        pos1to2HeaderRecType = true;
                    }

                    if(SKS_PP_StringFormats::strSub(locString, 37, 42) != '')
                    {
                        pos37to42SequenceNumber = true;
                        serialnumber = SKS_PP_StringFormats::strSub(locString, 37, 42);
                    }
                }
                else
                {
                    recordLength = false;
                    break;
                }
            }
        }
        if(pos1to2HeaderRecType
            && pos37to42SequenceNumber)
        {
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();

        return rtnval;
    }

    public boolean getFile(str _filename, boolean _serverPath)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct();
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return false;
        }
        locSKS_EB_FileHub.runFileLoad();
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        locString = locStreamReader.ReadLine();

        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                this.processRecord(locString);
            }
            locString = locStreamReader.ReadLine();
        }

        locStreamReader.Close();

        return true;
    }

    private void processRecord(str _CurrentRecord)
    {
        str sequencenumber;

        if(strLen(strLRTrim(_CurrentRecord)) > 0)
        {
            if(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 2) == 'HD' && SKS_PP_StringFormats::strSub(_CurrentRecord, 37, 42) != '')
            {
                serialnumber = SKS_PP_StringFormats::strFill(8,  subStr(_CurrentRecord, 37, 6), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
            }

            if(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 2) == 'ER')
            {
                sequencenumber = subStr(_CurrentRecord, 13, 6);
                this.setAuddisMandateStatus(serialnumber, sequencenumber);
            }
        }
    }

    public void setAuddisMandateStatus(str _serialnumber, str _sequencenumber)
    {
        CustDirectDebitMandate	locCustDirectDebitMandate;

        if(_serialnumber)
        {
            select firstonly locCustDirectDebitMandate
                where locCustDirectDebitMandate.SKS_EB_DataDeliveryReference == _serialnumber &&
                locCustDirectDebitMandate.SKS_EB_MandateSequenceNumber == _sequencenumber;


            ttsbegin;

            if(locCustDirectDebitMandate.RecId)
            {
                locCustDirectDebitMandate.Status = CustMandateStatus::Canceled;
                locCustDirectDebitMandate.CancellationDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                locCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Rejected;
                locCustDirectDebitMandate.selectForUpdate(true);
                locCustDirectDebitMandate.update();
            }

            ttscommit;
        }
    }
*/
}
]]></Declaration>
		<Methods />
	</SourceCode>
</AxClass>