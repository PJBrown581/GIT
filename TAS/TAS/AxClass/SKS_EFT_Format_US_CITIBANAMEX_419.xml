<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITIBANAMEX_419</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITIBANAMEX_419 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CITIBANAMEX_419 extends SKS_EFT_Format
{
    #define.FormatVersion('20220622')
    int         mPaymentCount;
    Amount      mPaymentAmount;    
    boolean     firstRec = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            if(firstRec)
            {
                //  Control record
                this.rec_ControlStart();
                firstRec = false;
            }
            this.rec_GlobalRegister();

            //Detail Record
            this.rec_Detail();
    
            next mSKS_EFT_FileDetail;
        }
    
        //  Control record
        this.rec_ControlEnd();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ControlStart</Name>
				<Source><![CDATA[
    //Number    Description                                 Field length        Position
    //---------------------------------------------------------------------------------------
    // 1        Type of    register                         01 	                01 - 01
    // 2        Client identification number                12                  02 - 13
    // 3        Payment date                                06                  14 - 19
    // 4        File sequence                               04                  20 - 23
    // 5        Customer name                               36                  24 - 59
    // 6        File Description                            20                  60 - 79
    // 7        File nature                                 02                  80 - 81
    // 8        Layout version                              01                  82 - 82
    // 9        Type of charge                              02                  83 - 84
    //----------------------------------------------------------------------------------------    
    public boolean rec_ControlStart()
    {
        str clientId;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
           

        // 1        Type of register                         01 	                01 - 01
        sb.Append('1');

        // 2        Client identification number                12                  02 - 13
        clientId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClientId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(12, clientId, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3        Payment date                                06                  14 - 19
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate));

        // 4        File sequence                               04                  20 - 23        
        sb.Append(SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5        Customer name                               36                  24 - 59
        sb.Append(SKS_PP_StringFormats::strFill(36, this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6        File Description                            20                  60 - 79
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7        File nature                                 02                  80 - 81
        sb.Append('15');

        // 8        Layout version                              01                  82 - 82
        sb.Append('D');

        // 9        Type of charge                              02                  83 - 84
        sb.Append('01');
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GlobalRegister</Name>
				<Source><![CDATA[
    //Number    Description                                 Field length        Position
    //---------------------------------------------------------------------------------------
    // 1        Type of register                            01 	                01 - 01
    // 2        Transaction Type                            01                  02 - 02
    // 3        Currency code                               03                  03 - 05
    // 4        Amount to be charged                        18                  06 - 23
    // 5        Account  Type                               02                  24 - 25
    // 6        Account number                              20                  26 - 45
    // 7        Totalnumber of credits of the file          06                  46 - 51
    //----------------------------------------------------------------------------------------
    public boolean rec_GlobalRegister()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;    
        
        // 1        Type of register                            01 	                01 - 01
        sb.Append('2');

        // 2        Transaction Type                            01                  02 - 02
        sb.Append('1');

        // 3        Currency code                               03                  03 - 05
        sb.Append(SKS_PP_StringFormats::strFill(03, mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        // 4        Amount to be charged                        18                  06 - 23
        mPaymentAmount = tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount * -1, 18));

        // 5        Account  Type                               02                  24 - 25
        sb.Append('01');

        // 6        Account number                              20                  26 - 45
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7        Totalnumber of credits of the file          06                  46 - 51 
        mPaymentCount = real2int(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur);
        sb.Append(SKS_PP_StringFormats::strFill(06, num2str(mPaymentCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    //Number    Description                                 Field length        Position
    //---------------------------------------------------------------------------------------
    // 1        Type of register                            01 	                01 - 01
    // 2        Operation Type                              01                  02 - 02
    // 3        Payment method                              03                  03 - 05
    // 4        Type of Payment                             02                  06 - 07
    // 5        Currency code                               03                  08 - 10
    // 6        Amount                                      18                  11 - 28
    // 7        Type of credit account                      02                  29 - 30
    // 8        Account number                              20                  31 - 50
    // 9        Payment reference                           16                  51 - 66
    // 10       Beneficiary name                            55                  67 - 121
    // 11       Reference 1                                 35                  122 - 156
    // 12       Reference 2                                 35                  157 - 191
    // 13       Reference 3                                 35                  192 - 226
    // 14       Reference 4                                 35                  227 - 261
    // 15       Bank code                                   04                  262 - 265
    // 16       Term                                        02                  266 - 267
    // 17       RFC(Taxpayer number)                        14                  268 - 281
    // 18       IVA                                         08                  282 - 289
    // 19       For future usage                            80                  290 - 369
    // 20       For future usage                            50                  370 - 419
    //----------------------------------------------------------------------------------------
    public boolean rec_Detail()
    {
        str paymentMtd;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Type of register                            01 	                01 - 01
        sb.Append('1');

        // 2        Operation Type                              01                  02 - 02
        sb.Append('0');

        // 3        Payment method                              03                  03 - 05
        paymentMtd = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PaymentMethod', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(3, paymentMtd, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4        Type of Payment                             02                  06 - 07
        if(paymentMtd == '002' ||  paymentMtd == '003')
        {
            sb.Append('01');
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TypeOfPayment', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }

        // 5        Currency code                               03                  08 - 10
        sb.Append('001');

        // 6        Amount                                      18                  11 - 28
        sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount * -1, 18));

        // 7        Type of credit account                      02                  29 - 30
        sb.Append(SKS_PP_StringFormats::strFill(2, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TypeOfCrAcct', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8        Account number                              20                  31 - 50
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 9        Payment reference                           16                  51 - 66
        sb.Append(SKS_PP_StringFormats::strFill(16, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10       Beneficiary name                            55                  67 - 121
        sb.Append(SKS_PP_StringFormats::strFill(55, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11       Reference 1                                 35                  122 - 156
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 12       Reference 2                                 35                  157 - 191
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 13       Reference 3                                 35                  192 - 226
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 14       Reference 4                                 35                  227 - 261
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 15       Bank code                                   04                  262 - 265
        // 16       Term                                        02                  266 - 267
        if(paymentMtd == '002')
        {
            sb.Append(SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BankCode', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            sb.Append(SKS_PP_StringFormats::strFill(2, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Term', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        
        // 17       RFC(Taxpayer number)                        14                  268 - 281
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 18       IVA                                         08                  282 - 289
        sb.Append(SKS_PP_StringFormats::strFill(08, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 19       For future usage                            80                  290 - 369
        sb.Append(SKS_PP_StringFormats::strFill(80, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 20       For future usage                            50                  370 - 419
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ControlEnd</Name>
				<Source><![CDATA[
    //Number    Description                                 Field length        Position
    //---------------------------------------------------------------------------------------
    // 1        Record type                                 01 	                01 - 01
    // 2        Currency code                               03                  02 - 04
    // 3        Number credits                              06                  05 - 10
    // 4        Total amount of credits                     18                  11 - 28
    // 5        Number of Debits                            06                  29 - 34
    // 6        Total amount of Debits                      18                  35 - 52
    //----------------------------------------------------------------------------------------
    private boolean rec_ControlEnd()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Record type                                 01 	                01 - 01
        sb.Append('4');

        // 2        Currency code                               03                  02 - 04
        sb.Append('001');

        // 3        Number credits                              06                  05 - 10
        // 4        Total amount of credits                     18                  11 - 28
        if(mPaymentAmount < 0)
        {
            sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mPaymentCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount * -1, 18));

            sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mPaymentCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount, 18));
        }
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany, 
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>