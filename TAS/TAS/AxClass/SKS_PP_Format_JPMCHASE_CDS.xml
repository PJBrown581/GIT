<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_JPMCHASE_CDS</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_JPMCHASE_CDS Extends SKS_PP_Format_BankGroup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // JP MORGAN CHASE BANK POSITIVE PAY FORMAT - CDS Format (fixed length)
        // Courtesy of: Affinity Health Plan
        //
        // Pos 1:      1   Transaction Indicator (I=Issue, C=Cancel (void))
        // Pos 2-14:   13  Account Number (RJ-LZF)
        // Pos 15-24:  10  Check Number (RJ-LZF)
        // Pos 25-30:  6   Check Date (mmddyy)
        // Pos 31-41:  11  Check Amount (RJ-LZF - includes decimal)
        // Pos 42-71:  30  Narratives (addtl info) - Vendor ID, Vendor Name
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10 - Header
        // 20 - Payments
        // 40 - Trailer
    
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
        //
    
        str Amt;
        str ItemType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        System.Text.StringBuilder vendString = new System.Text.StringBuilder();
        ;
        // Amount includes the decimal point -
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'C';          // Chase Bank code for void checks (Cancels)
            if (mSKS_PP_FileDetail.Chkcuryamt < 0)
            {
                Amt =  SKS_PP_StringFormats::strFill(11, num2str(-1 * mSKS_PP_FileDetail.ChkCuryAmt,1,2,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
            }
            else
            {
                Amt =  SKS_PP_StringFormats::strFill(11, num2str(mSKS_PP_FileDetail.ChkCuryAmt,1,2,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
            }
        }
        else
        {
            ItemType = 'I'; //Issue
            // Always use the Record Summary Amount - will have correct total for the Check
            Amt =  SKS_PP_StringFormats::strFill(11, num2str(mSKS_PP_FileDetail.ChkCuryAmt,1,2,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
    
        if (mSKS_PP_FileDetail.RecSection == 20)
        {
            vendString.Append(strLtrim(strRTrim(mSKS_PP_FileDetail.VendorAccount)));
            vendString.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            vendString.Append(strLtrim(strRtrim(mSKS_PP_FileDetail.VendName)));
    
            sb.Append(ItemType);
            sb.Append(SKS_PP_StringFormats::strFill(13, strLtrim(strRTrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(10, strLtrim(strRTrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
            sb.Append(Amt);
            sb.Append(SKS_PP_StringFormats::strFill(30, vendString.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(71, strLtrim(strRtrim(mSKS_PP_FileDetail.ValueString)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        }
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>