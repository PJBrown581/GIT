<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_Parse</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CCR_Parse
{
    SKS_CCR_BankTran mSKS_CCR_BankTran;
    SKS_BR_ParseRule mSKS_BR_ParseRule;
    str errorText;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    str getErrorText()
    {
        ;
        return errorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullString</Name>
				<Source><![CDATA[
    public str getFullString()
    {
        str value;

        // 16487 Start
        SKS_BR_GLMappingRuleGroup   sks_br_GLMappingRuleGroup;
        SKS_LookupType              lookupType;
        ;

        if(mSKS_CCR_BankTran.GLMappingRuleGroupId)
        {
            select firstOnly RecId, LookupType from sks_br_GLMappingRuleGroup where
                sks_br_GLMappingRuleGroup.RuleGroupId == mSKS_CCR_BankTran.GLMappingRuleGroupId
                && sks_br_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::Yes; 

            lookupType = sks_br_GLMappingRuleGroup.LookupType;
        }

        if (lookupType == SKS_LookupType::Note)
        {
            value = mSKS_CCR_BankTran.TranDescription;
        }
        else
        {
        // 16487 End

            switch(mSKS_BR_ParseRule.ParseField)
            {
                case SKS_BR_ParseField::BankReference:
                    value = mSKS_CCR_BankTran.BankNum;
                    break;
                case SKS_BR_ParseField::CustomerReference:
                    value = mSKS_CCR_BankTran.BankCustomerNum;
                    break;
                case SKS_BR_ParseField::Description:
                    value = mSKS_CCR_BankTran.TranDescription;
                    break;
            }
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParseRule</Name>
				<Source><![CDATA[
    public SKS_BR_ParseRule getParseRule(SKS_BR_ParseRuleId _parseRule)
    {
        select mSKS_BR_ParseRule where mSKS_BR_ParseRule.ParseRuleId == _parseRule
            && mSKS_BR_ParseRule.CCR_IsCCReconciliation == NoYes::Yes;  /// SKS_FDD_13903 - To make sure that its picking only CCR format
        if(!mSKS_BR_ParseRule)
        {
            errorText = strFmt("@SKS2341", _parseRule);
        }
        return mSKS_BR_ParseRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SKS_CCR_BankTran _SKS_CCR_BankTran)
    {
        mSKS_CCR_BankTran = _SKS_CCR_BankTran;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse</Name>
				<Source><![CDATA[
    public str parse(str _parseString)
    {
        SKS_BR_ParsedValue value;
        int startPos;
        int tempPos;
        int valLength;
        int findCounter;
        TextBuffer textBuffer;
        ExecutePermission perm;
        DictClass locDictClass;
        Object locClassInstance;
        ;
    
        if(mSKS_BR_ParseRule.ParseType == SKS_BR_ParseType::CharacterRange) // character range
        {
            // Use start and length values
            value = subStr(_parseString, mSKS_BR_ParseRule.CharStartPosition, mSKS_BR_ParseRule.CharValueLength);
        }
        else if(mSKS_BR_ParseRule.ParseType == SKS_BR_ParseType::FindString) // find string
        {
            textBuffer = new TextBuffer();
            textBuffer.setText(_parseString);
            textBuffer.regularExpressions(false);
            textBuffer.ignoreCase(true);
    
            // Search for string
            while (textBuffer.find(mSKS_BR_ParseRule.FindString, tempPos))
            {
                tempPos = textBuffer.matchPos() + strLen(mSKS_BR_ParseRule.FindString);
                findCounter++;
    
                // If found check to see if the correct occurrence
                if(findCounter == mSKS_BR_ParseRule.FindOccurrence)
                {
                    // Set start position to current poisition plus the length of the string so it starts after the found string
                    startPos = tempPos;
                    break;
                }
            }
    
            // If string occurrence was not found leave value as empty
            if(startPos != 0)
            {
                if(mSKS_BR_ParseRule.EndType == SKS_BR_ParseEndType::EndString)
                {
                    // End value is a string
                    if(textBuffer.find(mSKS_BR_ParseRule.EndString, startPos))
                    {
                        // Find end string
                        valLength = textBuffer.matchPos() - startPos;
                    }
                    else
                    {
                        // If end string is not found use the rest of the string
                        valLength = strLen(_parseString) - startPos+1;
                    }
                }
                else
                {
                    // End value is determined by length
                    valLength = mSKS_BR_ParseRule.FindValueLength;
                }
                value = subStr(_parseString, startPos, valLength);
            }
        }
        else if(mSKS_BR_ParseRule.ParseType == SKS_BR_ParseType::Custom)
        {
            perm = new ExecutePermission();
            perm.assert();
            locDictClass = new DictClass(className2Id(mSKS_BR_ParseRule.CustomParseClass));
            locClassInstance = locDictClass.makeObject();
            value = locDictClass.callObject('parse', locClassInstance, mSKS_CCR_BankTran);
            CodeAccessPermission::revertAssert();
        }
    
    
    
        //if a user has selected in the Parse Rules > Options tab > Remove leading zeroes
        //  to strip the leading zeroes from this value, then remove the
        //  zeroes here
        //This is only valid for Find String, and Character Range.
        if(mSKS_BR_ParseRule.RemoveLeadingZeroes
                &&  (mSKS_BR_ParseRule.ParseType == SKS_BR_ParseType::FindString
                        || mSKS_BR_ParseRule.ParseType == SKS_BR_ParseType::CharacterRange))
            value = SKS_PP_StringFormats::strLTrimZeroes(value, 1);
    
    
    
        return strLRTrim(strRem(value, '\r\n')); // Remove CR/LF and any leading or trailing spaces
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SKS_BR_GLMappingRuleGroup sks_br_GLMappingRuleGroup;
        SKS_BR_MatchingRulesMast sks_br_MatchingRulesMast;
        SKS_BR_ParseRuleId parseRuleId;
        SKS_BR_ParsedValue parsedValue;
    
        // See if record uses rule group
        // If used rule group see if parse is used
        if(mSKS_CCR_BankTran.GLMappingRuleGroupId)
        {
            select firstOnly ParseRuleId from sks_br_GLMappingRuleGroup where
                sks_br_GLMappingRuleGroup.RuleGroupId == mSKS_CCR_BankTran.GLMappingRuleGroupId
                && sks_br_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::Yes;  /// SKS_FDD_13903 - To make sure that its picking only CCR format
            parseRuleId = sks_br_GLMappingRuleGroup.ParseRuleId;
        }
        else if(mSKS_CCR_BankTran.MatchingRuleGroupId)
        {
            select firstOnly ParseRule from sks_br_MatchingRulesMast where
                sks_br_MatchingRulesMast.RuleGroupId == mSKS_CCR_BankTran.MatchingRuleGroupId
                && sks_br_MatchingRulesMast.CCR_IsCCReconciliation == NoYes::Yes;

            parseRuleId = sks_br_MatchingRulesMast.ParseRule;
        }
    
        if(parseRuleId)
        {
            this.getParseRule(parseRuleId);
            if(errorText == '')
            {
                parsedValue = this.parse(this.getFullString());
                mSKS_CCR_BankTran.ParsedValue = parsedValue;
                mSKS_CCR_BankTran.ParseRuleId = parseRuleId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAlternateAction</Name>
				<Source><![CDATA[
    public static SKS_CCR_GLMatchOrCreate GetAlternateAction(SKS_CCR_BankTran _SKS_CCR_BankTran)
    {
        SKS_BR_GLMappingRuleGroup locSKS_BR_GLMappingRuleGroup;
    
        select crosscompany CCR_GLMatchOrCreate from locSKS_BR_GLMappingRuleGroup
            where locSKS_BR_GLMappingRuleGroup.RuleGroupId == _SKS_CCR_BankTran.GLMappingRuleGroupId
            && locSKS_BR_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::Yes;    /// SKS_FDD_13903 - To make sure that its picking only CCR format
    
        return locSKS_BR_GLMappingRuleGroup.CCR_GLMatchOrCreate;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingRuleGroupId</Name>
				<Source><![CDATA[
    public static SKS_BR_MatchingRuleGroupId getMatchingRuleGroupId(SKS_CCR_BankTran _SKS_CCR_BankTran)
    {
        SKS_BR_GLMappingRuleGroup locSKS_BR_GLMappingRuleGroup;
        SKS_BR_MatchingRuleGroupId rtnval;
    
        select crosscompany MatchingRuleGroupId from locSKS_BR_GLMappingRuleGroup
            where locSKS_BR_GLMappingRuleGroup.RuleGroupId == _SKS_CCR_BankTran.GLMappingRuleGroupId
            && locSKS_BR_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::Yes;   /// SKS_FDD_13903 - To make sure that its picking only CCR format
        if(locSKS_BR_GLMappingRuleGroup)
            rtnval = locSKS_BR_GLMappingRuleGroup.MatchingRuleGroupId;
        else
            rtnval = '';
    
        return rtnval;
    
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>