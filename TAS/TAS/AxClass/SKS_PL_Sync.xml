<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PL_Sync</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PL_Sync extends SKS_EB_Batch
{
    #DEFINE.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        /*Batch bat;
        RefRecId            locRefRecID;
        SKS_EPY_Queue       locSKS_EPY_Queue;
        SKS_PL_GenPayLink   locSKS_PL_GenPayLink;
        SKS_PL_Setup        locSKS_PL_Setup;
        SKS.ePayData.SKS_EPY_Return_In  SKS_EPY_Return_In;
        System.Collections.IList       PLDocument;
        SKS.ePayData.PLDocument         locDocument;
        SKS.ePayData.PLDocument         SingleDocument;
        boolean             recordsFound = true;
        str                 APIURL;
        str                 locErrorMessage;
        System.Exception    e;
        container           virtualCompanies;
        int Counter;
        int numRecords;
        System.String LocDocID;
        str DocAPI;
        ;
    
        virtualCompanies = sks_eb_virtualCompany::getPayLinkCompanies();
        bat = this.parmCurrentBatch();
    
        locRefRecID = bat.RecId;
    
        try
        {
            While select crossCompany:virtualCompanies locSKS_PL_Setup where locSKS_PL_Setup.BatchJobId == locRefRecID && locSKS_PL_Setup.Activated == SKS_EPY_Activated::Activated
            {
                // PayLink module not active
                if(!SKS_PP_Setup::find().ModPayLink)
                {
                    return;
                }
                APIURL = strReplace(locSKS_PL_Setup.PLWebServLoc, '/Rest/', '/PayLink/');
    
                SKS_EPY_Return_in = SKS.ePay.RetrievePayLink::RetrievePayments(SKS_PP_StringFormats::strAssembleURL(APIURL, 'Document?$filter=Status eq \'3\''), locSKS_PL_Setup.DeviceID, locSKS_PL_Setup.DevicePassword, locSKS_PL_Setup, SKS_PP_StringFormats::strAssembleURL(locSKS_PL_Setup.PLWebServLoc,'Token/create'), false);
                if(SKS_EPY_Return_in.get_ErrorDesc() == null)
                {
                    PLDocument = SKS_EPY_Return_in.get_Doc();
    
                    if(PLDocument)
                    {
    
                        numRecords = PLDocument.get_Count();
                        for(counter = 0; Counter < numRecords; Counter++)
                        {
                            //Retrieve one Document from a list of documents
                            locDocument = PLDocument.get_Item(counter);
    
                            //Create a document specific API
                            locDocID = locDocument.get_Id();
                            DocAPI = SKS_PP_StringFormats::strAssembleURL(APIURL, 'Document/');
    
                            //Retrieve payment with a specific Document ID, this will allow you to see payfabric transaction data
                            SKS_EPY_Return_in = SKS.ePay.RetrievePayLink::RetrievePayments(SKS_PP_StringFormats::strAssembleURL(DocAPI, locDocID), locSKS_PL_Setup.DeviceID, locSKS_PL_Setup.DevicePassword, locSKS_PL_Setup, SKS_PP_StringFormats::strAssembleURL(locSKS_PL_Setup.PLWebServLoc,'Token/create'), true);
                            SingleDocument = SKS_EPY_Return_in.get_Document();
    
                            //Write queue record
                            locSKS_EPY_Queue = SKS_PL_PaymentCreation::WriteToQueue(SKS_EPY_Return_In.get_InValue(), SingleDocument.get_CustomerNumber(), SKS_EPY_Status::New, SKS_EPY_Return_in.get_ErrorDesc(), SingleDocument.get_Id(), SingleDocument.get_Amount(), SingleDocument.get_Currency());
    
                            //Update Paylink generation status on Sales Order
                            SKS_PL_Sync::UpdateGenPayLinkStatus(locSKS_EPY_Queue);
    
                            //Update PayLink Status
                            if(locSKS_EPY_Queue.status != SKS_EPY_Status::Failed)
                            {
                                SKS_PL_Sync::UpdatePayLinkStatus(SingleDocument, locSKS_PL_Setup, APIURL, true);
                            }
                            else
                            {
                                SKS_PL_Sync::UpdatePayLinkStatus(SingleDocument, locSKS_PL_Setup, APIURL, false);
                            }
    
                            ttsBegin;
                            //Create payment journal
                            locSKS_EPY_Queue = SKS_PL_PaymentCreation::CreatePaymentJournal(SingleDocument, locSKS_PL_Setup, locSKS_EPY_Queue);
                            locSKS_EPY_Queue.update();
                            //Update Paylink generation status on Sales Order
                            SKS_PL_Sync::UpdateGenPayLinkStatus(locSKS_EPY_Queue);
                            ttscommit;
                        }
                    }
                }
                else
                {
                    locSKS_EPY_Queue = SKS_PL_PaymentCreation::WriteToQueue("", "", SKS_EPY_Status::Failed, SKS_EPY_Return_in.get_ErrorDesc(), "", 0,"");
                }
    
                // Resubmit
                while Select forupdate crossCompany:virtualCompanies locSKS_EPY_Queue
                    order by locSKS_EPY_Queue.recid asc
                    where locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                    && locSKS_EPY_Queue.Action == SKS_EPY_Action::PaymFromPayLink
                    && locSKS_EPY_Queue.Entity == SKS_EPY_Entity::Payment
                {
                    changeCompany(locSKS_epy_queue.company())
                    {
                        SKS_EPY_Return_in = SKS.ePay.ePayTokenCall::PayLinkResubmit(con2Str(locSKS_EPY_Queue.Data));
                        if(SKS_EPY_Return_in.get_ErrorDesc() == null)
                        {
                            ttsBegin;
                            SingleDocument = SKS_EPY_Return_IN.get_Document();
                            locSKS_EPY_Queue = SKS_PL_PaymentCreation::CreatePaymentJournal(SingleDocument, locSKS_PL_Setup, locSKS_EPY_Queue);
                            locSKS_EPY_Queue.update();
                            //Update Paylink generation status on Sales Order
                            SKS_PL_Sync::UpdateGenPayLinkStatus(locSKS_EPY_Queue);
                            ttsCommit;
                        }
                        else
                        {
                            locSKS_EPY_Queue = SKS_PL_PaymentCreation::WriteToQueue("", "", SKS_EPY_Status::Failed, SKS_EPY_Return_in.get_ErrorDesc(), "", 0,"");
                        }
                    }
                }
    
                // Send PayLink
                while Select crossCompany:virtualCompanies locSKS_EPY_Queue
                    order by locSKS_EPY_Queue.recid asc
                    where locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                    && locSKS_EPY_Queue.Action == SKS_EPY_Action::SendToPayLink
                    && locSKS_EPY_Queue.Entity == SKS_EPY_Entity::SalesOrdPrePaym
                {
                    changeCompany(locSKS_EPY_Queue.company())
                    {
                        select crossCompany:virtualCompanies locSKS_PL_GenPayLink where locSKS_PL_GenPayLink.EPYQueueRecID == locSKS_EPY_Queue.Recid;
                        SKS_PL_Sync::PLUpdateQueue(locSKS_EPY_Queue.RecId, SKS_EPY_Status::Pending, "", "", virtualCompanies);
                        SKS_PL_Sync::SyncSalesOrders(locSKS_PL_Setup, locSKS_PL_GenPayLink, locSKS_EPY_Queue);
                    }
                }
    
                // Cancel PayLink
                while Select crossCompany:virtualCompanies locSKS_EPY_Queue
                    order by locSKS_EPY_Queue.recid asc
                    where locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                    && locSKS_EPY_Queue.Action == SKS_EPY_Action::CancelPayLink
                    && locSKS_EPY_Queue.Entity == SKS_EPY_Entity::SalesOrdPrePaym
                {
                    changeCompany(locSKS_EPY_Queue.company())
                    {
                        SKS_PL_Sync::CancelPayLink(locSKS_EPY_Queue, locSKS_PL_Setup.DeviceID, locSKS_PL_Setup.DevicePassword, locSKS_PL_Setup.PLWebServLoc, APIURL);
                    }
                }
    
            }
        }
        catch(Exception::Error)
        {
            locErrorMessage = "@SKS4028";
        }
        catch(Exception::CLRError)
        {
            e = CLRInterop::getLastException();
            locErrorMessage = "@SKS4029";
        }
        catch
        {
            locErrorMessage = "@SKS4030";
        }
        if(locErrorMessage)
        {
            if(locSKS_EPY_Queue)
            {
                ttsBegin;
                locSKS_EPY_Queue.ErrorWarning = "@SKS3414" + locErrorMessage;
                locSKS_EPY_Queue.Status = SKS_EPY_Status::Failed;
                locSKS_EPY_Queue.update();
                ttsCommit;
            }
            else
            {
                error("@SKS3415" + locErrorMessage);
            }
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddSalesOrderToQueue</Name>
				<Source><![CDATA[
    Public static int64 AddSalesOrderToQueue(AmountCur _Amount, SalesTable _salesTable, SKS_EPY_Status _status, str _DocID, SKS_EPY_Action  _Action)
    {
        #SKS_Global
        SKS_EPY_Queue       locNewSKS_EPY_Queue;
        SKS_EPY_QueueData   locNewSKS_EPY_QueueData;
        int64               PaymLineRec;
        LedgerJournalId     journalid;
        boolean             CreditNote = false;
    
        ttsBegin;
        locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::SalesOrdPrePaym;
        locNewSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Created;
        locNewSKS_EPY_Queue.Action = _Action;
        locNewSKS_EPY_Queue.isPayLink = NoYes::Yes;
        locNewSKS_EPY_Queue.PaymNum = _DocID;
        locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::SalesTable;
        locNewSKS_EPY_Queue.InitiatingRecId = _salesTable.RecId;
        locNewSKS_EPY_Queue.InvNum = _salesTable.SalesId;
        locNewSKS_EPY_Queue.PaymLineRecID = PaymLineRec;
        locNewSKS_EPY_Queue.JournalNum = JournalId;
        locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::SalesTable;
        locNewSKS_EPY_QueueData.TableRecId = _salesTable.RecId;
    
        locNewSKS_EPY_Queue.Status = _Status;
        locNewSKS_EPY_Queue.AccountName = _salesTable.SalesName;
        locNewSKS_EPY_Queue.AccountNum = _salesTable.CustAccount;
        locNewSKS_EPY_Queue.Amount = _Amount;
        locNewSKS_EPY_Queue.CurrencyCode = _salesTable.CurrencyCode;
        locNewSKS_EPY_Queue.insert();
    
    
        locNewSKS_EPY_QueueData.QueueRecId = locNewSKS_EPY_Queue.RecId;
        locNewSKS_EPY_QueueData.insert();
    
        ttsCommit;
    
        return locNewSKS_EPY_Queue.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CancelPayLink</Name>
				<Source><![CDATA[
    public static void CancelPayLink(SKS_EPY_Queue  _Queue, str _ClientId, str _Secret, str _TokenURL, str _url)
    {
        /*SKS_EPY_WebServLoc      webServLoc;
        SKS.ePayData.SKS_EPY_Return_In  sks_epy_return_in;
        container           virtualCompanies;
        ;
        virtualCompanies = sks_eb_virtualCompany::getPayLinkCompanies();
    
        webServLoc = SKS_PP_StringFormats::strAssembleURL(_url,'Document/' + _Queue.PaymNum + '/Cancel/' );
        sks_epy_return_in = SKS.ePay.ePayTokenCall::CancelPayLink(webServLoc, _ClientId, _Secret, SKS_PP_StringFormats::strAssembleURL(_TokenURL ,'token/create'));
    
        if(sks_epy_return_in.get_ErrorDesc() != null)
        {
            SKS_PL_Sync::PLUpdateQueue(_Queue.RecId, SKS_EPY_Status::Failed, sks_epy_return_in.get_ErrorDesc(), _Queue.PaymNum, virtualCompanies);
        }
        else
        {
            SKS_PL_Sync::PLUpdateQueue(_Queue.RecId, SKS_EPY_Status::Completed, "", _Queue.PaymNum, virtualCompanies);
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayLinkBatch</Name>
				<Source><![CDATA[
    public client static recid createPayLinkBatch( Object _element)
    {
        Dialog              dialog;
        DialogField         dialogField;
        Batch               locBatch;
        BatchHeader         batHeader;
        BatchCaption        locBatchCaption;
        RunBaseBatch        rbbTask;
        BatchInfo           batInfo;
        SysRecurrenceData   recurData;
        boolean             locBoolCreateBatch;
    
        Args args = new Args();
        FormRun formrun;
        ;
    
        // Create Default Bank Account Information dialog only if there is an element(this indicator tells if this is from a form).
        if(_element)
        {
            dialog = new Dialog("@SYS114518");
            dialogField = dialog.addField(extendedTypeStr(BatchCaption), "@SYS114518");
        }
        if(dialog)
            locBoolCreateBatch = dialog.run();
        else
            locBoolCreateBatch = true;
        if (locBoolCreateBatch)
        {
            rbbTask = new SKS_PL_Sync();
    
    
            if(dialog)
                locBatchCaption = dialogField.value();
            else
                locBatchCaption = rbbTask.caption();
            select firstOnly locBatch where locBatch.Caption == locBatchCaption;
    
            if(locBatch && dialog)
            {
                error(strFmt("@SKS2463", locBatchCaption));
                return 0;
            }
            else if(locBatch)
            {
                return locBatch.RecId;
            }
    
            ttsBegin;
            batInfo = rbbTask.batchInfo();
            batInfo.parmCaption(locBatchCaption);
    
            batInfo.parmGroupId(''); // The "Empty batch group".
    
    
            // Set recurrance
            recurData = SysRecurrence::defaultRecurrence();
            recurData = SKS_EB_Batch::setRecurrenceStartDateTimeAdjusted(recurData, DateTimeUtil::utcNow());
            recurData = SysRecurrence::setRecurrenceUnit(recurData, SysRecurrenceUnit::Minute, 1);
    
    
            batHeader = BatchHeader::construct();
            batHeader.addTask(rbbTask);
            batHeader.parmRecurrenceData(recurData);
            batHeader.save();
    
            //if being run from the ui, informa the user their batch is scheduled
            if(dialog)
                info(strFmt("@SKS2466", dialogField.value()));
    
            ttsCommit;
    
            if(dialog)
            {
                info("@SKS2464");
                args.parmObject( formrun);
                args.caller(_element);
                formrun = new MenuFunction( menuitemdisplaystr( BatchJob ), MenuItemType::Display).create(args);
                formrun.run();
            }
            return locBatch.BatchJobId;
    
        }
        else
        {
            // If they just cancelled the dialog, then no error.
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindCustomerName</Name>
				<Source><![CDATA[
    public static str FindCustomerName(CustAccount    _CustAccount)
    {
        CustTable       locCustTable;
        DirPartyTable   locDirPartyTable;
    
        select firstonly crossCompany AccountNum, Party from locCustTable
            where locCustTable.AccountNum == _CustAccount
        join Name from locDirPartyTable
            where locDirPartyTable.Recid == locCustTable.Party;
    
        return locDirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PLUpdateQueue</Name>
				<Source><![CDATA[
    public static SKS_EPY_Queue PLUpdateQueue(refrecid   _QueueRecid, SKS_EPY_Status    _Status, str _ErrorWarning, str _DocID, container       VirtualCompanies)
    {
        SKS_EPY_Queue   sks_epy_queue;
    
        ttsBegin;
        select forupdate crossCompany:virtualCompanies sks_epy_queue where sks_epy_queue.RecId ==_QueueRecid;
    
        changeCompany(sks_epy_queue.company())
        {
            if(sks_epy_queue)
            {
                sks_epy_queue.Status = _Status;
    
                if(sks_epy_queue.Status != SKS_EPY_Status::Completed || sks_epy_queue.Status != SKS_EPY_Status::CompletedWithWarnings)
                {
                    sks_epy_queue.ErrorWarning = _ErrorWarning;
                }
                else
                {
                    sks_epy_queue.errorWarning = '';
                }
    
                sks_epy_queue.PaymNum = _DocID;
                sks_epy_queue.SendReceiveDateTime = DateTimeUtil::utcNow();
                sks_epy_queue.update();
            }
        }
    
        ttsCommit;
    
        return sks_epy_queue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SyncSalesOrders</Name>
				<Source><![CDATA[
    /*public static SKS.ePayData.SKS_EPY_Return_In SyncPayLinkStatus(str _url, SKS_PL_Setup sks_pl_setup, boolean isCompleted)
    {
        SKS.ePayData.SKS_EPY_Return_In sks_epy_return_in;
    
        sks_epy_return_in = SKS.ePay.ePayTokenCall::PayLinkStatusUpdate( _url, sks_pl_setup.deviceID, sks_pl_setup.devicePassword, 'POST', SKS_PP_StringFormats::strAssembleURL(sks_pl_setup.PLWebServLoc ,'token/create'), isCompleted);
    
        return sks_epy_return_in;
    }*/

    public static server void SyncSalesOrders(SKS_PL_Setup _sks_pl_setup, sks_pl_genPayLink  _sks_pl_genPayLink, SKS_EPY_Queue   _sks_epy_queue)
    {
        //Below is only to remove BP errors
        SKS_EPY_Queue SKS_EPY_Queue = _sks_epy_queue;
        SKS_EPY_Queue = SKS_EPY_Queue;

        SKS_PL_Setup SKS_PL_Setup = _SKS_PL_Setup;
        SKS_PL_Setup = SKS_PL_Setup;

        SKS_PL_GenPayLink SKS_PL_GenPayLink = _sks_pl_genPayLink;
        SKS_PL_GenPayLink = SKS_PL_GenPayLink;

        /*SKS.ePayData.PLDocument locDocument;
        SKS.ePayData.PLPayment  locPayment;
        SKS.ePayData.UserDefinedField   locUserDefinedFields;
        SKS.ePayData.Notification   locNotification;
        SKS.ePayData.SKS_EPY_Return_In  SKS_EPY_Return_In;
        SalesTable              lSalesTable;
        str                     errortext;
        SKS_EPY_WebServLoc      webServLoc;
        container           virtualCompanies;
    
        virtualCompanies = sks_eb_virtualCompany::getPayLinkCompanies();
    
        webServLoc = strReplace(_SKS_PL_Setup.PLWebServLoc, '/Rest/', '/PayLink/');
    
        locDocument = new SKS.ePayData.PLDocument();
        locPayment = new SKS.ePayData.PLPayment();
        locNotification = new SKS.ePayData.Notification();
    
        select firstOnly crossCompany:virtualCompanies RecId, CurrencyCode, CustAccount, SalesId from lSalesTable where lSalesTable.recid == _SKS_EPY_Queue.InitiatingRecId;
    
        locDocument.set_Device(_SKS_PL_Setup.DeviceID);
        locDocument.set_Currency(lSalesTable.CurrencyCode);
        locDocument.set_Amount(real2double(_sks_epy_queue.Amount));
        locDocument.set_DocumentAmount(real2double(_sks_epy_queue.Amount));
        locDocument.set_CustomerNumber(lSalesTable.CustAccount);
        locDocument.set_CustomerName(SKS_PL_Sync::FindCustomerName(lSalesTable.CustAccount));
        locDocument.set_IsMultipleInvoice(false);
        locDocument.set_DocumentNumber(lSalesTable.SalesId);
        locDocument.set_TransactionType('Sale');
        locDocument.set_PostDataType('PaymentLine');
        locDocument.set_DocDate(datetime2str(lSalesTable.createdDateTime, DateFlags::None));
        locDocument.set_DocType(0);
        locDocument.set_SourceOfDocument(0);
        locDocument.set_BatchSource(0);
        locDocument.set_BatchNo(null);
        locDocument.set_MerchantEmail(null);
        locDocument.set_ReturnUrl(null);
        locDocument.set_Status(1);//1 Means this is an active document ready for payment
        locDocument.set_Tax(null);
        locDocument.set_ShippingAddress(null);
        locDocument.set_BillingAddress(null);
    
        locUserDefinedFields = new SKS.ePayData.UserDefinedField();
        locUserDefinedFields.set_Key('Document Type');
        locUserDefinedFields.set_Value('SOPre');
    
        locDocument.addUserDefinedFields(locUserDefinedFields);
    
        locUserDefinedFields = new SKS.ePayData.UserDefinedField();
        locUserDefinedFields.set_Key('CompanyID');
        locUserDefinedFields.set_Value(lSalesTable.company());
    
        locDocument.addUserDefinedFields(locUserDefinedFields);
    
        if(_sks_pl_genPayLink.CustEmail != '')
        {
            if(_sks_pl_genPayLink.CustSMS != '')
            {
                locNotification.set_Type('All');
                locNotification.set_SMSTemplate(SKS_PL_DocTypeSetup::findByDocType(SKS_PL_DocType::SalesOrderPrePaym).SMSTemplate);
                locNotification.set_EmailTemplate(SKS_PL_DocTypeSetup::findByDocType(SKS_PL_DocType::SalesOrderPrePaym).EMailTemplate);
            }
            else
            {
                locNotification.set_Type('Email');
                locNotification.set_EmailTemplate(SKS_PL_DocTypeSetup::findByDocType(SKS_PL_DocType::SalesOrderPrePaym).EMailTemplate);
            }
        }
        else
        {
            locNotification.set_Type('SMS');
            locNotification.set_SMSTemplate(SKS_PL_DocTypeSetup::findByDocType(SKS_PL_DocType::SalesOrderPrePaym).SMSTemplate);
        }
    
    
    
        locDocument.set_Notification(locNotification);
        locDocument.set_NotificationEmail(_sks_pl_genPayLink.CustEmail);
        locDocument.set_NotificationPhone(_sks_pl_genPayLink.CustSMS);
    
        if(_sks_pl_genPayLink.CCGatewayId != '')
        {
            if(_sks_pl_genPayLink.ECGatewayId != '')
            {
                locPayment.set_AcceptType(0);
            }
            else
            {
                locPayment.set_AcceptType(1);
            }
        }
        else
        {
            locPayment.set_AcceptType(2);
        }
    
        locPayment.set_CreditCardGateway(_sks_pl_genPayLink.CCGatewayId);
        locPayment.set_ECheckGateway(_sks_pl_genPayLink.ECGatewayId);
    
        locDocument.set_Payment(locPayment);
    
        sks_epy_return_in = SKS.ePay.ePayTokenCall::ePay_POST_Object(locDocument,
            SKS_PP_StringFormats::strAssembleURL(webServLoc,'Document'),
            _SKS_PL_Setup.DeviceID, _SKS_PL_Setup.DevicePassword,
            'Post', SKS_PP_StringFormats::strAssembleURL(_SKS_PL_Setup.PLWebServLoc ,'token/create'), true);
    
        locDocument = sks_epy_return_in.get_Document();
    
        if(SKS_EPY_Return_In.get_ErrorDesc() != null)
        {
            errortext = SKS_EPY_Return_In.get_ErrorDesc();
            errortext += SKS_EPY_Return_In.get_InValue();
            SKS_PL_Sync::PLUpdateQueue(_sks_epy_queue.RecId, SKS_EPY_Status::Failed, errortext, "", virtualCompanies);
            SKS_PL_GenPayLink::UpdateStatus(SKS_PL_GenPayLink::FindByEPYQueueRecid(_sks_epy_queue.RecId, true), SKS_PL_Status::failed, "");
        }
        else
        {
            SKS_PL_Sync::PLUpdateQueue(_sks_epy_queue.RecId, SKS_EPY_Status::Completed, errortext, locDocument.get_Id(), virtualCompanies);
            SKS_PL_GenPayLink::UpdateStatus(SKS_PL_GenPayLink::FindByEPYQueueRecid(_sks_epy_queue.RecId, true), SKS_PL_Status::Pending, locDocument.get_Id());
        }*/
    }

]]></Source>
			</Method>
			<Method>
				<Name>TestConnection</Name>
				<Source><![CDATA[
    public static server boolean TestConnection(SKS_EPY_WebServLoc _webServLoc, SKS_EPY_ClientID _DeviceID, SKS_EPY_Secret _DevicePassword)
    {
        /*SKS.ePayData.SKS_EPY_Return_In  locSKS_EPY_Return_In = new SKS.ePayData.SKS_EPY_Return_In();
        SKS.ePayData.PLToken PLtoken;*/
        boolean result = false;
        /*str errMessage;
    
        PLtoken = SKS.ePay.PLGetToken::PayLinkRetrieveToken(
            SKS_PP_StringFormats::strAssembleURL(_webServLoc,'token/create'),
            _DeviceID,
            _DevicePassword,
            'Get',
            locSKS_EPY_Return_In);
    
        if(locSKS_EPY_Return_In.get_ErrorDesc() != null)
        {
            errMessage = locSKS_EPY_Return_In.get_ErrorDesc();
            error(strFmt("@SKS3958", errMessage));
            result = false;
        }
        else
        {
            info("@SKS3959");
            result = true;
        }*/
    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateGenPayLinkStatus</Name>
				<Source><![CDATA[
    public static void UpdateGenPayLinkStatus(SKS_EPY_Queue _Queue)
    {
        SKS_PL_GenPayLink   locGenPayLink;
        ttsBegin;
        locGenPayLink = SKS_PL_GenPayLink::FindByPayLinkDocID(_Queue.PaymNum, true);
        if(locGenPayLink)
        {
            changeCompany(locGenPayLink.company())
            {
                switch(_Queue.Status)
                {
                    case SKS_EPY_Status::Failed:
                        locGenPayLink.Status = SKS_PL_Status::Failed;
                        break;
                    case SKS_EPY_Status::Completed:
                        locGenPayLink.Status = SKS_PL_Status::Completed;
                        break;
                }
                locGenPayLink.update();
            }
        }
        ttsCommit;
    }

   /* public static SKS.ePayData.SKS_EPY_Return_In UpdatePayLinkStatus(SKS.ePayData.PLDocument  _Document, SKS_PL_Setup _PLSetup, str url, boolean isCompleted )
    {
        SKS.ePayData.PLDocument Doc = new SKS.ePayData.PLDocument();
        SKS.ePayData.SKS_EPY_Return_In  sks_epy_return_in = new SKS.ePayData.SKS_EPY_Return_In();
        str     DocID;
        ;
    
        //Marhsal Document iD for URL
        DocID = '/document/';
        DocID += _Document.get_Id();
        DocID += '/UpdateStatus';
    
        url = SKS_PP_StringFormats::strAssembleURL(URL, DocID);
    
        sks_epy_return_in = SKS_PL_Sync::SyncPayLinkStatus(url, _PLSetup, isCompleted);
    
        return sks_epy_return_in;
    }*/

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>