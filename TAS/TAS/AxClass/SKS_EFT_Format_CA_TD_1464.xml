<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_TD_1464</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_TD_1464 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_TD_1464 extends SKS_EFT_Format
{
    #define.FormatVersion('20220302')
    #define.PAYMT('PMT')
    #define.LineEnd('\r\n')
    str mControlID;
    System.Text.StringBuilder msb;

    int mLogicRecCount;
    int mCRecordCount;
    int mDRecordCount;

    str OrigID;
    AmountMST mPaymentAmount;
    AmountMST mWithdrawalAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        int rec = 1;
        AmountMST nextAmount;
        AmountMST prevAmount;
        boolean firstnegetiveAmount = true;
        RecId nextRecId;
        msb = new System.Text.StringBuilder();
        mLogicRecCount = 0;

        
        // Format header
        this.rec_File_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Detail Record
            this.rec_Detail(rec == 1);

            prevAmount = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur ;
            next mSKS_EFT_FileDetail;
            nextRecId = mSKS_EFT_FileDetail.recId;
            nextAmount = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

            if(rec < 6)
            {
                if(nextRecId != 0)
                {
                    if(nextAmount > 0 && prevAmount < 0)
                    {
                        if(firstnegetiveAmount)
                        {
                            firstnegetiveAmount = false;
                            this.padRecord(rec);
                            msb.Append(#LineEnd);
                            rec = 1;
                        }
                        else
                        {
                            rec++;
                        }
                    }
                    else
                    {
                        rec++;
                    }
                }
                else
                {
                    this.padRecord(rec);
                    msb.Append(#LineEnd);
                }
            }
            else
            {
                rec = 1;
                msb.Append(#LineEnd);
            }
        }

        // Format trailer
        this.rec_Trailer();

        // Write to file
        this.fileWrite(msb.ToString());

    }

]]></Source>
			</Method>
			<Method>
				<Name>getJulianDate</Name>
				<Source><![CDATA[
    private str getJulianDate(date _Date)
    {
        str value;

        value = '0' + subStr(date2julian(_Date),3,5);

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>padRecord</Name>
				<Source><![CDATA[
    boolean padRecord(int _records)
    {
        //Fill remaining segments with blanks
        int x;

        for(x = _records; x < 6; x++)
        {
            msb.Append(SKS_PP_StringFormats::strFill(240, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    boolean rec_Detail(boolean _newRec)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Record Count                            (   2-  10)       9
        // 3    Originator ID + File Creation Number    (  11-  24)      14
        // 4    Transaction Type Code                   (  25-  27)       3
        // 5    Amount                                  (  28-  37)      10
        // 6    Due Date Julian Format                  (  38-  43)       6
        // 7    Institution ID/Transit Number           (  44-  52)       9
        // 8    Payee Account Number                    (  53-  64)      12
        // 9    Reserved                                (  65-  86)      22
        //10    Reserved                                (  87-  89)       3
        //11    Originator's Short Name                 (  90- 104)      15
        //12    Payee Name                              ( 105- 134)      30
        //13    Originator's Long Name                  ( 135- 164)      30
        //14    Originator ID Number                    ( 165- 174)      10
        //15    Institutional return ID                 ( 194- 202)       9
        //16    Institutional return ID                 ( 194- 202)       9
        //17    Account Number for return               ( 203- 214)      12
        //18    Originator Sundry Information           ( 215- 229)      15
        //19    Reserved                                ( 230- 251)      22
        //20    Reserved                                ( 252- 253)       2
        //21    Reserved                                ( 254- 264)      10
        //--    Repeat 4-23 for each additional deposit segment
        //------------------------------------------------------------------------------------------------------

        Amount amount;
        str shortName;

        if(_newRec)
        {
            // 1    Record Type                             (        1)       1
            // 2    Record Count                            (   2-  10)       9
            // 3    Originator ID + File Creation Number    (  11-  24)      14
            if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0)
            {
                this.rec_FileLead('C');
            }
            else
            {
                this.rec_FileLead('D');
            }
        }

        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0)//SKS_VSTS_13707
        {
            mCRecordCount++;
            amount = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            mDRecordCount++;
            amount = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            mWithdrawalAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }

        // 4    CPA Cpde                                (  25-  27)       3
        msb.Append(mSKS_EFT_FileFormatPaymSpec.TransactionCode);

        // 5    Amount                                  (  28-  37)      10
        msb.Append(SKS_PP_StringFormats::strMoney(amount, 10));

        // 6    Due Date Julian Format                  (  38-  43)       6
        msb.Append(this.getJulianDate(mSKS_EFT_FileDetail.EffectiveDate));

        // 7    Institution ID/Transit Number           (  44-  52)       9
        msb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Payee Account Number                    (  53-  64)      12
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Reserved                                (  65-  86)      22
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10    Reserved                                (  87-  89)       3
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //11    Originator's Short Name                 (  90- 104)      15
        shortName = SKS_EFT_Format::getCodelookupvalue('ShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        if(shortName != '')
        {
            msb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(shortName),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }

        //12    Payee Name                              ( 105- 134)      30
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    Originator's Long Name                  ( 135- 164)      30
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        //14    Originator ID Number                    ( 165- 174)      10
        msb.Append(SKS_PP_StringFormats::strFill(10, OrigID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //15    Originator Reference Number             ( 175- 193)      19
        msb.Append(SKS_PP_StringFormats::strFill(19, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16    Institutional return ID                 ( 194- 202)       9
        msb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //17    Account Number for return               ( 203- 214)      12
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //18    Originator Sundry Information           ( 215- 229)      15
        msb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //19    Reserved                                ( 230- 251)      22
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //20    Reserved                                ( 252- 253)       2
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //21    Reserved                                ( 254- 264)      11
        msb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_File_Header</Name>
				<Source><![CDATA[
    boolean rec_File_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                                 Position      Size
        // 1    Record Type                                             (        1)      1
        // 2    Record Count                                            (   2-  10)      9
        // 3.1  Originator ID Number                                    (  11-  20)     10
        // 3.2  File Creation Number                                    (  21-  24)      4
        // 4    File Creation Date                                      (  25-  30)      6
        // 5    Destination Date Centre Code                            (  31-  35)      5
        // 6    Filler                                                  (  36-1464)   1429
        //------------------------------------------------------------------------------------------------------

        str FileCN,nextSequenceNumber;
        //Nbr   Content
        // 1    Record Type                                             (        1)      1
        msb.Append('A');

        // 2    Record Count                                            (   2-  10)      9
        mLogicRecCount = 1;
        msb.Append(SKS_PP_StringFormats::strFill(9, int2str(mLogicRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3.1    Originator ID Number                                  (  11-  20)     10
        OrigID = SKS_PP_StringFormats::strFill(10,strUpr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);

        msb.Append(OrigID);

        // 3.2    File Creation Number                                  (  21-  24)      4
        nextSequenceNumber = SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId);
        
        FileCN = SKS_PP_StringFormats::strFill(4, nextSequenceNumber, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        msb.Append(FileCN);

        // 4    File Creation Date                                      (  25-  30)      6
        msb.Append(this.getJulianDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        // 5    TD Date Centre Code                                     (  31-  35)      5
        msb.Append(SKS_PP_StringFormats::strFill(5, '00420', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Filler                                                  (  36-1464)   1429
        msb.Append(SKS_PP_StringFormats::strFill(1429, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        mControlID = OrigID + FileCN;

        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileLead</Name>
				<Source><![CDATA[
    boolean rec_FileLead(str _Type)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Logical Record Count                    (   2-  10)       9
        // 3    Originator ID + File Creation Number    (  11-  24)      14
        //------------------------------------------------------------------------------------------------------

        // 1    Record Type                             (        1)       1
        msb.Append(_Type);

        // 2    Logical Record Count                    (   2-  10)       9
        mLogicRecCount++;
        msb.Append(SKS_PP_StringFormats::strFill(9, int2str(mLogicRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Originator ID + File Creation Number    (  11-  24)      14
        msb.Append(SKS_PP_StringFormats::strFill(14, mControlID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    boolean rec_Trailer()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Record Count                            (   2-  10)       9
        // 3    Originator ID + File Creation Number    (  11-  24)      14
        // 4    Total Value  of D Records               (  25-  38)      14
        // 5    Total Number of D Records               (  39-  46)       8
        // 6    Total Value of C Records                (  47-  60)      14
        // 7    Total Number of C Records               (  61-  68)       8
        // 8    Filler                                  (  69-1464)    1396
        //------------------------------------------------------------------------------------------------------

        // 1    Record Type                             (        1)       1
        // 2    Record Count                            (   2-  10)       9
        // 3    Originator ID + File Creation Number    (  11-  24)      14
        this.rec_FileLead('Z');

        // 4    Total Amount of all  Debit Transactions (  25-  38)      14
        msb.Append(SKS_PP_StringFormats::strMoney(mWithdrawalAmount, 14));

        // 5    Total Number of Debit Transactions      (  39-  46)       8
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mDRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Total Amount of all Credit Transactions (  47-  60)      14
        msb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount * -1, 14));

        // 7    Total Number of Credit Transactions     (  61-  68)       8
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mCRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Filler                                  (  69-1464)    1396
        msb.Append(SKS_PP_StringFormats::strFill(1396, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------

        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_BankAccount
            join mSKS_EFT_FileDetail_VendAddress
        order by mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,
                mSKS_EFT_FileDetail.RecordSection,
                mSKS_EFT_FileDetail.PaymMode,
                mSKS_EFT_FileDetail.PaymSpec,
                mSKS_EFT_FileDetail.EffectiveDate,
                mSKS_EFT_FileDetail.DepCountryRegionId,
                mSKS_EFT_FileDetail.RecordType,
                mSKS_EFT_FileDetail.BankAccountId,
                mSKS_EFT_FileDetail.AccountNum,
                mSKS_EFT_FileDetail.PaymentReference,
                mSKS_EFT_FileDetail.RecId
        where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
            mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
            mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
            mSKS_EFT_FileDetail_BankAccount.RefRecId == mSKS_EFT_FileDetail.RecId &&
            mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>