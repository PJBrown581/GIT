<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_CA_CIBC_PSR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_RF_Format_CA_CIBC_PSR extends SKS_EFT_RF_Format
/// </summary>
class SKS_EFT_RF_Format_CA_CIBC_PSR extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;
    str mFileName;
    str mFileID;
    str mFieldDelimiter;
    boolean firstRec = true;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        CommaStreamIo locTextIo;
        container locRecord, rawrecord;
        System.String locString;
        int i;  //index of the current location in the container
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        
        //Setup filestream
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locTextIo = CommaStreamIo::ConstructForRead(fileHub.StreamGet());
      
        locTextIo.inFieldDelimiter(',');
        locTextIo.inRecordDelimiter('\n');

        if(!mSKS_EFT_RF_File)
        {
            mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        }

        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();

        while(locTextIo.status() == IO_Status::Ok)
        {           
            rawrecord = locTextIo.read();
            locRecord = this.getupdatedcontainer(rawrecord);
            if(conLen(locRecord) > 0)
            {
                //Remove any carriage Returns
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }
                locString  = strLRTrim(conPeek(locRecord, 1));

                if(!System.String::IsNullOrEmpty(locString))
                {
                    if(!locString.StartsWith('Initiating Party Name'))
                    {
                        if(conPeek(locRecord,8) != '' &&
                           (conPeek(locRecord,46) == 'ACSP' ||
                            conPeek(locRecord,46) == 'RJCT' ||
                            conPeek(locRecord,46) == 'PDNG' ||
                            conPeek(locRecord,46) == 'ACSC'))
                        {
                            this.processNode(locRecord);
                        }
                    }
                }
                //if(!System.String::IsNullOrEmpty(locString))
            }
            //if(conLen(locRecord) > 0)
        }
        //while(locStreamReader.get_EndOfStream());
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        if(locTextIo)
        {
            locTextIo.finalize();
            locTextIo = null;
        }

        if(gErrorsExist)
        {
            mSKS_EFT_RF_File = null;
        }
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {

        str rtnval = '';
        int classId;
        CommaStreamIo locCommaIo;
        int i;//index of the current location in the container
        container locRecord, rawrecord;
        //BEGIN VALIDATION VARIABLES
        boolean FirstRecordFound = false;
        boolean SecondRecordFound = false;
        System.String locString;
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);

        //Setup filestream
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locCommaIo = CommaStreamIo::ConstructForRead(fileHub.StreamGet());
        mFieldDelimiter = ',';
        locCommaIo.inFieldDelimiter(mFieldDelimiter);
        locCommaIo.inRecordDelimiter('\n');

        while(locCommaIo.status() == IO_Status::Ok)
        {
            rawrecord = locCommaIo.read();
            locRecord = this.getupdatedcontainer(rawrecord);

            if(conLen(locRecord) > 0 )
            {
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }

                locString  = strLRTrim(conPeek(locRecord, 1));

                if(!System.String::IsNullOrEmpty(locString))
                {
                    if(!locString.StartsWith('Initiating Party Name'))
                    {
                        if(conPeek(locRecord,8) != '')
                        {
                            FirstRecordFound = true;
                        }

                        if(conPeek(locRecord,46) == 'ACSP' ||
                            conPeek(locRecord,46) == 'RJCT' ||
                            conPeek(locRecord,46) == 'PDNG' ||
                            conPeek(locRecord,46) == 'ACSC')
                        {
                            SecondRecordFound = true;
                        }
                    }
                }
            }
            if(FirstRecordFound && SecondRecordFound)
            {
                break;
            }
        }
        if(FirstRecordFound && SecondRecordFound)
        {
            //ALl Qualifers show this a
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        if(locCommaIo)
        {
            locCommaIo.finalize();
            locCommaIo = null;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {

        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }

        return mSKS_EFT_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(container locRecord)
    {
        System.String transactionKey, transactionStatus;
        ;

        transactionKey = strLRTrim(conPeek(locRecord, 8));
        transactionStatus = strLRTrim(conPeek(locRecord, 46));  
        
        mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
        if(mSKS_EFT_RF_Transaction != null)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
        }        

        if(!System.String::IsNullOrEmpty(transactionKey))
        {
            mSKS_EFT_RF_Transaction.setID(transactionKey);
        }
        if(!System.String::IsNullOrEmpty(transactionStatus))
        {
            mSKS_EFT_RF_Transaction.setStatus(transactionStatus);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    /// <summary>
    /// outboundFileKeyGen
    /// </summary>
    /// <param name = "_OutFilename">_OutFilename</param>
    /// <param name = "locSKS_EFTAP_File">locSKS_EFTAP_File</param>
    /// <returns>FileNbr</returns>
    [SuppressBPWarning('BPParameterNotUsed', 'Parameter required by the event interface')]
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File locSKS_EFTAP_File = null)
    {
        return locSKS_EFTAP_File.FileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    /// <summary>
    /// SKS_EFT_RF_Format_ES_BBVA_SIT_1366_RES Outbound transaction level Key Generation
    /// </summary>
    /// <param name = "_FileName">_FileName</param>
    /// <param name = "_SKS_EFT_FileDetail">_SKS_EFT_FileDetail</param>
    /// <param name = "_SKS_EFTAP_FILE">_SKS_EFTAP_FILE</param>
    /// <returns>FileNbr</returns>
    [SuppressBPWarning("BPParameterNotUsed", "Parameter required by the event interface")]
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        str rtnval;
        ;

        rtnval = _SKS_EFT_FileDetail.PaymentReference;
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getupdatedcontainer</Name>
				<Source><![CDATA[
    //added
    [SuppressBPWarning("BPCheckParametersModified", "Modification required inside the method")]
    public container getupdatedcontainer(container _conrecord)
    {
        int j;
        anytype StrValue;
        str value;
        
        for(j = 1; j <= conLen(_conrecord); j++ )
        {
            StrValue = conPeek(_conrecord,j);
           
            value = conPeek(_conrecord,j);
            if(strContains(value, ','))
            {
                value = strRem(value,',');
            }            
            _conrecord = conpoke(_conrecord,j,value);
        }
        return _conrecord;
    }
    //ended

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>