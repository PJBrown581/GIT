<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_Bank</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EB_Bank
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCAMTMultiCurrency</Name>
				<Source><![CDATA[
    private static boolean isCAMTMultiCurrency(SKS_BR_FileFormat _SKS_BR_FileFormat, CurrencyCode _CurrencyCode)
    {
        boolean rtnval;

        if(_SKS_BR_FileFormat && _CurrencyCode != null)
        {
            if(_SKS_BR_FileFormat.BR_CAMT053MulitCurrencyAccounts  == NoYes::Yes)
            {
                rtnval = true;
            }
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountIDfromAltID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds Bank Account Id for imported bank accounts with "Search" box's Alternate Bank ID
    /// </summary>
    /// <param name = "accountNum">Alternate id from the BR or CCR file import process</param>
    /// <param name = "_crossCompanyList">list of companies in the current org hierarchy</param>
    /// <param name = "isCCR">FLage indicationg what kind of file is being imported</param>
    /// <param name = "_SKS_BR_FileFormat">The format of the file being imported</param>
    /// <param name = "_CurrencyCode">Currency code of the current statement</param>
    /// <returns>The account number, if found</returns>
    public static SKS_PP_Bank getAccountIDfromAltID(BankAccount accountNum, container _crossCompanyList, boolean isCCR = false, 
        SKS_BR_FileFormat _SKS_BR_FileFormat = null,
        CurrencyCode _CurrencyCode = null)
    {
        //Search's "Alternate Bank Id" is set
        //in the eBanking Bank Accounts screen.
        SKS_PP_Bank sks_PP_Bank;
        BankAccountTable locBankAccountTable;
    
        if(isCCR)
        {
            select firstonly crossCompany:_crossCompanyList dataAreaId, BankAccountID from sks_PP_Bank where SKS_PP_Bank.CCR_AlternateBankID == accountNum;
        }
        else
        {
            if(SKS_EB_Bank::isCAMTMultiCurrency(_SKS_BR_FileFormat, _CurrencyCode))
            {

                select firstonly crossCompany:_crossCompanyList dataAreaId, BankAccountID from sks_PP_Bank
                    where SKS_PP_Bank.AlternateBankID == accountNum
                    join locBankAccountTable
                        where locBankAccountTable.AccountID == SKS_PP_Bank.BankAccountId
                            && locBankAccountTable.CurrencyCode == _CurrencyCode;
            }
            else
            {
                select firstonly crossCompany:_crossCompanyList dataAreaId, BankAccountID from sks_PP_Bank where SKS_PP_Bank.AlternateBankID == accountNum;
            }
        }
        return sks_PP_Bank; //may return null if no matching alternate bank acount found
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds Bank Account Id for bank account number
    /// </summary>
    /// <param name = "accountNum"> AccountNumber parameter</param>
    /// <param name = "_ClassID">Class id parameter</param>
    /// <param name = "_SKS_BR_FileFormat">SKS_BR_FileFormat table object</param>
    /// <param name = "_CurrencyCode">Currency code</param>
    /// <returns>Returns the bankaccounttable object</returns>
    public static BankAccountTable getBankAccount(Str60 accountNum, ClassId _ClassID = 0, SKS_BR_FileFormat _SKS_BR_FileFormat = null, CurrencyCode _CurrencyCode = null )
    {
        BankAccountTable bankAccountTable;
        SKS_PP_Bank sks_PP_Bank;
        container crossCompanyList;
        boolean locIsCCR = (_ClassID == classIdGet(new SKS_CCR_ReadFileClassesBase()) || _ClassID == classIdGet(new SKS_CCR_ReadFileFixed()));
        


        if(locIsCCR) //13903 CCR
            crossCompanyList = SKS_EB_VirtualCompany::getCCRRecCompanies();
         else//Bank Rec
            crossCompanyList = SKS_EB_VirtualCompany::getBankRecCompanies();
    
        if(strLen(strLRTrim(accountNum)) > 0)
        {
            sks_PP_Bank = SKS_EB_Bank::getAccountIDfromAltID(accountNum, crossCompanyList, locIsCCR, _SKS_BR_FileFormat, _CurrencyCode);
        }
    
        if(sks_PP_Bank)//an account ID was retrieved based on the Alternate Bank ID.
        {
            bankAccountTable = SKS_EB_Bank::getBankAccountFromAcctID(sks_PP_Bank, _SKS_BR_FileFormat, _CurrencyCode);
        }
        else//No Alternate Bank ID was matched, try finding an account based on the supplied Bank Account Num.
        {
            bankAccountTable = SKS_EB_Bank::getBankAccountFromAcctNum(SKS_PP_StringFormats::strLTrimZeroes(accountNum), crossCompanyList, _ClassID, _SKS_BR_FileFormat, _CurrencyCode);
            if(!bankAccountTable)//if we can't find a bank account number that matches the param account number, check IBANs
            {
                bankAccountTable = SKS_EB_Bank::getBankAccountFromAcctIBAN(SKS_PP_StringFormats::strLTrimZeroes(accountNum), crossCompanyList, _SKS_BR_FileFormat, _CurrencyCode);
            }
        }
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountFromAcctIBAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds Bank Account Id for bank account IBAN
    /// </summary>
    /// <param name = "_accountNum">Account number parameter</param>
    /// <param name = "_crossCompanyList">company list container</param>
    /// <param name = "_SKS_BR_FileFormat">SKS_BR_FileFormat table buffer</param>
    /// <param name = "_CurrencyCode">Currency code object</param>
    /// <returns>Returns BankAccountTable object</returns>
    public static BankAccountTable getBankAccountFromAcctIBAN(str60 _accountNum, container _crossCompanyList, 
        SKS_BR_FileFormat _SKS_BR_FileFormat = null,
        CurrencyCode _CurrencyCode = null)
    {
        BankAccountTable bankAccountTable;
        SKS_PP_Bank lSKS_PP_Bank;
    
    
        if(SKS_EB_Bank::isCAMTMultiCurrency(_SKS_BR_FileFormat, _CurrencyCode))
        {
            while select crosscompany:_crossCompanyList * from bankAccountTable
            where
                bankAccountTable.IBAN LIKE '*' + _accountNum
                && bankAccountTable.CurrencyCode == _CurrencyCode
            join
                lSKS_PP_Bank
            where
                lSKS_PP_Bank.BankAccountId == bankAccountTable.AccountID &&
                lSKS_PP_Bank.BRFormatID != ''
            {
                if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.IBAN) == _accountNum)
                {
                    return bankAccountTable;
                }
            }
        }
        else
        {
            while select crosscompany:_crossCompanyList * from bankAccountTable
            where
                bankAccountTable.IBAN LIKE '*' + _accountNum
            join
                lSKS_PP_Bank
            where
                lSKS_PP_Bank.BankAccountId == bankAccountTable.AccountID &&
                lSKS_PP_Bank.BRFormatID != ''
            {
                if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.IBAN) == _accountNum)
                {
                    return bankAccountTable;
                }
    
            }
        }
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountFromAcctID</Name>
				<Source><![CDATA[
    public static BankAccountTable getBankAccountFromAcctID(SKS_PP_Bank sks_PP_Bank, SKS_BR_FileFormat _SKS_BR_FileFormat = null, CurrencyCode _CurrencyCode = null)
    {
        BankAccountTable bankAccountTable;
    
        changeCompany(sks_PP_Bank.company())
        {
            if(SKS_EB_Bank::isCAMTMultiCurrency(_SKS_BR_FileFormat,_CurrencyCode))
            {
                select firstOnly * from bankAccountTable where bankAccountTable.AccountID == sks_PP_Bank.BankAccountId
                    && bankAccountTable.CurrencyCode == _CurrencyCode;
            }
            else
            {
                select firstOnly * from bankAccountTable where bankAccountTable.AccountID == sks_PP_Bank.BankAccountId;
            }
        
            
        }
        return  bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountFromAcctNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds Bank Account Id for bank account number
    /// </summary>
    /// <param name = "accountNum">AccountNumber parameter</param>
    /// <param name = "_crossCompanyList">Copmany list container</param>
    /// <param name = "_ClassID">Class Id parameter</param>
    /// <param name = "_SKS_BR_FileFormat">SKS_BR_FileFormat table object</param>
    /// <param name = "_CurrencyCode">CurrencyCode parameter</param>
    /// <returns>Returns the BankAccountTable object</returns>
    public static BankAccountTable getBankAccountFromAcctNum(BankAccount accountNum, container _crossCompanyList, ClassId _ClassID = 0, 
        SKS_BR_FileFormat _SKS_BR_FileFormat = null,
        CurrencyCode _CurrencyCode = null )
    {
        BankAccountTable bankAccountTable;
        SKS_PP_Bank lSKS_PP_Bank;
        
        if((_ClassID == classIdGet(new SKS_CCR_ReadFileClassesBase())//13903 CCR
                || _ClassID == classIdGet(new SKS_CCR_ReadFileFixed())))
        {
            while select crosscompany:_crossCompanyList * from bankAccountTable
            where
                bankAccountTable.AccountNum LIKE '*' + accountNum
            join
                lSKS_PP_Bank
            where
                lSKS_PP_Bank.BankAccountId == bankAccountTable.AccountID &&
                lSKS_PP_Bank.CCR_FormatID != ''
            {
                if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.AccountNum) == accountNum)
                {
                    return bankAccountTable;
                }
    
            }
        }
        else// Bank Rec
        {
            if(SKS_EB_Bank::isCAMTMultiCurrency(_SKS_BR_FileFormat,_CurrencyCode))
            {
                while select crosscompany:_crossCompanyList * from bankAccountTable
                where
                    bankAccountTable.AccountNum LIKE '*' + accountNum
                    && bankAccountTable.CurrencyCode == _CurrencyCode
                join
                    lSKS_PP_Bank
                where
                    lSKS_PP_Bank.BankAccountId == bankAccountTable.AccountID &&
                    lSKS_PP_Bank.BRFormatID != ''
                {
                    if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.AccountNum) == accountNum)
                    {
                        return bankAccountTable;
                    }
    
                }
            }
            else
            {
                while select crosscompany:_crossCompanyList * from bankAccountTable
                where
                    bankAccountTable.AccountNum LIKE '*' + accountNum
                join
                    lSKS_PP_Bank
                where
                    lSKS_PP_Bank.BankAccountId == bankAccountTable.AccountID &&
                    lSKS_PP_Bank.BRFormatID != ''
                {
                    if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.AccountNum) == accountNum)
                    {
                        return bankAccountTable;
                    }
    
                }
            }
        }

        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateIBANBankAcct</Name>
				<Source><![CDATA[
    /// <summary>
    ///Moved to it's own method to offer extension point for a customization
    /// </summary>
    public static SKS_PP_Bank ValidateIBANBankAcct(SKS_PP_Bank SKS_PP_BankScr, BankAccountTable  BankAccountSrc)
    {
        SKS_PP_Bank tmpSKS_PP_Bank;
        BankAccountTable tmpBankAccount;

        select firstonly crosscompany BankAccountId from tmpSKS_PP_Bank
            join AccountID, AccountNum from tmpBankAccount  where tmpBankAccount.AccountID == tmpSKS_PP_Bank.BankAccountId
            && tmpBankAccount.IBAN == BankAccountSrc.IBAN
            && tmpBankAccount.CurrencyCode == BankAccountSrc.CurrencyCode
            && !(tmpSKS_PP_Bank.BankAccountId == SKS_PP_BankScr.BankAccountId && tmpSKS_PP_Bank.dataAreaId == SKS_PP_BankScr.dataAreaId)
            && tmpSKS_PP_Bank.BRFormatID != '';

        return tmpSKS_PP_Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateBankAcct</Name>
				<Source><![CDATA[
    public static SKS_PP_Bank ValidateBankAcct(SKS_PP_Bank SKS_PP_BankScr, BankAccountTable  BankAccountSrc)
    {
        SKS_PP_Bank tmpSKS_PP_Bank;
        BankAccountTable tmpBankAccount;

        select firstonly crosscompany BankAccountId from tmpSKS_PP_Bank
            join AccountID, AccountNum from tmpBankAccount  where tmpBankAccount.AccountID == tmpSKS_PP_Bank.BankAccountId
            && tmpBankAccount.AccountNum == BankAccountSrc.AccountNum
            && tmpBankAccount.CurrencyCode == BankAccountSrc.CurrencyCode
            && !(tmpSKS_PP_Bank.BankAccountId == SKS_PP_BankScr.BankAccountId && tmpSKS_PP_Bank.dataAreaId == SKS_PP_BankScr.dataAreaId)
            && tmpSKS_PP_Bank.BRFormatID != '';

        return tmpSKS_PP_Bank;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>