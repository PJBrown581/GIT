<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_KE_SIDIANBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_KE_SIDIANBANK_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_KE_SIDIANBANK_CSV  extends SKS_EFT_Format
{
    #define.FormatVersion('20230306')
    #define.MW('EFT')
    str purposeText;
    str btchbkg;
    int mDRecordCount;
    AmountMST mPaymentAmount;

    #define.Separator(',')
    #define.DoubleQuote('"')


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    /// <summary>
    /// wrapField
    /// </summary>
    /// <param name = "_field">_field</param>
    /// <param name = "_addSeparator">_addSeparator</param>
    /// <returns>str</returns>
    private str wrapField(str _field = '', boolean _addSeparator = true)
    {
        str text;

        text = _field;

        if(_addSeparator)
        {
            if(text != '' && strContains(text, ','))
            {
                text = #DoubleQuote + text + #DoubleQuote + #Separator;
            }
            else
            {
                text = text + #Separator;
            }
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {

        //  Header Record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Payment Details
            this.rec_PaymentDetails();

            next mSKS_EFT_FileDetail;
        }
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    private boolean rec_Header()
    {
        
        //1     CORPORATE CUSTOMER ACCOUNT
        //2     PAYMENT DESCRIPTION
        //3     M/S - M is Multiple Debit Multiple Credit
        //4     DD/MM/YYYY
        //5     FILE_TYPE( MDMC )
        //6     FILE UNIQUE REFERENCE
        //7     CURRENCY
        //----------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     CORPORATE CUSTOMER ACCOUNT
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct));

        //2     PAYMENT DESCRIPTION
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('PayDesc',mSKS_EFT_FileDetail.RecId)));

        //3     M/S - M is Multiple Debit Multiple Credit
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('MultipleDrCr',mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank)));

        //4     DD/MM/YYYY
        sb.Append(this.wrapField(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4)));
        
        //5     FILE_TYPE( MDMC )
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymSpec));

        //6     FILE UNIQUE REFERENCE
        sb.Append(this.wrapField(mSKS_EFT_File.FileNbr));

        //7    CURRENCY
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode,false));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PaymentDetails
    /// </summary>
    /// <returns>boolean</returns>
    boolean rec_PaymentDetails()
    {
        //1     DATE
        //2     BENEFICIARY BANK CODE
        //3     BENEFICIARY BRANCH CODE
        //4     BENEFICIARY ACCOUNT
        //5     PAYMENT DESCRIPTION
        //6     ITEM AMOUNT
        //7     ITEM REFERENCE
        //8          
        //9     RTGS MARKER
        //10    PESALINK MARKER
        //----------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mDRecordCount++;

        //1     DATE
        sb.Append(this.wrapField(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4)));

        //2     BENEFICIARY BANK CODE
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('BankCode',mSKS_EFT_FileDetail.RecId)));

        //3    BENEFICIARY BRANCH CODE
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));

        //4     BENEFICIARY ACCOUNT
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));

        //5     PAYMENT DESCRIPTION
        str invoiceNumbers;
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invoiceNumbers  += ' '+invSKS_EFT_FileDetail.InvoiceNumber;
        }

        sb.Append(this.wrapField(strLRTrim(invoiceNumbers)));

        //6      ITEM AMOUNT
        mPaymentAmount +=  mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0)));

        //7   ITEM REFERENCE
        sb.Append(this.WrapField(mSKS_EFT_FileDetail.PaymentReference));
 
        //8             
        sb.Append(this.wrapField(''));
       
        //9     RTGS MARKER
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('RTGSMarker',mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));

        //10    PESALINK MARKER
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('PESMarker',mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank),false));
       
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Trailer
    /// </summary>
    /// <returns>boolean</returns>
    boolean  rec_Trailer()
    {
        //1     ITEM COUNT
        //2     BLANK
        //3     BLANK
        //4     BLANK
        //5     BLANK
        //6     BULK AMOUNT
        //7     BLANK
        //8     BLANK
        //9     BLANK
        //10    BLANK
        //----------------------------------------------------------------------
       
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     ITEM COUNT
        sb.Append(this.wrapField(int2Str(mDRecordCount)));

        //2     BLANK
        sb.Append(this.wrapField(''));

        //3     BLANK
        sb.Append(this.wrapField(''));

        //4     BLANK
        sb.Append(this.wrapField(''));

        //5     BLANK
        sb.Append(this.wrapField(''));

        //6      BULK AMOUNT
        sb.Append(this.wrapField(num2Str(mPaymentAmount*-1, 0, 2, 1, 0)));

        //7     BLANK
        sb.Append(this.wrapField(''));
 
        //8     BLANK
        sb.Append(this.wrapField(''));
       
        //9     BLANK
        sb.Append(this.wrapField(''));

        //10     BLANK
        sb.Append(this.wrapField('',false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>