<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_ES_BBVA_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_ES_BBVA_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_ES_BBVA_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20221018';
        dataContractVersion = '1.0';
        conFormatID = ['ES-BBVA-XML','US-BBVA-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'ES – BBVA – ISO20022',0,'','','ES-BBVA-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,1,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'ES-BBVA-XML',0,0,0]);
        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'US – BBVA – ISO20022',0,'','','US-BBVA-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,1,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'ES-BBVA-XML',0,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('ES-BBVA-XML'):
                paymSpecList = this.getPaymSpecsMetaData_ES_BBVA_XML();
                break;

            case ('US-BBVA-XML'):
                paymSpecList = this.getPaymSpecsMetaData_US_BBVA_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_ES_BBVA_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_ES_BBVA_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,1,'',0,0,0,0,0,'SEPA Credit transfer',1,'CREDIT TFR','','CREDIT TFR','TRADE PAY',0,'ES-BBVA-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_US_BBVA_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_US_BBVA_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Wire Transfer USD - Domestic and International',1,'WT-USD','','WT-USD','TRADE PAY',0,'US-BBVA-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('ES-BBVA-XML'):
                notesList = this.getNotesMetaData_ES_BBVA_XML();
                break;

            case ('US-BBVA-XML'):
                notesList = this.getNotesMetaData_US_BBVA_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_ES_BBVA_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_ES_BBVA_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['ES-BBVA-XML','CREDIT TFR','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.:-Group Header > Initiating Party > Identification > OrganisationIdentification > BICOrBEI is stored in Cash and bank management > Common > Bank accounts > SWIFTNo field.:-Group Header > Initiating Party > Identification > OrganisationIdentification > Other > Identification is stored in EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab > Initiating party Id field.:-Payment Information > Debtor >  Identification > PrivateIdentification > Other > Identification is stored in EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab > ID field.:-Payment Information > Debtor > Name is stored in EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab > Name field.:-Payment Information > Debtor >  PostalAddress > PostCode is stored in EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab > Zip/Postal code field.:-Payment Information > Debtor >  PostalAddress > Country is stored in EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab > Country/region field.:-Payment Information > Debtor >  PostalAddress > AddressLine is stored in EFT+ bank account > AP EFT+ > Wire/IAT ordering party tab > Address 1 & Address 2 fields.:-Payment Information > Creditor >  PostalAddress > PostCode is stored in Vendor eBanking details > Payment specifications > Wire transfer/IAT1 tab > Zip/Postal code field.:-Payment Information > Creditor >  PostalAddress > Country is stored in Vendor eBanking details > Payment specifications > Wire transfer/IAT1 tab > Country/region field.:-Payment Information > Creditor >  PostalAddress > AddressLine is stored in Vendor eBanking details > Payment specifications > Wire transfer/IAT1 tab >  Address 1 & Address 2 fields.:-IBAN is required for Bank account and Vendor bank account.  If SWIFT code is entered on Bank account or Vendor bank account it will be included in file in BIC field.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_US_BBVA_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_US_BBVA_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['US-BBVA-XML','WT-USD','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:-Payment Information > Debtor >  Identification > OrganisationIdentification > Other > Identification is stored in ID field.:-Debtor Name is required and stored on Name field.:--City, Zip/postal, state/province and Country Code are stored on their specific fields.:--Either Address 1 or City is required.::Cash and bank management module > Bank Account:-Bank account number is required.:-Bank transit number is required.::Vendor Bank Account fields:-Set either the Bank account number or the IBAN . If both are set,IBAN will take precedence.:-Either SWIFT code or Bank transit number is required. If both are set, SWIFT code will take precedence.:-SWIFT code  is required for International payments.:-Bank transit number is required for Domestic payments::Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and stored in the Beneficiary Name  field.:--City, Zip/postal, state/province and Country Code are stored on their specific fields.:--Either Address 1 or City is required.:-The charges bearer is set on the Charges indicator field in the Other notes section.::Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:-Intermediary Agent BIC or Bank Id will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.:-If Swift code/Bank Id is mentioned then consider as a International bank otherwise intermediary bank field will leave as blank.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['ES-BBVA-XML','ChrgBr','Charge Bearer']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['ES-BBVA-XML','ChrgBr','paid by the creditor','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['ES-BBVA-XML','ChrgBr','paid by the Debtor','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['ES-BBVA-XML','ChrgBr','Shared','SHAR']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('US-BBVA-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_US_BBVA_XML();
                break;
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_US_BBVA_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_US_BBVA_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['ES-BBVA-XML','US-BBVA-XML','WT-USD','ChrgBr','Charge Bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['ES-BBVA-XML','*','FormatLookup','*','*','']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('ES-BBVA-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_ES_BBVA_XML();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_ES_BBVA_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_ES_BBVA_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['ES-BBVA-XML','ES-BBVA-XML','InitiatingPartyId','Initiating Party Id',1,'InitiatingPartyId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > Orgid > Othr > Id']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('ES-BBVA-XML'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('InitiatingPartyId', gSKS_EFT_Bank.W01);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('US-BBVA-XML'):
                if(gSKS_EFT_VendorPaym.WChargesIndic)
                {
                    this.updateVendorFields('ChrgBr', gSKS_EFT_VendorPaym.WChargesIndic, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>