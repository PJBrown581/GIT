<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EPY_SaveInvoiceToFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// PDF creation class
/// </summary>
class SKS_EPY_SaveInvoiceToFile
{
    //EPAY:  Methods have been changed to stubs.  We will not use thie
    #File
    //FilePath                    filePath;
    Filename                    fileName;
    Common                      callerRecord;
    CustInvoiceJour             custInvoiceJour;
    ProjInvoiceJour             projInvoiceJour;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCallerRecord</Name>
				<Source><![CDATA[
    public Common parmCallerRecord(Common _callerRecord = callerRecord)
    {
        callerRecord = _callerRecord;
        return callerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    public FileName parmFileName(FileName _fileName = fileName)
    {
        fileName = _fileName;
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    //public FilePath parmFilePath(FilePath _filePath = filePath)
    //{
    //    filePath = _filePath;
    //    return filePath;
    //}

    /// <summary>
    /// Runs the file pdf creation process
    /// </summary>
    /// <returns>string</returns>
    public str run()
    {
        int                                     line;
        Filename                                invoiceFileNamePathAndExt;
        SrsPrintMgmtFormLetterController        controller;
        Args                                    parameters = new Args();
        PrintCopyOriginal                       printCopyOriginal;
        SysDictClass                            locDictClass;
        ClassName                               ClassName;

        parameters.record(callerRecord);
        parameters.parmEnumType(printCopyOriginal);
        parameters.parmEnum(PrintCopyOriginal::Original);
       
        switch (callerRecord.TableId)
        {
            case tableNum(CustInvoiceJour):
                custInvoiceJour = callerRecord;
                if (custInvoiceJour.SalesId)
                {
                    if(SKS_EPY_Setup::find().UsePrintMgmtSalesInvoice)
                    {
                        parameters.parmEnum(PrintCopyOriginal::OriginalPrint);
                    }
                  
                    controller = SKS_EPY_SalesInvoiceController::construct();
                    controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesOrderInvoice).getDefaultReportFormat());
                }
                else
                {
                    if(SKS_EPY_Setup::find().UsePrintMgmtFreeTextInvoice)
                    {
                        parameters.parmEnum(PrintCopyOriginal::OriginalPrint);
                    }
                    controller = new SKS_EPY_FreeTextInvoiceController();
                    controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesFreeTextInvoice).getDefaultReportFormat());
                }
                controller.parmArgs(parameters);
                break;
            case tableNum(ProjInvoiceJour):
                projInvoiceJour = callerRecord;
                parameters.record(callerRecord);
                if(SKS_EPY_Setup::find().UsePrintMgmtProjInvoice)
                {
                    parameters.parmEnum(PrintCopyOriginal::OriginalPrint);
                }
                if(SKS_EPY_Setup::find().ProjInvReportController)
                {
                    ClassName = SKS_EPY_Setup::find().ProjInvReportController;
                    locDictClass = new SysDictClass(className2Id(ClassName));
                    controller = locDictClass.makeObject();
                    parameters.menuItemType(MenuItemType::Output);
                    parameters.menuItemName(menuitemOutputStr(PSAProjInvoice));
                    controller.parmReportName(SKS_EPY_Setup::find().ProjInvReportName);
                    if (!strEndsWith(fileName, #pdf))
                    {
                        fileName = fileName + #pdf;
                        invoiceFileNamePathAndExt = filename; 
                        locDictClass.callObject('SKS_EPY_InitArgsAndPrintSettings', controller, parameters, invoiceFileNamePathAndExt, ProjInvoiceJour.RecId);
                    }
                }
                else
                {
                    controller = SKS_EPY_ProjInvoiceController::construct(parameters);
                   // SKS_EPY_ProjInvoiceController::main(parameters);
                }

                if(SKS_EPY_Setup::find().ProjInvReportName)
                {
                    controller.parmReportName(SKS_EPY_Setup::find().ProjInvReportName);
                }
                else
                {
                    controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SIProjInvoice).getDefaultReportFormat());
                }
                controller.parmArgs(parameters);
                break;
            default:
                throw error("@SKS3445");
        }
    
        controller.parmLoadFromSysLastValue(false);
        controller.parmReportContract().parmPrintSettings().printMediumType(SRSPrintMediumType::archive);
        controller.parmReportContract().parmPrintSettings().fileFormat(SRSReportFileFormat::PDF);
        controller.parmReportContract().parmPrintSettings().overwriteFile(true);
    
        if (!strEndsWith(fileName, #pdf))
        {
            fileName = fileName + #pdf;
        }
    
        invoiceFileNamePathAndExt = filename; //System.IO.Path::Combine(filePath, fileName);
    
        controller.parmReportContract().parmPrintSettings().fileName(invoiceFileNamePathAndExt);
        controller.parmShowDialog(false);
        line = Global::infologLine();
    
        controller.startOperation();
        
        //Clear info log line that shows the file has been created
        infolog.clear(line);
        
        return invoiceFileNamePathAndExt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_EPY_SaveInvoiceToFile construct()
    {
        return new SKS_EPY_SaveInvoiceToFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Description
    /// </summary>
    /// <returns>ClassDescription</returns>
    static ClassDescription description()
    {
        return "@SKS3408";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintDestinationSubDirectory</Name>
				<Source><![CDATA[
    //EPAY:  Changed header to keep this compiling correctly.  Change back if epay is integrated to AX7
    public static str getPrintDestinationSubDirectory(FilePath _baseDirectory, InvoiceId _invoiceId /*, SKS.ePayData.SKS_EPY_Return_In sks_epy_return_in*/)
   // public static str getPrintDestinationSubDirectory(FilePath _baseDirectory, InvoiceId _invoiceId, Object sks_epy_return_in)
    {
        // Use the existing file path to create a subdirectory under the base directory
        // the subdirectory will have the invoice number and date/time stamp.
        #define.filePartSeparator('_')
        System.String   directoryName, baseDirectoryDotNet;
        str             newDirectory, baseDirectory, subDirectoryName, randomFolderName;
        utcDateTime     processCreatedDateTime;
        str             strFileDateTime;
        if (!_baseDirectory)
        {
            throw error("@SKS3409");
        }
    
        if (!_invoiceId)
        {
            throw error("@SKS3410");
        }
    
        processCreatedDateTime = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone());
        strFileDateTime = DateTimeUtil::toFormattedStr(processCreatedDateTime, 321, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2,
                                                        DateSeparator::None, DateYear::Digits4, TimeSeparator::Colon, TimeSeparator::Colon);
    
        strFileDateTime = strRem(strFileDateTime, '-/:T ');
    
        directoryName = _baseDirectory;
    
        // .net str to X++ str.
        baseDirectory = _baseDirectory;
    
        // Subdirectory will have the format of <InvoiceId>_<DateTimeStamp>_<WindowsTempFileName>
        randomFolderName = System.IO.Path::GetRandomFileName();
        subDirectoryName = _invoiceId + #filePartSeparator + strFileDateTime + #filePartSeparator + randomFolderName;
        baseDirectoryDotNet = System.IO.Path::Combine(baseDirectory, subDirectoryName);
    
        // let's go ahead and create the directory here.
        if(!System.IO.Directory::Exists(baseDirectoryDotNet))
        {
            System.IO.Directory::CreateDirectory(baseDirectoryDotNet);
        }
    
        newDirectory = baseDirectoryDotNet;
    
        return newDirectory;
        
        //EPAY:  the following was added to keep class from failing on compile.  Remove it when/if we use epay
       // return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>