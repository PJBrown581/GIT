<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_SCF_Format</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class that all Positive Pay formats use.
/// </summary>
/// <remarks>
/// Class selects records and provides the basic file structure
/// Child classes override any methods that need data in the format
/// </remarks>

// Format structure:
//  File header
//      Format header
//      Format header line 2
//          Group header
//              Detail
//              Detail line 2
//          Group trailer
//          Group trailer line 2
//      Format trailer
//  File trailer

class SKS_SCF_Format
{
    SKS_SCF_FileNbr mFileNumber;
    SKS_SCF_FileDetail mSKS_SCF_FileDetail;  
    SKS_SCF_InvoiceFileFormat mSKS_SCF_InvoiceFileFormat;
    SKS_SCF_File mSKS_SCF_File;
    SKS_EB_FileHub mFileHub;
    str mErrorText;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fileClose</Name>
				<Source><![CDATA[
    private void fileClose()
    {
        // Flushs all in memory lines to file
        // Until this is called, the file will not exist.
        mFileHub.runAppendLineFlush();

        if(mFileHub.errorHasException())
        {
            mErrorText = mFileHub.errorException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileCreate</Name>
				<Source><![CDATA[
    private void fileCreate()
    {
        str fileName;

        fileName = mSKS_SCF_File.FilePath + @'\' + mSKS_SCF_File.FileName;
        
        mFileHub = SKS_EB_FileHub::construct();
        mFileHub.parmThrowErrorIfException(false);
        mFileHub.parmEncoding(0);
        mFileHub.setFileName(fileName);
        mFileHub.parmFileRemoveUTF8BOM(this.getRemoveBOM());
        mFileHub.parmFileCRLF(this.getCRLF());

        mFileHub.runFileDelete();
        if(mFileHub.errorHasException())
        {
            mErrorText = mFileHub.errorException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoveBOM</Name>
				<Source><![CDATA[
    protected boolean getRemoveBOM()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCRLF</Name>
				<Source><![CDATA[
    protected boolean getCRLF()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileCRLF</Name>
				<Source><![CDATA[
    private void fileCRLF()
    {
        //FileHub implementation is different than 2012
        // Set getCRLF to false if No CRLF is needed.
        // Add LF after each line if needed
        // FileFormat CRLF property is not currently used
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
        {
            mFileHub.runAppendLine(_result);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    public str getErrorText()
    {
        ;
        return mErrorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is the driver for all Positive Pay file formats
    /// </summary>
    /// <remarks>
    /// Selects records from SKS_SCF_FileDetail and iterates through them
    /// </remarks>
    
    private void run()
    {
        CurrencyCode prevCurrencyCode;
        AccountNum prevAccountNum;

        // Load file info
        mSKS_SCF_File = SKS_SCF_File::find(mFileNumber);
        if(!mSKS_SCF_File)
        {
            error(strFmt("@SKS:SCFFileDetailsNotFound", mFileNumber));
        }
    
        // Create file
        this.fileCreate();
        if(mErrorText != '')
        {
            return;
        }
    
        
        // Select all payment records
        this.selectPaymentRecords();

        this.getSKS_SCF_FileFormat();

        // File header from PP Header/Trailer
        //this.sectionFileHeader();
    

        // Format header
        this.sectionFormatHeader();
        this.sectionFormatHeaderLine2();
    
        while(mSKS_SCF_FileDetail)
        {
            if(mSKS_SCF_FileDetail.CurrencyCode != prevCurrencyCode ||
                mSKS_SCF_FileDetail.VendorAccount != prevAccountNum)
            {
                // Group header
                this.sectionGroupHeader();
            }
    
            // Detail lines
            this.sectionDetail();
            this.sectionDetailLine2();
    
            prevCurrencyCode = mSKS_SCF_FileDetail.CurrencyCode;
            prevAccountNum = mSKS_SCF_FileDetail.VendorAccount;
            next mSKS_SCF_FileDetail;

            if(mSKS_SCF_FileDetail.CurrencyCode != prevCurrencyCode ||
                mSKS_SCF_FileDetail.VendorAccount != prevAccountNum)
            {
                // Group trailer
                this.sectionGroupTrailer();
                this.sectionGroupTrailerLine2();
            }
        }
    
        // Format trailer
        this.sectionFormatTrailer();
    
        // File trailer from PP Header/Trailer
        this.sectionFileTrailer();
    
        // Close file
        this.fileClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionDetail</Name>
				<Source><![CDATA[
    protected void sectionDetail()
    {
        this.fileWrite(this.txtDetail());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionDetailLine2</Name>
				<Source><![CDATA[
    private void sectionDetailLine2()
    {
        this.fileWrite(this.txtDetailLine2());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFileTrailer</Name>
				<Source><![CDATA[
    /*
    // This code is the same for all reports
    private void sectionFileHeader()
    {
        ;
        select ValueString from mSKS_SCF_FileDetail
            where mSKS_SCF_FileDetail.FileNbr == mFileNumber &&
                  mSKS_SCF_FileDetail.RecSection == SKS_PP_RecSection::Header;
    
        while(mSKS_SCF_FileDetail)
        {
            this.fileWrite(this.txtFileHeaderTrailer());
    
            next mSKS_SCF_FileDetail;
        }
    }*/

    // This code is the same for all reports
    private void sectionFileTrailer()
    {
        ;
        select ValueString from mSKS_SCF_FileDetail
            where mSKS_SCF_FileDetail.FileNbr == mFileNumber &&
                  mSKS_SCF_FileDetail.RecSection == SKS_PP_RecSection::Trailer;
    
        while(mSKS_SCF_FileDetail)
        {
            this.fileWrite(this.txtFileHeaderTrailer());
    
            next mSKS_SCF_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFormatHeader</Name>
				<Source><![CDATA[
    private void sectionFormatHeader()
    {
        this.fileWrite(this.txtFormatHeader());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFormatHeaderLine2</Name>
				<Source><![CDATA[
    private void sectionFormatHeaderLine2()
    {
        this.fileWrite(this.txtFormatHeaderLine2());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionFormatTrailer</Name>
				<Source><![CDATA[
    private void sectionFormatTrailer()
    {
        this.fileWrite(this.txtFormatTrailer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionGroupHeader</Name>
				<Source><![CDATA[
    protected void sectionGroupHeader()
    {
        this.fileWrite(this.txtGroupHeader());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionGroupTrailer</Name>
				<Source><![CDATA[
    protected void sectionGroupTrailer()
    {
        this.fileWrite(this.txtGroupTrailer());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionGroupTrailerLine2</Name>
				<Source><![CDATA[
    protected void sectionGroupTrailerLine2()
    {
        this.fileWrite(this.txtGroupTrailerLine2());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileNbr</Name>
				<Source><![CDATA[
    public void setFileNbr(SKS_SCF_FileNbr _fileNbr)
    {
        mFileNumber = _fileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetailLine2</Name>
				<Source><![CDATA[
    protected str txtDetailLine2()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFileHeaderTrailer</Name>
				<Source><![CDATA[
    // This code is the same for all reports
    private str txtFileHeaderTrailer()
    {
        str result;
        ;
     //   result = SKS_PP_StringFormats::strFill(mSKS_PP_FileFormat.RecordLen, mSKS_SCF_FileDetail.ValueString, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
      //  result = SKS_PP_StringFormats::strFill(mSKS_SCF_FileFormat.RecordLen, mSKS_SCF_FileDetail.ValueString, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    protected str txtFormatHeader()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeaderLine2</Name>
				<Source><![CDATA[
    protected str txtFormatHeaderLine2()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatTrailer</Name>
				<Source><![CDATA[
    protected str txtFormatTrailer()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    protected str txtGroupHeader()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    protected str txtGroupTrailer()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailerLine2</Name>
				<Source><![CDATA[
    protected str txtGroupTrailerLine2()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueFromCode</Name>
				<Source><![CDATA[
    static server str getValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_SCF_InvoiceFileFormat _SKS_SCF_FileFormatAdditionalOptions, RefRecId _VendPaymRecId)
    {
        SKS_SCF_FileFormatAdditionalOptions lSKS_SCF_FileFormatAdditionalOptions;
        SKS_SCF_ProviderAdditionalOptions lSKS_SCF_ProviderAdditionalOptions;
        SKS_SCF_CodeLookupValues lSKS_SCF_CodeLookupValues;
        str ret = '';
    
        select firstonly FileFormatPaymSpecRecId, FormatFieldID, RecId, FieldType, FixedValue from lSKS_SCF_FileFormatAdditionalOptions
                                                                                   where lSKS_SCF_FileFormatAdditionalOptions.FileFormatPaymSpecRecId == _SKS_SCF_FileFormatAdditionalOptions.RecId &&
                                                                                         lSKS_SCF_FileFormatAdditionalOptions.FormatFieldID == _FormatFieldID 
                        join CodeLookupValuesRecId, FixedValue, FileFormatAddOptsRecId
                                                                                    from lSKS_SCF_ProviderAdditionalOptions
                                                                                   where lSKS_SCF_ProviderAdditionalOptions.FileFormatAddOptsRecId == lSKS_SCF_FileFormatAdditionalOptions.RecId
                                                                                      && lSKS_SCF_ProviderAdditionalOptions.VendorPaymRecId == _VendPaymRecId;

        if(lSKS_SCF_FileFormatAdditionalOptions.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select CodeValue, RecId from lSKS_SCF_CodeLookupValues where lSKS_SCF_CodeLookupValues.RecId == lSKS_SCF_ProviderAdditionalOptions.CodeLookupValuesRecId;
            ret =  lSKS_SCF_CodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_SCF_ProviderAdditionalOptions.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorCodelookupvalue</Name>
				<Source><![CDATA[
    static server str getVendorCodelookupvalue(SKS_EB_CodeId _FormatFieldID, SKS_SCF_InvoiceFileFormat _SKS_SCF_FileFormatAdditionalOptions, RefRecId _VendPaymRecId)
    {
        SKS_SCF_FileFormatAdditionalOptions lSKS_SCF_FileFormatAdditionalOptions;
        SKS_SCF_VendorAdditionalOptions lSKS_SCF_VednorAdditionalOptions;
        SKS_SCF_CodeLookupValues lSKS_SCF_CodeLookupValues;
        str ret = '';
    
        select firstonly FileFormatPaymSpecRecId, FormatFieldID, RecId, FieldType, FixedValue from lSKS_SCF_FileFormatAdditionalOptions
                                                                                   where lSKS_SCF_FileFormatAdditionalOptions.FileFormatPaymSpecRecId == _SKS_SCF_FileFormatAdditionalOptions.RecId &&
                                                                                         lSKS_SCF_FileFormatAdditionalOptions.FormatFieldID == _FormatFieldID
                        join CodeLookupValuesRecId, FixedValue, FileFormatAddOptsRecId
                                                                                    from lSKS_SCF_VednorAdditionalOptions
                                                                                   where lSKS_SCF_VednorAdditionalOptions.FileFormatAddOptsRecId == lSKS_SCF_FileFormatAdditionalOptions.RecId
                                                                                      && lSKS_SCF_VednorAdditionalOptions.VendorPaymRecId == _VendPaymRecId;

        if(lSKS_SCF_FileFormatAdditionalOptions.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select CodeValue, RecId from lSKS_SCF_CodeLookupValues where lSKS_SCF_CodeLookupValues.RecId == lSKS_SCF_VednorAdditionalOptions.CodeLookupValuesRecId;
            ret =  lSKS_SCF_CodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_SCF_VednorAdditionalOptions.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_SCF_FileFormat</Name>
				<Source><![CDATA[
    void getSKS_SCF_FileFormat()
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mSKS_EFT_FileFormatPaymSpec
        //------------------------------------------------------------------------------------------------------
        mSKS_SCF_InvoiceFileFormat = SKS_SCF_InvoiceFileFormat::find(mSKS_SCF_FileDetail.FormatId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_SCF_FileDetail
          order by mSKS_SCF_FileDetail.VendorAccount,
                   mSKS_SCF_FileDetail.CurrencyCode
                    where mSKS_SCF_FileDetail.FileNbr == mFileNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositiveAmount</Name>
				<Source><![CDATA[
    real getPositiveAmount(real _amount)
    {
        real amount;

        amount = _amount;

        if(amount < 0)
        {
            amount = amount * -1;
        }
    
        return amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>