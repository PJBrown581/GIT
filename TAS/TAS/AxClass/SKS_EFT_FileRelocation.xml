<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FileRelocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implementation of file relocation
/// </summary>
class SKS_EFT_FileRelocation extends SKS_EFT_BaseFileRelocate
{
    #define.formatId('formatId')
    #define.formatClass('formatClass')
    str mErrorText;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFileAgainstFormat</Name>
				<Source><![CDATA[
    private str checkFileAgainstFormat(str _filename, str _formatId, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        ExecutePermission perm;
        SysDictClass locSysDictClass;
        Object locClassInstance;
        str locClassName = '';
        str locMatchedClass = '';
        System.Text.StringBuilder locsbClassName = new System.Text.StringBuilder();
    
        locsbClassName.Append('SKS_EFT_RF_Format_');
        locsbClassName.Append(_formatId);
        locsbClassName.Replace('-', '_');
        locClassName = locsbClassName.ToString();
    
        perm = new ExecutePermission();
        perm.assert();
    
        locSysDictClass = new SysDictClass(className2Id(LocClassName));
        locClassInstance = locSysDictClass.makeObject(); // Instantiate class
        locMatchedClass = locSysDictClass.callObject('getFormatId', locClassInstance, _filename, _serverPath, _sks_BF_BankIntType); // Run
        mErrorText = locSysDictClass.callObject('getErrorText', locClassInstance);
    
        CodeAccessPermission::revertAssert();
        return locMatchedClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    private SKS_EFT_RF_File getFile(str _FormatClassName, str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        SKS_EFT_RF_File rtnval;
        ExecutePermission perm;
        SysDictClass locSysDictClass;
        Object locClassInstance;
    
        perm = new ExecutePermission();
        perm.assert();
        locSysDictClass = new SysDictClass(className2Id(_FormatClassName));
        locClassInstance = locSysDictClass.makeObject(); // Instantiate class
        rtnval = locSysDictClass.callObject('getFile', locClassInstance, _filename, _serverPath, _sks_BF_BankIntType); // Run
        mErrorText = locSysDictClass.callObject('getErrorText', locClassInstance);
        locSysDictClass = null;
        locClassInstance = null;
        CodeAccessPermission::revertAssert();
        if(mErrorText != '')
        {
            //File Creation Failed
            error(mErrorText);
            //Clear List
            rtnval = null;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    private struct getFormatId(SKS_EFT_RF_DirProfile _SKS_EFT_RF_DirProfile, str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {
        str locFormatID = '';
        struct locFormatProfile;
        System.Text.StringBuilder locErrorMessage = new System.Text.StringBuilder();
    
        //reset the fileformatlist in case it was left in a non-start position
        _SKS_EFT_RF_DirProfile.resetFormatGroupList();
        //priming read
        locFormatProfile = _SKS_EFT_RF_DirProfile.getNextFormatProfile();
        while(strLen(locFormatID) == 0 && locFormatProfile != null)
        {
            if(locFormatProfile != null)
                locFormatID = this.checkFileAgainstFormat(_filename, locFormatProfile.value(#formatId), _serverPath, _sks_BF_BankIntType);
            if(strLen(locFormatID) == 0)
                locFormatProfile = _SKS_EFT_RF_DirProfile.getNextFormatProfile();
            else
            {
                locFormatProfile.value(#formatClass, locFormatID);
            }
        }
        if(strLen(locFormatID) == 0)
        {
            _SKS_EFT_RF_DirProfile.resetFormatGroupList();
            //LABEL:  Unable to find inbound eft format for file:  %1\n
            locErrorMessage.Append(strFmt(strFmtLB("@SKS2865"), _filename));
            //priming read
            locFormatProfile = _SKS_EFT_RF_DirProfile.getNextFormatProfile();
            while(locFormatProfile != null)
            {
                //LABEL:  Format attempted:  %1\n
                locErrorMessage.Append(strFmt(strFmtLB("@SKS2866"), locFormatProfile.value(#formatId)));
                locFormatProfile = _SKS_EFT_RF_DirProfile.getNextFormatProfile();
            }
            mErrorText =  locErrorMessage.ToString();
        }
        //reset the fileformatlist so that it is not left in a non-start position
        _SKS_EFT_RF_DirProfile.resetFormatGroupList();
        return locFormatProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFTAP_File</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPParameterNotUsed', "Parameter required by method signature")]
    private SKS_EFTAP_File getSKS_EFTAP_File(SKS_EFT_InboundFile _SKS_EFT_InboundFile, SKS_EFT_RF_SentFile _SKS_EFT_RF_SentFile, int _InOutKeyFormatKeyNumber, SKS_EB_Module _SKS_EB_Module)
    {
        //Primitives
        int loci;
        int locKeyFieldUsed;
        int locNumberOfFormats;
        str locFieldPrefix = 'InOutKeyFormat';
        //EDTs
        SKS_EFT_InOutKey locSKS_EFT_InOutKey;
        //Tables
        SKS_EFTAP_File locSKS_EFTAP_File;
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
        //The Following are used for the dynamically built query.  The query needs to choose a different field to match two depending on which format was used in FileGroup.
        DictTable locDictTable;
        FieldId locFieldId;
        Query locQuery;
        QueryRun locQueryRun;
        QueryBuildDataSource locQueryBuildDataSource; 
//                            locFileQueryBuildDataSource;
//                            locFormatQueryBuildDataSource, 
//                            locInboundFileGroupsQueryBuildDataSource;
        QueryBuildRange locQueryBuildRange;
        //Instance Variables
        SKS_EFT_RF_Transaction locSKS_EFT_RF_Transactions;
        //This block of code determines how many key fields exist in a single record
        locNumberOfFormats = SKS_EFT_Common::getNumberOfFormats();
        
        //Local Methods       
        void AttemptTransLevelMatch()
        {
            //Priming Read
            locSKS_EFT_RF_Transactions = _SKS_EFT_RF_SentFile.getTransaction();
            while(!locSKS_EFTAP_File && locSKS_EFT_RF_Transactions != null)
            {
                locDictTable = new DictTable(tableNum(SKS_EFT_FileDetail));
                locFieldId = locDictTable.fieldName2Id(locFieldPrefix + int2str(_InOutKeyFormatKeyNumber));
                locQuery = new Query();
                locQuery.allowCrossCompany(true);
                locQueryBuildDataSource = locQuery.addDataSource(tableNum(SKS_EFT_FileDetail));
                locQueryBuildRange = locQueryBuildDataSource.addRange(locFieldId);
                locQueryBuildRange.value(queryValue(((!locSKS_EFT_RF_Transactions.getID()) ? '' : locSKS_EFT_RF_Transactions.getID())));

                //locDictTable = new DictTable(tableNum(SKS_EFT_InboundFilegroups));
                //locFieldId = locDictTable.fieldName2Id('InboundFormatId' + int2str(_InOutKeyFormatKeyNumber));
                //locInboundFileGroupsQueryBuildDataSource.addRange(locFieldId).value(queryValue( _SKS_EFT_InboundFile.InboundFormatId));
                
                locQueryRun = new QueryRun(locQuery);
                if(locQueryRun.next())
                {
                    //the matching outbound trans has been found, so get the record
                    locSKS_EFT_FileDetail = locQueryRun.get(tableNum(SKS_EFT_FileDetail));
                    //Now that you have a detail record from the file, you can get the parent file.
                    select forupdate crossCompany locSKS_EFTAP_File where locSKS_EFTAP_File.RecId == locSKS_EFT_FileDetail.FileRecId;
                    if(locQueryRun.next())
                    {
                        //Found TWO, FAIL
                        throw Error("@SKS:MultMatchError");
                    }
                }
                locSKS_EFT_RF_Transactions = _SKS_EFT_RF_SentFile.getTransaction();
            }
        }

        //This block of code determins which key is populated
        locKeyFieldUsed = 0;
        for(loci = 1; loci <= locNumberOfFormats; loci++)
        {
            locSKS_EFT_InOutKey = _SKS_EFT_InboundFile.getFieldValue(locFieldPrefix + int2str(loci));
            if(strLen(locSKS_EFT_InOutKey) > 0)
            {
                locKeyFieldUsed = loci;
                break;
            }
        }
        //This block of code retrieves the outbound EFT File's record
        if(loci <= locNumberOfFormats)//  10353 if a key was found in the allowed fields it will be equal to or less tahn the max number of inbound formats.
        {
            if(_SKS_EFT_InboundFile.getFieldValue(locFieldPrefix + int2str(loci)) != '')
            {
                locDictTable = new DictTable(tableNum(SKS_EFTAP_File));
                locFieldId = locDictTable.fieldName2Id(locFieldPrefix + int2str(locKeyFieldUsed));
                locQuery = new Query();
                locQuery.allowCrossCompany(true);
                locQueryBuildDataSource = locQuery.addDataSource(tableNum(SKS_EFTAP_File));
                locQueryBuildRange = locQueryBuildDataSource.addRange(locFieldId);
                locQueryBuildRange.value(_SKS_EFT_InboundFile.getFieldValue(locFieldPrefix + int2str(locKeyFieldUsed)));
                locQueryRun = new QueryRun(locQuery);
                if(locQueryRun.next())
                {
                    //the matching outbound has been found, so get the record, set the relationship and call the findStatus
                    locSKS_EFTAP_File = locQueryRun.get(tableNum(SKS_EFTAP_File));
                }
                if(!locSKS_EFTAP_File && strStartsWith(strUpr(_SKS_EFT_InboundFile.InboundBankID), 'BOFA'))
                {
                    AttemptTransLevelMatch();
                }
            }
        }
        else//there was no file level key, match on the transaction key 10353 -->
        {
            AttemptTransLevelMatch();
        }
        // <-- 10353
        return locSKS_EFTAP_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RelocationProcess</Name>
				<Source><![CDATA[
    public void RelocationProcess(SKS_EB_CommProcess   _CommProcess, SKS_BF_BankIntType _sksBankIntType = SKS_BF_BankIntType::FileHubLocal, Batch bat = null)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_sksBankIntType);
        //SKS_EFT_FileFormat locSKS_EFT_FileFormat;
        SKS_EFT_RF_DirProfile locSKS_EFT_RF_DirProfile;
        List locListFilesToProcess;
        ListEnumerator locFilesToProcessEnumerator;
        str locFilename;
        struct locFormatIDandKeyNumber;
        SKS_EFT_RF_File locSKS_EFT_RF_File;
        SKS_EFTAP_File locSKS_EFTAP_File;
        BankAccountTable locBankAccountTable;
        LedgerJournalTrans locLedgerJournalTrans;
        SKS_EFT_RF_SentFile locSKS_EFT_RF_SentFile;
        SKS_EFT_InboundFile locSKS_EFT_InboundFile;
        SKS_EFT_BANK locSKS_EFT_Bank;
        boolean locSKS_EFTAP_FileFound;
        boolean locAccountFound;
        container locCompany;
        str       locToPath;
        //<SKS-begin>
        SKS_EFTAR_Bank  sks_EFTAR_Bankloc;
        SKS_EFTBTB_Bank  sks_EFTBTB_Bankloc;
        SKS_EFTCNP_Bank  sks_EFTCNP_Bankloc;
        SKS_EB_CommProcess locSKS_EB_CommProcess;

        super(_CommProcess, _sksBankIntType);

        boolean errorFlag = false;
    
        locToPath = _sksBankIntType == SKS_BF_BankIntType::BankFabric ? _CommProcess.RelocBankFabricLocation : _CommProcess.RelocFilePath;

        changeCompany(_CommProcess.RelocCompany)
        {   

            if (_sksBankIntType == SKS_BF_BankIntType::BankFabric)  //BankFabric
            {
                locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(_CommProcess.RelocBankFabricLocation, _CommProcess.RelocCompany, _CommProcess.RelocInboundFileGroupId);
            }
            else
            {
                locSKS_EFT_RF_DirProfile = new SKS_EFT_RF_DirProfile(_CommProcess.RelocFilePath, _CommProcess.RelocCompany, _CommProcess.RelocInboundFileGroupId);
            }

            locListFilesToProcess  = locSKS_EB_FileHub.runDirectoryGetFiles(locSKS_EFT_RF_DirProfile.get_Directory());
            locFilesToProcessEnumerator = locListFilesToProcess.getEnumerator();
            locFilesToProcessEnumerator.reset();
            while(locFilesToProcessEnumerator.moveNext())
            {
                locAccountFound = false;
                locSKS_EFTAP_FileFound = false;
                locFilename = locFilesToProcessEnumerator.current();
                
                if (_sksBankIntType == SKS_BF_BankIntType::BankFabric)
                {
                    locFilename = System.IO.Path::Combine(_CommProcess.RelocBankFabricLocation, locFilename);
                }

                locFormatIDandKeyNumber = this.getFormatId(locSKS_EFT_RF_DirProfile, locFilename, true, _sksBankIntType);
                if(locFOrmatIDandkeyNumber != null)
                {
                    locSKS_EFT_RF_File = this.getFile(locFormatIDandKeyNumber.value(#formatClass), locFilename, true, _sksBankIntType);
                    if(locSKS_EFT_RF_File == null)
                    {
                        Error(strFmt("@SKS2864", locFilename));
                        this.MoveFileToErrors(locFilename, locToPath,_sksBankIntType);
                    }
                }
                //if(locFOrmatIDandkeyNumber != null)
                else
                {
                    Error(strFmt("@SKS2890", locSKS_EFT_RF_DirProfile.get_InboundFileGroupId()));
                    this.MoveFileToErrors(locFilename, locToPath,_sksBankIntType);                    

                    errorFlag = true;
                }
                //else
                //The file's data is now in locSKS_EFT_RF_File, locate the key, match to the outbound, file, find the bank account, and move.
                //Create a list of Unique AccountIDs in which to place this file.
                if(locSKS_EFT_RF_File)
                {
                    locSKS_EFT_RF_SentFile = locSKS_EFT_RF_File.getSentFile();
                    while(locSKS_EFT_RF_SentFile && !locAccountFound)
                    {
                        locSKS_EFTAP_File = null;
                        locSKS_EFT_InboundFile.InboundBankID = locSKS_EFT_RF_File.getBankID();
                        locSKS_EFT_InboundFile.setFieldValue('INOUTKEYFORMAT' + int2str(locFormatIDandKeyNumber.value('KeyNumber')), locSKS_EFT_RF_SentFile.getId());
                        locSKS_EFT_InboundFile.InboundFormatId = locFormatIDandKeyNumber.value(#formatId);
                        locSKS_EFTAP_File = this.getSKS_EFTAP_File(locSKS_EFT_InboundFile, locSKS_EFT_RF_SentFile, locFormatIDandKeyNumber.value('KeyNumber'), _CommProcess.Module);
                        if(locSKS_EFTAP_File && !locSKS_EFTAP_FileFound)
                        {
                            locSKS_EFTAP_FileFound = locSKS_EFTAP_FileFound;
                        }
                        if(locSKS_EFTAP_File)
                        {
                            locLedgerJournalTrans = null;
                            locLedgerJournalTrans = SKS_EFT_FileRelocation::getLedgerJournalTrans(locSKS_EFTAP_File);
                            if(locLedgerJournalTrans)
                            {
                                locAccountFound = true;
                            }
                        }
                        //(locSKS_EFTAP_File)
                        locSKS_EFT_RF_SentFile = locSKS_EFT_RF_File.getSentFile();
                    }
                
                    //while(locSKS_EFT_RF_SentFile)
                    //if the outgoing file was not found, error
                    if(!locSKS_EFTAP_File)
                    {
                        this.MoveFileToErrors(locFilename, System.IO.Path::GetDirectoryName(locFilename),_sksBankIntType);
                        error(strFmt("@SKS4025",
                                    locFilename));
                        throw Exception::Error;
                    }
                    //if no ledger journal trans was found, error
                    if(!locLedgerJournalTrans)
                    {
                        this.MoveFileToErrors(locFilename, System.IO.Path::GetDirectoryName(locFilename),_sksBankIntType);
                        error(strFmt("@SKS4026",
                                    locFilename));
                        throw Exception::Error;
                    }
    
                    locBankAccountTable = locLedgerJournalTrans.findBankAccountTableForOffset();
                    locCompany = [ locLedgerJournalTrans.Company() ];

                    select firstonly locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID ==  locSKS_EFTAP_File.CommID;
                    //<SKS-begin>
                    if (locSKS_EB_CommProcess.Module == SKS_EB_Module::APEFT)
                    {
                        //</SKS-end>
                        Select firstonly crossCompany:locCompany INBOUNDFILELOC, APBankFabricInboundFileLocation, RecId
                            from locSKS_EFT_Bank
                            where locSKS_EFT_BANK.BankAccountId == locBankAccountTable.AccountID
                                && locSKS_EFT_Bank.PaymMode == locLedgerJournalTrans.PaymMode;
                        if(!locSKS_EFT_Bank)
                        {
                            this.MoveFileToErrors(locFilename, System.IO.Path::GetDirectoryName(locFilename),_sksBankIntType);
                            error(strFmt("@SKS4027"
                                    ,locBankAccountTable.AccountID
                                    ,locBankAccountTable.company()
                                    ,locFilename));
                            throw Exception::Error;
                        }
                        if (_sksBankIntType == SKS_BF_BankIntType::BankFabric)
                        {
                            //This will only execute if all the previous validation passes
                            this.MoveFile(locFilename, locSKS_EFT_BANK.APBankFabricInboundFileLocation,_sksBankIntType);
                        }
                        else
                        {
                            this.MoveFile(locFilename, locSKS_EFT_BANK.InboundFileLoc,_sksBankIntType);
                        }

                        //<SKS-begin>
                    }
                    //</SKS-end>
                }

                //<SKS-begin>
                if (locSKS_EB_CommProcess.Module == SKS_EB_Module::AREFT)
                {
                    Select firstonly crossCompany:locCompany SKS_DD_InboundFileLoc, ARBankFabricInboundFileLoc, RecId
                        from sks_EFTAR_Bankloc
                        where sks_EFTAR_Bankloc.BankAccountId == locBankAccountTable.AccountID
                            && sks_EFTAR_Bankloc.PaymMode == locLedgerJournalTrans.PaymMode;
                    if(!sks_EFTAR_Bankloc)
                    {
                        this.MoveFileToErrors(locFilename, System.IO.Path::GetDirectoryName(locFilename),_sksBankIntType);
                        error(strFmt("@SKS4027"
                                ,locBankAccountTable.AccountID
                                ,locBankAccountTable.company()
                                ,locFilename));
                        throw Exception::Error;
                    }
                    if (_sksBankIntType == SKS_BF_BankIntType::BankFabric)
                    {
                        //This will only execute if all the previous validation passes
                        this.MoveFile(locFilename, sks_EFTAR_Bankloc.ARBankFabricInboundFileLoc,_sksBankIntType);
                    }
                    else
                    {
                        this.MoveFile(locFilename, sks_EFTAR_Bankloc.SKS_DD_InboundFileLoc,_sksBankIntType);
                    }                    
                }
                if (locSKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer)
                {
                    Select firstonly crossCompany:locCompany BTBInboundFileLoc, BTBBankFabricInboundFileLocation, RecId
                        from sks_EFTBTB_Bankloc
                        where sks_EFTBTB_Bankloc.BankAccountId == locBankAccountTable.AccountID
                            && sks_EFTBTB_Bankloc.PaymMode == locLedgerJournalTrans.PaymMode;
                    if(!sks_EFTBTB_Bankloc)
                    {
                        this.MoveFileToErrors(locFilename, System.IO.Path::GetDirectoryName(locFilename),_sksBankIntType);
                        error(strFmt("@SKS4027"
                                ,locBankAccountTable.AccountID
                                ,locBankAccountTable.company()
                                ,locFilename));
                        throw Exception::Error;
                    }

                    if (_sksBankIntType == SKS_BF_BankIntType::BankFabric)
                    {
                        //This will only execute if all the previous validation passes
                        this.MoveFile(locFilename, sks_EFTBTB_Bankloc.BTBBankFabricInboundFileLocation,_sksBankIntType);
                    }
                    else
                    {
                        //This will only execute if all the previous validation passes
                        this.MoveFile(locFilename, sks_EFTBTB_Bankloc.BTBInboundFileLoc,_sksBankIntType);
                    }
                }
                if (locSKS_EB_CommProcess.Module == SKS_EB_Module::CustomerReimbursements)
                {
                    Select firstonly crossCompany:locCompany CNPInboundFileLoc, CNPBankFabricInboundFileLocation, RecId
                        from sks_EFTCNP_Bankloc
                        where sks_EFTCNP_Bankloc.BankAccountId == locBankAccountTable.AccountID
                            && sks_EFTCNP_Bankloc.PaymMode == locLedgerJournalTrans.PaymMode;
                    if(!sks_EFTCNP_Bankloc)
                    {
                        this.MoveFileToErrors(locFilename, System.IO.Path::GetDirectoryName(locFilename),_sksBankIntType);
                        error(strFmt("@SKS4027"
                                ,locBankAccountTable.AccountID
                                ,locBankAccountTable.company()
                                ,locFilename));
                        throw Exception::Error;
                    }
                    if (_sksBankIntType == SKS_BF_BankIntType::BankFabric)
                    {
                        //This will only execute if all the previous validation passes
                        this.MoveFile(locFilename, sks_EFTCNP_Bankloc.CNPBankFabricInboundFileLocation,_sksBankIntType);
                    }
                    else
                    {
                        //This will only execute if all the previous validation passes
                        this.MoveFile(locFilename, sks_EFTCNP_Bankloc.CNPInboundFileLoc,_sksBankIntType);
                    }
                }
                //</SKS-end>
            }
            //while(locFilesToProcessEnumerator.moveNext())
        }
        //changeCompany(_CommProcess.RelocCompany)
    
        if(errorFlag)
        {           
            throw Exception::Error;
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAccount</Name>
				<Source><![CDATA[
    private static List addAccount(List _UniqueAccounts, struct _PotentialAccount)
    {
        boolean locItemExists = false;
        ListEnumerator locUniqueAccountEnumerator;
        struct locCurrentAccount;
    
        if(_UniqueAccounts)
        {
            locUniqueAccountEnumerator = _UniqueAccounts.getEnumerator();
            while(locUniqueAccountEnumerator.moveNext())
            {
                locCurrentAccount = locUniqueAccountEnumerator.current();
                if(locCurrentAccount.value('locCompany') == _PotentialAccount.value('locCompany')
                        && locCurrentAccount.value('locAccountID') == _PotentialAccount.value('locAccountID'))
                {
                    locItemExists = true;
                    break;
                }
            }
            if(!locItemExists)
            {
                _UniqueAccounts.addEnd(_PotentialAccount);
            }
        }
        return _UniqueAccounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTrans</Name>
				<Source><![CDATA[
    private static LedgerJournalTrans getLedgerJournalTrans(SKS_EFTAP_File _SKS_EFTAP_FILE)
    {
        //Tables
        SKS_EFT_FileDetail locSKS_EFT_FileDetail;
        //The Following are used for the dynamically built query.  The query needs to choose a different field to match two depending on which format was used in FileGroup.
        LedgerJournalTrans locLedgerJournalTrans;
        container companies;
    
        companies = [ _SKS_EFTAP_FILE.company() ];
        //This block of code determins which key is populated
        Select FirstOnly crossCompany:companies PaymentLineRecId from locSKS_EFT_FileDetail where locSKS_EFT_FileDetail.FileRecId == _SKS_EFTAP_FILE.RecId;
        Select FirstOnly crossCompany locLedgerJournalTrans where locLedgerJournalTrans.Recid == locSKS_EFT_FileDetail.PaymentLineRecId;
        return locLedgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>