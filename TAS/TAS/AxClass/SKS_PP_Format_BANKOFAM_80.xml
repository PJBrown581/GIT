<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BANKOFAM_80</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_BANKOFAM_80 Extends SKS_PP_Format_BankGroup
{
    int mTotal_Cnt;
    real mAmtTotal;
    int mPrintFooter;
    int mHashTotal;
    str mFooterBankAcct;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmt</Name>
				<Source><![CDATA[
    real calculateAmt(SKS_PP_FileDetail SKS_PP_FileDetail_2)
    {
        real retVal;
        ;
    
        if (SKS_PP_FileDetail_2.ChkType != SKS_PP_ChequeType::Cheque)
        {
            retVal = 0;
        }
        else
        {
            retVal = Abs(SKS_PP_FileDetail_2.ChkCuryAmt);
        }
    
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Bank of Ameria 80 Format
        // 1-10   Account Number
        // 11-11  Payment Status (Check = ' '; Void = '2')
        // 12-12  Filler (Space)
        // 13-22  Payment ID (Check Number)
        // 23-34  Payment Amount
        // 35-40  Payment Date MMDDYY Format
        // 41-77  Payee Name
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        //   RecType: (within Payments)
        //   10V - Voucher
        //   20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
    
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        Str Amt;
        Str ItemType;
        int Mult;
        Str Payee1;
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        Payee1 = mSKS_PP_FileDetail.VendName;
        mFooterBankAcct = mSKS_PP_FileDetail.BnkBankAcct;
        // Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = '2';
        }
        else
        {
            ItemType = ' ';
        }
        Amt =  SKS_PP_StringFormats::strMoney(mSKS_PP_FileDetail.ChkCuryAmt*Mult,12);
    
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::left));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::LEFT));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(37, Payee1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::right));
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::right));
    
        mTotal_Cnt++;
        mAmtTotal = mAmtTotal + this.calculateAmt(mSKS_PP_FileDetail);
        mHashTotal = mHashTotal + str2int(strrem(mSKS_PP_FileDetail.ChkRefNbr, ' '));
    
    
        return sb.ToString();
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // Bank of America - 80 Trailer Record
    
        // 1-10   Account Number
        // 11-11  Total Indicator
        // 12-12  Filler (Space)
        // 13-22  Payment Count
        // 23-34  Total Amount
        // 35-80  Filler (Spaces)
    
    protected str txtGroupTrailer()
    {
        Str chkSum;
        str Cnt;
        str Hash;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
    
        Hash = SKS_PP_StringFormats::strFill(10, int2str(mHashTotal), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        mHashTotal = 0;
    
        // Number of Checks
        // 5 Long Right Justified, LZF
        Cnt =  SKS_PP_StringFormats::strFill(10, int2str(mTotal_Cnt), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        mTotal_Cnt = 0;
    
        chkSum = SKS_PP_StringFormats::strMoney(mAmtTotal, 12);
        mAmtTotal = 0;
    
        Hash = SKS_PP_StringFormats::strFill(10, int2str(mHashTotal), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
    
    
        sb.Append(SKS_PP_StringFormats::strFill(10,mFooterBankAcct,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append('T');
        sb.Append(' ');
        sb.Append(Cnt);
        sb.Append(chkSum);
        sb.Append(SKS_PP_StringFormats::strFill(46, '' , SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>