<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_AMEX_BIP_PI5_800</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_AMEX_BIP_PI5_800 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_AMEX_BIP_PI5_800 extends SKS_EFT_Format
{
    #define.FormatVersion('20220308')
    AmountMst totpaymentAmt, totInvAmt;
    int       totpaymentcnt, totInvCnt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        
        this.rec_FILE();
        
        while(mSKS_EFT_FileDetail)
        
        {
            totInvAmt = 0;
            totInvCnt = 0;
            
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
            
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
            
            this.rec_PAYMENT();
            
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            
            {
                if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                
                {
                    this.rec_INVOICE(invSKS_EFT_FileDetail);
                    
                }
                
            }
            
            this.rec_INVCTL();
            
            next mSKS_EFT_FileDetail;
            
        }
        
        this.rec_PAYCTL();
        
        this.rec_EOF();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_EOF</Name>
				<Source><![CDATA[
    boolean rec_EOF()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        sb.Append(SKS_PP_StringFormats::strFill(10, 'EOF', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FILE</Name>
				<Source><![CDATA[
    boolean rec_FILE()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        sb.Append(SKS_PP_StringFormats::strFill(10, 'FILE', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(100, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        
        sb.Append(SKS_PP_StringFormats::strTimeHHMMSS());
        
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_File.FileNbr, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(656, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_INVCTL</Name>
				<Source><![CDATA[
    boolean rec_INVCTL()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        
        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
                where
                    tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        
        sb.Append(SKS_PP_StringFormats::strFill(10, 'INVCTL', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(10, num2str(totInvCnt,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, num2str(totInvAmt * -1,0,2,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        sb.Append(SKS_PP_StringFormats::strFill(762, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_INVOICE</Name>
				<Source><![CDATA[
    boolean rec_INVOICE(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        totInvCnt++;
        
        sb.Append(SKS_PP_StringFormats::strFill(10, 'INVOICE', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
        
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, invSKS_EFT_FileDetail.InvoiceNumber, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountCur * -1, 0, 2, 1, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        totInvAmt += invSKS_EFT_FileDetail.InvoiceSettleAmountCur;
        
        sb.Append(SKS_PP_StringFormats::strFill(18, num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountCur) * -1, 0, 2, 1, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(100, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, num2str(0, 0, 2, 1, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        sb.Append(SKS_PP_StringFormats::strFill(215, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PAYCTL</Name>
				<Source><![CDATA[
    boolean rec_PAYCTL()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        
        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
                where
                    tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        
        sb.Append(SKS_PP_StringFormats::strFill(10, 'PAYCTL', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(10, num2str(totpaymentcnt,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, num2str(totpaymentAmt * -1,0,2,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        sb.Append(SKS_PP_StringFormats::strFill(762, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PAYMENT</Name>
				<Source><![CDATA[
    boolean rec_PAYMENT()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        totpaymentcnt++;
        
        sb.Append(SKS_PP_StringFormats::strFill(10, 'PAYMENT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(20, SKS_EFT_Format::getCodelookupvalue('BuyerPmtId', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, msks_eft_filedetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(18, num2str(msks_eft_filedetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        totpaymentAmt += msks_eft_filedetail.InvoiceSettleAmountPmtCur;
        
        sb.Append(SKS_PP_StringFormats::strFill(3, msks_eft_filedetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(20, msks_eft_filedetail.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(20, SKS_EFT_Format::getCodelookupvalue('BuyerLineOfBussiness', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        if(VendTable::find(mSKS_EFT_FileDetail.AccountNum).email())
        {
            sb.Append(SKS_PP_StringFormats::strFill(50, VendTable::find(msks_eft_filedetail.AccountNum).email(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(50, VendTable::find(msks_eft_filedetail.AccountNum).telefax(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        sb.Append(SKS_PP_StringFormats::strFill(50, msks_eft_filedetail.AccountName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
        
        sb.Append(SKS_PP_StringFormats::strFill(401, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>