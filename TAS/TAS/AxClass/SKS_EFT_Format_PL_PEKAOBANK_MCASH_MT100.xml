<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_PL_PEKAOBANK_MCASH_MT100</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_PL_PEKAOBANK_MCASH_MT100
/// </summary>
class SKS_EFT_Format_PL_PEKAOBANK_MCASH_MT100 extends SKS_EFT_Format
{
    #define.FormatVersion('20220609')
    real numOfOrders;
    boolean firstPayment = true;
    System.Text.StringBuilder sb = new System.Text.StringBuilder();
    int sequenceNumber;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_FileHeaderInfo();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
            
            this.rec_HeaderInfo();
            this.rec_20();
            this.rec_32A();
            this.rec_50();
            this.rec_52D();
            this.rec_57A();
            this.rec_57D();
            this.rec_59();
            this.rec_70();
            this.rec_71A();

            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileHeaderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///rec_FileHeaderInfo
    /// </summary>
    /// <returns>true</returns>
    boolean rec_FileHeaderInfo()
    {
        str references, address, address1;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;

        mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

        //      File header block
        sb.Append(':01:');

        references = strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('References', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));

        sb.Append(subStr(references, 1, 16));
        sb.AppendLine();
    
        sb.Append(':02:');

        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        sb.Append(num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,2,0));
        sb.AppendLine();

        sb.Append(':03:');
        sb.Append(num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
        sb.AppendLine();

        sb.Append(':04:');
        sb.Append(subStr(mSKS_EFT_FileDetail.BankBankTransit, 1, 11));
        sb.AppendLine();

        sb.Append(':05:');
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)), 1, 35));
        }
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
        {
            sb.AppendLine();
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr)
            {
                address = mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr;
            }
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
            {
                address += ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2;
            }
            sb.Append(subStr(strUpr(this.CharacterReplacement(address)), 1, 35));
        }
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
        {
            sb.AppendLine();
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)
            {
                address1 = mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode;
            }
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
            {
                address1 += ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;
            }
            sb.Append(subStr(strUpr(this.CharacterReplacement(address1)), 1, 35));
        }
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)
        {
            sb.AppendLine();
            sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)), 1, 35));
        }
        sb.AppendLine();

        sb.Append(':07:');
        sb.Append(strUpr(mSKS_EFT_File.FileName));
        sb.AppendLine();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HeaderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_HeaderInfo
    /// </summary>
    /// <returns>true</returns>
    boolean rec_HeaderInfo()
    {
        sequenceNumber++;

        //      BASIC HEADER BLOCK
        sb.Append('{1:F01');

        sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail.BankBankTransit)), 1, 8));
    
        sb.Append('XXXX');

        sb.Append(SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(sequenceNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        sb.Append('}');

        //       APPLICATION HEADER BLOCK
        sb.Append('{2:I100');

        sb.Append(subStr(strUpr(mSKS_EFT_FileDetail.DepSwiftNo), 1, 12));

        sb.Append('N');

        //       USER HEADER BLOCK
        sb.Append('1}');

        //       TEXT BLOCK
        sb.Append('{4:');

        sb.AppendLine();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_20</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_20
    /// </summary>
    /// <returns>true</returns>
    boolean rec_20()
    {
        sb.Append(':20:');
    
        //2     Transaction Reference Number / Client System Reference Number
        sb.Append(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16));
    
        sb.AppendLine();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_50</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_50
    /// </summary>
    /// <returns>true</returns>
    boolean rec_50()
    {
        str address, address1;

        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2  ||  mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode  ||
           mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity ||  mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)
        {
            sb.Append(':50:');
            
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
            {
                sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)), 1, 35));
            }
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
            {
                sb.AppendLine();
                if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr)
                {
                    address = mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr;
                }
                if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2)
                {
                    address += ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2;
                }
                sb.Append(subStr(strUpr(this.CharacterReplacement(address)), 1, 35));
            }
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
            {
                sb.AppendLine();
                if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)
                {
                    address1 = mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode;
                }
                if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
                {
                    address1 += ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;
                }
                sb.Append(subStr(strUpr(this.CharacterReplacement(address1)), 1, 35));
            }
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)
            {
                sb.AppendLine();
                sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)), 1, 35));
            }
            sb.AppendLine();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_52D</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_52D
    /// </summary>
    /// <returns>true</returns>
    boolean rec_52D()
    {
        str bankIban;
        
        sb.Append(':52D:');
        
        if(subStr(mSKS_EFT_FileDetail.BankBankIBAN, 1, 2) == 'PL')    
        {
            bankIBAN = subStr(mSKS_EFT_FileDetail.BankBankIBAN, 3, strLen(mSKS_EFT_FileDetail.BankBankIBAN));
        }
        else
        {
            bankIBAN = mSKS_EFT_FileDetail.BankBankIBAN;
        }
        sb.Append(strUpr(bankIBAN));
        sb.AppendLine();

        sb.Append(strUpr(bankIBAN));
        sb.AppendLine();
        
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);           
        sb.Append(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) ,0,2,2,0));
        sb.AppendLine();
        
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));      
        sb.Append(strUpr(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)));
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));     

        sb.Append(subStr(strUpr(mSKS_EFT_FileDetail.DepBankIBAN), 1, 2));
        sb.AppendLine();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_32A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_32A
    /// </summary>
    /// <returns>true</returns>
    boolean rec_32A()
    {
        //1     Tag
        sb.Append(':32A:');

        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
  
        sb.Append(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) ,0,2,2,0));

        sb.AppendLine();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_57A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_57A
    /// </summary>
    /// <returns>true</returns>
    boolean rec_57A()
    {
        if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            sb.Append(':57A:');

            //      Beneficiary bank Swift address
            sb.Append(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11));

            sb.AppendLine();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_57D</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_57D
    /// </summary>
    /// <returns>true</returns>
    boolean rec_57D()
    {
        if(mSKS_EFT_FileDetail.DepSwiftNo == '' &&
           (mSKS_EFT_FileDetail_BenBank.BenBankName || mSKS_EFT_FileDetail_BenBank.BenBankAddr ||  mSKS_EFT_FileDetail_BenBank.BenBankCity  || mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId))
        {
            sb.Append(':57D:');
            
            sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName)), 1, 35));

            if(mSKS_EFT_FileDetail_BenBank.BenBankAddr)
            {
                sb.AppendLine();
                sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr)), 1, 35));
            }
            if(mSKS_EFT_FileDetail_BenBank.BenBankCity)
            {
                sb.AppendLine();
                sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity)), 1, 35));
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)
            {
                sb.AppendLine();
                sb.Append(subStr(strUpr(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)), 1, 35));
            }
            sb.AppendLine();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_59</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_59
    /// </summary>
    /// <returns>true</returns>
    boolean rec_59()
    {
        str address, address1;

        if(mSKS_EFT_FileDetail.DepBankAcct  ||  mSKS_EFT_FileDetail_VendAddress.BeneName   ||  mSKS_EFT_FileDetail_VendAddress.BeneAddr   ||
           mSKS_EFT_FileDetail_VendAddress.BeneAddr2 ||  mSKS_EFT_FileDetail_VendAddress.BeneCity || mSKS_EFT_FileDetail_VendAddress.BeneZipPostal)
        {
            //1     Tag
            sb.Append(':59:');
    
            //2     Hyphen "/"
            sb.Append('/');

            //3     Beneficiary account number
            sb.Append(subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 35));
            
            
            //4     Beneficiary name
            if(mSKS_EFT_FileDetail_VendAddress.BeneName)
            {
                sb.AppendLine();
                sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName)), 1, 35));
            }

            //5     Beneficiary address
            if(mSKS_EFT_FileDetail_VendAddress.BeneAddr || mSKS_EFT_FileDetail_VendAddress.BeneAddr2)
            {
                sb.AppendLine();
                if(mSKS_EFT_FileDetail_VendAddress.BeneAddr)
                {
                    address = mSKS_EFT_FileDetail_VendAddress.BeneAddr;
                }
                if(mSKS_EFT_FileDetail_VendAddress.BeneAddr2)
                {
                    address += ' ' + mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
                }
                sb.Append(subStr(strUpr(this.CharacterReplacement(address)), 1, 35));
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal || mSKS_EFT_FileDetail_VendAddress.BeneCity)
            {
                sb.AppendLine();

                if(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal)
                {
                    address1 = mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
                }
                if(mSKS_EFT_FileDetail_VendAddress.BeneCity)
                {
                    address1 += ' ' + mSKS_EFT_FileDetail_VendAddress.BeneCity;
                }

                sb.Append(subStr(strUpr(this.CharacterReplacement(address1)), 1, 35));
            }
            if(mSKS_EFT_FileDetail_VendAddress.BeneState)
            {
                sb.AppendLine();
                sb.Append(subStr(strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState)), 1, 35));
            }
        }
        sb.AppendLine();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_70</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_70
    /// </summary>
    /// <returns>true</returns>
    boolean rec_70()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invoiceDetails;
        
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invoiceDetails += invSKS_EFT_FileDetail.InvoiceNumber + ' ';
        }
        invoiceDetails = this.CharacterReplacement(strUpr(subStr(invoiceDetails, 1, strLen(invoiceDetails)-1))); //SKS#DevOps:15867

        if(invoiceDetails)
        {
            //1     Tag
            sb.Append(':70:');
    
            //2    Payment details
            sb.Append(subStr(invoiceDetails, 1, 35));

            if(strLen(invoiceDetails) > 35)
            {
                sb.AppendLine();
                sb.Append(subStr(invoiceDetails, 35, 35));
            }
            if(strLen(invoiceDetails) > 70)
            {
                sb.AppendLine();
                sb.Append(subStr(invoiceDetails, 70, 35));
            }
        
            if(strLen(invoiceDetails) > 105)
            {
                sb.AppendLine();
                sb.Append(subStr(invoiceDetails, 105, 35));
            }
            sb.AppendLine();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_71A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_71A
    /// </summary>
    /// <returns>true</returns>
    boolean rec_71A()
    {
        str charges;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        
        //1     Tag
        charges = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
        if(charges)
        {
            sb.Append(':71A:');
    
            //2    cost accounting
            sb.Append(charges);
        }
        sb.AppendLine();
        sb.Append('-}');

        if(firstPayment)
        {
            select COUNT(InvoiceOrigAmountCur) from tmpSKS_EFT_FileDetail
                where
                    tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

            numOfOrders = tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur;

            firstPayment = false;
        }

        if(numOfOrders > 1)
        {
            sb.Append('$');
        }
        numOfOrders--;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 1252;     
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary&&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>