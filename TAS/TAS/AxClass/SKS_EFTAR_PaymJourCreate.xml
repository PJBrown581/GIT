<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFTAR_PaymJourCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to handle payment journal creation for IHB bank account
/// </summary>
class SKS_EFTAR_PaymJourCreate
{
    LedgerJournalTable      ledgerJournalTable;
    CompanyBankAccountId    sKS_EFTAR_IHBBankAccount;
    CompanyBankAccountId    IHBBankAccount;

    LedgerJournalTrans      ledgerJournalTrans;
    Voucher                 voucherLoc;
    MapIterator             miIHBJournals;
    Map                     insertIHBJournals = new Map(Types::String, Types::Record);
    int                     totalVoucher;
    MapIterator             mi;
    Map                     insertCompanydetails = new Map(Types::String, Types::Record);
    Map                     insertIHBPostedVoucher = new Map(Types::String, Types::String);
    container               conInHouseVoucher;
    ListEnumerator          listEnumInHouseVoucher;
    container               peekInHouseVoucher;
    DataAreaId              linkedIHBCompany;
    List listInHouseVoucher = new List(Types::Container);
    Map                     insertIHBdeletedJournals = new Map(Types::String, Types::Record);
    int                     countRecId;
    TransDate               changedLastStatementdate;
    boolean first = false;
            


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the intercompany payment and sub company journal for IHB.
    /// </summary>
    public void  run()
    {
        int cnt = 0;
        LedgerJournalTable      ledgerJournalTableLoc = null;
        LedgerJournalTable      ledgerJournalTableIHB;
        LedgerJournalTable      ledgerJournalTableLocSubCompany = null;
        LedgerJournalTable      ledgerJournalTableCustomer;
        
        container               voucherInsert;

        DataAreaId              vendorCompany;
        LedgerJournalTrans      ledgerJournalTransCustomer;
        LedgerJournalTable      ledgerJourTableCustomer;

        if(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment || ledgerJournalTable.JournalType == LedgerJournalType::Daily|| countRecId > 0)
        {
            str prevVoucher;

            while select ledgerJournalTrans
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
            {

                vendorCompany = null;
                changecompany(ledgerJournalTrans.Company)
                {
                    if(ledgerJournalTrans.AccountType == LedgerJournalACType::Cust && ledgerJournalTrans.LedgerDimension)
                    {
                        vendorCompany = SKS_LedgerJournalCheckPost_PostEvent::findVendorDataAreaId(CustTable::findByLedgerDimension(ledgerJournalTrans.LedgerDimension));
                    }
                }

                if (!conFind(voucherInsert, ledgerJournalTrans.Voucher) &&
                    vendorCompany &&
                    ledgerJournalTrans.SKS_IHB_InterComp)
                {
                    voucherInsert +=[ledgerJournalTrans.Voucher];

                    // Insert the standard posting  voucher details.
                    conInHouseVoucher = [ledgerJournalTrans.Voucher, ledgerJournalTrans.Voucher, ledgerJournalTable.DataAreaId, ledgerJournalTable.JournalNum];
                    listInHouseVoucher.addEnd(conInHouseVoucher);

                    select firstonly crosscompany ledgerJourTableCustomer
                            where ledgerJourTableCustomer.SKS_EFTAR_InterCompSourceDataAreaId == ledgerJournalTable.DataAreaId &&
                                ledgerJourTableCustomer.SKS_EFTAR_InterCompSourceJournalNum == ledgerJournalTable.JournalNum &&
                                ledgerJourTableCustomer.Posted == NoYes::No
                        join ledgerJournalTransCustomer
                            where ledgerJournalTransCustomer.SKS_IHB_InterOrigVoucher == ledgerJournalTrans.Voucher &&
                                ledgerJournalTransCustomer.JournalNum == ledgerJourTableCustomer.JournalNum;

                    if(ledgerJournalTransCustomer.SKS_IHB_InterOrigVoucher)
                    {
                        // Insert the IHB intercompany voucher details.
                        conInHouseVoucher = [ledgerJournalTransCustomer.Voucher, ledgerJournalTransCustomer.SKS_IHB_InterOrigVoucher, ledgerJournalTransCustomer.DataAreaId, ledgerJournalTransCustomer.JournalNum];
                        listInHouseVoucher.addEnd(conInHouseVoucher);
                    }

                }

                // Create journal in payment company.   
                this.setVoucher('');

                if (ledgerJournalTable.JournalType == LedgerJournalType::Daily)
                {
                    IHBBankAccount = ledgerJournalTrans.SKS_EFTGL_IHBBankAccount;
                }
                else if (ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)
                {
                    IHBBankAccount = ledgerJournalTrans.SKS_EFTAR_IHBBankAccount;
                }

                str interCompany;

                // Create IHB voucher if it from payment journal
                if((ledgerJournalTrans.Company != curExt() || ledgerJournalTrans.OffsetCompany != curExt()) && IHBBankAccount)
                {
                    if(ledgerJournalTrans.OffsetCompany != curExt())
                    {
                        first = true;
                        interCompany = ledgerJournalTrans.OffsetCompany;

                        ledgerJournalTableLoc = this.findIHBLedgerJournalTable(curExt());
                    }
                    else
                    {
                        interCompany = ledgerJournalTrans.Company;

                        ledgerJournalTableLoc = this.findIHBLedgerJournalTable(curExt());
                    }

                    ledgerJournalTableLoc = this.createJourInPaymSubCompany(ledgerJournalTableLoc, ledgerJournalTrans);

                    if(!insertIHBJournals.exists(curExt()))
                    {
                        insertIHBJournals.insert(curExt(), ledgerJournalTableLoc);
                    }

                    // Insert the standard posting  voucher details.
                    conInHouseVoucher = [ledgerJournalTrans.Voucher, ledgerJournalTrans.Voucher, ledgerJournalTable.DataAreaId, ledgerJournalTable.JournalNum];
                    listInHouseVoucher.addEnd(conInHouseVoucher);

                    // Insert the IHB payment company voucher details.
                    conInHouseVoucher = [voucherLoc, ledgerJournalTrans.Voucher, ledgerJournalTableLoc.DataAreaId, ledgerJournalTableLoc.JournalNum];
                    listInHouseVoucher.addEnd(conInHouseVoucher);
                    ledgerJournalTableLoc = null;

                    // create journal in sub company.
                    changecompany(interCompany)
                    {
                        LedgerJournalTrans      localLedgerjournaltrans;
                        LedgerJournalTrans      localLedgerjournaltrans1;

                        while select localLedgerjournaltrans1 where localLedgerjournaltrans1.ForeignVoucher == ledgerJournalTrans.Voucher
                            && localLedgerJournalTrans1.ForeignCompany == ledgerJournalTrans.DataAreaId
                            && localLedgerjournaltrans1.AccountType ==  LedgerJournalACType::Ledger
                            && localLedgerjournaltrans1.TransDate == ledgerJournalTrans.TransDate
                        {
                            Int found=0;

                            found = strScan(prevVoucher, localLedgerjournaltrans1.Voucher, 1, strLen(prevVoucher));

                            if(found != 0)
                            {
                                continue;
                            }
                            else
                            {
                                localLedgerjournaltrans = localLedgerjournaltrans1;
                                break;
                            }
                        }

                        prevVoucher += localLedgerjournaltrans.Voucher;

                        ledgerJournalTableLocSubCompany = this.findIHBLedgerJournalTable(interCompany);
                        ledgerJournalTableLocSubCompany =  this.createJourInPaymSubCompany(ledgerJournalTableLocSubCompany, localLedgerjournaltrans);

                        if(!insertIHBJournals.exists(interCompany))
                        {
                            insertIHBJournals.insert(interCompany, ledgerJournalTableLocSubCompany);
                        }
                        // Insert the standard intercompany posting  voucher details.
                        conInHouseVoucher = [localLedgerjournaltrans.Voucher, ledgerJournalTrans.Voucher, localLedgerjournaltrans.DataAreaId, localLedgerjournaltrans.JournalNum];
                        listInHouseVoucher.addEnd(conInHouseVoucher);
                        // Insert the IHB sub company voucher details.
                        conInHouseVoucher = [voucherLoc, ledgerJournalTrans.Voucher, ledgerJournalTableLocSubCompany.DataAreaId, ledgerJournalTableLocSubCompany.JournalNum];
                        listInHouseVoucher.addEnd(conInHouseVoucher);

                        ledgerJournalTableLocSubCompany = null;
                    }
                    cnt++;
                }
            }
        }
        else
        {
            while select ledgerJournalTrans
                group by Voucher
                    where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
            {
                this.iHBBankSweep(ledgerJournalTrans);
                cnt++;
            }
        }
        // Post the IHB journals.
        if(cnt > 0)
        {
            miIHBJournals = new MapIterator(insertIHBJournals);
    
            while (miIHBJournals.more())
            {
                ledgerJournalTableIHB = miIHBJournals.value();
                changecompany(miIHBJournals.key())
                {
                    SKS_EFTAR_PaymJourCreate::AutoPostJournal(ledgerJournalTableIHB);
                    this.insertIHBReverseJournalVoucher(ledgerJournalTableIHB);
                }
                miIHBJournals.next();
            }
        }

        while select crosscompany ledgerJournalTableCustomer
            where ledgerJournalTableCustomer.SKS_EFTAR_InterCompSourceDataAreaId == ledgerJournalTable.DataAreaId &&
                ledgerJournalTableCustomer.SKS_EFTAR_InterCompSourceJournalNum == ledgerJournalTable.JournalNum &&
                ledgerJournalTableCustomer.Posted == NoYes::No
        {
            if(ledgerJournalTableCustomer)
            {
                changecompany(ledgerJournalTableCustomer.DataAreaId)
                {
                    ledgerJournalTableIHB = ledgerJournalTableCustomer;
                    SKS_EFTAR_PaymJourCreate::AutoPostJournal(ledgerJournalTableIHB, NoYes::No);
                }
            }
        }
        
        // Update the IHB voucher details in voucher form.
        listEnumInHouseVoucher = listInHouseVoucher.getEnumerator();

        while(listEnumInHouseVoucher.moveNext())
        {
            peekInHouseVoucher = listEnumInHouseVoucher.current();
            SKS_EFTAR_PaymJourCreate::updateVoucherLinkForPostedIHBTrans(conPeek(peekInHouseVoucher,1), conPeek(peekInHouseVoucher,2), conPeek(peekInHouseVoucher,3), conPeek(peekInHouseVoucher,4)); // SKS_FDD_9664
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setledgerJournalTable</Name>
				<Source><![CDATA[
    void setledgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        ledgerJournalTable = _ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucher</Name>
				<Source><![CDATA[
    void setVoucher(Voucher _voucher)
    {
        voucherLoc = _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJourInPaymSubCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create sub company payment journal
    /// </summary>
    /// <param name = "_ledgerJournalTable"> journal table </param>
    /// <param name = "_ledgerJournalTrans"> journal line </param>
    /// <returns> returns created journal header </returns>
    public LedgerJournalTable createJourInPaymSubCompany(LedgerJournalTable _ledgerJournalTable, LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerDimensionDefaultAccount           ledgerDimension;
        LedgerJournalNameId                     journalName;
        LedgerJournalTable                      headerTable;
        GeneralJournalAccountEntry              generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry     subledgerVoucherLink;
        SKS_PP_Bank                             sKS_PP_Bank;

        journalName = SKS_EFTAR_PaymJourCreate::findInHouseBankJournal();
        if(_ledgerJournalTrans.Company != curExt() ||
            _ledgerJournalTrans.OffsetCompany != curExt())// && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            select firstonly * from generalJournalAccountEntry
                    where generalJournalAccountEntry.PostingType == LedgerPostingType::InterCompany
                exists join subledgerVoucherLink
                    where subledgerVoucherLink.GeneralJournalEntry == generalJournalAccountEntry.GeneralJournalEntry
                        && subledgerVoucherLink.AccountingDate == _ledgerJournalTrans.TransDate
                        && subledgerVoucherLink.Voucher == _ledgerJournalTrans.Voucher;

            ledgerDimension = generalJournalAccountEntry.LedgerDimension;
        }
        //else if(_ledgerJournalTrans.Company != curExt() && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
        //{
        //    ledgerDimension = _ledgerJournalTrans.OffsetLedgerDimension;
        //}
        else
        {
            ledgerDimension     = _ledgerJournalTrans.LedgerDimension;
            this.setVoucher('');
        }

        if(journalName)
        {
            if(_ledgerJournalTable == null)
            {
                headerTable = this.createJournalHeader(_ledgerJournalTable, journalName);
            }
            else
            {
                headerTable = _ledgerJournalTable;
            }
            this.createLedgerTrans(headerTable, LedgerJournalACType::Ledger, ledgerDimension, _ledgerJournalTrans);

            if(changedLastStatementdate != dateNull() && _ledgerJournalTrans.TransDate != changedLastStatementdate) // SKS_Bug_10515
            {
                info(strfmt("@SKS:SKSDateChanged",  voucherLoc,
                                                    _ledgerJournalTrans.TransDate,
                                                    changedLastStatementdate));
            }

            
            if((_ledgerJournalTrans.Company != curExt() || first) && IHBBankAccount)
            {
                ledgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(IHBBankAccount, LedgerJournalACType::Bank);
                first = false;
            }
            else
            {
                select firstonly BankAccountId from sKS_PP_Bank
                        where sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount == IHBBankAccount;
                
                if(sKS_PP_Bank.BankAccountId)
                {
                    ledgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(sKS_PP_Bank.BankAccountId, LedgerJournalACType::Bank);
                }
            }
            this.createLedgerTrans(headerTable, LedgerJournalACType::Bank, ledgerDimension, _ledgerJournalTrans);
        }
        return headerTable;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create journal header
    /// </summary>
    /// <param name = "_ledgerJournalTable"> ledger journal table </param>
    /// <param name = "_journalName"> journal name </param>
    /// <returns> returns created journal header </returns>
    public LedgerJournalTable createJournalHeader(LedgerJournalTable _ledgerJournalTable, LedgerJournalNameId _journalName)
    {
        LedgerJournalTable  header;
  
        header.clear();
        header.JournalName = _journalName;
        header.initFromLedgerJournalName(header.JournalName);
        header.SKS_EFTAR_IsIHBJournal = NoYes::Yes;
        header.insert();

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create ledger journal trans
    /// </summary>
    /// <param name = "_ledgerJournalTable"> ledger jorunal table buffer </param>
    /// <param name = "_accountType"> Ledger journal account type </param>
    /// <param name = "_ledgerDimension"> Ledger default dimension Account </param>
    /// <param name = "_ledgerJournalTrans"> journal trans </param>
    /// <param name = "_account">  Account container </param>
    /// <param name = "_isMultiBankTrans"> boolean </param>
    private  void createLedgerTrans(
        LedgerJournalTable _ledgerJournalTable,
        LedgerJournalACType _accountType,
        LedgerDimensionDefaultAccount _ledgerDimension,
        LedgerJournalTrans  _ledgerJournalTrans,
        container _account = conNull(),
        boolean   _isMultiBankTrans = false)
    {
        LedgerJournalTrans              trans;
        SKS_PP_Bank                     sKS_PP_Bank;
                  
        trans.clear();
        trans.initValue();
        LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(_ledgerJournalTable.JournalType);

        trans.JournalNum = _ledgerJournalTable.JournalNum;
        trans.TransDate = _ledgerJournalTrans.TransDate;
        trans.DocumentDate = _ledgerJournalTrans.DocumentDate;
        trans.AccountType = _accountType;
        trans.LedgerDimension = _ledgerDimension;
        ledgerJournalEngine.accountModified(trans);
        ledgerJournalEngine.initTaxItemGroup(trans);

        if(!voucherLoc && ledgerJournalEngine.takeNewVoucher())
        {
            trans.Voucher = new JournalVoucherNum(JournalTableData::newTable(_ledgerJournalTable)).getNew(false);
            this.setVoucher(trans.Voucher);
        }
        else
        {
            trans.Voucher = voucherLoc;
        }
        trans.PaymentStatus = CustVendPaymStatus::None;
        trans.PaymSpec = '';
        trans.PaymReference = '';
        if(_accountType == LedgerJournalACType::Bank)
        {
            if(abs(_ledgerJournalTrans.AmountCurCredit) > 0)
            {
                trans.AmountCurDebit = 0;
                trans.AmountCurCredit = _ledgerJournalTrans.AmountCurCredit;
            }
            else
            {
                trans.AmountCurCredit = 0;
                trans.AmountCurDebit = _ledgerJournalTrans.AmountCurDebit;
            }
            if(ledgerJournalTrans.DataAreaId == curExt())
            {
                trans.DefaultDimension = ledgerJournalTrans.OffsetDefaultDimension;
            }
            else
            {
                if(trans.DefaultDimension == 0)
                {
                    trans.DefaultDimension = ledgerJournalTrans.DefaultDimension;
                }
            }
        }
        else
        {
            if(abs(_ledgerJournalTrans.AmountCurCredit) > 0)
            {
                trans.AmountCurDebit = _ledgerJournalTrans.AmountCurCredit;
                trans.AmountCurCredit = 0;
            }
            else
            {
                trans.AmountCurDebit = 0;
                trans.AmountCurCredit = _ledgerJournalTrans.AmountCurDebit;
            }
            trans.DefaultDimension = ledgerJournalTrans.defaultDimension;
        }
        trans.company = _ledgerJournalTrans.DataAreaId;
        trans.CashDiscAmount = 0;
        trans.CurrencyCode = _ledgerJournalTrans.CurrencyCode;

        //trans.ExchRate = _ledgerJournalTrans.ExchRate;
        // apply the exchange rate based on current company transaction "trans"
        trans.ExchRate = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(trans.Company).RecId), trans.CurrencyCode, trans.TransDate).getExchangeRate1();
        trans.ExchRateSecond = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(trans.Company).RecId), trans.CurrencyCode, trans.TransDate).getExchangeRate2();
        trans.Triangulation = _ledgerJournalTrans.Triangulation;
        //As part of D365 8.1 application version the new reporting currency fields(ReportingCurrencyExchRate, ReportingCurrencyExchRateSecondary) are added. The below method check will ensure those fields exist on the version before attempting to populate them
        SysDictClass sysDictClass = new SysDictClass(className2Id(classStr(LedgerJournalEngine_Server)));
        if (sysDictClass && sysDictClass.hasStaticMethod('reportingCurrencyModified'))
        {
            trans.(fieldName2id(tableNum(LedgerJournalTrans), 'ReportingCurrencyExchRate')) = _ledgerJournalTrans.(fieldName2id(tableNum(LedgerJournalTrans), 'ReportingCurrencyExchRate'));
            trans.(fieldName2id(tableNum(LedgerJournalTrans), 'ReportingCurrencyExchRateSecondary')) = _ledgerJournalTrans.(fieldName2id(tableNum(LedgerJournalTrans), 'ReportingCurrencyExchRateSecondary'));
        }

        trans.CashDiscCode = '';
        trans.OffsetAccountType = LedgerJournalACType::Ledger;
        trans.TaxGroup = _ledgerJournalTrans.TaxGroup;
        trans.TaxItemGroup = _ledgerJournalTrans.TaxItemGroup;
        trans.SettleVoucher = SettlementType::SelectedTransact;
        trans.PostingProfile = _ledgerJournalTrans.PostingProfile;
        trans.BankTransType = _ledgerJournalTrans.BankTransType;
        trans.PaymentNotes = _ledgerJournalTrans.PaymentNotes;
        trans.TransactionType = _ledgerJournalTrans.TransactionType;
        trans.Approved = _ledgerJournalTrans.Approved;
        trans.Approver = _ledgerJournalTrans.Approver; //Make the currentuser? (curuserid())
        trans.Payment = _ledgerJournalTrans.Payment;

        trans.ReverseEntry = _ledgerJournalTrans.ReverseEntry;
        trans.ReverseDate   = _ledgerJournalTrans.ReverseDate;
        trans.SKS_IHB_RefLedgerTransRecId = _ledgerJournalTrans.RecId;
        trans.SKS_IHB_RefLedgerTransCompany = _ledgerJournalTrans.company();

        //trans.Txt  ="@SKS:SKGIHBPaym";
        trans.Txt  = _ledgerJournalTrans.Txt;
        if(conLen(_account) > 0)
        {
            trans.company = conPeek(_account,1);
            trans.CurrencyCode = conPeek(_account, 4);
            trans.ExchRate = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(trans.Company).RecId), trans.CurrencyCode, trans.TransDate).getExchangeRate1();
            if(_isMultiBankTrans)
            {
                trans.AccountType = conPeek(_account, 2);
                trans.LedgerDimension = conPeek(_account,3);

                if(abs(_ledgerJournalTrans.AmountCurCredit) > 0)
                {
                    trans.AmountCurCredit = 0;
                    trans.AmountCurDebit = _ledgerJournalTrans.AmountCurCredit;
                }
                else
                {
                    trans.AmountCurDebit = 0;
                    trans.AmountCurCredit = _ledgerJournalTrans.AmountCurDebit;
                }
            }
            else
            {
                trans.OffsetCompany = conPeek(_account,1);
                trans.OffsetAccountType = conPeek(_account,2);
                trans.OffsetLedgerDimension = conPeek(_account,3);

                if(trans.OffsetAccountType == LedgerJournalACType::Cust)
                {
                    trans.OffsetDefaultDimension = CustTable::findByLedgerDimension(trans.OffsetLedgerDimension).DefaultDimension;
                }
                else if(trans.OffsetAccountType == LedgerJournalACType::Cust)
                {
                    trans.OffsetDefaultDimension = CustTable::findByLedgerDimension(trans.OffsetLedgerDimension).DefaultDimension;
                }

                trans.CurrencyCode = conPeek(_account,4);
            }

            if(_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank &&
                _ledgerJournalTrans.LedgerDimension &&
                _ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension &&
                !_isMultiBankTrans)
            {
                sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension), _ledgerJournalTrans.Company);
                if(sKS_PP_Bank)
                {
                    if(abs(_ledgerJournalTrans.AmountCurCredit) > 0)
                    {
                        trans.AmountCurCredit = 0;
                        trans.AmountCurDebit = _ledgerJournalTrans.AmountCurCredit;
                    }
                    else
                    {
                        trans.AmountCurDebit = 0;
                        trans.AmountCurCredit = _ledgerJournalTrans.AmountCurDebit;
                    }
                }
            }

            trans.SettleVoucher = SettlementType::None;
        }

        if(_ledgerJournalTrans.SKS_EFTAR_IHBBankAccount || _ledgerJournalTrans.SKS_EFTGL_IHBBankAccount)
        {
            changedLastStatementdate = trans.TransDate;
            SKS_IHB_LedgerPostingPreEventHandler::IHBDateAdjust(trans, ledgerjournalTrans, true);
            
            if(changedLastStatementdate == ledgerjournalTrans.TransDate)
            {
                trans.TransDate = changedLastStatementdate;
            }
   
            if(changedLastStatementdate != trans.TransDate)
            {
                changedLastStatementdate = trans.TransDate;
            }
        }

        if(trans.validateWrite())
        {
            trans.insert();
            if(_isMultiBankTrans)
            {
                insertCompanydetails.insert(trans.DataAreaId, trans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AutoPostJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post IHB journal.
    /// </summary>
    /// <param name = "_jourTable"> Joural table </param>
    /// <param name = "_postTransfer"> boolean </param>
    public static void AutoPostJournal(LedgerJournalTable _jourTable, NoYes _postTransfer = NoYes::Yes)
    {
        LedgerJournalCheckPost  jourCheckPost;
        try
        {
            jourCheckPost = ledgerJournalCheckPost::newLedgerJournalTable(_jourTable, NoYes::Yes, _postTransfer);
            jourCheckPost.run();
            info(strFmt("@SKS:SKGIHBCreatedInCompany", _jourTable.JournalNum, _jourTable.DataAreaId));
        }
        catch
        {
            throw error("@SYS23002");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucherLinkForPostedIHBTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update original payment voucher in generalJournalAntry table 
    /// </summary>
    /// <param name = "_voucher"> voucher to check </param>
    /// <param name = "_setOrigPaymVoucher"> voucher to set </param>
    /// <param name = "_dataareaid"> company </param>
    /// <param name = "_journalNum"> journal id </param>
    public  static void updateVoucherLinkForPostedIHBTrans(Voucher _voucher, Voucher _setOrigPaymVoucher, DataAreaId _dataareaid, LedgerJournalID _journalNum) // SKS_FDD_9664
    {
        GeneralJournalEntry  generalJournalEntry;
        LedgerEntryJournal   ledgerEntryJournal;

        update_recordset generalJournalEntry
            setting SKS_EFTAR_OrigPaymVouch = _setOrigPaymVoucher
                where generalJournalEntry.SubledgerVoucher == _voucher &&
                    generalJournalEntry.SubledgerVoucherDataAreaId == _dataareaid
            join ledgerEntryJournal
                where ledgerEntryJournal.recid == generalJournalEntry.LedgerEntryJournal &&
                    ledgerEntryJournal.JournalNumber == _journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInHouseBankJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns IHB journal name 
    /// </summary>
    /// <returns> returns IHB journal name </returns>
    public static LedgerJournalNameId findInHouseBankJournal()
    {
        return SKS_PP_Setup::find().IHB_GLJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIHBLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Search and find journal table
    /// </summary>
    /// <param name = "_dataareaid"> Data area id </param>
    /// <returns> returns journal table </returns>
    public LedgerJournalTable findIHBLedgerJournalTable(DataAreaId _dataareaid)
    {
        LedgerJournalTable ledgerJournalTableIHB;

        if(insertIHBJournals.exists(_dataareaid))
        {
            ledgerJournalTableIHB = insertIHBJournals.lookup(_dataareaid);
        }
        return ledgerJournalTableIHB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInHouseBank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate In-house bank account.
    /// </summary>
    /// <param name = "_ledgerJournalTrans"> It contains the <c>LedgerJournalTrans</c> record </param>
    /// <returns> returns true otherwise false </returns>
    public static boolean validateInHouseBank(LedgerJournalTrans _ledgerJournalTrans)
    {
        SKS_PP_Bank             sKS_PP_Bank;
        boolean                 inValidIHBBankAccount;

        if (SKS_PP_Setup::find().IHB_Active)
        {
            if((_ledgerJournalTrans.SKS_EFTAR_IHBBankAccount || _ledgerJournalTrans.SKS_EFTGL_IHBBankAccount))
            {
                select  firstonly SKS_IHBInhouseBank ,SKS_IHBLinkedinhousebankcompany, SKS_IHBLinkedinhousebankaccount from sKS_PP_Bank
                    where (sKS_PP_Bank.BankAccountId == _ledgerJournalTrans.SKS_EFTAR_IHBBankAccount
                            || sKS_PP_Bank.BankAccountId == _ledgerJournalTrans.SKS_EFTGL_IHBBankAccount);

                if(_ledgerJournalTrans.Company != curExt())
                {
                    if(sKS_PP_Bank.SKS_IHBInhouseBank && 
                        ((_ledgerJournalTrans.Company != sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany && _ledgerJournalTrans.Company != curExt()) ||
                        !sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount))
                    {
                        error(strFmt("@SKS:SKGIHBBankValMsg",_ledgerJournalTrans.Voucher));
                        inValidIHBBankAccount = true;
                    }
                }
                else
                {
                    if(sKS_PP_Bank.SKS_IHBInhouseBank &&
                        ((_ledgerJournalTrans.OffsetCompany != sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany && _ledgerJournalTrans.OffsetCompany != curExt()) ||
                        !sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount))
                    {
                        error(strFmt("@SKS:SKGIHBBankValMsg",_ledgerJournalTrans.Voucher));
                        inValidIHBBankAccount = true;
                    }
                }
            }
        }

        return inValidIHBBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGJIHBJourCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create IHB voucher if it is from process bank statements with action of create GJ
    /// </summary>
    /// <param name = "_ledgerJournalTable"> journal table </param>
    /// <param name = "_ledgerJournalTrans"> journal lines </param>
    /// <returns> returns IHB general journal </returns>
    public LedgerJournalTable createGJIHBJourCreate(LedgerJournalTable _ledgerJournalTable, LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerDimensionDefaultAccount           ledgerDimension;
        LedgerJournalTable                      headerTable;
        SKS_PP_Bank                             sKS_PP_Bank;
        container                               conInterCompanyoffsetAccount;

        if(_ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension &&
            (_ledgerJournalTrans.LedgerDimension || _ledgerJournalTrans.OffsetLedgerDimension))
        {
            if(_ledgerJournalTrans.OffsetLedgerDimension)
            {
                sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.OffsetLedgerDimension), _ledgerJournalTrans.OffsetCompany);
            }
            if(!sKS_PP_Bank)
            {
                sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension), _ledgerJournalTrans.Company);
            }
            if(sKS_PP_Bank &&
                sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany == _ledgerJournalTrans.SKS_IHB_IntercoCompany)
            {
                changecompany(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                {
                    headerTable = this.createIHBJournalHeader(_ledgerJournalTable);
                    
                    ledgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount, LedgerJournalACType::Bank);
                    conInterCompanyoffsetAccount = [_ledgerJournalTrans.SKS_IHB_IntercoCompany, _ledgerJournalTrans.SKS_IHB_IntercoAccountType, _ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension,
                    _ledgerJournalTrans.CurrencyCode];
                    this.createLedgerTrans(headerTable, LedgerJournalACType::Bank, ledgerDimension, _ledgerJournalTrans, conInterCompanyoffsetAccount);
                }
            }
            else
            {
                throw error("@SKS:SKGIHBIntercoCompVal");
            }
        }

        return headerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>iHBBankSweep</Name>
				<Source><![CDATA[
    public void iHBBankSweep(LedgerJournalTrans  _ledgerJournalTrans)
    {
        LedgerJournalTrans              ledgerJournalTransLoc;
        container                       findIHBBankAccount;
        LedgerJournalAC                 bankAccountId;
        SKS_PP_Bank                     sKS_PP_Bank;
        LedgerDimensionDefaultAccount   ledgerDimension;
        container                       conInterCompanyoffsetAccount;
        int                             countBankTransInLine;
        LedgerJournalTable              ledgerJournalTableLocSubCompany = null;

        if(this.checkBankTransOrNot(_ledgerJournalTrans) ||
            this.checkIntercoAccountExist(_ledgerJournalTrans))
        {
            while select ledgerJournalTransLoc
                where ledgerJournalTransLoc.Voucher == _ledgerJournalTrans.Voucher
            {
                // In manual transfer Check the bank both are same company IHB Bank and LinkedinHousecompany also same.If it is single transaction.
                if((ledgerJournalTransLoc.AccountType == LedgerJournalACType::Bank &&
                    ledgerJournalTransLoc.LedgerDimension &&
                    ledgerJournalTransLoc.OffsetAccountType == LedgerJournalACType::Bank &&
                    ledgerJournalTransLoc.OffsetLedgerDimension &&
                    ledgerJournalTransLoc.Company == ledgerJournalTransLoc.OffsetCompany) || ledgerJournalTransLoc.SKS_IHB_IntercoLedgerDimension) // SKS_Bug_10358
                {
                    // If GL is from Create GJ process
                    if((ledgerJournalTransLoc.SKS_EFTAR_IHBBankAccount || ledgerJournalTransLoc.SKS_EFTGL_IHBBankAccount) || ledgerJournalTransLoc.SKS_IHB_IntercoLedgerDimension) // SKS_10238 CR
                    {
                        sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTransLoc.OffsetLedgerDimension), ledgerJournalTransLoc.OffsetCompany);
             
                        if(!sKS_PP_Bank)
                        {
                            sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTransLoc.LedgerDimension), ledgerJournalTransLoc.Company);
                        }
                        
                        if(sKS_PP_Bank)
                        {
                            this.createIHBIntercoCompanyRecord(sKS_PP_Bank, ledgerJournalTransLoc);
                        }
                    }
                    else
                    {
                        changecompany(ledgerJournalTransLoc.Company)
                        {
                            bankAccountId = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTransLoc.LedgerDimension);
                        }
                        sKS_PP_Bank = SKS_PP_Bank::findIHBBank(bankAccountId, ledgerJournalTransLoc.company);
                        if(sKS_PP_Bank && (!ledgerJournalTransLoc.SKS_EFTAR_IHBBankAccount || !ledgerJournalTransLoc.SKS_EFTGL_IHBBankAccount))
                        {
                            findIHBBankAccount += [sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany, ledgerJournalTransLoc.AccountType, sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount];
                            changecompany(ledgerJournalTransLoc.OffsetCompany)
                            {
                                bankAccountId = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTransLoc.OffsetLedgerDimension);
                            }
                            if(sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount != bankAccountId && sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany != ledgerJournalTransLoc.OffsetCompany)
                            {
                                sKS_PP_Bank = SKS_PP_Bank::findIHBBank(bankAccountId, ledgerJournalTransLoc.OffsetCompany);
                        
                                if(conFind(findIHBBankAccount, sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany))
                                {
                                    ledgerJournalTableLocSubCompany = this.findIHBLedgerJournalTable(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany);
                                
                                    changecompany(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                                    {
                                        ledgerJournalTableLocSubCompany = this.createIHBJournalHeader(ledgerJournalTableLocSubCompany);
                                        ledgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount, LedgerJournalACType::Bank);
                                        conInterCompanyoffsetAccount = [conPeek(findIHBBankAccount,1), conPeek(findIHBBankAccount,2), LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(conPeek(findIHBBankAccount,3), LedgerJournalACType::Bank),
                                          BankaccountTable::find(sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount).CurrencyCode];
                                        this.createLedgerTrans(ledgerJournalTableLocSubCompany, LedgerJournalACType::Bank, ledgerDimension, ledgerJournalTransLoc, conInterCompanyoffsetAccount);
                                    }
                                    if(!insertIHBJournals.exists(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany))
                                    {
                                        insertIHBJournals.insert(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany, ledgerJournalTableLocSubCompany);
                                    }
                                    this.insertCreatedVoucher(ledgerJournalTableLocSubCompany, ledgerJournalTransLoc);
                                    ledgerJournalTableLocSubCompany = null;
                                    this.setVoucher('');
                                }
                                else
                                {
                                    info("@SKS:SKGIHBBankSweepVal");
                                }
                            }
                        }
                    }
                    
                }
                // If it is multiple transaction in line
                else if (ledgerJournalTransLoc.AccountType == LedgerJournalACType::Bank &&
                    ledgerJournalTransLoc.LedgerDimension &&
                    !ledgerJournalTransLoc.OffsetLedgerDimension)
                {
                    
                    if(ledgerJournalTransLoc.SKS_IHB_IntercoLedgerDimension)
                    {
                        sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTransLoc.LedgerDimension));
                        if(sKS_PP_Bank)
                        {
                            this.createIHBIntercoCompanyRecord(sKS_PP_Bank, ledgerJournalTransLoc);
                        }
                    }
                    else
                    {
                        changecompany(ledgerJournalTransLoc.Company)
                        {
                            bankAccountId = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTransLoc.LedgerDimension);
                        }
                        countBankTransInLine++;
                        sKS_PP_Bank = SKS_PP_Bank::findIHBBank(bankAccountId, ledgerJournalTransLoc.company);
                        if(sKS_PP_Bank && countBankTransInLine <= totalVoucher)
                        {
                            if(countBankTransInLine ==  1)
                            {
                                findIHBBankAccount += [sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany, ledgerJournalTransLoc.AccountType, sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount];
                            }
                            if(!conFind(findIHBBankAccount, ledgerJournalTransLoc.Company, LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTransLoc.LedgerDimension)) &&
                                conFind(findIHBBankAccount, sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany))
                            {
                                if(countBankTransInLine > 1)
                                {
                                    findIHBBankAccount += [sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany, ledgerJournalTransLoc.AccountType, sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount];
                                }
                                ledgerJournalTableLocSubCompany = this.findIHBLedgerJournalTable(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany);

                                if(insertIHBdeletedJournals.exists(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany) && !ledgerJournalTableLocSubCompany)
                                {
                                    ledgerJournalTableLocSubCompany = insertIHBdeletedJournals.lookup(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany);
                                }
                                changecompany(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                                {
                                    ledgerJournalTableLocSubCompany = this.createIHBJournalHeader(ledgerJournalTableLocSubCompany);
                                
                                    ledgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount, LedgerJournalACType::Bank);
                                    conInterCompanyoffsetAccount = [sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany, LedgerJournalACType::Bank, ledgerDimension,
                                    BankaccountTable::find(sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount).CurrencyCode];
                                    this.createLedgerTrans(ledgerJournalTableLocSubCompany, LedgerJournalACType::Bank, ledgerDimension, ledgerJournalTransLoc, conInterCompanyoffsetAccount, true);
                                }
                                if(!insertIHBJournals.exists(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany))
                                {
                                    insertIHBJournals.insert(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany, ledgerJournalTableLocSubCompany);
                                }
                            
                                if(countBankTransInLine == totalVoucher)
                                {
                                    this.insertCreatedVoucher(ledgerJournalTableLocSubCompany, ledgerJournalTransLoc);
                                    ledgerJournalTableLocSubCompany = null;
                                    this.setVoucher('');
                                }
                            }
                            else
                            {
                                mi = new MapIterator(insertCompanydetails);
    
                                while (mi.more())
                                {
                                    changecompany(mi.key())
                                    {
                                        this.deleteLedgerJournalTrans(mi.value());
                                    }
                                    mi.next();
                                }
                            }
                        }
                    }
                }
                this.insertReverseJournalVoucher(ledgerJournalTransLoc);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankTransOrNot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check for bank account type transactions
    /// </summary>
    /// <param name = "_ledgerJournalTrans"> journal trans for reference</param>
    /// <returns> returns true if found otherwise; false </returns>
    public boolean checkBankTransOrNot(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransByVoucher;
        LedgerJournalTrans  ledgerJournalTransLoc;
        boolean             exist;

        select count(RecId) from ledgerJournalTransByVoucher
            group by Voucher
                where ledgerJournalTransByVoucher.Voucher == _ledgerJournalTrans.voucher;

        select count(RecId) from ledgerJournalTransLoc
            group by Company
                where ledgerJournalTransLoc.Voucher == _ledgerJournalTrans.Voucher &&
                    ledgerJournalTransLoc.AccountType == LedgerJournalACType::Bank;

        if(ledgerJournalTransLoc.RecId == ledgerJournalTransByVoucher.RecId)
        {
            totalVoucher = int642int(ledgerJournalTransLoc.RecId);
            exist = true;
        }
        else
        {
            totalVoucher = 0;
            exist = false;
        }
        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerJournalTrans</Name>
				<Source><![CDATA[
    public void deleteLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransloc;
        LedgerJournalTrans  ledgerJournalTransDelete;

        select count(RecId) from ledgerJournalTransloc
            where ledgerJournalTransloc.JournalNum == _ledgerJournalTrans.JournalNum &&
                  ledgerJournalTransloc.Voucher == _ledgerJournalTrans.Voucher;

        if(ledgerJournalTransloc.RecId > 1)
        {
            if(insertIHBJournals.exists(_ledgerJournalTrans.DataAreaId))
            {
                insertIHBJournals.remove(_ledgerJournalTrans.DataAreaId);
                if(!insertIHBdeletedJournals.exists(_ledgerJournalTrans.DataAreaId))
                {
                    insertIHBdeletedJournals.insert(_ledgerJournalTrans.DataAreaId, _ledgerJournalTrans.ledgerJournalTable());
                }
            }
        }
        if(_ledgerJournalTrans)
        {
            ledgerJournalTransDelete = _ledgerJournalTrans;
            ttsbegin;
            ledgerJournalTransDelete.Selectforupdate(true);
            ledgerJournalTransDelete.delete();
            ttscommit;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIHBJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create IHB journal header
    /// </summary>
    /// <param name = "_ledgerJournalTable"> original journal header </param>
    /// <returns> returns ledgerJournalTable buffer </returns>
    public LedgerJournalTable createIHBJournalHeader(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalId     journalName;
        LedgerJournalTable  headerTable;
        
        if(_ledgerJournalTable == null)
        {
            journalName = SKS_EFTAR_PaymJourCreate::findInHouseBankJournal();
            headerTable = this.createJournalHeader(_ledgerJournalTable, journalName);
        }
        else
        {
            headerTable = _ledgerJournalTable;
        }
        return headerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCreatedVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert voucher details
    /// </summary>
    /// <param name = "_ledgerJournalTableLocSubCompany"> Journal table for sub company </param>
    /// <param name = "_ledgerJournalTrans"> journal lines </param>
    public void insertCreatedVoucher(LedgerJournalTable _ledgerJournalTableLocSubCompany,
                                        LedgerJournalTrans _ledgerJournalTrans)
    {
        // Insert the standard intercompany posting  voucher details.
        conInHouseVoucher = [_ledgerJournalTrans.Voucher, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.DataAreaId, _ledgerJournalTrans.JournalNum];
        listInHouseVoucher.addEnd(conInHouseVoucher);
        // Insert the IHB sub company voucher details.
        conInHouseVoucher = [voucherLoc, _ledgerJournalTrans.Voucher, _ledgerJournalTableLocSubCompany.DataAreaId, _ledgerJournalTableLocSubCompany.JournalNum];
        listInHouseVoucher.addEnd(conInHouseVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLeadgeralTransCount</Name>
				<Source><![CDATA[
    void setLeadgeralTransCount(int _countRecId)
    {
        countRecId = _countRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIHBIntercoCompanyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// create IHB bank sweep for create GJ and manual transfer.
    /// </summary>
    /// <param name = "_sKS_PP_Bank"> Bank table </param>
    /// <param name = "_ledgerJournalTransLoc"> ledger journal lines </param>
    public void createIHBIntercoCompanyRecord(SKS_PP_Bank _sKS_PP_Bank, LedgerJournalTrans _ledgerJournalTransLoc)
    {
        LedgerJournalTable              ledgerJournalTableLocSubCompany = null;

        ledgerJournalTableLocSubCompany = this.findIHBLedgerJournalTable(_sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany);
                    
        ledgerJournalTableLocSubCompany = this.createGJIHBJourCreate(ledgerJournalTableLocSubCompany, _ledgerJournalTransLoc);
        if(!insertIHBJournals.exists(_sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany))
        {
            insertIHBJournals.insert(_sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany, ledgerJournalTableLocSubCompany);
        }
        this.insertCreatedVoucher(ledgerJournalTableLocSubCompany, _ledgerJournalTransLoc);
  
        this.setVoucher('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntercoAccountExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check Interco account is exist or not.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">It contains <c>LedgerJournalTrans</c> record.</param>
    /// <returns>Return true.</returns>
    public boolean checkIntercoAccountExist(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransByVoucher;
        boolean             exist;

        select firstonly RecId from ledgerJournalTransByVoucher
                where ledgerJournalTransByVoucher.Voucher == _ledgerJournalTrans.voucher && //SKS_Bug_13862 Group By has been removed
                    ledgerJournalTransByVoucher.SKS_IHB_IntercoLedgerDimension != 0 &&
                    ledgerJournalTransByVoucher.SKS_IHB_IntercoCompany;

        if(ledgerJournalTransByVoucher.RecId)
        {
            exist = true;
        }
        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReverseJournalVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the reverse journal voucher for Origin journal and insert into listInHouseVoucher
    /// </summary>
    /// <param name = "_ledgerJournalTrans"> Origin LedgerJournalLine line</param>
    protected void insertReverseJournalVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTransReverse;

        ledgerJournalTransReverse = LedgerJournalTrans::findRecId(_ledgerJournalTrans.RevRecId, false);
        if(ledgerJournalTransReverse)
        {
            // Insert the standard reverse entry posting  voucher details.
            conInHouseVoucher = [ledgerJournalTransReverse.Voucher, ledgerJournalTransReverse.Voucher, ledgerJournalTransReverse.DataAreaId, ledgerJournalTransReverse.JournalNum];
            listInHouseVoucher.addEnd(conInHouseVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIHBReverseJournalVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the reverse voucher for IHB journal and insert those vouchers into listInHouseVoucher
    /// </summary>
    /// <param name = "_ledgerJournalTable"> IHB Journal </param>
    protected void insertIHBReverseJournalVoucher(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalTrans      ihbledgerJournalTrans, ihbledgerJournalTransReverse;
        Voucher                 ihbReferenceVoucher;

        while select RevRecId, SKS_IHB_RefLedgerTransCompany, SKS_IHB_RefLedgerTransRecId from ihbledgerJournalTrans
            where ihbledgerJournalTrans.ReverseEntry && ihbledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum
        {
            ihbledgerJournalTransReverse = LedgerJournalTrans::findRecId(ihbledgerJournalTrans.RevRecId, false);
            ihbReferenceVoucher = this.getIHBReferenceVoucher(ihbledgerJournalTrans);
            if(ihbledgerJournalTransReverse && ihbReferenceVoucher)
            {
                // Insert the IHB journal reverse entry posting voucher details.
                conInHouseVoucher = [ihbledgerJournalTransReverse.Voucher, ihbReferenceVoucher, ihbledgerJournalTransReverse.DataAreaId, ihbledgerJournalTransReverse.JournalNum];
                listInHouseVoucher.addEnd(conInHouseVoucher);
            }
            ihbReferenceVoucher = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIHBReferenceVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the reverse journal voucher for Origin journal and insert into listInHouseVoucher
    /// </summary>
    /// <param name = "_ledgerJournalTrans"> ledgerJournalTrans </param>
    /// <returns> returns IHB refrence voucher </returns>
    protected Voucher getIHBReferenceVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        Voucher             ihbReferenceVoucher;
        LedgerJournalTrans  ihbledgerTransReference, ihbledgerTransReferenceReverse;

        ihbledgerTransReference = SKS_Table_LedgerJournalTrans::findIHBReference(_ledgerJournalTrans.SKS_IHB_RefLedgerTransRecId,
                                                                           _ledgerJournalTrans.SKS_IHB_RefLedgerTransCompany, false);
        changecompany(_ledgerJournalTrans.SKS_IHB_RefLedgerTransCompany)
        {
            ihbledgerTransReferenceReverse = null;
            ihbledgerTransReferenceReverse = LedgerJournalTrans::findRecId(ihbledgerTransReference.RevRecId, false);
        }
        ihbReferenceVoucher = ihbledgerTransReferenceReverse.Voucher;

        return ihbReferenceVoucher;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>