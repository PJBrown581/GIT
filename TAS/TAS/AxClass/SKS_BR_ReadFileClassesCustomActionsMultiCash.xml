<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadFileClassesCustomActionsMultiCash</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BR_ReadFileClassesCustomActionsMultiCash extends SKS_BR_ReadFileClassesCustomActionsBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>modifyStatment</Name>
				<Source><![CDATA[
    public boolean modifyStatment(BankAccountStatement _BankAccountStatement)
    {
        CommaStreamIo csvFile;
        Container line;
        SKS_BR_FileFormatDetail csvFormat;
        TextBuffer txtBufFile = new TextBuffer();
        str locRecordDelimiter = '\n';
        SKS_EB_FileHub locHDRSKS_EB_FileHub = SKS_EB_FileHub::construct();
        void closeFile()
        {
            if(csvFile)
            {
                csvFile.finalize();
                csvFile = null;
                locHDRSKS_EB_FileHub.streamClose();
            }
        }

        gAccountID = _BankAccountStatement.AccountId;
        gAccountStatementDate = _BankAccountStatement.AccountStatementDate;
        gAccountStatementNum = _BankAccountStatement.AccountStatementNum;

        switch(gSKS_BR_FileType)
        {
            case SKS_BR_FileType::Multicash_COL:
                locHDRSKS_EB_FileHub.setFileName(this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 2));
                break;
            case SKS_BR_FileType::MulticashCOLBAN:
                locHDRSKS_EB_FileHub.setFileName(this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 24));
                break;
            default:
                locHDRSKS_EB_FileHub.setFileName(this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 3));
        }
        locHDRSKS_EB_FileHub.runFileLoad();
        txtBufFile.setText(locHDRSKS_EB_FileHub.fileBody());
        txtBufFile.replace('\r\n', locRecordDelimiter);
        txtBufFile.replace('\n\r', locRecordDelimiter);
        txtBufFile.replace('\r', locRecordDelimiter);
        locHDRSKS_EB_FileHub.fileBody(txtBufFile.getText());
        locHDRSKS_EB_FileHub.streamInit();
        csvFile = CommaStreamIo::constructForRead(locHDRSKS_EB_FileHub.streamGet());
        if (!csvFile || csvFile.status() != IO_Status::Ok )
        {
            //file could not be opened
            error(strfmt("@SYS19312",locHDRSKS_EB_FileHub.fileName()));
            closeFile();
            return false;
        }
        csvFile.inFieldDelimiter(gFieldDelimiter);
        csvFile.inRecordDelimiter(locRecordDelimiter);
        line = csvFile.read();
        while (line && conLen(line) >= 8)
        {
            if(conPeek(line,2) == BankAccountTable::accountNum(_BankAccountStatement.AccountId))
            {
                _BankAccountStatement.SKS_BR_TotalDebits = conPeek(line,7);
                _BankAccountStatement.SKS_BR_TotalCredits = conPeek(line, 8);
                break;
            }
            line = csvFile.read();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyEndingBalance</Name>
				<Source><![CDATA[
    public boolean modifyEndingBalance(BankAccountStatement _BankAccountStatement)
    {
        CommaStreamIo csvFile;
        Container line;
        SKS_BR_FileFormatDetail csvFormat;
        TextBuffer txtBufFile = new TextBuffer();
        str locRecordDelimiter = '\n';
        SKS_EB_FileHub locHDRSKS_EB_FileHub = SKS_EB_FileHub::construct();
        void closeFile()
        {
            if(csvFile)
            {
                csvFile.finalize();
                csvFile = null;
                locHDRSKS_EB_FileHub.streamClose();
            }
        }

        gAccountID = _BankAccountStatement.AccountId;
        gAccountStatementDate = _BankAccountStatement.AccountStatementDate;
        gAccountStatementNum = _BankAccountStatement.AccountStatementNum;

        switch(gSKS_BR_FileType)
        {
            case SKS_BR_FileType::Multicash_COL:
                locHDRSKS_EB_FileHub.setFileName(this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 2));
                break;
            case SKS_BR_FileType::MulticashCOLBAN:
                locHDRSKS_EB_FileHub.setFileName(this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 24));
                break;
            default:
                locHDRSKS_EB_FileHub.setFileName(this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 3));
        }
        locHDRSKS_EB_FileHub.runFileLoad();
        txtBufFile.setText(locHDRSKS_EB_FileHub.fileBody());
        txtBufFile.replace('\r\n', locRecordDelimiter);
        txtBufFile.replace('\n\r', locRecordDelimiter);
        txtBufFile.replace('\r', locRecordDelimiter);
        locHDRSKS_EB_FileHub.fileBody(txtBufFile.getText());
        locHDRSKS_EB_FileHub.streamInit();
        csvFile = CommaStreamIo::constructForRead(locHDRSKS_EB_FileHub.streamGet());
        if (!csvFile || csvFile.status() != IO_Status::Ok )
        {
            //file could not be opened
            error(strfmt("@SYS19312",locHDRSKS_EB_FileHub.fileName()));
            closeFile();
            return false;
        }
        csvFile.inFieldDelimiter(gFieldDelimiter);
        csvFile.inRecordDelimiter(locRecordDelimiter);
        line = csvFile.read();
        while (line && conLen(line) >= 8)
        {
            if(conPeek(line,2) == BankAccountTable::accountNum(_BankAccountStatement.AccountId))
            {
                _BankAccountStatement.EndingBalance = SKS_PP_StringFormats::CurrStr2CurrNum(conPeek(line,9));
                break;
            }
            line = csvFile.read();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MultiCashDTLName2HDRName</Name>
				<Source><![CDATA[
    private SKS_EB_FilePathName MultiCashDTLName2HDRName(SKS_EB_FilePathName _SKS_EB_FilePathName, int _IndicatorPosition)
    {
        SKS_EB_FilePathName rtnval;
        str locHeaderPreCut;
        str locSearchPattern;
        System.Text.StringBuilder locFileNameStringBuilder;

        switch(gSKS_BR_FileType)
        {
            case SKS_BR_FileType::MulticashCOLBAN:
                locFileNameStringBuilder = new System.Text.StringBuilder(System.IO.Path::GetFileName(_SKS_EB_FilePathName));
                locFileNameStringBuilder.Remove(11, strLen('DETALLE_CD'));
                locFileNameStringBuilder.Insert(11,'ENCABEZADO_CC');
                locHeaderPreCut = SKS_PP_StringFormats::strSub( locFileNameStringBuilder.ToString(), 1, SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___') - 1);
                locHeaderPreCut = locHeaderPreCut + SKS_PP_StringFormats::strSub( locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ), 20);
                locSearchPattern = subStr(locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 21, 1);
                While(SKS_PP_StringFormats::isNumeric(subStr(locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 21, 1)) ||
                        subStr(locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 21, 1) == '_')
                {
                    locFileNameStringBuilder.Remove(SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 20, 1);
                    locSearchPattern = subStr(locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 21, 1);
                }
                rtnval = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(_SKS_EB_FilePathName), locFileNameStringBuilder.ToString());
                break;
            default:
                locFileNameStringBuilder = new System.Text.StringBuilder(System.IO.Path::GetFileName(_SKS_EB_FilePathName));
                locFileNameStringBuilder.Remove(_IndicatorPosition - 1,1);
                locFileNameStringBuilder.Insert(_IndicatorPosition - 1,'C');
                rtnval = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(_SKS_EB_FilePathName), locFileNameStringBuilder.ToString());
        }

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCompleteProcessing</Name>
				<Source><![CDATA[
    public boolean modifyCompleteProcessing()
    {
        SKS_EB_FileHub locSKS_EB_FileHub;
        SKS_BR_File sks_br_file;
        SKS_EB_FilePathName locSKS_EB_FilePathName;
        switch(gSKS_BR_FileType)
        {
            case SKS_BR_FileType::Multicash_COL:
                locSKS_EB_FilePathName = this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 2);
                break;
            case SKS_BR_FileType::MulticashCOLBAN:
                locSKS_EB_FilePathName = this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 24);
                break;
            default:
                locSKS_EB_FilePathName = this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 3);
        }
        sks_br_file = SKS_BR_File::construct(gSKS_BF_BankIntType);

        locSKS_EB_FileHub = SKS_EB_FileHub::construct();
        locSKS_EB_FileHub.setFileName(locSKS_EB_FilePathName);
        locSKS_EB_FileHub.runFileInquire();
        if(locSKS_EB_FileHub.attrFileExists())
        {
            locSKS_EB_FileHub = null;
            sks_br_file.setFilePathName(locSKS_EB_FilePathName);
            sks_br_file.moveToArchive();
            SKS_BR_HistoryTable::insertEvent(SKS_BR_Action::CustomActionCompleted,
                                            gSKS_BR_BankHeaderRecId,
                                            gAccountID,
                                            gAccountStatementDate,
                                            gAccountStatementNum,
                                           '',
                                            strFmt("@SKS:SKGBRAssociatedHeaderFileMovedToArchive", locSKS_EB_FilePathName));
        }
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyAllParsedValues</Name>
				<Source><![CDATA[
    public str modifyAllParsedValues(str _Value)
    {
        str rtnval;
        if(strLTrim(_Value) == '/' )
            rtnval = '';
        else
            rtnval = _Value;
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyCreateErrorLog</Name>
				<Source><![CDATA[
    public boolean modifyCreateErrorLog()
    {
        SKS_BR_File locSKS_BR_File = SKS_BR_File::construct(gSKS_BF_BankIntType);
        SKS_BR_ErrorLog locSKS_BR_ErrorLog;
        str locErrorMessage = "@SKS:SKGBRMulticashMovingHeaderToErrors";

        select forupdate * from locSKS_BR_ErrorLog where locSKS_BR_ErrorLog.BankHeaderRecId == gSKS_BR_BankHeaderRecId;
        switch(gSKS_BR_FileType)
        {
            case SKS_BR_FileType::Multicash_COL:
                locSKS_BR_File.setFilePathName( this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 2));
                break;
            case SKS_BR_FileType::MulticashCOLBAN:
                locSKS_BR_File.setFilePathName( this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 24));
                break;
            default:
                locSKS_BR_File.setFilePathName( this.MultiCashDTLName2HDRName(gSKS_EB_FilePathName, 3));
        }
        locSKS_BR_File.moveToError();
        if(locSKS_BR_ErrorLog)
        {
            locSKS_BR_ErrorLog.ErrorText += '  ' + locErrorMessage;
            locSKS_BR_ErrorLog.update();
        }
        else
        {
            locSKS_BR_ErrorLog.BankHeaderRecId = gSKS_BR_BankHeaderRecId;
            locSKS_BR_ErrorLog.ErrorText = locErrorMessage;
            locSKS_BR_ErrorLog.insert();
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>