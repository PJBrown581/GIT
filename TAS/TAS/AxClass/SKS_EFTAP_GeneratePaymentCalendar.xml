<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFTAP_GeneratePaymentCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFTAP_GeneratePaymentCalendar extends RunBaseBatch
{
    CompanyId               paymentCompany;
    JournalNameId           journalName;
    TransDate               startDate;
    TransDate               endDate;
    TransDate               runDate;
    Name                    fromdatePaymcalendar;
    Name                    toDatePaymcalendar;
    Name                    totalPaymentDatePaymcalendar;
    Name                    minimumPaymentDatePaymcalendar;
    Integer                 priority;
    Description             description;
    Name                    payGroup;
    WeekDays                paymentWeekday;
    WeekDays                paymentWeekdayFixed; //Bug10745
    Name                    fromDate;
    Name                    toDate;
    Name                    totalPaymentDate;
    Name                    minimumPaymentDate;
    CurrencyCode            paymentCurrency;
    AmountMST               amountLimit;
    NoYes                   seperateByLE;
    NoYes                   checkBalance;
    NoYes                   deleteNegative;
    CurrencyCode            invoiceCurrency;
    QueryRun                queryCreatePayment;//SKS_Bug_12414
    Query                   dialogQuery;
    FormBuildStringControl  paymentCompanyFormControl;
    FormBuildStringControl  journalNameFormControl;
    FormBuildStringControl  descriptionFormControl;
    FormBuildDateControl    startDateFormControl;
    FormBuildDateControl    endDateFormControl;
    TimeOfDay               earliestTime;
    Timezone                TimeZone;
    CustVendCreatePaymProposalType  proposalType;

    DialogGroup    dialogGeneratecalendar;
    DialogGroup    dialogDateCriteria;
    DialogGroup    dialogDayOfWeek;
    DialogGroup    dialogProposalCriteria;
    DialogGroup    dialogDateOffsets;
    DialogGroup    dialogParameters;
    DialogGroup    dialogGroupJournalName;

    DialogField    dialogPaymentCompany;
    DialogField    dialogJournalName;
    DialogField    dialogStartDate;
    DialogField    dialogEndDate;
    DialogField    dialogPriority;
    DialogField    dialogDescription;
    DialogField    dialogPayGroup;
    DialogField    dialogPaymentWeekday;
    DialogField    dialogPaymentWeekdayFixed; //Bug10745
    DialogField    dialogFromDate;
    DialogField    dialogToDate;
    DialogField    dialogTotalPaymentDate;
    DialogField    dialogMinimumPaymentDate;
    DialogField    dialogPaymentCurrency;
    DialogField    dialogAmountLimit;
    DialogField    dialogSeperateByLE;
    DialogField    dialogCheckBalance;
    DialogField    dialogDeleteNegative;
    DialogField    dialogProposalType;
    DialogField dialogearly;
    FormBuildTimeControl    earlyFormControl;
    FormBuildTimeControl dialogEarliestRunTime;
    DialogField    dialogTimezone;
    FormBuildComboBoxControl    fbTimezone;
    SKS_EFTAP_PaymentWeekDays   paymentWeekDays;
    FormBuildStringControl      paymentWeekDaysFromBuildControl;
    FormStringControl           paymentWeekDaysFromControl;
    SysLookupMultiSelectCtrl    paymentWeekdaysLookup;
    container                   paymentWeekdaysContainer;
    FormRun                     callerFromRun;

    //SKS_Bug_12414
    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        paymentCompany,
        journalName,
        startDate,
        endDate,
        priority,
        description,
        payGroup,
        fromdatePaymcalendar,
        toDatePaymcalendar,
        totalPaymentDatePaymcalendar,
        minimumPaymentDatePaymcalendar,
        paymentCurrency,
        amountLimit,
        seperateByLE,
        checkBalance,
        deleteNegative,
        proposalType,
        paymentWeekdayFixed,
        paymentWeekdaysContainer
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// input values will be given to the dialog.
    /// </summary>
    /// <returns></returns>
    public Object dialog()
    {
        DialogRunbase       dialog;
        FormBuildControl    paymentWeekDaysGroupControl;
        dialog = this.dialogInternal(dialog);
        dialog.caption("@SKS:SKGEFTAPPaymCalGen");

        // Payment company
        dialogGeneratecalendar = dialog.addGroup("@SKS:SKGGenerateCalendar");
        dialogPaymentCompany  = dialog.addFieldValue(extendedTypeStr(CompanyId), paymentCompany, "@SKS:SKGPaymCompany");
        paymentCompanyFormControl = dialogPaymentCompany.fieldControl();
        paymentCompanyFormControl.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(SKS_EFTAP_GeneratePaymentCalendar, companyValidate), this);
        paymentCompanyFormControl.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(SKS_EFTAP_GeneratePaymentCalendar, companyModified), this);
        paymentCompanyFormControl.mandatory(true);

        //Journal name
        dialogGroupJournalName  = dialog.addGroup();
        dialogJournalName  = dialog.addFieldValue(extendedTypeStr(JournalNameId), journalName, "@SYS82981");
        journalNameFormControl = dialogJournalName.fieldControl();
        journalNameFormControl.registerOverrideMethod(methodstr(FormStringControl, lookUp),methodstr(SKS_EFTAP_GeneratePaymentCalendar, journalNameLookup),this);
        journalNameFormControl.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(SKS_EFTAP_GeneratePaymentCalendar, journalNameValidate), this);
        journalNameFormControl.mandatory(true);

        // FromDate  and to date
        dialogDateCriteria = dialog.addGroup();
        dialogGeneratecalendar.columns(2);
        dialogStartDate      = dialog.addFieldValue(extendedTypeStr(TransDate), startDate, "@SYS81006");
        startDateFormControl = dialogStartDate.fieldControl();
        startDateFormControl.mandatory(true);
        dialogEndDate        = dialog.addFieldValue(extendedTypeStr(TransDate), endDate, "@SYS35858");
        endDateFormControl = dialogEndDate.fieldControl();
        endDateFormControl.mandatory(true);
        //Bug 10745 -->
        paymentWeekDaysGroupControl = dialog.formBuildDesign().control(dialogDateCriteria.formBuildGroup().id());
        paymentWeekDaysFromBuildControl = paymentWeekDaysGroupControl.addControl(FormControlType::String,identifierStr(ctrlRoles1));
        paymentWeekDaysFromBuildControl.label("@SYS88213");
        //Bug 10745 <--



        dialogearly = dialog.addFieldvalue(extendedTypeStr(TimeOfDay), earliestTime, "@SKS:SKGEarliestTime");
        earlyFormControl = dialogearly.fieldcontrol();

        dialogTimezone = Dialog.addFieldValue('Timezone', DateTimeUtil::getUserPreferredTimeZone(), "@SKS:SKGTimezone");

        dialogPriority      = dialog.addFieldValue(extendedTypeStr(Integer),  priority, "@SYS40278");
        dialogDescription   = dialog.addFieldValue(extendedTypeStr(Description), description, "@SYS36948");
        descriptionFormControl = dialogDescription.fieldControl();
        descriptionFormControl.mandatory(true);
        dialogPayGroup      = dialog.addFieldValue(extendedTypeStr(Name), payGroup, "@SYS117132");

        // Proposal criteria
        dialogProposalCriteria = dialog.addGroup("@SKS:SKGProposalCriteria");
        dialogProposalType     = dialog.addFieldValue(enumStr(CustVendCreatePaymProposalType), proposalType, "@SKS:SKGProposalType");

        // date offsets
        dialogDateOffsets = dialog.addGroup("@SKS:SKGDateOffsets");
        dialogFromDate           = dialog.addFieldValue(extendedTypeStr(Name), fromDate, "@SYS5209");
        dialogToDate             = dialog.addFieldValue(extendedTypeStr(Name), toDate, "@SYS35904");
        dialogTotalPaymentDate   = dialog.addFieldValue(extendedTypeStr(Name), totalPaymentDate, "@SYS74069");
        dialogMinimumPaymentDate = dialog.addFieldValue(extendedTypeStr(Name), minimumPaymentDate, "@SYS101789");

        // Paramters
        dialogParameters = dialog.addGroup("@SYS28007");
        dialogPaymentWeekdayFixed  = dialog.addFieldValue(enumStr(WeekDays), paymentWeekdayFixed, "@SYS60655"); //Bug 10745
        dialogPaymentCurrency      = dialog.addFieldValue(extendedTypeStr(CurrencyCode), paymentCurrency, "@SYS66023");
        dialogAmountLimit          = dialog.addFieldValue(extendedTypeStr(AmountMST), amountLimit, "@SYS27719");
        dialogSeperateByLE         = dialog.addFieldValue(enumStr(NoYes), seperateByLE, "@SKS:SKGSeparateLE");
        dialogCheckBalance         = dialog.addFieldValue(enumStr(NoYes), checkBalance, "@SYS8649");
        dialogDeleteNegative       = dialog.addFieldValue(enumStr(NoYes), deleteNegative, "@SKS:SKGDeleteNegative");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        FormRun formRun;

        SKS_EFTAP_GeneratePaymentcalendar   generatePaymentcalendar = SKS_EFTAP_GeneratePaymentcalendar::construct();
        formRun = args.caller() as FormRun;

        if (generatePaymentcalendar.prompt())
        {
            generatePaymentcalendar.run();
        }
        formRun.dataSource(formDataSourceStr(SKS_EFTAP_PaymentCalendar,SKS_EFTAP_PaymentCalendar)).refresh();
        formRun.dataSource(formDataSourceStr(SKS_EFTAP_PaymentCalendar,SKS_EFTAP_PaymentCalendar)).research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_EFTAP_GeneratePaymentcalendar construct()
    {
        return new SKS_EFTAP_GeneratePaymentcalendar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    //SKS_Bug_12414 -->
    protected void new()
    {
        super();

        Query   query = new Query(queryStr(SKS_EFTAP_GeneratePaymentcalendarQuery));
        query.getCompanyRange();
        queryCreatePayment = new SysQueryRun(query);
        this.getWeekDaysEnumValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    //SKS_Bug_12414 <--
    public QueryRun queryRun()
    {
        return queryCreatePayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        /// <summary>
    /// Runs the payment calendar generation process.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validateDialog())
        {
            return;
        }
        try
        {
            ttsbegin;
            this.runProposalGenerationProcess();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the values to dialog.
    /// </summary>
    public void initParmDefault()
    {
        priority        = 5;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the dialog values.
    /// </summary>
    /// <returns></returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        paymentCompany                  =   dialogPaymentCompany.value();
        journalName                     =   dialogJournalName.value();
        startDate                       =   DateTimeUtil::date(dialogStartDate.value());
        endDate                         =   dialogEndDate.value();
        priority                        =   dialogPriority.value();
        description                     =   dialogDescription.value();
        payGroup                        =   dialogPayGroup.value();
        fromdatePaymcalendar            =   dialogFromDate.value();
        toDatePaymcalendar              =   dialogToDate.value();
        totalPaymentDatePaymcalendar    =   dialogTotalPaymentDate.value();
        minimumPaymentDatePaymcalendar  =   dialogMinimumPaymentDate.value();
        paymentCurrency                 =   dialogPaymentCurrency.value();
        amountLimit                     =   dialogAmountLimit.value();
        seperateByLE                    =   dialogSeperateByLE.value();
        checkBalance                    =   dialogCheckBalance.value();
        deleteNegative                  =   dialogDeleteNegative.value();
        proposalType                    =   dialogProposalType.value();
        paymentWeekdayFixed             =   dialogPaymentWeekdayFixed.value(); //Bug 10745
        earliestTime                    =   dialogearly.value();
        Timezone                        =   dialogTimezone.value();
        //SKS_Bug_12516 -->
        paymentWeekdaysContainer        =   paymentWeekdaysLookup.getSelectedFieldValues();
        /*if (paymentWeekdaysLookup)
        {
            paymentWeekdaysContainer = paymentWeekdaysLookup.getSelectedFieldValues();
        }*/
        //SKS_Bug_12516 <--
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// validates the dialog values.
    /// </summary>
    /// <param name = "calledFrom"></param>
    /// <returns></returns>
    public boolean validateDialog(Object calledFrom = null)
    {
        SKS_EFTAP_Paymentcalendar   paymentcalendar;
        DialogButton                dialogButton;
        boolean                     ret = true;

        if (paymentCurrency && !Currency::exist(paymentCurrency))
        {
            ret = checkFailed(strFmt("@SYS91941", paymentCurrency));
        }
        //SKS_Bug_12516 -->
        if(conPeek(paymentWeekdaysContainer, 1) == '')
        {
            error ('Days of week should not be empty on Calendar generator form');
            throw Exception::Error;
        }
        //SKS_Bug_12516 <--
        if(ret)
        {
            paymentcalendar = this.getRundates();

            if(paymentcalendar)
            {
                if(!this.isInBatch())//SKS_Bug_12515
                {
                    dialogButton =  Box::okCancel('Calendar Entries for description already exist for the given Payment company and date range. If you continue, any conflicting entries with the same Payment Company/Run Date/Description as an existing calendar entry will overwrite the existing entry. Continue?', DialogButton::Cancel);
                    if(dialogButton::Ok)
                    {
                        this.deleteConflictingData();
                    }
                }
                //SKS_Bug_12515 -->
                else
                {
                    error('Calendar Entries for description already exist for the given Payment company and date range');
                    throw Exception::Error;
                }
                //SKS_Bug_12515 <--
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPaymentCalanderData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data to paymentCalendar table.
    /// </summary>
    public void insertPaymentCalanderData(TransDate _runDate, str _invoiceCurrency,SKS_BR_NoteMemo  invoiceMethosOfPayment/*10118*/, Container _invoiceCompany, Name _paymentWeekDay, TimeofDay _RunDateUTC, TimeZone  _timeZone) // Bug 10130 //Bug 11920
    {
        SKS_EFTAP_PaymentCalendar   paymentCalendar;

        paymentCalendar.RunDate             = _runDate;
        paymentCalendar.PaymentCompany      = paymentCompany;
        paymentCalendar.JournalName         = journalName;
        paymentCalendar.RunDateUTC          = DateTimeUtil::newDateTime(_runDate, _rundateUTC, _timeZone);
        paymentCalendar.Description         = description;
        paymentCalendar.Priority            = priority;
        paymentCalendar.ProposalType        = proposalType;
        paymentCalendar.FromDate            = fromdatePaymcalendar ==  '' ? dateNull() :   _runDate + str2Int(fromdatePaymcalendar);
        paymentCalendar.ToDate              = toDatePaymcalendar == '' ? dateNull() :   _runDate + str2Int(toDatePaymcalendar);
        paymentCalendar.TotalPaymentDate    = totalPaymentDatePaymcalendar == '' ? dateNull() :   _runDate + str2Int(totalPaymentDatePaymcalendar);
        paymentCalendar.MinimumPaymentDate  = minimumPaymentDatePaymcalendar == '' ? dateNull() :   _runDate + str2Int(minimumPaymentDatePaymcalendar);
        paymentCalendar.PaymentWeekdays     = _paymentWeekDay;
        paymentCalendar.PaymentCurrency     = paymentCurrency;
        paymentCalendar.CheckLimit          = amountLimit;
        paymentCalendar.SeparateByLE        = seperateByLE;
        paymentCalendar.CheckBalance        = checkBalance;
        paymentCalendar.DeleteNegative      = deleteNegative;
        paymentCalendar.PayGroup            = payGroup;
        paymentCalendar.InvoiceCompany      = con2Str(_invoiceCompany);
        paymentCalendar.InvoiceMethodOfPayment  = invoiceMethosOfPayment;
        paymentCalendar.InvoiceCurrency         = _invoiceCurrency;
        paymentCalendar.Complete                = NoYes::No;
        paymentCalendar.PaymentWeekdayFixed     = enum2Str(paymentWeekdayFixed);//Bug 10745
        paymentCalendar.PaymentCalendarQuery    = queryCreatePayment.pack();//SKS_Bug_12658
        paymentCalendar.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProposalGenerationProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the calendar generation process.
    /// </summary>
    public void runProposalGenerationProcess()
    {
        #Define.CompanyPosition(1)
        #Define.IsMarkedPosition(2)
        TransDate           incrementDate;
        int                 day, month, yr,prevMonth,addDays;
        int                 week, input;
        TransDate           runDateLoc;
        TransDate           processedDate;
        str                 currencyRange;              //Bug 11920
        container           companyRange,companyRangeValue;
        container           companyRangeCon, companyRangeConList;
        int                 i,containerCompare;
        Weekdays            weekDays;
        boolean             endDateExecuted,checkForMonth;
        WorkCalendarSched   workCalendarSched;
        CalendarId          primCalendar;
        SchedDate           schedDateFrom;
        TransDate           mendDate;
        SKS_BR_NoteMemo     methodOfPaymentRange; //Bug10130 // 10118
        boolean             validDate; //10142
        //SKS_Bug_12619 -->
        QueryBuildRange     currencyBuildRange;
        QueryBuildRange     methodOfPaymentBuildRange;
        //SKS_Bug_12619 <--
        QueryBuildDataSource    queryBuildDataSource = queryCreatePayment.query().dataSourceTable(tableNum(VendTrans));

        utcdatetime         rundateTime;

        primCalendar        = "@SYS4110594";
        workCalendarSched = new workCalendarSched();
        incrementDate = startDate;
        currencyBuildRange = queryBuildDataSource.findRange(fieldNum(VendTrans, CurrencyCode));//SKS_Bug_12619
        //SKS_Bug_12619 -->
        if(currencyBuildRange)
        {
            currencyRange        = currencyBuildRange.value();
        }
        //SKS_Bug_12619 <--
        methodOfPaymentBuildRange = queryBuildDataSource.findRange(fieldNum(VendTrans, PaymMode));//SKS_Bug_12619
        //SKS_Bug_12619 -->
        if(methodOfPaymentBuildRange)
        {
            methodOfPaymentRange        = methodOfPaymentBuildRange.value();
        }
        //SKS_Bug_12619 <--
        companyRangeConList  = queryCreatePayment.query().getCompanyRange();
        for (i = 1; i <= conLen(companyRangeConList); i++)
        {
            companyRangeCon = conPeek(companyRangeConList, i);
            if (conPeek(companyRangeCon, #IsMarkedPosition))
            {
                companyRangeValue = conPeek(companyRangeCon, #CompanyPosition);
                companyRange += [companyRangeValue];
            }
        }
        while (incrementDate <= endDate)
        {
            runDateLoc  = dateNull();
            day         = dayOfMth(incrementDate);
            month       = mthOfYr(incrementDate);
            yr          = year(incrementDate);
            week        = dayOfWk(incrementDate);

            if(!prevMonth)
            {
                prevMonth = month;
            }

            if(prevMonth != month)
            {
                prevMonth = month;
                checkForMonth = true;
                mendDate    = Global::dateEndMth(processedDate);
            }

            for (containerCompare =1 ; containerCompare <= conLen(paymentWeekdaysContainer) ; containerCompare++)
            {
                input = str2Enum(weekDays, conPeek(paymentWeekdaysContainer,containerCompare));
                validDate = true;// 10142

                // 10141 -->
                if(checkForMonth)
                {
                    week        = dayOfWk(mendDate);// 10142
                    runDateLoc = workCalendarSched.schedDate(SchedDirection::Backward,mendDate, real2int(abs(input - week)),NoYes::No,primCalendar );
                    rundateTime = DateTimeUtil::newDateTime(runDateLoc, earliestTime, Timezone);
                    if(dayOfWk(runDateLoc) != input)
                    {
                        validDate = false;// 10142
                    }
                }
                else
                {
                    // 10142 -->
                    if(incrementDate == dateEndMth(incrementDate))
                    {
                        runDateLoc = incrementDate;
                        if(dayOfWk(runDateLoc) != input)
                        {
                            validDate = false;
                        }
                    }
                    else
                    {
                        runDateLoc=  mkDate(real2int(abs(day + (input - week))), month, yr);
                        rundateTime = DateTimeUtil::newDateTime(runDateLoc, earliestTime, Timezone);
                        if(dayOfWk(runDateLoc) != input)
                        {
                            validDate = false;
                        }
                    }
                    // 10142 <--
                }
                // 10141 <--
                if( runDateLoc && validDate)// 10142
                {
                    if(runDateLoc >= startDate && runDateLoc <= endDate)
                    {
                        processedDate = runDateLoc;
                        if(!SKS_EFTAP_PaymentCalendar::find(paymentCompany, Description, rundateTime)) // 10141
                        {
                            this.insertPaymentCalanderData(runDateLoc, currencyRange, methodOfPaymentRange, companyRange, enum2Symbol(enumnum(WeekDays), input), earliestTime, timezone);
                        }
                    }
                }

            }
            if(checkForMonth)
            {
                addDays       = real2int(abs(dayOfWk(mendDate) - 7));
                // 10141 -->
                if(addDays == 0)
                {
                    addDays = 7;
                }
                schedDateFrom = workCalendarSched.schedDate(SchedDirection::Forward, mendDate, addDays, NoYes::No, primCalendar );
                // 10141 <--
                checkForMonth = false;
                // 10142 -->
                if(processedDate == dateNull())
                {
                    processedDate = incrementDate;
                }
            }
            else
            {
                if(incrementDate == dateEndMth(incrementDate))
                {
                    addDays       = real2int(abs(dayOfWk(incrementDate)) - 7);
                    if(addDays == 0)
                    {
                        addDays = 7;
                    }
                    // 10142 <--
                }
                else
                {
                    addDays = 7;
                }// 10142
                schedDateFrom = workCalendarSched.schedDate(SchedDirection::Forward, incrementDate, addDays, NoYes::No, primCalendar ); // 10141
                // 10142 -->
                if(prevMonth != mthOfYr(schedDateFrom))
                {
                    prevMonth = mthOfYr(schedDateFrom);
                    checkForMonth = true;
                    if(processedDate == dateNull())
                    {
                        processedDate = incrementDate;
                    }
                    mendDate    = Global::dateEndMth(processedDate);
                }
                // 10142 <--
            }
            incrementDate = schedDateFrom;
            if(incrementDate> endDate && !endDateExecuted)
            {
                incrementDate = endDate;
                endDateExecuted = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates payment company
    /// </summary>
    public boolean validateParentCompany()
    {
        boolean  ret = true;

        if (!dialogPaymentCompany.value())
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRundates</Name>
				<Source><![CDATA[
    /// <summary>
    /// fetches the rundates from start and enddates.
    /// </summary>
    public SKS_EFTAP_PaymentCalendar getRundates()
    {
        TransDate                   incrementDate,runDateLoc;
        int                         day, month, yr,prevMonth,addDays;
        int                         week, input;
        SKS_EFTAP_PaymentCalendar   paymentCalendar;
        int                         containerCompare;
        Weekdays                    weekdays;
        boolean                     endDateExecuted,checkForMonth;
        WorkCalendarSched           workCalendarSched;
        CalendarId                  primCalendar;
        SchedDate                   schedDateFrom;
        TransDate                   mendDate;
        TransDate                   processedDate;
        utcdatetime                 rundateTime;
        primCalendar        = "@SYS4110594";
        workCalendarSched = new workCalendarSched();
        incrementDate = startDate;
        while (incrementDate <= endDate)
        {
            if(paymentCalendar)
            {
                return paymentCalendar;
            }

            runDateLoc  = dateNull();
            day         = dayOfMth(incrementDate);
            month       = mthOfYr(incrementDate);
            yr          = year(incrementDate);
            week        = dayOfWk(incrementDate);

            if(!prevMonth)
            {
                prevMonth = month;
            }

            if(prevMonth != month)
            {
                prevMonth = month;
                checkForMonth = true;
                mendDate   = Global::dateEndMth(processedDate);
                day         = dayOfMth(mendDate);
                month       = mthOfYr(mendDate);
                yr          = year(mendDate);
                week        = dayOfWk(mendDate);
            }

            for (containerCompare =1 ; containerCompare <= conLen(paymentWeekdaysContainer) ; containerCompare++)
            {
                input = str2Enum(weekDays, conPeek(paymentWeekdaysContainer,containerCompare));

                if (day + (input - week) >= 0)
                {
                    runDateLoc = mkDate(day + (input - week), month, yr);
                    rundateTime = DateTimeUtil::newDateTime(runDateLoc, earliestTime, Timezone);
                    if( processedDate == dateNull() ||  processedDate != runDateLoc)
                    {
                        if(runDateLoc >= startDate && runDateLoc <= endDate)
                        {
                            processedDate = runDateLoc;
                            paymentCalendar = SKS_EFTAP_PaymentCalendar::find(paymentCompany, Description, rundateTime);
                        }
                    }
                }
            }

            if(checkForMonth)
            {
                addDays       = dayOfMth(incrementDate);
                incrementDate = processedDate;
                checkForMonth = false;
            }
            else
            {
                addDays = 7;
            }
            schedDateFrom = workCalendarSched.schedDate(SchedDirection::Forward,incrementDate,addDays,NoYes::No,primCalendar ); // which calendar to be used for date calculation and verification
            incrementDate = schedDateFrom;
            if(incrementDate> endDate && !endDateExecuted)
            {
                incrementDate = endDate;
                endDateExecuted = true;
            }
        }
        return paymentCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteConflictingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete te records which falls with same runDate,paymentcompany and description
    /// </summary>
    public void deleteConflictingData()
    {
        TransDate                   incrementDate,runDateLoc;
        int                         day, month, yr,prevMonth,addDays;
        int                         week, input;
        SKS_EFTAP_PaymentCalendar   paymentCalendar;
        int                         containerCompare;
        Weekdays                    weekdays;
        boolean                     endDateExecuted,checkForMonth;
        WorkCalendarSched           workCalendarSched;
        CalendarId                  primCalendar;
        SchedDate                   schedDateFrom;
        TransDate                   mendDate;
        TransDate                   processedDate;
        utcdatetime                 rundateTime;
        ttsbegin;

        primCalendar        = "@SYS4110594";
        workCalendarSched = new workCalendarSched();
        incrementDate = startDate;
        while (incrementDate <= endDate)
        {
            runDateLoc  = dateNull();
            day         = dayOfMth(incrementDate);
            month       = mthOfYr(incrementDate);
            yr          = year(incrementDate);
            week        = dayOfWk(incrementDate);

            if(!prevMonth)
            {
                prevMonth = month;
            }

            if(prevMonth != month)
            {
                prevMonth = month;
                checkForMonth = true;
                mendDate   = Global::dateEndMth(processedDate);
                day         = dayOfMth(mendDate);
                month       = mthOfYr(mendDate);
                yr          = year(mendDate);
                week        = dayOfWk(mendDate);
            }

            for (containerCompare =1 ; containerCompare <= conLen(paymentWeekdaysContainer) ; containerCompare++)
            {
                input = str2Enum(weekDays, conPeek(paymentWeekdaysContainer,containerCompare));

                if (day + (input - week) >= 0)
                {
                    runDateLoc =  mkDate(day + (input - week), month, yr);
                    rundateTime = DateTimeUtil::newDateTime(runDateLoc, earliestTime, Timezone);
                    if( processedDate == dateNull() ||  processedDate != runDateLoc)
                    {
                        if(runDateLoc >= startDate && runDateLoc <= endDate)
                        {
                            processedDate = runDateLoc;
                            paymentCalendar = SKS_EFTAP_PaymentCalendar::find( paymentCompany, Description, rundateTime);
                            paymentCalendar.delete();
                        }
                    }

                }
            }
            if(checkForMonth)
            {
                addDays       = dayOfMth(incrementDate);
                incrementDate = processedDate;
                checkForMonth = false;
            }
            else
            {
                addDays = 7;
            }
            schedDateFrom = workCalendarSched.schedDate(SchedDirection::Forward,incrementDate,addDays,NoYes::No,primCalendar ); // which calendar to be used for date calculation and verification
            incrementDate = schedDateFrom;
            if(incrementDate> endDate && !endDateExecuted)
            {
                incrementDate = endDate;
                endDateExecuted = true;
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWeekDaysEnumValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets the payment weekdays enum values
    /// </summary>
    public SKS_EFTAP_PaymentWeekDays getWeekDaysEnumValues()
    {
        DictEnum DEnum;
        int      i;

        ttsbegin;//SKS_Bug_12414
        delete_from paymentWeekDays;
        DEnum = new DictEnum(enumNum(WeekDays));    //SKS_Bug_VSTS11956
        for (i=0; i < DEnum.values(); i++)
        {
            paymentWeekDays.ElementId   = DEnum.index2Value(i);
            paymentWeekDays.ElementName = DEnum.index2Label(i);
            if(paymentWeekDays.ElementId != 0)
            {
                paymentWeekDays.insert();
            }
        }
        ttscommit;//SKS_Bug_12414
        return paymentWeekDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows multi select lookup.
    /// </summary>
    /// <param name = "dialog"></param>
    public void dialogPostRun(DialogRunbase dialog)
    {
        FormRun formRun;

        super(dialog);
        formRun = dialog.dialogForm().formRun();

        if (formRun)
        {
            paymentWeekDaysFromControl = formRun.design().control(paymentWeekDaysFromBuildControl.id());
            paymentWeekdaysLookup = SysLookupMultiSelectCtrl::construct(formRun, paymentWeekDaysFromControl, querystr(SKS_EFTAP_PaymentWeekDaysQuery));
            paymentWeekdaysLookup.setMandatory(true);//SKS_Bug_12516
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNameLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup for journal name.
    /// </summary>
    private void journalNameLookup(FormStringControl _control)
    {
        Query   query = new Query();
        QueryBuildDataSource    qbdsJournalName;
        QueryBuildRange         queryBuildRangeJournalType;
        changecompany(dialogPaymentCompany.value())
        {
            SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerJournalName), _control);
            qbdsJournalName = query.addDataSource(tableNum(LedgerJournalName));
            queryBuildRangeJournalType = qbdsJournalName.addRange(fieldNum(LedgerJournalName, JournalType));
            queryBuildRangeJournalType.value(enum2Str(LedgerJournalType::Payment));
            qbdsJournalName.addRange(fieldNum(LedgerJournalName, SKS_IHB_PaymentRequestJournal)).value(queryValue(NOYES::NO));
            sysTableLookup.addLookupfield(fieldNum(LedgerJournalName, JournalName));
            sysTableLookup.addLookupfield(fieldNum(LedgerJournalName, Name));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNameValidate</Name>
				<Source><![CDATA[
    private boolean journalNameValidate(FormStringControl _control)
    {
        LedgerJournalName journalNames;

        select RecId from journalNames
        where journalNames.JournalType == LedgerJournalType::Payment
            && journalNames.SKS_IHB_PaymentRequestJournal == NoYes::No
            && journalNames.JournalName == _control.valueStr();

        if(journalNames.RecId == 0)
        {
            error(strFmt("@SYS22462",_control.valueStr()));
        }

        return journalNames.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyValidate</Name>
				<Source><![CDATA[
    private boolean companyValidate(FormStringControl _control)
    {
        CompanyInfo companies;

        select RecId from companies
            where companies.DataArea == _control.valueStr();

        if(companies.RecId == 0)
        {
            error(strFmt("@SYS10666",_control.valueStr()));
        }

        return companies.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyModified</Name>
				<Source><![CDATA[
    private boolean companyModified(FormStringControl _control)
    {
        dialogJournalName.value('');

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    //SKS_Bug_12414 -->
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        boolean     retVal = true;
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryCreatePayment = new QueryRun(packedQuery);
                }
                retVal = true;
                break;
            default:
                retVal = false;

        }
        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryCreatePayment.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }
    //SKS_Bug_12414 <--

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>