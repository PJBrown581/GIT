<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AP_CITI_GDFF</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AP_CITI_GDFF extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_AP_CITI_GDFF extends SKS_EFT_Format
{
    #define.FormatVersion('20230207')
    #define.Delimiter('@')
    #define.PLC('PLC')
    #define.PTA('PTA')
    #define.PTP('PTP')
    #define.BKT('BKT')
    #define.DFT('DFT')
    #define.EFT('EFT')
    #define.CHK('CHK')                          //SKS#DevOps:21225
    #define.DFT_NEFT('DFT-NEFT')                //SKS#DevOps:21225
    SKS_EB_Vendor       mSKS_EB_Vendor;
    LedgerJournalTrans  mLedgerJournalTrans;
    str Email, Fax, Phone;
    AmountMST   totalWHTInvoiceAmt, totalWHTTaxAmt;
    str mTaxWithholdSlipNum_TH;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_TH_WithHoldingTaxFields lSKS_EFT_TH_WithHoldingTaxFields = new SKS_EFT_TH_WithHoldingTaxFields();
    
        while(mSKS_EFT_FileDetail)
        {
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();
    
            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));
    
            //Get mLedgerJournalTrans
            this.set_mLedgerJournalTrans();
    
            // Invoice Details
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PLC ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PTA ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PTP)
            {
                // Get SKS_EFT_THWitholdingTaxFields
                lSKS_EFT_TH_WithHoldingTaxFields.getSKS_EFT_TH_WithHoldingTaxFields(mSKS_EFT_FileDetail.PaymentLineRecId);
    
                // Details
                this.rec_Details();
    
                if(lSKS_EFT_TH_WithHoldingTaxFields.RecordsFound())
                {
                    this.rec_THWT(lSKS_EFT_TH_WithHoldingTaxFields);
                }
            }
            else
            {
                // Details
                this.rec_Details();
            }
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressContactInfo</Name>
				<Source><![CDATA[
    protected str getAddressContactInfo(VendTable _VendTable, LogisticsElectronicAddressMethodType _Type)
    {
        DirPartyContactInfoview DirPartyContactInfoview;
    
        select firstonly DirPartyContactInfoview
                where DirPartyContactInfoview.Party == _VendTable.Party
                   && DirPartyContactInfoview.IsPrimary == true
                   && DirPartyContactInfoview.Type == _Type;
    
        return DirPartyContactInfoview.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    private str getEmail()
    {
        VendTable vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;
    
        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select firstonly DirPartyContactInfoview
                    where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                        &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
            if(DirPartyContactInfoView.Locator)
            {
                return DirPartyContactInfoView.Locator;
            }
        }
        else if(mSKS_EB_Vendor.EM2Addr)
        {
            return mSKS_EB_Vendor.EM2Addr;
        }
        else if(mSKS_EB_Vendor.EM3Addr)
        {
            return mSKS_EB_Vendor.EM3Addr;
        }
        else if(mSKS_EB_Vendor.EM4Addr)
        {
            return mSKS_EB_Vendor.EM4Addr;
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdGroupData</Name>
				<Source><![CDATA[
    private TaxWithholdGroupData getTaxWithholdGroupData(TaxWithholdGroup _TaxWithholdGroup)
    {
        TaxWithholdGroupData lTaxWithholdGroupData;
    
        select * from lTaxWithholdGroupData
                where lTaxWithholdGroupData.TaxWithholdGroup == _TaxWithholdGroup;
    
        return lTaxWithholdGroupData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdGroupName</Name>
				<Source><![CDATA[
    private str getTaxWithholdGroupName(TaxWithholdGroup _TaxWithholdGroup)
    {
        TaxWithholdGroupHeading lTaxWithholdGroupHeading;
    
        select firstonly TaxWithholdGroupName from lTaxWithholdGroupHeading where lTaxWithholdGroupHeading.TaxWithholdGroup == _TaxWithholdGroup;
    
        return lTaxWithholdGroupHeading.TaxWithholdGroupName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdValue</Name>
				<Source><![CDATA[
    private TaxWithholdValue getTaxWithholdValue(TaxWithholdCode _TaxWithholdCode)
    {
        TaxWithholdData lTaxWithholdData;
    
        select TaxWithholdValue from lTaxWithholdData
             where lTaxWithholdData.TaxWithholdCode == _TaxWithholdCode;
    
        return lTaxWithholdData.TaxWithholdValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorType</Name>
				<Source><![CDATA[
    private DirPartyBaseType getVendorType()
    {
        DirPartyTable lDirPartyTable;
        VendTable lVendTable;
    
        lVendTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
    
        select firstonly lDirPartyTable where lDirPartyTable.RecId == lVendTable.Party;
    
        switch (lDirPartyTable.getInstanceRelationType())
        {
            case tableStr(DirPerson):
                return DirPartyBaseType::Person;
            default:
                return DirPartyBaseType::Organization;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWHTInvoiceAmt</Name>
				<Source><![CDATA[
    private void getWHTInvoiceAmt()
    {
        TaxWithholdTrans lTaxWithholdTrans;
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
    
        while select InvoiceNumber, VendTransRecId, AccountCompany, RecordSummaryRecId
                from lSKS_EFT_FileDetail
               where lSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId &&
                     lSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            changeCompany(lSKS_EFT_FileDetail.AccountCompany)
            {
                select VendTransInvoiceId,
                       sum(InvoiceAmount),
                       sum(TaxWithholdAmount),
                       TaxWithholdSlipNum_TH
                  from lTaxWithholdTrans
                 where lTaxWithholdTrans.VendTransInvoiceId == lSKS_EFT_FileDetail.VendTransRecId;
    
                totalWHTInvoiceAmt += lTaxWithholdTrans.InvoiceAmount;
                totalWHTTaxAmt += lTaxWithholdTrans.TaxWithholdAmount;
                mTaxWithholdSlipNum_TH = lTaxWithholdTrans.TaxWithholdSlipNum_TH;
            }
        }
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Details
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Details()
    {
        //-------------------------------------------------------------
        //No.   Field Name                                       Format
        //  1   Product Code/Payment Method                          3X
        //  2   Debit Account Country Code                           2X
        //  3   Debit Account Number                                35X
        //  4   Payment Currency                                     3X
        //  5   Payment Amount                                      21N
        //  6   Branch Code                                          3N
        //  7   Value Date                                           8X
        //  8   Transaction Reference Number                        15X
        //  9   Pre-format Group Code                               16X
        // 10   Pre-format Code                                     35X
        // 11   Confidential Indicator                               1X
        // 12   Ordering Party [ID/Advice Type]                      6X
        // 13   Ordering Party ID                                   34X
        // 14   Ordering Party Name                                 35X
        // 15   Ordering Party Address 1                            35X
        // 16   Ordering Party Address 2                            35X
        // 17   Ordering Party Address 3                            35X
        // 18   Ordering Party Routing Method                       35X
        // 19   Ordering Party Routing Code                         11X
        // 20   Beneficiary Name                                    35X
        // 21   Beneficiary Address 1                               35X
        // 22   Beneficiary Address 2                               35X
        // 23   Beneficiary Address 3                               35X
        // 24   Beneficiary Account or Other ID Type                 6X
        // 25   Beneficiary Account Number [or Other ID]            34X
        // 26   Beneficiary Reference                               35X
        // 27   Beneficiary Bank Name                               35X
        // 28   Beneficiary Bank Address 1                          35X
        // 29   Beneficiary Bank Address 2                          35X
        // 30   Beneficiary Bank Address 3                          35X
        // 31   Beneficiary Bank Routing Method                     35X
        // 32   Beneficiary Bank Routing Code                       11X
        // 33   Beneficiary Bank Account or Other ID Type            6X
        // 34   Beneficiary Bank Account                            34X
        // 35   Beneficiary Bank Advice Type                        10X
        // 36   Payment Details, Line 1                             35X
        // 37   Payment Details, Line 2                             35X
        // 38   Payment Details, Line 3                             35X
        // 39   Payment Details, Line 4                             35X
        // 40   Beneficiary Is [A Bank]                             10X
        // 41   Bank to Bank Information, Line 1                    35X
        // 42   Bank to Bank Information, Line 2                    35X
        // 43   Bank to Bank Information, Line 3                    35X
        // 44   Bank to Bank Information, Line 4                    35X
        // 45   Bank to Bank Information, Line 5                    35X
        // 46   Bank to Bank Information, Line 6                    35X
        // 47   Intermediary Bank Routing Method                    35X
        // 48   Intermediary Bank Routing Code                      11X
        // 49   Intermediary Bank Name                              35X
        // 50   Intermediary Bank Address 1                         35X
        // 51   Intermediary Bank Address 2                         35X
        // 52   Intermediary Bank Address 3                         35X
        // 53   Intermediary Bank Country Code                       2X
        // 54   Intermediary Bank Country Name                      35X
        // 55   FX Contract                                         15X
        // 56   Exchange Rate                                       20X
        // 57   Intra-company [Indicator]                            1X
        // 58   Charges Indicator                                    3X
        // 59   Charges Account                                     34X
        // 60   Priority Flag                                        1X
        // 61   Pre-Advice Flag                                      1X
        // 62   Number of Credit Parties                            35X
        // 63   Entry Description                                   10X
        // 64   Second Intermediary Bank Account or Other ID Type   34X
        // 65   Second Intermediary Bank Account or Other ID        34X
        // 66   Second Intermediary Bank Advice Type                10X
        // 67   Second Intermediary Bank Name                       35X
        // 68   Second Intermediary Bank Address 1                  35X
        // 69   Second Intermediary Bank Address 2                  35X
        // 70   Second Intermediary Bank Address 3                  35X
        // 71   Advice To Name                                      35X
        // 72   Advice Media/Bene Advice Type                       10X
        // 73   Fax Number                                          15X
        // 74   Alternate Fax Number                                15X
        // 75   SMS Phone Number                                    35X
        // 76   Internet Address Account Name                       50X
        // 77   Internet Address Domain Name
        // 78   Payment Type                                         4X
        // 79   Transaction Type                                     3X
        // 80   Mail To Name                                        35X
        // 81   Mail To Address 1                                   35X
        // 82   Mail To Address 2                                   35X
        // 83   Mail To Address 3                                   35X
        // 84   Mail To Address 4                                   35X
        // 85   Mail To Country Code                                 2X
        // 86   Mail To Country Name                                35X
        // 87   Beneficiary Country Code                             2X
        // 88   Beneficiary Country Name                            35X
        // 89   Clearing Country Code                                2X
        // 90   Clearing Country Name                               35X
        // 91   Delivery Method                                      5X
        // 92   Payable At Location                                  9X
        // 93   PDC Discounting                                     10X
        // 94   Custom field 1                                      70X
        // 95   Custom field 2                                       3X
        // 96   Custom field 3                                      35X
        // 97   Custom field 4                                      70X
        // 98   Custom field 5                                      18X
        // 99   Custom field 6                                       1X
        //100   Custom field 7                                      70X
        //101   Custom field 8                                      70X
        //102   Custom field 9                                      70X
        //103   Custom field 10                                     70X
        //104   Custom field 11                                     70X
        //105   Custom field 12                                     70X
        //106   Custom field 13                                     70X
        //107   Custom field 14                                     70X
        //108   Custom field 15                                     70X
        //109   Custom field 16                                     70X
        //110   Custom field 17                                     70X
        //111   Custom field 18                                     70X
        //112   Custom field 19                                     70X
        //113   Subsidary Identifier                                 5X
        //-------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        VendTable lVendTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        str value, address, mailhandling;
    
        //  1   Product Code/Payment Method                          3X
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DFT_NEFT)            //SKS#DevOps:21225
        {
            sb.Append(this.wrapField('DFT'));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileFormatPaymSpec.PaymSpec));
        }

        //  2   Debit Account Country Code                           2X
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)));
    
        //  3   Debit Account Number                                35X
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct));
    
        //  4   Payment Currency                                     3X
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));
    
        //  5   Payment Amount                                      21N
        sb.Append(this.wrapField(num2str(mLedgerJournalTrans.AmountCurDebit - this.TotalDiscount(), 0, 2, 1, 0)));
    
        //  6   Branch Code                                          3N
        sb.Append(this.wrapField(''));
    
        //  7   Value Date                                           8X
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)));
    
        //  8   Transaction Reference Number                        15X
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 1, 15)));
    
        //  9   Pre-format Group Code                               16X
        sb.Append(this.wrapField(''));
    
        // 10   Pre-format Code                                     35X
        sb.Append(this.wrapField(''));
    
        // 11   Confidential Indicator                               1X
        sb.Append(this.wrapField(''));
    
        // 12   Ordering Party [ID/Advice Type]                      6X
        sb.Append(this.wrapField(''));
    
        // 13   Ordering Party ID                                   34X
        if(mSKS_EFT_FileDetail.PaymSpec == #BKT)
        {
            sb.Append(this.wrapField(''));
        }
        else
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, 1, 34)));
        }
    
    
        // 14   Ordering Party Name                                 35X
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 1, 35)));
    
        if(mSKS_EFT_FileDetail.PaymSpec == #PLC ||
           mSKS_EFT_FileDetail.PaymSpec == #PTA ||
           mSKS_EFT_FileDetail.PaymSpec == #PTP)
        {
            // 15   Ordering Party Address 1                            35X
            sb.Append(this.wrapField(''));
    
            // 16   Ordering Party Address 2                            35X
            sb.Append(this.wrapField(''));
    
            // 17   Ordering Party Address 3                            35X
            sb.Append(this.wrapField(''));
        }
        else
        {
            // 15   Ordering Party Address 1                            35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 1, 35)));
    
            // 16   Ordering Party Address 2                            35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 1, 35)));
    
            // 17   Ordering Party Address 3                            35X
            address = this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
    
            if(address != '')
            {
                address += ' ';
            }
            address += this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState);
    
            if(address != '')
            {
                address += ' ';
            }
    
            address += mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode;
    
            sb.Append(this.wrapField(subStr(address, 1, 35)));
        }
        // 18   Ordering Party Routing Method                       35X
        sb.Append(this.wrapField(''));
    
        // 19   Ordering Party Routing Code                         11X
        sb.Append(this.wrapField(''));
    
        // 20   Beneficiary Name                                    35X
        sb.Append(this.wrapField(subStr(mRemittanceName, 1, 35)));
    
        // 21   Beneficiary Address 1                               35X
        sb.Append(this.wrapField(subStr(mRemittanceAdrLine1, 1, 35)));
    
        // 22   Beneficiary Address 2                               35X
        sb.Append(this.wrapField(subStr(mRemittanceAdrLine2, 1, 35)));
    
        // 23   Beneficiary Address 3                               35X
        address = mRemittanceCity;
    
        if(address != '')
        {
            address += ' ';
        }
        address += mRemittanceState;
    
        if(address != '')
        {
            address += ' ';
        }
    
        address += mRemittanceZipCode;
    
        sb.Append(this.wrapField(subStr(address, 1, 35)));
    
        // 24   Beneficiary Account or Other ID Type                 6X
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DFT_NEFT)
        {
            sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BeneAccountType', mSKS_EFT_FileDetail.RecId))));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
        
    
        // 25   Beneficiary Account Number [or Other ID]            34X
        if(mSKS_EFT_FileDetail.PaymSpec == #PLC)
        {
            sb.Append(this.wrapField(''));
        }
        else
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 34)));
        }
    
        // 26   Beneficiary Reference                               35X
        sb.Append(this.wrapField(''));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DFT || 
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DFT_NEFT)
        {
            // 27   Beneficiary Bank Name                               35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 1, 35)));
    
            // 28   Beneficiary Bank Address 1                          35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), 1, 35)));
    
            // 29   Beneficiary Bank Address 2                          35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), 1, 35)));
    
            // 30   Beneficiary Bank Address 3                          35X
            sb.Append(this.wrapField(''));
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DFT_NEFT)
            {
                // 31   Beneficiary Bank Routing Method                     35X
                sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BeneBankRoutingMethod', mSKS_EFT_FileDetail.RecId))));

                if(mSKS_EFT_FileDetail.DepSwiftNo != '')
                {    
                    // 32   Beneficiary Bank Routing Code                       11X
                    sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo));
                }
                else
                {
                    // 32   Beneficiary Bank Routing Code                       11X
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 35)));
                }
            }
            else 
            {
                if(mSKS_EFT_FileDetail.DepSwiftNo != '')
                {
                    // 31   Beneficiary Bank Routing Method                     35X
                    sb.Append(this.wrapField('IS'));
    
                    // 32   Beneficiary Bank Routing Code                       11X
                    sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo));
                }
                else
                {
                    // 31   Beneficiary Bank Routing Method                     35X
                    sb.Append(this.wrapField(enum2str(mSKS_EFT_FileDetail.DepBankCodeType)));
    
                    // 32   Beneficiary Bank Routing Code                       11X
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 35)));
                }
            }
        }
        else
        {
            // 27   Beneficiary Bank Name                               35X
            sb.Append(this.wrapField(''));
    
            // 28   Beneficiary Bank Address 1                          35X
            sb.Append(this.wrapField(''));
    
            // 29   Beneficiary Bank Address 2                          35X
            sb.Append(this.wrapField(''));
    
            // 30   Beneficiary Bank Address 3                          35X
            sb.Append(this.wrapField(''));
    
            if(mSKS_EFT_FileDetail.PaymSpec == #PLC ||
               mSKS_EFT_FileDetail.PaymSpec == #PTA ||
               mSKS_EFT_FileDetail.PaymSpec == #PTP)
            {
                // 31   Beneficiary Bank Routing Method                     35X
                sb.Append(this.wrapField(''));
            }
            else
            {
                // 31   Beneficiary Bank Routing Method                     35X
                sb.Append(this.wrapField(enum2str(mSKS_EFT_FileDetail.DepBankCodeType)));
            }
    
            if(mSKS_EFT_FileDetail.PaymSpec == #PLC)
            {
                // 32   Beneficiary Bank Routing Code                       11X
                sb.Append(this.wrapField(''));
            }
            else
            {
                // 32   Beneficiary Bank Routing Code                       11X
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 35)));
            }
        }
    
        // 33   Beneficiary Bank Account or Other ID Type            6X
        sb.Append(this.wrapField(''));
    
        // 34   Beneficiary Bank Account                            34X
        sb.Append(this.wrapField(''));
    
        // 35   Beneficiary Bank Advice Type                        10X
        sb.Append(this.wrapField(''));
    
        // 36   Payment Details, Line 1                             35X
        sb.Append(this.wrapField(''));
    
        // 37   Payment Details, Line 2                             35X
        sb.Append(this.wrapField(''));
    
        // 38   Payment Details, Line 3                             35X
        sb.Append(this.wrapField(''));
    
        // 39   Payment Details, Line 4                             35X
        sb.Append(this.wrapField(''));
    
        // 40   Beneficiary Is [A Bank]                             10X
        sb.Append(this.wrapField(''));
    
        // 41   Bank to Bank Information, Line 1                    35X
        sb.Append(this.wrapField(''));
    
        // 42   Bank to Bank Information, Line 2                    35X
        sb.Append(this.wrapField(''));
    
        // 43   Bank to Bank Information, Line 3                    35X
        sb.Append(this.wrapField(''));
    
        // 44   Bank to Bank Information, Line 4                    35X
        sb.Append(this.wrapField(''));
    
        // 45   Bank to Bank Information, Line 5                    35X
        sb.Append(this.wrapField(''));
    
        // 46   Bank to Bank Information, Line 6                    35X
        sb.Append(this.wrapField(''));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT && (mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' || mSKS_EFT_FileDetail_Intermediary.IntBankId != ''))
        {
            value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('IntrBankRoutingMtd', mSKS_EFT_FileDetail.RecId));
    
            // 47   Intermediary Bank Routing Method                    35X
            sb.Append(this.wrapField(value));
    
            // 48   Intermediary Bank Routing Code                      11X
            if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' && (value == 'IS' || value == ''))
            {
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 1, 11)));
            }
            else
            {
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_Intermediary.IntBankId, 1, 11)));
            }
    
            // 49   Intermediary Bank Name                              35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 1, 35)));
    
            // 50   Intermediary Bank Address 1                         35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankAddr), 1, 35)));
    
            // 51   Intermediary Bank Address 2                         35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankAddr2), 1, 35)));
    
            // 52   Intermediary Bank Address 3                         35X
            sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankCity), 1, 35)));
    
            // 53   Intermediary Bank Country Code                       2X
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId)));
    
            // 54   Intermediary Bank Country Name                      35X
            sb.Append(this.wrapField(this.getLogisticsAddressCountryRegionName(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId)));
        }
        else
        {
            // 47   Intermediary Bank Routing Method                    35X
            sb.Append(this.wrapField(''));
    
            // 48   Intermediary Bank Routing Code                      11X
            sb.Append(this.wrapField(''));
    
            // 49   Intermediary Bank Name                              35X
            sb.Append(this.wrapField(''));
    
            // 50   Intermediary Bank Address 1                         35X
            sb.Append(this.wrapField(''));
    
            // 51   Intermediary Bank Address 2                         35X
            sb.Append(this.wrapField(''));
    
            // 52   Intermediary Bank Address 3                         35X
            sb.Append(this.wrapField(''));
    
            // 53   Intermediary Bank Country Code                       2X
            sb.Append(this.wrapField(''));
    
            // 54   Intermediary Bank Country Name                      35X
            sb.Append(this.wrapField(''));
        }
    
        // 55   FX Contract                                         15X
        sb.Append(this.wrapField(''));
    
        // 56   Exchange Rate                                       20X
        sb.Append(this.wrapField(''));
    
        // 57   Intra-company [Indicator]                            1X
        sb.Append(this.wrapField(''));
    
        // 58   Charges Indicator                                    3X
        sb.Append(this.wrapField(''));
    
        // 59   Charges Account                                     34X
        sb.Append(this.wrapField(''));
    
        // 60   Priority Flag                                        1X
        sb.Append(this.wrapField(''));
    
        // 61   Pre-Advice Flag                                      1X
        sb.Append(this.wrapField(''));
    
        // 62   Number of Credit Parties                            35X
        sb.Append(this.wrapField(''));
    
        // 63   Entry Description                                   10X
        sb.Append(this.wrapField(''));
    
        // 64   Second Intermediary Bank Account or Other ID Type   34X
        sb.Append(this.wrapField(''));
    
        // 65   Second Intermediary Bank Account or Other ID        34X
        sb.Append(this.wrapField(''));
    
        // 66   Second Intermediary Bank Advice Type                10X
        sb.Append(this.wrapField(''));
    
        // 67   Second Intermediary Bank Name                       35X
        sb.Append(this.wrapField(''));
    
        // 68   Second Intermediary Bank Address 1                  35X
        sb.Append(this.wrapField(''));
    
        // 69   Second Intermediary Bank Address 2                  35X
        sb.Append(this.wrapField(''));
    
        // 70   Second Intermediary Bank Address 3                  35X
        sb.Append(this.wrapField(''));
    
        // 71   Advice To Name                                      35X
        sb.Append(this.wrapField(''));
    
        mailhandling = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BeneAdviceType', mSKS_EFT_FileDetail.RecId));
        if(mailhandling != '')
        {
            switch(mailhandling)
            {
                case 'FAX':
                    Fax = this.getAddressContactInfo(lVendTable, LogisticsElectronicAddressMethodType::Fax);
                    break;
                case 'SMS':
                    Phone = this.getAddressContactInfo(lVendTable, LogisticsElectronicAddressMethodType::Phone);
                    break;
                case 'INT':
                    Email = this.getEmail();
                    break;
            }
        }
    
        if(mSKS_EFT_FileDetail.PaymSpec == #PTP)
        {
            // 72   Advice Media/Bene Advice Type                       10X
            sb.Append(this.wrapField(''));
    
            // 73   Fax Number                                          15X
            sb.Append(this.wrapField(Fax));
    
            // 74   Alternate Fax Number                                15X
            sb.Append(this.wrapField(''));
    
            // 75   SMS Phone Number                                    35X
            sb.Append(this.wrapField(''));
    
            // 76   Internet Address Account Name                       50X
            sb.Append(this.wrapField(''));
    
            // 77   Internet Address Domain Name
            sb.Append(this.wrapField(''));
        }
        else
        {
            // 72   Advice Media/Bene Advice Type                       10X
            sb.Append(this.wrapField(mailhandling));
    
            if(mSKS_EFT_FileDetail.PaymSpec == #PTP)
            {
                // 73   Fax Number                                          15X
                sb.Append(this.wrapField(''));
            }
            else
            {
                // 73   Fax Number                                          15X
                sb.Append(this.wrapField(Fax));
            }
    
            // 74   Alternate Fax Number                                15X
            sb.Append(this.wrapField(''));
    
            // 75   SMS Phone Number                                    35X
            sb.Append(this.wrapField(Phone));
    
            if(Email != '')
            {
                // 76   Internet Address Account Name                       50X
                // 77   Internet Address Domain Name
                sb.Append(this.wrapField(Email));
            }
            else
            {
                // 76   Internet Address Account Name                       50X
                sb.Append(this.wrapField(''));
    
                // 77   Internet Address Domain Name
                sb.Append(this.wrapField(''));
            }
        }
    
        // 78   Payment Type                                         4X
        sb.Append(this.wrapField(''));
    
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        if(mSKS_EFT_FileDetail.PaymSpec == #PTA ||
           mSKS_EFT_FileDetail.PaymSpec == #PTP)
        {
            // 79   Transaction Type                                     3X
            sb.Append(this.wrapField(this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode)));
        }
        else
        {
            // 79   Transaction Type                                     3X
            sb.Append(this.wrapField(''));
        }
        // 80   Mail To Name                                        35X
        sb.Append(this.wrapField(''));
    
        // 81   Mail To Address 1                                   35X
        sb.Append(this.wrapField(''));
    
        // 82   Mail To Address 2                                   35X
        sb.Append(this.wrapField(''));
    
        // 83   Mail To Address 3                                   35X
        sb.Append(this.wrapField(''));
    
        // 84   Mail To Address 4                                   35X
        sb.Append(this.wrapField(''));
    
        // 85   Mail To Country Code                                 2X
        sb.Append(this.wrapField(''));
    
        // 86   Mail To Country Name                                35X
        sb.Append(this.wrapField(''));
    
        // 87   Beneficiary Country Code                             2X
        sb.Append(this.wrapField(''));
    
        // 88   Beneficiary Country Name                            35X
        sb.Append(this.wrapField(''));
    
        // 89   Clearing Country Code                                2X
        sb.Append(this.wrapField(''));
    
        // 90   Clearing Country Name                               35X
        sb.Append(this.wrapField(''));

        if(mSKS_EFT_FileDetail.PaymSpec == #PLC)
        {
            // 91   Delivery Method                                      5X
            sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DeliveryMethod', mSKS_EFT_FileDetail.RecId))));
    
            // 92   Payable At Location                                  9X
            sb.Append(this.wrapField('THA'));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            // 91   Delivery Method                                      5X
            sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DeliveryMethodCHK', mSKS_EFT_FileDetail.RecId))));
    
            // 92   Payable At Location                                  9X
            sb.Append(this.wrapField(''));
        }
        else
        {
            // 91   Delivery Method                                      5X
            sb.Append(this.wrapField(''));
    
            // 92   Payable At Location                                  9X
            sb.Append(this.wrapField(''));
        }
    
        // 93   PDC Discounting                                     10X
        sb.Append(this.wrapField(''));
    
        // 94   Custom field 1                                      70X
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PrintLocation', mSKS_EFT_FileDetail.RecId))));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        // 95   Custom field 2                                       3X
        sb.Append(this.wrapField(''));
    
        // 96   Custom field 3                                      35X
        sb.Append(this.wrapField(''));
    
        if(mSKS_EFT_FileDetail.PaymSpec == #PLC ||
           mSKS_EFT_FileDetail.PaymSpec == #PTA ||
           mSKS_EFT_FileDetail.PaymSpec == #PTP)
        {
            this.getWHTInvoiceAmt();
    
            if(totalWHTInvoiceAmt != 0)
            {
                // 97   Invoice amount                                      21X
                sb.Append(this.wrapField(num2str(-1 * totalWHTInvoiceAmt, 0, 2, 0, 0),false));
            }
            else
            {
                // 97   Invoice amount                                      21X
                sb.Append(this.wrapField(num2str(mLedgerJournalTrans.AmountCurDebit - this.TotalDiscount(), 0, 2, 1, 0)));
            }
        }
        else
        {
            // 97   Custom field 4                                      70X
            sb.Append(this.wrapField(''));
        }
    
        // 98   Custom field 5                                      18X
        sb.Append(this.wrapField(''));
    
        // 99   Custom field 6                                       1X
        sb.Append(this.wrapField(''));
    
        //100   Custom field 7                                      70X
        sb.Append(this.wrapField(''));
    
        //101   Custom field 8                                      70X
        sb.Append(this.wrapField(''));
    
        //102   Custom field 9                                      70X
        sb.Append(this.wrapField(''));
    
        //103   Custom field 10                                     70X
        sb.Append(this.wrapField(''));
    
        //104   Custom field 11                                     70X
        sb.Append(this.wrapField(''));
    
        //105   Custom field 12                                     70X
        sb.Append(this.wrapField(''));
    
        //106   Custom field 13                                     70X
        sb.Append(this.wrapField(''));
    
        //107   Custom field 14                                     70X
        sb.Append(this.wrapField(''));
    
        //108   Custom field 15                                     70X
        sb.Append(this.wrapField(''));
    
        //109   Custom field 16                                     70X
        sb.Append(this.wrapField(''));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            //110   Custom field 17                                     70X
            sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstmntDetails1', mSKS_EFT_FileDetail.RecId))));

            //111   Custom field 18                                     70X
            sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstmntDetails2', mSKS_EFT_FileDetail.RecId))));
        }
        else
        {
            //110   Custom field 17                                     70X
            sb.Append(this.wrapField(''));
    
            //111   Custom field 18                                     70X
            sb.Append(this.wrapField(''));
        }
        
    
        //112   Custom field 19                                     70X
        sb.Append(this.wrapField(''));
    
        //113   Subsidary Identifier                                 5X
        sb.Append(this.wrapField('', false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_THWT</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_THWT
    /// </summary>
    /// <param name = "_SKS_EFT_TH_WithHoldingTaxFields">_SKS_EFT_TH_WithHoldingTaxFields</param>
    /// <returns>true</returns>
    public boolean rec_THWT(SKS_EFT_TH_WithHoldingTaxFields _SKS_EFT_TH_WithHoldingTaxFields)
    {
        //---------------------------------------------------------
        //Line  Field   Detail                          Format
        //   1
        //          1   Bank Branch Code and Province      70X
        //   2
        //          1   Identifier                          3X
        //          2   Fax Number                         15X
        //   3
        //          1   Identifier                          3X
        //          2   SMS Number                         15X
        //   4
        //          1   Identifier                          3X
        //          2   Tax Type Code                       6X
        //          3   TaxType Description                30X
        //          4   Tax Document No                    20X
        //          5   Tax Sequence No                     5X
        //    5
        //          1   Identifier                          3X
        //          2   Internal Use                       10X
        //          3   Tax ID                             13X
        //    6
        //          1   Identifier                          3X
        //          2   Name Title                         70X
        //    7
        //          1   Identifier                          3X
        //          2   Beneficiary First Name 1           70X
        //    8
        //          1   Identifier                          3X
        //          2   Beneficiary First Name 2           70X
        //    9
        //          1   Identifier                          3X
        //          2   Beneficiary Last Name              72X
        //   10
        //          1   Identifier                          3X
        //          2   Beneficiary Address Line 1         70X
        //   11
        //          1   Identifier                          3X
        //          2   Beneficiary Address Line 2         70X
        //   12
        //          1   Identifier                          3X
        //          2   Beneficiary Address Line 3         70X
        //   13
        //          1   Identifier                          3X
        //          2   Beneficiary Address Line 4         70X
        //   14
        //          1   Identifier                          3X
        //          2   Compound Name                      30X
        //          3   Room Number                        10X
        //          4   Floor                               3X
        //          5   Bank A/C Number                    15X
        //   15
        //          1   Identifier                          3X
        //          2   Address Number                     20X
        //          3   Moo                                 2X
        //          4   Soi                                30X
        //   16
        //          1   Identifier                          3X
        //          2   Street                             30X
        //   17
        //          1   Identifier                          3X
        //          2   Sub District/Tumbon                30X
        //          3   District/Amphur                    30X
        //   18
        //          1   Identifier                          3X
        //          2   Province                           40X
        //          3   Postcode                            5X
        //   19
        //          1   Identifier                          3X
        //          2   Tax Description1 Line 1            60X
        //          3   Tax Code 1                          8X
        //   20
        //          1   Identifier                          3X
        //          2   Tax Description1 Line 2            70X
        //   21
        //          1   Identifier                          3X
        //          2   Tax Description1 Line 3            70X
        //   22
        //          1   Identifier                          3X
        //          2   Tax Rate 1                          6X
        //          3   Taxable Amount 1                   17X
        //          4   Tax Amount 1                       17X
        //          5   Tax Deduction Date 1               10X
        //   23
        //          1   Identifier                          3X
        //          2   Payer Code 1                        1X
        //          3   Payer Description 1                60X
        //   24
        //          1   Identifier                          3X
        //          2   Tax Description 2 Line 1           60X
        //          3   Tax Code 2                          8X
        //   25
        //          1   Identifier                          3X
        //          2   Tax Description 2 Line 2           70X
        //   26
        //          1   Identifier                          3X
        //          2   Tax Description2 Line 3            70X
        //   27
        //          1   Identifier                          3X
        //          2   Tax Rate 2                          6X
        //          3   Taxable Amount 2                   17X
        //          4   Tax Amount 2                       17X
        //          5   Tax Deduction Date 2               10X
        //   28
        //          1   Identifier                          3X
        //          2   Payer Code 2                        1X
        //          3   Payer Description 2                60X
        //   29
        //          1   Identifier                          3X
        //          2   Tax Description 3 Line 1           60X
        //          3   Tax Code 3                          8X
        //   30
        //          1   Identifier                          3X
        //          2   Tax Description 3 Line 2           70X
        //   31
        //          1   Identifier                          3X
        //          2   Tax Description3 Line 3            60X
        //   32
        //          1   Identifier                          3X
        //          2   Tax Rate 3                          6X
        //          3   Taxable Amount 3                   17X
        //          4   Tax Amount 3                       17X
        //          5   Tax Deduction Date 3               10X
        //   33
        //          1   Identifier                          3X
        //          2   Payer Code 3                        1X
        //          3   Payer Description 3                60X
        //---------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        TaxWithholdGroupData lTaxWithholdGroupData;
        str value;
    
        void writestring(str _value)
        {
            sb.Append(this.wrapField('INV') + _value);
            this.fileWrite(sb.ToString());
            sb.Clear();
        }
    
        lTaxWithholdGroupData = this.getTaxWithholdGroupData(mLedgerJournalTrans.TaxWithholdGroup);
    
        //   1
        //          1   Bank Branch Code and Province      70X
        writestring(SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   2
        //          1   Identifier                          3X
        //          2   Fax Number                         15X
        writestring(SKS_PP_StringFormats::strFill(3, 'FAX', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(15, Fax, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   3
        //          1   Identifier                          3X
        //          2   SMS Number                         15X
        writestring(SKS_PP_StringFormats::strFill(3, 'SMS', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(15, Phone, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   4
        //          1   Identifier                          3X
        //          2   Tax Type Code                       6X
        //          3   TaxType Description                30X
        //          4   Tax Document No                    20X
        //          5   Tax Sequence No                     5X
        if(this.getVendorType() == DirPartyBaseType::Person)
        {
            value = '030000';
        }
        else
        {
            value = '530000';
        }
    
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(6, value, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(30, this.getTaxWithholdGroupName(mLedgerJournalTrans.TaxWithholdGroup), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(20, mTaxWithholdSlipNum_TH, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //    5
        //          1   Identifier                          3X
        //          2   Internal Use                       10X
        //          3   Tax ID                             13X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(13, _SKS_EFT_TH_WithHoldingTaxFields.TaxRegNum(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //    6
        //          1   Identifier                          3X
        //          2   Name Title                         70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //    7
        //          1   Identifier                          3X
        //          2   Beneficiary First Name 1           70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, mRemittanceName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //    8
        //          1   Identifier                          3X
        //          2   Beneficiary First Name 2           70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //    9
        //          1   Identifier                          3X
        //          2   Beneficiary Last Name              72X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(72, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   10
        //          1   Identifier                          3X
        //          2   Beneficiary Address Line 1         70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, mRemittanceAdrLine1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   11
        //          1   Identifier                          3X
        //          2   Beneficiary Address Line 2         70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, mRemittanceAdrLine2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   12
        //          1   Identifier                          3X
        //          2   Beneficiary Address Line 3         70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   13
        //          1   Identifier                          3X
        //          2   Beneficiary Address Line 4         70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   14
        //          1   Identifier                          3X
        //          2   Compound Name                      30X
        //          3   Room Number                        10X
        //          4   Floor                               3X
        //          5   Bank A/C Number                    15X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(15, mSKS_EFT_FileDetail.DepBankAccountId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   15
        //          1   Identifier                          3X
        //          2   Address Number                     20X
        //          3   Moo                                 2X
        //          4   Soi                                30X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   16
        //          1   Identifier                          3X
        //          2   Street                             30X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   17
        //          1   Identifier                          3X
        //          2   Sub District/Tumbon                30X
        //          3   District/Amphur                    30X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(30, mRemittanceCity, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   18
        //          1   Identifier                          3X
        //          2   Province                           40X
        //          3   Postcode                            5X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(40, mRemittanceState, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(5, mRemittanceZipCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   19
        //          1   Identifier                          3X
        //          2   Tax Description1 Line 1            60X
        //          3   Tax Code 1                          8X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(8, '99000000', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   20
        //          1   Identifier                          3X
        //          2   Tax Description1 Line 2            70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   21
        //          1   Identifier                          3X
        //          2   Tax Description1 Line 3            70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   22
        //          1   Identifier                          3X
        //          2   Tax Rate 1                          6X
        //          3   Taxable Amount 1                   17X
        //          4   Tax Amount 1                       17X
        //          5   Tax Deduction Date 1               10X
    
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strMoney(this.getTaxWithholdValue(lTaxWithholdGroupData.TaxWithholdCode), 6) +
                    SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 17) +
                    SKS_PP_StringFormats::strMoney(totalWHTTaxAmt, 17) +
                    date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2,DateSeparator::Slash,DateMonth::Digits2,DateSeparator::Slash,DateYear::Digits4,DateFlags::None));
    
        //   23
        //          1   Identifier                          3X
        //          2   Payer Code 1                        1X
        //          3   Payer Description 1                60X
        switch(_SKS_EFT_TH_WithHoldingTaxFields.PaymentGrossUpType())
        {
            case 0:
                value = '1';
                break;
            case 1:
                value = '2';
                break;
            case 2:
                value = '3';
                break;
            case 10:
                value = '9';
                break;
        }
    
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(1, value, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   24
        //          1   Identifier                          3X
        //          2   Tax Description 2 Line 1           60X
        //          3   Tax Code 2                          8X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   25
        //          1   Identifier                          3X
        //          2   Tax Description 2 Line 2           70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   26
        //          1   Identifier                          3X
        //          2   Tax Description2 Line 3            70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   27
        //          1   Identifier                          3X
        //          2   Tax Rate 2                          6X
        //          3   Taxable Amount 2                   17X
        //          4   Tax Amount 2                       17X
        //          5   Tax Deduction Date 2               10X
        writestring(SKS_PP_StringFormats::strFill(3,'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(6,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(17,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(17,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(10,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   28
        //          1   Identifier                          3X
        //          2   Payer Code 2                        1X
        //          3   Payer Description 2                60X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   29
        //          1   Identifier                          3X
        //          2   Tax Description 3 Line 1           60X
        //          3   Tax Code 3                          8X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   30
        //          1   Identifier                          3X
        //          2   Tax Description 3 Line 2           70X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(70, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   31
        //          1   Identifier                          3X
        //          2   Tax Description3 Line 3            60X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   32
        //          1   Identifier                          3X
        //          2   Tax Rate 3                          6X
        //          3   Taxable Amount 3                   17X
        //          4   Tax Amount 3                       17X
        //          5   Tax Deduction Date 3               10X
        writestring(SKS_PP_StringFormats::strFill(3,'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(6,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(17,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(17,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(10,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //   33
        //          1   Identifier                          3X
        //          2   Payer Code 3                        1X
        //          3   Payer Description 3                60X
        writestring(SKS_PP_StringFormats::strFill(3, 'WHT', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right) +
                    SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>set_mLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void set_mLedgerJournalTrans()
    {
        select * from mLedgerJournalTrans where mLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TotalDiscount</Name>
				<Source><![CDATA[
    private AmountMST TotalDiscount()
    {
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
    
        select sum(InvoiceDiscAmountPmtCur) from lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail.RecId;
    
        return lSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _Delimit = true)
    {
        if(_Delimit)
        {
            return _field + #Delimiter;
        }
        else
        {
            return _field;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0 && mModule == SKS_EFT_Module::AP)
        {
            select * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>