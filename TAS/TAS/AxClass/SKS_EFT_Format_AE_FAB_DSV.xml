<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AE_FAB_DSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AE_FAB_DSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_AE_FAB_DSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220112')
    #define.SFF_BS('SFF-BS')
    #define.BFF_SC('BFF-SC')
    #define.SFF_MC('SFF-MC')
    #define.Separator('|')
    str bankPurpCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.getSKS_EFT_FileFormatPaymSpec();
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SFF_BS:
                this.rec_SFF_BSHeader();
                break;
            case #BFF_SC:
                this.rec_Header();
                break;
        }
        while(mSKS_EFT_FileDetail)
        {
            this.getSKS_EFT_FileFormatPaymSpec();

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #SFF_BS:               
                    this.rec_SFF_BSDetails();
                    break;                    
                case #BFF_SC:
                case #SFF_MC:
                    this.rec_Details();
                    break;
            }
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SFF_BSHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_SFF_BSHeader
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_SFF_BSHeader()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Batch Number
        //2     SalaryCompanyCode
        //3     SalaryCount
        //4     TotalAmount
        //5     CreationDate
        //6     ValueDate
        //7     SalaryType
        //---------------------------------------------------------------------------------
        str salaryCmpCd, btchbkg;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        btchbkg = SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId);
        salaryCmpCd = SKS_EFT_Format::getCodelookupvalue('SalaryCmpCd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Batch Number
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 16)));

        //2     SalaryCompanyCode
        sb.Append(this.wrapField(salaryCmpCd));

        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;      
        
        //3     SalaryCount
        sb.Append(this.wrapField(num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur, 0, 0, 0, 0), 5));

        //4     TotalAmount
        sb.Append(this.wrapField(num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 15));

        //5     CreationDate
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen)));

        //6     ValueDate
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen)));

        //7     SalaryType
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SalaryType', mSKS_EFT_FileDetail.RecId)),3, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SFF_BSDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_SFF_BSDetails
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_SFF_BSDetails()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1    Bank ID
        //2    Beneficiary Account Number
        //3    Amount
        //4    EmpNo
        //5    EmpName
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Bank ID
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BankID', mSKS_EFT_FileDetail.RecId)),3));

        //2     Beneficiary Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34));

        //3     Amount
        sb.Append(this.wrapField(num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 15));

        //4     EmpNo
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountNum), 30));

        //5     EmpName
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), 50, false));

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Header()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     BulkTxnType
        //2     BatchNo
        //3     CompCode
        //4     NoOfTxns
        //5     TotalAmnt
        //6     CreationDate
        //---------------------------------------------------------------------------------
        str companyCd;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        companyCd = SKS_EFT_Format::getCodelookupvalue('CompanyCd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     BulkTxnType
        sb.Append(this.wrapField('99'));

        //2     BatchNo
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 20)));

        //3     CompCode
        sb.Append(this.wrapField(companyCd));

        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        //4     NoOfTxns
        sb.Append(this.wrapField(num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur, 0, 0, 0, 0), 9));

        //5     TotalAmnt
        sb.Append(this.wrapField(num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 15));

        //6    CreationDate
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen),0,false));

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Details
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Details()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     TxnId
        //2     TxnTypeCd
        //3     TxnDate
        //4     FromAccNo
        //5     Amount
        //6     CcyCd
        //7     BeneficiaryAccNo
        //8     BeneficiaryName
        //9     BeneAddress
        //10    BeneBank Name
        //11    BeneBankSwift / Routing Code
        //12    BeneBankBranch
        //13    ValueDate
        //14    ChargesBene
        //15    IntermediaryBank
        //16    PaymentDetails
        //17    Payment Purpose Code
        //18    IBAN
        //19    URL
        //20    CBPurposeCode
        //21    Miscellaneous
        //22    Other
        //---------------------------------------------------------------------------------

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str typeCode;
        LogisticsAddressCountryRegionISOCode isoCode;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SFF_MC)
        {
            //1     BatchNo
            sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 50)));
        }
    
        //1     TxnId
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 15)));

        //2     TxnTypeCd
        if(substr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 6) == 'NBADAE')        //SKS#DevOps:17038
        {
            sb.Append(this.wrapField('11'));
            typeCode = '11';
        }
        else
        {
            sb.Append(this.wrapField('13'));
            typeCode = '13';
        }

        //3     TxnDate
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::Hyphen)));

        //4     FromAccNo
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankIBAN));

        //5     Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        //6     CcyCd
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //7     BeneficiaryAccNo
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34));

        //8     BeneficiaryName
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35));

        //9     BeneAddress
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_VendAddress.BeneAddr, 35));

        //10    BeneBank Name
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_BenBank.BenBankName, 50));

        //11    BeneBankSwift / Routing Code               
        if(typeCode == '11')
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo, 11));
        }       
        else if(typeCode == '13')
        {
            isoCode = LogisticsAddressCountryRegion::findByISOCode(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).CountryRegionId;
            if(isoCode == 'IN')
            {
                sb.Append(this.wrapField('INFSC' + (mSKS_EFT_FileDetail.DepBankTransit)));
            }
            else if(isoCode == 'AU')
            {
                sb.Append(this.wrapField('AUBSB' + (mSKS_EFT_FileDetail.DepBankTransit)));
            }
            else if(isoCode == 'US')
            {
                sb.Append(this.wrapField('USABA' + (mSKS_EFT_FileDetail.DepBankTransit)));
            }
            else
            {
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));
            }
        }

        //12    BeneBankBranch
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_BenBank.BenBankBranch, 35));

        //13    ValueDate
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen)));

        //14    ChargesBene
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChargesIndic', mSKS_EFT_FileDetail.RecId)), 3));

        //15    IntermediaryBank
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 11));

        //16    PaymentDetails
        sb.Append(this.wrapField(''));

        //17    Payment Purpose Code        
        this.getBankPurposeCode();
        sb.Append(this.wrapField(bankPurpCode, 10));

        //18    IBAN
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 30));

        //19    URL
        sb.Append(this.wrapField(''));

        //20    CBPurposeCode
        sb.Append(this.wrapField(''));

        //21    Miscellaneous
        sb.Append(this.wrapField(''));

        //22    Other
        sb.Append(this.wrapField('',0,false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    private void getBankPurposeCode()
    {
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        bankPurpCode = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode); 
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary           
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
            mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;              
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>