<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CustPaymModeEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CustPaymModeEventHandler
{  
    

    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CustPaymModeEventHandler construct()
    {
        return new SKS_CustPaymModeEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustPaymModeTable_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(CustPaymMode, CustPaymModeTable), FormDataSourceEventType::Initialized)]
    public static void CustPaymModeTable_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDesign formDesign = formRun.design(0);
        
        FormControl sKS_CNP_FormatId = formDesign.controlName(formControlStr(CustPaymMode, EFTFormat_SKS_CNP_FormatId));
        
        //sKS_CNP_FormatId.visible(true);
        
        var overrides = SKS_CustPaymModeEventHandler::construct();        
        
        sender.object(fieldNum(CustPaymModeTable, SKS_EFT_FormatId)).registerOverrideMethod(methodStr(FormDataObject, validate),
            methodStr(SKS_CustPaymModeEventHandler, SKS_EFT_FormatId_OnValidated), overrides);

        sender.object(fieldNum(CustPaymModeTable, SKS_EFT_PaymMode)).registerOverrideMethod(methodStr(FormDataObject, validate),
            methodStr(SKS_CustPaymModeEventHandler,SKS_EFT_PaymMode_OnValidated), overrides);

        sender.object(fieldNum(CustPaymModeTable, SKS_CNP_FormatId)).registerOverrideMethod(methodStr(FormDataObject, validate),
            methodStr(SKS_CustPaymModeEventHandler, SKS_CNP_FormatId_OnValidated), overrides);

        sender.object(fieldNum(CustPaymModeTable, SKS_CNP_PaymMode)).registerOverrideMethod(methodStr(FormDataObject, validate),
            methodStr(SKS_CustPaymModeEventHandler,SKS_CNP_PaymMode_OnValidated), overrides);

        sender.object(fieldNum(CustPaymModeTable,PaymStatus)).registerOverrideMethod(methodStr(FormObject,validate),
            methodStr(SKS_CustPaymModeEventHandler, PaymStatus_OnValidated), overrides);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustPaymModeTable_OnValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Default validate write method.
    /// </summary>
    /// <param name="sender">Form datasource</param>
    /// <param name="e">Event arguments</param>
    [FormDataSourceEventHandler(formDataSourceStr(CustPaymMode, CustPaymModeTable), FormDataSourceEventType::ValidatingWrite)]
    public static void CustPaymModeTable_OnValidatingWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormDataSourceCancelEventArgs   eventArgs           = e;
        boolean                         ret                 = !eventArgs.cancel();
        CustPaymModeTable               custPaymModeTable   = sender.cursor();

        if (ret
            && custPaymModeTable.SKS_EFT_PaymMode
            && !custPaymModeTable.SKS_EFT_FormatId)
        {
            ret = checkFailed("@SKS:SKSMissingFormat");
        }

        if (ret
            && custPaymModeTable.SKS_CNP_PaymMode
            && !custPaymModeTable.SKS_CNP_FormatId)
        {
            ret = checkFailed("@SKS:CNPCustFormatIdMissingError");
        }

        eventArgs.cancel(!ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_FormatId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(CustPaymMode, CustPaymModeTable, SKS_EFT_FormatId), FormDataFieldEventType::Modified)]
    public static void SKS_EFT_FormatId_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        CustPaymModeSpec custPaymModeSpec;
        SKS_EFT_FileFormatPaymSpec fileFormatPaymSpec;
        SKS_EFT_CustomerPaym sks_eft_CustomerPaym;
        CustPaymModeSpec custPaymModeSpecDel;        
        FormDataSource custpaymmodeTableDS = sender.datasource();
        CustPaymModeTable custPaymModeTable = custpaymmodeTableDS.cursor();
        RecordInsertList           custPaymModeSpecRecordInsertList = new RecordInsertList(tableNum(CustPaymModeSpec));     //TAS_CAR
        
        if(CustPaymModeTable.SKS_EFT_FormatId != '')
        {
            ttsbegin;
            custpaymmodeTableDS.write();

            // Update format id on eft customer records
            update_recordset sks_eft_CustomerPaym
                setting FormatId = custPaymModeTable.SKS_EFT_FormatId
                where sks_eft_CustomerPaym.PaymMode == custPaymModeTable.PaymMode;

            // Delete any existing payment specs and re-populate based on eft file format payment specs
            delete_from custPaymModeSpecDel where custPaymModeSpecDel.PaymMode == custPaymModeTable.PaymMode;

            while select * from fileFormatPaymSpec where fileFormatPaymSpec.FormatId == custPaymModeTable.SKS_EFT_FormatId &&
                 fileFormatPaymSpec.UseWithCustomers == NoYes::Yes &&
                 fileFormatPaymSpec.Selected == NoYes::Yes
            {
                custPaymModeSpec.PaymMode = custPaymModeTable.PaymMode;
                custPaymModeSpec.Specification = fileFormatPaymSpec.PaymSpec;
                custPaymModeSpec.Name = fileFormatPaymSpec.PaymSpecFileDescr;
                custPaymModeSpec.ClassId = classNum(SKS_EFT_CustOutPaymRecord);
                custPaymModeSpec.SKS_EFT_FFPaymSpecRecId = fileFormatPaymSpec.RecId;
                custPaymModeSpecRecordInsertList.add(custPaymModeSpec);         //TAS_CAR               
            }
            custPaymModeSpecRecordInsertList.insertDatabase();              //TAS_CAR
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_FormatId_OnValidated</Name>
				<Source><![CDATA[
    public boolean  SKS_EFT_FormatId_OnValidated(FormDataObject sender)
    {
        boolean ret;
        LedgerJournalTable ledgerJournaltable;
        LedgerJournalTrans ledgerjournaltrans;
        FormDataSource custPaymModeTableDS = sender.datasource();
        CustPaymModeTable custPaymModeTable = custPaymModeTableDS.cursor();
                
        ret = True;

        select firstonly JournalNum from ledgerJournaltable 
            where ledgerJournaltable.JournalType==ledgerjournaltype::CustPayment &&
                ledgerJournaltable.SKS_EFT_JournalState > SKS_EFT_JournalState::NotApplicable && 
                ledgerJournaltable.Posted == NoYes::No
            join paymMode from ledgerjournaltrans 
            where ledgerjournaltrans.JournalNum == ledgerJournaltable.JournalNum &&
                ledgerjournaltrans.paymMode == custPaymModeTable.PaymMode;
        
        if (ledgerjournaltrans)
        {
            ret = checkFailed("@SKS1721");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustPaymModeTable_OnValidatingDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CustPaymMode, CustPaymModeTable), FormDataSourceEventType::ValidatingDelete)]
    public static void CustPaymModeTable_OnValidatingDelete(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LedgerJournalTable ledgerJournaltable;
        LedgerJournalTrans ledgerjournaltrans;
        CustPaymModeTable custPaymModeTable = sender.cursor();
               
        select firstonly JournalNum from ledgerJournaltable
            where ledgerJournaltable.JournalType==ledgerjournaltype::CustPayment &&
                ledgerJournaltable.SKS_EFT_JournalState > SKS_EFT_JournalState::NotApplicable &&
                ledgerJournaltable.Posted == NoYes::No
            join paymMode from ledgerjournaltrans
            where ledgerjournaltrans.JournalNum == ledgerJournaltable.JournalNum &&
                ledgerjournaltrans.paymMode == custPaymModeTable.PaymMode;
        
        if (ledgerjournaltrans)
        {
            throw error("@SKS:SKGCNPMOPDelete");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymMode_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///  
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(CustPaymMode, CustPaymModeTable, SKS_EFT_PaymMode), FormDataFieldEventType::Modified)]
    public static void SKS_EFT_PaymMode_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource custPaymModeTable_ds = sender.datasource();
        CustPaymModeTable custPaymModeTable = custPaymModeTable_ds.cursor();
        FormRun formRun = custPaymModeTable_ds.formRun();
        FormDesign formDesign = formRun.design(0);
        FormControl fileFormats = formDesign.controlName(formControlStr(CustPaymMode, FileFormats));
        FormControl setupButtonGroup = formDesign.controlName(formControlStr(CustPaymMode, SetupButtonGroup));
        FormControl eftFormat = formDesign.controlName(formControlStr(CustPaymMode, EFTFormat));
        FormControl bankCustPaymModeBankAccounts = formDesign.controlName(formControlStr(CustPaymMode, BankCustPaymModeBankAccounts));
        FormControl menuItemButton = formDesign.controlName(formControlStr(CustPaymMode, MenuItemButton));
        FormControl sKS_CNP_FormatId = formDesign.controlName(formControlStr(CustPaymMode, EFTFormat_SKS_CNP_FormatId));
        FormControl sKS_EFT_FormatId = formDesign.controlName(formControlStr(CustPaymMode, EFTFormat_SKS_EFT_FormatId));
        CustPaymModeSpec custPaymModeSpec;

        if(custPaymModeTable.SKS_EFT_PaymMode)
        {
            fileFormats.visible(false);
            setupButtonGroup.visible(false);
            eftFormat.visible(true);    
            bankCustPaymModeBankAccounts.enabled(false);
            menuItemButton.enabled(false);
    
            sKS_CNP_FormatId.enabled(false);
            sKS_EFT_FormatId.enabled(true);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, SKS_CNP_PaymMode)).enabled(false);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, AccountType)).enabled(false);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, PaymentLedgerDimension)).enabled(false);
            //custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, PaymStatus)).enabled(false);   // Bug - 11632
        }
        else
        {
            fileFormats.visible(true);
            setupButtonGroup.visible(true);
            eftFormat.visible(false);    
            bankCustPaymModeBankAccounts.enabled(true);
            menuItemButton.enabled(true);
    
            sKS_CNP_FormatId.enabled(true);
            sKS_EFT_FormatId.enabled(false);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, SKS_CNP_PaymMode)).enabled(true);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, AccountType)).enabled(true);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, PaymentLedgerDimension)).enabled(true);
            //custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, PaymStatus)).enabled(true);   // Bug - 11632
        }

        ttsbegin;
        if(custPaymModeTable.SKS_EFT_PaymMode)
        {
            custPaymModeTable.AccountType = LedgerJournalACType::Bank;
            custPaymModeTable.PaymentLedgerDimension = 0;
            custPaymModeTable.ClassId = classnum(SKS_EFT_CustOutPaym);
            custPaymModeTable.ClassIdFileAnalyze = 0;
            custPaymModeTable.ClassIdRemittance = 0;
            custPaymModeTable.ClassIdReturn = 0;

            //<Issue22068>
            if(custPaymModeTable.PaymStatus != CustVendPaymStatus::Confirmed)
            {
                custPaymModeTable.PaymStatus = CustVendPaymStatus::Sent;
            }
            //</Issue22068>
        }
        else
        {
            custPaymModeTable.SKS_EFT_FormatId = '';
            custPaymModeTable.ClassId = 0;
            delete_from custPaymModeSpec where custPaymModeSpec.PaymMode == custPaymModeTable.PaymMode;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymMode_OnValidated</Name>
				<Source><![CDATA[
    public  boolean SKS_EFT_PaymMode_OnValidated(FormDataObject sender)
    {
        if(this.SKS_EFT_PaymModeInUse(sender))
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymModeInUse</Name>
				<Source><![CDATA[
    boolean SKS_EFT_PaymModeInUse(FormDataObject sender)
    {
        CustPaymModeTable custPaymModeTable = sender.datasource().cursor();
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;
        
        if(CustPaymModeTable.orig().SKS_EFT_PaymMode && !CustPaymModeTable.SKS_EFT_PaymMode)
        {
            select firstonly PaymMode from sks_eft_FilePmtSelection
                where sks_eft_FilePmtSelection.PaymMode == CustPaymModeTable.PaymMode &&
                    sks_eft_FilePmtSelection.Module == SKS_EFT_Module::AR;

            if(sks_eft_FilePmtSelection)
            {
                error("@SKS6222");
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustPaymModeTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CustPaymMode, CustPaymModeTable), FormDataSourceEventType::Activated)]
    public static void CustPaymModeTable_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {            
        CustPaymModeTable custPaymModeTable = sender.cursor();
        FormRun formRun = sender.formRun();
        formDesign formDesign = formRun.design(0);
        FormControl fileFormats = formDesign.controlName(formControlStr(CustPaymMode, FileFormats));
        FormControl setupButtonGroup = formDesign.controlName(formControlStr(CustPaymMode, SetupButtonGroup));
        FormControl eftFormat = formDesign.controlName(formControlStr(CustPaymMode, EFTFormat));
        FormControl bankCustPaymModeBankAccounts = formDesign.controlName(formControlStr(CustPaymMode, BankCustPaymModeBankAccounts));
        FormControl menuItemButton = formDesign.controlName(formControlStr(CustPaymMode, MenuItemButton));
        
        if(custPaymModeTable.SKS_EFT_PaymMode || custPaymModeTable.SKS_CNP_PaymMode)
        {
            fileFormats.visible(false);
            setupButtonGroup.visible(false);
            eftFormat.visible(true);    
            bankCustPaymModeBankAccounts.enabled(false);
            menuItemButton.enabled(false);
    
            sender.object(fieldnum(CustPaymModeTable, AccountType)).enabled(false);
            sender.object(fieldnum(CustPaymModeTable, PaymentLedgerDimension)).enabled(false);
            //sender.object(fieldnum(CustPaymModeTable, PaymStatus)).enabled(false);    // Bug - 11632
        }
        else
        {
            fileFormats.visible(true);
            setupButtonGroup.visible(true);
            eftFormat.visible(false);    
            bankCustPaymModeBankAccounts.enabled(true);
            menuItemButton.enabled(true);
    
            sender.object(fieldnum(CustPaymModeTable, AccountType)).enabled(true);
            sender.object(fieldnum(CustPaymModeTable, PaymentLedgerDimension)).enabled(true);
            //sender.object(fieldnum(CustPaymModeTable, PaymStatus)).enabled(true);     // Bug - 11632
        }

        if(custPaymModeTable.SKS_EFT_PaymMode)
        {
            sender.object(fieldnum(CustPaymModeTable, SKS_CNP_PaymMode)).enabled(false);
            sender.object(fieldnum(CustPaymModeTable, SKS_CNP_FormatId)).enabled(false);
        }
        else
        {
            sender.object(fieldnum(CustPaymModeTable, SKS_CNP_PaymMode)).enabled(true);
            sender.object(fieldnum(CustPaymModeTable, SKS_CNP_FormatId)).enabled(true);
        }

        if(custPaymModeTable.SKS_CNP_PaymMode)
        {
            sender.object(fieldnum(CustPaymModeTable, SKS_EFT_PaymMode)).enabled(false);
            sender.object(fieldnum(CustPaymModeTable, SKS_EFT_FormatId)).enabled(false);
        }
        else
        {
            sender.object(fieldnum(CustPaymModeTable, SKS_EFT_PaymMode)).enabled(true);
            sender.object(fieldnum(CustPaymModeTable, SKS_EFT_FormatId)).enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CNP_PaymMode_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(CustPaymMode, CustPaymModeTable, SKS_CNP_PaymMode), FormDataFieldEventType::Modified)]
    public static void SKS_CNP_PaymMode_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource custPaymModeTable_ds = sender.datasource();
        CustPaymModeTable custPaymModeTable = custPaymModeTable_ds.cursor();
        FormRun formRun = custPaymModeTable_ds.formRun();
        FormDesign formDesign = formRun.design(0);
        FormControl fileFormats = formDesign.controlName(formControlStr(CustPaymMode, FileFormats));
        FormControl setupButtonGroup = formDesign.controlName(formControlStr(CustPaymMode, SetupButtonGroup));
        FormControl eftFormat = formDesign.controlName(formControlStr(CustPaymMode, EFTFormat));
        FormControl bankCustPaymModeBankAccounts = formDesign.controlName(formControlStr(CustPaymMode, BankCustPaymModeBankAccounts));
        FormControl menuItemButton = formDesign.controlName(formControlStr(CustPaymMode, MenuItemButton));
        FormStringControl sKS_CNP_FormatId = formDesign.controlName(formControlStr(CustPaymMode, EFTFormat_SKS_CNP_FormatId));
        FormControl sKS_EFT_FormatId = formDesign.controlName(formControlStr(CustPaymMode, EFTFormat_SKS_EFT_FormatId));
        CustPaymModeSpec custPaymModeSpec;

        if(custPaymModeTable.SKS_CNP_PaymMode)
        {
            fileFormats.visible(false);
            setupButtonGroup.visible(false);
            eftFormat.visible(true);
            bankCustPaymModeBankAccounts.enabled(false);
            menuItemButton.enabled(false);

            
            sKS_CNP_FormatId.enabled(true);
            sKS_CNP_FormatId.mandatory(true);
            sKS_EFT_FormatId.enabled(false);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, AccountType)).enabled(false);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, PaymentLedgerDimension)).enabled(false);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, SKS_EFT_PaymMode)).enabled(false);
        }
        else
        {
            fileFormats.visible(true);
            setupButtonGroup.visible(true);
            eftFormat.visible(false);
            bankCustPaymModeBankAccounts.enabled(true);
            menuItemButton.enabled(true);
    
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, AccountType)).enabled(true);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, PaymentLedgerDimension)).enabled(true);
            sKS_CNP_FormatId.enabled(false);
            sKS_CNP_FormatId.mandatory(false);
            sKS_EFT_FormatId.enabled(true);
            custPaymModeTable_ds.object(fieldnum(CustPaymModeTable, SKS_EFT_PaymMode)).enabled(true);
        }

        ttsbegin;
        if(custPaymModeTable.SKS_CNP_PaymMode)
        {
            custPaymModeTable.AccountType = LedgerJournalACType::Bank;
            custPaymModeTable.PaymentLedgerDimension = 0;
            custPaymModeTable.ClassId = classnum(SKS_EFT_CustOutPaym);
            custPaymModeTable.ClassIdFileAnalyze = 0;
            custPaymModeTable.ClassIdRemittance = 0;
            custPaymModeTable.ClassIdReturn = 0;

            //<Issue22068>
            if(custPaymModeTable.PaymStatus != CustVendPaymStatus::Confirmed)
            {
                custPaymModeTable.PaymStatus = CustVendPaymStatus::Sent;
            }
            //</Issue22068>
        }
        else
        {
            custPaymModeTable.SKS_CNP_FormatId = '';
            custPaymModeTable.ClassId = 0;
            delete_from custPaymModeSpec where custPaymModeSpec.PaymMode == custPaymModeTable.PaymMode;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CNP_FormatId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(CustPaymMode, CustPaymModeTable, SKS_CNP_FormatId), FormDataFieldEventType::Modified)]
    public static void SKS_CNP_FormatId_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        CustPaymModeSpec custPaymModeSpec;
        SKS_EFT_FileFormatPaymSpec fileFormatPaymSpec;
        SKS_EFT_CustomerPaym sks_eft_CustomerPaym;
        CustPaymModeSpec custPaymModeSpecDel;
        FormDataSource custpaymmodeTableDS = sender.datasource();
        CustPaymModeTable custPaymModeTable = custpaymmodeTableDS.cursor();
        RecordInsertList           custPaymModeSpecRecordInsertList = new RecordInsertList(tableNum(CustPaymModeSpec));     //TAS_CAR
        
        if(CustPaymModeTable.SKS_CNP_FormatId != '')
        {
            ttsbegin;
            custpaymmodeTableDS.write();

            // Update format id on eft customer records
            update_recordset sks_eft_CustomerPaym
                    setting FormatId = custPaymModeTable.SKS_CNP_FormatId
                    where sks_eft_CustomerPaym.PaymMode == custPaymModeTable.PaymMode;

            // Delete any existing payment specs and re-populate based on eft file format payment specs
            delete_from custPaymModeSpecDel where custPaymModeSpecDel.PaymMode == custPaymModeTable.PaymMode;

            while select * from fileFormatPaymSpec where fileFormatPaymSpec.FormatId == custPaymModeTable.SKS_CNP_FormatId &&
                     fileFormatPaymSpec.UseWithCustReimbursements == NoYes::Yes &&
                     fileFormatPaymSpec.Selected == NoYes::Yes
            {
                custPaymModeSpec.PaymMode = custPaymModeTable.PaymMode;
                custPaymModeSpec.Specification = fileFormatPaymSpec.PaymSpec;
                custPaymModeSpec.Name = fileFormatPaymSpec.PaymSpecFileDescr;
                custPaymModeSpec.ClassId = classNum(SKS_EFT_CustOutPaymRecord);
                custPaymModeSpec.SKS_EFT_FFPaymSpecRecId = fileFormatPaymSpec.RecId;
                custPaymModeSpecRecordInsertList.add(custPaymModeSpec);         //TAS_CAR
            }
            custPaymModeSpecRecordInsertList.insertDatabase();              //TAS_CAR
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CNP_FormatId_OnValidated</Name>
				<Source><![CDATA[
    public boolean  SKS_CNP_FormatId_OnValidated(FormDataObject sender)
    {
        boolean ret;
        LedgerJournalTable ledgerJournaltable;
        LedgerJournalTrans ledgerjournaltrans;
        FormDataSource custPaymModeTableDS = sender.datasource();
        CustPaymModeTable custPaymModeTable = custPaymModeTableDS.cursor();
                
        ret = True;

        select firstonly JournalNum from ledgerJournaltable
            where ledgerJournaltable.JournalType==ledgerjournaltype::CustPayment &&
                ledgerJournaltable.SKS_EFT_JournalState > SKS_EFT_JournalState::NotApplicable &&
                ledgerJournaltable.Posted == NoYes::No
            join paymMode from ledgerjournaltrans
            where ledgerjournaltrans.JournalNum == ledgerJournaltable.JournalNum &&
                ledgerjournaltrans.paymMode == custPaymModeTable.PaymMode;
        
        if (ledgerjournaltrans)
        {
            ret = checkFailed("@SKS1721");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CNP_PaymMode_OnValidated</Name>
				<Source><![CDATA[
    public  boolean SKS_CNP_PaymMode_OnValidated(FormDataObject sender)
    {
        if(this.SKS_CNP_PaymModeInUse(sender))
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CNP_PaymModeInUse</Name>
				<Source><![CDATA[
    boolean SKS_CNP_PaymModeInUse(FormDataObject sender)
    {
        CustPaymModeTable custPaymModeTable = sender.datasource().cursor();
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;
        
        if(CustPaymModeTable.orig().SKS_CNP_PaymMode && !CustPaymModeTable.SKS_CNP_PaymMode)
        {
            select firstonly PaymMode from sks_eft_FilePmtSelection
                where sks_eft_FilePmtSelection.PaymMode == CustPaymModeTable.PaymMode &&
                sks_eft_FilePmtSelection.Module == SKS_EFT_Module::CNP;

            if(sks_eft_FilePmtSelection)
            {
                error("@SKS:SKGCNPMOPIsInUse");
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymStatus_OnValidated</Name>
				<Source><![CDATA[
    public boolean PaymStatus_OnValidated(FormDataObject sender)
    {
        boolean ret;
        FormRun formrun = sender.datasource().formRun();
        FormDataSource custPaymModeTable_ds = sender.datasource();
        CustPaymModeTable custPaymModeTable = custPaymModeTable_ds.cursor();
        ret = sender.validate();
        
        if(ret && custPaymModeTable.SKS_CNP_PaymMode == NoYes::Yes &&  // if this is an EFT+ Method of Payment
           !(custPaymModeTable.PaymStatus == CustVendPaymStatus::Confirmed ||
            custPaymModeTable.PaymStatus == CustVendPaymStatus::Recieved ||
            custPaymModeTable.PaymStatus == CustVendPaymStatus::Sent))
        {
            warning(strFmt("@SKS:SKGCNPPaymStatusValidation", enum2str(custPaymModeTable.PaymStatus)));
            return false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>