<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CITI_CDFF_95</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CITI_CDFF_95  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CITI_CDFF_95  extends SKS_EFT_Format
{
    #define.FormatVersion('20220629')
    #define.HATCH('#')
    #define.DFT('DFT')
    #define.CBFT('CBFT')
    #define.SEPA('SEPA')
    #define.MPSP('MPSP')
    #define.SPLIT_TAX('SPLIT-TAX')
    #define.INTREV('INT-REV')

    
    str strDays;
    str strMonth;
    str strYears;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //Details
            this.rec_Main();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Main</Name>
				<Source><![CDATA[
    //1     Placeholder
    //2     Country Code
    //3     Payment Method
    //4     Value Date
    //5     Placeholder
    //6     PreFormat Group Code
    //7     PreFormat Code
    //8     Payment Type
    //9     Currency
    //10    Amount
    //11    Placeholder
    //12    Debit Account Number
    //13    Placeholder
    //14    Placeholder
    //15    Placeholder
    //16    Placeholder
    //17    Placeholder
    //18    Placeholder
    //19    Placeholder
    //20    Placeholder
    //21    Placeholder
    //22    Charge Indicator
    //23    Ordering Party Country Code
    //24    Placeholder
    //25    Identification
    //26    Client Reference Number
    //27    Placeholder
    //28    Placeholder
    //29    Ordering Party Organization ID Type
    //30    Ordering Party Organization ID(SEPA)
    //31    Issuer/Transaction Type Sorbnet
    //32    Placeholder
    //33    Placeholder
    //34    Placeholder
    //35    Placeholder
    //36    Placeholder
    //37    Ordering Party Name
    //38    Ordering Party Address – Line 1
    //39    Ordering Party Address – Line 2
    //40    Placeholder
    //41    Placeholder
    //42    Beneficiary Is
    //43    Ordering Party Name
    //44    Beneficiary Account Number
    //45    Beneficiary Name
    //46    Placeholder
    //47    Beneficiary Address Line 1
    //48    Beneficiary Address Line 2
    //49    Beneficiary Address Line 3
    //50    Beneficiary Bank Routing Method
    //51    Beneficiary Bank Routing Code
    //52    Placeholder
    //53    Beneficiary Address Line 1
    //54    Beneficiary Address Line 2
    //55    Beneficiary Bank Name
    //56    Beneficiary Bank Address Line 1
    //57    Beneficiary Bank Address Line 2
    //58    Beneficiary Bank Address Line 3
    //59    Intermediary Bank Routing Method
    //60    Intermediary Bank Routing Code
    //61    Intermediary Bank Name
    //62    Intermediary Bank Address Line 1
    //63    Intermediary Bank Address Line 2
    //64    Intermediary Bank Address Line 3
    //65    Placeholder
    //66    Placeholder
    //67    Placeholder
    //68    Placeholder
    //69    Placeholder
    //70    Placeholder
    //71    Placeholder
    //72    Payment Details Line 1
    //73    Payment Details Line 2
    //74    Payment Details Line 3
    //75    Payment Details Line 4
    //76    Charges Account Number
    //77    Advise for Beneficiary
    //78    Placeholder
    //79    Placeholder
    //80    Placeholder
    //81    Placeholder
    //82    Placeholder
    //83    Placeholder
    //84    Other Instructions line 1
    //85    Other Instructions line 2
    //86    Other Instructions line 3
    //87    Other Instructions line 4
    //88    Other Instructions line 5
    //89    Other Instructions line 6
    //90    Payment details lne 2
    //91    Payment details lne 3
    //92    Payment details lne 4
    //93    Placeholder
    //94    Payment Title Code
    //95    Payment Title Description
    boolean rec_Main()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail      sks_EFT_FileDetail;
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTrans_W    ledgerJournalTrans_W;
        PaymentFormatCodeSets_W paymentFormatCodeSets_W;
        VendInvoiceJour  vendInvoiceJour;
        VendTable        lVendTable;
        str wordPartyAddress,benAddress;
        str invDetails = '';
        AmountMST amt;
        int length;

        //1     Placeholder
        sb.Append(this.wrapField());

        //2     Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId)));

        //3     Payment Method
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DFT:
            case #MPSP:
            case #SPLIT_TAX:
            case #INTREV:
                sb.Append(this.wrapField('DFT'));
                break;
            case #CBFT:
                sb.Append(this.wrapField('EFT'));
                break;
            case #SEPA:
                sb.Append(this.wrapField('SEPA'));
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }

        //4     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)));

        //5     Placeholder
        sb.Append(this.wrapField(''));

        //6     PreFormat Group Code
        sb.Append(this.wrapField(''));

        //7     PreFormat Code
        sb.Append(this.wrapField(''));

        //8     Payment Type
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MPSP)
        {
            length = 3;
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
        {
            length = 6;
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTREV)
        {
            length = 13;
        }


        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SPLIT_TAX)
        {
            sb.Append(this.wrapField('LVS'));
        }
        else
        {
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(SKS_EFT_Format::getCodelookupvalue('PaymentType', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), 1, length))));
        }

        //9     Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //10    Amount
        sb.Append(this.wrapField(num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0)));

        //11    Placeholder
        sb.Append(this.wrapField(''));

        //12    Debit Account Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
        {
            mSKS_EFT_FileDetail.BankBankAcct = SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.BankBankAcct, 10);

            while(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 1) == '0')
            {
                mSKS_EFT_FileDetail.BankBankAcct = substr(mSKS_EFT_FileDetail.BankBankAcct, 2, strlen(mSKS_EFT_FileDetail.BankBankAcct) - 1);
            }
            sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.BankBankAcct, 10)));
        }
        else
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 35)));
        }

        //13    Placeholder
        sb.Append(this.wrapField(''));

        //14    Placeholder
        sb.Append(this.wrapField(''));

        //15    Placeholder
        sb.Append(this.wrapField(''));

        //16    Placeholder
        sb.Append(this.wrapField(''));

        //17    Placeholder
        sb.Append(this.wrapField(''));

        //18    Placeholder
        sb.Append(this.wrapField(''));

        //19    Placeholder
        sb.Append(this.wrapField(''));

        //20    Placeholder
        sb.Append(this.wrapField(''));

        //21    Placeholder
        sb.Append(this.wrapField(''));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SPLIT_TAX &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #INTREV)
        {
            //22    Charge Indicator
            sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId))));

            //23    Ordering Party Country Code
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId)));
        }
        else
        {
            sb.Append(this.wrapField(''));

            sb.Append(this.wrapField(''));
        }

        //24    Placeholder
        sb.Append(this.wrapField(''));

        //25    Identification
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DFT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTREV)
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 10)));
        }
        else
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16)));
        }

        //26    Client Reference Number
        sb.Append(this.wrapField(''));

        //27    Placeholder
        sb.Append(this.wrapField(''));

        //28    Placeholder
        sb.Append(this.wrapField(''));

        //29    Ordering Party Organization ID Type
        sb.Append(this.wrapField(''));

        //30    Ordering Party Organization ID(SEPA)
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
        {
            sb.Append(this.wrapField(this.CharacterReplacement(substr(mSKS_EFT_Bank.WOrdPartyId, 1, 35))));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DFT ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MPSP ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SPLIT_TAX)
        {
            sb.Append(this.wrapField('N'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //31    Issuer/Transaction Type Sorbnet
        sb.Append(this.wrapField(''));

        //32    Placeholder
        sb.Append(this.wrapField(''));

        //33    Placeholder
        sb.Append(this.wrapField(''));

        //34    Placeholder
        sb.Append(this.wrapField(''));

        //35    Placeholder
        sb.Append(this.wrapField(''));

        //36    Placeholder
        sb.Append(this.wrapField(''));
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT)
        {
            //37    Ordering Party Name
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_Bank.WOrdPartyName, 1, 30))));
        
            //38    Ordering Party Address – Line 1
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_Bank.WOrdPartyAddr, 1, 35))));

            if(mSKS_EFT_Bank.WOrdPartyCity || mSKS_EFT_Bank.WOrdPartyState || mSKS_EFT_Bank.WOrdPartyZipCode)
            {
                if(mSKS_EFT_Bank.WOrdPartyCity)
                {
                    wordPartyAddress += mSKS_EFT_Bank.WOrdPartyCity;
                }

                if(mSKS_EFT_Bank.WOrdPartyState)
                {
                    if(wordPartyAddress)
                    {
                        wordPartyAddress += ' ';
                    }
                    wordPartyAddress += mSKS_EFT_Bank.WOrdPartyState;
                }

                if(mSKS_EFT_Bank.WOrdPartyZipCode)
                {
                    if(wordPartyAddress)
                    {
                        wordPartyAddress += ' ';
                    }
                    wordPartyAddress += mSKS_EFT_Bank.WOrdPartyZipCode;
                }
            }

            //39    Ordering Party Address – Line 2
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(wordPartyAddress, 1, 35))));
        }
        else
        {
            sb.Append(this.wrapField(''));

            sb.Append(this.wrapField(''));

            sb.Append(this.wrapField(''));
        }

        //40    Placeholder
        sb.Append(this.wrapField(''));

        //41    Placeholder
        sb.Append(this.wrapField(''));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT)
        {
            //42    Beneficiary Is
            sb.Append(this.wrapField('Not A Bank'));
        }
        else
        {
            //42    Beneficiary Is
            sb.Append(this.wrapField(''));
        }

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
        {
            //43    Ordering Party Name
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_Bank.WOrdPartyName, 1, 70))));
        
            if(mSKS_EFT_Bank.WOrdPartyAddr || mSKS_EFT_Bank.WOrdPartyAddr2)
            {
                //44    Ordering Party Address – Line 1
                if(mSKS_EFT_Bank.WOrdPartyAddr && mSKS_EFT_Bank.WOrdPartyAddr2)
                {
                    sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_Bank.WOrdPartyAddr + ' ' + mSKS_EFT_Bank.WOrdPartyAddr2, 1, 70))));
                }
                else if(mSKS_EFT_Bank.WOrdPartyAddr)
                {
                    sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_Bank.WOrdPartyAddr, 1, 70))));
                }
                else
                {
                    sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_Bank.WOrdPartyAddr2, 1, 70))));
                }
            }
            else
            {
                sb.Append(this.wrapField(''));
            }
                
            if(mSKS_EFT_Bank.WOrdPartyCity || mSKS_EFT_Bank.WOrdPartyState || mSKS_EFT_Bank.WOrdPartyZipCode)
            {
                if(mSKS_EFT_Bank.WOrdPartyCity)
                {
                    wordPartyAddress += mSKS_EFT_Bank.WOrdPartyCity;
                }

                if(mSKS_EFT_Bank.WOrdPartyState)
                {
                    if(wordPartyAddress)
                    {
                        wordPartyAddress += ' ';
                    }
                    wordPartyAddress += mSKS_EFT_Bank.WOrdPartyState;
                }

                if(mSKS_EFT_Bank.WOrdPartyZipCode)
                {
                    if(wordPartyAddress)
                    {
                        wordPartyAddress += ' ';
                    }
                    wordPartyAddress += mSKS_EFT_Bank.WOrdPartyZipCode;
                }
            }

            //45    Ordering Party Address – Line 2
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(wordPartyAddress, 1, 70))));

            //46    Placeholder
            sb.Append(this.wrapField(''));

            //47    Placeholder
            sb.Append(this.wrapField(''));

            //48    Placeholder
            sb.Append(this.wrapField(''));

            //49    Beneficiary Country Code
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId)));

            //50    Beneficiary Account Number
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN));

            //51    Beneficiary Name
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBeneName, 1, 70))));

            //52    Placeholder
            sb.Append(this.wrapField(''));

            //53    Beneficiary Address Line 1
            if(mSKS_EFT_VendorPaym.WBeneAddr && mSKS_EFT_VendorPaym.WBeneAddr2)
            {
                sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBeneAddr + ' ' + mSKS_EFT_VendorPaym.WBeneAddr2, 1, 70))));
            }
            else if(mSKS_EFT_VendorPaym.WBeneAddr)
            {
                sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBeneAddr, 1, 70))));
            }
            else if(mSKS_EFT_VendorPaym.WBeneAddr2)
            {
                sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBeneAddr2, 1, 70))));
            }
            else
            {
                sb.Append(this.wrapField(''));
            }
          
            if(mSKS_EFT_VendorPaym.WBeneCity || mSKS_EFT_VendorPaym.WBeneState || mSKS_EFT_VendorPaym.WBeneZipPostal)
            {
                if(mSKS_EFT_VendorPaym.WBeneCity)
                {
                    benAddress += mSKS_EFT_VendorPaym.WBeneCity;
                }

                if(mSKS_EFT_VendorPaym.WBeneState)
                {
                    if(benAddress)
                    {
                        benAddress += ' ';
                    }
                    benAddress += mSKS_EFT_VendorPaym.WBeneState;
                }

                if(mSKS_EFT_VendorPaym.WBeneZipPostal)
                {
                    if(benAddress)
                    {
                        benAddress += ' ';
                    }
                    benAddress += mSKS_EFT_VendorPaym.WBeneZipPostal;
                }
            }
            //54    Beneficiary Address Line 2
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(benAddress, 1, 70))));
        }
        else
        {
            //43    Ordering Party Name
            sb.Append(this.wrapField(''));

            //44    Beneficiary Account Number
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 34)));

            //45    Beneficiary Name
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBeneName, 1, 35))));

            //46    Placeholder
            sb.Append(this.wrapField(''));

            //47    Beneficiary Address Line 1
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBeneAddr, 1, 35))));

            //48    Beneficiary Address Line 2
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBeneAddr2, 1, 35))));

            if(mSKS_EFT_VendorPaym.WBeneCity || mSKS_EFT_VendorPaym.WBeneState || mSKS_EFT_VendorPaym.WBeneZipPostal)
            {
                if(mSKS_EFT_VendorPaym.WBeneCity)
                {
                    benAddress += mSKS_EFT_VendorPaym.WBeneCity;
                }

                if(mSKS_EFT_VendorPaym.WBeneState)
                {
                    if(benAddress)
                    {
                        benAddress += ' ';
                    }
                    benAddress += mSKS_EFT_VendorPaym.WBeneState;
                }

                if(mSKS_EFT_VendorPaym.WBeneZipPostal)
                {
                    if(benAddress)
                    {
                        benAddress += ' ';
                    }
                    benAddress += mSKS_EFT_VendorPaym.WBeneZipPostal;
                }
            }
            //49    Beneficiary Address Line 3
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(benAddress, 1, 35))));
        
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT)
            {
                //50    Beneficiary Bank Routing Method
                if(mSKS_EFT_FileDetail.DepSwiftNo)
                {
                    sb.Append(this.wrapField('IS'));

                    //51    Beneficiary Bank Routing Code
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo,1,11)));
                }
                else
                {
                    sb.Append(this.wrapField('FW'));

                    //51    Beneficiary Bank Routing Code
                    sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,11)));
                }
            }
            else
            {
                //50    Beneficiary Bank Routing Code
                sb.Append(this.wrapField(''));

                //51    Beneficiary Bank Routing Code
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DFT ||
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SPLIT_TAX ||
                   mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTREV)
                {
                    if(mSKS_EFT_FileDetail.DepSwiftNo)
                    {
                        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo,1,8)));
                    }
                    else
                    {
                        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,8)));
                    }
                }
                else
                {
                    sb.Append(this.wrapField(''));
                }
            }

            //52    Placeholder
            sb.Append(this.wrapField(''));

            //53    Beneficiary Address Line 1
            sb.Append(this.wrapField(''));

            //54    Beneficiary Address Line 2
            sb.Append(this.wrapField(''));
        }
        
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT)
        {
            //55    Beneficiary Bank Name
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBenBankName, 1, 35))));

            //56    Beneficiary Bank Address Line 1
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBenBankAddr, 1, 35))));

            //57    Beneficiary Bank Address Line 2
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WBenBankCity, 1, 35))));

            //58    Beneficiary Bank Address Line 3
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)));

            if(mSKS_EFT_VendorPaym.WIntBankSwift)
            {
                //59    First Intermediary Bank Routing Method
                sb.Append(this.wrapField('IS'));

                //60    First Intermediary Bank Routing Code
                sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WIntBankSwift, 1, 11)));
            }
            else
            {
                //59    First Intermediary Bank Routing Method
                sb.Append(this.wrapField(''));

                //60    First Intermediary Bank Routing Code
                sb.Append(this.wrapField(''));
            }

            //61    Intermediary Bank Name
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WIntBankName, 1, 35))));

            //62    Intermediary Bank Address Line 1
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WIntBankAddr, 1, 35))));

            //63    Intermediary Bank Address Line 2
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WIntBankAddr2, 1, 35))));

            //64    Intermediary Bank Address Line 3
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_VendorPaym.WIntBankCity, 1, 35))));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTREV)
        {
            //55 Taxpayer Identification Number/ Identification Type
            sb.Append(this.wrapField('N'));

            //56 Other Identification Type/ Identification Number
            sb.Append(this.wrapField(subStr(CompanyInfo::findDataArea(curext()).CoRegNum, 1, 10)));

            select Txt, RecId from ledgerJournalTrans
                where ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId
                join
                ledgerJournalTrans_W where ledgerJournalTrans_W.LedgerJournalTrans == ledgerJournalTrans.RecId;

            //57 Other Identification Number/Year
            select Code from paymentFormatCodeSets_W where 
                paymentFormatCodeSets_W.RecId == ledgerJournalTrans_W.ServiceLevel;

            sb.Append(this.wrapField(paymentFormatCodeSets_W.Code));

            //58 Declaration Type/Period Type
            select Code from paymentFormatCodeSets_W where
                paymentFormatCodeSets_W.RecId == ledgerJournalTrans_W.CategoryPurpose;

            sb.Append(this.wrapField(paymentFormatCodeSets_W.Code));

            //59 Declaration Date/Period
            this.getDate();

            switch(paymentFormatCodeSets_W.Code)
            {
                case 'J':
                    sb.Append(this.wrapField(strDays+''+strMonth));
                    break;
                case 'D':
                    sb.Append(this.wrapField(subStr(strYears, 1, 2) +''+strMonth));
                    break;
                case 'M':
                    sb.Append(this.wrapField(strMonth));
                    break;
                case 'K':
                    if(mthOfYr(mSKS_EFT_FileDetail.EffectiveDate) <= 3)
                    {
                        sb.Append(this.wrapField('01'));
                    }
                    else if(mthOfYr(mSKS_EFT_FileDetail.EffectiveDate) >3 && mthOfYr(mSKS_EFT_FileDetail.EffectiveDate) <=6)
                    {
                        sb.Append(this.wrapField('02'));
                    }
                    else if(mthOfYr(mSKS_EFT_FileDetail.EffectiveDate) >6 && mthOfYr(mSKS_EFT_FileDetail.EffectiveDate) <=9)
                    {
                        sb.Append(this.wrapField('03'));
                    }
                    else
                    {
                        sb.Append(this.wrapField('04'));
                    }
                    break;
                case 'P':
                    if(mthOfYr(mSKS_EFT_FileDetail.EffectiveDate) <=6)
                    {
                        sb.Append(this.wrapField('01'));
                    }
                    else
                    {
                        sb.Append(this.wrapField('02'));
                    }
                    break;
                case 'R':
                    sb.Append(this.wrapField(''));
                    break;
            }


            //60 Declaration Number/Form Identifier
            select Code from paymentFormatCodeSets_W where
                paymentFormatCodeSets_W.RecId == ledgerJournalTrans_W.LocalInstrument;

            sb.Append(this.wrapField(paymentFormatCodeSets_W.Code));

            //61 Decision Number/Free Text
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(ledgerJournalTrans.Txt, 1, 40)), false));
        }
        else
        {
            sb.Append(this.wrapField(''));

            sb.Append(this.wrapField(''));

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
            {
                //57    Beneficiary Bank Routing Code
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo));
            }
            else
            {
                //57    Beneficiary Bank Address Line 2
                sb.Append(this.wrapField(''));
            }

            //58    Beneficiary Bank Address Line 3
            sb.Append(this.wrapField(''));

            //59    Intermediary Bank Routing Method
            sb.Append(this.wrapField(''));

            //60    Intermediary Bank Routing Code
            sb.Append(this.wrapField(''));

            //61    Intermediary Bank Name
            sb.Append(this.wrapField(''));

            //62    Intermediary Bank Address Line 1
            sb.Append(this.wrapField(''));

            //63    Intermediary Bank Address Line 2
            sb.Append(this.wrapField(''));

            //64    Intermediary Bank Address Line 3
            sb.Append(this.wrapField(''));
        }

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #INTREV)
        {
            //65    Placeholder
            sb.Append(this.wrapField(''));

            //66    Placeholder
            sb.Append(this.wrapField(''));

            //67    Placeholder
            sb.Append(this.wrapField(''));

            //68    Placeholder
            sb.Append(this.wrapField(''));

            //69    Placeholder
            sb.Append(this.wrapField(''));

            //70    Placeholder
            sb.Append(this.wrapField(''));

            //71    Placeholder
            sb.Append(this.wrapField(''));

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SPLIT_TAX)
            {
                while select InvoiceNumber, AccountNum, InvoiceDate from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                {
                    invDetails += sks_EFT_FileDetail.InvoiceNumber;

                    vendInvoiceJour.clear();
                    select firstOnly SumTax from  vendInvoiceJour
                        where vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                        vendInvoiceJour.InvoiceDate      ==  sks_EFT_FileDetail.InvoiceDate &&
                        vendInvoiceJour.InvoiceId         ==  sks_EFT_FileDetail.InvoiceNumber;

                    if(!vendInvoiceJour)
                    {
                        select firstOnly SumTax from  vendInvoiceJour
                            where vendInvoiceJour.InvoiceAccount    ==  sks_EFT_FileDetail.AccountNum &&
                            vendInvoiceJour.DocumentDate      ==  sks_EFT_FileDetail.InvoiceDate &&
                            vendInvoiceJour.InvoiceId         ==  sks_EFT_FileDetail.InvoiceNumber;
                    }

                    amt += vendInvoiceJour.SumTax;
                }
                //72    Payment Details Line 1
                sb.Append(this.wrapField(num2str(amt,0,2,1,0)));

                lVendTable = VendTable::findByCompany(mSKS_EFT_VendorPaym.VendCompany, mSKS_EFT_VendorPaym.VendAccount);

                //73    Payment Details Line 2
                sb.Append(this.wrapField(lVendTable.VATNum));

                //74    Payment Details Line 3
                sb.Append(this.wrapField(this.CharacterReplacement(subStr(invDetails, 1, 35))));
            
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SEPA)
            {
                //72    Payment Details Line 1
                while select InvoiceNumber from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                {
                    invDetails += sks_EFT_FileDetail.InvoiceNumber + ',';
                }

                if(invDetails)
                {
                    invDetails = subStr(invDetails, 1, strLen(invDetails)-1);
                }

                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #MPSP)
                {
                    sb.Append(this.wrapField(this.CharacterReplacement(subStr(invDetails, 1, 12))));
                }
                else
                {
                    sb.Append(this.wrapField(this.CharacterReplacement(subStr(invDetails, 1, 35))));
                }

                //73    Payment Details Line 2
                sb.Append(this.wrapField(''));
            }
            else
            {
                //73    Beneficiary Organization ID Type
                sb.Append(this.wrapField(''));

                //73    Beneficiary Organization ID
                sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35)));
            }

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SPLIT_TAX)
            {
                //74    Payment Details Line 3
                sb.Append(this.wrapField(''));
            }

            //75    Payment Details Line 4
            sb.Append(this.wrapField(''));

            //76    Charges Account Number
            sb.Append(this.wrapField(''));

            //77    Advise for Beneficiary
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CBFT)
            {
                sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BeneficiaryAdvice', mSKS_EFT_FileDetail.RecId))));
            }
            else
            {
                sb.Append(this.wrapField(''));
            }

            //78    Placeholder
            sb.Append(this.wrapField(''));

            //79    Placeholder
            sb.Append(this.wrapField(''));

            //80    Placeholder
            sb.Append(this.wrapField(''));

            //81    Placeholder
            sb.Append(this.wrapField(''));

            //82    Placeholder
            sb.Append(this.wrapField(''));

            //83    Placeholder
            sb.Append(this.wrapField(''));

            //84    Other Instructions line 1
            sb.Append(this.wrapField(''));

            //85    Other Instructions line 2
            sb.Append(this.wrapField(''));

            //86    Other Instructions line 3
            sb.Append(this.wrapField(''));

            //87    Other Instructions line 4
            sb.Append(this.wrapField(''));

            //88    Other Instructions line 5
            sb.Append(this.wrapField(''));

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
            {
                while select InvoiceNumber from SKS_EFT_FileDetail where sks_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                {
                    invDetails += sks_EFT_FileDetail.InvoiceNumber + ',';
                }

                if(invDetails)
                {
                    invDetails = subStr(invDetails, 1, strLen(invDetails)-1);
                }

                sb.Append(this.wrapField(this.CharacterReplacement(subStr(invDetails, 1, 35))));
            }
            else
            {
                //89    Other Instructions line 6
                sb.Append(this.wrapField(''));
            }

            //90    Payment details lne 2
            sb.Append(this.wrapField(''));

            //91    Payment details lne 3
            sb.Append(this.wrapField(''));

            //92    Payment details lne 4
            sb.Append(this.wrapField(''));

            //93    Placeholder
            sb.Append(this.wrapField(''));

            //94    Payment Title Code
            sb.Append(this.wrapField(''));

            //95    Payment Title Description
            sb.Append(this.wrapField('', false));
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _addhatch = true)
    {
        str text;
        
        text = _field;
        if(_addHatch)
        {
            text += #HATCH;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDate</Name>
				<Source><![CDATA[
    private void getDate()
    {
        date transdate = mSKS_EFT_FileDetail.EffectiveDate;

        strDays  = int2str(dayOfMth(transdate));
        stryears = int2str(Year(transdate));
        strMonth = int2str(mthOfYr(transdate));
    
        if(strlen(strDays) == 1)
        {
            strDays = '0' + strDays;
        }
    
        if(strLen(strMonth) == 1)
        {
            strMonth = '0' + strMonth;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>