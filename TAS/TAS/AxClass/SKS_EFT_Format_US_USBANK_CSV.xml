<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_USBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_USBANK_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_USBANK_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220622')
    SKS_EFT_SequenceNumber  mSequenceNumber;
    AmountMST   amt;
    int         mPRecCount;
    int         mTRecCount;

    #define.Separator(',')
    #define.Semicolon(';')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail  invSKS_EFT_FileDetail;
    
        this.rec_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
                
            this.rec_Payment();
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
            {
                this.rec_Detail(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    public boolean rec_Detail(SKS_EFT_FileDetail  invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //      Record Type
        sb.Append('D');
        sb.Append(#Separator);
    
        //      Record Sequence Number
        sb.Append(mPRecCount);
        sb.Append(#Separator);
    
        //      Invoice Number (Product Description)
        sb.Append(subStr(invSKS_EFT_FileDetail.InvoiceNumber, 1, 26));
        sb.Append(#Separator);
    
        //      Line Item Total Amount
        sb.Append(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountCur * -1, 0, 2, 0, 0));
        sb.Append(#Separator);
    
        //      Custom Line Item Field 1
        sb.Append(subStr(invSKS_EFT_FileDetail.InvoiceNumber, 1, 50));
        sb.Append(#Separator);
    
        //      Custom Line Item Field 2
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash));
    
        mTRecCount++;
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    public boolean rec_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //      Record Type
        sb.Append('H');
        sb.Append(#Separator);
    
        //      File Sequence Number
        sb.Append(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 6));
        sb.Append(#Separator);
    
        //      Organization Short Name
        if(strContains(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), ','))
        {
            sb.Append('"');
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 1, 6));
            sb.Append('"');
        }
        else
        {
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 1, 6));
        }
    
        mTRecCount++;
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    public boolean rec_Payment()
    {
        SKS_EB_Vendor sks_eb_Vendor;
        str eMail;
        int exDays = date2num(mSKS_EFT_FileDetail.EffectiveDate);
        str expirationdays;
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mPRecCount++;
        //      Record Type
        sb.Append('P');
        sb.Append(#Separator);
    
        //      Record Sequence Number
        sb.Append(mPRecCount);
        sb.Append(#Separator);
    
        //      Control Number
        sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
        sb.Append(#Separator);
    
        //      Date
        sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate));
        sb.Append(#Separator);
    
        //      Amount
        amt += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 0, 0));
        sb.Append(#Separator);
    
        //      Amount Currency Code
        sb.Append('840');
        sb.Append(#Separator);
    
        //      Merchant Name
        if(strContains(mSKS_EFT_FileDetail_VendAddress.BeneName, ','))
        {
            sb.Append('"');
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1, 26));
            sb.Append('"');
        }
        else
        {
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1, 26));
        }
        sb.Append(#Separator);
    
        //      Credential Text (Merchant Postal/ZIP Code )
        sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal));
        sb.Append(#Separator);
    
        //      Expiration Date
        expirationdays = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Expirationdays', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));      //SKS#DevOps:16052
        if(expirationdays)
        {
            sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(num2date(exDays + str2int(expirationdays))));
        }
        else 
        {
            sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(num2date(exDays + 60)));
        }
        
        sb.Append(#Separator);
    
        //      Cc: Email
        sks_eb_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
    
        if(sks_eb_Vendor.EM1Vendor || sks_eb_Vendor.EM2Addr || sks_eb_Vendor.EM3Addr || sks_eb_Vendor.EM4Addr)
        {
            if(sks_eb_Vendor.EM1Vendor)
            {
                eMail += mSKS_EFT_FileDetail_VendAddress.Locator;
            }
    
            if(sks_eb_Vendor.EM2Addr)
            {
                if(eMail)
                {
                    eMail += #Semicolon;
                }
                eMail += sks_eb_Vendor.EM2Addr;
            }
    
            if(sks_eb_Vendor.EM3Addr)
            {
                if(eMail)
                {
                    eMail += #Semicolon;
                }
                eMail += sks_eb_Vendor.EM3Addr;
            }
            if(sks_eb_Vendor.EM4Addr)
            {
                if(eMail)
                {
                    eMail += #Semicolon;
                }
                eMail += sks_eb_Vendor.EM4Addr;
            }
        }
        sb.Append(subStr(eMail, 1, 239));
        sb.Append(#Separator);
    
        //      Client Supplier ID
        sb.Append(subStr(mSKS_EFT_FileDetail.AccountNum, 1, 23));
    
        mTRecCount++;
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    public boolean rec_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mTRecCount++;
    
        //      Record Type
        sb.Append('T');
        sb.Append(#Separator);
    
        //      Record Count
        sb.Append(mTRecCount);
        sb.Append(#Separator);
    
        //      Total Amount
        sb.Append(num2str(amt * -1, 0, 2, 0, 0));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId ;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>