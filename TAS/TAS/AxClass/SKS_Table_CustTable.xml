<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_CustTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_CustTable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCustomerAgainstEPayFilter</Name>
				<Source><![CDATA[
    private static void checkCustomerAgainstEPayFilter(CustTable _locCustTable, SKS_EPY_ChangeType _changeType)
    {
        #SKS_Global
    
        SKS_EPY_Setup locSKS_EPY_Setup;
        Query locQuery;
        QueryRun locQueryRun;
        QueryBuildDataSource locQueryBuildDataSource;
        boolean locShouldBeEpayCustomer = false;
    
        //This is a new customer so it cannot be set for epay...
        // BUT, if an ePay filter exists, and the new customer
        // matches the filter, then we should send them to
        // ePay and set the flag.
        Select ePayQuery, RecId From locSKS_EPY_Setup;
        if(locSKS_EPY_Setup)
        {
            if(locSKS_EPY_Setup.ePayQuery) // Make sure query exists and if so, apply it
            {
                locQuery = new Query(locSKS_EPY_Setup.ePayQuery);
                locQueryBuildDataSource = locQuery.dataSourceTable(tableNum(CustTable));
                locQueryBuildDataSource.addRange(fieldNum(CustTable, AccountNum)).value(queryValue(_locCustTable.AccountNum));
                locQueryRun = new QueryRun(locQuery);
                locShouldBeEpayCustomer = locQueryRun.next();
                if(locShouldBeEpayCustomer)
                {
                    SKS_Table_CustTable::QueueCustomer(_locCustTable,
                                                    _changeType,
                                                    SKS_EPY_Table::CustTable,
                                                    _locCustTable.RecId);
                    _locCustTable.SKS_EPY_CustFilter = SKS_EPY_CustFilter::YesByFilter;
                    _locCustTable.doUpdate();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Insert_Post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(CustTable), tableMethodStr(CustTable, insert))]
    public static void EH_Insert_Post(XppPrePostArgs _args)
    {
        CustTable mCustTable;
        ;
    
        mCustTable = _args.getThis();
    
        SKS_EFT_CustomerLoad::CreateEFTRecords(mCustTable);
        SKS_Table_CustTable::NewEpayCustomer(_args);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Update_Pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(CustTable), tableMethodStr(CustTable, update))]
    public static void EH_Update_Pre(XppPrePostArgs _args)
    {
        CustTable mCustTable;
        ;
    
        mCustTable = _args.getThis();
    
    
        if (mCustTable.orig().PaymMode != mCustTable.PaymMode || mCustTable.orig().PaymSpec != mCustTable.PaymSpec || mCustTable.orig().bankAccountNum() != mCustTable.bankAccountNum())
        {
            SKS_EFT_CustomerLoad::CreateEFTRecords(mCustTable);
        }
        SKS_Table_CustTable::UpdateCustomerInfoEPay(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEpayCustomer</Name>
				<Source><![CDATA[
    public static boolean isEpayCustomer(CustTable _CustTable)
    {
        SKS_PP_Setup SKS_PP_Setup;
        boolean rtnval;
        ;
        SKS_PP_Setup = SKS_PP_Setup::find();
        if(SKS_PP_Setup.ModEPAY && (_CustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::Yes || _CustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::YesByFilter))
            rtnval = true;
        else
            rtnval = false;
    
        return rtnval;
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>NewEpayCustomer</Name>
				<Source><![CDATA[
    private static void NewEpayCustomer(XppPrePostArgs _args)
    {
        CustTable           locCustTable;
        ;
    
        locCustTable = _args.getThis();
    
        SKS_Table_CustTable::checkCustomerAgainstEPayFilter(locCustTable, SKS_EPY_ChangeType::Created);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>QueueCustomer</Name>
				<Source><![CDATA[
    public static void QueueCustomer(CustTable _CustTable,
                                        SKS_EPY_ChangeType _SKS_EPY_ChangeType,
                                        SKS_EPY_Table _InitiatingTable,
                                        SKS_EB_RecId _InitiatingRecId)
    {
        SKS_EPY_Queue       locSKS_EPY_Queue, locNewSKS_EPY_Queue;
        SKS_EPY_QueueData   locSKS_EPY_QueueData, locNewSKS_EPY_QueueData;
        ;
    
        select locSKS_EPY_Queue
            join locSKS_EPY_QueueData
            where locSKS_EPY_QueueData.QueueRecId == locSKS_EPY_Queue.RecId
                && locSKS_EPY_QueueData.SourceTable == SKS_EPY_Table::CustTable
                && locSKS_EPY_QueueData.TableRecId == _CustTable.RecId
                && (locSKS_EPY_Queue.ChangeType == SKS_EPY_ChangeType::Created || locSKS_EPY_Queue.ChangeType == SKS_EPY_ChangeType::Updated)
                && locSKS_EPY_Queue.Action == SKS_EPY_Action::SendToEpay
                && locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                && locSKS_EPY_Queue.Entity == SKS_EPY_Entity::Customer;
        if(!locSKS_EPY_Queue)
        {
            ttsBegin;
            locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::Customer;
            locNewSKS_EPY_Queue.ChangeType = _SKS_EPY_ChangeType;
            locNewSKS_EPY_Queue.Action = SKS_EPY_Action::SendToEpay;
            locNewSKS_EPY_Queue.InitiatingTable = _InitiatingTable;
            locNewSKS_EPY_Queue.InitiatingRecId = _InitiatingRecId;
            locNewSKS_EPY_Queue.Status = SKS_EPY_Status::New;
            locNewSKS_EPY_Queue.AccountName = _CustTable.name();
            locNewSKS_EPY_Queue.AccountNum = _CustTable.AccountNum;
            locNewSKS_EPY_Queue.insert();
            locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTable;
            locNewSKS_EPY_QueueData.TableRecId = _CustTable.RecId;
            locNewSKS_EPY_QueueData.QueueRecId = locNewSKS_EPY_Queue.RecId;
            locNewSKS_EPY_QueueData.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerInfoEPay</Name>
				<Source><![CDATA[
    private static void UpdateCustomerInfoEPay(XppPrePostArgs _args)
    {
        #SKS_Global
        boolean             locQueueCreated = false;
        CustTable           locCustTable, locOrigCustTable;
        SKS_EPY_Setup       locSKS_EPY_Setup;
        boolean             locUseTTS = false;
        CustTransOpen       locCustTransOpen;
        CustTrans           locCustTrans;
        ;
    
        locCustTable = _args.getThis();
        locOrigCustTable= locCustTable.orig();
    
        if(locCustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::NotSet)
        {
            SKS_Table_CustTable::checkCustomerAgainstEPayFilter(locCustTable, SKS_EPY_ChangeType::Updated);
        }
    
        //The following is a list of relevant fields.  If none of these fields has changed,
        //do not queue this customer. (note, if dirparty info changes, the customer may
        //still end up queued for those fields.)
        if(locCustTable.CustGroup               == locOrigCustTable.CustGroup
            && locCustTable.AccountNum          == locOrigCustTable.AccountNum
            && locCustTable.Blocked             == locOrigCustTable.Blocked
            && locCustTable.PaymTermId          == locOrigCustTable.PaymTermId
            && locCustTable.MainContactWorker   == locOrigCustTable.MainContactWorker
            && locCustTable.SalesDistrictId     == locOrigCustTable.SalesDistrictId
            && locCustTable.DlvMode             == locOrigCustTable.DlvMode
            && locCustTable.VATNum              == locOrigCustTable.VATNum
            && locCustTable.TaxGroup            == locOrigCustTable.TaxGroup
            && locCustTable.InvoiceAccount      == locOrigCustTable.InvoiceAccount
            && locCustTable.SKS_EPY_CustFilter  == locOrigCustTable.SKS_EPY_CustFilter
            && locCustTable.SKS_EPY_PaymentType == locOrigCustTable.SKS_EPY_PaymentType)
        {
            return;
        }
    
    
        //If leaving epay, we'll need to update epay one more time, then return
        if(locCustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::No
                && (locOrigCustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::Yes
                    || locOrigCustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::YesByFilter))
        {
            SKS_Table_CustTable::QueueCustomer(locCustTable,
                                            SKS_EPY_ChangeType::Updated,
                                            SKS_EPY_Table::CustTable,
                                            locCustTable.RecId);
            return;
        }
    
        //If not an epay customer, return
        if(!SKS_Table_CustTable::isEpayCustomer(locCustTable))
        {
            return;
        }
        else
        {
            if(locOrigCustTable.SKS_EPY_CustFilter != SKS_EPY_CustFilter::Yes && locOrigCustTable.SKS_EPY_CustFilter != SKS_EPY_CustFilter::YesByFilter)
            {
                SKS_Table_CustTable::QueueCustomer(locCustTable, SKS_EPY_ChangeType::Created,
                SKS_EPY_Table::CustTable, locCustTable.RecId);
            }
            else
            {
                SKS_Table_CustTable::QueueCustomer(locCustTable, SKS_EPY_ChangeType::Updated,
                SKS_EPY_Table::CustTable, locCustTable.RecId);
            }
        }

        if((locCustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::Yes
                    || locCustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::YesByFilter)
                && (locOrigCustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::No
                    || locOrigCustTable.SKS_EPY_CustFilter == SKS_EPY_CustFilter::NotSet))
        {
            //initialize all open invoices.
            while select forupdate locCustTransOpen
                where locCustTransOpen.AccountNum == locCustTable.AccountNum
                    && locCustTransOpen.SKS_EPY_SentToePay == NoYes::No
                join TransType from locCustTrans
                    where locCustTrans.AccountNum == locCustTransOpen.AccountNum
                    && locCustTrans.RecId == locCustTransOpen.RefRecId
                    && (locCustTrans.TransType == LedgerTransType::Sales
                        || locCustTrans.TransType == LedgerTransType::Cust
                        || locCustTrans.TransType == LedgerTransType::Payment
                        || locCustTrans.TransType == LedgerTransType::GeneralJournal
                        || locCustTrans.TransType == LedgerTransType::Project)
            {
                select FTInv, SOInv from locSKS_EPY_Setup;
                //if this is Free Text Invoice (AKA: LedgerJournaltranstype::Cust) and Free text
                // is not enabled in setup, Skip this record and contine with the next.
                if(locCustTrans.TransType == LedgerTransType::Cust && !locSKS_EPY_Setup.FTInv)
                    continue;
                //if this is Sales Order Invoice (AKA: LedgerJournaltranstype::Sales) and Sales Order
                // is not enabled in setup, Skip this record and contine with the next..
                if(locCustTrans.TransType == LedgerTransType::Sales && !locSKS_EPY_Setup.SOInv)
                    continue;
                ttsBegin;
                locCustTransOpen.SKS_EPY_SentToePay = NoYes::Yes;
                locCustTransOpen.Update();
                ttsCommit;
                SKS_Table_CustTransOpen::AddInvoiceToSKS_EPY_CustTransOpen(locCustTransOpen);
            }
    
        }
        SKS_Table_CustTable::QueueCustomer(locCustTable,
                                            SKS_EPY_ChangeType::Updated,
                                            SKS_EPY_Table::CustTable,
                                            locCustTable.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>