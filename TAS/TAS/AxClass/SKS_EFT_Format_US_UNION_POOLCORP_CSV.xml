<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_UNION_POOLCORP_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_UNION_POOLCORP_CSV
/// </summary>
class SKS_EFT_Format_US_UNION_POOLCORP_CSV extends SKS_EFT_Format
{
    //----------------------------------------------------------------------------------------------------------------------------
    // ACH Transfers
    // US – Union Bank – Pool Corp
    // Structure:
    // Summary Record
    // Payee Details
    //----------------------------------------------------------------------------------------------------------------------------
    #define.FormatVersion('20221109')
    #define.ACH_CCD('ACH-CCD')
    #define.Comma(',')
    #define.DoubleQuote('"')

    System.Text.StringBuilder sb = new System.Text.StringBuilder();
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _quotations = false, boolean _addcomma = true)
    {
        str text;
    
        if(_quotations)
        {
            text = #DoubleQuote + _field + #DoubleQuote;
        }
        else
        {
            text = _field;
        }
        if(_addcomma)
        {
            text += #Comma;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            //  mSKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //mSKS_EFT_FileDetail_BankAccount
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            // Summary Record
            this.rec_Summary();

            //Payee Details
            this.rec_PayeeDetails();

            this.fileWrite(sb.ToString());
            sb.Clear();

            next mSKS_EFT_FileDetail;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayeeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PayeeDetails
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_PayeeDetails()
    {
        //----------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                             Length
        //1     RECORD TYPE                                             1
        //2     VENDOR CUST NUM                                         10
        //3     VENDOR NAME                                             40
        //4     VENDOR ADDRESS 1                                        40
        //5     VENDOR ADDRESS 2                                        40
        //6     VENDOR ADDRESS 3                                        40
        //7     VENDOR ADDRESS 4                                        40
        //8     VENDOR ROUTING NUM                                      9
        //9     VENDOR ACCT NUM                                         16
        //10    VENDOR ACCT TYPE                                        2
        //11    INTERMEDIARY BANK ROUTING METHOD                        2
        //12    INTERMEDIARY BANK IDENTIFICATION CODE                   12
        //13    INTERMEDIARY BANK NUMBER QUALIFIER                      2
        //14    PAYEE ROUTING ID                                        2
        //----------------------------------------------------------------------------------------------------------------------------
        str address1, address2;

        //1     RECORD TYPE                                             1
        sb.Append(this.wrapField('P'));

        //2     VENDOR CUST NUM                                         10
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.AccountNum, 1, 10)));

        //3     VENDOR NAME                                             40
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1, 40), true));

        //4     VENDOR ADDRESS 1                                        40
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 1, 40), true));

        //5     VENDOR ADDRESS 2                                        40
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 1, 40), true));

        //6     VENDOR ADDRESS 3                                        40
        address1 = mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
        if(mSKS_EFT_FileDetail_VendAddress.BeneCity)
        {
            address1 += #comma + mSKS_EFT_FileDetail_VendAddress.BeneCity;
        }
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(address1), 1, 40), true));

        //7     VENDOR ADDRESS 4                                        40
        address2 = mSKS_EFT_FileDetail_VendAddress.BeneState;

        if(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)
        {
            address2 += #comma + mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId;
        }
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(address2), 1, 40), true));

        //8     VENDOR ROUTING NUM                                      9
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,9)));

        //9     VENDOR ACCT NUM                                         16
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct,1,16)));

        //10    VENDOR ACCT TYPE                                        2
        sb.Append(this.wrapField('DA'));

        //11    INTERMEDIARY BANK ROUTING METHOD                        2
        sb.Append(this.wrapField(''));

        //12    INTERMEDIARY BANK IDENTIFICATION CODE                   12
        sb.Append(this.wrapField(''));

        //13    INTERMEDIARY BANK NUMBER QUALIFIER                      2
        sb.Append(this.wrapField(''));

        //14    PAYEE ROUTING ID                                        2
        sb.Append(this.wrapField('', false, false));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Summary</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Summary
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Summary()
    {
        //----------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                 Length
        //1     RECORD TYPE                                 1
        //2     PAYMENT CODE                                3
        //3     CHECK NUM                                   10
        //4     CHECK DATE                                  10
        //5     AMOUNT                                      14
        //6     COMPANY NAME                                40
        //7     COMPANY ADDRESS 1                           40
        //8     COMPANY ADDRESS 2                           40
        //9     COMPANY ADDRESS 3                           40
        //10    COMPANY ADDRESS 4                           40
        //11    COMPANY ROUTING NUM                         9
        //12    COMPANY ACCT NUM                            16
        //13    PAYMENT TYPE                                6
        //14    PRENOTE                                     1
        //15    HANDLING CODE                               1
        //16    SERVICE CLASS CODE                          3
        //17    ACH FORMAT TYPE                             3
        //18    PAYMENT METHOD CODE                         3
        //19    CURRENCY CODE                               3
        //20    COMPANY ROUTING ID                          2
        //----------------------------------------------------------------------------------------------------------------------------
        str strAddress;

        //1     RECORD TYPE                                 1
        sb.Append(this.wrapField('S'));

        //2     PAYMENT CODE                                3
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3)));

        //3     CHECK NUM                                   10
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,10)));

        //4     CHECK DATE                                  10
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Slash)));

        //5     AMOUNT                                      14
        sb.Append(this.wrapField(subStr(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0),1,14)));

        //6     COMPANY NAME                                40
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),1,40), true));

        //7     COMPANY ADDRESS 1                           40
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr),1,40), true));

        //8     COMPANY ADDRESS 2                           40
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2),1,40), true));

        //9     COMPANY ADDRESS 3                           40
        sb.Append(this.wrapField());

        //10    COMPANY ADDRESS 4                           40
        strAddress = mSKS_EFT_Bank.WOrdPartyCity;
    
        if(strAddress != '')
        {
            if(mSKS_EFT_Bank.WOrdPartyState != '')
            {
                strAddress += #Comma + ' ';
            }
        }
    
        strAddress += mSKS_EFT_Bank.WOrdPartyState;
    
        if(strAddress != '')
        {
            strAddress += #Comma + ' ';
        }
    
        strAddress += mSKS_EFT_Bank.WOrdPartyZipCode;
    
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(strAddress),1,40), true, true));

        //11    COMPANY ROUTING NUM                         9
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankTransit,1,9)));

        //12    COMPANY ACCT NUM                            16
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct,1,16)));

        //13    PAYMENT TYPE                                6
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur >= 0)
        {
            sb.Append(this.wrapField('DEBIT'));
        }
        else
        {
            sb.Append(this.wrapField('CREDIT'));
        }

        //14    PRENOTE                                     1
        sb.Append(this.wrapField(''));

        //15    HANDLING CODE                               1
        sb.Append(this.wrapField(''));

        //16    SERVICE CLASS CODE                          3
        if(mSKS_EFT_FileFormatPaymSpec.UseWithVendors == NoYes::Yes &&
               mSKS_EFT_FileFormatPaymSpec.UseWithCustomers == NoYes::Yes)
        {
            sb.Append(this.wrapField('200'));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.UseWithVendors == NoYes::Yes)
        {
            sb.Append(this.wrapField('220'));
        }
        else
        {
            sb.Append(this.wrapField('225'));
        }

        //17    ACH FORMAT TYPE                             3
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileFormatPaymSpec.TransactionCode, strLen(mSKS_EFT_FileFormatPaymSpec.TransactionCode), -3)));

        //18    PAYMENT METHOD CODE                         3
        sb.Append(this.wrapField(''));

        //19    CURRENCY CODE                               3
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentCurrencyCode,1,3)));

        //20    COMPANY ROUTING ID                          2
        sb.Append(this.wrapField('01'));
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>