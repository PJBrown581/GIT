<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_CreditCardConnectorSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Retail=Microsoft.Dynamics.Retail;

class SKS_CC_CreditCardConnectorSetup extends CreditCardConnectorSetup
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_CreditCardConnectorSetup construct()
    {
        var sKSsetup = new SKS_CC_CreditCardConnectorSetup();

        sKSsetup.init();

        return sKSsetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreditCardConnectorSetup_Post_construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Redirect object to custom TAS object to allow extensions
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(classStr(CreditCardConnectorSetup), staticMethodStr(CreditCardConnectorSetup, construct))]
    public static void CreditCardConnectorSetup_Post_construct(XppPrePostArgs _ppArgs)
    {
        CreditCardConnectorSetup creditCardConnectorSetup = _ppArgs.getReturnValue();

        if (SKS_PP_Setup::find().ModCC == NoYes::Yes)
        {
            creditCardConnectorSetup = SKS_CC_CreditCardConnectorSetup::construct();
        }
            
        _ppArgs.setReturnValue(creditCardConnectorSetup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPropertyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of a control for a given property.
    /// </summary>
    /// <param name="_value">
    /// The property from which the value will be taken.
    /// </param>
    /// <param name="_metadata">
    /// The property from which the characteristics of the value will be taken.
    /// </param>
    /// <param name="_control">
    /// The control where the value will be set.
    /// </param>
    protected void displayPropertyValue(Retail.PaymentSDK.Portable.PaymentProperty _value, Retail.PaymentSDK.Portable.PaymentProperty _metadata, FormControl _control)
    {
        if (CLRInterop::isNull(_value) || CLRInterop::isNull(_metadata))
        {
            return;
        }

        _control.allowEdit(!_value.get_IsReadOnly());
        //SKS-Begin        
        _control.widthMode(FormWidth::SizeToContent);        
        //SKS-End
        switch (_metadata.get_ValueType())
        {
            case Retail.PaymentSDK.Portable.DataType::DateTime:
                FormDateTimeControl fieldDateTimeControl = _control;
                fieldDateTimeControl.dateTimeValue(_value ? clrSystemDateTime2UtcDateTime(_value.get_DateValue()) : DateTimeUtil::minValue());
                break;
            case Retail.PaymentSDK.Portable.DataType::Decimal:
                FormRealControl fieldRealControl = _control;
                fieldRealControl.realValue(_value ? _value.get_DecimalValue() : 0);
                break;
            case Retail.PaymentSDK.Portable.DataType::String:
                FormStringControl fieldStringControl = _control;
                fieldStringControl.passwordStyle(_value.get_IsPassword());
                fieldStringControl.text(_value ? _value.get_StringValue() : '');
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>