<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FormLetterServiceTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(ClassStr(FormLetterService))]
final class FormLetterServiceTAS_Extension
{
    public boolean isInvoiceCommittedSKS;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postTaxDocument</Name>
				<Source><![CDATA[
    protected void postTaxDocument()
    {
        if (SKS_PP_Setup::find().ModCC == NoYes::Yes &&
            formLetterJournalPostGTE &&
            formLetterJournalPostGTE is SalesInvoiceJournalPost)
        {  
            isInvoiceCommittedSKS = true;
        }

        next postTaxDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processJournal</Name>
				<Source><![CDATA[
    protected void processJournal(Printout _printout)
    {
        isInvoiceCommittedSKS = false;

        next processJournal(_printout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalPost</Name>
				<Source><![CDATA[
    protected FormletterJournalPost createJournalPost(Common _parmTable)
    {
        FormletterJournalPost formletterJournalPostSKS;

        formletterJournalPostSKS = next createJournalPost(_parmTable);

        if (isInvoiceCommittedSKS &&
            formletterJournalPostSKS &&
            formletterJournalPostSKS is SalesInvoiceJournalPost &&
            SKS_PP_Setup::find().ModCC == NoYes::Yes
           )
        {
            formletterJournalPostSKS.parmIsInvoiceCommittedSKS(true);

            if(_parmTable.TableId() == tableNum (SalesParmTable))
            {
                SalesParmTable sksSalesParmTable = _parmTable as SalesParmTable;
                if(sksSalesParmTable)
                {
                    SalesTable sksCreditCardSalesTable = SalesTable::find(sksSalesParmTable.SalesId);
                    
                    SalesInvoiceJournalPost sksSalesInvoiceJournalPost = formletterJournalPostSKS as SalesInvoiceJournalPost;
               
                    if (!SKS_PP_Setup::isCreditCardOneTimeCustLogicEnabled()
                        || !sksCreditCardSalesTable
                        || !sksSalesInvoiceJournalPost.SKS_GetCanCaptureCreditCard()
                        || sksCreditCardSalesTable.SalesStatus != SalesStatus::Invoiced
                        || !sksCreditCardSalesTable.custTable_InvoiceAccount().OneTimeCustomer)
                    {
                        return formletterJournalPostSKS;
                    }

                    CreditCardCust creditCardCustOneTimeSKS;
                    while select creditCardCustOneTimeSKS
                        where creditCardCustOneTimeSKS.SKS_CC_OneTimeCustRefTableId == sksCreditCardSalesTable.TableId
                        && creditCardCustOneTimeSKS.SKS_CC_OneTimeCustRefRecId == sksCreditCardSalesTable.RecId
                        && creditCardCustOneTimeSKS.CustAccount == sksCreditCardSalesTable.InvoiceAccount
                    {
                        if (!creditCardCustOneTimeSKS.UniqueCardId)
                        {
                            continue;
                        }

                        SKS_CC_PayFabricWalletHandler pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
                        pfWalletHandler.parmCustAccount(creditCardCustOneTimeSKS.CustAccount);
                        pfWalletHandler.parmOneTimeCustRefTableId(creditCardCustOneTimeSKS.SKS_CC_OneTimeCustRefTableId);
                        pfWalletHandler.parmOneTimeCustRefRecId(creditCardCustOneTimeSKS.SKS_CC_OneTimeCustRefRecId);
                        pfWalletHandler.setPayFabricCustomerNbr();

                        boolean pfDeleteCardResult = pfWalletHandler.removePayFabricWallet(creditCardCustOneTimeSKS.UniqueCardId, creditCardCustOneTimeSKS.CardNumber);

                        if (pfDeleteCardResult)
                        {
                            try
                            {
                                ttsbegin;
                                creditCardCustOneTimeSKS.selectForUpdate(true);
                                creditCardCustOneTimeSKS.delete();
                                ttscommit;
                            }
                            catch (Exception::Error)
                            {
                                ttsabort;
                                error("@SKS6039");
                            }
                        }
                    }                      
                }
            } 
        }

        return formletterJournalPostSKS;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>