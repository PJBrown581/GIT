<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LedgerJournalTransVendPaymEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_LedgerJournalTransVendPaymEventHandler
{
    
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SKS_EFT_SetOffsetAccount</Name>
				<Source><![CDATA[
    static void SKS_EFT_SetOffsetAccount(FormRun formrun)
    {
        CompanyBankAccountId offsetAccount;
        VendTable vendTable;
        DimensionDynamicAccount dimensionDynamicAccount;
        LedgerJournalTrans ledgerJournalTrans = formrun.dataSource('LedgerJournalTrans').cursor();

        changeCompany(ledgerJournalTrans.Company)
        {
            vendTable = VendTable::findByLedgerDimension(ledgerJournalTrans.LedgerDimension);
        }

        offsetAccount = SKS_EFT_VendorPaym::getBankAccountId
                            (ledgerJournalTrans.Company,
                            vendTable.AccountNum,
                            ledgerJournalTrans.PaymMode,
                            ledgerJournalTrans.PaymSpec,
                            ledgerJournalTrans.CustVendBankAccountId);
        if (offsetAccount)
        {
            dimensionDynamicAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(offsetAccount, LedgerJournalACType::Bank);
            ledgerJournalTrans.OffsetLedgerDimension = dimensionDynamicAccount;
            ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sksSetControls</Name>
				<Source><![CDATA[
    static void sksSetControls(FormRun formrun)
    {
        LedgerJournalTrans ledgerJournalTrans = formrun.dataSource('LedgerJournalTrans').cursor();
        LedgerJournalTable ledgerJournalTable;
        Formdesign formdesign = formrun.design(0);
        FormControl sks_EFT_JournalState = formdesign.controlName(formControlStr(LedgerJournalTransVendPaym, SKS_EFT_JournalState));
        FormControl sksChangeEFTStatus = formdesign.controlName(formControlStr(LedgerJournalTransVendPaym, SKSChangeEFTStatus));
        FormControl sksValidateEFT = formdesign.controlName(formControlStr(LedgerJournalTransVendPaym, SKSValidateEFT));
        FormControl sksChangeEFTStatusAuto = formdesign.controlName(formControlStr(LedgerJournalTransVendPaym, SKSChangeEFTStatusAuto));
        SKS_EFT_Setup lSKS_EFT_Setup;

        if (formHasMethod(formrun, 'ledgerJournalTable'))
        {
            ledgerJournalTable = formrun.ledgerJournalTable();
        }

        // EFT+ Journal state
        sks_EFT_JournalState.visible(ledgerJournalTable.JournalType == LedgerJournalType::Payment);

        // EFT+ Change state button
        sksChangeEFTStatus.visible(ledgerJournalTable.JournalType == LedgerJournalType::Payment);
        SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable, SKSChangeEFTStatus, false, true);

        // EFT+ Validate button
        sksValidateEFT.visible(ledgerJournalTable.JournalType == LedgerJournalType::Payment);
        SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable , SKSValidateEFT, true, true);

        //EFT Change state Auto Create
        select firstonly APAutoCreate from lSKS_EFT_Setup;
        sksChangeEFTStatusAuto.visible(lSKS_EFT_Setup.APAutoCreate);

        if((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors) &&
            sksChangeEFTStatus.enabled() == true)
        {
            sksChangeEFTStatusAuto.enabled(true);
        }
        else
        {
            sksChangeEFTStatusAuto.enabled(false);
        }
        // SKS_FDD_9536 -->
        if (ledgerJournalTable.SKS_EFTAP_IsPaymReqJournal)
        {
            SKS_LedgerJournalTransVendPaymEventHandler::isCallFromPaymReqHideButtons(formrun, false);
            formrun.control(formrun.controlid(Formcontrolstr(LedgerJournalTransVendPaym, buttonCheckJournal))).visible(false);
        }
        else
        {
            if(ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq)
            {
                SKS_LedgerJournalTransVendPaymEventHandler::isCallFromPaymReqHideButtons(formrun, true);
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, Add)).enabled(!ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq);
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, VendPaymProposalCreate)).enabled(!ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq);
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_AmountCurDebit)).enabled(!ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq);
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_AmountCurCredit)).enabled(!ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq);
            }
            formrun.control(formrun.controlid(Formcontrolstr(LedgerJournalTransVendPaym, SKS_EFTAP_SubmitPaymentRequest))).visible(false);
            formrun.control(formrun.controlid(Formcontrolstr(LedgerJournalTransVendPaym, buttonCheckJournal))).visible(true);
        }
        // SKS_FDD_9536 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerDimension_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransVendPaym, LedgerJournalTrans, LedgerDimension), FormDataFieldEventType::Modified)]
    public static void LedgerDimension_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource ledgerJournalTrans_ds = sender.dataSource();
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        FormRun formRun = ledgerJournalTrans_ds.formRun();

        // Enable/Disable Method of Payment and Payment Spec
        SKS_EFT_JournalForm::DisableAPPaymModeAndSpec(ledgerJournalTrans.Company, ledgerJournalTrans.LedgerDimension, ledgerJournalTrans_ds);
        SKS_LedgerJournalTransVendPaymEventHandler::SKS_EFT_SetOffsetAccount(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustVendBankAccountId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransVendPaym, LedgerJournalTrans, CustVendBankAccountId), FormDataFieldEventType::Modified),
     FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransVendPaym, LedgerJournalTrans, PaymSpec), FormDataFieldEventType::Modified),
     FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransVendPaym, LedgerJournalTrans, PaymMode), FormDataFieldEventType::Modified)]
    public static void CustVendBankAccountId_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource ledgerJournalTrans_ds = sender.dataSource();
        FormRun formRun = ledgerJournalTrans_ds.formRun();

        SKS_LedgerJournalTransVendPaymEventHandler::SKS_EFT_SetOffsetAccount(formRun);
        ledgerJournalTrans_ds.write();
        formRun.bookRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFTAP_IHBBankAccount__OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the data base while modifying this field
    /// </summary>
    /// <param name="sender">FormDataObject</param>
    /// <param name="e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransVendPaym, LedgerJournalTrans, SKS_EFTAP_IHBBankAccount), FormDataFieldEventType::Modified),
    SuppressBPWarning('BPParameterNotUsed', 'False positive')]
    public static void SKS_EFTAP_IHBBankAccount__OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource ledgerJournalTrans_ds = sender.dataSource();
        FormRun formRun = ledgerJournalTrans_ds.formRun();

        ledgerJournalTrans_ds.write();
        formRun.bookRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTransVendPaym_Post_bookRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(LedgerJournalTransVendPaym), formMethodStr(LedgerJournalTransVendPaym, bookRefresh))]
    public static void LedgerJournalTransVendPaym_Post_bookRefresh(XppPrePostArgs args)
    {
        FormRun     formRun = args.getThis();

        SKS_LedgerJournalTransVendPaymEventHandler::sksSetControls(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymentStatusEnable</Name>
				<Source><![CDATA[
    static void SKS_EFT_PaymentStatusEnable(FormRun  _formRun, boolean _enabled, boolean _transferred = false)
    {
        FormDataSource ledgerJournalTrans_ds = _formRun.dataSource(formDataSourceStr(LedgerJournalTransVendPaym, LedgerJournalTrans)) as FormDataSource;
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        FormControl paymReconciliationNone = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,PaymReconciliationNone));
        FormControl paymReconciliationSent = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,PaymReconciliationSent));
        FormControl paymReconciliationRecieved = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,PaymReconciliationRecieved));
        FormControl paymReconciliationConfirm = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,PaymReconciliationConfirm));
        FormControl paymReconciliationReject = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,PaymReconciliationReject));
        FormControl bankChequeReuse = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,BankChequeReuse));
        FormControl custVendPaymReconciliationDelete = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,CustVendPaymReconciliationDelete));
        FormControl custVendPaymReconciliationSentDelete = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,CustVendPaymReconciliationSentDelete));
        FormControl custVendPaymReconciliationDeleted = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,CustVendPaymReconciliationDeleted));
        FormControl sksEFTSnapshot = _formRun.Design().controlName(formControlStr(LedgerJournalTransVendPaym,SKSEFTSnapshot));

        if(_enabled)
        {
            ledgerJournalTrans_ds.object(fieldnum(LedgerJournalTrans, PaymentStatus)).enabled(true);
            paymReconciliationNone.enabled(true);
            paymReconciliationSent.enabled(true);
            paymReconciliationRecieved.enabled(true);
            paymReconciliationConfirm.enabled(true);
            paymReconciliationReject.enabled(true);
            bankChequeReuse.enabled(true);
            custVendPaymReconciliationDelete.enabled(true);
            custVendPaymReconciliationSentDelete.enabled(true);
            custVendPaymReconciliationDeleted.enabled(true);
            sksEFTSnapshot.enabled(false);
        }
        else
        {
            sksEFTSnapshot.enabled(true);
            bankChequeReuse.enabled(false);

            paymReconciliationNone.enabled(false);
            paymReconciliationSent.enabled(false);
            paymReconciliationRecieved.enabled(false);
            paymReconciliationConfirm.enabled(false);
            paymReconciliationReject.enabled(false);

            if(_transferred)
            {
                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected)
                {
                    paymReconciliationNone.enabled(true);
                }

                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Recieved)
                {
                    paymReconciliationReject.enabled(true);
                    paymReconciliationConfirm.enabled(true);
                    paymReconciliationSent.enabled(true);
                }

                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed)
                {
                    paymReconciliationReject.enabled(true);
                    paymReconciliationRecieved.enabled(true);
                    paymReconciliationSent.enabled(true);
                }

                if (LedgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent)
                {
                    paymReconciliationReject.enabled(true);
                    if(VendPaymModeTable::find(ledgerJournalTrans.PaymMode).PaymentType != PaymentType::Check && LedgerJournalTrans.BankChequeNum != '')
                    {
                        paymReconciliationRecieved.enabled(true);
                        paymReconciliationConfirm.enabled(true);
                    }
                }

                if(LedgerJournalTrans.PaymentStatus == CustVendPaymStatus::None)
                {
                    paymReconciliationReject.enabled(true);
                }
            }
            else
            {
                if(ledgerJournalTrans.BankChequeNum != '')
                {
                    paymReconciliationReject.enabled(true);
                }
                else
                {
                    if(ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Rejected)
                    {
                        if(ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::None)
                        {
                            ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
                            SKS_LedgerJournalTransVendPaymEventHandler::setStatusNoneForAllApplicable(ledgerJournalTrans);
                            ledgerJournalTrans_ds.research(true);
                            info("@SKS2353");
                        }
                    }
                    else
                    {
                        paymReconciliationNone.enabled(true);
                    }
                }
            }
            custVendPaymReconciliationDelete.enabled(false);
            custVendPaymReconciliationSentDelete.enabled(false);
            custVendPaymReconciliationDeleted.enabled(false);
            ledgerJournalTrans_ds.object(fieldnum(LedgerJournalTrans, PaymentStatus)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ChangeButtonDeleteTransactionsState</Name>
				<Source><![CDATA[
    static void ChangeButtonDeleteTransactionsState(FormRun _formRun)
    {
        FormControl buttonDeleteTransactions = _formRun.design().controlName(formControlStr(LedgerJournalTransVendPaym, buttonDeleteTransactions));
        LedgerJournalTable ledgerJournalTable = _formRun.args().record();

        if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred
            || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::PartiallyTransferred)
        {
            buttonDeleteTransactions.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_SelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransVendPaym, LedgerJournalTrans), FormDataSourceEventType::SelectionChanged)]
    public static void LedgerJournalTrans_SelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        VendPaymModeTable vendPaymModeTable;
        FormRun formRun = sender.formRun();
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTransVendPaym, LedgerJournalTrans)) as FormDataSource;
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        
        // SKS_FDD_9536 -->
        Formdesign formdesign = formrun.design(0);
        LedgerJournalTable   ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        FormControl sKS_EFTAP_IHBBankAccount = formdesign.controlName(formControlStr(LedgerJournalTransVendPaym, LedgerJournalTrans_SKS_EFTAP_IHBBankAccount));
        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();
        // SKS_FDD_9536 <--

        // This re-enables controls that were disabled by EFT+
        // This is needed when moving from line to line so controls get re-enabled correctly
        SKS_LedgerJournalTransVendPaymEventHandler::SKS_EFT_PaymentStatusEnable(formRun, true);

        SKS_LedgerJournalTransVendPaymEventHandler::ChangeButtonDeleteTransactionsState(formRun);

        // Enable/Disable Method of Payment and Payment Spec
        //DO Not call if a new line
        if(ledgerJournalTrans)
        {
            SKS_EFT_JournalForm::DisableAPPaymModeAndSpec(ledgerJournalTrans.Company, ledgerJournalTrans.LedgerDimension, ledgerJournalTrans_ds);
            select firstonly SKS_EFT_PaymMode from vendPaymModeTable where vendPaymModeTable.PaymMode == ledgerJournalTrans.PaymMode;

            if(ledgerJournalTrans.SKS_EFT_APPmtSelectionRecId != 0 || (VendPaymModeTable.PaymentType == PaymentType::Check && LedgerJournalTrans.BankChequeNum != ''))
            {
                SKS_LedgerJournalTransVendPaymEventHandler::SKS_EFT_PaymentStatusEnable(formRun, false, true); // If transferred to EFT+, only allow reject
            }
            else
            {
                if(vendPaymModeTable.SKS_EFT_PaymMode)
                {
                    SKS_LedgerJournalTransVendPaymEventHandler::SKS_EFT_PaymentStatusEnable(formRun, false);
                }
            }
        }
        // SKS_FDD_9536 -->
        if(ledgerJournalTrans.Company != curExt() && sKS_PP_Setup.IHB_Active)
        {
            sKS_EFTAP_IHBBankAccount.enabled(true);
        }
        else
        {
            sKS_EFTAP_IHBBankAccount.enabled(false);
        }
        if (ledgerJournalTable.SKS_EFTAP_IsPaymReqJournal)
        {
            SKS_LedgerJournalTransVendPaymEventHandler::isCallFromPaymReqHideButtons(formRun, false);
        }
        else
        {
            if(ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq)
            {
                SKS_LedgerJournalTransVendPaymEventHandler::isCallFromPaymReqHideButtons(formRun, true);
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, Add)).enabled(!ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq);
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, VendPaymProposalCreate)).enabled(!ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq);
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_AmountCurDebit)).enabled(!ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq);
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_AmountCurCredit)).enabled(!ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq);
            }
        }
        // SKS_FDD_9536 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSValidateEFT_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, SKSValidateEFT), FormControlEventType::Clicked)]
    public static void SKSValidateEFT_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        LedgerJournalTrans trans = transDS.cursor();
        LedgerJournalTable ledgerJournalTable = formRun.args().record(); //trans.ledgerJournalTable();
        SKS_DD_CustVendPaymExceptionList custVendPaymExceptionList;  //SKS_VP1_APPaymentValidation
        SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();

        SKS_EFT_APJournalValidate::validateSet(ledgerJournalTable,false, false, false, true,lSKS_EFT_Setup.APFormatValidMultiThread);

        select firstonly RecId from custVendPaymExceptionList
            where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
            custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

        //SKS_VP1_APPaymentValidation

        if(custVendPaymExceptionList.RecId == 0)   //SKS_VP1_APPaymentValidation
        {
            if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
            {
                ledgerJournalTable.selectForUpdate(true);
                ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Ready;
            }
        }
        else
        {
            if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready)
            {
                ledgerJournalTable.selectForUpdate(true);
                ledgerJournalTable.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
            }
        }
        if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready)
        {
            info("@SYS17146");
        }

        ledgerJournalTable.update();
        formRun.bookRefresh();
        transDS.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSChangeEFTStatus_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, SKSChangeEFTStatus), FormControlEventType::Clicked)]
    public static void SKSChangeEFTStatus_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        LedgerJournalTrans trans = transDS.cursor();
        LedgerJournalTable ledgerJournalTable = formRun.args().record(); //trans.ledgerJournalTable();
        SKS_DD_CustVendPaymExceptionList custVendPaymExceptionList;  //SKS_VP1_APPaymentValidate
        SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();

        SKS_EFT_APJournalValidate::validateSet(LedgerJournalTable,false,true,false,lSKS_EFT_Setup.APFormatValidJournal,lSKS_EFT_Setup.APFormatValidMultiThread);  //SKS_BS_VP4_BankFormatValidation

        select firstonly RecId from custVendPaymExceptionList
            where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
                custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

        //SKS_VP1_APPaymentValidate
        if(!custVendPaymExceptionList) //SKS_VP1_APPaymentValidate
        {
            if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
            {
                if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable))
                {
                    ledgerJournalTable.update();
                    formRun.bookRefresh();
                    transDS.research(true);
                }
            }
            else
            {
                if(SKS_Table_LedgerJournalTable::SetEFTJournalState(LedgerJournalTable))
                {
                    ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::No;
                    ledgerJournalTable.update();

                    if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                    {
                        info("@SKS2025");
                    }
                    formRun.bookRefresh();
                    transDS.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSChangeEFTStatusAuto_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, SKSChangeEFTStatusAuto), FormControlEventType::Clicked)]
    public static void SKSChangeEFTStatusAuto_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        LedgerJournalTrans trans = transDS.cursor();
        LedgerJournalTable ledgerJournalTable = formRun.args().record(); //trans.ledgerJournalTable();
        SKS_DD_CustVendPaymExceptionList custVendPaymExceptionList; //SKS_VP1_APPaymentValidate
        LedgerJournalTrans      lLedgerJournalTrans; //Bug 10659
        SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();
        SKS_EFT_APJournalValidate::validateSet(ledgerJournalTable,false,true,false,lSKS_EFT_Setup.APFormatValidJournal,lSKS_EFT_Setup.APFormatValidMultiThread);  //SKS_BS_VP4_BankFormatValidation

        //<Issue20996: Unable to use send now for FX Automation>
        if(SKS_EFT_Setup::find().ModFX && trans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            DimensionAttributeValueCombination ledgerDimension = DimensionAttributeValueCombination::find(trans.OffsetLedgerDimension);
            if(SKS_EFT_Bank::find(ledgerDimension.DisplayValue, trans.PaymMode).FXAEnabled)
            {
                error("@SKS3595");
                Throw Exception::Error;
            }
        }
        //</Issue20996>

        select firstonly RecId from custVendPaymExceptionList
            where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
                custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

        if(!custVendPaymExceptionList) //SKS_VP1_APPaymentValidate
        {
            if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
            {
                if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable))
                {
                    ledgerJournalTable.update();
                    formRun.bookRefresh();
                    transDS.research(true);
                }
            }
            else
            {
                if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable, true))
                {
                    ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::Yes;
                    ledgerJournalTable.update();
                    if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                    {
                        info("@SKS2025");
                    }

                    formRun.bookRefresh();
                    transDS.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTransVendPaym_Post_initLedger</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(LedgerJournalTransVendPaym), formMethodStr(LedgerJournalTransVendPaym, initLedger))]
    public static void LedgerJournalTransVendPaym_Post_initLedger(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        LedgerJournalTable ledgerJournalTable = formRun.args().record();
        FormDataSource trans_DS = formRun.dataSource();
        if (formRun.args().dataset() == tableNum(LedgerJournalTable))
        {
            SKS_LedgerJournalTransVendPaymEventHandler::sksSetControls(formRun);
        }
        if(ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq)
        {
            trans_DS.allowCreate(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_Post_validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate In-house bank account.
    /// </summary>
    /// <param name="args">It contains the <c>LedgerJournalTrans</c> record.</param>
    // SKS_FDD_9536
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, validateWrite))]
    public static void LedgerJournalTrans_Post_validateWrite(XppPrePostArgs args)
    {
        // SKS_10238 CR -->
        SKS_PP_Bank         sKS_PP_Bank;
        SKS_PP_Bank         sKS_PP_BankLoc;
        LedgerJournalTable  ledgerJournalTable;
        // SKS_10238 CR <--
        LedgerJournalTrans  ledgerJournalTrans = args.getThis();
        DataAreaId          linkedIHBCompany;
        // SKS_10238 CR -->
        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        

        if(!ledgerJournalTable.SKS_EFTAP_IsPaymReqJournal && !ledgerJournalTable.SKS_EFTInv_IsIHBInvJournal && !ledgerJournalTable.SKS_EFTAsset_IsIHBAssetJournal)
        {
            if(ledgerJournalTable.JournalType == LedgerJournalType::Payment)
            {
                //sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension), ledgerJournalTrans.OffsetCompany);

                // SKS_10238 CR <--
                if(ledgerJournalTrans.Company != curExt() && SKS_PP_Setup::find().IHB_Active && !ledgerJournalTrans.SKS_EFTAP_IHBBankAccount)
                {
                    throw error("@SKS:SKGIHBBankMandatory");
                }
                SKS_EFTAP_PaymJourCreate::validateInHouseBank(ledgerJournalTrans);
                // SKS_10238 CR -->
            }

            if(ledgerJournalTable.JournalType == LedgerJournalType::Daily &&
                !ledgerJournalTable.SKS_EFTAP_IsIHBJournal && !ledgerJournalTable.SKS_EFTAR_IsIHBJournal)
            {
                if(ledgerJournalTrans.AccountType ==  LedgerJournalACType::Bank &&
                    ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                    ledgerJournalTrans.OffsetLedgerDimension &&
                    ledgerJournalTrans.LedgerDimension)
                {
                    sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension), ledgerJournalTrans.OffsetCompany);
                    sKS_PP_BankLoc = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension), ledgerJournalTrans.Company);
                    //Bug-12112 --->
                    if(sKS_PP_Bank && sKS_PP_BankLoc)
                    {
                        checkFailed("@SKS:SKGIHBAccOffsetAcc");
                    }
                    // <--- Bug-12112
                    if((!sKS_PP_Bank && sKS_PP_BankLoc) ||
                        (sKS_PP_Bank && !sKS_PP_BankLoc))
                    {
                        if(!ledgerJournalTrans.SKS_IHB_IntercoCompany ||
                            ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension == 0)
                        {
                            checkFailed("@SKS:SKGIHBIntercoAccountVal");
                        }
                        else
                        {
                            if(sKS_PP_Bank)
                            {
                                linkedIHBCompany = sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany;
                            }
                            else
                            {
                                linkedIHBCompany = sKS_PP_BankLoc.SKS_IHBLinkedinhousebankcompany;
                            }
                            if(ledgerJournalTrans.SKS_IHB_IntercoCompany != linkedIHBCompany)
                            {
                                checkFailed("@SKS:SKGIHBIntercoCompVal");
                            }
                        }
                    }
                }
                // SKS_bug_10358 -->
                else
                {
                    // SKS_bug_10358 <--
                    if(ledgerJournalTrans.AccountType ==  LedgerJournalACType::Bank &&
                            ledgerJournalTrans.LedgerDimension)
                    {
                        sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension), ledgerJournalTrans.Company);
                        if(sKS_PP_Bank)
                        {
                            if(!ledgerJournalTrans.SKS_IHB_IntercoCompany ||
                                ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension == 0)
                            {
                                checkFailed("@SKS:SKGIHBIntercoAccountVal");
                            }
                            else
                            {
                                if(ledgerJournalTrans.SKS_IHB_IntercoCompany != sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                                {
                                    checkFailed("@SKS:SKGIHBIntercoCompVal");
                                }
                            }
                        }
                    }
                    // SKS_bug_10358 -->
                    else if(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                        ledgerJournalTrans.OffsetLedgerDimension)
                    {
                        sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension), ledgerJournalTrans.OffsetCompany);
                        if(sKS_PP_Bank)
                        {
                            if(!ledgerJournalTrans.SKS_IHB_IntercoCompany ||
                                ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension == 0)
                            {
                                checkFailed("@SKS:SKGIHBIntercoAccountVal");
                            }
                            else
                            {
                                if(ledgerJournalTrans.SKS_IHB_IntercoCompany != sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                                {
                                    checkFailed("@SKS:SKGIHBIntercoCompVal");
                                }
                            }
                        }
                    }
                }
                // SKS_bug_10358 <--
            }
            // SKS_10238 CR <--
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Company_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the in-house bank account field.
    /// </summary>
    /// <param name="sender">It contains the caller datasource.</param>
    /// <param name="e">Modified event.</param>
    // SKS_FDD_9536
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransVendPaym, LedgerJournalTrans, Company), FormDataFieldEventType::Modified)]
    public static void Company_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource ledgerJournalTrans_ds = sender.dataSource();
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        FormRun formRun = ledgerJournalTrans_ds.formRun();
        Formdesign formdesign = formrun.design(0);
        FormControl sKS_EFTAP_IHBBankAccount = formdesign.controlName(formControlStr(LedgerJournalTransVendPaym, LedgerJournalTrans_SKS_EFTAP_IHBBankAccount));

        if(ledgerJournalTrans.Company != curExt() && SKS_PP_Setup::find().IHB_Active)
        {
            sKS_EFTAP_IHBBankAccount.enabled(true);
        }
        else
        {
            sKS_EFTAP_IHBBankAccount.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFTAP_IHBBankAccount_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validate In-house bank account.
    /// </summary>
    /// <param name="sender">It contains the caller datasource.</param>
    /// <param name="e">Validating event.</param>
    // SKS_FDD_9536
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransVendPaym, LedgerJournalTrans, SKS_EFTAP_IHBBankAccount), FormDataFieldEventType::Validating)]
    public static void SKS_EFTAP_IHBBankAccount_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        LedgerJournalTrans      ledgerJournalTrans = sender.dataSource().cursor();
        SKS_EFTAP_PaymJourCreate::validateInHouseBank(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCallFromPaymReqHideButtons</Name>
				<Source><![CDATA[
    public static void isCallFromPaymReqHideButtons(FormRun  _formRun, boolean _enabled)
    {
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, PostJournal)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, buttonCreatePayment)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKSValidateEFT)).visible(_enabled);
        //Bug 10209 Start
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKSEFTSnapshot)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, FormStaticTextControl1)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKS_EFT_JournalState)).visible(_enabled);
        //Bug 10209 End
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalPostTransfer)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKSChangeEFTStatus)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKSChangeEFTStatusAuto)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKS_DD_CustVendPaymExceptionList)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, buttonPaymReconciliation)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, OffsetAccountInfo)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_OffsetAccount)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_OffsetAccountType)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_PaymentStatus)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_BankChequeNum)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_SKS_DD_ExceptionStatus)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_PaymentStatus)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_BankChequeNum)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, LedgerJournalTrans_SKS_DD_ExceptionStatus)).visible(_enabled);
        _formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKS_EFTAP_SubmitPaymentRequest)).visible(!_enabled);

    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFTAP_SubmitPaymentRequest_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the payment request journal after move to payment journal.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // SKS_FDD_9536
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, SKS_EFTAP_SubmitPaymentRequest), FormControlEventType::Clicked)]
    public static void SKS_EFTAP_SubmitPaymentRequest_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalId     journalNum;
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans = sender.formRun().dataSource().cursor();
        FormRun             callerForm = sender.formRun().args().caller();

        journalNum = ledgerJournalTrans.JournalNum;
        sender.formRun().dataSource(formDataSourceStr(LedgerJournalTransVendPaym, LedgerJournalTrans)).research(true);
        sender.formRun().close();
        ttsbegin;
        ledgerJournalTable.skipDataMethods(true);
        delete_from ledgerJournalTable  where ledgerJournalTable.JournalNum == journalNum;
        ttscommit;
        callerForm.dataSource().research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// If created by payment request is marked , not allow to add line.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // SKS_FDD_9536
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransVendPaym, LedgerJournalTrans), FormDataSourceEventType::QueryExecuted)]
    public static void LedgerJournalTrans_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LedgerJournalTrans  ledgerJournalTrans = sender.cursor();
        LedgerJournalTable  ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        if(ledgerJournalTable.SKS_EFTAP_CreatedByPaymReq)
        {
            sender.allowCreate(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable the IHB intercompany reversal.
    /// </summary>
    /// <param name="sender">It contains the <c>LedgerJournalTrans</c> datasource.</param>
    /// <param name="e">It contains the datasource event.</param>
    // SKS_FDD_9664
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransVendPaym, LedgerJournalTrans), FormDataSourceEventType::SelectionChanged)]
    public static void LedgerJournalTrans_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LedgerJournalTrans  lledgerJourTrans = sender.cursor();
        LedgerJournalTrans  ledgerJournalTransLoc;
        LedgerJournalTrans  lledgerJournalTrans;
        LedgerJournalTrans  lledgerJournalTransLoc;
        LedgerJournalTrans  localLedgerjournaltrans;
        boolean             ret;
        FormRun             formRun = sender.formRun();
        LedgerJournalTable  ledgerJournalTable = lledgerJourTrans.ledgerJournalTable();
        //Bug 10556 ----->
        int                     markedRecord;
        FormMenuButtonControl  buttonFunctions = formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, buttonFunctions));
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTransVendPaym, LedgerJournalTrans)) as FormDataSource;
        MultiSelectionHelper    selectionHelper = MultiSelectionHelper::construct();

        selectionHelper.parmDataSource(ledgerJournalTrans_ds);
        lledgerJournalTrans = selectionHelper.getFirst();
        markedRecord = ledgerJournalTrans_ds.recordsMarked().lastIndex();
        // ----> Bug 10556

        select count(RecId) from ledgerJournalTransLoc
            where ledgerJournalTransLoc.JournalNum == lledgerJourTrans.JournalNum &&
                ledgerJournalTransLoc.SKS_IHB_InterComp == NoYes::Yes;

        if(ledgerJournalTable.Posted &&
            ledgerJournalTransLoc.RecId > 0)
        {
            while(lledgerJournalTrans) //Bug 10556
            {
                select firstonly RecId from lledgerJournalTransLoc
                    where lledgerJournalTransLoc.SKS_EFTAP_RevOrigRecId == lledgerJournalTrans.RecId;
                if(lLedgerJournalTrans.SKS_IHB_InterComp && !lledgerJournalTransLoc)
                {
                    if(lLedgerJournalTrans.Company != curExt())
                    {
                        changecompany(lLedgerJournalTrans.Company)
                        {
                            select localLedgerjournaltrans
                                where localLedgerjournaltrans.ForeignVoucher == lLedgerJournalTrans.voucher
                                    && localLedgerJournalTrans.ForeignCompany == lLedgerJournalTrans.dataAreaId
                                    && localLedgerjournaltrans.Invoice == lLedgerJournalTrans.Invoice
                                    && localLedgerjournaltrans.AmountCurCredit == lLedgerJournalTrans.AmountCurCredit
                                    && localLedgerjournaltrans.AmountCurDebit == lLedgerJournalTrans.AmountCurDebit
                                    && localLedgerjournaltrans.TransDate == lLedgerJournalTrans.TransDate
                                    && localLedgerjournaltrans.LedgerDimension == lLedgerJournalTrans.LedgerDimension
                                    && localLedgerjournaltrans.VendTransId != 0;

                            ret = SKS_EFT_Reversal::checkVendTransCanBeReversed(localLedgerjournaltrans, null);
                        }
                    }
                    else
                    {
                        ret = SKS_EFT_Reversal::checkVendTransCanBeReversed(lLedgerJournalTrans, null);
                    }

                    if(ret)
                    {
                        formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKS_EFTAP_IHBInterCompReversal)).enabled(true);
                    }
                    else
                    {
                        formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKS_EFTAP_IHBInterCompReversal)).enabled(false);
                        break;
                    }
                }
                else
                {
                    formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKS_EFTAP_IHBInterCompReversal)).enabled(false);
                    break;
                }
                lledgerJournalTrans = selectionHelper.getNext(); //Bug 10556
            }
        }
        else
        {
            formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKS_EFTAP_IHBInterCompReversal)).enabled(false);
        }
        buttonFunctions.multiSelect(NoYes::Yes);  //Bug 10556
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFTAP_IHBInterCompReversal_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the form after reversal.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    // SKS_FDD_9664
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, SKS_EFTAP_IHBInterCompReversal), FormControlEventType::Clicked)]
    public static void SKS_EFTAP_IHBInterCompReversal_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        // Bug 10556 ----->
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        LedgerJournalTrans ledgerJournalTrans = formRun.dataSource().cursor();
        LedgerJournalTable   ledgerJournalTable;// = ledgerJournalTrans.ledgerJournalTable();
        int                     cnt = 0;
        int                     markedRecord;
        int                     position;
        boolean                 isCallFromIHBInterCompRev;
        MultiSelectionHelper    selectionHelper = MultiSelectionHelper::construct();

        selectionHelper.parmDataSource(transDS);
        ledgerJournalTrans = selectionHelper.getFirst();
        markedRecord = transDS.recordsMarked().lastIndex();

        TransDate latestDate;

        while (ledgerJournalTrans)
        {
            if (ledgerJournalTrans.TransDate > latestDate)
            {
                latestDate = ledgerJournalTrans.TransDate;
            }

            ledgerJournalTrans = selectionHelper.getNext();
        }

        TransDate reversalDate = SKS_PP_Sys::getReversalDate(latestDate);
        ClassFactory.globalCache().set(curUserId(), 'reversalDate', reversalDate);

        ledgerJournalTrans = selectionHelper.getFirst();

        while (ledgerJournalTrans)
        {
            cnt++;
            SKS_EFTAP_IHBReversal      sKS_EFTAP_IHBReversal = new SKS_EFTAP_IHBReversal();
            isCallFromIHBInterCompRev = sKS_EFTAP_IHBReversal.isCallFromIHBInterCompRev(true);
            if(isCallFromIHBInterCompRev)
            {
                ledgerJournalTable = sKS_EFTAP_IHBReversal.createIHBInterCompReversal(ledgerJournalTrans, ledgerJournalTable);
            }

            if(markedRecord <=  cnt)
            {
                SKS_EFT_reversal::AutoPostJournal(true, ledgerJournalTable);
            }

            ledgerJournalTrans = selectionHelper.getNext();
        }
        formRun.design().controlName(Formcontrolstr(LedgerJournalTransVendPaym, SKS_EFTAP_IHBInterCompReversal)).enabled(false);
        // <----- Bug 10556

        position = transDS.getPosition(); //Bug 10556
        sender.formRun().dataSource(formDataSourceStr(LedgerJournalTransVendPaym, LedgerJournalTrans)).research(true);
        transDS.setPosition(position); //Bug 10556

        //Remove variable from cache so it's not accidentally used again.
        ClassFactory.globalCache().remove(curUserId(), 'reversalDate');
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_PaymMode_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// SKS_FDD_9785
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, LedgerJournalTrans_PaymMode), FormControlEventType::Lookup),
    FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, LedgerJournalTrans_PaymMode1), FormControlEventType::Lookup)]
    public static void LedgerJournalTrans_PaymMode_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans  ledgerJournalTrans = sender.formRun().dataSource().cursor();
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(VendPaymModeTable), sender);
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;

        if(ledgerJournalTrans.SKS_EFT_IsPaymentUpload == NoYes::Yes)
        {
            queryBuildDataSource = query.addDataSource(tableNum(VendPaymModeTable));

            sysTableLookup.addLookupfield(fieldNum(VendPaymModeTable, PaymMode));
            sysTableLookup.addLookupfield(fieldNum(VendPaymModeTable, Name));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_PaymSpec_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// SKS_FDD_9785
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, LedgerJournalTrans_PaymSpec), FormControlEventType::Lookup)]
    public static void LedgerJournalTrans_PaymSpec_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(VendPaymModeSpec), sender);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        LedgerJournalTrans      ledgerJournalTrans = sender.formRun().dataSource().cursor();

        if(ledgerJournalTrans.SKS_EFT_IsPaymentUpload == NoYes::Yes)
        {
            queryBuildDataSource = query.addDataSource(tableNum(VendPaymModeSpec));
            queryBuildDataSource.addRange(fieldNum(VendPaymModeSpec, PaymMode)).value(queryValue(ledgerJournalTrans.PaymMode));
            sysTableLookup.addLookupfield(fieldNum(VendPaymModeSpec, Specification));
            sysTableLookup.addLookupfield(fieldNum(VendPaymModeSpec, PaymMode));
            sysTableLookup.addLookupfield(fieldNum(VendPaymModeSpec, Name));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonApprove_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, buttonApprove), FormControlEventType::Clicked)]
    public static void buttonApprove_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans trans = sender.formRun().dataSource('LedgerJournalTrans').cursor();
        LedgerJournalTable journal;

        select forupdate journal where journal.JournalNum == trans.journalNum;

        if (SKS_Table_LedgerJournalTable::EFTMOPExists(journal) && journal.Approver)
        {
            try
            {
                if(SKS_EFT_JournalValidate::validateSet(journal.JournalType, journal, true))
                {
                    journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Transferred;

                    if(SKS_eft_setup::find().SKS_EFT_WorkflowSendType == SKS_EFT_WorkflowSendType::SendNow && SKS_EFT_Setup::find().APAutoCreate)
                    {
                        journal.SKS_EFT_AutoCreate = true;
                    }

                    str returnmessage = SKS_Table_LedgerJournalTable::SyncEFTRecords(true, journal);
                }
                else
                {
                    journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
                }
            }
            catch
            {
            }
            finally
            {
                //commit state change
                //doUpdate to skip the event handler
                ttsbegin;
                journal.doUpdate();
                ttscommit;
            }

            if(journal.SKS_EFT_AutoCreate && journal.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
            {
                info("@SKS2025");
                SKS_EFT_Processing::PostFromAutoCreate(trans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusNoneForAllApplicable</Name>
				<Source><![CDATA[
    public static void setStatusNoneForAllApplicable(LedgerJournalTrans _ledgerjournaltrans)
    {
        LedgerJournalTrans  lLedgerJournalTrans;
        ttsbegin;
        while select forupdate lLedgerJournalTrans 
            where lLedgerJournalTrans.JournalNum == _ledgerjournaltrans.JournalNum 
            && lLedgerJournalTrans.SKS_EFT_APPmtSelectionRecId == 0
            && lLedgerJournalTrans.PaymentStatus != CustVendPaymStatus::None
            && lLedgerJournalTrans.RecId != _ledgerjournaltrans.RecId
        {
            lLedgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
            lLedgerJournalTrans.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymReconciliationNone_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// PaymReconciliationNone_OnClicked EventHandler
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">e</param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransVendPaym, PaymReconciliationNone), FormControlEventType::Clicked)]
    public static void PaymReconciliationNone_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        //<Issue20910>
        FormRun formRun = sender.formRun();
        
        formRun.bookRefresh();
        //</Issue20910>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>