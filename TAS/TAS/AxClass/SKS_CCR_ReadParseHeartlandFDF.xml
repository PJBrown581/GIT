<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_ReadParseHeartlandFDF</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CCR_ReadParseHeartlandFDF extends SKS_CCR_ReadParseBase
{
    //*********
    //*** do NOT use :CommaStreamIo
    //*** do NOT use :CommaTextStreamIo
    //*** implments a broken fields parse and malfuctions on non-comma separated files(like semi-colon delimited) with empty fields.
    //*** use TextStreamIO this implements it's own classes and will fucntion with any infielddelimiter
    //*** Referce link: https://www.yammer.com/dynamicsaxfeedbackprograms/#/threads/show?threadId=396866031673344
    //*********
    TextStreamIo locTextStreamIO;
    container FieldFormat[];
    int maxFieldFormats;
    str Fields[];
    str Raw_Fields[];



}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetInboundFile</Name>
				<Source><![CDATA[
    public SKS_CCR_InboundFile GetInboundFile(SKS_EB_FilePathName _FilePathAndName, SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        this.InitializeFileInfo(_FilePathAndName, _SKS_BF_BankIntType);
        if (!this.openFile())
        {
            return null;
        }

        return this.parseFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    boolean openFile()
    {
        if (!gSKS_EB_FileHub.attrfileExists())
        {
            throw error((strfmt("@SYS62207",gSKS_EB_FileHub.fileName())));
        }
        gSKS_EB_FileHub.runFileLoad(gSKS_EB_FileHub.getSKS_BF_BankIntType() == SKS_BF_BankIntType::FileHubLocal ? gSKS_EB_FileHub.fileName() : strFmt(@'%1\%2', gSKS_EB_FileHub.getBFFilePath(),gSKS_EB_FileHub.fileName())
                                    ,gBRPreReadScript
                                    ,gBRPreReadScriptParams
                                    ,gBRPostReadScript
                                    ,gBRPostReadScriptParams);
        gSKS_EB_FileHub.streamInit();
        locTextStreamIO = TextStreamIo::constructForRead(gSKS_EB_FileHub.streamGet());
        if (locTextStreamIO)
        {
            locTextStreamIO.inFieldDelimiter('\r\n');
            locTextStreamIO.inRecordDelimiter('\r\n');
        }
        if (!locTextStreamIO || locTextStreamIO.status() != IO_Status::Ok )
        {
            //file could not be opened
            throw error((strfmt("@SYS19312",gSKS_EB_FileHub.fileName())));
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseFile</Name>
				<Source><![CDATA[
    protected SKS_CCR_InboundFile parseFile()
    {
        SKS_BR_AltBankID locCompanyBankAccount;
        SKS_BR_AltBankID prevlocCompanyBankAccount;
        date locBankAccountStatementDate;
        BankAccountStatementNum locBankAccountStatementNum;
        date prevlocBankAccountStatementDate;
        BankAccountStatementNum prevlocBankAccountStatementNum;

        int fieldPos;
        int locImportCount;
        int linecnt = 0;
        str lineStr;
        System.String locString;
        System.IO.StreamReader locStreamReader;
        boolean first = true;
        str transType;
        str batchnumber;

        locImportCount = 0;
        if (!this.openFile())
        {
            return null;
        }

        locCompanyBankAccount = null;
        fieldPos = 1;
        gSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(gSKS_EB_FileHub.streamGet());
        locString = locStreamReader.ReadLine();
        lineStr = strrem(locString, '\n\r');

        while(locString != null)
        {
            linecnt++;

            if(strlen(lineStr) == 0) //skip blank lines
            {
                continue;
            }

            if(subStr(lineStr, 1, 2) == '30')
            {
                if(gSKS_BR_FileFormat.CCRHeartLandValidateAccnt == NoYes::No)
                {
                    locBankAccountStatementNum = prevlocBankAccountStatementNum;
                    locBankAccountStatementDate = prevlocBankAccountStatementDate;
                    locCompanyBankAccount = prevlocCompanyBankAccount;

                    if(first)
                    {
                        gSKS_CCR_InboundStmt = new SKS_CCR_InboundStmt();
                        locCompanyBankAccount = '';
                        locBankAccountStatementNum = subStr(lineStr, 9, 16);
                        locBankAccountStatementDate = this.str2date(subStr(lineStr, 33, 6) ,321);
                    }
                }
                else
                {
                    locBankAccountStatementNum = subStr(lineStr, 9, 16);
                    locBankAccountStatementDate = this.str2date(subStr(lineStr, 33, 6) ,321);
                    locCompanyBankAccount = global::strLRTrim(substr(linestr, 39, 16));

                    if(gSKS_CCR_InboundStmt)
                    {
                        gSKS_CCR_InboundFile.PushStmt(gSKS_CCR_InboundStmt);
                        gSKS_CCR_InboundStmt = null;
                    }

                    gSKS_CCR_InboundStmt = new SKS_CCR_InboundStmt();
                }

                batchnumber = subStr(lineStr, 168, 8);

                if(!gSKS_CCR_InboundFile)
                    gSKS_CCR_InboundFile = new SKS_CCR_InboundFile();
                
                
                gSKS_CCR_InboundStmt.SetDate(SKS_PP_StringFormats::strDateYYMMDD(locBankAccountStatementDate));
                gSKS_CCR_InboundStmt.SetNbr(locBankAccountStatementNum);
                gSKS_CCR_InboundStmt.SetAccount(locCompanyBankAccount);   
       
                if(first)
                {
                    prevlocBankAccountStatementDate = locBankAccountStatementDate;
                    prevlocBankAccountStatementNum = locBankAccountStatementNum;
                    prevlocCompanyBankAccount = locCompanyBankAccount;
                    first = false;
                }
            }

            if(subStr(lineStr, 1, 2) == '31')
            {
                if(!gSKS_CCR_InboundTran)
                    gSKS_CCR_InboundTran = new SKS_CCR_InboundTran();

                gSKS_CCR_InboundTran.SetDate(SKS_PP_StringFormats::strDateYYYYMMDD(this.str2date(subStr(lineStr, 41, 8) ,321)));

                transType = global::strLRTrim(subStr(lineStr, 60, 3));
                gSKS_CCR_InboundTran.setImportAsPositive(true);
                gSKS_CCR_InboundTran.SetAmt(SKS_PP_StringFormats::CurrStr2CurrNum(transType == 'R' ? '-' + subStr(lineStr, 49, 11) : subStr(lineStr, 49, 11))); //DevOps_15980
                gSKS_CCR_InboundTran.SetTranType(global::strLRTrim(subStr(lineStr, 60, 3)));
                gSKS_CCR_InboundTran.SetBankRefNbr(subStr(lineStr, 179, 6));
                gSKS_CCR_InboundTran.SetCustRefNbr(subStr(lineStr, 204, 16));
                if(batchnumber)
                {
                    gSKS_CCR_InboundTran.SetDesc(batchnumber + '-' + subStr(lineStr, 79, 16) + '-' + subStr(lineStr, 63, 16) );
                }
                else
                {
                    gSKS_CCR_InboundTran.SetDesc(subStr(lineStr, 79, 16) + '-' + subStr(lineStr, 63, 16) );
                }
                gSKS_CCR_InboundTran.addToFeeSum(SKS_PP_StringFormats::CurrStr2CurrNum((subStr(lineStr, 343, 1) == 'D' ? '-' + subStr(lineStr, 332, 11) : subStr(lineStr, 332, 11))));
                gSKS_CCR_InboundStmt.PushTrans(gSKS_CCR_InboundTran);
                gSKS_CCR_InboundTran = null;
            }

            locString = locStreamReader.ReadLine();
            lineStr = strrem(locString, '\n\r');
        }

        locStreamReader.Close();

        this.closeFile();

        if(gSKS_CCR_InboundStmt)
        {
            gSKS_CCR_InboundFile.PushStmt(gSKS_CCR_InboundStmt);
            gSKS_CCR_InboundStmt = null;
        }

        return gSKS_CCR_InboundFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileLineCount</Name>
				<Source><![CDATA[
    private int fileLineCount()
    {
        int linecnt = 0;
        Container line;

        if (!this.openFile())
        {
            return 0;
        }

        while(locTextStreamIO.status() == IO_status::Ok)
        {
            line = locTextStreamIO.read();
            if(line)
            {
                linecnt++;
            }
        }
        this.closeFile();
        return linecnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    void closeFile()
    {
        if(locTextStreamIO)
        {
            locTextStreamIO.finalize();
            locTextStreamIO = null;
            gSKS_EB_fileHub.streamClose();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>