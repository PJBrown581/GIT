<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CO_CAJASOCIALBANK_160</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CO_CAJASOCIALBANK_160 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CO_CAJASOCIALBANK_160 extends SKS_EFT_Format
{
    #define.FormatVersion('20220329')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Company identification record
            this.rec_Payment();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    public boolean rec_Payment()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        //1	    Record identifier value	                                            1	    (1  - 1)
        //2	    Transaction code	                                                2	    (2  - 3)
        //3	    Transaction amount	                                                12	    (4  - 15)
        //4	    Account number	                                                    17	    (16 - 32)
        //5	    Bank Code	                                                        9	    (33 - 41)
        //6	    Identification	                                                    15	    (42	- 56)
        //7	    Number	                                                            22	    (57	- 78)
        //8	    Identification validation	                                        2	    (79	- 80)
        //9	    Vacuum	                                                            13	    (81	- 93)
        //10	Description	                                                        10	    (94	- 103)
        //11	Reference	                                                        30	    (104- 133)
        //12	Vacuum	                                                            27	    (134- 160)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //1	    Record identifier value	                                            1	    (1  - 1)
        sb.Append('6');

        //2	    Transaction code	                                                2	    (2  - 3)
        if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append('32');
        }
        else
        {
            sb.Append('22');
        }

        //3	    Transaction amount	                                                12	    (4  - 15)
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 12));

        //4	    Account number	                                                    17	    (16 - 32)
        sb.Append(SKS_PP_StringFormats::strFill(17, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5	    Bank Code	                                                        9	    (33 - 41)
        sb.Append(SKS_PP_StringFormats::strFill(9, this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('BankCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //6	    Identification	                                                    15	    (42	- 56)
        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CompanyName', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //7	    Number	                                                            22	    (57	- 78)
        sb.Append(SKS_PP_StringFormats::strFill(22, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8	    Identification validation	                                        2	    (79	- 80)
        sb.Append(SKS_PP_StringFormats::strFill(2, 'V', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //9	    Vacuum	                                                            13	    (81	- 93)
        sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10	Description	                                                        10	    (94	- 103)
        sb.Append(SKS_PP_StringFormats::strFill(10, 'PROVEEDOR', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11	Reference	                                                        30	    (104- 133)
        sb.Append(SKS_PP_StringFormats::strFill(30, 'PAGOS' + mSKS_EFT_Bank.ACHCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12	Vacuum	                                                            27	    (134- 160)  
        sb.Append(SKS_PP_StringFormats::strFill(27, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select crossCompany Txt from ledgerJournalTrans where
        ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        return ledgerJournalTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    private str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>