<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_MX_HSBC_TOA_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_MX_HSBC_TOA_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_MX_HSBC_TOA_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220523')
    int  mRecCount;
    int  mBlockCount;

    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountId prevBankAccount;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            this.rec_Header();
    
            prevBankAccount = mSKS_EFT_FileDetail.BankAccountId;
    
            next mSKS_EFT_FileDetail;
    
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Format trailer
                this.rec_Summary();
                mRecCount = 0;
            }
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    //  1       Transaction Number
    //  2       Ordering Account
    //  3       Beneficiary Account
    //  4       Amount
    //  5       Currency
    //  6       Reference
    //  7       Beneficiary Name
    //  8       Fiscal Voucher (FV)
    //  9       Beneficiary Taxpayer ID (RFC)
    //  10      VAT (IVA)
    //  11      Beneficiary Email Address
    boolean rec_Header()
    {
        VendTable lVendTable;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mRecCount++;
    
        //  1       Transaction Number
        sb.Append(this.wrapField(num2str(mRecCount, 0 , 0, 0, 0)));
    
        //  2       Ordering Account
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 10)));
    
        //  3       Beneficiary Account
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 10)));
    
        //  4       Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));
    
        //  5       Currency
        if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'MXN')
        {
            sb.Append(this.wrapField('1'));
        }
        else if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'USD')
        {
            sb.Append(this.wrapField('2'));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //  6       Reference
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), true));
    
        //  7       Beneficiary Name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), 1, 40), true));
    
        lVendTable = VendTable::findByCompany(mSKS_EFT_VendorPaym.VendCompany, mSKS_EFT_VendorPaym.VendAccount);
    
        if(lVendTable.Rfc_MX)
        {
            //  8       Fiscal Voucher (FV)
            sb.Append(this.wrapField('1'));
    
            //  9       Beneficiary Taxpayer ID (RFC)
            sb.Append(this.wrapField(subStr(lVendTable.Rfc_MX, 1, 18), true));
    
            //  10      VAT (IVA)
            sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1 * 0.16, 0, 2, 1, 0)));
        }
        else
        {
            //  8       Fiscal Voucher (FV)
            sb.Append(this.wrapField('0'));
    
            //  9       Beneficiary Taxpayer ID (RFC)
            sb.Append(this.wrapField(''));
    
            //  10      VAT (IVA)
            sb.Append(this.wrapField(''));
        }
    
        //  11      Beneficiary Email Address
        sb.Append(this.wrapField('', true, false));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Summary</Name>
				<Source><![CDATA[
    //  1       Block Number
    //  2       Total Transactions
    //  3       Concept
    boolean rec_Summary()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mBlockCount++;
    
        //  1       Block Number
        sb.Append(this.wrapField(num2str(mBlockCount, 0 , 0, 0, 0)));
    
        //  2       Total Transactions
        sb.Append(this.wrapField(num2str(mRecCount, 0 , 0, 0, 0)));
    
        //  3       Concept
        sb.Append(this.wrapField('', true, false));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _Quote = false, boolean _addSeparator = true)
    {
        if(_addSeparator)
        {
            if(_Quote && _field != '' || _Quote == true)
            {
                return #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                return _field + #Separator;
            }
        }
        else
        {
            if(_Quote && _field != '' || _Quote == true)
            {
                return #DoubleQuote + _field + #DoubleQuote;
            }
            else
            {
                return _field;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>