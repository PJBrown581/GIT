<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_NATIONALBANK_CPA005</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_NATIONALBANK_CPA005 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_NATIONALBANK_CPA005 extends SKS_EFT_Format
{
    #define.FormatVersion('20220406')
    #define.AP_DD('AP-DD')

    int mRecordCount;
    int mPaymentCount;
    AmountMST mPaymentAmount;
    str fileCreationNbr;
    PaymSpec paymentSpec;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountId prevBankAccount;
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            
            if(SKS_EFT_Format::getCodelookupvalue('TestFile', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank) == 'Y' )
            {
                fileCreationNbr = 'TEST';
            }
            else
            {
                fileCreationNbr = SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 4);
            }
            if(!paymentSpec)
            {
                paymentSpec = mSKS_EFT_FileDetail.PaymSpec;
            }
    
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Header
                this.rec_Header();
    
                // Reset counters
                mPaymentCount = 0;
                mPaymentAmount = 0;
            }
    
            // Detail lines
            this.rec_Payment();
    
            prevBankAccount = mSKS_EFT_FileDetail.BankAccountId;
    
            next mSKS_EFT_FileDetail;
    
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Format trailer
                this.rec_Trailer();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    boolean rec_Header()
    {
        str address;
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mRecordCount++;
    
        //1  Type of record
        sb.Append('A');
    
        //2     Sequence number
        sb.Append('000000001');
    
        //3     User's Number
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //4     File Creation Number
        sb.Append(fileCreationNbr);
    
        //5     File Creation Date
        sb.Append('0');
        sb.Append(substr(date2Julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())),3,6));
    
        //6     Addresses
        address = SKS_EFT_Format::getCodelookupvalue('Address', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        sb.Append(SKS_PP_StringFormats::strFill(5, address, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //7     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8     Currency code
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //9     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(1406, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    boolean rec_Payment()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        str opCode;
        str userName;
        str val;
        ;
    
        mRecordCount++;

        //1 Type of record
        sb.Append('C');
        
        //2     Sequence number
        sb.Append(SKS_PP_StringFormats::strFill(9, num2str(mRecordCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3 Controle number
        val = mSKS_EFT_FileDetail_BankAccount.WOrdPartyId + fileCreationNbr;
        sb.Append(SKS_PP_StringFormats::strFill(14, val, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //4 Operation code
        opCode = SKS_EFT_Format::getCodelookupvalue('OpCode', mSKS_EFT_FileDetail.RecId);
        sb.Append(SKS_PP_StringFormats::strFill(3, opCode, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5    Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(amt), 10));
    
        //6     Transaction Date
        sb.Append('0');
        sb.Append(substr(date2Julian(mSKS_EFT_FileDetail.EffectiveDate),3,6));
    
        //7     Beneficiary’s institution
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //8    Beneficiary’s account Number
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //9    Search number
        sb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //10    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        userName = SKS_EFT_Format::getCodelookupvalue('UserName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        //11    Abbreviated user’s name
        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(userName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //12    Beneficiary’s name
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //13    User's Name
        sb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //14     User's Number
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //15    Transaction reference No.
        sb.Append(SKS_PP_StringFormats::strFill(19, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //16    User's institution
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));//SKS_VSTS_14674
    
        //17     Return account number
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //18     User’s general info.
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //19     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //20     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //21     Reserved
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));
    
        sb.Append(SKS_PP_StringFormats::strFill(1200, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
        mFileRecCount++;
        mPaymentCount++;
        mPaymentAmount += amt;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    boolean rec_Trailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        str val;
        mRecordCount++;
    
        //1  Type of record
        sb.Append('Z');
    
        //2     Sequence number
        sb.Append(SKS_PP_StringFormats::strFill(9, num2str(mRecordCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3    Control number.
        val = mSKS_EFT_FileDetail_BankAccount.WOrdPartyId + fileCreationNbr;
        sb.Append(SKS_PP_StringFormats::strFill(14, val, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
       
        //4    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //5    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //6    Total value of credits
        sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount, 14));
    
        //7    Total number of credits
        sb.Append(SKS_PP_StringFormats::strFill(8, num2str(mPaymentCount,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        //8    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            
        //9    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //10    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            
        //11    Reserved
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //9       Fill-in Characters
        sb.Append(SKS_PP_StringFormats::strFill(1352, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        mFileRecCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId join
            mSKS_EFT_FileDetail_BankAccount
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail_BankAccount.RefRecId == mSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>