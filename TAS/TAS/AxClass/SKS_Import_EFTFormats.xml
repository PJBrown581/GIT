<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Import_EFTFormats</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Import_EFTFormats
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importEFTFormatData</Name>
				<Source><![CDATA[
    public void importEFTFormatData()
    {
        SysDictClass sysDictClass;

        List lFormatClass;
        ListEnumerator lClassEnum;
        SKS_EFT_FormatMetaData_Common  sks_EFT_FormatMetaData_Common;

        //Import common metadata
        sks_EFT_FormatMetaData_Common = new SKS_EFT_FormatMetaData_Common();

        sks_EFT_FormatMetaData_Common.ImportFormatCommonMetaData();

        //Import all formats metadata
        lFormatClass = new DictClass(classnum(SKS_EFT_Format_MetaData)).extendedBy();

        lClassEnum = lFormatClass.getEnumerator();

        while(lClassEnum.moveNext())
        {
            sysDictClass = new SysDictClass(lClassEnum.current());
            this.ExecuteFormatClass(sysDictClass);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importEFTFormatDataAllCompanies</Name>
				<Source><![CDATA[
    public static void importEFTFormatDataAllCompanies(container _parms)
    {
        SKS_Import_EFTFormats importMetaData = new SKS_Import_EFTFormats();
        SKS_PP_Setup locSKS_PP_Setup;
        boolean importRefreshMetaData;

        if (_parms == conNull())
        {
            importRefreshMetaData = true;
        }

        while select crosscompany DataAreaId from locSKS_PP_Setup
        {
            changecompany(locSKS_PP_Setup.company())
            {
                if (importRefreshMetaData)
                {
                    SKS_EFT_BankFabricMetadata::loadMetaDataList('*', SKS_EFT_APIFormatType::File);
                    importMetaData.importEFTFormatData();

                    SKS_EFT_BankFabricInboundMetaData::loadInboundMetaDataList();

                }
                else
                {
                    if (conPeek(_parms,1) == SKS_EB_CodeSource::BankFabric)
                    {
                        SKS_EFT_APIFormatType apiFormatType = conPeek(_parms,2);
                        SKS_EFT_BankFabricMetadata::loadMetaDataList('*', apiFormatType);
                        SKS_EFT_BankFabricInboundMetaData::loadInboundMetaDataList();
                    }
                    else
                    {
                        importMetaData.importEFTFormatData();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ExecuteFormatClass</Name>
				<Source><![CDATA[
    private void ExecuteFormatClass(SysDictClass _sysDictClass)
    {
        Object  formatclassInstance;
      
        formatclassInstance = _sysDictClass.makeObject();
        _sysDictClass.callObject('ImportFormatMetaData', formatclassInstance);
        _sysDictClass.callObject('ImportInboundMetaData', formatclassInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportFormatGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import format group meta data when format is selected
    /// </summary>
    /// <param name = "_conFormatGroup">Format group container</param>
    public static void ImportFormatGroup(container _conFormatGroup)
    {
        SKS_EFT_FormatGroup formatGroup;
        SysDictClass        sysDictClass;
        Object              classInstance;
        str                 metadataFormatClass;
        TreeNode            tnode2Enum;
        SKS_PP_Setup        locSKS_PP_Setup;
        SKS_EB_CodeSource   formatCodeSource;
        SKS_EFT_APIFormatType apiFormatType;

        formatGroup = conPeek(_conFormatGroup,1);
        formatCodeSource = conPeek(_conFormatGroup,3);
        apiFormatType = conPeek(_conFormatGroup,4);
        
        if (formatCodeSource == SKS_EB_CodeSource::BankFabric)
        {
            while select crosscompany DataAreaId from locSKS_PP_Setup
            {
                changecompany(locSKS_PP_Setup.company())
                {
                    SKS_EFT_BankFabricMetadata::loadMetaDataList(formatGroup, apiFormatType);
                }
            }
        }
        else
        {
            metadataFormatClass = strReplace('SKS_EFT_FormatMetadata_' + formatGroup, '-', '_');
            tnode2Enum = TreeNode::findNode('Classes');
            tnode2Enum = tnode2Enum.AOTfindChild(metadataFormatClass);
        
            if (tnode2Enum == null)
            {
                error(strFmt("@SKS1022", conPeek(_conFormatGroup,2)));
            }
            else
            {
                sysDictClass = new SysDictClass(className2Id(metadataFormatClass));
                classInstance = sysDictClass.makeObject(); // Instantiate class

                while select crosscompany DataAreaId from locSKS_PP_Setup
                {
                    changecompany(locSKS_PP_Setup.company())
                    {
                        sysDictClass.callObject('ImportFormatMetaData', classInstance);
                    }
                }
            
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportFormatGroupAllCompanies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import format groups for all companies
    /// </summary>
    /// <param name = "_conFormatGroup">The Format Group</param>
    public static void ImportFormatGroupAllCompanies(container _conFormatGroup)
    {
        SKS_PP_Setup locSKS_PP_Setup;

        while select crosscompany DataAreaId from locSKS_PP_Setup
        {
            changecompany(locSKS_PP_Setup.DataAreaId)
            {              
                SKS_Import_EFTFormats::ImportFormatGroup(_conFormatGroup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ChangeFormatGroupCodeSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import format group code source
    /// </summary>
    /// <param name = "_conFormatGroup">Format Group</param>
    public static void ChangeFormatGroupCodeSource(container _conFormatGroup)
    {
        SKS_EFT_FileFormat  locFileFormats;
        DataAreaId          currCompany;
        SKS_EFT_FormatGroup formatGroup;
        SKS_EFT_FormatId    FormatId;
        SKS_EB_CodeSource   codeSource;
        str                 dataContractVer;

        currCompany = curExt();
        formatGroup = conPeek(_conFormatGroup,1);
        formatId    = conPeek(_conFormatGroup,2);
        codeSource  = conPeek(_conFormatGroup,3);
        dataContractVer = conPeek(_conFormatGroup,4);

        locFileFormats.skipDataMethods(true);
        locFileFormats.skipDatabaseLog(true);
        locFileFormats.skipEvents(true);

        update_recordset crosscompany locFileFormats setting FormatGroupCodeSource = codeSource, FormatGroupDataContractVersion = dataContractVer
            where locFileFormats.FormatGroup == formatGroup; 
                
        if (conPeek(_conFormatGroup,5))
        {
            SKS_Import_EFTFormats::ImportFormatGroup(_conFormatGroup);
        }
    }
































 /*
    public void GetEFTFomartClassIDs()
    {
        SysDictionary Classdictionary = new SysDictionary();
        ClassId     clID;
        str   clName;
    
        clID = Classdictionary.classNext(0);
        while (clID)
        {
            clName = classId2Name(clID);
            if (subStr(clName,1,23) == "SKS_EFT_FormatMetaData_")  //SKS_EFT_FormatMetaData_US_CHASE_XML_AR
            {
                this.ExecuteFormatClass(clID, clName);
            }
            clID = Classdictionary.classNext(clID);
        }

    }
*/

  /*  private void ExecuteFormatClass(ClassId _classID, str _clName)
    {
        SysDictClass formatClass;
        Object       formatclassInstance;
         
        info(strFmt('Importing metadata fromat class %1',_clName));
    
        formatClass = new SysDictClass(_classID);
        formatclassInstance = formatClass.makeObject(); // Instantiate class
        formatClass.callObject('ImportFormatMetaData', formatclassInstance);
    }
*/

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>