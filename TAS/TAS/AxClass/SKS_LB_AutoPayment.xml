<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_AutoPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_LB_AutoPayment
{
    boolean mdimensionfail;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPmtJrnl</Name>
				<Source><![CDATA[
    public void createPmtJrnl(SKS_LB_Journal   local_LB_Journal)
    {
        SKS_LB_JournalAR    SKS_LB_Journalar;
        SKS_LB_Journalar    sks_lb_journalar2;
        SKS_LB_FileFormat   SKS_LB_FileFormat;
        SKS_LB_Bank         sks_lb_bank;
        SKS_PP_Setup        sks_pp_setup;
        SKS_LB_Payment      sks_lb_payment;
        SKS_LB_CreatePaymentParms sks_LB_CreatePaymentParms;
        SKS_PP_500PPBas dd500PP = new SKS_PP_500PPBas();
        int result;
        ;
    
        select sum(actualsettleamountcur) from SKS_LB_Journalar2 where SKS_LB_Journalar2.JournalId == local_LB_Journal.journalid;
    
        sks_LB_CreatePaymentParms = new SKS_LB_CreatePaymentParms();
        sks_LB_CreatePaymentParms.JournalID(local_LB_Journal.JournalID);
        sks_LB_CreatePaymentParms.BatchNumber(local_LB_Journal.BatchNum);
        sks_LB_CreatePaymentParms.ARPmtTotal(local_lb_journal.PmtTotal);
        sks_LB_CreatePaymentParms.ApplyAmt(SKS_LB_Journalar2.actualsettleamountcur);
    
    
        result = dd500PP.IsRegistered('LB');
        if (result != 1)
        {
            warning("@SKS326");
        }
        else    
        {
            select firstOnly FileDate from SKS_LB_JournalAR where SKS_LB_JournalAR.journalid == local_LB_Journal.journalid;
            select * from SKS_LB_FileFormat where SKS_LB_FileFormat.FormatID == local_LB_Journal.FormatID;
            select * from sks_lb_bank where sks_lb_bank.BankAccountID == local_LB_Journal.bankacct && SKS_LB_Bank.LBFormatId == local_LB_Journal.FormatID;
            select journalname from sks_pp_setup;
    
            sks_lb_payment = SKS_LB_Payment::contruct();
    
            sks_lb_payment.setLBJournalId(sks_lb_createPaymentParms.JournalID());
            sks_lb_payment.setLBBatchNumber(sks_lb_createPaymentParms.BatchNumber());
            sks_lb_payment.setTotalAppliedAmount(sks_lb_createPaymentParms.ApplyAmt());
            sks_lb_payment.setTotalPaymentAmount(sks_lb_createPaymentParms.ARPmtTotal());
    
            if(SKS_LB_Fileformat.FileType != enum2int(SKS_LB_FileType::BAI2) && SKS_LB_Fileformat.FileType != enum2int(SKS_LB_FileType::Symcor))
            {
                if(local_LB_Journal.HeadPaymDate == dateNull())
                {
                    sks_lb_payment.settransdate(SKS_LB_JournalAR.FileDate);
                }
                else
                {
                    sks_lb_payment.settransdate(local_lb_Journal.HeadPaymDate);
                }
            }
            else
            {
                sks_lb_payment.settransdate(local_lb_Journal.HeadPaymDate);
            }
            sks_lb_payment.run(true);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustAcctDimensions</Name>
				<Source><![CDATA[
    public boolean validateCustAcctDimensions(SKS_LB_Journal    local_LB_Journal)
    {
        MainAccount mainAccount;
        SKS_LB_JournalAR lSKS_LB_JournalAR;
        LedgerDimensionDefaultAccount custAccountDim;
        FinancialDimensionValidationService service;
        LedgerAccountValidationContract ledgerAccountValidationContract;
        LedgerAccountContract ledgerAccountContract;
        DimensionAttributeValueContract dimensionAttributeValueContract;
    
        DimensionAttributeValueSetItem  dimAttrValueSetItem;
        DimensionAttributeValue         dimAttrValue;
        DimensionAttribute              dimAttr;
        boolean                         status = true;
    
        mDimensionFail = false;
        while select CustAccount, CustomerCompany, DefaultDimension, ChkRefNbr from lSKS_LB_JournalAR
            where lSKS_LB_JournalAR.JournalId == local_LB_Journal.JournalID && lSKS_LB_JournalAR.BatchNum == local_LB_Journal.BatchNum
                && lSKS_LB_JournalAR.LedgerJournalTransRecId == 0
        {
            changecompany(lSKS_LB_JournalAR.CustomerCompany)
            {
                // check for suspended dimensions separately, these are fatal errors that must be fixed before sending to Payment Journal
                if (!DimensionValidation::validateDefaultDimension(lSKS_LB_JournalAR.DefaultDimension))
                {
                    mDimensionFail = true;
                    info(strFmt("@SYS25424",lSKS_LB_JournalAR.CustomerCompany));
                    error(strFmt("@SKS2110", lSKS_LB_JournalAR.CustAccount,lSKS_LB_JournalAR.ChkRefNbr));
                    status = false;
                }
                else
                {
                    service = new FinancialDimensionValidationService();
                    ledgerAccountValidationContract = new LedgerAccountValidationContract();
                    ledgerAccountContract = new LedgerAccountContract();
                    custAccountDim = CustLedgerAccounts::summaryLedgerDimension(lSKS_LB_JournalAR.CustAccount);
                    mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(custAccountDim);
                    ledgerAccountContract.parmMainAccount(mainAccount.MainAccountId);
    
                    ledgerAccountContract.parmValues(new List(Types::Class));
                    while select DimensionAttributeValue from dimAttrValueSetItem
                        where   dimAttrValueSetItem.DimensionAttributeValueSet   == lSKS_LB_JournalAR.DefaultDimension
                    {
    
                        dimAttrValue        = DimensionAttributeValue::find(dimAttrValueSetItem.DimensionAttributeValue);
    
                        // Find the underlying attribute.
                        dimAttr             = DimensionAttribute::find(dimAttrValue.DimensionAttribute);
    
                        dimensionAttributeValueContract = new DimensionAttributeValueContract();
                        dimensionAttributeValueContract.parmName(dimAttr.Name);
                        dimensionAttributeValueContract.parmValue(dimAttrValue.getValue());
    
                        ledgerAccountContract.parmValues().addEnd(dimensionAttributeValueContract);
                    }
    
                    ledgerAccountValidationContract.parmLedgerAccount(ledgerAccountContract);
                    if(!service.validateLedgerAccount(ledgerAccountValidationContract))
                    {
                        info(strFmt("@SKS2110", lSKS_LB_JournalAR.CustAccount,lSKS_LB_JournalAR.ChkRefNbr));
                        status = false;
                    }
                }
            }
        }
        return status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidatePaymJournal</Name>
				<Source><![CDATA[
    private void ValidatePaymJournal(SKS_LB_Journal local_lb_journal, SKS_LB_FileType FileType)
    {
        SKS_LB_JournalAR lSKS_LB_JournalAR;
        SKS_LB_JournalARErrors lSKS_LB_JournalARErrors;
        DialogButton ok = DialogButton::Ok;
        ;
    
        while select ChkRefNbr, JournalId, BatchNum, parentrecid from lSKS_LB_JournalARErrors
            where lSKS_LB_JournalARErrors.JournalId == local_LB_Journal.JournalID && lSKS_LB_JournalARErrors.BatchNum == local_LB_Journal.BatchNum
    
        {
            if(FileType == SKS_LB_filetype::BAI2 || FileType == SKS_LB_FileType::Symcor)
            {
                select lSKS_LB_JournalAR
                     where lSKS_LB_JournalAR.parentrecid == lSKS_LB_JournalARErrors.parentrecid
                        && lSKS_LB_JournalAR.JournalId == local_LB_Journal.JournalID
                        && lSKS_LB_JournalAR.BatchNum == local_LB_Journal.BatchNum;
            }
            else
            {
                select lSKS_LB_JournalAR
                     where lSKS_LB_JournalAR.ChkRefNbr == lSKS_LB_JournalARErrors.ChkRefNbr
                        && lSKS_LB_JournalAR.JournalId == local_LB_Journal.JournalID
                        && lSKS_LB_JournalAR.BatchNum == local_LB_Journal.BatchNum;
            }
    
    
            if (lSKS_LB_JournalAR)
            {
                error(strfmt("@SKS572", lSKS_LB_JournalAR.CustAccount + "@SYS35673" + lSKS_LB_JournalAR.ChkRefNbr));
                return;
            }
    
        }
    
        // validate dimensions, if any errors are found, ask if the user wants to continue
        if (!this.validateCustAcctDimensions(local_lb_journal))
        {
            // if hard failure, errors will prevent payment journal from creating so must fix now.
            if (mDimensionFail)
            {
                error("@SKS2159");
                return;
            }
            else
                // on other failures, give user choice whether to fix here or in Payment Journal
            {
                ok = Box::okCancel("@SKS2109", DialogButton::Cancel);
                if (ok != DialogButton::Ok)
                {
                    return;
    
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>