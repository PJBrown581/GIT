<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOK_WIRE_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BOK_WIRE_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BOK_WIRE_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20230412')
    #define.DOM_WIRE('DOM-WIRE')
    #define.INTL_WIRE('INTL-WIRE')
    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            //  Detail Record
            this.rec_Details();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Company Name
        //2     Debit Account Number.
        //3     Beneficiary Name
        //4     Beneficiary Account Number
        //5     Currency
        //6     Blank
        //7     Blank
        //8     Blank
        //9     Beneficiary Bank Code
        //10    Transaction Amount
        //11    Send Date
        //12    Orig To Ben Information Line 1
        //12    Bank to Bank Information Line 1
        //13    Bank to Bank Information Line 2
        //14    Bank to Bank Information Line 3
        //15    Bank to Bank Information Line 4
        //16    Transaction Id
        //---------------------------------------------------------------------------------

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invDetailsString, invDesc;

        //1              Transaction ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, 50));

        //2              Debit Account Number                      
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 34));

        //3              Beneficiary Name                          
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35));

        //4              Beneficiary Account Number                
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 34));

        //5              Currency                                  
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode, 3));

        //6              Blank                                     
        sb.Append(this.wrapField(''));

        //7              Blank                                     
        sb.Append(this.wrapField(''));

        //8              Blank                                     
        sb.Append(this.wrapField(''));

        //9              Beneficiary Bank Code                     
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 22));

        //10              Transaction Amount                        
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 15));

        //11              Send Date                                 
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Slash), 10));

        
        while select InvoiceNumber, InvoiceTransactionTxt from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            invDetailsString    += strFmt('%1,', invSKS_EFT_FileDetail.InvoiceNumber);
            invDesc             += strFmt('%1,', invSKS_EFT_FileDetail.InvoiceTransactionTxt);
        }
        invDetailsString = subStr(subStr(invDetailsString, 1, strLen(invDetailsString)-1), 1, 35);
        invDesc = subStr(subStr(invDesc, 1, strLen(invDesc)-1), 1, 35);

        //12              Orig To Ben Information Line 1
        sb.Append(this.wrapField(invDetailsString, 35));                //SKS#DevOps:21697

        //13              Orig To Ben Information Line 2
        sb.Append(this.wrapField(invDesc, 35));                         //SKS#DevOps:21697

        //14              Orig To Ben Information Line 3
        sb.Append(this.wrapField(''));

        //15              Orig To Ben Information Line 4
        sb.Append(this.wrapField(''));

        //16              Bank to Bank Information Line 1	          
        sb.Append(this.wrapField(''));

        //17              Bank to Bank Information Line 2	          
        sb.Append(this.wrapField(''));

        //18              Bank to Bank Information Line 3	          
        sb.Append(this.wrapField(''));

        //19              Bank to Bank Information Line 4	          
        sb.Append(this.wrapField('', 0, false));


        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0,  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            if(_field != '' && strContains(_field, ',') && _fieldLength > 0)
            {
                text = #DoubleQuote + subStr(_field, 1, _fieldLength) + #DoubleQuote + #Separator;
            }
            else
            {
                text = subStr(_field, 1, _fieldLength) + #Separator;
            }
        }
        else
        {
            text = subStr(_field, 1, _fieldLength);
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>