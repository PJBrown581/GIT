<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_NATWEST_AUTOPAY_BACS</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_NATWEST_AUTOPAY_BACS extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_NATWEST_AUTOPAY_BACS extends SKS_EFT_Format
{
    #define.FormatVersion('20221228')
    #define.Separator(',')
    #define.Doublequotes('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            this.rec_Payment();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Payment
    /// </summary>
    /// <returns>true</returns>
    boolean rec_Payment()
    {
        //  BankRegistrationNumber
        //  BankAccount
        //  CompanyName
        //  paymAmountInForeignCurrency
        //  Reference

        int i=0;
        str invno;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //  BankRegistrationNumber
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));

        //  BankAccount
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));

        //  CompanyName
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName)));

        //  paymAmountInForeignCurrency
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        //  Reference
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AccountName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)) + mSKS_EFT_FileDetail.AccountNum));

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId//DevOps21010
        {
            i++;
            invno = invSKS_EFT_FileDetail.InvoiceNumber;
        }
        if(i>1)
        {
            //INVOICE NUMBER
            sb.Append(this.wrapField('Multiple',false));
        }
        else
        {
            //INVOICE NUMBER
            sb.Append(this.wrapField(invno,false));
        }

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _addSeparator = true)
    {
        str text;

        text = _field;

        if(_addSeparator)
        {
            if(strContains(text, ','))
            {
                text = #Doublequotes + text + #Doublequotes + #Separator;
            }
            else
            {
                text += #Separator;
            }
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>