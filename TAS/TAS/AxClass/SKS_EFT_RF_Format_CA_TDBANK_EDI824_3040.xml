<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_CA_TDBANK_EDI824_3040</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_CA_TDBANK_EDI824_3040  extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;
    str mFileName;
    str mFileID;
    str mTED; //Technical Error Description (and we will include the related Notes/Special Instructions
    str mFieldDelimiter;
    str mRecordDelimiter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getField</Name>
				<Source><![CDATA[
    protected str getField(System.String _Record, int _FieldNumber)
    {
        str rtnval;
        //str locWorkingStr  = _Record;
        int locStartIndex, locEndIndex = 0;
        int locCounter = 0, locLength;
        ;
    
        while( locCounter < _FieldNumber - 1)
        {
            locCounter++;
            if(locStartindex > 0)
                locStartIndex = SKS_PP_StringFormats::strIndexOf(_Record, mFieldDelimiter, locStartIndex) + 1;
            else
                locStartIndex = SKS_PP_StringFormats::strIndexOf(_Record, mFieldDelimiter) + 1;
            if(locStartIndex <= 1)
                break;
        }
        locLength = _Record.get_Length();
        if(locStartIndex < locLength)
            if(locStartIndex > 1)
                locEndIndex = SKS_PP_StringFormats::strIndexOf(_Record, mFieldDelimiter, locStartIndex);
        if(locStartIndex > 1)
        {
            if(locStartIndex < locEndIndex)
                rtnval = SKS_PP_StringFormats::strSub(_Record,locStartIndex, locEndIndex - locStartIndex);
            else
                rtnval = SKS_PP_StringFormats::strSub(_Record,locStartIndex);
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordDelimiter</Name>
				<Source><![CDATA[
    private str getRecordDelimiter(TextStreamIo tempTextlo)
    {
        container templocRecord;
        System.String templocstring;
        str delimiter;
        int i;

        while(tempTextlo.status() == IO_Status::Ok)
        {
            templocRecord = tempTextlo.read();
            if(conLen(templocRecord) > 0)
            {
                //Remove any carriage Returns
                for(i = 1; i <= conLen(templocRecord); i++)
                {
                    templocRecord = conPoke(templocRecord, i, strRem(conPeek(templocRecord,i), '\r\n'));
                    templocstring += conPeek(templocRecord ,i);
                }
                templocstring = strLRTrim(templocstring);
                delimiter = subStr(templocstring,strLen(templocstring), strLen(templocstring));
            }
        }
        return delimiter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        TextStreamIo locTextIo , templocTextIo;
        container locRecord;
        System.String locString;
        str filepath;               //SKS#DevOps:15152
        SKS_EFT_Bank  locsks_eft_bank;
        int i;//index of the current location in the container
        ;
    
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        templocTextIo = TextStreamIo::ConstructForRead(fileHub.StreamGet());
        mRecordDelimiter = this.getRecordDelimiter(templocTextIo);
        locTextIo = TextStreamIo::ConstructForRead(fileHub.StreamGet());
        
        locTextIo.inRecordDelimiter(@mRecordDelimiter);
        locTextIo.inFieldDelimiter('埬때Э̄Kč⚳巏');
    
        if(!mSKS_EFT_RF_File)
            mSKS_EFT_RF_File = new SKS_EFT_RF_File();

        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
 
        //SKS#DevOps:15152
        filepath = System.IO.Path::GetDirectoryName(_filename);

        if(_SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)       //SKS#DevOps:20175
        {
            select locsks_eft_bank where locsks_eft_bank.APBankFabricInboundFileLocation == filepath;
        }
        else
        {
            select locsks_eft_bank where locsks_eft_bank.InboundFileLoc == filepath;
        }
        if(locsks_eft_bank)
        {
            mSKS_EFT_RF_File.setModule(SKS_EFT_Module::AP);
        }
        else
        {
            mSKS_EFT_RF_File.setModule(SKS_EFT_Module::AR);
        }
    
        while(locTextIo.status() == IO_Status::Ok)
        {
            locRecord = locTextIo.read();
            if(conLen(locRecord) > 0)
            {
                //Remove any carriage Returns
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }
                locString = strLRTrim(conPeek(locRecord, 1));
                if(!System.String::IsNullOrEmpty(locString))
                {
                    if(locString.StartsWith('ISA'))
                    {
                        mFieldDelimiter = locString.Substring(3,1);
                    }
                    if(locString.StartsWith('GS'))
                    {
                        this.processGSRecord(locString);
                    }
                    else if(locString.StartsWith('OTI'))
                    {
                        this.processOTIRecord(locString);
                    }
                    else if(locString.StartsWith('TED'))
                    {
                        this.processTEDRecord(locString);
                    }
                }
                //if(!System.String::IsNullOrEmpty(locString))
            }
            //if(conLen(locRecord) > 0)
        }
        //while(locStreamReader.get_EndOfStream());
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        if(locTextIo)
        {
            locTextIo.finalize();
            locTextIo = null;
        }
    
        if(gErrorsExist)
        {
            mSKS_EFT_RF_File = null;
        }
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        TextStreamIo locTextIo , templocTextIo;
        container locRecord;
        System.String locString;
        str rtnval = '';
        int classId;
        boolean FirstRecordWithTextIsISA00Found = false;
        boolean GSFound = false;
        boolean STFound = false;
        
        int i;//index of the current location in the container
        ;
    
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        templocTextIo = TextStreamIo::ConstructForRead(fileHub.StreamGet());
        mRecordDelimiter = this.getRecordDelimiter(templocTextIo);
        locTextIo = TextStreamIo::ConstructForRead(fileHub.StreamGet());
        
        locTextIo.inRecordDelimiter(@mRecordDelimiter);
        locTextIo.inFieldDelimiter('埬때Э̄Kč⚳巏');
        
        while(locTextIo.status() == IO_Status::Ok)
        {
            locRecord = locTextIo.read();
            if(conLen(locRecord) > 0)
            {
                //Remove any carriage Returns
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }
                locString = strLRTrim(conPeek(locRecord, 1));
                if(!System.String::IsNullOrEmpty(locString))
                {
                    if(locString.StartsWith('ISA'))
                    {
                        if(locString.Substring(4,2) == '00' ||
                           locString.Substring(4,2) == '01')
                        {
                            FirstRecordWithTextIsISA00Found = true;
                        }
                    }
                    if(locString.StartsWith('GS'))
                    {
                        GSFound = true;
                    }
                    if(locString.StartsWith('ST'))
                    {
                        if(locString.Substring(3,3) == '824')
                        {
                            STFound = true;
                        }
                    }
                }
                //if(!System.String::IsNullOrEmpty(locString))
            }
            //if(conLen(locRecord) > 0)
        }
        //while(locStreamReader.get_EndOfStream());
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.

        if(FirstRecordWithTextIsISA00Found
        && GSFound
        && STFound)
        {
            //ALl Qualifers show this a SWIFT_ACKNAK_07262013 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        if(locTextIo)
        {
            locTextIo.finalize();
            locTextIo = null;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
        return mSKS_EFT_RF_File;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGSRecord</Name>
				<Source><![CDATA[
    //Process the Functional Group Header(GS) record
    protected void processGSRecord(System.String _GSRecord)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processISARecord</Name>
				<Source><![CDATA[
    //Process the Interchange Control Header(ISA) record
    protected void processISARecord(System.String _ISARecord)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNTERecord</Name>
				<Source><![CDATA[
    //Process the Note/Special Instruction(NTE) Record
    protected void processNTERecord(System.String _NTERecord)
    {
        str locFreeFormMessage;
        ;

        if(mSKS_EFT_RF_Transaction)
        {
            locFreeFormMessage = this.getField(_NTERecord, 3);
            if(strLen(locFreeFormMessage) > 0)
            {
                if(strLen(mSKS_EFT_RF_Transaction.getAdditionalData()) > 0)
                    locFreeFormMessage = ' ' + locFreeFormMessage;
                mSKS_EFT_RF_Transaction.appendAdditionalData(locFreeFormMessage);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOTIRecord</Name>
				<Source><![CDATA[
    //Process the Original Transaction Identification (OTI) record
    protected void processOTIRecord(System.String _OTIRecord)
    {
        str locOTIStatus;
    
        ;
        mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
        if(mSKS_EFT_RF_Transaction)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
        }

        locOTIStatus = strUpr(strLRTrim(this.getField(_OTIRecord, 2)));

        mSKS_EFT_RF_Transaction.setStatus(strLRTrim(this.getField(_OTIRecord, 2)));
        mSKS_EFT_RF_Transaction.setID(this.getField(_OTIRecord, 4));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTEDRecord</Name>
				<Source><![CDATA[
    //Process the Technical Error Description(TED) record
    protected void processTEDRecord(System.String _TEDRecord)
    {
        ;
    
        if(strLen(this.getField(_TEDRecord, 3)) > 0)
        {
            if(mSKS_EFT_RF_Transaction)
            {
                this.setStatusReason(mSKS_EFT_RF_Transaction, strLRTrim(this.getField(_TEDRecord, 2)), strLRTrim(this.getField(_TEDRecord, 3)));
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReason</Name>
				<Source><![CDATA[
    protected void setStatusReason(SKS_EFT_RF_Stucture _SKS_EFT_RF_Structure, str _StatusReasonCode, str _StatusReasonDesc = '')
    {
        System.Text.StringBuilder sb;
        ;
    
        sb = new System.Text.StringBuilder();
        if(strLen(_SKS_EFT_RF_Structure.getStatusReason()) == 0)
        {
            _SKS_EFT_RF_Structure.setStatusReason(_StatusReasonCode);
            _SKS_EFT_RF_Structure.setStatusReasonDesc(_StatusReasonDesc);
        }
        else
        {
            if(strLen(_SKS_EFT_RF_Structure.getAdditionalData()) > 0)
            {
                sb.Append('\\\\');  //seperate this TED from the previous TED
            }
            sb.Append(_StatusReasonCode);
            sb.Append('-');
            sb.Append(_StatusReasonDesc);
            _SKS_EFT_RF_Structure.setAdditionalData(sb.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTextBlock</Name>
				<Source><![CDATA[
    protected str setTextBlock()
    {
        str locTextBlock;
    
        return locTextBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File _SKS_EFTAP_File)
    {
        return _SKS_EFTAP_File.FileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        str rtnval;
        ;

        rtnval = _SKS_EFT_FileDetail.PaymentReference;
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>