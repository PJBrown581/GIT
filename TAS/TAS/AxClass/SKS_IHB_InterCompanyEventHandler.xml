<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_InterCompanyEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_IHB_InterCompanyEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PaymentCompany_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(SKS_IHB_IntercompanySetupForm, PaymentCompany), FormControlEventType::Lookup)]
    public static void PaymentCompany_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        DataArea                dataArea;
        SKS_PP_Setup            sks_PP_Setup;
        SKS_IHB_PaymCompanyTmp  sks_IHB_PaymCompanyTmp;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SKS_IHB_PaymCompanyTmp), sender);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        
        delete_from sks_IHB_PaymCompanyTmp;
            
        while select ID, Name from dataArea
        {
        
            changecompany( dataArea.Id)
            {
                sks_PP_Setup = SKS_PP_Setup::find();
            }
            
            if(sks_PP_Setup.IHB_Active && sks_PP_Setup.IHB_GLJournalName)
            {
                sks_IHB_PaymCompanyTmp.clear();
                sks_IHB_PaymCompanyTmp.PaymCompany = DataArea.Id;
                sks_IHB_PaymCompanyTmp.CompanyName = DataArea.Name;
                sks_IHB_PaymCompanyTmp.insert();
            }
        }
        queryBuildDataSource = query.addDataSource(TableNum(SKS_IHB_PaymCompanyTmp));
        sysTableLookup.addLookupfield(fieldNum(SKS_IHB_PaymCompanyTmp, PaymCompany));
        sysTableLookup.addLookupfield(fieldNum(SKS_IHB_PaymCompanyTmp, CompanyName));
        sysTableLookup.addSelectionField(fieldNum(SKS_IHB_PaymCompanyTmp, PaymCompany));        
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>BankAccount_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(SKS_IHB_IntercompanySetupForm, BankAccount), FormControlEventType::Lookup)]
    public static void BankAccount_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        FormRun                 element = sender.formRun();
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SKS_PP_Bank), sender);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        FormControl             paymCompanyFormCtrl = element.design(0).controlName(formControlStr(SKS_IHB_IntercompanySetupForm, PaymentCompany));

         
        if ( paymCompanyFormCtrl.valueStr())
        {
            query.allowCrossCompany(true);
            queryBuildDataSource = query.addDataSource(TableNum(SKS_PP_Bank));
            query.addCompanyRange(paymCompanyFormCtrl.valueStr());
            queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBInhouseBank)).value(queryValue(NoYes::Yes));
            sysTableLookup.addLookupfield(fieldNum(SKS_PP_Bank, BankAccountId));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_IHB_InterCompanySetup_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(SKS_IHB_IntercompanySetupForm, SKS_IHB_InterCompanySetup), FormDataSourceEventType::Activated)]
    public static void SKS_IHB_InterCompanySetup_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormDataSource              sks_IHB_InterCompanySetup_DS  = sender.formRun().dataSource(formDataSourceStr(SKS_IHB_IntercompanySetupForm,SKS_IHB_InterCompanySetup));
        SKS_IHB_InterCompanySetup   sks_IHB_InterCompanySetup = sks_IHB_InterCompanySetup_DS.cursor();
         
        
        if(sks_IHB_InterCompanySetup.Active)
        {
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, BankAccount)).enabled(true);
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, PaymentCompany)).enabled(true);
        }
        else
        {
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, BankAccount)).enabled(false);
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, PaymentCompany)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Active_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(SKS_IHB_IntercompanySetupForm, SKS_IHB_InterCompanySetup, Active), FormDataFieldEventType::Modified)]
    public static void Active_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource              sks_IHB_InterCompanySetup_DS = sender.datasource();
        SKS_IHB_InterCompanySetup   sks_IHB_InterCompanySetup = sks_IHB_InterCompanySetup_DS.cursor();
        VendTable                   vendTable;
        InterCompanyTradingPartner  interCompanyTradingPartner, interCompanyTradingPartnerCus;
        InterCompanyTradingRelation         interCompanyTradingRelation;
        InterCompanyEndpointActionPolicy    interCompanyActionPolicy;

        if(sks_IHB_InterCompanySetup.Active)
        {
            vendTable = VendTable::find(sks_IHB_InterCompanySetup.VendAccount);
            interCompanyTradingPartner = InterCompanyTradingPartner::findVendor(vendTable.Party, VendTable.dataAreaid);
            interCompanyTradingRelation = InterCompanyTradingPartner.interCompanyTradingRelation();
            interCompanyTradingPartnerCus = InterCompanyTradingPartner::find(interCompanyTradingRelation.InterCompanyTradingCustomer);
            interCompanyActionPolicy = InterCompanyEndpointActionPolicy::findPartner(interCompanyTradingPartnerCus.RecId);

            if(interCompanyActionPolicy.LedgerJournalNameIdCustPaym || interCompanyActionPolicy.AutoPostCustPaym == NoYes::Yes)
            {
                checkFailed("@SKS:SKGAutoPostIHBInter");
            }
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, PaymentCompany)).enabled(true);
            
        }
        else if(sks_IHB_InterCompanySetup.PaymentCompany || sks_IHB_InterCompanySetup.BankAccount)
        {
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, PaymentCompany)).enabled(false);
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, PaymentCompany)).setValue('');
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, BankAccount)).enabled(false);
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, BankAccount)).setValue('');
            sks_IHB_InterCompanySetup_DS.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymentCompany_OnModified</Name>
				<Source><![CDATA[
    [FormDataFieldEventHandler(formDataFieldStr(SKS_IHB_IntercompanySetupForm, SKS_IHB_InterCompanySetup, PaymentCompany), FormDataFieldEventType::Modified),
     FormDataFieldEventHandler(formDataFieldStr(SKS_IHB_IntercompanySetupForm, SKS_IHB_InterCompanySetup, BankAccount), FormDataFieldEventType::Modified)]
    public static void PaymentCompany_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource              sks_IHB_InterCompanySetup_DS = sender.datasource();
        SKS_IHB_InterCompanySetup   sks_IHB_InterCompanySetup = sks_IHB_InterCompanySetup_DS.cursor();
        SKS_PP_Bank                 sks_PP_Bank;
        DataArea                    dataArea;

        if(sks_IHB_InterCompanySetup.PaymentCompany)
        {
            select Id from dataArea
                where dataArea.id == sks_IHB_InterCompanySetup.PaymentCompany;

            if(!dataArea.id)
            {
                checkFailed("@SKS:SKGPayCompExists");
            }
            else
            {
                sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, BankAccount)).enabled(true);
                if(sks_IHB_InterCompanySetup.BankAccount)
                {
                    changecompany(sks_IHB_InterCompanySetup.PaymentCompany)
                    {
                        select BankAccountId from sks_PP_Bank where sks_PP_Bank.BankAccountId == sks_IHB_InterCompanySetup.BankAccount;
                        if(!sks_PP_Bank.BankAccountId)
                        {
                            checkFailed("@SKS:SKGBankAccExists");
                        }
                    }
                }
            }
        }
        else
        {
            sks_IHB_InterCompanySetup_DS.object(fieldNum(SKS_IHB_InterCompanySetup, BankAccount)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GroupSalesPayment_LedgerJournalNameIdCustPaym_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(InterCompanyTradingRelationSetupVendor, GroupSalesPayment_LedgerJournalNameIdCustPaym), FormControlEventType::Modified),
     FormControlEventHandler(formControlStr(InterCompanyTradingRelationSetupVendor, GroupSalesPayment_AutoPostCustPaym), FormControlEventType::Modified)]
    public static void GroupSalesPayment_LedgerJournalNameIdCustPaym_OnModified(FormControl sender, FormControlEventArgs e)
    {        
        SKS_PP_Bank                         sks_PP_Bank;
        FormDataSource                      interCompanyTradingPatner_DS = sender.formRun().dataSource(formDataSourceStr(InterCompanyTradingRelationSetupVendor,InterCompanyTradingPartner));
        FormDataSource                      interCompanyActionPolicyCus_DS = sender.formRun().dataSource(formDataSourceStr(InterCompanyTradingRelationSetupVendor,InterCompanyActionPolicyCustomer));
        InterCompanyTradingPartner          interCompanyTradingPartner = interCompanyTradingPatner_DS.cursor();
        InterCompanyEndpointActionPolicy    interCompanyActionPolicy = interCompanyActionPolicyCus_DS.cursor();
        VendTable                           vendTable = VendTable::find(interCompanyTradingPartner.vendAccount());
        SKS_IHB_InterCompanySetup           sks_IHB_InterCompanySetup;

        
        select BankAccount from sks_IHB_InterCompanySetup  where sks_IHB_InterCompanySetup.VendAccount == vendTable.AccountNum; 
        
        select crosscompany SKS_IHBLinkedinhousebankcompany, SKS_IHBLinkedinhousebankaccount from sks_PP_Bank
            where sks_PP_Bank.BankAccountId == sks_IHB_InterCompanySetup.BankAccount;
        
        if(sks_PP_Bank.SKS_IHBLinkedinhousebankcompany && sks_PP_Bank.SKS_IHBLinkedinhousebankaccount)
        {
            if(interCompanyActionPolicy.LedgerJournalNameIdCustPaym || interCompanyActionPolicy.AutoPostCustPaym == NoYes::Yes)
            {
                throw warning ("@SKS:SKGAutoPostIHB");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>