<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_PNC_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_PNC_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_PNC_EDI820 extends SKS_EFT_Format
{
    #define.FormatVersion('20221122')
    #define.LineEnd('~')
    #define.Separator('*')
    #define.ACHCTX('ACH-CTX')
    #define.FEW('FEW')
    #define.FWT('FWT')
    SKS_EFT_EDI mSKS_EFT_EDI;
    System.Text.StringBuilder msb;
    str mSenderControlNbr;
    int mTranSetCount;
    int mSegmentCount;
    int mRecordCount;
    int mCtrlQuantity;
    AmountMST mAMTTotal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildString</Name>
				<Source><![CDATA[
    boolean buildString()
    {
        System.Text.StringBuilder sb;
        str record = msb.ToString();
        int pos = 1;
        int length;
        int recMod;
        int lineCount;
        str value;
        int totalCount = 1;
    
        length = strLen(record);
        lineCount = length div 80;
        recMod = length mod 80;
    
        if(recMod > 0)
        {
            lineCount++;
        }
    
        // Create the compressed records
        while(lineCount >= totalCount)
        {
            sb = new System.Text.StringBuilder();
            value = subStr(record, pos, 80);
            pos = pos + 80;
    
            // Pmt Related Info 04-83
            sb.Append(value);
            this.fileWrite(sb.ToString());
            totalCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CtrlFile831</Name>
				<Source><![CDATA[
    private void CtrlFile831()
    {
        //------------------------------------------------------------------------------------------------------
        //Format Structure
        //ID    Req     Max
        //ISA   M       1
        //GS    M       1
        //ST    M       1
        //BGN   M       1
        //DTM   O       2
        //N9    O      >1
        //TRN   O      >1
        //AMT   O       1
        //QTY   O       1
        //SE    M       1
        //GE    M       1
        //IEA   M       1
        //------------------------------------------------------------------------------------------------------
    
        //GS    M       1
        this.rec_GS831();
    
        //ST    M       1
        this.rec_ST831();
    
        //BGN   M       1
        this.rec_BGN();
    
        //N9    O      >1
        this.rec_N9();
    
        //AMT   O       1
        this.rec_AMT();
    
        //QTY   O       1
        this.rec_QTY();
    
        //SE    M       1
        this.rec_SE831(mSegmentCount);
    
        //GE    M       1
        this.rec_GE(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
        ;
    
        msb = new System.Text.StringBuilder();
        mRecordCount = 0;
    
        while(mSKS_EFT_FileDetail)
        {
            mCtrlQuantity++;
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_VendorPaym.EDI820Layout, mSKS_EFT_File.RecId);
            mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileFormat.NextFileId,0,0,0,0));
    
            if(firstRec)
            {
                firstRec = false;
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Heading
            this.rec_ST();
            this.rec_BPR();
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCTX:
                    this.rec_TRN();
                    break;
                default:
                    this.rec_REF();
                    break;
            }
    
            this.rec_N1PE();
            this.rec_N3PE();
            this.rec_N4PE();
    
            this.rec_N1PR();
    
            if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FEW || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT) && mSKS_EFT_VendorPaym.WBenBankName != '')
            {
                this.rec_N1RB();
            }
    
            this.rec_ENT();
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_RMRIV(invSKS_EFT_FileDetail);
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
                {
                    this.rec_DTM(invSKS_EFT_FileDetail);
                }
            }
    
            this.rec_SE(mSegmentCount);
    
            mSegmentCount = 0;
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE(mTranSetCount);
    
        this.CtrlFile831();
        this.rec_IEA();
    
        this.buildString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGS06</Name>
				<Source><![CDATA[
    private str getGS06()
    {
        SKS_EFT_EDI820_Data lSKS_EFT_EDI820_Data;
        str value;
    
        select firstonly * from lSKS_EFT_EDI820_Data where lSKS_EFT_EDI820_Data.FileRecId == mSKS_EFT_File.RecId &&
                                                 lSKS_EFT_EDI820_Data.Segment == SKS_EFT_EDI820_Segment::H0080GS &&
                                                 lSKS_EFT_EDI820_Data.FieldNbr == 6;
    
        value = SKS_EFT_EDI::getDbValue(lSKS_EFT_EDI820_Data.DataValue);
        return this.CharacterReplacement(value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_AMT</Name>
				<Source><![CDATA[
    boolean rec_AMT()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                    Max     Type    Comment
        //01    Amount Qualifier Code           3       ID
        //02    Monetary Amount                 18      R
        //03    Credit/Debit Flag Code          1       ID
        //------------------------------------------------------------------------------------------------------
    
        msb.Append('AMT');
        msb.Append(#Separator);
    
        //01    Amount Qualifier Code
        msb.Append('OP');
        msb.Append(#Separator);
    
        //02    Monetary Amount
        msb.Append(num2str((mAMTTotal),0,2,0,0));
        msb.Append(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BGN</Name>
				<Source><![CDATA[
    boolean rec_BGN()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Transaction Set Purpose Code                        2       ID
        //02    Reference Identification                            30      AN      Payment currency
        //03    Date                                                8       DT
        //------------------------------------------------------------------------------------------------------
    
        msb.Append('BGN');
        msb.Append(#Separator);
    
        //01    Transaction Set Purpose Code
        msb.Append('06');
        msb.Append(#Separator);
    
        //02    Reference Identification
        msb.Append(SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr,30));
        msb.Append(#Separator);
    
        //03    Date
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        msb.Append(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    boolean rec_BPR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //------------------------------------------------------------------------------------------------------
        AmountMST amt;
        date effectivDate;
    
        mRecordCount++;
        mSegmentCount++;
    
        msb.Append('BPR');
        msb.Append(#Separator);
    
        //01    Trans. Handling Code
        msb.Append('C');
        msb.Append(#Separator);
    
        //02    Monetary Amount
        amt = -1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        mAMTTotal += amt;
        msb.Append(num2str((amt),0,2,0,0));
        msb.Append(#Separator);
    
        //03    Credit/Debit Flag Code
        msb.Append('C');
        msb.Append(#Separator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCTX:
                msb.Append('ACH');
                break;
            Case #FEW:
                msb.Append('FEW');
                break;
            Case #FWT:
                msb.Append('FWT');
                break;
        }
        msb.Append(#Separator);
    
        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCTX:
                msb.Append('CTX');
                break;
        }
        msb.Append(#Separator);
    
        //06    DFI ID No. Qualifier
        msb.Append('01');
        msb.Append(#Separator);
    
        //07    DFI ID Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCTX:
                if(mSKS_EFT_FileDetail.BankOrigDFI != '')
                {
                   msb.Append(mSKS_EFT_FileDetail.BankOrigDFI);
                }
                else
                {
                   msb.Append(mSKS_EFT_FileDetail.BankBankTransit);
                }
                break;
            default:
                msb.Append(mSKS_EFT_FileDetail.BankBankTransit);
                break;
        }
        msb.Append(#Separator);
    
        //08    Acct. No. Qual. Code
        msb.Append('DA');
        msb.Append(#Separator);
    
        //09    Account Number
        msb.Append(mSKS_EFT_FileDetail.BankBankAcct);
        msb.Append(#Separator);
    
        //10    Orig. Co. ID
        msb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
        msb.Append(#Separator);
    
        //11    Orig. Co. Code
        msb.Append(#Separator);
    
        //12    DFI ID No. Qualifier
        msb.Append('01');
        msb.Append(#Separator);
    
        //13    DFI ID Number
        msb.Append(mSKS_EFT_FileDetail.DepBankTransit);
        msb.Append(#Separator);
    
        //14    Acct. No. Qual Code
        msb.Append('DA');
        msb.Append(#Separator);
    
        //15    Account Number
        msb.Append(mSKS_EFT_FileDetail.DepBankAcct);
        msb.Append(#Separator);
    
        //16    Effective Entry Date
        effectivDate = SKS_EFT_Processing::GetOffsetDate(0, mSKS_EFT_File.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(effectivDate));
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //------------------------------------------------------------------------------------------------------
        msb.Append('DTM');
        msb.Append(#Separator);
    
        //01     Date/Time Qualifier
        msb.Append('003');
        msb.Append(#Separator);
    
        //03    Date
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
        msb.Append(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    boolean rec_ENT()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Assigned Number                                     6       N0
        //------------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        msb.Append('ENT');
        msb.Append(#Separator);
    
        //01    Assigned Number
        msb.Append('1');
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    boolean rec_GE(int _count)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        mSKS_EFT_EDI.setTranSetCount(_count);
        value = mSKS_EFT_EDI.buildGE();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    boolean rec_GS()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS831</Name>
				<Source><![CDATA[
    boolean rec_GS831()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS();
    
        msb.Append(strReplace(value, '*RA*', '*CT*'));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    boolean rec_IEA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //------------------------------------------------------------------------------------------------------
        str value;
    
        mSKS_EFT_EDI.setFunctionalGroupCount(2);
        value = mSKS_EFT_EDI.buildIEA();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    boolean rec_N1PE()
    {
        //------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //------------------------------------------------------------------------------------------------------------------
        str vendName;
    
        mRecordCount++;
        mSegmentCount++;
    
        msb.Append('N1');
        msb.Append(#Separator);
    
        //01     Entity ID Code
        msb.Append('PE');
        msb.Append(#Separator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            vendName = mRemittanceName;
        }
        else
        {
            vendName = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }
    
        msb.Append(substr(vendName,1,60));
    
        //03    Identification Code Qualifier
        //04    Identification Code
        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    boolean rec_N1PR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //------------------------------------------------------------------------------------------------------
    
        //BP Deviation Documented
        mSegmentCount++;
        mRecordCount++;
    
        msb.Append('N1');
        msb.Append(#Separator);
    
        //01     Entity ID Code
        msb.Append('PR');
        msb.Append(#Separator);
    
        //02     Name
        msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName),1,60));
    
        //03    Identification Code Qualifier
        //04    Identification Code
    
        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1RB</Name>
				<Source><![CDATA[
    boolean rec_N1RB()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Receiving Bank Name
        //03    Identification Code Qualifier                       2       ID
        //------------------------------------------------------------------------------------------------------
    
        msb.Append('N1');
        msb.Append(#Separator);
    
        //01     Entity ID Code
        msb.Append('RB');
        msb.Append(#Separator);
    
        //02     Name
        msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),1,60));
        msb.Append(#Separator);
    
        //03    Identification Code Qualifier
        msb.Append('13');
        msb.Append(#Separator);
    
        //04    Identification Code
        msb.Append(mSKS_EFT_FileDetail.DepBankTransit);
        msb.Append(#LineEnd);
    
        mSegmentCount++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    boolean rec_N3PE()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
        //------------------------------------------------------------------------------------------------------
        if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '')
        {
            msb.Append('N3');
            msb.Append(#Separator);
    
            //01    Address Information
            msb.Append(substr(mRemittanceAdrLine1, 1, 35));
    
            //02    Address Information
            if(mRemittanceAdrLine2 != '')
            {
                msb.Append(#Separator);
                msb.Append(substr(mRemittanceAdrLine2, 1,35));
            }
    
            msb.Append(#LineEnd);
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    boolean rec_N4PE()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //05    Location Qualifier                                  2       ID
        //06    Location Identifier                                 30      AN
        //------------------------------------------------------------------------------------------------------
        if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
        {
            msb.Append('N4');
            msb.Append(#Separator);
    
            //01    City Address
            msb.Append(substr(mRemittanceCity, 1, 23));
            msb.Append(#Separator);
    
            //02    State or Province Code
            msb.Append(substr(mRemittanceState, 1, 2));
            msb.Append(#Separator);
    
            //03    Postal Code
            msb.Append(substr(mRemittanceZipCode,1,10));
            msb.Append(#Separator);
    
            //04    Country Code
            msb.Append(mRemittanceCountryRegionId);
    
            //05    Location Qualifier
            //06    Location Identifier
    
            msb.Append(#LineEnd);
    
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N9</Name>
				<Source><![CDATA[
    boolean rec_N9()
    {
        //------------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //------------------------------------------------------------------------------------------------------------------------------
        mSegmentCount++;
        mRecordCount++;
    
        msb.Append('N9');
        msb.Append(#Separator);
    
        //01     Trace Type Code
        msb.Append('BT');
        msb.Append(#Separator);
    
        //02     Reference Identification
        msb.Append(this.getGS06());
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_QTY</Name>
				<Source><![CDATA[
    boolean rec_QTY()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Quantity Qualifier                                   2      ID
        //02    Quantity                                            15      AN
        //------------------------------------------------------------------------------------------------------
    
        msb.Append('QTY');
        msb.Append(#Separator);
    
        //01     Entity ID Code
        msb.Append('53');
        msb.Append(#Separator);
    
        //02     Quantity
        msb.Append(substr(int2str(mCtrlQuantity),1,15));
        msb.Append(#LineEnd);
    
        mSegmentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF</Name>
				<Source><![CDATA[
    boolean rec_REF()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    30      AN      Check Printing Codes
        //03    Description                                         80      AN      Not Used
        //------------------------------------------------------------------------------------------------------
    
        mSegmentCount++;
    
        msb.Append('REF');
        msb.Append(#Separator);
    
        //01     Reference No. Qualifier
        msb.Append('TN');
        msb.Append(#Separator);
    
        //02     Reference Identification
        msb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,30));
    
        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Identification                            9       AN
        //03    Payment Action Code                                 2       ID
        //04    Amount paid                                         18      R
        //05    Original Amount                                     18      R
        //06    Discount Amount                                     18      R
        //------------------------------------------------------------------------------------------------------
    
        AmountMST amt;
    
        mSegmentCount++;
    
        msb.Append('RMR');
        msb.Append(#Separator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            msb.Append('IV'); // Only write IV if an invoice number exists
        }
        msb.Append(#Separator);
    
        //02     Reference Identification
        msb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,30));
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCTX:
                msb.Append(#Separator);
    
                //03    Payment Action Code
                msb.Append(#Separator);
    
                //04    Amount paid
                amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
                msb.Append(num2str(amt,0,2,0,0));
                msb.Append(#Separator);
    
                //05    Original Amount
                amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
                msb.Append(num2str(amt,0,2,0,0));
                msb.Append(#Separator);
    
                //06    Discount Amount
                amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
                msb.Append(num2str(amt,0,2,0,0));
                break;
        }
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    boolean rec_SE(int _count)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------------------------
        _count++;
    
        msb.Append('SE');
        msb.Append(#Separator);
    
        //1     Number of Included Segments
        msb.Append(num2str(_count,0,0,0,0));
        msb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        msb.Append(mSenderControlNbr);
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE831</Name>
				<Source><![CDATA[
    boolean rec_SE831(int _count)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------------------------
        _count++;
    
        msb.Append('SE');
        msb.Append(#Separator);
    
        //1     Number of Included Segments
        msb.Append(num2str(_count,0,0,0,0));
        msb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        msb.Append(mSenderControlNbr);
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    boolean rec_ST()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //---------------------------------------------------------------------------------
    
        mSegmentCount++;
        mTranSetCount++;
    
        msb.Append('ST');
        msb.Append(#Separator);
    
        //1     Transaction Set ID Code
        msb.Append('820');
        msb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        if(strLen(mSKS_EFT_FileDetail.PaymentReference) < 4)
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),9);
        }
    
        msb.Append(mSenderControlNbr);
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST831</Name>
				<Source><![CDATA[
    boolean rec_ST831()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //---------------------------------------------------------------------------------
        str ctrlNum = strKeep(mSKS_EFT_File.FileNbr,'1234567890');
    
        mSegmentCount++;
        mTranSetCount++;
    
        msb.Append('ST');
        msb.Append(#Separator);
    
        //1     Transaction Set ID Code
        msb.Append('831');
        msb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        if(strLen(ctrlNum) < 4)
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(4, ctrlNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(ctrlNum,9);
        }
    
        msb.Append(mSenderControlNbr);
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    boolean rec_TRN()
    {
        //------------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Identification                            30      AN      Payment Trace No
        //03    Orig. Co. ID                                        10      AN      Not used
        //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
        //------------------------------------------------------------------------------------------------------------------------------
        mSegmentCount++;
        mRecordCount++;
    
        msb.Append('TRN');
        msb.Append(#Separator);
    
        //01     Trace Type Code
        msb.Append('1');
        msb.Append(#Separator);
    
        //02     Reference Identification
        msb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),30));
    
        //03    Orig. Co. ID
        //04    Reference Number
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>