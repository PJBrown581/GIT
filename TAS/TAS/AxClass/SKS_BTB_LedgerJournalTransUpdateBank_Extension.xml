<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BTB_LedgerJournalTransUpdateBank_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(LedgerJournalTransUpdateBank))]
final class SKS_BTB_LedgerJournalTransUpdateBank_Extension
{
     

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkWhenPost</Name>
				<Source><![CDATA[
    boolean checkWhenPost(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerJournalTrans _originalLedgerJournalTrans,
        boolean _checkNoSettlement,
        LedgerPostingMessageLog _ledgerPostingMessageCollection)
    {
        boolean ok = next checkWhenPost(
            _ledgerJournalTrans,
            _originalLedgerJournalTrans,
            _checkNoSettlement,
            _ledgerPostingMessageCollection);

        if(_originalLedgerJournalTrans.SKS_BTB_TransferMethod)
        {
            changecompany(_originalLedgerJournalTrans.OffsetCompany)
            {
                ok = ok && LedgerJournalTransUpdateBank::checkBankPaymStatus(_originalLedgerJournalTrans.SKS_BTB_TransferMethod, _originalLedgerJournalTrans.PaymentStatus);
            }

            if(!ok)
            {
                CustVendPaymStatus paymStatus = SKS_BTB_PaymModeTable::find(_originalLedgerJournalTrans.SKS_BTB_TransferMethod).PaymStatus;
                if (_ledgerPostingMessageCollection)
                {
                    if(!_ledgerPostingMessageCollection.find(tableNum(LedgerJournalTrans), _originalLedgerJournalTrans.RecId))
                    {
                        _ledgerPostingMessageCollection.logCheckFailed(strFmt("@SYS66070", LedgerJournalTrans::findTmpVoucher(_ledgerJournalTrans.Voucher, tmpVoucherMap),
                                    _ledgerJournalTrans.PaymentStatus,
                                    paymStatus));
                    }
                }
                else
                {
                    checkFailed(strFmt("@SYS66070", LedgerJournalTrans::findTmpVoucher(_ledgerJournalTrans.Voucher, tmpVoucherMap),
                                _ledgerJournalTrans.PaymentStatus,
                                paymStatus));
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankPaymStatus</Name>
				<Source><![CDATA[
    public static boolean checkBankPaymStatus(str _paymMode, CustVendPaymStatus _actualStatus)
    {
        boolean             ok = true;
        CustVendPaymStatus      neededPaymStatus;
        SKS_BTB_PaymModeTable payModeTable;

        payModeTable = SKS_BTB_PaymModeTable::find(_paymMode);

        if (!payModeTable || _actualStatus == CustVendPaymStatus::Rejected)
        {
            return false;
        }

        neededPaymStatus = payModeTable.PaymStatus;

        switch (neededPaymStatus)
        {
            case CustVendPaymStatus::Sent:
                if (_actualStatus == CustVendPaymStatus::None)
                {
                    ok = false;
                }
                break;

            case CustVendPaymStatus::Recieved:
                if (_actualStatus == CustVendPaymStatus::None ||
                    _actualStatus == CustVendPaymStatus::Sent)
                {
                    ok = false;
                }
                break;

            case CustVendPaymStatus::Confirmed:
                if (_actualStatus == CustVendPaymStatus::None ||
                    _actualStatus == CustVendPaymStatus::Sent ||
                    _actualStatus == CustVendPaymStatus::Recieved)
                {
                    ok = false;
                }
                break;

            default:
                Map orderedPaymentStatus = LedgerJournalTransUpdateBank::paymentStatusOrder();

                if (!orderedPaymentStatus.exists(_actualStatus)
                    || !orderedPaymentStatus.exists(neededPaymStatus)
                    || orderedPaymentStatus.lookup(_actualStatus) < orderedPaymentStatus.lookup(neededPaymStatus))
                {
                    ok = false;
                }
                break;
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentStatusOrder</Name>
				<Source><![CDATA[
    public static Map paymentStatusOrder()
    {
        Map orderedPaymentStatus = new Map(Types::Enum, Types::Integer);

        orderedPaymentStatus.insert(CustVendPaymStatus::None, 1);
        orderedPaymentStatus.insert(CustVendPaymStatus::Sent, 2);
        orderedPaymentStatus.insert(CustVendPaymStatus::Confirmed, 3);
        orderedPaymentStatus.insert(CustVendPaymStatus::Rejected, 4);
        orderedPaymentStatus.insert(CustVendPaymStatus::Recieved, 5);
        orderedPaymentStatus.insert(CustVendPaymStatus::Delete, 6);
        orderedPaymentStatus.insert(CustVendPaymStatus::SentDelete, 7);
        orderedPaymentStatus.insert(CustVendPaymStatus::Deleted, 8);

        return orderedPaymentStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>