<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOA_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BOA_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BOA_EDI820 extends SKS_EFT_Format
{
    //---------------------------------------------------
    // BOA Outsourced check printing using EDI820
    //---------------------------------------------------
    #define.FormatVersion('20221212')
    #define.LineEnd('~')
    #define.Separator('*')
    #define.ACHCTX('ACH-CTX')
    #define.ACHCCD('ACH-CCD')
    #define.ACHCCP('ACH-CCP')
    #define.ACHPPD('ACH-PPD')
    #define.ACHPPP('ACH-PPP')
    #define.CWT('CWT')
    #define.FWT('FWT')
    #define.SWT('SWT')
    #define.BFXP('BFXP')
    #define.CCC('CCC')
    #define.PRO('PRO')
    #define.CHKPBCUS('CHK-PBC-US')
    #define.CHKPBCFM('CHK-PBC-FM')
    #define.CHKPBCCM('CHK-PBC-CM')
    #define.CHKPBCRD('CHK-PBC-RD')
    #define.CHKPBCOD('CHK-PBC-OD')
    #define.CHKPBCOS('CHK-PBC-OS')
    #define.CHKPBCOM('CHK-PBC-OM')
    #define.PAYMODEX('CDA')

    #define.EMAIL('E-MAIL')
    #define.USMAIL('US MAIL')
    #define.FOREIGNMAIL('FOREIGN MAIL')
    #define.ACHIAT('ACH-IAT')           //SKS#DevOps:16294
    #define.ACHCCDGBS('ACH-CCD-GB')

    int mTranSetCount;
    int mSegmentCount;
    str mIntControlNbr;
    str mGroupControlNbr;
    str mSenderControlNbr;
    AmountMST mPaymentAmount;
    str mCurrentTime;
    SKS_EFT_EDI mSKS_EFT_EDI;    
    SKS_EB_Vendor mSKS_EB_Vendor;
    SKS_LB_Depositor mSKS_LB_Depositor;
    LogisticsAddressCountryRegion mLogisticsAddressCountryRegion;
    str mBPR_03;
    str name;
    SKS_EFT_FileDetail prevSKS_EFT_FileDetail; //FDD-10590

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
        {
            mFileHub.runAppendLine(strUpr(_result));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;        
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // SKS_FDD_10590 -->
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            // SKS_FDD_10590 <--

            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {                   
                // Get SKS_EFT_Bank
                this.getSKS_EFT_Bank();

                // Get SKS_EB_Vendor
                this.getSKS_EB_Vendor();
    
                //Get Remittance Information
                this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            }
            else
            {    
                // Get SKS_LB_Depositor
                this.getSKS_LB_Depositor();
    
                // Get SKS_EFT_CustomerPaym
                this.getSKS_EFT_CustomerPaym();
    
                // Get CustBankAccount
                this.getCustBankAccount();
            }
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();                
    
            // Initialize EDI class
            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {
                mSKS_EFT_FileDetail_AddendaDetailConfig = SKS_EFT_FileDetail_AddendaDetailConfig::find(mSKS_EFT_FileDetail.RecId);
                mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_FileDetail_AddendaDetailConfig.EDI820Layout, mSKS_EFT_File.RecId);
            }
            else
            {
    
                mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, '', mSKS_EFT_File.RecId);
            }           
            //mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileDetail_Extra.NextFileId,0,0,0,0));//SKS_FDD_10590 
            mSKS_EFT_EDI.setEFTFileId(SKS_EFT_Format::getCodelookupvalue('NextFileId', mSKS_EFT_FileDetail.RecId));//SKS_FDD_10590
                
            if(firstRec)
            {
                firstRec = false;
    
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Detail lines
            this.rec_ST();
            this.rec_BPR();
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                Case #SWT:
                Case #CWT:
                Case #BFXP:
                Case #PRO:         //IWC: See if NTE is used for IWC.  Not in spec but in sample file
                    this.rec_NTEADD1();
                    this.rec_NTEADD2();
                    this.rec_NTEADD3();
                    this.rec_NTEADD4();
                    this.rec_NTEOTH1();
                    this.rec_NTEOTH2();
                    this.rec_NTEOTH3();
                    this.rec_NTEOTH4();
                    break;
            }
    
            this.rec_TRN();
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #SWT:
                    this.rec_N1IK();
                    this.rec_N3IK();
                    this.rec_N4IK();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CCC:
                    this.rec_REFPSM();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #PRO:
                Case #BFXP:
                case #ACHCCD:           //SKS_VSTS_13684
                case #ACHCCDGBS:
                case #FWT:              //SKS_VSTS_13684
                case #SWT:              //SKS_VSTS_13684
                case #ACHIAT:           //SKS#DevOps:16294
                    this.rec_CUR();
                    break;
            }
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHIAT:       //SKS#DevOps:16294
                    this.rec_REF91();
                    this.rec_N1OB();
                    this.rec_N2OB();
                    this.rec_N3OB();
                    this.rec_N4OB();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                Case #SWT:
                Case #CWT:
                Case #BFXP:
                    this.rec_REFCA();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #BFXP:
                    this.rec_REFDD();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CHKPBCUS:
                Case #CHKPBCFM:
                Case #CHKPBCCM:
                Case #CHKPBCRD:
                Case #CHKPBCOD:
                Case #CHKPBCOS:
                Case #CHKPBCOM:
                    this.rec_REFCK();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCD:
                Case #ACHCCP:
                Case #ACHCTX:
                Case #ACHPPD:
                Case #ACHPPP:
                    this.rec_REFTN();
                    break;
                Case #ACHCCDGBS:
                    this.rec_REFCA();
                    break;
            }           

            // Initialize EDI class
            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {
                // Get VendBankAccount
                this.getVendBankAccount();
            }

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCD:
                case #ACHCCDGBS:
                Case #ACHCCP:
                Case #ACHPPD:
                Case #ACHPPP:
                Case #ACHIAT:       //SKS#DevOps:16294
                Case #FWT:
                Case #SWT:
                Case #CWT:
                Case #BFXP:
                    this.rec_N1RB();
                    break;                
                Case #ACHCTX:           //SKS#VSTS:14269
                    if((mModule == SKS_EFT_Module::AP && 
                        mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACHCTX) ||
                        mModule == SKS_EFT_Module::AR)
                    {
                        this.rec_N1RB();
                    }
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #BFXP:
                Case #ACHIAT:       //SKS#DevOps:16294
                    this.rec_N2RB();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCD:
                case #ACHCCDGBS:
                Case #ACHCCP:
                Case #ACHPPD:
                Case #ACHPPP:
                Case #ACHIAT:       //SKS#DevOps:16294
                Case #FWT:
                Case #SWT:
                Case #CWT:
                Case #BFXP:
                    this.rec_N3RB();
                    break;
                Case #ACHCTX:           //SKS#VSTS:14269
                    if((mModule == SKS_EFT_Module::AP && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACHCTX) ||
                        mModule == SKS_EFT_Module::AR)
                    {
                        this.rec_N3RB();
                    }
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCD:
                case #ACHCCDGBS:
                Case #ACHCCP:
                Case #ACHPPD:
                Case #ACHPPP:
                Case #ACHIAT:       //SKS#DevOps:16294
                Case #FWT:
                Case #SWT:
                Case #CWT:
                Case #BFXP:
                    this.rec_N4RB();
                    break;
                Case #ACHCTX:           //SKS#VSTS:14269
                    if((mModule == SKS_EFT_Module::AP && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACHCTX) ||
                        mModule == SKS_EFT_Module::AR)
                    {
                        this.rec_N4RB();
                    }
                    break;
            }
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                    this.rec_N1IK();
                    this.rec_N3IK();
                    this.rec_N4IK();
                    break;
            }
    
            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {
                this.rec_N1PR();
                this.rec_N3PR();
                this.rec_N4PR();
    
                this.rec_N1PE(); //N2*PE is called from within this method
                this.rec_N3PE();
                this.rec_N4PE();
            }
            else
            {
                this.rec_N1PE();
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #PAYMODEX:
                    this.rec_REFVR();
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CHKPBCUS:
                Case #CHKPBCFM:
                Case #CHKPBCCM:
                Case #CHKPBCRD:
                Case #CHKPBCOD:
                Case #CHKPBCOS:
                Case #CHKPBCOM:
                    this.rec_PER();
                    break;
                Case #ACHCCP:
                Case #ACHCTX:
                Case #ACHPPP:
                Case #FWT:
                Case #SWT:
                Case #CWT:
                Case #BFXP:
                    if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
                    {
                        this.splitRemit();
                    }
                    break;
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCP:
                Case #ACHCTX:
                Case #ACHPPP:
                Case #CHKPBCUS:
                Case #CHKPBCFM:
                Case #CHKPBCCM:
                Case #CHKPBCRD:
                Case #CHKPBCOD:
                Case #CHKPBCOS:
                Case #CHKPBCOM:
                Case #FWT:
                Case #SWT:
                Case #CWT:
                Case #BFXP:
                Case #CCC:
                Case #PAYMODEX:
                    this.rec_ENT();
                    break;
            }
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    Case #BFXP:
                        this.rec_RMRZZ(invSKS_EFT_FileDetail);
                        break;
                }
    
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    Case #ACHCCP:
                    Case #ACHCTX:
                    Case #ACHPPP:
                    Case #FWT:
                    Case #SWT:
                    Case #CWT:
                    Case #BFXP:
                    Case #CCC:
                    Case #PAYMODEX:
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
                        this.rec_DTM(invSKS_EFT_FileDetail);
                        break;
                    Case #CHKPBCUS:
                    Case #CHKPBCFM:
                    Case #CHKPBCCM:
                    Case #CHKPBCRD:
                    Case #CHKPBCOD:
                    Case #CHKPBCOS:
                    Case #CHKPBCOM:
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
                        this.rec_REFPO(invSKS_EFT_FileDetail);
                        this.rec_DTM(invSKS_EFT_FileDetail);
                        break;
                }
            }
    
            this.rec_SE();
    
            mSegmentCount = 0;

            if(mSKS_EFT_FileDetail.PaymentCompany == curExt())
            {
                prevSKS_EFT_FileDetail.data(mSKS_EFT_FileDetail);  //FDD-10590
            }
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE();
        this.rec_IEA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustBankAccount</Name>
				<Source><![CDATA[
    void getCustBankAccount()
    {
        // Load or refresh global mCustBankAccount
    
        if(msks_EFT_FileDetail_BankAddress.AccountID != mSKS_EFT_FileDetail.DepBankAccountId || msks_EFT_FileDetail_BankAddress.VendCustAccount != mSKS_EFT_FileDetail.AccountNum) //FDD-10590
        {
            //FDD-10590 --->
            /*mCustBankAccount = CustBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);            */
            select firstonly msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::CustBankAddress;
            //FDD-10590 <---
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        //---------------------------------------
        // Load or refresh global mSKS_EB_Vendor
        //---------------------------------------
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_LB_Depositor</Name>
				<Source><![CDATA[
    void getSKS_LB_Depositor()
    {
        //---------------------------------------
        // Load or refresh global mSKS_LB_Depositor
        //---------------------------------------
        if(mSKS_LB_Depositor.AccountNum != mSKS_EFT_FileDetail.AccountNum || mSKS_LB_Depositor.CustomerCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_LB_Depositor = SKS_LB_Depositor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankAccount</Name>
				<Source><![CDATA[
    void getVendBankAccount()
    {
        // Load or refresh global mVendBankAccount
    
        mSKS_EFT_FileDetail_BenBank = SKS_EFT_FileDetail_BenBank::find(mSKS_EFT_FileDetail.RecId);      //SKS_VSTS_14014

        if(msks_EFT_FileDetail_BankAddress.AccountID != mSKS_EFT_FileDetail.DepBankAccountId || msks_EFT_FileDetail_BankAddress.VendCustAccount != mSKS_EFT_FileDetail.AccountNum) //FDD-10590
        {
            //FDD-10590 --->
            /*mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);*/

            select firstonly msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress;
            
            //<--- FDD-10590
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    boolean rec_BPR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //17    Business Function Code                              3       AN
        //18    Intermediary DFI ID Number Qualifier                2       ID
        //19    Intermediary DFI ID Number                          12      AN
        //20    Intermediary Account # Qualifier                    3       ID
        //21    Intermediary Bank Account number                    35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        //LogisticsAddressCountryRegionISOCode countryRegionISO;
        date effectivDate;
        boolean value = true;
        str beneAdvice, businessCode;
        ;
        mSegmentCount++;
    
        sb.Append('BPR');
        sb.Append(#Separator);
    
        //01    Trans. Handling Code
        if(mSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
        {
            sb.Append('P');
        }
        else
        {
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCD:
                Case #ACHCCDGBS:
                Case #ACHPPD:
                Case #PRO:
                    sb.Append('D');
                    break;
                Case #CCC:
                Case #PAYMODEX:
                Case #CHKPBCUS:
                Case #CHKPBCFM:
                Case #CHKPBCCM:
                Case #CHKPBCRD:
                Case #CHKPBCOD:
                Case #CHKPBCOS:
                Case #CHKPBCOM:
                    sb.Append('C');
                    break;
                Default:
                    beneAdvice = SKS_EFT_Format::getCodelookupvalue('CommunicationNumber', mSKS_EFT_FileDetail.RecId);

                    if(strUpr(beneAdvice) == #EMAIL ||
                       strUpr(beneAdvice) == #USMAIL ||
                       strUpr(beneAdvice) == #FOREIGNMAIL)
                    {
                        sb.Append('U');
                    }
                    else
                    {
                        sb.Append('C');
                    }
                    break;
            }
        }
        sb.Append(#Separator);
    
        //02    Monetary Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(num2str((amt),0,2,0,0));
        sb.Append(#Separator);
    
        //03    Credit/Debit Flag Code
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
        }
        else
        {
            mBPR_03 = 'C';
        }
        sb.Append(mBPR_03);
        sb.Append(#Separator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCDGBS:
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #ACHPPP:
            Case #PAYMODEX:
            Case #ACHIAT:           //SKS#DevOps:16294
                sb.Append('ACH');
                break;
            Case #CHKPBCUS:
            Case #CHKPBCFM:
            Case #CHKPBCCM:
            Case #CHKPBCRD:
            Case #CHKPBCOD:
            Case #CHKPBCOS:
            Case #CHKPBCOM:
                sb.Append('CHK');
                break;
            Case #CCC:
                sb.Append('CCC');
                break;
            Case #FWT:
                sb.Append('FWT');
                break;
            Case #SWT:
            Case #BFXP:
                sb.Append('SWT');
                break;
            Case #CWT:
                sb.Append('CWT');
                break;
            Case #PRO:
                sb.Append('PRO');
                break;
        }
        sb.Append(#Separator);
    
        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
                sb.Append('CCD');
                break;
            Case #ACHCCP:
                sb.Append('CCP');
                break;
            Case #ACHCTX:
                sb.Append('CTX');
                break;
            Case #ACHPPD:
                sb.Append('PPD');
                break;
            Case #ACHPPP:
                sb.Append('PPP');
                break;
            Case #ACHIAT:               //SKS#DevOps:16294
                sb.Append('IAT');
                break;
            Case #CHKPBCUS:
            Case #CHKPBCFM:
            Case #CHKPBCCM:
            Case #CHKPBCRD:
            Case #CHKPBCOD:
            Case #CHKPBCOS:
            Case #CHKPBCOM:
                sb.Append('PBC');
                break;
        }
        sb.Append(#Separator);
    
        //06    DFI ID No. Qualifier
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #PRO:
            Case #ACHCCDGBS:
                sb.Append('ZZ');
                break;
            Default:
                sb.Append('01');
                break;
        }
        sb.Append(#Separator);
    
        //07    DFI ID Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #PRO:
                sb.Append(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Name', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
                break;
            Case #CHKPBCUS:
            Case #CHKPBCFM:
            Case #CHKPBCCM:
            Case #CHKPBCRD:
            Case #CHKPBCOD:
            Case #CHKPBCOS:
            Case #CHKPBCOM:
                if(SKS_EFT_Format::getCodelookupvalue('CheckPrintingABA', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank) != '')
                {
                    sb.Append(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CheckPrintingABA', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
                }
                else
                {
                    sb.Append(mSKS_EFT_FileDetail.BankBankTransit);
                }
                break;
            Case #ACHCCD:
            Case #ACHCCDGBS:
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #ACHPPP:
            Case #ACHIAT:       //SKS#DevOps:16294
                if(mSKS_EFT_FileDetail.BankOrigDFI != '')
                {
                    sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail.BankOrigDFI));
                }
                else
                {
                    sb.Append(mSKS_EFT_FileDetail.BankBankTransit);
                }
                break;
            Default:
                sb.Append(mSKS_EFT_FileDetail.BankBankTransit);
                break;
        }
        sb.Append(#Separator);
    
        //08    Acct. No. Qual. Code
        sb.Append('DA');
        sb.Append(#Separator);
    
        //09    Account Number
        sb.Append(mSKS_EFT_FileDetail.BankBankAcct);
        sb.Append(#Separator);
    
        //10    Orig. Co. ID
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCDGBS:
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #ACHPPP:
            Case #ACHIAT:       //SKS#DevOps:16294
                sb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
                break;
        }
        sb.Append(#Separator);
    
        //11    Orig. Co. Code
        sb.Append(#Separator);
    
        //12    RDFI ID No. Qualifier
        //13    RDFI ID Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #CCC:
                sb.Append('01');
                sb.Append(#Separator);
                sb.Append('121000358');
                break;
            Case #PRO:
                sb.Append('ZZ');
                sb.Append(#Separator);
                sb.Append('');
                break;
            Case #BFXP:
                if(mSKS_EFT_FileDetail.DepSWIFTNo)
                {
                    sb.Append('02');
                    sb.Append(#Separator);
                    sb.Append(mSKS_EFT_FileDetail.DepSWIFTNo);
                }
                else
                {
                    sb.Append('ZZ');    
                    sb.Append(#Separator);
                    sb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                }
                break;
            Case #CWT:
                sb.Append('03');
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                break;
            Case #CHKPBCUS:
            Case #CHKPBCFM:
            Case #CHKPBCCM:
            Case #CHKPBCRD:
            Case #CHKPBCOD:
            Case #CHKPBCOS:
            Case #CHKPBCOM:
            Case #PAYMODEX:
                sb.Append(#Separator);
                break;
            case #ACHCTX:
            case #ACHCCD:
            case #ACHCCP:
            case #ACHPPD:
            case #ACHPPP:
            case #FWT:
            Case #ACHIAT:       //SKS#DevOps:16294
                sb.Append('01');
                sb.Append(#Separator);
                sb.Append(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 11));
                break;
            Case #SWT:
                sb.Append('02');
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.DepSWIFTNo);
                break;
            Case #ACHCCDGBS:
                sb.Append('ZZ');
                sb.Append(#Separator);
                sb.Append(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 11));
                break;
            Default:
                sb.Append('01');
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                break;
        }
        sb.Append(#Separator);
    
        //14    Acct. No. Qual Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCDGBS:
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #ACHPPP:
            Case #ACHIAT:       //SKS#DevOps:16294
            Case #FWT:
            Case #SWT:
            Case #CWT:
            Case #BFXP:
            Case #PRO:
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    sb.Append('SG');
                }
                else
                {
                    sb.Append('DA');
                }
                break;
            Case #CCC:
                sb.Append('DA');
                break;
        }
        sb.Append(#Separator);
    
        //15    Account Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCDGBS:
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #ACHPPP:
            Case #ACHIAT:       //SKS#DevOps:16294
            Case #FWT:
            Case #SWT:
            Case #CWT:
            Case #PRO:
                sb.Append(mSKS_EFT_FileDetail.DepBankAcct);
                break;
            Case #BFXP:
                //countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
                if(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId == 'DE' || mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId == 'GB')
                {
                    sb.Append(mSKS_EFT_FileDetail.DepBankIBAN);
                }
                else
                {
                    sb.Append(mSKS_EFT_FileDetail.DepBankAcct);
                }
                break;
            Case #CCC:
                sb.Append('1234567890');
                break;
        }
        sb.Append(#Separator);
    
        //16    Effective Entry Date
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            // For BFX the effective date needs to be offset by 1 for Canada and Mexico or 2 for all other countries
            // Have to skip weekends
            // Monday is represented by 1, Tuesday by 2, and Sunday by 7
            Case #BFXP:
                if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CAD' || mSKS_EFT_FileDetail.PaymentCurrencyCode == 'MXN')
                {
                    effectivDate = SKS_EFT_Processing::GetOffsetDate(1, mSKS_EFT_FileDetail.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
                }
                else
                {
                    effectivDate = SKS_EFT_Processing::GetOffsetDate(2, mSKS_EFT_FileDetail.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
                }
                break;
            default:
                effectivDate = mSKS_EFT_FileDetail.EffectiveDate;
                break;
        }

        if(effectivDate)//SKS_VSTS_13724
        {
            sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(effectivDate));
        }
        businessCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BusinessCode', mSKS_EFT_FileDetail.RecId));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHIAT && businessCode)
        {
            sb.Append(#Separator);
            sb.Append(businessCode);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CWT ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PRO ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT)
        {
            if(mSKS_EFT_FileDetail_Intermediary.IntBankId != '' || mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
            {
                sb.Append(#Separator);
    
                //17    Business Function Code
                sb.Append(#Separator);
    
                //18    Intermediary DFI ID Number Qualifier
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    Case #FWT:
                        sb.Append('01');
                        break;
                    Default:
                        sb.Append(SKS_EFT_Format::getCodelookupvalue('IntermediaryNumQualifier', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                sb.Append(#Separator);
    
                //19    Intermediary DFI ID Number
                if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
                {
                    sb.Append(mSKS_EFT_FileDetail_Intermediary.IntBankSwift);
                }
                else
                {
                    sb.Append(mSKS_EFT_FileDetail_Intermediary.IntBankId);
                }
                value = false;
            }
    
            if(mSKS_EFT_FileDetail_Intermediary.IntBankAcct != '')
            {
                sb.Append(#Separator);
    
                if(value)
                {
                    //17    Business Function Code
                    sb.Append(#Separator);
    
                    //18    Intermediary DFI ID Number Qualifier
                    sb.Append(#Separator);
    
                    //19    Intermediary DFI ID Number
                    sb.Append(#Separator);
                }
    
                //20    Intermediary Account # Qualifier
                sb.Append('DA');
                sb.Append(#Separator);
    
                //21    Intermediary Bank Account number
                sb.Append(subStr(mSKS_EFT_FileDetail_Intermediary.IntBankAcct, 1, 35));
            }
        }
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CUR</Name>
				<Source><![CDATA[
    boolean rec_CUR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Currency Code                                       3       ID      Payment currency
        //03    Exchange Rate                                       10      R
        //04    Entity ID Code                                      3       ID
        //05    Currency Code                                       3       ID      Payment currency
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('CUR');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #BFXP:
                sb.Append('PE');
                break;
            default:
                if(mBPR_03 == 'C')  //IWC: Sample has ZZ and spec does not.  review with BOA
                {
                    sb.Append('PE');
                }
                else
                {
                    sb.Append('PR');
                }
                break;
        }
        sb.Append(#Separator);
    
        //02    Currency Code
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #BFXP:
            case #ACHCCD:           //SKS_VSTS_13684
            case #SWT:              //SKS_VSTS_13684
            case #ACHIAT:           //SKS#DevOps:16294
                sb.Append(#Separator);
    
                //03    Exchange Rate
                sb.Append(#Separator);
    
                //04    Entity ID Code
                sb.Append('PR');
                sb.Append(#Separator);
    
                //05    Currency Code
                sb.Append(mSKS_EFT_FileDetail.CurrencyCode); //FDD-10590
                break;
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('DTM');
        sb.Append(#Separator);
    
        //01     Date/Time Qualifier
        sb.Append('003');
        sb.Append(#Separator);
    
        //03    Description
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
    
        sb.Append(#LineEnd);
    
        // Only write segment if an Invoice exists.  If no invoice, the Invoice date will be null.
        if(invSKS_EFT_FileDetail.InvoiceDate != dateNull())
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    boolean rec_ENT()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Assigned Number                                     6       N0
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('ENT');
        sb.Append(#Separator);
    
        //01    Assigned Number
        sb.Append('1');
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    boolean rec_GE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setTranSetCount(mTranSetCount);
        value = mSKS_EFT_EDI.buildGE(prevSKS_EFT_FileDetail); //FDD-10590
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    boolean rec_GS()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //-------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS(mSKS_EFT_FileDetail); //FDD-10590
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    boolean rec_IEA()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA(prevSKS_EFT_FileDetail); //FDD-10590
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA(mSKS_EFT_FileDetail); //FDD-10590
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1IK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
    //03    Identification Code Qualifier                       2       ID
    //04    Identification Code                                 80      AN      Vendor number
    boolean rec_N1IK()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01    Entity ID Code
        sb.Append('Z6');
        sb.Append(#Separator);
    
        //02    Name
        sb.Append(subStr(mSKS_EFT_FileDetail_Intermediary.IntBankName, 1, 60));
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankId != '' || mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
        {
            sb.Append(#Separator);
    
            if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
            {
                //03    Identification Code Qualifier
                sb.Append('SW');
                sb.Append(#Separator);
    
                //04    Identification Code
                sb.Append(mSKS_EFT_FileDetail_Intermediary.IntBankSwift);
            }
            else
            {
                //03    Identification Code Qualifier
                sb.Append('13');
                sb.Append(#Separator);
    
                //04    Identification Code
                sb.Append(mSKS_EFT_FileDetail_Intermediary.IntBankId);
            }
        }
    
        sb.Append(#LineEnd);
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankName != '' || mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' || mSKS_EFT_FileDetail_Intermediary.IntBankId != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    boolean rec_N1PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        str NameOverflow;
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            sb.Append('PE');
        }
        else
        {
            sb.Append('PR');
        }
        sb.Append(#Separator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            Name = mRemittanceName;
        }
        else
        {
            Name = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #CHKPBCUS:
            Case #CHKPBCFM:
            Case #CHKPBCCM:
            Case #CHKPBCRD:
            Case #CHKPBCOD:
            Case #CHKPBCOS:
            Case #CHKPBCOM:
                // If length changes, also have to change length in SKS_EFT_Processing.Update_PaymentReference
                sb.Append(substr(Name,1,35));
                NameOverflow = subStr(Name,36,35); // Get the next 35 characters of vend name.  Only used for checks
                break;
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPP:
            Case #FWT:
            Case #SWT:
            Case #CWT:
            Case #BFXP:
                switch(SKS_EFT_Format::getCodelookupvalue('CommunicationNumber', mSKS_EFT_FileDetail.RecId))
                {
                    case #USMAIL:
                    case #FOREIGNMAIL:
                        sb.Append(substr(Name,1,35));
                        break;
                    default:
                        sb.Append(substr(Name,1,60));
                        break;
                }
                break;
            Default:
                sb.Append(substr(Name,1,60));
                break;
        }
    
        //03    Identification Code Qualifier
        //04    Identification Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #CHKPBCUS:
            Case #CHKPBCFM:
            Case #CHKPBCCM:
            Case #CHKPBCRD:
            Case #CHKPBCOD:
            Case #CHKPBCOS:
            Case #CHKPBCOM:
            Case #CCC:
                sb.Append(#Separator);
                sb.Append('93');
                sb.Append(#Separator);
                sb.Append(substr(mSKS_EFT_FileDetail.AccountNum,1,80));
                break;
            Case #PAYMODEX:
                sb.Append(#Separator);
                sb.Append('ZZ');
                sb.Append(#Separator);
                sb.Append(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PaymodeXId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,80));
                break;
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        if(NameOverflow != '')
        {
            this.rec_N2PE(NameOverflow);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    boolean rec_N1PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int length;
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('PR');
        sb.Append(#Separator);
    
        //02     Name
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCDGBS:
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #ACHPPP:
                length = 22;
                break;
            Default:
                length = 35;
                break;
        }
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),1,length));
    
        //03    Identification Code Qualifier
        //04    Identification Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #PAYMODEX:
                sb.Append(#Separator);
                sb.Append('ZZ');
                sb.Append(#Separator);
                sb.Append(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PaymodexId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,80));
                break;
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1RB</Name>
				<Source><![CDATA[
    boolean rec_N1RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Receiving Bank Name
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
            
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('RB');
        sb.Append(#Separator);
    
        //02     Name
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            name = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName);
        }
        else
        {
            name = this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.Name); //FDd-10590
        }
    
        sb.Append(substr(name,1,60));
        sb.Append(#LineEnd);
    
        if(name != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2PE</Name>
				<Source><![CDATA[
    boolean rec_N2PE(str _NameOverflow)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Name 2                                              60      AN      Additional name
        //02    Name                                                60      AN      Not used
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('N2');
        sb.Append(#Separator);
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            sb.Append('PE');
        }
        else
        {
            sb.Append('PR');
        }
    
        sb.Append(#Separator);
    
        //01    Name 2
        sb.Append(_NameOverflow);
    
        sb.Append(#LineEnd);
    
        mSegmentCount++;
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2RB</Name>
				<Source><![CDATA[
    boolean rec_N2RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Name                                                60      AN      Receiving Bank Branch Number
        //02    Name                                                60      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        if(mSKS_EFT_FileDetail_BenBank.BenBankName)
        {
            sb.Append('N2');
            sb.Append(#Separator);
    
            //01    Name
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch),1,60));
    
            sb.Append(#LineEnd);
    
            if(mSKS_EFT_FileDetail_BenBank.BenBankBranch != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3IK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Name 2                                              60      AN      Additional name
    //02    Name                                                60      AN      Not used
    boolean rec_N3IK()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('N3');
        sb.Append(#Separator);
    
        //01    Name
        sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch), 1, 60));
    
        sb.Append(#LineEnd);
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankBranch != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    boolean rec_N3PE()
    {
        //---------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
        //---------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int length;
    
        if(Name)
        {
            sb.Append('N3');
            sb.Append(#Separator);
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CHKPBCUS:
                Case #CHKPBCFM:
                Case #CHKPBCCM:
                Case #CHKPBCRD:
                Case #CHKPBCOD:
                Case #CHKPBCOS:
                Case #CHKPBCOM:
                    length = 35;
                    break;
                Default:
                    length = 55;
                    break;
            }
    
            //01    Address Information
            sb.Append(substr(mRemittanceAdrLine1,1,length));
    
            //02    Address Information
            if(mRemittanceAdrLine2 != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(mRemittanceAdrLine2,1,length));
            }
    
            sb.Append(#LineEnd);
    
            if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PR</Name>
				<Source><![CDATA[
    boolean rec_N3PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payor Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payor Address (Line 2) Domestic and Foreign
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int length;
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append('N3');
            sb.Append(#Separator);
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CHKPBCUS:
                Case #CHKPBCFM:
                Case #CHKPBCCM:
                Case #CHKPBCRD:
                Case #CHKPBCOD:
                Case #CHKPBCOS:
                Case #CHKPBCOM:
                    length = 35;
                    break;
                Default:
                    length = 55;
                    break;
            }
    
            //01    Address Information
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr),1,length));
    
            //02    Address Information
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2),1,length));
            }
    
            sb.Append(#LineEnd);
    
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3RB</Name>
				<Source><![CDATA[
    boolean rec_N3RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address information                                 55      AN      Address - Receiving Bank
        //02    Address information                                 55      AN      Identification code/ Correspondent DFI Identification
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if(mSKS_EFT_FileDetail_BenBank.BenBankName)
        {
            sb.Append('N3');
            sb.Append(#Separator);
    
            //01    Address information
            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {
                sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr),1,55));
            }
            else
            {
                sb.Append(subStr(strReplace(this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.Addr), '\n', ' '),1,55));
            }
    
    
            //02    Address information
            if(mSKS_EFT_FileDetail_BenBank.BenBankAcct != '' && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BFXP)
            {
                sb.Append(#Separator);
                sb.Append(subStr(mSKS_EFT_FileDetail_BenBank.BenBankAcct,1,80));
            }
    
            sb.Append(#LineEnd);
    
            if(mSKS_EFT_FileDetail_BenBank.BenBankAddr != '' ||
                (mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR && msks_EFT_FileDetail_BankAddress.Addr != '') ||
                (mSKS_EFT_FileDetail_BenBank.BenBankAcct != '' && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BFXP))
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4IK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Address                                        19      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         9       ID
    //04    Country Code                                        3       ID
    boolean rec_N4IK()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //LogisticsAddressCountryRegionISOCode countryRegionISO;
        ;
        sb.Append('N4');
        sb.Append(#Separator);
    
        //01    City Address
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankCity), 1, 19));
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId != '')
        {
            sb.Append(#Separator);
            sb.Append(#Separator);
            sb.Append(#Separator);
    
            //04    Country Code
            //countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId);
            sb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId));
        }
    
        sb.Append(#LineEnd);
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankCity != '' || mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    boolean rec_N4PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //05    Location Qualifier                                  2       ID
        //06    Location Identifier                                 30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        if(Name)
        {
            sb.Append('N4');
            sb.Append(#Separator);
    
            //01    City Address
            sb.Append(substr(mRemittanceCity, 1, 23));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(mRemittanceState, 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(mRemittanceZipCode,1,10));
            sb.Append(#Separator);
    
            //04    Country Code
            sb.Append(mRemittanceCountryRegionId);
    
            //05    Location Qualifier
            //06    Location Identifier
    
            sb.Append(#LineEnd);
    
            if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    boolean rec_N4PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //LogisticsAddressCountryRegionISOCode countryRegionISO;
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append('N4');
            sb.Append(#Separator);
    
            //01    City Address
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 1, 19));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode,1,10));
            sb.Append(#Separator);
    
            //04    Country Code
            //countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);
            sb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
    
            sb.Append(#LineEnd);
    
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4RB</Name>
				<Source><![CDATA[
    boolean rec_N4RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Name                                           30      AN
        //02    State or Province Code                              2       ID      Not used
        //03    Postal Code                                         9       ID      Not used
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        LogisticsAddressCountryRegionISOCode countryRegionISO;
        
        if(mSKS_EFT_FileDetail_BenBank.BenBankName)
        {
            sb.Append('N4');
            sb.Append(#Separator);
    
            //01    City Name
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), 1, 30));
    
            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {
                //FDD-10590 --->
                countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId); //<--- FDD-10590
            }
            else
            {
                //FDD-10590
                countryRegionISO = this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId); //<--- FDD-10590
            }
    
            if(msks_EFT_FileDetail_BankAddress.State != '')
            {
                //02    State or Province Code
                sb.Append(#Separator);
                sb.Append(this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.State));
            }
            else if(msks_EFT_FileDetail_BankAddress.ZipCode != '' || countryRegionISO != '')
            {
                //02    State or Province Code
                sb.Append(#Separator);
            }
    
            if(msks_EFT_FileDetail_BankAddress.ZipCode != '' || countryRegionISO != '')
            {
                sb.Append(#Separator);
    
                if(msks_EFT_FileDetail_BankAddress.ZipCode != '')
                {
                    //03    Postal Code
                    sb.Append(this.CharacterReplacement(msks_EFT_FileDetail_BankAddress.ZipCode));
                }
    
                if(countryRegionISO != '')
                {
                    sb.Append(#Separator);
    
                    //04    Country Code
                    sb.Append(countryRegionISO);
                }
            }
    
            sb.Append(#LineEnd);
    
            if(mSKS_EFT_FileDetail_BenBank.BenBankCity != '' ||
               msks_EFT_FileDetail_BankAddress.City != '' ||
               msks_EFT_FileDetail_BankAddress.State != '' ||
               msks_EFT_FileDetail_BankAddress.ZipCode != '' ||
               countryRegionISO != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEADD1</Name>
				<Source><![CDATA[
    boolean rec_NTEADD1()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Originator to Beneficiary
        if(msKS_EFT_FileDetail_Instructions.PmtInstText1 != '')
        {
            mSegmentCount++;
    
            sb.Append('NTE');
            sb.Append(#Separator);
    
            //01     Note Reference
            sb.Append('ADD');
            sb.Append(#Separator);
    
            //02     Description
            sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText1),1,35));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEADD2</Name>
				<Source><![CDATA[
    boolean rec_NTEADD2()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Originator to Beneficiary
        if(msKS_EFT_FileDetail_Instructions.PmtInstText2 != '')
        {
            mSegmentCount++;
    
            sb.Append('NTE');
            sb.Append(#Separator);
    
            //01     Note Reference
            sb.Append('ADD');
            sb.Append(#Separator);
    
            //02     Description
            sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText2),1,35));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEADD3</Name>
				<Source><![CDATA[
    boolean rec_NTEADD3()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Originator to Beneficiary
        if(msKS_EFT_FileDetail_Instructions.PmtInstText3 != '')
        {
            mSegmentCount++;
    
            sb.Append('NTE');
            sb.Append(#Separator);
    
            //01     Note Reference
            sb.Append('ADD');
            sb.Append(#Separator);
    
            //02     Description
            sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText3),1,35));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEADD4</Name>
				<Source><![CDATA[
    boolean rec_NTEADD4()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Originator to Beneficiary
        if(msKS_EFT_FileDetail_Instructions.PmtInstText4 != '')
        {
            mSegmentCount++;
    
            sb.Append('NTE');
            sb.Append(#Separator);
    
            //01     Note Reference
            sb.Append('ADD');
            sb.Append(#Separator);
    
            //02     Description
            sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.PmtInstText4),1,35));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEOTH1</Name>
				<Source><![CDATA[
    boolean rec_NTEOTH1()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Beneficiary Bank Information
        if(msKS_EFT_FileDetail_Instructions.BankInst1 != '')
        {
            mSegmentCount++;
    
            sb.Append('NTE');
            sb.Append(#Separator);
    
            //01     Note Reference
            sb.Append('OTH');
            sb.Append(#Separator);
    
            //02     Description
            sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.BankInst1),1,35));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEOTH2</Name>
				<Source><![CDATA[
    boolean rec_NTEOTH2()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Beneficiary Bank Information
        if(msKS_EFT_FileDetail_Instructions.BankInst2 != '')
        {
            mSegmentCount++;
    
            sb.Append('NTE');
            sb.Append(#Separator);
    
            //01     Note Reference
            sb.Append('OTH');
            sb.Append(#Separator);
    
            //02     Description
            sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.BankInst2),1,35));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEOTH3</Name>
				<Source><![CDATA[
    boolean rec_NTEOTH3()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Beneficiary Bank Information
        if(msKS_EFT_FileDetail_Instructions.BankInst3 != '')
        {
            mSegmentCount++;
    
            sb.Append('NTE');
            sb.Append(#Separator);
    
            //01     Note Reference
            sb.Append('OTH');
            sb.Append(#Separator);
    
            //02     Description
            sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.BankInst3),1,35));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEOTH4</Name>
				<Source><![CDATA[
    boolean rec_NTEOTH4()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Beneficiary Bank Information
        if(msKS_EFT_FileDetail_Instructions.BankInst4 != '')
        {
            mSegmentCount++;
    
            sb.Append('NTE');
            sb.Append(#Separator);
    
            //01     Note Reference
            sb.Append('OTH');
            sb.Append(#Separator);
    
            //02     Description
            sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.BankInst4),1,35));
    
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PER</Name>
				<Source><![CDATA[
    boolean rec_PER(str _eMailName = '', str _eMailAddr = '')
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Contact Function Code                               2       ID
        //02    Name                                                60      AN      Not used
        //03    Communication Number Qualifier                      2       ID
        //04    Communication Number                                80      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str beneAdvice;
        mSegmentCount++;
    
        beneAdvice = SKS_EFT_Format::getCodelookupvalue('CommunicationNumber', mSKS_EFT_FileDetail.RecId);

        sb.Append('PER');
        sb.Append(#Separator);
    
        //01    Contact Function Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPP:
            Case #FWT:
            Case #SWT:
            Case #CWT:
            Case #BFXP:
                sb.Append('DC');
                break;
            default:
                sb.Append('AR');
                break;
        }
        sb.Append(#Separator);
    
        //02    Name
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPP:
            Case #FWT:
            Case #SWT:
            Case #CWT:
            Case #BFXP:
                switch(beneAdvice)
                {
                    case #EMAIL:
                        sb.Append(subStr(this.CharacterReplacement(_eMailName),1,60));
                        break;
                    case #USMAIL:
                    case #FOREIGNMAIL:
                        sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName),1,60));
                        break;
                }
                break;
        }
        sb.Append(#Separator);
    
        //03    Communication Number Qualifier
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPP:
            Case #FWT:
            Case #SWT:
            Case #CWT:
            Case #BFXP:
                switch(beneAdvice)
                {
                    case #EMAIL:
                        sb.Append('EM');
                        break;
                    default:
                        sb.Append('TM');
                        break;
                }
                break;
            default:
                sb.Append('TM');
                break;
        }
        sb.Append(#Separator);
    
        //04    Communication Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #CHKPBCUS:
                sb.Append('US');
                break;
            Case #CHKPBCFM:
                sb.Append('FM');
                break;
            Case #CHKPBCCM:
                sb.Append('CM');
                break;
            Case #CHKPBCRD:
                sb.Append('RD');
                break;
            Case #CHKPBCOD:
                sb.Append('OD');
                break;
            Case #CHKPBCOS:
                sb.Append('OS');
                break;
            Case #CHKPBCOM:
                sb.Append('OM');
                break;
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPP:
            Case #FWT:
            Case #SWT:
            Case #CWT:
            Case #BFXP:
                switch(beneAdvice)
                {
                    case #EMAIL:
                        sb.Append(_eMailAddr);
                        break;
                    case #USMAIL:
                        sb.Append('US');
                        break;
                    case #FOREIGNMAIL:
                        sb.Append('FM');
                        break;
                }
                break;
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REF91</Name>
				<Source><![CDATA[
    boolean rec_REF91()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN      Check Number
        //03    Description                                         80      AN      Not Used
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
        str value;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('91');
        sb.Append(#Separator);
    
        //02     Reference Identification
        sb.Append('IAT');
        sb.Append(#Separator);
    
        //03    Description
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('REF91Description', mSKS_EFT_FileDetail.RecId));
        
        sb.Append(#Separator);
        sb.Append(value);

        sb.Append(#LineEnd);
    
        if(value)
        {
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1OB</Name>
				<Source><![CDATA[
    boolean rec_N1OB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity Identifier Code                              03       ID
        //02    Name                                                60       AN      
        //03    Identification Code Qualifier                       03       ID      
        //04    Identification Code Qualifier                       80       AN    
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
        str value;
        
        

        sb.Append('N1');
        sb.Append(#Separator);

        //01    Entity Identifier Code                              03  
        sb.Append('01');
        sb.Append(#Separator);

        //02    Name                                                60    
        sb.Append(this.CharacterReplacement(subStr(msks_EFT_FileDetail_BankAddress.Name, 1, 60)));

        //03    Identification Code Qualifier                       03     
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('OBIdentification', mSKS_EFT_FileDetail.RecId));
        if(value)
        {
            sb.Append(#Separator);
            sb.Append(value);

            //04    Identification Code Qualifier                       80     
            if(value == '13' && mSKS_EFT_FileDetail.BankBankTransit)
            {                
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.BankBankTransit);
            }
            else if(value == 'SW' && mSKS_EFT_FileDetail.BankBankSwiftNo)
            {
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.BankBankSwiftNo);
            }
            else if(value == '31' && mSKS_EFT_FileDetail.BankBankIBAN)
            {
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.BankBankIBAN);
            }
        }        
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2OB</Name>
				<Source><![CDATA[
    boolean rec_N2OB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment        
        //01    Name                                                60       AN
        //02    Name                                                60       AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
        str value;
        
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Name', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        sb.Append('N2');
        sb.Append(#Separator);

        //01    Name                                                60       AN
        sb.Append(subStr(value, 1, 60));

        sb.Append(#LineEnd);
        
        if(value)
        {
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3OB</Name>
				<Source><![CDATA[
    boolean rec_N3OB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 55       AN
        //02    Address Information                                 55       AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
        
        sb.Append('N3');
        sb.Append(#Separator);

        //01    Address Information                                 55  
        sb.Append(this.CharacterReplacement(subStr(msks_EFT_FileDetail_BankAddress.Addr, 1, 55)));        
            
        //02    Address Information
        if(msks_EFT_FileDetail_BankAddress.Addr2)
        {
            sb.Append(#Separator);
            sb.Append(this.CharacterReplacement(subStr(msks_EFT_FileDetail_BankAddress.Addr2, 1, 55))); 
        }
        
        sb.Append(#LineEnd);
        
        if(msks_EFT_FileDetail_BankAddress.Addr || msks_EFT_FileDetail_BankAddress.Addr2)
        {
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4OB</Name>
				<Source><![CDATA[
    boolean rec_N4OB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Name                                           30       AN
        //02    State or Province Code                              02       ID
        //03    Postal Code                                         15       ID
        //04    Country Code                                        02       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;        

        sb.Append('N4');
        sb.Append(#Separator);

        //01    City Name                                           30       AN
        sb.Append(this.CharacterReplacement(subStr(msks_EFT_FileDetail_BankAddress.City, 1, 30)));

        //02    State or Province Code                              02       ID
        if(msks_EFT_FileDetail_BankAddress.State)
        {
            sb.Append(#Separator);
            sb.Append(this.CharacterReplacement(subStr(msks_EFT_FileDetail_BankAddress.State, 1, 30)));
        }
        //03    Postal Code                                         15       ID
        if(msks_EFT_FileDetail_BankAddress.ZipCode)
        {
            sb.Append(#Separator);
            sb.Append(subStr(msks_EFT_FileDetail_BankAddress.ZipCode, 1, 15));
        }

        //04    Country Code                                        02       ID
        if(msks_EFT_FileDetail_BankAddress.CountryRegionId)
        {
            sb.Append(#Separator);
            sb.Append(this.getLogisticsAddressCountryISO(msks_EFT_FileDetail_BankAddress.CountryRegionId));
        }
                
        sb.Append(#LineEnd);
        
        if(msks_EFT_FileDetail_BankAddress.City     || msks_EFT_FileDetail_BankAddress.State ||
           msks_EFT_FileDetail_BankAddress.ZipCode  || msks_EFT_FileDetail_BankAddress.CountryRegionId)
        {
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFCA</Name>
				<Source><![CDATA[
    boolean rec_REFCA()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identificaiton Qualifier                  3       ID
        //02    Reference Identificaiton                            30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str chargeIndic;

        chargeIndic = SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId);
    
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference Identificaiton Qualifier
        sb.Append('CA');
        sb.Append(#Separator);
           
        if(chargeIndic)
        {
            sb.Append(chargeIndic);
        }
        else
        {
            sb.Append('00');
        }
           
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFCK</Name>
				<Source><![CDATA[
    boolean rec_REFCK()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    30      AN      Check Number
        //03    Description                                         80      AN      Not Used
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('CK');
        sb.Append(#Separator);
    
        //02     Check Number
        sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),10));
    
        //03    Description
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFCUSTOM</Name>
				<Source><![CDATA[
    boolean rec_REFCUSTOM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    4       AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append(''); //IWC: Need custom fields.  Need to see if for bank or vendor
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append('');
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFDD</Name>
				<Source><![CDATA[
    boolean rec_REFDD()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference Identification Qualifier
        sb.Append('DD');
        sb.Append(#Separator);
    
        //02    Reference Identification
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #BFXP:
                sb.Append('FXP');
                break;
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFPO</Name>
				<Source><![CDATA[
    boolean rec_REFPO(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //03    Reference Description                               45      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str PONum = '';
        PONum = this.CharacterReplacement(invSKS_EFT_FileDetail.PurchId);
    
        if(PONum || invSKS_EFT_FileDetail.InvoiceTransactionTxt != '')
        {
            mSegmentCount++;
    
            sb.Append('REF');
            sb.Append(#Separator);
    
            //01     Reference Identification Qualifier
            sb.Append('PO');
            sb.Append(#Separator);
    
            //02    Reference Identification
            sb.Append(substr(PONum,1,30));
    
            if(invSKS_EFT_FileDetail.InvoiceTransactionTxt != '')
            {
                sb.Append(#Separator);
    
                //03    Reference Description
                sb.Append(substr(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt),1,45));
            }
            sb.Append(#LineEnd);
    
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFPSM</Name>
				<Source><![CDATA[
    boolean rec_REFPSM()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Identification                            30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('PSM');
        sb.Append(#Separator);
    
        //02     Reference Identification
        sb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,30));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFTN</Name>
				<Source><![CDATA[
    boolean rec_REFTN()
    {
        //---------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Identification                            30      AN      Check Number (Not used for ACH)
        //03    Description                                         80      AN      CORP PMT
        //---------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('TN');
        sb.Append(#Separator);
    
        //02     Check Number
        sb.Append(#Separator);
    
        //03    Description
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCDGBS:
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #ACHPPP:
                sb.Append('CORP PMT');
                break;
        }
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFVR</Name>
				<Source><![CDATA[
    boolean rec_REFVR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference Identification Qualifier
        sb.Append('VR');
        sb.Append(#Separator);
    
        //02    Reference Identification
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #PAYMODEX:
                sb.Append(substr(mSKS_EFT_FileDetail.AccountNum,1,30));
                break;
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    9       AN
        //03    Payment Action Code                                 2       ID
        //04    Amount paid                                         18      R
        //05    Original Amount                                     18      R
        //06    Discount Amount                                     18      R
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        mSegmentCount++;
    
        sb.Append('RMR');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            sb.Append('IV'); // Only write IV if an invoice number exists
        }
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,30));
        sb.Append(#Separator);
    
        //03    Payment Action Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #PAYMODEX:
                sb.Append('PO');
                break;
        }
        sb.Append(#Separator);
    
        //04    Amount paid
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            amt = amt * -1;
        }
    
        sb.Append(num2str(amt,0,2,0,0));
        sb.Append(#Separator);
    
        //05    Original Amount
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            amt = amt * -1;
        }
    
        sb.Append(num2str(amt,0,2,0,0));
        sb.Append(#Separator);
    
        //06    Discount Amount
        amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            amt = amt * -1;
        }
    
        sb.Append(num2str(amt,0,2,0,0));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRZZ</Name>
				<Source><![CDATA[
    boolean rec_RMRZZ(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference Identification Qualifier                  3       ID
        //02    Reference Identification                            30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb;
        System.Text.StringBuilder regInfo = new System.Text.StringBuilder();
        LogisticsAddressCountryRegionISOCode countryRegionISO;
        int length;
        int pos = 1;
        str regInfoStr;
        str value;
        str phoneStr;
        countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
    
        // First determine if this country requires regulatory information
        // If not required, exit
        switch(countryRegionISO)
        {
            case 'MY': // Malaysia
            case 'KR': // Korea
            case 'CN': // China
            case 'CA': // Canada
            case 'TH': // Thailand
            case 'TW': // Taiwan
            case 'GB': // United Kingdom
                break;
            default:
                return false; // If not one of the countries above, this segment isn't included
        }
    
        // Purpose
        switch(countryRegionISO)
        {
            case 'MY': // Malaysia
            case 'KR': // Korea
            case 'CN': // China
            case 'CA': // Canada
            case 'TH': // Thailand
            case 'TW': // Taiwan
            case 'GB': // United Kingdom
                if(invSKS_EFT_FileDetail.VendTransRecId) // If no invoice, can't get reason comment
                {
                    regInfo.Append('/POP:');
                    regInfo.Append(subStr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.BankInst5),1,30));
                }
                break;
        }
    
        // Phone
        switch(countryRegionISO)
        {
            case 'KR': // Korea
            case 'CN': // China
                regInfo.Append('/PHON:');
    
                // If extension exists, add a space and x then the extension
                // E.g. 888-555-1245 x123
                if(msks_EFT_FileDetail_BankAddress.PhoneLocal) //FDD-10590
                {
                    phoneStr = msks_EFT_FileDetail_BankAddress.Phone + ' x' + msks_EFT_FileDetail_BankAddress.PhoneLocal; //FDD-10590
                }
                else
                {
                    phoneStr = msks_EFT_FileDetail_BankAddress.Phone; //FDD-10590
                }
                regInfo.Append(subStr(phoneStr,1,30));
                break;
        }
    
        // China Individual/Corporate flag.
        // Alway set to N for Corporate
        switch(countryRegionISO)
        {
            case 'CN': // China
                regInfo.Append('/IND:N');
                break;
        }
    
        // If regulartory info was built, terminate with //
        regInfoStr = regInfo.ToString();
        if(regInfoStr != '')
        {
            regInfo.Append('//');
        }
    
        regInfoStr = regInfo.ToString();
        length = strLen(regInfoStr);
    
        // Break into 30 character segments.
        // May result in multiple RMR*ZZ segments
        while (length >= pos)
        {
            sb = new System.Text.StringBuilder();
            value = subStr(regInfoStr, pos, 30);
            pos = pos + 30;
    
            sb.Append('RMR');
            sb.Append(#Separator);
    
            //01     Reference Identification Qualifier
            sb.Append('ZZ');
            sb.Append(#Separator);
    
            //02    Reference Identification
            sb.Append(value);
    
            sb.Append(#LineEnd);
    
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    boolean rec_SE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('SE');
        sb.Append(#Separator);
    
        //1     Number of Included Segments
        sb.Append(num2str(mSegmentCount,0,0,0,0));
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        sb.Append(mSenderControlNbr);
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    boolean rec_ST()
    {
        //------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
        mTranSetCount++;
    
        sb.Append('ST');
        sb.Append(#Separator);
    
        //1     Transaction Set ID Code
        sb.Append('820');
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        if(strLen(mSKS_EFT_FileDetail.PaymentReference) < 4)
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),9);
        }
        sb.Append(mSenderControlNbr);
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    boolean rec_TRN()
    {
        //-----------------------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Identification                            30      AN      Payment Trace No
        //03    Orig. Co. ID                                        10      AN      Not used
        //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
        //-----------------------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
    
        sb.Append('TRN');
        sb.Append(#Separator);
    
        //01     Trace Type Code
        sb.Append('1');
        sb.Append(#Separator);
    
        //02     Reference Identification
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCDGBS:
            Case #ACHCCP:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #ACHPPP:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),15));
                break;
            Case #FWT:
            Case #SWT:
            Case #CWT:
            Case #BFXP:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),16));
                break;
            Case #CHKPBCUS:
            Case #CHKPBCFM:
            Case #CHKPBCCM:
            Case #CHKPBCRD:
            Case #CHKPBCOD:
            Case #CHKPBCOS:
            Case #CHKPBCOM:
                sb.Append(SKS_PP_StringFormats::strRight(int642str(mSKS_EFT_FileDetail.RecId),10));
                break;
            Default:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),30));
                break;
        }
    
        //03    Orig. Co. ID
        //04    Reference Number
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitRemit</Name>
				<Source><![CDATA[
    private void splitRemit()
    {        
        str beneAdvice;

        beneAdvice = SKS_EFT_Format::getCodelookupvalue('CommunicationNumber', mSKS_EFT_FileDetail.RecId);
    
        if(strUpr(beneAdvice) == #USMAIL ||
            strUpr(beneAdvice) == #FOREIGNMAIL)
        {
            this.rec_PER();
        }
        else if(strUpr(beneAdvice) == #EMAIL)
        {
            if(mSKS_EB_Vendor.EM1Vendor)
            {
                //FDD-10590 --->                
                mSKS_EFT_FileDetail_VendAddress = SKS_EFT_FileDetail_VendAddress::find(mSKS_EFT_FileDetail.RecId);
                //<--- FDD-10590
                if(mSKS_EFT_FileDetail_VendAddress.Locator)
                {
                    this.rec_PER(mSKS_EFT_FileDetail_VendAddress.LocationName, mSKS_EFT_FileDetail_VendAddress.Locator); //FDD-10590
                }
            }
            if(mSKS_EB_Vendor.EM2Addr)
            {
                this.rec_PER(mSKS_EB_Vendor.EM2Name, mSKS_EB_Vendor.EM2Addr);
            }
            if(mSKS_EB_Vendor.EM3Addr)
            {
                this.rec_PER(mSKS_EB_Vendor.EM3Name, mSKS_EB_Vendor.EM3Addr);
            }
            if(mSKS_EB_Vendor.EM4Addr)
            {
                this.rec_PER(mSKS_EB_Vendor.EM4Name, mSKS_EB_Vendor.EM4Addr);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions            
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        //Populate Remittance Information from Vendor eBanking details
        mRemittanceName = mSKS_EFT_FileDetail_VendAddress.BeneName;
        mRemittanceAdrLine1 = mSKS_EFT_FileDetail_VendAddress.BeneAddr;
        mRemittanceAdrLine2 = mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
        mRemittanceCity = mSKS_EFT_FileDetail_VendAddress.BeneCity;
        mRemittanceState = mSKS_EFT_FileDetail_VendAddress.BeneState;
        mRemittanceZipCode = mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>