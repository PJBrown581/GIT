<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_US_BOW_ACH_RES_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_US_BOW_ACH_RES_XML extends SKS_EFT_RF_Format
{
    boolean rqUID = true;
    boolean statusDesc = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.Xml.XmlDocument locXmlDocument;
        System.Xml.XmlNode locXMLNode;
        str locTempTagName;
        locXmlDocument = new System.Xml.XmlDocument();
        locSKS_EB_FileHub.runFileLoad(_filename);
        locXmlDocument.LoadXML(locSKS_EB_FileHub.fileBody());
    
        if(locXmlDocument.get_HasChildNodes())
        {
            locXMLNode = locXmlDocument.get_FirstChild(); //<?XML ... node.
            locXMLNode = locXMLNode.get_NextSibling();
            locTempTagName = locXMLNode.get_Name();
            if(strUpr(locTempTagName) == 'ns0:IFXStack')
            {
                this.processNode(locXMLNode);
            }
            //cleanup an pending nodes
            if(mSKS_EFT_RF_Transaction != null)
                mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            if(mSKS_EFT_RF_SentFile != null)
                mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
        }
    
        return mSKS_EFT_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        str rtnval = '';
        int classId;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean locXmlTagFound  = false;
        boolean locIFXHeader    = false;
        boolean locIRqUID       = false;
    
        //BEGIN DISQUALIFIER VARIABLES
        //none
    
        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return '';
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
    
        //priming read
        locString = locStreamReader.ReadLine();        
        while(locString != null)
        {
            locString = locString.Trim();            
            if(!System.String::IsNullOrWhiteSpace(locString))
            {
                if(!locXMLTagFound)
                {
                    if(locString.StartsWith('<?xml'))
                        locXmlTagFound = true;
                    else
                    {
                        //NOT AN XML DOCUMENT
                        break;
                    }
                }
                if(locString.Contains('ns0:IFXHeader'))
                {
                    locIFXHeader = true;
                }
                if(locString.Contains('ns0:RqUID'))
                {
                    locIRqUID = true;
                }
            }
            locString = locStreamReader.ReadLine();            
        }
        if(locXmlTagFound   &&
           locIFXHeader     &&
           locIRqUID)
        {
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locXMLNode;
        System.Xml.XmlNodeList locXMLNodeList;
        
        System.Collections.IEnumerator locXMLNodeListEnum;
        str locTempNodeName, locNodeName, value;
    
        locTempNodeName = _XmlNode.get_Name();
        switch(locTempNodeName)
        {
            case 'ns0:IFXStack':
                mSKS_EFT_RF_File = new SKS_EFT_RF_File();
                mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
                break;            
            case 'ns0:RqUID':
                //Set the File Reference Number
                if(rqUID)
                {
                    value = '{'+ _XmlNode.get_InnerText() + '}';
                    mSKS_EFT_RF_SentFile.setID(value);
                    rqUID = false;
                }
                break;
            case 'ns0:IFXResponse':
            case 'ns0:IFX':
            case 'ns0:Status':
                break;
            case 'ns0:StatusCode':
                mSKS_EFT_RF_SentFile.setStatus(_XmlNode.get_InnerText());
                break;            
            case 'ns0:StatusDesc':
                if(statusDesc)
                {
                    mSKS_EFT_RF_SentFile.setStatusReason(_XmlNode.get_InnerText());
                    statusDesc = false;
                }
                break;                    
        }
    
        if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode  = locXMLNodeListEnum.get_Current();
                locNodeName = locXMLNode.get_Name();
                if(strUpr(locNodeName) != '#TEXT')
                    this.processNode(locXMLNode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilekey</Name>
				<Source><![CDATA[
    protected void setFilekey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File locSKS_EFTAP_File = null)
    {
        SKS_EFT_FileData locSKS_EFT_FileData;
        System.Text.StringBuilder sb;
        ;
    
        sb = new System.Text.StringBuilder();

        Select firstonly FieldValue from locSKS_EFT_FileData
        where locSKS_EFT_FileData.RefRecId == locSKS_EFTAP_File.RecId
        && locSKS_EFT_FileData.FieldName == 'RqUID';

        sb.Append(locSKS_EFT_FileData.FieldValue);
    
        return sb.ToString();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        //THIS FORMAT IS ONLY FOR FILE LEVEL.  There will never be trans keys.
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>