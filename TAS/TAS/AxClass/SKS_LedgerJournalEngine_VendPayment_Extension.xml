<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LedgerJournalEngine_VendPayment_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_LedgerJournalEngine_VendPayment_Extension for LedgerJournalEngine_VendPayment.
/// </summary>
[ExtensionOf(classStr(LedgerJournalEngine_VendPayment))]
final class SKS_LedgerJournalEngine_VendPayment_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manual Settlement for the IHB invoices
    /// </summary>
    /// <param name="ledgerJournalTrans">the left side operand.</param>
    /// <param name="_tax1099Detail">the right side operand.</param>
    protected void initFromVendTable(LedgerJournalTrans ledgerJournalTrans, Tax1099BoxDetail _tax1099Detail)
    {
        next initFromVendTable(ledgerJournalTrans, _tax1099Detail);

        // SKS_FDD_9602- Start
        LedgerDimensionDefaultAccount       offsetLedgerDimension;
        SKS_IHB_InterCompanySetup           sks_IHB_InterCompanySetup;
        InterCompanyTradingPartner          interCompanyTradingPartner;
        InterCompanyTradingRelation         interCompanyTradingRelation;
        InterCompanyTradingPartner          interCompanyTradingPartnerCus;
        LedgerDimensionDefaultAccount       ledgerDimensionIntercompanyGL;
        // SKS_FDD_9602- End

        VendTable vendTableLocal;
        VendBankAccount vendBankAccount;

        if(SKS_PP_Setup::find().IHB_Active == NoYes::Yes)
        {
            changecompany(ledgerJournalTrans.Company)
            {
                SKS_IHB_InterCompanySetup           sks_IHB_InterCompanySetupLoc; // SKS_Bug_10503
                if(ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
                {
                    vendTableLocal = VendTable::findByLedgerDimension(ledgerJournalTrans.LedgerDimension);
                }
                else if(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                {
                    vendTableLocal = VendTable::findByLedgerDimension(ledgerJournalTrans.OffsetLedgerDimension);
                }

                if(vendTableLocal && !ledgerJournalTrans.CustVendBankAccountId)
                {
                    vendBankAccount = VendBankAccount::find(vendTableLocal.AccountNum, vendTableLocal.BankAccount);
                }
                else
                {
                    vendBankAccount = VendBankAccount::find(vendTableLocal.AccountNum, ledgerJournalTrans.CustVendBankAccountId);
                }
                interCompanyTradingPartner  = InterCompanyTradingPartner::findVendor(vendTableLocal.Party, vendTableLocal.dataAreaid);
                interCompanyTradingRelation = InterCompanyTradingPartner.interCompanyTradingRelation();
                interCompanyTradingPartnerCus = InterCompanyTradingPartner::find(interCompanyTradingRelation.InterCompanyTradingCustomer);

                select firstonly Active, PaymentCompany, BankAccount from sks_IHB_InterCompanySetupLoc
                            where sks_IHB_InterCompanySetupLoc.VendAccount == vendTableLocal.AccountNum; // SKS_Bug_10503
                sks_IHB_InterCompanySetup = sks_IHB_InterCompanySetupLoc; // SKS_Bug_10503
            }

            if(sks_IHB_InterCompanySetup.Active && sks_IHB_InterCompanySetup.PaymentCompany == ledgerJournalTrans.DataAreaId)
            {
                ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
                changecompany(ledgerJournalTrans.DataAreaId)
                {
                    offsetLedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(sks_IHB_InterCompanySetup.BankAccount, LedgerJournalACType::Bank);
                }

                ledgerJournalTrans.OffsetLedgerDimension = offsetLedgerDimension;
                if(SKS_PP_Setup::find().IHB_Active) // 10201
                {
                    ledgerJournalTrans.SKS_IHB_InterComp = NoYes::Yes;
                    ledgerJournalTrans.PaymMode = SKS_PP_Setup::find().IHB_InterCoMOP;
                }
            }
            // Check whether the vendor-customer trading relationship established
            else if(interCompanyTradingRelation.Active && interCompanyTradingPartnerCus.CustomerDataAreaId && interCompanyTradingPartnerCus.CustomerParty)
            {
                ledgerDimensionIntercompanyGL = LedgerInterCompany::findCompanyPair(ledgerJournalTrans.DataAreaId, vendTableLocal.DataAreaId).OriginatingCreditLedgerDimension;
                ledgerDimensionIntercompanyGL = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionIntercompanyGL,0);
                ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                ledgerJournalTrans.OffsetLedgerDimension = ledgerDimensionIntercompanyGL;
                if(SKS_PP_Setup::find().IHB_Active) // 10201
                {
                    ledgerJournalTrans.SKS_IHB_InterComp = NoYes::Yes;
                    ledgerJournalTrans.PaymMode = SKS_PP_Setup::find().IHB_InterCoMOP;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>