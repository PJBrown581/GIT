<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_HSBC_1464</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_HSBC_1464 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_HSBC_1464 extends SKS_EFT_Format
{
    #define.FormatVersion('20221123')
    #define.LineEnd('\n')
    System.Text.StringBuilder msb;

    int mLogicRecCount;
    int mDRecordCount;
    int mCRecordCount;
    str shortName;

    AmountMST mDPaymentAmount;
    AmountMST mCPaymentAmount;

    AmountMST mCOffAmount;
    AmountMST mDOffAmount;
    str       transactionRef;

    SKS_EFT_SequenceNumber  mSequenceNumber;
    SKS_EFT_FileDetail      tmpSKS_EFT_FileDetail;
    BankAccountTable        mBankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        int recDCount = 0;
        int recCCount = 0;
        BankAccountId prevBankAccount;
        PaymMode      prevPaymMode;
        CompanyId     prevPaymentCompany;
        CompanyId     prevAccountCompany;
        Amount        prevAmount;
        boolean       isCOffset;
        boolean       isDOffset;
    
        msb  = new System.Text.StringBuilder();
        mLogicRecCount = 0;
    
        // Get sequence number
        this.getSequence();
    
        // Format header
        this.rec_File_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            shortName = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
    
            if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
            {
                recDCount++;
                //D Detail Record
                this.rec_DDetail(recDCount == 1);
                if(recDCount == 6)
                {
                    recDCount = 0;
                    msb.Append(#LineEnd);
                    isDOffset = true;
                }
            }
            else
            {
                recCCount++;
                //C Detail Record
                this.rec_CDetail(recCCount == 1);
                if(recCCount == 6)
                {
                    recCCount = 0;
                    msb.Append(#LineEnd);
                    isCOffset = true;
                }
            }
    
            prevBankAccount    = mSKS_EFT_FileDetail.BankAccountId;
            prevPaymentCompany = mSKS_EFT_FileDetail.PaymentCompany;
            prevPaymMode       = mSKS_EFT_FileDetail.PaymMode;
            prevAccountCompany = mSKS_EFT_FileDetail.AccountCompany;
            prevAmount         = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            transactionRef     = mSKS_EFT_FileDetail.PaymentReference;
    
            next mSKS_EFT_FileDetail;
    
            // Get Bank account
            mBankAccountTable = BankAccountTable::find(prevBankAccount);
    
            if (sign(prevAmount) != sign(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur)
                || prevAccountCompany != mSKS_EFT_FileDetail.AccountCompany
                || prevPaymentCompany  != mSKS_EFT_FileDetail.PaymentCompany
                || prevBankAccount  != mSKS_EFT_FileDetail.BankAccountId
                || prevPaymMode != mSKS_EFT_FileDetail.PaymMode)
            {
                if(msb.ToString())
                {
                    if(recCCount && recCCount < 6)
                    {
                        this.padRecord(recCCount);
                        msb.Append(#LineEnd);
                        recCCount = 0;
                        isCOffset = true;
                    }
                    if(isCOffset)
                    {
                        this.rec_DDetail(true, true);
                        this.padRecord(1);
                        msb.Append(#LineEnd);
                        recDCount = 0;
                        isCOffset = false;
                    }
                    if(recDCount && recDCount < 6)
                    {
                        this.padRecord(recDCount);
                        msb.Append(#LineEnd);
                        recDCount = 0;
                        isDOffset = true;
                    }
                    if(isDOffset)
                    {
                        this.rec_CDetail(true, true);
                        this.padRecord(1);
                        msb.Append(#LineEnd);
                        recCCount = 0;
                        isDOffset = false;
                    }
                }
            }
        }
    
        // Format trailer
        this.rec_Trailer();
    
        // Write to file
        this.fileWrite(msb.ToString());
    
        // Increment sequence number
        this.incrementSequenceNumber();
    
        // Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJulianDate</Name>
				<Source><![CDATA[
    private str getJulianDate(date _Date)
    {
        str value;
    
        value = '0' + subStr(date2julian(_Date),3,5);
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordDelimiter</Name>
				<Source><![CDATA[
    protected str getRecordDelimiter()
    {
        return '\n';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>padRecord</Name>
				<Source><![CDATA[
    boolean padRecord(int _records)
    {
        //Fill remaining segments with blanks
        int x;
    
        for(x = _records; x < 6; x++)
        {
            msb.Append(SKS_PP_StringFormats::strFill(240, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CDetail</Name>
				<Source><![CDATA[
    boolean rec_CDetail(boolean _newRec, boolean isOffsetRecord = false)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                                 Position      Size
        // 1    Record Type                                             (        1)      1
        // 2    Record Sequence / Count                                 (   2-  10)      9
        // 3    EFT Originator ID                                       (  11-  20)     10
        // 4    File Creation Number                                    (  21-  24)      4
    
        //      Segment 1
        // 5    CPA Code                                                (  25-  27)      3
        // 6    Amount                                                  (  28-  37)     10
        // 7    Due Date Century                                        (       38)      1
        // 8    Due Date Year                                           (  39-  40)      2
        // 9    Due Date Day                                            (  41-  43)      3
        //10    Financial Institution Number                            (  44-  47)      4
        //11    Financial Institution Branch Number                     (  48-  52)      5
        //12    Account Number                                          (  53-  64)     12
        //13    Item Trace Number                                       (  65-  86)     22
        //14    Stored Trans Type                                       (  87-  89)      3
        //15    Short Name                                              (  90- 104)     15
        //16    Transaction Payee / Payor Name                          ( 105- 134)     30
        //17    Long Name                                               ( 135- 164)     30
        //18    EFT Originator ID                                       ( 165- 174)     10
        //19    Transaction Origination Xref                            ( 175- 193)     19
        //20    Transaction Return Financial Institution                ( 194- 202)      9
        //21    Transaction Return Account                              ( 203- 214)     12
        //22    Originatorâ€™s  Sundry Info                               ( 215- 229)     15
        //23    Stored Trace Number                                     ( 230- 251)     22
        //24    Settlement Code                                         ( 252- 253)      2
        //25    Invalid Data Element                                    ( 254- 264)     11
    
        //      Segment 2                                               ( 265- 504)    240
        //      Segment 3                                               ( 505- 744)    240
        //      Segment 4                                               ( 745- 984)    240
        //      Segment 5                                               ( 985-1224)    240
        //      Segment 6                                               (1225-1464)    240
        //------------------------------------------------------------------------------------------------------
    
        //Nbr   Content
        str julianDate;

        if(_newRec)
        {
            // 1    Record Type
            msb.Append('C');
    
            // 2    Record Sequence / Count
            msb.Append(SKS_PP_StringFormats::strFill(9, int2str(mLogicRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            // 3    EFT Originator ID
            msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            // 4    File Creation Number
            msb.Append(SKS_PP_StringFormats::strFill(4, num2str(mSequenceNumber, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            mLogicRecCount++;
        }
        mCRecordCount++;
        // 5    CPA Code
        msb.Append('450');
    
        // 6    Amount
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mDOffAmount), 10));
            mDOffAmount = 0;
        }
        else
        {
            mCOffAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            mCPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 10));
        }
    
        // 7    Due Date Century
        julianDate = this.getJulianDate(mSKS_EFT_File.EffectiveDate);
        msb.Append(substr(julianDate, 1, 1));
    
        // 8    Due Date Year
        msb.Append(substr(julianDate, 2, 2));
    
        // 9    Due Date Day
        msb.Append(substr(julianDate, 4, 3));
    
        //10    Financial Institution Number
        //11    Financial Institution Branch Number
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, mBankAccountTable.RegistrationNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));//tmp 20170713
    
            //12    Account Number
            msb.Append(SKS_PP_StringFormats::strFill(12, mBankAccountTable.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//tmp 20170713 changed from vendorid to vendbankact
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            //12    Account Number
            msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //13    Item Trace Number
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //14    Stored Trans Type
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //15    Short Name
        msb.Append(SKS_PP_StringFormats::strFill(15, shortName,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        //16    Transaction Payee / Payor Name
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_Bank.WOrdPartyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_FileDetail.AccountName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //17    Long Name
        msb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_Bank.ACHCompanyName,SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //18    EFT Originator ID
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //19    Transaction Origination Xref
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strFill(19, transactionRef, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(19, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //20    Transaction Return Financial Institution
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
    
        //21    Transaction Return Account
        msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //22    Originatorâ€™s  Sundry Info
        msb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //23    Stored Trace Number
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //24    Settlement Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //25    Invalid Data Element
        msb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DDetail</Name>
				<Source><![CDATA[
    boolean rec_DDetail(boolean _newRec, boolean isOffsetRecord = false)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                                 Position      Size
        // 1    Record Type                                             (        1)      1
        // 2    Record Sequence / Count                                 (   2-  10)      9
        // 3    EFT Originator ID                                       (  11-  20)     10
        // 4    File Creation Number                                    (  21-  24)      4
    
        //      Segment 1
        // 5    CPA Code                                                (  25-  27)      3
        // 6    Amount                                                  (  28-  37)     10
        // 7    Due Date Century                                        (       38)      1
        // 8    Due Date Year                                           (  39-  40)      2
        // 9    Due Date Day                                            (  41-  43)      3
        //10    Financial Institution Number                            (  44-  47)      4
        //11    Financial Institution Branch Number                     (  48-  52)      5
        //12    Account Number                                          (  53-  64)     12
        //13    Item Trace Number                                       (  65-  86)     22
        //14    Stored Trans Type                                       (  87-  89)      3
        //15    Short Name                                              (  90- 104)     15
        //16    Transaction Payee / Payor Name                          ( 105- 134)     30
        //17    Long Name                                               ( 135- 164)     30
        //18    EFT Originator ID                                       ( 165- 174)     10
        //19    Transaction Origination Xref                            ( 175- 193)     19
        //20    Transaction Return Financial Institution                ( 194- 202)      9
        //21    Transaction Return Account                              ( 203- 214)     12
        //22    Originatorâ€™s  Sundry Info                               ( 215- 229)     15
        //23    Stored Trace Number                                     ( 230- 251)     22
        //24    Settlement Code                                         ( 252- 253)      2
        //25    Invalid Data Element                                    ( 254- 264)     11
    
        //      Segment 2                                               ( 265- 504)    240
        //      Segment 3                                               ( 505- 744)    240
        //      Segment 4                                               ( 745- 984)    240
        //      Segment 5                                               ( 985-1224)    240
        //      Segment 6                                               (1225-1464)    240
        //------------------------------------------------------------------------------------------------------
    
        //Nbr   Content
        str julianDate;

        if(_newRec)
        {
            // 1    Record Type
            msb.Append('D');
    
            // 2    Record Sequence / Count
            msb.Append(SKS_PP_StringFormats::strFill(9, int2str(mLogicRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            // 3    EFT Originator ID
            msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            // 4    File Creation Number
            msb.Append(SKS_PP_StringFormats::strFill(4, num2str(mSequenceNumber, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
            mLogicRecCount++;
        }
        mDRecordCount++;
        // 5    CPA Code
        msb.Append('450');
    
        // 6    Amount
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mCOffAmount), 10));
            mCOffAmount = 0;
        }
        else
        {
            mDOffAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            mDPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 10));
        }
    
        // 7    Due Date Century
        julianDate = this.getJulianDate(mSKS_EFT_File.EffectiveDate);
        msb.Append(substr(julianDate, 1, 1));
    
        // 8    Due Date Year
        msb.Append(substr(julianDate, 2, 2));
    
        // 9    Due Date Day
        msb.Append(substr(julianDate, 4, 3));
    
        //10    Financial Institution Number
        //11    Financial Institution Branch Number
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, mBankAccountTable.RegistrationNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));//tmp 20170713
    
            //12    Account Number
            msb.Append(SKS_PP_StringFormats::strFill(12, mBankAccountTable.AccountNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//tmp 20170713 changed from vendorid to vendbankact
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));//tmp 20170713
    
            //12    Account Number
            msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//tmp 20170713 changed from vendorid to vendbankact
        }
    
        //13    Item Trace Number
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //14    Stored Trans Type
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //15    Short Name
        msb.Append(SKS_PP_StringFormats::strFill(15, shortName,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        //16    Transaction Payee / Payor Name
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_Bank.WOrdPartyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_FileDetail.AccountName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //17    Long Name
        msb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_Bank.ACHCompanyName,SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //18    EFT Originator ID
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //19    Transaction Origination Xref
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strFill(19, transactionRef, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(19, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //20    Transaction Return Financial Institution
        if(isOffsetRecord)
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
    
        //21    Transaction Return Account
        msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //22    Originatorâ€™s  Sundry Info
        msb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //23    Stored Trace Number
        msb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //24    Settlement Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //25    Invalid Data Element
        msb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_File_Header</Name>
				<Source><![CDATA[
    boolean rec_File_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                                 Position      Size
        // 1    Record Type                                             (        1)      1
        // 2    Record Sequence / Count                                 (   2-  10)      9
        // 3    EFT Originator ID                                       (  11-  20)     10
        // 4    File Creation Number                                    (  21-  24)      4
        // 5    File Creation Date                                      (  25-  30)      6
        // 6    HSBC Institution ID                                     (  31-  35)      5
        // 7    Reserved                                                (  36-  55)     20
        // 8    Currency Code Identifier                                (  56-  58)      3
        // 9    Filler                                                  (  59-1464)   1406
        //------------------------------------------------------------------------------------------------------
    
        //Nbr   Content
        // 1    Record Type
        msb.Append('A');
    
        // 2    Record Sequence / Count
        mLogicRecCount = 1;
        msb.Append(SKS_PP_StringFormats::strFill(9, int2str(mLogicRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 3    EFT Originator ID
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 4    File Creation Number
        msb.Append(SKS_PP_StringFormats::strFill(4, num2str(mSequenceNumber,0 , 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 5    File Creation Date
        msb.Append(this.getJulianDate(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    
        // 6    HSBC Institution ID
        msb.Append('01600');
    
        // 7    Reserved
        msb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //8    Currency Code Identifier
        if(mSKS_EFT_FileDetail.PaymentCurrencyCode)
        {
            msb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            msb.Append('CAD');
        }
    
        //9     Filler
        msb.Append(SKS_PP_StringFormats::strFill(1406, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        mLogicRecCount++;
        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    boolean rec_Trailer()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                                     Position    Size
        // 1    Record Type                                                 (        1)       1
        // 2    Record Sequence / Count                                     (   2-  10)       9
        // 3    EFT Originator ID                                           (  11-  20)      10
        // 4    File Creation Number                                        (  21-  24)       4
        // 5    Value of debits                                             (  25-  38)      14
        // 6    Number of debits                                            (  39-  46)       8
        // 7    Value of credits                                            (  47-  60)      14
        // 8    Number of credits                                           (  61-  68)       8
        // 9    Value of Err Corr â€˜Eâ€™                                       (  69-  82)      14
        //10    Number of Err Corr â€˜Eâ€™                                      (  83-  90)       8
        //11    Value of Err Corr â€˜Fâ€™                                       (  91- 104)      14
        //12    Number of Err Corr â€˜Fâ€™                                      ( 105- 112)       8
        //13    Filler                                                      ( 113-1464)    1352
        //------------------------------------------------------------------------------------------------------
    
        //Nbr   Content
        // 1    Record Type
        msb.Append('Z');
    
        // 2    Record Sequence / Count
        msb.Append(SKS_PP_StringFormats::strFill(9, int2str(mLogicRecCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 3    EFT Originator ID
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 4    File Creation Number
        msb.Append(SKS_PP_StringFormats::strFill(4, num2str(mSequenceNumber, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 5    Value of debits
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mDPaymentAmount), 14));
    
        // 6    Number of debits
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mDRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 7    Value of credits
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mCPaymentAmount), 14));
    
        // 8    Number of credits
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mCRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 9    Value of Err Corr â€˜Eâ€™
        msb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //10    Number of Err Corr â€˜Eâ€™
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //11    Value of Err Corr â€˜Fâ€™
        msb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //12    Number of Err Corr â€˜Fâ€™
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //13    Filler
        msb.Append(SKS_PP_StringFormats::strFill(1352, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    // Standard payment selction
    // Override if different selection is need for a format
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,
                   mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
        where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>