<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_RBC_PAYEE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_RBC_PAYEE Extends SKS_PP_Format_BankGroup
{
    int mChkBatchCount;
    real mChkBatchSum;
    int mBatchSequenceNumber;
    real mTotalbatchamount;
    int mRecordCount;
    str mBnkTransitNbr;
    str mBnkAcct;
    int mBatchCount;
    //RBC PAYEE
    //' Pos 1-1       1       Record Type 'C'
    //' Pos 2-8       7       record count
    //' Pos 9-11      3       Transaction Code
    //' Pos 12-16     5       Transit/Branch Number
    //' Pos 17-21     5       Blank Fill
    //' Pos 22-28     7       Bank Account Number
    //' Pos 29-32     4       Zero Fill
    //' Pos 33-40     8       Check number
    //' Pos 41-50    10       Check Amount
    //' Pos 51-69    19       Blank Fill
    //' Pos 70-77     8       Blank Fill
    //' Pos 78-85     8       Issue Date   YYYYMMDD
    //' Pos 86-99    14       Blank Fill
    //' Pos 100-100   1       USA = 2 CAD = 1
    //' Pos 101-103   3       Distribution Code 000 = mail, 999 return to sender
    //' Pos 104-163  60       Payee Name 1
    //' Pos 164-223  60       Payee Name 2
    //' Pos 224-283  60       Payee Name 3
    //' Pos 284-343  60       Address Line 1
    //' Pos 344-403  60       Address Line 2
    //' Pos 404-463  60       Address Line 3
    //' Pos 464-523  60       Address Line 4
    //' Pos 524-583  60       Address Line 5
    //' Pos 584-643  60       Address Line 6
    //' Pos 644-694  51       Address Line 7
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        str chkNbr, bnkAcctNbr;
        int Mult = 1;
        str TranCode;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str accountName;
        str addressLine1, addressLine2, addressLine3, addressLine4;
        DirPartyNamePrimaryAddressView DirPartyNamePrimaryAddressView;
        VendTable   vendtable;
        SKS_PP_PayeeInfo payeeInfo = new SKS_PP_PayeeInfo(mSKS_PP_FileDetail);
        ;
    
        accountName = payeeInfo.getAccountName();
        addressLine1 = payeeInfo.parsePayeeLine();
        addressLine2 = payeeInfo.parsePayeeLine();
        addressLine3 = payeeInfo.parsePayeeLine();

        select firstonly ISOcode
            from DirPartyNamePrimaryAddressView
            join vendtable
            where DirPartyNamePrimaryAddressView.Party == vendtable.Party &&
                vendtable.AccountNum == mSKS_PP_FileDetail.VendorAccount;

        addressLine4 = DirPartyNamePrimaryAddressView.ISOcode;
    
    
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            TranCode = '490';
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            TranCode = '300';
        }
        mChkBatchSum = mChkBatchSum + mSKS_PP_FileDetail.ChkCuryAmt;
        mChkBatchCount++;
    
        chkNbr = strLRTrim(mSKS_PP_FileDetail.ChkRefNbr);
        bnkAcctNbr = strLRtrim(mSKS_PP_FileDetail.BnkBankAcct);
    
        mRecordCount++;
    
        sb.Append('C');
        sb.Append(SKS_PP_StringFormats::strFill(7,int2str(mRecordCount),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(TranCode);
        sb.Append(SKS_PP_StringFormats::strFill(5, SKS_PP_StringFormats::strRight(mBnkTransitNbr, 5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        if(strlen(bnkAcctNbr) > 7)
        {
            sb.Append(SKS_PP_StringFormats::strFill(12,bnkAcctNbr,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(7,bnkAcctNbr,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
    
        if(strlen(chkNbr) > 8)
        {
            sb.Append(SKS_PP_StringFormats::strFill(12,ChkNbr,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(4,'',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
            sb.Append(SKS_PP_StringFormats::strFill(8,ChkNbr,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        }
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));
        sb.Append(SKS_PP_StringFormats::strFill(19,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(8,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(14,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(1,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(3,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,strLRtrim(accountName),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,strLRtrim(AddressLine1),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,strLRtrim(AddressLine2),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,strLRtrim(AddressLine3),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,strLRtrim(AddressLine4),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(51,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    //' RBC-PAYEE
    
    //' Pos 01-01     1       Literal - 'A'
    //' Pos 02-08     7       Record Count '0000001'
    //' Pos 09-12     4       File Number
    //' Pos 13-21     9       Client Number - Provided by RBC
    //' Pos 22-29     8       File Creation Date YYYYMMDD
    //' Pos 30-694   665      Filler
    protected str txtFormatHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        ;
    
        mBatchSequenceNumber = 0;
        mRecordCount = 1;
        mBatchCount = 0;
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.chkBankAcct;
    
        sb.Append('A');
        sb.Append(SKS_PP_StringFormats::strFill(7, int2str(mRecordCount), SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(4,subStr(mSKS_PP_FileDetail.FileNbr,3, 6),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(9,strUpr(bSKS_PP_Bank.PP01),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(SKS_PP_StringFormats::strFill(665,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatTrailer</Name>
				<Source><![CDATA[
    //' RBC PAYEE Format
    
    //' File Trailer Total Record
    //' Pos 1-1       1       Record Type 'Z'
    //' Pos 2-8       7       Record Count
    //' Pos 9-16      8       Total number of batches
    //' Pos 17-29    13       Total Dollar Amount in all batches
    //' Pos 30-694  665       Filler - spaces
    protected str txtFormatTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mRecordCount++;
    
        sb.Append('Z');
        sb.Append(SKS_PP_StringFormats::strFill(7,int2str(mRecordCount),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(8,int2str(mBatchCount),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mTotalbatchamount, 13));
        sb.Append(SKS_PP_StringFormats::strFill(665,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    //' RBC PAYEE Format
    //' Detail Header Record
    //' Pos 1-1       1       Record Type 'B'
    //' Pos 2-8       7       Record Count
    //' Pos 9-12      4       Batch Sequence Number
    //' Pos 13-17     5       Transit Batch Number
    //' Pos 18-22     5       Blank Fill
    //' Pos 23-29     7       Bank Account Number
    //' Pos 30-32     3       Currency
    //' Pos 33-41     9       SRF number (Provided by RBC)
    //' Pos 42-93    52       Blank Fill
    //' Pos 94-98     5       '00003'
    //' Pos 99-102    4       Service Type Indicator
    //' Pos 103-694 592       Blank Fil
    protected str txtGroupHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        Container company;
        BankAccountTable  BankAccountTable_1;
        ;
    
        mBatchSequenceNumber++;
        mRecordCount++;
        mBnkTransitNbr = strLRTrim(mSKS_PP_FileDetail.BnkBankTransit);
        mBnkAcct = strLRTrim(mSKS_PP_FileDetail.BnkBankAcct);
        mBatchCount++;
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company CurrencyCode from BankAccountTable_1 where BankAccountTable_1.AccountID == mSKS_PP_FileDetail.ChkBankAcct;
        mBnkAcct = mSKS_PP_FileDetail.BnkBankAcct;
    
        sb.Append('B');
        sb.Append(SKS_PP_StringFormats::strFill(7,int2str(mRecordCount),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(4,int2str(mBatchSequenceNumber),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5, SKS_PP_StringFormats::strRight(mSKS_PP_FileDetail.BnkBankTransit, 5),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        if(strlen(strRtrim(strLtrim(mBnkAcct))) > 7)
        {
            //Overflow
            sb.Append(SKS_PP_StringFormats::strFill(12,mBnkAcct,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(7,mBnkAcct,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
        sb.Append(SKS_PP_StringFormats::strFill(3,strUpr(BankAccountTable_1.CurrencyCode),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(9,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(52,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append('00003');
        sb.Append('0002');
        sb.Append(SKS_PP_StringFormats::strFill(592,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    //' RBC PAYEE Format
    
    //' File Trailer Total Record
    //' Pos 1-1       1       Record Type 'T'
    //' Pos 2-8       7       Record Count
    //' Pos 9-12      4       Batch Sequence Number (Same as Batch Header record)
    //' Pos 13-17     5       Transit/Branch Number
    //' Pos 18-22     5       Filler - Blank Fill
    //' Pos 23-29     7       Bank Account Number
    //' Pos 30-37     8       Total Number of Transactions
    //' Pos 38-50    13       Total Dollar Amount
    //' Pos 51-58     8       zero fill
    //' Pos 59-71    13       zero fill
    //' Pos 72-694  623       Blank Fill
    protected str txtGroupTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mRecordCount++;
    
        sb.Append('T');
        sb.Append(SKS_PP_StringFormats::strFill(7,int2str(mRecordCount),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(4,int2str(mBatchSequenceNumber),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5, SKS_PP_StringFormats::strRight(mBnkTransitNbr, 5),SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        if(strlen(mBnkAcct) > 7)
        {
            //Overflow
            sb.Append(SKS_PP_StringFormats::strFill(12,mBnkAcct,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(5,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(7,mBnkAcct,SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
        sb.Append(SKS_PP_StringFormats::strFill(8,int2str(mChkBatchCount),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mChkBatchSum, 13));
        sb.Append(SKS_PP_StringFormats::strFill(8,'',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(13,'',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(623,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        mTotalbatchamount = mTotalbatchamount + mChkBatchSum;
    
        mChkBatchCount = 0;
        mChkBatchSum = 0;
    
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>