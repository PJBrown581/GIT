<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_OutboundFormat</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SKS_DD_OutboundFormat
{
    CustDirectDebitMandate      mCustDirectDebitMandate;
    SKS_EB_BankTable            mSKS_EB_BankTable;
    SKS_PP_Bank                 mSKS_PP_Bank;
    SKS_EB_CharacterReplacement mSKS_EB_CharacterReplacement;

    str mErrorText;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    public str getErrorText()
    {
        return mErrorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankRegistrationCode</Name>
				<Source><![CDATA[
    public str getBankRegistrationCode()
    {
		//Modified this method for bug 11027 - Issue 3 and 4
        str bankRegistrationCode;
  
        CustBankAccount locBankAccountTable;

        locBankAccountTable = CustBankAccount::findByCompany(curext(), mCustDirectDebitMandate.CustAccount, mCustDirectDebitMandate.BankAccount); 

        if(locBankAccountTable.RegistrationNum)
        {
            bankRegistrationCode = locBankAccountTable.RegistrationNum;
        }
        else if(locBankAccountTable.BankIBAN)
        {
            bankRegistrationCode = subStr(locBankAccountTable.BankIBAN,5,4);
        }

        return bankRegistrationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckMandateSentStatus</Name>
				<Source><![CDATA[
	public boolean CheckMandateSentStatus(CustAccount _custAccount)
    {
        CustDirectDebitMandate locCustDirectDebitMandate;
		
        boolean fExists = false;

        select locCustDirectDebitMandate 
            where locCustDirectDebitMandate.CustAccount == _custAccount
            && locCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Sent;

        if(locCustDirectDebitMandate)
        {
            fExists = true;
        }
 
        return  fExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    public str formatStructure(CustDirectDebitMandate  _custDirectDebitMandate)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMandateStatus</Name>
				<Source><![CDATA[
    //This methos is same as CustDirectDebitMandate GetStatus method.
    public CustMandateStatus getMandateStatus()
    {
        if (mCustDirectDebitMandate.CancellationDate != dateNull())
        {
            return CustMandateStatus::Canceled;
        }

        if (mCustDirectDebitMandate.SignatureDate == dateNull()
            || mCustDirectDebitMandate.BankAccount == ''
            || mCustDirectDebitMandate.CustomerAddress == 0)
        {
            return CustMandateStatus::Incomplete;
        }
        
        if (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) > mCustDirectDebitMandate.ExpirationDate)
        {
            return CustMandateStatus::Expired;
        }

        if (mCustDirectDebitMandate.MandatePaymentType == CustMandatePaymentType::Onetime
            && mCustDirectDebitMandate.IsFirst == false
            && mCustDirectDebitMandate.UsageCount > 0)
        {
            return CustMandateStatus::Expired;
        }

        if (mCustDirectDebitMandate.IsFirst && mCustDirectDebitMandate.UsageCount == 0)
        {
            return CustMandateStatus::New;
        }

        if (mCustDirectDebitMandate.IsFirst && mCustDirectDebitMandate.UsageCount > 0)
        {
            return CustMandateStatus::Modified;
        }

        return CustMandateStatus::Active;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CharacterReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converting to charaters with character replacement group
    /// </summary>
    /// <param name = "_result">str</param>
    /// <returns>Converted string value</returns>
    protected str CharacterReplacement(str _result)
    {
        if(_result != '' && mSKS_EB_CharacterReplacement)
        {
            return mSKS_EB_CharacterReplacement.ConvertCharacters(_result);
        }
        else
        {
            return _result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryISO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converting Country code to 2 digit ISO code
    /// </summary>
    /// <param name = "_countryRegion">LogisticsAddressCountryRegionId</param>
    /// <returns>True</returns>
    public LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mLogisticsAddressCountryRegion
        // Return a 2 digit ISO country code
        //------------------------------------------------------------------------------------------------------
        str value;
        LogisticsAddressCountryRegion mLogisticsAddressCountry;
    
        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(mLogisticsAddressCountry.CountryRegionId != _countryRegion)
            {
                mLogisticsAddressCountry = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = mLogisticsAddressCountry.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>