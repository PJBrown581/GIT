<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_CA_RBC_XML_02_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_CA_RBC_XML_02_AR Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_CA_RBC_XML_02_AR Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220907';
        dataContractVersion = '1.0';
        conFormatID = ['CA-RBC-XML-02-AR'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'','','Company Name','XXXXXXXXXXXXXXXXXXXXXXX',1,'Canada - Royal Bank of Canada - ISO20022',0,'','','CA-RBC-XML-02-AR',1,'','','','','','','','',0,0,'00:00.0',0,'00:00.0',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'CA-RBC-XML-02-AR',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('CA-RBC-XML-02-AR'):
                paymSpecList = this.getPaymSpecsMetaData_CA_RBC_XML_02_AR();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_CA_RBC_XML_02_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_CA_RBC_XML_02_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'Canadian ACH payments',1,'ACH-PAD','','ACH-PAD','',0,'CA-RBC-XML-02-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('CA-RBC-XML-02-AR'):
                notesList = this.getNotesMetaData_CA_RBC_XML_02_AR();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_CA_RBC_XML_02_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_CA_RBC_XML_02_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['CA-RBC-XML-02-AR','ACH-PAD','-For addresses you must add DDEFT purpose in Address and contact information purpose form in Organization administration:--Group Header > Initiating Party Name stored in Organization administration > Setup > Organization > Legal entities > Name field:EFT+ bank account > AR EFT+:-Initiating Party Identification is set in the Bank Party Id :-Debtor name is stored in Customer eBanking details > Customer name:-Customer postal address are stored on the Accounts receivable > Customers > All customers > Customer details> Address Tab:--Address will print, only if the Purpose of the address is mentioned as DDEFT. Otherwise address will be ignored.:--Building num and Street name is stored on Street field separated by ; :--Postal code is stored on ZIP/postal code field:--Town name is stored on City field:--Country is stored on Country/region field:Customer Bank Account fields:-Bank account num and Transit num are reqd. CACPA will be prefixed on transit num:-Financial Institution num and Transit num should be entered in Routing num:Creditor details are Bank details. Creditor name is stored on Bank account > AR EFT+ > Company info > Company name:-Creditor address is stored on Organization administration > Setup > Organization > Legal entities > Address:--Address will print, only if the Purpose of the address is mentioned as DDEFT. Otherwise address will be ignored:--Building num & Street name is stored on Street field separated by ;:--Postal code is stored on ZIP/postal code field:--Town name is stored on City field:--Country is stored on Country/region field:-Cash and bank management module > Bank Account:-Bank account num and Transit num are reqd.CACPA will be prefixed on transit num:-Financial Institution num and Transit num should be entered in Routing num']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('CA-RBC-XML-02-AR'):
                validationsList = this.getValidationsMetaData_CA_RBC_XML_02_AR();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_CA_RBC_XML_02_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_CA_RBC_XML_02_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','ZIP/postal code','Organization administration > Legal entities > Address(Fast tab) > ZIP/postal code','PmtInf > Cdtr > PstlAdr > PstCd','ZIP/postal code related to Bank','17','ZipCode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Street','Organization administration > Legal entities > Address(Fast tab) > Street','PmtInf > Cdtr > PstlAdr > StrNm and BldNb','Address related to Bank','17','Street','','',1,'2',1,'70',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','City','Organization administration > Legal entities > Address(Fast tab) > City','PmtInf > Cdtr > PstlAdr > TwnNm','City related to Bank','17','City','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','State','Organization administration > Legal entities > Address(Fast tab) > State','PmtInf > Cdtr > PstlAdr > CtrySubDvsn','State related to Bank','17','State','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Account number','PmtInf > CdtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',0,0,1,'7',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Routing number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing number','PmtInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Bank',0,'RegistrationNum','','',0,0,1,'9',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm','Name related to customer','5','Name','','',0,0,1,'23',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Customer Country','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Country related to Legal entity','2','CountryRegionId','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Customer street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Street','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Customer postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','Zipcode','','',1,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Customer city','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Address related to Legal entity','2','City','','',1,'2',1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Customer bank account number','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > Bank account number','PmtInf > DrctDbtTxInf > DbtrAcct > Id > Othr > Id','Bank account number related to customer',1,'AccountNum','','',0,0,'7','12',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['CA-RBC-XML-02-AR','ACH-PAD','','Routing number','TAS > Common > Customer eBanking details> Customer bank accounts > General tab > Identification(group) > Routing number','PmtInf > DrctDbtTxInf > DbtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Customer',1,'RegistrationNum','','',0,0,1,'9',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['CA-RBC-XML-02-AR','CtgyPurp','Category purpose']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','CASH','CASH']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','CORT','CORT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','DIVI','DIVI']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','DIVI','GOVT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','DIVI','HEDG']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','INTC','INTC']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','INTE','INTE']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','LOAN','LOAN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','PENS','PENS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','SALA','SALA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','SECU','SECU']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','SSBE','SSBE']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','SUPP','SUPP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','TAXS','TAXS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','TRAD','TRAD']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','TREA','TREA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','VATX','VATX']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['CA-RBC-XML-02-AR','CtgyPurp','WHLD','WHLD']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('CA-RBC-XML-02-AR'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_CA_RBC_XML_02_AR();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_CA_RBC_XML_02_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_CA_RBC_XML_02_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['CA-RBC-XML-02-AR','CA-RBC-XML-02-AR','ACH-PAD','CtgyPurp','Category Purpose',0,'CtgyPurp','CASH',0,'','','PmtInf > CtgyPurp > Cd']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['CA-RBC-XML-02-AR','CA-RBC-XML-02-AR','FormatValidations','ACH-PAD','15','W01']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('CA-RBC-XML-02-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_CA_RBC_XML_02_AR();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_CA_RBC_XML_02_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_CA_RBC_XML_02_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['CA-RBC-XML-02-AR','CA-RBC-XML-02-AR','BankPartyID','Bank Party Id',1,'BankPartyID','',0,'','XXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > Orgid > Othr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['CA-RBC-XML-02-AR','CA-RBC-XML-02-AR','CompanyID','Company Id',1,'CompanyID','',1,'','XXXXXXXXXX','Cdtr > OrgId > Othr > Id']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the direct debit bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateARBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('CA-RBC-XML-02-AR'):
                if(gSKS_EFTAR_Bank.W01)
                {
                    this.updateARBankFields('BankPartyID', gSKS_EFTAR_Bank.W01);
                }
                if(gSKS_EFTAR_Bank.W02)
                {
                    this.updateARBankFields('CompanyID', gSKS_EFTAR_Bank.W02);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>