<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_CustomFormatSample</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BR_CustomFormatSample extends SKS_BR_CustomFormatBase
{
    boolean test;
    System.Xml.XmlDocument gXMLDocument;
    NoYes gEndingBalancePreReqMet;
    str gTransTypePart1;
    str gTransTypePart2;
    str gTransTypePart3;
    str gPrtryCD;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FormatSupportsUpdatingEndingBalance</Name>
				<Source><![CDATA[
    //Overriding the superclass because this format supports updating ending balances
    public boolean FormatSupportsUpdatingEndingBalance(){return true;}

]]></Source>
			</Method>
			<Method>
				<Name>FormatSupportTransTypeCreditDebitFlag</Name>
				<Source><![CDATA[
    public boolean FormatSupportTransTypeCreditDebitFlag(){return true;}

]]></Source>
			</Method>
			<Method>
				<Name>GetAttributeValue</Name>
				<Source><![CDATA[
    private str GetAttributeValue(System.Xml.XmlNode _XMLNode, str _AttributeName)
    {
        str locAttributeName, locAttributeValue;
        System.Xml.XmlAttribute locXmlAttribute;
        System.Collections.IEnumerator locXMLAttributeCollectionEnumerator;
        System.Xml.XmlAttributeCollection locXMLAttirbuteCollection;
    
    
        locXMLAttirbuteCollection = _XmlNode.get_Attributes();
        locXMLAttributeCollectionEnumerator = locXMLAttirbuteCollection.GetEnumerator();
        while(locXMLAttributeCollectionEnumerator.MoveNext())
        {
            locXmlAttribute = locXMLAttributeCollectionEnumerator.get_Current();
            locAttributeName = locXmlAttribute.get_Name();
            if(strUpr(locAttributeName) == _AttributeName)
            {
                locAttributeValue = locXmlAttribute.get_Value();
                break;
            }
        }
        return locAttributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetInboundFile</Name>
				<Source><![CDATA[
    public SKS_BR_InboundFile GetInboundFile(SKS_EB_FilePathName _FilePathAndName, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.Xml.XmlNode locXMLNode;

        str locTempTagName;
        ;
        this.InitializeFileInfo(_FilePathAndName);
        //Set the file path and name so we can set the attributes when the SKS_BR_InboundFile
        gSKS_EB_FilePathName = _FilePathAndName;
        // OPEN AND LOAD THE FILE INTO THE XMLDOC OBJECT
        gXMLDocument = new System.Xml.XmlDocument();
        locSKS_EB_FileHub.runFileLoad(_FilePathAndName);
        gXMLDocument.LoadXML(locSKS_EB_FileHub.fileBody());
        if(gXMLDocument.get_HasChildNodes())
        {
            locXMLNode = gXMLDocument.get_FirstChild(); //<?XML ... node.
            locXMLNode = locXMLNode.get_NextSibling();//<Document xmlns...
            locTempTagName = locXMLNode.get_Name();
            if(strUpr(locTempTagName) == 'DOCUMENT')
            {
                this.processNode(locXMLNode);
            }
        }
        return gSKS_BR_InboundFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locXMLNode;
        System.Xml.XmlNode locParentXMLNode;
        System.Xml.XmlNode locGrandParentXMLNode;
        System.Xml.XmlNode locGreatGrandParentXMLNode;
        System.Xml.XmlNode locGreatGreatGrandParentXMLNode;
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
        str locNodeName, locNodeValue;
        int separatorPos;
        str locTempNodeName, locTempParentNodeName, locTempGrandParentNodeName,
            locTempGreatGrandParentNodeName, locTempGreatGreatGrandParentNodeName;
    
        locParentXMLNode = _XmlNode.get_ParentNode();
        if(locParentXMLNode != null)
        {
            locTempParentNodeName = locParentXMLNode.get_Name();
            locTempParentNodeName = strUpr(locTempParentNodeName);
            locGrandParentXMLNode = locParentXMLNode.get_ParentNode();
            if(locGrandParentXMLNode != null)
            {
                locTempGrandParentNodeName = locGrandParentXMLNode.get_Name();
                locTempGrandParentNodeName = strUpr(locTempGrandParentNodeName);
                locGreatGrandParentXMLNode = locGrandParentXMLNode.get_ParentNode();
                if(locGreatGrandParentXMLNode != null)
                {
                    locTempGreatGrandParentNodeName = locGreatGrandParentXMLNode.get_Name();
                    locTempGreatGrandParentNodeName = strUpr(locTempGreatGrandParentNodeName);
                    locGreatGreatGrandParentXMLNode = locGreatGrandParentXMLNode.get_ParentNode();
                    if(locGreatGreatGrandParentXMLNode != null)
                    {
                        locTempGreatGreatGrandParentNodeName = locGreatGreatGrandParentXMLNode.get_Name();
                        locTempGreatGreatGrandParentNodeName = strUpr(locTempGreatGreatGrandParentNodeName);
                    }
                }
            }
        }
    
        locTempNodeName = _XmlNode.get_Name();
        switch(strUpr(locTempNodeName))
        {
            case 'DOCUMENT':
                if(gSKS_BR_InboundFile == null)
                {
                    //Instantiate a new file object to hold all statements contained in the incoming file
                    gSKS_BR_InboundFile = new SKS_BR_InboundFile();
                    gSKS_BR_InboundFile.SetDate(gSKS_EB_FileHub.attrFileModified());
                }
                break;
            case 'GRPHDR':
                //No action
                break;
            case 'MSGID':
                locNodeValue = _XmlNode.get_InnerText();
                gSKS_BR_InboundFile.SetID(locNodeValue);
                break;
            case 'STMT':
                gEndingBalancePreReqMet = NoYes::No;
                gSKS_BR_InboundStmt = new SKS_BR_InboundStmt();
                break;
            case 'CREDTTM', 'DT':
            //Statement Date time:  initially, the Statment date will be set to the File's Statment Date
            // if there is a closing balance, then we will reset the Satment date
                if(locTempParentNodeName == 'STMT'
                    || (locTempParentNodeName == 'DT'
                        && locTempGrandParentNodeName == 'BAL'
                        && gEndingBalancePreReqMet == NoYes::Yes))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetDate(locNodeValue);
                }
            //if this isn't a statement date time, then it might be a transaction date time.
                else if(locTempGreatGrandParentNodeName == 'STMT'
                    && locTempGrandParentNodeName == 'NTRY'
                    && locTempParentNodeName == 'BOOKGDT')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetDate(locNodeValue);
                }
                break;
            case 'ELCTRNCSEQNB':
                if(locTempParentNodeName == 'STMT')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetNbr(locNodeValue);
                }
                break;
            //Set the Bank Account
            case 'ID','IBAN':
                if((//THIS IS THE QUALIFIER FOR IBANs.  IBAN VALUES ARE IN THE IBAN NODE(ex. in 4162)
                    locTempGreatGrandParentNodeName == 'STMT'
                    && locTempGrandParentNodeName == 'ACCT'
                    && locTempParentNodeName == 'ID'
                    && locTempNodeName == 'IBAN')
                || //THIS IS THE QUALIFIER FOR BANK ACCOUNT NUMERS
                    (locTempGreatGreatGrandParentNodeName == 'STMT'
                    && locTempGreatGrandParentNodeName == 'ACCT'
                    && locTempGrandParentNodeName == 'ID'
                    && locTempParentNodeName == 'OTHR'
                    && locTempNodeName == 'ID'))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetAccount(locNodeValue);
                }
                break;
            case 'CD'://MERGE NOTE! IBAN above is where it belongs. Leaving the IBAN that was here causes compile error!!!
                if(locTempGreatGreatGrandParentNodeName == 'STMT'
                    && locTempGreatGrandParentNodeName == 'BAL'
                    && locTempGrandParentNodeName == 'TP'
                    && locTempParentNodeName == 'CDORPRTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    if(strUpr(locNodeValue) == 'CLBD')
                        gEndingBalancePreReqMet = NoYes::Yes;
                }
                else if(locTempGreatGreatGrandParentNodeName == 'STMT'
                    && locTempGreatGrandParentNodeName == 'NTRY'
                    && locTempGrandParentNodeName == 'BKTXCD'
                    && locTempParentNodeName == 'DOMN')
                {
                    if(gSKS_BR_InboundTran.GetTranType() == '')
                    {
                        locNodeValue = _XmlNode.get_InnerText();
                        gTransTypePart1 = Global::strLRTrim(locNodeValue);
                    }
                }
                else if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'BKTXCD'
                    && locTempGrandParentNodeName == 'DOMN'
                    && locTempParentNodeName == 'FMLY')
                {
                    if(gSKS_BR_InboundTran.GetTranType() == '')
                    {
                        locNodeValue = _XmlNode.get_InnerText();
                        gTransTypePart2 = Global::strLRTrim(locNodeValue);
                    }
                }
                else if(locTempGreatGreatGrandParentNodeName == 'STMT'
                    && locTempGreatGrandParentNodeName == 'NTRY'
                    && locTempGrandParentNodeName == 'BKTXCD'
                    && locTempParentNodeName == 'PRTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    separatorPos = strScan(locNodeValue, '+', 1, strLen(locNodeValue));
                    if(separatorPos != 0)
                    {
                        gPrtryCD = subStr(locNodeValue, 1, separatorPos - 1);
                    }
                    else
                    {
                        gPrtryCD = Global::strLRTrim(locNodeValue);
                    }
                }
                break;
            case 'SUBFMLYCD':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'BKTXCD'
                    && locTempGrandParentNodeName == 'DOMN'
                    && locTempParentNodeName == 'FMLY')
                {
                    if(gSKS_BR_InboundTran.GetTranType() == '')
                    {
                    locNodeValue = _XmlNode.get_InnerText();
                    gTransTypePart3 = Global::strLRTrim(locNodeValue);
                    }
                }
                break;
            case 'AMT':
                if( locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'BAL')
                {
                    if(gEndingBalancePreReqMet == NoYes::yes)
                    {
                        locNodeValue = _XmlNode.get_InnerText();
                        gSKS_BR_InboundStmt.SetEndingBalance(SKS_PP_StringFormats::CurrStr2CurrNum(locNodeValue));
                        gSKS_BR_InboundStmt.SetCurrency(this.GetAttributeValue(_XmlNode, 'CCY'));
                    }
                }
                else if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'NTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetAmt(SKS_PP_StringFormats::CurrStr2CurrNum(locNodeValue));
                    gSKS_BR_InboundTran.SetCurrency(this.GetAttributeValue(_XmlNode, 'CCY'));
                }
                break;
            case 'NTRY':
                if(locTempParentNodeName == 'STMT')
                {
                    gSKS_BR_InboundTran = new SKS_BR_InboundTran();
                }
                break;
            case 'CHQNB':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'REFS')
                {
                    //CHQNB SHOULD BE USD IF IT EXISTS, SO ALWAYS SET IT
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetCustRefNbr(locNodeValue);
                }
                break;
            case 'ENDTOENDID':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'REFS')
                {
                    // if CHNB has aleady se this, then do not reset it.
                    if(strLen(gSKS_BR_InboundTran.GetCustRefNbr()) == 0)
                    {
                        locNodeValue = _XmlNode.get_InnerText();
                        gSKS_BR_InboundTran.SetCustRefNbr(locNodeValue);
                    }
                }
                break;
            case 'INSTRID':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'REFS')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetBankRefNbr(locNodeValue);
                }
                break;
            case 'CDTDBTIND':
                if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'NTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetCrDtFlag(locNodeValue);
                    gSKS_BR_InboundTran.SetIsCredit(strUpr(Global::strLRTrim(locNodeValue)) == 'CRDT');
                }
                else if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'BAL'
                    && gEndingBalancePreReqMet == NoYes::Yes)
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetCrDtFlag(locNodeValue);
                    gSKS_BR_InboundStmt.SetIsCredit(strUpr(Global::strLRTrim(locNodeValue)) == 'CRDT');
                }
                break;
            case 'NTRYREF':
                if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'NTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetDesc(locNodeValue);
                }
                break;
            case 'USTRD':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'RMTINF')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    if(gSKS_BR_InboundTran.GetDesc() != '')
                    {
                        gSKS_BR_InboundTran.AppendDesc('USTRD: ' + locNodeValue);
                    }
                    else
                    {
                        gSKS_BR_InboundTran.SetDesc('USTRD: ' + locNodeValue);
                    }
                }
                break;
            case 'ACCTSVCRREF':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'REFS')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetBankRefNbr(locNodeValue);
                }
                break;
            case 'ADDTLNTRYINF' :
                if(locTempParentNodeName == 'NTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    if(gSKS_BR_InboundTran.GetDesc() != '')
                    {
                        gSKS_BR_InboundTran.AppendDesc('ADDTLNTRYINF: ' + locNodeValue);
                    }
                    else
                    {
                        gSKS_BR_InboundTran.SetDesc('ADDTLNTRYINF: ' + locNodeValue);
                    }
                }
                break;
        }
    
        if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode = locXMLNodeListEnum.get_Current();
                locNodeName = locXMLNode.get_Name();
                if(strUpr(locNodeName) != '#TEXT')
                    this.processNode(locXMLNode);
            }
    
        }
        switch(strUpr(locTempNodeName))
        {
            case 'NTRY':
                //Priority is given to Prtry > CD.  if it exists, it becomes the trans type
                if(strLen(gPrtryCD) > 0)
                {
                    gSKS_BR_InboundTran.SetTranType(gPrtryCD);
                }
                else
                {
                    gSKS_BR_InboundTran.SetTranType(strLRTrim(gTransTypePart1) + '-'
                                                        + strLRTrim(gTransTypePart2) + '-'
                                                        +strLRTrim(gTransTypePart3));
                }
                //push the completed transaction onto the list.
                gSKS_BR_InboundStmt.PushTrans(gSKS_BR_InboundTran);
                gTransTypePart1 = '';
                gTransTypePart2 = '';
                gTransTypePart3 = '';
                gPrtryCD = '';
                gSKS_BR_InboundTran = null;
                break;
            case 'BAL':
                gEndingBalancePreReqMet = NoYes::No;
                break;
            case 'STMT':
                gSKS_BR_InboundFile.PushStmt(gSKS_BR_InboundStmt);
                gSKS_BR_InboundStmt = null;
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>