<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_PL_SEB_0511</Name>
	<SourceCode>
		<Declaration><![CDATA[
// SEB, Polish Domestic Payments PLI (PLS, PLD)
// Version 2011-05-16
//
// Supports transaction types: Standard payment order (110-51)
//
// Structure:
// Payment
/// <summary>
/// SKS_EFT_Format_PL_SEB_0511 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_PL_SEB_0511 extends SKS_EFT_Format
{
    #define.FormatVersion('20220527')
    #define.Comma(',')
    #define.DoubleQuote('"')
    #define.Separator('|')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 852;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Detail lines
            this.rec_Payment();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Payment
    /// </summary>
    /// <returns>true</returns>
    //Nbr   Description                                         Max     Type    Comment
    //1     Transaction type                                    3       N
    //2     Execution due date                                  8       N
    //3     Amount                                              15      N       Amount without decimal separator
    //4     Ordering party bank BSC                             8       N
    //5     Null field                                          1       N       Always 0
    //6     Ordering party account                              26      N       In quotes
    //7     Beneficiary account number                          26      N       In quotes
    //8     Ordering party name and address                     4*35    X       Lines separate with | and in quotes
    //9     Beneficiary name and address                        4*35    X       Lines separate with | and in quotes
    //10    Null field                                          1       N       Always 0
    //11    Beneficiary bank BSC                                8       N
    //12    Payment details                                     4*35    X       Lines separate with | and in quotes
    //13    Empty field                                         0       X       ""
    //14    Empty field                                         0       X       ""
    //15    Transaction classification                          2       N
    //16    Customer –to-bank information                       6*35    X       Customer to bank information
    boolean rec_Payment()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        BankAccountTable bankAccountTable;
        str strAmount;
        ;
    
        //1     Transaction type
        sb.Append('110');
        sb.Append(#Comma);
    
        //2     Execution due date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
        sb.Append(#Comma);
    
        //3     Amount
        strAmount = num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0);
        sb.Append(strRem(strAmount, '.'));
        sb.Append(#Comma);
    
        //4     Ordering party bank BSC
        select firstonly SWIFTNo, AccountID from bankAccountTable where bankAccountTable.AccountID == mSKS_EFT_FileDetail.BankAccountId;
        sb.Append(bankAccountTable.SWIFTNo);
        sb.Append(#Comma);
    
        //5     Null field
        sb.Append('0');
        sb.Append(#Comma);
    
        //6     Ordering party account
        sb.Append(#DoubleQuote);
        sb.Append(mSKS_EFT_FileDetail.BankBankAcct);
        sb.Append(#DoubleQuote);
        sb.Append(#Comma);
    
        //7     Beneficiary account number
        sb.Append(#DoubleQuote);
        sb.Append(mSKS_EFT_FileDetail.DepBankAcct);
        sb.Append(#DoubleQuote);
        sb.Append(#Comma);
    
        //8     Ordering party name and address
        sb.Append(#DoubleQuote);
        sb.Append(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName)); // Name 1
        sb.Append(#Separator);
        sb.Append(#Separator); // Name 2 not stored
        sb.Append(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr)); // Street
        sb.Append(#Separator);
        sb.Append(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity)); // Town
        sb.Append(#DoubleQuote);
        sb.Append(#Comma);
    
        //9     Beneficiary name and address
        sb.Append(#DoubleQuote);
        sb.Append(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName)); // Name 1
        sb.Append(#Separator);
        sb.Append(#Separator); // Name 2 not stored
        sb.Append(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr)); // Street
        sb.Append(#Separator);
        sb.Append(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity)); // Town
        sb.Append(#DoubleQuote);
        sb.Append(#Comma);
    
        //10    Null field
        sb.Append('0');
        sb.Append(#Comma);
    
        //11    Beneficiary bank BSC
        sb.Append(mSKS_EFT_FileDetail.DepSwiftNo);
        sb.Append(#Comma);
    
        //12    Payment details
        sb.Append(#DoubleQuote);
        sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
        sb.Append(#DoubleQuote);
        sb.Append(#Comma);
    
        //13    Empty field
        sb.Append(#DoubleQuote);
        sb.Append(#DoubleQuote);
        sb.Append(#Comma);
    
        //14    Empty field
        sb.Append(#DoubleQuote);
        sb.Append(#DoubleQuote);
        sb.Append(#Comma);
    
        //15    Transaction classification
        sb.Append(#DoubleQuote);
        sb.Append('51');
        sb.Append(#DoubleQuote);
        sb.Append(#Comma);
    
        //16    Customer –to-bank information
        sb.Append(#DoubleQuote);
        sb.Append(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference));
        sb.Append(#DoubleQuote);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>