<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_UK_BANKOFSCOTLAND_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_UK_BANKOFSCOTLAND_CSV Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_UK_BANKOFSCOTLAND_CSV Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220606';
        dataContractVersion = '1.0';
        conFormatID = ['UK-BANKOFSCOTLAND-CSV'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
        //ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
        //BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
        //FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
        //IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
        //WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
        //WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'United Kingdom - Bank of Scotland - CSV',0,'','','UK-BANKOFSCOTLAND-CSV',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'UK-BANKOFSCOTLAND-CSV',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
        //BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('UK-BANKOFSCOTLAND-CSV'):
                paymSpecList = this.getPaymSpecsMetaData_UK_BANKOFSCOTLAND_CSV();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_UK_BANKOFSCOTLAND_CSV</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_UK_BANKOFSCOTLAND_CSV()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Sterling Inter Account Transfer',1,'INT-TRF','','INT-TRF','TRADE PAY',0,'UK-BANKOFSCOTLAND-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Currency Inter Account Transfer',1,'CUR-TRF','','CUR-TRF','TRADE PAY',0,'UK-BANKOFSCOTLAND-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Bacs Single - Normal Domestic Payments Value',1,'NDP','','NDP','TRADE PAY',0,'UK-BANKOFSCOTLAND-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Faster Payments Service Value',1,'FPS','','FPS','TRADE PAY',0,'UK-BANKOFSCOTLAND-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Clearing House Automated Payment System Payment',1,'CHAPS','','CHAPS','TRADE PAY',0,'UK-BANKOFSCOTLAND-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International Moneymover',1,'INTL-MVR','','INTL-MVR','TRADE PAY',0,'UK-BANKOFSCOTLAND-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,2,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('UK-BANKOFSCOTLAND-CSV'):
                notesList = this.getNotesMetaData_UK_BANKOFSCOTLAND_CSV();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_UK_BANKOFSCOTLAND_CSV</Name>
				<Source><![CDATA[
    private container getNotesMetaData_UK_BANKOFSCOTLAND_CSV()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['UK-BANKOFSCOTLAND-CSV','INT-TRF','-Cash and bank management module > Bank Account :--Bank account number is required:--Sort code is required.::-Vendor Bank Account fields:--Bank account number is required.:--Routing number is required.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-BANKOFSCOTLAND-CSV','CUR-TRF','-Cash and bank management module > Bank Account :--Bank account number is required:--Sort code is required.::-Vendor Bank Account fields:--Bank account number is required.:--Routing number is required.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-BANKOFSCOTLAND-CSV','NDP','-Cash and bank management module > Bank Account :--Bank account number is required:--Sort code is required.::-Vendor Bank Account fields:--Bank account number is required.:--Routing number is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab > Beneficiary > Name is required.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-BANKOFSCOTLAND-CSV','FPS','-Cash and bank management module > Bank Account :--Bank account number is required:--Sort code is required.::-Vendor Bank Account fields:--Bank account number is required.:--Routing number is required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab > Beneficiary > Name is required.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-BANKOFSCOTLAND-CSV','CHAPS','-Cash and bank management module > Bank Account:--Bank account number is required:--Sort code is required.::-Vendor Bank Account fields:--IBAN and Bank account number are required.:--SWIFT code and Routing numbers are required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Beneficiary:--Beneficiary Name is required.:--Beneficiary Address 1 is required stored in the Address 1 field.:--Beneficiary Address 2 is required stored in the City field.:--Beneficiary Address 3 is required stored in the Country/region field.:--Advise Beneficiary stored in the Advice field.::-Beneficiary Bank:--Name is required.:--Bank Address 1 is required stored in the Address field.:--Bank Address 2 is required stored in the City field.:--Bank Address 3 is required stored in the Country/region field.::-Email address is stored in the Accounts payable > All Vendors > Select Vendor > Contact Information tab.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-BANKOFSCOTLAND-CSV','INTL-MVR','-Sterling Debit Account Flag stored in the TAS > Setup > Bank account > AP EFT+ > Wire/IAT ordering party tab.::-Cash and bank management module > Bank Account :--Bank account number is required:--Sort code is required.::-Vendor Bank Account fields:--IBAN and Bank account number are required.:--SWIFT code and Routing numbers are required.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Beneficiary section:--Beneficiary Name is required.:--Beneficiary Address 1 is required stored in the Address 1 field.:--Beneficiary Address 2 is required stored in the City field.:--Beneficiary Address 3 is required stored in the Country/region field.:--Advise Beneficiary stored in the Advice field.::-Beneficiary Bank section:--Name is required.:--Bank Address 1 is required stored in the Address field.:--Bank Address 2 is required stored in the Country/region field.:--Charging Instructions are stored in the Charges field of Other Notes section.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Bank Swift is stored in the Swift code field.:--Intermediary Bank Name is stored in the Name field.:--Intermediary Bank Address 1 stored in the Address 1 field.:--Intermediary Bank Account Number stored in the Account field.::-Email address is stored in the Accounts payable > All Vendors > Select Vendor > Contact Information tab.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['UK-BANKOFSCOTLAND-CSV','Charges','Charging Instructions']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['UK-BANKOFSCOTLAND-CSV','AdviseBeneficiary','Advise Beneficiary']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-BANKOFSCOTLAND-CSV','Charges','(1)T(2)F','1']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-BANKOFSCOTLAND-CSV','Charges','(1)F(2)T','2']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-BANKOFSCOTLAND-CSV','Charges','(1)T(2)T','3']);

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-BANKOFSCOTLAND-CSV','AdviseBeneficiary','Yes','Y']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-BANKOFSCOTLAND-CSV','AdviseBeneficiary','No','N']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('UK-BANKOFSCOTLAND-CSV'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_UK_BANKOFSCOTLAND_CSV();
                break;
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_UK_BANKOFSCOTLAND_CSV</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_UK_BANKOFSCOTLAND_CSV()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-BANKOFSCOTLAND-CSV','UK-BANKOFSCOTLAND-CSV','INTL-MVR','Charges','Charging Instructions',0,'Charges','',0,'','','Charging Instructions']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-BANKOFSCOTLAND-CSV','UK-BANKOFSCOTLAND-CSV','CHAPS','AdviseBeneficiary','Advise Beneficiary',0,'AdviseBeneficiary','',0,'','','Advise Beneficiary']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['UK-BANKOFSCOTLAND-CSV','UK-BANKOFSCOTLAND-CSV','FormatLookup','*','*','']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch(_formatID)
        {
            case ('UK-BANKOFSCOTLAND-CSV'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_UK_BANKOFSCOTLAND_CSV();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_UK_BANKOFSCOTLAND_CSV</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_UK_BANKOFSCOTLAND_CSV()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-BANKOFSCOTLAND-CSV','UK-BANKOFSCOTLAND-CSV','DebitAccountFlag','Sterling Debit Account Flag',1,'DebitAccountFlag','',0,'','X','REC INP > Sterling Debit Account Flag']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        if(gSKS_EFT_Bank.W01)
        {
            this.updateBankFields('DebitAccountFlag', gSKS_EFT_Bank.W01);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vednor code lookpus from BE0X and Legacu code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        if(gSKS_EFT_VendorPaym.WChargesIndic)
        {
            this.updateVendorFields('Charges', gSKS_EFT_VendorPaym.WChargesIndic, true);
        }
        if(gSKS_EFT_VendorPaym.WBeneAdvice)
        {
            this.updateVendorFields('AdviseBeneficiary', gSKS_EFT_VendorPaym.WBeneAdvice, true);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>