<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_BankStatementFileEmail</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The main class to create and send the SRS file
/// </summary>
using Microsoft.Dynamics.ApplicationPlatform.SSRSReportRuntime.Instrumentation;
class SKS_IHB_BankStatementFileEmail
{        

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAttachmentToMail</Name>
				<Source><![CDATA[
    public void addAttachmentToMail(
        CompanyBankAccountId        _accountId,
        TransDate                   _statementdate,
        BankAccountStatementNum     _statementNumber,
        RecId                       _recId,        
        SysMailerMessageBuilder     _messageBuilder
      )
    {
        SRSReportRunService                             srsReportRunService = new SrsReportRunService();
        Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService.ParameterValue[]  parameterValueArray;
        Map                                             reportParametersMap;
        SRSReportExecutionInfo                          executionInfo = new SRSReportExecutionInfo();
        System.Byte[]                                   reportBytes = null;        
        CompanyBankAccountId                            accountId = _accountId;
        TransDate                                       statementdate = _statementdate;
        BankAccountStatementNum                         statementNumber = _statementNumber;
        Filename                                        attachmentFileName = SKS_PP_Bank::find(accountId).IHB_AttachFileName;
        SKS_IHB_InhousePrintStatementContract           contract = new SKS_IHB_InhousePrintStatementContract();
        SKS_IHB_InhouseBankStatementController          ihbController;
        SRSPrintDestinationSettings                     settings;
        SRSProxy                                        srsProxy;
        Name                                            srsControllerClass = 'SKS_IHB_InhousePrintStatementController';
        Args                                            args = new Args();        

        attachmentFileName = strReplace(attachmentFileName,'%BankAccountId%', accountId);
        attachmentFileName = strReplace(attachmentFileName,'%StatementNumber%', statementNumber);               
        attachmentFileName = SKS_FileNameReplace::replaceDateFormatValue(attachmentFileName,statementdate,false); // 10265
        attachmentFileName = strReplace(attachmentFileName,'%LegalEntityId%', curExt());
        attachmentFileName = strReplace(attachmentFileName,'%BankAccountName%', BankAccountTable::find(accountId).Name);
        attachmentFileName = strReplace(attachmentFileName,'%BankAccountNumber%', BankAccountTable::find(accountId).AccountNum);

        contract.parmstatementTableRecId(_recId);
        contract.parmstatementTableAccountId(accountId);
        contract.parmstatementTablestmtDate(statementdate);
        args.menuItemType(MenuItemType::Output);
        // set the controller
        ihbController = SKS_IHB_InhouseBankStatementController::construct(srsControllerClass);       
        ihbController.parmReportContract().parmRdpContract(contract);
        // Provide printer settings
        settings = ihbController.parmReportContract().parmPrintSettings();
        settings.printMediumType(SRSPrintMediumType::Email);
        settings.fileFormat(SKS_PP_Bank::find(accountId).IHB_FileType);
        ihbController.parmReportContract().parmReportServerConfig(SRSConfiguration::getDefaultServerConfiguration());
        ihbController.parmReportContract().parmReportExecutionInfo(executionInfo);
            
        srsReportRunService.getReportDataContract(ihbController.parmreportcontract().parmReportName());
        srsReportRunService.preRunReport(ihbController.parmreportcontract());

        // 19239 Docentric integration
        SKS_RenderResult renderResult = new SKS_RenderResult();
        this.renderAttachment(ihbController, renderResult);
        reportBytes = renderResult.reportBytes();

        if (!reportBytes)
        {
            reportParametersMap = srsReportRunService.createParamMapFromContract(ihbController.parmReportContract());
            parameterValueArray = SrsReportRunUtil::getParameterValueArray(reportParametersMap);

            srsProxy = SRSProxy::constructWithConfiguration(ihbController.parmReportContract().parmReportServerConfig());
            // Actual rendering to byte array
            reportBytes = srsproxy.renderReportToByteArray(ihbController.parmreportcontract().parmreportpath(),
                                                      parameterValueArray,
                                                      settings.fileFormat(),
                                                      settings.deviceinfo());
        }

        _messageBuilder.addAttachment(new System.IO.MemoryStream(reportBytes), attachmentFileName);

    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAttachment</Name>
				<Source><![CDATA[
    // Docentric integration
    delegate void renderAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAPAttachment</Name>
				<Source><![CDATA[
    // Docentric integration
    delegate void renderAPAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>