<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CSIPAYSYSTEMS_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CSIPAYSYSTEMS_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CSIPAYSYSTEMS_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220629')
    #define.Separator(',')
    #define.DoubleQuotes('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
    
        //Header record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                // Details
                this.rec_Details(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    boolean rec_Header()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                     length
        //1	    Payee Identifier                25
        //2	    Payee Name                      50
        //3	    Email Address                   50
        //4	    Fax Number                      12
        //5	    Gross Amount                    10
        //6	    Discount Amount                 10
        //7	    Net Amount                      10
        //8	    Check Number                    10
        //9	    Invoice Number                  15
        //10	Invoice Date                    10
        //11	Payment Date                    10
        //12	Description                     60
        //13	Account Code                    60
        //14	Customer ID                     60
        //15	Address Line 1                  60
        //16	Address Line 2                  60
        //17	Address Line 3                  60
        //18	Address Line 4                  60
        //19	City                            60
        //20	State                           60
        //21	ZIP Code                        60
        //22	Country Code                    60
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1	    Payee Identifier                
        sb.Append(this.wrapField('Payee Identifier'));

        //2	    Payee Name                      
        sb.Append(this.wrapField('Payee Name'));

        //3	    Email Address                   
        sb.Append(this.wrapField('Email Address'));

        //4	    Fax Number                      
        sb.Append(this.wrapField('Fax Number'));

        //5	    Gross Amount                    
        sb.Append(this.wrapField('Gross Amount'));

        //6	    Discount Amount                 
        sb.Append(this.wrapField('Discount Amount'));

        //7	    Net Amount                      
        sb.Append(this.wrapField('Net Amount'));

        //8	    Check Number                    
        sb.Append(this.wrapField('Check Number'));

        //9	    Invoice Number                  
        sb.Append(this.wrapField('Invoice Number'));

        //10	Invoice Date                    
        sb.Append(this.wrapField('Invoice Date'));

        //11	Payment Date                    
        sb.Append(this.wrapField('Payment Date'));

        //12	Description                     
        sb.Append(this.wrapField('Description'));

        //13	Account Code                    
        sb.Append(this.wrapField('Account Code'));

        //14	Customer ID                     
        sb.Append(this.wrapField('Customer ID'));

        //15	Address Line 1                  
        sb.Append(this.wrapField('Address Line 1'));

        //16	Address Line 2 
        sb.Append(this.wrapField('Address Line 2'));

        //17	Address Line 3 
        sb.Append(this.wrapField('Address Line 3'));

        //18	Address Line 4   
        sb.Append(this.wrapField('Address Line 4'));

        //19	City    
        sb.Append(this.wrapField('City'));

        //20	State   
        sb.Append(this.wrapField('State'));

        //21	ZIP Code  
        sb.Append(this.wrapField('ZIP Code'));

        //22	Country Code   
        sb.Append(this.wrapField('Country Code', 0, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    boolean rec_Details(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                     length
        //1	    Payee Identifier                25
        //2	    Payee Name                      50
        //3	    Email Address                   50
        //4	    Fax Number                      12
        //5	    Gross Amount                    10
        //6	    Discount Amount                 10
        //7	    Net Amount                      10
        //8	    Check Number                    10
        //9	    Invoice Number                  15
        //10	Invoice Date                    10
        //11	Payment Date                    10
        //12	Description                     60
        //13	Account Code                    60
        //14	Customer ID                     60
        //15	Address Line 1                  60
        //16	Address Line 2                  60
        //17	Address Line 3                  60
        //18	Address Line 4                  60
        //19	City                            60
        //20	State                           60
        //21	ZIP Code                        60
        //22	Country Code                    60
        //---------------------------------------------------------------------------------

        Amount amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //1	    Payee Identifier                25
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.AccountNum), 60)); //SKS#DevOps:15823

        //2	    Payee Name                      50
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_VendAddress.BeneName, 50));

        //3	    Email Address                   50
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_VendAddress.Locator, 50));

        //4	    Fax Number                      12
        sb.Append(this.wrapField());

        //5	    Gross Amount                    10
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;        
        sb.Append(this.wrapField(num2str(amt * -1, 0, 2, 1, 0), 10));

        //6	    Discount Amount                 10
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1, 0, 2, 1, 0), 10));

        //7	    Net Amount                      10
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 10));

        //8	    Check Number                    10
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, 25));        //SKS#DevOps:15823

        //9	    Invoice Number                  15
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 15));

        //10	Invoice Date                    10
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash)));

        //11	Payment Date                    10
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Slash)));

        //12	Description                     60
        sb.Append(this.wrapField());

        //13	Account Code                    60
        sb.Append(this.wrapField());

        //14	Customer ID                     60
        sb.Append(this.wrapField());                 //SKS#DevOps:15823

        //15	Address Line 1                  60
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 60));

        //16	Address Line 2                  60
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 60));

        //17	Address Line 3                  60
        sb.Append(this.wrapField());

        //18	Address Line 4                  60
        sb.Append(this.wrapField());

        //19	City                            60
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 60));

        //20	State                           60
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState), 60));

        //21	ZIP Code                        60
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, 60));

        //22	Country Code                    60
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 60, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;
        ;
        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            if(text != '' && strContains(text, ','))
            {
                text = #DoubleQuotes + text + #DoubleQuotes + #Separator;
            }
            else
            {
                text = text + #Separator;
            }
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>