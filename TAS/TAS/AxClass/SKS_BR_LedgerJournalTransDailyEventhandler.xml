<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_LedgerJournalTransDailyEventhandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is being used for unlinking when GJ is deleted or modified any values in the account type is of Bank(FDD 13662)
/// </summary>
class SKS_BR_LedgerJournalTransDailyEventhandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PostJournal_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// After clicked on post button performing updating BR records
    /// </summary>
    /// <param name="sender">FormControl</param>
    /// <param name="e">FormControlEventType</param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransDaily, PostJournal), FormControlEventType::Clicked)]
    public static void PostJournal_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans locLedgerJournalTrans = sender.formRun().dataSource('LedgerJournalTrans').cursor();

        LedgerJournalTable lLedgerJournalTable;

        select firstonly lLedgerJournalTable where lLedgerJournalTable.JournalNum == locLedgerJournalTrans.JournalNum;

        SKS_BR_LedgerJournalTransDailyEventhandler::updateBRValues(lLedgerJournalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnValidatedDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating BR records while deleting general journal lines 
    /// </summary>
    /// <param name="sender">LedgerJournalTrans</param>
    /// <param name="e">FormDataSourceCancelEventArgs</param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransDaily, LedgerJournalTrans), FormDataSourceEventType::ValidatedDelete)]
    public static void LedgerJournalTrans_OnValidatedDelete(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource();
        LedgerJournalTrans ledgerjournalTrans = ledgerJournalTrans_ds.cursor();
        FormDataSourceCancelEventArgs args = e as FormDataSourceCancelEventArgs;

        boolean isValid;

        isValid = SKS_BR_LedgerJournalTransDailyEventhandler::Update_SKS_BR_BankTrans(ledgerJournalTrans);

        if(!isValid)
        {
            args.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AccountType_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// While modifying Account type value, updating BR records
    /// </summary>
    /// <param name="sender">FormDataObject</param>
    /// <param name="e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, AccountType), FormDataFieldEventType::Validating)]
    public static void AccountType_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource  ledgerJournalTrans_ds = sender.datasource();
        LedgerJournalTrans ledgerjournalTrans = sender.datasource().cursor();
        boolean isValid;

        isValid = SKS_BR_LedgerJournalTransDailyEventhandler::Update_SKS_BR_BankTrans(ledgerJournalTrans);

        if(!isValid)
        {
            ledgerJournalTrans_ds.reread();
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerDimension_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// While modifying Ledger Dimension value, updating BR records
    /// </summary>
    /// <param name="sender">FormDataObject</param>
    /// <param name="e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, LedgerDimension), FormDataFieldEventType::Validating)]
    public static void LedgerDimension_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource  ledgerJournalTrans_ds = sender.datasource();
        LedgerJournalTrans ledgerjournalTrans = sender.datasource().cursor();
        boolean isValid;

        isValid = SKS_BR_LedgerJournalTransDailyEventhandler::Update_SKS_BR_BankTrans(ledgerJournalTrans);

        if(!isValid)
        {
            ledgerJournalTrans_ds.reread();
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OffsetCompany_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// While modifying Offset Company value, updating BR records
    /// </summary>
    /// <param name="sender">FormDataObject</param>
    /// <param name="e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, OffsetCompany), FormDataFieldEventType::Validating)]
    public static void OffsetCompany_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource  ledgerJournalTrans_ds = sender.datasource();
        LedgerJournalTrans ledgerjournalTrans = sender.datasource().cursor();
        boolean isValid;

        isValid = SKS_BR_LedgerJournalTransDailyEventhandler::Update_SKS_BR_BankTrans(ledgerJournalTrans);

        if(!isValid)
        {
            ledgerJournalTrans_ds.reread();
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OffsetLedgerDimension_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// While modifying Offset LedgerDimension value, updating BR records
    /// </summary>
    /// <param name="sender">FormDataObject</param>
    /// <param name="e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, OffsetLedgerDimension), FormDataFieldEventType::Validating)]
    public static void OffsetLedgerDimension_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource  ledgerJournalTrans_ds = sender.datasource();
        LedgerJournalTrans ledgerjournalTrans = sender.datasource().cursor();
        boolean isValid;

        isValid = SKS_BR_LedgerJournalTransDailyEventhandler::Update_SKS_BR_BankTrans(ledgerJournalTrans);

        if(!isValid)
        {
            ledgerJournalTrans_ds.reread();
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AmountCurCredit_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// While modifying AmountCurCredit value, updating BR records
    /// </summary>
    /// <param name="sender">FormDataObject</param>
    /// <param name="e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, AmountCurCredit), FormDataFieldEventType::Validating)]
    public static void AmountCurCredit_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource  ledgerJournalTrans_ds = sender.datasource();
        LedgerJournalTrans ledgerjournalTrans = sender.datasource().cursor();
        boolean isValid;

        isValid = SKS_BR_LedgerJournalTransDailyEventhandler::Update_SKS_BR_BankTrans(ledgerJournalTrans);

        if(!isValid)
        {
            ledgerJournalTrans_ds.reread();
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AmountCurDebit_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// While modifying AmountCurDebit value, updating BR records
    /// </summary>
    /// <param name="sender">FormDataObject</param>
    /// <param name="e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, AmountCurDebit), FormDataFieldEventType::Validating)]
    public static void AmountCurDebit_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource  ledgerJournalTrans_ds = sender.datasource();
        LedgerJournalTrans ledgerjournalTrans = sender.datasource().cursor();
        boolean isValid;

        isValid = SKS_BR_LedgerJournalTransDailyEventhandler::Update_SKS_BR_BankTrans(ledgerJournalTrans);

        if(!isValid)
        {
            ledgerJournalTrans_ds.reread();
            ledgerJournalTrans_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Update_SKS_BR_BankTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating SKS_BR_BankTrans after deleted/modified lines 
    /// </summary>
    /// <param name = "_ledgerJournalTrans">LedgerJournalTrans</param>
    /// <returns>True or False</returns>
    public static boolean Update_SKS_BR_BankTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        if(SKS_PP_Setup::find().ModBR)
        {
            DialogButton    diagButton;
            SKS_BR_BankTran locSKS_BR_BankTran;

            select firstonly locSKS_BR_BankTran where locSKS_BR_BankTran.PaymentJournalNum == _ledgerJournalTrans.JournalNum &&
                locSKS_BR_BankTran.Voucher == _ledgerJournalTrans.Voucher;

            if(locSKS_BR_BankTran)
            {
                LedgerJournalTrans lLedgerJournalTrans;

                select firstonly lLedgerJournalTrans
                    order by LineNum asc
                    where lLedgerJournalTrans.Voucher == _ledgerJournalTrans.Voucher;

                if(lLedgerJournalTrans.RecId == _ledgerJournalTrans.RecId)
                {
                    diagButton = box::okCancel(strFmt("@SKS:SKGBRUnlinkingValidationMsg", locSKS_BR_BankTran.AccountId, locSKS_BR_BankTran.ImportedStatementNum, locSKS_BR_BankTran.ImportedStatementDate),
                        DialogButton::Ok, "@SKS311");

                    if(diagButton == DialogButton::Ok)
                    {
                        SKS_BR_BankTran lSKS_BR_BankTran;

                        if(SKS_PP_Setup::find().BRManualEntry == NoYes::Yes)
                        {
                            select forupdate lSKS_BR_BankTran where lSKS_BR_BankTran.PaymentJournalNum == _ledgerJournalTrans.JournalNum &&
                                lSKS_BR_BankTran.Voucher == _ledgerJournalTrans.Voucher;

                            SKS_LB_JournalARApplic lSKS_LB_JournalARApplic;

                            select count(RecId) from lSKS_LB_JournalARApplic
                                where lSKS_LB_JournalARApplic.SKS_BR_BankTran == lSKS_BR_BankTran.RecId;

                            ttsbegin;
                            if(lSKS_LB_JournalARApplic.RecId == 0)
                            {
                                lSKS_BR_BankTran.MatchIndicator = SKS_BR_MatchIndicator::Red;
                            }

                            lSKS_BR_BankTran.JournalName = '';
                            lSKS_BR_BankTran.IsManual = NoYes::No;
                            lSKS_BR_BankTran.PaymentJournalNum = '';
                            lSKS_BR_BankTran.Voucher = '';
                            lSKS_BR_BankTran.update();
                            ttscommit;
                        }
                        else
                        {
                            select forupdate lSKS_BR_BankTran where lSKS_BR_BankTran.PaymentJournalNum == _ledgerJournalTrans.JournalNum &&
                                lSKS_BR_BankTran.Voucher == _ledgerJournalTrans.Voucher;

                            ttsbegin;
                            lSKS_BR_BankTran.JournalName = '';
                            lSKS_BR_BankTran.IsManual = NoYes::No;
                            lSKS_BR_BankTran.PaymentJournalNum = '';
                            lSKS_BR_BankTran.Voucher = '';
                            lSKS_BR_BankTran.MatchIndicator = SKS_BR_MatchIndicator::Red;
                            lSKS_BR_BankTran.update();
                            ttscommit;

                            SKS_LB_JournalARApplic locSKS_LB_JournalARApplic;

                            ttsBegin;
                            while select forUpdate locSKS_LB_JournalARApplic
                                where locSKS_LB_JournalARApplic.SKS_BR_BankTran == lSKS_BR_BankTran.RecId
                            {
                                locSKS_LB_JournalARApplic.delete();
                            }
                            ttsCommit;
                        }
                    }
                    else
                    {
                        return false;
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBRValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// After Genearal journal post, updating SKS_BR_BankTran and BankAccountStatement table values
    /// </summary>
    /// <param name = "ledgerJournalTable">LedgerJournalTable</param>
    /// <returns>Returning true always</returns>
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer locBankAccountStatement is selected forUpdate and is passed to other methods where it is modified.")]
    public static boolean updateBRValues(LedgerJournalTable ledgerJournalTable)
    {
        SKS_PP_Setup                locSKS_PP_Setup; //13903
        SKS_BR_BankTran             sKS_BR_BankTran;
        LedgerJournalTrans          ledgerJournalTransLoc;
        BankAccountStatement        locBankAccountStatement;
        boolean                     bankrecFound = false;
        str     bankStmtNum;
        str     bankAccountId;

        locSKS_PP_Setup = SKS_PP_Setup::find();

        if(locSKS_PP_Setup.ModBR) // Only do logic if BR is active
        {
            if (ledgerJournalTable.Posted == NoYes::Yes &&
                 ledgerJournalTable.JournalType == LedgerJournalType::Daily)
            {
                while select ledgerJournalTransLoc
                    where ledgerJournalTransLoc.JournalNum == ledgerJournalTable.JournalNum
                        && ledgerJournalTransLoc.SKS_BR_BankTranRecId
                join sKS_BR_BankTran
                    where sKS_BR_BankTran.RecId == ledgerJournalTransLoc.SKS_BR_BankTranRecId
                    && sKS_BR_BankTran.MatchIndicator != SKS_BR_MatchIndicator::Green
                    && sKS_BR_BankTran.Voucher == ledgerJournalTransLoc.Voucher
                {
                    bankrecFound = true;
                    bankStmtNum = sKS_BR_BankTran.ImportedStatementNum;
                    bankAccountId = sKS_BR_BankTran.AccountId;
                    SKS_BR_BankTran locSKS_BR_BankTran_Posted;

                    if (sKS_BR_BankTran)// SKS_Bug_10239
                    {
                        SKS_BR_LedgerJournalTransDailyEventhandler::MatchExistingBankTransactions(sKS_BR_BankTran);

                        ttsBegin;
                        
                        locSKS_BR_BankTran_Posted = sKS_BR_BankTran;

                        if(locSKS_BR_BankTran_Posted.RecId)
                        {
                            locSKS_BR_BankTran_Posted.selectForUpdate(true);
                            if (locSKS_BR_BankTran_Posted.ManualReconciliationID == emptyGuid())
                            {
                                locSKS_BR_BankTran_Posted.ManualReconciliationID = newGuid();
                            }
                            //Updating the recid of the journal and link in imported transaction.
                            locSKS_BR_BankTran_Posted.LedgerJournalRecId = ledgerJournalTransLoc.RecId;
                            locSKS_BR_BankTran_Posted.Voucher = ledgerJournalTransLoc.Voucher;
                            locSKS_BR_BankTran_Posted.MatchedType = SKS_BR_MatchedType::GLCreated;
                            locSKS_BR_BankTran_Posted.PaymentJournalNum = ledgerJournalTable.JournalNum;
                            locSKS_BR_BankTran_Posted.MatchConfidence = 100;
                            locSKS_BR_BankTran_Posted.Matched = NoYes::Yes;
                            locSKS_BR_BankTran_Posted.MatchIndicator = SKS_BR_MatchIndicator::Green;
                            locSKS_BR_BankTran_Posted.AccountStatementNum = locSKS_BR_BankTran_Posted.ImportedStatementNum;
                            locSKS_BR_BankTran_Posted.AccountStatementDate = locSKS_BR_BankTran_Posted.ImportedStatementDate;

                            changeCompany(sKS_BR_BankTran.company())
                            {
                                locSKS_BR_BankTran_Posted.update();
                            }
                        }
                        ttsCommit;

                        BankAccountTrans        locBankAccountTransUpd;

                        changeCompany(locSKS_BR_BankTran_Posted.company()) //7484
                        {
                            ttsBegin;
                            while select forupdate locBankAccountTransUpd
                                where locBankAccountTransUpd.Voucher == ledgerJournalTransLoc.Voucher
                                && locBankAccountTransUpd.AccountId == locSKS_BR_BankTran_Posted.AccountId    //8288
                            {
                                if(locBankAccountTransUpd)
                                {
                                    locBankAccountTransUpd.AccountStatement = locSKS_BR_BankTran_Posted.ImportedStatementNum;
                                    locBankAccountTransUpd.AccountStatementDate = locSKS_BR_BankTran_Posted.ImportedStatementDate;
                                    locBankAccountTransUpd.SKS_BR_ManualReconciliationID = locSKS_BR_BankTran_Posted.ManualReconciliationID;
                                    locBankAccountTransUpd.Included = NOYES::Yes;
                                    locBankAccountTransUpd.update();
                                }
                            }
                            ttscommit;
                        }
                    }
                }

                if(bankrecFound)
                {
                    int64   importUnmatchedCountCnt = 0;
                    real unreconciledAmountAmt = 0;

                    if(SKS_PP_Bank::find(bankAccountId).BRAutoReconcile == NoYes::Yes)
                    {
                        select forupdate crosscompany * from locBankAccountStatement where locBankAccountStatement.AccountStatementNum == bankStmtNum;

                        importUnmatchedCountCnt = SKS_BR_BankAcctStmt::importUnmatchedCount(locBankAccountStatement);
                        unreconciledAmountAmt = SKS_BR_BankAcctStmt::unreconciledAmount(locBankAccountStatement);

                        if (importUnmatchedCountCnt == 0
                            && unreconciledAmountAmt == 0
                            && locBankAccountStatement.ReconcileDate == dateNull())
                        {
                            changecompany(locBankAccountStatement.company())
                            {
                                SKS_BR_BankAcctStmt::reconcileStatementForAcct(locBankAccountStatement);
                            }
                        }
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MatchExistingBankTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stamping existing bank transaction if found
    /// </summary>
    /// <param name = "_SKS_BR_BankTran">SKS_BR_BankTran</param>
    private static void MatchExistingBankTransactions(SKS_BR_BankTran _SKS_BR_BankTran)
    {
        BankAccountTrans    locBankAccountTrans;
        SKS_BR_BankTran     locSKS_BR_BankTranUpd;
        boolean             isMapped = true;

        ttsBegin;
        while select forUpdate locBankAccountTrans
            where locBankAccountTrans.SKS_BR_IsSelected == NoYes::Yes
                && locBankAccountTrans.SKS_BR_ManualReconciliationID == _SKS_BR_BankTran.ManualReconciliationID
                && locBankAccountTrans.AccountId == _SKS_BR_BankTran.AccountId    //8288
        {
            locBankAccountTrans.AccountStatement = _SKS_BR_BankTran.ImportedStatementNum;
            locBankAccountTrans.AccountStatementDate = _SKS_BR_BankTran.ImportedStatementDate;
            locBankAccountTrans.Included = NOYES::Yes;
            locBankAccountTrans.update();
            SKS_BR_Matching::ClearCheck(locBankAccountTrans,locBankAccountTrans.AccountStatementDate);
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>