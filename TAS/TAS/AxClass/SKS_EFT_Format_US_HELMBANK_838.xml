<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_HELMBANK_838</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_HELMBANK_838 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_HELMBANK_838 extends SKS_EFT_Format
{
    #define.FormatVersion('20220630')
    #define.PAYMENT('PAYMENT')
    
    BankAccountTable        mBankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get Bank account
            mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);

            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Company identification record
            this.rec_TransactionFile();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TransactionFile</Name>
				<Source><![CDATA[
    public boolean rec_TransactionFile()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //  1    Originator account Number                  (  1-  15)
        sb.Append(SKS_PP_StringFormats::strFill(15, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  2   Amount of the transfer                      (  16-  35)
        sb.Append(SKS_PP_StringFormats::strFill(20, num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0), 
            SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  3   Currency Code                               (  36-  38)
        sb.Append(SKS_PP_StringFormats::strFill(3, mBankAccountTable.CurrencyCode == 'USD' ? mBankAccountTable.CurrencyCode : '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  4   Amount of foreign currency                  (  39-  58)
        if (mSKS_EFT_FileDetail.PaymentCurrencyCode != 'USD')
        {
            sb.Append(SKS_PP_StringFormats::strFill(20, num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0), SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        }
        
        //  5   Foreign Currency Code                       (  59-  61)
        sb.Append(SKS_PP_StringFormats::strFill(3, (mSKS_EFT_FileDetail.PaymentCurrencyCode == 'USD' ? '' : mSKS_EFT_FileDetail.PaymentCurrencyCode), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  6   Internal Banking Code                       (  62-  64)
        sb.Append('CTP');

        //  7   Internal Bank Code                          (  65-  65)
        sb.Append('0');

        //  8   Contact information                         (  66-  115)
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  9   Payment purpose                             (  116-  116)
        sb.Append('0');

        //  10   Name of the intermediary bank              (  117-  151)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WIntBankName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  11   Route Code                                 (  152-  152)
        if (mSKS_EFT_VendorPaym.WIntBankId)
        {
            sb.Append('F');
        }
        else if(mSKS_EFT_VendorPaym.WIntBankSwift)
        {
            sb.Append('B');
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 12    ABA/SWIFT of the intermediary bank         (  153-  186)
        if (mSKS_EFT_VendorPaym.WIntBankId)
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_VendorPaym.WIntBankId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_VendorPaym.WIntBankSwift, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //  13    Address of the intermediary bank          (  187-  221)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WIntBankAddr, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 14    Address of the intermediary bank           (  222-  256)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WIntBankAddr2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 15    Address of the intermediary bank           (  257-  291)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WIntBankCity, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 16   Does not apply     (  292-  326)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 17    Country Code of intermediary Bank          (  327-  328)
        sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 18    Name of Beneficiary Bank                   (  329-  363)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WBenBankName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  19   Route Code                                 (  364-  364)
        if (mSKS_EFT_FileDetail.DepBankTransit)
        {
            sb.Append('F');
        }
        else if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            sb.Append('B');
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 20   Beneficiary Bank Account/ABA/SWIFT number   (  365-  398)
        if (mSKS_EFT_FileDetail.DepBankTransit)
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 21   Address of Beneficiary Bank                 (  399-  433)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WBenBankAddr, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 22   Address of Beneficiary Bank                 (  434-  468)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WBenBankCity, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 23   Address of Beneficiary Bank                 (  469-  503)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 24   Beneficiary Bank Country Code               (  504-  505)
        sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 25   Name of transfer beneficiary                (  506-  540)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WBeneName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 26    Account Identifier Code                    (  541-  541)
        sb.Append('D');

        // 27   Beneficiary Account Number                  (  542-  575)
        sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  28  Beneficiary's Address                       (  576-  610)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WBeneAddr, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //  29  Beneficiary's Address                       (  611-  645)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WBeneAddr2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //  30  Beneficiary's Address                       (  646-  680)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_VendorPaym.WBeneCity, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  31  Beneficiary Country Code                    (  681-  682)
        sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  32 Information to the beneficiary on payment    (  683-  717)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  33 Information to the beneficiary on payment    (  718-  752)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  34 Information to the beneficiary on payment    (  753-  787)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  35 Information to the beneficiary on payment        (  788-  822)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  36 REFERENCIA INTERNA DEL ORIGINADOR                (  823-  838)
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>