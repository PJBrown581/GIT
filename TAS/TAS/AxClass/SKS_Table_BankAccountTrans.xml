<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_BankAccountTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_BankAccountTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EH_insert_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(BankAccountTrans), tableMethodStr(BankAccountTrans, insert))]
    public static void EH_insert_pre(XppPrePostArgs _args)
    {
        BankAccountTrans locBankAccountTrans;
        LedgerJournalTrans  ledgerJournalTrans;
        SKS_CCR_BankTran    sks_CCR_BankTranCurrAdjument, sks_CCR_BankTranReverseCurrAdjument; // SKS_FDD_13903
        
        locBankAccountTrans = _args.getThis();
        if (locBankAccountTrans.Cancel == noyes::Yes)
        {
            locBankAccountTrans.SKS_BR_ManualReconciliationID = emptyGuid();
            locBankAccountTrans.SKS_BR_BankTranRecId = 0;
            locBankAccountTrans.SKS_BR_IntermMatch = NoYes::No;
            // SKS_FDD_13903 -->
            locBankAccountTrans.SKS_CCR_ManualReconciliationID = emptyGuid();
            locBankAccountTrans.SKS_CCR_BankTranRecId = 0;
            locBankAccountTrans.SKS_CCR_IntermMatch = NoYes::No;
            // SKS_FDD_13903 <--
        }       
      
        if (locBankAccountTrans.SourceTableId == tableNum(LedgerJournalTrans))
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(locBankAccountTrans.SourceRecId, false);
            if (ledgerJournalTrans.DocumentDate)
            {
                locBankAccountTrans.SKS_IHB_ValueDate = ledgerJournalTrans.DocumentDate;
            }
            else
            {
                locBankAccountTrans.SKS_IHB_ValueDate = locBankAccountTrans.TransDate;
            }
            // SKS_FDD_13903 -->
            select AccountStatementNum, AccountStatementDate from sks_CCR_BankTranCurrAdjument
                where sks_CCR_BankTranCurrAdjument.CurrencyAdjusmentLedgerJournalRecId == ledgerJournalTrans.RecId;
            // If transaction was posted for currency adjustment update the statment number, date and mark as included
            if(sks_CCR_BankTranCurrAdjument)
            {
                locBankAccountTrans.AccountStatement     = sks_CCR_BankTranCurrAdjument.AccountStatementNum;
                locBankAccountTrans.Included             = NoYes::Yes;
                locBankAccountTrans.AccountStatementDate = sks_CCR_BankTranCurrAdjument.AccountStatementDate;
                locBankAccountTrans.SKS_CCR_IsCurrencyAdjustment = NoYes::Yes;
                locBankAccountTrans.SKS_CCR_IsPartOfReversal = NoYes::Yes;
            }
            // If transaction was posted for reverse currency adjustment update the statment number, date and mark as included
            select AccountStatementNum, AccountStatementDate from sks_CCR_BankTranReverseCurrAdjument
                where sks_CCR_BankTranReverseCurrAdjument.ReverseCurrencyAdjusmentLedgerJournalRecId == ledgerJournalTrans.RecId;
            if(sks_CCR_BankTranReverseCurrAdjument)
            {
                locBankAccountTrans.AccountStatement     = sks_CCR_BankTranReverseCurrAdjument.AccountStatementNum;
                locBankAccountTrans.Included             = NoYes::Yes;
                locBankAccountTrans.AccountStatementDate = sks_CCR_BankTranReverseCurrAdjument.AccountStatementDate;
                locBankAccountTrans.SKS_CCR_IsCurrencyAdjustment = NoYes::Yes;
            }
            // SKS_FDD_13903 <--*/
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_update_pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(BankAccountTrans), tableMethodStr(BankAccountTrans, update))]
    public static void EH_update_pre(XppPrePostArgs _args)
    {
        #SKS_Global
        BankAccountTrans bankAccountTrans;
        ;
        bankAccountTrans = _args.getThis();
    
        // When a record is marked for eBankRec pre-match/match or cleared
        // remove it from the match duplicate tables.
        if ((bankAccountTrans.Included && !bankAccountTrans.orig().Included) ||
            (bankAccountTrans.SKS_BR_ManualReconciliationID != str2Guid(#EmptyGuidString) && bankAccountTrans.orig().SKS_BR_ManualReconciliationID == str2Guid(#EmptyGuidString)))
        {
            SKS_BR_Matching::duplicateDeleteOther(bankAccountTrans.RecId);
        }

        if ((bankAccountTrans.Included && !bankAccountTrans.orig().Included) ||
            (bankAccountTrans.SKS_CCR_ManualReconciliationID != str2Guid(#EmptyGuidString) && bankAccountTrans.orig().SKS_CCR_ManualReconciliationID == str2Guid(#EmptyGuidString)))
        {
            SKS_CCR_Matching::duplicateDeleteOther(bankAccountTrans.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>