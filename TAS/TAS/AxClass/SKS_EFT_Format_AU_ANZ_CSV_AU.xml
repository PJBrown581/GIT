<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AU_ANZ_CSV_AU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AU_ANZ_CSV_AU  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_AU_ANZ_CSV_AU  extends SKS_EFT_Format
{
    #define.FormatVersion('20220414')
    #define.DOM_WIRE('DOM')
    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            //  Detail Record
            this.rec_Detail();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    public boolean rec_Detail()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Reserved
        //2     Title of account to be CREDITED OR DEBITED
        //3     BSB of account to be CREDITED or DEBITED
        //4     Account number to be CREDITED or DEBITED
        //5     Amount to be CREDITED or DEBITED
        //6     Lodgement Reference Produced on the recipient’s Account Statement
        //---------------------------------------------------------------------------------

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Reserved
        sb.Append(this.wrapField());

        //2     Title of account to be CREDITED OR DEBITED
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), 32));

        //3     BSB of account to be CREDITED or DEBITED
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_BenBank.BenBankBranch, 6));

        //4     Account number to be CREDITED or DEBITED
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 9));

        //5     Amount to be CREDITED or DEBITED
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0), 11));

        //6     Lodgement Reference Produced on the recipient’s Account Statement
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, 11, false));

        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0,  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            if(_field != '' && strContains(_field, ',') && _fieldLength > 0)
            {
                text = #DoubleQuote + subStr(_field, 1, _fieldLength) + #DoubleQuote + #Separator;
            }
            else
            {
                text = subStr(_field, 1, _fieldLength) + #Separator;
            }
        }
        else
        {
            text = subStr(_field, 1, _fieldLength);
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>