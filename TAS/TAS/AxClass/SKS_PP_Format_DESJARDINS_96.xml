<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_DESJARDINS_96</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_DESJARDINS_96 Extends SKS_PP_Format_BankGroup
{
    int sequenceNum; 
    int issuedChecks;
    int cancelledChecks;
    real amt;
    str ItemType;
    BankAccount bankAccount;
    SKS_PP_FileNbr  sKS_PP_FileNbr;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    //  Detail Record 
    //  1       
    //  1       1       Alphanumeric        Record Identification
    //  2-10    9       Numeric             Record Sequence Number        
    //  11-25   15      Numeric             Issued Cheque Number
    //  26-38   13      Numeric             Issued Cheque Value (2 decimals)
    //  39-53   15      Alphanumeric        Customer Reference or blanks
    //  54-83   30      Alphanumeric        Name of cheque beneficiary or blanks
    //  84-96   13      Alphanumeric        Blanks
    protected str txtDetail()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();        
        sequenceNum++;

        if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'D';
            issuedChecks++;
        }
        else
        {
            ItemType = 'E';
            cancelledChecks++;
        }
            
        //  1       Record Identification
        sb.Append(ItemType);

        //  2       Record Sequence Number
        sb.Append(SKS_PP_StringFormats::strFill(9, int2Str(sequenceNum), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        //  3       Issued Cheque Number
        sb.Append(SKS_PP_StringFormats::strFill(15, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        //  4       Issued Cheque Value        
        sb.Append(SKS_PP_StringFormats::strFill(13, strRem(Num2Str(abs(mSKS_PP_FileDetail.ChkCuryAmt), 0,2,1,0), '.'), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));
        amt += abs(mSKS_PP_FileDetail.ChkCuryAmt);

        if(ItemType == 'D')
        {
            //  5       Customer Reference
            sb.Append(SKS_PP_StringFormats::strFill(15, mSKS_PP_FileDetail.VendorAccount, SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));

            //  6       Name of cheque beneficiary
            sb.Append(SKS_PP_StringFormats::strFill(30, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));

            //  7       Blanks
            sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(58, '', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));
        }        
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    //  Header Record
    //  1       1       Alphanumeric    Record Identification    
    //  2-10    9       Numeric         Record Sequence Number
    //  11-17   7       Numeric         Account Number
    //  18-22   5       Numeric         Batch Number                                               
    //  23-29   7       Numeric         Cheque Issued Date
    //  30-96   67      Alphanumeric    Blanks
    
    protected str txtGroupHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sequenceNum++;
        amt = 0;
        issuedChecks = 0;
        cancelledChecks = 0;

        // 1        Record Identification
        sb.Append('A');

        //  2       Record Sequence Number
        sb.Append(SKS_PP_StringFormats::strFill(9, int2Str(sequenceNum), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        //  3       Account Number
        sb.Append(SKS_PP_StringFormats::strFill(7, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));
        bankAccount = mSKS_PP_FileDetail.BnkBankAcct;

        //  4       Batch Number        
        sKS_PP_FileNbr = subStr(mSKS_PP_FileDetail.FileNbr, strLen(mSKS_PP_FileDetail.FileNbr),-5);        
        sb.Append(SKS_PP_StringFormats::strFill(5, sKS_PP_FileNbr, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        //  5       Cheque Issued Date        
        sb.Append(str2Int(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate, DateSeparator::None)) - 19000000);

        //  6       Blanks
        sb.Append(SKS_PP_StringFormats::strFill(67, '', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));
        
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    //  Control Record
    //  1       1       Alphanumeric        Record Identification
    //  2-10    9       Numeric             Record Sequence Number
    //  11-17   7       Numeric             Account Number
    //  18-22   5       Numeric             Batch Number
    //  23-31   9       Numeric             Number of issued cheques
    //  32-44   13      Numeric             Total value of issued cheques
    //  45-96   52      Alphanumeric        Blanks

    protected str txtGroupTrailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        sequenceNum++;

        //  1       Record Identification
        sb.Append('Z');

        //  2       Record Sequence Number
        sb.Append(SKS_PP_StringFormats::strFill(9, int2Str(sequenceNum), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        //  3       Account Number
        sb.Append(SKS_PP_StringFormats::strFill(7, bankAccount, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        //  4       Batch Number
        sb.Append(SKS_PP_StringFormats::strFill(5, sKS_PP_FileNbr, SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        //  5       Number of issued cheques
        if(ItemType == 'D')
        {
            sb.Append(SKS_PP_StringFormats::strFill(9,int2str(issuedChecks), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));            
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(9,int2str(cancelledChecks), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));
        }
        //  6       Total value of issued/cancelled cheques
        sb.Append(SKS_PP_StringFormats::strFill(13, strRem(Num2Str(amt,0,2,1,0), '.'), SKS_PP_FillCharacter::Zero, SKS_PP_Fillside::Left));

        //  7       Blanks
        sb.Append(SKS_PP_StringFormats::strFill(52,'', SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Left));

        sequenceNum = 0;

        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>