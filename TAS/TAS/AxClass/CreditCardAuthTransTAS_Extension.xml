<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardAuthTransTAS_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(CreditCardAuthTrans))]
final class CreditCardAuthTransTAS_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sKS_CC_FindRefundCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// <param name="_creditCardAuthorization">
    /// The authorization used to find the original capture.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAuthTrans sKS_CC_FindRefundCharge(CreditCardAuthorization _creditCardAuthorization, boolean _forUpdate = false)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        creditCardAuthTrans.selectForUpdate(_forUpdate);

        select creditCardAuthTrans
        where creditCardAuthTrans.Authorization == _creditCardAuthorization &&
            (creditCardAuthTrans.ApprovalType == CreditCardOperation::CaptureAfterAuthorize
                || creditCardAuthTrans.ApprovalType == CreditCardOperation::AuthorizeAndCapture) &&
            creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved &&
            creditCardAuthTrans.ApprovalVoid == NoYes::No;

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_FindAuthTransWithPFTransKey</Name>
				<Source><![CDATA[
    static CreditCardAuthTrans sKS_CC_FindAuthTransWithPFTransKey(CreditCardAuthorization _creditCardAuthorization, CreditCardOperation _approvalType)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        if (_creditCardAuthorization)
        {
            select creditCardAuthTrans
                where creditCardAuthTrans.Authorization == _creditCardAuthorization
                    && creditCardAuthTrans.ApprovalType == _approvalType
                    && !creditCardAuthTrans.ApprovalExpired
                    && !creditCardAuthTrans.ApprovalVoid
                    && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved;

            if (!creditCardAuthTrans)
            {            
                select creditCardAuthTrans
                    where creditCardAuthTrans.SKS_CC_ApprovalCode == _creditCardAuthorization
                        && creditCardAuthTrans.ApprovalType == _approvalType
                        && !creditCardAuthTrans.ApprovalExpired
                        && !creditCardAuthTrans.ApprovalVoid
                        && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved;
            }
        }

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_FindValidCaptureOrRefundApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// <param name="_sKS_CC_CustPaymTableRecId">
    /// The SKS_CC customer credit card payment record ID to find if available; otherwise, zero.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAuthTrans sKS_CC_FindValidCaptureOrRefundApproval(RecId _sKS_CC_CustPaymTableRecId,
                                                                   boolean _forUpdate = false,
                                                                   ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        if(_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            creditCardAuthTrans.concurrencyModel(_concurrencyModel);
        }

        creditCardAuthTrans.selectForUpdate(_forUpdate);

        if (_sKS_CC_CustPaymTableRecId)
        {
            select creditCardAuthTrans
            where creditCardAuthTrans.SKS_CC_CustPaymTable == _sKS_CC_CustPaymTableRecId
                    && (creditCardAuthTrans.ApprovalType == CreditCardOperation::AuthorizeAndCapture ||
                        creditCardAuthTrans.ApprovalType == CreditCardOperation::CaptureAfterAuthorize ||
                        creditCardAuthTrans.ApprovalType == CreditCardOperation::Refund)
                    && !creditCardAuthTrans.ApprovalExpired
                    && !creditCardAuthTrans.ApprovalVoid
                    && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved;
        }

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_FindValidPreApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// <param name="_sKS_CC_CustPaymTableRecId">
    /// The SKS_CC customer credit card payment record ID to find if available; otherwise, zero.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAuthTrans sKS_CC_FindValidPreApproval(RecId _sKS_CC_CustPaymTableRecId)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        if (_sKS_CC_CustPaymTableRecId)
        {
            CreditCardAuthTrans::sKS_CC_UpdateExpiredApproval(_sKS_CC_CustPaymTableRecId);

            select creditCardAuthTrans
            where creditCardAuthTrans.SKS_CC_CustPaymTable == _sKS_CC_CustPaymTableRecId
                    && creditCardAuthTrans.ApprovalType == CreditCardOperation::Authorize
                    && !creditCardAuthTrans.ApprovalExpired
                    && !creditCardAuthTrans.ApprovalVoid
                    && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved;
        }

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_lastLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the last line number of the credit card transaction.
    /// </summary>
    /// <param name="_sKS_CC_CustPaymTable">
    /// The Record ID of the <b>SKS_CC_CustPaymTable</b> line number to find.
    /// </param>
    /// <returns>
    /// The line number.
    /// </returns>
    static LineNum sKS_CC_lastLineNum(RefRecId _sKS_CC_CustPaymTable)
    {
        return (select maxof(LineNum) from creditCardAuthTrans
        where creditCardAuthTrans.SKS_CC_CustPaymTable == _sKS_CC_CustPaymTable).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_UpdateExpiredApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the credit card approval expiration for the specified sales ID.
    /// </summary>
    /// <param name="_sKS_CC_CustPaymTableRecId">
    /// he SKS_CC customer credit card payment record ID to set the expiration of the credit card approval.
    /// </param>
    /// <exception cref="Exception::Error">
    /// RecID of <c>SKS_CC_CustPaymTable</c> required; throw error if not provided.
    /// </exception>
    static void sKS_CC_UpdateExpiredApproval(RecId _sKS_CC_CustPaymTableRecId)
    {
        UserConnection connection;
        CreditCardAuthTrans authTrans;
        CreditCardPreapprovalLastNoOfDays days;
        SKS_CC_CustPaymTable sKS_CC_CustPaymTable;

        if (_sKS_CC_CustPaymTableRecId)
        {
            days = CustParameters::find().CreditCardPreapprovalLastNoOfDays;

            connection = new UserConnection();
            authTrans.setConnection(connection);
            sKS_CC_CustPaymTable.setConnection(connection);

            connection.ttsbegin();
            while select forupdate authTrans
            where authTrans.SKS_CC_CustPaymTable == _sKS_CC_CustPaymTableRecId &&
                authTrans.ApprovalType == CreditCardOperation::Authorize &&
                !authTrans.ApprovalVoid &&
                !authTrans.ApprovalExpired &&
                authTrans.ProcessorStatus == CreditCardProcessorStatus::Approved
            {
                if (DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) - DateTimeUtil::date(authTrans.ApprovedDateTime) > days)
                {
                    authTrans.ApprovalExpired = true;
                    authTrans.update();

                    if (authTrans.SKS_CC_CustPaymTable)
                    {
                        while select forupdate sKS_CC_CustPaymTable
                        where sKS_CC_CustPaymTable.RecId == authTrans.SKS_CC_CustPaymTable
                           && (sKS_CC_CustPaymTable.CreditCardTransType == SKS_CC_CreditCardTransType::Authorization ||
                               sKS_CC_CustPaymTable.CreditCardTransTypeOrig == SKS_CC_CreditCardTransType::Authorization)
                           && sKS_CC_CustPaymTable.CreditCardTransStatus == CreditCardProcessorStatus::Approved
                           && sKS_CC_CustPaymTable.ApprovalVoid == NoYes::No
                           && sKS_CC_CustPaymTable.ApprovalExpired == NoYes::No
                        {
                            sKS_CC_CustPaymTable.ApprovalExpired = NoYes::Yes;
                            sKS_CC_CustPaymTable.update();
                        }
                    }
                }
            }
            connection.ttscommit();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_findChargeByProjInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified charge record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// <param name="_projInvoiceId">
    /// The project invoice ID of the record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAuthTrans sKS_CC_findChargeByProjInvoice(ProjInvoiceId _projInvoiceId)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        select creditCardAuthTrans
            where creditCardAuthTrans.SKS_CC_ProjInvoiceId == _projInvoiceId
            && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved
            && (creditCardAuthTrans.ApprovalType == CreditCardOperation::CaptureAfterAuthorize ||
                creditCardAuthTrans.ApprovalType == CreditCardOperation::AuthorizeAndCapture)
            && creditCardAuthTrans.ApprovalVoid == NoYes::No;

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_findLastDeclinedChargeByProjInv</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified declined charge record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// <param name="_projInvoiceId">
    /// The project invoice ID of the record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAuthTrans sKS_CC_findLastDeclinedChargeByProjInv(ProjInvoiceId _projInvoiceId)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        select creditCardAuthTrans
        order by RecId desc
        where creditCardAuthTrans.SKS_CC_ProjInvoiceId == _projInvoiceId
           && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Declined
           && (creditCardAuthTrans.ApprovalType == CreditCardOperation::CaptureAfterAuthorize ||
               creditCardAuthTrans.ApprovalType == CreditCardOperation::AuthorizeAndCapture)
           && creditCardAuthTrans.ApprovalVoid == NoYes::No;

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_findLastDeclinedRefundByProjInv</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified refund record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// <param name="_projInvoiceId">
    /// The project invoice ID of the record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAuthTrans sKS_CC_findLastDeclinedRefundByProjInv(ProjInvoiceId _projInvoiceId)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        select creditCardAuthTrans
        order by RecId desc
        where creditCardAuthTrans.SKS_CC_ProjInvoiceId == _projInvoiceId
           && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Declined
           && creditCardAuthTrans.ApprovalType == CreditCardOperation::Refund
           && creditCardAuthTrans.ApprovalVoid == NoYes::No;

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_findRefundByProjInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified refund record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// <param name="_projInvoiceId">
    /// The project invoice ID of the record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAuthTrans sKS_CC_findRefundByProjInvoice(ProjInvoiceId _projInvoiceId)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        select creditCardAuthTrans
        where creditCardAuthTrans.SKS_CC_ProjInvoiceId == _projInvoiceId
        && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved
        && creditCardAuthTrans.ApprovalType == CreditCardOperation::Refund
        && creditCardAuthTrans.ApprovalVoid == NoYes::No;

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_SettlePreapprovalTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the credit card transaction.
    /// </summary>
    /// <param name="_authTransRecId">
    /// The credit card history record for which to set the status as settled.
    /// </param>
    /// <param name="_custInvoiceId">
    /// The customer invoice ID to close; optional.
    /// </param>
    /// </param>
    /// <param name="_sks_CC_ProjInvoiceId">
    /// The project invoice ID to close; optional.
    /// </param>
    static void SKS_CC_SettlePreapprovalTransaction(RefRecId _authTransRecId, CustInvoiceId _custInvoiceId = ''
        //SKS-Begin
        , ProjInvoiceId _sks_CC_ProjInvoiceId = ''
        //SKS-End
        )
    {
        UserConnection connection = new UserConnection();
        CreditCardAuthTrans authTrans;

        authTrans.setConnection(connection);

        connection.ttsbegin();

        select firstonly forupdate authTrans
            where authTrans.RecId == _authTransRecId;

        if (authTrans)
        {
            authTrans.ProcessorStatus = CreditCardProcessorStatus::Settled;

            //SKS-Begin
            if (_sks_CC_ProjInvoiceId)
            {
                authTrans.SKS_CC_ProjInvoiceId = _sks_CC_ProjInvoiceId;
            }
            else
            {
                authTrans.SalesInvoiceId = _custInvoiceId;
            }
            //SKS-End
            authTrans.update();
        }

        connection.ttscommit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_findRefundByInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardAuthTrans</c> table.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID of the record to find.
    /// </param>
    /// <param name="_salesInvoiceId">
    /// The sales invoice ID of the record to find.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardAuthTrans</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardAuthTrans sKS_CC_findRefundByInvoice(SalesId _salesId, SalesInvoiceId _salesInvoiceId)
    {
        CreditCardAuthTrans creditCardAuthTrans;

        select creditCardAuthTrans
        where creditCardAuthTrans.SalesId == _salesId &&
            creditCardAuthTrans.SalesInvoiceId == _salesInvoiceId &&
            creditCardAuthTrans.ApprovalType == CreditCardOperation::Refund &&
            creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved &&
            creditCardAuthTrans.ApprovalVoid == NoYes::No;

        return creditCardAuthTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>