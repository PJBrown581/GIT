<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_XRC_BR_RemoveBankMatchByRecid</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_XRC_BR_RemoveBankMatchByRecid
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        if (Box::okCancel("@SKS:SKGXRCWarning", DialogButton::Cancel, '') == DialogButton::Cancel)
        {
            return;
        }

        Dialog locDialog;
        DialogField locDialogField;
        BankAccountTrans locBankAccountTrans;
        BankAccountStatement locBankAccountStatement;
        RefRecId locRefRecId;
        
        locDialog = new Dialog("@SKS:SKGXRCBRRemoveMatch");
        locDialog.addText(strFmt("@SKS:SKGXRCBRBankTransRecId"));
        locDialogField = locDialog.addField(extendedTypeStr(RefRecId), "@SKS:SKGRecordId");

        if(locDialog.run() == 0)
            return;
        try
        {

            locRefRecId = locDialogField.value();

            if(locRefRecId == 0)
                throw Exception::Error;
            select forupdate crosscompany locBankAccountTrans
                  where locBankAccountTrans.Recid == locRefRecId;

            if(!locBankAccountTrans)
            {
                error("@SKS:SKGXRCBRBankTransNotFound");
                return;
            }

            changecompany(locBankAccountTrans.company())
            {
                locBankAccountStatement = null;
                Select locBankAccountStatement
                    where locBankAccountStatement.AccountId == locBankAccountTrans.AccountId
                        && locBankAccountStatement.AccountStatementDate == locBankAccountTrans.AccountStatementDate
                        && locBankAccountStatement.AccountStatementNum  == locBankAccountTrans.AccountStatement
                        && locBankAccountStatement.ReconcileDate != dateNull();

                if(locBankAccountStatement)
                {
                    if(locBankAccountTrans.SKS_CCR_ManualReconciliationID != emptyGuid())
                    {
                        Error("@SKS:SKGXRCCCRTransactionReconciled");
                    }
                    else
                    {
                        Error("@SKS:SKGXRCBRTransactionReconciled");
                    }
                    return;
                }
            }

            if(locBankAccountTrans)
            {
                changecompany(locBankAccountTrans.company())
                {
                    if(locBankAccountTrans.SKS_CCR_ManualReconciliationID != emptyGuid())
                    {
                        ttsbegin;
                        if(locBankAccountTrans.SKS_CCR_ManualReconciliationID == emptyGuid())
                        {
                            locBankAccountTrans.SKS_CCR_ManualReconciliationID = newGuid();
                        }
                        locBankAccountTrans.Reconciled = NoYes::No;
                        locBankAccountTrans.update();
                        ttscommit;
                    
                        locBankAccountTrans = null;
                        select SKS_CCR_ManualReconciliationID from locBankAccountTrans where locBankAccountTrans.Recid == locRefRecId;
                        SKS_CCR_Matching::removeGuidMatch(locBankAccountTrans.SKS_CCR_ManualReconciliationID);
                    }
                    else
                    {
                        ttsbegin;
                        if(locBankAccountTrans.SKS_BR_ManualReconciliationID == emptyGuid())
                        {
                            locBankAccountTrans.SKS_BR_ManualReconciliationID = newGuid();
                        }
                        locBankAccountTrans.Reconciled = NoYes::No;
                        locBankAccountTrans.update();
                        ttscommit;
                    
                        locBankAccountTrans = null;
                        select SKS_BR_ManualReconciliationID from locBankAccountTrans where locBankAccountTrans.Recid == locRefRecId;
                        SKS_BR_Matching::removeGuidMatch(locBankAccountTrans.SKS_BR_ManualReconciliationID);
                    }
                    info("@SKS:SKGXRCBRTransactionAvailable");
                }


            }
        }
        catch
        {

            error(strFmt("@SKS:SKGXRCBRInvalidRecId", locDialogField.value()));
            return;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>