<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_CustTransOpen</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_CustTransOpen
{
    SKS_EPY_Setup       gSKS_EPY_Setup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AddAddressToEPay</Name>
				<Source><![CDATA[
    private static void AddAddressToEPay(CustTransOpen _CustTransOpen)
    {

        #SKS_Global
        CustDefaultLocation locCustDefaultLocation;
        CustInvoiceJour locCustInvoiceJour;
        ProjInvoiceJour     locProjInvoiceJour;
        ProjFundingSource   locProjFundingSource;
        CustTable locCustTable;
        CustTrans locCustTrans;
        DirPartyLocation locDirPartyLocation;
        DirPartyLocationRole locDirPartyLocationRole;
        DirPartyTable locDirPartyTable;
        LogisticsLocation locLogisticsLocationInvoice,
                            locLogisticsLocationBilling,
                            locLogisticsLocationShipping,
                            locLogisticsLocationPrimary;
        LogisticsLocationRole locLogisticsLocationRole;
        LogisticsPostalAddress locLogisticsPostalAddressInvoice,
                                locLogisticsPostalAddressBilling,
                                locLogisticsPostalAddressShipping,
                                locLogisticsPostalAddressPrimary;
        SKS_EPY_Queue locSKS_EPY_Queue,
                        locNewSKS_EPY_Queue;
        SKS_EPY_QueueData locSKS_EPY_QueueData,
                        locNewSKS_EPY_QueueData;
        ;

        Select firstonly locCustTable where locCustTable.AccountNum == _CustTransOpen.AccountNum
            join Name, RecId from locDirPartyTable where locDirPartyTable.RecId == locCustTable.Party;
        //IF it was not already sent to ePay, IF not an invoice for an ePay Customer, return now.
        if(!SKS_Table_CustTable::isEpayCustomer(locCustTable))
            return;

        if(locCustTrans.TransType == LedgerTransType::Project)
        {
            select firstonly TransType,RecId from locCustTrans
                where locCustTrans.RecId == _CustTransOpen.RefRecId
                join ProjInvoiceID, InvoiceAccount, InvoiceDate, ProjInvoiceProjId from locProjInvoiceJour
                    where locProjInvoiceJour.ProjInvoiceID == locCustTrans.Invoice
                        && locProjInvoiceJour.InvoiceAccount == locCustTrans.AccountNum
                        && locProjInvoiceJour.InvoiceDate == locCustTrans.TransDate
                Join ContractId, CustAccount, InvoiceLocation, RecId from locProjFundingSource
                    where locProjFundingSource.ContractId == locProjInvoiceJour.ProjInvoiceProjId
                        && locProjFundingSource.CustAccount == locProjInvoiceJour.InvoiceAccount
                join RecID from locLogisticsPostalAddressInvoice
                    where locLogisticsPostalAddressInvoice.RecId == locProjFundingSource.InvoiceLocation
                join LocationId, Recid from locLogisticsLocationInvoice
                    where locLogisticsLocationInvoice.recid == locLogisticsPostalAddressInvoice.Location;
        }
        else
        {
            select firstonly RecId from locCustTrans
                where locCustTrans.RecId == _CustTransOpen.RefRecId
                join InvoiceId, invoiceaccount, InvoiceDate from locCustInvoiceJour
                    where locCustInvoiceJour.InvoiceId == locCustTrans.Invoice
                        && locCustInvoiceJour.InvoiceAccount == locCustTrans.AccountNum
                        && locCustInvoiceJour.InvoiceDate == locCustTrans.TransDate
                join RecID from locLogisticsPostalAddressInvoice
                    where locLogisticsPostalAddressInvoice.RecId == locCustInvoiceJour.InvoicePostalAddress
                join LocationId, Recid from locLogisticsLocationInvoice
                    where locLogisticsLocationInvoice.recid == locLogisticsPostalAddressInvoice.Location;
        }

        select firstonly locDirPartyLocation
            where locDirPartyLocation.Party == locDirPartyTable.RecId
            join locDirPartyLocationRole
                where locDirPartyLocationRole.PartyLocation == locDirPartyLocation.RecId
            join locCustDefaultLocation
                where locCustDefaultLocation.PartyLocationRole == locDirPartyLocationRole.RecId
                    && locCustDefaultLocation.AccountNum == locCustTable.AccountNum
            join RecId, Type from locLogisticsLocationRole
                where locLogisticsLocationRole.RecId == locDirPartyLocationRole.LocationRole
                    && locLogisticsLocationRole.Type == LogisticsLocationRoleType::RemitTo
            join location from locLogisticsPostalAddressBilling
                where locLogisticsPostalAddressBilling.Location == locDirPartylocation.Location
            join RecId, LocationId from locLogisticsLocationBilling
                where locLogisticsLocationBilling.recid == locDirPartyLocation.Location;


            select firstonly locDirPartyLocation
                where locDirPartyLocation.Party == locDirPartyTable.RecId
                join locDirPartyLocationRole
                    where locDirPartyLocationRole.PartyLocation == locDirPartyLocation.RecId
                join locCustDefaultLocation
                    where locCustDefaultLocation.PartyLocationRole == locDirPartyLocationRole.RecId
                        && locCustDefaultLocation.AccountNum == locCustTable.AccountNum
                join RecId, Type from locLogisticsLocationRole
                    where locLogisticsLocationRole.RecId == locDirPartyLocationRole.LocationRole
                     && locLogisticsLocationRole.Type == LogisticsLocationRoleType::RemitTo
                join location from locLogisticsPostalAddressBilling
                    where locLogisticsPostalAddressBilling.Location == locDirPartylocation.Location
                join RecId, LocationId from locLogisticsLocationBilling
                    where locLogisticsLocationBilling.recid == locDirPartyLocation.Location;

        select firstonly locDirPartyLocation
            where locDirPartyLocation.Party == locDirPartyTable.RecId
            join partylocation from locDirPartyLocationRole
                where locDirPartyLocationRole.PartyLocation == locDirPartyLocation.RecId
            join partylocationrole, AccountNum from locCustDefaultLocation
                where locCustDefaultLocation.PartyLocationRole == locDirPartyLocationRole.RecId
                    && locCustDefaultLocation.AccountNum == locCustTable.AccountNum
            join RecId, type from locLogisticsLocationRole
                where locLogisticsLocationRole.RecId == locDirPartyLocationRole.LocationRole
                 && locLogisticsLocationRole.Type == LogisticsLocationRoleType::Delivery
            join location from locLogisticsPostalAddressShipping
                where locLogisticsPostalAddressShipping.Location == locDirPartylocation.Location
            join RecId, LocationID from locLogisticsLocationShipping
                where locLogisticsLocationShipping.recid == locDirPartyLocation.Location;

            Select firstonly Party, IsPostalAddress, IsPrimary from locDirPartyLocation
                where locDirPartyLocation.Party == locCustTable.Party
                    && locDirPartyLocation.IsPostalAddress == NoYes::Yes
                    && locDirPartyLocation.IsPrimary == NoYes::Yes
                join RecId, LocationId from locLogisticsLocationPrimary
                    where locLogisticsLocationPrimary.RecId == locDirPartyLocation.Location
                join location from locLogisticsPostalAddressPrimary
                    where locLogisticsPostalAddressPrimary.Location == locLogisticsLocationPrimary.Recid;


        //IF this customer has no other occurane of this address in their

        if(locLogisticsLocationBilling.LocationId != locLogisticsLocationInvoice.LocationId
            && locLogisticsLocationShipping.LocationId != locLogisticsLocationInvoice.LocationId
            && locLogisticsLocationPrimary.LocationId != locLogisticsLocationInvoice.LocationId)
        {
            // When a record is created, you don't need to requeue it if it is already queued for Creation
            select firstonly locSKS_EPY_Queue
                    where locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                        && locSKS_EPY_Queue.Entity == SKS_EPY_Entity::Address
                join locSKS_EPY_QueueData
                where locSKS_EPY_QueueData.QueueRecId == locSKS_EPY_Queue.RecId
                    && locSKS_EPY_QueueData.TableRecId == locLogisticsLocationInvoice.RecId
                    && locSKS_EPY_QueueData.SourceTable == SKS_EPY_Table::LogisticsLocation;

            if(!locSKS_EPY_Queue)
            {
                ttsBegin;
                locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::Address;
                locNewSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Updated;
                locNewSKS_EPY_Queue.Action = SKS_EPY_Action::SendToEpay;
                locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTransOpen;
                locNewSKS_EPY_Queue.InitiatingRecId = _CustTransOpen.RecId;
                locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::LogisticsLocation;
                locNewSKS_EPY_QueueData.TableRecId = locLogisticsLocationInvoice.Recid;
                locNewSKS_EPY_Queue.Status = SKS_EPY_Status::New;
                locNewSKS_EPY_Queue.AccountName = locDirPartyTable.Name;
                locNewSKS_EPY_Queue.AccountNum = locCustTable.AccountNum;
                locNewSKS_EPY_Queue.insert();


                locNewSKS_EPY_QueueData.QueueRecId = locNewSKS_EPY_Queue.RecId;
                locNewSKS_EPY_QueueData.insert();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddInvoiceToEPay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add invoice to ePay
    /// </summary>
    /// <param name = "_CustTransOpen">_CustTransOpen</param>
    private static void AddInvoiceToEPay(CustTransOpen _CustTransOpen)
    {

        #SKS_Global
        SKS_EPY_Queue       locSKS_EPY_Queue, locNewSKS_EPY_Queue;
        SKS_EPY_QueueData   locSKS_EPY_QueueData, locNewSKS_EPY_QueueData;
        SKS_EPY_Setup       locSKS_EPY_Setup;
        CustTable           locCustTable;
        DirPartyTable       locDirPartyTable;
        CustTrans           locCustTrans;
        LedgerJournalTrans  lLedgerJournalTrans;
        SKS_EPY_Entity      entity;
        int64               PaymLineRec;
        LedgerJournalId     journalid;
        boolean             CreditNote = false;
        void insertRecord()
        {
            locNewSKS_EPY_Queue.Entity = entity;
            locNewSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Created;
            locNewSKS_EPY_Queue.Action = SKS_EPY_Action::SendToEpay;
            if(entity == SKS_EPY_Entity::Payment)
            {
                if(!CreditNote)
                {
                    locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTrans;
                    locNewSKS_EPY_Queue.InitiatingRecId = _CustTransOpen.RefRecId;
                    locNewSKS_EPY_Queue.PaymLineRecID = PaymLineRec;
                    locNewSKS_EPY_Queue.JournalNum = JournalId;
                    locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTrans;
                    locNewSKS_EPY_QueueData.TableRecId = _CustTransOpen.RefRecId;
                }
                else
                {
                    locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTransOpen;
                    locNewSKS_EPY_Queue.InitiatingRecId = _CustTransOpen.RefRecId;
                    locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTransOpen;
                    locNewSKS_EPY_QueueData.TableRecId = _CustTransOpen.RefRecId;
                }
            }
            else
            {
                locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTransOpen;
                locNewSKS_EPY_Queue.InitiatingRecId = _CustTransOpen.RecId;
                locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTransOpen;
                locNewSKS_EPY_QueueData.TableRecId = _CustTransOpen.RecId;
            }
            if(SKS_EPY_Currency::findByCurrency(locCustTrans.CurrencyCode))
            {
                locNewSKS_EPY_Queue.Status = SKS_EPY_Status::New;
            }
            else
            {
                locNewSKS_EPY_Queue.ErrorWarning ="@SKS:SKGePayInvCurr";
                locNewSKS_EPY_Queue.Status = SKS_EPY_Status::Failed;
            }
            locNewSKS_EPY_Queue.CurrencyCode = locCustTrans.CurrencyCode;
            locNewSKS_EPY_Queue.AccountName = locDirPartyTable.Name;
            locNewSKS_EPY_Queue.AccountNum = locCustTable.AccountNum;
            locNewSKS_EPY_Queue.insert();

            locNewSKS_EPY_QueueData.QueueRecId = locNewSKS_EPY_Queue.RecId;
            locNewSKS_EPY_QueueData.insert();
        }
        ;

        Select locCustTable where locCustTable.AccountNum == _CustTransOpen.AccountNum
            join Name from locDirPartyTable where locDirPartyTable.RecId == locCustTable.Party;
        if(locCustTable)
        {
                //IF it was not already sent to ePay, IF not an invoice for an ePay Customer, return now.
                if(!SKS_Table_CustTable::isEpayCustomer(locCustTable))
                    return;
        }
        else// missing customer record; return now
            return;


        select firstonly CurrencyCode, Invoice, TransType, AmountCur from locCustTrans where locCustTrans.RecId == _CustTransOpen.RefRecId;

        if(locCustTrans.TransType == LedgerTransType::Payment) //payment specific code
        {
            entity = SKS_EPY_Entity::Payment;

            ttsBegin;
            select forUpdate firstOnly lLedgerJournalTrans 
                where lLedgerJournalTrans.Voucher == locCustTrans.Voucher 
                && lLedgerJournalTrans.LedgerDimension == LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(locCustTrans.AccountNum, LedgerJournalACType::Cust);
            if(lLedgerJournalTrans && lLedgerJournalTrans.SKS_EPY_PmtNbr == '')
            {
                lLedgerJournalTrans.SKS_EPY_PmtNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefEPayNextNumber()).num();
                lLedgerJournalTrans.update();
            }
            ttsCommit;
            locNewSKS_EPY_Queue.PaymNum = lLedgerJournalTrans.SKS_EPY_PmtNbr;
            paymlinerec = lLedgerJournalTrans.RecId;
            journalid = lLedgerJournalTrans.JournalNum;
        }
        else if(_CustTransOpen.AmountCur < 0)//Credit notes
        {
            entity = SKS_EPY_Entity::Payment;
            CreditNote = true;
        }
        else if (locCustTrans.TransType == LedgerTransType::Project)
        {
            entity = SKS_EPY_Entity::ProjectInvoice;
            select firstonly ProjInv from locSKS_EPY_Setup;
            if(locCustTrans.TransType == LedgerTransType::Project && !locSKS_EPY_Setup.ProjInv)
                return;
            locNewSKS_EPY_Queue.InvNum = locCustTrans.Invoice;
        }
        //Invoice specific code
        else
        {
            entity = SKS_EPY_Entity::Invoice;
            
            if(!SKS_Table_CustTransOpen::TransTypeValidWithSetup(locCustTrans))//extension point for customization
            {
                return;
            }
            locNewSKS_EPY_Queue.InvNum = locCustTrans.Invoice;
        }

        locNewSKS_EPY_Queue.Amount = locCustTrans.AmountCur;

        // When a record is created, you don't need to requeue it if it is already queued for Creation
        select firstonly locSKS_EPY_Queue
            join locSKS_EPY_QueueData
            where locSKS_EPY_QueueData.QueueRecId == locSKS_EPY_Queue.RecId
                && locSKS_EPY_QueueData.TableRecId == _CustTransOpen.RecId
                && locSKS_EPY_QueueData.SourceTable == SKS_EPY_Table::CustTransOpen
                && locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                && locSKS_EPY_Queue.Entity == entity;
        if(!locSKS_EPY_Queue)
        {
            ttsBegin;
            insertRecord();
            _CustTransOpen.SKS_EPY_SentToePay = NoYes::Yes;
            _CustTransOpen.doUpdate();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>AddInvoiceToSKS_EPY_CustTransOpen</Name>
				<Source><![CDATA[
    public static server void AddInvoiceToSKS_EPY_CustTransOpen(CustTransOpen _CustTransOpen)
    {
        SKS_EPY_CustTransOpen locSKS_EPY_CustTransOpen;

        select firstonly CustTransOpenRefRecId from locSKS_EPY_CustTransOpen
            where locSKS_EPY_CustTransOpen.CustTransOpenRefRecId == _CustTransOpen.RecId;

        if(!locSKS_EPY_CustTransOpen)
        {
            locSKS_EPY_CustTransOpen.CustTransOpenRefRecId = _CustTransOpen.RecId;
            locSKS_EPY_CustTransOpen.CustTransRefRecId = _CustTransOpen.RefRecId;
            locSKS_EPY_CustTransOpen.OrigAmountCur = _CustTransOpen.AmountCur;
            locSKS_EPY_CustTransOpen.OrigAmountMST = _CustTransOpen.AmountMST;
            locSKS_EPY_CustTransOpen.DueDate = _CustTransOpen.DueDate;
            ttsBegin;
            locSKS_EPY_CustTransOpen.insert();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateInvoiceInSKS_EPY_CustTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the invoice record in sks_epy_custtransOpen
    /// </summary>
    /// <param name = "_CustTransOpen">_CustTransOpen</param>
    public static server void UpdateInvoiceInSKS_EPY_CustTransOpen(CustTransOpen _CustTransOpen)
    {
        SKS_EPY_CustTransOpen locSKS_EPY_CustTransOpen;

        select firstonly forupdate CustTransOpenRefRecId from locSKS_EPY_CustTransOpen
            where locSKS_EPY_CustTransOpen.CustTransOpenRefRecId == _CustTransOpen.RecId;

        if(locSKS_EPY_CustTransOpen)
        {
            locSKS_EPY_CustTransOpen.CustTransOpenRefRecId = _CustTransOpen.RecId;
            locSKS_EPY_CustTransOpen.CustTransRefRecId = _CustTransOpen.RefRecId;
            locSKS_EPY_CustTransOpen.OrigAmountCur = _CustTransOpen.AmountCur;
            locSKS_EPY_CustTransOpen.OrigAmountMST = _CustTransOpen.AmountMST;
            locSKS_EPY_CustTransOpen.DueDate = _CustTransOpen.DueDate;
            ttsBegin;
            locSKS_EPY_CustTransOpen.update();
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CloseInvoiceInEPay</Name>
				<Source><![CDATA[
    private static void CloseInvoiceInEPay(CustTransOpen _CustTransOpen)
    {
        CustTable           locCustTable;
        DirPartyTable       locDirPartyTable;
        SKS_EPY_Queue       locSKS_EPY_Queue, locNewSKS_EPY_Queue;
        SKS_EPY_QueueData   locSKS_EPY_QueueData, locNewSKS_EPY_QueueData;
        CustTrans           locCustTrans;
        ;

        Select locCustTable where locCustTable.AccountNum == _CustTransOpen.AccountNum
            join Name from locDirPartyTable where locDirPartyTable.recid == locCustTable.Party;
        if(locCustTable)
        {
            // IF this CustTransOpent was aready sent to epay, we are going to resend it no matter what.
            if(!_CustTransOpen.SKS_EPY_SentToePay)
            {
                //IF it was not already sent to ePay, IF not an invoice for an ePay Customer, return now.
                if(!SKS_Table_CustTable::isEpayCustomer(locCustTable))
                    return;
            }
        }
        else// missing customer record; return now
            return;

        // payments should never go though the Update code.  Once they are posted they are created, and that is the end.
        select firstonly CurrencyCode, Invoice, TransType, AmountCur from locCustTrans where locCustTrans.RecId == _CustTransOpen.RefRecId;
        if(locCustTrans.TransType == LedgerTransType::Payment)
        {
            return;
        }

        if(!SKS_Table_CustTransOpen::TransTypeValidWithSetup(locCustTrans))
        {
            return;
        }

        // if there is a create call and it is still in the status of new, oblosete it and exit
        // elseif there is a new Update call, then obsolete that, and create the Delete record
        // else just create the delete item
        select firstonly forupdate locSKS_EPY_Queue
            join locSKS_EPY_QueueData
            where locSKS_EPY_QueueData.QueueRecId == locSKS_EPY_Queue.RecId
                && locSKS_EPY_QueueData.SourceTable == SKS_EPY_Table::CustTransOpen
                && locSKS_EPY_QueueData.TableRecId == _CustTransOpen.RecId
                && (locSKS_EPY_Queue.ChangeType == SKS_EPY_ChangeType::Created || locSKS_EPY_Queue.ChangeType == SKS_EPY_ChangeType::Updated)
                && locSKS_EPY_Queue.Action == SKS_EPY_Action::SendToEpay
                && locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                && locSKS_EPY_Queue.Entity == SKS_EPY_Entity::Invoice;
        if(locSKS_EPY_Queue)
        {
            locSKS_EPY_Queue.Status = SKS_EPY_Status::Obsolete;
            ttsBegin;
            locSKS_EPY_Queue.update();
            ttsCommit;
        }
        if (locCustTrans.TransType == LedgerTransType::Project)
        {
            locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::ProjectInvoice;
        }
        else
        {
            locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::Invoice;
        }

        locNewSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Updated;
        locNewSKS_EPY_Queue.Action = SKS_EPY_Action::SendToEpay;
        locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTransOpen;
        locNewSKS_EPY_Queue.InitiatingRecId = _CustTransOpen.RecId;
        locNewSKS_EPY_Queue.Status = SKS_EPY_Status::New;
        locNewSKS_EPY_Queue.AccountName = locDirPartyTable.Name;
        locNewSKS_EPY_Queue.AccountNum = locCustTable.AccountNum;
        locNewSKS_EPY_Queue.InvNum = locCustTrans.Invoice;
        locNewSKS_EPY_Queue.Amount = locCustTrans.AmountCur;
        locNewSKS_EPY_Queue.CurrencyCode = locCustTrans.CurrencyCode;
        locNewSKS_EPY_Queue.insert();

        locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTransOpen;
        locNewSKS_EPY_QueueData.TableRecId = _CustTransOpen.RecId;
        locNewSKS_EPY_QueueData.QueueRecId = locNewSKS_EPY_Queue.RecId;
        locNewSKS_EPY_QueueData.insert();

    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Delete_Pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(CustTransOpen), tableMethodStr(CustTransOpen, delete))]
    public static void EH_Delete_Pre(XppPrePostArgs _args)
    {
        CustTransOpen locCustTransOpen;
        ;
        ttsBegin;
        locCustTransOpen = _args.getThis();

        SKS_Table_CustTransOpen::CloseInvoiceInEPay(locCustTransOpen);
        SKS_Table_CustTransOpen::CloseLBInvoice(locCustTransOpen);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Insert_Post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(CustTransOpen), tableMethodStr(CustTransOpen, insert))]
    public static void EH_Insert_Post(XppPrePostArgs _args)
    {
        CustTransOpen locCustTransOpen;
        ;
        ttsBegin;
        locCustTransOpen = _args.getThis();
        SKS_LB_SecondaryMatch::buildMatchValues(locCustTransOpen);
        //START SKS_EPY CODE
        SKS_Table_CustTransOpen::AddAddressToEPay(locCustTransOpen);
        SKS_Table_CustTransOpen::AddInvoiceToEPay(locCustTransOpen);
        SKS_Table_CustTransOpen::AddInvoiceToSKS_EPY_CustTransOpen(locCustTransOpen);
        //
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Update_Pre</Name>
				<Source><![CDATA[
    [PreHandlerFor(tableStr(CustTransOpen), tableMethodStr(CustTransOpen, update))]
    public static void EH_Update_Pre(XppPrePostArgs _args)
    {
        CustTransOpen locCustTransOpen;
        ;
        ttsBegin;
        locCustTransOpen = _args.getThis();
        SKS_Table_CustTransOpen::UpdateInvoiceInEPay(locCustTransOpen);
        SKS_Table_CustTransOpen::UpdateInvoiceInSKS_EPY_CustTransOpen(locCustTransOpen);
        SKS_Table_CustTransOpen::UpdateLBInvoices(locCustTransOpen);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateInvoiceInEPay</Name>
				<Source><![CDATA[
    private static void UpdateInvoiceInEPay(CustTransOpen _CustTransOpen)
    {
        #SKS_Global
        boolean             locQueueCreated = false;
        CustTable           locCustTable;
        DirPartyTable       locDirPartyTable;
        SKS_EPY_Queue       locSKS_EPY_Queue, locNewSKS_EPY_Queue;
        SKS_EPY_QueueData   locSKS_EPY_QueueData, locNewSKS_EPY_QueueData;
        LedgerJournalTrans  lLedgerJournalTrans;
        boolean             locUseTTS = false;
        CustTrans           locCustTrans;
        SKS_EPY_Setup       locSKS_EPY_Setup;
        ;

        Select locCustTable where locCustTable.AccountNum == _CustTransOpen.AccountNum
            join Name from locDirPartyTable where locDirPartyTable.recid == locCustTable.Party;

        if(locCustTable)
        {
            // IF this CustTransOpent was aready sent to epay, we are going to resend it no matter what.
            if(!_CustTransOpen.SKS_EPY_SentToePay)
            {
                //IF it was not already sent to ePay, IF not an invoice for an ePay Customer, return now.
                if(!SKS_Table_CustTable::isEpayCustomer(locCustTable))
                    return;
            }
        }
        else// missing customer record; return now
            return;

        // payments should never go though the Update code.  Once they are posted they are created, and that is the end.
        select firstonly CurrencyCode, Invoice, TransType, AmountCur from locCustTrans where locCustTrans.RecId == _CustTransOpen.RefRecId;
        if(locCustTrans.TransType == LedgerTransType::Payment && locCustTrans.Invoice != '')
        {
            return;
        }

        // 20909
        // check invoice options
        select firstonly FTInv, SOInv, ProjInv from locSKS_EPY_Setup;

        if (locCustTrans.AmountCur >= 0
            && ((locCustTrans.TransType == LedgerTransType::Cust && !locSKS_EPY_Setup.FTInv)
                || (locCustTrans.TransType == LedgerTransType::Sales && !locSKS_EPY_Setup.SOInv)
                || (locCustTrans.TransType == LedgerTransType::Project && !locSKS_EPY_Setup.ProjInv)))
        {
            return;
        }

        if(!SKS_Table_CustTransOpen::TransTypeValidWithSetup(locCustTrans))
        {
            return;
        }
        
        // When a record is updated, you don't need to requeue it if it is already queued for Creation or Update
        select firstonly ACTION,CHANGETYPE,ENTITY,STATUS,DATAAREAID,RECID from locSKS_EPY_Queue
            join locSKS_EPY_QueueData
            where locSKS_EPY_QueueData.QueueRecId == locSKS_EPY_Queue.RecId
                && locSKS_EPY_QueueData.SourceTable == SKS_EPY_Table::CustTransOpen
                && locSKS_EPY_QueueData.TableRecId == _CustTransOpen.RecId
                && (locSKS_EPY_Queue.ChangeType == SKS_EPY_ChangeType::Created || locSKS_EPY_Queue.ChangeType == SKS_EPY_ChangeType::Updated)
                && locSKS_EPY_Queue.Action == SKS_EPY_Action::SendToEpay
                && locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                && (locSKS_EPY_Queue.Entity == SKS_EPY_Entity::Invoice || locSKS_EPY_Queue.Entity == SKS_EPY_Entity::ProjectInvoice);
        if(!locSKS_EPY_Queue)
        {
            locUseTTS = (appl.ttsLevel() == 0);
            if(locUseTTS)
            {
                ttsBegin;
            }

            //because we only have one queued event, we only want ot insert a single queue item
            if(!locQueueCreated )
            {
                if(locCustTrans.AmountCur > 0)
                {
                    if(locCustTrans.TransType == LedgerTransType::Project)
                    {
                        locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::ProjectInvoice;
                    }
                    else
                    {
                        locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::Invoice;
                    }
                    locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTransOpen;
                    locNewSKS_EPY_Queue.InitiatingRecId = _CustTransOpen.RecId;
                    locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTransOpen;
                    locNewSKS_EPY_QueueData.TableRecId = _CustTransOpen.RecId;
                }
                else
                {
                    if(locCustTrans.TransType == LedgerTransType::Payment)
                    {     
                        locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTrans;
                        locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTrans;
                        ttsBegin;
                        select forUpdate firstOnly lLedgerJournalTrans where lLedgerJournalTrans.Voucher == locCustTrans.Voucher && lLedgerJournalTrans.LedgerDimension == LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(locCustTrans.AccountNum, LedgerJournalACType::Cust);
                        if(lLedgerJournalTrans.SKS_EPY_PmtNbr == '')
                        {
                            lLedgerJournalTrans.SKS_EPY_PmtNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefEPayNextNumber()).num();
                            lLedgerJournalTrans.update();
                        }
                        ttsCommit;
                        locNewSKS_EPY_Queue.PaymNum = lLedgerJournalTrans.SKS_EPY_PmtNbr;
                        locNewSKS_EPY_Queue.PaymLineRecID = lLedgerJournalTrans.RecId;
                        locNewSKS_EPY_Queue.JournalNum = lLedgerJournalTrans.JournalNum;
                    }
                    else
                    {
                        locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTransOpen;
                        locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTransOpen;
                    }
                    locNewSKS_EPY_Queue.InitiatingRecId = _CustTransOpen.RefRecId;
                    locNewSKS_EPY_QueueData.TableRecId = _CustTransOpen.RefRecId;
                    locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::Payment;
                }

                if (_CustTransOpen.orig().SKS_EPY_SentToePay == NoYes::No)
                {
                    locNewSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Created;
                }
                else
                {
                    locNewSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Updated;
                }

                locNewSKS_EPY_Queue.Action = SKS_EPY_Action::SendToEpay;
                locNewSKS_EPY_Queue.Status = SKS_EPY_Status::New;
                locNewSKS_EPY_Queue.AccountName = locDirPartyTable.Name;
                locNewSKS_EPY_Queue.AccountNum = locCustTable.AccountNum;
                locNewSKS_EPY_Queue.Amount = locCustTrans.AmountCur;
                locNewSKS_EPY_Queue.InvNum = locCustTrans.Invoice;
                locNewSKS_EPY_Queue.CurrencyCode = locCustTrans.CurrencyCode;
                locNewSKS_EPY_Queue.insert();
                locQueueCreated = true;
            }
            //there can be many queued data items.
            locNewSKS_EPY_QueueData.QueueRecId = locNewSKS_EPY_Queue.RecId;
            locNewSKS_EPY_QueueData.insert();

            if(locUseTTS)
            {
                ttsCommit;
            }
            locSKS_EPY_Queue = null;
            locNewSKS_EPY_QueueData = null;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>CloseLBInvoice</Name>
				<Source><![CDATA[
    public static void CloseLBInvoice(CustTransOpen _CustTransOpen)
    {
        SKS_LB_InvoiceMatch lInvoiceMatch;
        delete_from lInvoiceMatch where lInvoiceMatch.custtransOpenrecid == _CustTransOpen.recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateLBInvoices</Name>
				<Source><![CDATA[
    Public static void UpdateLBInvoices(CustTransOpen   _CustTransOpen)
    {
        SKS_LB_InvoiceMatch lInvoiceMatch;
        update_recordSet lInvoiceMatch setting CTOamountcur = _CustTransOpen.amountcur where lInvoiceMatch.custtransOpenrecid == _CustTransOpen.recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateAlreadyMarkedQueueRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an ePay queue record as obsolete for settlements that are already marked in a payment journal
    /// </summary>
    /// <param name = "_CustTransOpen">cust trnas open recodd</param>
    /// <param name = "_CustTrans">custTrans record</param>
    /// <param name = "_CustTable">customer record</param>
    /// <param name = "_DirPartyTable">dirpartytable record</param>
    public static void CreateAlreadyMarkedQueueRecord(CustTransOpen  _CustTransOpen, CustTrans _CustTrans, CustTable _CustTable, DirPartyTable _DirPartyTable)
    {
        SKS_EPY_Queue       lSKS_EPY_Queue;
        SKS_EPY_QueueData   lSKS_EPY_QueueData;

        if(_CustTrans.TransType == LedgerTransType::Project)
        {
            lSKS_EPY_Queue.Entity = SKS_EPY_Entity::ProjectInvoice;
        }
        else
        {
            lSKS_EPY_Queue.Entity = SKS_EPY_Entity::Invoice;
        }
        lSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustTransOpen;
        lSKS_EPY_Queue.InitiatingRecId = _CustTransOpen.RecId;
        lSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTransOpen;
        lSKS_EPY_QueueData.TableRecId = _CustTransOpen.RecId;
        lSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Updated;
        lSKS_EPY_Queue.Action = SKS_EPY_Action::SendToEpay;
        lSKS_EPY_Queue.Status = SKS_EPY_Status::Obsolete;
        lSKS_EPY_Queue.AccountName = _DirPartyTable.Name;
        lSKS_EPY_Queue.AccountNum = _CustTable.AccountNum;
        lSKS_EPY_Queue.Amount = _CustTrans.AmountCur;
        lSKS_EPY_Queue.InvNum = _CustTrans.Invoice;
        lSKS_EPY_Queue.CurrencyCode = _CustTrans.CurrencyCode;
        lSKS_EPY_Queue.ErrorWarning = "@SKS627";
        lSKS_EPY_Queue.insert();

        lSKS_EPY_QueueData.QueueRecId = lSKS_EPY_Queue.RecId;
        lSKS_EPY_QueueData.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>TransTypeValidWithSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// SIGNATURE LOCKED BY CUSTOMIZATION
    /// </summary>
    /// <param name = "_CustTrans">custTrans</param>
    /// <returns>boolean</returns>
    public static boolean TransTypeValidWithSetup(CustTrans    _CustTrans)
    {
        SKS_EPY_Setup locSKS_EPY_Setup;
        select firstonly FTInv, SOInv, ProjInv from locSKS_EPY_Setup;
        //if this is Free Text Invoice (AKA: LedgerJournaltranstype::Cust) and Free text
        // is not enabled in setup, return.
        if(_CustTrans.TransType == LedgerTransType::Cust && !locSKS_EPY_Setup.FTInv)
        {
            return false;
        }
        //if this is Sales Order Invoice (AKA: LedgerJournaltranstype::Sales) and Sales Order
        // is not enabled in setup, return.
        if(_CustTrans.TransType == LedgerTransType::Sales && !locSKS_EPY_Setup.SOInv)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>