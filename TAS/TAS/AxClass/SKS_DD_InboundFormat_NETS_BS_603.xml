<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_InboundFormat_NETS_BS_603</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_InboundFormat_NETS_BS_603 extends SKS_DD_InboundFormat
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType)
    {

        str rtnval = '';
        int classId;
        int locRecLen;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean pos1to2SysIdentification = false;
        boolean pos17to20DataDeliveryType = false;
        boolean pos3to5Sectionno = false;
        boolean pos14to17Transactioncode = false;
        boolean recordLength = true; //Bug 11030
        //BEGIN DISQUALIFIER VARIABLES
        //none

        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_sks_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        //priming read

        while(!locStreamReader.get_EndOfStream())
        {
            locString = locStreamReader.ReadLine();

            if(!System.String::IsNullOrEmpty(locString))
            {
                locRecLen = locString.get_Length();

                if(!System.String::IsNullOrWhiteSpace(locString) && locRecLen != 0)
                {

                    if(SKS_PP_StringFormats::strSub(locString, 1, 2) == 'BS')
                    {
                        pos1to2SysIdentification = true;
                    }

                    if(SKS_PP_StringFormats::strSub(locString, 17, 4) == '0603')
                    {
                        pos17to20DataDeliveryType = true;
                    }
                    if(SKS_PP_StringFormats::strSub(locString, 3, 3) == '012')
                    {
                        pos3to5Sectionno = true;
                    }

                    if(SKS_PP_StringFormats::strSub(locString, 14, 4) == '0212')
                    {
                        pos14to17Transactioncode = true;
                    }
                }
				else //Bug 11030
                {
                    recordLength = false;
                    break;
                }
            }
        }
        if(pos1to2SysIdentification
        && pos17to20DataDeliveryType
        && pos3to5Sectionno
        && pos14to17Transactioncode
        && recordLength) //Bug 11030
        {
            //ALl Qualifers show this a NETS BetalingService 603 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileForBS</Name>
				<Source><![CDATA[
    public boolean getFileForBS(str _filename, boolean _serverPath, SKS_BF_BankIntType _sks_BF_BankIntType, SKS_EB_MandateType _SKS_EB_MandateType)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_sks_BF_BankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return false;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        locString = locStreamReader.ReadLine();

        while(locString != null)
        {
            if(!System.String::IsNullOrEmpty(locString))
            {
                this.processRecord(locString, _SKS_EB_MandateType);
            }
            locString = locStreamReader.ReadLine();
        }

        locStreamReader.Close();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord(str _CurrentRecord, SKS_EB_MandateType _mandateType)
    {
        SKS_EB_BankRegisterStatus locBankRegisterStatus;
        SKS_EB_MandateType mandateType;

        str locSignDay, locSignMonth, locSignYear;
        str locEndDay, locEndMonth, locEndYear;
        str locMandateNumber;
        CustMandateId locCustMandateId;

        SKS_EB_DateTime locEffectiveDate, locEndDate;

        if(strLen(strLRTrim(_CurrentRecord)) > 0)
        {
            if(SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0230' ||
                SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0231' || 
                SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0232' ||
                SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0233' ||
                SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0234')
            {
                locSignDay = SKS_PP_StringFormats::strSub(_CurrentRecord,50,2);
                locSignMonth= SKS_PP_StringFormats::strSub(_CurrentRecord,52,2);
                locSignYear= SKS_PP_StringFormats::strSub(_CurrentRecord,54,2);

                locEffectiveDate = DateTimeUtil::newDateTime(str2Date(locSignDay + '-' + locSignMonth + '-'+ locSignYear, 123),0);

                locEndDay = SKS_PP_StringFormats::strSub(_CurrentRecord,56,2);
                locEndMonth= SKS_PP_StringFormats::strSub(_CurrentRecord,58,2);
                locEndYear= SKS_PP_StringFormats::strSub(_CurrentRecord,60,2);

                locEndDate = DateTimeUtil::newDateTime(str2Date(locEndDay + '-' + locEndMonth + '-'+ locEndYear, 123),0);
                locMandateNumber = SKS_PP_StringFormats::strSub(_CurrentRecord,41,9);

                CustAccount custAccountNumber = strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 26, 15));//Bug 11028

                //Bug_13005-->
                custAccountNumber = this.getCustAccountnumber(custAccountNumber);

                if(!custAccountNumber)
                {
                    error(strfmt("@SKS3372", custAccountNumber));   //If the customer number doesn't exist, throwing an error
                }
                //Bug_13005<--

                if (SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0232' ||
                    SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0233' ||
                    SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0234')
                {
                    CustDirectDebitMandate  loccustDirectDebitMandate;

                    if(_mandateType == SKS_EB_MandateType::BetalingsTotal)
                    {
                        while select loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber
                        {
                            locBankRegisterStatus = SKS_EB_BankRegisterStatus::Rejected;

                            if(loccustDirectDebitMandate.Status == CustMandateStatus::New)
                            {
                                this.setMandateStatusForBS(loccustDirectDebitMandate, locBankRegisterStatus, locEffectiveDate, locEndDate,loccustDirectDebitMandate.MandateReference, SKS_EB_MandateType::BetalingsTotal);
                                break;
                            }
                        }
                    }
                    else
                    {
                        while select loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber
                            && loccustDirectDebitMandate.MandateReference == locMandateNumber
                        {
                            locBankRegisterStatus = SKS_EB_BankRegisterStatus::Rejected;

                            if(loccustDirectDebitMandate.Status == CustMandateStatus::New)
                            {
                                this.setMandateStatusForBS(loccustDirectDebitMandate, locBankRegisterStatus, locEffectiveDate, locEndDate,loccustDirectDebitMandate.MandateReference, SKS_EB_MandateType::Betalings);
                                break;
                            }
                        }
                    }
                }
                else if(SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0230' ||
                        SKS_PP_StringFormats::strSub(_CurrentRecord, 14, 4) == '0231')
                {
                    CustDirectDebitMandate  loccustDirectDebitMandate;
                    select firstonly loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber;

                    if(_mandateType == SKS_EB_MandateType::BetalingsTotal)
                    {
                        mandateType = SKS_EB_MandateType::BetalingsTotal;
                    }
                    else 
                    {
                        mandateType = SKS_EB_MandateType::Betalings;
                    }


                    if(!loccustDirectDebitMandate)
                    {
                        
                        CustTable lCustTable;

                        select firstonly lCustTable where lCustTable.AccountNum == custAccountNumber;

                        if(lCustTable)
                        {
                            if(mandateType == SKS_EB_MandateType::BetalingsTotal)
                            {
                                ttsbegin;
                                locCustMandateId = NumberSeq::newGetNum(CustParameters::numRefCustMandateId()).num();
                                ttscommit;
                            }
                            else
                            {
                                locCustMandateId = locMandateNumber;
                            }

                            loccustDirectDebitMandate.MandateReference = locCustMandateId;
                            locCustDirectDebitMandate.CustAccount = custAccountNumber;
                            locCustDirectDebitMandate.BankAccount = lCustTable.BankAccount;
                            locCustDirectDebitMandate.SKS_EB_MandateType = mandateType;
                            locCustDirectDebitMandate.Status = CustMandateStatus::New;
                            loccustDirectDebitMandate.SignatureDate = DateTimeUtil::date(locEffectiveDate);

                            if(DateTimeUtil::date(locEndDate) == datenull() && locCustDirectDebitMandate.SignatureDate != dateNull()) //Bug 11028
                            {
                                locCustDirectDebitMandate.ExpirationDate = dateMthFwd(locCustDirectDebitMandate.SignatureDate, CustParameters::find().MandateDefaultExpirationMonths) - 1;
                            }
                            else
                            {
                                locCustDirectDebitMandate.ExpirationDate = DateTimeUtil::date(locEndDate);
                            }

                            locCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
                            locCustDirectDebitMandate.SKS_EB_MandateAutoStatus = SKS_EB_MandateAutoStatus::Completed;
                            locCustDirectDebitMandate.CustomerAddress = DirParty::primaryPostalAddress(lCustTable.Party).RecId;
                            locCustDirectDebitMandate.IsFirst = true;

                            locCustDirectDebitMandate.insert();

                            if(!locCustDirectDebitMandate.BankAccount)
                            {
                                SKS_EB_CustDirectDebitMandateEventHandler::updateCustTableRecords_OnInsert(locCustDirectDebitMandate);

                                CustTable lCusttable1;

                                select firstonly lCusttable1 where lCusttable1.AccountNum == locCustDirectDebitMandate.CustAccount;

                                ttsbegin;
                                locCustDirectDebitMandate.selectForUpdate(true);
                                locCustDirectDebitMandate.BankAccount = lCusttable1.BankAccount;
                                locCustDirectDebitMandate.doupdate();
                                ttscommit;
                            }
                        }
                    }
                    else
                    {
                        loccustDirectDebitMandate = null;
                        boolean newMandate, cancelmandate, incompmandate;

                        while select loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber
                        {
                            if(loccustDirectDebitMandate.Status == CustMandateStatus::Incomplete)
                            {
                                incompmandate = true;
                            }
                            else if(loccustDirectDebitMandate.Status == CustMandateStatus::Canceled)
                            {
                                cancelmandate = true;
                            }
                            else if(loccustDirectDebitMandate.Status == CustMandateStatus::New)
                            {
                                newMandate = true;
                            }
                        }

                        if(!newMandate)
                        {
                            if(incompmandate)
                            {
                                while select loccustDirectDebitMandate where loccustDirectDebitMandate.CustAccount == custAccountNumber
                                {
                                    if(loccustDirectDebitMandate.Status == CustMandateStatus::Incomplete)
                                    {
                                        locBankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;

                                        if(mandateType == SKS_EB_MandateType::Betalings)
                                        {
                                            if(loccustDirectDebitMandate.MandateReference != locMandateNumber)
                                            {
                                                locCustMandateId = locMandateNumber;
                                            }
                                            else
                                            {
                                                locCustMandateId = loccustDirectDebitMandate.MandateReference;
                                            }
                                        }
                                        else
                                        {
                                            locCustMandateId = loccustDirectDebitMandate.MandateReference;
                                        }

                                        this.setMandateStatusForBS(loccustDirectDebitMandate, locBankRegisterStatus, locEffectiveDate, locEndDate, locCustMandateId, mandateType);
                                        break;
                                    }
                                }
                            }
                            else if(cancelmandate)
                            {
                                CustTable lCustTable;

                                select firstonly lCustTable where lCustTable.AccountNum == custAccountNumber;

                                if(mandateType == SKS_EB_MandateType::BetalingsTotal)
                                {
                                    ttsbegin;
                                    locCustMandateId = NumberSeq::newGetNum(CustParameters::numRefCustMandateId()).num();
                                    ttscommit;
                                }
                                else
                                {
                                    locCustMandateId = locMandateNumber;
                                }

                                loccustDirectDebitMandate.MandateReference = locCustMandateId;
                                locCustDirectDebitMandate.CustAccount = custAccountNumber;
                                locCustDirectDebitMandate.BankAccount = lCustTable.BankAccount;
                                locCustDirectDebitMandate.SKS_EB_MandateType = mandateType;
                                locCustDirectDebitMandate.Status = CustMandateStatus::New;
                                loccustDirectDebitMandate.SignatureDate = DateTimeUtil::date(locEffectiveDate);
                                if(DateTimeUtil::date(locEndDate) == datenull() && locCustDirectDebitMandate.SignatureDate != dateNull()) //Bug 11028
                                {
                                    locCustDirectDebitMandate.ExpirationDate = dateMthFwd(locCustDirectDebitMandate.SignatureDate, CustParameters::find().MandateDefaultExpirationMonths) - 1;
                                }
                                else
                                {
                                    locCustDirectDebitMandate.ExpirationDate = DateTimeUtil::date(locEndDate);
                                }
                                locCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
                                locCustDirectDebitMandate.SKS_EB_MandateAutoStatus = SKS_EB_MandateAutoStatus::Completed;
                                locCustDirectDebitMandate.CustomerAddress = DirParty::primaryPostalAddress(lCustTable.Party).RecId;
                                locCustDirectDebitMandate.IsFirst = true;

                                locCustDirectDebitMandate.insert();

                                if(!locCustDirectDebitMandate.BankAccount)
                                {
                                    SKS_EB_CustDirectDebitMandateEventHandler::updateCustTableRecords_OnInsert(locCustDirectDebitMandate);

                                    CustTable lCusttable2;

                                    select firstonly lCusttable2 where lCusttable2.AccountNum == locCustDirectDebitMandate.CustAccount;

                                    ttsbegin;
                                    locCustDirectDebitMandate.selectForUpdate(true);
                                    locCustDirectDebitMandate.BankAccount = lCusttable2.BankAccount;
                                    locCustDirectDebitMandate.doupdate();
                                    ttscommit;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccountnumber</Name>
				<Source><![CDATA[
    //Bug_13005-->
    private str getCustAccountnumber(AccountNum _accountNum)
    {
        int i, pos;
        str custAccountPadded, custNum;
        boolean foundCust;
        CustTable custTable;

        pos = strFind(_accountNum, "123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()-=+_<>,.?/\|;:'[]{}", 1, strlen(_accountNum));

        custNum = subStr(_accountNum, pos, strlen(_accountNum) - pos+1);
        
        custTable = CustTable::find(custNum); //Checking customer number without leading zeroes

        if(!custTable)                      //If customer number doesn't exist
        {
            select firstonly custTable where custTable.AccountNum like '0*';        //if we dont find customer number doesn't exist then select firstonyl CustTable.AccountNum with like 0*

            if(custTable)
            {
                i = strLen(_accountNum) - strLen(custNum);
        
                while(i > strLen(custNum))
                {
                    custAccountPadded = subStr(_accountNum, i, pos);       //Padding zeroes to the account number, repeat the same till max 15 character (including 0s + customer value)
            
                    if(CustTable::find(custAccountPadded).AccountNum)
                    {
                        foundCust = true;
                        break;
                    }
            
                    i--;
                }
            }
        }
        

        return custTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMandateStatusForBS</Name>
				<Source><![CDATA[
    //Bug_13005-->

    /// <summary>
    /// Overrided Setmandate staus for Format specific
    /// </summary>
    /// <param name = "_lCustDirectDebitMandate">CustDirectDebitMandate buffer</param>
    /// <param name = "_bankRegisterStatus">SKS_EB_BankRegisterStatus buffer</param>
    /// <param name = "_effectiveDate">_effectiveDate buffer</param>
    /// <param name = "_endDate">_endDate buffer</param>
    /// <param name = "_custMandateId">_custMandateId buffer</param>
    /// <param name = "_custMandateScheme">_custMandateScheme buffer</param>
    public void setMandateStatusForBS(CustDirectDebitMandate _lCustDirectDebitMandate,
                                    SKS_EB_BankRegisterStatus _bankRegisterStatus,
                                    SKS_EB_DateTime _effectiveDate,
                                    SKS_EB_DateTime _endDate,
                                    CustMandateId _custMandateId,
                                    SKS_EB_MandateType _custMandateScheme)
    {
        CustTable				locCustTable;

        locCustTable = CustTable::find(_lCustDirectDebitMandate.CustAccount);

        ttsbegin;

        if(_bankRegisterStatus == SKS_EB_BankRegisterStatus ::Accepted)
        {
            _lCustDirectDebitMandate.MandateReference = _custMandateId;
            _lCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
            _lCustDirectDebitMandate.SKS_EB_MandateAutoStatus = SKS_EB_MandateAutoStatus::Completed;
            _lCustDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
            _lCustDirectDebitMandate.SKS_EB_RegisterStatusDate = _effectiveDate;
            _lCustDirectDebitMandate.Status = CustMandateStatus::New;
            _lCustDirectDebitMandate.SignatureDate = DateTimeUtil::date(_effectiveDate);
            _lCustDirectDebitMandate.SignatureLocation = LogisticsPostalAddress::findRecId(_lCustDirectDebitMandate.CustomerAddress).City;
            if(DateTimeUtil::date(_endDate) == datenull() && _lCustDirectDebitMandate.SignatureDate != dateNull()) //Bug 11028
            {
                _lCustDirectDebitMandate.ExpirationDate = dateMthFwd(_lCustDirectDebitMandate.SignatureDate, CustParameters::find().MandateDefaultExpirationMonths) - 1;
            }
            else
            {
                _lCustDirectDebitMandate.ExpirationDate = DateTimeUtil::date(_endDate);
            }
        }
        else if(_bankRegisterStatus == SKS_EB_BankRegisterStatus::Rejected)
        {
            _lCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Rejected;
            _lCustDirectDebitMandate.SKS_EB_MandateAutoStatus = SKS_EB_MandateAutoStatus::Completed;
            _lCustDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
            _lCustDirectDebitMandate.SKS_EB_RegisterStatusDate = _endDate;
            _lCustDirectDebitMandate.CancellationDate = DateTimeUtil::date(_endDate);
            _lCustDirectDebitMandate.Status = CustMandateStatus::Canceled;
        }

        _lCustDirectDebitMandate.selectForUpdate(true);
        _lCustDirectDebitMandate.update();

        if(_lCustDirectDebitMandate.Status == CustMandateStatus::New && !_lCustDirectDebitMandate.BankAccount)
        {
            SKS_EB_CustDirectDebitMandateEventHandler::updateCustTableRecords(_lCustDirectDebitMandate);

            CustTable lCusttable;

            select firstonly lCusttable where lCusttable.AccountNum == _lCustDirectDebitMandate.CustAccount;

            ttsbegin;
            _lCustDirectDebitMandate.selectForUpdate(true);
            _lCustDirectDebitMandate.BankAccount = lCusttable.BankAccount;
            _lCustDirectDebitMandate.doupdate();
            ttscommit;
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>