<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadParseNAI</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_BR_ReadParseNAI extends SKS_BR_ReadParse
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>conConvertRecordType01</Name>
				<Source><![CDATA[
    protected container conConvertRecordType01()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH THE NAI SPEC
        //
        //SPEC
        //Record Type,Sender ID,Reciever ID,System DateYYMMDD,System Time HHMM(24hour),File Sequency Nbr,Physical Record Length,Blocking Factor/
        //SAMPLE
        //01,,1A2B,121028,1,78,78,/
        int intNumberOfHighLevelFields = 8;
        int intCounter = 1;
        container conReturnValue;
        ;
    
        while(!this.boolStringIsEmpty(currentRecord))
        {
            for(intCounter = 1; intCounter <= intNumberOfHighLevelFields; intCounter++)
            {
                conReturnValue += this.strGetField();
                this.strRemoveCurrentField();
            }
    
        }
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType02</Name>
				<Source><![CDATA[
    protected container conConvertRecordType02()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH THE NAI SPEC
        //Record Type, Ultimate reciever ID, originator ID, Group Status, As-of Date(YYMMDD), As-of Time(always 0000)
        //02,1A2B,1A2B3C4D,1,121028,0000/
        int intNumberOfHighLevelFields = 6;
        int intCounter = 1;
        container conReturnValue;
        ;
    
        while(!this.boolStringIsEmpty(currentRecord))
        {
            for(intCounter = 1; intCounter <= intNumberOfHighLevelFields; intCounter++)
            {
                conReturnValue += this.strGetField();
                this.strRemoveCurrentField();
            }
    
        }
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType03</Name>
				<Source><![CDATA[
    protected container conConvertRecordType03()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH THE NAI SPEC
        //AS FOUND ON PAGES 15,16, 17 & 20,21 OF THE SPEC
        //*********************************************************
        //IT HAS A MIN OF 5 FIELDS, BUT, DEPENDING
        //THE NUMBER OF SWIFT CODES, A FILE COULD HAVE 3+2n fields
        // where n is the number of unique transaction codes
        //*********************************************************
        //Record Type, Commercial Account Number, Currency Code(SWIFT), Transaction Code, Amount/
        //03,12345689,AUD,015,111223,100,000,500,30000/
    
    
        int intNumberOfHighLevelFields = 3;
        int intCounter = 1;
        container conReturnValue;
        ;
    
        //Read initial three fields
        for(intCounter = 1; intCounter <= intNumberOfHighLevelFields; intCounter++)
        {
            conReturnValue += this.strGetField();
            this.strRemoveCurrentField();
        }
    
        //this will read ANY NUMBER OF OCCURANCES
        //of the typecode groupings
        conReturnValue += this.conTypeCodeRead();
    
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType16</Name>
				<Source><![CDATA[
    protected container conConvertRecordType16()
    {
        //THIS READ IS WRITTEN TO COMPLY WITH THE NAI SPEC
        //Record type, Transaction Code, Amount, Funds Type,Bank Reference Number, Misc Text
        //16,475,5000,0,975,Demo Detail
        int intNumberOfHighLevelFields = 6;
        int intCounter = 1;
        container conReturnValue;
        ;
    
        while(!this.boolStringIsEmpty(currentRecord))
        {
            for(intCounter = 1; intCounter <= intNumberOfHighLevelFields; intCounter++)
            {
    
                if (intCounter != 6)
                {
                    conReturnValue += this.strGetField();
                    this.strRemoveCurrentField();
                    if (intCounter == 4)
                        conReturnValue = this.conFundTypeRead(conPeek(conReturnValue,conLen(conReturnValue)), conReturnValue);
                }
                else
                {
                    While( strStartsWith(currentRecord,'/') || strStartsWith(currentRecord,','))//if it starts with a delimiter
                            currentRecord = subStr(currentRecord,2,strLen(currentRecord) - 1);//strip the delimiter
    
                    conReturnValue += strRTrim(currentRecord);
    
                    currentRecord = '';
                }
    
    
            }
    
        }
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType49</Name>
				<Source><![CDATA[
    protected container conConvertRecordType49()
    {
        //CODED TO COMPLY WITH NAI SPEC
        //Record Type,Account control total A, Account control total B,
        //49,186500,387900/
    
        int intNumberOfHighLevelFields = 3;
        int intCounter = 1;
        container conReturnValue;
        ;
    
        while(!this.boolStringIsEmpty(currentRecord))
        {
            for(intCounter = 1; intCounter <= intNumberOfHighLevelFields; intCounter++)
            {
                if(intCounter >= 2)//the second field might have a plus or minus.  Strip the plus.
                    conReturnValue += strRem(this.strGetField(), '+');
                else//any other field, import.
                    conReturnValue += this.strGetField();
                this.strRemoveCurrentField();
            }
    
        }
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType98</Name>
				<Source><![CDATA[
    protected container conConvertRecordType98()
    {
        //CODED TO NAI SPEC
        //Record Type,Group control total A, Number of Accounts Group Control Total B
        //98,78455975,13, 844352254
    
    
        int intNumberOfHighLevelFields = 4;
        int intCounter = 1;
        container conReturnValue;
        ;
    
        while(!this.boolStringIsEmpty(currentRecord))
        {
            for(intCounter = 1; intCounter <= intNumberOfHighLevelFields; intCounter++)
            {
                if((intCounter == 2) || (intCounter == 4))//the second field might have a plus or minus.  Strip the plus.
                    conReturnValue += strRem(this.strGetField(), '+');
                else//any other field, import.
                    conReturnValue += this.strGetField();
                this.strRemoveCurrentField();
            }
    
        }
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType99</Name>
				<Source><![CDATA[
    protected container conConvertRecordType99()
    {
        //CODED TO TO COMPLY WITH THE NAI SPEC
        //Record type, File Control Total A, Number of Groups, Number of records, File Control Total
        //99,1584455410,1,128,687468760
    
        int intNumberOfHighLevelFields = 5;
        int intCounter = 1;
        container conReturnValue;
        ;
    
        while(!this.boolStringIsEmpty(currentRecord))
        {
            for(intCounter = 1; intCounter <= intNumberOfHighLevelFields; intCounter++)
            {
                if((intCounter == 2) || (intCounter == 5))//the second field might have a plus or minus.  Strip the plus.
                    conReturnValue += strRem(this.strGetField(), '+');
                else//any other field, import.
                    conReturnValue += this.strGetField();
                this.strRemoveCurrentField();
            }
    
        }
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conTypeCodeRead</Name>
				<Source><![CDATA[
    protected container conTypeCodeRead()
    {
        //Type code field groups can reccur
        container conReturnValue;
        ;
    
        while(!this.boolStringIsEmpty(currentRecord))
        {
    
            //READ TYPE CODE
            conReturnValue += this.strGetField();
            this.strRemoveCurrentField();
    
            //READ AMOUNT
            conReturnValue += strRem(this.strGetField(), '+');
            this.strRemoveCurrentField();
    
        }
        return conReturnValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>