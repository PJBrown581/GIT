<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_NZ_ASBBANK_MT9</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class SKS_EFT_Format_NZ_ASBBANK_MT9 extends SKS_EFT_Format
/// </summary>
/// <summary>
/// SKS_EFT_Format_NZ_ASBBANK_MT9  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_NZ_ASBBANK_MT9  extends SKS_EFT_Format
{
    #define.FormatVersion('20220525')
    AmountMST   mTotalAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {   
       // Header Record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Detail record
            this.rec_Detail();

            next mSKS_EFT_FileDetail;
        }

        // Trailer Record
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// Header Record
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                 Length      Starting Position
        //1 	File Type 	                                2 N 	        1
        //2 	Bank Number 	                            2 N 	        3
        //3 	Branch Number 	                            4 N 	        5
        //4 	Unique Number 	                            7 N 	        9
        //5 	Registration Suffix 	                    2 N 	        16
        //6 	Filler 	                                    1 A 	        18
        //7.1 	Due Date 	                                6 N 	        19
        //7.2 	Filler 	                                    7 A 	        25
        //8 	Client Short  Name 	                        20 A 	        32
        //9 	Filler 	                                    109 A 	        52
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value1, value2, value3, value4;

        //1 	File Type 	                                2 N 	        1
        sb.Append('12');

        //2 	Bank Number 	                            2 N 	        3
        value1 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BankNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(2, value1, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3 	Branch Number 	                            4 N 	        5
        value2 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BranchNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(4, value2, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4 	Unique Number 	                            7 N 	        9
        value3 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('UniqueNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(7, value3, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        //5 	Registration Suffix 	                    2 N 	        16
        value4 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RegistrationSuffix', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(2, value4, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //6 	Filler 	                                    1 A 	        18
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //7.1 	Due Date 	                                6 N 	        19
        sb.Append(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits2));

        //7.2 	Filler 	                                    7 A 	        25
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8 	Client Short  Name 	                        20 A 	        32
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_FileDetail.FileACHImmOriginName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //9 	Filler 	                                    109 A 	        52
        sb.Append(SKS_PP_StringFormats::strFill(109, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detail Record
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                             Length      Staring Position
        //1 	Record Type 	                                        2 N 	        1
        //2 	Bank Number 	                                        2 N 	        3
        //3 	Branch Number 	                                        4 N 	        5
        //4 	Unique Number 	                                        7 N 	        9
        //5.1 	Suffix details 	                                        2 N 	        16
        //5.2 	Filler 	                                                1 A 	        18
        //6 	Transaction Code 	                                    3 N 	        19
        //7 	Amount 	                                                10 N 	        22
        //8 	This Party Name 	                                    20 A 	        32
        //9 	This Party Numeric Reference 	                        12 N 	        52
        //10 	This Party Code 	                                    12 A 	        64
        //11 	This Party Alpha Reference 	                            12 A 	        76
        //12 	This Party Particulars 	                                12 A 	        88
        //13 	Filler 	                                                1 A 	        100
        //14 	Other Party Name 	                                    20 A 	        101
        //15 	Other Party Code 	                                    12 A 	        121
        //16 	Other Party Alpha Reference 	                        12 A 	        133
        //17 	Other Party Particulars 	                            12 A 	        145
        //18 	Filler 	                                                4 A 	        157
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str transactionCode, sufficDetails, thisPartyCode;
        
        //1 	Record Type 	                                        2 N 	        1
        sb.Append('13');

        //2 	Bank Number 	                                        2 N 	        3
        sb.Append(SKS_PP_StringFormats::strFill(2, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //3 	Branch Number 	                                        4 N 	        5
        sb.Append(SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4 	Unique Number 	                                        7 N 	        9
        sb.Append(SKS_PP_StringFormats::strFill(7, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //5.1 	Suffix details 	                                        2 N 	        16
        //5.2 	Filler 	                                                1 A 	        18
        sufficDetails = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SuffixDetails', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(3, sufficDetails, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //6 	Transaction Code 	                                    3 N 	        19
        transactionCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TransactionCode', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(3, transactionCode, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //7 	Amount 	                                                10 N 	        22
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 10));
        mTotalAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        //8 	This Party Name 	                                    20 A 	        32
        sb.Append(SKS_PP_StringFormats::strFill(20, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //9 	This Party Numeric Reference 	                        12 N 	        52
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10 	This Party Code 	                                    12 A 	        64
        thisPartyCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ThisPartyCode', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(12, thisPartyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11 	This Party Alpha Reference 	                            12 A 	        76
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12 	This Party Particulars 	                                12 A 	        88
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13 	Filler 	                                                1 A 	        100
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //14 	Other Party Name 	                                    20 A 	        101
        sb.Append(SKS_PP_StringFormats::strFill(20, this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHImmOriginName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //15 	Other Party Code 	                                    12 A 	        121
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16 	Other Party Alpha Reference 	                        12 A 	        133
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //17 	Other Party Particulars 	                            12 A 	        145
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //18 	Filler 	                                                4 A 	        157
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trailer Record
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Trailer()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                             Length      Starting Position
        //1 	Record Type 	                        2 N 	        1
        //2 	Key Field 	                            2 N 	        3
        //3 	Hash Total 	                            11 N 	        5
        //4 	Filler 	                                6 A 	        16
        //5 	Total Amount 	                        10 N 	        22
        //6 	Filler 	                                129 A 	        32
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1 	Record Type 	                        2 N 	        1
        sb.Append('13');

        //2 	Key Field 	                            2 N 	        3
        sb.Append('99');

        //3 	Hash Total 	                            11 N 	        5
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4 	Filler 	                                6 A 	        16
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5 	Total Amount 	                        10 N 	        22
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mTotalAmount, 10));

        //6 	Filler 	                                129 A 	        32
        sb.Append(SKS_PP_StringFormats::strFill(129, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId  &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>