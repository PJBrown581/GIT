<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CustPaymSettlementManager_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(CustPaymSettlementManager))]
final class SKS_CustPaymSettlementManager_Extension
{
    private CustParameters custParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SKS_convertPaymAmountCurToTransAmountCur</Name>
				<Source><![CDATA[
    // The purpose of this method is to make convertPaymAmountCurToTransAmountCur publicly accessible
    // so it can be used by SKS_LB code
    public AmountCur SKS_convertPaymAmountCurToTransAmountCur(CustTransOpen _transOpen, AmountCur _paymAmountCur)
    {
        return this.convertPaymAmountCurToTransAmountCur(_transOpen, _paymAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_convertTransAmountCurToPaymAmountCur</Name>
				<Source><![CDATA[
    // The purpose of this method is to make convertPaymAmountCurToTransAmountCur publicly accessible
    // so it can be used by SKS_LB code
    public AmountCur SKS_convertTransAmountCurToPaymAmountCur(CustTransOpen _transOpen, AmountCur _transAmountCur)
    {
        return this.convertTransAmountCurToPaymAmountCur(_transOpen, _transAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_getMarkedLB</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the other payment or Lockbox Journal the specified open transaction is marked for settlement in.
    /// </summary>
    /// <param name="_markedCustTransOpen">
    /// The open transaction.
    /// </param>
    /// <param name="_applicRecId">
    /// RecId of SKS_LB_JournalARApplic
    /// </param>
    /// <returns>
    /// Journal number the open transaction is marked for settlement in or zero if none is found.
    /// </returns>
    public LedgerJournalID SKS_getMarkedLB(CustTransOpen _markedCustTransOpen, RefRecId _applicRecId)
    {
        boolean lbIsMarked = false;
        
        SKS_LB_JournalARApplic arApplic;
        SKS_LB_JournalAR journalAR;
        SpecTrans specTrans;
        SpecTransManager specTransMgr = this.parmSpecTransMgr();
        str journalNum;
        SKS_BR_BankTran BRBankTran;
        
        lbIsMarked = specTransMgr.existForOtherSpec(
                _markedCustTransOpen.company(),
                _markedCustTransOpen.TableId,
                _markedCustTransOpen.RecId);
        
        if (!lbIsMarked)
        {
            Select firstonly crossCompany RecId, SKS_LB_JournalARRecId
                    From arApplic
                        Where arApplic.CustTransOpenRecId == _markedCustTransOpen.RecId
                    Join RecId, JournalId
                        From journalAR
                            where arApplic.RecId != _applicRecId // Prevents duplicate from being current record
                            && journalAR.RecId == arApplic.SKS_LB_JournalARRecId
                            && arApplic.SettleAmountCur != 0
                            && journalAR.LedgerJournalTransRecId == 0; // Only check if it hasn't been pushed to Payment Journal
            if (arApplic)
            {
                journalNum = strFmt("@SYS76766", "@SKS6261", journalAR.JournalId);
            }
            else
            {
                Select firstonly crossCompany RecId
                    From arApplic
                        Where arApplic.CustTransOpenRecId == _markedCustTransOpen.RecId
                    Join RecId, ImportedStatementNum
                        From BRBankTran
                        where arApplic.RecId != _applicRecId // Prevents duplicate from being current record
                            && BRBankTran.RecId == arApplic.SKS_BR_BankTran
                            && arApplic.TransactionAmount != 0
                            && BRBankTran.LedgerJournalReciD == 0;
                if(arApplic)
                {
                    journalNum = strFmt("@SYS76766", "@SYS23259", BRBankTran.ImportedStatementNum);
                }
            }
        }
        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        /*
        else
        {
            specTrans = specTrans::findByRef(_markedCustTransOpen.company(),
                    _markedCustTransOpen.TableId,
                    _markedCustTransOpen.RecId);
        
            journalNum = strFmt("@SYS76766", "@SYS96171", LedgerJournalTrans::findRecId(specTrans.SpecRecId,false).JournalNum);
        }
        */
        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        
        return journalNum;
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_lbIsAlreadyMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether the specified open transaction is marked for settlement by
    /// another payment or in another Lockbox Journal
    /// </summary>
    /// <param name="_markedCustTransOpen">
    /// The open transaction.
    /// </param>
    /// <param name="_applicRecId">
    /// RecId of SKS_LB_JournalARApplic
    /// </param>
    /// <returns>
    /// true if the open transaction is marked for settlement; otherwise, false.
    /// </returns>
    public boolean SKS_lbIsAlreadyMarked(CustTransOpen _markedCustTransOpen, RefRecId _applicRecId)
    {
        SpecTransManager specTransMgr;
        boolean lbIsMarked = false;
        SKS_LB_JournalARApplic  arApplic;
        SKS_LB_JournalAR  journalAR;
        SKS_BR_BankTran     BRBankTran;
        
        specTransMgr    =   this.parmSpecTransMgr();
        lbIsMarked = specTransMgr.existForOtherSpec(
            _markedCustTransOpen.company(),
            _markedCustTransOpen.TableId,
            _markedCustTransOpen.RecId);
        if (!lbIsMarked)
        {
            Select firstonly crossCompany RecId, SKS_LB_JournalARRecId
                From arApplic
                    Where arApplic.CustTransOpenRecId == _markedCustTransOpen.RecId
                Join RecId
                    From journalAR
                    where arApplic.RecId != _applicRecId // Prevents duplicate from being current record
                        && journalAR.RecId == arApplic.SKS_LB_JournalARRecId
                        && arApplic.SettleAmountCur != 0
                        && journalAR.LedgerJournalTransRecId == 0; // Only check if it hasn't been pushed to Payment Journal
            if (arApplic)
            {
                lbIsMarked = true;
            }
            else
            {
                Select firstonly crossCompany RecId
                    From arApplic
                        Where arApplic.CustTransOpenRecId == _markedCustTransOpen.RecId
                    Join RecId
                        From BRBankTran
                        where arApplic.RecId != _applicRecId // Prevents duplicate from being current record
                            && BRBankTran.RecId == arApplic.SKS_BR_BankTran
                            && arApplic.TransactionAmount != 0
                            && BRBankTran.LedgerJournalReciD == 0;
                if(arApplic)
                {
                    lbIsMarked = true;
                }
            }
        }
        return lbIsMarked;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>sks_isAlreadyMarked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets whether the specified open transaction is marked for settlement by
    ///     another payment or in another Lockbox Journal. If transaction marked partially - allow to marked it again
    /// </summary>
    /// <param name="_markedCustTransOpen">
    ///     The open transaction.
    /// </param>
    /// <param name="_applicRecId">
    ///     RecId of SKS_LB_JournalARApplic
    /// </param>
    /// <returns>
    ///     true if the open transaction is marked for settlement; otherwise, false.
    /// </returns>
    public static boolean sks_isAlreadyMarked(CustTransOpen _markedCustTransOpen, RefRecId _applicRecId)
    {
        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        /*
        SKS_LB_JournalARApplic journalARApplic;
        SKS_LB_JournalAR journalAR;
        select crossCompany RecId, SKS_LB_JournalARRecId from journalARApplic
            join RecId From journalAR
            where journalARApplic.RecId != _applicRecId // Prevents duplicate from being current record
                && journalARApplic.CustTransOpenRecId == _markedCustTransOpen.RecId
                && journalARApplic.SKS_LB_JournalARRecId == journalAR.RecId
                && journalARApplic.SettleAmountCur != 0
                && journalAR.LedgerJournalTransRecId == 0; // Only check if it hasn't been pushed to Payment Journal

        if (journalARApplic)
        {
            return true;
        }
        else
        */
        // SKS_19380_FlintfoxAresInvoiceApplicaiton
        {
            // Search marked bank transactions
            SKS_BR_BankTran bankTrans;
            SKS_LB_JournalARApplic journalARApplic;
            select sum(TransactionAmount) from journalARApplic
                join RecId From bankTrans
                where journalARApplic.RecId != _applicRecId // Prevents duplicate from being current record
                   && journalARApplic.CustTransOpenRecId == _markedCustTransOpen.RecId
                   && journalARApplic.SKS_BR_BankTran == bankTrans.RecId
                   && journalARApplic.TransactionAmount != 0
                   && bankTrans.LedgerJournalReciD == 0;

            if (journalARApplic.TransactionAmount != 0 &&
                journalARApplic.TransactionAmount  >= _markedCustTransOpen.sksGetRemainingAmount())
            {
                return true;
            }
        }

        // Fully settled
        if (SpecTrans::existByRef(_markedCustTransOpen.company(), _markedCustTransOpen.TableId, _markedCustTransOpen.RecId))
        {
            Amount remainingAmount = _markedCustTransOpen.sksGetRemainingAmount();
            return remainingAmount == 0;
        }
        else
        {
            return false;
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>