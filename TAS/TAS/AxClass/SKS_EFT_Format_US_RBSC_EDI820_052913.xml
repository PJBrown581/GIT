<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_RBSC_EDI820_052913</Name>
	<SourceCode>
		<Declaration><![CDATA[
// RBS Citizens Integrated Payables EDI820 Transaction Set X12 4010
// revised 5/29/2013
/// <summary>
/// SKS_EFT_Format_US_RBSC_EDI820_052913 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_RBSC_EDI820_052913 extends SKS_EFT_Format
{
    #define.FormatVersion('20221027')
    #define.LineEnd('~')
    #define.Separator('*')
    #define.ACHCCD('ACH-CCD')
    #define.ACHCCP('ACH-CCP')
    #define.ACHPPD('ACH-PPD')
    #define.ACHPPP('ACH-PPP')
    #define.FWT('FWT')
    #define.SWT('SWT')
    #define.Wire_BOOK('Wire-BOOK')          //VSTS#11156
    #define.Wire_DD('Wire-DD')
    #define.APCARD('APCARD')
    #define.CHK('CHK')
    #define.PAYMODEX('PAYMODE-X')           //VSTS#11550
    #define.ACHIAT('ACH-IAT')               //VSTS#11544

    int mTranSetCount;
    int mSegmentCount;
    int mRecordCount;
    str mSenderControlNbr;

    str     mISASection;
    str     mGSSection;
    str     mIEASection;
    int     mCtrlQuantity;
    int     mCreditQty;
    int     mDebitQty;
    AmountMST mTotCrAmt;
    AmountMST mTotDbAmt;
    int mSequenceNumber;

    SKS_EFT_EDI mSKS_EFT_EDI;
    VendBankAccount mVendBankAccount;
    BankAccountTable mBankAccountTable;
    SKS_EB_Vendor mSKS_EB_Vendor;
    LogisticsPostalAddress          postalAddress;
    LogisticsAddressCountryRegion mLogisticsAddressCountryRegion;
    System.Text.StringBuilder msb;
    str mBPR_03;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildString</Name>
				<Source><![CDATA[
    boolean buildString()
    {
        System.Text.StringBuilder sb;
        str record = msb.ToString();
        int pos = 1;
        int length;
        int recMod;
        int lineCount;
        str value;
        int totalCount = 1;
        
        length = strLen(record);
        lineCount = length div 80;
        recMod = length mod 80;
        
        if(recMod > 0)
        {
            lineCount++;            
        }
        // Create the compressed records
        while(lineCount >= totalCount)
        {
            sb = new System.Text.StringBuilder();
            value = subStr(record, pos, 80);
            pos = pos + 80;
            
            // Pmt Related Info 04-83
            sb.Append(value);
            this.fileWrite(sb.ToString());
            totalCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
        ;
    
        msb = new System.Text.StringBuilder();
    
        mRecordCount = 0;

        while(mSKS_EFT_FileDetail)
        {
            mCtrlQuantity++;

            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EB_Vendor
            this.getSKS_EB_Vendor();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get VendBankAccount
            this.getVendBankAccount();
    
            // Get Bank account
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_VendorPaym.EDI820Layout, mSKS_EFT_File.RecId);
            mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileFormat.NextFileId,0,0,0,0));
    
            if(firstRec)
            {
                firstRec = false;
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Detail lines
            this.rec_ST();
            this.rec_BPR();

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT     ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT     ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE_DD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #Wire_BOOK ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCCD ||    //SKS#DevOps:15495
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCCP)
            {
                this.rec_NTE_OBI();
            }

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACHIAT)               //VSTS#11544
            {
                this.rec_TRN();
            }
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                Case #SWT:
                case #WIRE_BOOK:
                case #WIRE_DD:
                case #ACHIAT:                       //VSTS#11544
                    this.rec_CUR();
                    break;
            }
    
            this.rec_N1PR();
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHIAT)               //VSTS#11544
            {
                this.rec_N3PR();
                this.rec_N4PR();
            }
            this.rec_N1PE();
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                Case #SWT:
                case #Wire_BOOK:
                case #Wire_DD:
                    this.rec_N3PE();
                    this.rec_N4PE();
                    this.rec_N1BK();
                    this.rec_N3BK();
                    this.rec_N4BK();
                    break;
                case #ACHIAT:                       //VSTS#11544
                    this.rec_N3PE();
                    this.rec_N4PE();
                    this.rec_N1BK();
                    this.rec_N4BK();
                    this.rec_N1RB();
                    break;
                case #CHK:
                    this.rec_N3PE();
                    this.rec_N4PE();
                    break;
            }
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #APCARD)
            {
                this.rec_REFL1();
            }
    
            this.rec_ENT();
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCP:
                Case #ACHPPP:
                    this.rec_RMRIV(mSKS_EFT_FileDetail);
                    this.rec_DTM(mSKS_EFT_FileDetail);
                    this.rec_ADXL2(mSKS_EFT_FileDetail);
                    this.rec_ADXCS(mSKS_EFT_FileDetail);
                    break;
                case #ACHCCD:
                case #ACHPPD:
                case #CHK:
                    while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId                    
                    {
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
                        this.rec_DTM(invSKS_EFT_FileDetail);   
                        this.rec_ADXL2(invSKS_EFT_FileDetail);
                        this.rec_ADXCS(invSKS_EFT_FileDetail);
                    }
                    break;
                case #APCARD:
                    while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                    {
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
                        this.rec_DTM(invSKS_EFT_FileDetail);
                    }
                    break;
                Case #SWT:
                Case #FWT:
                    if(SKS_EFT_Format::getCodelookupvalue('IdCodeQualifier', mSKS_EFT_FileDetail.RecId) != '')
                    {
                        this.rec_NM1RB();
                        this.rec_NM3RB();
                        this.rec_NM4RB();
                    }
                    break;
                case #PAYMODEX:
                    while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                    {
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
                        this.rec_REFVR(invSKS_EFT_FileDetail);
                        this.rec_NTE(invSKS_EFT_FileDetail);
                        this.rec_DTM(invSKS_EFT_FileDetail);
                        this.rec_ADXCM(invSKS_EFT_FileDetail);
                    }
                    break;
            }

            this.rec_SE();
    
            mSegmentCount = 0;
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE();
        this.rec_IEA();
        this.buildString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJournaltxt</Name>
				<Source><![CDATA[
    private str getInvoiceJournaltxt(SKS_EFT_FileDetail _SKS_EFT_FileDetail)
    {
        VendTrans lVendTrans;
        
        select firstonly crossCompany Txt from lVendTrans where
            lVendTrans.RecId == _SKS_EFT_FileDetail.VendTransRecId;
        
        return this.CharacterReplacement(lVendTrans.Txt);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        LedgerJournalTrans ledgerJournalTrans;
        
        select firstonly crossCompany Txt from ledgerJournalTrans where
            ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
        
        return ledgerJournalTrans.Txt;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryRegionISO</Name>
				<Source><![CDATA[
    // Load or refresh global mLogisticsAddressCountryRegion
    // Return a 2 digit ISO country code
    private LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryRegionISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        str value;
        ;
        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(mLogisticsAddressCountryRegion.CountryRegionId != _countryRegion)
            {
                mLogisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = mLogisticsAddressCountryRegion.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    // Load or refresh global mVendBankAccount
    void getSKS_EB_Vendor()
    {
        ;
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankAccount</Name>
				<Source><![CDATA[
    // Load or refresh global mVendBankAccount
    void getVendBankAccount()
    {
        ;
        if(mVendBankAccount.AccountID != mSKS_EFT_FileDetail.DepBankAccountId || mVendBankAccount.VendAccount != mSKS_EFT_FileDetail.AccountNum)
        {
            mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ADXCS</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Discount Amount                                     18      AN
    //02    Discount Reason Code                                2       ID
    
    boolean rec_ADXCS(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        
        mSegmentCount++;
        mRecordCount++;
        
        msb.Append('ADX');                                  //SKG#VSTS:11716
        msb.Append(#Separator);
        
        //01    Discount Amount
        msb.Append(num2str(0,0,2,0,0));
        msb.Append(#Separator);
        
        //02    Discount Reason Code
        msb.Append('CS');
        
        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ADXL2</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Discount Amount                                     18      AN
    //02    Discount Reason Code                                2       ID
    
    boolean rec_ADXL2(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        
        mSegmentCount++;
        mRecordCount++;
        
        msb.Append('ADX');                  //SKS#VSTS:11747
        msb.Append(#Separator);

        //01    Discount Amount
        msb.Append(num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));
        msb.Append(#Separator);
        
        //02    Discount Reason Code
        msb.Append('L2');
        
        msb.Append(#LineEnd);
        
        return true;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Trans. Handling Code                                1       ID
    //02    Monetary Amount                                     10      R
    //03    Credit/Debit Flag Code                              1       ID
    //04    Payment Method Code                                 3       ID
    //05    Payment Format                                      3       ID
    //06    DFI ID No. Qualifier                                2       ID
    //07    DFI ID Number                                       9       AN
    //08    Acct. No. Qual. Code                                2       ID
    //09    Account Number                                      12      AN
    //10    Orig. Co. ID                                        10      AN
    //11    Orig. Co. Code                                      9       AN
    //12    RDFI ID No. Qualifier                               2       ID
    //13    RDFI ID Number                                      9       N
    //14    Acct. No. Qual Code                                 2       ID
    //15    Account Number                                      35      AN
    //16    Effective Entry Date                                8       DT
    
    boolean rec_BPR()
    {
        //BP Deviation Documented
        AmountMST amt;
        date effectivDate;
        str value;
        ;
    
        mRecordCount++;
        mSegmentCount++;
    
        msb.Append('BPR');
        msb.Append(#Separator);
    
        //01    Trans. Handling Code
        if(mSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
        {
            msb.Append('P');
        }
        else
        {
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCD:
                Case #ACHPPD:
                case #Wire_BOOK:
                case #Wire_DD:
                    msb.Append('D');
                    break;
                Default:
                    msb.Append('C');
                    break;
            }
        }
        msb.Append(#Separator);
    
        //02    Monetary Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        msb.Append(num2str((amt),0,2,0,0));
        msb.Append(#Separator);
    
        //03    Credit/Debit Flag Code
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
            mDebitQty++;
            mTotDbAmt += this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        }
        else
        {
            mBPR_03 = 'C';
            mCreditQty++;
            mTotCrAmt += this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        }
        msb.Append(mBPR_03);
        msb.Append(#Separator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCP:
            Case #ACHPPD:
            Case #ACHPPP:
            case #ACHIAT:                               //VSTS#11544
                msb.Append('ACH');
                break;
            Case #FWT:
                msb.Append('FWT');
                break;
            Case #SWT:
                msb.Append('SWT');
                break;
            Case #Wire_BOOK:
                msb.Append('BKW');
                break;
            Case #Wire_DD:
                msb.Append('FEW');
                break;
            Case #CHK:
                msb.Append('CHK');
                break;
            Case #APCARD:
                msb.Append('CCC');
                break;
            Case #PAYMODEX:         //11550
                msb.Append('NON');
                break;
        }
        msb.Append(#Separator);
    
        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
                msb.Append('CCD');
                break;
            Case #ACHCCP:
                if(mSKS_EFT_Bank.WOrdPartyCountryName)      //SKS#DevOps:15782
                {
                    msb.Append('CCP');                    
                }
                else
                {
                    msb.Append('');
                }                
                break;
            Case #ACHPPD:
                msb.Append('PPD');
                break;
            Case #ACHPPP:
                msb.Append('PPP');
                break;
            Case #ACHIAT:                               //VSTS#11544
                msb.Append('IAT');
                break;
            Case #CHK:
                msb.Append('PBC');
                break;
        }
        msb.Append(#Separator);
    
        //06    DFI ID No. Qualifier
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #APCARD)
        {
            msb.Append('01');            
        }
        msb.Append(#Separator);
    
        //07    DFI ID Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCP:
            Case #ACHPPD:
            Case #ACHPPP:
            Case #ACHIAT:                               //VSTS#11544
                if(mSKS_EFT_FileDetail.BankOrigDFI != '')
                {
                    msb.Append(mSKS_EFT_FileDetail.BankOrigDFI);
                }
                else
                {
                    msb.Append(mSKS_EFT_FileDetail.BankBankTransit);
                }
                break;
            Case #SWT:
            case #FWT:
            case #Wire_BOOK:
            case #Wire_DD:
            case #CHK:
            case #PAYMODEX:         //11550
                msb.Append(mSKS_EFT_FileDetail.BankBankTransit);
                break;
        }
        msb.Append(#Separator);
    
        //08    Acct. No. Qual. Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCP:
            Case #ACHPPD:
            Case #ACHPPP:
            case #CHK:
            case #PAYMODEX:
            Case #ACHIAT:                               //VSTS#11544
                msb.Append('DA');
                break;
            Case #SWT:
            Case #FWT:
            case #Wire_BOOK:
            case #Wire_DD:
                if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
                {
                    msb.Append('SG');
                }
                else
                {
                    msb.Append('DA');
                }
                break;
            case #APCARD:
                msb.Append('DC');
                break;
        }    
        msb.Append(#Separator);
    
        //09    Account Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #APCARD)
        {
            msb.Append(mSKS_EFT_FileDetail.BankBankAcct);

            msb.Append(#Separator);
    
            //10    Orig. Co. ID
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCD:
                Case #ACHCCP:
                Case #ACHPPD:
                Case #ACHPPP:
                Case #ACHIAT:                                       //VSTS#11544
                    msb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
                    break;
                case #PAYMODEX:     //11550
                    msb.Append('PB');
                    msb.Append(substr(SKS_EFT_Format::getCodelookupvalue('CompanyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank),1,8));   //VSTS12006
                    break;                  
            }
            msb.Append(#Separator);
    
            //11    Orig. Co. Code
            msb.Append(#Separator);
    
            //12    RDFI ID No. Qualifier
            //13    RDFI ID Number
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #Wire_BOOK:
                case #Wire_DD:
                case #CHK:
                case #PAYMODEX:    //11550
                    msb.Append(#Separator);
                    break;
                Case #SWT:
                    msb.Append('02');
                    msb.Append(#Separator);
                    msb.Append(mSKS_EFT_FileDetail.DepSWIFTNo);
                    break;
                Case #ACHIAT:               //VSTS#11544
                    if(mSKS_EFT_FileDetail.DepSWIFTNo)
                    {
                        msb.Append('02');
                        msb.Append(#Separator);
                        msb.Append(mSKS_EFT_FileDetail.DepSWIFTNo);
                    }
                    else
                    {
                        msb.Append('01');
                        msb.Append(#Separator);
                        msb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                    }
                    break;
                Default:
                    msb.Append('01');
                    msb.Append(#Separator);
                    msb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                    break;
            }
            msb.Append(#Separator);

            if(mSKS_EFT_FileDetail.DepBankIBAN  &&                      //SKG#VSTS:16120
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT)            
            {
                //14    Acct. No. Qual Code
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)                
                {
                    msb.Append('SG');
                }
                else                
                {
                    msb.Append('DA');
                }
                msb.Append(#Separator);
                
                //15    Account Number
                msb.Append(mSKS_EFT_FileDetail.DepBankIBAN);
                msb.Append(#Separator);
                
            }
            else if(mSKS_EFT_FileDetail.DepBankIBAN                          &&
               (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT      ||                      //SKG#VSTS:11747
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #Wire_BOOK||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #Wire_DD))
            {
                //14    Acct. No. Qual Code
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)//SKS_VSTS_13754
                {
                    msb.Append('SG');
                }
                else
                {
                    msb.Append('DA');
                }
                msb.Append(#Separator);
                
                //15    Account Number
                msb.Append(mSKS_EFT_FileDetail.DepBankIBAN);
                msb.Append(#Separator);
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK  &&
                    mSKS_EFT_FileFormatPaymSpec.TransactionCode != #PAYMODEX)    //11550
            {
                //14    Acct. No. Qual Code
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    msb.Append('SG');
                }
                else
                {
                    msb.Append('DA');
                }
                msb.Append(#Separator);
    
                //15    Account Number
                msb.Append(mSKS_EFT_FileDetail.DepBankAcct);
                msb.Append(#Separator);
            }
            else
            {
                msb.Append(#Separator);
                msb.Append(#Separator);                
            }
    
            //16    Effective Entry Date
            effectivDate = SKS_EFT_Processing::GetOffsetDate(0, mSKS_EFT_FileDetail.EffectiveDate, mSKS_EFT_Bank.BankHolidayGroupId);
            msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(effectivDate));

            //17    Business function code
            value = SKS_EFT_Format::getValueFromCode('BusinessFuncCd', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
            if(value && mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHIAT)                        //VSTS#11544
            {
                msb.Append(#Separator);
                msb.Append(value);
            }
        }
        else
        {
            //10    Orig. Co. ID
            msb.Append(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CompanyCCAccnt', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
        }
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CUR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Currency Code                                       3       ID      Payment currency
    //03    Exchange Rate                                       10      R
    //04    Entity ID Code                                      3       ID
    //05    Currency Code                                       3       ID      Payment currency
    
    boolean rec_CUR()
    {
        //BP Deviation Documented
        mSegmentCount++;
        mRecordCount++;

        msb.Append('CUR');
        msb.Append(#Separator);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHIAT)               //VSTS#11544
        {
            //01     Entity ID Code
            msb.Append('PR');
            msb.Append(#Separator);
            
            //02    Currency Code
            msb.Append(mBankAccountTable.CurrencyCode);
            msb.Append(#Separator);
            
            //03    Exchange Rate
            msb.Append(#Separator);
            
            //04    Entity ID Code
            msb.Append('PE');
            msb.Append(#Separator);
            
            //05    Currency Code
            msb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {            
            //01     Entity ID Code
            msb.Append('ZZ');
            msb.Append(#Separator);
    
            //02    Currency Code
            msb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
            //03    Exchange Rate
            //04    Entity ID Code
            //05    Currency Code
        }
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Date/Time Qualifier                                 3       ID
    //02    Date                                                4       Date    CCYYMMDD
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        // Only write segment if an Invoice exists.  If no invoice, the Invoice date will be null.
        if(invSKS_EFT_FileDetail.InvoiceDate != dateNull())
        {
            mSegmentCount++;
            mRecordCount++;
    
            //BP Deviation Documented
    
            msb.Append('DTM');
            msb.Append(#Separator);
    
            //01     Date/Time Qualifier
            msb.Append('003');
            msb.Append(#Separator);
    
            //03    Description
            msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
    
            msb.Append(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Assigned Number                                     6       N0
    boolean rec_ENT()
    {
        //BP Deviation Documented
        mSegmentCount++;
        mRecordCount++;
    
        msb.Append('ENT');
        msb.Append(#Separator);
    
        //01    Assigned Number
        msb.Append('100');
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Transaction Sets Included                 6       N
    //2     Group Control Number                                9       AN
    boolean rec_GE()
    {
        str value;
        ;
        mRecordCount++;
    
        mSKS_EFT_EDI.setTranSetCount(mTranSetCount);
        value = mSKS_EFT_EDI.buildGE();
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Functional ID Code                                  2       AN
    //2     Application Sender's Code                           15      AN
    //3     Application Receiver's Code                         15      AN
    //4     Date                                                8       D
    //5     Time                                                8       T
    //6     Group Control Number                                9       AN
    //7     Responsible Agency Code                             2       AN
    //8     Version/Release ID Code                             12      AN
    
    boolean rec_GS()
    {
        str value;
        ;
        mRecordCount++;
    
        value = mSKS_EFT_EDI.buildGS();
    
        mGSSection = value;

        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Included Functional Group                 5       N
    //2     Interchange Control Number                          9       AN
    boolean rec_IEA()
    {
        str value;
        ;
        mRecordCount++;
    
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA();
    
        mIEASection = value;

        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Authorization Information Qualifier                 2       AN      00
    //02    Authorization Information                           10      AN      Blank fill
    //03    Security Information Qualifier                      2       AN      00
    //04    Security Information                                10      AN      Blank fill
    //05    Interchange ID Qualifier                            2       AN      ZZ
    //06    Interchange Sender ID                               15      AN      Fed Tax Id
    //07    Interchange ID Qualifier                            2       AN      ZZ
    //08    Interchange Receiver ID                             15      AN      ABA Bank
    //09    Interchange Date                                    6       D       YYMMDD
    //10    Interchange Time                                    4       T       HHMM
    //11    Interchange Control Standards Identifier            1       AN      U
    //12    Interchange Control Version Number                  5       AN      00200
    //13    Interchange Control Number                          9       N       Control number (Zero padded)
    //14    Acknowledgement Requested                           1       N       0
    //15    Test Indicator                                      1       AN      P
    //16    Subelement Separator                                1       AN      ~
    boolean rec_ISA()
    {
        str value;
        ;
        mRecordCount++;
    
        value = mSKS_EFT_EDI.buildISA();
    
        mISASection = value;

        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1BK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                60      AN      Receiving Bank Name
    boolean rec_N1BK()
    {
        if(mSKS_EFT_VendorPaym.WBenBankName != ''   || mVendBankAccount.Name)
        {
            mSegmentCount++;
            mRecordCount++;
    
            //BP Deviation Documented
            msb.Append('N1');
            msb.Append(#Separator);
    
            //01     Entity ID Code
            msb.Append('BK');
            msb.Append(#Separator);
    
            //02     Name
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHIAT)               //VSTS#11544
            {
                msb.Append(substr(mBankAccountTable.Name,1,35));
            }
            else
            {
                if(mSKS_EFT_VendorPaym.WBenBankName)
                {
                    msb.Append(substr(mSKS_EFT_VendorPaym.WBenBankName,1,35));
                }
                else
                {
                    msb.Append(substr(mVendBankAccount.Name,1,35));               //SKG#VSTS:11747
                }
            }
    
            msb.Append(#LineEnd);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
    //03    Identification Code Qualifier                       2       ID
    //04    Identification Code                                 80      AN      Vendor number
    boolean rec_N1PE()
    {
        //BP Deviation Documented
        str vendName;
        ;
    
        mRecordCount++;
        mSegmentCount++;
    
        msb.Append('N1');
        msb.Append(#Separator);
    
        //01     Entity ID Code
        msb.Append('PE');
        msb.Append(#Separator);
    
        //02     Name
        if(mSKS_EFT_VendorPaym.WBeneName != '')
        {
            vendName = mSKS_EFT_VendorPaym.WBeneName;
        }
        else
        {
            vendName = mSKS_EFT_FileDetail.AccountName;
        }
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #FWT:
            Case #SWT:
            case #Wire_BOOK:
            case #Wire_DD:
            case #ACHIAT:               //VSTS#11544
                msb.Append(substr(vendName,1,35));
                break;
            case #PAYMODEX:             //11550
                msb.Append(substr(vendName,1,50));
                break;
            default:
                msb.Append(substr(vendName,1,60));
        }
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK      ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #APCARD   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYMODEX) //11550
        {
            msb.Append(#Separator);
            
            //03    Identification Code Qualifier
            msb.Append('ZZ');
            msb.Append(#Separator);
            
            //04    Identification Code
            if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYMODEX)
            {
                msb.Append(this.CharacterReplacement(subStr(SKS_EFT_Format::getCodelookupvalue('PayeeSiteId', mSKS_EFT_FileDetail.RecId), 1, 25)));
            }
            else
            {
                msb.Append(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail.AccountNum, 1, 15)));
            }
        }
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                35      AN      Payer Name
    //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
    //04    Identification Code                                 80      AN
    boolean rec_N1PR()
    {
        //BP Deviation Documented
        mSegmentCount++;
        mRecordCount++;
    
        msb.Append('N1');
        msb.Append(#Separator);
    
        //01     Entity ID Code
        msb.Append('PR');
        msb.Append(#Separator);
    
        //02     Name
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #FWT:
            Case #SWT:
            case #Wire_BOOK:
            case #Wire_DD:
                msb.Append(substr(mSKS_EFT_Bank.WOrdPartyName,1,35));
                break;
            case #PAYMODEX:
                msb.Append(substr(mSKS_EFT_Bank.WOrdPartyName,1,50));
                break;
            default:
                msb.Append(substr(mSKS_EFT_Bank.WOrdPartyName,1,60));
                break;
        }
        //03    Identification Code Qualifier
        //04    Identification Code
        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYMODEX) //11550
        {
            //03    Identification Code Qualifier
            msb.Append(#Separator);
            msb.Append('ZZ');
            msb.Append(#Separator);
            
            //04    Identification Code
            msb.Append(this.CharacterReplacement(subStr((SKS_EFT_Format::getCodelookupvalue('PayerSiteId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), 1, 25)));
        }
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1RB</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                60      AN      Receiving Bank Name
    boolean rec_N1RB()
    {
        mSegmentCount++;
        mRecordCount++;
        
        msb.Append('N1');
        msb.Append(#Separator);
        
        //01     Entity ID Code
        msb.Append('RB');
        msb.Append(#Separator);
        
        //02     Name
        msb.Append(substr(mSKS_EFT_VendorPaym.WBenBankName,1,35));
        
        msb.Append(#LineEnd);
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3BK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Address information                                 55      AN      Address - Receiving Bank
    //02    Address information                                 55      AN      Identification code/ Correspondent DFI Identification
    boolean rec_N3BK()
    {
        //BP Deviation Documented
        if(mSKS_EFT_VendorPaym.WBenBankAddr != '')
        {
            mSegmentCount++;
            mRecordCount++;
    
            msb.Append('N3');
            msb.Append(#Separator);
    
            //01    Address information
            msb.Append(subStr(mSKS_EFT_VendorPaym.WBenBankAddr,1,35));
    
            //02    Address information
            msb.Append(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
    //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
    boolean rec_N3PE()
    {
        //BP Deviation Documented
        if(mSKS_EFT_VendorPaym.WBeneAddr != '' || mSKS_EFT_VendorPaym.WBeneAddr2 != '')
        {
            mSegmentCount++;
            mRecordCount++;
            msb.Append('N3');
            msb.Append(#Separator);
            
            //01    Address Information
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
            {
                msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr),1,55));                
            }
            else
            {
                msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr),1,35));                
            }
    
            //02    Address Information
            if(mSKS_EFT_VendorPaym.WBeneAddr2 != '')
            {
                msb.Append(#Separator);

                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
                {
                    msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2),1,55));                    
                }
                else
                {
                    msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2),1,35));                    
                }
            }
    
            msb.Append(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Address Information                                 35      AN      Payor Address (Line 1) Domestic and Foreign
    //02    Address Information                                 35      AN      Payor Address (Line 2) Domestic and Foreign
    boolean rec_N3PR()
    {
        //BP Deviation Documented
        ;

        mSegmentCount++;
        mRecordCount++;
        msb.Append('N3');
        msb.Append(#Separator);

        //01    Address Information
        msb.Append(substr(mSKS_EFT_Bank.WOrdPartyAddr,1,35));

        //02    Address Information
        if(mSKS_EFT_Bank.WOrdPartyAddr2 != '')
        {
            msb.Append(#Separator);
            msb.Append(substr(mSKS_EFT_Bank.WOrdPartyAddr2,1,35));
        }

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4BK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Name                                           30      AN
    //02    State or Province Code                              2       ID      Not used
    //03    Postal Code                                         9       ID      Not used
    //04    Country Code                                        3       ID
    boolean rec_N4BK()
    {
        //BP Deviation Documented

        LogisticsAddressCountryRegionISOCode countryRegionISO;
        LogisticsPostalAddress lLogisticsPostalAddress;
        ;

        postalAddress = mBankAccountTable.postalAddress();
        select firstonly Location, State, ZipCode from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == mVendBankAccount.Location;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHIAT &&                           //VSTS#11544
        (postalAddress.City != ''        ||
        postalAddress.State != ''       ||
        postalAddress.ZipCode != ''     ||
        postalAddress.CountryRegionId != ''))
        {
            mSegmentCount++;
            mRecordCount++;

            msb.Append('N4');
            msb.Append(#Separator);

            //01    City Name
            msb.Append(postalAddress.City);
            msb.Append(#Separator);

            //02    State or Province Code
            msb.Append(postalAddress.State);
            msb.Append(#Separator);

            //03    Postal Code
            msb.Append(postalAddress.ZipCode);

            msb.Append(#Separator);

            //04    Country Code
            countryRegionISO = this.getLogisticsAddressCountryRegionISO(postalAddress.CountryRegionId);
            msb.Append(countryRegionISO);

            msb.Append(#LineEnd);
        }

        else if(mSKS_EFT_VendorPaym.WBenBankCity != ''   ||
            lLogisticsPostalAddress.State != ''      ||
            lLogisticsPostalAddress.ZipCode != ''    ||
            mSKS_EFT_VendorPaym.WBenBankCountryRegionId != '')
        {
            mSegmentCount++;
            mRecordCount++;

            msb.Append('N4');
            msb.Append(#Separator);

            //01    City Name
            msb.Append(substr(mSKS_EFT_VendorPaym.WBenBankCity, 1, 26));
            msb.Append(#Separator);

            //02    State or Province Code
            msb.Append(lLogisticsPostalAddress.State);
            msb.Append(#Separator);

            //03    Postal Code
            msb.Append(lLogisticsPostalAddress.ZipCode);

            msb.Append(#Separator);

            //04    Country Code
            countryRegionISO = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
            msb.Append(countryRegionISO);

            msb.Append(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Address                                        19      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         9       ID
    //04    Country Code                                        3       ID
    //05    Location Qualifier                                  2       ID
    //06    Location Identifier                                 30      AN
    boolean rec_N4PE()
    {
        //BP Deviation Documented

        LogisticsAddressCountryRegionISOCode countryRegionISO;
        int len;
        ;

        if(mSKS_EFT_VendorPaym.WBeneCity != '' || mSKS_EFT_VendorPaym.WBeneState != '' || mSKS_EFT_VendorPaym.WBeneZipPostal != '' || mSKS_EFT_VendorPaym.WBeneCountryRegionId != '')
        {
            mSegmentCount++;
            mRecordCount++;
            msb.Append('N4');
            msb.Append(#Separator);

            //01    City Address
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #Wire_BOOK:
                case #Wire_DD:
                    len = 26;
                    break;
                case #CHK:
                    len = 30;
                    break;
                case #ACHIAT:               //VSTS#11544
                    len = 35;
                    break;
                default:
                    len = 23;
                    break;
            }
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity), 1, len));
            msb.Append(#Separator);

            //02    State or Province Code
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHIAT)                         //VSTS#11544
            {
                msb.Append(substr(mSKS_EFT_VendorPaym.WBeneState, 1, 35));
            }
            else
            {
                msb.Append(substr(mSKS_EFT_VendorPaym.WBeneState, 1, 2));
            }
            msb.Append(#Separator);

            //03    Postal Code
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #CHK:
                    len = 15;
                    break;
                case #ACHIAT:                      //VSTS#11544
                    len = 35;
                    break;
                default:
                    len = 5;
                    break;
            }
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneZipPostal),1, len));
            msb.Append(#Separator);

            //04    Country Code
            countryRegionISO = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId);
            msb.Append(countryRegionISO);

            //05    Location Qualifier
            //06    Location Identifier

            msb.Append(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Address                                        19      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         9       ID
    //04    Country Code                                        3       ID
    boolean rec_N4PR()
    {
        //BP Deviation Documented
        LogisticsAddressCountryRegionISOCode countryRegionISO;
        ;

        mSegmentCount++;
        mRecordCount++;

        msb.Append('N4');
        msb.Append(#Separator);

        //01    City Address
        msb.Append(substr(mSKS_EFT_Bank.WOrdPartyCity, 1, 35));
        msb.Append(#Separator);

        //02    State or Province Code
        msb.Append(substr(mSKS_EFT_Bank.WOrdPartyState, 1, 35));
        msb.Append(#Separator);

        //03    Postal Code
        msb.Append(substr(mSKS_EFT_Bank.WOrdPartyZipCode,1,35));
        msb.Append(#Separator);

        //04    Country Code
        countryRegionISO = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId);
        msb.Append(countryRegionISO);

        msb.Append(#LineEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFL1</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference Identification Qualifier                  3       AN
    //02    Reference Identification                            30
    //03    Reference Description                               80      AN
    
    boolean rec_REFL1()
    {
        str txtvalue;
        
        txtvalue = this.getJournaltxt();
        
        if(txtvalue == '')
        {
            txtvalue = mSKS_EFT_Bank.WOrdPartyCountryName;
        }
        
        if(txtvalue)
        {
            //BP Deviation Documented
            mSegmentCount++;
            mRecordCount++;

            msb.Append('REF');
            msb.Append(#Separator);
            
            //01    Discount Reason Code
            msb.Append('L1');
            msb.Append(#Separator);
            
            //02    Reference Identification
            msb.Append(#Separator);
            
            //03    Reference Description
            msb.Append(this.CharacterReplacement(substr(txtvalue, 1, 80)));
            
            msb.Append(#LineEnd);            
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NM1RB</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Entitiy Type Qualifier                              35      AN
    //03    Organization Name                                   35      AN
    //04    Name First                                          25      AN
    //05    Name Middle                                         25      AN
    //06    Name Prefix                                         25      AN
    //07    Name Suffix                                         25      AN
    //08    Identification Code Qualifier                       2       ID
    //09    SWIFT ID or FED ABA                                 80      AN
    
    boolean rec_NM1RB()
    {
        mSegmentCount++;
        mRecordCount++;
    
        //BP Deviation Documented
        msb.Append('NM1');
        msb.Append(#Separator);
    
        //01     Entity ID Code
        msb.Append('RB');
        msb.Append(#Separator);
    
        //02 Entitiy Type Qualifier
        msb.Append('6');
        msb.Append(#Separator);
    
        //03 Organization Name
        msb.Append(substr(mSKS_EFT_VendorPaym.WIntBankName,1,35));
        msb.Append(#Separator);
    
        //04 Name First
        msb.Append(#Separator);
        //05 Name Middle
        msb.Append(#Separator);
        //06 Name Prefix
        msb.Append(#Separator);
        //07 Name Suffix
        msb.Append(#Separator);
        //08 Identification Code Qualifier
        //09 SWIFT ID or FED ABA
        if(SKS_EFT_Format::getCodelookupvalue('IdCodeQualifier', mSKS_EFT_FileDetail.RecId) == 'ABA' || mSKS_EFT_FileDetail.PaymentCurrencyCode != 'USD')
        {
            msb.Append('13');
            msb.Append(#Separator);
            msb.Append(substr(mSKS_EFT_VendorPaym.WIntBankId,1,80));
        }
        else
        {
            msb.Append('SW');
            msb.Append(#Separator);
            msb.Append(substr(mSKS_EFT_VendorPaym.WIntBankSwift,1,80));
        }
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NM3RB</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Address information                                 55      AN      Address - Intermediary Bank
    //02    Address information                                 55      AN      Identification code/ Correspondent DFI Identification
    boolean rec_NM3RB()
    {
        //BP Deviation Documented
        if(mSKS_EFT_VendorPaym.WIntBankAddr != '' || mSKS_EFT_VendorPaym.WIntBankAddr2 != '')
        {
            mSegmentCount++;
            mRecordCount++;
    
            msb.Append('N3');
            msb.Append(#Separator);
    
            //01    Address information
            msb.Append(subStr(mSKS_EFT_VendorPaym.WIntBankAddr,1,55));
    
            //02    Address information
            msb.Append(subStr(mSKS_EFT_VendorPaym.WIntBankAddr2,1,55));
            msb.Append(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NM4RB</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Name                                           30      AN
    //02    State or Province Code                              2       ID      Not used
    //03    Postal Code                                         9       ID      Not used
    //04    Country Code                                        3       ID
    boolean rec_NM4RB()
    {
        //BP Deviation Documented
        LogisticsAddressCountryRegionISOCode countryRegionISO;
        ;
    
        if(mSKS_EFT_VendorPaym.WIntBankCity != '' || mSKS_EFT_VendorPaym.WIntBankCountryRegionId != '')
        {
            mSegmentCount++;
            mRecordCount++;
    
            msb.Append('N4');
            msb.Append(#Separator);
    
            //01    City Name
            msb.Append(substr(mSKS_EFT_VendorPaym.WIntBankCity, 1, 30));
            msb.Append(#Separator);
    
            //02    State or Province Code
            msb.Append(#Separator);
    
            //03    Postal Code
            msb.Append(#Separator);
    
            //04    Country Code
            countryRegionISO = this.getLogisticsAddressCountryRegionISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId);
            msb.Append(countryRegionISO);
    
            msb.Append(#LineEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    9       AN
    //03    Payment Action Code                                 2       ID
    //04    Amount paid                                         18      R
    //05    Original Amount                                     18      R
    //06    Discount Amount                                     18      R
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        AmountMST amt;
        ;
    
        mRecordCount++;
        mSegmentCount++;
    
        msb.Append('RMR');
        msb.Append(#Separator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            if(invSKS_EFT_FileDetail.InvoiceSettleAmountCur < 0  || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYMODEX)
            {
                msb.Append('IV'); // Only write IV if an invoice number exists
            }
            else
            {
                msb.Append('CM');
            }
        }
        msb.Append(#Separator);
    
        //02     Reference Number
        msb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,30));
        msb.Append(#Separator);
    
        //03    Payment Action Code
        msb.Append(#Separator);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)
        {
            //04    Amount paid
            amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            msb.Append(num2str(amt,0,2,0,0));
            msb.Append(#Separator);            
        }
    
        //05    Original Amount
        amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
        msb.Append(num2str(amt,0,2,0,0));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #APCARD)
        {
            msb.Append(#Separator);
            //06    Discount Amount
            amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
            msb.Append(num2str(amt,0,2,0,0));            
        }
    
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Included Segments                         10      NO
    //2     Trans. Set Cont. Number                             9       AN
    boolean rec_SE()
    {
        //BP Deviation Documented
        mSegmentCount++;
        mRecordCount++;
    
        msb.Append('SE');
        msb.Append(#Separator);
    
        //1     Number of Included Segments
        msb.Append(num2str(mSegmentCount,0,0,0,0));
        msb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        msb.Append(mSenderControlNbr);
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //1     Transaction Set ID Code                             3       ID
    //2     Trans. Set Cont. Number                             9       AN
    boolean rec_ST()
    {
        //BP Deviation Documented
        mSegmentCount++;
        mTranSetCount++;
        mRecordCount++;
        mSequenceNumber++;

        msb.Append('ST');
        msb.Append(#Separator);
    
        //1     Transaction Set ID Code
        msb.Append('820');
        msb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        mSenderControlNbr = SKS_PP_StringFormats::strFill(9,num2str(mSequenceNumber,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);                   //SKG#VSTS:117
    
        msb.Append(mSenderControlNbr);
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Trace Type Code                                     2       ID
    //02    Reference Identification                            30      AN      Payment Trace No
    //03    Orig. Co. ID                                        10      AN      Not used
    //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
    boolean rec_TRN()
    {
        str value;

        //BP Deviation Documented
        mSegmentCount++;
        mRecordCount++;
    
        msb.Append('TRN');
        msb.Append(#Separator);
    
        //01     Trace Type Code
        msb.Append('1');
        msb.Append(#Separator);
    
        //02     Reference Identification
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCCP:
            Case #ACHPPD:
            Case #ACHPPP:
            case #CHK:
            case #APCARD:
                msb.Append(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference,30));
                break;
            Case #FWT:
            Case #SWT:
            case #Wire_BOOK:
            case #Wire_DD:
                msb.Append(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference,16));
                break;
            case #PAYMODEX:     //11550
                msb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),20));
                break;
        }    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            msb.Append(#Separator);
            
            //03    Orig. Co. ID/ Company ID
            msb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
            
            //04    Reference Number/Division Number
            value = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('MailHandlingCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));                       //SKG#VSTS:12669
            if(value)            
            {
                msb.Append(#Separator);
                msb.Append(value);
            }
            else
            {
                msb.Append(#Separator);                      //SKG#VSTS:11747
                msb.Append('001');
            }
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #APCARD)        
        {
            msb.Append(#Separator);
            
            //03    Orig. Co. ID
            msb.Append(#Separator);
            
            //04    Company Corporate Card Account #
            msb.Append(substr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CompanyCCAccnt', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,30));
        }
        msb.Append(#LineEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ADXCM</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Credit Memo amount                                  18      AN
    //02    Discount Reason Code                                2       ID
    
    boolean rec_ADXCM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        AmountMST amt;

        mSegmentCount++;
        mRecordCount++;

        msb.Append('ADX');                                  //SKG#VSTS:11814
        msb.Append(#Separator);
        
        //01    Credit Memo amount
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        
        if(amt > 0)
        {
            msb.Append(num2str(amt,0,2,0,0));
        }
        else
        {
            msb.Append('0');
        }

        msb.Append(#Separator);
        
        //02    Discount Reason Code
        msb.Append('CM');
        
        msb.Append(#LineEnd);
        return true;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTE</Name>
				<Source><![CDATA[
    boolean rec_NTE(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        if(this.getInvoiceJournaltxt(invSKS_EFT_FileDetail))
        {
            //BP Deviation Documented
            mSegmentCount++;
            mRecordCount++;

            msb.Append('NTE');
            msb.Append(#Separator);
            
            //01   Note Reference Code
            msb.Append('INV');
            msb.Append(#Separator);
            
            //02    Invoice Description
            msb.Append(this.CharacterReplacement(substr(this.getInvoiceJournaltxt(invSKS_EFT_FileDetail), 1, 80)));
            
            msb.Append(#LineEnd);            
        }
        return true;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFVR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference Identification Qualifier                  3       AN
    //02    Reference Identification                            30
        
    boolean rec_REFVR(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //BP Deviation Documented
        mSegmentCount++;
        mRecordCount++;
        
        msb.Append('REF');
        msb.Append(#Separator);
        msb.Append('VR');
        
        //02    Reference Identification
        msb.Append(#Separator);
        msb.Append(substr(mSKS_EFT_FileDetail.AccountNum,1,30));
        
        msb.Append(#LineEnd);
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlfilespecific</Name>
				<Source><![CDATA[
    protected void controlfilespecific(SysDictClass _obj, Object _classInstance)
    {
        _obj.callObject('setCreditAmt', _classInstance, mTotCrAmt);
        _obj.callObject('setDebitAmt', _classInstance, mTotDbAmt);
        _obj.callObject('setISASection', _classInstance, mISASection);
        _obj.callObject('setGSSection', _classInstance, mGSSection);
        _obj.callObject('setIEASection', _classInstance, mIEASection);
        _obj.callObject('setCtrlQuantity', _classInstance, mCtrlQuantity);
        _obj.callObject('setCreditQuantity', _classInstance, mCreditQty);
        _obj.callObject('setDebitQuantity', _classInstance, mDebitQty);
        _obj.callObject('setLineEnd', _classInstance, #LineEnd);
        _obj.callObject('setSeparator', _classInstance, #Separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTE_OBI</Name>
				<Source><![CDATA[
    boolean rec_NTE_OBI()
    {
        int length;  //SKS#DevOps:15495 -->

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCCD   || 
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCCP   || 
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT      ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT)  //SKS#DevOps:15630
        {
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryName)
            {
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    Case #ACHCCD:
                    Case #ACHCCP:
                        length = 71;
                        break;
                    Case #FWT:
                    Case #SWT: //SKS#DevOps:15630
                        length = 35;
                        break;
                }

                //BP Deviation Documented
                mSegmentCount++;
                mRecordCount++;

                msb.Append('NTE');
                msb.Append(#Separator);

                msb.Append('OBI');
                msb.Append(#Separator);

                msb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryName),1,length));
                msb.Append(#LineEnd);
            }
        }
        //SKS#DevOps:15495 <--
        else
        {
            //BP Deviation Documented
            if(mSKS_EFT_VendorPaym.WPmtInstText1 != '')
            {
                mSegmentCount++;
                mRecordCount++;

                msb.Append('NTE');
                msb.Append(#Separator);

                msb.Append('OBI');
                msb.Append(#Separator);

                //01    Address information
                msb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText1),1,35));

                //02    Address information
                msb.Append(#LineEnd);
            }
            if(mSKS_EFT_VendorPaym.WPmtInstText2 != '')
            {
                mSegmentCount++;
                mRecordCount++;

                msb.Append('NTE');
                msb.Append(#Separator);

                msb.Append('OBI');
                msb.Append(#Separator);

                //01    Address information
                msb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText2),1,35));

                //02    Address information
                msb.Append(#LineEnd);
            }
            if(mSKS_EFT_VendorPaym.WPmtInstText3 != '')
            {
                mSegmentCount++;
                mRecordCount++;

                msb.Append('NTE');
                msb.Append(#Separator);

                msb.Append('OBI');
                msb.Append(#Separator);

                //01    Address information
                msb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText3),1,35));

                //02    Address information
                msb.Append(#LineEnd);
            }
            if(mSKS_EFT_VendorPaym.WPmtInstText4 != '')
            {
                mSegmentCount++;
                mRecordCount++;

                msb.Append('NTE');
                msb.Append(#Separator);

                msb.Append('OBI');
                msb.Append(#Separator);

                //01    Address information
                msb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText4),1,35));

                //02    Address information
                msb.Append(#LineEnd);
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>