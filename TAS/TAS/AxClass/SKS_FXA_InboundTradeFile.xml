<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_FXA_InboundTradeFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_FXA_InboundTradeFile extends SKS_EFT_RF_Format
{
    CurrencyCodeISO gDealtCurrency; // This is the currency returned from FXAll.
    ExchRate gExchangeRate; //This is the rate returned from FXAll.
    SKS_FXA_ContraAmount gContraAmount; //This is the contra amount returned from FXAll.
    SKS_FXA_CounterPartyName gCounterPartyName;  //This is the value reported by FXAll for the Settlement entity.
    SKS_EB_Date gValueDate;//This defaults to the EFT+ effective date, but the inbound trade can change it.
    SKS_FXA_TradeID gTradeID;
    SKS_FXA_AllocationID gCustAllocationID;
    AmountCur           gDealAmount;
    Filename gFileName;
    str gErrorMessage;
    str gDirection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    public str getErrorMessage()
    {
        return gErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportFile</Name>
				<Source><![CDATA[
    public void ImportFile(SKS_EB_FileHub _SKS_EB_File)
    {
        System.Xml.XmlDocument locXmlDocument;
        System.Xml.XmlNode locXMLNode;
        str locTempTagName;
        locXmlDocument = new System.Xml.XmlDocument();
        _SKS_EB_File.runFileLoad(_SKS_EB_File.fileName());
        locXmlDocument.LoadXML(_SKS_EB_File.fileBody());
        gFileName = _SKS_EB_File.fileName();
    
        if(locXmlDocument.get_HasChildNodes())
        {
            ttsBegin;
            locXMLNode = locXmlDocument.get_FirstChild(); //<?XML ... node.
            locXMLNode = locXMLNode.get_NextSibling();//<Document xmlns...
            locTempTagName = locXMLNode.get_Name();
            this.processNode(locXMLNode);
            //cleanup an pending nodes
            if(mSKS_EFT_RF_Transaction != null)
                mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            if(mSKS_EFT_RF_SentFile != null)
                mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            if(gExchangeRate != 0
                &&  gContraAmount != 0
                &&  strLen(gCounterPartyName) > 0
                &&  gValueDate != dateNull()
                &&  strLen(gTradeID) > 0
                &&  strLen(gCustAllocationID) > 0 )
            {
                this.updateSKS_FXA_Det();
            }
            ttsCommit;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locXMLNode;
        System.Xml.XmlNode locParentXMLNode;
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
    
        str locNodeName;
        str locTempNodeName, locTempParentNodeName;
    
        locParentXMLNode = _XmlNode.get_ParentNode();
        if(locParentXMLNode != null)
        {
            locTempParentNodeName = locParentXMLNode.get_Name();
            locTempParentNodeName = strUpr(locTempParentNodeName);
        }
    
        locTempNodeName = _XmlNode.get_Name();
        switch(strUpr(locTempNodeName))
        {
            case strUpr('TradeId'):
                gTradeId = strLRTrim(_XmlNode.get_InnerText());
                break;
            case strUpr('CounterParty'):
                gCounterPartyName = strLRTrim(_XmlNode.get_InnerText());
                break;
            case strUpr('ContraAmount'):
                if(locTempParentNodeName == strUpr('requirement'))
                {
                    gContraAmount = str2num(strLRTrim(_XmlNode.get_InnerText()));
                }
                break;
            case strUpr('dealtCcy'):
                gDealtCurrency = strLRTrim(_XmlNode.get_InnerText());
                break;
            case strUpr('ValueDate'):
                gValueDate = mkDate(str2int(SKS_PP_StringFormats::strSub(strLRTrim(_XmlNode.get_InnerText()), 7)),
                                    str2int(SKS_PP_StringFormats::strSub(strLRTrim(_XmlNode.get_InnerText()), 5,2)),
                                    str2int(SKS_PP_StringFormats::strSub(strLRTrim(_XmlNode.get_InnerText()), 1,4)));
                break;
            case strUpr('AllInRate'):
                gExchangeRate = str2num(strLRTrim(_XmlNode.get_InnerText()));
                break;
            case strUpr('CustAllocationId'):
                if(locTempParentNodeName == strUpr('Requirement'))
                {
                    gCustAllocationID = strLRTrim(_XmlNode.get_InnerText());
                }
                break;
            case strUpr('amount'):
                if(locTempParentNodeName == strUpr('requirement'))
                {
                    gDealAmount = str2num(strLRTrim(_XmlNode.get_InnerText()));
                }
                break;
            case strUpr('Direction'):
                    gDirection = strLRTrim(_XmlNode.get_InnerText());
                break;
        }
        if(gExchangeRate != 0
            &&  gContraAmount != 0
            &&  strLen(gCounterPartyName) > 0
            &&  gValueDate != dateNull()
            &&  strLen(gTradeID) > 0
            &&  strLen(gCustAllocationID) > 0)
        {
            this.updateSKS_FXA_Det();
            gContraAmount = 0;
            gCustAllocationID = strMin();
        }
    
        if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode = locXMLNodeListEnum.get_Current();
                locNodeName = locXMLNode.get_Name();
                if(strUpr(locNodeName) != '#TEXT')
                    this.processNode(locXMLNode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSKS_FXA_Det</Name>
				<Source><![CDATA[
    private void updateSKS_FXA_Det()
    {
        SKS_FXA_Details locSKS_FXA_Details;
        SKS_FXA_CounterPartyTable locSKS_FXA_CounterPartyTable;
        CurrencyCodeISO locCurrencyCodeISO;
    
        select forupdate crossCompany
            locSKS_FXA_Details
                where locSKS_FXA_Details.SKS_FXA_AllocationID == gCustAllocationID;
        if(!locSKS_FXA_Details)
        {
            warning(strFmt("@SKS3701", gCustAllocationID, gFileName));
            gErrorMessage = 'UNMATCHED';
        }
        else if(strLen(locSKS_FXA_Details.SKS_FXA_CounterPartyName) > 0)//This will prevent reprocessing of trade files AND prevent processing trade files if the Settlement Conf has already been recieved.
        {
            ttsAbort;
            error(strFmt("@SKS3609",gCustAllocationID)) ;
            throw Exception::Error;
        }
        else if(locSKS_FXA_Details.DealtCurrency != gDealtCurrency)// Verify currency did not change
        {
            ttsAbort;
            error(strFmt("@SKS3724",gDealtCurrency, locSKS_FXA_Details.DealtCurrency, gCustAllocationID)) ;
            throw Exception::Error;
        }
        else if(locSKS_FXA_Details.Amount != gDealAmount)
        {
            ttsAbort;
            error(strFmt('Dealt amount for Trade acknowledgement %1 is different than the Dealt amount in Trade sent %2 for Allocation id: %3', gDealAmount, locSKS_FXA_Details.Amount, gCustAllocationID));
            throw Exception::Error;
        }
        else if((locSKS_FXA_Details.SKS_FXA_BuySell == SKS_FXA_BuySell::Buy && gDirection != 'B') ||
                    (locSKS_FXA_Details.SKS_FXA_BuySell == SKS_FXA_BuySell::Sell && gDirection != 'S'))
        {
            ttsAbort;
            error(strFmt('Buy/Sell indicator for Trade acknowledgement is different than the Buy/Sell indicator in Trade sent for Allocation id: %1', gCustAllocationID));
            throw Exception::Error;
        }
        else
        {
            changeCompany(locSKS_FXA_Details.company())
            {
                locCurrencyCodeISO = locSKS_FXA_Details.getFundingCurrency();
                locSKS_FXA_CounterPartyTable = SKS_FXA_CounterPartyTable::findByCounterPartyAndCur(gCounterPartyName,locCurrencyCodeISO);
    
                locSKS_FXA_Details.ExchRate = gExchangeRate;
                locSKS_FXA_Details.SKS_FXA_ContraAmount = gContraAmount;
                locSKS_FXA_Details.SKS_FXA_CounterPartyName = gCounterPartyName;
                locSKS_FXA_Details.ValueDate = gValueDate;
                locSKS_FXA_Details.SKS_FXA_TradeID = gTradeID;
                locSKS_FXA_Details.SKS_FXA_CounterPartyAccount = locSKS_FXA_CounterPartyTable.CounterPartyID;
                locSKS_FXA_Details.TradeAckFileRcvd = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                SKS_FXA_Processing::FXALLPaymentUpdate(locSKS_FXA_Details);
                locSKS_FXA_Details.update();
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ifTradeFile</Name>
				<Source><![CDATA[
    public static boolean ifTradeFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _bankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
    
        boolean rtnval = false;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean locXMlTagFound = false;
        boolean locTradeIdFound = false;
        boolean locCounterPartyFound = false;
        boolean locCustUserNameFound = false;
        Boolean locLegFound = false;
        boolean locValueDateFound = false;
        boolean locCustAllocationIdFound = false;
    
        //BEGIN DISQUALIFIER VARIABLES
        //none
    
        //END VALIDATION VARIABLES
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_bankIntType);
        System.String locString;
        System.IO.StreamReader locStreamReader;
    
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return false;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());

        //priming read
        locString = locStreamReader.ReadLine();
        locString = locString.ToUpper();
        while(locString != null)
        {
            locString = locString.Trim();
            locString = locString.ToUpper();
            if(!System.String::IsNullOrWhiteSpace(locString))
            {
                if(!locXMLTagFound)
                {
                    if(locString.StartsWith(strUpr('<?xml')))
                        locXmlTagFound = true;
                    else
                    {
                        //NOT AN XML DOCUMENT
                        break;
                    }
    
                }
    
                if(locString.Contains(strUpr('<TradeId>')))
                {
                   locTradeIdFound = true;
                }
                if(locString.Contains(strUpr('<CounterParty>')))
                {
                   locCounterPartyFound = true;
                }
                if(locString.Contains(strUpr('<CounterParty>')))
                {
                   locCounterPartyFound = true;
                }
                if(locString.Contains(strUpr('<CustUserName>')))
                {
                   locCustUserNameFound = true;
                }
                if(locString.Contains(strUpr('<Legs>')))
                {
                   locLegFound = true;
                }
                if(locString.Contains(strUpr('<ValueDate>')))
                {
                   locValueDateFound = true;
                }
                if(locString.Contains(strUpr('<CustAllocationId>')))
                {
                   locCustAllocationIdFound = true;
                }
    
            }
            locString = locStreamReader.ReadLine();
            if(!System.String::IsNullOrEmpty(locString))
                locString = locString.ToUpper();
        }
        if(locXMlTagFound &&
            locTradeIdFound &&
            locCounterPartyFound &&
            locCustUserNameFound &&
            locLegFound &&
            locValueDateFound &&
            locCustAllocationIdFound)
        {
            rtnval = true;
        }
        locStreamReader.Close();

        return rtnval;
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>