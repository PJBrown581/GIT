<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CH_SIX_LSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CH_SIX_LSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CH_SIX_LSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220608')
    AmountMST               mPaymentAmount;
    BankAccountTable        mBankAccountTable;
    CurrencyCode            currencyCode;
    int seqNum;
    str senderIdentifctn;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRole</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddress findPostalAddressLineByPartyLocationRole(
    DirPartyRecId   _party,
    LogisticsLocationRoleName   _roleName)
    {
        DirPartyLocation        partyLocation;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  postalAddress;

        while select partyLocation
        where partyLocation.Party == _party
        {
            if(strScan(partyLocation.locationRoleNames(),_roleName,1,strLen(partyLocation.locationRoleNames())))
            {
                logisticsLocation = logisticsLocation::find(partyLocation.Location);
                if(logisticsLocation.IsPostalAddress)
                {
                    postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                    break;
                }
            }
        }

        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        seqNum = 1;

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFTAR_Bank();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get Bank account
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }

            this.rec_875();

            next mSKS_EFT_FileDetail;
        }

        this.rec_890();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_875</Name>
				<Source><![CDATA[
    public boolean rec_875()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        LogisticsPostalAddress  postalAddress;
        str invNumbers;
        str esrReferenceNumber;
        str processType;
        str lsvRef;
        str esrPartyNum;
        Array custAddrArray = new Array(Types::String);


        //      Transaction type
        sb.Append('875');

        //      Version no.
        sb.Append('0');

        //      Processing type
        processType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ProcessType', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        if(processType != '')
        {
            sb.Append(this.CharacterReplacement(strUpr(processType)));
        }
        else
        {
            sb.Append('P');
        }

        //      Requested processing date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //      DEB-FI BC no.
        sb.Append(SKS_PP_StringFormats::strFill(5, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //      Creation date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        //      CR-FI BC no.
        sb.Append(SKS_PP_StringFormats::strFill(5, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //      Sender identification
        senderIdentifctn = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SenderIdentifctn', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(strUpr(senderIdentifctn)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      Input sequence number
        sb.Append(SKS_PP_StringFormats::strFill(7, num2str(seqNum,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //      LSV+ identification
        sb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(strUpr(senderIdentifctn)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      Currency
        currencyCode = mSKS_EFT_FileDetail.PaymentCurrencyCode;
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);

        //      Amount
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(SKS_PP_StringFormats::strFill(12, num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0,2,2,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //      CR's account
        sb.Append(SKS_PP_StringFormats::strFill(34, mBankAccountTable.IBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      CR
        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(),'Direct Debit');

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(LogisticsLocation::find(postalAddress.Location).Description), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(postalAddress.City), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(postalAddress.CountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      DEB's account
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 16), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //      DEB
        postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct Debit');

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(LogisticsLocation::find(postalAddress.Location).Description), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(SKS_PP_StringFormats::strRemoveCRLF(postalAddress.Street)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(postalAddress.City), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(postalAddress.CountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      Messages
        invNumbers = this.getInvoiceNbrs();

        sb.Append(SKS_PP_StringFormats::strFill(140, invNumbers, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));


        //      Reference flag
        sb.Append('A');

        //      LSV reference
        lsvRef = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('LSVRef', mSKS_EFT_FileDetail.RecId));
        esrReferenceNumber = strFmt('%1%2%3', subStr(lsvRef, 1, 6), SKS_PP_StringFormats::strFill(14, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left), 990000);
        esrReferenceNumber += this.checkDigit(esrReferenceNumber);

        sb.Append(SKS_PP_StringFormats::strFill(27, this.CharacterReplacement(esrReferenceNumber), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      ESR party number
        esrPartyNum = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ESRPartyNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(9, this.CharacterReplacement(esrPartyNum), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        seqNum++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_890</Name>
				<Source><![CDATA[
    public boolean rec_890()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //      Transaction type
        sb.Append('890');

        //      Version no.
        sb.Append('0');

        //      Creation date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        //      Sender identification
        sb.Append(SKS_PP_StringFormats::strFill(5, this.CharacterReplacement(strUpr(senderIdentifctn)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //      Input sequence number
        sb.Append(SKS_PP_StringFormats::strFill(7, num2str(seqNum,0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //      Currency
        sb.Append(currencyCode);

        //      Total amount
        sb.Append(SKS_PP_StringFormats::strFill(16, num2str(mPaymentAmount, 0,2,2,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;

        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;

        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);

            next invSKS_EFT_FileDetail;

            if(invSKS_EFT_FileDetail)
            {
                sb.Append(',');
            }
        }

        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDigit</Name>
				<Source><![CDATA[
    public str checkDigit(str _inputToCheckDigit)
    {
        int strPos   = 1;
        int numerals = 0;
        str control;

        while (strPos <= strlen(_inputToCheckDigit))
        {
            numerals = str2int(substr('0946827135', 1 + ((str2int(substr(_inputToCheckDigit,strPos,1)) + numerals) mod 10),1));
            strPos++;
        }

        if (!control)
        {
            control = num2str((10 - numerals) mod 10,0,0,0,0);
        }

        return control;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>