<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_ACCESS_PAY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_ACCESS_PAY extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_ACCESS_PAY extends SKS_EFT_Format
{
    #define.FormatVersion('20220616')
    SKS_EFT_SequenceNumber mSequenceNumber;
    int64 mPaymentCount;
    AmountMST mPaymentAmount;
    #define.Comma(',')
    #define.DoubleQuote('"')
    #define.BOOK('BKT')
    #define.WIRE('WIRE')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        // Get SKS_EFT_Bank
        this.getSKS_EFT_Bank();
    
        // Format header
        this.rec_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get Remittance
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            // Detail lines
            this.rec_PaymentFreeForm();
    
            next mSKS_EFT_FileDetail;
        }
    
        // Format trailer
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    private str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        LedgerJournalTrans ledgerJournalTrans;
    
        select Txt from ledgerJournalTrans where
            ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
        return this.CharacterReplacement(ledgerJournalTrans.Txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    boolean rec_Header()
    {
        //------------------------------------
        //Field     Field Name          Length
        //1         HEADER                   6
        //2         File Timestamp          14
        //3         Version                  5
        //------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     HEADER                   6
        sb.Append(this.wrapField('HEADER'));
    
        //2     File Timestamp          14
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())) + SKS_PP_StringFormats::strTimeHHMMSS(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))));
    
        //3     Version                  5
        sb.Append(this.wrapField('1.0', 5, false));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentFreeForm</Name>
				<Source><![CDATA[
    boolean rec_PaymentFreeForm()
    {
        //------------------------------------------------
        //Field     Field Name                     Length
        //Record Information------------------------------
        //  1       Input Type                       2
        //------------------------------------------------
        //Payment Information-----------------------------
        //  2       Payment Method                   5/6
        //  3       Debit Bank ID                    9
        //  4       Account Number                  35
        //  5       Bank to Bank Transfer            1
        //  6       Transaction Currency             3
        //  7       Transaction Amount              20,3
        //  8       Equivalent Amount               20,3
        //  9       Clearing                         9
        // 10       Beneficiary Residence            1
        // 11       Rate Type                        1
        // 12       N/A                              0
        //------------------------------------------------
        //Value Date--------------------------------------
        // 13       Value Date                       8
        //------------------------------------------------
        //Beneficiary Section-----------------------------
        // 14       ID Type                         34
        // 15       ID Value                        34
        // 16       Name                            35
        // 17       Address 1                       35
        // 18       Address 2                       35
        // 19       Address 3                       32
        // 20       City, State, Postal Code         0
        // 21       Country                          2
        // 22 - 23  N/A                              0
        //------------------------------------------------
        //Beneficiary Bank Section------------------------
        // 24       ID Type                         34
        // 25       ID Value                        34
        // 26       Name                            35
        // 27       Address 1                       35
        // 28       Address 2                       35
        // 29       Address 3                       32
        // 30       Country                          2
        // 31       Supplementary ID Type           34
        // 32       Supplementary ID Value          34
        //------------------------------------------------
        //Unused------------------------------------------
        // 33 - 39  N/A                              0
        //------------------------------------------------
        //Intermediary Section----------------------------
        // 40       ID Type                         34
        // 41       ID Value                        34
        // 42       Name                            35
        // 43       Address 1                       35
        // 44       Address 2                       35
        // 45       Address 3                       32
        // 46       Country                          2
        // 47       Supplementary ID                 *
        // 48       Supplementary ID Value          35
        //------------------------------------------------
        //By Order Of Section-----------------------------
        // 49       ID Type                         34
        // 50       ID Value                        34
        // 51       Name                            35
        // 52       Address 1                       35
        // 53       Address 2                       35
        // 54       Address 3                       32
        // 55       Country                          2
        //------------------------------------------------
        //Unused------------------------------------------
        // 56 - 73  N/A                              0
        //------------------------------------------------
        //Payment Details Section-------------------------
        // 74       Reference Sent Payment          16
        // 75       Internal Reference              16
        // 76       On Behalf Of                    30
        // 77       Detail 1                        35
        // 78       Detail 2                        35
        // 79       Detail 3                        35
        // 80       Detail 4                        35
        //------------------------------------------------
        //Unused------------------------------------------
        // 81 - 88  N/A                              0
        //------------------------------------------------
        //Regulatory Reporting Section--------------------
        // 89       Code                             8
        // 90       Country                          2
        // 91       Instruction 1                   21/33
        // 92       Instruction 2                   33
        // 93       Instruction 3                   33
        //------------------------------------------------
        //Bank to Bank Section----------------------------
        // 94       Instruction Code 1               4
        // 95       Instruction Text 1              30
        // 96       Instruction Code 2               4
        // 97       Instruction Text 2              30
        // 98       Instruction Code 3               4
        // 99       Instruction Text 3              30
        //100       Sender to Receiver Code 1        8
        //101       Sender to Receiver Line 2       23-30
        //102       Sender to Receiver Code 2        8
        //103       Sender to Receiver Line 2       23-30
        //104       Sender to Receiver Code 3        8
        //105       Sender to Receiver Line 3       23-30
        //106       Sender to Receiver Code 4        8
        //107       Sender to Receiver Line 4       23-30
        //108       Sender to Receiver Code 5        8
        //109       Sender to Receiver Line 5       23-30
        //110       Sender to Receiver Code 6        8
        //111       Sender to Receiver Line 6       23-30
        //112       Priority                         1
        //113       N/A                              0
        //114       Charges                          3
        //115       N/A                              0
        //116       Additional Details               *
        //------------------------------------------------
        //Note Section------------------------------------
        //117       Note                            70
        //------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str IDType;
        str IDValue;
        str Addr3;
        str invText, Detail1, Detail2, Detail3;
        int spaceLoc, stringlen;
        AmountMST amt;
    
        //Record Information------------------------------
        //  1       Input Type                       2
        sb.Append(this.wrapField('P'));
        //------------------------------------------------
    
        //Payment Information-----------------------------
        //  2       Payment Method                   5/6
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #BOOK:
                sb.Append(this.wrapField('BOOKTX'));
                break;
            case #WIRE:
                sb.Append(this.wrapField('WIRES'));
                break;
        }
    
        //  3       Debit Bank ID                    9
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankTransit, 9));
    
        //  4       Account Number                  35
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 35));
    
        //  5       Bank to Bank Transfer            1
        sb.Append(this.wrapField('N'));
    
        //  6       Transaction Currency             3
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));
    
        //  7       Transaction Amount              20,3
        amt = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        sb.Append(this.wrapField(num2Str(amt, 1, 3, 1, 0), 20));
    
        //  8       Equivalent Amount               20,3
        sb.Append(this.wrapField(''));
    
        //  9       Clearing                         9
        sb.Append(this.wrapField(''));
    
        // 10       Beneficiary Residence            1
        sb.Append(this.wrapField(''));
    
        // 11       Rate Type                        1
        sb.Append(this.wrapField(''));
    
        // 12       N/A                              0
        sb.Append(this.wrapField(''));
        //------------------------------------------------
    
        //Value Date--------------------------------------
        // 13       Value Date                       8
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate)));
        //------------------------------------------------
    
        //Beneficiary Section-----------------------------
        // 14       ID Type                         34
        // 15       ID Value                        34
        // 16       Name                            35
        // 17       Address 1                       35
        // 18       Address 2                       35
        // 19       Address 3                       32
        // 20       City, State, Postal Code         0
        // 21       Country                          2
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            IDType = 'IBAN';
            IDValue = mSKS_EFT_FileDetail.DepBankIBAN;
        }
        else
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BOOK)
            {
                IDType = 'JPMACC';
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE)
            {
                IDType = 'ACCT';
            }
            IDValue = mSKS_EFT_FileDetail.DepBankAcct;
        }
    
        Addr3 = mRemittanceCity;
        if(Addr3 != '')
        {
            Addr3 = Addr3 + ' ';
        }
        Addr3 = Addr3 + mRemittanceState;
        if(Addr3 != '')
        {
            Addr3 = Addr3 + ' ';
        }
        Addr3 = Addr3 + mRemittanceZipCode;
    
        sb.Append(this.rec_SubSection(IDType,
                                      IDValue,
                                      mRemittanceName,
                                      mRemittanceAdrLine1,
                                      mRemittanceAdrLine2,
                                      Addr3,
                                      mRemittanceCountryRegionId,
                                      true));
    
        // 22 - 23  N/A                              0
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        //------------------------------------------------
    
        //Beneficiary Bank Section------------------------
        // 24       ID Type                         34
        // 25       ID Value                        34
        // 26       Name                            35
        // 27       Address 1                       35
        // 28       Address 2                       35
        // 29       Address 3                       32
        // 30       Country                          2
        IDValue = mSKS_EFT_FileDetail.DepBankTransit;
    
        switch(mSKS_EFT_FileDetail.DepBankCodeType)
        {
            case BankCodeType::Code_CH:
                IDType = 'CHIPSID';
                break;
            case BankCodeType::Code_CC:
                IDType = 'ACCT';
                break;
            case BankCodeType::Code_AT:
                IDType = 'USABA';
                break;
            case BankCodeType::Code_SC:
                IDType = 'SWIFT';
                if(IDValue == '')
                {
                    IDValue = strUpr(mSKS_EFT_FileDetail.DepSwiftNo);
                }
                else
                {
                    IDValue = strUpr(IDValue);
                }
                break;
            case BankCodeType::Code_FW:
                IDType = 'JPMACC';
                break;
            default:
                if(mSKS_EFT_FileDetail.DepSwiftNo != '')
                {
                    IDType = 'SWIFT';
                    IDValue = strUpr(mSKS_EFT_FileDetail.DepSwiftNo);
                }
                else
                {
                    IDType = 'USABA';
                }
                break;
        }
    
        sb.Append(this.rec_SubSection(IDType,
                                      IDValue,
                                      this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),
                                      this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr),
                                      '',
                                      this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity),
                                      this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId)));
    
        // 31       Supplementary ID Type           34
        sb.Append(this.wrapField('', 34));
    
        // 32       Supplementary ID Value          34
        sb.Append(this.wrapField('', 34));
        //------------------------------------------------
    
        //Unused------------------------------------------
        // 33 - 39  N/A                              0
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        //------------------------------------------------
    
        //Intermediary Section----------------------------
        // 40       ID Type                         34
        // 41       ID Value                        34
        // 42       Name                            35
        // 43       Address 1                       35
        // 44       Address 2                       35
        // 45       Address 3                       32
        // 46       Country                          2
        IDType = SKS_EFT_Format::getCodelookupvalue('IntermediaryType', mSKS_EFT_FileDetail.RecId);
        IDValue = '';
    
        if(IDType == '')
        {
            if(mSKS_EFT_VendorPaym.WIntBankSwift != '')
            {
                IDType  = 'SWIFT';
                IDValue = mSKS_EFT_VendorPaym.WIntBankSwift;
            }
        }
        else
        {
            if(IDType == 'SWIFT' && mSKS_EFT_VendorPaym.WIntBankSwift != '')
            {
                IDValue = mSKS_EFT_VendorPaym.WIntBankSwift;
            }
            else
            {
                IDValue = mSKS_EFT_VendorPaym.WIntBankId;
            }
        }
    
        sb.Append(this.rec_SubSection(IDType,
                                      IDValue,
                                      this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName),
                                      this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr),
                                      this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2),
                                      this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity),
                                      this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId)));
    
    
        // 47       Supplementary ID                 *
        sb.Append(this.wrapField(''));
    
        // 48       Supplementary ID Value          35
        sb.Append(this.wrapField(''));
        //------------------------------------------------
    
        //By Order Of Section-----------------------------
        // 49       ID Type                         34
        // 50       ID Value                        34
        // 51       Name                            35
        // 52       Address 1                       35
        // 53       Address 2                       35
        // 54       Address 3                       32
        // 55       Country                          2
        sb.Append(this.rec_SubSection('', '', '', '', '', '', ''));
        //------------------------------------------------
    
        //Unused------------------------------------------
        // 56 - 73  N/A                              0
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        //------------------------------------------------
    
        //Payment Details Section-------------------------
        // 74       Reference Sent Payment          16
        sb.Append(this.wrapField(''));
    
        // 75       Internal Reference              16
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),16)));
    
        // 76       On Behalf Of                    30
        sb.Append(this.wrapField(''));
    
        //Detail records
        invText = this.getInvoiceNbrs();
    
        stringlen = strLen(invText);
    
        if(stringlen > 36)
        {
            spaceLoc = strScan(invText, ' ', 37, -37);
            if (spaceLoc > 0)
            {
                Detail1 = subStr(invText, 1, spaceLoc - 1);
    
                if (spaceLoc != stringlen)
                {
                    invText = subStr(invText, spaceLoc + 1, stringlen);
                }
            }
    
            stringlen = strLen(invText);
    
            if(stringlen > 36)
            {
                spaceLoc = strScan(invText, ' ', 37, -37);
                if (spaceLoc > 0)
                {
                    Detail2 = subStr(invText, 1, spaceLoc - 1);
    
                    if (spaceLoc != stringlen)
                    {
                        invText = subStr(invText, spaceLoc + 1, stringlen);
                    }
                }
    
                stringlen = strLen(invText);
    
                if(stringlen > 36)
                {
                    spaceLoc = strScan(invText, ' ', 37, -37);
                    if (spaceLoc > 0)
                    {
                        Detail3 = subStr(invText, 1, spaceLoc - 1);
    
                        if (spaceLoc != stringlen)
                        {
                            invText = subStr(invText, spaceLoc + 1, stringlen);
                        }
                    }
                }
                else
                {
                    Detail3 = invText;
                }
    
            }
            else
            {
                Detail2 = invText;
            }
        }
        else
        {
            Detail1 = invText;
        }
    
        // 77       Detail 1                        35
        sb.Append(this.wrapField(Detail1, 35));
    
        // 78       Detail 2                        35
        sb.Append(this.wrapField(Detail2, 35));
    
        // 79       Detail 3                        35
        sb.Append(this.wrapField(Detail3, 35));
    
        // 80       Detail 4                        35
        sb.Append(this.wrapField(this.getJournaltxt(), 35));
        //------------------------------------------------
    
        //Unused------------------------------------------
        // 81 - 88  N/A                              0
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        sb.Append(this.wrapField(''));
        //------------------------------------------------
    
        //Regulatory Reporting Section--------------------
        // 89       Code                             8
        sb.Append(this.wrapField(''));
    
        // 90       Country                          2
        sb.Append(this.wrapField(''));
    
        // 91       Instruction 1                   21/33
        sb.Append(this.wrapField(''));
    
        // 92       Instruction 2                   33
        sb.Append(this.wrapField(''));
    
        // 93       Instruction 3                   33
        sb.Append(this.wrapField(''));
        //------------------------------------------------
    
        //Bank to Bank Section----------------------------
        // 94       Instruction Code 1               4
        sb.Append(this.wrapField(''));
    
        // 95       Instruction Text 1              30
        sb.Append(this.wrapField(''));
    
        // 96       Instruction Code 2               4
        sb.Append(this.wrapField(''));
    
        // 97       Instruction Text 2              30
        sb.Append(this.wrapField(''));
    
        // 98       Instruction Code 3               4
        sb.Append(this.wrapField(''));
    
        // 99       Instruction Text 3              30
        sb.Append(this.wrapField(''));
    
        //100       Sender to Receiver Code 1        8
        sb.Append(this.wrapField(''));
    
        //101       Sender to Receiver Line 2       23-30
        sb.Append(this.wrapField(''));
    
        //102       Sender to Receiver Code 2        8
        sb.Append(this.wrapField(''));
    
        //103       Sender to Receiver Line 2       23-30
        sb.Append(this.wrapField(''));
    
        //104       Sender to Receiver Code 3        8
        sb.Append(this.wrapField(''));
    
        //105       Sender to Receiver Line 3       23-30
        sb.Append(this.wrapField(''));
    
        //106       Sender to Receiver Code 4        8
        sb.Append(this.wrapField(''));
    
        //107       Sender to Receiver Line 4       23-30
        sb.Append(this.wrapField(''));
    
        //108       Sender to Receiver Code 5        8
        sb.Append(this.wrapField(''));
    
        //109       Sender to Receiver Line 5       23-30
        sb.Append(this.wrapField(''));
    
        //110       Sender to Receiver Code 6        8
        sb.Append(this.wrapField(''));
    
        //111       Sender to Receiver Line 6       23-30
        sb.Append(this.wrapField(''));
    
        //112       Priority                         1
        sb.Append(this.wrapField(''));
    
        //113       N/A                              0
        sb.Append(this.wrapField(''));
    
        //114       Charges                          3
        sb.Append(this.wrapField(''));
    
        //115       N/A                              0
        sb.Append(this.wrapField(''));
    
        //116       Additional Details               *
        sb.Append(this.wrapField(''));
        //------------------------------------------------
    
        //Note Section------------------------------------
        //117       Note                            70
        sb.Append(this.wrapField('', 0, false));
    
        mPaymentCount++;
        mPaymentAmount += amt;
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SubSection</Name>
				<Source><![CDATA[
    str rec_SubSection(str _type, str _value, str _name, str _addr1, str _addr2, str _addr3, str _country, boolean _field7 = false)
    {
        //Sub Section--------------------------------
        // 1       ID Type                         34
        // 2       ID Value                        34
        // 3       Name                            35
        // 4       Address 1                       35
        // 5       Address 2                       35
        // 6       Address 3                       32
        // 7       City, State, Postal Code         0
        // 8       Country                          2
        //-------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value;
    
        // 1       ID Type                         34
        sb.Append(this.wrapField(_type, 34));
    
        // 2       ID Value                        34
        sb.Append(this.wrapField(_value, 34));
    
        // 3       Name                            35
        sb.Append(this.wrapField(_name, 35));
    
        // 4       Address 1                       35
        sb.Append(this.wrapField(_addr1, 35));
    
        // 5       Address 2                       35
        sb.Append(this.wrapField(_addr2, 35));
    
        // 6       Address 3                       32
        sb.Append(this.wrapField(_addr3, 32));
    
        // 7       City, State, Postal Code         0
        if(_field7)
        {
            sb.Append(this.wrapField(''));
        }
    
        // 8       Country                          2
        sb.Append(this.wrapField(_country));
    
        value = sb.ToString();
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    boolean rec_Trailer()
    {
        //----------------------------------------------
        //Field     Field Name                    Length
        //1         TRAILER                          7
        //2         Total Number of Records         23
        //3         Hash Total of Amounts           17,3
        //----------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1         TRAILER                          7
        sb.Append(this.wrapField('TRAILER'));
    
        //2         Total Number of Records         23
        sb.Append(this.wrapField(int642str(mPaymentCount), 23));
    
        //3         Hash Total of Amounts           17,3
        sb.Append(this.wrapField(num2Str(mPaymentAmount, 1, 3, 1, 0), 17, false));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int length = 0, boolean _commaDelimit = true)
    {
        str value;
    
        value = _field;
    
        if(length != 0)
        {
            value = subStr(value, 1, length); // Trim field
        }
        else
        {
            value = _field;
        }
    
        if(strFind(value, #Comma, 0, strLen(value)))
        {
            value = #DoubleQuote + value + #DoubleQuote; // Wrap with double quotes
        }
    
        if(_commaDelimit)
        {
            value = value + #Comma; // Add comma
        }
    
        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>