<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_HSBC_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_PP_Format_HSBC_XML class
/// </summary>
class SKS_PP_Format_HSBC_XML extends SKS_PP_Format_XML
{
    LogisticsAddressCountryRegion mLogisticsAddressCountryRegion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>node_InitgPty</Name>
				<Source><![CDATA[
    protected XmlNode node_InitgPty(XmlNode _XmlNodel)
    {
    
        XmlNode locTempNode = _XmlNodel;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'InitgPty',
                    '',
                    0,
                    true);
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'Id',
                    '',
                    0,
                    true);
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'OrgId',
                    '',
                    0,
                    true);
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'Othr',
                    '',
                    true);
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'Id',
                    gSKS_PP_Bank.PP02);    //SKS_DevOps_16206
    
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Nm</Name>
				<Source><![CDATA[
    protected XmlNode node_Nm(XmlNode _XmlNode, str _NodeValue, int _MaxLength)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        sb.Append(_NodeValue);
        // Replace single quote
        sb.Replace("'", "&apos;");
        // Replace double quote
        sb.Replace('"', "&quot;");
        
        return SKS_EFT_Format::xmlAppendChildNodeText(
                                    gXmlDocument,
                                    _XmlNode,//NOTE: here we are adding a child to the previous node
                                    'Nm',
                                    sb.ToString(),
                                    _MaxLength,//Spec allows for 140, but the PP01 field can only hold thirty
                                    true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtTpInf</Name>
				<Source><![CDATA[
    protected XmlNode node_PmtTpInf(XmlNode _XmlNode)
    {
    
        this.setSvcLvl_Cd('NURG');

        this.setLclInstrm_Cd('POS');
    
        return super(_XmlNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_ChqInstr</Name>
				<Source><![CDATA[
    protected XmlNode node_ChqInstr(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
    
        if(mSKS_PP_FileDetail.ChkRefNbr)
        {
            locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                gXmlDocument,
                _XmlNode,
                'ChqInstr',
                '',
                0,
                true);
    
            if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        locTempNode,
                        'ChqTp',
                        'VOID');
            }
    
            //Assign Child Nodes
            //no need to catch return; the following node has no children
            this.node_ChqNb(locTempNode);
        }
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Cdtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_Cdtr
    /// </summary>
    /// <param name = "_XmlNode">_XmlNode</param>
    /// <returns>XmlNode</returns>
    protected XmlNode node_Cdtr(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        XmlNode locPstlAdr;
       
        BankChequeTable bankChequeTable;
        VendTable vendTable;
       

        if(mSKS_PP_FileDetail.VendName)
        {
            locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        locTempNode,
                        'Cdtr',
                        '',
                        0,
                        true);
            //Assign Child Nodes
            //no need to catch return; the following node has no children
            this.node_Nm(locTempNode,mSKS_PP_FileDetail.VendName,140);


        }
        changecompany(mSKS_PP_FileDetail.ChkCpnyId)
        {
            select RecipientType from bankChequeTable
                where bankChequeTable.SKS_PP_File_RecId == mSKS_PP_File.RecId &&
                    bankChequeTable.ChequeNum == mSKS_PP_FileDetail.ChkRefNbr;
        }

        if (bankChequeTable.RecipientType == BankChequeRecipientType::Vend)
        {
            select firstonly VendTable where mSKS_PP_FileDetail.VendorAccount == VendTable.AccountNum;

            if (VendTable.countryRegionId())
            {

                locPstlAdr = SKS_EFT_Format::xmlAppendChildNodeText(
                    gXmlDocument,
                    locTempNode,
                    'PstlAdr',
                    '',
                    0,
                    true);
                SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                locPstlAdr,//NOTE: here we are adding a child to the previous node
                'StrtNm',
                                 strRem(vendTable.postalAddress().Street,'!”#$%&*:;?@[\]^_|}~`()-+{/.'),
                                0,false);
                SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                locPstlAdr,//NOTE: here we are adding a child to the previous node
                'PstCd',
                                 strRem(vendTable.postalAddress().ZipCode," "),
                                0,false);
                SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                locPstlAdr,//NOTE: here we are adding a child to the previous node
                'TwnNm',
                                 strRem(vendTable.postalAddress().City,'!”#$%&*:;?@[\]^_|}~`()-+{/.'),
                                0,false);

                SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                locPstlAdr,//NOTE: here we are adding a child to the previous node
                'CtrySubDvsn',
                                vendTable.postalAddress().State,
                                0,false);

                SKS_EFT_Format::xmlAppendChildNodeText(
                                gXmlDocument,
                                locPstlAdr,//NOTE: here we are adding a child to the previous node
                'Ctry',
                                this.getLogisticsAddressCountryRegionISO(VendTable.countryRegionId()),
                                0,false);

                
            }
        }
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryRegionISO</Name>
				<Source><![CDATA[
    /// <summary>
    /// getLogisticsAddressCountryRegionISO
    /// </summary>
    /// <param name = "_countryRegion">_countryRegion</param>
    /// <returns>LogisticsAddressCountryRegionISOCode</returns>
    private LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryRegionISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        str value;
        
        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(mLogisticsAddressCountryRegion.CountryRegionId != _countryRegion)
            {
                mLogisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = mLogisticsAddressCountryRegion.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DbtrAgt_PstlAdr</Name>
				<Source><![CDATA[
    protected XmlNode node_DbtrAgt_PstlAdr(XmlNode _XmlNode)
    {
    
        XmlNode locTempNode = _XmlNode;
        str value;
        LogisticsPostalAddress  postalAddress;
        LogisticsAddressCountryRegion lLogisticsAddressCountryRegion;
    
        postalAddress = LogisticsLocationEntity::location2PostalAddress(gBankAccountTable.Location);
    
        if(postalAddress.CountryRegionId != '' && strLen(postalAddress.CountryRegionId) > 2)
        {
            if(lLogisticsAddressCountryRegion.CountryRegionId != postalAddress.CountryRegionId)
            {
                lLogisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId);
            }
            value = lLogisticsAddressCountryRegion.ISOcode;
        }
        else
        {
            value = postalAddress.CountryRegionId;
        }
    
        if(value)    //SKS_DevOps_16206
        {
            locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
            gXmlDocument,
            locTempNode,
            'PstlAdr',
            '',
            0,
            true);
    
            locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
            gXmlDocument,
            locTempNode,
            'Ctry',
            value,
            0,
            true);
        }
    
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_FinInstnId</Name>
				<Source><![CDATA[
    protected XmlNode node_FinInstnId(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        locTempNode,
                        'FinInstnId',
                        '',
                        0,
                        true);
        this.node_ClrSysMmbId(locTempNode);
        this.node_DbtrAgt_PstlAdr(locTempNode);
        return locTempNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_InstdAmt</Name>
				<Source><![CDATA[
    protected XmlNode node_InstdAmt(XmlNode _XmlNode)
    {
        XmlNode locTempNode = _XmlNode;
        int Mult = 1;
    
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        locTempNode = SKS_EFT_Format::xmlAppendChildNodeText(
                        gXmlDocument,
                        locTempNode,
                        'InstdAmt',
                        num2Str(mSKS_PP_FileDetail.ChkCuryAmt * Mult,1, 2, 1,0),
                        18,
                        true);
        SKS_EFT_Format::xmlsetAttributeText(locTempNode, 'Ccy', strUpr(gBankAccountTable.CurrencyCode));
        return locTempNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>