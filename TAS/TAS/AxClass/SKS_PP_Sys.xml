<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Sys</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Sys
{
    private SKS_EB_CommProcess gSKS_EB_CommProcess;
    private container locFilesToSkip;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSKS_EB_CommProcess</Name>
				<Source><![CDATA[
    public void setSKS_EB_CommProcess(SKS_EB_CommProcess _SKS_EB_CommProcess)
    {
        gSKS_EB_CommProcess = _SKS_EB_CommProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_CommProcess</Name>
				<Source><![CDATA[
    public SKS_EB_CommProcess getSKS_EB_CommProcess()
    {
        return gSKS_EB_CommProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ABR_GetFolderNames</Name>
				<Source><![CDATA[
    public str ABR_GetFolderNames()
    {
        //This method was only used by the obsolete AB Service.  We have removed it to prevent the service from being started.
        //The AB Service has been replaced by a batch job.
        throw Global::Error('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>ABR_ImportFormat</Name>
				<Source><![CDATA[
    SKS_BR_ImportResult ABR_ImportFormat(SKS_BR_FileFormat tempSKS_BR_FileFormat, str fileName, SKS_BF_BankIntType _SKS_BF_BankIntType, SKS_PP_Bank _SKS_PP_Bank)
    {
        
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        SKS_EB_FileHub locHDRSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        SKS_EB_FileHub locDTLSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.Text.StringBuilder locFileNameStringBuilder;
        SKS_BR_ReadFileFixed readFixedFile;
        SKS_BR_ReadFileStructured locReadFileStructured;
        SKS_BR_ReadFileClassesBase locSKS_BR_ReadFileClassesBase;
        UtcDateTime fileDateTime;
        SKS_BR_ImportResult localSKS_BR_ImportResult;
        str infoResults;
        SKS_BR_BankHeaderRecId localSKS_BR_BankHeaderRecId;
        SKS_PP_CommBRPreImportScriptPath locBRPreReadScript;
        str locBRPreReadScriptParams;
        SKS_PP_CommBRPostImportScriptPath locBRPostReadScript;
        str locBRPostReadScriptParams;
        SKS_BR_ReadParseBase locSKS_BR_ReadParseBase;
        SKS_BR_ReadFileClassesCustomActionsBase locSKS_BR_ReadFileClassesCustomActionsBase;
        int locMultiCashIndicatorLocation;
        list ListOfFilesToProcess;
        ListEnumerator locFilesToProcessEnum;
        SKS_EB_FilePathName locSearchPattern;
        str locHeaderPreCut;
        boolean MultiCashFilesAccountedFor(int _IndicatorCharacter)
        { 
            boolean locProcessingHeader = false; 
            boolean locFoundDetail = false;
            SKS_BR_File locSKS_BR_File;
            if(strUpr(SKS_PP_StringFormats::strSub(System.IO.Path::GetFileName(fileName),_IndicatorCharacter,1)) == 'C')
            {
                locProcessingHeader = true;
                locFileNameStringBuilder = new System.Text.StringBuilder(System.IO.Path::GetFileName(fileName));
                locFileNameStringBuilder.Remove(tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? _IndicatorCharacter - 1 : 11, (tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? strLen('C') : strLen('ENCABEZADO_CC')));
                locFileNameStringBuilder.Insert(tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? _IndicatorCharacter - 1 : 11, tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? 'D' : 'DETALLE_CD');

                if(tempSKS_BR_FileFormat.FileType == SKS_BR_FileType::MulticashCOLBAN)
                {
                    locSearchPattern = SKS_PP_StringFormats::strSub( locFileNameStringBuilder.ToString(), 1, SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___') - 1);
                    locSearchPattern = locSearchPattern + SKS_PP_StringFormats::strSub( locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ), 20);
                    //locSearchPattern = locSearchPattern + '*';
                    ListOfFilesToProcess = locSKS_EB_FileHub.runDirectoryGetFiles(System.IO.Path::GetDirectoryName(fileName)/*,locSearchPattern*/);
                    if(!ListOfFilesToProcess)
                    {   
                        Error('Files not found');
                        return false;

                    }
                    else if(ListOfFilesToProcess.elements() >= 1)
                    {
                        locFilesToProcessEnum = ListOfFilesToProcess.getEnumerator();
                        while(locFilesToProcessEnum.moveNext())
                        {
                            if(strContains(strUpr(locFilesToProcessEnum.current()), strUpr(locSearchPattern)))
                            {
                                fileName = locFilesToProcessEnum.current();
                                locFoundDetail = true;
                                break;
                            }

                        }
                        if(!locFoundDetail)
                        {
                            Error('Multicash-COL-BOG detail file not found');
                            return false;
                        }
                    }
                    else if(ListOfFilesToProcess.elements() == 0)
                    {
            
                        Error('Multicash-COL-BOG detail file not found');
                    }
                }
                else
                {
                    fileName = System.IO.Path::Combine(System.IO.Path::GetDirectoryName(fileName), locFileNameStringBuilder.ToString());
                }
            }
            if(strUpr(SKS_PP_StringFormats::strSub(System.IO.Path::GetFileName(fileName),tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? _IndicatorCharacter: _IndicatorCharacter - 3 ,1)) == 'D')
            {
                locDTLSKS_EB_FileHub.setFileName(fileName);
                locDTLSKS_EB_FileHub.runFileInquire();
                locFileNameStringBuilder = new System.Text.StringBuilder(System.IO.Path::GetFileName(fileName));
                locFileNameStringBuilder.Remove(tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? _IndicatorCharacter - 1 : 11, tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? strLen('D') : strLen('DETALLE_CD'));
                locFileNameStringBuilder.Insert(tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? _IndicatorCharacter - 1 : 11, tempSKS_BR_FileFormat.FileType != SKS_BR_FileType::MulticashCOLBAN ? 'C' : 'ENCABEZADO_CC');
                locHeaderPreCut = SKS_PP_StringFormats::strSub( locFileNameStringBuilder.ToString(), 1, SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___') - 1);
                locHeaderPreCut = locHeaderPreCut + SKS_PP_StringFormats::strSub( locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ), 20);
                locSearchPattern = subStr(locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 21, 1);
                if(tempSKS_BR_FileFormat.FileType == SKS_BR_FileType::MulticashCOLBAN)
                    While(SKS_PP_StringFormats::isNumeric(subStr(locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 21, 1)) ||
                        subStr(locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 21, 1) == '_')
                    {
                        locFileNameStringBuilder.Remove(SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 20, 1);
                        locSearchPattern = subStr(locFileNameStringBuilder.ToString(), SKS_PP_StringFormats::strIndexOf(locFileNameStringBuilder.ToString(), '___' ) + 21, 1);
                    }

                locHDRSKS_EB_FileHub.setFileName(System.IO.Path::Combine(System.IO.Path::GetDirectoryName(fileName), locFileNameStringBuilder.ToString()));
                locHDRSKS_EB_FileHub.runFileInquire();
                if(!locDTLSKS_EB_FileHub.attrFileExists())
                {
                    locSKS_BR_File = SKS_BR_File::construct(_SKS_BF_BankIntType);
                    locSKS_BR_File.setFilePathName(locHDRSKS_EB_FileHub.fileName());
                    locHDRSKS_EB_FileHub = null;
                    locSKS_BR_File.moveToError();
                    Error(strFmt("@SKS:SKGBRMulticashDetailFileMissing",locSKS_BR_File.getFilePath()));
                    return false;
                }
                if(!locHDRSKS_EB_FileHub.attrFileExists())
                {
                    locSKS_BR_File = SKS_BR_File::construct(_SKS_BF_BankIntType);
                    locSKS_BR_File.setFilePathName(locDTLSKS_EB_FileHub.fileName());
                    locSKS_BR_File.moveToError();
                    Error(strFmt("@SKS:SKGBRMulticashHeaderFileMissing", fileName));
                    return false;
                }

            }
            else
            {
                locSKS_BR_File = SKS_BR_File::construct(_SKS_BF_BankIntType);
                locSKS_BR_File.setFilePathName(locDTLSKS_EB_FileHub.fileName());
                locDTLSKS_EB_FileHub = null;
                locSKS_BR_File.moveToError();
                error(strFmt("@SKS:SKGBRMulticashFileTypeMisMatch", enum2Str(tempSKS_BR_FileFormat.FileType)));
                return false;
            }
            if(locProcessingHeader)
                locFilesToSkip += locDTLSKS_EB_FileHub.fileName();
            else
                locFilesToSkip += locHDRSKS_EB_FileHub.fileName();
            return true;
            

        }
        
        localSKS_BR_ImportResult = new SKS_BR_ImportResult();
        if(conFind(locFilesToSkip, fileName) != 0)
            return null;        //IF you don't have a commid, you can't have any pre/post arguments, so skip this section.
        if(strLen(gSKS_EB_CommProcess.CommID) > 0)
        {
            //prep any pre-import script & script params
            locBRPreReadScriptParams = SKS_EB_Send::getParams(gSKS_EB_CommProcess,System.IO.Path::GetFileName(fileName), System.IO.Path::GetDirectoryName(fileName), fileName, SKS_EB_ParamGroup::BRInboundPreParam);
            locBRPreReadScript = gSKS_EB_CommProcess.BRPreImportScriptPath;
            //prep any post-import script & script params
            locBRPostReadScriptParams = SKS_EB_Send::getParams(gSKS_EB_CommProcess,System.IO.Path::GetFileName(fileName), System.IO.Path::GetDirectoryName(fileName), fileName, SKS_EB_ParamGroup::BRInboundPostParam);
            locBRPostReadScript = gSKS_EB_CommProcess.BRPostImportScriptPath;
        }

        locSKS_EB_FileHub.runFileInquire(fileName);
        fileDateTime = locSKS_EB_FileHub.attrFileModified();

        switch (tempSKS_BR_FileFormat.FileType)
        {
            case SKS_BR_FileType::FixedField:
                readFixedFile = new SKS_BR_ReadFileFixed();
                readFixedFile.setSKS_BF_BankIntType(_SKS_BF_BankIntType);
                readFixedFile.setPreReadScript(locBRPreReadScript);
                readFixedFile.setPreReadScriptParams(locBRPreReadScriptParams);
                readFixedFile.setPostReadScript(locBRPostReadScript);
                readFixedFile.setPostReadScriptParams(locBRPostReadScriptParams);
                readFixedFile.setFileName(fileName);
                readFixedFile.setFileDateTime(fileDateTime);
                readFixedFile.setFormatId(tempSKS_BR_FileFormat.formatId);
                readFixedFile.setOmitHeaderRecsNbr(tempSKS_BR_FileFormat.OmitHeaderRecs);
                readFixedFile.setOmitTrailerRecsNbr(tempSKS_BR_FileFormat.OmitTrailerRecs);
                localSKS_BR_BankHeaderRecId = readFixedFile.run();
                infoResults = readFixedFile.getEventLogText();
                break;
            case SKS_BR_FileType::BAI2: //This handles both NAI or BAI2
            case SKS_BR_FileType::NAI:
            case SKS_BR_FileType::MT940:
                if(tempSKS_BR_FileFormat.FileType == SKS_BR_FileType::BAI2)
                    locReadFileStructured = new SKS_BR_ReadFileBAI2();
                else if(tempSKS_BR_FileFormat.FileType == SKS_BR_FileType::NAI)
                    locReadFileStructured = new SKS_BR_ReadFileNAI();
                else
                    locReadFileStructured = new SKS_BR_ReadFileMT940();
                locReadFileStructured.setSKS_BF_BankIntType(_SKS_BF_BankIntType);
                locReadFileStructured.setPreReadScript(locBRPreReadScript);
                locReadFileStructured.setPreReadScriptParams(locBRPreReadScriptParams);
                locReadFileStructured.setPostReadScript(locBRPostReadScript);
                locReadFileStructured.setPostReadScriptParams(locBRPostReadScriptParams);
                locReadFileStructured.setFileName(fileName);
                locReadFileStructured.setFileDateTime(fileDateTime); // internal data will override this in the BIA2 record type 01.
                locReadFileStructured.setFormatId(tempSKS_BR_FileFormat.formatId);
                localSKS_BR_BankHeaderRecId = locReadFileStructured.run();
                infoResults = locReadFileStructured.getEventLogText();
                break;
            //ANY NEW FORMATS SHOULD FALL UNDER THIS SECTION.
            //AX DEV DOCS
            case SKS_BR_FileType::Custom_Type:
            case SKS_BR_FileType::CAMT_053_001_02:
            case SKS_BR_FileType::CSV:
            case SKS_BR_FileType::Multicash_COL:
            case SKS_BR_FileType::MulticashCOLBOG:
            case SKS_BR_FileType::MulticashCOLBAN:
            case SKS_BR_FileType::NORMA_43:
            case SKS_BR_FileType::Mizuho:
            case SKS_BR_FileType::CNAB240:
                switch(tempSKS_BR_FileFormat.FileType)
                {
                    //the caracter location is X++ based so, 1 based arrays(vs. C# based arrays which are zero based)
                    case SKS_BR_FileType::Multicash_COL:
                        locMultiCashIndicatorLocation = 2;
                        break;
                    case SKS_BR_FileType::MulticashCOLBAN:
                        locMultiCashIndicatorLocation = 24;
                        break;
                    case SKS_BR_FileType::MulticashCOLBOG:
                        locMultiCashIndicatorLocation = 3;
                }
                locSKS_BR_ReadFileClassesBase = new SKS_BR_ReadFileClassesBase();
                switch (tempSKS_BR_FileFormat.FileType)
                {
                    case SKS_BR_FileType::CAMT_053_001_02: //CAMT
                        locSKS_BR_ReadParseBase = new SysDictClass(className2Id('SKS_BR_ReadParseCAMT05300102')).makeObject();
                        break;
                    case SKS_BR_FileType::Multicash_COL:
                    case SKS_BR_FileType::MulticashCOLBOG:
                    case SKS_BR_FileType::MulticashCOLBAN:
                        if(!MultiCashFilesAccountedFor(locMultiCashIndicatorLocation))
                            return localSKS_BR_ImportResult;
                        locSKS_BR_ReadFileClassesCustomActionsBase = new SKS_BR_ReadFileClassesCustomActionsMultiCash(_SKS_BF_BankIntType);
                        locSKS_BR_ReadFileClassesCustomActionsBase.setSKS_EB_FilePathName(fileName);
                        locSKS_BR_ReadFileClassesCustomActionsBase.setSKS_BR_FileType(tempSKS_BR_FileFormat.FileType);
                        locSKS_BR_ReadFileClassesCustomActionsBase.setFieldDelimitere(tempSKS_BR_FileFormat.FileFieldDelimiter);
                        locSKS_BR_ReadFileClassesCustomActionsBase.setSKS_BR_FileFormat(tempSKS_BR_FileFormat);
                        locSKS_BR_ReadFileClassesBase.setCustomActions(locSKS_BR_ReadFileClassesCustomActionsBase);
                        
                    //NOTE: Multicash is a specific subset of CSV(DELIMITED), thus NO BREAK between multicash and CSV.
                    case SKS_BR_FileType::CSV: //Delimited formats
                        locSKS_BR_ReadParseBase = new SysDictClass(className2Id('SKS_BR_ReadParseDelimited')).makeObject();
                        locSKS_BR_ReadParseBase.setDelimiter(tempSKS_BR_FileFormat.FileFieldDelimiter);
                        if(tempSKS_BR_FileFormat.FileType == SKS_BR_FileType::Multicash_COL ||
                            tempSKS_BR_FileFormat.FileType == SKS_BR_FileType::MulticashCOLBAN ||
                            tempSKS_BR_FileFormat.FileType == SKS_BR_FileType::MulticashCOLBOG)
                            locSKS_BR_ReadParseBase.setCustomActions(locSKS_BR_ReadFileClassesCustomActionsBase);

                        break;
                    case SKS_BR_FileType::NORMA_43:
                        locSKS_BR_ReadParseBase = new SysDictClass(className2Id('SKS_BR_ReadParseNorma43')).makeObject();
                        break;
                    case SKS_BR_FileType::Mizuho:
                        locSKS_BR_ReadParseBase = new SysDictClass(className2Id('SKS_BR_ReadParseMizuho')).makeObject();
                        break;
                    case SKS_BR_FileType::CNAB240:
                        locSKS_BR_ReadParseBase = new SysDictClass(className2Id('SKS_BR_ReadParseCNAB240')).makeObject();
                        break;
                    default: //Custom_Type
                        locSKS_BR_ReadParseBase = new SysDictClass(className2Id(tempSKS_BR_FileFormat.CustomFormatClass)).makeObject();
                }
                locSKS_BR_ReadParseBase.setPreReadScript(locBRPreReadScript);
                locSKS_BR_ReadParseBase.setPreReadScriptParams(locBRPreReadScriptParams);
                locSKS_BR_ReadParseBase.setPostReadScript(locBRPostReadScript);
                locSKS_BR_ReadParseBase.setPostReadScriptParams(locBRPostReadScriptParams);
                locSKS_BR_ReadParseBase.setSKS_BF_BankIntType(_SKS_BF_BankIntType);
                locSKS_BR_ReadParseBase.setSKS_PP_Bank(_SKS_PP_Bank);
                locSKS_BR_ReadFileClassesBase.setSKS_BF_BankIntType(_SKS_BF_BankIntType);
                locSKS_BR_ReadFileClassesBase.setParseRule(locSKS_BR_ReadParseBase);
                locSKS_BR_ReadFileClassesBase.setFileName(fileName);
                locSKS_BR_ReadFileClassesBase.setFileDateTime(fileDateTime); // internal data will override this
                locSKS_BR_ReadFileClassesBase.setFormatId(tempSKS_BR_FileFormat.formatId);
                localSKS_BR_BankHeaderRecId = locSKS_BR_ReadFileClassesBase.run();
                infoResults = locSKS_BR_ReadFileClassesBase.getEventLogText();
                break;
        }

        localSKS_BR_ImportResult.setInfoResult(infoResults);
        localSKS_BR_ImportResult.setSKS_BR_BankHeaderRecID(localSKS_BR_BankHeaderRecId);
        return localSKS_BR_ImportResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ABR_ProcessBankAccountViaAPI</Name>
				<Source><![CDATA[
    public static str ABR_ProcessBankAccountViaAPI(SKS_EB_CommProcess locSKS_EB_CommProcess,
        BankAccountTable _BankAccountTable,
        str locBankFabricCommunicationName = '',
    str locCompany = '',
    str locBankAccountId = '',
    date locFromDate = mkDate(01,09,2022),
    date locToDate = mkDate(01,09,2022),
    str locAccountNumber = '',
    str locIBAN = '',
    str locRoutingNumber = '',
    str locSWIFTCode = '',
    str locDNS = '',
    str locERPLogInfo = 'TEST LOG DATA',
    str locTASVer = '34.400.0.0',
    str locSecretName = 'SecretX'
    )
    {
        SKS_EB_BankFabric locSKS_EB_BankFabric = SKS_EB_BankFabric::construct();
        str rtnval = '';
        container locFileContainer;
        container locAccountsContainer;
        container locStatementsContainer;
        int locAccountidx = 0;
        int locStmtidx = 0;
        SKG_BF.Models.BankStatementResponse locBankStatementResponse;
        SKS_BR_InboundBankAPI locSKS_BR_InboundBankAPI;
        SKS_BR_InboundStmt locSKS_BR_InboundStmt;
        SKS_BR_InboundTran locSKS_BR_InboundTran;
        System.Collections.IEnumerable locFileAnalogs; //List of File analogs
        System.Collections.IEnumerator locBankImportSourcesEnumerator;
        System.Collections.IEnumerable locStatements;
        System.Collections.IEnumerator locStatementsEnumerator;
        System.Collections.IEnumerable locTransactions;
        System.Collections.IEnumerator locTransactionsEnumerator;
        SKG_BF.Models.BankImportSources locBankImportSources; // File analog
        SKG_BF.Models.BankStatementHeader locBankStatementHeader;
        SKG_BF.Models.BankStatementLines locBankStatementLines;
        SKS_BR_ReadBankClassesBaseAPI locSKS_BR_ReadBankAIPClassesBase;
        str locSKS_BR_BankHeaderIdentifer;
        guid locCurrentAPICall;

        str SysDate2strDateyMd(System.DateTime _SystemDateTime)
        {
            return  _SystemDateTime.Year.ToString() + '-' +
                        _SystemDateTime.Month.ToString() + '-' +
                        _SystemDateTime.Day.ToString();
        }

 
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType::BankFabric);
        locERPLogInfo = BatchHeader::getCurrentBatchTask().Caption();
        locCurrentAPICall = newGuid();
        info(strFmt("@SKS:SKGBFAPICallPreAPICallNotice",
            _BankAccountTable.AccountNum,
            locFromDate, locToDate,
            _BankAccountTable.AccountID,
            _BankAccountTable.company(),
            locCurrentAPICall));
        locBankStatementResponse = locSKS_EB_BankFabric.RetrieveAPIBankRecStatement(locBankFabricCommunicationName,
            locFromDate,
            locToDate,
            locAccountNumber,
            locIBAN,
            locRoutingNumber,
            locSWIFTCode,
            locDNS,
            locERPLogInfo,
            locTASVer,
            locSecretName,
            locSKS_EB_CommProcess);
        info(strFmt("@SKS:SKGBFAPIPostCallNotice",locCurrentAPICall));

        /*
        System.Collections.IEnumerable and assigning the return value there.
        Then call GetEnumerator() to get System.Collections.IEnumerator and use
        its MoveNext() and get_Current() methods to iterate the collection.
        */
        locFileAnalogs = locBankStatementResponse.BankImportSources;//get list of files
        locBankImportSourcesEnumerator = locFileAnalogs.GetEnumerator();
        while(locBankImportSourcesEnumerator.MoveNext())
        {
            locBankImportSources = locBankImportSourcesEnumerator.get_Current();
            locSKS_BR_BankHeaderIdentifer = System.String::IsNullOrEmpty(locBankImportSources.BFIdentifier) ?
                strFmt('%1 %2 %3',
                date2Str(locFromDate,321,2,DateSeparator::Hyphen,2,DateSeparator::Hyphen,2),
                _BankAccountTable.AccountID,
                _BankAccountTable.company()) : locBankImportSources.BFIdentifier;
            if(!System.String::IsNullOrEmpty(locBankImportSources.Reason.Trim()))
            {
                locSKS_BR_BankHeaderIdentifer = !System.String::IsNullOrEmpty(locBankImportSources.BFIdentifier) ? strFmt('API: %1: %2', date2Str(today(),321,2,DateSeparator::Hyphen,2,DateSeparator::Hyphen,2), curExt()) : locBankImportSources.BFIdentifier;
                SKS_BR_BankHeader::createBankHeaderAPI(locBankImportSources.Reason.Trim(),
                                                            SKS_BR_ImportStatus::Error,
                                                            locSKS_EB_FileHub.getSKS_BF_BankIntType(),
                                                            locSKS_BR_BankHeaderIdentifer);
                continue;
            }
            locSKS_BR_InboundBankAPI = new SKS_BR_InboundBankAPI();
            locStatements = locBankImportSources.BankStatements;//get list of statements
            locStatementsEnumerator = locStatements.GetEnumerator();
            while(locStatementsEnumerator.MoveNext())
            {
                locBankStatementHeader = locStatementsEnumerator.get_Current();
                locSKS_BR_InboundStmt = new SKS_BR_InboundStmt();
                locSKS_BR_InboundStmt.SetAccount(locBankStatementHeader.BankAccount);
                locSKS_BR_InboundStmt.SetCurrency(locBankStatementHeader.CurrencyCode);
                locSKS_BR_InboundStmt.SetDate(SysDate2strDateyMd(locBankStatementHeader.StatementDate));
                locSKS_BR_InboundStmt.SetEndingBalance(locBankStatementHeader.StatementEndingBalance);
                if(System.String::IsNullOrEmpty( locBankStatementHeader.StatementNumber))
                {
                    locSKS_BR_InboundStmt.SetNbr(int2Str(year(locToDate)) + (mthOfYr(locToDate) < 10? '0' + int2Str(mthOfYr(locToDate)) : int2Str(mthOfYr(locToDate))) + (dayOfMth(locToDate) < 10? '0' + int2Str(dayOfMth(locToDate)) : int2Str(dayOfMth(locToDate))));
                }
                else
                {
                    locSKS_BR_InboundStmt.SetNbr(locBankStatementHeader.StatementNumber);
                }
                locTransactions = locBankStatementHeader.BankStatementLines;
                locTransactionsEnumerator = locTransactions.GetEnumerator();

                while(locTransactionsEnumerator.MoveNext())
                {
                    locBankStatementLines = locTransactionsEnumerator.get_Current();
                    locSKS_BR_InboundTran = new SKS_BR_InboundTran();
                    locSKS_BR_InboundTran.AppendDesc(locBankStatementLines.Description);
                    locSKS_BR_InboundTran.AppendDescUser(locBankStatementLines.Description);
                    locSKS_BR_InboundTran.SetAmt(locBankStatementLines.Amount);
                    locSKS_BR_InboundTran.SetBankRefNbr(locBankStatementLines.BankRefNumber);
                    locSKS_BR_InboundTran.SetCurrency(locBankStatementLines.CurrencyCode);
                    locSKS_BR_InboundTran.SetCustRefNbr( locBankStatementLines.CustomerRefNumber);
                    locSKS_BR_InboundTran.setStatusReason( locBankStatementLines.DDReversalReference );
                    locSKS_BR_InboundTran.setStatusReasonDesc( locBankStatementLines.DDReversalReason);
                    locSKS_BR_InboundTran.SetRunningBalance(locBankStatementLines.RunningBalance);
                    locSKS_BR_InboundTran.SetDate( SysDate2strDateyMd(locBankStatementLines.TransactionDate));
                    locSKS_BR_InboundTran.SetTranType(locBankStatementLines.TransactionType);
                    locSKS_BR_InboundTran.SetValueDate(SysDate2strDateyMd(locBankStatementLines.ValueDate));
                    locSKS_BR_InboundStmt.PushTrans(locSKS_BR_InboundTran);
                }
                //Push Statement onto the "file"
                locSKS_BR_InboundBankAPI.PushStmt(locSKS_BR_InboundStmt);
            }
            locSKS_BR_ReadBankAIPClassesBase = new SKS_BR_ReadBankClassesBaseAPI();
            locSKS_BR_ReadBankAIPClassesBase.readBankAPI(locSKS_BR_InboundBankAPI, _BankAccountTable, locSKS_BR_BankHeaderIdentifer);
        }
            

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ABR_ProcessFolder</Name>
				<Source><![CDATA[
    public str ABR_ProcessFolder( str FolderName, str FileName, SKS_BF_BankIntType _SKS_BF_BankIntType, int registered = 1)
    {
        SKS_PP_Bank tempSKS_PP_Bank;
        SKS_PP_Setup tempSKS_PP_Setup;
        SKS_BR_FileFormat tempSKS_BR_FileFormat;
        SKS_EB_FilePath temp_FolderName;
        SKS_BR_ImportResult localSKS_BR_ImportResult;
        str infoResults;        // debugging/error results of the run.
        ;

        // must be using Advance Bank Req.
        Select firstonly tempSKS_PP_Setup;
        if (tempSKS_PP_Setup.BREdition != SKS_BR_Edition::Advanced)
        {
            return "@SKS711";
        }

        temp_FolderName = FolderName;
        infoResults = "@SYS80257" + ' = ' + temp_FolderName + ' ' + "@SYS4047" + ' = ' + FileName;

        Select firstonly tempSKS_PP_Bank
            where ((_SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && tempSKS_PP_Bank.BRPath == temp_FolderName)
                    || (_SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric && tempSKS_PP_Bank.BRBankFabricLocation == temp_FolderName))
                && tempSKS_PP_Bank.BRFormatID != '';

        if (tempSKS_PP_Bank.RecId == 0)
        {
            infoResults += ' ' + "@SKS365" + ' ' +  "@SKS231" + ' ';
            // must be using setup.
            Select firstonly RecId from tempSKS_PP_Setup where _SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && tempSKS_PP_Setup.BRPath == temp_FolderName
                                                                || _SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && tempSKS_PP_Setup.BRBankFabricLocation == temp_FolderName;
            if (tempSKS_PP_Setup.RecId)
            {
                Select firstonly BRFormatID from tempSKS_PP_Bank where tempSKS_PP_Bank.BRFromSetup == true;
            }
            else
            {
                infoResults += ' ' + "@SKS365" + ' ' +  "@SKS225" + ' ';
            }
        }

        if (tempSKS_PP_Bank.RecId)
        {
            infoResults += ' ' +  "@SYS68887" + ' ' + "@SKS316" + ' = ' + tempSKS_PP_Bank.BRFormatID;

            select firstonly tempSKS_BR_FileFormat where tempSKS_BR_FileFormat.FormatId == tempSKS_PP_Bank.BRFormatID
                && tempSKS_BR_FileFormat.CCR_IsCCRFormat == NoYes::No;/// SKS_FDD_13903 - To make sure that its picking only non-CCR format
            if (tempSKS_BR_FileFormat.RecId == 0)
            {
                // none found: fail.
                infoResults = "@SKS296";
            }
            else
            {
                // Call read file process here.

                localSKS_BR_ImportResult = this.ABR_ImportFormat(tempSKS_BR_FileFormat, _SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric ? System.IO.Path::Combine(FolderName, FileName) : FileName, _SKS_BF_BankIntType, tempSKS_PP_Bank);
                if(localSKS_BR_ImportResult == null)
                    return '';
                
                infoResults = localSKS_BR_ImportResult.getInfoResult();
                
                if(localSKS_BR_ImportResult.getSKS_BR_BankHeaderRecID() > 0)
                {
                    SKS_BR_BankAcctStmt::ReconcileStatement(localSKS_BR_ImportResult.getSKS_BR_BankHeaderRecID());
                    SKS_BR_ReadFile::updateImportHitRate(localSKS_BR_ImportResult.getSKS_BR_BankHeaderRecID());// TFS 7335
                }
                else
                    error("@SKS3045");
            }
        }
        else
        {
            // none found: fail.
            infoResults = "@SKS317";
        }



        return infoResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CallModalForm</Name>
				<Source><![CDATA[
    boolean CallModalForm( Object CallingForm, str FormToDisplay)
    {
        Args a;
        formRun formRun;
        boolean result;
        ;

        a = new Args();
        a.name(FormToDisplay);
        a.caller(CallingForm);
        formRun = classFactory.formRunClass(a);
        formRun.run();
        formRun.wait(true);

        result = formRun.closedOk();

        formRun.detach();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateSetup</Name>
				<Source><![CDATA[
    /*

        FOR ANY MAIN SCREEN(subscreens do not need validated)
        Add a new "case" to the switch below.  The screen's name is the value of the case.
        for screens that don't require validation, just leave the case empty in case validation is added later.
        Validate for the module the screen belongs to if you don't want them opening it if the
            module is not registerd in setup.
        Validate SKS_PP_SETUP and/or SKS_EFT_SETUP exists if the screen needs information from of
            those tables to populate fields

    */
    boolean ValidateSetup( str _FormID, SKS_EFT_Module _Module = SKS_EFT_Module::AP) // DD_AP_SETUP()
    {
        SKS_PP_Setup    Local_SKS_PP_Setup;
        SKS_EFT_Setup   Local_SKS_EFT_Setup;
        boolean         Local_CheckIsGood;
        ;

        Local_CheckIsGood = true;
        //BEGIN TEMPLATES
        /*
        Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
        Local_CheckIsGood = SKS_PP_Sys::ValidateEFTSetup(Local_SKS_EFT_Setup, Local_CheckIsGood);
        Local_CheckIsGood = SKS_PP_Sys::ValidatePPMod(Local_SKS_PP_Setup, Local_CheckIsGood);
        Local_CheckIsGood = SKS_PP_Sys::ValidateBRMod(Local_SKS_PP_Setup, Local_CheckIsGood);
        Local_CheckIsGood = SKS_PP_Sys::ValidateAdvBRMod(Local_SKS_PP_Setup, Local_CheckIsGood);
        Local_CheckIsGood = SKS_PP_Sys::ValidateLBMod(Local_SKS_PP_Setup, Local_CheckIsGood);
        Local_CheckIsGood = SKS_PP_Sys::ValidateAPEFTMod(Local_SKS_EFT_Setup, Local_CheckIsGood);
        */
        //END TAMPLATES

        select * from Local_SKS_PP_Setup;
        select * from Local_SKS_EFT_Setup;
        if(Local_SKS_PP_Setup) //all screens run this check unconditionally EXCEPT SKS_PP_SETUP
        {
            Local_CheckIsGood = !SKS_PP_Upgrade::checkForUpgrade();//Returns true if it needs upgraded, switched to false to prevent the opening of any screen.
        }

        if(Local_CheckIsGood)
        {
            switch(_FormID)
            {
                //21186
                case formStr(SKS_PCard_Import) :
                case formStr(SKS_PCard_ImportTrans) :
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePCardSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;
                //21186

                case 'SKS_BR_Banktran' ://Import bank files
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateBRMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;

                case  'SKS_BR_FileFormatForm': //Electronic bank rec file formats
                case  'SKS_BR_GLMappingRuleGroup': // GL mapping rules
                case  'SKS_BR_MatchingRules': // Matching rules
                case  'SKS_BR_DDRMappingRuleGroup': // DDR Matching rules
                case  'SKS_BR_ParseRule': // Parsing rules
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_BR_Import':
                case 'SKS_BR_ImportedBankStatements':
                case  formStr(SKS_PRA_StatementReconciliation):
                case  formStr(SKS_BR_StatementReconciliation):// BR1 change
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateAdvBRMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;
                 // SKS_FDD_13903 -->
                case 'SKS_CCR_Import':
                case  formStr(SKS_CCR_StatementReconciliation):
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateCCRMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;
                    // SKS_FDD_13903 <--

                case 'SKS_BR_Unmatched' : // Un-matched imported electronic...
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateAdvBRMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;

                case  'SKS_EB_Communications': // Communications
                case  'SKS_EB_BankHolidayGroups': // Holiday groups
                    //NO VALIDATION REQUIRED
                    break;

                case  'SKS_EFT_AddendaConfig': // Addenda config
                case  'SKS_EFT_AddendaData': // Addenda data
                case  'SKS_EFT_FileFormats': // EFT+ file formats
                case  'SKS_EFT_InboundFileFormats': //Inbound file formats
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_EFT_APBankAccount' : //Bank Account AP EFT
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateEFTSetup(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_EFT_ARBankAccount' : //Bank Account AR EFT
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateEFTSetup(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_EFT_BTBBankAccount' : //Bank Account Bank to bank transfer EFT
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateEFTSetup(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_EFT_CNPBankAccount' : //Customer reimbursement EFT
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateEFTSetup(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_EFT_VendorDetails' : //Vendor eBanking
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateEFTSetup(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_EFTAP_CreateSendFiles' ://Create and send files (EFT)
                case 'SKS_EFT_Snapshot':   //EFT+ snapshot
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateEFTSetup(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    if(_Module == SKS_EFT_Module::AP)
                    {
                        Local_CheckIsGood = SKS_PP_Sys::ValidateAPEFTMod(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    }
                    else if(_Module == SKS_EFT_Module::AR)
                    {
                        Local_CheckIsGood = SKS_PP_Sys::ValidateAREFTMod(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    }
                    else if(_Module == SKS_EFT_Module::BTB)
                    {
                        Local_CheckIsGood = SKS_PP_Sys::ValidateBTBEFTMod(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    }

                    break;

                case 'SKS_LB_Depositor' : // Customer eBanking
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_LB_FileFormatForm' : // Lockbox File Formats
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_LB_ProcessFiles' :
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidateLBMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_PP_BankAccount' : //Bank account
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_PP_CreateSendFiles' : //Create and Send files
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPSetup(Local_SKS_PP_Setup, Local_CheckIsGood);
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePPMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;

                case 'SKS_PP_FileFormats' : //Positive pay file formats
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_PP_HeaderTrailer' : //Header/Trailer
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_PP_Setup' : //Setup
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_LB_Bank' : //Setup
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_EB_CodeLookup' :
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_EB_BankCodeLookup' :
                    //NO VALIDATION REQUIRED
                    break;

                case 'SKS_EFT_InboundFileGroups' :
                    //NO VALIDATION
                    break;

                case 'SKS_EB_CharacterReplacementGroups' :
                    //NO VALIDATION
                    break;

                case 'SKS_LB_MatchingGroups' :
                      //NO VALIDATION
                    break;

                case 'SKS_LB_MatchingRules' :
                    break;

                case 'SKS_EPY_Queue' :
                    break;

                case 'SKS_FXA_CounterPartyTable':
                case 'SKS_FXA_CurrencyPairsTable':
                case 'SKS_FXA_Details':
                    Local_CheckIsGood = SKS_PP_Sys::ValidateFXMod(Local_SKS_EFT_Setup, Local_CheckIsGood);
                    break;

                //SKS IHB 9536 -->
                case 'SKS_EFTAP_SwitchboardExternalBank' ://Switchboard external bank
                case 'SKS_EFTAP_PaymentCalendar': // Payment calendar
                    Local_CheckIsGood = SKS_PP_Sys::ValidatePFAMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;
                //SKS IHB 9536 <--

                case 'SKS_IHB_CalculatedInterest':
                case 'SKS_IHB_InhouseBankStatementGeneration':
                case 'SKS_IHB_InterestCalculation':
                case 'SKS_EFTAP_SwitchboardInHouseBank':   //Switchboard in House bank
                    Local_CheckIsGood = SKS_PP_Sys::ValidateIHBMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;
                case 'SKS_SCF_CreateSendFiles' :   //FDD-14323- Supply chain finance
                    Local_CheckIsGood = SKS_PP_Sys::ValidateSCFMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;
                case 'SKS_SCF_Provider':   
                    Local_CheckIsGood = SKS_PP_Sys::ValidateSCFMod(Local_SKS_PP_Setup, Local_CheckIsGood);
                    break;
                default: //If it called, it has to have a case, else... fail it.
                    //////////VALIDATION REQUIRED BUT NOT PRESENT\\\\\\\\\\\\\
                    Local_CheckIsGood = false;
                    break;
                    /*
                        any  main screen MUST call this file, even if it is not going to validate anything.
                        any screen that calls this file MUST have its own case, even if no validation is planned
                        at this time.  This way all screens have identical flow, and, if circumstances change validation
                        can be added at a later date by just popping the validation into the case statement.
                    */

            } //end select(formid)
        } //if (isGood)


        return Local_CheckIsGood;


    }

]]></Source>
			</Method>
			<Method>
				<Name>ABR_getCurrentAOS</Name>
				<Source><![CDATA[
    server public static str ABR_getCurrentAOS()
    {
        xSession locXSession;

        locXSession = new xSession();
        return locXSession.AOSName();

    }

]]></Source>
			</Method>
			<Method>
				<Name>ABR_getServiceLogon</Name>
				<Source><![CDATA[
    server public static str ABR_getServiceLogon()
    {
        str rtnval;

        rtnval = System.String::Concat(System.Environment::get_UserDomainName(), @"\",
                                            System.Environment::get_UserName());
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabel</Name>
				<Source><![CDATA[
    public static str getLabel(tableId _tableId, fieldId _fieldId)
    {
        SysDictField dict = new SysDictField(_tableId, _fieldId);
        ;
        return(dict.label());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getObjectServer</Name>
				<Source><![CDATA[
    static str getObjectServer()
    {
        Session session;
        ;

        session = new Session();
        return session.AOSName() + ':' + int2str(session.aosPort());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileHubRequiredVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns FileHub version required by TAS. Anytime FileHub dll file versions are updated, this needs updated.  
    /// </summary>
    /// <returns></returns>
    static str getFileHubRequiredVersion()
    {
        return "3.0.7.0";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKSVersion</Name>
				<Source><![CDATA[
    static str getSKSVersion()
    {
        str majorVer = '11';
        str minorVer = '9';
        str subVer = '2';
        str axVer = '00';

        return majorVer + '.' + minorVer + '.' + subVer + '.' + axVer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKSMajorVersion</Name>
				<Source><![CDATA[
    static int getSKSMajorVersion(SKS_EB_Version _SKS_EB_Version = SKS_PP_Sys::getSKSVersion())
    {
        int intNumberOfChars = SKS_PP_StringFormats::strIndexOf(_SKS_EB_Version, '.') - 1;
        str strMajorVersion = SKS_PP_StringFormats::strSub(_SKS_EB_Version,1,intNumberOfChars);
        return str2int(strMajorVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKSMinorVersion</Name>
				<Source><![CDATA[
    static int getSKSMinorVersion(SKS_EB_Version _SKS_EB_Version = SKS_PP_Sys::getSKSVersion())
    {
        int intStaringPosition = SKS_PP_StringFormats::strIndexOf(_SKS_EB_Version, '.') + 1;
        int intIndexOfClosingDot = SKS_PP_StringFormats::strIndexOf(_SKS_EB_Version, '.', intStaringPosition);

        return str2int(SKS_PP_StringFormats::strSub(_SKS_EB_Version,intStaringPosition,intIndexOfClosingDot - intStaringPosition - 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKSSubVersion</Name>
				<Source><![CDATA[
    static int getSKSSubVersion(SKS_EB_Version _SKS_EB_Version = SKS_PP_Sys::getSKSVersion())
    {
        int intStaringPosition = SKS_PP_StringFormats::strIndexOf(_SKS_EB_Version, '.') + 1;
        int intSecondStartingPosition = SKS_PP_StringFormats::strIndexOf(_SKS_EB_Version, '.', intStaringPosition) + 1;
        int intIndexOfClosingDot = SKS_PP_StringFormats::strIndexOf(_SKS_EB_Version, '.', intSecondStartingPosition);
        return str2int(SKS_PP_StringFormats::strSub(_SKS_EB_Version,intSecondStartingPosition,intIndexOfClosingDot - intSecondStartingPosition - 1));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVerALessThanVerB</Name>
				<Source><![CDATA[
    public static boolean isVerALessThanVerB(SKS_EB_Version _VerA, SKS_EB_Version _VerB)
    {
        if(SKS_PP_Sys::getSKSMajorVersion(_VerA)  < SKS_PP_Sys::getSKSMajorVersion(_VerB) )
        {
            return true;
        }
        else if(SKS_PP_Sys::getSKSMajorVersion(_VerA)  == SKS_PP_Sys::getSKSMajorVersion(_VerB))
        {
            if(SKS_PP_Sys::getSKSMinorVersion(_VerA)  < SKS_PP_Sys::getSKSMinorVersion(_VerB))
            {
                return true;
            }
            else if(SKS_PP_Sys::getSKSMinorVersion(_VerA)  == SKS_PP_Sys::getSKSMinorVersion(_VerB))
            {
                if(SKS_PP_Sys::getSKSSubVersion(_VerA)  < SKS_PP_Sys::getSKSSubVersion(_VerB))
                {
                    return true;
                }

            }

        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVerAGreaterThanVerB</Name>
				<Source><![CDATA[
    public static boolean isVerAGreaterThanVerB(SKS_EB_Version _VerA, SKS_EB_Version _VerB)
    {
        return SKS_PP_Sys::isVerALessThanVerB(_VerB, _VerA);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVerAEqualToVerB</Name>
				<Source><![CDATA[
    public static boolean isVerAEqualToVerB(SKS_EB_Version _VerA, SKS_EB_Version _VerB)
    {
        if(
            (SKS_PP_Sys::getSKSMajorVersion(_VerA)  == SKS_PP_Sys::getSKSMajorVersion(_VerB))
            && (SKS_PP_Sys::getSKSMinorVersion(_VerA)  == SKS_PP_Sys::getSKSMinorVersion(_VerB))
            && (SKS_PP_Sys::getSKSSubVersion(_VerA)  == SKS_PP_Sys::getSKSSubVersion(_VerB))
           )
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateAdvBRMod</Name>
				<Source><![CDATA[
    public static boolean ValidateAdvBRMod(SKS_PP_Setup _sks_pp_setup, boolean _isGood)
    {
        boolean isGood;
        ;

        isGood = _isGood;
        if ((_sks_pp_setup.ModBR == NoYes::No || (_sks_pp_setup.ModBR == NoYes::Yes && _sks_pp_setup.BREdition != SKS_BR_Edition::Advanced)) && isGood)// Module BANK REC (Advnaced only) is required
        {
            Box::warning("@SKS561", "@SKS311"); //Electronic Bank Reconciliation Advanced is not enabled in eBanking setup.
            isGood = false;
        }

        return isGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateCCRMod</Name>
				<Source><![CDATA[
    // SKS_FDD_13903 -->
    public static boolean ValidateCCRMod(SKS_PP_Setup _sks_pp_setup, boolean _isGood)
    {
        boolean isGood;
        ;

        isGood = _isGood;
        if ((_sks_pp_setup.ModCCReconciliationExtensions == NoYes::No || (_sks_pp_setup.ModCCReconciliationExtensions == NoYes::Yes && _sks_pp_setup.BREdition != SKS_BR_Edition::Advanced)) && isGood)// Module BANK REC (Advnaced only) is required
        {
            Box::warning("@SKS:SKGCCRIsNotEnabledInTAS", "@SKS311"); //Credit Card Reconciliation is not enabled in T setup.
            isGood = false;
        }

        return isGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateAPEFTMod</Name>
				<Source><![CDATA[
    // SKS_FDD_13903 <--

    public static boolean ValidateAPEFTMod(SKS_EFT_Setup _SKS_EFT_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_SKS_EFT_Setup.ModAPEFT == NoYes::No && isGood) // Module ACCOUNTS PAYABLE ELECTRONIC FUND TRANSFER is required
        {
            Box::warning("@SKS1035", "@SKS311");
            //Accounts Payable Electronic Fund Transfer is not enabled in eBanking setup.  This menu option is not available.
            isGood = false;
        }

        return isGood;


    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateBTBEFTMod</Name>
				<Source><![CDATA[
    public static boolean ValidateBTBEFTMod(SKS_EFT_Setup _SKS_EFT_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_SKS_EFT_Setup.ModBTB == NoYes::No && isGood) // Module ACCOUNTS PAYABLE ELECTRONIC FUND TRANSFER is required
        {
            Box::warning("@SKS:SKGBTBNotEnabledValidation", "@SKS311");
            //Accounts Payable Electronic Fund Transfer is not enabled in eBanking setup.  This menu option is not available.
            isGood = false;
        }

        return isGood;


    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateIHBMod</Name>
				<Source><![CDATA[
    public static boolean ValidateIHBMod(SKS_PP_Setup _sks_pp_setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_sks_pp_setup.IHB_Active == NoYes::No && isGood) // Module IHB is required
        {
            Box::warning("@SKS:SKGIHBActive", "@SKS311");
            isGood = false;
        }
        return isGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidatePFAMod</Name>
				<Source><![CDATA[
    public static boolean ValidatePFAMod(SKS_PP_Setup _sks_pp_setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_sks_pp_setup.ModPFA == NoYes::No && isGood) // Module PFA is required
        {
            Box::warning("@SKS:SKGPFAActive", "@SKS311");
            isGood = false;
        }
        return isGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateAREFTMod</Name>
				<Source><![CDATA[
    public static boolean ValidateAREFTMod(SKS_EFT_Setup _SKS_EFT_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_SKS_EFT_Setup.ModAREFT == NoYes::No && isGood) // Module ACCOUNTS RECEIVABLE ELECTRONIC FUND TRANSFER is required
        {
            Box::warning("@SKS1885", "@SKS311");
            //Accounts Receivable Electronic Fund Transfer is not enabled in eBanking setup.  This menu option is not available.
            isGood = false;
        }

        return isGood;


    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateBRMod</Name>
				<Source><![CDATA[
    public static boolean ValidateBRMod(SKS_PP_Setup _SKS_PP_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_SKS_PP_Setup.ModBR == NoYes::No && isGood) //Module BANK REC (either Advanced or Standard) is required
        {
            Box::warning("@SKS315", "@SKS311"); // Electronic Bank Reconciliation is not enabled in eBanking Suite setup.
            isGood = false;
        }

        return isGood;


    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateEFTSetup</Name>
				<Source><![CDATA[
    public static boolean ValidateEFTSetup(SKS_EFT_Setup _SKS_EFT_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (!_SKS_EFT_Setup && isGood) // ELECTRONIC FUND TRANSFER SETUP must be completed
        {
            Box::warning("@SKS1036", "@SKS311"); //"Selection is invalid until the Electronic Fund Transfer Setup screen is complete"
            isGood = false;
        }

        return isGood;


    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateFXMod</Name>
				<Source><![CDATA[
    public static boolean ValidateFXMod(SKS_EFT_Setup _SKS_EFT_Setup, boolean _isGood)
    {
        ;

        if (_SKS_EFT_Setup.ModFX == NoYes::No && _isGood)
        {
            Box::warning("@SKS3603", "@SKS311");
            _isGood = false;
        }

        return _isGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateLBMod</Name>
				<Source><![CDATA[
    public static boolean ValidateLBMod(SKS_PP_Setup _SKS_PP_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood =  _isGood;

        if (_SKS_PP_Setup.ModLockbox == NoYes::No && isGood) // Module POSITIVE PAY is requred
        {
            Box::warning("@SKS1037", "@SKS311"); // MSG_NOT_CONFIGURED:24088 - Lockbox is not enabled in eBanking setup.  This menu option is not available.
            isGood = false;
        }

        return isGood;


    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidatePPMod</Name>
				<Source><![CDATA[
    public static boolean ValidatePPMod(SKS_PP_Setup _SKS_PP_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_SKS_PP_Setup.ModPosPay == NoYes::No && isGood) // Module POSITIVE PAY is requred
        {
            Box::warning("@SKS159", "@SKS311"); //Positive Pay is not enabled in eBanking setup.  This menu option is not available.
            isGood = false;
        }

        return isGood;


    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidatePCardSetup</Name>
				<Source><![CDATA[
    // 21186
    public static boolean ValidatePCardSetup(SKS_PP_Setup _SKS_PP_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_SKS_PP_Setup.ModPCard == NoYes::No && isGood) // Module PCard is requred
        {
            Box::warning("PCard in not enabled under Treasury Automation Suite parameters. This menu option is not available.", "@SKS311"); //PCard is not enabled in setup.  This menu option is not available.
            isGood = false;
        }

        return isGood;

    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidatePPSetup</Name>
				<Source><![CDATA[
    public static boolean ValidatePPSetup(SKS_PP_Setup _SKS_PP_Setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (!_SKS_PP_Setup && isGood) // POSITIVE PAY SETUP must be completed
        {
            Box::warning("@SKS157", "@SKS311"); //"Selection is invalid until the eBanking Setup screen is complete"
            isGood = false;
        }

        return isGood;

    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateSCFMod</Name>
				<Source><![CDATA[
    public static boolean ValidateSCFMod(SKS_PP_Setup _sks_pp_setup, boolean _isGood)
    {
        boolean isGood;
        ;
        isGood = _isGood;

        if (_sks_pp_setup.ModSCF == NoYes::No && isGood) // Module IHB is required
        {
            Box::warning("@SKS:SKGSCFModValidation", "@SKS311");
            isGood = false;
        }
        return isGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_SKS_Contact</Name>
				<Source><![CDATA[
    public static str get_SKS_Contact()
    {
        return 'SK Global Software' + '\n' + 'www.sksoft.com'+ '\n' + '(301) 963-7300 x114';
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateSKSCommonModel</Name>
				<Source><![CDATA[
    public static str ValidateSKSCommonModel()
    {
        const var SKSCommonDisplayName = 'SKS_Common';
        const var SKSeBankingDisplayName = 'TAS AX7';
        Microsoft.Dynamics.AX.Metadata.MetaModel.ModelInfo modelInfo;
        CLRObject modules;
        ClrObject modulesEnumerator;
        str60 moduleName;
        CLRObject moduleModels;
        CLRObject modelEnumerator;
        str60 modelVersion, eBankingModelVersion;
        boolean isModelInstalled;

        modules = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetInstalledModuleNames();
        modulesEnumerator = modules.GetEnumerator();
        while (modulesEnumerator.MoveNext())
        {
            moduleName = modulesEnumerator.get_Current();

            moduleModels = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetModelsInModule(moduleName);
            modelEnumerator = moduleModels.GetEnumerator();
            while (modelEnumerator.MoveNext())
            {
                modelInfo = modelEnumerator.get_Current();
                if (modelInfo.DisplayName == SKSCommonDisplayName)
                {
                    isModelInstalled = true;
                    modelVersion = strfmt('%1.%2.%3.%4',
                                          modelInfo.VersionMajor,
                                          modelInfo.VersionMinor,
                                          modelInfo.VersionBuild,
                                          modelInfo.VersionRevision);

                    if (eBankingModelVersion)
                        break;
                }
                else if (modelInfo.DisplayName == SKSeBankingDisplayName)
                {
                    eBankingModelVersion = strfmt('%1.%2.%3.%4',
                                                  modelInfo.VersionMajor,
                                                  modelInfo.VersionMinor,
                                                  modelInfo.VersionBuild,
                                                  modelInfo.VersionRevision);
                }
            }
        }

        if (isModelInstalled)
        {
            str sksVersion;

            if (eBankingModelVersion)
            {
                sksVersion = eBankingModelVersion;
            }
            else
            {
                sksVersion = SKS_PP_Sys::getSKSVersion();
            }

            if (sksVersion == modelVersion)
            {
                return '';
            }
            else
            {
                return strFmt("@SKS:SKGCommonPkgVerMismatch", sksVersion, modelVersion);
            }
        }

        return "@SKS:SKGCommonPkgNotInstalled";
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateEmailTemplate</Name>
				<Source><![CDATA[
    public static boolean ValidateEmailTemplate(str _template, LanguageId _language)
    {
        SysEmailTable emailTable;
        SysEmailMessageTable message;
        boolean ret = true;

        if(_template != '')
        {
            emailTable = SysEmailTable::find(_template);
            message = SysEmailMessageTable::find(emailTable.EmailId, _language);

            if (!emailTable || !message)
            {
                error(strFmt("@SKS6746", _template, _language));
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserOrganizationAccess</Name>
				<Source><![CDATA[
    public static container getUserOrganizationAccess()
    {
        UserId userId = curUserId();

        CompanyInfo companyInfo;
        OMUserRoleOrganization oMUserRoleOrganization;
        container result;

        while select companyInfo
                exists join oMUserRoleOrganization
                where oMUserRoleOrganization.OMInternalOrganization == companyInfo.RecId
                    && oMUserRoleOrganization.User == userId
        {
            result += [companyInfo.DataArea];
        }

        if (!result)
        {
            // no specific company for user --> all
            while select companyInfo
            {
                result += [companyInfo.DataArea];
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversalDate</Name>
				<Source><![CDATA[
    public static TransDate getReversalDate(TransDate _origDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), boolean _nextAvailablePeriod = false)
    {
        TransDate reversalDate;
        RefRecId fiscalCalendarRecId = Ledger::fiscalCalendar(CompanyInfo::find().RecId);

        if (!global::hasGUI() || _nextAvailablePeriod)
        {
            if(LedgerFiscalCalendar::checkDateIsValid(Ledger::fiscalCalendar(CompanyInfo::find().RecId), _origDate, FiscalPeriodType::Operating, false))
            {
                reversalDate = _origDate;
            }
            else
            {
                FiscalCalendarPeriod oldPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(fiscalCalendarRecId, _origDate);
                FiscalCalendarPeriod openPeriod = LedgerFiscalCalendar::findNextPeriodByClosingPeriodStartDate(fiscalCalendarRecId, oldPeriod.EndDate);
                reversalDate = openPeriod.StartDate;
            }
        }
        else
        {
            Dialog dialog = new Dialog("@SKS3015");
            DialogField dialogField = dialog.addField(extendedTypeStr(TransDate), "@SYS4082848");
            dialogField.value(_origDate);
            dialog.defaultButton(DialogDefaultButton::Cancel);
            dialog.dialogForm().buildDesign().control('OkButton').text("@SYS22850");

            if (dialog.run())
            {
                if(LedgerFiscalCalendar::checkDateIsValid(fiscalCalendarRecId, dialogField.value(), FiscalPeriodType::Operating, false))
                {
                    reversalDate = dialogField.value();
                }
                else
                {
                   throw error(strFmt("@SYS18414", dialogField.value()));
                }
            }
            else
            {
                throw Exception::Break;
            }
        }

        return reversalDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
