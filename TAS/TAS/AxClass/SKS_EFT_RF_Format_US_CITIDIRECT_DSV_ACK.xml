<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_US_CITIDIRECT_DSV_ACK</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_US_CITIDIRECT_DSV_ACK extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    str mTag;
    str mTempCurrentTag;
    str mFileName;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        TextBuffer locTextBuffer;
        str locCurrentDocument;

        int i, j;
        int delimeterPos;
        int startPos,endPos;
    
        //start a new return file
        mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();

        locSKS_EB_FileHub.runFileLoad(_filename);
        locTextBuffer = new TextBuffer();
        locTextBuffer.setText(locSKS_EB_FileHub.fileBody());
        locTextBuffer = this.setCarriageReturns(locTextBuffer);
        locCurrentDocument = strLRTrim(locTextBuffer.getText());
        locTextBuffer = null;
    
        mFilename =_filename;

        for(i = 1; i<strLen(locCurrentDocument); i++)
        {
            j = strScan(locCurrentDocument, '<', i, strLen(locCurrentDocument));

            delimeterPos++;

            if(delimeterPos == 20)
            {
                startPos = j+1;
            }

            if(delimeterPos == 21)
            {
                endPos = j;

                this.processRecord(subStr(locCurrentDocument, startPos, endPos-startPos));

                startPos = 0;
                endPos = 0;
            }

            if(delimeterPos == 54)
            {
                startPos = j+1;
            }

            if(delimeterPos == 55)
            {
                endPos = j;

                this.processRecord2(subStr(locCurrentDocument, startPos, endPos-startPos));

                startPos = j+1;
            }

            if(delimeterPos == 56)
            {
                endPos = j;
                this.processBankRefNum(subStr(locCurrentDocument, startPos, endPos-startPos));
                startPos = j+1;
            }

            if(delimeterPos == 57)
            {
                endPos = j;
                this.setPaymdate(subStr(locCurrentDocument, startPos, endPos-startPos));
                j = strScan(locCurrentDocument, '>', i, strLen(locCurrentDocument));
                delimeterPos = 0;
                endPos = 0;
                delimeterPos = 0;
            }

            if(delimeterPos == 23)
            {
                startPos = j+1;
            }
            if(delimeterPos == 24)
            {
                endPos = j;
                this.setBankAmount(subStr(locCurrentDocument, startPos, endPos-startPos));
                startPos = j+1;
            }

            if(delimeterPos == 25)
            {
                endPos = j;
                this.setBankCurr(subStr(locCurrentDocument, startPos, endPos-startPos));
                startPos = j+1;
            }

            if(delimeterPos == 26)
            {
                endPos = j;
                this.setInExchRate(subStr(locCurrentDocument, startPos, endPos-startPos));
             
                   startPos = j+1;
            }

            if(delimeterPos == 43)
            {
                startPos = j+1;
            }

            if(delimeterPos == 44)
            {
                endPos = j;
                this.setPaymAmount(subStr(locCurrentDocument, startPos, endPos-startPos));
                startPos = j+1;
            }

            if(delimeterPos == 45)
            {
                endPos = j;
                this.setPaymCurr(subStr(locCurrentDocument, startPos, endPos-startPos));
                startPos = j+1;
            }

            i = j;
        }        
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCarriageReturns</Name>
				<Source><![CDATA[
    protected TextBuffer setCarriageReturns(TextBuffer _TextBuffer)
    {
        TextBuffer locTextBuffer;
        locTextBuffer = _TextBuffer;
    
    
        _TextBuffer.Replace('\r\n', '');
        _TextBuffer.Replace('\n\r', '');
        _TextBuffer.Replace('\r \n', '');
        _TextBuffer.Replace('\n \r', '');
        _TextBuffer.Replace('\r', '');
    
        return locTextBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        str rtnval = '';
        int classId;
        boolean rec20Pos = false;
        boolean rec55Pos = false;

        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        TextBuffer locTextBuffer;
        str locCurrentDocument;

        int i, j;
        int delimeterPos;
        int startPos,endPos;
    
        //start a new return file
        mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();

        locSKS_EB_FileHub.runFileLoad(_filename);

        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }

        locTextBuffer = new TextBuffer();
        locTextBuffer.setText(locSKS_EB_FileHub.fileBody());
        locTextBuffer = this.setCarriageReturns(locTextBuffer);
        locCurrentDocument = strLRTrim(locTextBuffer.getText());
        locTextBuffer = null;
    
        mFilename =_filename;

        for(i = 1; i<strLen(locCurrentDocument); i++)
        {
            j = strScan(locCurrentDocument, '<', i, strLen(locCurrentDocument));

            delimeterPos++;

            if(delimeterPos == 20)
            {
                startPos = j+1;
            }

            if(delimeterPos == 21)
            {
                endPos = j;

                if(subStr(locCurrentDocument, startPos, endPos-startPos) != '')
                {
                    rec20Pos = true;
                }

                startPos = 0;
                endPos = 0;
            }

            if(delimeterPos == 54)
            {
                startPos = j+1;
            }

            if(delimeterPos == 56)
            {
                endPos = j;
                j = strScan(locCurrentDocument, '>', i, strLen(locCurrentDocument));
                delimeterPos = 0;
                endPos = 0;
                delimeterPos = 0;
            }

            if(delimeterPos == 55)
            {
                endPos = j;

                if(subStr(locCurrentDocument, startPos, endPos-startPos) != '')
                {
                    rec55Pos = true;
                }

                startPos = j+1;
            }

            i = j;
        }

        if(rec20Pos && rec55Pos)
        {
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {

        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }

        return mSKS_EFT_RF_File;

    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord</Name>
				<Source><![CDATA[
    private void processRecord(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();

        mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
        if(mSKS_EFT_RF_Transaction != null)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
        }

        //Set the Transaction Reference Number
        mSKS_EFT_RF_Transaction.setID(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 35)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord2</Name>
				<Source><![CDATA[
    private void processRecord2(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction.setStatus(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 12));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankRefNum</Name>
				<Source><![CDATA[
    private void processBankRefNum(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction.GetSetBankRefNum(strLRTrim(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 16)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File locSKS_EFTAP_File = null)
    {
        ;

        return int642str(locSKS_EFTAP_File.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        str rtnval;
        ;
    
        rtnval = _SKS_EFT_FileDetail.PaymentReference;
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymdate</Name>
				<Source><![CDATA[
    protected void setPaymdate(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction.GetSetPaymentDate(str2Date(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 10),213));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankAmount</Name>
				<Source><![CDATA[
    protected void setBankAmount(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction.GetSetBankAmount(str2Num(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 13)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankCurr</Name>
				<Source><![CDATA[
    protected void setBankCurr(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction.GetSetBankCurr(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 3));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymAmount</Name>
				<Source><![CDATA[
    protected void setPaymAmount(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction.GetSetPaymAmt(str2Num(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 13)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymCurr</Name>
				<Source><![CDATA[
    protected void setPaymCurr(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction.GetSetPaymCurr(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 3));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInExchRate</Name>
				<Source><![CDATA[
    protected void setInExchRate(str _CurrentRecord)
    {
        mSKS_EFT_RF_Transaction.GetSetInExchRate(SKS_PP_StringFormats::strSub(_CurrentRecord, 1, 10));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>