<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_XRC_BR_RemoveImportedMatchByRecid</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_XRC_BR_RemoveImportedMatchByRecid
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class with the specified arguments.
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        if (Box::okCancel("@SKS:SKGXRCWarning", DialogButton::Cancel, '') == DialogButton::Cancel)
        {
            return;
        }

        Dialog locDialog;
        DialogField locDialogField;
        SKS_BR_BankTran locSKS_BR_BankTran;
        BankAccountStatement locBankAccountStatement;
        RefRecId locRefRecId;
        
        locDialog = new Dialog("@SKS:SKGXRCBRRemoveMatchImport");
        locDialog.addText(strFmt("@SKS:SKGXRCBRImportTransRecId"));
        locDialogField = locDialog.addField(extendedTypeStr(RefRecId), "@SKS:SKGRecordId");

        if(locDialog.run() == 0)
            return;
        try
        {

            locRefRecId = locDialogField.value();

            if(locRefRecId == 0)
                throw Exception::Error;
            select forupdate crosscompany locSKS_BR_BankTran
                  where locSKS_BR_BankTran.Recid == locRefRecId;

            if(!locSKS_BR_BankTran)
            {
                error("@SKS:SKGXRCBRImportedTransNotFound");
                return;
            }

            if(locSKS_BR_BankTran.AccountId != '' && locSKS_BR_BankTran.AccountStatementDate != dateNull() && locSKS_BR_BankTran.AccountStatementNum != '')
            {
                changecompany(locSKS_BR_BankTran.company())
                {
                    locBankAccountStatement = null;
                    Select locBankAccountStatement
                        where locBankAccountStatement.AccountId == locSKS_BR_BankTran.AccountId
                            && locBankAccountStatement.AccountStatementDate == locSKS_BR_BankTran.AccountStatementDate
                            && locBankAccountStatement.AccountStatementNum  == locSKS_BR_BankTran.AccountStatementNum
                            && locBankAccountStatement.ReconcileDate != dateNull();

                    if(locBankAccountStatement)
                    {
                        Error("@SKS:SKGXRCBRTransactionReconciled");
                        return;
                    }
                }
            }

            if(locSKS_BR_BankTran)
            {
                changecompany(locSKS_BR_BankTran.company())
                {
                    ttsbegin;
                    if(locSKS_BR_BankTran.ManualReconciliationID == emptyGuid())
                    {
                        locSKS_BR_BankTran.ManualReconciliationID = newGuid();
                        locSKS_BR_BankTran.update();
                    }
                    ttscommit;
                    
                    locSKS_BR_BankTran = null;
                    select ManualReconciliationID from locSKS_BR_BankTran where locSKS_BR_BankTran.Recid == locRefRecId;
                    SKS_BR_Matching::removeGuidMatch(locSKS_BR_BankTran.ManualReconciliationID);

                    info("@SKS:SKGXRCBRTransactionAvailable");
                }
            }

        }
        catch
        {

            error(strFmt("@SKS:SKGXRCBRInvalidRecId", locDialogField.value()));
            return;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>