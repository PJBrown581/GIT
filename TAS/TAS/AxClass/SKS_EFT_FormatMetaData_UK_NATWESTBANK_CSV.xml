<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_UK_NATWESTBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_UK_NATWESTBANK_CSV Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_UK_NATWESTBANK_CSV Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220721';
        dataContractVersion = '1.0';
        conFormatID = ['UK-NATWESTBANK-CSV'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'UK - NatWest Bank - Comma Separated',0,'','','UK-NATWESTBANK-CSV',1,'','','','','','','','',0,0,'00:00.0',0,'00:00.0',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'UK-NATWESTBANK-CSV',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('UK-NATWESTBANK-CSV'):
                paymSpecList = this.getPaymSpecsMetaData_UK_NATWESTBANK_CSV();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_UK_NATWESTBANK_CSV</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_UK_NATWESTBANK_CSV()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Standard domestic payment',1,'DOM-STD','','DOM-STD','TRADE PAY',0,'UK-NATWESTBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Standard domestic payment from a template',1,'DOM-TEMP','','DOM-TEMP','TRADE PAY',0,'UK-NATWESTBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Urgent domestic payment (CHAPS)',1,'DOM-URGP','','DOM-URGP','TRADE PAY',0,'UK-NATWESTBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Standard domestic bulk list',1,'BULK-LIST','','BULK-LIST','TRADE PAY',0,'UK-NATWESTBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Standard domestic bulk payment',1,'BULK-PAY','','BULK-PAY','TRADE PAY',0,'UK-NATWESTBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Inter Account Transfer (IAT) bulk list',1,'IAT-B-LIST','','IAT-B-LIST','TRADE PAY',0,'UK-NATWESTBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International payment - Urgent',1,'INTL-URGP','','INTL-URGP','TRADE PAY',0,'UK-NATWESTBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International payment - Normal',1,'INTL-NORM','','INTL-NORM','TRADE PAY',0,'UK-NATWESTBANK-CSV',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,2,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('UK-NATWESTBANK-CSV'):
                notesList = this.getNotesMetaData_UK_NATWESTBANK_CSV();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_UK_NATWESTBANK_CSV</Name>
				<Source><![CDATA[
    private container getNotesMetaData_UK_NATWESTBANK_CSV()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWESTBANK-CSV','DOM-STD','']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWESTBANK-CSV','DOM-TEMP','']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWESTBANK-CSV','DOM-URGP','-Vendor Bank Account fields:--Either Routing number and bank account number or SWIFT code and IBAN are required based on the Routing number type. If Routing number type is \'SC\' then Routing number and bank account number will take print.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','-Allows Vendor bank debit.::-Debit:--This format uses Code lookups. Review the following:-EFT+ file formats > Payment specifications > Code lookup fields tab.:-Vendor ebanking details > Payment specifications > Additional fields.::-Credit:-Vendor Bank Account fields:--Either Routing number and bank account number or SWIFT code and IBAN are required based on the Routing number type. If Routing number type is \'SC\' then Routing number and bank account number will take print.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','-Allows Vendor bank debit.::-Credit:-Vendor Bank Account fields:--Either Routing number and bank account number or SWIFT code and IBAN are required based on the Routing number type. If Routing number type is \'SC\' then Routing number and bank account number will take print.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWESTBANK-CSV','IAT-B-LIST','-Allows Vendor bank debit.::-Debit:--This format uses Code lookups. Review the following:-EFT+ file formats > Payment specifications > Code lookup fields tab.:-Vendor ebanking details > Payment specifications > Additional fields.::-Credit:-Vendor Bank Account fields:--Either Routing number and bank account number or SWIFT code and IBAN are required based on the Routing number type. If Routing number type is \'SC\' then Routing number and bank account number will take print.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','-This format uses Code lookups. Review the following:-EFT+ file formats > Payment specifications > Code lookup fields tab.:-Vendor ebanking details > Payment specifications > Additional fields.::-Cash and bank management module > Bank Account:--If Debit account is the UK Sterling account then Bank sort code and Bank account numbers are required.:--Otherwise bank account number is required.::-Vendor Bank Account fields:--Either Routing number and bank account number or SWIFT code and IBAN are required based on the Routing number type. If Routing number type is \'SC\' then Routing number and bank account number will take print.These details are optional for SEPA payments.::-Normal or Urgent International payments will be decided based on the priority.If priority is \'U\' then payment is International Urgent Payment or if priority is \'N\' then payment is International Normal Payment.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','-This format uses Code lookups. Review the following:-EFT+ file formats > Payment specifications > Code lookup fields tab.:-Vendor ebanking details > Payment specifications > Additional fields.::-Cash and bank management module > Bank Account:--If Debit account is the UK Sterling account then Bank sort code and Bank account numbers are required.:--Otherwise bank account number is required.::-Vendor Bank Account fields:--Either Routing number and bank account number or SWIFT code and IBAN are required based on the Routing number type. If Routing number type is \'SC\' then Routing number and bank account number will take print.These details are optional for SEPA payments.::-Normal or Urgent International payments will be decided based on the priority.If priority is \'U\' then payment is International Urgent Payment or if priority is \'N\' then payment is International Normal Payment.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('UK-NATWESTBANK-CSV'):
                validationsList = this.getValidationsMetaData_UK_NATWESTBANK_CSV();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_UK_NATWESTBANK_CSV</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_UK_NATWESTBANK_CSV()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-STD','','Sort code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Sort code','T010 Debit account identifier','Debit account identifier',0,'BankSortCode','','',0,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-STD','','Bank Account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','T010 Debit account identifier','Debit account identifier',0,'AccountNum','','',0,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-STD','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','T022 Account with bank identifier','Account with bank identifier','9','RegistrationNum','','',0,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-STD','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','T030 Beneficiary name','Beneficiary name','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-TEMP','','Sort code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Sort code','T010 Debit account identifier','Debit account identifier',0,'BankSortCode','','',0,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-TEMP','','Bank Account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','T010 Debit account identifier','Debit account identifier',0,'AccountNum','','',0,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-TEMP','','Payment description','Accounts payable > Payments > Payment journal > Description','T003 Template reference','Template reference','13','Txt','','',1,0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-URGP','','Sort code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Sort code','T010 Debit account identifier','Debit account identifier',0,'BankSortCode','','',0,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-URGP','','Bank Account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','T010 Debit account identifier','Debit account identifier',0,'AccountNum','','',0,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-URGP','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','T022 Account with bank identifier','Account with bank identifier','9','RegistrationNum','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-URGP','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','T022 Account with bank identifier','Account with bank identifier','9','SWIFTNo','','',1,0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-URGP','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','T022 Account with bank identifier','T022','9','BankIBAN','','',1,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-URGP','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','T022 Account with bank identifier','Account with bank identifier','9','AccountNum','','',1,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','DOM-URGP','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','T030 Beneficiary name','Beneficiary name','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','','Sort code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Sort code','T010 Debit account identifier','Debit account identifier',0,'BankSortCode','','',0,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','','Bank Account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','T010 Debit account identifier','Debit account identifier',0,'AccountNum','','',0,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','','Payment description','Accounts payable > Payments > Payment journal > Description','T003 Template reference','Template reference','13','Txt','','',1,0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','T022 Account with bank identifier','Account with bank identifier','9','RegistrationNum','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','T022 Account with bank identifier','Account with bank identifier','9','SWIFTNo','','',1,0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','T022 Account with bank identifier','T022','9','BankIBAN','','',1,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','T022 Account with bank identifier','Account with bank identifier','9','AccountNum','','',1,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-LIST','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','T030 Beneficiary name','Beneficiary name','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','','Sort code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Sort code','T010 Debit account identifier','Debit account identifier',0,'BankSortCode','','',0,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','','Bank Account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','T010 Debit account identifier','Debit account identifier',0,'AccountNum','','',0,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','','Payment description','Accounts payable > Payments > Payment journal > Description','T003 Template reference','Template reference','13','Txt','','',1,0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','T022 Account with bank identifier','Account with bank identifier','9','RegistrationNum','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','T022 Account with bank identifier','Account with bank identifier','9','SWIFTNo','','',1,0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','T022 Account with bank identifier','T022','9','BankIBAN','','',1,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','T022 Account with bank identifier','Account with bank identifier','9','AccountNum','','',1,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','BULK-PAY','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','T030 Beneficiary name','Beneficiary name','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','IAT-B-LIST','','Sort code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Sort code','T010 Debit account identifier','Debit account identifier',0,'BankSortCode','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','IAT-B-LIST','','Bank Account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','T010 Debit account identifier','Debit account identifier',0,'AccountNum','','',0,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','IAT-B-LIST','','Payment description','Accounts payable > Payments > Payment journal > Description','T003 Template reference','Template reference','13','Txt','','',1,0,1,'20',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','IAT-B-LIST','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','T022 Account with bank identifier','Account with bank identifier','9','RegistrationNum','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','IAT-B-LIST','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','T022 Account with bank identifier','Account with bank identifier','9','SWIFTNo','','',1,0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','IAT-B-LIST','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','T022 Account with bank identifier','T022','9','BankIBAN','','',1,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','IAT-B-LIST','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','T022 Account with bank identifier','Account with bank identifier','9','AccountNum','','',1,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','Sort code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Sort code','T010 Debit account identifier','Debit account identifier',0,'BankSortCode','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','Bank Account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','T010 Debit account identifier','Debit account identifier',0,'AccountNum','','',0,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','T022 Account with bank identifier','Account with bank identifier','9','RegistrationNum','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','T022 Account with bank identifier','Account with bank identifier','9','SWIFTNo','','',1,0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','T022 Account with bank identifier','T022','9','BankIBAN','','',1,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','T022 Account with bank identifier','Account with bank identifier','9','AccountNum','','',1,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','T030 Beneficiary name','Beneficiary name','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','T031 Beneficiary name and address line number 2','Beneficiary address line number 2','16','WBeneAddr','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-URGP','','City ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','T032 Beneficiary name and address line number 3','Beneficiary address line number 3','16','WBeneCity','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','Sort code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Sort code','T010 Debit account identifier','Debit account identifier',0,'BankSortCode','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','Bank Account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','T010 Debit account identifier','Debit account identifier',0,'AccountNum','','',0,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','T022 Account with bank identifier','Account with bank identifier','9','RegistrationNum','','',1,1,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','T022 Account with bank identifier','Account with bank identifier','9','SWIFTNo','','',1,0,1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','T022 Account with bank identifier','T022','9','BankIBAN','','',1,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','T022 Account with bank identifier','Account with bank identifier','9','AccountNum','','',1,1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','T030 Beneficiary name','Beneficiary name','16','WBeneName','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','T031 Beneficiary name and address line number 2','Beneficiary address line number 2','16','WBeneAddr','','',0,0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWESTBANK-CSV','INTL-NORM','','City ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','T032 Beneficiary name and address line number 3','Beneficiary address line number 3','16','WBeneCity','','',0,0,1,'35',0,0]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['UK-NATWESTBANK-CSV','ChrgBr','Charges Code type']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['UK-NATWESTBANK-CSV','ConfIndicator','Confidential indicator']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWESTBANK-CSV','ChrgBr','Remitter to pay all charges','OUR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWESTBANK-CSV','ChrgBr','Beneficiary to pay all charges','BEN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWESTBANK-CSV','ChrgBr','Remitter to pay debit charges and beneficiary to pay credit charges','SHA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWESTBANK-CSV','ConfIndicator','Confidential','Y']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWESTBANK-CSV','ConfIndicator','Not confidential','N']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('UK-NATWESTBANK-CSV'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_UK_NATWESTBANK_CSV();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_UK_NATWESTBANK_CSV</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_UK_NATWESTBANK_CSV()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWESTBANK-CSV','UK-NATWESTBANK-CSV','BULK-LIST','ConfIndicator','Confidential indicator',0,'ConfIndicator','Not confidential',1,'','','T004 > Confidential Indicator']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWESTBANK-CSV','UK-NATWESTBANK-CSV','IAT-B-LIST','ConfIndicator','Confidential indicator',0,'ConfIndicator','Not confidential',1,'','','T004 > Confidential Indicator']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWESTBANK-CSV','UK-NATWESTBANK-CSV','INTL-URGP','ChrgBr','Charges Code type',0,'ChrgBr','',0,'','XXX','T012 > Charges Code type']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWESTBANK-CSV','UK-NATWESTBANK-CSV','INTL-NORM','ChrgBr','Charges Code type',0,'ChrgBr','',0,'','XXX','T012 > Charges Code type']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['UK-NATWESTBANK-CSV','UK-NATWESTBANK-CSV','FormatValidations','*','3','Txt']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['UK-NATWESTBANK-CSV','UK-NATWESTBANK-CSV','FormatValidations','*','15','W01']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch(_formatID)
        {
            case ('UK-NATWESTBANK-CSV'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_UK_NATWESTBANK_CSV();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_UK_NATWESTBANK_CSV</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_UK_NATWESTBANK_CSV()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWESTBANK-CSV','UK-NATWESTBANK-CSV','IBANDebitAccnt','IBAN Debit account Y/N',1,'IBANDebitAccnt','',0,'','XXXXXXXXXXXXXXX','T010 Debit account identifier']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        if(gSKS_EFT_Bank.W01)
        {
            this.updateBankFields('IBANDebitAccnt', gSKS_EFT_Bank.W01);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>