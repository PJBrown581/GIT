<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_NATWEST_AUTOPAY_BACS_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_NATWEST_AUTOPAY_BACS_AR extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_NATWEST_AUTOPAY_BACS_AR extends SKS_EFT_Format
{
    #define.FormatVersion('20230123')
    #define.Separator(',')
    #define.Doublequotes('"')

    CustDirectDebitMandate  custDirectDebitMandate;         //SKS#DevOps:14953

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// formatStructure
    /// </summary>
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            this.rec_Payment();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Payment
    /// </summary>
    /// <returns>true or false</returns>
    boolean rec_Payment()
    {
        //Sort Code
        //Account Number
        //Amount
        //Customer Number
        //Customer Name
        //Collection Number

        str value;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //Sort Code
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));

        //Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));

        //Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0)));

        //Mandate Id
        sb.Append(this.wrapField(msks_EFT_FileDetail_Mandate.MandateReference));//SDevOps21128

        //Customer Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName)));

        //Collection Number      
        if(msks_EFT_FileDetail_Mandate.MandateSequenceType == 'FRST')
           
        {
            value = '01';
        }
        else
        {
            value = '17';
        }
        sb.Append(this.wrapField(this.CharacterReplacement(value), false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    /// <summary>
    /// wrapField
    /// </summary>
    /// <param name = "_field">_field</param>
    /// <param name = "_addSeparator">_addSeparator</param>
    /// <returns>str</returns>
    private str wrapField(str _field = '',  boolean _addSeparator = true)
    {
        str text;

        text = _field;

        if(_addSeparator)
        {
            if(strContains(text, ','))
            {
                text = #Doublequotes + text + #Doublequotes + #Separator;
            }
            else
            {
                text += #Separator;
            }
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// selectPaymentRecords
    /// </summary>
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join msks_EFT_FileDetail_Mandate
            join mSKS_EFT_FileDetail_BankAccount
          order by msks_EFT_FileDetail_Mandate.MandateSequenceType,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msks_EFT_FileDetail_Mandate.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>