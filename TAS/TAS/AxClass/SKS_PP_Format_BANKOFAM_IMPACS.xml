<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BANKOFAM_IMPACS</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_BANKOFAM_IMPACS Extends SKS_PP_Format_BankGroup
{
    // Bank of America - IMPACS/HOGAN Accounts Format
    
        // Pos 1-12      12      Account Number RJ-LZF
        // Pos 13-13     1       Void Indicator, 'V'=Void, 'O'-Outstanding
        // Pos 14-23     10      Serial Number - Check Number, RJ-LZF
        // Pos 24-35     12      Amount - RJ-LZF
        // Pos 36-43     8       Issue Date - (YYYYMMDD)
        // Pos 44-44     1       Space
    
    // Pos 45-94     50      Additional Data - Payee Name
        // Pos 95-110    16      spaces
    str vendorName;
    int vendorLength;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        // RecType: (within Payments)
        // 10V - Voucher
        // 20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
    
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        Str Amt;
        Str ItemType;
        Int Mult;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        // Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            if (mSKS_PP_FileDetail.chkcuryamt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = 'O';
        }
    
    
        // Always use the Record Summary Amount - will have correct total for the Check
        Amt = SKS_PP_StringFormats::strMoney(mSKS_PP_FileDetail.ChkCuryAmt, 12);//  Now remove decimal point - 10 Long Right Justified, LZF
    
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        this.getVendName(mSKS_PP_FileDetail);
        sb.Append(SKS_PP_StringFormats::strFill(vendorLength, vendorName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendName</Name>
				<Source><![CDATA[
    public void getVendName(SKS_PP_FileDetail _SKS_PP_FileDetail)
    {
        vendorlength = 50;
        vendorName = _SKS_PP_FileDetail.vendName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>