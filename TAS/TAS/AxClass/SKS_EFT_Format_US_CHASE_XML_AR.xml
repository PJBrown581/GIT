<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_XML_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_XML_AR extends ISO classes
/// </summary>
class SKS_EFT_Format_US_CHASE_XML_AR extends SKS_EFT_Format_ISO_20022_00800102
{
    #define.FormatVersion('20220106')
    #define.GACH('GACH')
    #define.ACH_CCD('ACH-CCD')
    #define.ACH_CCP('ACH-CCP')
    #define.ACH_CTX('ACH-CTX')
    #define.ACH_PPD('ACH-PPD')
    #define.ACH_PPP('ACH-PPP')

    LogisticsPostalAddress  postalAddress;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        select InvoiceNumber from invSKS_EFT_FileDetail
        where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
           && invSKS_EFT_FileDetail.InvoiceNumber != '';

        while(invSKS_EFT_FileDetail)
        {
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);

            next invSKS_EFT_FileDetail;

            if(invSKS_EFT_FileDetail)
            {
                sb.Append(', ');
            }
        }

        return this.CharacterReplacement(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoveBOM</Name>
				<Source><![CDATA[
    protected boolean getRemoveBOM()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_Dbtr(XmlElement _node_DrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeDbtr;

        //          2.72: Dbtr
        nodeDbtr = _node_DrctDbtTxInf.appendChild(xmlDoc.createElement('Dbtr'));

        //              Nm
        this.node_DrctDbtTxInf_Dbtr_Nm(nodeDbtr);

        //           PstlAdr
        this.node_DrctDbtTxInf_Dbtr_PstlAdr(nodeDbtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        int length;

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCP ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CTX ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPD ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPP)
        {
            length = 22;
        }
        else
        {
            length = 30;
        }

        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), length, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Debtor Postal Address
    /// </summary>
    /// <param name = "_nodeDbtr">nodeDbtr</param>
    protected void node_DrctDbtTxInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.72: Dbtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;

        if(mSKS_EFT_FileDetail.AccountNum && mSKS_EFT_FileDetail.AccountType == LedgerJournalACType::Cust)
        {
            postalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct Debit');

            if(postalAddress)
            {
                if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
                {
                    address = this.addressSplit(postalAddress.Street);
                    addressBldgNb = conpeek(address,1);
                    addressStrtNm = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = postalAddress.Street;
                }
                this.node_PstlAdr_Structured(_nodeDbtr, postalAddress.CountryRegionId, strRem(strRem(addressStrtNm, '\r'), '\n'), postalAddress.ZipCode, postalAddress.City, 35, strRem(strRem(addressBldgNb, '\r'), '\n'), postalAddress.State);   //SKS#DevOps:17047
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_DbtrAcct(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.73: DbtrAcct
        //              Id
        //                  Othr
        //                      Id
        //              Tp
        //              Nm
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeDbtrAcctTp;
        str        value;
        int        length;

        if(mSKS_EFT_FileDetail.DepBankAcct)
        {
            //          2.73: DbtrAcct
            nodeDbtrAcct = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DbtrAcct'));

            //              Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));

            //                  Othr
            nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCP ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CTX ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPP)
            {
                length = 17;
            }
            else
            {
                length = 12;
            }

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct, length);

            //              Tp
            //                  Cd/Ptry
            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                value = 'SVGS';
            }
            else
            {
                value = 'CASH';
            }

            nodeDbtrAcctTp = nodeDbtrAcct.appendChild(xmlDoc.createElement('Tp'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', value);

            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_DbtrAgt(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.70: DbtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        CustBankAccount lCustBankAccount;

        if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            //          2.77: DbtrAgt
            nodeDbtrAgt = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DbtrAgt'));

            //              FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            //                  ClrSysMmbId
            nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCP ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CTX ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPD ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPP)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'USABA');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'CACPA');
            }

            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 9);

            lCustBankAccount = CustBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum,  mSKS_EFT_FileDetail.DepBankAccountId);

            this.node_PstlAdr(nodeFinInstnId, this.getLogisticsAddressCountryISO(LogisticsPostalAddress::findByLocation(lCustBankAccount.Location).CountryRegionId), '', '', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    /// <summary>
    /// RmtInf Ustrd method
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">RmtInf_Ustrd</param>
    protected void node_DrctDbtTxInf_RmtInf_Ustrd(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers;
        int length;

        invNumbers = this.getInvoiceNbrs();
        if(invNumbers)
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_CCP || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH_PPP)
            {
                length = 71;
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #GACH)
            {
                length = 15;
            }
            else
            {
                length = 140;
            }

            //          2.98: RmtInf
            nodeRmtInf = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, length);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_DrctDbtTxInf_RmtInf(XmlElement _nodeDrctDbtTxInf)
    {
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CTX:
                this.node_DrctDbtTxInf_RmtInf_Strd(_nodeDrctDbtTxInf);
                break;
            default:
                this.node_DrctDbtTxInf_RmtInf_Ustrd(_nodeDrctDbtTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    /// <summary>
    /// RmtInf_Strd
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">RmtInf_Strd</param>
    protected void node_DrctDbtTxInf_RmtInf_Strd(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.88: RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocAmt;
        Boolean firstRec = true;
    
        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber != '')
            {
                if(firstRec)
                {
                    //          2.88: RmtInf
                    nodeRmtInf = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
    
                //              2.9: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
    
                //              2.91: RfrdDocInf
                this.node_DrctDbtTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);
    
                //              2.99 RfrdDocAmt
                nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
                this.node_DrctDbtTxInf_RmtInf_RfrdDocAmt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    private void node_DrctDbtTxInf_RmtInf_RfrdDocInf(XmlElement _nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.101: RfrdDocInf
        //                  2.102: Tp
        //                      2.103: CdOrPrtry
        //                          2.104: Cd
        //                  2.107: Number
        //                  2.108: RltdDt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        
        //              2.101: RfrdDocInf
        nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
        //                  2.102: Tp
        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
        //                      2.103: CdOrPrtry
        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
        //                          2.104: Cd
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');

            //                  2.107: Number
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

            //                  2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');

            //                  2.107: Number
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));

            //                  2.108: RltdDt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_RmtInf_RfrdDocAmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// RfrdDocAmt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">RfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    protected void node_DrctDbtTxInf_RmtInf_RfrdDocAmt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              2.43: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;
        AmountMST   TaxAmt = 0;

        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            CreditNote = 0;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            //      2.110
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DuePyblAmt', num2str(gross * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      2.111
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'DscntApldAmt', num2str(_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

        }

        if(Remitted != 0)
        {
            //      TaxAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'TaxAmt', num2str(TaxAmt,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
            
            //      TaxAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'TaxAmt', num2str(TaxAmt,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                    BkPtyId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str value;

        value = SKS_EFT_Format::getCodelookupvalue('InitgPtyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

        if(value != '')
        {
            //          Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

            //                  Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                        Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', this.CharacterReplacement(value), 35);

            //                      9.1.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));

            //                          9.1.1.18: Code
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BANK');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.15: Cdtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;

        //      2.15: Cdtr
        nodeCdtr = nodePmtInf.appendChild(xmlDoc.createElement('Cdtr'));

        //          Nm
        this.node_PmtInf_Cdtr_Nm(nodeCdtr);

        //           PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);

        //SKS_VSTS_13558 -->
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_PPD:
            case #ACH_CTX:
                //          Id
                this.node_PmtInf_Cdtr_Id(nodeCdtr);
                break;
        }
        //SKS_VSTS_13558 <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cdtr_Nm
    /// </summary>
    /// <param name = "_nodeCdtr">Cdtr_Nm</param>
    protected void node_PmtInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Nm
        //------------------------------------------------------------------------------------------------------

        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creditor postal address
    /// </summary>
    /// <param name = "_nodeCdtr">Cdtr_PstlAdr</param>
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;

        postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Direct Debit');

        if(postalAddress)
        {
            if(strScan(postalAddress.Street, ';', 1, strLen(postalAddress.Street)))
            {
                address = this.addressSplit(postalAddress.Street);
                addressBldgNb = conpeek(address,1);
                addressStrtNm = conpeek(address,2);
            }
            else
            {
                addressStrtNm = postalAddress.Street;
            }
            this.node_PstlAdr(_nodeCdtr, postalAddress.CountryRegionId,  strRem(strRem(addressStrtNm, '\r'), '\n'), postalAddress.ZipCode, postalAddress.City, 35, addressBldgNb, postalAddress.State, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cdtr_Id
    /// </summary>
    /// <param name = "_nodeCdtr">Cdtr_Id</param>
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)//SKS_VSTS_13558
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeId;
        XmlElement nodeOrgPvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;

        
        //          Id
        nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

        nodeOrgPvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));

        nodeOthr = nodeOrgPvtId.appendChild(xmlDoc.createElement('Othr'));

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.FileACHCompanyId, 35);

        nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', 'JPMCOID');
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_CdtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: CdtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeCdtrAcctTp;

        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            //      2.20: CdtrAcct
            nodeCdtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAcct'));

            //          Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            //              Othr
            nodeOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct, 34);

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACH_CCD &&
                mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACH_PPD &&
                mSKS_EFT_FileFormatPaymSpec.TransactionCode != #ACH_CTX)//SKS_VSTS_13558
            {
                if(mSKS_EFT_FileDetail.FileACHCompanyId)
                {
                    //          Tp
                    nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));

                    //              Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Prtry', mSKS_EFT_FileDetail.FileACHCompanyId, 35);
                }
            }
            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcct, 'Ccy', mBankAccountTable.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_CdtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.17: CdtrAgt
        //               FinInstnId
        //                     CmbndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        XmlElement nodePstlAdr;
    
    
        //      2.21: CdtrAgt
        nodeCdtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //          FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(mBankAccountTable.SWIFTNo != '')
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mBankAccountTable.SWIFTNo);
        }
        else
        {
            //                  ClrSysMmbId
            nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
            nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', 'USABA');
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, 9);
        }
    
        //              PstlAdr
        nodePstlAdr = nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));
    
        //                  Ctry
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(postalAddress.CountryRegionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH_CCD:
            case #ACH_CCP:
                value = 'CCD';
                break;
            case #ACH_PPD:
            case #ACH_PPP:
                value = 'PPD';
                break;
            case #ACH_CTX:
                value = 'CTX';
                break;
        }
        if(value)
        {
            //              2.11: LclInstrm
            nodeLclInstrm = nodePmtTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;

        //          SvcLvl
        nodeSvcLvl = _nodePmtInf.appendChild(xmlDoc.createElement('SvcLvl'));

        //              Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', 'NURG');        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>