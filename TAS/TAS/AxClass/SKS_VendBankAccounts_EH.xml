<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_VendBankAccounts_EH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handler for VendBankAccounts form
/// </summary>
class SKS_VendBankAccounts_EH
{   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>eBankingRecButton_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Click of eBanking Record button
    /// </summary>
    /// <param name="sender">form</param>
    /// <param name="e">event</param>
    [SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature'),
        SuppressBPWarningAttribute('BPUpgradeCodeLateBoundCall', 'Required method call'),
     FormControlEventHandler(formControlStr(VendBankAccounts, eBankingRecButton), FormControlEventType::Clicked)]
    public static void eBankingRecButton_OnClicked(FormControl sender, FormControlEventArgs e)
    {             
        FormButtonControl  callerButton = sender as FormButtonControl;
        FormRun form = callerButton.formRun(); 
        FormDataSource  vendBankAccount_ds = form.dataSource(formDataSourceStr(VendBankAccounts, VendBankAccount)) as FormDataSource;
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();        
        VendAccount vendAccount = vendBankAccount.VendAccount;
        
        DataAreaId  vendCompany = curExt();
        DataAreaId  legalCompany = curExt();
        boolean     processFlag = true;

        MenuFunction    menuFunction;        
        Args            args = new Args();

        // check for multiple vendors with same account in different comapnies
        
        int64               vendCount = 0;
        SKS_EB_VendBankTmp  sks_EB_VendBankTmp;
          
        sks_EB_VendBankTmp = SKS_VendBankAccounts_EH::getMatchingVendors(vendAccount);
        select count(RecId) from sks_EB_VendBankTmp;
        vendCount = sks_EB_VendBankTmp.RecId;

        if(vendCount > 1)
        {
            // check if there are multiple vendors with same party id           
             
            // open form
            Args                            argsLoc;
            Object                          formRun;

            // open form
            argsLoc = new Args();
            argsLoc.parm(vendBankAccount.VendAccount);
            argsLoc.name(formstr(SKS_EB_MultipleVendorDetails));
            formRun = classfactory.formRunClass(argsLoc);
            formRun.init(sks_EB_VendBankTmp);
            formRun.run();
            formRun.wait();

            if( formrun.closedOk() )
            {   
                sks_EB_VendBankTmp = argsLoc.record();

                vendCompany = sks_EB_VendBankTmp.VendCompany;
                legalCompany = sks_EB_VendBankTmp.LegalCompany;
            }
            else
            {
                processFlag = false;
            }
        }

        // open Vendor eBanking form     
        if(processFlag)
        {            
            changecompany(legalCompany)
            {
                SKS_EB_Vendor   sks_EB_Vendor;
                boolean         eBAnkingVendorNotFound = false;

                sks_EB_Vendor = SKS_EB_Vendor::find(vendCompany, vendAccount);

                // if no record found, display msg to ask if user wants to create one
                if(!sks_EB_Vendor)
                {   
                    if(Box::yesNo("@SKS:SKS_NoRecordExists",dialogButton::Yes) == dialogButton::Yes)
                    {
                        changecompany(vendCompany)
                        {
                            // create Vendor eBanking record
                            VendTable vendTable = VendTable::find(vendAccount);
                            SKS_EFT_Setup sks_EFT_Setup = SKS_EFT_Setup::find();
                            boolean setupEmail = false;                                                       
                            
                            // If payment spec has e-mail On and setup has e-mail On
                            if(sks_EFT_Setup.ModAPEmail)
                            {
                                setupEmail = true;
                            }

                            SKS_EFT_VendorLoad::CreateVendorRecord(vendTable, sks_EFT_Setup, true, true, setupEmail);
                            sks_EB_Vendor = SKS_EB_Vendor::find(vendCompany, vendAccount);
                        }
                    }
                    else
                    {
                        eBAnkingVendorNotFound = true;                        
                    }
                }
                // display Vendor eBanking record form
                if(!eBAnkingVendorNotFound)
                {
                    args.record(sks_EB_Vendor);

                    menuFunction = new MenuFunction(menuitemDisplayStr(SKS_EFT_VendorDetails), MenuItemType::Display);

                    if (menuFunction && menuFunction.checkAccessRights())
                    {
                        menuFunction.run(args);                        
                    }
                } // if(!eBAnkingVendorNotFound)
            } // changeCompany
        } // if(processFlag)

    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingVendors1</Name>
				<Source><![CDATA[
    /// <summary>
    /// return matching records in temp table
    /// </summary>
    /// <param name = "_vendAccount">The vendor account you for which you seed the SKS_EB_VendBankTemp record</param>
    /// <returns>Returns the SKS_EB_VendBankTemp revord for the VendAccount Param supplied</returns>
    public static SKS_EB_VendBankTmp getMatchingVendors1(VendAccount _vendAccount)
    {
        SKS_EB_VendBankTmp  sks_EB_VendBankTmpLoc;
        SKS_EB_Vendor       sks_EB_Vendor;
        DirPartyRecId       origParty = VendTable::findByCompany(curExt(), _vendAccount).Party;
        
        while select crosscompany sks_EB_Vendor
            where sks_EB_Vendor.VendAccount == _vendAccount
        {
            if(VendTable::findByCompany(sks_EB_Vendor.VendCompany, sks_EB_Vendor.VendAccount).Party == origParty)
            {
                sks_EB_VendBankTmpLoc.LegalCompany = sks_EB_Vendor.DataAreaId;
                sks_EB_VendBankTmpLoc.VendCompany = sks_EB_Vendor.VendCompany;
                sks_EB_VendBankTmpLoc.VendAccount = sks_EB_Vendor.VendAccount;
            
                sks_EB_VendBankTmpLoc.insert();
            }
        }
        
        return sks_EB_VendBankTmpLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingVendors</Name>
				<Source><![CDATA[
    public static SKS_EB_VendBankTmp getMatchingVendors(VendAccount _vendAccount)
    {
        SKS_EB_VendBankTmp      sks_EB_VendBankTmpLoc;
        SKS_EB_Vendor           sks_EB_Vendor;       
        DirPartyView            dirPartyView;

        DirPartyRecId       origParty = VendTable::findByCompany(curExt(), _vendAccount).Party;
        
        while select crosscompany sks_EB_Vendor
                where sks_EB_Vendor.VendAccount == _vendAccount            
            join dirPartyView
                group by sks_EB_Vendor.DataAreaId, sks_EB_Vendor.VendCompany, sks_EB_Vendor.VendAccount
                where dirPartyView.Accountnum == sks_EB_Vendor.VendAccount
                    && dirPartyView.DataArea == sks_EB_Vendor.VendCompany
                    && dirPartyView.RoleType == DirPartyRoleType::Vendor
                    && dirPartyView.Party == origParty          
        {           
            sks_EB_VendBankTmpLoc.LegalCompany = sks_EB_Vendor.DataAreaId;
            sks_EB_VendBankTmpLoc.VendCompany = sks_EB_Vendor.VendCompany;
            sks_EB_VendBankTmpLoc.VendAccount = sks_EB_Vendor.VendAccount;
            
            sks_EB_VendBankTmpLoc.insert();            
        }
        
        return sks_EB_VendBankTmpLoc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>