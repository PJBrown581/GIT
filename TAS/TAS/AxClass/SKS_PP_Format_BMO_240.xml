<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_BMO_240</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_BMO_240 Extends SKS_PP_Format_ChkType
{
    int chkCount;
    int voidCount;

    real chkSum;
    real voidSum;

    str chkAcct;
    str voidAcct;

    int printFooter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sectionGroupHeader</Name>
				<Source><![CDATA[
    protected void sectionGroupHeader()
    {
        printFooter = 1; // Set flag to print footer
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // BMO Capital Markets PP File Format
    // Pos 01-02    02       Literal '00'
    // Pos 03-09    07       Bank Check Account Number
    // Pos 10-19    10       Check Number
    // Pos 20-21    02       Issue Type
    // Pos 22-31    10       Check Amount
    // Pos 32-37    06       Date Issued (MMDDYY)
    // Pos 38-40    03       Literal '000'
    // Pos 41-90    50       Vendor Name (Does not show and is blanks if void)
    // Pos 90-240   150      Blanks
    protected str txtDetail()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int Mult = 1;
        str ItemType;
        str Amt;
        ;
    
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
               Mult = -1;
            }
            ItemType = '21';
            voidCount++;
            voidSum = voidSum + (mSKS_PP_FileDetail.ChkCuryAmt * Mult);
            voidAcct = strRtrim(strLtrim(mSKS_PP_FileDetail.BnkBankAcct));
        }
        else
        {
            ItemType = '20';
            chkCount++;
            chkSum = chkSum + mSKS_PP_FileDetail.ChkCuryAmt;
            chkAcct = strRtrim(strLtrim(mSKS_PP_FileDetail.BnkBankAcct));
        }
    
        Amt =  SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10);
    
        sb.Append('00');
        sb.Append(SKS_PP_StringFormats::strFill(7, strRtrim(strLtrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, strRtrim(strLtrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(ItemType);
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append('000');
    
        if(ItemType == '20')
        {
            sb.Append(SKS_PP_StringFormats::strFill(50, strRtrim(strLtrim(mSKS_PP_FileDetail.vendname)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        }
        sb.Append(SKS_PP_StringFormats::strFill(150, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // BMO Capital Markets PP File Format
    // Pos 01-02    02       Literal '00'
    // Pos 03-09    07       Bank Check Account Number
    // Pos 10-19    10       Literal '9999999999'
    // Pos 20-21    02       Issue Type (40 for check, 43 for void)
    // Pos 22-31    10       Total Check Amount
    // Pos 32-37    06       Total Issue Count
    // Pos 38-40    03       Literal '000'
    // Pos 41-240   200      Blanks
    protected str txtGroupTrailer()
    {
    
        //BP Deviation Documented
        System.Text.StringBuilder si = new System.Text.StringBuilder();
        //BP Deviation Documented
        System.Text.StringBuilder sv = new System.Text.StringBuilder();
        //BP Deviation Documented
        System.Text.StringBuilder sr = new System.Text.StringBuilder();
    
        ;
    
    
        si.Append('00');
        si.Append(SKS_PP_StringFormats::strFill(7, chkAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        si.Append(SKS_PP_StringFormats::strFill(10,'9999999999', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        si.Append('40');
        si.Append(SKS_PP_StringFormats::strMoney(chkSum, 10));
        si.Append(SKS_PP_StringFormats::strFill(6, int2str(chkCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        si.Append('000');
        si.Append(SKS_PP_StringFormats::strFill(200, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        sv.Append('00');
        sv.Append(SKS_PP_StringFormats::strFill(7,voidAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sv.Append(SKS_PP_StringFormats::strFill(10,'9999999999', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sv.Append('43');
        sv.Append( SKS_PP_StringFormats::strMoney(voidSum, 10));
        sv.Append(SKS_PP_StringFormats::strFill(6, int2str(voidCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sv.Append('000');
        sv.Append(SKS_PP_StringFormats::strFill(200, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        if (chkCount > 0)
        {
            sr.Append(si.ToString());
        }
    
        if (voidCount > 0)
        {
            sr.Append(sv.ToString());
        }
    
        if(printFooter == 1)
        {
            If (chkCount > 0)
            {
                // Reset counters
                chkCount = 0;
                chkSum = 0;
    
                chkAcct = '';
            }
    
            If (voidCount > 0)
            {
                // Reset counters
                voidCount = 0;
                voidSum = 0;
    
                voidAcct = '';
            }
    
            printFooter = 0;
            return sr.ToString();
        }
        else
        {
            sr.Append('');
            return sr.ToString();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>