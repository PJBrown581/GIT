<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_UK_HSBC_XML_EU_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_UK_HSBC_XML_EU_AR Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_UK_HSBC_XML_EU_AR Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20230425';
        dataContractVersion = '1.0';
        conFormatID = ['UK-HSBC-XML-EU-AR'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,1,0,0,0,'','','','',0,'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','Company Id','Company Name','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',1,'UK - HSBC - EU - ISO20022 Customer Direct Debits V02',0,'','','UK-HSBC-XML-EU-AR',0,'U','','','','','','','',0,0,'00:00.0',0,'00:00.0',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'UK-HSBC-XML-EU-AR',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('UK-HSBC-XML-EU-AR'):
                paymSpecList = this.getPaymSpecsMetaData_UK_HSBC_XML_EU_AR();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_UK_HSBC_XML_EU_AR</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_UK_HSBC_XML_EU_AR()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'DIRECT PAY',0,0,0,0,0,'SEPA payment',1,'SEPA','','SEPA','',0,'UK-HSBC-XML-EU-AR',0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,0,0,0,0,1,2,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('UK-HSBC-XML-EU-AR'):
                notesList = this.getNotesMetaData_UK_HSBC_XML_EU_AR();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_UK_HSBC_XML_EU_AR</Name>
				<Source><![CDATA[
    private container getNotesMetaData_UK_HSBC_XML_EU_AR()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['UK-HSBC-XML-EU-AR','SEPA','-Group Header > Initiating Party Name stored in Organization administration > Setup > Organization > Legal entities > Name field::-Creditor Scheme Id (as Company Id) stored on the Direct debit bank account > Direct debit > Company info fast tab.::-EFT+ bank account > AR EFT+:--Initiating Party Identification is set in the File info tab and it is required.:--Creditor Scheme Id is set in the File info tab and it is required.:--Mandate Nm/Addr amended (Y/N) is set in the File info tab.If \'Mandate Nm/Addr amended\' is set to \'Y\'  then Legal entity postal Address will print. This address will print only if the Purpose of the address is mentioned as \'Previous Mandate Address\'. Otherwise address will be ignored.::-Creditor details are Bank details.:--Creditor name is stored on Bank account > AR EFT+ > Company info > Company name.:--Creditor address will print, only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.:-Creditor Agent country is mandatory and stored in the Cash and Banmk management > Bank account > Address tab.::-Customer postal Address will print, only if the Purpose of the address is mentioned as Direct Debit. Otherwise address will be ignored.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('UK-HSBC-XML-EU-AR'):
                validationsList = this.getValidationsMetaData_UK_HSBC_XML_EU_AR();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_UK_HSBC_XML_EU_AR</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_UK_HSBC_XML_EU_AR()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','Name','Accounts receivables > All customers > Select a customer > General (Fast tab) > Name','PmtInf > DrctDbtTxInf > Dbtr > Nm','Name related to customer','5','Name','','',1,0,1,'140',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','IBAN','TAS > Common > Customer eBanking details > Customer bank accounts > General tab > Identification(group) > IBAN','PmtInf > DbtrAcct > Id > Othr > Id','Customer IBAN',1,'BankIBAN','','',0,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','SWIFT code','TAS > Common > Customer eBanking details > Payment specifications > Customer bank accounts > General tab > Identification(group) > SWIFT code','PmtInf> DbtrAgt > FinInstnId > BIC','Customer BIC',1,'SWIFTNo','','',0,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','Country/Region','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Country/region','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > Ctry','Customer country region Id','2','CountryRegionId','','',1,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','Street','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Street','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Customer address streer','2','Street','','',1,1,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','Zip/postal code','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > Zip/postal code','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Customer address postal code','2','Zipcode','','',1,1,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','City','Accounts receivables > All customers > Select a customer > Address (fast tab) > edit > City','PmtInf > DrctDbtTxInf > Dbtr > PstlAdr > AdrLine','Customer address city','2','City','','',1,1,1,'35',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','Country/Region','Customer eBanking details > Select a customer > Customer bank accounts > Address > Country/region','PmtInf > DrctDbtTxInf > DbtrAgt > PstlAdr > Ctry','Country related to customer bank','8','CountryRegionId','','',0,1,0,0,0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','IBAN','Cash and bank management > Select bank account > edit > General (fast tab) > IBAN','PmtInf > CdtrAcct > Id > Othr > Id','Bank IBAN',0,'IBAN','','',0,1,'','',0,1]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-HSBC-XML-EU-AR','SEPA','','Swift code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > CdtrAgt >  FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',0,1,'','',0,1]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['UK-HSBC-XML-EU-AR','MandateAmended','Mandate Nm/Addr amended (Y/N)']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['UK-HSBC-XML-EU-AR','Authorization','Authorization']);
        

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-HSBC-XML-EU-AR','MandateAmended','Y','Y']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-HSBC-XML-EU-AR','MandateAmended','N','N']);

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-HSBC-XML-EU-AR','Authorization','AUTH','AUTH']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-HSBC-XML-EU-AR','Authorization','ILEV','ILEV']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-HSBC-XML-EU-AR','Authorization','FDET','FDET']);

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch(_formatID)
        {
            case ('UK-HSBC-XML-EU-AR'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_UK_HSBC_XML_EU_AR();
                break;
        }
        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_UK_HSBC_XML_EU_AR</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_UK_HSBC_XML_EU_AR()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-HSBC-XML-EU-AR','UK-HSBC-XML-EU-AR','InitgPtyId','Initiating Party ID',1,'InitgPtyId','',1,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > OrgId > Othr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-HSBC-XML-EU-AR','UK-HSBC-XML-EU-AR','CdtrSchemeId','Creditor Scheme Id',1,'CdtrSchemeId','',1,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','PmtInf > CdtrSchmeId > Id > PrvtId > Othr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-HSBC-XML-EU-AR','UK-HSBC-XML-EU-AR','MandateAmended','Mandate Nm/Addr amended (Y/N)',0,'MandateAmended','',0,'','','Mandate Nm/Addr amended (Y/N)']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-HSBC-XML-EU-AR','UK-HSBC-XML-EU-AR','Authorization','Authorization',0,'Authorization','',0,'','','GrpHdr> Authstn > Cd']);


        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the direct debit bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateARBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('UK-HSBC-XML-EU-AR'):
                if(gSKS_EFTAR_Bank.W01)
                {
                    this.updateARBankFields('InitgPtyId', gSKS_EFTAR_Bank.W01);
                }
                if(gSKS_EFTAR_Bank.W02)
                {
                    this.updateARBankFields('CdtrSchemeId', gSKS_EFTAR_Bank.W02);
                }
                if(gSKS_EFTAR_Bank.W03)
                {
                    this.updateARBankFields('MandateAmended', gSKS_EFTAR_Bank.W03, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>