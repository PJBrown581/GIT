<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_VendPaymModeEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public  class SKS_VendPaymModeEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_VendPaymModeEventHandler construct()
    {
        return new SKS_VendPaymModeEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendPaymModeTable_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(VendPaymMode, VendPaymModeTable), FormDataSourceEventType::Initialized)]
    public static void VendPaymModeTable_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        var overrides = SKS_VendPaymModeEventHandler::construct();

        sender.object(fieldNum(VendPaymModeTable,PaymStatus)).registerOverrideMethod(methodStr(FormObject,validate),
            methodStr(SKS_VendPaymModeEventHandler, PaymStatus_OnValidated), overrides);
        sender.object(fieldNum(VendPaymModeTable, SKS_EFT_FormatId)).registerOverrideMethod(methodStr(FormObject, validate),
            methodStr(SKS_VendPaymModeEventHandler, SKS_EFT_FormatId_OnValidated), overrides);
        sender.object(fieldNum(VendPaymModeTable, SKS_EFT_PaymMode)).registerOverrideMethod(methodStr(FormObject, validate),
            methodStr(SKS_VendPaymModeEventHandler, SKS_EFT_PaymMode_OnValidated), overrides);
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendPaymModeTable_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(VendPaymMode, VendPaymModeTable), FormDataSourceEventType::Activated)]
    public static void VendPaymModeTable_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormDataSource vendPaymModeTable_ds = sender;
        FormRun formrun = sender.formRun();
        FormDesign formDesign = formrun.design(0);
        VendPaymModeTable vendPaymModeTable = sender.cursor();
        FormControl fileFormats = formDesign.controlName(formControlStr(VendPaymMode, FileFormats));
        FormControl setupButtonGroup = formDesign.controlName(formControlStr(VendPaymMode, SetupButtonGroup));
        FormControl bankVendPaymModeBankAccounts = formDesign.controlName(formControlStr(VendPaymMode, BankVendPaymModeBankAccounts));
        FormControl MenuItemButton = formDesign.controlName(formControlStr(VendPaymMode, MenuItemButton));
        FormControl eftFormat = formDesign.controlName(formControlStr(VendPaymMode, EFTFormat));
        
        if(vendPaymModeTable.SKS_EFT_PaymMode)
        {
            fileFormats.visible(false);
            setupButtonGroup.visible(false);
            eftFormat.visible(true);    
            bankVendPaymModeBankAccounts.enabled(false);
            menuItemButton.enabled(false);
    
            vendPaymModeTable_ds.object(fieldnum(VendPaymModeTable, AccountType)).enabled(false);
            vendPaymModeTable_ds.object(fieldnum(VendPaymModeTable, PaymentLedgerDimension)).enabled(false);
        }
        else
        {
            fileFormats.visible(true);
            setupButtonGroup.visible(true);
            eftFormat.visible(false);    
            bankVendPaymModeBankAccounts.enabled(true);
            menuItemButton.enabled(true);
    
            vendPaymModeTable_ds.object(fieldnum(VendPaymModeTable, AccountType)).enabled(true);
            vendPaymModeTable_ds.object(fieldnum(VendPaymModeTable, PaymentLedgerDimension)).enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendPaymModeTable_OnValidatingWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(VendPaymMode, VendPaymModeTable), FormDataSourceEventType::ValidatingWrite)]
    public static void VendPaymModeTable_OnValidatingWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        VendPaymModeTable vendPaymModeTable = sender.cursor();

        if(vendPaymModeTable.SKS_EFT_PaymMode == NoYes::Yes && vendPaymModeTable.SKS_EFT_FormatId == '')
        {
            throw Error("@SKS:SKSMissingFormat");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymStatus_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    
    public boolean PaymStatus_OnValidated(FormDataObject sender)
    {
        boolean ret;
        FormRun formrun = sender.datasource().formRun();
        FormDataSource vendPaymModeTable_ds = sender.datasource();
        VendPaymModeTable vendPaymModeTable = vendPaymModeTable_ds.cursor();
        ret = sender.validate();
        
        if(ret && vendPaymModeTable.SKS_EFT_PaymMode == NoYes::Yes &&  // if this is an EFT+ Method of Payment
            !(vendPaymModeTable.PaymStatus == CustVendPaymStatus::Confirmed ||
            vendPaymModeTable.PaymStatus == CustVendPaymStatus::Recieved ||
            vendPaymModeTable.PaymStatus == CustVendPaymStatus::Sent))
        {
            warning(strFmt("@SKS2885", enum2str(vendPaymModeTable.PaymStatus)));
            return false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_FormatId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(VendPaymMode, VendPaymModeTable, SKS_EFT_FormatId), FormDataFieldEventType::Modified)]
    public static void SKS_EFT_FormatId_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormRun formrun = sender.datasource().formRun();
        FormDataSource vendPaymModeTable_ds = sender.datasource();
        VendPaymModeTable vendPaymModeTable = vendPaymModeTable_ds.cursor();
        VendPaymModeSpec vendPaymModeSpec;       
        SKS_EFT_VendorPaym sks_eft_VendorPaym;
        VendPaymModeSpec vendPaymModeSpecDel;
        SKS_EFT_FileFormatPaymSpec fileFormatPaymSpec;
        RecordInsertList    vendPaymRecordInsertList = new  RecordInsertList(tableNum(VendPaymModeSpec));   //TAS_AX7
        
        ttsbegin;            
        if(vendPaymModeTable.SKS_EFT_FormatId != '')
        {
            vendPaymModeTable_ds.write();
            
            // Update format id on eft vendor records           
            update_recordset sks_eft_VendorPaym
                setting FormatId = VendPaymModeTable.SKS_EFT_FormatId
                where sks_eft_VendorPaym.PaymMode == VendPaymModeTable.PaymMode;
            
            // Delete any existing payment specs and re-populate based on eft file format payment specs            
            delete_from vendPaymModeSpecDel where vendPaymModeSpecDel.PaymMode == VendPaymModeTable.PaymMode;
            
            while select * from fileFormatPaymSpec 
                where fileFormatPaymSpec.FormatId == VendPaymModeTable.SKS_EFT_FormatId &&
                    fileFormatPaymSpec.UseWithVendors == NoYes::Yes &&
                    fileFormatPaymSpec.Selected == NoYes::Yes
            {
                vendPaymModeSpec.PaymMode = VendPaymModeTable.PaymMode;
                vendPaymModeSpec.Specification = fileFormatPaymSpec.PaymSpec;
                vendPaymModeSpec.Name = fileFormatPaymSpec.PaymSpecFileDescr;
                vendPaymModeSpec.ClassId = classNum(SKS_EFT_VendOutPaymRecord);
                vendPaymModeSpec.SKS_EFT_FFPaymSpecRecId = fileFormatPaymSpec.RecId;
                vendPaymRecordInsertList.add(vendPaymModeSpec);         //TAS_CAR
            }
            vendPaymRecordInsertList.insertDatabase();      //TAS_CAR
        }            
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_FormatId_OnValidated</Name>
				<Source><![CDATA[
    public boolean  SKS_EFT_FormatId_OnValidated(FormDataObject sender)
    {
        boolean ret;
        LedgerJournalTable ledgerJournaltable;
        LedgerJournalTrans ledgerjournaltrans;
        FormRun formrun = sender.datasource().formRun();
        FormDataSource vendPaymModeTable_ds = sender.datasource();
        VendPaymModeTable vendPaymModeTable = vendPaymModeTable_ds.cursor();
          
        ret = sender.validate();
            
        select firstonly JournalNum from ledgerJournaltable 
            where ledgerJournaltable.JournalType==ledgerjournaltype::Payment &&
                ledgerJournaltable.SKS_EFT_JournalState > SKS_EFT_JournalState::NotApplicable && 
                ledgerJournaltable.Posted == NoYes::No
            join paymMode from ledgerjournaltrans 
            where ledgerjournaltrans.JournalNum == ledgerJournaltable.JournalNum &&
                ledgerjournaltrans.paymMode == VendPaymModeTable.PaymMode;

        if (ledgerjournaltrans)
        {
            ret = checkFailed("@SKS1721");
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymMode_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(VendPaymMode, VendPaymModeTable, SKS_EFT_PaymMode), FormDataFieldEventType::Modified)]
    public static void SKS_EFT_PaymMode_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormRun formrun = sender.datasource().formRun();
        FormDataSource vendPaymModeTable_ds = sender.datasource();
        VendPaymModeTable vendPaymModeTable = vendPaymModeTable_ds.cursor();
        VendPaymModeSpec vendPaymModeSpec;
        FormDesign formDesign = formrun.design(0);
        FormControl fileFormats = formDesign.controlName(formControlStr(VendPaymMode, FileFormats));
        FormControl setupButtonGroup = formDesign.controlName(formControlStr(VendPaymMode, SetupButtonGroup));
        FormControl bankVendPaymModeBankAccounts = formDesign.controlName(formControlStr(VendPaymMode, BankVendPaymModeBankAccounts));
        FormControl menuItemButton = formDesign.controlName(formControlStr(VendPaymMode, MenuItemButton));
        FormControl eftFormat = formDesign.controlName(formControlStr(VendPaymMode, EFTFormat));
        
        if(VendPaymModeTable.SKS_EFT_PaymMode)
        {
            fileFormats.visible(false);
            setupButtonGroup.visible(false);
            eftFormat.visible(true);
    
            bankVendPaymModeBankAccounts.enabled(false);
            menuItemButton.enabled(false);
    
            vendPaymModeTable_ds.object(fieldnum(VendPaymModeTable, AccountType)).enabled(false);
            vendPaymModeTable_ds.object(fieldnum(VendPaymModeTable, PaymentLedgerDimension)).enabled(false);
        }
        else
        {
            fileFormats.visible(true);
            setupButtonGroup.visible(true);
            eftFormat.visible(false);
    
            bankVendPaymModeBankAccounts.enabled(true);
            menuItemButton.enabled(true);
    
            vendPaymModeTable_ds.object(fieldnum(VendPaymModeTable, AccountType)).enabled(true);
            vendPaymModeTable_ds.object(fieldnum(VendPaymModeTable, PaymentLedgerDimension)).enabled(true);
        }
            
        ttsbegin;
        if(vendPaymModeTable.SKS_EFT_PaymMode)
        {
            vendPaymModeTable.AccountType = LedgerJournalACType::Bank;
            vendPaymModeTable.PaymentLedgerDimension = 0;
            
            vendPaymModeTable.ClassId = classnum(SKS_EFT_VendOutPaym);
            vendPaymModeTable.ClassIdFileAnalyze = 0;
            vendPaymModeTable.ClassIdRemittance = 0;
            vendPaymModeTable.ClassIdReturn = 0;

            //<Issue21952>
            if(vendPaymModeTable.PaymStatus != CustVendPaymStatus::Confirmed)
            {
                vendPaymModeTable.PaymStatus = CustVendPaymStatus::Sent;
            }
            //</Issue21952>
        }
        else
        {
            vendPaymModeTable.SKS_EFT_FormatId = '';
            vendPaymModeTable.ClassId = 0;
            delete_from vendPaymModeSpec where vendPaymModeSpec.PaymMode == vendPaymModeTable.PaymMode;
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymModeInUse</Name>
				<Source><![CDATA[
    boolean SKS_EFT_PaymModeInUse(FormRun formRun)
    {
        FormDataSource vendPaymModeTable_ds = formRun.dataSource('VendPaymModeTable');
        VendPaymModeTable vendPaymModeTable = vendPaymModeTable_ds.cursor();
        SKS_EFT_FilePmtSelection sks_eft_FilePmtSelection;

        if(vendPaymModeTable.orig().SKS_EFT_PaymMode && !vendPaymModeTable.SKS_EFT_PaymMode)
        {
            select firstonly PaymMode from sks_eft_FilePmtSelection
                where sks_eft_FilePmtSelection.PaymMode == vendPaymModeTable.PaymMode &&
                    sks_eft_FilePmtSelection.Module == SKS_EFT_Module::AP;
    
            if(sks_eft_FilePmtSelection)
            {
                error("@SKS1579");
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymMode_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
   
    public boolean SKS_EFT_PaymMode_OnValidated(FormDataObject sender)
    {
        FormRun formrun = sender.datasource().formRun();

        if(this.SKS_EFT_PaymModeInUse(formrun))
        {
            return false;
        }        
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>