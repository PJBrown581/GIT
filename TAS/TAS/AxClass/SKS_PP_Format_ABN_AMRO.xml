<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_ABN_AMRO</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_ABN_AMRO Extends SKS_PP_Format_BankGroup
{
    int mChk_Count;
    real mChk_Amt;
    SKS_PP_Bank mSKS_PP_Bank;
    BankAccount mBankAcct;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    /*
    ' ABN-AMRO POSITIVE PAY FORMAT - Detail Record
    
    ' Pos 01-01    1        Record Type "D"
    ' Pos 02-04    3        Bank Number (by state - 965 for LNA, 280 for SFB) - in SKS_PP_Bank.PP01
    ' Pos 05-14    10       Filler/Blank
    ' Pos 15-24    10       Account number - RJ-LZF
    ' Pos 25-25    1        Void Check Indicator (issue = blank, voids = 'V')
    ' Pos 26-28    3        Filler/Blank
    ' Pos 29-38    10       Check/Serial number - RJ-LZF
    ' Pos 39-41    3        Filler/Blank
    ' Pos 42-51    10       Dollar Amount (zeroes for void)
    ' Pos 52-59    8        Issue date (YYYYMMDD)
    ' Pos 60-159   100      Additional data - (Payee, 2nd line of Check LJ - blank filled)
    ' Pos 160-180  21       Filler/Blank
    */
    protected str txtDetail()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str ItemType;
        int Mult;
        real Amt;
        DirPartyNamePrimaryAddressView DirPartyNamePrimaryAddressView;
        VendTable vendtable;
        Container company;
    
        SKS_PP_StringFormats formats = new SKS_PP_StringFormats();
        ;
        // Convert negative void numbers to positives
        Mult = 1;
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
            Amt = 0;
        }
        else
        {
            Amt = mSKS_PP_FileDetail.ChkCuryAmt;
            ItemType = ' ';
        }
    
        if(mSKS_PP_Bank.BankAccountId != mSKS_PP_FileDetail.ChkBankAcct)
            mSKS_PP_Bank = SKS_PP_Bank::find(mSKS_PP_FileDetail.ChkBankAcct, mSKS_PP_FileDetail.ChkCpnyId);
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company Street from DirPartyNamePrimaryAddressView join vendtable where
          DirPartyNamePrimaryAddressView.Party == vendtable.Party &&
          vendtable.AccountNum == mSKS_PP_FileDetail.VendorAccount;
    
        if (mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::Cheque)
        {
            mChk_Count++;
            mChk_Amt = mChk_Amt + mSKS_PP_FileDetail.ChkCuryAmt;
        }
        mBankAcct = mSKS_PP_FileDetail.BnkBankAcct; // Used in trailer
    
        sb.Append('D');
        sb.Append(mSKS_PP_Bank.PP01);
        sb.Append(SKS_PP_StringFormats::strFill(10, '',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, strLTrim(StrRTrim(mSKS_PP_FileDetail.BnkBankAcct)),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(3, '',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10,strLtrim(strRTrim(mSKS_PP_FileDetail.ChkRefNbr)),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(3, '',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * Amt, 10));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(30,strLTrim(StrRTrim(mSKS_PP_FileDetail.VendName)),SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(70,strLTrim(StrRTrim(DirPartyNamePrimaryAddressView.Street)),SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    // ABN-AMRO POSITIVE PAY FORMAT - Header Record
    
    // Pos 01-01    1        Record Type "H"
    // Pos 02-31    30       Company Name
    // Pos 32-39    8        Date Field YYYYMMDD
    // Pos 40-180   141      Filler/Blank
    protected str txtFormatHeader()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        sb.Append('H');
        sb.Append(SKS_PP_StringFormats::strFill(30,mSKS_PP_FileDetail.ChkCpnyId,SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileFormat.LastEffDate));
        sb.Append(SKS_PP_StringFormats::strFill(141,'',SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    /*
    ' ABN-AMRO POSITIVE PAY FORMAT - Trailer Record
    
    ' Pos 01-01    1        Record Type "T"
    ' Pos 02-04    3        Bank Number (by state - 965 for LNA, 280 for SFB) - in SKS_PP_Bank.PP01
    ' Pos 05-14    10       Filler/Blank
    ' Pos 15-24    10       Account number - RJ-LZF
    ' Pos 25-28    4        Filler/Blank
    ' Pos 29-38    10       Check Issued Rec Count (Voided checks are NOT included)
    ' Pos 39-53    15       Total Dollar Amount (Only include totals for Issued records)
    ' Pos 54-180   127      Filler/Blank
    */
    protected str txtGroupTrailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        sb.Append('T');
        sb.Append(mSKS_PP_Bank.PP01);
        sb.Append(SKS_PP_StringFormats::strFill(10,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10,strLTrim(StrRTrim(mBankAcct)),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(4,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10,int2str(mChk_Count),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mChk_Amt, 15));
        sb.Append(SKS_PP_StringFormats::strFill(127,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Left));
    
        mChk_Count = 0;
        mChk_Amt = 0;
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>