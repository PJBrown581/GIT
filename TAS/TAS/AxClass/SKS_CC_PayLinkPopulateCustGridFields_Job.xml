<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_PayLinkPopulateCustGridFields_Job</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_PayLinkPopulateCustGridFields_Job
{        
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to populate fields added to the CustTable table
    /// for CustTable form for WalletLink related fields.
    /// The fields are displayed on the Grid control of the form.    
    /// </summary>
    /// <param name = "_args">The specified arguments.</param>
    public static void main(Args _args)
    {
        Dialog dialog = new Dialog("@SKS:SKGCCPopulateWalletLinkFieldsForCustGrid");
        
        DialogText dialogTextMsg = dialog.addText(strFmt("@SKS:SKGCCPopulateWalletLinkFieldsDlgMsg", '\n'), 500);

        dialog.run();

        if (!dialog.closedOk())        
        {
            return;
        }

        SKS_CC_PayLinkPopulateCustGridFields_Job::populateWalletLinkCustGridFields(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWalletLinkCustGridFields</Name>
				<Source><![CDATA[
    public static void populateWalletLinkCustGridFields(boolean _showInfologMessage = false)
    {
        #OCCRetryCount

        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();
        if (!sKS_PP_Setup)
        {
            return;
        }

        if (!(sKS_PP_Setup.CCPLEnablePayLinks || sKS_PP_Setup.CCPLEnableWalletLinks))
        {
            return;
        }

        if (!sKS_PP_Setup.CCPLEnableListPageFields)
        {
            return;
        }

        CustTable custTable;
        SKS_CC_LastWalletLinkStatusView lastWalletLinkStatusView;
        Counter customerUpdCnt;

        while select custTable
            where custTable.SKS_CC_WalletLinkStatus == SKS_CC_PayLinkProcessStatus::NA
        join lastWalletLinkStatusView
            where lastWalletLinkStatusView.AccountNum == custTable.AccountNum &&
            (lastWalletLinkStatusView.Status == SKS_CC_PayLinkProcessStatus::Pending ||
             lastWalletLinkStatusView.Status == SKS_CC_PayLinkProcessStatus::Error ||
             lastWalletLinkStatusView.Status == SKS_CC_PayLinkProcessStatus::Expired ||
             lastWalletLinkStatusView.Status == SKS_CC_PayLinkProcessStatus::Canceled)
        {
            try
            {
                custTable.selectForUpdate(true);
                ttsbegin;
                custTable.SKS_CC_WalletLinkStatus = lastWalletLinkStatusView.Status;
                if (custTable.SKS_CC_WalletLinkStatus == SKS_CC_PayLinkProcessStatus::Error)
                {
                    custTable.SKS_CC_WalletLinkErrorMsg = lastWalletLinkStatusView.WalletLinkErrorMsg;
                }

                custTable.SKS_CC_WalletLinkCount = any2Int(lastWalletLinkStatusView.WalletLinkCount);

                custTable.doUpdate();
                ttscommit;
                customerUpdCnt++;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                error("@SKS:SKGCCDuplicateKeyErrorOccurredDuringUpdate");
            }
            catch (Exception::Error)
            {
                ttsabort;
                error(strFmt("@SKS:SKGCCErrorMsgWhileUpdatingWalletLinkFields", custTable.AccountNum));
            }
        }        

        if (_showInfologMessage)
        {
            if (customerUpdCnt)
            {                
                info("@SKS:SKGCCProcessToPopulateWalletLinkFieldsCompleted");
                info(strFmt("@SKS:SKGCCCustomerRecordsUpdatedX", customerUpdCnt));
            }
            else
            {
                info("@SKS:SKGCCNoRecordsToUpdateWereFound");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>