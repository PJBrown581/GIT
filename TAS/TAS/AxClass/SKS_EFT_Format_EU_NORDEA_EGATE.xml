<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_NORDEA_EGATE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_EU_NORDEA_EGATE extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_EU_NORDEA_EGATE extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20220427')
    #define.CTRF('CTRF')
    #define.STRF('STRF')
    #define.FIK71('FIK71')
    #define.FIK73('FIK73')
    #define.FIK75('FIK75')
    #define.INTC('INTC')
    #define.CBFT('CBFT')
    #define.SWIFT('SWIFT')
    #define.SEPA('SEPA')
    #define.XPRS('XPRS')
    #define.P_KIDR('P-KIDR')
    #define.P_KIDR_CN('P-KIDR-CN')
    #define.P_TNR_CN('P-TNR-CN')
    #define.P_FTRUB('P-FTRUB')
    #define.SDS_HV('SDS-HV')
    #define.ICPS_HV('ICPS-HV')

    #define.P_PPOR('P-PPOR')
    #define.P_PBOR('P-PBOR')
    #define.P_BBOR('P-BBOR')
    #define.P_BBOR_CN('P-BBOR-CN')
    #define.P_PPFTR('P-PPFTR')
    #define.P_PBFTR('P-PBFTR')
    #define.P_PBAFTR_U('P-PBAFTR-U')
    #define.P_BBFTR('P-BBFTR')
    #define.P_BBAFTR_U('P-BBAFTR-U')
    #define.IC_PBAFTR('IC-PBAFTR')
    #define.P_PPNOR_CN('P-PPNOR-CN')
    #define.P_PBNOR('P-PBNOR')
    #define.P_BBNOR_CN('P-BBNOR-CN')
    #define.P_PBAFTR_P('P-PBAFTR-P')
    #define.P_BBAFTR_P('P-BBAFTR-P')
    #define.ACH_CCD('ACH-CCD')
    #define.ACH_CCDP('ACH-CCD+')
    #define.CHK_USTRD('CHK-USTRD')
    #define.CHK_STRD('CHK-STRD')
    #define.WIRE('WIRE')
    #define.P_OCR('P-OCR')
    #define.P_NOCR('P-NOCR')
    #define.P_TEXT('P-TEXT')

    #define.GIRO_01('GIRO-01')
    #define.GIRO_04('GIRO-04')
    #define.GIRO_15('GIRO-15')
    #define.CPR('CPR')                //SKS#DevOps:15036
    #define.CVR('CVR')                //SKS#DevOps:15036

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        PaymMode        prevPaymMode;
        PaymSpec        prevPaymSpec;
        CurrencyCode    prevCurrency;
        CompanyBankAccountId    prevBankAccountId;
    
        xmlDoc = XmlDocument::newBlank();
    
        this.node_MessageRoot();
    
        this.node_GrpHdr();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
    
            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));
    
            if(prevBankAccountId != mSKS_EFT_FileDetail.BankAccountId ||
               prevPaymMode != mSKS_EFT_FileDetail.PaymMode ||
               prevPaymSpec != mSKS_EFT_FileDetail.PaymSpec ||
               prevCurrency != mSKS_EFT_FileDetail.PaymentCurrencyCode)
            {
                this.node_PmtInf();
    
                prevBankAccountId = mSKS_EFT_FileDetail.BankAccountId;
                prevPaymMode = mSKS_EFT_FileDetail.PaymMode;
                prevPaymSpec = mSKS_EFT_FileDetail.PaymSpec;
                prevCurrency = mSKS_EFT_FileDetail.PaymentCurrencyCode;
            }
    
            //Get Addenda information
            this.setAddenda();
    
            this.node_CdtTrfTxInf();
    
            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDetails</Name>
				<Source><![CDATA[
    private str getInvoiceDetails()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str                 invDetailsString;
        boolean             invDetailsParm3;
        boolean             invDetailsParm4;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #WIRE:
                    case #CBFT:
                    case #SWIFT:
                    case #CHK_USTRD:
                        invDetailsParm4 = true;
                        break;
                    default:
                        invDetailsParm3 = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_TEXT:
                        invDetailsParm4 = true;
                        break;
                    default:
                        invDetailsParm3 = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_FTRUB:
                        invDetailsParm4 = true;
                        break;
                    default:
                        invDetailsParm3 = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPFTR:
                    case #P_PBFTR:
                    case #P_BBFTR:
                    case #P_BBAFTR_U:
                        invDetailsParm4 = true;
                        break;
                    default:
                        invDetailsParm3 = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHK_USTRD:
                    case #WIRE:
                    case #CBFT:
                    case #SWIFT:
                        invDetailsParm4 = true;
                        break;
                    default:
                        invDetailsParm3 = true;
                        break;
                }
                break;
            default:
                invDetailsParm3 = true;
                break;
        }
        while select InvoiceNumber, EffectiveDate, InvoiceSettleAmountPmtCur, PaymentCurrencyCode from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
               && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(invDetailsParm4)
            {
                invDetailsString += strFmt('%1, %2, %3 %4, ', invSKS_EFT_FileDetail.InvoiceNumber, invSKS_EFT_FileDetail.EffectiveDate, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), invSKS_EFT_FileDetail.PaymentCurrencyCode);
            }
            else if(invDetailsParm3)
            {
                invDetailsString += strFmt('%1, %2 %3, ', invSKS_EFT_FileDetail.InvoiceNumber, num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), invSKS_EFT_FileDetail.PaymentCurrencyCode);
            }
        }
        if(invDetailsString)
        {
            invDetailsString = strReplace(subStr(invDetailsString, 1, strLen(invDetailsString)-2), '/','.');
        }
        return this.CharacterReplacement(invDetailsString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
    
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', mRemittanceName, 70);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        //          or
        //              PrvtId
        //                  Othr
        //                      Id
        //                      SchemeName
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgPrvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str        id, schmeNm;
        int        length;
        boolean    printPrvtId;
        boolean    printOrgId;
        boolean    printCdtrId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CPR:
                        schmeNm     = 'SOSE';
                        id          =  mSKS_EFT_FileDetail.DepBankAcct;
                        length      =  10;
                        printPrvtId = true;
                        break;
                    case #CVR:
                        schmeNm     = 'TXID';
                        id          =  VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).organizationNumber();
                        length      =  8;
                        printOrgId = true;
                        break;
                }
                break;
        }
        if(printCdtrId && id)
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

            if(printPrvtId)
            {
                nodeOrgPrvtId = nodeId.appendChild(xmlDoc.createElement('PrvtId'));
            }
            else if(printOrgId)
            {
                nodeOrgPrvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
            }

            nodeOthr = nodeOrgPrvtId.appendChild(xmlDoc.createElement('Othr'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', id, length);

            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schmeNm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrSchmeNm;
        XmlElement nodeCdtrAcctTp;
        str value, depAcctType;
        str iban, acctNum;
        str schmeNm;
        boolean printCd;
        boolean printPrtry;
        boolean printAcctTp;

        iban    =   mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum =   mSKS_EFT_FileDetail.DepBankAcct;
        value   =   SKS_EFT_Format_ISO_20022_001001003_FD::getCodelookupvalue('NordeaID', mSKS_EFT_FileDetail.RecId);

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #WIRE:
                        printAcctTp  = true;
                        break;
                    default:
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO_01:
                    case #GIRO_04:
                    case #GIRO_15:
                        if(mSKS_EFT_FileDetail.DepBankTransit != '' && value == '')
                        {
                            acctNum = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;                            
                        }
                        schmeNm     = 'OCR';
                        printPrtry  = true;
                        break;
                    case #CPR:
                    case #CVR:
                        iban        =   '';
                        acctNum     = 'NOTPROVIDED';
                        break;
                    default:
                        if(mSKS_EFT_FileDetail.DepBankTransit != '' && value == '')
                        {
                            acctNum = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;                            
                        }
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PBOR:
                    case #P_PBNOR:
                    case #P_PBFTR:
                    case #P_BBOR:
                    case #P_BBOR_CN:
                    case #P_BBNOR_CN:
                    case #P_BBFTR:
                        if(mSKS_EFT_FileDetail.DepBankTransit != '' && value == '')
                        {
                            acctNum     = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;                            
                        }
                        schmeNm     = 'BGNR';
                        printPrtry  = true;
                        break;
                    default:
                        if(mSKS_EFT_FileDetail.DepBankTransit != '' && value == '')
                        {
                            acctNum = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;                            
                        }
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_CCDP:
                    case #WIRE:
                        printAcctTp  = true;
                        break;
                    default:
                        schmeNm = 'BBAN';
                        printCd = true;
                        break;
                }
                break;
            default:
                if(mSKS_EFT_FileDetail.DepBankTransit != '' && value == '')
                {
                    acctNum = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;                    
                }
                schmeNm = 'BBAN';
                printCd = true;
                break;
        }
        if((iban || acctNum)    &&
          (mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && 
           subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK'))
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
                    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', acctNum);                
    
                if(printPrtry)
                {
                    //                      SchmeNm
                    nodeCdtrSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));      //SKS#DevOps:16048

                    //                          Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Prtry', schmeNm);
                }
                else if(printCd)
                {
                    //                      SchmeNm
                    nodeCdtrSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));      //SKS#DevOps:16048

                    //                          Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Cd', schmeNm);
                }
                if(printAcctTp)
                {
                    if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                    {
                        depAcctType = 'SVGS';
                    }
                    else
                    {
                        depAcctType = 'CACC';
                    }
                    nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', depAcctType);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        boolean printCdtrAgtNm = true;
        boolean printPstlAddr = true;
        str swift, rtg;
    
        swift   =   mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =   mSKS_EFT_FileDetail.DepBankTransit;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                        swift  = '';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_CCDP:
                        swift  = '';
                        break;
                }
                break;
        }
        if((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK') && (swift || rtg))
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
            }
            else if(rtg)
            {
                //                  ClrSysMmbId
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }
    
            if(printCdtrAgtNm)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 0, false);
            }
            if(printPstlAddr)
            {
                //                  PstlAdr
                this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          ClrSysMmbId
        //              ClrSysId
        //                  Cd
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeClrSysMmbId;
        XmlElement  nodeClrSysId;
        str         clrSysId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                    case #ACH_CCD:
                    case #WIRE:
                        clrSysId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NordeaID', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                        clrSysId  = this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch);
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-SE':
                clrSysId = 'SESBA';
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                    case #ACH_CCD:
                    case #ACH_CCDP:
                    case #WIRE:
                        clrSysId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NordeaID', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }
        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            //          ClrSysMmbId
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
            if(clrSysId)
            {
                //              ClrSysId
                nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));
    
                //                  Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', clrSysId, 0);
            }
    
            //          MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.51 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      2.51 ChrgBr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', SKS_EFT_Format::getCodelookupvalue('Chrgbr',mSKS_EFT_FileDetail.RecId), 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForCdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_InstrForCdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.82: InstrForCdtrAgt
        //              InstrInf
        //------------------------------------------------------------------------------------------------------    
        XmlElement  nodeInstrForCdtrAgt;
        str         value;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_BBAFTR_U:
                        value = 'TELB';
                        break;
                }
                break;
        }
        if(value)
        {
            //          2.82: InstrForCdtrAgt
            nodeInstrForCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('InstrForCdtrAgt'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInstrForCdtrAgt, 'InstrInf', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------    
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        boolean    printIntrmyAgt1;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-DK':
            case 'EU-NORDEA-EGATE-INT':
            case 'EU-NORDEA-EGATE-NO':
            case 'EU-NORDEA-EGATE-SE':
            case 'EU-NORDEA-EGATE-US':
            case 'EU-NORDEA-EGATE-CA':
            case 'EU-NORDEA-EGATE-DE':
                printIntrmyAgt1 = true;
                break;
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #XPRS:
                    case #CBFT:
                    case #SEPA:
                    case #SWIFT:
                    case #INTC:
                        printIntrmyAgt1 = true;
                        break;
                }
                break;
        }
        if(printIntrmyAgt1  &&
           mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')//SKS_VSTS_13183 <--
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purpose</Name>
				<Source><![CDATA[
    private void node_CdtTrfTxInf_Purpose(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.88: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodePurp;
        boolean     printPurp = true;
        str         invDetailsString;
    
        invDetailsString = this.getInvoiceNbrs();
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-FI':
                printPurp = false;
                break;
        }
        if(invDetailsString != '' && printPurp)
        {
            //          2.88: Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
    
            //              2.99: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Prtry', invDetailsString, 12);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Cd
        //                     Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeRgltryRptg;
        XmlElement nodeDtls;
    
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        if(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode !='' ||  msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName !='')
        {
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));
            nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Ctry', mRemittanceCountryRegionId);
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                        break;
                    case #CHK_USTRD:
                    case #WIRE:
                    case #CBFT:
                    case #SWIFT:
                    case #INTC:
                        this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
                        break;
                    case #CHK_STRD:
                        this.node_CdtTrfTxInf_RmtInf_NoneOCR(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO_01:
                    case #GIRO_04:
                    case #GIRO_15:
                        this.node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_OCR:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    case #P_NOCR:
                        this.node_CdtTrfTxInf_RmtInf_NoneOCR(_nodeCdtTrfTxInf);
                        break;
                    case #P_TEXT:
                        this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_KIDR:
                    case #P_KIDR_CN:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    case #P_FTRUB:
                    case #SDS_HV:
                    case #ICPS_HV:
                    case #P_TEXT:
                        this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
                        break;
                    case #P_TNR_CN:
                        this.node_CdtTrfTxInf_RmtInf_NoneOCR(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPOR:
                    case #P_PBOR:
                    case #P_BBOR:
                    case #P_BBOR_CN:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    case #P_PPFTR:
                    case #P_PBFTR:
                    case #P_BBFTR:
                    case #P_BBAFTR_U:
                    case #IC_PBAFTR:
                        this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
                        break;
                    case #P_BBAFTR_P:
                    case #P_PBAFTR_P:
                        this.node_CdtTrfTxInf_Purpose(_nodeCdtTrfTxInf);
                        break;
                    case #P_PPNOR_CN:
                    case #P_PBNOR:
                    case #P_BBNOR_CN:
                        this.node_CdtTrfTxInf_RmtInf_NoneOCR(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                        break;
                    case #CHK_USTRD:
                    case #WIRE:
                    case #CBFT:
                    case #SWIFT:
                    case #INTC:
                        this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
                        break;
                    case #ACH_CCDP:
                    case #CHK_STRD:
                        this.node_CdtTrfTxInf_RmtInf_NoneOCR(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            default:
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement  nodeRmtInf;
        XmlElement  nodeStrd;
        XmlElement  nodeTp;
        XmlElement  nodeCdOrPrtry;
        XmlElement  nodeRfrdDocAmt;
        XmlElement  nodeCdtrRefInf;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        SKS_EFT_FileDetail invSKS_EFT_FileDetailOCR;
        int         length;
        boolean     firstRec = true;
        boolean     printRfrdDocAmt;

        select count(PaymentLineRecId) from invSKS_EFT_FileDetailOCR where invSKS_EFT_FileDetailOCR.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;

        while select  invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
            {
                case 'EU-NORDEA-EGATE-FI':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #P_OCR:
                            length = 20;
                            if(invSKS_EFT_FileDetailOCR.PaymentLineRecId > 1)
                            {
                                printRfrdDocAmt = true;
                            }
                            break;
                    }
                    break;
                case 'EU-NORDEA-EGATE-NO':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #P_KIDR:
                            length = 25;
                            break;
                        case #P_KIDR_CN:
                            length = 25;
                            printRfrdDocAmt = true;
                            break;
                    }
                    break;
                case 'EU-NORDEA-EGATE-SE':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #P_PPOR:
                        case #P_PBOR:
                        case #P_BBOR:
                            length = 25;
                            break;
                        case #P_BBOR_CN:
                            length = 25;
                            printRfrdDocAmt = true;
                            break;
                    }
                    break;
            }            
            if(invSKS_EFT_FileDetail.PaymId)
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
                //              2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

                if(printRfrdDocAmt)
                {
                    //              2.109 RfrdDocAmt
                    nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));

                    this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
                }

                //            2.120: CdtrRefInf
                nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));

                //              2.121: Tp
                nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));

                //                  2.122: CdOrPrtry
                nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

                //                      2.123: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');

                //               2.126: Ref
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', invSKS_EFT_FileDetail.PaymId, length, false); //SKS_VSTS_14139
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement          nodeRmtInf;
        XmlElement          nodeStrd;
        XmlElement          nodeCdtrRefInf;
        XmlElement          nodeTp;
        XmlElement          nodeCdOrPrtry;
        SKS_EFT_FileDetail  invSKS_EFT_FileDetail;
        str                 fik;
        boolean             firstRec = true;
        boolean             printUtrd = true;

        while select  invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }
            fik = subStr(invSKS_EFT_FileDetail.PaymId, 2, 2);

            switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
            {
                case 'EU-NORDEA-EGATE-DK':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #FIK71:
                            if(fik == '71')
                            {
                                fik = '71/' + SKS_PP_StringFormats::strFill(15, subStr(invSKS_EFT_FileDetail.PaymId, 5, 15), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                            }
                            else
                            {
                                fik = '71/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 15);
                            }
                            break;
                        case #FIK75:
                            if(fik == '75')
                            {
                                fik = '75/' + SKS_PP_StringFormats::strFill(16, subStr(invSKS_EFT_FileDetail.PaymId, 5, 16), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                            }
                            else
                            {
                                fik = '75/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                            }
                            printUtrd = false;
                            break;
                        case #GIRO_04:
                            if(fik == '04')
                            {
                                fik = '04/' + SKS_PP_StringFormats::strFill(16, subStr(invSKS_EFT_FileDetail.PaymId, 5, 16), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                            }
                            else
                            {
                                fik = '04/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                            }
                            break;
                        case #GIRO_15:
                            if(fik == '15')
                            {
                                fik = '15/' + SKS_PP_StringFormats::strFill(16, subStr(invSKS_EFT_FileDetail.PaymId, 5, 16), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                            }
                            else
                            {
                                fik = '15/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                            }
                            break;
                        case #FIK73:
                            fik = '73/';
                            break;
                        case #GIRO_01:
                            fik = '01/';
                            break;
                    }
            }
            if(fik)
            {
                if(printUtrd)
                {
                    //              2.99: Ustrd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invSKS_EFT_FileDetail.InvoiceNumber, 140, false);
                }

                //              2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

                //          2.120: CdtrRefInf
                nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));

                //              2.121: Tp
                nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));

                //                  2.122: CdOrPrtry
                nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

                //                      2.123: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');

                //               2.126: Ref
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', fik, 0, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_NoneOCR</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_NoneOCR(XmlElement _nodeCdtTrfTxInf)
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail, invSKS_EFT_FileDetailNoneOCR;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        XmlElement nodeRfrdDocAmt;
        XmlElement nodeRmtInf;
        boolean firstRec = true;
        boolean printUstrd = true;
        boolean printStrd;
        LedgerJournalTrans ledgerJournalTrans;

        select count(PaymentLineRecId) from invSKS_EFT_FileDetailNoneOCR where invSKS_EFT_FileDetailNoneOCR.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_NOCR:
                        printUstrd = false;
                        printStrd  = true;
                        break;
                    default:
                        printUstrd = true;
                        printStrd  = false;
                        break;
                }
                break;
            default:
                printUstrd = true;
                printStrd  = false;
                break;
        }
    
        if(invSKS_EFT_FileDetailNoneOCR.PaymentLineRecId == 1 && printUstrd)
        {
            this.node_CdtTrfTxInf_RmtInf_UstrdParms(_nodeCdtTrfTxInf);
        }
        else
        {
            while select  invSKS_EFT_FileDetail
                where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                   && invSKS_EFT_FileDetail.InvoiceNumber != ''
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                    if(invSKS_EFT_FileDetailNoneOCR.PaymentLineRecId > 1 && printStrd)
                    {
                        select crossCompany Txt from ledgerJournalTrans where
                                ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
                        //              Ustrd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', this.CharacterReplacement(ledgerJournalTrans.Txt), 140);
                    }
                    firstRec = false;
                }
    
                //               2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
                //              2.101: RfrdDocInf
                nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
                //              2.121: Tp
                nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
                //                  2.122: CdOrPrtry
                nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
                //              2.104: Cd
                if(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');
    
                    //               2.126: Ref
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', invSKS_EFT_FileDetail.InvoiceNumber, 0, false);
                    //              2.108: RltdDt
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
                    //               2.126: Ref
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', invSKS_EFT_FileDetail.InvoiceNumber, 0, false);
                    //              2.108: RltdDt
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
                }
                //              2.109 RfrdDocAmt
                nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
    
                this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_UstrdParms</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_UstrdParms(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invDetailsString;
    
        invDetailsString = this.getInvoiceDetails();

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SWIFT:
                        invDetailsString =  mSKS_EFT_FileDetail_Intermediary.IntBankAcct + ' ' + mSKS_EFT_FileDetail_Intermediary.IntBankName;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SWIFT:
                        invDetailsString =  mSKS_EFT_FileDetail_Intermediary.IntBankAcct + ' ' + mSKS_EFT_FileDetail_Intermediary.IntBankName;
                        break;
                }
                break;
        }
    
        if(invDetailsString)
        {
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', strReplace(invDetailsString,'/','.'), 140);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //                      9.1.17: SchmeNm
        //                          9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str        SenderId;
    
        SenderId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SenderId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(SenderId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', SenderId, 35);
    
            //                      9.1.17: SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));
    
            //                          9.1.18: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;
        batchCount++;
    
        // Select count and sum
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur), AccountCompany, AccountNum, PaymMode, PaymSpec, DepBankAccountId from tmpSKS_EFT_FileDetail
            where
                  tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                  tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                  tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                  tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                  tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                  tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                  tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode
            join WBenBankCountryRegionId, VendBankAccountId, PaymSpec, PaymMode, VendAccount, VendCompany from lSKS_EFT_VendorPaym
            where
                  lSKS_EFT_VendorPaym.VendCompany == tmpSKS_EFT_FileDetail.AccountCompany &&
                  lSKS_EFT_VendorPaym.VendAccount == tmpSKS_EFT_FileDetail.AccountNum &&
                  lSKS_EFT_VendorPaym.PaymMode == tmpSKS_EFT_FileDetail.PaymMode &&
                  lSKS_EFT_VendorPaym.PaymSpec == tmpSKS_EFT_FileDetail.PaymSpec &&
                  lSKS_EFT_VendorPaym.VendBankAccountId == tmpSKS_EFT_FileDetail.DepBankAccountId;        
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
    
        //      2.5: CtrlSum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        //      2.17: ReqdExctnDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));//SKS_VSTS_14224
    
        //      2.19: Dbtr
        this.node_PmtInf_Dbtr(nodePmtInf);
    
        //      2.20: DbtrAcct
        this.node_PmtInf_DbtrAcct(nodePmtInf);
    
        //      2.21: DbtrAgt
        this.node_PmtInf_DbtrAgt(nodePmtInf);
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        boolean     printStrdPstlAdr;
        boolean     printUstrdPstlAdr;
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #XPRS:
                        printUstrdPstlAdr = true;
                        break;
                    default:
                        printStrdPstlAdr = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #XPRS:
                    case #CBFT:
                    case #SEPA:
                    case #SWIFT:
                        printUstrdPstlAdr = true;
                        break;
                    default:
                        printStrdPstlAdr = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #XPRS:
                    case #CBFT:
                    case #SEPA:
                    case #SWIFT:
                        printUstrdPstlAdr = true;
                        break;
                    default:
                        printStrdPstlAdr = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':      //SKS_VSTS_13183
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #XPRS:
                        printUstrdPstlAdr = true;
                        break;
                    default:
                        printStrdPstlAdr = true;
                        break;
                }
                break;
            default: 
                printUstrdPstlAdr = true;
                break;
        }
        if(printStrdPstlAdr)
        {
            this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity, 0, mRemittanceAdrLine2, mRemittanceState, true);
        }
        else if(printUstrdPstlAdr)
        {
            this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
    
        //      override
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      9.1.1: PstlAdr
        //              9.1.10: Ctry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePstlAdr;
    
        //      9.1.1: PstlAdr
        nodePstlAdr = _nodeDbtr.appendChild(xmlDoc.createElement('PstlAdr'));
    
        //              9.1.10: Ctry
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //          Ccy
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        str        iban, acctNum;

        iban    = mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum = mSKS_EFT_FileDetail.BankBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_OCR:
                    case #P_NOCR:
                    case #P_TEXT:
                        acctNum = '';
                        break;
                }
                break;
        }

        if(iban || acctNum)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(iban)
            {
                //              IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //              Othr
                this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
            }
    
            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct_Id_Othr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct_Id_Othr(XmlElement _nodeAcctId)
    {
        //------------------------------------------------------------------------------------------------------
        //              Othr
        //                  Id
        //                  SchmeNm
        //                      Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str prtry, cd;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_BBOR:
                    case #P_BBOR_CN:
                    case #P_BBNOR_CN:
                    case #P_BBFTR:
                    case #P_BBAFTR_U:
                    case #P_BBAFTR_P:
                        prtry = 'BGNR';
                        break;
                    default:
                        cd = 'BBAN';
                        break;
                }
                break;
            default:
                cd = 'BBAN';
                break;
        }
        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            //              Othr
            nodeOthr = _nodeAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct);
    
            //                  SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
            if(prtry)
            {
                //                          Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', prtry);
            }
            else
            {
                //                          Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', cd);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
    
        if(mSKS_EFT_FileDetail.BankBankSwiftNo)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.BankBankSwiftNo, 0, false);
    
            //      6.1.8: PstlAdr
            this.node_PstlAdr(nodeFinInstnId, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId),'','','');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //              2.9: Cd
        //          2.11: LclInstrm
        //              2.13: Prtry
        //          2.14: CtgyPurp
        //              2.15: Cd
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmftTpInf;
        XmlElement nodeSvcLvl;
        XmlElement nodeLclInstrm;
        XmlElement nodeCtgyPurp;
        str lclInstrm, ctgyPurp;
        LogisticsAddressCountryRegionISOCode bankISOCountry;
    
        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.8: SvcLvl
        nodeSvcLvl = nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
        this.node_PmtInf_PmtTpInf_SvcLvl_Cd(nodeSvcLvl);
    
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SWIFT:
                    case #XPRS:
                    case #CBFT:
                        lclInstrm = 'IN';
                        break;
                    case #INTC:
                        if(mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SWIFT:
                    case #XPRS:
                    case #CBFT:
                        lclInstrm = 'IN';
                        break;
                    case #INTC:
                        if(mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                    case #STRF:
                        lclInstrm = 'SDCL';
                        ctgyPurp = 'INTC';
                        break;
                    case #CTRF:
                        bankISOCountry = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
                        if((mSKS_EFT_FileDetail.FormatId == 'EU-NORDEA-EGATE-DK' && bankISOCountry != 'DK') ||
                            mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SWIFT:
                    case #XPRS:
                    case #CBFT:
                        lclInstrm = 'IN';
                        break;
                    case #INTC:
                        if(mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SWIFT:
                    case #XPRS:
                    case #CBFT:
                        lclInstrm = 'IN';
                        break;
                    case #INTC:
                        if(mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-INT':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SWIFT:
                    case #XPRS:
                    case #CBFT:
                        lclInstrm = 'IN';
                        break;
                    case #INTC:
                        if(mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SWIFT:
                    case #XPRS:
                    case #CBFT:
                        lclInstrm = 'IN';
                        break;
                    case #INTC:
                        if(mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                    case #ICPS_HV:
                        ctgyPurp = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SWIFT:
                    case #XPRS:
                    case #CBFT:
                        lclInstrm = 'IN';
                        break;
                    case #INTC:
                        if(mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                    case #IC_PBAFTR:
                        ctgyPurp = 'INTC';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SWIFT:
                    case #XPRS:
                    case #CBFT:
                        lclInstrm = 'IN';
                        break;
                    case #INTC:
                        if(mSKS_EFT_FileDetail.CurrencyCode != mSKS_EFT_FileDetail.PaymentCurrencyCode)
                        {
                            lclInstrm = 'IN';
                        }
                        ctgyPurp = 'INTC';
                        break;
                }
                break;
        }
    
        if(lclInstrm)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              2.12: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', lclInstrm);
        }
    
        if(ctgyPurp)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', ctgyPurp);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
    
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #CHK_USTRD:
                    case #CHK_STRD:
                    case #CBFT:
                    case #SWIFT:
                        value = 'NURG';
                        break;
                    case #INTC:
                    case #WIRE:
                        value = 'SDVA';
                        break;
                    case #XPRS:
                        value = 'URGP';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CTRF:
                    case #STRF:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #GIRO_01:
                    case #GIRO_04:
                    case #GIRO_15:
                    case #CBFT:
                    case #SWIFT:
                    case #SEPA:
                    case #CPR:          //SKS#DevOps:15036
                    case #CVR:          //SKS#DevOps:15036
                        value = 'NURG';
                        break;
                    case #XPRS:
                        value = 'URGP';
                        break;
                    case #INTC:
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_OCR:
                    case #P_NOCR:
                    case #P_TEXT:
                    case #SWIFT:
                    case #CBFT:
                        value = 'NURG';
                        break;
                    case #XPRS:
                        value = 'URGP';
                        break;
                    case #SEPA:
                        value = 'SEPA';
                        break;
                    case #INTC:
                        value = 'SDVA';
                        break;
                    
                }
                break;
            case 'EU-NORDEA-EGATE-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #XPRS:
                        value = 'URGP';
                        break;
                    case #CBFT:
                    case #SWIFT:
                    case #SEPA:
                        value = 'NURG';
                        break;
                    case #INTC:
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-INT':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'SDVA';
                        break;
                    case #XPRS:
                        value = 'URGP';
                        break;
                    case #CBFT:
                    case #SEPA:
                    case #SWIFT:
                        value = 'NURG';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_KIDR:
                    case #P_KIDR_CN:
                    case #P_TNR_CN:
                    case #P_FTRUB:
                    case #SWIFT:
                    case #CBFT:
                    case #SEPA:
                        value = 'NURG';
                        break;
                    case #XPRS:
                        value = 'URGP';
                        break;
                    case #INTC:
                    case #SDS_HV:
                    case #ICPS_HV:
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_PPOR:
                    case #P_PPNOR_CN:
                    case #P_PPFTR:
                    case #P_PBOR:
                    case #P_PBNOR:
                    case #P_PBFTR:
                    case #P_PBAFTR_U:
                    case #P_PBAFTR_P:
                    case #P_BBOR:
                    case #P_BBOR_CN:
                    case #P_BBNOR_CN:
                    case #P_BBFTR:
                    case #P_BBAFTR_U:
                    case #P_BBAFTR_P:
                    case #SWIFT:
                    case #CBFT:
                    case #SEPA:
                        value = 'NURG';
                        break;
                    case #XPRS:
                        value = 'URGP';
                        break;
                    case #INTC:
                    case #IC_PBAFTR:
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACH_CCD:
                    case #ACH_CCDP:
                    case #CHK_USTRD:
                    case #CHK_STRD:
                    case #CBFT:
                    case #SWIFT:
                        value = 'NURG';
                        break;
                    case #XPRS:
                        value = 'URGP';
                        break;
                    case #WIRE:
                    case #INTC:
                        value = 'SDVA';
                        break;
                }
                break;
        }
        //              2.9: Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              CdtNoteAmt
        //              RmtdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        AmountMST   Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        AmountMST   Remitted;
        AmountMST   CreditNote;
    
        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Gross = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            Gross = (_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1;
            Discount = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
        }
    
        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchmeNm
        //                          Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        boolean    printDbtrId;
        str        printCode;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_OCR:
                    case #P_NOCR:
                    case #P_TEXT:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-US':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CBFT:
                        printDbtrId = true;
                        break;
                }
                break;
            case 'EU-NORDEA-EGATE-DK':
                printDbtrId = true;
                printCode = 'BANK';
                break;
            case 'EU-NORDEA-EGATE-NO':
                printDbtrId = true;
                printCode = 'BANK';
                break;
        }
        if(printDbtrId && mSKS_EFT_FileDetail_BankAccount.WOrdPartyId)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail_BankAccount.WOrdPartyId);
    
            //                      SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

            if(printCode)
            {    
                //                          Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', printCode);
            }
            else
            {
                //                          Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChqInstr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_ChqInstr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.52 ChqInstr
        //               ChqTp
        //               ChqNb
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeChqInstr;
        XmlElement nodeDlvryMtd;
        str dlvryMtd;
        
        //              2.52 ChqInstr
        nodeChqInstr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('ChqInstr'));
        
        //              2.54 ChqTp
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqTp', 'CCHQ');
        
        //              2.54 ChqNb
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqNb', this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35, false);
        
        //              2.58 DlvryMtd
        nodeDlvryMtd = nodeChqInstr.appendChild(xmlDoc.createElement('DlvryMtd'));
        
        dlvryMtd = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DlvryMtd', mSKS_EFT_FileDetail.RecId));
        
        //                  2.59: Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Cd', dlvryMtd, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        str value, Btchbkg;

        Btchbkg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-NORDEA-EGATE-FI':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #P_OCR:
                    case #P_NOCR:
                    case #P_TEXT:
                    case #CBFT:
                    case #SEPA:
                    case #SWIFT:
                    case #XPRS:
                    case #INTC:
                        if(strUpr(Btchbkg) == 'N')
                        {
                            value = 'false';
                        }
                        else
                        {
                            value = 'true';
                        }
                        break;
                    default:
                        value = 'true';
                        break;
                }
        }

        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;

        select * from mSKS_EFT_FileDetail
          join VendBankAccountId,
               PaymSpec,
               PaymMode,
               VendAccount,
               VendCompany,
               WBenBankCountryRegionId
          from lSKS_EFT_VendorPaym
        join mSKS_EFT_FileDetail_VendAddress
        join mSKS_EFT_FileDetail_BenBank
        join mSKS_EFT_FileDetail_Intermediary
          order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   lSKS_EFT_VendorPaym.WBenBankCountryRegionId,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.AccountCompany == lSKS_EFT_VendorPaym.VendCompany &&
                mSKS_EFT_FileDetail.AccountNum == lSKS_EFT_VendorPaym.VendAccount &&
                mSKS_EFT_FileDetail.PaymMode == lSKS_EFT_VendorPaym.PaymMode &&
                mSKS_EFT_FileDetail.PaymSpec == lSKS_EFT_VendorPaym.PaymSpec &&
                mSKS_EFT_FileDetail.DepBankAccountId == lSKS_EFT_VendorPaym.VendBankAccountId &&
                mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
                mSKS_EFT_FileDetail_BenBank.RefRecId == mSKS_EFT_FileDetail.RecId &&
                mSKS_EFT_FileDetail_Intermediary.RefRecId == mSKS_EFT_FileDetail.RecId;        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>