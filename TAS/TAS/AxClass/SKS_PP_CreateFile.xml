<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_CreateFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_CreateFile
{
    List gFileProfiles;
    boolean gExistingProfilesLoaded;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProfile</Name>
				<Source><![CDATA[
    private SKS_PP_FileFormatProfile addProfile(SKS_PP_FileFormat _SKS_PP_FileFormat,
                               LedgerJournalOffsetAccountName _AccountName,
                               ChequeStatus _ChequeStatus,
                               SKS_EB_CommID _SKS_EB_CommId,
                               container _companies,
                               NoYes _ServerSideProcessing,
                               SKS_BF_BankIntType _SKS_BF_BankIntType,
                               SKS_EB_FilePath _SKS_EB_FilePath,
                               SKS_EB_FileName _SKS_EB_FileName,
                               SKS_PP_HeadTrailId _SKS_PP_HeadTrailId,
                               NoYes _KeepDelete,
                               SelectableDataArea _CreateSendCpny)
    {
        SKS_PP_FileFormatProfile locSKS_PP_FileFormatProfile;
        SKS_PP_File locSKS_PP_File;
        boolean isVoids;
        ;
    
        if((_ChequeStatus == ChequeStatus::Cancelled) || (_ChequeStatus == ChequeStatus::Rejected) || (_ChequeStatus == ChequeStatus::Void))
            isVoids = true;
        else
            isVoids = false;
    
        locSKS_PP_File = this.createHeader(_SKS_PP_FileFormat.FormatID);
        locSKS_PP_FileFormatProfile = new SKS_PP_FileFormatProfile(_SKS_PP_FileFormat.FormatID,
                                                                    locSKS_PP_File.FileNbr,
                                                                    locSKS_PP_File.RecId,
                                                                    _AccountName,
                                                                    _SKS_PP_FileFormat.MultiAcctAllowed,
                                                                    !_SKS_PP_FileFormat.VoidChkSeparate,
                                                                    isVoids,
                                                                    gFileProfiles.elements() + 1,
                                                                    _SKS_EB_CommId,
                                                                    _ServerSideProcessing,
                                                                    _SKS_BF_BankIntType,
                                                                    _SKS_EB_FilePath,
                                                                    NoYes::Yes,
                                                                    _SKS_EB_FileName,
                                                                    _SKS_PP_HeadTrailId,
                                                                    _KeepDelete,
                                                                    _CreateSendCpny);
        gFileProfiles.addEnd(locSKS_PP_FileFormatProfile);
        return locSKS_PP_FileFormatProfile;
    
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVoids</Name>
				<Source><![CDATA[
    // Add voids from the last 60 days for this account
    // If an existing PP file that meets the criteria it will attach the voids to it
    // If a new PP file is needed it will create it and attach the voids
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer locBankChequeTable is selected forUpdate and is passed to other methods where it is modified.")]
    private void addVoids(SKS_PP_Bank _SKS_PP_Bank, SelectableDataArea _company, container _companies, SKS_BF_BankIntType _SKS_BF_BankIntType, SKS_PP_Setup _SKS_PP_Setup)
    {
        BankChequeTable locBankChequeTable;
        SKS_PP_FileFormatProfile locSKS_PP_FileFormatProfile;
        LedgerJournalTrans locLedgerJournalTrans;
        SKS_PP_ExcludedMOPs locSKS_PP_ExcludedMOPs;

        while select forupdate locBankChequeTable where
            locBankChequeTable.AccountID == _SKS_PP_Bank.BankAccountId &&
            locBankChequeTable.ChequeStatus == ChequeStatus::Rejected && // Rejected (aka voided)
            _SKS_PP_Setup.PPAPRejected == true &&
            locBankChequeTable.SKS_PP_FileNbr == '' && // Not attached to a file
            locBankChequeTable.TransDate > (DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - 60)// 60 days back
            notexists join locSKS_PP_ExcludedMOPs where locSKS_PP_ExcludedMOPs.PaymMode == locBankChequeTable.SKS_PP_PaymMode
                    && locSKS_PP_ExcludedMOPs.IncludeVoids != SKS_PP_IncludeVoids::yes
        {
                locSKS_PP_FileFormatProfile = this.getFormatProfile(_SKS_PP_Bank.PPFormatId,
                                                                    locBankChequeTable.AccountID,
                                                                    locBankChequeTable.ChequeStatus,
                                                                    _SKS_PP_Bank.PPOutCommID,
                                                                    _companies,
                                                                    _SKS_PP_Bank.PPPath,
                                                                    _SKS_PP_Bank.PPOutServerSideFileProc,
                                                                    _SKS_PP_Bank.PPFromSetup,
                                                                    _SKS_PP_Bank.PPFileName,
                                                                    _SKS_PP_Bank.PPHeadTrailId,
                                                                    _SKS_PP_Bank.PPDelete,
                                                                    _company,
                                                                    _SKS_BF_BankIntType,
                                                                    _SKS_PP_Bank.PPBankFabricLocation);
    
                this.updateBankCheque(locBankChequeTable, locSKS_PP_FileFormatProfile);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDetails</Name>
				<Source><![CDATA[
    private void createDetails(container _companies, boolean _isInBatch)
    {
        SKS_PP_500PPBas locSKS_PP_500PPBas;
        ListEnumerator locProfilesEnum;
        SKS_PP_FileFormatProfile locSKS_PP_FileFormatProfile;
        SKS_EB_CommProcess locSKS_PP_CommProcess;
        ;
    
        locSKS_PP_500PPBas = new SKS_PP_500PPBas();
        if(!gFileProfiles.empty())
        {
            locProfilesEnum = gFileProfiles.getEnumerator();
            while(locProfilesEnum.moveNext())
            {
                locSKS_PP_FileFormatProfile = locProfilesEnum.current();
                if(locSKS_PP_FileFormatProfile.getFileWillBeModified())
                {
                    select crossCompany:_companies  * from locSKS_PP_CommProcess where locSKS_PP_CommProcess.CommID == locSKS_PP_FileFormatProfile.getCommId();
                    changeCompany(locSKS_PP_FileFormatProfile.getCreateSendCpny())
                    {
                        locSKS_PP_500PPBas.AProcess_PP(locSKS_PP_FileFormatProfile.getFileNbr(),
                                                SKS_PP_NextActionDisplay::CreateSendFile,
                                                false,
                                                locSKS_PP_CommProcess,
                                                SKS_PP_Caller::OnPost,
                                                _isInBatch);
                    }
                }
    
    
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromLedgerJournalID</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer locBankChequeTable is selected forUpdate and is passed to other methods where it is modified.")]
    public void createFromLedgerJournalID(LedgerJournalId _LedgerJournalId, boolean _isInBatch, SKS_PP_Setup _SKS_PP_Setup)
    {
        LedgerJournalTrans locLedgerJournalTrans;
        BankChequeTable locBankChequeTable;
        SelectableDataArea locCompany;
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_PP_FileFormatProfile locSKS_PP_FileFormatProfile;
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        BankAccountTable locBankAccountTable;
        CompanyBankAccountId lastBankAccountId;
        SKS_BF_BankIntType  locSKS_BF_BankIntType;
        SKS_EB_FileName locSKS_EB_FileName;
        SKS_PP_ExcludedMOPs locSKS_PP_ExcludedMOPs;
        container companies;
    
        companies = SKS_EB_VirtualCompany::getPosPayCompanies();
        locSKS_BF_BankIntType = SKS_EB_FileStorage::getBankIntType(SKS_EB_Module::PP);
        while select BankChequeNum, JournalNum, OffsetLedgerDimension, PaymMode from locLedgerJournalTrans order by OffsetLedgerDimension where locLedgerJournalTrans.JournalNum == _LedgerJournalId
        {
            locBankAccountTable = BankAccountTable::findByLedgerDimension(locLedgerJournalTrans.OffsetLedgerDimension);
    
            select forupdate locBankChequeTable where
                locBankChequeTable.AccountID == locBankAccountTable.AccountID &&
                locBankChequeTable.ChequeNum == locLedgerJournalTrans.BankChequeNum &&
                locBankChequeTable.SKS_PP_FileNbr == '' //DO NOT SELECT ITEMS THAT ARE ATTACHED TO FILES ALREADY
            join locSKS_PP_Bank where
                locSKS_PP_Bank.BankAccountId == locBankChequeTable.AccountID &&
                locSKS_PP_Bank.PPFormatId != '';

            if(!locBankChequeTable)
            {
                continue;   
            }
            
            select locSKS_PP_ExcludedMOPs  where locSKS_PP_ExcludedMOPs.PaymMode ==  locBankChequeTable.SKS_PP_PaymMode;
            //If this is an excluded MOP, use the conditionals inside the block.
            if(locSKS_PP_ExcludedMOPs)
            {
                //Exclude if it isn't void or cancelled
                if(locBankChequeTable.ChequeStatus != ChequeStatus::Void && locBankChequeTable.ChequeStatus != ChequeStatus::Cancelled)
                    continue;
                //Exclude if it IS void, but the exclusion is not marked to include voids
                if((!locSKS_PP_ExcludedMOPs.IncludeVoids) && locBankChequeTable.ChequeStatus == ChequeStatus::Rejected)
                    continue;
                //Exclude if it IS cancelled, but the exclusion is not mared to inlcude cancelled
                if((!locSKS_PP_ExcludedMOPs.IncludeCancelled) && locBankChequeTable.ChequeStatus == ChequeStatus::Cancelled)
                    continue;
            }

            //If the setup specifies no cancelled cheques, then skip this cheque
            if(!_SKS_PP_Setup.PPAPRejected && (locBankChequeTable.ChequeStatus == ChequeStatus::Rejected || locBankChequeTable.ChequeStatus == ChequeStatus::Void))//shouldn't ever see "Voided" but 
                continue;
            else if(!_SKS_PP_Setup.PPAPCancelled && locBankChequeTable.ChequeStatus == ChequeStatus::Cancelled)
                continue;


            if(locSKS_PP_Bank)
            {
                locSKS_EB_FileName = locSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal ? locSKS_PP_Bank.PPFileName : '';
                select firstOnly CommID, CreateSendCpny, FileCreateType from locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == locSKS_PP_Bank.PPOutCommID;
                if(locSKS_EB_CommProcess.FileCreateType != SKS_EB_FileCreate::Manual)
                {
                    if(locSKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime && locSKS_EB_CommProcess.CreateSendCpny != '')
                    {
                        locCompany = locSKS_EB_CommProcess.CreateSendCpny;
                    }
                    else
                    {
                        locCompany = locSKS_PP_Bank.company();
                    }
    
                    locSKS_PP_FileFormatProfile = this.getFormatProfile(locSKS_PP_Bank.PPFormatId,
                                                                        locBankChequeTable.AccountID,
                                                                        locBankChequeTable.ChequeStatus,
                                                                        locSKS_PP_Bank.PPOutCommID,companies,
                                                                        locSKS_PP_Bank.PPPath,
                                                                        locSKS_PP_Bank.PPOutServerSideFileProc,
                                                                        locSKS_PP_Bank.PPFromSetup,
                                                                        locSKS_EB_FileName,
                                                                        locSKS_PP_Bank.PPHeadTrailId,
                                                                        locSKS_PP_Bank.PPDelete,
                                                                        locCompany,
                                                                        locSKS_BF_BankIntType,
                                                                        locSKS_PP_Bank.PPBankFabricLocation);
                    this.updateBankCheque(locBankChequeTable, locSKS_PP_FileFormatProfile);
                                                                       
                    // See if voids exist for this account
                    if(locSKS_PP_Bank.BankAccountId != lastBankAccountId)
                    {
                        this.addVoids(locSKS_PP_Bank, locCompany, companies, locSKS_BF_BankIntType, _SKS_PP_Setup);
                    }
    
                    lastBankAccountId = locSKS_PP_Bank.BankAccountId;
                }
            }
        }
        this.updateAllFileHeaders();
        this.createDetails(companies, _isInBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    private SKS_PP_File createHeader(SKS_PP_FormatId _SKS_PP_FormatId)
    {
        SKS_PP_File locSKS_PP_File;
        //this may differ from the setup record queried in createFromLedgerJournalID in the case of
        //  creating the file in a different company.  Thus you need to query here for the record.
        ttsBegin;
        locSKS_PP_File.FileNbr = NumberSeq::newGetNum(SKS_PP_Setup::numRefPositivePayNextFileNumb()).num();
        ttsCommit;
    
        locSKS_PP_File.insert();
    
    
        return locSKS_PP_File;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatProfile</Name>
				<Source><![CDATA[
    private SKS_PP_FileFormatProfile getFormatProfile(SKS_PP_FormatId _FormatID,
                                    LedgerJournalOffsetAccountName _AccountName,
                                    ChequeStatus _ChequeStatus,
                                    SKS_EB_CommID _SKS_EB_CommID,
                                    container _companies,
                                    SKS_EB_FilePath _SKS_EB_FilePath,
                                    NoYes _ServerSideProcessing,
                                    NoYes _FromPPSetup,
                                    SKS_EB_FileName _SKS_EB_FileName,
                                    SKS_PP_HeadTrailId _SKS_PP_HeadTrailId,
                                    NoYes _KeepDelete,
                                    SelectableDataArea _CreateSendCpny,
                                    SKS_BF_BankIntType _SKS_BF_BankIntType,
                                    SKS_EB_FilePath _PPBankFabricLocation)
    {
        SKS_PP_FileFormatProfile rtnval;
        ListEnumerator locProfilesEnum;
        SKS_PP_FileFormat locSKS_PP_FileFormat;
        SKS_PP_Setup locSKS_PP_Setup;
        NoYes locServerSideProcessing;
        SKS_EB_FilePath locSKS_EB_FilePath;
        boolean matchFound;
        boolean chequeIsVoid;
        ;
                                         
    
        if((_ChequeStatus == ChequeStatus::Cancelled) || (_ChequeStatus == ChequeStatus::Rejected) || (_ChequeStatus == ChequeStatus::Void))
            chequeIsVoid = true;
        else
            chequeIsVoid = false;
    
        matchFound = false;
    
        select firstOnly * from locSKS_PP_FileFormat where locSKS_PP_FileFormat.FormatId == _FormatID;
        ttsbegin;
    
        //The filename and path are defined in the cheque's bank account, not the Create and Send Company,
        //  so, we need to get those prior to changing companies.
        select PPOutServerSideFileProc, PPPath from locSKS_PP_Setup;
            if(_FromPPSetup)
            {
                locServerSideProcessing = locSKS_PP_Setup.PPOutServerSideFileProc;
            locSKS_EB_FilePath = _SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal ? locSKS_PP_Setup.PPPath : locSKS_PP_Setup.PPBankFabricLocation;
            }
            else
            {
                locServerSideProcessing = _ServerSideProcessing;
            locSKS_EB_FilePath = _SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal ? _SKS_EB_FilePath : _PPBankFabricLocation;
            }
        changeCompany(_CreateSendCpny)//Need the processing information for the company the formatid specifices to process in.
        {
    
            if(!gExistingProfilesLoaded)
            {
                this.loadExistingProfiles();
                gExistingProfilesLoaded = true;
            }
    
            if(gFileProfiles.empty())//NO FILER HEADERS CREATED. Create the initial
                rtnval = this.addProfile(locSKS_PP_FileFormat,
                                        _AccountName,
                                        _ChequeStatus,
                                        _SKS_EB_CommID,
                                        _companies,
                                        locServerSideProcessing,
                                        _SKS_BF_BankIntType,
                                        locSKS_EB_FilePath,
                                        _SKS_EB_FileName,
                                        _SKS_PP_HeadTrailId,
                                        _KeepDelete,
                                        _CreateSendCpny);
            else
            {
                locProfilesEnum = gFileProfiles.getEnumerator();
                while((locProfilesEnum.moveNext()) && (!matchFound))
                {
                    rtnval = locProfilesEnum.current();
                    matchFound = true;//if this fails any checks, it will go to false and skip additional comparisons.
                    if(rtnval.getFormatId() != _FormatID)
                        matchFound = false;
    
                    if(matchFound)
                        if(rtnval.getAccountID() != _AccountName)
                            if(!rtnval.getMultipleAccountsAllowed())
                                matchFound = false;
    
                    if(matchFound)
                        if(rtnval.getSKS_BF_BankIntType() != _SKS_BF_BankIntType)
                            matchFound = false;

                    if(matchFound)
                        if(rtnval.getPath() != locSKS_EB_FilePath)
                            matchFound = false;
    
                    if(matchFound)
                        if(rtnval.getServerSideProcessing() != _ServerSideProcessing)
                            matchFound = false;
    
                    if(matchFound)
                        if(rtnval.getFileName() != _SKS_EB_FileName)
                            matchFound = false;
    
                    if(matchFound)
                        if(rtnval.getHeadTrailId() != _SKS_PP_HeadTrailId)
                            matchFound =  false;
    
                    if(matchFound)
                        if(rtnval.getKeepDelete() != _KeepDelete)
                            matchFound = false;
    
                    if(rtnval.getCommId() != _SKS_EB_CommID)
                        matchFound = false;
    
                    if(matchFound)
                        if(!rtnval.getVoidsAllowed())//if voids are allowed,skip check to see if this file accepts the current cheque's status
                            if(rtnval.getIsVoids() && !chequeIsVoid)//if current file is voids and the check is not void fail comparison
                                matchFound = false;
                            else if(!rtnval.getIsVoids() && chequeIsVoid)//if current file is not voids and the check is void fail comparison
                                matchFound = false;
    
                    //KEEP FOLLOWING THE DECISION TREE FOR FILE SELECTION
                    if(matchFound)//we have found the correct Fileformate
                      rtnval.setFileWillBeModified(NoYes::Yes);
    
    
                }//END while((locProfilesEnum.moveNext()) && (!matchFound))
    
                if(!matchFound)//No match was found.  Create new PP File Header
                    rtnval = this.addProfile(locSKS_PP_FileFormat,
                                            _AccountName,
                                            _ChequeStatus,
                                            _SKS_EB_CommID,
                                            _companies,
                                            locServerSideProcessing,
                                            _SKS_BF_BankIntType,
                                            locSKS_EB_FilePath,
                                            _SKS_EB_FileName,
                                            _SKS_PP_HeadTrailId,
                                            _KeepDelete,
                                            _CreateSendCpny);
    
            }
        }
        ttscommit;
        return rtnval;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadExistingProfiles</Name>
				<Source><![CDATA[
    private void loadExistingProfiles()
    {
        SKS_PP_File locSKS_PP_File;
        SKS_PP_FileDetail locSKS_PP_FileDetail;
        SKS_PP_FileFormatProfile locSKS_PP_FileFormatProfile;
        SKS_PP_FileFormat locSKS_PP_FileFormat;
        SKS_EB_CommProcess locSKS_EB_CommProcess;
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_EB_FileName locSKS_EB_FileName;
        boolean isVoids;
        NoYes locServerSideProcessing;
        ;
    
    
        while Select * from locSKS_PP_File where locSKS_PP_File.KeepDelete == SKS_PP_FileStatus::NotProcessed
        {
            select firstOnly FileCreateType from locSKS_EB_CommProcess where locSKS_EB_CommProcess.CommID == locSKS_PP_File.CommID;
            if(locSKS_EB_CommProcess.FileCreateType != SKS_EB_FileCreate::Manual)
            {
                select firstonly count(RecId), maxof(ChkType) from locSKS_PP_FileDetail where
                    locSKS_PP_FileDetail.FileNbr == locSKS_PP_File.FileNbr &&
                    locSKS_PP_FileDetail.RecSection == SKS_PP_RecSection::Payments;
    
                if((locSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::CancelledCheque) || (locSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::RejectedCheque) || (locSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::VoidCheque))
                    isVoids = true;
                else
                    isVoids = false;
    
                select firstOnly * from locSKS_PP_FileFormat where locSKS_PP_FileFormat.FormatId == locSKS_PP_File.FormatId;
    
                locSKS_PP_Bank = SKS_PP_CreateFile::findBankByFileNbr(locSKS_PP_File);
                locSKS_EB_FileName = locSKS_PP_File.SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal ? locSKS_PP_Bank.PPFileName : '';
                locServerSideProcessing =locSKS_PP_Bank.PPOutServerSideFileProc;
    
                if(!locSKS_PP_FileFormat.VoidChkSeparate)
                    isVoids = false;  //if it doesn't matter, just set the isVoids to false.
    
    
                locSKS_PP_FileFormatProfile = new SKS_PP_FileFormatProfile(locSKS_PP_File.FormatId,
                                                                        locSKS_PP_File.FileNbr,
                                                                        locSKS_PP_File.RecId,
                                                                        locSKS_PP_Bank.BankAccountId,
                                                                        locSKS_PP_FileFormat.MultiAcctAllowed,
                                                                        !locSKS_PP_FileFormat.VoidChkSeparate,
                                                                        isVoids,
                                                                        gFileProfiles.elements() + 1,
                                                                        locSKS_PP_File.CommID,
                                                                        locServerSideProcessing,
                                                                        locSKS_PP_File.SKS_BF_BankIntType,
                                                                        locSKS_PP_File.FilePath,
                                                                        NoYes::No,
                                                                        locSKS_EB_FileName,
                                                                        locSKS_PP_Bank.PPHeadTrailId,
                                                                        locSKS_PP_Bank.PPDelete,
                                                                        locSKS_PP_File.company());//the file already exists; it's create and send company is the company it is already in.
    
                locSKS_PP_FileFormatProfile.setChequeTotal(locSKS_PP_File.ChequeTotal);

                locSKS_PP_FileFormatProfile.setChequeCount(int642int(locSKS_PP_FileDetail.RecId));
    
                gFileProfiles.addEnd(locSKS_PP_FileFormatProfile);
            }
    
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        gFileProfiles = new List(Types::Class);
        gExistingProfilesLoaded = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllFileHeaders</Name>
				<Source><![CDATA[
    private void updateAllFileHeaders()
    {
        ListEnumerator locProfilesEnum;
        SKS_PP_FileFormatProfile locSKS_PP_FileFormatProfile;
    
        ;
    
        if(!gFileProfiles.empty())
        {
            locProfilesEnum = gFileProfiles.getEnumerator();
            while(locProfilesEnum.moveNext())
            {
                locSKS_PP_FileFormatProfile = locProfilesEnum.current();
                locSKS_PP_FileFormatProfile.updateFileHeader();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCheque</Name>
				<Source><![CDATA[
    private void updateBankCheque(BankChequeTable _BankChequeTable, SKS_PP_FileFormatProfile _SKS_PP_FileFormatProfile)
    {
        _BankChequeTable.SKS_PP_FileNbr = _SKS_PP_FileFormatProfile.getFileNbr();
                    _BankChequeTable.SKS_PP_File_RecId = _SKS_PP_FileFormatProfile.getRecId();
        _SKS_PP_FileFormatProfile.addCheque(_BankChequeTable.AmountCur);
                    _BankChequeTable.Update();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountIdFind</Name>
				<Source><![CDATA[
    private static CompanyBankAccountId accountIdFind(
        LedgerDimensionDefaultAccount _dimension,
        container      _companies)
    {
        BankAccountTrans locBankAccountTrans;
        ;
    
        Select firstonly crossCompany:_companies accountid from locBankAccountTrans where locBankAccountTrans.LedgerDimension == _dimension;
    
        return locBankAccountTrans.AccountId;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBankByFileNbr</Name>
				<Source><![CDATA[
    Public static SKS_PP_Bank findBankByFileNbr(SKS_PP_File _SKS_PP_File)
    {
        BankChequeTable locBankChequeTable;
        SKS_PP_Bank locSKS_PP_Bank;
        ;
    
        select firstonly crossCompany RecId, DataAreaId, AccountID from locBankChequeTable
            where locBankChequeTable.SKS_PP_File_RecId == _SKS_PP_File.RecId
                join locSKS_PP_Bank
            where locSKS_PP_Bank.BankAccountId == locBankChequeTable.AccountID;
    
        // if no bank accout was found, throw error
            if(!locSKS_PP_Bank)
            {
            //There should always be a record found.
            //if one is not found...
            error(strFmt("@SKS3943",
                _SKS_PP_File.company(),
                _SKS_PP_File.FileNbr, _SKS_PP_File.company()));
            throw Exception::Error;
        }
    
        return locSKS_PP_Bank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    public static SKS_PP_FileName getFileName(SKS_PP_FileNbr _SKS_PP_FileNbr, SKS_PP_Bank _SKS_PP_Bank, SKS_PP_Setup _SKS_PP_Setup, SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        SKS_EB_FileName locFileName, locTempFileName;
        SKS_EB_FilePath locFilePath;
        str locExtension;
        int Pos;

        if(_SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            if ( _SKS_PP_Bank.PPFromSetup == NoYes::Yes)
            {
                locFilePath = _SKS_PP_Setup.PPPath;
                locTempFileName = _SKS_PP_Setup.PPFileName;
            }
            else
            {
                locFilePath = _SKS_PP_Bank.PPPath;
                locTempFileName = _SKS_PP_Bank.PPFileName;
            }
    
            if (_SKS_PP_Setup.PPFileNameAddFileNbr == NoYes::Yes || _sks_PP_Setup.PFileNameAddDate == NoYes::Yes)
            {
                Pos = strFind(locTempFileName, '.', 80, -80);
                if (Pos != 0)
                {
                    locFileName = substr(locTempFileName,0,Pos-1);
                    locExtension = substr(locTempFileName, Pos, strlen(locTempFileName));
                }
                else
                {
                    locFileName = locTempFileName;
                    locExtension ='';
                }
    
                if (_SKS_PP_Setup.PFileNameAddDate == NoYes::Yes)
                {
                    locFileName = locFileName + _SKS_PP_Setup.PPFileNameConnector + Date2Str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),321,2,0,2,0,4,DateFlags::None);
                }
    
                if (_SKS_PP_Setup.PPFileNameAddFileNbr == NoYes::Yes)
                {
                    locFileName = locFileName + _SKS_PP_Setup.PPFileNameConnector + _SKS_PP_FileNbr;
                }
    
                locFileName =  locFileName + locExtension;
            }
            else
            {
                locFileName = locTempFileName;
            }
        }
        else
            locFileName = '';
        return locFileName;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>PPCreate</Name>
				<Source><![CDATA[
    public static server void PPCreate(LedgerJournalTable _newLedgerJournalTable, LedgerJournalTable _origLedgerJounralTable, boolean _isInBatch = false)
    {
        SKS_PP_CreateFile locSKS_PP_CreateFile;
        SKS_PP_Setup locSKS_PP_Setup;
        ;
    
        if((_newLedgerJournalTable.Posted == NoYes::Yes) && (_origLedgerJounralTable.Posted == NoYes::No))
        {
            locSKS_PP_Setup = SKS_PP_Setup::find();
            //verify the user has Postiive Pay enabled in setup
            if(!locSKS_PP_Setup || locSKS_PP_Setup.ModPosPay == NoYes::No)
            {
                return;
            }
    
            locSKS_PP_CreateFile = new SKS_PP_CreateFile();
    
            if((_newLedgerJournalTable.JournalType == LedgerJournalType::Payment) ||
                (_newLedgerJournalTable.JournalType == LedgerJournalType::CustPayment) ||
                (_newLedgerJournalTable.JournalType == LedgerJournalType::PayrollDisbursement) || 
                (_newLedgerJournalTable.JournalType == LedgerJournalType::BankChequeReversal))
            {
                locSKS_PP_CreateFile.createFromLedgerJournalID(_newLedgerJournalTable.JournalNum, _isInBatch, locSKS_PP_Setup);
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>PPFileCreateTypeChanged</Name>
				<Source><![CDATA[
    public static server void PPFileCreateTypeChanged(SKS_EB_CommProcess _newSKS_EB_CommProcess, SKS_EB_CommProcess _origSKS_EB_CommProcess)
    {
    
        SKS_PP_File locSKS_PP_File;
        ;
    
        //if the user has changed an existing commid from a manual to fixed time, we'll need to create the SKS_PPDetails Records
        if((_newSKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::FixedTime) && (_origSKS_EB_CommProcess.FileCreateType == SKS_EB_FileCreate::Manual))
        {
    
            while select crossCompany FileNbr, FormatId, DataAreaId  from locSKS_PP_File where locSKS_PP_File.CommID == _newSKS_EB_CommProcess.CommID &&
                                                            locSKS_PP_File.KeepDelete == SKS_PP_FileStatus::NotProcessed &&
                                                            locSKS_PP_File.ChequeCount > 0
            {
    
                changeCompany(locSKS_PP_File.Company())
                {
                    SKS_PP_500PPBas::BuildWorkingTablePP(locSKS_PP_File.FormatId, locSKS_PP_File);
                }
    
            }
    
    
        }
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>