<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CD_SOFIBANQUE_MT101</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CD_SOFIBANQUE_MT101
/// </summary>
class SKS_EFT_Format_CD_SOFIBANQUE_MT101 extends  SKS_EFT_Format
{
    #define.FormatVersion('20220615')
    #define.DOM('DOM')
    #define.INTL('INTL')

    BankAccountTable mBankAccountTable;
    AmountMST mPaymentAmount;
    SKS_EFT_SequenceNumber  mSequenceNumber;
    real numOfOrders;
    boolean firstPayment = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        this.rec_BasicHeader();
        this.rec_20();
        this.rec_28D();
        this.rec_50();
        this.rec_30();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get SKS_EFT_FileDetail_BankAccount
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
            
            this.rec_21();
            this.rec_32B();
            this.rec_57A();
            this.rec_59A();
            this.rec_70();
            this.rec_71A();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BasicHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_BasicHeader
    /// </summary>
    /// <returns>true</returns>
    boolean rec_BasicHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //      BASIC HEADER BLOCK
        sb.Append('{1:F01');

        sb.Append(subStr(strUpr(mSKS_EFT_FileDetail.BankBankSwiftNo), 1, 8));
    
        sb.Append('AXXX');

        sb.Append(SKS_PP_StringFormats::strTimeHHMM());

        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));
    
        sb.Append('}');

        //       APPLICATION HEADER BLOCK
        sb.Append('{2:O101');

        sb.Append(SKS_PP_StringFormats::strTimeHHMM());

        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        sb.Append(subStr(strUpr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId), 1, 8));
    
        sb.Append('AXXX');

        sb.Append(SKS_PP_StringFormats::strTimeHHMM());

        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None));

        sb.Append(SKS_PP_StringFormats::strTimeHHMM());

        sb.Append('N}');        

        //       TEXT BLOCK
        sb.Append('{4:');

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_20</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_20
    /// </summary>
    /// <returns>true</returns>
    boolean rec_20()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append(':20:');    
        
        //2     Number
        sb.Append(mSKS_EFT_File.FileNbr);
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_28D</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_28D
    /// </summary>
    /// <returns>true</returns>
    boolean rec_28D()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append(':28D:');
    
        //2     Customer Reference
        sb.Append('1/1');
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_50</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_50
    /// </summary>
    /// <returns>true</returns>
    boolean rec_50()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str address1;
        
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr || 
           mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)
        {
            sb.Append(':50H:/');
  
            sb.Append(mSKS_EFT_FileDetail.BankBankAcct);

            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
            {
                sb.AppendLine();
                sb.Append(this.CharacterReplacement(strUpr(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, 1, 35))));
            }

            //      Address
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr)
            {
                sb.AppendLine();
                sb.Append(this.CharacterReplacement(strUpr(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, 1, 35))));
            }

            //      Country, Town
            address1 = this.getLogisticsAddressCountryRegionName(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);

            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity && address1)
            {
                address1 = address1 + ',' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;
            }
            else if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
            {
                address1 = mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;
            }
            if(address1)
            {
                sb.AppendLine();
                sb.Append(this.CharacterReplacement(strUpr(subStr(address1, 1, 35))));
            }

            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_30</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_30
    /// </summary>
    /// <returns>true</returns>
    boolean rec_30()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append(':30:');
    
        //2     Requested Execution Date / Value Date
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_21</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_21
    /// </summary>
    /// <returns>true</returns>
    boolean rec_21()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append(':21:');
    
        //2     Transaction Reference
        sb.Append(strUpr(mSKS_EFT_FileDetail.PaymentReference));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_32B</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_32B
    /// </summary>
    /// <returns>true</returns>
    boolean rec_32B()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Tag
        sb.Append(':32B:');

        //2     Currency
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);

        //3     Transaction Amount
        sb.Append(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) ,0,2,2,0));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_57A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_57A
    /// </summary>
    /// <returns>true</returns>
    boolean rec_57A()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            sb.Append(':57A:');

            //      Beneficiary bank Swift address
            sb.Append(mSKS_EFT_FileDetail.DepSwiftNo);

            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_59A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_59A
    /// </summary>
    /// <returns>true</returns>
    boolean rec_59A()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str address1;

        if(mSKS_EFT_FileDetail.DepBankAcct           ||  mSKS_EFT_FileDetail.DepBankIBAN       || mSKS_EFT_FileDetail_VendAddress.BeneName  ||  
           mSKS_EFT_FileDetail_VendAddress.BeneAddr  || mSKS_EFT_FileDetail_VendAddress.BeneCity ||
           mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)
        {
            //1     Tag
            sb.Append(':59:');
    
            //2     Hyphen "/"
            sb.Append('/');

            //3     Beneficiary account number
            if(mSKS_EFT_FileDetail.DepBankIBAN)
            {
                sb.Append(mSKS_EFT_FileDetail.DepBankIBAN);
            }
            else if(mSKS_EFT_FileDetail.DepBankAcct)
            {
                sb.Append(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 34));
            }
            
            //4     Beneficiary name
            if(mSKS_EFT_FileDetail_VendAddress.BeneName)
            {
                sb.AppendLine();
                sb.Append(subStr(this.CharacterReplacement(strUpr(mSKS_EFT_FileDetail_VendAddress.BeneName)), 1, 35));
            }
            //      Address
            if(mSKS_EFT_FileDetail_VendAddress.BeneAddr)
            {
                sb.AppendLine();
                sb.Append(this.CharacterReplacement(strUpr(subStr(mSKS_EFT_FileDetail_VendAddress.BeneAddr, 1, 35))));
            }

            //      Country, Town
            address1 = LogisticsAddressCountryRegion::findByISOCode(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)).displayName();

            if(mSKS_EFT_FileDetail_VendAddress.BeneCity && address1)
            {
                address1 = address1 + ',' + mSKS_EFT_FileDetail_VendAddress.BeneCity;
            }
            else if(mSKS_EFT_FileDetail_VendAddress.BeneCity)
            {
                address1 = mSKS_EFT_FileDetail_VendAddress.BeneCity;
            }
            if(address1)
            {
                sb.AppendLine();
                sb.Append(this.CharacterReplacement(strUpr(subStr(address1, 1, 35))));
            }
        }
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_70</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_70
    /// </summary>
    /// <returns>true</returns>
    boolean rec_70()
    {
        str invoiceDetails;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        invoiceDetails = strUpr(this.getInvoiceNbrs());
        if(invoiceDetails)
        {
            //1     Tag
            sb.Append(':70:');
    
            //2    Payment details
            sb.Append(subStr(invoiceDetails, 1, 35));

            if(strLen(invoiceDetails) > 35)
            {
                sb.AppendLine();
                sb.Append(subStr(invoiceDetails, 35, 35));
            }
            if(strLen(invoiceDetails) > 70)
            {
                sb.AppendLine();
                sb.Append(subStr(invoiceDetails, 70, 35));
            }
        
            if(strLen(invoiceDetails) > 105)
            {
                sb.AppendLine();
                sb.Append(subStr(invoiceDetails, 105, 35));
            }

            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_71A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_71A
    /// </summary>
    /// <returns>true</returns>
    boolean rec_71A()
    {
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Tag
        sb.Append(':71A:');
    
        //2    cost accounting
        sb.Append(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)));

        if(firstPayment)
        {
            select COUNT(InvoiceOrigAmountCur) from tmpSKS_EFT_FileDetail
                where
                    tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

            numOfOrders = tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur;

            firstPayment = false;
        }

        if(numOfOrders == 1)
        {
            sb.AppendLine();
            sb.Append('-}{5:{MAC:00000000}{CHK:BDCCA571E02A}{TNG:}}{S:{SAC:}{COP:S}}');
        }
        numOfOrders--;

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(', ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_BankAccount
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>