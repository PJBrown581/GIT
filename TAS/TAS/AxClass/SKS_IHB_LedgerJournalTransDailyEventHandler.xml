<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_LedgerJournalTransDailyEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// General journal event handler for IHB IntercoCompany accounts.
/// </summary>
// SKS_10238 CR
class SKS_IHB_LedgerJournalTransDailyEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkProject</Name>
				<Source><![CDATA[
    public static void checkProject(SelectableDataArea _offsetCompany, LedgerJournalACType _offsetAccountType)
    {
        // Project does not support intercompany
        if(_offsetAccountType == LedgerJournalACType::Project &&
            _offsetCompany &&
            strUpr(_offsetCompany) != strUpr(curext()) &&
            isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        {
            error(strFmt("@SYS75337", "@SYS80304"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableSKS_IHB_InterCompany</Name>
				<Source><![CDATA[
    private static void enableSKS_IHB_InterCompany(FormDataSource sender)
    {
        FormRun formRun = sender.formRun();
        FormDataSource ledgerJournalTrans_ds = sender;
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        SegmentedEntryControl sks_IHB_ledgerDimensionField = formrun.design().controlName(formControlStr(LedgerJournalTransDaily, SKS_IHB_InterCompany_SKS_IHB_IntercoLedgerDimension));
        SKS_PP_Bank         sKS_PP_Bank;
        SKS_PP_Bank         sKS_PP_BankLoc;

        if(ledgerJournalTrans.AccountType ==  LedgerJournalACType::Bank &&
            ledgerJournalTrans.LedgerDimension &&
            ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
            ledgerJournalTrans.OffsetLedgerDimension)
        {
            sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension), ledgerJournalTrans.OffsetCompany);
            sKS_PP_BankLoc = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension), ledgerJournalTrans.Company);
            if((sKS_PP_Bank && !sKS_PP_BankLoc) || (sKS_PP_BankLoc && !sKS_PP_Bank))
            {
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransDaily, SKS_IHB_InterCompany)).enabled(true);
            }
            else
            {
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransDaily, SKS_IHB_InterCompany)).enabled(false);
            }
        }
        // SKS_bug_10358 -->
        else
        {
            if(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                ledgerJournalTrans.OffsetLedgerDimension)
            {
                if(SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension), ledgerJournalTrans.OffsetCompany))
                {
                    formrun.design().controlName(Formcontrolstr(LedgerJournalTransDaily, SKS_IHB_InterCompany)).enabled(true);
                }
                else
                {
                    formrun.design().controlName(Formcontrolstr(LedgerJournalTransDaily, SKS_IHB_InterCompany)).enabled(false);
                }
            }
            // SKS_Bug_10358 <--
            else if(ledgerJournalTrans.AccountType ==  LedgerJournalACType::Bank &&
                ledgerJournalTrans.LedgerDimension)
            {
                if(SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension), ledgerJournalTrans.Company))
                {
                    formrun.design().controlName(Formcontrolstr(LedgerJournalTransDaily, SKS_IHB_InterCompany)).enabled(true);
                }
                else
                {
                    formrun.design().controlName(Formcontrolstr(LedgerJournalTransDaily, SKS_IHB_InterCompany)).enabled(false);
                }
            }
            else
            {
                formrun.design().controlName(Formcontrolstr(LedgerJournalTransDaily, SKS_IHB_InterCompany)).enabled(false);
            }
        }
        // SKS_bug_10358
        if(ledgerJournalTrans.SKS_IHB_IntercoCompany)
        {
            sks_IHB_ledgerDimensionField.parmDataAreaId(ledgerJournalTrans.SKS_IHB_IntercoCompany);
        }
        else
        {
            sks_IHB_ledgerDimensionField.parmDataAreaId(strUpr(curExt()));
        }

        
        // SKS_FDD_9536 -->

        FormControl sKS_EFTGL_IHBBankAccount = formrun.design().controlName(formControlStr(LedgerJournalTransDaily, LedgerJournalTrans_SKS_EFTGL_IHBBankAccount));
        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();

        // SKS_FDD_9536 -->
        if((ledgerJournalTrans.Company != curExt() || ledgerJournalTrans.Company != ledgerJournalTrans.OffsetCompany) && sKS_PP_Setup.IHB_Active)
        {
            sKS_EFTGL_IHBBankAccount.enabled(true);
        }
        else
        {
            sKS_EFTGL_IHBBankAccount.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransDaily, LedgerJournalTrans), FormDataSourceEventType::Activated)]
    public static void LedgerJournalTrans_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        SKS_IHB_LedgerJournalTransDailyEventHandler::enableSKS_IHB_InterCompany(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_Pre_modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, modifiedField))]
    public static void LedgerJournalTrans_Pre_modifiedField(XppPrePostArgs args)
    {
        LedgerJournalTable ledgerJournalTable;
        SKS_PP_Bank         sKS_PP_Bank;
        SKS_PP_Bank         sKS_PP_BankLoc;
        LedgerJournalTrans ledgerJournalTrans = args.getThis() as LedgerJournalTrans;
        FieldId fieldId = args.getArg('_fieldId');

        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        if(ledgerJournalTable.JournalType == LedgerJournalType::Daily &&
            !ledgerJournalTable.SKS_EFTAP_IsIHBJournal && !ledgerJournalTable.SKS_EFTAR_IsIHBJournal)
        {
            switch (fieldId)
            {
                case fieldNum(LedgerJournalTrans, LedgerDimension):
                case fieldNum(LedgerJournalTrans, OffsetLedgerDimension):
                    if(ledgerJournalTrans.AccountType == LedgerJournalACType::Bank ||
                        ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
                    {
                        if(ledgerJournalTrans.OffsetLedgerDimension)
                        {
                            sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension), ledgerJournalTrans.OffsetCompany);
                        }
                        if(ledgerJournalTrans.LedgerDimension)
                        {
                            sKS_PP_BankLoc = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension), ledgerJournalTrans.Company);
                        }
                        if(sKS_PP_Bank && !sKS_PP_BankLoc)
                        {
                            ledgerJournalTrans.SKS_IHB_IntercoCompany = sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany;
                        }
                        else if(!sKS_PP_Bank && sKS_PP_BankLoc)
                        {
                            ledgerJournalTrans.SKS_IHB_IntercoCompany = sKS_PP_BankLoc.SKS_IHBLinkedinhousebankcompany;
                        }
                        else
                        {
                            ledgerJournalTrans.SKS_IHB_IntercoCompany = '';
                            ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension = 0;
                        }
                    }
                    else
                    {
                        ledgerJournalTrans.SKS_IHB_IntercoCompany = '';
                        ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension = 0;
                    }
                    break;
                case fieldNum(LedgerJournalTrans, SKS_IHB_IntercoCompany):
                case fieldNum(LedgerJournalTrans, SKS_IHB_IntercoAccountType):
                    SKS_IHB_LedgerJournalTransDailyEventHandler::checkProject(ledgerJournalTrans.SKS_IHB_IntercoCompany, ledgerJournalTrans.SKS_IHB_IntercoAccountType);
                    ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension = 0;
                    break;
                case fieldNum(LedgerJournalTrans, OffsetCompany):

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_onValidatedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [DataEventHandler(tableStr(LedgerJournalTrans), DataEventType::ValidatedField)]
    public static void LedgerJournalTrans_onValidatedField(Common sender, DataEventArgs e)
    {
        boolean ret;
        ValidateFieldEventArgs fieldevent = e as ValidateFieldEventArgs;
        FieldId fieldId = fieldevent.parmFieldId();
        LedgerJournalTrans  ledgerJournalTrans = sender;
        NoYes IHB_Active = SKS_PP_Setup::find().IHB_Active;

        if(fieldId == fieldNum(LedgerJournalTrans, SKS_IHB_IntercoLedgerDimension)
            && ledgerJournalTrans.SKS_IHB_IntercoAccountType == LedgerJournalACType::Bank
            && SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension), ledgerJournalTrans.SKS_IHB_IntercoCompany))
        {
            ret = checkFailed("@SKS:SKGIHBIntercoBankVal");
        }
        else if ((fieldId == fieldNum(LedgerJournalTrans, LedgerDimension) && (!ledgerJournalTrans.DefaultDimension && IHB_Active))
                || (fieldId == fieldNum(LedgerJournalTrans, OffsetLedgerDimension) && (!ledgerJournalTrans.OffsetDefaultDimension && IHB_Active)))
        {
            ledgerJournalTrans.modifiedField(fieldId);
        }

        if(ret && IHB_Active)
        {
            fieldevent.parmValidateResult(ret);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerDimension_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable IHBInterco account fields.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, LedgerDimension), FormDataFieldEventType::Validated)]
    public static void LedgerDimension_OnValidated(FormDataObject sender, FormDataFieldEventArgs e)
    {
        SKS_IHB_LedgerJournalTransDailyEventHandler::enableSKS_IHB_InterCompany(sender.datasource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>OffsetLedgerDimension_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable IHBInterco account fields.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransDaily, LedgerJournalTrans, OffsetLedgerDimension), FormDataFieldEventType::Validated)]
    public static void OffsetLedgerDimension_OnValidated(FormDataObject sender, FormDataFieldEventArgs e)
    {
        SKS_IHB_LedgerJournalTransDailyEventHandler::enableSKS_IHB_InterCompany(sender.datasource());
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTransDaily_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// IntercoLedgerdimension change based on company.
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(LedgerJournalTransDaily), formMethodStr(LedgerJournalTransDaily, init))]
    public static void LedgerJournalTransDaily_Post_init(XppPrePostArgs args)
    {
        FormRun formrun = args.getThis() as FormRun;
        SegmentedEntryControl sks_IHB_ledgerDimensionField = formrun.design().controlName(formControlStr(LedgerJournalTransDaily, SKS_IHB_InterCompany_SKS_IHB_IntercoLedgerDimension));
        sks_IHB_ledgerDimensionField.parmDimensionAutocompleteFilter(
            new DimensionAutocompleteVendDefaultFilter(formrun.dataSource(), fieldStr(LedgerJournalTrans, SKS_IHB_IntercoLedgerDimension), fieldStr(LedgerJournalTrans, SKS_IHB_IntercoAccountType)));
        sks_IHB_ledgerDimensionField.parmPostingType(LedgerPostingType::LedgerJournal);
        sks_IHB_ledgerDimensionField.parmValidateBlockedForManualEntry(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_IHB_InterCompany_SKS_IHB_IntercoCompany_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///  IntercoLedgerdimension change based on company.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransDaily, SKS_IHB_InterCompany_SKS_IHB_IntercoCompany), FormControlEventType::Modified)]
    public static void SKS_IHB_InterCompany_SKS_IHB_IntercoCompany_OnModified(FormControl sender, FormControlEventArgs e)
    {
        FormRun formrun = sender.formRun();
        LedgerJournalTrans ledgerJournalTrans = formrun.dataSource().cursor();
        SegmentedEntryControl sks_IHB_ledgerDimensionField = formrun.design().controlName(formControlStr(LedgerJournalTransDaily, SKS_IHB_InterCompany_SKS_IHB_IntercoLedgerDimension));
        if(ledgerJournalTrans.SKS_IHB_IntercoCompany)
        {
            sks_IHB_ledgerDimensionField.setDataAreaId(ledgerJournalTrans.SKS_IHB_IntercoCompany);
        }
        else
        {
            sks_IHB_ledgerDimensionField.setDataAreaId(strUpr(curExt()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>