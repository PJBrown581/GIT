<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_SUA_28</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_SUA_28 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_SUA_28 extends SKS_EFT_Format
{
    #define.FormatVersion('20221122')
    SKS_EFT_SequenceNumber mSequenceNumber;
    str mIntId;
    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    //JPMChase Single-Use Accounts v2.8
    //PIF Comma Delineated File
    //Interchange Record
    //  Payment Record
    //      Custom Gateway Pyayment Fields Record (not used for SUA-AP
    //      Remittance Header Record
    //          Remittance Detail Record
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Selecting a local table buffer based on a global table buffer attribute)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
        ;
    
        //Get sequence number
        this.getSequence();
    
        //Interchange Record
        select count(RecId) from lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                                 lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                                 lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    
        this.rec_IntCh(lSKS_EFT_FileDetail.RecId);
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            //  Payment Record
            this.rec_PayRec();
    
            //  Custom Gateway Pyayment Fields Record
            //(not used for SUA-AP)
    
            //  Remittance Header Record
            this.rec_RHeader();
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                //  Remittance Detail Record
                this.rec_RDetail(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
    
        //Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTimezone</Name>
				<Source><![CDATA[
    private str formatTimezone()
    {
        int tzOffset;
        str ret;
        ;
    
        tzOffset = any2Int(100 * DateTimeUtil::getTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone())/60);

        if(tzOffset < 0)
        {
            tzOffset = -1*tzOffset;
            ret = '-';
        }
        else
        {
            ret = '+';
        }
    
        ret += SKS_PP_StringFormats::strFill(4, int2str(tzOffset), 0, SKS_PP_FillSide::Left);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_POInfo</Name>
				<Source><![CDATA[
    private str get_POInfo(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        VendInvoiceJour vendInvoiceJour;
        Container companyInfo;
        str PONum = '';
        ;
    
        companyInfo += _invSKS_EFT_FileDetail.InvoiceCompany;
    
        // See if PO exists
        if(conPeek(companyInfo, 1) != '')
        {
            select firstOnly crossCompany:companyInfo PurchId, InvoiceAccount, InvoiceDate, InvoiceId from vendInvoiceJour where
                vendInvoiceJour.InvoiceAccount == _invSKS_EFT_FileDetail.AccountNum &&
                vendInvoiceJour.InvoiceDate == _invSKS_EFT_FileDetail.InvoiceDate &&
                vendInvoiceJour.InvoiceId == _invSKS_EFT_FileDetail.InvoiceNumber &&
                vendInvoiceJour.PurchId != '';
    
            if(vendInvoiceJour)
            {
                PONum = vendInvoiceJour.PurchId;
            }
        }
        return this.CharacterReplacement(PONum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IntCh</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID
    // 2    InterChangeID
    // 3    SequenceNumber
    // 4    DocumentType
    // 5    SenderID
    // 6    InterchangeDate
    // 7    InterchangeVersion
    // 8    DocumentCount
    
    public boolean rec_IntCh(int64 _documentcount)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str interDate = '';
        ;
    
        // 1    Record ID
        sb.Append(this.wrapField('100'));
    
        // 2    InterChangeID
        mIntId = int2str(mSequenceNumber) + SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate);
        sb.Append(this.wrapField(mIntId,true, 32));
    
        // 3    SequenceNumber
        sb.Append(this.wrapField(int2str(mSequenceNumber),true, 20));
    
        // 4    DocumentType
        sb.Append(this.wrapField('PAYMENT'));
    
        // 5    SenderID
        sb.Append(this.wrapField('JPMC_CLIENT'));
    
        // 6    InterchangeDate
        interDate += SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate);
        interDate += SKS_PP_StringFormats::strTimeHHMMSS();
        interDate += this.formatTimezone();
        sb.Append(this.wrapField(interDate));
    
        // 7    InterchangeVersion
        sb.Append(this.wrapField('3'));
    
        // 8    DocumentCount
        sb.Append(this.wrapField(int642str(_documentcount),false));
    
        this.fileWrite(sb.ToString());
    
        mSequenceNumber++;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayRec</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID
    // 2    Amount
    // 3    CheckNum
    // 4    NotBefore
    // 5    Payto
    // 6    BankCode
    // 7    BankAcct
    // 8    Currency
    // 9    SourceId
    //10    batchId
    //11    Batchtype
    //12    vendorid
    //13    setid
    //14    siteid
    //15    streetaddress1
    //16    streetaddress2
    //17    streetaddress3
    //18    streetaddress4
    //19    streetaddress5
    //20    city
    //21    state
    //22    zipcode
    //23    Country
    //24    memo
    //25    type
    //26    pcard_num ****
    //27    pcard_holdername ****
    //28    pcard_cvc2 ****
    //29    pcard_expire_mo
    //30    pcard_expire_yr
    //31    pcard_customer_code
    //32    pcard_auth_code
    //33    pcard_transactionid
    //34    cardpoolid
    //35    (customrecfield1)
    //36    (custemrecfield2)
    //37    (customrecfield3)
    //38    (customrecfield4)
    //39    (customrecfield5)
    //40    BusinessUnit
    //41    CostCenter
    //42    Entry Class Code
    //43    Transaction Type Code
    //44    Entry Description
    //45    Supplier Email
    //46    Pcard_enddate
    
    public boolean rec_PayRec()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //Nbr   Content
        // 1    Record ID
        sb.Append(this.wrapField('200'));
    
        // 2    Amount
        sb.Append(this.wrapField(num2str(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0),true,13));
    
        // 3    CheckNum
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),true, 15));
    
        // 4    NotBefore
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate)));
    
        // 5    Payto
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName),true, 76, true));
    
        // 6    BankCode
        sb.Append(this.wrapField(''));
    
        // 7    BankAcct
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct,true, 128));
    
        // 8    Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));
    
        // 9    SourceId
        sb.Append(this.wrapField('DYNAX'));
    
        //10    batchId
        sb.Append(this.wrapField(mIntId,true, 30));
    
        //11    Batchtype
        sb.Append(this.wrapField(''));
    
        //12    vendorid
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.VendAccount,true, 76));
    
        //13    setid
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.dataAreaId,true, 16));
    
        //14    siteid
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountCompany),true, 76));
    
        //15    streetaddress1
        sb.Append(this.wrapField(''));
    
        //16    streetaddress2
        sb.Append(this.wrapField(''));
    
        //17    streetaddress3
        sb.Append(this.wrapField(''));
    
        //18    streetaddress4
        sb.Append(this.wrapField(''));
    
        //19    streetaddress5
        sb.Append(this.wrapField(''));
    
        //20    city
        sb.Append(this.wrapField(''));
    
        //21    state
        sb.Append(this.wrapField(''));
    
        //22    zipcode
        sb.Append(this.wrapField(''));
    
        //23    Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail.DepCountryRegionId)));
    
        //24    memo
        sb.Append(this.wrapField(''));
    
        //25    type
        sb.Append(this.wrapField('1'));
    
        //26    pcard_num ****
        sb.Append(this.wrapField(''));
    
        //27    pcard_holdername ****
        sb.Append(this.wrapField(''));
    
        //28    pcard_cvc2 ****
        sb.Append(this.wrapField(''));
    
        //29    pcard_expire_mo
        sb.Append(this.wrapField(''));
    
        //30    pcard_expire_yr
        sb.Append(this.wrapField(''));
    
        //31    pcard_customer_code
        sb.Append(this.wrapField(''));
    
        //32    pcard_auth_code
        sb.Append(this.wrapField(''));
    
        //33    pcard_transactionid
        sb.Append(this.wrapField(''));
    
        //34    cardpoolid
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CardPoolId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))));
    
        //35    (customrecfield1)
        sb.Append(this.wrapField(''));
    
        //36    (custemrecfield2)
        sb.Append(this.wrapField(''));
    
        //37    (customrecfield3)
        sb.Append(this.wrapField(''));
    
        //38    (customrecfield4)
        sb.Append(this.wrapField(''));
    
        //39    (customrecfield5)
        sb.Append(this.wrapField(''));
    
        //40    BusinessUnit
        sb.Append(this.wrapField(''));
    
        //41    CostCenter
        sb.Append(this.wrapField(''));
    
        //42    Entry Class Code
        sb.Append(this.wrapField(''));
    
        //43    Transaction Type Code
        sb.Append(this.wrapField(''));
    
        //44    Entry Description
        sb.Append(this.wrapField(''));
    
        //45    Supplier Email
        sb.Append(this.wrapField('null@jpmchase.com'));
    
        //46    Pcard_enddate
        sb.Append(this.wrapField('',false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RDetail</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID
    // 2    InvoiceNumber
    // 3    invoiceDate
    // 4    invoiceinstallment
    // 5    totalinvoiceamount
    // 6    Amountofinvoice paid
    // 7    Discountamount taken
    // 8    adjustmentamount
    // 9    adjustmententry reason
    //10    ponumber
    //11    description
    
    public boolean rec_RDetail(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountCur invTotal;
    
        //Nbr   Content
        // 1    Record ID
        sb.Append(this.wrapField('310'));
    
        // 2    InvoiceNumber
        sb.Append(this.wrapField(_invSKS_EFT_FileDetail.InvoiceNumber, true, 50));
    
        // 3    invoiceDate
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate)));
    
        // 4    invoiceinstallment
        sb.Append(this.wrapField(''));
    
        // 5    totalinvoiceamount
        invTotal = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
        sb.Append(this.wrapField(num2str(-1*invTotal,0,2,1,0), true, 13));
    
        // 6    Amountofinvoice paid
        sb.Append(this.wrapField(num2str(-1*_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0), true, 13));
    
        // 7    Discountamount taken
        sb.Append(this.wrapField(num2str(-1*_invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur,0,2,1,0), true, 13));
    
        // 8    adjustmentamount
        sb.Append(this.wrapField('0'));
    
        // 9    adjustmententry reason
        sb.Append(this.wrapField(''));
    
        //10    ponumber
        sb.Append(this.wrapField(this.get_POInfo(_invSKS_EFT_FileDetail)));
    
        //11    description
        sb.Append(this.wrapField(this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceTransactionTxt), false, 0, true));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RHeader</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID
    
    public boolean rec_RHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //Nbr   Content
        // 1    Record ID
        sb.Append(this.wrapField('300',false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _addSeparator = true, int _fieldLength = 0, boolean _quotes = false)
    {
        str text;
        ;
    
        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_quotes && text != '')
        {
            text = #DoubleQuote + text + #DoubleQuote;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>