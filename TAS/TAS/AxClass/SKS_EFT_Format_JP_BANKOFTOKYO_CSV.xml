<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_JP_BANKOFTOKYO_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_JP_BANKOFTOKYO_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_JP_BANKOFTOKYO_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220509')
    #define.DOM('DOM')
    #define.BKT('BKT')
    #define.INTL('INTL')

    #define.Separator(',')
    #define.DoubleQuote('"')
    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            this.rec_PaymentDetail();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetail</Name>
				<Source><![CDATA[
    private boolean rec_PaymentDetail()
    {
        //---------------------------------------------------------------------------------------------
        //1     Settlement Account No.
        //2     Value Date
        //3     Customer Reference
        //4     Payment Type 
        //5     Currency
        //6     Amount
        //7     Exchange Method 
        //8     Forward Contract No.
        //9     Intermediary Bank/Branch/Address/Country
        //10    Intermediary Bank Master Code
        //11    Beneficiary Bank/Branch/Address/Country
        //12    Beneficiary Bank Master Code
        //13    Beneficiary Account No.
        //14    Beneficiary Name/Address/Country
        //15    Message to Beneficiary
        //16    Purpose of Remittance
        //17    Information to Remitting Bank
        //18    Bank Charge
        //19    Charge Account No.
        //20    IBAN Flag
        //21    Option 1
        //22    Option 2
        //23    Option 3
        //24    Option 4
        //25    Option 5
        //26    Option 6
        //27    Option 7
        //28    Option 8
        //29    Option 9
        //30    Option 10
        //-------------------------------------------------------------------------------------------------
        str                 beneDetails, value;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Settlement Account No.
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1,34)));

        //2     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None)));

        //3     Customer Reference
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 16)));

        //4     Payment Type
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #BKT:
                sb.Append(this.wrapField('Book Transfer'));
                break;
            case #DOM:
                sb.Append(this.wrapField('Domestic'));
                break;
            case #INTL:
                sb.Append(this.wrapField('International'));
                break;
        }
        
        //5     Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //6     Amount
        sb.Append(this.wrapField(subStr(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 1, 15)));

        //7     Exchange Method
        sb.Append(this.wrapField());

        //8     Forward Contract No.
        sb.Append(this.wrapField());

        //9     Intermediary Bank/Branch/Address/Country
        sb.Append(this.wrapField());

        //10    Intermediary Bank Master Code
        sb.Append(this.wrapField());

        //11    Beneficiary Bank/Branch/Address/Country
        sb.Append(this.wrapField());

        //12    Beneficiary Bank Master Code
        sb.Append(this.wrapField());

        //13    Beneficiary Account No.
        sb.Append(this.wrapField());

        //14    Beneficiary Name/Address/Country
        beneDetails = subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 1, 35);

        if(mSKS_EFT_FileDetail_VendAddress.BeneAddr)
        {
            beneDetails = beneDetails + ','+  subStr(mSKS_EFT_FileDetail_VendAddress.BeneAddr,1,35);
        }
        if(mSKS_EFT_FileDetail_VendAddress.BeneAddr2)
        {
            beneDetails = beneDetails + ',' + subStr(mSKS_EFT_FileDetail_VendAddress.BeneAddr2,1,35);
        }
        if(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)
        {
            beneDetails = beneDetails + ',' +  '/'+ this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
        sb.Append(this.wrapField(beneDetails));

        //15    Message to Beneficiary
        sb.Append(this.wrapField());

        //16    Purpose of Remittance
        sb.Append(this.wrapField());

        //17    Information to Remitting Bank
        sb.Append(this.wrapField());

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));

        //18    Bank Charge
        sb.Append(this.wrapField(value));

        //19    Charge Account No.
        sb.Append(this.wrapField());

        //20    IBAN Flag
        sb.Append(this.wrapField());

        //21    Option 1
        sb.Append(this.wrapField());

        //22    Option 2
        sb.Append(this.wrapField());

        //23    Option 3
        sb.Append(this.wrapField());

        //24    Option 4
        sb.Append(this.wrapField());

        //25    Option 5
        sb.Append(this.wrapField());

        //26    Option 6
        sb.Append(this.wrapField());

        //27    Option 7
        sb.Append(this.wrapField());

        //28    Option 8
        sb.Append(this.wrapField());

        //29    Option 9
        sb.Append(this.wrapField());

        //30    Option 10
        sb.Append(this.wrapField('', true, false));
        
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _Quote = true, boolean _addSeparator = true)
    {
        if(_addSeparator)
        {
            if(_Quote && _field != '' || _Quote == true)
            {
                return #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                return _field + #Separator;
            }
        }
        else
        {
            if(_Quote && _field != '' || _Quote == true)
            {
                return #DoubleQuote + _field + #DoubleQuote;
            }
            else
            {
                return _field;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>