<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_AutoCreateAndSendDDFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_AutoCreateAndSendDDFile extends RunBaseBatch
{
    #DEFINE.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Batch bat = this.parmCurrentBatch();
        RefRecId locRefRecID = bat.RecId;
        SKS_EFTAP_File file;
        SKS_EFT_FileFormat fileFormat;
        SKS_EFTAR_Bank locSKS_EFTAR_Bank;
        SKS_EFT_FilePmtSelection locSKS_EFT_FilePmtSelection;
        SKS_EB_CommProcess commProcess;
        date currentdate;
        SKS_EFT_Setup locSKS_EFT_Setup;

        SKS_EFT_Processing sks_eft_Processing = new SKS_EFT_Processing();

        while select crosscompany file where file.FileStatus == SKS_EFT_FileStatus::AdvEmailSent
            join commProcess where commProcess.CommID == file.CommID
        {
            changecompany(file.DataAreaId)
            {
                locSKS_EFT_Setup = SKS_EFT_Setup::find();

                if(locSKS_EFT_Setup.AutoSendFileOnEffectiveDate == NoYes::Yes)
                {
                    select fileFormat where fileFormat.FormatId == file.FormatId;

                    select locSKS_EFT_FilePmtSelection where locSKS_EFT_FilePmtSelection.FileRecId == file.RecId;

                    select locSKS_EFTAR_Bank where locSKS_EFTAR_Bank.BankAccountId == locSKS_EFT_FilePmtSelection.PmtBankAccountId;

                    currentdate = file.EffectiveDate - fileFormat.DaysPriorToEffectiveDate;


                    currentdate = SKS_AutoCreateAndSendDDFile::GetOffsetDate(fileFormat.DaysPriorToEffectiveDate, file.EffectiveDate, locSKS_EFTAR_Bank.BankHolidayGroupId);

                    if(systemDateGet() == currentdate)
                    {
                        sks_eft_Processing.APARrocess_EFT(file.FileNbr,
                        SKS_PP_NextActionDisplay::CreateSendFile,
                        false,
                        SKS_EFT_Module::AR,
                        commProcess,
                        this.isInBatch(),
                        false);
                    }
                }
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
    
        [version] = _packedClass;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>weekendHolidayLoop</Name>
				<Source><![CDATA[
    public static date weekendHolidayLoop(Date _currentEffDate, SKS_EB_BankHolidayGroupID _bankHolidayID)
    {
        boolean isHolidayWeekend = true;

        while(isHolidayWeekend)
        {
            isHolidayWeekend = SKS_AutoCreateAndSendDDFile::dateWeekendHoliday(_currentEffDate, _bankHolidayID);
            if(isHolidayWeekend)
            {
                _currentEffDate--;
            }
        }

        return _currentEffDate;

    }

]]></Source>
			</Method>
			<Method>
				<Name>dateWeekendHoliday</Name>
				<Source><![CDATA[
    private static boolean dateWeekendHoliday(Date _date, SKS_EB_BankHolidayGroupID _bankHolidayID = '')
    {
        SKS_EB_BankHolidays sks_eb_bankholidays;
        boolean ret = false;

        if(dayOfWk(_date) >= 6)
        {
            ret = true;
        }
        else if(_bankHolidayID != '')
        {
            select firstOnly HolidayDate, GroupID from sks_eb_bankholidays where
                sks_eb_bankholidays.GroupID == _bankHolidayID &&
                sks_eb_bankholidays.HolidayDate == _date;
            if(sks_eb_bankholidays)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetOffsetDate</Name>
				<Source><![CDATA[
    public static Date GetOffsetDate(SKS_EFT_EffectiveDateOffset _effDateOffset, Date _currentEffDate, SKS_EB_BankHolidayGroupID _bankHolidayID)
    {
        SKS_EFT_EffectiveDateOffset effDateOffset;
        int counter = 1;
        NoYes  subtract = NoYes::No;
        boolean isHolidayWeekend;

        effDateOffset = _effDateOffset;
        void weekendHolidayLoop()
        {
            isHolidayWeekend = false;
            do
            {
                isHolidayWeekend = SKS_AutoCreateAndSendDDFile::dateWeekendHoliday(_currentEffDate, _bankHolidayID);
                if(isHolidayWeekend)
                {
                    if(subtract == NoYes::Yes)
                    {
                        _currentEffDate--;
                    }
                    else
                    {
                        _currentEffDate++;
                    }
                }
            }
            while(isHolidayWeekend);
        }

        if(effDateOffset > 0) //days subtracted from effective date
        {
            effDateOffset = effDateOffset;
            subtract = NoYes::Yes;
        }

        while(counter <= effDateOffset)
        {
            if(subtract == NoYes::Yes)
            {
                _currentEffDate--;
            }
            else
            {
                _currentEffDate++;
            }

            weekendHolidayLoop();

            counter++;
        }

        // Always call outside of counter in case offset is 0
        weekendHolidayLoop();

        return _currentEffDate;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>