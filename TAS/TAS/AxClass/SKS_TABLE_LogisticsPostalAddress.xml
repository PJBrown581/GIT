<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_TABLE_LogisticsPostalAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_TABLE_LogisticsPostalAddress
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EH_Insert_Post</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(LogisticsPostalAddress), tableMethodStr(LogisticsPostalAddress, insert))]
    public static void EH_Insert_Post(XppPrePostArgs _args)
    {
        LogisticsPostalAddress locLogisticsPostalAddress;

        locLogisticsPostalAddress = _args.getThis();

        //If this address is being added as part of a new customer
        //SKS_TABLE_LogisticsPostalAddress::UpdateAddressInfoEPay(locLogisticsPostalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_onUpdating</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(LogisticsPostalAddress), DataEventType::Updating),
     SuppressBPWarning('BPParameterNotUsed', 'Parameter _args required in signature')]
    public static void LogisticsPostalAddress_onUpdating(Common sender, DataEventArgs _args)
    {
        LogisticsPostalAddress locLogisticsPostalAddress = sender as LogisticsPostalAddress;

        // When the Vendor Address Description or Name change, set the flag for all related Methods of Payment
        if(locLogisticsPostalAddress.Address!= locLogisticsPostalAddress.orig().Address && SKS_EFT_Setup::find().ModAPEFT)
        {
            #SKS_Global
            SKS_EFT_FileFormat locSKS_EFT_FileFormat_Select;
            SKS_EFT_FileFormat locSKS_EFT_FileFormat_Update;
            SKS_EFT_VendorPaym locSKS_EFT_VendorPaym_Select;
            SKS_EFT_VendorPaym locSKS_EFT_VendorPaym_Update;
            Array vendAddrArray = new Array(Types::String);
            SKS_EB_Address tempAddr1;
            SKS_EB_Address tempAddr2;
            VendBankAccount vendBankAccount;
            LogisticsLocation logisticsLocation;

            select LogisticsLocation
            where LogisticsLocation.Recid == locLogisticsPostalAddress.Location;

            while select crosscompany recid from locSKS_EFT_VendorPaym_Select
                join locSKS_EFT_FileFormat_Select
                group by locSKS_EFT_VendorPaym_Select.dataAreaId
                where locSKS_EFT_VendorPaym_Select.FormatId == locSKS_EFT_FileFormat_Select.FormatId
                && locSKS_EFT_FileFormat_Select.MastAcctList == NoYes::Yes
                && locSKS_EFT_VendorPaym_Select.MALStatus == SKS_EFT_MALStatus::Pending
                && locSKS_EFT_VendorPaym_Select.WBeneRemittanceLocation == locLogisticsPostalAddress.Location
            {
                changeCompany(locSKS_EFT_VendorPaym_Select.company())
                {
                    update_recordSet locSKS_EFT_VendorPaym_Update
                        setting MALStatus = SKS_EFT_MALStatus::New
                        join locSKS_EFT_FileFormat_Update
                        where locSKS_EFT_VendorPaym_Update.FormatId == locSKS_EFT_FileFormat_Update.FormatId
                        && locSKS_EFT_FileFormat_Update.MastAcctList == NoYes::Yes
                        && locSKS_EFT_VendorPaym_Update.MALStatus == SKS_EFT_MALStatus::Pending
                        && locSKS_EFT_VendorPaym_Update.WBeneRemittanceLocation == locLogisticsPostalAddress.Location;
                }
                locSKS_EFT_VendorPaym_Update = null;
                locSKS_EFT_FileFormat_Update = null;

            }

            while select crosscompany recid from locSKS_EFT_VendorPaym_Select
                join locSKS_EFT_FileFormat_Select
                group by locSKS_EFT_VendorPaym_Select.dataAreaId
                where locSKS_EFT_VendorPaym_Select.FormatId == locSKS_EFT_FileFormat_Select.FormatId
                && locSKS_EFT_FileFormat_Select.MastAcctList == NoYes::Yes
                && locSKS_EFT_VendorPaym_Select.MALStatus == SKS_EFT_MALStatus::Approved
                && locSKS_EFT_VendorPaym_Select.WBeneRemittanceLocation == locLogisticsPostalAddress.Location
            {
                changeCompany(locSKS_EFT_VendorPaym_Select.company())
                {
                    update_recordSet locSKS_EFT_VendorPaym_Update
                        setting MALStatus = SKS_EFT_MALStatus::Update
                        join locSKS_EFT_FileFormat_Update
                        where locSKS_EFT_VendorPaym_Update.FormatId == locSKS_EFT_FileFormat_Update.FormatId
                        && locSKS_EFT_FileFormat_Update.MastAcctList == NoYes::Yes
                        && locSKS_EFT_VendorPaym_Update.MALStatus == SKS_EFT_MALStatus::Approved
                        && locSKS_EFT_VendorPaym_Update.WBeneRemittanceLocation == locLogisticsPostalAddress.Location;
                }
                locSKS_EFT_VendorPaym_Update = null;
                locSKS_EFT_FileFormat_Update = null;

            }

            while select crosscompany recid from locSKS_EFT_VendorPaym_Select
                    join locSKS_EFT_FileFormat_Select
                    group by locSKS_EFT_VendorPaym_Select.dataAreaId
                    where locSKS_EFT_VendorPaym_Select.FormatId == locSKS_EFT_FileFormat_Select.FormatId
                    && locSKS_EFT_VendorPaym_Select.WBeneRemittanceLocation == locLogisticsPostalAddress.Location
            {
                changeCompany(locSKS_EFT_VendorPaym_Select.company())
                {
                    vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(locLogisticsPostalAddress.Street,2);

                    if (vendAddrArray.exists(1))
                    {
                        tempAddr1 = vendAddrArray.value(1);

                        if (vendAddrArray.exists(2))
                        {
                            tempAddr2 = vendAddrArray.value(2);
                        }
                    }

                    update_recordSet locSKS_EFT_VendorPaym_Update
                        setting WBeneAddr = tempAddr1,
                            WBeneAddr2 = tempAddr2,
                            WBeneCity = locLogisticsPostalAddress.City,
                            WBeneState = locLogisticsPostalAddress.State,
                            WBeneZipPostal = locLogisticsPostalAddress.ZipCode,
                            WBeneCountryRegionId = locLogisticsPostalAddress.CountryRegionId,
                            WBeneName = LogisticsLocation.Description
                        join locSKS_EFT_FileFormat_Update
                        where locSKS_EFT_VendorPaym_Update.FormatId == locSKS_EFT_FileFormat_Update.FormatId
                            && locSKS_EFT_VendorPaym_Update.WBeneRemittanceLocation == locLogisticsPostalAddress.Location;
                }

                locSKS_EFT_VendorPaym_Update = null;
                locSKS_EFT_FileFormat_Update = null;
            }

            //Update vendor eBanking specs if bank address is updated
            select vendBankAccount
            join LogisticsLocation
            where LogisticsLocation.Recid == locLogisticsPostalAddress.Location
                && VendBankAccount.Location == LogisticsLocation.Recid;

            while select crosscompany recid from locSKS_EFT_VendorPaym_Select
                group by locSKS_EFT_VendorPaym_Select.DataAreaId
                where locSKS_EFT_VendorPaym_Select.WBeneUseVendBankAcc == NoYes::Yes
                && locSKS_EFT_VendorPaym_Select.VendBankAccountId == vendBankAccount.AccountId
                && locSKS_EFT_VendorPaym_Select.VendCompany == VendBankAccount.DataAreaId
                && locSKS_EFT_VendorPaym_Select.VendAccount == VendBankAccount.VendAccount
            {
                changecompany(locSKS_EFT_VendorPaym_Select.company())
                {
                    update_recordset locSKS_EFT_VendorPaym_Update
                        setting WBenBankAddr = locLogisticsPostalAddress.Street,
                                WBenBankCity = locLogisticsPostalAddress.City,
                                WBenBankCountryRegionId = locLogisticsPostalAddress.CountryRegionId
                     where locSKS_EFT_VendorPaym_Update.WBeneUseVendBankAcc == NoYes::Yes
                        && locSKS_EFT_VendorPaym_Update.VendBankAccountId == vendBankAccount.AccountId
                        && locSKS_EFT_VendorPaym_Update.VendCompany == VendBankAccount.DataAreaId
                        && locSKS_EFT_VendorPaym_Update.VendAccount == VendBankAccount.VendAccount;
                }

                locSKS_EFT_VendorPaym_Update = null;
            }
        }

        if(locLogisticsPostalAddress.Address!= locLogisticsPostalAddress.orig().Address && SKS_EFT_Setup::find().ModAREFT)
        {
            // update customer eBanking details - customer reimbursement address
            // if customer address is updated
            CustTable               custTable;
            DirPartyTable           dirPartyTable;
            DirPartyLocation        dirPartyLocation;
            LogisticsLocation       logisticsLocation;
            
            SKS_EFT_CustReimbursementPaym   sks_EFT_CustReimbursementPaym, sks_EFT_CustReimbursementPaymLoc;            

            Array custAddrArray = new Array(Types::String);
            SKS_EB_Address tempAddr1;
            SKS_EB_Address tempAddr2;
            SKS_EFT_WireName tempName;

            select firstonly custTable
                join dirPartyTable
                    where   dirPartyTable.RecId == custTable.Party
                join dirPartyLocation
                    where   dirPartyLocation.Party == custTable.Party
                join logisticsLocation
                    where   logisticsLocation.RecId == dirPartyLocation.Location
                        &&  logisticsLocation.RecId ==  locLogisticsPostalAddress.Location;

            tempName = logisticsLocation.Description;

            if(locLogisticsPostalAddress.Street)
            {
                custAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(locLogisticsPostalAddress.Street,2);
                if (custAddrArray.exists(1))
                {
                    tempAddr1 = custAddrArray.value(1);

                    if (custAddrArray.exists(2))
                    {
                        tempAddr2 = custAddrArray.value(2);
                    }
                }
            }

            while select crosscompany sks_EFT_CustReimbursementPaym               
                where sks_EFT_CustReimbursementPaym.WBeneUseCustAddr == NoYes::Yes                    
                    && sks_EFT_CustReimbursementPaym.CustCompany == custTable.DataAreaId
                    && sks_EFT_CustReimbursementPaym.CustAccount == custTable.AccountNum
            {
                changecompany(sks_EFT_CustReimbursementPaym.company())
                {   
                    update_recordset sks_EFT_CustReimbursementPaymLoc
                        setting WBeneAddr = tempAddr1,
                            WBeneAddr2 = tempAddr2,
                            WBeneCity = locLogisticsPostalAddress.City,
                            WBeneState = locLogisticsPostalAddress.State,
                            WBeneZipPostal = locLogisticsPostalAddress.ZipCode,
                            WBeneCountryRegionId = locLogisticsPostalAddress.CountryRegionId,
                            WBeneName = tempName
                     where sks_EFT_CustReimbursementPaymLoc.WBeneUseCustAddr == NoYes::Yes                        
                        && sks_EFT_CustReimbursementPaymLoc.CustCompany == custTable.DataAreaId
                        && sks_EFT_CustReimbursementPaymLoc.CustAccount == custTable.AccountNum;
                }

                sks_EFT_CustReimbursementPaym = null;
                sks_EFT_CustReimbursementPaymLoc = null;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateAddressInfoEPay</Name>
				<Source><![CDATA[
    private static void UpdateAddressInfoEPay(LogisticsPostalAddress _LogisticsPostalAddress)
    {
        CustTable locCustTable;
        DirPartyTable locDirPartyTable;
        DirPartyLocation locDirPartyLocation;
        DirPartyLocationRole locDirPartyLocationRole;
        CustDefaultLocation locCustDefaultLocation;
        LogisticsLocationRole locLogisticsLocationRole;
        LogisticsPostalAddress locOrigLogisticsPostalAddress;
        ;

        locOrigLogisticsPostalAddress = _LogisticsPostalAddress.orig();

        //If no field of interest has changed, return as nothing needs queued
        if( locOrigLogisticsPostalAddress.Address == _LogisticsPostalAddress.Address
            && locOrigLogisticsPostalAddress.CountryRegionId == _LogisticsPostalAddress.CountryRegionId
            && locOrigLogisticsPostalAddress.ZipCode == _LogisticsPostalAddress.ZipCode
            && locOrigLogisticsPostalAddress.State == _LogisticsPostalAddress.State
            && locOrigLogisticsPostalAddress.County == _LogisticsPostalAddress.County
            && locOrigLogisticsPostalAddress.City == _LogisticsPostalAddress.City
            && locOrigLogisticsPostalAddress.StreetNumber == _LogisticsPostalAddress.StreetNumber
            && locOrigLogisticsPostalAddress.PostBox == _LogisticsPostalAddress.PostBox)
        {
            return;
        }

        //Queue up any default Remit To or Delivery addresses that use this address
        while select crosscompany locCustTable
            join RecId from locDirPartyTable
                where locDirPartyTable.RecId == locCustTable.Party
            join RecId, Location, IsPrimary, Party from locDirPartyLocation
                where locDirPartyTable.RECID == locDirPartyLocation.party
                    && locDirPartyLocation.LOCATION == _LogisticsPostalAddress.LOCATION
            join PartyLocation, RecId, LocationRole from locDirPartyLocationRole
                where locDirPartyLocationRole.PartyLocation == locDirPartyLocation.recid
            join PartyLocationRole, AccountNum from locCustDefaultLocation
                where locCustDefaultLocation.PartyLocationRole == locDirPartyLocationRole.RecId
                    && locCustDefaultLocation.AccountNum == locCustTable.AccountNum
            join Type, RecId from locLogisticsLocationRole
                where locLogisticsLocationRole.RecId == locDirPartyLocationRole.LocationRole
                    && (locLogisticsLocationRole.Type == LogisticsLocationRoleType::RemitTo
                        || locLogisticsLocationRole.Type == LogisticsLocationRoleType::Delivery)
        {
            info('EPAY');
        }

        //Queue up any PRIMARY customer who uses this as a primary address
        while select crosscompany locCustTable
            join RecId from locDirPartyTable
                where locDirPartyTable.RecId == locCustTable.Party
            Join RecId, Location, IsPrimary, Party from locDirPartyLocation
                where locDirPartyTable.RECID == locDirPartyLocation.party
                    && locDirPartyLocation.LOCATION == _LogisticsPostalAddress.LOCATION
            join PartyLocation, RecId, LocationRole from locDirPartyLocationRole
                where locDirPartyLocationRole.PartyLocation == locDirPartyLocation.recid
            join Type, RecId from locLogisticsLocationRole
                where locLogisticsLocationRole.RecId == locDirPartyLocationRole.LocationRole
                    && locDirPartyLocation.IsPrimary == NoYes::Yes
        {
            info('EPAY');
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>LogisticsPostalAddress_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated EventHandler from LogisticsPostalAddress table
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">e</param>
    [DataEventHandler(tableStr(LogisticsPostalAddress), DataEventType::Updated),
     SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void LogisticsPostalAddress_onUpdated(Common sender, DataEventArgs e)
    {
        //<Issue-20009: Updating SKS_EFT_VendorPaym table address when VendBankAccount address is updated>
        LogisticsPostalAddress logisticsPostalAddress = sender as LogisticsPostalAddress;
        VendBankAccount vendBankAccount;

        select firstonly vendBankAccount
            where vendBankAccount.Location == logisticsPostalAddress.Location;

        if(vendBankAccount)
        {
            SKS_EFT_VendorPaym::update_EFT_VendorPaymAddress(vendBankAccount);
        }
        //</Issue-20009>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>