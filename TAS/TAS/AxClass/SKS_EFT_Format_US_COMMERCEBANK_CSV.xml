<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_COMMERCEBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_COMMERCEBANK_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_COMMERCEBANK_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220624')
    #define.Separator(',')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        while(mSKS_EFT_FileDetail)
        {
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_Payment(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    boolean rec_Payment(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //          AX Vendor ID
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountNum));

        //          Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber)));

        //          Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash)));

        //          Invoice Net Amount        
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        //          Hardcoded value GROSS_AMOUNT
        sb.Append(this.wrapField('GROSS_AMOUNT'));

        //      	Invoice Gross Amount
        sb.Append(this.wrapField(num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1, 0, 2, 1, 0)));

        //          Hardcoded value DISCOUNT_AMOUNT
        sb.Append(this.wrapField('DISCOUNT_AMOUNT'));

        //          Invoice Discount Amount
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1, 0, 2, 1, 0)));

        //      	Hardcoded value REFERENCE
        sb.Append(this.wrapField('REFERENCE'));

        //      	Description on Invoice
        sb.Append(this.wrapField(this.getInvoiceJournaltxt(invSKS_EFT_FileDetail)));

        //          Hardcoded value CHECK_NUMBER
        sb.Append(this.wrapField('CHECK_NUMBER'));

        //          AP EFT+ Reference Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJournaltxt</Name>
				<Source><![CDATA[
    private str getInvoiceJournaltxt(SKS_EFT_FileDetail _SKS_EFT_FileDetail)
    {
        VendTrans lVendTrans;

        select crossCompany Txt from lVendTrans where
           lVendTrans.RecId == _SKS_EFT_FileDetail.VendTransRecId;

        return this.CharacterReplacement(lVendTrans.Txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _addSeparator = true)
    {
        str text;

        text = _field;

        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>