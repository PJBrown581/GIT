<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_DEUTSCHE_dbUSFF</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_DEUTSCHE_dbUSFF extends SKS_PP_Format_BankGroup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        
        str itemType;
        int mult;
        DirPartyNamePrimaryAddressView dirPartyNamePrimaryAddressView;
        VendTable vendTable_1;
        Container company;
        LogisticsAddressCountryRegion mLogisticsAddressCountryRegion;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        Array vendAddrArray = new Array(Types::String);
        str adrLine1,adrLine2,adrLine3;

        
        // Convert negative void numbers to positives
        mult = 1;
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::CancelledCheque)
            {
                ItemType = '26';
            }
            else
            {
                itemType = '28';
            }
        
            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = '10';
        }
        
        // Always use the Record Summary Amount - will have correct total for the Check
        
        sb.Append('*' + ItemType);
        sb.Append('00000');
        sb.Append(SKS_PP_StringFormats::strFill(8, strLTrim(StrRTrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, strLtrim(strRTrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        
        
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::CancelledCheque)
            {
                sb.Append(SKS_PP_StringFormats::strMoney(mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));
        
                sb.Append(SKS_PP_StringFormats::strFill(708, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                sb.Append(SKS_PP_StringFormats::strFill(718, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strMoney(mult * mSKS_PP_FileDetail.ChkCuryAmt, 10));
        
            sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            sb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            company = [mSKS_PP_FileDetail.ChkCpnyId];

            select crossCompany:company Street, CountryRegionId from dirPartyNamePrimaryAddressView join vendTable_1 where
                    dirPartyNamePrimaryAddressView.Party == vendTable_1.Party &&
                    vendTable_1.AccountNum == mSKS_PP_FileDetail.VendorAccount;
        
            mLogisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(dirPartyNamePrimaryAddressView.CountryRegionId);
        
            sb.Append(SKS_PP_StringFormats::strFill(2, mLogisticsAddressCountryRegion.ISOcode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            sb.Append(SKS_PP_StringFormats::strFill(60, subStr(mSKS_PP_FileDetail.VendName, 1, 60), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            sb.Append(SKS_PP_StringFormats::strFill(60, subStr(mSKS_PP_FileDetail.VendName, 61, 120), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(dirPartyNamePrimaryAddressView.Street,3);
        
            adrLine1 = '';
            adrLine2 = '';
            adrLine3 = '';
        
            if(vendAddrArray.exists(1))
            {
                adrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    adrLine2 = vendAddrArray.value(2);
                }
                if (vendAddrArray.exists(3))
                {
                    adrLine3 = vendAddrArray.value(3);
                }
            }
        
            sb.Append(SKS_PP_StringFormats::strFill(100, adrLine1+' '+adrLine2+' '+adrLine3, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            sb.Append(SKS_PP_StringFormats::strFill(100, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            sb.Append(SKS_PP_StringFormats::strFill(100, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            sb.Append(SKS_PP_StringFormats::strFill(100, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            sb.Append(SKS_PP_StringFormats::strFill(150, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    protected str txtGroupHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        sb.Append('#');
        sb.Append('CA');
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(time2str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()),TimeSeparator::Colon,TimeFormat::Hour24));
        sb.Append(SKS_PP_StringFormats::strFill(63, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>