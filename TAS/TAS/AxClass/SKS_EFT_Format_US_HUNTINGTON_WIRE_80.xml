<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_HUNTINGTON_WIRE_80</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_HUNTINGTON_WIRE_80 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_HUNTINGTON_WIRE_80 extends SKS_EFT_Format
{
    #define.FormatVersion('20220711')
    int         mPaymentCount, itemSeqNum;
    Amount      mPaymentAmount;
    str         batchSequence, batchId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //  Batch Header Record 1
        this.rec_BatchHeader();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //Funds Transfer Header Record 1
            this.rec_FTRHeader1();

            //Funds Transfer Header Record 2
            this.rec_FTRHeader2();

            //Funds Transfer Header Record 3
            this.rec_FTRHeader3();

            //Funds Transfer Header Record 5
            this.rec_FTRHeader5();

            //Originator Subrecord 1
            this.rec_OrigSub1();

            //Originator Subrecord 2
            this.rec_OrigSub2();

            //Orig-to-Bene Info Subrecord 1
            this.rec_OrigToBeneSub1();

            //Sender’s Reference Subrecord
            this.rec_SenderRefSub();

            //Debit Party Subrecord 1
            this.rec_DebitPartySub1();

            //Beneficiary Bank Subrecord 1
            this.rec_BenBankSub1();

            //Beneficiary Subrecord 1
            this.rec_BeneficiarySub1();

            //Beneficiary Subrecord 2
            this.rec_BeneficiarySub2();

            this.rec_FTRTrailer1();
    
            next mSKS_EFT_FileDetail;
        }
    
        //  Batch Trailer Record 1
        this.rec_BatchTrailer1();

        //  Batch Trailer Record 2
        this.rec_BatchTrailer2();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchHeader</Name>
				<Source><![CDATA[
    //Number    Description                                 Position
    //---------------------------------------------------------------------------------------
    // 1        Record Type                                 01 - 04
    // 2        Job Name                                    05 - 10
    // 3        Batch ID                                    11 - 20
    // 4        Date/Time                                   21 - 32
    // 5        Batch Sequence                              33 - 36
    // 6        Password                                    37 - 44
    // 7        Blank                                       45 - 55
    // 7        Text field                                  56 - 80
    //----------------------------------------------------------------------------------------
    public boolean rec_BatchHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();        
 
 
        // 1        Record Type                                 01 - 04
        sb.Append('*AMT');

        // 2        Job Name                                    05 - 10
        sb.Append(SKS_PP_StringFormats::strFill(6, 'WTR1', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 3        Batch ID                                    11 - 20
        batchId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BatchId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append('WTR0' + SKS_PP_StringFormats::strFill(6, batchId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 4        Date/Time                                   21 - 32
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateSeparator::None) +
            strRem(time2Str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), TimeSeparator::Auto, TimeFormat::Hour24), ':'));

        // 5        Batch Sequence                              33 - 36
        batchSequence = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('NextSequenceNumber', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(4, batchSequence, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6        Password                                    37 - 44
        sb.Append('ABABABAB');
        // 7        Blank                                       45 - 55
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7        Text field                                  56 - 80
        sb.Append(SKS_PP_StringFormats::strFill(25, this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));        
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTRHeader1</Name>
				<Source><![CDATA[
    //Number    Description                                 Position
    //---------------------------------------------------------------------------------------
    // 1        Record Type                                 01 - 04
    // 2        Batch Sequence                              05 - 08
    // 3        Item Sequence Number                        09 - 14
    // 4        ISI Indicator                               15 - 17
    // 5        System Reference Number                     18 - 30
    // 6        Blanks                                      31 - 34
    // 7        Transaction Type                            35 - 36
    // 7        Transaction Type                            37
    // 8        Blanks                                      38 - 43
    // 9        Dollar amount from DB/CR record             44 - 58
    // 10       Priority                                    59
    // 11       Transaction Type                            60 - 62
    //----------------------------------------------------------------------------------------
    public boolean rec_FTRHeader1()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        itemSeqNum++;
        mPaymentCount++;
 
        // 1        Record Type                                 01 - 04
        sb.Append('*FTR');

        // 2        Batch Sequence                              05 - 08
        sb.Append(SKS_PP_StringFormats::strFill(4, batchSequence, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3        Item Sequence Number                        09 - 14
        sb.Append(SKS_PP_StringFormats::strFill(6, int2Str(itemSeqNum), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4        ISI Indicator                               15 - 17
        sb.Append('ISI');

        // 5        System Reference Number                     18 - 30
        sb.Append(SKS_PP_StringFormats::strFill(13, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6        Blanks                                      31 - 34
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7        Transaction Type                            35 - 36
        sb.Append(SKS_PP_StringFormats::strFill(2, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TransactionType', mSKS_EFT_FileDetail.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7        Currency Code                               37
        sb.Append('F');

        // 8        Blanks                                      38 - 43
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9        Dollar amount from DB/CR record             44 - 58        
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 15));
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        // 10       Priority                                    59
        sb.Append('S');

        // 11       Transaction Type                            60 - 62
        sb.Append('FTR');
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTRHeader2</Name>
				<Source><![CDATA[
    public boolean rec_FTRHeader2()
    {
        //Number    Description                                 Position
        //-----------------------------------------------------------------
        // 1        Record Type 	                            1 - 4
        // 2        Reserved for future use 	                5
        // 3        Create Date                                 6 – 11
        // 4        Release Date  	                            12 - 17
        // 5        Value Date 	                                18 - 23
        // 6        Channel 	                                24 - 26
        // 7        Repetitive Number 	                        27 - 34
        // 8        Reserved for future use 	                35 - 80
        //-----------------------------------------------------------------

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Record Type 	                            1 - 4
        sb.Append('2FTR');

        // 2        Reserved for future use 	                5
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3        Create Date                                 6 – 11
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateSeparator::None));

        // 4        Release Date  	                            12 - 17
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        // 5        Value Date 	                                18 - 23
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        // 6        Channel 	                                24 - 26
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7        Repetitive Number 	                        27 - 34
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8        Reserved for future use 	                35 - 80
        sb.Append(SKS_PP_StringFormats::strFill(46, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTRHeader3</Name>
				<Source><![CDATA[
    public boolean rec_FTRHeader3()
    {
        //Number    Description                         Position
        //-----------------------------------------------------------------
        // 1         Record Type 	                    1 - 4
        // 2         Reserved for future use 	        5 - 38
        // 3         Batch Wire PIN                     39 - 48
        // 4         Reserved for future use 	        49 - 80
        //-----------------------------------------------------------------
        str batchWirePin;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1         Record Type 	                    1 - 4
        sb.Append('3FTR');

        // 2         Reserved for future use 	        5 - 38
        sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3         Batch Wire PIN                     39 - 48
        batchWirePin = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BatchWirePin', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(10, batchWirePin, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4         Reserved for future use 	        49 - 80
        sb.Append(SKS_PP_StringFormats::strFill(32, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTRHeader5</Name>
				<Source><![CDATA[
    public boolean rec_FTRHeader5()
    {
        //Number    Description                         Position
        //-----------------------------------------------------------------
        // 1        Record Type 	                    1 - 4
        // 2        Tertiary debit flag                 5 - 8
        // 3        Reserved for future use 	        9 - 38
        // 4        Tertiary credit flag  	            39 - 42
        // 5        Reserved for future use 	        43 - 72
        // 6        HNB-defined source code   	        73 - 75
        // 7        Reserved for future use 	        76 - 80
        //-----------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Record Type 	                    1 - 4
        sb.Append('5FTR');

        // 2        Tertiary debit flag                 5 - 8
        sb.Append('INFO');

        // 3        Reserved for future use 	        9 - 38
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4        Tertiary credit flag  	            39 - 42
        sb.Append('INFO');

        // 5        Reserved for future use 	        43 - 72
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6        HNB-defined source code   	        73 - 75
        sb.Append('B08');

        // 7        Reserved for future use 	        76 - 80
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_OrigSub2</Name>
				<Source><![CDATA[
    public boolean rec_OrigSub2()
    {
        //Number    Description                         Position
        //-----------------------------------------------------------------
        // 1        Control character 	                1 	
        // 2        Control character                   2 
        // 3        Originator name          	        3 - 37
        //-----------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Control character 	                1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 2        Control character                   2
        sb.Append('-');

        // 3        Originator name          	        3 - 37
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_OrigSub1</Name>
				<Source><![CDATA[
    public boolean rec_OrigSub1()
    {
        //Number    Description                         Position
        //-----------------------------------------------------------------
        // 1        Control character 	                1
        // 2        Field Tag 	                        2 - 5
        // 3        ID Type is not specified 	        6 - 71
        //-----------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Control character 	                1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 2        Field Tag 	                        2 - 5
        sb.Append('ORG=');

        // 3        ID Type is not specified 	        6 - 71
        sb.Append(SKS_PP_StringFormats::strFill(66, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_OrigToBeneSub1</Name>
				<Source><![CDATA[
    public boolean rec_OrigToBeneSub1()
    {
        //Number    Description                             Position
        //-----------------------------------------------------------------
        // 1        Control character 	                    1
        // 2        Field tag                               2 - 5
        // 3        Originator-to-Beneficiary Information   6 - 40
        //-----------------------------------------------------------------
        str invoiceNumbers;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Control character 	                    1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 2        Field tag                               2 - 5
        sb.Append('OBI=');

        // 3        Originator-to-Beneficiary Information   6 - 40
        invoiceNumbers = this.getInvoiceNbrs();
        sb.Append(SKS_PP_StringFormats::strFill(35, invoiceNumbers, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        if(invoiceNumbers)
        {
            this.fileWrite(sb.ToString());
        }        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SenderRefSub</Name>
				<Source><![CDATA[
    public boolean rec_SenderRefSub()
    {
        //Number    Description                             Position
        //-----------------------------------------------------------------
        // 1        Control character 	                    1
        // 2        Field tag                               2 - 5
        // 3        Sending party’s reference number        6 - 21
        //-----------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Control character 	                    1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 2        Field tag                               2 - 5
        sb.Append('SRF=');

        // 3        Sending party’s reference number   6 - 21
        sb.Append(SKS_PP_StringFormats::strFill(16, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DebitPartySub1</Name>
				<Source><![CDATA[
    public boolean rec_DebitPartySub1()
    {
        //Number    Description                             Position
        //-----------------------------------------------------------------
        // 1        Control character 	                    1
        // 2        Field tag                               2 - 5
        // 3        Debit Party ID Type                     6
        // 4        Delimiting character                    7
        // 5        Account Number                          8 - 31
        //-----------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Control character 	                    1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 2        Field tag                               2 - 5
        sb.Append('DBT=');

        // 3        Debit Party ID Type                     6
        if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount)
        {
            sb.Append('D');
        }
        else if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append('V');
        }
        else
        {
            sb.Append('G');
        }

        // 4        Delimiting character                    7
        sb.Append('/');

        // 5        Account Number                          8 - 31
        sb.Append(SKS_PP_StringFormats::strFill(24, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BenBankSub1</Name>
				<Source><![CDATA[
    public boolean rec_BenBankSub1()
    {
        //Number    Description                             Position
        //-----------------------------------------------------------------
        // 1        Control character 	                    1
        // 2        Field tag                               2 - 5
        // 3        Intermediary bank ID type               6
        // 4        Delimiting character                    7
        // 5        Beneficiary Bank ABA                    8 - 16
        //-----------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Control character 	                    1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 2        Field tag                               2 - 5
        sb.Append('BBK=');

        // 3        Intermediary bank ID type               6
        sb.Append('A');

        // 4        Delimiting character                    7
        sb.Append('/');

        // 5        Beneficiary Bank ABA                    8 - 16
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BeneficiarySub1</Name>
				<Source><![CDATA[
    public boolean rec_BeneficiarySub1()
    {
        //Number    Description                             Position
        //-----------------------------------------------------------------
        // 1        Control character 	                    1
        // 2        Field tag                               2 - 5
        // 3        Credit/Beneficiary Party ID Type        6
        // 4        Delimiting character                    7
        // 5        Account Number                          8 - 31
        //-----------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Control character 	                    1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 2        Field tag                               2 - 5
        sb.Append('BNF=');

        // 3        Debit Party ID Type                     6
        if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::CheckingAccount)
        {
            sb.Append('D');
        }
        else if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append('V');
        }
        else
        {
            sb.Append('G');
        }

        // 4        Delimiting character                    7
        sb.Append('/');

        // 5        Account Number                          8 - 31
        sb.Append(SKS_PP_StringFormats::strFill(24, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BeneficiarySub2</Name>
				<Source><![CDATA[
    public boolean rec_BeneficiarySub2()
    {
        //Number    Description                             Position
        //-----------------------------------------------------------------
        // 1        Control character 	                    1
        // 2        Control character 	                    2
        // 3        Beneficiary Name                        3 - 37
        //-----------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Control character 	                    1
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 2        Field tag                               2 - 5
        sb.Append('-');

        // 3        Beneficiary Name                        3 - 37
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTRTrailer1</Name>
				<Source><![CDATA[
    //Number    Description                                 Position
    //---------------------------------------------------------------------------------------
    // 1        Record Type                                 01 - 04
    // 2        Batch Sequence                              05 - 08
    // 3        Item Sequence Number                        09 - 14    
    //----------------------------------------------------------------------------------------
    public boolean rec_FTRTrailer1()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();        
 
        // 1        Record Type                                 01 - 04
        sb.Append('/FTR');

        // 2        Batch Sequence                              05 - 08
        sb.Append(SKS_PP_StringFormats::strFill(4, batchSequence, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3        Item Sequence Number                        09 - 14
        sb.Append(SKS_PP_StringFormats::strFill(6, int2Str(itemSeqNum), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchTrailer1</Name>
				<Source><![CDATA[
    //Number    Description                                 Position
    //---------------------------------------------------------------------------------------
    // 1        Record Type                                 01 - 04
    // 2        Job Name                                    05 - 10
    // 3        Batch ID                                    11 - 20
    // 4        Date/Time                                   21 - 32
    // 5        Batch Sequence                              33 - 36
    // 6        Cumulative dollar total contained in        37 - 51
    //          entire batch                                     
    // 7        Number of transactions contained in         52 - 56
    //          entire batch
    //----------------------------------------------------------------------------------------
    public boolean rec_BatchTrailer1()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder(); 
 
        // 1        Record Type                                 01 - 04
        sb.Append('/AMT');

        // 2        Job Name                                    05 - 10
        sb.Append(SKS_PP_StringFormats::strFill(6, 'WTR1', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));   //SKS#DevOps:16588

        // 3        Batch ID                                    11 - 20
        sb.Append('WTR0' + SKS_PP_StringFormats::strFill(6, batchId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 4        Date/Time                                   21 - 32
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),DateSeparator::None) +
            strRem(time2Str(DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()), TimeSeparator::Auto, TimeFormat::Hour24), ':'));

        // 5        Batch Sequence                              33 - 36
        sb.Append(SKS_PP_StringFormats::strFill(4, batchSequence, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6        Cumulative dollar total contained in  entire batch                   37 - 51
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mPaymentAmount), 15));

        

        // 7        Number of transactions contained in  entire batch                     52 - 56
        sb.Append(SKS_PP_StringFormats::strFill(5, int2Str(mPaymentCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchTrailer2</Name>
				<Source><![CDATA[
    //Number    Description                                 Position
    //---------------------------------------------------------------------------------------
    // 1        Record Type                                 01 - 04
    // 2        Not used by HNB                             05 - 19
    // 3        Not used by HNB                             20 - 24
    // 4        Not used by HNB                             25 - 39
    // 5        Not used by HNB                             40 - 44
    // 6        Not used by HNB                             45 - 59
    // 7        Not used by HNB                             60 - 64    
    //----------------------------------------------------------------------------------------
    public boolean rec_BatchTrailer2()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
 
        // 1        Record Type                                 01 - 04
        sb.Append('2AMT');

        // 2        Not used by HNB                             05 - 19
        sb.Append('000000000000.00');

        // 3        Not used by HNB                             20 - 24
        sb.Append('00000');

        // 4        Not used by HNB                             25 - 39
        sb.Append('000000000000.00');

        // 5        Not used by HNB                             40 - 44
        sb.Append('00000');

        // 6        Not used by HNB                             45 - 59
        sb.Append('000000000000.00');

        // 7        Not used by HNB                             60 - 64
        sb.Append('00000');

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(' ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>