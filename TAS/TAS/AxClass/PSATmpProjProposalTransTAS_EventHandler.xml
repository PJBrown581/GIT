<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PSATmpProjProposalTransTAS_EventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PSATmpProjProposalTransTAS_EventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PSATmpProjProposalTrans_Post_initFromProjCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// PostHandler event method for <c>initFromProjCostTrans</c> method
    /// to set CCA field <c>SKS_CC_ServiceOrderId</c>.
    /// </summary>
    /// <param name="_ppArgs"></param>
    [PostHandlerFor(tableStr(PSATmpProjProposalTrans), tableMethodStr(PSATmpProjProposalTrans, initFromProjCostTrans))]
    public static void PSATmpProjProposalTrans_Post_initFromProjCostTrans(XppPrePostArgs _ppArgs)
    {
        PSATmpProjProposalTrans pSATmpProjProposalTransSKS = _ppArgs.getThis() as PSATmpProjProposalTrans;
        PSATmpProjProposalTransTAS_EventHandler::sKS_CC_SetServiceOrderId(pSATmpProjProposalTransSKS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSATmpProjProposalTrans_Post_initFromProjEmplTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// PostHandler event method for <c>initFromProjEmplTrans</c> method
    /// to set CCA field <c>SKS_CC_ServiceOrderId</c>.
    /// </summary>
    /// <param name="_ppArgs"></param>
    [PostHandlerFor(tableStr(PSATmpProjProposalTrans), tableMethodStr(PSATmpProjProposalTrans, initFromProjEmplTrans))]
    public static void PSATmpProjProposalTrans_Post_initFromProjEmplTrans(XppPrePostArgs _ppArgs)
    {
        PSATmpProjProposalTrans pSATmpProjProposalTransSKS = _ppArgs.getThis() as PSATmpProjProposalTrans;
        PSATmpProjProposalTransTAS_EventHandler::sKS_CC_SetServiceOrderId(pSATmpProjProposalTransSKS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSATmpProjProposalTrans_Post_initFromProjRevenueTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// PostHandler event method for <c>initFromProjRevenueTrans</c> method
    /// to set CCA field <c>SKS_CC_ServiceOrderId</c>.
    /// </summary>
    /// <param name="_ppArgs"></param>
    [PostHandlerFor(tableStr(PSATmpProjProposalTrans), tableMethodStr(PSATmpProjProposalTrans, initFromProjRevenueTrans))]
    public static void PSATmpProjProposalTrans_Post_initFromProjRevenueTrans(XppPrePostArgs _ppArgs)
    {
        PSATmpProjProposalTrans pSATmpProjProposalTransSKS = _ppArgs.getThis() as PSATmpProjProposalTrans;
        PSATmpProjProposalTransTAS_EventHandler::sKS_CC_SetServiceOrderId(pSATmpProjProposalTransSKS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSATmpProjProposalTrans_Post_initFromProjItemTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// PostHandler event method for <c>initFromProjItemTrans</c> method
    /// to set CCA field <c>SKS_CC_ServiceOrderId</c>.
    /// </summary>
    /// <param name="_ppArgs"></param>
    [PostHandlerFor(tableStr(PSATmpProjProposalTrans), tableMethodStr(PSATmpProjProposalTrans, initFromProjItemTrans))]
    public static void PSATmpProjProposalTrans_Post_initFromProjItemTrans(XppPrePostArgs _ppArgs)
    {
        PSAProjTrans tProjItemTransSKS = _ppArgs.getArg(identifierStr(tProjItemTrans));
        PSATmpProjProposalTrans pSATmpProjProposalTransSKS = _ppArgs.getThis() as PSATmpProjProposalTrans;

        if (tProjItemTransSKS.TransactionOrigin == ProjOrigin::ItemRequirement)
        {
            PSATmpProjProposalTransTAS_EventHandler::sKS_CC_SetServiceOrderId(pSATmpProjProposalTransSKS, true);
        }
        else
        {
            PSATmpProjProposalTransTAS_EventHandler::sKS_CC_SetServiceOrderId(pSATmpProjProposalTransSKS, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sKS_CC_SetServiceOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ServiceOrderId field for SKS CCA functionality.
    /// </summary>
    /// <param name="_isItemRequirement">
    /// A boolean value to indicate if current item transaction is an item requirement.
    /// </param>
    public static void sKS_CC_SetServiceOrderId(PSATmpProjProposalTrans _pSATmpProjProposalTrans, boolean _isItemRequirement = false)
    {
        SMAServiceOrderLine sMAServiceOrderLineSKS;
        SMATransactionType  sMATransactionTypeSKS;
        SalesLine           salesLine;

        if (!_pSATmpProjProposalTrans.RefTransId)
        {
            return;
        }

        if (!_pSATmpProjProposalTrans.ProjId)
        {
            return;
        }

        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();

        if (sKS_PP_Setup.ModCC == NoYes::No)
        {
            return;
        }

        if (sKS_PP_Setup.CCAllowCCProcFromSvcOrder == NoYes::No &&
            sKS_PP_Setup.CCAllowCCProcFromProjInvProposal == NoYes::No)
        {
            return;
        }

        switch(_pSATmpProjProposalTrans.RefTableId)
        {
            case (tableNum(ProjCostTrans)):
                sMATransactionTypeSKS = SMATransactionType::Expense;
                break;
            case (tableNum(ProjEmplTrans)):
                sMATransactionTypeSKS = SMATransactionType::Hour;
                break;
            case (tableNum(ProjItemTrans)):
                sMATransactionTypeSKS = SMATransactionType::Item;
                break;
            case (tableNum(ProjRevenueTrans)):
                sMATransactionTypeSKS = SMATransactionType::Fee;
                break;
            default:
                return;
        }

        if (_isItemRequirement)
        {
            select firstonly ServiceOrderId from salesLine
                where salesLine.ProjTransId == _pSATmpProjProposalTrans.RefTransId
                   && salesLine.ProjId == _pSATmpProjProposalTrans.ProjId
                   && salesLine.SalesType == SalesType::ItemReq
                   && salesLine.SalesStatus == SalesStatus::Invoiced;

            if (salesLine.ServiceOrderId)
            {
                _pSATmpProjProposalTrans.SKS_CC_ServiceOrderId = salesLine.ServiceOrderId;
            }
        }
        else
        {
            select firstonly ServiceOrderId from sMAServiceOrderLineSKS
                where sMAServiceOrderLineSKS.ProjId == _pSATmpProjProposalTrans.ProjId
                   && sMAServiceOrderLineSKS.TransactionType == sMATransactionTypeSKS
                   && sMAServiceOrderLineSKS.ProjTransId == _pSATmpProjProposalTrans.RefTransId;

            if (sMAServiceOrderLineSKS.ServiceOrderId)
            {
                _pSATmpProjProposalTrans.SKS_CC_ServiceOrderId = sMAServiceOrderLineSKS.ServiceOrderId;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>