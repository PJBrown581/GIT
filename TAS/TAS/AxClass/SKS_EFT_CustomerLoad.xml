<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_CustomerLoad</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_CustomerLoad
{
    





}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreateCustomerPaymRecord</Name>
				<Source><![CDATA[
    static server boolean CreateCustomerPaymRecord(CustTable _custTable, SKS_EFT_Setup _sks_eft_setup,PaymMode _paymMode,PaymSpec _paymSpec, CustBankAccountId _custBankAccountId,
    CompanyBankAccountId _companyBankAccountId = '', int SetPreNote = false, companyId _companyId = curExt())
    {
        SKS_EFT_CustomerPaym  local_SKS_EFT_CustomerPaym;
        CustBankAccount mCustBankAccount;
        boolean Updateprenote;
        ;

        local_SKS_EFT_CustomerPaym = SKS_EFT_CustomerPaym::find(_companyId, _custTable.AccountNum, _paymMode, _paymSpec, _custBankAccountId);
        if(local_SKS_EFT_CustomerPaym)
        {

            return false;
        }

        //primary index fields
        local_SKS_EFT_CustomerPaym.CustCompany = _companyId;
        local_SKS_EFT_CustomerPaym.PaymMode = _paymMode;
        local_SKS_EFT_CustomerPaym.PaymSpec = _paymSpec;
        local_SKS_EFT_CustomerPaym.BankAccountId = _companyBankAccountId;
        local_SKS_EFT_CustomerPaym.AllowCr = SKS_EFT_Setup::find().ARAllowCustBankCredit;

        local_SKS_EFT_CustomerPaym.CustBankAccountId = _custBankAccountId;
        local_SKS_EFT_CustomerPaym.CustAccount = _custTable.AccountNum;

        //Default information
        local_SKS_EFT_CustomerPaym.RecordSummary = _sks_eft_setup.ARACHRecordSummary;

        local_SKS_EFT_CustomerPaym.insert();


        updateprenote = sks_eft_customerload::validatePreNote(local_SKS_EFT_CustomerPaym.PaymMode, local_SKS_EFT_CustomerPaym.PaymSpec);

        If(updateprenote)
        {

            changeCompany(_companyId)
            {
                select firstonly forupdate mCustbankaccount where mCustbankaccount.AccountID == _custBankAccountId
                    && mCustbankaccount.CustAccount ==  _custTable.AccountNum;
                if(mCustbankaccount)
                {
                    ttsbegin;
                    if(mCustbankaccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::NotApplicable && !SetPreNote)
                    {
                        mCustBankAccount.SKS_EFT_PreNoteStatus = SKS_EB_PreNoteStatus::New;
                        mCustBankAccount.SKS_EFT_PreNoteDate = str2date('', 0);

                    }
                    if(mCustbankaccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::NotApplicable && SetPreNote)
                    {
                        mCustBankAccount.SKS_EFT_PreNoteStatus = sks_eb_prenotestatus::Approved;
                        mCustBankAccount.SKS_EFT_PreNoteDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                    }
                    mCustBankAccount.update();
                    ttscommit;
                }
            }

        }
        return True;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCustomerRecord</Name>
				<Source><![CDATA[
    static server boolean CreateCustomerRecord(CustAccount _accountNum, SKS_EFT_Setup _sks_eft_setup, boolean Setactive = True, boolean EnableInPayJournal = True, boolean UseEmail = False, companyId _companyId = curExt())
    {
        SKS_LB_Depositor    local_SKS_LB_Depositor;
        SKS_PP_Setup sks_pp_setup;
        SKS_LB_Setup_AutoCRParms sks_LB_Setup_AutoCRParms;
        ;

        if(!_sks_eft_setup)
        {
            _sks_eft_setup = SKS_EFT_Setup::find();
        }

        select firstonly AutoCR, AutoCRCreateCR, AutoCRAutoRev, LBSettlementMethod, LBWriteOffId
            from sks_pp_setup;

        sks_LB_Setup_AutoCRParms = SKS_LB_Setup_AutoCRParms::find(_companyId);

        //primary index fields
        local_SKS_LB_Depositor.AccountNum = _accountNum;
        local_SKS_LB_Depositor.CustomerCompany = _companyId;

        //Lockbox fields
        local_SKS_LB_Depositor.LBSettlementMethod = sks_pp_setup.LBSettlementMethod;
        if(SKS_PP_Setup.LBSettlementMethod == SKS_LB_SettlementMethod::External)
        {
            local_SKS_LB_Depositor.LBExternalFormatId = SKS_PP_Setup.LBExternalFormatId;
        }
        local_SKS_LB_Depositor.AutoCRFromSetup = NoYes::Yes;
        local_SKS_LB_Depositor.WriteOffId = sks_pp_setup.LBWriteOffId;
        if (sks_LB_Setup_AutoCRParms)
        {
            local_SKS_LB_Depositor.AutoCR = sks_pp_setup.AutoCR;
            local_SKS_LB_Depositor.AutoCRAutoRev = sks_pp_setup.AutoCRAutoRev;
            local_SKS_LB_Depositor.AutoCRLedgerDimension = sks_LB_Setup_AutoCRParms.AutoCRLedgerDimension;
            local_SKS_LB_Depositor.AutoCRGenJrnlName = sks_LB_Setup_AutoCRParms.AutoCRGenJrnlName;
            local_SKS_LB_Depositor.AutoCROffsetLedgerDimension = sks_LB_Setup_AutoCRParms.AutoCROffsetLedgerDimension;
        }
        else
        {
            // if a sks_LB_Setup_AutoCRParms record does not exist for the correct company, null out autocredit info.
            local_SKS_LB_Depositor.AutoCR = NoYes::No;
            local_SKS_LB_Depositor.AutoCRAutoRev = NoYes::No;
            local_SKS_LB_Depositor.AutoCRLedgerDimension = 0;
            local_SKS_LB_Depositor.AutoCRGenJrnlName = '';
            local_SKS_LB_Depositor.AutoCROffsetLedgerDimension = 0;
        }


        //AR EFT fields
        local_SKS_LB_Depositor.EMTemplateFromSetup = NoYes::Yes;
        local_SKS_LB_Depositor.AutoCRFromSetup = NoYes::Yes;

        if(SetActive)
        {
            local_SKS_LB_Depositor.Active = NoYes::Yes;
        }
        else
        {
            local_SKS_LB_Depositor.Active = NoYes::No;
        }
        if(EnableInPayJournal)
        {
            local_SKS_LB_Depositor.PaymCanChange = NoYes::Yes;
        }
        else
        {
            local_SKS_LB_Depositor.PaymCanChange = NoYes::No;
        }

        if(UseEmail)
        {
            local_SKS_LB_Depositor.EMNotification = _sks_eft_setup.AREmail;
            local_SKS_LB_Depositor.AENotification = _sks_eft_setup.ARAdvEmailNotify;
        }

        if(SKS_EFT_CustomerLoad::PrimaryCustomerEmailExists(local_SKS_LB_Depositor.CustomerCompany, local_SKS_LB_Depositor.AccountNum))
        {
            local_SKS_LB_Depositor.EM1Customer = NoYes::Yes;
        }

        local_SKS_LB_Depositor.EMReplyToFromBank = NoYes::Yes;
        local_SKS_LB_Depositor.EMTemplateFromBank = NoYes::Yes;
        local_SKS_LB_Depositor.EMTemplateFromSetup = NoYes::Yes;
        local_SKS_LB_Depositor.EMTemplateWithAttachFromBank = NoYes::Yes; // SKS_Bug_9586

        local_SKS_LB_Depositor.EMAttachNbrDocs = _sks_eft_setup.AREMAttachNbrDocs;
        local_SKS_LB_Depositor.EMAttachFileName = _sks_eft_setup.AREMAttachFileName;
        local_SKS_LB_Depositor.EMAttachFileExt = _sks_eft_setup.AREMAttachFileExt;
        local_SKS_LB_Depositor.EMAttachInclDate = _sks_eft_setup.AREMAttachInclDate;
        local_SKS_LB_Depositor.EMAttachInclCust = _sks_eft_setup.AREMAttachInclCust;

        // FDD-BS-DD remit attach - 7643BUG -->
        local_SKS_LB_Depositor.SKS_DDR_SRS1FileType             = _sks_eft_setup.SKS_DDR_SRS1FileType;
        local_SKS_LB_Depositor.SKS_DDR_SRS1FileName             = _sks_eft_setup.SKS_DDR_SRS1FileName;
        local_SKS_LB_Depositor.SKS_DDR_SRS1EmailSSRS            = _sks_eft_setup.SKS_DDR_SRS1EmailSSRS;
        local_SKS_LB_Depositor.SKS_DDR_SRS1AdvancedEmailSSRS    = _sks_eft_setup.SKS_DDR_SRS1AdvancedEmailSSRS;
        local_SKS_LB_Depositor.SKS_DDR_SRS2Attachment           = _sks_eft_setup.SKS_DDR_SRS2Attachment;
        local_SKS_LB_Depositor.SKS_DDR_SRS1Attachment           = _sks_eft_setup.SKS_DDR_SRS1Attachment;
        local_SKS_LB_Depositor.SKS_DDR_TemplateAttachment       = _sks_eft_setup.SKS_DDR_TemplateAttachment;
        local_SKS_LB_Depositor.SKS_DDR_SRS2FileType             = _sks_eft_setup.SKS_DDR_SRS2FileType;
        local_SKS_LB_Depositor.SKS_DDR_SRS2FileName             = _sks_eft_setup.SKS_DDR_SRS2FileName;
        local_SKS_LB_Depositor.SKS_DDR_SRS2EmailSSRS            = _sks_eft_setup.SKS_DDR_SRS2EmailSSRS;
        local_SKS_LB_Depositor.SKS_DDR_SRS2AdvancedEmailSSRS    = _sks_eft_setup.SKS_DDR_SRS2AdvancedEmailSSRS;
        local_SKS_LB_Depositor.SKS_DDR_SRS1EMTemplateFromSetup  = _sks_eft_setup.SKS_DDR_SRS1Attachment;
        local_SKS_LB_Depositor.SKS_DDR_SRS2EMTemplateFromSetup  = _sks_eft_setup.SKS_DDR_SRS1Attachment;
        local_SKS_LB_Depositor.SKS_DDR_TemplateFromSetup        = _sks_eft_setup.SKS_DDR_TemplateAttachment;
        // FDD-BS-DD remit attach - 7643BUG <--

        // <15223>
        local_SKS_LB_Depositor.LBExternalPath                   = SKS_PP_Setup::find().LBExternalPath;
        // </15223>

        local_SKS_LB_Depositor.insert();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateEFTRecords</Name>
				<Source><![CDATA[
    public static server void CreateEFTRecords(CustTable _custTable)
    {
        SKS_EFT_Setup local_SKS_EFT_Setup;
        CustPaymModeTable local_CustPaymModeTable;
        SKS_EFT_FileFormatPaymSpec local_SKS_EFT_FileFormatPaymSpec;
        boolean setupEmail = false;
        ;

        local_SKS_EFT_Setup = SKS_EFT_Setup::find();
        if (local_SKS_EFT_Setup)  //Only create the records if EFT is setup
        {
            local_CustPaymModeTable = CustPaymModeTable::find(_custTable.PaymMode);
            if (local_CustPaymModeTable.SKS_EFT_PaymMode == NoYes::Yes)  //If method of payment is EFt+
            {
                if(local_SKS_EFT_Setup.ARCreateCustBankrecord && _custTable.paymmode != '' && _custTable.PaymSpec != '' && _custTable.BankAccount != '')
                {
                    ttsBegin;
                    select firstOnly FormatId, PaymSpec, EmailOff from local_SKS_EFT_FileFormatPaymSpec where
                        local_SKS_EFT_FileFormatPaymSpec.FormatId == local_CustPaymModeTable.SKS_EFT_FormatId &&
                        local_SKS_EFT_FileFormatPaymSpec.PaymSpec == _custTable.PaymSpec &&
                        local_SKS_EFT_FileFormatPaymSpec.EmailOff == NoYes::No;

                    // If payment spec has e-mail On and setup has e-mail On
                    if(local_SKS_EFT_FileFormatPaymSpec && (local_SKS_EFT_Setup.AREmail || local_SKS_EFT_Setup.ARAdvEmailNotify))
                    {
                        setupEmail = true;
                    }
                    SKS_EFT_CustomerLoad::CreateFindCustomerRecord(_custTable.AccountNum, local_SKS_EFT_Setup, true, true, setupEmail);
                    SKS_EFT_CustomerLoad::CreateCustomerPaymRecord(_custTable,local_SKS_EFT_Setup,_custTable.PaymMode, _custTable.PaymSpec, _custTable.BankAccount);
                    
                    if(local_SKS_EFT_Setup.CNPCreateCRrecord && local_SKS_EFT_Setup.CNPDefaultPaymMode && local_SKS_EFT_Setup.CNPDefaultPaymSpec) //DevOps #16297
                    {
                        SKS_EFT_CustomerLoad::CreateCustReimbursementPaymRecord(_custTable,local_SKS_EFT_Setup,local_SKS_EFT_Setup.CNPDefaultPaymMode, local_SKS_EFT_Setup.CNPDefaultPaymSpec, _custTable.BankAccount);
                    }

                    ttsCommit;
                }
            }

            if (local_CustPaymModeTable.SKS_CNP_PaymMode == NoYes::Yes)  //If method of payment is EFt+
            {
                if(local_SKS_EFT_Setup.CNPCreateCRrecord && _custTable.paymmode != '' && _custTable.PaymSpec != '' && _custTable.BankAccount != '')
                {
                    ttsBegin;
                    SKS_EFT_CustomerLoad::CreateFindCNPCustomerRecord(_custTable.AccountNum, local_SKS_EFT_Setup, true, true, setupEmail);
                    SKS_EFT_CustomerLoad::CreateCustReimbursementPaymRecord(_custTable,local_SKS_EFT_Setup,_custTable.PaymMode, _custTable.PaymSpec, _custTable.BankAccount);
                    ttsCommit;
                }
            }


        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFindCustomerRecord</Name>
				<Source><![CDATA[
    static server SKS_LB_Depositor CreateFindCustomerRecord(CustAccount _accountNum, SKS_EFT_Setup _sks_eft_setup, boolean _setActive = True, boolean _enableInPayJournal = True, boolean _useEmail = False, companyId _companyId = curExt())
    {
        SKS_LB_Depositor    local_SKS_LB_Depositor;
        CompanyId           locCompanyId = _companyId ? _companyId : curExt(); // 21818

        if (_accountNum)
        {
            local_SKS_LB_Depositor = SKS_LB_Depositor::findWithSetup(locCompanyId, _accountNum);

            if(!local_SKS_LB_Depositor)
            {
                SKS_EFT_CustomerLoad::CreateCustomerRecord(_accountNum, _sks_eft_setup, _setActive, _enableInPayJournal, _useEmail, locCompanyId);
                local_SKS_LB_Depositor = SKS_LB_Depositor::findWithSetup(locCompanyId, _accountNum);
            }
        }

        return local_SKS_LB_Depositor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PrimaryCustomerEmailExists</Name>
				<Source><![CDATA[
    public server static boolean PrimaryCustomerEmailExists(companyId _custCompany, CustVendAC _custAccount)
    {
        SKS_EFT_Setup local_SKS_EFT_Setup = SKS_EFT_Setup::find();
        CustTable   local_CustTable;
        DirPartyContactInfoview local_DirPartyContactInfoview;
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
        LogisticsLocationRole           locationRole;
        LogisticsElectronicAddressRole  logisticsElectronicAddressRole;
        boolean ret = false;
        ;

        if(_custCompany)
        {

            local_CustTable = CustTable::findByCompany(_custCompany, _custAccount);
            /*
                select * from local_DirPartyContactInfoview
                    where local_DirPartyContactInfoview.Party == local_CustTable.Party
                        &&  local_DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email
                        &&  local_DirPartyContactInfoview.local_SKS_EFT_Setup;
            */
            if(local_SKS_EFT_Setup.EmailContactPurpose != '')
            {

                select firstonly RecId from logisticsElectronicAddress
                            where logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                        exists join dirPartyLocation
                            where dirPartyLocation.Location == logisticsElectronicAddress.Location &&
                                    dirPartyLocation.Party == local_CustTable.Party
                        exists join logisticsElectronicAddressRole
                            where logisticsElectronicAddressRole.ElectronicAddress == logisticsElectronicAddress.RecId
                        exists join locationRole
                           where locationRole.RecId == logisticsElectronicAddressRole.LocationRole
                                && locationRole.Name == local_SKS_EFT_Setup.EmailContactPurpose;
            }

            if(logisticsElectronicAddress)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePreNote</Name>
				<Source><![CDATA[
    Static boolean validatePreNote(PaymMode _PayMode, PaymSpec _PaymSpec)
    {

        SKS_EFT_FileFormat  sks_eft_fileformat;
        SKS_EFT_FileFormatPaymSpec  sks_eft_fileformatpaymspec;
        SKS_EFT_Setup msks_eft_setup;
        CustPaymModeTable custpaymmodetable;
        Boolean PrenoteSet;
        ;

        changeCompany(msks_eft_setup.dataAreaId)
        {
            msks_eft_setup = SKS_EFT_Setup::find();
            If(msks_eft_setup.ARReqPreNote == True)
            {

                select firstonly * from custpaymmodetable where
                custpaymmodetable.PaymMode == _PayMode
                  join PreNote, FormatId from sks_eft_fileformat where
                    sks_eft_FileFormat.FormatId == custpaymmodetable.SKS_EFT_FormatId &&
                    sks_eft_FileFormat.PreNote == NoYes::Yes
                  join PreNote, FormatId, PaymSpec from sks_eft_fileformatpaymspec where
                    sks_eft_fileformatpaymspec.FormatId == sks_eft_fileformat.FormatId &&
                    sks_eft_fileformatpaymspec.PaymSpec == _PaymSpec &&
                    sks_eft_fileformatpaymspec.PreNote == NoYes::Yes;

                if(custpaymmodetable)
                {
                    PrenoteSet = True;
                }
                else
                {
                    PrenoteSet = false;
                }
            } /*setup for prenote */
            else
            {
                PrenoteSet = false;
            }
        } /*changecompany */
        return PrenoteSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerAddresses</Name>
				<Source><![CDATA[
    public static server void UpdateCustomerAddresses(SKS_EFT_CustReimbursementPaym  _SKS_EFT_CustReimbursementPaym, boolean _blankout = false, LogisticsLocationRecId _location = 0)
    {
        CustTable custTable;
        LogisticsLocation locLogisticsLocationPrimary;
        DirPartyLocation locDirPartyLocation;
        LogisticsPostalAddress locLogisticsPostalAddressPrimary;
        Array vendAddrArray = new Array(Types::String);
        SKS_EB_Address addrLine1;
        SKS_EB_Address addrLine2;

        custTable = custTable::findByCompany(_SKS_EFT_CustReimbursementPaym.CustCompany, _SKS_EFT_CustReimbursementPaym.CustAccount);

        if(_location)
        {
            locLogisticsLocationPrimary = LogisticsLocation::find(_location);
        }
        else
        {
            Select firstonly Party, IsPostalAddress, IsPrimary from locDirPartyLocation
                where locDirPartyLocation.Party == custTable.Party
                    && locDirPartyLocation.IsPostalAddress == NoYes::Yes
                    && locDirPartyLocation.IsPrimary == NoYes::Yes
                join RecId, LocationId, Description from locLogisticsLocationPrimary
                    where locLogisticsLocationPrimary.RecId == locDirPartyLocation.Location;

            select firstonly * from locLogisticsPostalAddressPrimary
                    where locLogisticsPostalAddressPrimary.Location == locLogisticsLocationPrimary.Recid;
        }

        if (locLogisticsPostalAddressPrimary)
        {
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(locLogisticsPostalAddressPrimary.Street,2);

            if (vendAddrArray.exists(1))
            {
                addrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    addrLine2 = vendAddrArray.value(2);
                }
            }

            _SKS_EFT_CustReimbursementPaym.WBeneUseCustAddr = NoYes::Yes;
            _SKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation = locLogisticsLocationPrimary.RecId;
            _SKS_EFT_CustReimbursementPaym.WBeneName = locLogisticsLocationPrimary.Description;
            _SKS_EFT_CustReimbursementPaym.WBeneAddr = addrLine1;
            _SKS_EFT_CustReimbursementPaym.WBeneAddr2 = addrLine2;
            _SKS_EFT_CustReimbursementPaym.WBeneCity = locLogisticsPostalAddressPrimary.City;
            _SKS_EFT_CustReimbursementPaym.WBeneState = locLogisticsPostalAddressPrimary.State;
            _SKS_EFT_CustReimbursementPaym.WBeneZipPostal = locLogisticsPostalAddressPrimary.ZipCode;
            _SKS_EFT_CustReimbursementPaym.WBeneCountryRegionId = locLogisticsPostalAddressPrimary.CountryRegionId;
        }
        else if(!locLogisticsLocationPrimary)
        {
            _SKS_EFT_CustReimbursementPaym.WBeneUseCustAddr = NoYes::No;
            _SKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation = 0;
            _SKS_EFT_CustReimbursementPaym.WBeneName = '';
            _SKS_EFT_CustReimbursementPaym.WBeneAddr = '';
            _SKS_EFT_CustReimbursementPaym.WBeneAddr2 = '';
            _SKS_EFT_CustReimbursementPaym.WBeneCity = '';
            _SKS_EFT_CustReimbursementPaym.WBeneState = '';
            _SKS_EFT_CustReimbursementPaym.WBeneZipPostal = '';
            _SKS_EFT_CustReimbursementPaym.WBeneCountryRegionId = '';
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerBankAddresses</Name>
				<Source><![CDATA[
    public static server void UpdateCustomerBankAddresses(SKS_EFT_CustReimbursementPaym  _SKS_EFT_CustReimbursementPaym, boolean _blankout = false)
    {
        CustBankAccount custBankAccount;
        LogisticsLocation logisticsLocation;
        LogisticsPostalAddress logisticsPostalAddress;

        custBankAccount = CustBankAccount::findByCompany(_SKS_EFT_CustReimbursementPaym.CustCompany,_SKS_EFT_CustReimbursementPaym.CustAccount,_SKS_EFT_CustReimbursementPaym.CustBankAccountId);

        if (custBankAccount && !_blankout)
        {
            logisticsLocation = LogisticsLocation::find(custBankAccount.Location);
            logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(logisticsLocation.RecId, DateTimeUtil::getSystemDateTime(), true);

            _SKS_EFT_CustReimbursementPaym.WBeneUseCustBankAcc = NoYes::Yes;
            _SKS_EFT_CustReimbursementPaym.WBenBankName = custBankAccount.Name;
            _SKS_EFT_CustReimbursementPaym.WBenBankAddr = strRem(logisticsPostalAddress.Street, '\r\n');
            _SKS_EFT_CustReimbursementPaym.WBenBankCity = logisticsPostalAddress.City;
            _SKS_EFT_CustReimbursementPaym.WBenBankCountryRegionId = logisticsPostalAddress.CountryRegionId;
        }
        else
        {
            //_SKS_EFT_CustReimbursementPaym.WBeneUseCustBankAcc = NoYes::No;
            _SKS_EFT_CustReimbursementPaym.WBenBankName = '';
            _SKS_EFT_CustReimbursementPaym.WBenBankAddr = '';
            _SKS_EFT_CustReimbursementPaym.WBenBankCity = '';
            _SKS_EFT_CustReimbursementPaym.WBenBankCountryRegionId = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerIntermediaryBank</Name>
				<Source><![CDATA[
    public static server void UpdateCustomerIntermediaryBank(SKS_EFT_CustReimbursementPaym  _SKS_EFT_CustReimbursementPaym, boolean _blankout = false)
    {
        CustBankAccount custBankAccount;

        custBankAccount = custBankAccount::findByCompany(_SKS_EFT_CustReimbursementPaym.CustCompany,
                                                         _SKS_EFT_CustReimbursementPaym.CustAccount,
                                                         _SKS_EFT_CustReimbursementPaym.custBankAccountId);

        if (custBankAccount && !_blankout)
        {
            _SKS_EFT_CustReimbursementPaym.WIntUseCustBankAcc = NoYes::Yes;
            _SKS_EFT_CustReimbursementPaym.WIntBankAcct = custBankAccount.SKS_IHB_WIntBankAcct;
            _SKS_EFT_CustReimbursementPaym.WIntBankAddr = custBankAccount.SKS_IHB_WIntBankAddr;
            _SKS_EFT_CustReimbursementPaym.WIntBankAddr2 = custBankAccount.SKS_IHB_WIntBankAddr2;
            _SKS_EFT_CustReimbursementPaym.WIntBankBranch = custBankAccount.SKS_IHB_WIntBankBranch;
            _SKS_EFT_CustReimbursementPaym.WIntBankCity = custBankAccount.SKS_IHB_WIntBankCity;
            _SKS_EFT_CustReimbursementPaym.WIntBankCountryRegionId = custBankAccount.SKS_IHB_WIntBankCountryRegionId;
            _SKS_EFT_CustReimbursementPaym.WIntBankId = custBankAccount.SKS_IHB_WIntBankId;
            _SKS_EFT_CustReimbursementPaym.WIntBankName = custBankAccount.SKS_IHB_WIntBankName;
            _SKS_EFT_CustReimbursementPaym.WIntBankSwift = custBankAccount.SKS_IHB_WIntBankSwift;
        }
        else
        {
            //_SKS_EFT_CustReimbursementPaym.WIntUseCustBankAcc = NoYes::No;
            _SKS_EFT_CustReimbursementPaym.WIntBankAcct = '';
            _SKS_EFT_CustReimbursementPaym.WIntBankAddr = '';
            _SKS_EFT_CustReimbursementPaym.WIntBankAddr2 = '';
            _SKS_EFT_CustReimbursementPaym.WIntBankBranch = '';
            _SKS_EFT_CustReimbursementPaym.WIntBankCity = '';
            _SKS_EFT_CustReimbursementPaym.WIntBankCountryRegionId = '';
            _SKS_EFT_CustReimbursementPaym.WIntBankId = '';
            _SKS_EFT_CustReimbursementPaym.WIntBankName = '';
            _SKS_EFT_CustReimbursementPaym.WIntBankSwift = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerCreditParty</Name>
				<Source><![CDATA[
    public static server void UpdateCustomerCreditParty(SKS_EFT_CustReimbursementPaym  _SKS_EFT_CustReimbursementPaym, boolean _blankout = false)
    {
        CustBankAccount custBankAccount;

        custBankAccount = CustBankAccount::findByCompany(_SKS_EFT_CustReimbursementPaym.CustCompany,
                                                         _SKS_EFT_CustReimbursementPaym.CustAccount,
                                                         _SKS_EFT_CustReimbursementPaym.custBankAccountId);

        if (custBankAccount && !_blankout)
        {
            _SKS_EFT_CustReimbursementPaym.WCrePartyUseCustBankAcc = NoYes::Yes;
            _SKS_EFT_CustReimbursementPaym.WCrePartyAcct = custBankAccount.SKS_IHB_WCrePartyAcct;
            _SKS_EFT_CustReimbursementPaym.WCrePartyAddr = custBankAccount.SKS_IHB_WCrePartyAddr;
            _SKS_EFT_CustReimbursementPaym.WCrePartyBankId = custBankAccount.SKS_IHB_WCrePartyBankId;
            _SKS_EFT_CustReimbursementPaym.WCrePartyBankName = custBankAccount.SKS_IHB_WCrePartyBankName;
            _SKS_EFT_CustReimbursementPaym.WCrePartyCity = custBankAccount.SKS_IHB_WCrePartyCity;
            _SKS_EFT_CustReimbursementPaym.WCrePartyCountryRegionId = custBankAccount.SKS_IHB_WCrePartyCountryRegionId;
            _SKS_EFT_CustReimbursementPaym.WCrePartyName = custBankAccount.SKS_IHB_WCrePartyName;
            _SKS_EFT_CustReimbursementPaym.WCrePartySwift = custBankAccount.SKS_IHB_WCrePartySwift;
        }
        else
        {
            //_SKS_EFT_CustReimbursementPaym.WCrePartyUseCustBankAcc = NoYes::No;
            _SKS_EFT_CustReimbursementPaym.WCrePartyAcct = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartyAcctType = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartyAddr = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartyAdvice = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartyBankId = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartyBankName = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartyCity = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartyCountryRegionId = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartyName = '';
            _SKS_EFT_CustReimbursementPaym.WCrePartySwift = '';
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCustReimbursementPaymRecord</Name>
				<Source><![CDATA[
    static server boolean CreateCustReimbursementPaymRecord(CustTable _custTable, SKS_EFT_Setup _sks_eft_setup,PaymMode _paymMode,PaymSpec _paymSpec, CustBankAccountId _custBankAccountId,
    CompanyBankAccountId _companyBankAccountId = '', int SetPreNote = false, companyId _companyId = curExt())
    {
        SKS_EFT_CustReimbursementPaym  lSKS_EFT_CustReimbursementPaym;
        CustBankAccount mCustBankAccount;
        boolean Updateprenote;
        SKS_EFT_FileFormatPaymSpec    local_SKS_EFT_FileFormatPaymSpec;
        CustPaymModeTable             local_CustPaymModeTable;
        ;

        lSKS_EFT_CustReimbursementPaym = SKS_EFT_CustReimbursementPaym::find(_companyId, _custTable.AccountNum, _paymMode, _paymSpec, _custBankAccountId);
        

        if(lSKS_EFT_CustReimbursementPaym)
        {
            return false;
        }

        select firstOnly SKS_CNP_FormatId, PaymMode from local_CustPaymModeTable
            where local_CustPaymModeTable.PaymMode == _paymMode;

        lSKS_EFT_CustReimbursementPaym.FormatId = local_CustPaymModeTable.SKS_CNP_FormatId;

        select firstOnly FormatId, PaymSpec, WireTabs from local_SKS_EFT_FileFormatPaymSpec
            where local_SKS_EFT_FileFormatPaymSpec.FormatId == lSKS_EFT_CustReimbursementPaym.FormatId &&
                  local_SKS_EFT_FileFormatPaymSpec.PaymSpec == _paymSpec;

        //primary index fields
        lSKS_EFT_CustReimbursementPaym.CustCompany = _companyId;
        lSKS_EFT_CustReimbursementPaym.PaymMode = _paymMode;
        lSKS_EFT_CustReimbursementPaym.PaymSpec = _paymSpec;
        lSKS_EFT_CustReimbursementPaym.BankAccountId = _companyBankAccountId;

        lSKS_EFT_CustReimbursementPaym.CustBankAccountId = _custBankAccountId;
        lSKS_EFT_CustReimbursementPaym.CustAccount = _custTable.AccountNum;

        //Default information
        lSKS_EFT_CustReimbursementPaym.RecordSummary = _sks_eft_setup.CNPRecordSummary;

        if(local_SKS_EFT_FileFormatPaymSpec.WireTabs)
        {
            SKS_EFT_CustomerLoad::UpdateCustomerAddresses(lSKS_EFT_CustReimbursementPaym, false, lSKS_EFT_CustReimbursementPaym.WBeneRemittanceLocation);
            SKS_EFT_CustomerLoad::UpdateCustomerBankAddresses(lSKS_EFT_CustReimbursementPaym);
            SKS_EFT_CustomerLoad::UpdateCustomerIntermediaryBank(lSKS_EFT_CustReimbursementPaym);
            SKS_EFT_CustomerLoad::UpdateCustomerCreditParty(lSKS_EFT_CustReimbursementPaym);
        }
        lSKS_EFT_CustReimbursementPaym.insert();


        return True;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFindCNPCustomerRecord</Name>
				<Source><![CDATA[
    static server SKS_LB_Depositor CreateFindCNPCustomerRecord(CustAccount _accountNum, SKS_EFT_Setup _sks_eft_setup, boolean _setActive = True, boolean _enableInPayJournal = True, boolean _useEmail = False, companyId _companyId = curExt())
    {
        SKS_LB_Depositor    local_SKS_LB_Depositor;

        if (_accountNum)
        {
            local_SKS_LB_Depositor = SKS_LB_Depositor::findWithSetup(_companyId, _accountNum);

            if(!local_SKS_LB_Depositor)
            {
                SKS_EFT_CustomerLoad::CreateCNPCustomerRecord(_accountNum, _sks_eft_setup, _setActive, _enableInPayJournal, _useEmail, _companyId);
                local_SKS_LB_Depositor = SKS_LB_Depositor::findWithSetup(_companyId, _accountNum);
            }
        }

        return local_SKS_LB_Depositor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCNPCustomerRecord</Name>
				<Source><![CDATA[
    static server boolean CreateCNPCustomerRecord(CustAccount _accountNum, SKS_EFT_Setup _sks_eft_setup, boolean Setactive = True, boolean EnableInPayJournal = True, boolean UseEmail = False, companyId _companyId = curExt())
    {
        SKS_LB_Depositor    local_SKS_LB_Depositor;
        SKS_PP_Setup sks_pp_setup;
        //SKS_LB_Setup_AutoCRParms sks_LB_Setup_AutoCRParms;
        ;

        if(!_sks_eft_setup)
        {
            _sks_eft_setup = SKS_EFT_Setup::find();
        }

        select firstonly AutoCR, AutoCRCreateCR, AutoCRAutoRev, LBSettlementMethod, LBWriteOffId
            from sks_pp_setup;

        //sks_LB_Setup_AutoCRParms = SKS_LB_Setup_AutoCRParms::find(_companyId);

        //primary index fields
        local_SKS_LB_Depositor.AccountNum = _accountNum;
        local_SKS_LB_Depositor.CustomerCompany = _companyId;

        //Lockbox fields
        //local_SKS_LB_Depositor.LBSettlementMethod = sks_pp_setup.LBSettlementMethod;
        //if(SKS_PP_Setup.LBSettlementMethod == SKS_LB_SettlementMethod::External)
        //{
        //    local_SKS_LB_Depositor.LBExternalFormatId = SKS_PP_Setup.LBExternalFormatId;
        //}
        //local_SKS_LB_Depositor.AutoCRFromSetup = NoYes::Yes;
        //local_SKS_LB_Depositor.WriteOffId = sks_pp_setup.LBWriteOffId;
        //if (sks_LB_Setup_AutoCRParms)
        //{
        //    local_SKS_LB_Depositor.AutoCR = sks_pp_setup.AutoCRCreateCR;
        //    local_SKS_LB_Depositor.AutoCRAutoRev = sks_pp_setup.AutoCRAutoRev;
        //    local_SKS_LB_Depositor.AutoCRLedgerDimension = sks_LB_Setup_AutoCRParms.AutoCRLedgerDimension;
        //    local_SKS_LB_Depositor.AutoCRGenJrnlName = sks_LB_Setup_AutoCRParms.AutoCRGenJrnlName;
        //    local_SKS_LB_Depositor.AutoCROffsetLedgerDimension = sks_LB_Setup_AutoCRParms.AutoCROffsetLedgerDimension;
        //}
        //else
        //{
        //    // if a sks_LB_Setup_AutoCRParms record does not exist for the correct company, null out autocredit info.
        //    local_SKS_LB_Depositor.AutoCR = NoYes::No;
        //    local_SKS_LB_Depositor.AutoCRAutoRev = NoYes::No;
        //    local_SKS_LB_Depositor.AutoCRLedgerDimension = 0;
        //    local_SKS_LB_Depositor.AutoCRGenJrnlName = '';
        //    local_SKS_LB_Depositor.AutoCROffsetLedgerDimension = 0;
        //}


        //CNP EFT fields
        //local_SKS_LB_Depositor.EMTemplateFromSetup = NoYes::Yes;
        local_SKS_LB_Depositor.AutoCRFromSetup = NoYes::Yes;

        if(SetActive)
        {
            local_SKS_LB_Depositor.Active = NoYes::Yes;
        }
        else
        {
            local_SKS_LB_Depositor.Active = NoYes::No;
        }
        if(EnableInPayJournal)
        {
            local_SKS_LB_Depositor.PaymCanChange = NoYes::Yes;
        }
        else
        {
            local_SKS_LB_Depositor.PaymCanChange = NoYes::No;
        }

        /*
        if(UseEmail)
        {
            local_SKS_LB_Depositor.EMNotification = _sks_eft_setup.AREmail;
            local_SKS_LB_Depositor.AENotification = _sks_eft_setup.ARAdvEmailNotify;
        }

        if(SKS_EFT_CustomerLoad::PrimaryCustomerEmailExists(local_SKS_LB_Depositor.CustomerCompany, local_SKS_LB_Depositor.AccountNum))
        {
            local_SKS_LB_Depositor.EM1Customer = NoYes::Yes;
        }

        local_SKS_LB_Depositor.EMReplyToFromBank = NoYes::Yes;
        local_SKS_LB_Depositor.EMTemplateFromBank = NoYes::Yes;
        local_SKS_LB_Depositor.EMTemplateFromSetup = NoYes::Yes;
        local_SKS_LB_Depositor.EMTemplateWithAttachFromBank = NoYes::Yes; // SKS_Bug_9586

        local_SKS_LB_Depositor.EMAttachNbrDocs = _sks_eft_setup.AREMAttachNbrDocs;
        local_SKS_LB_Depositor.EMAttachFileName = _sks_eft_setup.AREMAttachFileName;
        local_SKS_LB_Depositor.EMAttachFileExt = _sks_eft_setup.AREMAttachFileExt;
        local_SKS_LB_Depositor.EMAttachInclDate = _sks_eft_setup.AREMAttachInclDate;
        local_SKS_LB_Depositor.EMAttachInclCust = _sks_eft_setup.AREMAttachInclCust;

        // FDD-BS-DD remit attach - 7643BUG -->
        local_SKS_LB_Depositor.SKS_DDR_SRS1FileType             = _sks_eft_setup.SKS_DDR_SRS1FileType;
        local_SKS_LB_Depositor.SKS_DDR_SRS1FileName             = _sks_eft_setup.SKS_DDR_SRS1FileName;
        local_SKS_LB_Depositor.SKS_DDR_SRS1EmailSSRS            = _sks_eft_setup.SKS_DDR_SRS1EmailSSRS;
        local_SKS_LB_Depositor.SKS_DDR_SRS1AdvancedEmailSSRS    = _sks_eft_setup.SKS_DDR_SRS1AdvancedEmailSSRS;
        local_SKS_LB_Depositor.SKS_DDR_SRS2Attachment           = _sks_eft_setup.SKS_DDR_SRS2Attachment;
        local_SKS_LB_Depositor.SKS_DDR_SRS1Attachment           = _sks_eft_setup.SKS_DDR_SRS1Attachment;
        local_SKS_LB_Depositor.SKS_DDR_TemplateAttachment       = _sks_eft_setup.SKS_DDR_TemplateAttachment;
        local_SKS_LB_Depositor.SKS_DDR_SRS2FileType             = _sks_eft_setup.SKS_DDR_SRS2FileType;
        local_SKS_LB_Depositor.SKS_DDR_SRS2FileName             = _sks_eft_setup.SKS_DDR_SRS2FileName;
        local_SKS_LB_Depositor.SKS_DDR_SRS2EmailSSRS            = _sks_eft_setup.SKS_DDR_SRS2EmailSSRS;
        local_SKS_LB_Depositor.SKS_DDR_SRS2AdvancedEmailSSRS    = _sks_eft_setup.SKS_DDR_SRS2AdvancedEmailSSRS;
        local_SKS_LB_Depositor.SKS_DDR_SRS1EMTemplateFromSetup  = _sks_eft_setup.SKS_DDR_SRS1Attachment;
        local_SKS_LB_Depositor.SKS_DDR_SRS2EMTemplateFromSetup  = _sks_eft_setup.SKS_DDR_SRS1Attachment;
        local_SKS_LB_Depositor.SKS_DDR_TemplateFromSetup        = _sks_eft_setup.SKS_DDR_TemplateAttachment;
        // FDD-BS-DD remit attach - 7643BUG <--
        */
        local_SKS_LB_Depositor.insert();

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>