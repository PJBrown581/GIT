<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_InhouseBankStatementEmailCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_IHB_InhouseBankStatementEmailCreate
{
    SysEmailTable           emailTable;
    boolean                 doEmail;
    SYSEmailMessageTable    message;
    str                     messageBody;
    FilenameOpen            attachmentfileName;
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>emailProcess</Name>
				<Source><![CDATA[
    public  static void emailProcess(
        CompanyBankAccountId        _accountId,
        TransDate                   _statementdate,
        BankAccountStatementNum     _statementNumber,
        RecId                       _recId,
        SKS_EB_FilePath             _filepath = '',
        SKS_EB_FileName             _filename = '')
    {
        CompanyBankAccountId        accountId = _accountId;
        TransDate                   statementdate = _statementdate;
        BankAccountStatementNum     statementNumber = _statementNumber;
        RecId                       recid = _recId;
        SKS_EB_FilePath             filepath;
        SKS_EB_FileName             filename;
        SKS_IHB_InhouseBankAccountsStatementDetails accountsStatementDetails;


        SKS_IHB_InhouseBankStatementEmailCreate     emailCreate= new SKS_IHB_InhouseBankStatementEmailCreate();
        filepath = _filepath;
        filename = _filename;
        //accountsStatementDetails = _accountsStatementDetails;
        emailCreate.InhouseBankSendMail(accountId, statementdate, statementNumber);
        emailCreate.sendIHBmail(filepath, filename,accountId, statementdate, statementNumber,recid);

    }

]]></Source>
			</Method>
			<Method>
				<Name>InhouseBankSendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setting the email details.
    /// </summary>
    /// <param name="_fileName">
    /// File name to attach.
    /// </param>
    /// <param name="_emailAddr">
    /// Email address to send mail.
    /// </param>
    /// <remarks>
    /// Email details setup.
    /// </remarks>
    public void InhouseBankSendMail(
        CompanyBankAccountId        _accountId,
        TransDate                   _statementdate,
        BankAccountStatementNum     _statementNumber)
    {
        CompanyBankAccountId        accountId = _accountId;
        TransDate                   statementdate = _statementdate;
        BankAccountStatementNum     statementNumber = _statementNumber;        
        SKS_PP_Bank                 inhouseBankSetup;
       
        inhouseBankSetup =SKS_PP_Bank::find(accountId, curExt());
        
        if (inhouseBankSetup.RecId)
        {
            doEmail = true;
            emailTable = SysEmailTable::find(inhouseBankSetup.IHB_AttachTemplate);
            message = SysEmailMessageTable::find(emailTable.EmailId,emailTable.DefaultLanguage);

            if (!emailTable || !message)
            {
                info("@SKS:SKGEmailFailed");
                return;
            }
            messagebody = message.Mail;
            messagebody = strReplace(messageBody,'%CompanyName%',CompanyInfo::findDataArea(curExt()).Name);
            messagebody = strReplace(messageBody,'%BANKACCOUNTID%',accountId);
            messagebody = strReplace(messageBody,'%StatementDateRegional%',date2Str(statementdate,-1,DateDay::Digits2,-1, DateMonth::Digits2, -1, DateYear::Digits4));          
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendIHBMail</Name>
				<Source><![CDATA[
    public boolean sendIHBMail(
        SKS_EB_FilePath             _filepath,
        SKS_EB_FileName             _filename,
        CompanyBankAccountId        _accountId,
        TransDate                   _statementdate,
        BankAccountStatementNum     _statementNumber,
        RecId                       _recId)
    {
        SysMailerMessageBuilder     messageBuilder;
        SKS_PP_Bank                 inhouseBankSetup;
        str                         html;
        container                   data;
        boolean                     ret = true;
        str                         fileName;
        SKS_EB_FilePath             filepath;
        CompanyBankAccountId        accountId = _accountId;
        TransDate                   statementdate = _statementdate;
        BankAccountStatementNum     statementNumber = _statementNumber;
        RecId                       recId = _recId;
        //SKS_IHB_InhouseBankAccountsStatementDetails bankStatementDetails = _bankStatementDetails;
        #File
        
       
        fileName = _filename;
        filepath = _filepath;
        messageBuilder = new SysMailerMessageBuilder();
        inhouseBankSetup =SKS_PP_Bank::find(accountId, curExt());

        messageBuilder.setFrom(emailTable.SenderAddr, emailTable.SenderName)
                      .setSubject(message.Subject);
        messageBuilder.addReplyTo(inhouseBankSetup.IHB_ReplyToEmail,inhouseBankSetup.IHB_ReplyToName);
        messageBuilder.addTo(inhouseBankSetup.IHB_EmailAddress);

        switch (emailTable.priority)
        {
            case eMailPriority::High:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::High);
                break;
            case eMailPriority::Low:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::Low);
                break;
            default:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::Normal);
                break;
        }
        [html, data] = SysEmailBatch::embedImages(messageBody);
    
        messageBuilder.setBody(html);
        // code for PDF attachment.
        SKS_IHB_BankStatementFileEmail bankStatementAttach = new SKS_IHB_BankStatementFileEmail();
        bankStatementAttach.addAttachmentToMail(accountId, statementdate, statementNumber, recId,messageBuilder);

        if(ret)
        {
            System.Exception exception;
            try
            {
                ret = SysMailerFactory::sendNonInteractive(messageBuilder.getMessage());
            }
            catch(exception)
            {
                error(exception.get_Message());
                ret=false ;                
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadStringToStream</Name>
				<Source><![CDATA[
    private System.IO.MemoryStream loadStringToStream(str _text)
    {
        return new System.IO.MemoryStream(new System.Text.UTF8Encoding().GetBytes(_text));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>