<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_FileHub</Name>
	<SourceCode>
		<Declaration><![CDATA[
using  Microsoft.Dynamics.ApplicationPlatform.Environment;

class SKS_EB_FileHub
{
    SKG_File.Models.SKGHeaderModel header;
    SKG_File.Models.SKGFileModel file;
    SKG_File.Models.SKGFileAttributeModel attribute;
    SKG_File.Models.SKGResponseModel response;
    SKS_BF_BankIntType gSKS_BF_BankIntType;
    SKS_BF_Connection gSKS_BF_Connection;

    SKG_File.Models.SKGAppendLineModel append;

    //  BankFabric
    List            dataList;
    str             bF_CommName_Path;
    SKS_EB_FilePath bf_filePath;
    SKS_EB_FilePath bf_fileSubFolder;
    SKS_EFT_FileNbr bf_fileNbr;
    SKS_EB_FileName bf_fileNameName;
    SKS_EB_FileName bf_NewfileName;
    SKS_EB_FileName bf_NewControlfileName;
    DataAreaId      bf_company;
    str             bf_Exeception;
    //  BankFabric

    System.IO.Stream stream;

    str fileName = '';
    str fileBody = '';

    int encoding = 0;
    int timeOutValue = 5;
    boolean fileCRLF = true;
    boolean fileRemoveUTF8BOM = false;

    boolean commandDeleteLogsAfterProgramExecution = false;

    boolean throwErrorIfException = true;
    boolean trace = false;
    boolean fileOverwrite = true;
    utcdatetime lastTripToTheServer;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(SKG_File.Models.SKGHeaderModel _header, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        header = _header;
        trace = header.Trace;
        gSKS_BF_BankIntType = _SKS_BF_BankIntType;  //BankFabric
        dataList = new List(Types::String);         //BankFabric
        if(_SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            gSKS_BF_Connection = SKS_BF_Connection::constuct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_EB_FileHub construct(SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        return new SKS_EB_FileHub(SKS_EB_FileHub::createHeaderFromDB(_SKS_BF_BankIntType), _SKS_BF_BankIntType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDNS</Name>
				<Source><![CDATA[
    public static str getDNS(SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        str ret;
        IApplicationEnvironment config = EnvironmentFactory::GetApplicationEnvironment();

        if(config.Infrastructure.FullyQualifiedDomainName != '')
        {
            ret = config.Infrastructure.FullyQualifiedDomainName;
        }
        else
        {
            ret = config.Infrastructure.HostName;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderFromDB</Name>
				<Source><![CDATA[
    static SKG_File.Models.SKGHeaderModel createHeaderFromDB(SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileStorage  lSKS_EB_FileStorage;
        select firstonly lSKS_EB_FileStorage;

        SKG_File.Models.SKGHeaderModel header = new SKG_File.Models.SKGHeaderModel();
        header.Requester = 'Ax7 (AOS)';
        header.Trace = false;
        if(lSKS_EB_FileStorage.FileStorageType == SKS_EB_FileStorageType::Local && _SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            header.UserRemoteServer = false;
        }
        else
        {
            header.DNSName = SKS_EB_FileHub::getDNS(_SKS_BF_BankIntType);
            header.UserRemoteServer = true;
            header.Token = lSKS_EB_FileStorage.FileHubToken;
            header.EndPoint = lSKS_EB_FileStorage.FileHubLocation;
            header.Trace = lSKS_EB_FileStorage.Trace;
        }
        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the name of the file to be used. It also resets all the internal pointers of the class. Every time this function is called, the class will assume you are working.
    /// </summary>
    /// <param name = "_fileName">the name of the file</param>
    /// <param name = "runInquire">Optional: if set to true, after setting the name it will call the server to get the file information. if set to false, only the file name is set into the class</param>
    /// <returns></returns>
    public SKG_File.Models.SKGFileModel setFileName(str _fileName,
                                                    str preCommand = '',
                                                    str preArgument = '',
                                                    str posCommand = '',
                                                    str posArgument = '',
                                                    str _filePath = '',
                                                    str _fileNumber = '',
                                                    str _companyId = '',
                                                    str _fileNameName = '',
                                                    str _fileSubFolder = '')
    {
        str brCommName = '';
        str bfPath = '';
        if( strScan(_fileName, '\\', 1, strLen(_fileName) ) == 0 && gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            if(bF_CommName_Path != null && bF_CommName_Path != '')
            {
                
                brCommName = SKS_BF_Connection::GetCommNameFromString(bF_CommName_Path, _fileName);
                bfPath = SKS_BF_Connection::GetPathFromString(bF_CommName_Path, _fileName);
            }
        }

        if(bfPath != '')   //Todo: need to discuss which scenario we will send file path with file name
        {
            fileName = bfPath + '\\' +_fileName;
        }
        else
        {
            fileName = _fileName; //Original line
        }

        bf_filePath = _filePath;
        bf_fileSubFolder = _fileSubFolder;
        bf_fileNbr = _fileNumber;
        bf_company = _companyId;
        bf_fileNameName = _fileNameName;
        //END   BankFabric

        file = new SKG_File.Models.SKGFileModel();
        file.FullName = fileName;
        
        file.CommandPre = preCommand;
        file.CommandPreArguments = preArgument;
        file.CommandPos = posCommand;
        file.CommandPosArguments = posArgument;

        append = null;
        response = null;
        attribute = null;

        fileBody = '';
        lastTripToTheServer = DateTimeUtil::utcNow();

        return file;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFNewFileName</Name>
				<Source><![CDATA[
    public str  getBFNewFileName()
    {
        return bf_NewfileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFNewControlFileName</Name>
				<Source><![CDATA[
    public str  getBFNewControlFileName()
    {
        return bf_NewControlfileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFFilePath</Name>
				<Source><![CDATA[
    public str getBFFilePath()
    {
        return    bf_filePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_BF_BankIntType</Name>
				<Source><![CDATA[
    public SKS_BF_BankIntType getSKS_BF_BankIntType()
    {
        return gSKS_BF_BankIntType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributes</Name>
				<Source><![CDATA[
    // Internal
    private SKG_File.Models.SKGFileModel getAttributes(boolean _getBody = false)
    {
        // VVV ORIG VVV
        if (file == null || fileName == '')
            throw error("@SKS:SKGBlankFileNameError");

        SKG_BF.Models.FileContract bF_FileContract = new SKG_BF.Models.FileContract(); // BankFabric
        SKG_BF.Client.Sender bF_Sender = new SKG_BF.Client.Sender();
        SKG_BF.Models.ClientCreds bF_CredsContract;

        file.FileBody = '';
        file.FileEncoding = encoding;

        //Todo
        // Always set the Action on both FileHub and BankFabric objects
        if (_getBody)  //GTutt  BankFabric
        {
            bF_Sender.FileAction = SKG_BF.Models.FileContractAction::GetFile;
            
            file.Action = SKG_File.Models.SKGFileAction::OpenFile;
        }
        else
        {
            bF_Sender.FileAction = SKG_BF.Models.FileContractAction::GetAttributesOnly;
           
            file.Action = SKG_File.Models.SKGFileAction::InquireAttributes;
        }

        if (gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)  //GTutt
        {
            SKS_EB_FileStorage sksFileStorage;
            select firstonly sksFileStorage;
            
            SKS_PP_Setup lSKS_PP_Setup;
            select firstonly lSKS_PP_Setup;

            bF_CredsContract =  SKS_BF_Connection::SetCredentialContract(SKS_BF_AzureOperation::GetFile); //new BankFabricForD365.ClientCreds(); // GTutt
                       
            bF_Sender.Credentials = bF_CredsContract;
           
            str bF_brCommName = SKS_BF_Connection::GetCommNameFromString(bF_CommName_Path);
            str bF_Path = SKS_BF_Connection::GetPathFromString(bF_CommName_Path);

            bF_FileContract.BankFabricFileLocation = bf_filePath;
            bF_FileContract.crlf = file.FileCRLF;
            bF_FileContract.BOMRemove = file.FileRemoveUTF8BOM;
            bF_FileContract.FileName = file.FileName;
            bF_FileContract.DNS = header.DNSName;
            bF_FileContract.RuntimeUrl = bF_CredsContract.URL;
            bF_FileContract.Action = bF_Sender.FileAction;
            bF_FileContract.folder = bf_fileSubFolder;
            bF_FileContract.SecretName = sksFileStorage.BankFabricSecretName;
            bF_FileContract.TASVersion = lSKS_PP_Setup.RegVersion;

            bF_Sender.FileContract = bF_FileContract;

            // Making the API call
            bF_Sender.GetFiles();
            
            SKG_BF.Models.ERPResponseContract bF_ResponseContract = bF_Sender.ResponseContract;

            SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bF_ResponseContract);

            SKG_File.Models.SKGFileAttributeModel fileAttrib = file.Attribute;

            // Set original file hub contract data as if calling file hub
            if (bF_ResponseContract.FileAttributes != null)
            {
                fileAttrib.CreateDateUTC = bF_ResponseContract.FileAttributes.CreateDateUTC;
                fileAttrib.ModifiedDateUTC = bF_ResponseContract.FileAttributes.ModifiedDateUTC;
                fileAttrib.Size = bF_ResponseContract.FileAttributes.Size;
                fileAttrib.Exists = bF_ResponseContract.FileAttributes.Exists;
            }
            file.FileBody = bF_ResponseContract.data;
            file.Attribute = fileAttrib;
 
        }
        else // Bank Fabric
        {
            file = SKG_File.Client.RequestFile::Flush(header, file);
        }
        
        if (!this.responseHasError(file.Response, fileName))
        {

            attribute = file.Attribute;
            fileBody = file.FileBody;
        }

        return file;
        // ^^^ ORIG ^^^
        /* //BENS REVISED
        if (gSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
            if (file == null || fileName == "")
                throw error("File name cannot be blank.");

        file.FileBody = "";
        file.FileEncoding = encoding;

        //Todo
        // Always set the Action on both FileHub and BankFabric objects
        if (_getBody)  //GTutt  BankFabric
        {
            file.Action = SKG_File.Models.SKGFileAction::OpenFile;
        }
        else
        {
            file.Action = SKG_File.Models.SKGFileAction::InquireAttributes;
        }

        if (gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)  //GTutt
        {
            file = gSKS_BF_Connection.getAttributes(_getBody);
        }
        else // Bank Fabric
        {
            file = SKG_File.Client.RequestFile::Flush(header, file);
        }
        
        if (!this.responseHasError(file.Response, fileName))
        {

            attribute = file.Attribute;
            fileBody = file.FileBody;
        }

        return file;
        */
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreateAppendLine</Name>
				<Source><![CDATA[
    private void checkCreateAppendLine(boolean resetAppendLine = false)
    {
        if (resetAppendLine || append == null)
        {
            append  = new SKG_File.Models.SKGAppendLineModel();
            append.FileEncoding = encoding;
            append.FullName = fileName;
            append.FileCRLF = fileCRLF;
            append.FileRemoveUTF8BOM = fileRemoveUTF8BOM;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>responseHasError</Name>
				<Source><![CDATA[
    // Error Treatment
    private boolean responseHasError(SKG_File.Models.SKGResponseModel _response,
                                     str parm1 = '',
                                     str parm2 = '',
                                     str parm3 = '')
    {
        SKS_EB_FileHubAuth locSKS_EB_FileHubAuth;
        void DeleteFileHubAuthorization()
        {
            guid locAuthorizationCode = header.AuthorizationCode != emptyGuid() ? header.AuthorizationCode : _response.AuthorizationCode;
            if(locAuthorizationCode != emptyGuid())
            {
                SKS_EB_FileHubAuth::deleteByAuthorizationCode(locAuthorizationCode);
            }
        }

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            if(bf_Exeception != '') // Error occurred in BankFabric
            {
                if (throwErrorIfException)
                        throw error("@SKS:SKGBFError" + bf_Exeception);

                else
                        return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            response = _response;

            if (response == null)
            {
                if (throwErrorIfException)
                {
                    DeleteFileHubAuthorization();
                    throw error("@SKS:SKGResponseNotAvailable");
                }

                else
                    return true;
            }

            if (trace)
            {
                str locMarshelledString;
                System.String locString;
                System.Collections.IEnumerator ArrayEnumerator;

                System.String[] results = response.TraceLinesArray;
                ArrayEnumerator = results.GetEnumerator();
                ArrayEnumerator.Reset();
                setPrefix("@SKS:SKGTraceResults");
                while(ArrayEnumerator.MoveNext())
                {
                    locString = ArrayEnumerator.get_Current();
                    locMarshelledString = locString;
                    info(locMarshelledString);
                }
            }

            //if (!_response.Authorized)
            //{
            //
            // an special routine can be implemented here if necessaary.
            //
            //}

            if (response.HasException == true)
            {
                DeleteFileHubAuthorization();
                if (response.IsInternalException)
                {
                    switch (response.ExceptionLabelId)
                    {
                        //case "10101": response.SetException("@98900"); break;
                        case '10100': 
                            response.SetException(response.Exception); 
                            break; //"Server called with an invalid Action"
                        case '20100': 
                            response.SetException(response.Exception); 
                            break; //"File could not be created because it already exists"
                        case '20200': 
                            response.SetException(response.Exception); 
                            break; //"File does not exist"
                        case '20300': 
                            response.SetException(response.Exception); 
                            break; //"File could not be moved because destination file already exists"
                        case '20400': 
                            response.SetException(response.Exception); 
                            break; //"File could not be copied because destination file already exists"
                        case '30100': 
                            response.SetException(response.Exception); 
                            break; //"Directory [{0}] does not exist"
                        case '30200': 
                            response.SetException(response.Exception); 
                            break; //"Directory Destination [{0}] does not exist"
                        case '30300': 
                            response.SetException(response.Exception); 
                            break; //"Directory Destination [{0}] alread exists"
                        case '40100': 
                            response.SetException(response.Exception); 
                            break; //"Directory [{0}] does not exist" - the program name will return on parm1
                        case '40200': 
                            response.SetException(response.Exception); 
                            break; //"File [{0}] does not exist" - the file name will return on parm2
                        case '50100': 
                            response.SetException(response.Exception); 
                            break; //"The program was not found" - the program name will return on parm1
                        case '50200': 
                            response.SetException(response.Exception); 
                            break; //"The file was not found" - the file name will return on parm2
                        case '60100': 
                            response.SetException(response.Exception); 
                            break; //"403 - Authorization Error: IP Address [{0}] is not allowed" - the IP Address name will return on _response.UserHostAddress
                        case '70100': 
                            response.SetException(response.Exception); 
                            break; //"Invalid filehub-webservice shared folder path or user do not have access to it"
                        case '70200': 
                            response.SetException(response.Exception); 
                            break;  //"Invalid webservice operation."
                        case '70300': 
                            response.SetException(response.Exception); 
                            break; // "Communications failed, see error file for details"
                    }
                }

                if (throwErrorIfException)
                {
                    // Diagnostic messages - print call stack
                    Info('*** Call stack 1 - ');
                    info(con2str(xSession::xppCallStack()));

                    throw error("@SKS:SKGFileHubMessagePrefix" + response.Exception + "@SKS:SKGFileHubMessageSuffix");
                }
                else
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorHasException</Name>
				<Source><![CDATA[
    public boolean errorHasException()
    {
        boolean ret = false;
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            if(bf_Exeception != '')
            {
                ret = true;
            }
        }
        else
        {
            if (response == null)
            {
                ret = false;
            }
            else
            {
                ret = response.HasException;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorException</Name>
				<Source><![CDATA[
    public str errorException()
    {
        str ret = '';

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            ret = "@SKS:SKGBFError" + bf_Exeception;
        }
        else
        {
            if (response == null)
            {
                ret = '';
            }
            else
            {
                // Diagnostic messages - print call stack
                Info('*** Call stack 2 - ');
                info(con2str(xSession::xppCallStack()));

                ret = "@SKS:SKGFileHubMessagePrefix" + response.Exception + "@SKS:SKGFileHubMessageSuffix";
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseRemoteServer</Name>
				<Source><![CDATA[
    // Parameters
    public boolean parmUseRemoteServer(boolean _useRemoteServer = header.UserRemoteServer)
    {
        header.UserRemoteServer = _useRemoteServer;
        return header.UserRemoteServer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndPoint</Name>
				<Source><![CDATA[
    public str parmEndPoint(str _endPoint = header.EndPoint)
    {
        header.EndPoint = _endPoint;
        return header.EndPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToken</Name>
				<Source><![CDATA[
    public str parmToken(str _token = header.Token)
    {
        header.Token = _token;
        return header.Token;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommandDeleteLogsAfterProgramExecution</Name>
				<Source><![CDATA[
    public boolean parmCommandDeleteLogsAfterProgramExecution(boolean _forceDeleteLog = commandDeleteLogsAfterProgramExecution)
    {
        commandDeleteLogsAfterProgramExecution = _forceDeleteLog;
        return commandDeleteLogsAfterProgramExecution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThrowErrorIfException</Name>
				<Source><![CDATA[
    public boolean parmThrowErrorIfException(boolean _throwErrorIfException = throwErrorIfException)
    {
        throwErrorIfException = _throwErrorIfException;
        return throwErrorIfException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEncoding</Name>
				<Source><![CDATA[
    public int parmEncoding(int _encoding = encoding)
    {
        encoding = _encoding;
        return encoding;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileCRLF</Name>
				<Source><![CDATA[
    public boolean parmFileCRLF (boolean _fileCRLF = fileCRLF)
    {
        fileCRLF = _fileCRLF;
        return fileCRLF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileRemoveUTF8BOM</Name>
				<Source><![CDATA[
    public boolean parmFileRemoveUTF8BOM (boolean _fileRemoveUTF8BOM = fileRemoveUTF8BOM)
    {
        fileRemoveUTF8BOM = _fileRemoveUTF8BOM;
        return fileRemoveUTF8BOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileOverwrite</Name>
				<Source><![CDATA[
    public boolean parmFileOverwrite (boolean _overwrite = fileOverwrite)
    {
        fileOverwrite = _overwrite;
        return fileOverwrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrace</Name>
				<Source><![CDATA[
    public boolean parmTrace(boolean _trace = trace)
    {
        header.Trace = _trace;

        trace = _trace;
        return trace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeOutValue</Name>
				<Source><![CDATA[
    public boolean parmTimeOutValue(boolean _timeOutValue = timeOutValue)
    {
        timeOutValue = _timeOutValue;
        return _timeOutValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTraceList</Name>
				<Source><![CDATA[
    private List getTraceList()
    {
        List locFilenames = new List(Types::String);
        System.String[] results;
        str locMarshelledString;
        System.String locString;
        System.Collections.IEnumerator ArrayEnumerator;
        ;

        if (response != null)
        {
            ArrayEnumerator = response.TraceLinesArray.GetEnumerator();
            ArrayEnumerator.Reset();
            while(ArrayEnumerator.MoveNext())
            {
                locString = ArrayEnumerator.get_Current();
                locMarshelledString = locString;
                locFilenames.addEnd(locMarshelledString);
            }
        }
        return LocFilenames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    // Properties
    public str fileName()
    {
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileBody</Name>
				<Source><![CDATA[
    public str fileBody(str _fileBody = fileBody)
    {
        fileBody = _fileBody;
        return fileBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAttributeAvaliable</Name>
				<Source><![CDATA[
    public boolean isAttributeAvaliable()
    {
        return attribute != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attrFileExists</Name>
				<Source><![CDATA[
    public boolean attrFileExists()
    {
        if (!this.isAttributeAvaliable())
            throw error("@SKS:SKSFileAttributeNotAvailable");

        return attribute.Exists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attrFileReadOnly</Name>
				<Source><![CDATA[
    public boolean attrFileReadOnly()
    {
        if (!this.isAttributeAvaliable())
            throw error("@SKS:SKSFileAttributeNotAvailable");

        return attribute.ReadOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attrFileSize</Name>
				<Source><![CDATA[
    public real attrFileSize()
    {
        if (!this.isAttributeAvaliable())
            throw error("@SKS:SKSFileAttributeNotAvailable");

        return attribute.Size;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attrFileCreated</Name>
				<Source><![CDATA[
    public utcdatetime attrFileCreated()
    {
        if (!this.isAttributeAvaliable())
            throw error("@SKS:SKSFileAttributeNotAvailable");

        return attribute.CreateDateUTC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attrFileModified</Name>
				<Source><![CDATA[
    public utcdatetime attrFileModified()
    {
        if (!this.isAttributeAvaliable())
            throw error("@SKS:SKSFileAttributeNotAvailable");

        return attribute.ModifiedDateUTC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFileInquire</Name>
				<Source><![CDATA[
    // Actions File
    public void runFileInquire(str _fileName = fileName)
    {
        str locFileName = '';
        str locFilePath = '';
        str locFileSubFolder = '';
        int aCount;

        System.String[] locBFLocationAndName;
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            if(strContains(_fileName,@'/'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'//');
            else if(strContains(_fileName,@'\'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'\\');
            else
                throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
            
            aCount = locBFLocationAndName.Length;
            if (aCount > 2)
            {
                locFileName = locBFLocationAndName.GetValue(2);
                locFileSubFolder = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);
            }
            else
            {
                locFileName = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);
            }
        }
        else
        {
            locFileName = _fileName;
        }
                
        this.setFileName(locFileName,'','','','',locFilePath,'','','',locFileSubFolder);
        this.getAttributes(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFileLoad</Name>
				<Source><![CDATA[
    public void runFileLoad(str _fileName = fileName,
                             str preCommand = '',
                             str preArgument = '',
                             str posCommand = '',
                             str posArgument = '')
    {
        str locFileName = '';
        str locFilePath = '';
        str locFileSubFolder = '';
        int aCount;
        System.String[] locBFLocationAndName;

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            if(strContains(_fileName,@'/'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'//');
            else if(strContains(_fileName,@'\'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'\\');
            else
                throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");

            aCount = locBFLocationAndName.Length;
            if (aCount > 2)
            {
                locFileName = locBFLocationAndName.GetValue(2);
                locFileSubFolder = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);
            }
            else
            {
                locFileName = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);
            }
        }
        else
        {
            locFileName = _fileName;
        }
        this.setFileName(locFileName, preCommand, preArgument, posCommand, posArgument, locFilePath,'','','',locFileSubFolder);
        this.GetAttributes(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFileCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method invokes the remote server and creates a file.
    /// </summary>
    /// <param name = "_fileName">Optional: If specified, it will define the name of the file. Default value is the value defined on the SetFileName property</param>
    /// <param name = "_body">Optional: If specified, it will define the content of the file. Default value is the value defined on the fileBody property</param>
    public void runFileCreate(str _fileName = fileName, str _body = fileBody)
    {
        this.setFileName(_fileName);

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            str locFileName = '';
            str locFilePath = '';
            str locFileSubFolder = '';
            int aCount;

            System.String[] locBFLocationAndName;
            if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            {
                if(strContains(_fileName,@'/'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'//');
            else if(strContains(_fileName,@'\'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'\\');
                else
                throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
            
                aCount = locBFLocationAndName.Length;
                if (aCount > 2)
                {
                    locFileName = locBFLocationAndName.GetValue(2);
                    locFileSubFolder = locBFLocationAndName.GetValue(1);
                    locFilePath = locBFLocationAndName.GetValue(0);
                }
                else
                {
                    locFileName = locBFLocationAndName.GetValue(1);
                    locFilePath = locBFLocationAndName.GetValue(0);
                }
            }
            else
            {
                locFileName = _fileName;
            }
            this.setFileName(locFileName, '', '', '', '', locFilePath,'','','',locFileSubFolder);

            str locationNameStr = '';
            if(locFileSubFolder)
            {
                locationNameStr = locFileSubFolder;
            }
            else
            {
                locationNameStr = locFilePath;
            }

            SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();
            this.checkCreateAppendLine();

            container conFileCreate =  fileFabric.CreateFile(dataList, append.FileCRLF, append.FileEncoding, append.FileRemoveUTF8BOM,append.FileName,'',locationNameStr,bf_fileNbr,bf_company,bf_fileNameName);
        }
        else
        {
            file.Action = fileOverwrite ?
            SKG_File.Models.SKGFileAction::CreateOrOverwriteFile :
            SKG_File.Models.SKGFileAction::CreateFile;
            file.FileBody = _body;
            file.FileEncoding = encoding;
            file.FileRemoveUTF8BOM = fileRemoveUTF8BOM;
            file.FileCRLF = fileCRLF;

            file = SKG_File.Client.RequestFile::Flush(header, file);

            if (this.responseHasError(file.Response, _fileName) == false)
                attribute = file.Attribute;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFileDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will delete a file in the remote server. This process will not return an error if the file does not exist.
    /// </summary>
    /// <param name = "_fileName">Optional: If specified, it will define the name of the file. Default value is the value defined on the SetFileName property</param>
    public void runFileDelete(str _fileName = fileName)
    {
        str delResponse;
        boolean fail;
        int aCount;
        str locFileName = '';
        str locFilePath = '';
        str locFileSubFolder = '';
        System.String[] locBFLocationAndName;

        //this.setFileName(_fileName);
        if (gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();

            if(strContains(_fileName,@'/'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'//');
            else if(strContains(_fileName,@'\'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'\\');
            else
                throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");

            aCount = locBFLocationAndName.Length;
            if (aCount > 2)
            {
                locFileName = locBFLocationAndName.GetValue(2);
                locFileSubFolder = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);
            }
            else
            {
                locFileName = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);
            }

            delResponse =  fileFabric.DeleteFile(locFilePath,locFileSubFolder,locFileName);
            
            fail = delResponse == '' ? FalseTrue::False : FalseTrue::True;
            
            if(fail)
            {
                error("@SKS:SKGBFError" + delResponse);
            }
        }
        else
        {
            file = SKG_File.Client.RequestFile::DeleteFile(header, _fileName);

            if (this.responseHasError(file.Response, _fileName) == false)
                attribute = file.Attribute;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFileMoveTo</Name>
				<Source><![CDATA[
    public void runFileMoveTo(str _moveTo)
    {
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric) // BankFabric
        {
            SKS_EB_FileStorage sksFileStorage;
            select firstonly sksFileStorage;

            SKS_PP_Setup lSKS_PP_Setup;
            select firstonly lSKS_PP_Setup;

            SKG_BF.Models.FileContract bF_FileContract = new SKG_BF.Models.FileContract();
            SKG_BF.Client.Sender bF_Sender = new SKG_BF.Client.Sender();
            SKG_BF.Models.ClientCreds bF_CredsContract = new SKG_BF.Models.ClientCreds();
            System.String[] locBFLocationAndName;

            bF_CredsContract = SKS_BF_Connection::SetCredentialContract(SKS_BF_AzureOperation::MoveFile);

            str brCommName = SKS_BF_Connection::GetCommNameFromString(bF_CommName_Path, file.FileName);
            str bfPath = SKS_BF_Connection::GetPathFromString(bF_CommName_Path, file.FileName);

            bF_Sender.Credentials = bF_CredsContract;

            if(strContains(_moveTo,@'/'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_moveTo,@'//');
            else if(strContains(_moveTo,@'\'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_moveTo,@'\\');
            else
                throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
            
            bF_FileContract.BankFabricFileLocation = bf_filePath;
            bF_FileContract.folder = bf_fileSubFolder;
            bF_FileContract.crlf = file.FileCRLF;
            bF_FileContract.BOMRemove = file.FileRemoveUTF8BOM;
            bF_FileContract.FileName = file.FileName;
            bF_FileContract.DNS = header.DNSName;
            bF_FileContract.RuntimeUrl = bF_CredsContract.URL;
            bF_FileContract.TASVersion = lSKS_PP_Setup.RegVersion;

            if (locBFLocationAndName.Length > 2)
            {
                bF_FileContract.MoveFileToFileLocation = locBFLocationAndName.GetValue(0);
                bF_FileContract.MoveFileToFolder = locBFLocationAndName.GetValue(1);
                bF_FileContract.MoveFileNewFileName = locBFLocationAndName.GetValue(2);
            }
            else
            {
                bF_FileContract.MoveFileToFileLocation = locBFLocationAndName.GetValue(0);
                bF_FileContract.MoveFileNewFileName = locBFLocationAndName.GetValue(1);
            }

            bF_FileContract.Action = SKG_BF.Models.FileContractAction::MoveFile;
            bF_FileContract.SecretName = sksFileStorage.BankFabricSecretName;

            bF_Sender.FileContract = bF_FileContract;

            bF_Sender.MoveFiles();

            SKG_BF.Models.ERPResponseContract bF_ResponseContract = bF_Sender.ResponseContract;

            bf_Exeception = bF_ResponseContract.FailureReason;
            
            if(this.responseHasError(null) == false)
            //if(bF_ResponseContract.Status == SKG_BF.Models.ERPResponseModelStatus::Success)
            {
                //setAttribute fields
                //SKG_File.Models.SKGFileAttributeModel fileAttrib = file.Attribute;              //Todo Revisit
                //fileAttrib.CreateDateUTC = bF_ResponseContract.FileAttributes.CreateDateUTC;
                //fileAttrib.ModifiedDateUTC = bF_ResponseContract.FileAttributes.ModifiedDateUTC;
                //fileAttrib.Size = bF_ResponseContract.FileAttributes.Size;

                //file.Attribute = fileAttrib;
                fileName = bF_ResponseContract.NewFileName;
            }
            

        }
        else
        {
            file = SKG_File.Client.RequestFile::Movefile(header, fileName, _moveTo, fileOverwrite);

            if (this.responseHasError(file.Response, fileName, _moveTo) == false)
            {
                fileName = file.FileName;
                attribute = file.Attribute;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFileCopyTo</Name>
				<Source><![CDATA[
    public void runFileCopyTo(str _copyTo)
    {
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric) // BankFabric
        {
            SKS_EB_FileStorage sksFileStorage;
            select firstonly sksFileStorage;

            SKS_PP_Setup lSKS_PP_Setup;
            select firstonly lSKS_PP_Setup;

            SKG_BF.Models.FileContract bF_FileContract = new SKG_BF.Models.FileContract();
            SKG_BF.Client.Sender bF_Sender = new SKG_BF.Client.Sender();
            SKG_BF.Models.ClientCreds bF_CredsContract = new SKG_BF.Models.ClientCreds();
            System.String[] locBFLocationAndName;

            bF_CredsContract = SKS_BF_Connection::SetCredentialContract(SKS_BF_AzureOperation::CopyFile);

            str brCommName = SKS_BF_Connection::GetCommNameFromString(bF_CommName_Path, file.FileName);
            str bfPath = SKS_BF_Connection::GetPathFromString(bF_CommName_Path, file.FileName);

            bF_Sender.Credentials = bF_CredsContract;

            if(strContains(_copyTo,@'/'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_copyTo,@'//');
            else if(strContains(_copyTo,@'\'))
                locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_copyTo,@'\\');
            else
                throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
            
            bF_FileContract.BankFabricFileLocation = bf_filePath;
            bF_FileContract.folder = bf_fileSubFolder;
            bF_FileContract.crlf = file.FileCRLF;
            bF_FileContract.BOMRemove = file.FileRemoveUTF8BOM;
            bF_FileContract.FileName = file.FileName;
            bF_FileContract.DNS = header.DNSName;
            bF_FileContract.RuntimeUrl = bF_CredsContract.URL;
            bF_FileContract.TASVersion = lSKS_PP_Setup.RegVersion;

            if (locBFLocationAndName.Length > 2)
            {
                bF_FileContract.MoveFileToFileLocation = locBFLocationAndName.GetValue(0);
                bF_FileContract.MoveFileToFolder = locBFLocationAndName.GetValue(1);
                bF_FileContract.MoveFileNewFileName = locBFLocationAndName.GetValue(2);
            }
            else
            {
                bF_FileContract.MoveFileToFileLocation = locBFLocationAndName.GetValue(0);
                bF_FileContract.MoveFileNewFileName = locBFLocationAndName.GetValue(1);
            }

            bF_FileContract.Action = SKG_BF.Models.FileContractAction::MoveFile;
            bF_FileContract.SecretName = sksFileStorage.BankFabricSecretName;

            bF_Sender.FileContract = bF_FileContract;

            bF_Sender.MoveFiles();

            SKG_BF.Models.ERPResponseContract bF_ResponseContract = bF_Sender.ResponseContract;

            bf_Exeception = bF_ResponseContract.FailureReason;
            
            if(this.responseHasError(null) == false)
            //if(bF_ResponseContract.Status == SKG_BF.Models.ERPResponseModelStatus::Success)
            {
                //setAttribute fields
                //SKG_File.Models.SKGFileAttributeModel fileAttrib = file.Attribute;              //Todo Revisit
                //fileAttrib.CreateDateUTC = bF_ResponseContract.FileAttributes.CreateDateUTC;
                //fileAttrib.ModifiedDateUTC = bF_ResponseContract.FileAttributes.ModifiedDateUTC;
                //fileAttrib.Size = bF_ResponseContract.FileAttributes.Size;

                //file.Attribute = fileAttrib;
                fileName = bF_ResponseContract.NewFileName;
            }
            

        }
        else
        {
            file = SKG_File.Client.RequestFile::Copyfile(header, fileName, _copyTo, fileOverwrite);

            if (this.responseHasError(file.Response, fileName, _copyTo) == false)
            {
                fileName = file.FileName;
                attribute = file.Attribute;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAppendLine</Name>
				<Source><![CDATA[
    // Actions Append Line
    public void runAppendLine(str _line, boolean resetBeforeAppend = false)
    {
        this.checkCreateAppendLine(resetBeforeAppend);
        append.AddLine(_line);

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric) // BankFabric
        {
            if(resetBeforeAppend)
            {
                dataList = new List(Types::String);
            }

            dataList.addEnd(_line); // BankFabric
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAppendLineFlush</Name>
				<Source><![CDATA[
    public boolean runAppendLineFlush(boolean getAttributes = false)
    {
        container conFileCreate;
        boolean   fail;

        this.checkCreateAppendLine(false);
        
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric) // BankFabric
        {
            SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();

            conFileCreate =  fileFabric.CreateFile(dataList, append.FileCRLF, append.FileEncoding, append.FileRemoveUTF8BOM,append.FileName,'',bf_filePath,bf_fileNbr,bf_company,bf_fileNameName);
            
            fail = conPeek(conFileCreate,1) == '' ? FalseTrue::False : FalseTrue::True;
            
            if(!fail)
            {
                bf_NewfileName = conPeek(conFileCreate,2);
                return true;
            }
            else
            {
                bf_Exeception = conPeek(conFileCreate,1);
                bf_NewfileName = '';
                return false;
            }
        }
        else
        {
            header.AuthorizationCode = SKS_EB_FileHubAuthDataEntity::GetAuthorizationCode();
            append = SKG_File.Client.RequestAppendLine::AppendLineToFile(header, append);

            if (this.responseHasError(append.Response, append.FilePath, append.FileName) == false)
            {
                if (getAttributes)
                this.GetAttributes(false);

                //reset connection
                this.CheckCreateAppendLine(true);
                return true;
            }
            SKS_EB_FileHubAuth::deleteByAuthorizationCode(header.AuthorizationCode);
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAppendSingleLineAndFlush</Name>
				<Source><![CDATA[
    public boolean runAppendSingleLineAndFlush(str _line)
    {
        this.checkCreateAppendLine(false);
        this.runAppendLine(_line);
        if (this.runAppendLineFlush())
        {
            //reset connection
            this.checkCreateAppendLine(true);
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDirectoryExists</Name>
				<Source><![CDATA[
    // Actions

    /// <summary>
    /// This method checks if the directory exists in the remote server. This method will not return an error if the directory does not exist.
    /// </summary>
    /// <param name = "_directory">Name of the directory to be checked in the remote server</param>
    /// <returns></returns>
    public boolean runDirectoryExists(str _directory)
    {
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            return true;

        SKG_File.Models.SKGDirectoryModel directory = SKG_File.Client.RequestDirectory::CheckIfDirectoryExists(header, _directory);

        if (this.responseHasError(directory.Response, _directory))
            return false;

        return directory.Exists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDirectoryGetFiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method retrieves the files in the specified folder on the remote server
    /// </summary>
    /// <param name = "_directory">Name of the directory to be checked in the remote server</param>
    /// <param name = "searchPatterm">file type to return</param>
    /// <returns>the files in the directory</returns>
    public List runDirectoryGetFiles(str _directory, str searchPatterm = '*.*' )
    {
        List locFilenames = new List(Types::String);
        System.String[] results;
        str locMarshelledString;
        System.String locString;
        System.Collections.IEnumerator ArrayEnumerator;

        if (gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            
            locFilenames = gSKS_BF_Connection.GetFileList(_directory, searchPatterm);

            bf_Exeception = gSKS_BF_Connection.getBF_ResponseContract().FailureReason;
        }
        else
        {
            SKG_File.Models.SKGDirectoryModel directory =
                SKG_File.Client.RequestDirectory::GetFiles( header,
                                                            _directory,
                                                            searchPatterm);

            if (this.responseHasError(directory.Response, _directory) == false)
            {
                results = directory.FilesArray;
                ArrayEnumerator = results.GetEnumerator();
                ArrayEnumerator.Reset();
                while(ArrayEnumerator.MoveNext())
                {
                    locString = ArrayEnumerator.get_Current();
                    locMarshelledString = locString;
                    locFilenames.addEnd(locMarshelledString);
                }
            }
        }

        return LocFilenames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDirectoryCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method create the directory in the remote server. This method will not return an error if the directory already exists.
    /// </summary>
    /// <param name = "_directory">Name of the directory to be checked in the remote server</param>
    /// <param name = "_deleteFilesIfExist">if true, this parameter will force any file or other directories to be deleted</param>
    /// <returns></returns>
    public boolean runDirectoryCreate(str _directory)
    {
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            return true;
        }
        else
        {
            SKG_File.Models.SKGDirectoryModel directory = SKG_File.Client.RequestDirectory::CreateFolder(header, _directory);
            return this.responseHasError(directory.Response, _directory) == false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDirectoryDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method delete the directory in the remote server. This method will not return an error if the directory does not exist.
    /// </summary>
    /// <param name = "_directory">Name of the directory to be checked in the remote server</param>
    /// <param name = "_deleteFilesIfExist">if true, this parameter will force any file or other directories to be deleted</param>
    /// <returns></returns>
    public boolean runDirectoryDelete(str _directory, boolean _deleteFilesIfExist = false)
    {
        SKG_File.Models.SKGDirectoryModel directory = SKG_File.Client.RequestDirectory::DeleteFolder(header, _directory, _deleteFilesIfExist);
        return this.responseHasError(directory.Response, _directory) == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDirectoryMove</Name>
				<Source><![CDATA[
    public boolean runDirectoryMove(str _from, str _to)
    {
        SKG_File.Models.SKGDirectoryModel directory = SKG_File.Client.RequestDirectory::MoveDirectory(header, _from, _to);
        return this.responseHasError(directory.Response, _from, _to) == false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProgram</Name>
				<Source><![CDATA[
    /// <summary>
    /// this method will excute a program in the remote server and return the outcome.
    /// </summary>
    /// <param name = "_program">Program to be executed</param>
    /// <param name = "_argument">The argument to be passed on the program</param>
    /// <param name = "_fileName">file to be used on the program</param>
    /// <returns>return the boolean value indicating if the program has executed with no error</returns>
    public boolean runProgram(str _program, str _argument, str _fileName = fileName, boolean _reloc = false)
    {
        this.setFileName(_fileName);

        SKG_File.Models.SKGCommandLineModel command = new SKG_File.Models.SKGCommandLineModel();
        command.FullName = fileName;
        command.DeleteLogsAfterProgramExecution = commandDeleteLogsAfterProgramExecution;
        command.ThrowErrorIfException = throwErrorIfException;
        command.Program = _program;
        command.Argument = _argument;
        command.TimeOut = timeOutValue;
        command.InboundReloc = _reloc;

        command = SKG_File.Client.RequestCommandLine::ExecuteProgram(header, command);

        response = command.Response;
        fileBody = command.Body;

        return !this.responseHasError(command.Response, command.Program, command.FileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// this method will call the web service dll in the remote server to upload a file.
    /// </summary>
    /// <param name = "_program">Program to be executed</param>
    /// <param name = "_argument">The argument to be passed on the program</param>
    /// <param name = "_fileName">file to be used on the program</param>
    /// <returns>return the boolean value indicating if the program has executed with no error</returns>
    public boolean callWebService(SKS_EB_Direction _SKS_EB_Direction,
                                    SKS_EB_FilePathName _SKS_EB_FilePathName,
                                    SKS_EB_FileType _SKS_EB_FileType,
                                    SKS_PP_CommUserProg _WebSericeConfigurionID,
                                    str _OptionalParameters)
    {
        SKG_File.Models.SKGWebServiceModel WebService = new SKG_File.Models.SKGWebServiceModel();

        if(_SKS_EB_Direction == SKS_EB_Direction::Outbound)
        {
            WebService.WebServiceOperation = SKG_File.Models.SKGWebServiceOperation::ToBank;
        }
        else // Inbound or Inbound relocation
        {
            WebService.WebServiceOperation = SKG_File.Models.SKGWebServiceOperation::FromBank;
        }

        WebService.ConfigurationId = _WebSericeConfigurionID;
        WebService.FileOrDirectoryName = _SKS_EB_FilePathName;
        WebService.FileType = _SKS_EB_FileType;
        WebService.DeleteLogsAfterProgramExecution = commandDeleteLogsAfterProgramExecution;
        WebService.ThrowErrorIfException = throwErrorIfException;
        WebService.TimeOut = timeOutValue;

        WebService = SKG_File.Client.RequestWebService::CallWebService(header,WebService);

        return !this.responseHasError(WebService.Response, WebService.ConfigurationId, WebService.FileOrDirectoryName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will create an EFT file from BankFabric library.
    /// </summary>
    /// <param name = "_paymentFile">Data contract containing all of the payment data</param>
    /// <param name = "_SKS_EFTAP_File">EFT file record</param>
    /// <param name = "_formatGroup">Format group</param>
    /// <param name = "_formatGroupVersion">Format group version</param>
    /// <param name = "_dataContractVersion">Data contract version</param>
    /// <param name = "_crlf">Does format require CR/LF on last line</param>
    /// <param name = "_CompareFiles">Optional file name for comparison</param>
    /// <returns>Response model</returns>    
    public SKG_File.Models.SKGResponseModel callPayment(str _paymentFile, SKS_EFTAP_File _SKS_EFTAP_File, str _formatGroup, str _formatGroupVersion, str _dataContractVersion, boolean _crlf, str _CompareFiles = '')  
    {
        SKG_File.Models.SKGResponseModel locResponse;
        str locfileName;
        str locfilePath;

        str bankFabricfilenamename = '';// _SKS_EFTAP_File.BankFabricFileNameName; Need a place to pass control file name name
        if (_CompareFiles)
        {
            locfileName = _SKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal ? _SKS_EFTAP_File.FilePath + @'\' + _CompareFiles + @'\' + _SKS_EFTAP_File.FileName : strLRTrim(_SKS_EFTAP_File.FilePath) + _CompareFiles  + @'\';
            locfilePath = _SKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal ? _SKS_EFTAP_File.FilePath : strLRTrim(_SKS_EFTAP_File.FilePath) + _CompareFiles;
        }
        else
        {
            locfileName = _SKS_EFTAP_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal ? _SKS_EFTAP_File.FilePath + @'\' + _SKS_EFTAP_File.FileName : _SKS_EFTAP_File.FilePath + @'\';
            locfilePath = _SKS_EFTAP_File.FilePath;
        }

        SKG_File.Models.SKGFileModel locSKGFileModel = this.setFileName(locfileName,'','','','',locfilePath,_SKS_EFTAP_File.FileNbr,_SKS_EFTAP_File.DataAreaId,bankFabricfilenamename);      //Bankfabric

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();

            container conFileCreate =  fileFabric.CreateFile(dataList, false, 0, false,'','',bf_filePath,bf_fileNbr,bf_company,bf_fileNameName,_paymentFile, _formatGroup, _formatGroupVersion, _dataContractVersion);
            
            boolean fail = conPeek(conFileCreate,1) == '' ? FalseTrue::False : FalseTrue::True;
            
            locResponse = new SKG_File.Models.SKGResponseModel();
            if(!fail)
            {
                bf_NewfileName = conPeek(conFileCreate,2);
                locResponse.PaymentAdditionalData = conPeek(conFileCreate,3);
                locResponse.PaymentNextSequenceNumber = conPeek(conFileCreate,4);
                bf_NewControlfileName = conPeek(conFileCreate,5);
            }
            else
            {
                bf_Exeception = conPeek(conFileCreate,1);
                locResponse.SetException(bf_Exeception);
                bf_NewfileName = '';
                bf_NewControlfileName = '';
            }
        }
        else
        {
            locSKGFileModel.PaymentFileData = _paymentFile;
            locSKGFileModel.Action = SKG_File.Models.SKGFileAction::CreateOrOverwriteFile;
            locSKGFileModel.PaymentFormatGroup = _formatGroup;
            locSKGFileModel.PaymentFormatGroupVersion = _formatGroupVersion;
            locSKGFileModel.PaymentDataContractVersion = _dataContractVersion;
            locSKGFileModel.FileCRLF = _crlf;

            locResponse = SKG_File.Client.RequestPayment::CallPayment(header,locSKGFileModel);
        }
        return locResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPaymentCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will create an EFT file from BankFabric library.
    /// </summary>
    /// <param name = "_paymentFile">Data contract containing all of the payment data</param>
    /// <param name = "_SKS_EFTAP_File">EFT file record</param>
    /// <param name = "_formatGroup">Format group</param>
    /// <param name = "_formatGroupVersion">Format group version</param>
    /// <param name = "_dataContractVersion">Data contract version</param>
    /// <param name = "_crlf">Does format require CR/LF on last line</param>
    /// <param name = "_CompareFiles">Optional file name for comparison</param>
    /// <returns>Response model</returns>
    public SKG_File.Models.SKGResponseModel callPaymentCreate(str _paymentFile, SKS_EFTAP_File _SKS_EFTAP_File, str _formatGroup, str _formatGroupVersion, str _dataContractVersion)
    {
        SKG_File.Models.SKGResponseModel locResponse = new SKG_File.Models.SKGResponseModel();
      
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();

            SKS_EB_CommProcess commProcess;
            select firstonly BankFabricCommunicationName, CommID from commProcess where commProcess.CommID == _SKS_EFTAP_File.CommID;
            container conFileCreate =  fileFabric.CreatePayment(commProcess.BankFabricCommunicationName,_paymentFile, _formatGroup, _formatGroupVersion, _dataContractVersion);
            
            boolean fail = conPeek(conFileCreate,1) == '' ? FalseTrue::False : FalseTrue::True;
                        
            if(!fail)
            {                       
                locResponse.PaymentAdditionalData = conPeek(conFileCreate,2);
                locResponse.PaymentNextSequenceNumber = conPeek(conFileCreate,3);   
                locResponse.PaymentCreateResponseString = conPeek(conFileCreate,4);
            }
            else
            {
                bf_Exeception = conPeek(conFileCreate,1);
                locResponse.SetException(bf_Exeception);               
            }
        }
        
        return locResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callFileHubVersion</Name>
				<Source><![CDATA[
    public SKG_File.Models.SKGFileHubVersionModel callFileHubVersion()
    {
        SKG_File.Models.SKGFileHubVersionModel locSKGFileHubVersionModel = new SKG_File.Models.SKGFileHubVersionModel();
        locSKGFileHubVersionModel = SKG_File.Client.RequestFileHubVersion::CallFileHubVersion(header, locSKGFileHubVersionModel);

        return locSKGFileHubVersionModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callPaymentMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will return EFT format metadata from BankFabric library.
    /// </summary>
    /// <param name = "_SKGFormatMetadataRequest">Format metadata request</param>
    /// <returns>EFT format metadata</returns>
    public SKG_File.Models.SKGFormatMetadataRequest callPaymentMetadata(SKG_File.Models.SKGFormatMetadataRequest _SKGFormatMetadataRequest)
    {
        SKG_File.Models.SKGFormatMetadataRequest locFormatMetadata = new SKG_File.Models.SKGFormatMetadataRequest();

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();
            locFormatMetadata = fileFabric.SendFormatRequest(_SKGFormatMetadataRequest);
            bf_Exeception = locFormatMetadata.Response.Exception;
        }
        else if(_SKGFormatMetadataRequest.Action != SKG_File.Models.SKGFormatMetadataAction::APIFormatGroupList && 
            _SKGFormatMetadataRequest.Action != SKG_File.Models.SKGFormatMetadataAction::APIFormatMetadata) // If using FileHub, skip 
        {
            locFormatMetadata = SKG_File.Client.RequestPaymentMetadata::CallPaymentMetadata(header,_SKGFormatMetadataRequest);
            if(locFormatMetadata.Response.HasException && strContains(locFormatMetadata.Response.Exception,'404'))
            {
                error("@SKS:SKGFileHub3Error");
            }
        }
        this.responseHasError(locFormatMetadata.Response);
        return locFormatMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callInboundMetadata</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will return EFT format Inbound metadata from BankFabric library.
    /// </summary>
    /// <param name = "_SKGFormatMetadataRequest">Format metadata request</param>
    /// <returns>EFT format metadata</returns>
    public SKG_File.Models.SKGFormatMetadataInboundRequest callInboundMetadata(SKG_File.Models.SKGFormatMetadataInboundRequest _SKGFormatMetadataRequest)
    {
        SKG_File.Models.SKGFormatMetadataInboundRequest locFormatMetadata = new SKG_File.Models.SKGFormatMetadataInboundRequest();

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();
            locFormatMetadata = fileFabric.SendInboundFormatRequest(_SKGFormatMetadataRequest);
            bf_Exeception = locFormatMetadata.Response.Exception;
        }
        /* Inbound metadata is not required for fielhub
        else
        {
            locFormatMetadata = SKG_File.Client.RequestPaymentMetadata::CallInboundMetadata(header,_SKGFormatMetadataRequest);
            if(locFormatMetadata.Response.HasException && strContains(locFormatMetadata.Response.Exception,'404'))
            {
                error("@SKS:SKGFileHub3Error");
            }
        }
        */
        this.responseHasError(locFormatMetadata.Response);
        return locFormatMetadata;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callAPIPaymentStatus</Name>
				<Source><![CDATA[
    public SKG_BF.Models.PaymentStatusResponse callAPIPaymentStatus(SKG_BF.Models.PaymentStatusRequest _PaymentStatusRequest)
    {
        SKG_BF.Models.PaymentStatusResponse paymResponse = new SKG_BF.Models.PaymentStatusResponse();

        SKS_EB_BankFabric apiBankFabric = SKS_EB_BankFabric::construct();
        paymResponse = apiBankFabric.getAPIPaymentStatus(_PaymentStatusRequest);
        
        return paymResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callAPIPaymRemitStatus</Name>
				<Source><![CDATA[
    public SKG_BF.Models.PaymentRemitAutomationResponse callAPIPaymRemitStatus(SKG_BF.Models.PaymentRemitAutomationRequest _remitStatusRequest)
    {
        SKG_BF.Models.PaymentRemitAutomationResponse remitResponse = new SKG_BF.Models.PaymentRemitAutomationResponse();

        SKS_EB_BankFabric apiBankFabric = SKS_EB_BankFabric::construct();
        remitResponse = apiBankFabric.getAPIPaymRemitStatus(_remitStatusRequest);
        
        return remitResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>streamGet</Name>
				<Source><![CDATA[
    public System.IO.Stream streamGet(System.Text.Encoding _encoding = null, boolean _filecompare=false)
    {
        if (file == null)
            this.StreamInit();

        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric  || (gSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && _filecompare))
        {
            System.Text.Encoding fileEncoding = _encoding ? _encoding : System.Text.Encoding::get_UTF8();
            System.Byte[] byteArray = fileEncoding.GetBytes(fileBody);
            System.IO.MemoryStream fileStream = new System.IO.MemoryStream(byteArray);
            return fileStream;
        }
        
        return file.FileStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>streamInit</Name>
				<Source><![CDATA[
    public void streamInit()
    {
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            return;

        if (fileName == '' || file == null)
            throw error('File not loaded.');

        file.FileStream_Init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>streamClose</Name>
				<Source><![CDATA[
    public void streamClose()
    {
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            return;

        file.FileStream_Close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callAPIPCardStatus</Name>
				<Source><![CDATA[
    public SKG_BF.Models.PCardResponse callAPIPCardStatus(SKG_BF.Models.PCardRequest _pCardStatusRequest)
    {
        SKG_BF.Models.PCardResponse pCardResponse = new SKG_BF.Models.PCardResponse();

        SKS_EB_BankFabric apiBankFabric = SKS_EB_BankFabric::construct();
        pCardResponse = apiBankFabric.getAPIPCardStatus(_pCardStatusRequest);
        
        return pCardResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTestConnection</Name>
				<Source><![CDATA[
    public boolean runTestConnection()
    {
        boolean rtnval;

        header = SKS_EB_FileHub::createHeaderFromDB();
        header.Trace = trace;
        header.AuthorizationCode = SKS_EB_FileHubAuthDataEntity::GetAuthorizationCode();
        rtnval = !this.responseHasError(SKG_File.Client.TestConnection::TryToCall(header));
        SKS_EB_FileHubAuth::deleteByAuthorizationCode(header.AuthorizationCode);

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>directoryExistsForm</Name>
				<Source><![CDATA[
    public static boolean directoryExistsForm(str _path, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        boolean rtnval = true;
        if(_path != ''  && _SKS_BF_BankIntType != SKS_BF_BankIntType::BankFabric)
        {
            if(!SKS_EB_FileHub::construct(_SKS_BF_BankIntType).runDirectoryExists(_path))
            {
                error(strFmt("@SYS55831", _path));
                rtnval =  false;
            }
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFileName</Name>
				<Source><![CDATA[
    public static boolean validateFileName(str _value)
    {
        //Windows does not allow certain characters to be used in a filename or for a filename to end with a period.
        //This method checks for those and returns false if either condition is met.
        if(strFind(_value,'>:"/\\|?*', 1, strLen(_value)) != 0 || strFind(_value, '.', strLen(_value), 1) != 0 )
        {
            error("@SKS2641");
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileDisplayForm</Name>
				<Source><![CDATA[
    public static void fileDisplayForm(str _pathandfileName,SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        fileHub.parmThrowErrorIfException(false);
        fileHub.runFileInquire(_pathandfileName);
        if(!fileHub.attrFileExists())
        {
            error(strFmt("@SYS315466", _pathandfileName));
            return;
        }

        fileHub.runFileLoad(_pathandfileName);
        if (fileHub.errorHasException())
        {
            error(fileHub.errorException());
            return;
        }
        str fileName = System.IO.Path::GetFileName(_pathandfileName);
        File::SendStringAsFileToUser(fileHub.fileBody(), fileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileArchive</Name>
				<Source><![CDATA[
    public static boolean fileArchive(str _pathFile, str _archivePathFile,SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        str copyResponse;
        boolean fail;

        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        if (_SKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();

            copyResponse =  fileFabric.copyFile(_pathFile,_archivePathFile);
            
            fail = copyResponse == '' ? FalseTrue::False : FalseTrue::True;
            
            if(fail)
            {
                error("@SKS:SKGBFError" + copyResponse);
                return false;
            }
        }
        else
        {
            fileHub.parmThrowErrorIfException(false);
            fileHub.setFileName(_pathFile);
            fileHub.runFileCopyTo(_archivePathFile);
            if(fileHub.errorHasException())
            {
                error(fileHub.errorException());
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>