<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_OutboundFormat_AUDDIS_NATWEST</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_DD_OutboundFormat_AUDDIS_NATWEST for Outbound class for Auddis Natwest
/// </summary>
class SKS_DD_OutboundFormat_AUDDIS_NATWEST extends SKS_DD_OutboundFormat
{
    System.Text.StringBuilder   sb;
    #define.Separator(',')
    #define.DoubleQuote('"')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    public str formatStructure(CustDirectDebitMandate  _custDirectDebitMandate)
    {
        sb = new System.Text.StringBuilder();

        boolean isCustDirectDebitMandateFound;
        CustMandateStatus status;
        boolean IsNotFirst = false;

        mCustDirectDebitMandate = _custDirectDebitMandate;

        while(_custDirectDebitMandate)
        {
            //Devops 15878 - allow multiple Auddis mandates
            //if(this.CheckMandateSentStatus(mCustDirectDebitMandate.CustAccount) ||
            if(mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Sent || mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Rejected ||
               (_custDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Accepted && (mCustDirectDebitMandate.Status == CustMandateStatus::New || mCustDirectDebitMandate.Status == CustMandateStatus::Active))) // only one mandate record can be at sent status per customer
            {
                next _custDirectDebitMandate;
                continue;
            }

            //status = _custDirectDebitMandate.getStatus();
            status = this.getMandateStatus();

            //info("Mandate ID " + _custDirectDebitMandate.MandateReference + " Status 1 is :" + enum2Str(status));

            if(status != CustMandateStatus::Modified)
            {
                isCustDirectDebitMandateFound = true;
                break;
            }
            else
            {
                next _custDirectDebitMandate;
                continue;
            }
        }

        if(isCustDirectDebitMandateFound)
        {
            mSKS_PP_Bank = SKS_PP_Bank::find(mCustDirectDebitMandate.CreditorBankAccount);
            mSKS_EB_BankTable = SKS_EB_BankTable::find(mSKS_PP_Bank.BankID);

            //this.rec_Header();

            ttsbegin;

            while(mCustDirectDebitMandate)
            {
                //Devops 15878 - allow multiple Auddis mandates
                //if(this.CheckMandateSentStatus(mCustDirectDebitMandate.CustAccount) ||
                if(mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Sent || mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Rejected ||
                    (mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Accepted && (mCustDirectDebitMandate.Status == CustMandateStatus::New || mCustDirectDebitMandate.Status == CustMandateStatus::Active))) // only one mandate record can be at sent status per customer
                {
                    next mCustDirectDebitMandate;
                    continue;
                }
            
                //status = mCustDirectDebitMandate.getStatus();
                status = this.getMandateStatus();

                if(status != CustMandateStatus::Modified)
                {
                    if(IsNotFirst)
                    {
                        sb.AppendLine();
                    }

                    IsNotFirst = true;

                    // Detail Record
                    this.rec_Detail(status);

                    mCustDirectDebitMandate.selectForUpdate(true);
                    if(mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Ready && status == CustMandateStatus::New)
                    {
                        mCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
                        mCustDirectDebitMandate.Status = CustMandateStatus::New;
                    }
                    else if((mCustDirectDebitMandate.Status == CustMandateStatus::Canceled ||
                             status == CustMandateStatus::Canceled) ||
                            (mCustDirectDebitMandate.Status == CustMandateStatus::Expired ||
                             status == CustMandateStatus::Expired))
                    {
                        mCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Sent;
                    }
                    mCustDirectDebitMandate.SKS_EB_RegisterStatusSent = NoYesCombo::Yes;
                    mCustDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
                    mCustDirectDebitMandate.SKS_EB_RegisterStatusDate = DateTimeUtil::getSystemDateTime();
                    mCustDirectDebitMandate.update();

                    next mCustDirectDebitMandate;
                }
                else
                {
                    next mCustDirectDebitMandate;
                }
            }

            ttscommit;
            
            return sb.ToString();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detail record
    /// </summary>
    /// <param name = "_status">Mandate status</param>
    /// <returns>True or False</returns>
    public boolean rec_Detail(CustMandateStatus _status)
    {

        // 1    Recipient Sort Code
        sb.Append(this.wrapField(CustBankAccount::find(mCustDirectDebitMandate.CustAccount, mCustDirectDebitMandate.BankAccount).RegistrationNum));

        // 2    Recipient Account Number
        sb.Append(this.wrapField(CustBankAccount::find(mCustDirectDebitMandate.CustAccount, mCustDirectDebitMandate.BankAccount).AccountNum));

        // 3    Recipient Account Name
        sb.Append(this.wrapField(SKS_EFT_Common::getCustomerName(mCustDirectDebitMandate.company(), mCustDirectDebitMandate.CustAccount)));
        
        // 4    Amount
        sb.Append(this.wrapField('0.00'));
        
        // 5    Direct Debit Reference
        sb.Append(this.wrapField(mCustDirectDebitMandate.MandateReference));

        // 6    Transaction Code
        if(_status == CustMandateStatus::New)
        {
            sb.Append(this.wrapField('0N', true, false));
        }
        else if(_status == CustMandateStatus::Modified)
        {
            sb.Append(this.wrapField('0S', true, false));
        }
        else if(_status == CustMandateStatus::Canceled ||
                _status == CustMandateStatus::Expired)
        {
            sb.Append(this.wrapField('0C', true, false));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _Quote = true, boolean _addSeparator = true)
    {
        str value;

        if(_addSeparator)
        {
            if(_Quote && _field != '' || _Quote == true)
            {
                value = #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                value =  _field + #Separator;
            }
        }
        else
        {
            if(_Quote && _field != '' || _Quote == true)
            {
                value =  #DoubleQuote + _field + #DoubleQuote;
            }
            else
            {
                value =  _field;
            }
        }

        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>