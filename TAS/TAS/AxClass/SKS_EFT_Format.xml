<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_Format
{
    //------------------------------------------------------------------------------------------------------
/// <summary>
/// Base class that EFT formats use.
/// </summary>
/// <remarks>
/// Class selects records and provides the basic file structure
/// Child classes override any methods that need data in the format
/// </remarks>

// Typical Format structure:
//  File header (from base class)
//      Format header (from child class)
//          Group header (from child class)
//              Detail (from child class)
//          Group trailer (from child class)
//      Format trailer (from child class)
//  File trailer (from base class)
    //------------------------------------------------------------------------------------------------------
    SKS_EFT_FileFormat mSKS_EFT_FileFormat;
    SKS_EFT_FileFormatPaymSpec mSKS_EFT_FileFormatPaymSpec;
    SKS_EFT_FileNbr mFileNumber;
    SKS_EFT_FileDetail mSKS_EFT_FileDetail;
    SKS_EFTAP_File mSKS_EFT_File;
    SKS_EFT_Bank mSKS_EFT_Bank;
    SKS_EFTAR_Bank mSKS_EFTAR_Bank;
    SKS_EFTBTB_Bank mSKS_EFTBTB_Bank;
    SKS_EFTCNP_Bank mSKS_EFTCNP_Bank;
    SKS_EFT_VendorPaym mSKS_EFT_VendorPaym;
    SKS_EFT_CustomerPaym mSKS_EFT_CustomerPaym;
    LogisticsAddressCountryRegion mLogisticsAddressCountry;
    SKS_EFT_FileId mFileIdMod;
    str busDate;
    str busTime;
    SKS_EFT_SequenceNumber mSeqNumber;
    str mErrorText;
    str mFileTempDir;
    str mBFNewFileName;          //BankFabric
    str mBFNewCtrlFileName;      //BankFabric
    str mCompareFilesPath;       //file compare
    SKS_EB_FileHub mFileHub;
    SKS_EFT_Module   mModule;
    System.Xml.XmlDocument gXmlDocument;
    System.Xml.XmlNode gXmlNodeFile;
    System.Xml.XmlNode gXmlFieldValues;
    System.Xml.XmlNode gXmlNodeHeaderFieldValues;
    System.Xml.XmlNode gXmlNodeAddendaFieldValues;
    System.Xml.XmlNode gXmlNodeDetailFieldValues;
    Str mRemittanceName, mRemittanceAdrLine1, mRemittanceAdrLine2, mRemittanceAdrLine3, mRemittanceCity, mRemittanceState, mRemittanceZipCode, mRemittanceCountryRegionId,mRemittancePostBox,mRemittanceBuildingComplement,mRemittanceStreet,mRemittanceStreetNum;	//SKS#DevOps:16146
    int mFileRecCount; // File Record Count
    SKS_EB_CharacterReplacement mSKS_EB_CharacterReplacement;
    SKS_EFT_FileDetail_BenBank mSKS_EFT_FileDetail_BenBank;
    SKS_EFT_FileDetail_VendAddress mSKS_EFT_FileDetail_VendAddress;
    SKS_EFT_FileDetail_Intermediary mSKS_EFT_FileDetail_Intermediary;
    SKS_EFT_FileDetail_Extra    mSKS_EFT_FileDetail_Extra, lSKS_EFT_FileDetail_Extra;
    //FDD-10590 --->
    SKS_EFT_FileDetail_AddendaDetailConfig  mSKS_EFT_FileDetail_AddendaDetailConfig; 
    SKS_EFT_FileDetail_BankAccount          mSKS_EFT_FileDetail_BankAccount;
    SKS_EFT_FileDetail_AddendaHeader        msks_eft_FileDetail_AddendaHeader;
    SKS_EFT_FileDetail_Addresses            msks_EFT_FileDetail_BankAddress;
    SKS_EFT_FileDetail_PaymentLine          msks_EFT_FileDetail_PaymentLine;
    SKS_EFT_FileDetail_Mandate              msks_EFT_FileDetail_Mandate;
    SKS_EFT_FileDetail_CustAddress          msks_EFT_FileDetail_CustAddress;
    SKS_EFT_FileDetail_CreditParty          msKS_EFT_FileDetail_CreditParty;
    SKS_EFT_FileDetail_Instructions         msKS_EFT_FileDetail_Instructions;
    //<--- FDD-10590

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldElement</Name>
				<Source><![CDATA[
    protected void addFieldElement(System.Xml.XmlNode _ParentNode,str _FieldName, str _FieldValue, refrecid _CurrentRecID)
    {
        System.Xml.XmlElement locFieldElement, locNameElement, locValueElement, locRecIdElement;
    
        if(_CurrentRecID > 0)
        {
            locFieldElement = _ParentNode.AppendChild(gXmlDocument.CreateElement('Field'));
            locNameElement = locFieldElement.AppendChild(gXmlDocument.CreateElement('Name'));
            locValueElement = locFieldElement.AppendChild(gXmlDocument.CreateElement('Value'));
            locRecIdElement = locFieldElement.AppendChild(gXmlDocument.CreateElement('RefRecId'));
    
            locNameElement.set_InnerText(_FieldName);
            locValueElement.set_InnerText(_FieldValue);
            locRecIdElement.set_InnerText(int642str(_CurrentRecID));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CharacterReplacement</Name>
				<Source><![CDATA[
    protected str CharacterReplacement(str _result)
    {
        if(_result != '' && mSKS_EB_CharacterReplacement)
        {
            return mSKS_EB_CharacterReplacement.ConvertCharacters(_result);
        }
        else
        {
            return _result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ControlFile</Name>
				<Source><![CDATA[
    protected void ControlFile()
    {
        str ControlFileFormatID;
        SysDictClass obj;
        Object classInstance;
    
        ControlFileFormatID = strReplace('SKS_EFT_CTRL_' + mSKS_EFT_File.controlfileformatid, '-', '_');
    
        obj = new SysDictClass(className2Id(ControlFileFormatID));
        classInstance = obj.makeObject(); // Instantiate class
        obj.callObject('setFileNbr', classInstance, msks_eft_file.FileNbr); // Call method to set variable
        obj.callObject('setSeqNumber', classInstance, msks_eft_file.Ret_NbrGoodRecs);
        obj.callObject('setFileIdMod', classInstance, 1);
        obj.callObject('setModule', classInstance, msks_eft_file.EFTFileType);
    
        this.controlfilespecific(obj, classinstance);
        //give all formatids baseclasses init()
        obj.callObject('run', classInstance, true);

        mBFNewCtrlFileName = obj.callObject('getBFNewCtrlFileName', classInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlfilespecific</Name>
				<Source><![CDATA[
    protected void controlfilespecific(SysDictClass _obj, Object _classInstance)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileBlockFill</Name>
				<Source><![CDATA[
    private void fileBlockFill()
    {
        int i = 1;
        int fillCount;
        
        if((mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP && mSKS_EFT_Bank.FillBlock == NoYes::Yes)       ||
            (mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AR && mSKS_EFTAR_Bank.FillBlock == NoYes::Yes)    ||
            (mSKS_EFT_File.EFTFileType == SKS_EFT_Module::BTB && mSKS_EFTBTB_Bank.FillBlock == NoYes::Yes)  ||          //SKS#DevOps:20682
            (mSKS_EFT_File.EFTFileType == SKS_EFT_Module::CNP && mSKS_EFTCNP_Bank.FillBlock == NoYes::Yes))             //SKS#DevOps:20682
        {
            if (mFileRecCount != 0)
            {
                // Need to fill to the next multiple of 10
                // If fillCount is 10 we are already on a even 10 count so don't need any fill records
                fillCount = 10-(mFileRecCount mod 10);
                if (fillCount != 10)
                {
                    while (i <= fillCount)
                    {
                        this.fileWrite(SKS_PP_StringFormats::strFill(mSKS_EFT_FileFormat.RecordLength, '', SKS_PP_FillCharacter::Nine, SKS_PP_FillSide::Right));
                        i++;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileClose</Name>
				<Source><![CDATA[
    private void fileClose(boolean controlFilecreate)
    {
        // Flushs all in memory lines to file
        // Until this is called, the file will not exist.
        mFileHub.runAppendLineFlush();

        if (controlFilecreate)
        {
            mBFNewCtrlFileName = mFileHub.getBFNewFileName();  //BankFabric
        }
        else
        {
            mBFNewFileName = mFileHub.getBFNewFileName();       //BankFabric
        }        

        if(mFileHub.errorHasException())
        {
            mErrorText = mFileHub.errorException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileCreate</Name>
				<Source><![CDATA[
    protected void fileCreate(boolean controlFilecreate)
    {
        str fileName;
        str filepath;
        str bankFabricfilenamename;

        if (mSKS_EFT_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric) // 15745
        {
            mSKS_EFT_File.ControlFileName = '';
            mSKS_EFT_File.FileName = '';
        }
        
        if(controlFilecreate)
        {
            filename = mSKS_EFT_File.FilePath + @'\' + mSKS_EFT_File.ControlFileName;
            filepath = mSKS_EFT_File.FilePath;
            bankFabricfilenamename = mSKS_EFT_File.BankFabricFileNameName;               //Bankfabric
        }
        else if(mFileTempDir)
        {
            fileName = mSKS_EFT_File.FilePath + @'\' + mFileTempDir + @'\' + mSKS_EFT_File.FileName;
            filepath = mSKS_EFT_File.FilePath;
        }
        else
        {
            if (mCompareFilesPath)
            {
                if (mSKS_EFT_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric)
                {
                    fileName = strLRTrim(mSKS_EFT_File.FilePath) +  mCompareFilesPath + @'\' + mSKS_EFT_File.FileName;
                    filepath = strLRTrim(mSKS_EFT_File.FilePath) +  mCompareFilesPath;
                }
                else
                {
                    fileName = mSKS_EFT_File.FilePath + @'\' + mCompareFilesPath + @'\' + mSKS_EFT_File.FileName;
                    filepath = mSKS_EFT_File.FilePath;
                }
            }
            else
            {
                fileName = mSKS_EFT_File.FilePath + @'\' + mSKS_EFT_File.FileName;
                filepath = mSKS_EFT_File.FilePath;
            }
        }

    
        mFileHub = SKS_EB_FileHub::construct(mSKS_EFT_File.BFBankIntegration);
        mFileHub.parmThrowErrorIfException(false);
        mFileHub.parmEncoding(this.getCodePage());
        mFileHub.setFileName(fileName,'','','','',filepath,mSKS_EFT_File.FileNbr,mSKS_EFT_File.DataAreaId,bankFabricfilenamename);      //Bankfabric
        mFileHub.parmFileRemoveUTF8BOM(this.getRemoveBOM());
        mFileHub.parmFileCRLF(this.getCRLF());

        if (mSKS_EFT_File.BFBankIntegration == SKS_BF_BankIntType::FileHubLocal)
        {
            mFileHub.runFileDelete();
            if(mFileHub.errorHasException())
            {
                mErrorText = mFileHub.errorException();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileCRLF</Name>
				<Source><![CDATA[
    private void fileCRLF()
    {
        //FileHub implementation is different than 2012
        // Set getCRLF to false if No CRLF is needed.
        // Add LF after each line if needed
        // FileFormat CRLF property is not currently used
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileDelete</Name>
				<Source><![CDATA[
    private void fileDelete()
    {
        SKS_EB_FileHub::construct().runFileDelete(mSKS_EFT_File.FilePath + @'\' + mSKS_EFT_File.FileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileHeader</Name>
				<Source><![CDATA[
    private void fileHeader()
    {
        //------------------------------------------------------------------------------------------------------
        // This code is the same for all reports
        //------------------------------------------------------------------------------------------------------
        select ValueString from mSKS_EFT_FileDetail
            where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                  mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Header;
    
        while(mSKS_EFT_FileDetail)
        {
            this.fileWrite(this.txtFileHeaderTrailer());
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileTrailer</Name>
				<Source><![CDATA[
    private void fileTrailer()
    {
        //------------------------------------------------------------------------------------------------------
        // This code is the same for all reports
        //------------------------------------------------------------------------------------------------------
        select ValueString from mSKS_EFT_FileDetail
            where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                  mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Trailer;
    
        while(mSKS_EFT_FileDetail)
        {
            this.fileWrite(this.txtFileHeaderTrailer());
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
        {
            mFileHub.runAppendLine(_result);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    public str getErrorText()
    {
        return mErrorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFNewFileName</Name>
				<Source><![CDATA[
    public str  getBFNewFileName()
    {
        return mBFNewFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFNewCtrlFileName</Name>
				<Source><![CDATA[
    public str  getBFNewCtrlFileName()
    {
        return mBFNewCtrlFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryISO</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mLogisticsAddressCountryRegion
        // Return a 2 digit ISO country code
        //------------------------------------------------------------------------------------------------------
        str value;
    
        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(mLogisticsAddressCountry.CountryRegionId != _countryRegion)
            {
                mLogisticsAddressCountry = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = mLogisticsAddressCountry.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryRegionName</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionName getLogisticsAddressCountryRegionName(LogisticsAddressCountryRegionId _countryRegion)
    {
        str value;
        LogisticsAddressCountryRegion lLogisticsAddressCountryRegion;
    
        if(_countryRegion != '')
        {
            if(lLogisticsAddressCountryRegion.CountryRegionId != _countryRegion)
            {
                lLogisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = lLogisticsAddressCountryRegion.displayName();
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPositiveAmount</Name>
				<Source><![CDATA[
    real getPositiveAmount(real _amount)
    {
        real amount;

        amount = _amount;

        if(amount < 0)
        {
            amount = amount * -1;
        }
    
        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
        EventHandlerResult result = new EventHandlerResult();
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select firstonly lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
            mRemittanceAdrLine3 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
                if (vendAddrArray.exists(3))
                {
                    mRemittanceAdrLine3 = vendAddrArray.value(3);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            //Populate Remittance Information from Vendor eBanking details
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId);
        }

        this.getRemittanceAddress_delegate(mSKS_EFT_FileDetail, result);

        if(result.result())
        {
            mRemittanceName = result.result();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemoveBOM</Name>
				<Source><![CDATA[
    protected boolean getRemoveBOM()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCRLF</Name>
				<Source><![CDATA[
    protected boolean getCRLF()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSeqNumber</Name>
				<Source><![CDATA[
    public SKS_EFT_SequenceNumber getSeqNumber()
    {
        return mSeqNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_Bank</Name>
				<Source><![CDATA[
    void getSKS_EFT_Bank()
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mSKS_EFT_Bank
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_Bank.BankAccountId != mSKS_EFT_FileDetail.BankAccountId || mSKS_EFT_Bank.PaymMode != mSKS_EFT_FileDetail.PaymMode)
        {
            mSKS_EFT_Bank = SKS_EFT_Bank::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_CustomerPaym</Name>
				<Source><![CDATA[
    void getSKS_EFT_CustomerPaym()
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mSKS_EFT_CustomerPaym
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_CustomerPaym.CustAccount != mSKS_EFT_FileDetail.AccountNum ||
           mSKS_EFT_CustomerPaym.PaymMode != mSKS_EFT_FileDetail.PaymMode ||
           mSKS_EFT_CustomerPaym.PaymSpec != mSKS_EFT_FileDetail.PaymSpec ||
           mSKS_EFT_CustomerPaym.BankAccountId != mSKS_EFT_FileDetail.DepBankAccountId)
        {
            mSKS_EFT_CustomerPaym = SKS_EFT_CustomerPaym::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.PaymMode, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_FileDetail.DepBankAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_FileFormatPaymSpec</Name>
				<Source><![CDATA[
    void getSKS_EFT_FileFormatPaymSpec()
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mSKS_EFT_FileFormatPaymSpec
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_FileFormatPaymSpec.FormatId != mSKS_EFT_FileDetail.FormatId ||
           mSKS_EFT_FileFormatPaymSpec.PaymSpec != mSKS_EFT_FileDetail.PaymSpec)
        {
            mSKS_EFT_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::find(mSKS_EFT_FileDetail.FormatId, mSKS_EFT_FileDetail.PaymSpec);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_VendorPaym</Name>
				<Source><![CDATA[
    void getSKS_EFT_VendorPaym()
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mSKS_EFT_VendorPaym
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.VendAccount != mSKS_EFT_FileDetail.AccountNum ||
           mSKS_EFT_VendorPaym.PaymMode != mSKS_EFT_FileDetail.PaymMode ||
           mSKS_EFT_VendorPaym.PaymSpec != mSKS_EFT_FileDetail.PaymSpec ||
           mSKS_EFT_VendorPaym.BankAccountId != mSKS_EFT_FileDetail.DepBankAccountId)
        {
            mSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.PaymMode, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_FileDetail.DepBankAccountId);                        
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFTAR_Bank</Name>
				<Source><![CDATA[
    void getSKS_EFTAR_Bank()
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mSKS_EFTAR_Bank
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFTAR_Bank.BankAccountId != mSKS_EFT_FileDetail.BankAccountId || mSKS_EFTAR_Bank.PaymMode != mSKS_EFT_FileDetail.PaymMode)
        {
            mSKS_EFTAR_Bank = SKS_EFTAR_Bank::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFTBTB_Bank</Name>
				<Source><![CDATA[
    void getSKS_EFTBTB_Bank()
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mSKS_EFTAR_Bank
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFTBTB_Bank.BankAccountId != mSKS_EFT_FileDetail.BankAccountId || mSKS_EFTBTB_Bank.PaymMode != mSKS_EFT_FileDetail.PaymMode)
        {
            mSKS_EFTBTB_Bank = SKS_EFTBTB_Bank::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public System.Xml.XmlDocument run(boolean controlfilecreate = false)
    {
        //------------------------------------------------------------------------------------------------------
        /// <returns>
        /// this method returns a System.Xml.Xmldocument
        ///     which currently contains fields and values
        ///     created during the file creation process and
        ///     not found in the db.
        /// </returns>
        /// <summary>
        /// This method is the driver for all EFT file formats
        /// </summary>
        /// <param name="controlfilecreate">
        /// used to declare whether or not the file being created is a control file
        /// </param>
        /// <remarks>
        /// Selects records from SKS_EFT_FileDetail and iterates through them
        /// </remarks>
        //------------------------------------------------------------------------------------------------------
        Map locRecTypes;
    
        locRecTypes = new Map(Types::Integer, Types::String);
        locRecTypes.insert(0,'HeaderFieldValues');
        locRecTypes.insert(1,'DetailFieldValues');
        locRecTypes.insert(2,'AddendaFieldValues');
    
        //instantiate the XML Repsonse file
        gXmlDocument = new System.Xml.XmlDocument();
        gXmlNodeFile = gXmlDocument.AppendChild(gXmlDocument.CreateElement('File'));
        gXmlFieldValues = gXmlNodeFile.AppendChild(gXmlDocument.CreateElement('FieldValues'));
        gXmlNodeHeaderFieldValues = gXmlFieldValues.AppendChild(gXmlDocument.CreateElement(locRecTypes.lookup(0)));
        gXmlNodeAddendaFieldValues = gXmlFieldValues.AppendChild(gXmlDocument.CreateElement(locRecTypes.lookup(2)));
        gXmlNodeDetailFieldValues = gXmlFieldValues.AppendChild(gXmlDocument.CreateElement(locRecTypes.lookup(1)));
    
    
        // Load file info
        mSKS_EFT_File = SKS_EFTAP_File::find(mFileNumber, mModule);
        if(!mSKS_EFT_File)
        {
            mErrorText = (strFmt("@SKS992", mFileNumber));
            gXmlDocument.RemoveAll();
            return gXmlDocument;
        }
    
        // Load format info
        mSKS_EFT_FileFormat = SKS_EFT_FileFormat::find(mSKS_EFT_File.FormatId);
        if(!mSKS_EFT_FileFormat)
        {
            mErrorText = (strFmt("@SKS993", mSKS_EFT_File.FormatId));
            gXmlDocument.RemoveAll();
            return gXmlDocument;
        }
    
        busDate = SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        busTime = SKS_PP_StringFormats::strTimeHHMM();
    
        // Create file
        this.fileCreate(controlfilecreate);
        if(mErrorText != '')
        {
            gXmlDocument.RemoveAll();
            return gXmlDocument;
        }
    
        // File header from PP Header/Trailer
        this.fileHeader();
    
        // Select all payment records
        this.selectPaymentRecords();
    
        if(mModule == SKS_EFT_Module::AP)
        {
            //<Issue22082>
            if(!mSKS_EFT_FileDetail && mSKS_EFT_File.FXAProcessing)
            {
                select firstonly mSKS_EFT_FileDetail
                    where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::FXAllVendor;
            }
            //</Issue22082>

            // After payment records are selected, load bank account
            changecompany(mSKS_EFT_FileDetail.AccountCompany)
            {
                mSKS_EFT_Bank = SKS_EFT_Bank::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);
            }
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
            mSKS_EFT_FileDetail_Extra = SKS_EFT_FileDetail_Extra::findRefRecId(mSKS_EFT_FileDetail.RecId); //SKS_FDD_10590
        }
        else if(mModule == SKS_EFT_Module::BTB)
        {

            // After payment records are selected, load bank account
            mSKS_EFTBTB_Bank = SKS_EFTBTB_Bank::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);
        }
        else if(mModule == SKS_EFT_Module::CNP)
        {
            // After payment records are selected, load bank account
            mSKS_EFTCNP_Bank = SKS_EFTCNP_Bank::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);
        }
        else
        {
    
            // After payment records are selected, load bank account
            mSKS_EFTAR_Bank = SKS_EFTAR_Bank::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);
            mSKS_EFT_FileDetail_Extra = SKS_EFT_FileDetail_Extra::findRefRecId(mSKS_EFT_FileDetail.RecId); //SKS_FDD_10590
        }
    
        //Setup diacritic removal
        if(mModule == SKS_EFT_Module::AP && mSKS_EFT_Bank.CharacterReplacementGroupId)
        {
            mSKS_EB_CharacterReplacement = new SKS_EB_CharacterReplacement(mSKS_EFT_Bank.CharacterReplacementGroupId);
        }
        else if(mModule == SKS_EFT_Module::AR && mSKS_EFTAR_Bank.CharacterReplacementGroupId)
        {
            mSKS_EB_CharacterReplacement = new SKS_EB_CharacterReplacement(mSKS_EFTAR_Bank.CharacterReplacementGroupId);
        }
        else if(mModule == SKS_EFT_Module::BTB && mSKS_EFTBTB_Bank.CharacterReplacementGroupId)
        {
            mSKS_EB_CharacterReplacement = new SKS_EB_CharacterReplacement(mSKS_EFTBTB_Bank.CharacterReplacementGroupId);
        }
        else if(mModule == SKS_EFT_Module::CNP && mSKS_EFTCNP_Bank.CharacterReplacementGroupId)
        {
            mSKS_EB_CharacterReplacement = new SKS_EB_CharacterReplacement(mSKS_EFTCNP_Bank.CharacterReplacementGroupId);
        }
    
        //SKS_VSTS_13535--->
        try
        {
            this.formatStructure();
        }
        catch(Exception::CLRError)
        {
            System.Exception ex;
    
            ex = ClrInterop::getLastException();

            if (ex != null)
            {
                ex = ex.get_InnerException();
                if (ex != null)
                {
                    mErrorText = ex.ToString();
                }
            }
        }
        //SKS_VSTS_13535<---

        if(mErrorText != '')
        {
            this.fileClose(controlfilecreate);
            this.fileDelete(); // Delete file if there were errors
            gXmlDocument.RemoveAll();
            return gXmlDocument;
        }
    
        // Add Block Fill if needed
        this.fileBlockFill();
    
        // File trailer from PP Header/Trailer
        this.fileTrailer();
    
        // Add a carriage return/line feed as the last line of the file.
        this.fileCRLF();
    
        //Close file
        this.fileClose(controlfilecreate);
    
        if(!mCompareFilesPath && !controlfilecreate && msks_eft_file.ControlFileFormatId != '' && (mSKS_EFT_File.ControlFileName != '' || mSKS_EFT_File.BFBankIntegration == SKS_BF_BankIntType::BankFabric))
        {
            this.controlfile();
        }
        return gXmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sectionDetail</Name>
				<Source><![CDATA[
    protected void sectionDetail()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('');
    
        this.fileWrite(sb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
          order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileIdMod</Name>
				<Source><![CDATA[
    public void setFileIdMod(SKS_EFT_FileId _fileIdMod)
    {
        mFileIdMod = _fileIdMod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileTempDir</Name>
				<Source><![CDATA[
    public void setFileTempDir(str _fileTempDir)
    {
        mFileTempDir = _fileTempDir;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileNbr</Name>
				<Source><![CDATA[
    public void setFileNbr(SKS_PP_FileNbr _fileNbr)
    {
        mFileNumber = _fileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModule</Name>
				<Source><![CDATA[
    public void setModule(SKS_EFT_Module _mModule)
    {
        mModule = _mModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSeqNumber</Name>
				<Source><![CDATA[
    public void setSeqNumber(SKS_EFT_SequenceNumber _seqNumber)
    {
        mSeqNumber =_seqNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompareFilesPath</Name>
				<Source><![CDATA[
    public void setCompareFilesPath(str _compareFilesPath)
    {
        mCompareFilesPath =_compareFilesPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFileHeaderTrailer</Name>
				<Source><![CDATA[
    private str txtFileHeaderTrailer()
    {
        //------------------------------------------------------------------------------------------------------
        // This code is the same for all formats
        //------------------------------------------------------------------------------------------------------
        str result;
    
        result = SKS_PP_StringFormats::strFill(mSKS_EFT_FileFormat.RecordLength, mSKS_EFT_FileDetail.ValueString, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right);
    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueFromCode</Name>
				<Source><![CDATA[
    static server str getValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec, RefRecId _VendPaymRecId)
    {
        SKS_EFT_FileFormatPaymSpecFields lSKS_EFT_FileFormatPaymSpecFields;
        SKS_EB_CodeLookupValues lSKS_EB_CodeLookupValues;
        SKS_EFT_VendorPaymLookup lSKS_EFT_VendorPaymLookup;
        str ret = '';
    
        select firstonly lSKS_EFT_FileFormatPaymSpecFields
            where lSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == _SKS_EFT_FileFormatPaymSpec.RecId &&
                    lSKS_EFT_FileFormatPaymSpecFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatPaymSpecFieldsRecId
            from lSKS_EFT_VendorPaymLookup
            where lSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == lSKS_EFT_FileFormatPaymSpecFields.RecId
                && lSKS_EFT_VendorPaymLookup.VendorPaymRecId == _VendPaymRecId;

        if(lSKS_EFT_FileFormatPaymSpecFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select firstonly lSKS_EB_CodeLookupValues where lSKS_EB_CodeLookupValues.RecId == lSKS_EFT_VendorPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_CodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_EFT_VendorPaymLookup.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBTBValueFromCode</Name>
				<Source><![CDATA[
    static server str getBTBValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec, RefRecId _BankPaymRecId)
    {
        SKS_EFT_FileFormatPaymSpecFields lSKS_EFT_FileFormatPaymSpecFields;
        SKS_EB_CodeLookupValues lSKS_EB_CodeLookupValues;
        SKS_EFT_BankPaymLookup lSKS_EFT_BankPaymLookup;
        str ret = '';
    
        select firstonly lSKS_EFT_FileFormatPaymSpecFields
            where lSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == _SKS_EFT_FileFormatPaymSpec.RecId &&
                  lSKS_EFT_FileFormatPaymSpecFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatPaymSpecFieldsRecId
                from lSKS_EFT_BankPaymLookup
                    where lSKS_EFT_BankPaymLookup.FileFormatPaymSpecFieldsRecId == lSKS_EFT_FileFormatPaymSpecFields.RecId
                        && lSKS_EFT_BankPaymLookup.BankPaymRecId == _BankPaymRecId;

        if(lSKS_EFT_FileFormatPaymSpecFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select firstonly lSKS_EB_CodeLookupValues where lSKS_EB_CodeLookupValues.RecId == lSKS_EFT_BankPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_CodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_EFT_BankPaymLookup.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCNPValueFromCode</Name>
				<Source><![CDATA[
    static server str getCNPValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec, RefRecId _VendPaymRecId)
    {
        SKS_EFT_FileFormatPaymSpecFields lSKS_EFT_FileFormatPaymSpecFields;
        SKS_EB_CodeLookupValues lSKS_EB_CodeLookupValues;
        SKS_EFT_CustReimbursementPaymLookup lSKS_EFT_CustReimbursementPaymLookup;
        str ret = '';
    
        select firstonly lSKS_EFT_FileFormatPaymSpecFields
            where lSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == _SKS_EFT_FileFormatPaymSpec.RecId &&
                    lSKS_EFT_FileFormatPaymSpecFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatPaymSpecFieldsRecId
                from lSKS_EFT_CustReimbursementPaymLookup
                    where lSKS_EFT_CustReimbursementPaymLookup.FileFormatPaymSpecFieldsRecId == lSKS_EFT_FileFormatPaymSpecFields.RecId
                         && lSKS_EFT_CustReimbursementPaymLookup.CustReimbPaymRecId == _VendPaymRecId;

        if(lSKS_EFT_FileFormatPaymSpecFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select firstonly lSKS_EB_CodeLookupValues where lSKS_EB_CodeLookupValues.RecId == lSKS_EFT_CustReimbursementPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_CodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_EFT_CustReimbursementPaymLookup.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDDValueFromCode</Name>
				<Source><![CDATA[
    static server str getDDValueFromCode(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec, RefRecId _CustPaymRecId)
    {
        SKS_EFT_FileFormatPaymSpecFields lSKS_EFT_FileFormatPaymSpecFields;
        SKS_EB_CodeLookupValues lSKS_EB_CodeLookupValues;
        SKS_EFT_CustomerPaymLookup lSKS_EFT_CustomerPaymLookup;
        str ret = '';
    
        select firstonly lSKS_EFT_FileFormatPaymSpecFields
            where lSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == _SKS_EFT_FileFormatPaymSpec.RecId &&
                    lSKS_EFT_FileFormatPaymSpecFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatPaymSpecFieldsRecId
                from lSKS_EFT_CustomerPaymLookup
                    where lSKS_EFT_CustomerPaymLookup.FileFormatPaymSpecFieldsRecId == lSKS_EFT_FileFormatPaymSpecFields.RecId
                         && lSKS_EFT_CustomerPaymLookup.CustPaymRecId == _CustPaymRecId;

        if(lSKS_EFT_FileFormatPaymSpecFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select firstonly lSKS_EB_CodeLookupValues where lSKS_EB_CodeLookupValues.RecId == lSKS_EFT_CustomerPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_CodeLookupValues.CodeValue;
        }
        else
        {
            ret = lSKS_EFT_CustomerPaymLookup.FixedValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>xmlAppendChildNodeText</Name>
				<Source><![CDATA[
    public static XmlElement xmlAppendChildNodeText(XmlDocument _xmlDoc, XmlElement _parentNode, str _nodeName, str _nodeText, int _length = 0, boolean _required = true, str _prefix = '', str _namespaceURI = '')
    {
        XmlElement currentElement;
    
        if (_nodeText || _required)
        {
            if(_prefix && _namespaceURI)
            {
                currentElement = _parentNode.appendChild(_xmlDoc.createElement3(_prefix, _nodeName, _namespaceURI));
            }
            else
            {
                currentElement = _parentNode.appendChild(_xmlDoc.createElement(_nodeName));
            }
    
            if(_length == 0)
            {
                currentElement.appendChild(_xmlDoc.createTextNode(_nodeText));
            }
            else // if length is specified, reduce the string to the correct length
            {
                currentElement.appendChild(_xmlDoc.createTextNode(subStr(_nodeText,1,_length)));
            }
        }
    
        return currentElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>xmlsetAttributeText</Name>
				<Source><![CDATA[
    public static XmlElement xmlsetAttributeText(XmlElement _node, str _attributeName, str _nodeText, int _length = 0, boolean _required = true)
    {
        if (_nodeText || _required)
        {
            if(_length == 0)
            {
                _node.setAttribute(_attributeName, _nodeText);
            }
            else // if length is specified, reduce the string to the correct length
            {
                _node.setAttribute(_attributeName, subStr(_nodeText,1,_length));
            }
        }
    
        return _node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodelookupvalue</Name>
				<Source><![CDATA[
    static server str getCodelookupvalue(SKS_EB_CodeId _FormatFieldID, RefRecId _fileDetailRecId, SKS_EFT_CodeLookupType _SKS_EFT_CodeLookupType = SKS_EFT_CodeLookupType::CodeLookup)
    {
        SKS_EFT_FileDetail_Extra sKS_EFT_FileDetail_Extra;

        if(_FormatFieldID)
        {
            select firstonly * from sKS_EFT_FileDetail_Extra  order by RecId desc
                where sKS_EFT_FileDetail_Extra.FieldName == _FormatFieldID
                && sKS_EFT_FileDetail_Extra.RefRecId == _fileDetailRecId
                && sKS_EFT_FileDetail_Extra.CodeLookupType == _SKS_EFT_CodeLookupType;

            return sKS_EFT_FileDetail_Extra.Value;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress_delegate</Name>
				<Source><![CDATA[
    delegate void getRemittanceAddress_delegate(SKS_EFT_FileDetail _sKS_EFT_FileDetail, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>