<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadParse</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SKS_BR_ReadParse
{
    container contFile;
    str currentRecord;
    int gLineNumber;
    int gStartLineOfRecord;
    SKS_BR_FileFormat gSKS_BR_FileFormat;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankRecordToContainer</Name>
				<Source><![CDATA[
    protected container bankRecordToContainer()
    {
        container returnValue;
        str strRecordType;
        ;
    
        strRecordType = this.strGetField();
    
        switch(strRecordType)
        {
            case '01':
                returnValue = this.conConvertRecordType01();
                break;
            case '02':
                returnValue = this.conConvertRecordType02();
                break;
            case '03':
                returnValue = this.conConvertRecordType03();
                break;
            case '16':
                returnValue = this.conConvertRecordType16();
                returnValue = this.convertTextToFields(returnValue);
                break;
            case '49':
                returnValue = this.conConvertRecordType49();
                break;
            case '98':
                returnValue = this.conConvertRecordType98();
                break;
            case '99':
                returnValue = this.conConvertRecordType99();
                break;
            default:
                break;
        }
    
        return returnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>boolNextRecordIsContinuation</Name>
				<Source><![CDATA[
    protected boolean boolNextRecordIsContinuation()
    {
        str nextLine;
        str strRecordType;
        boolean returnValue;
        ;
    
    
        while ((conLen(contFile) > 0) && (strLen(strLRTrim(conPeek(contFile, 1))) ==  0))
        {
            conDel(contFile, 1,1);
        }
    
        nextLine = conPeek(contFile, 1);
    
        strRecordType = this.strGetField(nextLine);
    
        if (strRecordType == '88')
        {
            returnValue = true;
        }
        else
        {
            returnValue = false;
        }
    
        return returnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>boolStringIsEmpty</Name>
				<Source><![CDATA[
    protected boolean boolStringIsEmpty(str _string)
    {
        boolean returnValue = false;
        ;
    
        if (strLen(strLRTrim(strRem(strRem(strRem(_string, '\r'), '\t'), '\n'))) == 0)
        {
            returnValue = true;
        }
    
        return returnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType01</Name>
				<Source><![CDATA[
    protected container conConvertRecordType01()
    {
        //This Record Must Return a Container where each element in the container is a field in the type 01 record
        container conReturnValue;
        ;
    
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType02</Name>
				<Source><![CDATA[
    protected container conConvertRecordType02()
    {
        //This Record Must Return a Container where each element in the container is a field in the type 02 record
        container conReturnValue;
        ;
    
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType03</Name>
				<Source><![CDATA[
    protected container conConvertRecordType03()
    {
        //This Record Must Return a Container where each element in the container is a field in the type 03 record
        container conReturnValue;
        ;
    
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType16</Name>
				<Source><![CDATA[
    protected container conConvertRecordType16()
    {
        //This Record Must Return a Container where each element in the container is a field in the type 16 record
        container conReturnValue;
        ;
    
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType49</Name>
				<Source><![CDATA[
    protected container conConvertRecordType49()
    {
        //This Record Must Return a Container where each element in the container is a field in the type 49 record
        container conReturnValue;
        ;
    
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType98</Name>
				<Source><![CDATA[
    protected container conConvertRecordType98()
    {
        //This Record Must Return a Container where each element in the container is a field in the type 98 record
        container conReturnValue;
        ;
    
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conConvertRecordType99</Name>
				<Source><![CDATA[
    protected container conConvertRecordType99()
    {
        //This Record Must Return a Container where each element in the container is a field in the type 99 record
        container conReturnValue;
        ;
    
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>conFundTypeRead</Name>
				<Source><![CDATA[
    protected container conFundTypeRead(str _fundType, container _returnValue)
    {
    
        int counter = 0;
        int recordCount = 0;
        ;
    
        if(_fundType == 'D')
        {
            //GET THE NUMBER OF Distribution/amount pairs
            _returnValue += this.strGetField();//get the field for the record
            recordCount = str2int(this.strGetField());//in D Fund Types, this field determines how many fields there are. Get it agian.
            this.strRemoveCurrentField();
            for(counter = 1; counter <= recordCount; counter++ )
            {
                //GEt the current availability in days
                _returnValue += this.strGetField();
                this.strRemoveCurrentField();
    
                //Get the current amount
                _returnValue += this.strGetField();
                this.strRemoveCurrentField();
            }
        }
        else if (_fundType == 'S')
        {
            //get the immediate availability amount
            _returnValue += this.strGetField();
            this.strRemoveCurrentField();
    
            //get the one-day availability amount
            _returnValue += this.strGetField();
            this.strRemoveCurrentField();
    
            //get the more then one day availability amount
            _returnValue += this.strGetField();
            this.strRemoveCurrentField();
        }
        else if (_fundType == 'V')
        {
            //get the Value Date
            _returnValue += this.strGetField();
            this.strRemoveCurrentField();
    
            //get the Value Time
            _returnValue +=this.strGetField();
            this.strRemoveCurrentField();
        }
    
        return _returnValue;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>conTypeCodeRead</Name>
				<Source><![CDATA[
    protected container conTypeCodeRead()
    {
        //Type code field groups can reccur
        container conReturnValue;
        ;
    
        while(!this.boolStringIsEmpty(currentRecord))
        {
            //READ TYPE CODE
            conReturnValue += this.strGetField();
            this.strRemoveCurrentField();
    
            //READ AMOUNT
            conReturnValue += strRem(this.strGetField(), '+');
            this.strRemoveCurrentField();
    
            //READ ITEM COUNT
            conReturnValue += this.strGetField();
            this.strRemoveCurrentField();
    
    
            //READ THE FUNDS TYPE
            conReturnValue += this.strGetField();
            this.strRemoveCurrentField();
            //Though unlikely, the BIA2 spec says
            //that you can have a variable number of fields
            //following, and depending on the funds type.
            conReturnValue = this.conFundTypeRead(conPeek(conReturnValue,conLen(conReturnValue)), conReturnValue);
    
        }
        return conReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertTextToFields</Name>
				<Source><![CDATA[
    protected container convertTextToFields(container _containerStandardBAI2)
    {
        //THIS METHOD IS WRITTEN TO COMPLY WITH THE ROYAL BANK OF CANADA'S VARIATION ON THE BAI2 FILE
        //
        //IN THE FOLLOWING SAMPLES, YOU WILL SEE THERE IS AN EXTRA FIELD FOLLOWING THE TEXT FIELD.
        //PER SPEC SUPPLIED, THIS FIELD IS A SUPPLIMENTAL TEXT FIELD, BUT IS ALWAYS BLANK.
        //SAMPLE
        //16,165,1500000,V,110513,0230,DD1620,,DEALER PAYMENTS,      /
        //
        //
        //16,115,100000000,v,110513,0230/
        //88,AX13612,B096132,AMALGAMATED CORP. LOCKBOX
        //88,DEPOSIT-MISC. RECIEVABLES,     /
        //
        //
        //*************************************************************
    
    
        str strTemp = '';
        container containerStandardBAI2;
        ;
        containerStandardBAI2 = _containerStandardBAI2;
        currentRecord = strLRTrim(conPeek(containerStandardBAI2, conLen(containerStandardBAI2)));
        if(strContains(currentRecord, ',') && strContains(currentRecord, '/'))
        {
            if(subStr(currentRecord, strLen(currentRecord), 1) == '/')
            {
    
                strTemp = strRTrim(subStr(currentRecord,1,strLen(currentRecord) - 1));
                if(strEndsWith(strTemp,','))
                {
                    strTemp = strRTrim(subStr(strTemp, 1, strLen(strTemp) - 1));
    
                    containerStandardBAI2 = conPoke(containerStandardBAI2, conLen(containerStandardBAI2), strTemp);
    
                }
    
            }
    
        }
        return containerStandardBAI2;
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldDelimitedBy</Name>
				<Source><![CDATA[
    protected str getFieldDelimitedBy(str _EndDelimiter)
    {
        str locRtnval = '';
        int locIndexofEndDelimiter;
    
        locIndexofEndDelimiter = SKS_PP_StringFormats::strIndexOf(currentRecord, _EndDelimiter,1);
        locRtnval = SKS_PP_StringFormats::strSub(currentRecord, 1, locIndexofEndDelimiter - 1);
    
    
        return locRtnval;
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartingLineOfCurrentRecord</Name>
				<Source><![CDATA[
    public int getStartingLineOfCurrentRecord()
    {
        return gStartLineOfRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listRead</Name>
				<Source><![CDATA[
    public List listRead()
    {
        List listReturnVal;
    
        return listReturnVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(str _fileName, str _IOType, SKS_PP_CommBRPreImportScriptPath _preScript, str _preParams, SKS_PP_CommBRPostImportScriptPath _postScript,str _postParams, SKS_BF_BankIntType _gSKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal, SKS_BR_FileFormat _SKS_BR_FileFormat = null)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_gSKS_BF_BankIntType);
        locSKS_EB_FileHub.parmEncoding(65001);
        int nextNewLine, lastNewLine;
        str strRecordContents;
        TextBuffer txtBufFile;

        gSKS_BR_FileFormat = _SKS_BR_FileFormat;
        gLineNumber = 0;
        gStartLineOfRecord = 0;
        txtBufFile = new TextBuffer();
        nextNewLine = 0;
        lastNewLine = 0;

        locSKS_EB_FileHub.runFileLoad(_fileName,_preScript, _preParams,_postScript,_postParams);
        txtBufFile.setText(locSKS_EB_FileHub.fileBody());
        txtBufFile.replace('\r\n', '\n');
        txtBufFile.replace('\n\r', '\n');
        txtBufFile.replace('\r', '\n');
        txtBufFile.removeChar('\t');
    
        if(txtBufFile.size() > 0)
        {
            while (txtBufFile.find('\n', lastNewLine + 1))//get everything up to the end of the last new line character
            {
                //locate the next occurance of the '\n'
                nextNewLine = txtBufFile.matchPos();
                //The (lastNewLine + 1)is because it must move one past the last new line
                // so you don't end up with the \n in your container
                strRecordContents = strRTrim(txtBufFile.subStr(lastNewLine + 1, nextNewLine - (lastNewLine + 1)));
    
                if(!this.boolStringIsEmpty(strRecordContents))
                {
                    contFile += strRecordContents;
                }
                lastNewLine = nextNewLine;
            }//END while (txtBufFile.find('\n', ...
            if(lastNewLine < txtBufFile.size())
            {
                strRecordContents = strRTrim(txtBufFile.subStr(lastNewLine + 1, txtBufFile.size() - lastnewLine));
                //The (lastNewLine + 1)is because it must move one past the last new line
                // so you don't end up with the \n in your container
                if(!this.boolStringIsEmpty(strRecordContents))
                {
                    contFile += strRecordContents;
                }
            }
        }//END if(txtBufFile.size() > 0){
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read</Name>
				<Source><![CDATA[
    public container Read()
    {
        container returnValue;
        boolean locAddSpace()
        {
            boolean rtnval;
            rtnval = gSKS_BR_FileFormat.BR_BAI2Options_AddSpaceOnCommentWrap;
            rtnval = rtnval && gSKS_BR_FileFormat.FileType == SKS_BR_FileType::BAI2;
            rtnval = rtnval && !strEndsWith(currentRecord, ' ');
            rtnval = rtnval && !strStartsWith(subStr(conPeek(contFile, 1),4, strLen(conPeek(contFile, 1)) - 3), ' ');
            rtnval = rtnval && strStartsWith(currentRecord, '16');

            return rtnval;
        }
        boolean locRemoveTransLineDelimitingSlash()
        {
            boolean rtnval;
            rtnval = gSKS_BR_FileFormat.BR_BAI2Options_IfNoteLineDelimitedBySlshRmve;
            rtnval = rtnval && gSKS_BR_FileFormat.FileType == SKS_BR_FileType::BAI2;
            rtnval = rtnval && strEndsWith(currentRecord, '/');
            rtnval = rtnval && strStartsWith(currentRecord, '16');
            return rtnval;
        }
        currentRecord = conPeek(contFile,1);//PRIMING READ
        gLineNumber++;
        gStartLineOfRecord = gLineNumber;
        contFile = conDel(contFile, 1,1);
        while(this.boolNextRecordIsContinuation())
        {
            
            gLineNumber++;
            currentRecord += (locAddSpace() ? ' ' : '') + subStr(conPeek(contFile, 1),4, strLen(conPeek(contFile, 1)) - 3);
            if(locRemoveTransLineDelimitingSlash())
            {
                currentRecord = SKS_PP_StringFormats::strSub(currentRecord, 1, strLen(currentRecord) - 1);
            }
            contFile = conDel(contFile, 1, 1);
    
        }
        currentRecord = this.strRemoveCarriageReturns(currentRecord);
        returnValue = this.bankRecordToContainer();
        return returnValue;
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFieldDelimitedBy</Name>
				<Source><![CDATA[
    protected void removeFieldDelimitedBy(str _endDelimiter)
    {
        int locIndexofEndDelimiter;
    
        locIndexofEndDelimiter = SKS_PP_StringFormats::strIndexOf(CurrentRecord, '_endDelimiter', 1);

        if((locIndexofEndDelimiter > 0) && (strLen(currentRecord) > locIndexofEndDelimiter))
        {
            currentRecord = SKS_PP_StringFormats::strSub(CurrentRecord, locIndexofEndDelimiter + strLen(_endDelimiter) + 1);
        }
        else if(strLen(currentRecord) == locIndexofEndDelimiter)
        {
            currentRecord = '';
        }
    
        //No action taken if invalid delimiter supplied
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    public IO_Status status()
    {
        IO_Status returnValue;
        if (conLen(contFile) > 0)
        {
            returnValue = IO_Status::Ok;
        }
        else
        {
            returnValue = IO_Status::FileTooShort;
        }

        return returnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strGetField</Name>
				<Source><![CDATA[
    protected str strGetField(str _currentLine = '')
    {
        str currentline;
        int commaDelimiterIndex, slashDelimiterIndex;
        str returnValue;
    
    
        ;
    
        currentline = _currentLine;
        if (this.boolStringIsEmpty(currentLine))
        {
            currentLine = currentRecord;
        }
    
    
        commaDelimiterIndex = SKS_PP_StringFormats::strIndexOf(currentLine, ',');
        slashDelimiterIndex = SKS_PP_StringFormats::strIndexOf(currentLine, '/');
    
    
        if (commaDelimiterIndex > 0) //comma delimiter found
        {
            if (slashDelimiterIndex > 0) //slash delimiter found
            {
                if (commaDelimiterIndex < slashDelimiterIndex)//comma comes first
                {
                    returnValue = subStr(currentLine,1,commaDelimiterIndex - 1);
                }
                else//the slash is the first delimiter
                {
                    returnValue = subStr(currentLine,1,slashDelimiterIndex - 1);
                }
            }
            else//no slash was found, so use the comma delimiter
            {
                returnValue = subStr(currentLine,1,commaDelimiterIndex - 1);
            }
        }
        else//no comma was found so check for a slash
        {
            if(slashDelimiterIndex > 0) //slash delimiter was found
            {
                returnValue = subStr(currentLine,1,slashDelimiterIndex - 1);
            }
            else//Neither a comma, nor a slash were found
            {
                returnValue = currentLine;
            }
        }
    
        return strLRTrim(returnValue);
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>strRemoveCarriageReturns</Name>
				<Source><![CDATA[
    protected str strRemoveCarriageReturns(str _strRecord)
    {
        str locRecord = _strRecord;
    
        locRecord = strReplace(locRecord, '\r\n', '埬때Э̄Kč⚳巏');
        locRecord = strReplace(locRecord, '\r', '埬때Э̄Kč⚳巏');
        locRecord = strReplace(locRecord, '\n', '埬때Э̄Kč⚳巏');
        while(strContains(locRecord, '埬때Э̄Kč⚳巏'))
        {
            gLineNumber++;
            locRecord  = SKS_PP_StringFormats::replace(locRecord, '埬때Э̄Kč⚳巏', '');
        }
        return locRecord;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>strRemoveCurrentField</Name>
				<Source><![CDATA[
    protected void strRemoveCurrentField()
    {
        //int delimiterIndex;
        //str returnValue;
    
    
    
    
    
    
        int commaDelimiterIndex, slashDelimiterIndex, intDelimiter;
        ;
    
    
        commaDelimiterIndex = SKS_PP_StringFormats::strIndexOf(currentRecord, ',');
        slashDelimiterIndex = SKS_PP_StringFormats::strIndexOf(currentRecord, '/');
    
    
        if (commaDelimiterIndex > 0) //comma delimiter found
        {
            if (slashDelimiterIndex > 0) //slash delimiter found
            {
                if (commaDelimiterIndex < slashDelimiterIndex)//comma comes first
                {
                    intDelimiter = commaDelimiterIndex;
                }
                else//the slash is the first delimiter
                {
                    intDelimiter = slashDelimiterIndex;
                }
            }
            else//no slash was found, so use the comma delimiter
            {
                intDelimiter = commaDelimiterIndex;
            }
        }
        else//no comma was found so check for a slash
        {
            if(slashDelimiterIndex > 0) //slash delimiter was found
            {
                intDelimiter = slashDelimiterIndex;
            }
            else//Neither a comma, nor a slash were found
            {
                intDelimiter = 0;
            }
        }
    
        if (intDelimiter > 0)//something was found, use it to define a field
        {
            currentRecord = subStr(currentRecord, intDelimiter + 1, strLen(currentRecord) - intDelimiter);
        }
        else//no delimiter found, return it all
        {
            currentRecord =  '';
        }
    
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>