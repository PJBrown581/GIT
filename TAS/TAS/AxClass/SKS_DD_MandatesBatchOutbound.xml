<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_MandatesBatchOutbound</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_MandatesBatchOutbound extends RunBaseBatch
{
    #DEFINE.CurrentVersion(1)
    #define.DateFormat('yyyyMMdd-hhmm')
    #define.FileExtestion('.txt')
    SKS_EB_FileHub          mFileHub;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the batch task can be seen in the batch journal.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the values in the <c>Container</c> parameter.
    /// </summary>
    /// <param name="_packedClass">
    /// A <c>container</c> with a packed version of the class.
    /// </param>
    /// <returns>
    /// true if the class was unpacked using the container; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
    
        [version] = _packedClass;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatch</Name>
				<Source><![CDATA[
    public static void createBatch( Object _element = null)
    {
        Dialog              dialog;
        DialogField         dialogField;
        Batch               Batch;
        BatchHeader         batHeader;
        RunBaseBatch        rbbTask;
        BatchInfo           batInfo;
        SysRecurrenceData   recurData;
        Args args = new Args();
        FormRun formrun;
        ;
    
        // Create Default Bank Account Information dialog
        dialog = new Dialog("@SYS114518");
        dialogField = dialog.addField(extendedTypeStr(BatchCaption), "@SYS114518");
    
        if (dialog.run())
        {
            select firstOnly Batch where Batch.Caption == dialogField.value();
            if(!Batch)
            {
                ttsBegin;
                rbbTask = new SKS_DD_MandateAuto();
                batInfo = rbbTask.batchInfo();
                batInfo.parmCaption(dialogField.value());
                batInfo.parmGroupId(''); // The "Empty batch group".
    
                // Set recurrance
                recurData = SysRecurrence::defaultRecurrence();
                // start in 30 seconds 28800
                recurData = SKS_EB_Batch::setRecurrenceStartDateTimeAdjusted(recurData, DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 72000));
                // recur every 1 minute
                recurData = SysRecurrence::setRecurrenceUnit(recurData, SysRecurrenceUnit::Day,1);

                recurData = conPoke(recurData,8,[2,1]);
                batHeader = BatchHeader::construct();
                batHeader.addTask(rbbTask);
                batHeader.parmRecurrenceData(recurData);
                batHeader.save();
                Batch = batInfo.parmBatch();
    
                info(strFmt("@SKS2466", dialogField.value()));
    
                ttsCommit;
    
                info("@SKS2464");
    
                args.parmObject( formrun);
                args.caller(_element);
                formrun = new MenuFunction( menuitemdisplaystr( BatchJob ), MenuItemType::Display).create(args);
                formrun.run();
            }
            else
            {
                error(strFmt("@SKS2463", dialogfield.value()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static client server ClassDescription description()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecurrenceStartDateTimeAdjusted</Name>
				<Source><![CDATA[
    // Setup the default recurrence
    public static SysRecurrenceData setRecurrenceStartDateTimeAdjusted(SysRecurrenceData _sysRecurrenceData, UTCDateTime _dateTime)
    {
        date startDate;
        timeOfDay startTime;
        TimeOfDay tmpStartTime;
        Timezone timezone;
        SysRecurrenceData sysRecurrenceData;
        sysRecurrenceData = _sysRecurrenceData;
        timezone = conpeek(sysRecurrenceData, 9);
        tmpStartTime = DateTimeUtil::time(_dateTime);
    
        startDate = DateTimeUtil::date(_dateTime);
        startTime = DateTimeUtil::time(_dateTime);
        sysRecurrenceData = SysRecurrence::setRecurrenceStartDate(sysRecurrenceData, startDate);
        return SysRecurrence::setRecurrenceTime(sysRecurrenceData, startTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileCreate</Name>
				<Source><![CDATA[
    protected void fileCreate(str _fileName, str _filepath = '')
    {
        SKS_EB_FileStorage  sks_EB_FileStorage;

        //BankFabric
        select firstonly sks_EB_FileStorage;
        if (sks_EB_FileStorage.StorageOption_MandateAutomation == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
        {
            mFileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType::BankFabric);
        }
        else
        {
            mFileHub = SKS_EB_FileHub::construct();
        }
        mFileHub.parmThrowErrorIfException(false);
        mFileHub.parmEncoding(0);
        mFileHub.setFileName(_fileName,'','','','',_filepath,_fileName,'','');      //Bankfabric
        //mFileHub.setFileName(_fileName);

        if (sks_EB_FileStorage.StorageOption_MandateAutomation == SKS_EB_BankIntegOptWithNoLicense::FileHubLocalEnumValue)
        {
            mFileHub.runFileDelete();
        }
        //if(mFileHub.errorHasException())
        //{
        //    mErrorText = mFileHub.errorException();
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
        {
            mFileHub.runAppendLine(_result);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileClose</Name>
				<Source><![CDATA[
    protected void fileClose()
    {
        // Flushs all in memory lines to file
        // Until this is called, the file will not exist.
        mFileHub.runAppendLineFlush();

        //if(mFileHub.errorHasException())
        //{
        //    mErrorText = mFileHub.errorException();
        //}
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutboundClassQueryVal</Name>
				<Source><![CDATA[
	public static container getOutboundClassQueryVal()
    {
        container retCon;
        DictClass dictClass;

        List listSpecifications;
        ListEnumerator listEnumerator;

        ClassId sksDDMandatesBatchOutbound = classNum(SKS_DD_MandatesBatchOutbound);

        listSpecifications = new DictClass(sksDDMandatesBatchOutbound).extendedBy();

        listEnumerator = listSpecifications.getEnumerator();

        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                retCon +=  queryValue(dictClass.id());
            }
        }

        return retCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOutboundClass</Name>
				<Source><![CDATA[
    private void lookupOutboundClass(FormStringControl _control)
    {
        #ResAppl
        Object  formRun;
        container names;
        DictClass dictClass;
        List listSpecifications;
        ListEnumerator listEnumerator;
        ClassId sksDDMandatesBatchOutbound = classNum(SKS_DD_MandatesBatchOutbound);

        formRun = classFactory.createSysLookupPicklist();
        formRun.init();

        listSpecifications = new DictClass(sksDDMandatesBatchOutbound).extendedBy();

        listEnumerator = listSpecifications.getEnumerator();
        while (listEnumerator.moveNext())
        {
            dictClass = new DictClass(listEnumerator.current());

            if (dictClass && !dictClass.isAbstract())
            {
                names += dictClass.name();
            }
        }

        formRun.choices(names, #ImageTable);
        formRun.caption("@SYS60851");

        _control.performFormLookup(formRun);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>