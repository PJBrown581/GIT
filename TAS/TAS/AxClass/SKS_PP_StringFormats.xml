<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_StringFormats</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains helper methods for string formats.
/// </summary>
Public class SKS_PP_StringFormats
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>str2Stream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts string to system stream object.
    /// </summary>
    /// <param name = "_str">String value</param>
    /// <returns>Returns system stream object</returns>
    public System.IO.Stream str2Stream (str _str)
    {
        System.IO.Stream locStream = new System.IO.MemoryStream();
        System.IO.StreamWriter locStreamWriter= new System.IO.StreamWriter(locStream);
        locStreamWriter.Write(_str);
        locStreamWriter.Flush();
        locStream.Position = 0;
        return locStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Date_String</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string formatted date according to format parameters.
    /// Day is shown by 1, month by 2, and year by 3.
    /// For example:
    ///     123: gives a sequence of: day, month, year.
    ///     312: gives a sequence of: year, day, month.
    ///     213: gives a sequence of: month, day, year.
    /// </summary>
    /// <param name = "X">Date value</param>
    /// <param name = "DateFmt">Components of the date (day, month, year)</param>
    /// <param name = "MonthFmt">
    ///     The format of the month.
    ///     1: for a single or double digit month  Ex: 1, 2, ..., 12
    ///     2: Always displays 2 digit month. Ex:  01, 02, ..., 12
    /// </param>
    /// <param name = "DayFmt">
    ///     The format of the day.
    ///     1: for a single or double digit Day. Ex: 1, 2, ..., 31
    ///     2: Always displays 2 digit Day. Ex:  01, 02, ..., 31
    /// </param>
    /// <param name = "YearFmt">
    ///     The format of the year.
    ///     2: for a 2 digit Year. Ex: 09
    ///     4: Always displays 4 digit Year. Ex:  2009
    /// </param>
    /// <param name = "Seperator">
    /// The separator to use between the first two components of the date and year
    /// Seperator:  Possible values:  EX:  01-12-2009
    ///     1 =   "" (Nothing, because the PP version removes the spaces that 1 wouldnormally place in the date.
    ///     2 =   "." (period)
    ///     3 =  "-" (hyphen)
    ///     4 =  "/" (forward slash)
    /// </param>
    /// <returns>Returns a string formatted date</returns>
    Public str Date_String( Date X, int DateFmt, int MonthFmt, int DayFmt, int YearFmt, int Seperator)
    {
        str s;
        ;

        s = strRem(Date2str(X, DateFmt, DayFmt, Seperator, MonthFmt, Seperator, YearFmt, DateFlags::None), ' ');
        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strLRtrimAllWhitespace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes leading and trailing spaces, carriage returns, tabs, line feeds, form feeds, new line, and non-breaking spaces
    /// </summary>
    /// <param name = "_StringToTrim">String to trim</param>
    /// <returns>string without leading and trailing whitespaces</returns>
    public static System.String strLRtrimAllWhitespace(System.String _StringToTrim)
    {
        return System.Text.RegularExpressions.Regex::Replace(_StringToTrim,@'^[\b\f\n\r\s\t]+|[\b\f\n\r\s\t]+$','');
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill_String</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build a repeating string of length ct.
    /// </summary>
    /// <param name = "ct">CT value</param>
    /// <param name = "OriginalString">Original string</param>
    /// <param name = "Filler">Filler value</param>
    /// <param name = "Side">Side value</param>
    /// <param name = "SignificantSide">Significant side</param>
    /// <returns>Returns string value</returns>
    Public str fill_String( int ct, Str OriginalString, Str Filler, Str Side, Str SignificantSide = 'L' )
    {
        int ix;
        str s = '';
        int Spaces;
        ;

        Spaces = ct - StrLen(OriginalString);

        for( ix = 0; ix < Spaces; ix++ )
        {
            s += Filler;
        }
        If (Side == 'L')
        {
            s = s + OriginalString;
        }
        else
        {
           s = OriginalString + s;
        }

        // If length is longer than ct, trim it
        if (strLen(s) > ct)
        {
            if (SignificantSide == 'L')//determine which end to retain
                s = subStr(s, 1, ct);
            else
                s = subStr(s,StrLen(s), -ct);
        }
        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Format_Money</Name>
				<Source><![CDATA[
    Public str Format_Money(real CuryAmt, int ct)
    {
        Str s = num2Str(curyAmt, 1, 2, 1, 0);
        ;

        s = strRem(s, '.');
        s = This.fill_String(ct, s, '0', 'L');

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CurrStr2CurrNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// the real number cannot start with a decimal place (".")
    /// if it does, AX will convert it to a zero amount.
    /// //Example num2str('.25') becomes 0.00
    /// the solution is to zero pad the amount, this garuantees there is
    /// a leading number.
    /// </summary>
    /// <param name="_strAmount">
    /// the string to be converted to a number
    /// </param>
    /// <returns>
    /// the real of the str that was passed in
    /// </returns>
    public static real CurrStr2CurrNum(str _strAmount)
    {
        str locAmount;
        real rtnval;

        locAmount = System.Text.RegularExpressions.Regex::Replace(_strAmount, '[^0-9.,+()-]','');
        locAmount = SKS_PP_StringFormats::strLTrimZeroes(locAmount);

        if (strScan(locAmount, '-', 1, 1))
        {
            rtnval = str2num('-0' + strDel(locAmount, 1, 1));
        }
        else if (strStartsWith(locAmount, '(') && strEndsWith(locAmount, ')'))
        {
            locAmount = strRem(strRem(locAmount, '('), ')');
            rtnval = str2Num('-0' + locAmount);
        }
        else if (strScan(locAmount, '-', strLen(locAmount), 1))
        {
            rtnval = -1 * str2Num(strDel(locAmount, strLen(locAmount), 1));
        }
        else if (strScan(locAmount, '+', 1, 1))
        {
            rtnval = str2num('0' + strDel(locAmount, 1, 1));
        }
        else
        {
            rtnval = str2num('0' + locAmount);
        }

        return rtnval;

    }

]]></Source>
			</Method>
			<Method>
				<Name>isNumeric</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates string value is numeric.
    /// </summary>
    /// <param name = "_string">String value</param>
    /// <returns>Returns true if validation passed</returns>
    public static boolean isNumeric(str _string)
    {
        TextBuffer locTextBuffer = new TextBuffer();
        boolean locRtnval = false;

        locTextBuffer.setText(_string);
        locTextBuffer.regularExpressions(true);
        if (locTextBuffer.find('^[0-9]+$'))
        {
            locRtnval = true;
        }
        return locRtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replace string value.
    /// </summary>
    /// <param name = "s">Source string value</param>
    /// <param name = "findStr">Find string value</param>
    /// <param name = "replStr">Replace string value</param>
    /// <returns>Returns replaced string value</returns>
    static str replace(str s, str findStr, str replStr)
    {
        str string;
        string = s;
        int pos = strscan(string, findStr, 1, strlen(string));

        if (pos > 0)
        {
            string = strdel(string, pos, strlen(findStr));
            string = strins(string, replStr, pos);
        }

        return string;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse_String</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse string value.
    /// </summary>
    /// <param name = "_s">Source string value</param>
    /// <returns>Returns reversed string value</returns>
    public static str reverse_String(str _s)
    {


        str rs = '';
        int i = 0;
        int len = 0;
        ;

        len = strLen(_s);

        for (i = 0; i < len; i++)
        {
            rs += substr(_s,len - i,1);
        }
        return rs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strAssembleURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assembles an URL.
    /// </summary>
    /// <param name = "_URLBase">Base URL value</param>
    /// <param name = "_URLExtension">URL extension value</param>
    /// <returns>Returns an URL</returns>
    public static str strAssembleURL(str _URLBase, str _URLExtension)
    {
        System.Uri locBaseUri, locExtendedUri;
        str locBaseURL, locURLAddtion;
        ;

        locBaseURL = strLRTrim(_URLBase);
        locURLAddtion = strLRTrim(_URLExtension);

        while(strEndsWith(locBaseURL, '/') && strLen(locBaseURL) > 0)
        {
            locBaseURL = strLRTrim(SKS_PP_StringFormats::strSub(locBaseURL, 1, strLen(locBaseURL) - 1));
            if(strLRTrim(locBaseURL) == '/')
                locBaseURL = '';
        }
        while(strStartsWith(locURLAddtion, '/') && strLen(locURLAddtion) > 0)
        {
            locURLAddtion = strLRTrim(SKS_PP_StringFormats::strSub(locURLAddtion, 2));
            if(locURLAddtion == '/')
                locURLAddtion = '';
        }
        while(strEndsWith(locURLAddtion, '/') && strLen(locURLAddtion) > 0)
        {
            locURLAddtion = strLRTrim(SKS_PP_StringFormats::strSub(locURLAddtion, 1, strLen(locURLAddtion) - 1));
            if(strLRTrim(locURLAddtion) == '/')
                locURLAddtion = '';
        }

        locBaseUri = new  System.Uri(locBaseURL + '/');
        locExtendedUri = new System.Uri(locBaseUri, locURLAddtion);
        return locExtendedUri.ToString();

    }

]]></Source>
			</Method>
			<Method>
				<Name>strDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string formatted date according to format parameters.
    /// Day is shown by 1, month by 2, and year by 3.
    /// For example:
    ///        123: gives a sequence of: day, month, year.
    ///        312: gives a sequence of: year, day, month.
    ///        213: gives a sequence of: month, day, year.
    /// </summary>
    /// <param name = "_date">Date value</param>
    /// <param name = "_dateFmt">Components of the date (day, month, year)</param>
    /// <param name = "_monthFmt">The format of the month</param>
    /// <param name = "_dayFmt">The format of the day</param>
    /// <param name = "_yearFmt">The format of the year</param>
    /// <param name = "_seperator">Separator character. The separator to use between the first two components of the date and year</param>
    /// <returns>Returns a string formatted date</returns>
    private static str strDate( Date _date, int _dateFmt, DateMonth _monthFmt, DateDay _dayFmt, DateYear _yearFmt, DateSeparator _seperator = DateSeparator::None)
    {
        str result;
        ;
        result = Date2str(_date, _dateFmt, _dayFmt, _seperator, _monthFmt, _seperator, _yearFmt, DateFlags::None);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strDateMDYYYY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a MDYYYY string formatted date.
    /// </summary>
    /// <param name = "_date">Date value</param>
    /// <param name = "_seperator">Seperator value</param>
    /// <returns>Returns a string formatted date</returns>
    public static str strDateMDYYYY(Date _date, DateSeparator _seperator = DateSeparator::None)
    {
        return SKS_PP_StringFormats::strDate(_date, 213, DateMonth::Digits1or2, DateDay::Digits1or2, DateYear::Digits4, _seperator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strDateMMDDYY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a MMDDYY string formatted date.
    /// </summary>
    /// <param name = "_date">Date value</param>
    /// <param name = "_seperator">Seperator value</param>
    /// <returns>Returns a string formatted date</returns>
    public static str strDateMMDDYY(Date _date, DateSeparator _seperator = DateSeparator::None)
    {
        return SKS_PP_StringFormats::strDate(_date, 213, DateMonth::Digits2, DateDay::Digits2, DateYear::Digits2, _seperator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strDateMMDDYYYY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a MMDDYYYY string formatted date.
    /// </summary>
    /// <param name = "_date">Date value</param>
    /// <param name = "_seperator">Seperator value</param>
    /// <returns>Returns a string formatted date</returns>
    public static str strDateMMDDYYYY(Date _date, DateSeparator _seperator = DateSeparator::None)
    {
        return SKS_PP_StringFormats::strDate(_date, 213, DateMonth::Digits2, DateDay::Digits2, DateYear::Digits4, _seperator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strDateYYMMDD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a YYMMDD string formatted date.
    /// </summary>
    /// <param name = "_date">Date value</param>
    /// <param name = "_seperator">Seperator value</param>
    /// <returns>Returns a string formatted date</returns>
    public static str strDateYYMMDD( Date _date, DateSeparator _seperator = DateSeparator::None)
    {
        return SKS_PP_StringFormats::strDate(_date, 321, DateMonth::Digits2, DateDay::Digits2, DateYear::Digits2, _seperator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strDateYYYYMMDD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a YYYYMMDD string formatted date.
    /// </summary>
    /// <param name = "_date">Date value</param>
    /// <param name = "_seperator">Seperator value</param>
    /// <returns>Returns a string formatted date</returns>
    public static str strDateYYYYMMDD( Date _date, DateSeparator _seperator = DateSeparator::None)
    {
        return SKS_PP_StringFormats::strDate(_date, 321, DateMonth::Digits2, DateDay::Digits2, DateYear::Digits4, _seperator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strFill</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a repeating string of length ct.
    /// </summary>
    /// <param name = "_length">Length</param>
    /// <param name = "_string">String value</param>
    /// <param name = "_fillChar">Fill char</param>
    /// <param name = "_fillSide">Fill side</param>
    /// <returns>Returns a string value</returns>
    public static str strFill(int _length, str _string, SKS_PP_FillCharacter _fillChar, SKS_PP_FillSide _fillSide)
    {
        int counter;
        str paddedString = '';
        int padLength;
        str fillChar;
        ;

        switch (_fillChar)
        {
            case SKS_PP_FillCharacter::Zero:
                fillChar = '0';
            break;
            case SKS_PP_FillCharacter::Space:
                fillChar = ' ';
            break;
            case SKS_PP_FillCharacter::Nine:
                fillChar = '9';
            break;
            default:
            break;
        }

        padLength = _length - strLen(_string);

        for( counter = 0; counter < padLength; counter++ )
        {
            paddedString += fillChar;
        }
        If (_fillSide == SKS_PP_FillSide::Left)
        {
            paddedString = paddedString + _string;
        }
        else
        {
           paddedString = _string + paddedString;
        }

        // If length is longer than ct, trim it
        if (strLen(paddedString) > _length && _length > 0)
        {
            paddedString = subStr(paddedString, 0, _length);
        }
        return paddedString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strIndexOf</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds position of search term inside of string value.
    /// </summary>
    /// <param name = "_strTextToSearch">Text to search</param>
    /// <param name = "_strTextToFind">Text to find</param>
    /// <param name = "_intStartIndex">Start index</param>
    /// <param name = "_intNumberOfCharsToSearch">Number of chars to search</param>
    /// <returns>Returns an index value</returns>
    public static int strIndexOf(str _strTextToSearch, str _strTextToFind, int _intStartIndex = 1, int _intNumberOfCharsToSearch = 0)
    {

        int intNumberOfCharsToSearch;
        ;

        if (_intNumberOfCharsToSearch == 0)
            intNumberOfCharsToSearch = strLen(_strTextToSearch) - _intStartIndex + 1;//+1 because this array isn't zero based
        else
            intNumberOfCharsToSearch = _intNumberOfCharsToSearch;

        return strScan(_strTextToSearch, _strTextToFind, _intStartIndex, intNumberOfCharsToSearch);


    }

]]></Source>
			</Method>
			<Method>
				<Name>strLTrimZeroes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Trim zeroes inside of string value.
    /// </summary>
    /// <param name = "_value">String value</param>
    /// <param name = "_MinLength">Minimum length</param>
    /// <returns>Returns trimmed string value</returns>
    static str strLTrimZeroes(str _value, int _MinLength = 0)
    {
        str ch = '0';
        str curChar;
        int i = 1;
        ;

        while(strLen(_value) - i + 1 > _MinLength)
        {
            curChar = subStr(_value, i, 1);

            if(curChar == ch)
            {
                i++;
            }
            else
            {
                break;
            }
        }

        return strDel(_value, 1, i - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strMoney</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string formatted money.
    /// </summary>
    /// <param name = "_curyAmt">Amount of money</param>
    /// <param name = "_length">Length</param>
    /// <returns>Returns a string formatted money</returns>
    public static str strMoney(real _curyAmt, int _length)
    {
        str amount;
        ;
        amount = num2Str(_curyAmt, 1, 2, 1, 0);
        amount = strRem(amount, '.');
        amount = SKS_PP_StringFormats::strFill(_length, amount, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strRight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts string value starting from right.
    /// </summary>
    /// <param name = "_string">String value</param>
    /// <param name = "_trimLen">Length of trim</param>
    /// <returns>Returns a formatted string</returns>
    static str strRight(str _string, int _trimLen)
    {
        int tempLen;
        ;
        tempLen = strlen(_string) > _trimLen ? _trimLen : strlen(_string);
        return substr(_string,strlen(_string)-tempLen+1,tempLen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strSub</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subtracts string value according to parameters.
    /// </summary>
    /// <param name = "_str">String value</param>
    /// <param name = "_startingIndex">Starting index</param>
    /// <param name = "_numOfChars">Number of characters</param>
    /// <returns>Returns a subtracted string value</returns>
    public static str strSub(str _str, int _startingIndex, int _numOfChars = 0)
    {
        str rtnVal;
        int numChars;
        ;

        if(_numOfChars == 0)
            numChars = strLen(_str) - _startingIndex + 1;
        else
            numChars = _numOfChars;

        rtnVal = subStr(_str, _startingIndex, numChars);


        return rtnVal;

    }

]]></Source>
			</Method>
			<Method>
				<Name>strRemoveCRLF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes CR and LF from a string
    /// </summary>
    /// <param name = "_str">String to remove CRLF</param>
    /// <param name = "_LFSpace">Replace LF with a space</param>
    /// <returns>Modified string</returns>
    public static str strRemoveCRLF(str _str, boolean _LFSpace = true)
    {
        str rtnVal;
        if(_LFSpace)
        {
            rtnVal = strReplace(strRem(_str, '\r'), '\n',' ');
        }
        else
        {
            rtnVal = strRem(strRem(_str, '\r'), '\n');
        }
        return rtnVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>strTimeHHMM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a HHMM string formatted time value.
    /// </summary>
    /// <param name = "_time">Time value</param>
    /// <returns>Returns a formatted time value</returns>
    public static str strTimeHHMM(timeOfDay _time = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))
    {
        str strTime;
        ;
        strTime = time2Str(_time, TimeSeparator::Colon, TimeFormat::Hour24);

        return substr(strTime,1,2) + substr(strTime,4,2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strTimeHHMMSS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a HHMMSS string formatted time value.
    /// </summary>
    /// <param name = "_time">Time value</param>
    /// <returns>Returns a formatted time value</returns>
    public static str strTimeHHMMSS(timeOfDay _time = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()))
    {
        str strTime;
        ;
        strTime = time2Str(_time, TimeSeparator::Colon, TimeFormat::Hour24);

        return substr(strTime,1,2) + substr(strTime,4,2) + substr(strTime,7,2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ObjectToString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts object to string.
    /// </summary>
    /// <param name = "_obj">Object</param>
    /// <returns>Returns a string value</returns>
    public static System.String ObjectToString(System.Object _obj)
    {
        System.String rtnval;
        using (System.IO.MemoryStream ms = new System.IO.MemoryStream())
        {
           
            new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter().Serialize(ms, _obj);
            rtnval = System.Convert::ToBase64String(ms.ToArray());
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>StringToObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts string to object.
    /// </summary>
    /// <param name = "_base64String">Base 64 string value</param>
    /// <returns>Returns an object</returns>
    public static System.Object StringToObject(System.String _base64String)
    {
        System.Byte[] bytes = System.Convert::FromBase64String(_base64String);
        using (System.IO.MemoryStream ms = new System.IO.MemoryStream(bytes, 0, bytes.Length))
        {
            ms.Write(bytes, 0, bytes.Length);
            ms.Position = 0;
            return new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter().Deserialize(ms);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>int642BaseSKG34</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts Int64 to Base SKG34
    /// </summary>
    /// <param name = "_int64">Int64 value</param>
    /// <returns>Returns a base SKG34 value</returns>
    Public static str int642BaseSKG34(int64 _int64)
    {
        int64 locInt64 = _int64;
        str locBase36Chars = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ';
        str locBaseVal = '';
        Int64 locRemainder;
        Do
        {
            locRemainder = locInt64 Mod 34;
            locInt64 = any2Int64(locInt64 / 34);
            locBaseVal = SKS_PP_StringFormats::strSub(locBase36Chars,int642int(locRemainder + 1),1) + locBaseVal;
        }
        While(locInt64 > 0);
        return SKS_PP_StringFormats::strLTrimZeroes(locBaseVal,1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates email address.
    /// </summary>
    /// <param name = "_email">Email address</param>
    /// <returns>Returns true, if email address is valid</returns>
    static boolean validateEmail(str _email)
    {
        /* This regex validates the following structure for an email address:
        a. Contains a '@' character
        b. Contains a period after '@'
        c. Has only one @ and at least one character before the @, before the period and after it
        */
        boolean retVal;
        str emailAddressFilter = @"^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$";

        System.Text.RegularExpressions.Regex regEx;
        System.Text.RegularExpressions.Match regMatch;
        str email;
        List emailAddresses;
        ListEnumerator enum;

       
        retVal = SysEmailDistributor::validateEmail(_email);

        if(retVal)
        {
            //BP Deviation documented
            regEx = new System.Text.RegularExpressions.Regex(emailAddressFilter);

            // Split the email address string and validate each email address
            emailAddresses = SysEmailDistributor::splitEmail(_email);
            enum = emailAddresses.getEnumerator();
            while(enum.moveNext())
            {
                email = enum.current();

                if (email)
                {
                    regMatch = regEx.Match(email);
                    retVal = regMatch.get_Success();
                }
                else
                retVal = false;

                // If a single email address is invalid, the string is invalid
                if(!retVal)
                break;
            }
        }

        return retVal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>