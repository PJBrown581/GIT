<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_ReadParseCAMT05300102</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This handles the parsing of CAMT.053 formatted Bank Rec files into the SK Soft BR inbound objects structure
/// </summary>
class SKS_BR_ReadParseCAMT05300102 extends SKS_BR_ReadParseBase
{
    boolean test, InstdInUse;
    System.Xml.XmlDocument gXMLDocument;
    NoYes gEndingBalancePreReqMet;
    str gTransTypePart1; //DOMN
    str gTransTypePart2;
    str gTransTypePart3;
    str gPrtryCD;
    SKS_BR_InboundTran clNtryDtlsSKS_BR_InboundTran, clTxDtlsSKS_BR_InboundTran;
    str clBookgDtDt;
    str clTxDtlsAmt, clTxDtlsCcy;
    str clNtryDtls_BTCH_TtlAmt, clNtryDtls_BTCH_TtlAmt_Ccy;
    str clTxDtlsCustRefNbr;
    str clBatchCrDtFlag, clNtryCdtDbtInd, clTxDtlsCdtDbtInd;
    boolean clBatchIsCredit;
    str clRmtInfStrdRfrdDocInfTpCdOrPrtryCd;
    str clRmtInfStrdRfrdDocInfNb;
    str clRmtInfStrdRfrfDocAmtRmtdAmt;
    str clRmtInfStrdRfrfDocAmtTaxAmt;
    str clRmtInfStrdCdtrRefInfRef;
    str clRmtInfStrdAddtlRmtInf;
    str clRmtInfUstrd;
    str clRmtInfStrdCdtrRefInfTpCdOrPrtryCd;
    str clRmtInfStrdRfrfDocAmtDuePyblAmt;
    str clRmtInfStrdRfrfDocAmtDscntApldAmt;
    str clRmtInfStrdRfrfDocAmtCdtNoteAmt;
    str clRmtInfStrdRfrdDocInf;
    str clPmtInfID, clInstrID, clAcctSvcrRef, clTxDtlsDesc;
    boolean clHasTxDtlsAmt;
    str clPrtryAmt;
    str clPrtryAmtCCY;
    str gNtDtTxDtBkPrtryCd;
    str clRsnCd;
    str clDDReference;
    
    // vvv 13463 vvv
    System.Xml.XmlNode clNtryXmlNode;
    System.Xml.XmlNode clBtchPmtInfIdXMLNode;
    // ^^^ 13463 ^^^
    SKS_BR_CAMT053_BankTran_Type clSKS_BR_CAMT053_BankTran_Type;
    System.Text.StringBuilder clAddtlNtryInfStringBuilder;
    SKS_BR_FileFormatTranMapping gSKS_BR_FileFormatTranMapping;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>FindNonCcyTxAmtAmt</Name>
				<Source><![CDATA[
    private System.Xml.XmlNode FindNonCcyTxAmtAmt(System.Xml.XmlNodeList _TxAmtAmtXmlNodelist)
    {
        // vvv 13463 vvv
        System.Xml.XmlNode rtnval = null;
        System.Xml.XmlNode locTempNode = null;
        System.Xml.XmlAttributeCollection locAmtXmlAttributeCollection = null;
        System.Collections.IEnumerator locTxAmtAmtXmlNodelistIEnumerator;
        
        locTxAmtAmtXmlNodelistIEnumerator = _TxAmtAmtXmlNodelist.GetEnumerator();
        while(locTxAmtAmtXmlNodelistIEnumerator.MoveNext())
        {
            locTempNode = locTxAmtAmtXmlNodelistIEnumerator.Current;
            locAmtXmlAttributeCollection = locTempNode.Attributes;
            System.Xml.XmlAttribute locAmtCcyXmlAttribute = locAmtXmlAttributeCollection.get_ItemOf('Ccy');
            if(strUpr(locAmtCcyXmlAttribute.Value) != strUpr(gSKS_BR_InboundStmt.GetCurrency()))
            {
                rtnval = locTempNode;
                break;
            }
        }
        return rtnval;
        // ^^^ 13463 ^^^
    }

]]></Source>
			</Method>
			<Method>
				<Name>DescAppend</Name>
				<Source><![CDATA[
    private str DescAppend(str _Desc, str _ToAppend, boolean _SeperateFrom_DescStringWithSpace = true)
    {
        if(strLen(strLRTrim(_ToAppend)) == 0)
        {
            return _Desc;
        }
        else if(strLen(strLRTrim(_Desc)) == 0)
        {
            return _ToAppend;
        }
        else
        {
            //  vvvvv11842vvvvvvvvvvvvvvvvv
            if(_SeperateFrom_DescStringWithSpace)
            {
                return _Desc + ' ' + _ToAppend;
            }
            else
            {
                return _Desc + _ToAppend;
            }
            // ^^^^^11842^^^^^^^^^^^^^^^
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetAttributeValue</Name>
				<Source><![CDATA[
    private str GetAttributeValue(System.Xml.XmlNode _XMLNode, str _AttributeName)
    {
        str locAttributeName, locAttributeValue;
        System.Xml.XmlAttribute locXmlAttribute;
        System.Collections.IEnumerator locXMLAttributeCollectionEnumerator;
        System.Xml.XmlAttributeCollection locXMLAttirbuteCollection;


        locXMLAttirbuteCollection = _XmlNode.get_Attributes();
        locXMLAttributeCollectionEnumerator = locXMLAttirbuteCollection.GetEnumerator();
        while(locXMLAttributeCollectionEnumerator.MoveNext())
        {
            locXmlAttribute = locXMLAttributeCollectionEnumerator.get_Current();
            locAttributeName = locXmlAttribute.get_Name();
            if(strUpr(locAttributeName) == _AttributeName)
            {
                locAttributeValue = locXmlAttribute.get_Value();
                break;
            }
        }
        return locAttributeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankRefNbr_delegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate method for getBankRefNbr "Imported Bank Nbr" where the default value can be overridden.
    /// </summary>
    /// <param name = "_Document">The incoming CAMT file as an XML Document</param>
    /// <param name = "_currentPossibleValues">The possible values for the bank reference number</param>
    /// <param name = "_result">Serves as a means for the delegate to return the proper value</param>
    delegate void getBankRefNbr_delegate(System.Xml.XmlDocument _Document, container _currentPossibleValues, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatementCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the currency in the SKS_BR_InboundStmt object
    /// </summary>
    /// <param name = "_StmtXmlNode">Pass the Stmt xmlnode</param>
    protected void setStatementCurrency(System.Xml.XmlNode _StmtXmlNode)
    {
        boolean locCurrencySet = false;
        if(gSKS_BR_FileFormat.BR_CAMT053MulitCurrencyAccounts == NoYes::Yes)
        {
            System.Xml.XmlNode locCcyXmlNode = _StmtXmlNode.selectSingleNode('Acct/Ccy');
            if(locCcyXmlNode)
            {
                gSKS_BR_InboundStmt.SetCurrency(locCcyXmlNode.InnerText);
                locCurrencySet = true;
            }
        }
        if(locCurrencySet == false)
        {
            System.Xml.XmlNode locAmtXmlNode = _StmtXmlNode.selectSingleNode('Bal/Amt');
            if(locAmtXmlNode)
            {
                gSKS_BR_InboundStmt.SetCurrency(this.GetAttributeValue(locAmtXmlNode, 'Ccy'));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankRefNbr</Name>
				<Source><![CDATA[
    protected str getBankRefNbr()
    {
        str rtnval;
        EventHandlerResult locResult = new EventHandlerResult();
        container locCurrentPossibleValues;  //list of all items in the following "if" statement.


        if(clPmtInfID)
        {
            rtnval = clPmtInfID;
        }
        else if(clInstrID)
        {
            rtnval = clInstrID;
        }
        else if(clAcctSvcrRef)
        {
            rtnval = clAcctSvcrRef;
        }
        else
        {
            rtnval = '';
        }

        locResult.result(rtnval);
        locCurrentPossibleValues = [clPmtInfID,clInstrID,clAcctSvcrRef];
        this.getBankRefNbr_delegate(gXMLDocument,locCurrentPossibleValues,locResult);

        return locResult.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetInboundFile</Name>
				<Source><![CDATA[
    public SKS_BR_InboundFile GetInboundFile(SKS_EB_FilePathName _FilePathAndName, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.Xml.XmlNode locXMLNode;
        str locTempTagName;
        str stripInvalidXMLCharacter(System.String _in)
        {
            str rtnval;
            System.String xml10pattern =
             '[\u001A]';
            rtnval = System.Text.RegularExpressions.Regex::Replace(_in, xml10pattern, '');
            return rtnval;
        }

        this.InitializeFileInfo(_FilePathAndName);
        //Set the file path and name so we can set the attributes when the SKS_BR_InboundFile
        gSKS_EB_FilePathName = _FilePathAndName;
        // OPEN AND LOAD THE FILE INTO THE XMLDOC OBJECT
        gXMLDocument = new System.Xml.XmlDocument();
        locSKS_EB_FileHub.parmEncoding(65001);
        locSKS_EB_FileHub.runFileLoad(_FilePathAndName);

        try
        {
            gXMLDocument.LoadXML(SKS_EB_XML::getAttributeFreeDocument(stripInvalidXMLCharacter(locSKS_EB_FileHub.fileBody())));
        }
        catch (Exception::CLRError)
        {
            throw error(AifUtil::getClrErrorMessage());
        }

        if(gXMLDocument.get_HasChildNodes())
        {
            locXMLNode = gXMLDocument.get_FirstChild(); //<?XML ... node.
            locXMLNode = locXMLNode.get_NextSibling();//<Document xmlns...
            locTempTagName = locXMLNode.get_Name();
            if(strUpr(locTempTagName) == 'DOCUMENT')
            {
                this.processNode(locXMLNode);
            }
        }
        return gSKS_BR_InboundFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetSKS_BR_BankTranType</Name>
				<Source><![CDATA[
    private SKS_BR_CAMT053_BankTran_Type GetSKS_BR_BankTranType(System.Xml.XmlNode _NtryXmlNode)
    {
        /*
        Here we define a hierarchy and control what type of SKS_BR_BankTran we'll be creating.
        There four possible types, in descending order of precision

        1.	Ntry/NtryDtls/TxDtls/AmtDtls/TxAmt/Amt
        you may have many of these per ntry.  They are the most precise records
        "In a camt-message, the Entry level amount (Ntry/Amt) must be equal to the net value of the
        amounts of the Transaction Details instances specifying it Ntry/NtryDtls/TxDtls/AmtDtls/TxAmt/Amt)."
        --ISO 20022 Account Statement Guide pg 15 paragraph 3
        2.	Ntry/NtryDtls/TxDtls/Amt
        you may have many of these per ntry.  These are slightly less precise than txAmt tags, but more precise tbat batch amts.
        3.	Ntry/NtryDtls/Btch/TtlAmt
        "Total amount of the camt-message compilation”
        --ISO 20022 Account Statement Guide pg 22 table 1 2.140
        4.	Ntry/Amt
        Least precise amount, just an aggregate of any details or batches that are included, but
        the details & Batches are not mandatory, this is the catch-all for anything falling through
        */
        //DETAILS
        System.Xml.XmlNode locXmlNode =_NtryXmlNode.selectSingleNode('NtryDtls/TxDtls/AmtDtls/TxAmt');
        System.Xml.XmlNodeList locTxAmtAmtXmlNodeList;
        SKS_BR_CAMT053_TransGranularity locSKG_BR_CAMT053_TransGranularity;

        if(gSKS_BR_FileFormat.CAMT053OverrideDetailLevel == NoYes::Yes)
        {
            if(gSKS_BR_FileFormatTranMapping)
            {
                locSKG_BR_CAMT053_TransGranularity = gSKS_BR_FileFormatTranMapping.CAMT053_TransGranularity;
            }
            else
            {
                locSKG_BR_CAMT053_TransGranularity = SKS_BR_CAMT053_TransGranularity::SKGCAMT053TranGranulaityTxAmt;
            }
        }
        else
        {
            locSKG_BR_CAMT053_TransGranularity = SKS_BR_CAMT053_TransGranularity::SKGCAMT053TranGranulaityTxAmt;
        }

        boolean locTxDtlsCurrencyValid = true;
        InstdInUse = false;
        if(locXmlNode)
        {
            locTxAmtAmtXmlNodeList = _NtryXmlNode.SelectNodes('NtryDtls/TxDtls/AmtDtls/TxAmt/Amt');
            if(locTxAmtAmtXmlNodeList)
            {
                locTxDtlsCurrencyValid = (this.FindNonCcyTxAmtAmt(locTxAmtAmtXmlNodeList) == null);
            }
        }

        if(locXmlNode && locTxDtlsCurrencyValid && locSKG_BR_CAMT053_TransGranularity == SKS_BR_CAMT053_TransGranularity::SKGCAMT053TranGranulaityTxAmt)//if txamt/amt exists, and all occurences have the correct currency, then use txamt/amt else use a less granular option
            {
                return SKS_BR_CAMT053_BankTran_Type::TxAmt;
            }
            else
            {
                locXmlNode = _NtryXmlNode.selectSingleNode('NtryDtls/TxDtls/Amt');
                if(locXmlNode)
                {
                    locTxAmtAmtXmlNodeList = _NtryXmlNode.SelectNodes('NtryDtls/TxDtls/Amt');
                    if(locTxAmtAmtXmlNodeList)
                    {
                        locTxDtlsCurrencyValid = (this.FindNonCcyTxAmtAmt(locTxAmtAmtXmlNodeList) == null);
                    }
                }

                if(locXmlNode
                && locTxDtlsCurrencyValid
                && (locSKG_BR_CAMT053_TransGranularity == SKS_BR_CAMT053_TransGranularity::SKGCAMT053TranGranulaityTxAmt
                || locSKG_BR_CAMT053_TransGranularity == SKS_BR_CAMT053_TransGranularity::SKGCAMT053TranGranulartityTxDtlsAmt))
                {
                    return SKS_BR_CAMT053_BankTran_Type::TxDtls;
                }
                else
                {
                    //BATCH
                    locXmlNode = _NtryXmlNode.selectSingleNode('NtryDtls/Btch/TtlAmt');
                    if(locXmlNode
                    && (locSKG_BR_CAMT053_TransGranularity == SKS_BR_CAMT053_TransGranularity::SKGCAMT053TranGranulaityTxAmt
                    || locSKG_BR_CAMT053_TransGranularity == SKS_BR_CAMT053_TransGranularity::SKGCAMT053TranGranulartityTxDtlsAmt
                    || locSKG_BR_CAMT053_TransGranularity == SKS_BR_CAMT053_TransGranularity::SKGCAMT053TranGranularityBtch))
                    {
                        return SKS_BR_CAMT053_BankTran_Type::Batch;
                    }
                    else
                    {
                        //ENTRY (Default) Ntry/Amt
                        return SKS_BR_CAMT053_BankTran_Type::Entry;
                    }
                }
            }
        
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locXMLNode;
        System.Xml.XmlNode locParentXMLNode;
        System.Xml.XmlNode locGrandParentXMLNode;
        System.Xml.XmlNode locGreatGrandParentXMLNode;
        System.Xml.XmlNode locGreatGreatGrandParentXMLNode;
        System.Xml.XmlNode locGreatGreatGreatGrandParentXMLNode;
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
        System.Xml.XmlNode locPmtInfIdXmlNode;
        System.Xml.XmlNodeList locAddtlNtryInfXMLNodeList;
        System.Xml.XmlNode locAddtlNtryInfXMLNode;
        
        str locNodeName, locNodeValue, locStrdFields;
        int separatorPos;
        str locTempNodeName, locTempParentNodeName, locTempGrandParentNodeName,
            locTempGreatGrandParentNodeName, locTempGreatGreatGrandParentNodeName,
            locTempGreatGreatGreatGrandParentNodeName;
        

        str locatePrtryCD(System.Xml.XmlNode _NtryXmlNode)
        {
            System.Xml.XmlNode locPrtryCDXmlNode =_NtryXmlNode.selectSingleNode('BkTxCd/Prtry/Cd');
            str rtnval = '';

            if(locPrtryCDXmlNode)
            {
                rtnval = locPrtryCDXmlNode.get_InnerText();
                separatorPos = strScan(rtnval, '+', 1, strLen(rtnval));
                if(separatorPos != 0)
                {
                    rtnval = subStr(rtnval, 1, separatorPos - 1);
                }
                else
                {
                    rtnval = Global::strLRTrim(rtnval);
                }
            }
            return rtnval;
        }

        str setTranType()
        {
            str rtnval;
            if(strLen(gPrtryCD) > 0  // if both Prtry and the 3-part Domn use format setting
                && (strLen(gTransTypePart1) > 0
                    || strLen(gTransTypePart2) > 0
                    || strLen(gTransTypePart3) > 0))
            {
                if(gSKS_BR_FileFormat.CAMT053TranTypePreference == SKS_BR_CAMT053TranTypePreference::Proprietary)
                {
                    rtnval = gPrtryCD;
                }
                else
                {
                    rtnval = strLRTrim(gTransTypePart1) + '-'
                                                    + strLRTrim(gTransTypePart2) + '-'
                                                    +strLRTrim(gTransTypePart3);
                    // If not using Prtry/Cd for tran type then add it to description
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Prtry/Cd:' + gPrtryCD);
                }
            }
            else if (strLen(gPrtryCD) > 0) //if only prtry is populated, use that
            {
                rtnval = gPrtryCD;
            }
            else//if none of the previous, then assume it is a 3-part tran type
            {
                rtnval = strLRTrim(gTransTypePart1) + '-'
                                                + strLRTrim(gTransTypePart2) + '-'
                                                +strLRTrim(gTransTypePart3);
            }
            return rtnval;
        }

        locParentXMLNode = _XmlNode.get_ParentNode();
        if(locParentXMLNode != null)
        {
            locTempParentNodeName = locParentXMLNode.get_Name();
            locTempParentNodeName = strUpr(locTempParentNodeName);
            locGrandParentXMLNode = locParentXMLNode.get_ParentNode();
            if(locGrandParentXMLNode != null)
            {
                locTempGrandParentNodeName = locGrandParentXMLNode.get_Name();
                locTempGrandParentNodeName = strUpr(locTempGrandParentNodeName);
                locGreatGrandParentXMLNode = locGrandParentXMLNode.get_ParentNode();
                if(locGreatGrandParentXMLNode != null)
                {
                    locTempGreatGrandParentNodeName = locGreatGrandParentXMLNode.get_Name();
                    locTempGreatGrandParentNodeName = strUpr(locTempGreatGrandParentNodeName);
                    locGreatGreatGrandParentXMLNode = locGreatGrandParentXMLNode.get_ParentNode();
                    if(locGreatGreatGrandParentXMLNode != null)
                    {
                        locTempGreatGreatGrandParentNodeName = locGreatGreatGrandParentXMLNode.get_Name();
                        locTempGreatGreatGrandParentNodeName = strUpr(locTempGreatGreatGrandParentNodeName);
                        locGreatGreatGreatGrandParentXMLNode = locGreatGreatGrandParentXMLNode.get_ParentNode();
                        if(locGreatGreatGreatGrandParentXMLNode != null)
                        {
                            locTempGreatGreatGreatGrandParentNodeName = locGreatGreatGreatGrandParentXMLNode.get_Name();
                            locTempGreatGreatGreatGrandParentNodeName = strUpr(locTempGreatGreatGreatGrandParentNodeName);
                        }
                    }
                }
            }
        }

        locTempNodeName = _XmlNode.get_Name();
        switch(strUpr(locTempNodeName))
        {
            case 'DOCUMENT':
                if(gSKS_BR_InboundFile == null)
                {
                    //Instantiate a new file object to hold all statements contained in the incoming file
                    gSKS_BR_InboundFile = new SKS_BR_InboundFile();
                    gSKS_BR_InboundFile.SetDate(gSKS_EB_FileHub.attrFileModified());
                }
                break;
            case 'GRPHDR':
                //No action
                break;
            case 'MSGID':
                locNodeValue = _XmlNode.get_InnerText();
                gSKS_BR_InboundFile.SetID(locNodeValue);
                break;
            case 'STMT':
                gEndingBalancePreReqMet = NoYes::No;
                gSKS_BR_InboundStmt = new SKS_BR_InboundStmt();
                this.setStatementCurrency(_XmlNode);
                break;
            case 'CREDTTM', 'DT', 'DTTM':/*SKS_FDD_9564*/
            //Statement Date time:  initially, the Statment date will be set to the File's Statment Date
            // if there is a closing balance, then we will reset the Satment date
                if(locTempParentNodeName == 'STMT'
                    || (locTempParentNodeName == 'DT'
                        && locTempGrandParentNodeName == 'BAL'
                        && gEndingBalancePreReqMet == NoYes::Yes))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetDate(locNodeValue);
                }
            //if this isn't a statement date time, then it might be a transaction date time.
                else if(locTempGreatGrandParentNodeName == 'STMT'
                    && locTempGrandParentNodeName == 'NTRY'
                    && locTempParentNodeName == 'BOOKGDT')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetDate(locNodeValue);
                    clBookgDtDt = locNodeValue;
                }
                //SKS_FDD_9564-->
                else if(locTempGreatGrandParentNodeName == 'STMT'
                    && locTempGrandParentNodeName == 'NTRY'
                    && locTempParentNodeName == 'VALDT')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetValueDate(locNodeValue);
                    clBookgDtDt = locNodeValue;
                }
                //SKS_FDD_9564<--
                break;
            case 'NB':
                if(locTempGreatGrandParentNodeName == 'RMTINF'
                    && locTempGrandParentNodeName == 'STRD'
                    && locTempParentNodeName == 'RFRDDOCINF')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRmtInfStrdRfrdDocInfNb =  'Nb:' + Global::strLRTrim(locNodeValue);
                }
                break;
            case 'NM':
                if(locTempGreatGrandParentNodeName == 'TXDTLS'
                    && locTempGrandParentNodeName == 'RLTDPTIES'
                    && locTempParentNodeName == 'DBTR')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Dbtr/Nm:' + locNodeValue);
                }
                else if(locTempGreatGrandParentNodeName == 'TXDTLS'
                    && locTempGrandParentNodeName == 'RLTDPTIES'
                    && locTempParentNodeName == 'CDTR')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Cdtr/Nm:' + locNodeValue);
                }
                break;
            case 'ADRLINE':
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'DBTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Dbtr/AdrLine:' + locNodeValue);
                }
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'CDTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && !gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Cdtr/AdrLine:' + locNodeValue);
                }
                break;
            case 'PSTCD':
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'DBTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Dbtr/PstCd:' + locNodeValue);
                }
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'CDTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && !gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Cdtr/PstCd:' + locNodeValue);
                }
                break;
            case 'TWNNM':
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'DBTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Dbtr/TwnNm:' + locNodeValue);
                }
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'CDTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && !gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Cdtr/TwnNm:' + locNodeValue);
                }
                break;
            case 'CTRY':
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'DBTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Dbtr/Ctry:' + locNodeValue);
                }
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'CDTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && !gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Cdtr/Ctry:' + locNodeValue);
                }
                break;
            case 'STRTNM':
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'DBTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Dbtr/StrtNm:' + locNodeValue);
                }
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'CDTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && !gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Cdtr/StrtNm:' + locNodeValue);
                }
                break;
            case 'BLDGNB':
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'DBTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Dbtr/BldgNb:' + locNodeValue);
                }
                if(locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'CDTR'
                    && locTempParentNodeName == 'PSTLADR'
                    && !gSKS_BR_InboundTran.GetIsCredit())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Cdtr/BldgNb:' + locNodeValue);
                }
                break;
            case 'DUEPYBLAMT':
                if(locTempGreatGrandParentNodeName == 'RMTINF'
                    && locTempGrandParentNodeName == 'STRD'
                    && (locTempParentNodeName == 'RfrfDocAmt' || locTempParentNodeName == 'RfrdDocAmt'))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRmtInfStrdRfrfDocAmtDuePyblAmt =  'DuePyblAmt:' + Global::strLRTrim(locNodeValue);
                }
                break;
            case 'DSCNTAPLDAMT':
                if(locTempGreatGrandParentNodeName == 'RMTINF'
                    && locTempGrandParentNodeName == 'STRD'
                    && (locTempParentNodeName == 'RfrfDocAmt' || locTempParentNodeName == 'RfrdDocAmt'))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRmtInfStrdRfrfDocAmtDscntApldAmt =  'DscntApldAmt:' + Global::strLRTrim(locNodeValue);
                }
                break;
            case 'CDTNOTEAMT':
                if(locTempGreatGrandParentNodeName == 'RMTINF'
                    && locTempGrandParentNodeName == 'STRD'
                    && (locTempParentNodeName == 'RfrfDocAmt' || locTempParentNodeName == 'RfrdDocAmt'))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRmtInfStrdRfrfDocAmtCdtNoteAmt =  'CdtNoteAmt:' + Global::strLRTrim(locNodeValue);
                }
                break;
            case 'TAXAMT':
                if(locTempGreatGrandParentNodeName == 'RMTINF'
                    && locTempGrandParentNodeName == 'STRD'
                    && (locTempParentNodeName == 'RfrfDocAmt' || locTempParentNodeName == 'RfrdDocAmt'))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRmtInfStrdRfrfDocAmtTaxAmt =  'TaxAmt:' + Global::strLRTrim(locNodeValue);
                }
                break;
            case 'RMTDAMT':
                if(locTempGreatGrandParentNodeName == 'RMTINF'
                    && locTempGrandParentNodeName == 'STRD'
                    && (locTempParentNodeName == 'RfrfDocAmt' || locTempParentNodeName == 'RfrdDocAmt'))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRmtInfStrdRfrfDocAmtRmtdAmt =  'RmtdAmt:' + Global::strLRTrim(locNodeValue);
                }
                break;
            case 'ELCTRNCSEQNB': //always use ELCTRNCSEQNB if it exists (compared to <STMT><ID>which is only used if ELCTRNCSEQNB does not exist)
                if(locTempParentNodeName == 'STMT' && gSKS_BR_FileFormat.CAMT53StmtNum == SKS_BR_StmtNum::ELCTRNCSEQNB)
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetNbr(locNodeValue);
                }
                break;
            case 'LGLSEQNB': //always use ELCTRNCSEQNB if it exists (compared to <STMT><ID>which is only used if ELCTRNCSEQNB does not exist)
                if(locTempParentNodeName == 'STMT' && gSKS_BR_FileFormat.CAMT53StmtNum == SKS_BR_StmtNum::LGLSEQNB)
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetNbr(locNodeValue);
                }
                break;
            //Set the Statment ID or Bank Account
            case 'ID','IBAN':
                if(locTempParentNodeName == 'STMT' //IN the case of Statment ID this is only used if ELCTRNCSEQNB does not exist
                        && !gSKS_BR_InboundStmt.GetNbr())
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetNbr(locNodeValue);
                }
                else if((//THIS IS THE QUALIFIER FOR IBANs.  IBAN VALUES ARE IN THE IBAN NODE(ex. in 4162)
                        locTempGreatGrandParentNodeName == 'STMT'
                        && locTempGrandParentNodeName == 'ACCT'
                        && locTempParentNodeName == 'ID'
                        && locTempNodeName == 'IBAN')
                    || //THIS IS THE QUALIFIER FOR BANK ACCOUNT NUMERS
                        (locTempGreatGreatGrandParentNodeName == 'STMT'
                        && locTempGreatGrandParentNodeName == 'ACCT'
                        && locTempGrandParentNodeName == 'ID'
                        && locTempParentNodeName == 'OTHR'
                        && locTempNodeName == 'ID'))
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetAccount(locNodeValue);
                }
                else if( // .../TxDtls/RltdPties/DbtrAcct/Id/IBAN
                        locTempGreatGreatGrandParentNodeName == 'TXDTLS'
                        && locTempGreatGrandParentNodeName == 'RLTDPTIES'
                        && locTempGrandParentNodeName == 'DBTRACCT'
                        && locTempParentNodeName == 'ID'
                        && locTempNodeName == 'IBAN'
                        && gSKS_BR_InboundTran.GetIsCredit()
                        )
                {
                    //this will be appended to the trans descritpion during this.pushtrans(...) method
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, strFmt('DbtrAcct/IBAN:%1', _XmlNode.get_InnerText()));
                }
                else if( // .../TxDtls/RltdPties/DbtrAcct/Id/Othr/Id
                    locTempGreatGreatGreatGrandParentNodeName == 'TXDTLS'
                    && locTempGreatGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGreatGrandParentNodeName == 'DBTRACCT'
                    && locTempGrandParentNodeName == 'ID'
                    && locTempParentNodeName == 'OTHR'
                    && locTempNodeName == 'ID'
                    && gSKS_BR_InboundTran.GetIsCredit()
                    )
                {
                    //this will be appended to the trans descritpion during this.pushtrans(...) method
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, strFmt('DbtrAcct/Other/Id:%1', _XmlNode.get_InnerText()));
                }
                else if( // .../TxDtls/RltdPties/CdtrAcct/Id/IBAN
                    locTempGreatGreatGrandParentNodeName == 'TXDTLS'
                    && locTempGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGrandParentNodeName == 'CDTRACCT'
                    && locTempParentNodeName == 'ID'
                    && locTempNodeName == 'IBAN'
                    && !gSKS_BR_InboundTran.GetIsCredit()
                    )
                {
                    //this will be appended to the trans descritpion during this.pushtrans(...) method
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, strFmt('CrdtrAcct/IBAN:%1', _XmlNode.get_InnerText()));
                }
                else if( // .../TxDtls/RltdPties/CdtrAcct/Id/Othr/Id
                    locTempGreatGreatGreatGrandParentNodeName == 'TXDTLS'
                    && locTempGreatGreatGrandParentNodeName == 'RLTDPTIES'
                    && locTempGreatGrandParentNodeName == 'CDTRACCT'
                    && locTempGrandParentNodeName == 'ID'
                    && locTempParentNodeName == 'OTHR'
                    && locTempNodeName == 'ID'
                    && !gSKS_BR_InboundTran.GetIsCredit()
                    )
                {
                    //this will be appended to the trans descritpion during this.pushtrans(...) method
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, strFmt('CdtrAcct/Other/Id:%1', _XmlNode.get_InnerText()));
                }
                else if(
                    (locTempGreatGreatGrandParentNodeName == 'CDTR' || locTempGreatGreatGrandParentNodeName == 'DBTR')
                    && locTempGreatGrandParentNodeName == 'ID'
                    && locTempGrandParentNodeName == 'ORGID'
                    && locTempParentNodeName == 'OTHR')
                {
                    if(locTempGreatGreatGrandParentNodeName == 'CDTR')
                    {
                        locNodeValue = 'Cdtr/Id:';
                    }
                    else
                    {
                        locNodeValue = 'Dbtr/Id:';
                    }
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, locNodeValue + strLRTrim(_XmlNode.get_InnerText()));
                }
                else if(
                        (locTempGreatGreatGrandParentNodeName == 'ULTMTCDTR' || locTempGreatGreatGrandParentNodeName == 'ULTMTDBTR')
                        && locTempGreatGrandParentNodeName == 'ID'
                        && locTempGrandParentNodeName == 'ORGID'
                        && locTempParentNodeName == 'OTHR')
                {
                    if(locTempGreatGreatGrandParentNodeName == 'ULTMTCDTR')
                    {
                        locNodeValue = 'UltmtCdtr/Id:';
                    }
                    else
                    {
                        locNodeValue = 'UltmtDbtr/Id:';
                    }
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, locNodeValue + strLRTrim(_XmlNode.get_InnerText()));
                }
                break;

            case 'CD'://MERGE NOTE! IBAN above is where it belongs. Leaving the IBAN that was here causes compile error!!!
                if(locTempGreatGreatGrandParentNodeName == 'STMT'
                    && locTempGreatGrandParentNodeName == 'BAL'
                    && locTempGrandParentNodeName == 'TP'
                    && locTempParentNodeName == 'CDORPRTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    if(strUpr(locNodeValue) == strUpr(gSKS_BR_FileFormat.EndBalanceTypeCode))
                    {
                        gEndingBalancePreReqMet = NoYes::Yes;
                    }
                }
                else if(locTempGreatGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGreatGrandParentNodeName == 'TxDtls'
                    && locTempGrandParentNodeName == 'RTRINF'
                    && locTempParentNodeName == 'RSN')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRsnCd = locNodeValue;
                    //gSKS_BR_InboundTran.setStatusReason(locNodeValue);
                }
                else if(locTempGreatGreatGreatGrandParentNodeName == 'RMTINF'
                    && locTempGreatGreatGrandParentNodeName == 'STRD'
                    && locTempGreatGrandParentNodeName == 'CDTRREFINF'
                    && locTempGrandParentNodeName == 'TP'
                    && locTempParentNodeName == 'CDORPRTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRmtInfStrdCdtrRefInfTpCdOrPrtryCd =  'Cd:' + Global::strLRTrim(locNodeValue);
                }
                else if(locTempGreatGreatGreatGrandParentNodeName == 'RMTINF'
                    && locTempGreatGreatGrandParentNodeName == 'STRD'
                    && locTempGreatGrandParentNodeName == 'RFRDDOCINF'
                    && locTempGrandParentNodeName == 'TP'
                    && locTempParentNodeName == 'CDORPRTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clRmtInfStrdRfrdDocInfTpCdOrPrtryCd =  'Cd:' + Global::strLRTrim(locNodeValue);
                }
                else if(locTempGreatGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGreatGrandParentNodeName == 'TXDTLS'
                    && locTempGrandParentNodeName == 'BKTXCD'
                    && locTempParentNodeName == 'PRTRY')
                {
                    gNtDtTxDtBkPrtryCd = SKS_PP_StringFormats::strLRtrimAllWhitespace(_XmlNode.get_InnerText());
                }
                break;
            case 'REF':
                if(locTempGreatGrandParentNodeName == 'RMTINF'
                    && locTempGrandParentNodeName == 'STRD'
                    && locTempParentNodeName == 'CDTRREFINF')
                {
                    if(gSKS_BR_InboundTran.GetTranType() == '')
                    {
                        locNodeValue = _XmlNode.get_InnerText();
                        ClRmtInfStrdCdtrRefInfRef = 'Ref:' + Global::strLRTrim(locNodeValue);
                    }
                }
                break;
            case 'ADDTLRMTINF':
                if(locTempGrandParentNodeName == 'RMTINF'
                    && locTempParentNodeName == 'STRD')
                {
                    if(gSKS_BR_InboundTran.GetTranType() == '')
                    {
                        locNodeValue = _XmlNode.get_InnerText();
                        clRmtInfStrdAddtlRmtInf = 'AddtlRmtInf:' + Global::strLRTrim(locNodeValue);
                    }
                }
                break;
            case 'AMT':
                if( locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'BAL')
                {
                    if(gEndingBalancePreReqMet == NoYes::yes)
                    {
                        locNodeValue = _XmlNode.get_InnerText();
                        gSKS_BR_InboundStmt.SetEndingBalance(SKS_PP_StringFormats::CurrStr2CurrNum(locNodeValue));
                    }
                }
                else if((locTempParentNodeName == 'TxAmt' || locTempParentNodeName == 'InstdAmt') && clSKS_BR_CAMT053_BankTran_Type == SKS_BR_CAMT053_BankTran_Type::TxAmt)
                {
                    // vvv 13463 vvv
                    if(!InstdInUse)
                    {
                        locNodeValue = _XmlNode.get_InnerText();
                        clTxDtlsAmt = locNodeValue;
                        clTxDtlsCcy = this.GetAttributeValue(_XmlNode, 'CCY');
                        clHasTxDtlsAmt = true;
                        if(locTempParentNodeName == 'InstdAmt' && gSKS_BR_FileFormat.PrioritizeInstdAmt)
                        {
                            InstdInUse = true;
                        }
                    }   
                }
                else if(locTempParentNodeName == 'TxDtls' && clSKS_BR_CAMT053_BankTran_Type == SKS_BR_CAMT053_BankTran_Type::TxDtls)
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsAmt = locNodeValue;
                    clTxDtlsCcy = this.GetAttributeValue(_XmlNode, 'CCY');
                        
                    clHasTxDtlsAmt = true;
                    // ^^^ 17831 ^^^
                }


                //11843 --v__
                else if(locTempGrandParentNodeName == 'AMTDTLS'
                    && locTempParentNodeName == 'PRTRYAMT')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clPrtryAmt = locNodeValue;
                    clPrtryAmtCCY = this.GetAttributeValue(_XmlNode, 'CCY');
                }//11843 --^--
                else if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'NTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetAmt(SKS_PP_StringFormats::CurrStr2CurrNum(locNodeValue));
                    gSKS_BR_InboundTran.SetCurrency(this.GetAttributeValue(_XmlNode, 'CCY'));
                }
                break;
            case 'TP':
                if(locTempGrandParentNodeName == 'AMTDTLS'
                    && locTempParentNodeName == 'PRTRYAMT'
                    && (strUpr(_XmlNode.get_InnerText()) == 'CRDT' || strUpr(_XmlNode.get_InnerText()) == 'DBIT'))
                {
                    clTxDtlsCdtDbtInd = _XmlNode.get_InnerText();
                }
                break;
            case 'TTLAMT':
                if(locTempGrandParentNodeName == 'NTRYDTLS'
                    && locTempParentNodeName == 'BTCH')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clNtryDtls_BTCH_TtlAmt = locNodeValue;
                    clNtryDtls_BTCH_TtlAmt_Ccy = this.GetAttributeValue(_XmlNode, 'CCY');
                }
                break;
            case 'NTRY':
                if(locTempParentNodeName == 'STMT')
                {
                    gPrtryCD = locatePrtryCD(_XmlNode);
                    gTransTypePart1 = this.locateTransTypePart1(_XmlNode);
                    gTransTypePart2 = this.locateTransTypePart2(_XmlNode);
                    gTransTypePart3 = this.locateTransTypePart3(_XmlNode);
                    select gSKS_BR_FileFormatTranMapping where 
                            gSKS_BR_FileFormatTranMapping.FileTranType == setTranType()
                        && gSKS_BR_FileFormatTranMapping.FormatID == gSKS_BR_FileFormat.FormatID;

                    gSKS_BR_InboundTran = new SKS_BR_InboundTran();

                    clAddtlNtryInfStringBuilder = new System.Text.StringBuilder();
                    locAddtlNtryInfXMLNodeList = _XmlNode.SelectNodes('AddtlNtryInf');
                    System.Collections.IEnumerator locXMLNodeListEnumerator = locAddtlNtryInfXMLNodeList.GetEnumerator();
                    while(locXMLNodeListEnumerator.MoveNext())
                    {
                        locAddtlNtryInfXMLNode = locXMLNodeListEnumerator.Current;
                        if(System.String::IsNullOrEmpty(clAddtlNtryInfStringBuilder.ToString()))
                        {
                            clAddtlNtryInfStringBuilder.Append('AddtlNtryInf:');
                            clAddtlNtryInfStringBuilder.Append(locAddtlNtryInfXMLNode.InnerText);
                        }    
                        else
                        {
                            clAddtlNtryInfStringBuilder.Append(' ' + locAddtlNtryInfXMLNode.InnerText);
                        }
                    }
                    clSKS_BR_CAMT053_BankTran_Type = this.GetSKS_BR_BankTranType(_XmlNode);
                    // vvv 13463 vvv
                    clNtryXmlNode = _XmlNode;
                    // ^^^ 13463 ^^^
                }
                break;
            case 'CHQNB':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'REFS')
                {
                    //CHQNB SHOULD BE USD IF IT EXISTS, SO ALWAYS SET IT
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetCustRefNbr(locNodeValue);
                    clTxDtlsCustRefNbr = locNodeValue;
                }
                break;
            case 'ENDTOENDID':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'REFS')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    // if CHNB has aleady se this, then do not reset it.
                    if(strLen(gSKS_BR_InboundTran.GetCustRefNbr()) == 0)
                    {
                        gSKS_BR_InboundTran.SetCustRefNbr(locNodeValue);
                    }

                    clDDReference = locNodeValue;

                    gSKS_BR_InboundTran.SetDDRefNbr(locNodeValue);
                    if(clTxDtlsCustRefNbr == '')//set value for TxDtls
                    {
                        clTxDtlsCustRefNbr = locNodeValue;
                    }
                }
                break;
            case 'INSTRID':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'REFS')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clInstrID = locNodeValue;
                }
                break;
            case 'CDTDBTIND':
                if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'NTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.SetCrDtFlag(locNodeValue);
                    clNtryCdtDbtInd = locNodeValue;
                    gSKS_BR_InboundTran.SetIsCredit(strUpr(Global::strLRTrim(locNodeValue)) == 'CRDT');
                }
                else if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'BAL'
                    && gEndingBalancePreReqMet == NoYes::Yes)
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundStmt.SetCrDtFlag(locNodeValue);
                    gSKS_BR_InboundStmt.SetIsCredit(strUpr(Global::strLRTrim(locNodeValue)) == 'CRDT');
                }
                else if(locTempParentNodeName == 'BTCH')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clBatchCrDtFlag = locNodeValue;
                    clBatchIsCredit = strUpr(Global::strLRTrim(locNodeValue)) == 'CRDT';
                }
                break;
            case 'NTRYREF':
                if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'NTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    gSKS_BR_InboundTran.AppendDesc('NtryRef:' + locNodeValue);
                }
                break;
            case 'USTRD':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'RMTINF')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    //11824 --v--
                     //DEV NOTE: the prefix is attached in the CLOSING tag of RmtInf. (Second Case Statement)
                    if (gSKS_BR_FileFormat.CAMT053AddSpaceUstrd)
                    {
                        clRmtInfUstrd = this.DescAppend(clRmtInfUstrd, locNodeValue, true); //11842
                    }
                    else
                    {
                        clRmtInfUstrd = this.DescAppend(clRmtInfUstrd, locNodeValue, false); //11842
                    }
                    //11824 --^--
                }
                break;
            case 'ACCTSVCRREF':
                if(locTempGreatGreatGrandParentNodeName == 'NTRY'
                    && locTempGreatGrandParentNodeName == 'NTRYDTLS'
                    && locTempGrandParentNodeName == 'TXDTLS'
                    && locTempParentNodeName == 'REFS')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clAcctSvcrRef = locNodeValue;
                }
                if(locTempGrandParentNodeName == 'STMT'
                    && locTempParentNodeName == 'NTRY')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'AcctSvcrRef:' + locNodeValue);
                }
                break;
            case 'TXDTLS':
                // vvv 13463 vvv
                if(!(clSKS_BR_CAMT053_BankTran_Type == SKS_BR_CAMT053_BankTran_Type::TxAmt || clSKS_BR_CAMT053_BankTran_Type == SKS_BR_CAMT053_BankTran_Type::TxDtls))
                {
                    clHasTxDtlsAmt = false;                   
                }
                // ^^^ 13463 ^^^
                break;
                // vvv 13463 vvv
            case 'NTRYDTLS':
                clBtchPmtInfIdXMLNode = _XmlNode.selectSingleNode('Btch/PmtInfId');
                break;
            // ^^^ 13463 ^^^
        }

        if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode = locXMLNodeListEnum.get_Current();
                locNodeName = locXMLNode.get_Name();
                if(strUpr(locNodeName) != '#TEXT')
                {
                    this.processNode(locXMLNode);
                }
            }

        }

        switch(strUpr(locTempNodeName))
        {
            case 'RMTINF':
                if(     locTempGreatGrandParentNodeName == 'NTRY'
                    && locTempGrandParentNodeName == 'NTRYDTLS'
                    && locTempParentNodeName == 'TXDTLS')
                {
                    if(strLen(clRmtInfUstrd) > 0)
                    {
                        clRmtInfUstrd = 'Ustrd:' + clRmtInfUstrd;
                    }
                }

                break;
            case 'ADDTLTXINF':
                if (locTempGreatGrandParentNodeName == 'NTRY'
                    && locTempGrandParentNodeName == 'NTRYDTLS'
                    && locTempParentNodeName == 'TXDTLS')
                {
                    locNodeValue = _XmlNode.get_InnerText();
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'AddtlTxInf:' + locNodeValue);
                }
                break;
            case 'RFRDDOCINF':
            case 'RFRFDOCAMT':
                clRmtInfStrdRfrdDocInf = this.DescAppend(clRmtInfStrdRfrdDocInf, clRmtInfStrdRfrdDocInfTpCdOrPrtryCd, true);
                clRmtInfStrdRfrdDocInf = this.DescAppend(clRmtInfStrdRfrdDocInf, clRmtInfStrdRfrdDocInfNb, true);
                clRmtInfStrdRfrdDocInf = this.DescAppend(clRmtInfStrdRfrdDocInf, clRmtInfStrdRfrfDocAmtRmtdAmt, true);
                clRmtInfStrdRfrdDocInf = this.DescAppend(clRmtInfStrdRfrdDocInf, clRmtInfStrdRfrfDocAmtTaxAmt, true);
                clRmtInfStrdRfrdDocInf = this.DescAppend(clRmtInfStrdRfrdDocInf, clRmtInfStrdRfrfDocAmtDuePyblAmt, true);
                clRmtInfStrdRfrdDocInf = this.DescAppend(clRmtInfStrdRfrdDocInf, clRmtInfStrdRfrfDocAmtDscntApldAmt, true);
                clRmtInfStrdRfrdDocInf = this.DescAppend(clRmtInfStrdRfrdDocInf, clRmtInfStrdRfrfDocAmtCdtNoteAmt, true);
                clRmtInfStrdRfrdDocInfTpCdOrPrtryCd = '';
                clRmtInfStrdRfrdDocInfNb = '';
                clRmtInfStrdRfrfDocAmtRmtdAmt = '';
                clRmtInfStrdRfrfDocAmtTaxAmt = '';
                clRmtInfStrdRfrfDocAmtDuePyblAmt = '';
                clRmtInfStrdRfrfDocAmtDscntApldAmt = '';
                clRmtInfStrdRfrfDocAmtCdtNoteAmt = '';
                break;
            case 'STRD':
                locStrdFields = this.DescAppend(locStrdFields, clRmtInfStrdCdtrRefInfRef);
                locStrdFields = this.DescAppend(locStrdFields, clRmtInfStrdAddtlRmtInf);
                locStrdFields = this.DescAppend(locStrdFields, clRmtInfStrdCdtrRefInfTpCdOrPrtryCd);
                if(clRmtInfStrdRfrdDocInf)
                {
                    locStrdFields = this.DescAppend(locStrdFields, clRmtInfStrdRfrdDocInf);
                }
                if(strLen(locStrdFields) > 0)
                {
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Strd: ' + locStrdFields);
                    clRmtInfStrdCdtrRefInfRef = '';
                    clRmtInfStrdAddtlRmtInf = '';
                    clRmtInfStrdCdtrRefInfTpCdOrPrtryCd = '';
                    clRmtInfStrdRfrdDocInf = '';
                }
                break;
            case 'TXDTLS':
                //The pmtinfid should be fetched if they exist
                locPmtInfIdXmlNode = _XmlNode.SelectSingleNode('Refs/PmtInfId');
                if(locPmtInfIdXmlNode)
                {
                    clPmtInfID = locPmtInfIdXmlNode.get_InnerText();
                }
                // If there is summary data, and individual tranaction detail lines, we're ignorning the summary data, and entering each individual tras detail line // 7397
                if(clSKS_BR_CAMT053_BankTran_Type == SKS_BR_CAMT053_BankTran_Type::TxAmt || clSKS_BR_CAMT053_BankTran_Type == SKS_BR_CAMT053_BankTran_Type::TxDtls)
                {
                    clTxDtlsSKS_BR_InboundTran = new SKS_BR_InboundTran();
                    //17724 Add TxDtls/Prtry/Cd to the description
                    if(strLen(gNtDtTxDtBkPrtryCd) > 0 && !strContains(clTxDtlsDesc, gNtDtTxDtBkPrtryCd))
                    {
                        clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'TxDtls/Prtry/Cd:' + gNtDtTxDtBkPrtryCd);
                    }
                    clTxDtlsSKS_BR_InboundTran.SetTranType(setTranType());
                    clTxDtlsSKS_BR_InboundTran.SetDate(clBookgDtDt);
                    if(clRsnCd)
                    {
                        clTxDtlsSKS_BR_InboundTran.setStatusReason(clRsnCd);
                    }
                    if(clHasTxDtlsAmt) //used for txdtls/amt and txdtls/txamt/amt
                    {
                        clTxDtlsSKS_BR_InboundTran.SetAmt(SKS_PP_StringFormats::CurrStr2CurrNum(clTxDtlsAmt));
                        clTxDtlsSKS_BR_InboundTran.SetCurrency(clTxDtlsCcy);
                    }
                    else
                    {
                        clTxDtlsSKS_BR_InboundTran.SetAmt(SKS_PP_StringFormats::CurrStr2CurrNum(clPrtryAmt));
                        clTxDtlsSKS_BR_InboundTran.SetCurrency(clPrtryAmtCCY);
                    }

                    clTxDtlsSKS_BR_InboundTran.SetBankRefNbr(this.getBankRefNbr());
                    clTxDtlsSKS_BR_InboundTran.SetCustRefNbr(clTxDtlsCustRefNbr);
                    clTxDtlsSKS_BR_InboundTran.SetDDRefNbr(clTxDtlsCustRefNbr);
                    //11843 --v--
                    if(clTxDtlsCdtDbtInd)
                    {
                        clTxDtlsSKS_BR_InboundTran.SetCrDtFlag(clTxDtlsCdtDbtInd);
                        clTxDtlsSKS_BR_InboundTran.SetIsCredit(strUpr(Global::strLRTrim(clTxDtlsCdtDbtInd)) == 'CRDT');
                        clTxDtlsCdtDbtInd = '';
                    }//1184--^--
                    else if(clNtryCdtDbtInd)
                    {
                        clTxDtlsSKS_BR_InboundTran.SetCrDtFlag(clNtryCdtDbtInd);
                        clTxDtlsSKS_BR_InboundTran.SetIsCredit(strUpr(Global::strLRTrim(clNtryCdtDbtInd)) == 'CRDT');
                    }
                    else
                    {
                        clTxDtlsSKS_BR_InboundTran.SetCrDtFlag(clBatchCrDtFlag);
                        clTxDtlsSKS_BR_InboundTran.SetIsCredit(strUpr(Global::strLRTrim(clBatchCrDtFlag)) == 'CRDT');
                    }
                    clTxDtlsDesc = this.DescAppend(clRmtInfUstrd, clTxDtlsDesc);
                    clRmtInfUstrd = '';
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, clAddtlNtryInfStringBuilder.ToString(), true);
                    if(clBtchPmtInfIdXMLNode != null)
                    {
                        clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Btch/PmtInfID:' + clBtchPmtInfIdXMLNode.InnerText, true);
                    }
                    clTxDtlsSKS_BR_InboundTran.AppendDesc(clTxDtlsDesc);
                    clTxDtlsSKS_BR_InboundTran.AppendDescUser(clTxDtlsSKS_BR_InboundTran.GetDesc());
                    if(clTxDtlsSKS_BR_InboundTran.GetDate() == dateNull())
                    {
                        clTxDtlsSKS_BR_InboundTran.SetDate(date2Str(gSKS_BR_InboundStmt.GetDate(),321,2,DateSeparator::None,2,DateSeparator::None, 4));
                    }

                    gSKS_BR_InboundStmt.PushTrans(clTxDtlsSKS_BR_InboundTran);
                    clTxDtlsSKS_BR_InboundTran = null;
                    //the pmtinfid field may be batch level, or txdtls level.  If batch, we want to persist here, so we only clear it if it was a txdtls type of record for insert
                    clPmtInfID = '';
                    clInstrID= '';
                    clAcctSvcrRef = '';
                    clTxDtlsDesc = '';//11554
                    clRsnCd = '';
                    gNtDtTxDtBkPrtryCd = '';

                }
                clTxDtlsAmt = '';
                clTxDtlsCcy = '';
                clPrtryAmt = '';
                clPrtryAmtCCY = '';
                clHasTxDtlsAmt = false;
                clTxDtlsCustRefNbr = '';
                break;
            //If there is summary data, but no individual Transaction Detail lines, enter the summary data as a single trans // 10335 -->
            case 'NTRYDTLS':
                if(clSKS_BR_CAMT053_BankTran_Type == SKS_BR_CAMT053_BankTran_Type::Batch)
                {
                    clNtryDtlsSKS_BR_InboundTran = new SKS_BR_InboundTran();
                    //17724 Add Prtry/CD to the description
                    if(strLen(gNtDtTxDtBkPrtryCd) > 0 && !strContains(clTxDtlsDesc, gNtDtTxDtBkPrtryCd))
                    {
                        clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Prtry/Cd:' + gNtDtTxDtBkPrtryCd);
                    }
                    clNtryDtlsSKS_BR_InboundTran.SetTranType(setTranType());
                    clNtryDtlsSKS_BR_InboundTran.SetDate(clBookgDtDt);
                    clNtryDtlsSKS_BR_InboundTran.SetAmt(SKS_PP_StringFormats::CurrStr2CurrNum(clNtryDtls_BTCH_TtlAmt));
                    clNtryDtlsSKS_BR_InboundTran.SetCurrency(clNtryDtls_BTCH_TtlAmt_Ccy);
                    if(clBatchCrDtFlag)
                    {
                        clNtryDtlsSKS_BR_InboundTran.SetCrDtFlag(clBatchCrDtFlag);
                        clNtryDtlsSKS_BR_InboundTran.SetIsCredit(strUpr(Global::strLRTrim(clBatchCrDtFlag)) == 'CRDT');
                    }
                    else
                    {
                        clNtryDtlsSKS_BR_InboundTran.SetCrDtFlag(clNtryCdtDbtInd);
                        clNtryDtlsSKS_BR_InboundTran.SetIsCredit(strUpr(Global::strLRTrim(clNtryCdtDbtInd)) == 'CRDT');
                    }
                    locPmtInfIdXmlNode = _XmlNode.SelectSingleNode('Btch/PmtInfId');
                    if(locPmtInfIdXmlNode)
                    {
                        clPmtInfID = locPmtInfIdXmlNode.get_InnerText();
                    }
                    clNtryDtlsSKS_BR_InboundTran.SetBankRefNbr(this.getBankRefNbr());
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, clAddtlNtryInfStringBuilder.ToString(), true);
                    if(clBtchPmtInfIdXMLNode != null)
                    {
                        clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'Btch/PmtInfID:' + clBtchPmtInfIdXMLNode.InnerText, true);
                    }
                    clNtryDtlsSKS_BR_InboundTran.AppendDesc(clTxDtlsDesc);
                    clNtryDtlsSKS_BR_InboundTran.AppendDesc(clRmtInfUstrd);//11824
                    clNtryDtlsSKS_BR_InboundTran.AppendDescUser(clNtryDtlsSKS_BR_InboundTran.GetDesc());
                    if(clNtryDtlsSKS_BR_InboundTran.GetDate() == dateNull())
                    {
                        clNtryDtlsSKS_BR_InboundTran.SetDate(date2Str(gSKS_BR_InboundStmt.GetDate(),321,2,DateSeparator::None,2,DateSeparator::None, 4));
                    }
                    clNtryDtlsSKS_BR_InboundTran.SetDDRefNbr(clDDReference);
                    clNtryDtlsSKS_BR_InboundTran.setStatusReason(clRsnCd);                    
                    gSKS_BR_InboundStmt.PushTrans(clNtryDtlsSKS_BR_InboundTran);
                    clNtryDtlsSKS_BR_InboundTran = null;
                    clNtryDtls_BTCH_TtlAmt = '';
                    clNtryDtls_BTCH_TtlAmt_Ccy = '';
                    clTxDtlsDesc = '';
                    clRmtInfUstrd = '';//11824
                    //if we are inserting a batch level, we can discard the pmtinfid.  it has been used.
                    clPmtInfId = '';
                    clInstrID= '';
                    clAcctSvcrRef = '';
                    clDDReference = '';
                    clRsnCd = '';
                    clBtchPmtInfIdXMLNode = null;
                    gNtDtTxDtBkPrtryCd = '';
                }
                break;
            // <-- 10335
            case 'BTCH':
                break;
            case 'NTRY':
                if(gSKS_BR_InboundTran && clSKS_BR_CAMT053_BankTran_Type ==SKS_BR_CAMT053_BankTran_Type::Entry)
                {
                    gSKS_BR_InboundTran.SetTranType(setTranType());
                    gSKS_BR_InboundTran.SetBankRefNbr(this.getBankRefNbr());
                    clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, clAddtlNtryInfStringBuilder.ToString(), true);
                    gSKS_BR_InboundTran.AppendDesc(clTxDtlsDesc);//11554
                    gSKS_BR_InboundTran.AppendDesc(clRmtInfUstrd);//11824
                    gSKS_BR_InboundTran.AppendDescUser(gSKS_BR_InboundTran.GetDesc());
                    //17724 Add Prtry/CD to the description
                    if(strLen(gNtDtTxDtBkPrtryCd) > 0 && !strContains(clTxDtlsDesc, gNtDtTxDtBkPrtryCd))
                    {
                        clTxDtlsDesc = this.DescAppend(clTxDtlsDesc, 'TxDtls/Prtry/Cd:' + gNtDtTxDtBkPrtryCd);
                    }
                    if(gSKS_BR_InboundTran.GetDate() == dateNull())
                    {
                        gSKS_BR_InboundTran.SetDate(date2Str(gSKS_BR_InboundStmt.GetDate(),321,2,DateSeparator::None,2,DateSeparator::None, 4));
                    }
                    //push the completed transaction onto the list.
                    gSKS_BR_InboundStmt.PushTrans(gSKS_BR_InboundTran);
                }
                gTransTypePart1 = '';
                gTransTypePart2 = '';
                gTransTypePart3 = '';
                gPrtryCD = '';
                gSKS_BR_InboundTran.setStatusReason(clRsnCd);
                clRsnCd = '';
                gSKS_BR_InboundTran = null;
                //the following need to be cleard in case the next ntry has txdtls that are full tarns.
                clBookgDtDt = '';
                clBatchCrDtFlag = '';
                clNtryCdtDbtInd = '';
                clTxDtlsDesc = '';//11554
                clPmtInfId = '';//if it hasnt' been cleared previously, clear it now as we are done with this entry.
                clInstrID= '';
                clAcctSvcrRef = '';
                clRmtInfUstrd = '';//11824
                clBatchIsCredit = false;
                // vvv 13463 vvv
                clNtryXmlNode = null;
                // ^^^ 13463 ^^^
                clAddtlNtryInfStringBuilder = null;
                gNtDtTxDtBkPrtryCd = '';
                gSKS_BR_FileFormatTranMapping = null;
                break;
            case 'BAL':
                gEndingBalancePreReqMet = NoYes::No;
                break;
            case 'STMT':
                gSKS_BR_InboundFile.PushStmt(gSKS_BR_InboundStmt);
                gSKS_BR_InboundStmt = null;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>locateTransTypePart1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the domn/cd part of the top-level 3-part tran type
    /// </summary>
    /// <param name = "_NtryXmlNode">pass in the current ntry node of the xml doc</param>
    /// <returns>the inner text of the BkTxCd/Domn/Cd</returns>
    private str locateTransTypePart1(System.Xml.XmlNode _NtryXmlNode)
    {
        System.Xml.XmlNode locDOMNCDXmlNode =_NtryXmlNode.selectSingleNode('BkTxCd/Domn/Cd');
        str rtnval = '';
        if(locDOMNCDXmlNode)
        {
            rtnval = locDOMNCDXmlNode.get_InnerText();
            rtnval = Global::strLRTrim(rtnval);
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locateTransTypePart2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the Fmly/cd part of the top-level 3-part tran type
    /// </summary>
    /// <param name = "_NtryXmlNode">pass in the current ntry node of the xml doc</param>
    /// <returns>the inner text of the BkTxCd/Domn/Fmly/Cd</returns>
    private str locateTransTypePart2(System.Xml.XmlNode _NtryXmlNode)
    {
        System.Xml.XmlNode locFMLYCDXmlNode =_NtryXmlNode.selectSingleNode('BkTxCd/Domn/Fmly/Cd');
        str rtnval = '';

        if(locFMLYCDXmlNode)
        {
            rtnval = locFMLYCDXmlNode.get_InnerText();
            rtnval = Global::strLRTrim(rtnval);
        }
        return rtnval;

    }

]]></Source>
			</Method>
			<Method>
				<Name>locateTransTypePart3</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the BkTxCd/Domn/Fmly/SubFmlyCd part of the top-level 3-part tran type
    /// </summary>
    /// <param name = "_NtryXmlNode">pass in the current ntry node of the xml doc</param>
    /// <returns>the inner text of the BkTxCd/Domn/Fmly/SubFmlyCd</returns>
    str locateTransTypePart3(System.Xml.XmlNode _NtryXmlNode)
    {
        System.Xml.XmlNode locSUBFMLYCDXmlNode =_NtryXmlNode.selectSingleNode('BkTxCd/Domn/Fmly/SubFmlyCd');
        str rtnval = '';

        if(locSUBFMLYCDXmlNode)
        {
            rtnval = locSUBFMLYCDXmlNode.get_InnerText();
            rtnval = Global::strLRTrim(rtnval);
        }
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>