<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_MU_SBM_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_MU_SBM_CSV
/// </summary>
class SKS_EFT_Format_MU_SBM_CSV  extends SKS_EFT_Format
{
    #define.FormatVersion('20230509')

    #define.Separator('|')
    #define.Comma(',')
    str purposeText;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //  Header Record
        this.rec_Header();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //Detail Record
            this.rec_Detail();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    private boolean rec_Header()
    {
        //---------------------------------------------------------------------------------------------
        //1     CORRESPONDENT
        //2     ACCOUNT NUMBER FOR CHARGES
        //3     DEBITING ACCOUNT NUMBER
        //4     APPLICANT NAME
        //5     APPLICANT ADDRESS
        //6     BENEFICIARY NAME
        //7     FOR BANK'S USE
        //8     FOR BANK'S USE
        //9     BENEFICIARY ADDRESS
        //10    BENEFICIARY INTERMEDIARY BANK NAME
        //11    BENEFICIARY BIC
        //12    BENEFIIARY ACCOUNT NO
        //13    CURRENCY
        //14    AMOUNT
        //15    CHARGES
        //16    FOR BANK'S USE
        //17    FOR BANK'S USE
        //18    PURPOSE
        //19    PURPOSE
        //20    FOR BANK'S USE
        //21    EXCHANGE RATE
        //22    FOR BANK'S USE
        //23    INTERMEDIARY BANK CLEARING CODE
        //24    FOR BANK'S USE
        //25    FOR BANK'S USE
        //26    FOR BANK'S USE
        //27   FOR BANK'S USE
        //-------------------------------------------------------------------------------------------------

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     CORRESPONDENT
        sb.Append(this.wrapField('CORRESPONDENT'));

        //2     ACCOUNT NUMBER FOR CHARGES
        sb.Append(this.wrapField('ACCOUNT NUMBER FOR CHARGES'));

        //3     DEBITING ACCOUNT NUMBER
        sb.Append(this.wrapField('DEBITING ACCOUNT NUMBER'));

        //4     APPLICANT NAME
        sb.Append(this.wrapField('APPLICANT NAME'));

        //5     APPLICANT ADDRESS
        sb.Append(this.wrapField('APPLICANT ADDRESS'));

        //6     BENEFICIARY NAME
        sb.Append(this.wrapField('BENEFICIARY NAME'));

        //7     FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //8     FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //9     BENEFICIARY ADDRESS
        sb.Append(this.wrapField('BENEFICIARY ADDRESS'));

        //10    BENEFICIARY INTERMEDIARY BANK NAME
        sb.Append(this.wrapField('BENEFICIARY INTERMEDIARY BANK NAME'));

        //11    BENEFICIARY BIC
        sb.Append(this.wrapField('BENEFICIARY BIC'));

        //12    BENEFICIARY ACCOUNT NO
        sb.Append(this.wrapField('BENEFICIARY ACCOUNT NO'));

        //13    CURRENCY
        sb.Append(this.wrapField('CURRENCY'));

        //14    AMOUNT
        sb.Append(this.wrapField('AMOUNT'));

        //15    CHARGES
        sb.Append(this.wrapField('CHARGES'));

        //16    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //17    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //18    PURPOSE
        sb.Append(this.wrapField('PURPOSE'));

        //19    PURPOSE
        sb.Append(this.wrapField(''));

        //20    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //21    EXCHANGE RATE
        sb.Append(this.wrapField('EXCHANGE RATE'));

        //22    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //23    INTERMEDIARY BANK CLEARING CODE
        sb.Append(this.wrapField('INTERMEDIARY BANK CLEARING CODE'));

       //24    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //25    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //26    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //27    FOR BANK'S USE
        sb.Append(this.wrapField('', false));

        
        this.fileWrite(sb.ToString());
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    private boolean rec_Detail()
    {
        //---------------------------------------------------------------------------------------------
        //1     CORRESPONDENT
        //2     ACCOUNT NUMBER FOR CHARGES
        //3     DEBITING ACCOUNT NUMBER
        //4     APPLICANT NAME
        //5     APPLICANT ADDRESS
        //6     BENEFICIARY NAME
        //7     FOR BANK'S USE
        //8     FOR BANK'S USE
        //9     BENEFICIARY ADDRESS
        //10    BENEFICIARY INTERMEDIARY BANK NAME
        //11    BENEFICIARY BIC
        //12    BENEFIIARY ACCOUNT NO
        //13    CURRENCY
        //14    AMOUNT
        //15    CHARGES
        //16    FOR BANK'S USE
        //17    FOR BANK'S USE
        //18    PURPOSE
        //19    PURPOSE
        //20    FOR BANK'S USE
        //21    EXCHANGE RATE
        //22    FOR BANK'S USE
        //23    INTERMEDIARY BANK CLEARING CODE
        //24    FOR BANK'S USE
        //25    FOR BANK'S USE
        //26    FOR BANK'S USE
        //27   FOR BANK'S USE
        //-------------------------------------------------------------------------------------------------

        str     address, address1;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     CORRESPONDENT
        sb.Append(this.wrapField(''));

        //2     ACCOUNT NUMBER FOR CHARGES
        sb.Append(this.wrapField(''));

        //3     DEBITING ACCOUNT NUMBER
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct));

        //4     APPLICANT NAME
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)));

        //5     APPLICANT ADDRESS
        address  = mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr;
        if(address && mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)
        {
            address += #Comma + mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode;
        }
        if(address && mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity)
        {
            address += #Comma + mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;
        }
        if(address && mSKS_EFT_FileDetail_BankAccount.WOrdPartyState)
        {
            address += #Comma + mSKS_EFT_FileDetail_BankAccount.WOrdPartyState;
        }
        if(address && mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)
        {
            address += #Comma + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);
        }
        sb.Append(this.wrapField(this.CharacterReplacement(address)));

        //6     BENEFICIARY NAME
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1, 35)));

        //7     FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //8     FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //9     BENEFICIARY ADDRESS
        address1  = mSKS_EFT_FileDetail_VendAddress.BeneAddr;
        if(address1 && mSKS_EFT_FileDetail_VendAddress.BeneZipPostal)
        {
            address1 += #Comma + mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
        }
        if(address1 && mSKS_EFT_FileDetail_VendAddress.BeneCity)
        {
            address1 += #Comma + mSKS_EFT_FileDetail_VendAddress.BeneCity;
        }
        if(address1 && mSKS_EFT_FileDetail_VendAddress.BeneState)
        {
            address1 += #Comma + mSKS_EFT_FileDetail_VendAddress.BeneState;
        }
        if(address1 && mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId)
        {
            address1 += #Comma + this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
        sb.Append(this.wrapField(this.CharacterReplacement(address1)));

        //10    BENEFICIARY INTERMEDIARY BANK NAME
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 1, 11)));

        //11    BENEFICIARY BIC
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11)));

        //12    BENEFIIARY ACCOUNT NO
        sb.Append(this.wrapField('/'+mSKS_EFT_FileDetail.DepBankAcct));

        //13    CURRENCY
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //14    AMOUNT
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0)));

        //15    CHARGES
        sb.Append(this.wrapField(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)));

        //16    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //17    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //18    PURPOSE
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        purposeText = msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText;

                    
        sb.Append(this.wrapField(this.CharacterReplacement(purposeText)));

        //19    PURPOSE
        sb.Append(this.wrapField(''));

        //20    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //21    EXCHANGE RATE
        sb.Append(this.wrapField(''));

        //22    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //23    INTERMEDIARY BANK CLEARING CODE
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_Intermediary.IntBankBranch));

        //24    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //25    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //26    FOR BANK'S USE
        sb.Append(this.wrapField(''));

        //27    FOR BANK'S USE
        sb.Append(this.wrapField('', false));
        
        this.fileWrite(sb.ToString());
        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _addSeparator = true)
    {
        if(_addSeparator)
        {
            return _field + #Separator;
        }
        else
        {
            return _field;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_BankAccount
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>