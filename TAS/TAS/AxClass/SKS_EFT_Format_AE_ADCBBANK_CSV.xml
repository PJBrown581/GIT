<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AE_ADCBBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AE_ADCBBANK_CSV  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_AE_ADCBBANK_CSV  extends SKS_EFT_Format
{
    #define.FormatVersion('20220112')
    #define.IFT('IFT')
    #define.EFD('EFD')
    #define.EFI('EFI')

    #define.Separator(';')
    SKS_EB_Vendor   mSKS_EB_Vendor;      //SKS#DevOps:16787
    str emailDetails;                    //SKS#DevOps:16787

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int length = 0,  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            if(length != 0)
            {
                text = subStr(_field, 1, length) + #Separator;
            }
            else
            {
                text = _field + #Separator;
            }
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();

            // Payment Details
            this.rec_PaymentDetails();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetails</Name>
				<Source><![CDATA[
    boolean rec_PaymentDetails()
    {
        //1     Company Reference Number
        //2     Payment Type
        //3     Debit Account Number / IBAN
        //4     Payment Amount
        //5     Payment Currency
        //6     Payment Value Date
        //7     Beneficiary Name
        //8     Beneficiary Address 1
        //9     Beneficiary Address 2
        //10    Beneficiary Address 3
        //11    Beneficiary Account Number
        //12    Beneficiary Bank Name
        //13    Beneficiary Bank Address 1 (Branch)
        //14    Beneficiary Bank Address 2
        //15    Beneficiary Bank Address 3
        //16    Beneficiary Bank SWIFT Code
        //17    Payment Details 1
        //18    Payment Details 2
        //19    Payment Details 3
        //20    Payment Details 4
        //21    Charges Details
        //22    Intermediary Bank Name
        //23    Intermediary Bank Address 1 (Branch)
        //24    Intermediary Bank Address 2
        //25    Intermediary Bank Address 3
        //26    Intermediary Bank SWIFT Code
        //27    Deal Number
        //28    Remittance Code
        //29    Remittance Details
        //30    Bene Bank Sort/ABA/NEFT Code 
        //31    Email Address
        //32    Additional Info 1
        //32    Vendor bank name
        //33    Company entity id
        //34    file generation date
        //35    Consecutive invoice details
        //----------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail, locInvSKS_EFT_FileDetail;
        int totalCnt =0;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
 
        //1     Company Reference Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentVoucher, 20));        //SKS#DevOps:16691

        //2     Payment Type
        sb.Append(this.wrapField(mSKS_EFT_FileFormatPaymSpec.TransactionCode));

        //3     Debit Account Number / IBAN
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 23));

        //4     Payment Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 15));

        //5     Payment Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //6     Payment Value Date
        sb.Append(this.wrapField(strUpr(date2str(mSKS_EFT_FileDetail.PaymentTransDate, 123, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Short, DateSeparator::Hyphen, DateYear::Digits2)))); //SKS#DevOps:16054

        //7     Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35));
        
        if(strLen(mSKS_EFT_FileDetail_VendAddress.BeneName) > 35    && 
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFI)
        {
            //8     Beneficiary Address 1
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_VendAddress.BeneName, 36, 35)), 35));

            //9     Beneficiary Address 2
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));

            //10    Beneficiary Address 3
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 35));
        }
        else
        {
            //8     Beneficiary Address 1
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));

            //9     Beneficiary Address 2
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 35));

            //10    Beneficiary Address 3
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 35));
        }

        //11    Beneficiary Account Number
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 35));

        //12    Beneficiary Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35));

        if(strLen(mSKS_EFT_FileDetail_BenBank.BenBankName) > 35    &&
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFI)
        {   
            //13    Beneficiary Bank Address 1 (Branch)
            sb.Append(this.wrapField(this.CharacterReplacement(subStr(mSKS_EFT_FileDetail_BenBank.BenBankName, 36, 35)), 35));

            //14    Beneficiary Bank Address 2
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), 35));

            //15    Beneficiary Bank Address 3
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), 35));
        }
        else
        {
            //13    Beneficiary Bank Address 1 (Branch)
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch), 35));

            //14    Beneficiary Bank Address 2
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), 35));

            //15    Beneficiary Bank Address 3
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), 35));
        }
        
        //16    Beneficiary Bank SWIFT Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFI)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo, 11));
        }
        else
        {
            sb.Append(this.wrapField());
        }

        //SKS#DevOps:15983
        //17    Payment Details 1(Document Number)
        str locBankTransType = LedgerJournalTrans::findRecId(mSKS_EFT_FileDetail.PaymentLineRecId, false).BankTransType;
        sb.Append(this.wrapField(this.CharacterReplacement(locBankTransType), 35));

        //18    Payment Details 2(Payment Date)
        sb.Append(this.wrapField(strUpr(date2str(mSKS_EFT_FileDetail.PaymentTransDate, 123, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Short, DateSeparator::Hyphen, DateYear::Digits4))));

        //19    Payment Details 3(Payment Currency)
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode, 35));

        //20    Payment Details 4(Payment Amount)
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 35));

        //21    Charges 
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId)), 3));

        //22    Intermediary Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 35));

        //23    Intermediary Bank Address 1 (Branch)
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch), 35));

        //24    Intermediary Bank Address 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankAddr), 35));

        //25    Intermediary Bank Address 3
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankCity), 35));

        //26    Intermediary Bank SWIFT Code
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankSwift), 11));

        //27    Deal Number
        sb.Append(this.wrapField());

        //28    Remittance Code
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RemittanceCode', mSKS_EFT_FileDetail.RecId)), 3));

        //29    Remittance Details
        sb.Append(this.wrapField('REF'));

        //30    Bene Bank Sort/ABA/NEFT Code
        sb.Append(this.wrapField(''));

        //-->SKS#DevOps:15983
        //31    Email Address
        this.getEmail();            //SKS#DevOps:16787
        sb.Append(this.wrapField(emailDetails, 100));

        //32 vendor bank name
        VendBankAccount locVendBankAccount;
        select firstonly locVendBankAccount where locVendBankAccount.AccountID == mSKS_EFT_FileDetail.DepBankAccountId
            && locVendBankAccount.AccountNum == mSKS_EFT_FileDetail.DepBankAcct;

        sb.Append(this.wrapField(locVendBankAccount.Name, 35));

        
        //33 account company
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.AccountCompany, 35));

        //34 File genaration date
        sb.Append(this.wrapField(strUpr(date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 123, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Short, DateSeparator::Hyphen, DateYear::Digits2)))); //SKS#DevOps:16054

        select count(RecId) from locInvSKS_EFT_FileDetail group by locInvSKS_EFT_FileDetail.PaymentJournalNum where locInvSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
        totalCnt = int642int(locInvSKS_EFT_FileDetail.RecId);

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            //35.INVOICE NUMBER
            sb.Append(this.wrapField(invSKS_EFT_FileDetail.InvoiceNumber, 25));

            //36.INVOICE AMOUNT
            sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0),25));

            //37.INVOICE DATE
            sb.Append(this.wrapField(strUpr(date2str(invSKS_EFT_FileDetail.InvoiceDate, 123, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Short, DateSeparator::Hyphen, DateYear::Digits2)),25));
        }
        //<--SKS#DevOps:15983
        //SKS#DevOps:16054 -->
        for(int i = totalCnt; i <= 14; i++)
        {
            //35.INVOICE NUMBER
            sb.Append(this.wrapField());

            //36.INVOICE AMOUNT
            sb.Append(this.wrapField());

            //37.INVOICE DATE
            if(i == 14)
            {
                sb.Append(this.wrapField('', 0, false));
            }
            else
            {
                sb.Append(this.wrapField());
            }
        }
        //<-- SKS#DevOps:16054

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    private str getEmail()
    {
        VendTable vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;

        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select firstonly DirPartyContactInfoview
                where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                    &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
            if(DirPartyContactInfoView.Locator)
            {
                emailDetails = DirPartyContactInfoView.Locator;
            }
        }
        if(mSKS_EB_Vendor.EM2Addr)
        {
            emailDetails += ';' + mSKS_EB_Vendor.EM2Addr;
        }

        if(mSKS_EB_Vendor.EM3Addr)
        {
            emailDetails += ';' + mSKS_EB_Vendor.EM3Addr;
        }
        if(mSKS_EB_Vendor.EM4Addr)
        {
            emailDetails += ';' + mSKS_EB_Vendor.EM4Addr;
        }

        return emailDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>