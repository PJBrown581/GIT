<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_TH_BBL_ICASH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_TH_BBL_ICASH extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_TH_BBL_ICASH extends SKS_EFT_Format
{
    #define.FormatVersion('20221108')
    #define.Delimiter('~')
    #define.SMART('SMART')
    #define.DCREDIT('DIR CREDIT')
    #define.BAHTNET('BAHTNET')
    #define.PAYROLL('PAYROLL')

    int                             creditSequence;
    int64                           InvoiceTotal;
    AmountMST                       totalWHTTaxAmt;
    AmountMST                       mTaxWithholdAmount;
    AmountMST                       TotalCredits;
    SKS_EFT_TH_WithHoldingTaxFields mSKS_EFT_TH_WithHoldingTaxFields;
    SKS_EB_Vendor                   mSKS_EB_Vendor;
    LedgerJournalTrans              mLedgerJournalTrans;
    int                             mWHTSerialNumber;
    str                             mTaxWithholdSlipNum_TH;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        TaxWithholdTrans   lTaxWithholdTrans;
        mSKS_EFT_TH_WithHoldingTaxFields = new SKS_EFT_TH_WithHoldingTaxFields();
    
        // Header
        this.rec_Header();
    
        while(mSKS_EFT_FileDetail)
        {
            //Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EFT_THWitholdingTaxFields
            mSKS_EFT_TH_WithHoldingTaxFields.getSKS_EFT_TH_WithHoldingTaxFields(mSKS_EFT_FileDetail.PaymentLineRecId);
    
            // Get Remittance Information
            this.getRemittanceAddress(false);
    
            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();
    
            //Get mLedgerJournalTrans
            this.set_mLedgerJournalTrans();
    
            // Details
            this.rec_Details();
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #PAYROLL)
            {
                while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                {
                    if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                    {
                        while select lTaxWithholdTrans where lTaxWithholdTrans.VendTransInvoiceId == invSKS_EFT_FileDetail.VendTransRecId
                        {
                            this.rec_WHTDetails(invSKS_EFT_FileDetail, lTaxWithholdTrans);
                        }
    
                        this.rec_InvoiceDetails(invSKS_EFT_FileDetail);
                    }
                }
            }
            next mSKS_EFT_FileDetail;
        }
    
        //Footer
        this.rec_Footer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_POInfo</Name>
				<Source><![CDATA[
    private str get_POInfo(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        VendInvoiceJour vendInvoiceJour;
        Container companyInfo;
        str PONum = '';
    
        companyInfo += _invSKS_EFT_FileDetail.InvoiceCompany;
    
        // See if PO exists
        if(conPeek(companyInfo, 1) != '')
        {
            select firstOnly crossCompany:companyInfo PurchId, InvoiceAccount, InvoiceDate, InvoiceId from vendInvoiceJour where
                vendInvoiceJour.InvoiceAccount == _invSKS_EFT_FileDetail.AccountNum &&
                vendInvoiceJour.InvoiceDate == _invSKS_EFT_FileDetail.InvoiceDate &&
                vendInvoiceJour.InvoiceId == _invSKS_EFT_FileDetail.InvoiceNumber &&
                vendInvoiceJour.PurchId != '';
    
            if(vendInvoiceJour)
            {
                PONum = vendInvoiceJour.PurchId;
    
            }
        }
        return this.CharacterReplacement(PONum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressContactInfo</Name>
				<Source><![CDATA[
    protected str getAddressContactInfo(VendTable _VendTable, RemittanceLocation _WBeneRemittanceLocation, LogisticsElectronicAddressMethodType _Type)
    {
        DirPartyContactInfoview DirPartyContactInfoview;
    
        select * from DirPartyContactInfoview
                where DirPartyContactInfoview.Party == _VendTable.Party
                   && DirPartyContactInfoview.IsPrimary == true
                   && DirPartyContactInfoview.Type == _Type;
    
        return DirPartyContactInfoview.Locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    private str getEmail()
    {
        VendTable vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;
    
        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select * from DirPartyContactInfoview
                    where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                        &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
            if(DirPartyContactInfoView.Locator)
            {
                return DirPartyContactInfoView.Locator;
            }
        }
        else if(mSKS_EB_Vendor.EM2Addr)
        {
            return mSKS_EB_Vendor.EM2Addr;
        }
        else if(mSKS_EB_Vendor.EM3Addr)
        {
            return mSKS_EB_Vendor.EM3Addr;
        }
        else if(mSKS_EB_Vendor.EM4Addr)
        {
            return mSKS_EB_Vendor.EM4Addr;
        }
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistration</Name>
				<Source><![CDATA[
    private str getTaxRegistration()
    {
        CompanyInfo     lCompanyInfo;
        str ret;
    
        select firstonly CoRegNum from lCompanyInfo where lCompanyInfo.DataArea == curext();
        ret = lCompanyInfo.CoRegNum;
    
        return this.CharacterReplacement(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdValue</Name>
				<Source><![CDATA[
    private TaxWithholdValue getTaxWithholdValue(TaxWithholdCode _TaxWithholdCode)
    {
        TaxWithholdData lTaxWithholdData;
    
            select TaxWithholdValue from lTaxWithholdData
                where lTaxWithholdData.TaxWithholdCode == _TaxWithholdCode;
    
        return lTaxWithholdData.TaxWithholdValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWHTCounts</Name>
				<Source><![CDATA[
    private void getWHTCounts()
    {
        TaxWithholdTrans lTaxWithholdTrans;
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
    
        while select InvoiceNumber, VendTransRecId, AccountCompany, RecordSummaryRecId
                from lSKS_EFT_FileDetail
               where lSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId &&
                     lSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            changeCompany(lSKS_EFT_FileDetail.AccountCompany)
            {
                select count(VendTransInvoiceId),
                       sum(TaxWithholdAmount),
                       TaxWithholdSlipNum_TH
                  from lTaxWithholdTrans where lTaxWithholdTrans.VendTransInvoiceId == lSKS_EFT_FileDetail.VendTransRecId;
    
                InvoiceTotal += lTaxWithholdTrans.VendTransInvoiceId;
                totalWHTTaxAmt += lTaxWithholdTrans.TaxWithholdAmount;
                mTaxWithholdSlipNum_TH = lTaxWithholdTrans.TaxWithholdSlipNum_TH;
            }
        }
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details()
    {
        //---------------------------------------------------------
        //No.   Field Name                           Type    Length
        // 1    Record Type                             A         3
        // 2    Company Id                              A        20
        // 3    Credit Sequence Number                  N         6
        // 4    Product code                            A         5
        // 5    Beneficiary Account Number              A        25
        // 6    Value Date                              N         8
        // 7    Value Time                              N         6
        // 8    Credit Currency                         A         3
        // 9    Internal Reference                      A        18
        //10    Pre-advice date                         N         8
        //11    Delivery Method                         N         2
        //12    Dispatch To                             N         2
        //13    Cheque deposit Required                 A         1
        //14    Copy ID card Present                    A         1
        //15    WHT Present                             A         1
        //16    Invoice Details Present                 A         1
        //17    VAT Present                             A         1
        //18    Receipt Present                         A         1
        //19    Credit Advice Required                  A         1
        //20    Cheque drawn on location                A         4
        //21    Dispatch Branch Code                    A         4
        //22    WHT Form Type                           N         1
        //23    WHT serial no.                          A        14
        //24    WHT book no.                            A        14
        //25    WHT Running no.                         N        10
        //26    BahtNet Payment Type code               A         3
        //27    BOT service type of payment             A         2
        //28    No. of WHT Details                      N         2
        //29    Total WHT Amount                        N        16
        //30    No. of Invoice Details                  N         6
        //31    Total Invoice Amount                    N        16
        //32    Total Discount Amount                   N        16
        //33    Payee Charge Code                       A         3
        //34    Payment Net amount (Credit amount)      N        16
        //35    WHT Pay Type                            N         1
        //36    WHT Remark                              A        40
        //37    WHT Deduct Date                         N         8
        //38    Receiving Bank Code                     N         3
        //39    Receiving Branch Code                   N         4
        //40    WHT Signatory                           A         1
        //41    Service Code                            A        30
        //42    Beneficiary Code                        N        30
        //43    Payee1 ID Card                          N        15
        //44    Payee Name                              N       100
        //45    Payee Address 1                         A        70
        //46    Payee Address 2                         A        70
        //47    Payee Address 3                         A        70
        //48    Payee Address 4                         A        70
        //49    Dispatch Address 1                      A        70
        //50    Dispatch Address 2                      A        70
        //51    Dispatch Address 3                      A        70
        //52    Dispatch Address 4                      A        70
        //53    Payee Tax ID                            A        15
        //54    Payee Fax Number                        A        20
        //55    Payee Mobile number                     A        20
        //56    Payee E-Mail Address                    A        70
        //---------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str Address;
        str value, mailHandling, Fax, Email, Phone;
        TaxWithholdTrans lTaxWithholdTrans;
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        VendTable lVendTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        VendBankAccount lVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);
        creditSequence++;
        this.getWHTCounts();
    
        // 1    Record Type                             A         3
        sb.Append(this.wrapField('003'));
    
        // 2    Company Id                              A        20
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.FileACHCompanyId));
    
        // 3    Credit Sequence Number                  N         6
        sb.Append(this.wrapField(int2str(creditSequence)));
    
        // 4    Product code                            A         5
        str productCode;

        productCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ProductCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SMART:
                value = this.CharacterReplacement(productCode);
                break;
            case #DCREDIT:
                value = 'DCB02';
                break;
            case #BAHTNET:
                value = 'BST01';
                break;
            case #PAYROLL:
                value = 'PYR01';
                break;
        }
        sb.Append(this.wrapField(value));
    
        // 5    Beneficiary Account Number              A        25
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));
    
        // 6    Value Date                              N         8
        sb.Append(this.wrapField(date2Str(mSKS_EFT_FileDetail.EffectiveDate,123,DateDay::Digits2,DateSeparator::None,DateMonth::Digits2,DateSeparator::None,DateYear::Digits4,DateFlags::None)));
    
        // 7    Value Time                              N         6
        sb.Append(this.wrapField(''));
    
        // 8    Credit Currency                         A         3
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BAHTNET)
        {
            sb.Append(this.wrapField('THB'));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));
        }
    
        // 9    Internal Reference                      A        18
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 1, 18)));
    
        //10    Pre-advice date                         N         8
        sb.Append(this.wrapField(''));
    
        //11    Delivery Method                         N         2
        sb.Append(this.wrapField(''));
    
        //12    Dispatch To                             N         2
        sb.Append(this.wrapField(''));
    
        //13    Cheque deposit Required                 A         1
        sb.Append(this.wrapField(''));
    
        //14    Copy ID card Present                    A         1
        sb.Append(this.wrapField(''));
    
        //15    WHT Present                             A         1
        sb.Append(this.wrapField(''));
    
        //16    Invoice Details Present                 A         1
        sb.Append(this.wrapField(''));
    
        //17    VAT Present                             A         1
        sb.Append(this.wrapField(''));
    
        //18    Receipt Present                         A         1
        sb.Append(this.wrapField(''));
    
        //19    Credit Advice Required                  A         1
        mailhandling = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BeneAdviceType', mSKS_EFT_FileDetail.RecId));
        if(mailhandling == '')
        {
            sb.Append(this.wrapField('N'));
        }
        else
        {
            sb.Append(this.wrapField(mailhandling));
        }
    
        //20    Cheque drawn on location                A         4
        sb.Append(this.wrapField(''));
    
        //21    Dispatch Branch Code                    A         4
        sb.Append(this.wrapField(''));
    
        //22    WHT Form Type                           N         1
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYROLL)
        {
            sb.Append(this.wrapField(''));
        }
        else
        {
            switch(lVendTable.TaxWithholdGroup)
            {
                case 'PND4':
                    sb.Append(this.wrapField('4'));
                    break;
                case 'PND53':
                    sb.Append(this.wrapField('7'));
                    break;
                default:
                    sb.Append(this.wrapField(''));
                    break;
            }
        }
    
        //23    WHT serial no.                          A        14
        sb.Append(this.wrapField(''));
    
        //24    WHT book no.                            A        14
        sb.Append(this.wrapField(''));
    
        //25    WHT Running no.                         N        10
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYROLL)
        {
            sb.Append(this.wrapField(''));
        }
        else
        {
            sb.Append(this.wrapField(mTaxWithholdSlipNum_TH));
        }
    
        //26    BahtNet Payment Type code               A         3
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #BAHTNET)
        {
            if(mRemittanceCountryRegionId == 'TH')
            {
                sb.Append(this.wrapField('RFT'));
            }
            else
            {
                sb.Append(this.wrapField('NFT'));
            }
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //27    BOT service type of payment             A         2
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SMART)
        {
            sb.Append(this.wrapField(this.CharacterReplacement(mLedgerJournalTrans.BankCentralBankPurposeCode)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //28    No. of WHT Details                      N         2
        sb.Append(this.wrapField(int642str(InvoiceTotal)));
    
        //29    Total WHT Amount                        N        16
        sb.Append(this.wrapField(SKS_PP_StringFormats::strMoney(lTaxWithholdTrans.TaxWithholdAmount, 16)));
    
        //30    No. of Invoice Details                  N         6
        select count(RecId) from tmpSKS_EFT_FileDetail
                                   where tmpSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                                      && tmpSKS_EFT_FileDetail.InvoiceNumber != '';
        sb.Append(this.wrapField(int642Str(tmpSKS_EFT_FileDetail.RecId)));
    
        //31    Total Invoice Amount                    N        16
        sb.Append(this.wrapField(SKS_PP_StringFormats::strMoney(mLedgerJournalTrans.AmountCurDebit - this.TotalDiscount(), 16)));
    
        //32    Total Discount Amount                   N        16
        sb.Append(this.wrapField(SKS_PP_StringFormats::strMoney(-1 * this.TotalDiscount(), 16)));
    
        //33    Payee Charge Code                       A         3
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId))));
    
        //34    Payment Net amount (Credit amount)      N        16
        TotalCredits += mLedgerJournalTrans.AmountCurDebit;
        sb.Append(this.wrapField(SKS_PP_StringFormats::strMoney(mLedgerJournalTrans.AmountCurDebit, 16)));
    
        //35    WHT Pay Type                            N         1
        switch(mSKS_EFT_TH_WithHoldingTaxFields.PaymentGrossUpType())
        {
            case 0:
                sb.Append(this.wrapField('1'));
                break;
            case 1:
                sb.Append(this.wrapField('2'));
                break;
            case 2:
                sb.Append(this.wrapField('3'));
                break;
            case 10:
                sb.Append(this.wrapField('4'));
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }
    
        //36    WHT Remark                              A        40
        if(mSKS_EFT_TH_WithHoldingTaxFields.PaymentGrossUpType() == 4)
        {
            value = mSKS_EFT_TH_WithHoldingTaxFields.PaymentGrossUpOtherDetail();
            sb.Append(this.wrapField(subStr(strReplace(this.CharacterReplacement(value), '\r', ' '), 1, 40)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //37    WHT Deduct Date                         N         8
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYROLL)
        {
            sb.Append(this.wrapField(''));
        }
        else
        {
            value = date2str(mSKS_EFT_File.EffectiveDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4,DateFlags::None);
            sb.Append(this.wrapField(value));
        }
    
        //38    Receiving Bank Code                     N         3
        sb.Append(this.wrapField(lVendBankAccount.BankGroupId));
    
        //39    Receiving Branch Code                   N         4
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));
    
        //40    WHT Signatory                           A         1
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYROLL)
        {
            sb.Append(this.wrapField(''));
        }
        else
        {
            sb.Append(this.wrapField('B'));
        }
    
        //41    Service Code                            A        30
        sb.Append(this.wrapField(''));
    
        //42    Beneficiary Code                        N        30
        sb.Append(this.wrapField(''));
    
        //43    Payee1 ID Card                          N        15
        sb.Append(this.wrapField(''));
    
        //44    Payee Name                              N       100
        sb.Append(this.wrapField(mRemittanceName));
    
        //45    Payee Address 1                         A        70
        sb.Append(this.wrapField(mRemittanceAdrLine1));
    
        //46    Payee Address 2                         A        70
        sb.Append(this.wrapField(mRemittanceAdrLine2));
    
        //47    Payee Address 3                         A        70
        Address = mRemittanceCity;
        if(mRemittanceCountryRegionId != '')
        {
            if(Address != '')
            {
                Address += ' ';
            }
            Address += mRemittanceCountryRegionId;
        }
    
        if(mRemittanceState != '')
        {
            if(Address != '')
            {
                Address += ' ';
            }
            Address += mRemittanceState;
        }
    
        if(mRemittanceZipCode != '')
        {
            if(Address != '')
            {
                Address += ' ';
            }
            Address += mRemittanceZipCode;
        }
        sb.Append(this.wrapField(subStr(Address, 1, 70)));
    
        //48    Payee Address 4                         A        70
        sb.Append(this.wrapField(subStr(Address, 71, 70)));
    
        //49    Dispatch Address 1                      A        70
        sb.Append(this.wrapField(''));
    
        //50    Dispatch Address 2                      A        70
        sb.Append(this.wrapField(''));
    
        //51    Dispatch Address 3                      A        70
        sb.Append(this.wrapField(''));
    
        //52    Dispatch Address 4                      A        70
        sb.Append(this.wrapField(''));
    
        //53    Payee Tax ID                            A        15
        sb.Append(this.wrapField(subStr(mSKS_EFT_TH_WithHoldingTaxFields.TaxRegNum(), 1, 15)));
    
        if(mailhandling != '')
        {
            switch(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DeliveryMethod', mSKS_EFT_FileDetail.RecId)))
            {
                case 'Fax':
                    Fax = this.getAddressContactInfo(lVendTable, mSKS_EFT_VendorPaym.WBeneRemittanceLocation, LogisticsElectronicAddressMethodType::Fax);
                    break;
                case 'Phone':
                    Phone = this.getAddressContactInfo(lVendTable, mSKS_EFT_VendorPaym.WBeneRemittanceLocation, LogisticsElectronicAddressMethodType::Phone);
                    break;
                case 'Email':
                    Email = this.getEmail();
                    break;
            }
        }
        //54    Payee Fax Number                        A        20
        sb.Append(this.wrapField(Fax));
    
        //55    Payee Mobile number                     A        20
        sb.Append(this.wrapField(Phone));
    
        //56    Payee E-Mail Address                    A        70
        sb.Append(this.wrapField(Email, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Footer</Name>
				<Source><![CDATA[
    private boolean rec_Footer()
    {
        //---------------------------------------------------------
        //No.   Field Name                           Type    Length
        // 1    Record Identifier                       A         3
        // 2    Total No. of Credits                    N         6
        // 3    Total Amount                            N        16
        //---------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    Record Identifier                       A         3
        sb.Append(this.wrapField('100'));
    
        // 2    Total No. of Credits                    N         6
        sb.Append(this.wrapField(int2str(creditSequence)));
    
        // 3    Total Amount                            N        16
        sb.Append(this.wrapfield(SKS_PP_StringFormats::strMoney(TotalCredits, 16), false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    public boolean rec_Header()
    {
        //------------------------------------------------
        //No.   Field Name                  Type    Length
        // 1    Record Type                    A         3
        // 2    Company Id                     A        20
        // 3    Company Tax Id                 A        15
        // 4    Company Account                A        20
        // 5    Customer Batch Reference       A        25
        // 6    Batch Broadcast message        A         5
        // 7    File Date                      N         8
        // 8    File Timestamp                 N         6
        //------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        date FileDate = utcDateTime2SystemDateTime(DateTimeUtil::getSystemDateTime());
    
    
        // 1    Record Type        A         3
        sb.Append(this.wrapField('001'));
    
        // 2    Company Id                     A        20
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.FileACHCompanyId));
    
        // 3    Company Tax Id                 A        15
        sb.Append(this.wrapField(subStr(this.getTaxRegistration(), 1, 15)));
    
        // 4    Company Account                A        20
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 20)));
    
        // 5    Customer Batch Reference       A        25
        sb.Append(this.wrapField(subStr(mSKS_EFT_File.FileNbr, 1, 25)));
    
        // 6    Batch Broadcast message        A         5
        sb.Append(this.wrapField(''));
    
        // 7    File Date                      N         8
        sb.Append(this.wrapField(date2Str(FileDate,123,DateDay::Digits2,DateSeparator::None,DateMonth::Digits2,DateSeparator::None,DateYear::Digits4, DateFlags::None)));
    
        // 8    File Timestamp                 N         6
        sb.Append(this.wrapField(SKS_PP_StringFormats::strTimeHHMMSS(), false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_InvoiceDetails</Name>
				<Source><![CDATA[
    public boolean rec_InvoiceDetails(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //-------------------------------------------------------------
        //No.   Field Name                               Type    Length
        // 1    Record Type                                 A         3
        // 2    Invoice Number + PO Number + Invoice Date   A        20
        // 3    Invoice Amount                              N        16
        // 4    Invoice Description                         A        50
        // 5    VAT Amount                                  A        16
        // 6    Internal Reference                          A        20
        //---------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str Rec2 = _invSKS_EFT_FileDetail.InvoiceNumber;
        str PONum = this.get_POInfo(_invSKS_EFT_FileDetail);
    
        // 1    Record Type                                 A         3
        sb.Append(this.wrapField('006'));
    
        // 2    Invoice Number + PO Number + Invoice Date   A        20
        Rec2 += '_' + PONum + '_' + date2Str(_invSKS_EFT_FileDetail.InvoiceDate,123,DateDay::Digits2,DateSeparator::None,DateMonth::Digits2,DateSeparator::None,DateYear::Digits4,DateFlags::None);
    
        sb.Append(this.wrapField(Rec2));
    
        // 3    Invoice Amount                              N        16
        sb.Append(this.wrapField(SKS_PP_StringFormats::strMoney(-1 * _invSKS_EFT_FileDetail.InvoiceSettleAmountCur - mTaxWithholdAmount, 16)));
        mTaxWithholdAmount = 0;
    
        // 4    Invoice Description                         A        50
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceTransactionTxt), 1, 50)));
    
        // 5    VAT Amount                                  A        16
        sb.Append(this.wrapField(''));
    
        // 6    Internal Reference                          A        20
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 1, 20), false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_WHTDetails</Name>
				<Source><![CDATA[
    public boolean rec_WHTDetails(SKS_EFT_FileDetail _invSKS_EFT_FileDetail, TaxWithholdTrans _TaxWithholdTrans)
    {
        //-------------------------------------------------------------
        //No.   Field Name                               Type    Length
        // 1    Record Type                                 A         3
        // 2    Internal Reference                          A        20
        // 3    Credit Sequence No                          N         6
        // 4    WHT Amount                                  A        16
        // 5    WHT Income Type                             A         2
        // 6    WHT Deduct Rate                             N         4
        // 7    Income Type Amount                          N        16
        //-------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str IncomeType = SKS_PP_StringFormats::strFill(2, mLedgerJournalTrans.BankCentralBankPurposeCode, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        TaxWithholdGroupData lTaxWithholdGroupData;
        AmountMST deductRate;
        mWHTSerialNumber++;
    
        // 1    Record Type                                 A         3
        sb.Append(this.wrapField('005'));
    
        // 2    Internal Reference                          A        20
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 1, 20)));
    
        // 3    Credit Sequence No                          N         6
        sb.Append(this.wrapField(SKS_PP_StringFormats::strFill(6, int2str(mWHTSerialNumber),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)));
    
        // 4    WHT Amount                                  A        16
        mTaxWithholdAmount += _TaxWithholdTrans.TaxWithholdAmount;
        sb.Append(this.wrapField(SKS_PP_StringFormats::strMoney(_TaxWithholdTrans.TaxWithholdAmount, 16)));
    
        // 5    WHT Income Type                             A         2
        if(IncomeType == '00')
        {
            IncomeType = '';
        }
        sb.Append(this.wrapField(IncomeType));
    
        // 6    WHT Deduct Rate                             N         4
        select firstonly TaxWithholdCode from lTaxWithholdGroupData where lTaxWithholdGroupData.TaxWithholdGroup == mLedgerJournalTrans.TaxWithholdGroup;
        deductRate = this.getTaxWithholdValue(lTaxWithholdGroupData.TaxWithholdCode);
    
        sb.Append(this.wrapField(SKS_PP_StringFormats::strMoney(deductRate, 4)));
    
        // 7    Income Type Amount                          N        16
        sb.Append(this.wrapField(num2str(_TaxWithholdTrans.InvoiceAmount, 0, 2, 0, 0),false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>set_mLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void set_mLedgerJournalTrans()
    {
        select * from mLedgerJournalTrans where mLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TotalDiscount</Name>
				<Source><![CDATA[
    private AmountMST TotalDiscount()
    {
        SKS_EFT_FileDetail lSKS_EFT_FileDetail;
    
        select sum(InvoiceDiscAmountPmtCur) from lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail.RecId;
    
        return lSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _Delimit = true)
    {
        if(_Delimit)
        {
            return _field + #Delimiter;
        }
        else
        {
            return _field;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>