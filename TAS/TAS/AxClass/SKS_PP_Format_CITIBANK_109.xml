<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_CITIBANK_109</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_CITIBANK_109 extends SKS_PP_Format_BankGroup
{
    BankAccountID gPrevBankAccountID;
    SKS_PP_Bank gSKS_PP_Bank;
    int gCheckCount;
    real gTotalAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        //  Detail
        //  D                       Position 1
        //  ID                      Position  2-4               “001”
        //  Bank Account            Position 5-14               Zero Padded 10 characters
        //  Space                   Position 15- 21             padding
        //  Void Flag               Positon 22                  V if void else Blank
        //  Check Num               Position 23 to 32           Zero Padded
        //  Amount                  Position 33 to 42           zero padded. Implied 2 digit decimal.
        //  Date                    Position 43 to 50           YYYYMMDD
        //  Space                   Position 51 to 109
        int Mult;
        str ItemType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        //Convert negative void numbers to positives
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = 'V';
            If (mSKS_PP_FileDetail.chkcuryamt < 0)
            {
                Mult = -1;
            }
    
        }
        else
        {
            gCheckCount++;
            gTotalAmount = GTotalAmount + mSKS_PP_FileDetail.chkcuryamt;
            ItemType = ' ';
        }
        sb.Append('D');
        sb.Append('001');
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(7,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(ItemType);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.chkcuryamt, 10));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(mSKS_PP_FileFormat.RecordLen - 50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatHeader</Name>
				<Source><![CDATA[
    protected str txtFormatHeader()
    {
    
        // CITIBANK - 109
        //  Header
        //  H               Position 1              - One record PER file.
        //  “MagnaCare ”    Position 2-11
        //  Space(20)       Position 12 – 31
        //  Date            Position 32 - 39        YYYYMMDD
        //  Space(40)       Position  40-79
        //  Space           80-109                  filler to meet line lenght requirement
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        if(!gSKS_PP_Bank || gSKS_PP_Bank.BankAccountId != mSKS_PP_FileDetail.ChkBankAcct)
        {
            Select crosscompany gSKS_PP_Bank
                where gSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct
                    && gSKS_PP_Bank.dataAreaId == mSKS_PP_FileDetail.ChkCpnyId;
        }
    
        sb.Append('H');
        sb.Append(SKS_PP_StringFormats::strFill(10, gSKS_PP_Bank.PP01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(SKS_PP_StringFormats::strFill(mSKS_PP_FileFormat.RecordLen - 39, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
    
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    protected str txtGroupHeader()
    {
        gTotalAmount = 0;
        gCheckCount = 0;
        gPrevBankAccountID = mSKS_PP_FileDetail.BnkBankAcct;
    
    
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    protected str txtGroupTrailer()
    {
    /*
        Trailer
        Record Type             Position 1          "T" for Totals Record. One for each bank account.
        ID                      Position  2-4       “001”
        Bank Account            Position 5-14       Zero Padded 10 characters
        Space 8                 Position 15-22
        Total Count             Position 23-32 Total check count for this bank account. Zero Padded
        Total Dollar Amount     Position 33-42 Implied Decimal, Two Positions, Right Justified – Zero Padded.
        Space                       43-109
    */
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('T');
        sb.Append('001');
        sb.Append(SKS_PP_StringFormats::strFill(10, gPrevBankAccountID, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(gCheckCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(gTotalAmount,10));
        sb.Append(SKS_PP_StringFormats::strFill(mSKS_PP_FileFormat.RecordLen - 42, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>