<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileWFARRMF</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Reads wells fargo accounts receivable Remittance Manager Format files
/// </summary>
class SKS_LB_ReadFileWFARRMF extends SKS_LB_ReadFile
{
    TextStreamIo WFARRMFFile;
    SKS_EB_FileHub fileHub;
    SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;
    str curline;
    List FieldFormatsListDetail, FieldFormatsListDetailSupp, FieldFormatsListPaymCodeSupp, FieldFormatsListSuppVarAdd, FieldFormatsListBatch, FieldFormatsListBatchTrailer;
    #define.RecordCodeFileHeader(1)
    #define.RecordCodeBatchHeader(5)
    #define.RecordCodeDetail(6)
    #define.RecordCodePaymentTran(50)
    #define.RecordCodePaymRev(53)
    #define.RecordCodeCredMemo(55)
    #define.RecordCodeReturnCreditMemo(56)
    #define.RecordCodeSupp(7)
    #define.RecordCodeDetailSupp(70)
    #define.RecordCodePaymCodeSupp(71)
    #define.RecordCodeSuppVarAddenda(77)
    #define.RecordCodeBatchTrailer(8)
    #define.RecordCodeFileTrailer(9)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFileHub</Name>
				<Source><![CDATA[
    private SKS_EB_FileHub initFileHub(SKS_EB_FileHub _fileHub = fileHub)
    {
        fileHub = _fileHub;

        if(!fileHub)
        {
            SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;

            if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
            {
                SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;
            }

            fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

            if (Fileformat.CodePage)
            {
                fileHub.parmEncoding(Fileformat.CodePage);
            }
        }
      
        return fileHub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///Calls finalize
    /// </summary>
    public void closeFile()
    {
        WFARRMFFile.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Get_Current_Line</Name>
				<Source><![CDATA[
    str Get_Current_Line()
    {
        return curline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    void openFile(boolean _Relocation = false)
    {
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }

        fileHub.runFileInquire(Filename);
        if(!_Relocation)
        {
            if(!fileHub.attrFileExists())
            {
                //The file %1 does not exist.
                error(strfmt("@SYS62207", fileName));
                return;
            }
        }
        fileHub.runFileLoad(Filename);
        fileHub.StreamInit();

        new FileIOPermission(fileName, 'R').assert();
    
        if (Fileformat.CodePage)
        {
            WFARRMFFile = TextStreamIo::constructForRead(fileHub.StreamGet(), Fileformat.CodePage);
        }
        else
        {
            WFARRMFFile = TextStreamIo::constructForRead(fileHub.StreamGet());
        }

        if (WFARRMFFile == null || WFARRMFFile.status() != IO_Status::Ok)
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", fileName));
        }
        WFARRMFFile.inFieldDelimiter('\n');
        WFARRMFFile.inRecordDelimiter('\n');
    
        if(!_Relocation)
        {
            // Decide the minimum line length that is needed to satisfy the format
            select maxof(FieldEnd) from FieldFormat where FieldFormat.FormatId == formatId;
            FieldFormatsListDetail = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::Detail
            {
                FieldFormatsListDetail.addEnd(FieldFormat);
            }
    
            FieldFormatsListDetailSupp = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::DetailSupp
            {
                FieldFormatsListDetailSupp.addEnd(FieldFormat);
            }
    
            FieldFormatsListPaymCodeSupp = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::PaymCodeSupp
            {
                FieldFormatsListPaymCodeSupp.addEnd(FieldFormat);
            }
    
            FieldFormatsListSuppVarAdd = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::SuppVarAdd
            {
                FieldFormatsListSuppVarAdd.addEnd(FieldFormat);
            }
    
            FieldFormatsListBatch = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
                where fieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_FormatDetType::BatHeader
            {
                FieldFormatsListBatch.addEnd(FieldFormat);
            }
    
            FieldFormatsListBatchTrailer = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
                where FieldFormat.formatid == Fileformat.FormatID && FieldFormat.FormatDetType == SKS_LB_FormatDetType::BatTrailer
            {
                FieldFormatsListBatchTrailer.addEnd(FieldFormat);
            }
        }
    
        select firstOnly BankAcctFieldFormat where BankAcctFieldFormat.formatid == Fileformat.FormatID && BankAcctFieldFormat.FieldType == SKS_LB_FieldType::LBBankAccount;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Line</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the line
    /// </summary>
    /// <param name = "DesiredLine"> integer denoting the desired line</param>
    /// <returns>integer </returns>
    int Read_Line( int DesiredLine )
    {
        container line;
        str lineStr;
        int CurrentLine = 0;
    
        if (DesiredLine > 0 && WFARRMFFile.status() == IO_status::Ok)
        {
            // Position on the desired line
            CurrentLine = 0;
            while (WFARRMFFile.status() == IO_status::Ok && CurrentLine < DesiredLine)
            {
                line = WFARRMFFile.read();
                CurrentLine = CurrentLine + 1;
            }
    
            if (WFARRMFFile.status() != IO_status::Ok)
            {
                return 1;
            }
    
            [lineStr] = line;
            curline = strrem(lineStr, '\n\r');
        }
        else
        {
            return 1;
        }
    
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the next line
    /// </summary>
    /// <returns>integer </returns>
    int Read_Next()
    {
        container line;
        str lineStr;
    
    
    
        line = WFARRMFFile.read();
    
        if (WFARRMFFile.status() != IO_status::Ok)
        {
            return 1;
        }
    
        [lineStr] = line;
        curline = strrem(con2Str(line), '\n\r');
    
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the file
    /// </summary>
    /// <returns>TmpSKS_LB_Importing table record</returns> 
    TmpSKS_LB_Importing readfile()
    {
        ListEnumerator fieldFormatsListEnumeratorDetail;
        ListEnumerator fieldFormatsListEnumeratorDetailSupp;
        ListEnumerator fieldFormatsListEnumeratorPaymCodeSupp;
        ListEnumerator fieldFormatsListEnumeratorSuppVarAdd;
        ListEnumerator fieldFormatsListEnumeratorBatch;
        ListEnumerator fieldFormatsListEnumeratorBatchTrailer;
        SKS_EB_FilePath         lbpath;
        Container               line;
        str                     lineStr;
        str                     nextLineStr;
        int                     RecordCode;
        int                     linecnt = 0;
        int                     trantype;
        boolean                 FileHeaderFound = false;
        boolean                 ValidAcctPathcombo = false;
        SKS_LB_FileFormatDet    localSKS_LB_FileFormatDet;
        boolean                 LockboxHeaderFound = false;
        str                     CheckNumber;
        boolean                 recordFound = false;
        int PaymentRecId = 0;
        str value;
        boolean WriteTransaction = false;
    
        fieldFormatsListEnumeratorDetail = FieldFormatsListDetail.getEnumerator();
        fieldFormatsListEnumeratorDetailSupp = FieldFormatsListDetailSupp.getEnumerator();
        fieldFormatsListEnumeratorPaymCodeSupp = fieldFormatsListPaymCodeSupp.getEnumerator();
        fieldFormatsListEnumeratorSuppVarAdd = fieldFormatsListSuppVarAdd.getenumerator();
        fieldFormatsListEnumeratorBatch = FieldFormatsListBatch.getEnumerator();
        fieldFormatsListEnumeratorBatchTrailer = FieldFormatsListBatchTrailer.getEnumerator();
    
        ttsbegin;
        lbpath =  System.IO.Path::GetDirectoryName(Filename);
        line = WFARRMFFile.read();
        [lineStr] = line;
        while(WFARRMFFile.status() == IO_status::Ok || (line != conNull() && WFARRMFFile.status() == IO_Status::FileTooShort))
        {
            fieldFormatsListEnumeratorDetail.reset();
            fieldFormatsListEnumeratorDetailSupp.reset();
            fieldFormatsListEnumeratorPaymCodeSupp.reset();
            fieldFormatsListEnumeratorSuppVarAdd.reset();
            fieldFormatsListEnumeratorBatch.reset();
            fieldFormatsListEnumeratorBatchTrailer.reset();
    
            linecnt++;
            lineStr = strrem(lineStr, '\n\r');
            if (strlen(con2Str(line)) == 0) //skip blank lines
            {
                RecordCode=0;
            }
            else
            {
                RecordCode = str2int(substr(lineStr,1,1)); // Get the record code
            }
    
            while(FileHeaderFound == true && ValidAcctPathcombo == false
                && (RecordCode == #RecordCodeDetail || RecordCode == #RecordCodeSupp)
                && WFARRMFFile.status() == IO_status::Ok)
            {
                line = WFARRMFFile.read();
                [lineStr] = line;
                linecnt++;
                if (strlen(con2Str(line)) == 0) //skip blank lines
                {
                    RecordCode=0;
                }
                else
                {
                    RecordCode = str2int(substr(lineStr,1,1)); // Get the record code
                }
            }
    
            switch(RecordCode)
            {
                case #RecordCodeFileHeader:
                    if (FileHeaderFound == true)
                    {
                        ImportCount = 0;
                        importing = null;
                        // only 1 allowed
                        throw error("@SKS330");
                    }
                    FileHeaderFound = true;
                    break;
                case #RecordCodeBatchHeader:
                    if (FileHeaderFound == false)
                    {
                        // missing: 01
                        this.WFARRMFFormatError(#RecordCodeFileHeader, linecnt);
                    }
                    // Get processing date - this will be used if no check date is supplied
    
                    while(fieldFormatsListEnumeratorBatch.moveNext())
                    {
                        localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorBatch.current();
                        value = subStr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                    ValidAcctPathcombo = this.validatepathacctcombo(lbpath);
    
                    LockBoxHeaderFound = True;
                    recordFound = false;
                    break;
                case #RecordCodeDetail:
                    recordFound = true;
                    if (LockBoxHeaderFound == false)
                    {
                        // missing: 5
                        this.WFARRMFFormatError(#RecordCodeBatchHeader, linecnt);
                    }
    
                    while (fieldFormatsListEnumeratorDetail.moveNext())
                    {
                        localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorDetail.current();
                        value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                        if(localSKS_LB_FileFormatDet.FieldType == SKS_LB_FieldType::CheckNumber)
                        {
                            if(value != CheckNumber)
                            {
                                CheckNumber = value;
                                PaymentRecId = linecnt;
                            }
                        }
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                    //Below can be uncommented in case 6 record tran types ever get used
                    /*trantype = str2int(substr(lineStr,2,2));
    
                    switch(trantype)
                    {
                        case #RecordCodePaymentTran:
                            while (fieldFormatsListEnumeratorPaymCodeSupp.moveNext())
                            {
                                localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorPaymCodeSupp.current();
                                value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                                this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                            }
                            PaymentRecId = linecnt;
                            break;
                        case #RecordCodePaymRev:
                            while (fieldFormatsListEnumeratorPaymCodeSupp.moveNext())
                            {
                                localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorPaymCodeSupp.current();
                                value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                                this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                            }
                            PaymentRecId = linecnt;
                            break;
                    }*/
                    break;
                case #RecordCodeSupp:
                    trantype = str2int(substr(lineStr,2,2));
    
                    switch(trantype)
                    {
                        case #RecordCodeDetailSupp:
                            while (FieldFormatsListEnumeratorDetailSupp.moveNext())
                            {
                                localSKS_LB_FileFormatDet = FieldFormatsListEnumeratorDetailSupp.current();
                                value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                                this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                            }
    
                            break;
                        case #RecordCodePaymCodeSupp:
                            while (fieldFormatsListEnumeratorPaymCodeSupp.moveNext())
                            {
                                localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorPaymCodeSupp.current();
                                value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                                this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                            }
    
                            break;
                        case #RecordCodeSuppVarAddenda:
                            while (fieldFormatsListEnumeratorPaymCodeSupp.moveNext())
                            {
                                localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorSuppVarAdd.current();
                                value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                                this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                            }
    
                            break;
                    }
                    break;
                case #RecordCodeBatchTrailer:
                    if (LockBoxHeaderFound == false)
                    {
                        // missing: 3
                        this.WFARRMFFormatError(#RecordCodeFileHeader, linecnt);
                    }
                    LockBoxHeaderFound = false;
                    break;
            }
    
            line = WFARRMFFile.read();
            [nextLineStr] = line;
    
            if(WFARRMFFile.status() == IO_status::OK && recordFound && ValidAcctPathcombo && (str2int(substr(nextLineStr, 1, 1)) == #RecordCodeDetail || (str2int(substr(nextLineStr, 1, 1)) == #RecordCodeBatchTrailer)  ))
            {
                WriteTransaction = true;
            }
    
            if(WriteTransaction)
            {
                WriteTransaction = false;
                importing.FileDate = FileDate;

                ImportCount++;
                importing.FileLineNbrBegin = linecnt;
                importing.ParentRecId = PaymentRecId;
                importing.insert();

                // reset invoice info from line, if terminating invoice reset check info too
                importing.InvAmount = 0;
                importing.InvoiceNumber = ' ';
                importing.BankPmtCnt = 0;
                importing.BankPmtTotal = 0;
                importing.DiscAmount = 0;
                importing.Description = '';
                importing.LBInvoice = '';
            }
            lineStr = nextLineStr;
        }
        ttsCommit;
        return importing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WFARRMFFormatError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays error
    /// </summary>
    /// <param name = "missingCodeError"> integer denoting error code</param>
    /// <param name = "linenumber">integer denoting line number</param>
    void WFARRMFFormatError( int missingCodeError, int linenumber)
    {
        ;
        ImportCount = 0;
    
        error(strfmt("@SKS558", int2str(missingCodeError), int2str(linenumber)), '');
        importing = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>