<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CustTransOpenTable_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Extension for table <c>CustTransOpen</c>
/// </summary>
[ExtensionOf(tableStr(CustTransOpen))]
public final class SKS_CustTransOpenTable_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>sksGetRemainingRefAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get available amount to settlement
    /// </summary>
    /// <param name = "_withDiscount">With discount</param>
    /// <param name = "_withJournals">With already settled in open ARES and Bank rec journals</param>
    /// <param name = "_applicRecId">Rec id of ARES or Bank rec journal line</param>
    /// <returns>Available amount to settlement</returns>
    public Amount sksGetRemainingRefAmount(boolean _withDiscount = true, boolean _withJournals = true, RefRecId _applicRecId = 0)
    {
        #define.ExcludeMarkedAmount(true)
        Amount remainingAmount;
        if (#ExcludeMarkedAmount)
        {
            SpecTrans specTrans;
            CustVendPaymProposalLine custVendPaymProposalLine;
            LedgerJournalTrans  ledgerJournalTrans;

            select sum(Balance01), sum(CashDiscToTake) from specTrans
            where specTrans.RefCompany == this.company()
                && specTrans.RefTableId == this.TableId
                && specTrans.RefRecId == this.RecId
            outer join sum(AmountCurDebit), sum(AmountCurCredit) from ledgerJournalTrans
                where ledgerJournalTrans.RecId == specTrans.SpecRecId
                && specTrans.SpecTableId == tableNum(LedgerJournalTrans)
            notexists join custVendPaymProposalLine
                where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                    && custVendPaymProposalLine.LedgerJournalTransRecId == specTrans.SpecRecId;

            Amount openAmount = this.AmountCur;
            
            if (ledgerJournalTrans.AmountCurDebit || ledgerJournalTrans.AmountCurCredit)
            {
                if (ledgerJournalTrans.AmountCurDebit < specTrans.Balance01 || ledgerJournalTrans.AmountCurCredit < specTrans.Balance01)
                {
                    openAmount -= ledgerJournalTrans.AmountCurCredit;
                    openAmount += ledgerJournalTrans.AmountCurDebit;
                }
                else
                {
                    openAmount -= specTrans.Balance01;
                }
            }            
            else
            {
                openAmount -= specTrans.Balance01;
            }

            openAmount -= specTrans.CashDiscToTake;

            remainingAmount = openAmount;
        }
        else
        {
            remainingAmount = this.AmountCur;
        }

        if (_withJournals)
        {
            // Calculate marked amount in existing LockBox journals
            SKS_LB_JournalARApplic journalARApplic;
            SKS_LB_JournalAR journalAR;
            select crossCompany sum(SettleAmountCur), sum(DiscApplyAmount) from journalARApplic
            join RecId From journalAR
            where journalARApplic.RecId != _applicRecId // Prevents duplicate from being current record
               && journalARApplic.CustTransOpenRecId == this.RecId
               && journalARApplic.SKS_LB_JournalARRecId == journalAR.RecId
               && journalARApplic.SettleAmountCur != 0
               && journalAR.LedgerJournalTransRecId == 0; // Only check if it hasn't been pushed to Payment Journal

            AmountCur markedAmountInARJournals = journalARApplic.SettleAmountCur + journalARApplic.DiscApplyAmount;
            remainingAmount -= markedAmountInARJournals;

            // Caclulate marked bank transactions amount
            SKS_BR_BankTran bankTrans;
            select sum(TransactionAmount) from journalARApplic
            join RecId From bankTrans
            where journalARApplic.RecId != _applicRecId // Prevents duplicate from being current record
                && journalARApplic.CustTransOpenRecId == this.RecId
                && journalARApplic.SKS_BR_BankTran == bankTrans.RecId
                && journalARApplic.TransactionAmount != 0
                && bankTrans.LedgerJournalReciD == 0;

            AmountCur markedAmountInBankRec = journalARApplic.TransactionAmount;
            remainingAmount -= markedAmountInBankRec;
        }

        return remainingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sksGetRemainingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get available amount to settlement
    /// </summary>
    /// <param name = "_withDiscount">With discount</param>
    /// <param name = "_withJournals">With already settled in open ARES and Bank rec journals</param>
    /// <param name = "_applicRecId">Rec id of ARES or Bank rec journal line</param>
    /// <returns>Available amount to settlement</returns>
    public Amount sksGetRemainingAmount(boolean _withDiscount = true, boolean _withJournals = true, RefRecId _applicRecId = 0)
    {
        #define.ExcludeMarkedAmount(true)
        Amount remainingAmount;
        if (#ExcludeMarkedAmount)
        {
            remainingAmount = this.sksGetRemainingAmountWithSettlement(_withDiscount);
        }
        else
        {
            remainingAmount = this.AmountCur;
        }

        if (_withJournals)
        {
            // Calculate marked amount in existing LockBox journals
            SKS_LB_JournalARApplic journalARApplic;
            SKS_LB_JournalAR journalAR;
            select crossCompany sum(SettleAmountCur), sum(DiscApplyAmount) from journalARApplic
            join RecId From journalAR
            where journalARApplic.RecId != _applicRecId // Prevents duplicate from being current record
               && journalARApplic.CustTransOpenRecId == this.RecId
               && journalARApplic.SKS_LB_JournalARRecId == journalAR.RecId
               && journalARApplic.SettleAmountCur != 0
               && journalAR.LedgerJournalTransRecId == 0; // Only check if it hasn't been pushed to Payment Journal

            AmountCur markedAmountInARJournals = journalARApplic.SettleAmountCur + journalARApplic.DiscApplyAmount;
            remainingAmount -= markedAmountInARJournals;

            // Caclulate marked bank transactions amount
            SKS_BR_BankTran bankTrans;
            select sum(TransactionAmount) from journalARApplic
            join RecId From bankTrans
            where journalARApplic.RecId != _applicRecId // Prevents duplicate from being current record
                && journalARApplic.CustTransOpenRecId == this.RecId
                && journalARApplic.SKS_BR_BankTran == bankTrans.RecId
                && journalARApplic.TransactionAmount != 0
                && bankTrans.LedgerJournalReciD == 0;

            AmountCur markedAmountInBankRec = journalARApplic.TransactionAmount;
            remainingAmount -= markedAmountInBankRec;
        }

        return remainingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sksIsAmountFullyCovered</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Do we have amount to cover opened invoice amount?
    /// </summary>
    /// <param name = "_markedCustTransOpen"><c>CustTransOpen</c> record</param>
    /// <param name = "_applicRecId">RecId of SKS journal</param>
    /// <returns>true = nothing to cover, false = we have amount to cover</returns>
    public boolean sksIsAmountFullyCovered(boolean _withDiscount = true, boolean _withJournals = true, RefRecId _applicRecId = 0)
    {
        Amount remainingAmount = this.sksGetRemainingAmount(_withDiscount, _withJournals, _applicRecId);

        return remainingAmount == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sksGetRemainingAmountWithSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get remaining amount with settlement
    /// </summary>
    /// <param name = "_withDiscountToTake">With discount to take</param>
    /// <returns>Remaining amount with settlement</returns>
    private Amount sksGetRemainingAmountWithSettlement(boolean _withDiscountToTake = false)
    {
        SpecTrans specTrans;
        CustVendPaymProposalLine custVendPaymProposalLine;

        select sum(Balance01), sum(CashDiscToTake) from specTrans
            where specTrans.RefCompany == this.company()
                && specTrans.RefTableId == this.TableId
                && specTrans.RefRecId == this.RecId
            notexists join custVendPaymProposalLine
                where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                    && custVendPaymProposalLine.LedgerJournalTransRecId == specTrans.SpecRecId;

        Amount openAmount = this.AmountCur;
        openAmount -= specTrans.Balance01;

        if (_withDiscountToTake)
        {
            openAmount -= specTrans.CashDiscToTake;
        }

        return openAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>