<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetadata_PT_MILLENNIUMBCP_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class SKS_EFT_FormatMetadata_PT_MILLENNIUMBCP_XML
/// </summary>
class SKS_EFT_FormatMetadata_PT_MILLENNIUMBCP_XML Extends SKS_EFT_Format_MetaData
{
  

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20221122';
        dataContractVersion = '1.0';
        conFormatID = ['PT-MILLENNIUMBCP-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
        //ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
        //BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
        //FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
        //IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
        //WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
        //WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',1,'Millennium BCP ISO 20022 Pain.001.001.03',0,'','','PT-MILLENNIUMBCP-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'PT-MILLENNIUMBCP-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('PT-MILLENNIUMBCP-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_PT_MILLENNIUMBCP_XML();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_PT_MILLENNIUMBCP_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_PT_MILLENNIUMBCP_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['PT-MILLENNIUMBCP-XML','PT-MILLENNIUMBCP-XML','InitiatingprtyId','Initiating Party Id',1,'InitiatingprtyId','',0,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > PrvtId > Othr > Id']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
        //BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('PT-MILLENNIUMBCP-XML'):
                paymSpecList = this.getPaymSpecsMetaData_PT_MILLENNIUMBCP_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
        //FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_PT_MILLENNIUMBCP_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_PT_MILLENNIUMBCP_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'SEPA Urgent Payment',1,'SEPA URG','','SEPA URG','TRADE PAY',0,'PT-MILLENNIUMBCP-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'SEPA',1,'SEPA','','SEPA','TRADE PAY',0,'PT-MILLENNIUMBCP-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('PT-MILLENNIUMBCP-XML'):
                notesList = this.getNotesMetaData_PT_MILLENNIUMBCP_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_PT_MILLENNIUMBCP_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_PT_MILLENNIUMBCP_XML()
    {
        container   notesList;

       

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('PT-MILLENNIUMBCP-XML'):
                validationsList = this.getValidationsMetaData_PT_MILLENNIUMBCP_XML();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_PT_MILLENNIUMBCP_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_PT_MILLENNIUMBCP_XML()
    {
        container   validationsList;
        
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',1,'1',1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Initiating party Id','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Initiating party ','GrpHdr > InitgPty > Id > PrvtId > Othr > Id','InitgPty Id related to bank','15','WOrdPartyId','','','0','0',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','','0','0',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','SWIFT code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > SWIFT code','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','0','0',1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > CdtrAgt >  FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',0,0,'1','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > Nm','Name related to Vendor bank','16','WBenBankName','','',1,'1',1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Address','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > AdrLine','Address related to Vendor bank','16','WBenBankAddr','','',1,'1',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > City','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > TwnNm','Address related to Vendor bank','16','WBenBankCity','','',1,'1',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/region','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > Ctry','Address related to Vendor bank','16','WBenBankCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,'0',1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','ZIP/postal code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/postal code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','ZipCode related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','City related to vendor','16','WBeneCity','','',1,'',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'1',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA URG','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','',0,0,1,'34',0,0]);

        
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',1,'1',1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Initiating party Id','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Initiating party ','GrpHdr > InitgPty > Id > PrvtId > Othr > Id','InitgPty Id related to bank','15','WOrdPartyId','','','0','0',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','','0','0',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','SWIFT code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > SWIFT code','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','0','0',1,'11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > CdtrAgt >  FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',0,0,'1','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > Nm','Name related to Vendor bank','16','WBenBankName','','',1,'1',1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Address','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > AdrLine','Address related to Vendor bank','16','WBenBankAddr','','',1,'1',1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > City','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > TwnNm','Address related to Vendor bank','16','WBenBankCity','','',1,'1',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/region','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > PstlAdr > Ctry','Address related to Vendor bank','16','WBenBankCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,'0',1,'140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','ZIP/postal code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/postal code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','ZipCode related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','City related to vendor','16','WBeneCity','','',1,'',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'1',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['PT-MILLENNIUMBCP-XML','SEPA','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','',0,0,1,'34',0,0]);


        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Description
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['PT-MILLENNIUMBCP-XML','ChrgBr','Charge bearer']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['PT-MILLENNIUMBCP-XML','CtgyPurp','CtgyPurp']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['PT-MILLENNIUMBCP-XML','Purp','Purp']);


        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','ChrgBr','Our','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','ChrgBr','Beneficiary','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','ChrgBr','Shared','SHAR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','CtgyPurp','Salary Payment','SALA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','CtgyPurp','Other Payment','OTHR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','CtgyPurp','Pension Payment','PENS']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','CtgyPurp','Supplier Payment','SUPP']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','Purp','Salary & benefits','SALA']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','Purp','Medical','VIEW']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['PT-MILLENNIUMBCP-XML','Purp','Investment','TREA']);



        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
        //FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('PT-MILLENNIUMBCP-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_PT_MILLENNIUMBCP_XML();
                break;
           
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_PT_MILLENNIUMBCP_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_PT_MILLENNIUMBCP_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['PT-MILLENNIUMBCP-XML','PT-MILLENNIUMBCP-XML','SEPA URG','ChrgBr','Charge bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['PT-MILLENNIUMBCP-XML','PT-MILLENNIUMBCP-XML','SEPA URG','CtgyPurp','CtgyPurp',0,'CtgyPurp','',0,'','','PmtInf > PmtTpInf > CtgyPurp']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['PT-MILLENNIUMBCP-XML','PT-MILLENNIUMBCP-XML','SEPA URG','Purp','Purp',0,'Purp','',0,'','','CdtTrfTxInf > Purp']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['PT-MILLENNIUMBCP-XML','PT-MILLENNIUMBCP-XML','SEPA','ChrgBr','Charge bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['PT-MILLENNIUMBCP-XML','PT-MILLENNIUMBCP-XML','SEPA','CtgyPurp','CtgyPurp',0,'CtgyPurp','',0,'','','PmtInf > PmtTpInf > CtgyPurp']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['PT-MILLENNIUMBCP-XML','PT-MILLENNIUMBCP-XML','SEPA','Purp','Purp',0,'Purp','',0,'','','CdtTrfTxInf > Purp']);
        
        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>