<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_AlertClass</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_LB_AlertClass extends EventNotification
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public EventInboxId create()
    {
        EventContextInformation eci;
        EventInboxData inboxData;
        DictTable table;
        container parms;
        Args args = new Args();
        List list;
        WorkflowRecordCaptionGenerator recordCaptionGenerator;
        EventInboxId inboxId = EventInbox::nextEventId();
        ;
    
        // if notification has a source to which to drill-down
        if (record)
        {
            table = new DictTable(record.TableId);
            eci = new EventContextInformation();
    
            // if no menufunction specified, try to find the display menu item with the same name
            // as the formRun property on the table
            if (!menuFunction)
            {
                menuFunction = new MenuFunction(table.formRef(),MenuItemType::Display);
                if (!menuFunction)
                    throw error(strFmt("@SYS104114",table.formRef()));
            }
    
            parms = [menuFunction.type(), menuFunction.name()];
            if (!userHasAccess)
            {
                try
                {
                    new RunAsPermission(inbox.UserId).assert();
                    //now check if user has access to menu item
                    //BP Deviation Documented
                    runAs(inbox.UserId,classNum(EventNotification),staticMethodStr(EventNotification,hasUserAccess),parms);
                    CodeAccessPermission::revertAssert();
                }
                catch (Exception::Error)
                {
                    infolog.cut(1,infologLine());
                    return 0;
                }
            }
            args.menuItemName(menuFunction.name());
            args.menuItemType(MenuItemType::Display);
            args.pack();
    
            eci.parmPackedArgs(args);
            eci.parmAlertBuffer(record);
            eci.parmAlertFormDsName(dataSourceName);
    
            inboxData.InboxId = inboxId;
            inboxData.DataType = EventInboxDataType::Context;
            inboxData.Data = eci.pack();
            inboxData.insert();
    
            // NOTE: it's OK to set these fields to the same value for workflow notifications,
            // as they have different meaning for change based alerts only, where ParentTableId
            // contains the Id of the table of the data source upon which filtering is
            // happening upon drill-down, and AlertTableId contains the Id of the table
            // for which are changes must be monitored in DB log
            inbox.AlertTableId = table.id();
            inbox.ParentTableId = table.id();
    
            recordCaptionGenerator = WorkflowRecordCaptionGenerator::construct(record);
            inbox.AlertedFor = recordCaptionGenerator.caption();
            list = SysDictTable::getUniqueIndexFields(table.id());
    
            if (list)
            {
                inbox.keyFieldList(list.pack());
                inbox.keyFieldData(SysDictTable::mapFieldIds2Values(list,record).pack());
            }
        }
    
        if (!inbox.UserId)
            return 0;
    
        if (!inbox.Subject && !inbox.Message)
            return 0;
    
        inbox.InboxId = inboxId;
        inbox.ShowPopup = NoYes::yes;
    
        if (record && inbox.GlobalRule == NoYes::No)
            inbox.CompanyId = record.company();
    
        inbox.insert();
    
        return inbox.InboxId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>