<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_TD_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_TD_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_TD_EDI820 extends SKS_EFT_Format
{
    #define.FormatVersion('20230424')
    #define.ACHCCD('ACH-CCD')
    #define.ACHPPD('ACH-PPD')
    #define.ACHCTX('ACH-CTX')
    #define.FWT('FWT')
    #define.ZZZ('ZZZ')
    #define.CHK('CHK')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            this.rec_TDF();
            this.rec_BPR();
            this.rec_TRN();
            this.rec_CUR();
            this.rec_N1PR();
            this.rec_N1PE();
            this.rec_ENT();

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_RMRIV(invSKS_EFT_FileDetail);
                this.rec_DTM(invSKS_EFT_FileDetail);
            }
            next mSKS_EFT_FileDetail;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    boolean rec_BPR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     17      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      10       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       12       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      35      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      12      N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                6       DT
        //17    Business Function Code                              3       AN
        //18    (DFI) Id Number Qualifier                           2       AN
        //19    (DFI) Identification Number                         12      AN
        //20    Account Number Qualifier Code                       2       AN
        //21    Account Number                                      35      N
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        msb.Append('820');
        msb.Append('BPR');
        msb.Append('1020');

        //01    Trans. Handling Code
        msb.Append('C');

        //02    Monetary Amount
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 17));

        //03    Credit/Debit Flag Code
        msb.Append('C');
        
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCCD:
            case #ACHPPD:
            case #ACHCTX:
                msb.Append('ACH');
                break;
            case #FWT:
                msb.Append('FWT');
                break;
            case #ZZZ:
                msb.Append('ZZZ');
                break;
            case #CHK:
                msb.Append('CHK');
                break;
        }

        //05    Payment Format Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCCD:
                msb.Append(SKS_PP_StringFormats::strFill(10, 'CCD', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
            case #ACHPPD:
                msb.Append(SKS_PP_StringFormats::strFill(10, 'PPD', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
            case #ACHCTX:
                msb.Append(SKS_PP_StringFormats::strFill(10, 'CTX', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
            default:
                msb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
        }

        //06    DFI ID No. Qualifier
        msb.Append('04');

        //07    DFI ID Number
        if((mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCCD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX) &&
            mSKS_EFT_FileDetail.BankOrigDFI)
        {
            msb.Append(SKS_PP_StringFormats::strFill(12, '0004' + substr(mSKS_EFT_FileDetail.BankOrigDFI,5,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(mSKS_EFT_FileDetail.BankBankTransit)
        {
            msb.Append(SKS_PP_StringFormats::strFill(12, '0004' + substr(mSKS_EFT_FileDetail.BankBankTransit,5,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //08    Acct. No. Qual. Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //09    Account Number
        msb.Append(SKS_PP_StringFormats::strFill(35, substr(mSKS_EFT_FileDetail.BankBankAcct,1,12), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10    Orig. Co. ID
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11    Orig. Co. Code
        msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12    DFI ID No. Qualifier
        //13    DFI ID Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCCD:
            case #ACHPPD:
            case #ACHCTX:
                if(mSKS_EFT_FileDetail.DepBankTransit)
                {
                    msb.Append('01');
                    msb.Append(SKS_PP_StringFormats::strFill(12, subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 9), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                else
                {
                    msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                break;
            case #FWT:
                if(mSKS_EFT_FileDetail.DepSwiftNo)
                {
                    msb.Append('02');
                    msb.Append(SKS_PP_StringFormats::strFill(12, subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 11), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                else if(mSKS_EFT_FileDetail.DepBankTransit)
                {
                    msb.Append('03');
                    msb.Append(SKS_PP_StringFormats::strFill(12, subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 4), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                else
                {
                    msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                break;
            case #ZZZ:
                if(mSKS_EFT_FileDetail.DepBankTransit)
                {
                    msb.Append('04');
                    msb.Append(SKS_PP_StringFormats::strFill(12, subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 9), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                else
                {
                    msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                    msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                break;
            case #CHK:
                msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                msb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
                
        }
        //14    Acct. No. Qual Code
        //15    Account Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHK)
        {
            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::CheckingAccount)
            {
                msb.Append('DA');
            }
            else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                msb.Append('SG');
            }
            else
            {
                msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            msb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
            msb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //16    Effective Entry Date
        msb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //17    Business Function Code
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //18    (DFI) ID Number Qualifier
        //19    (DFI) Identification Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            if(mSKS_EFT_FileDetail_Intermediary.IntBankId)
            {                
                msb.Append('01');                
                msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail_Intermediary.IntBankId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift)
            {
                msb.Append('02');
                msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail_Intermediary.IntBankSwift, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                msb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //20    Account Number Qualifier Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //21    Account Number
        msb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //224-512  Filler
        msb.Append(SKS_PP_StringFormats::strFill(289, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(msb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CUR</Name>
				<Source><![CDATA[
    boolean rec_CUR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      2       ID
        //02    Currency Code                                       3       ID      Payment currency
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        msb.Append('820');
        msb.Append('CUR');
        msb.Append('1040');

        //01     Entity ID Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT)
        {
            msb.Append('PE');
        }
        else
        {
            msb.Append('PR');
        }

        //02    Payment Currency Code
        msb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);

        //03    Exchange Rate
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //04    Entity Identifier Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //05    Currency Code
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //06    Currency Market/Exchange Code
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //07    Date/Time Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //08    Date
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //09    Time
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10    Date/Time Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11    Date
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12    Time
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    Date/Time Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //14    Date
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //15    Time
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16    Date/Time Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //17    Date
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //18    Time
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //19    Date/Time Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //20    Date
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //21    Time
        msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //Filler
        msb.Append(SKS_PP_StringFormats::strFill(396, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(msb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                6       Date    CCYYMMDD
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            msb.Append('820');
            msb.Append('DTM');
            msb.Append('2180');

            //01     Date/Time Qualifier
            msb.Append('003');

            //02    Date
            msb.Append(SKS_PP_StringFormats::strDateYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));

            //03    Time
            msb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //04    Time Code
            msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //05    Century
            msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //06    Date Time Period Format Qualifier
            msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //07    Date Time Period
            msb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //70-512   Filler
            msb.Append(SKS_PP_StringFormats::strFill(443, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        this.fileWrite(msb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    boolean rec_ENT()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Assigned Number                                     6       N0
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        msb.Append('820');
        msb.Append('ENT');
        msb.Append('2010');

        //01    Assigned Number
        msb.Append(SKS_PP_StringFormats::strFill(6, '1', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //02    Entity Identifier Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //03    Identification Code Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //04    Identification Code
        msb.Append(SKS_PP_StringFormats::strFill(17, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //05    Entity Identifier Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //06    Identification Code Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //07    Identification Code
        msb.Append(SKS_PP_StringFormats::strFill(17, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //08    Reference Number Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //09    Reference Number
        msb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //91-512 Filler
        msb.Append(SKS_PP_StringFormats::strFill(422, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(msb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    boolean rec_N1PE()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      2       ID
        //02    Name                                                35      AN      Payee Name
        //03    Identification Code Qualifier                       02      ID
        //04    Identification Code                                 17      AN
        //------------------------------------------------------------------------------------------------------
        str vendName;

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        msb.Append('820');
        msb.Append(SKS_PP_StringFormats::strFill(3, 'N1', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        msb.Append('1070');

        //01     Entity ID Code
        msb.Append('PE');

        //02     Name
        if(mRemittanceName)
        {
            vendName = mRemittanceName;
        }
        else if(mSKS_EFT_FileDetail_VendAddress.BeneName)
        {
            vendName = mSKS_EFT_FileDetail_VendAddress.BeneName;
        }
        else
        {
            vendName = '';
        }
        msb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(vendName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //03    Identification Code Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //04    Identification Code
        msb.Append(SKS_PP_StringFormats::strFill(17, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //05    Entity Relationship Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //06    Entity Identifier Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //71-512 Filler
        msb.Append(SKS_PP_StringFormats::strFill(442, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(msb.ToString());

        this.rec_N3(subStr(mRemittanceAdrLine1, 1, 35), subStr(mRemittanceAdrLine2, 1, 35));

        this.rec_N4(mRemittanceCity, mRemittanceState, mRemittanceZipCode, mRemittanceCountryRegionId);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    boolean rec_N1PR()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      2       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 17      AN
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        msb.Append('820');
        msb.Append(SKS_PP_StringFormats::strFill(3, 'N1', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        msb.Append('1070');

        //01     Entity ID Code
        msb.Append('PR');

        //02     Name        
        msb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //03    Identification Code Qualifier
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //04    Identification Code
        msb.Append(SKS_PP_StringFormats::strFill(17, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //05    Entity Relationship Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //06   Entity Identifier Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // Filler
        msb.Append(SKS_PP_StringFormats::strFill(442, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(msb.ToString());

        this.rec_N3(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, 1, 35), subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, 1, 35));

        this.rec_N4(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);


        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3</Name>
				<Source><![CDATA[
    boolean rec_N3(str _address1, str _address2)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                 Max         Type        Comment
        //01    Address 1                                   35          AN
        //02    Address 2                                   35          AN
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        str address1 = _address1;
        str address2 = _address2;

        if(address1 != '')
        {
            msb.Append('820');
            msb.Append(SKS_PP_StringFormats::strFill(3, 'N3', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            msb.Append('1090');

            //01    Address Information
            msb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(address1), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            if(address2 != '')
            {
                //02    Address Information
                msb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(address2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                msb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }

            //81-512  Filler
            msb.Append(SKS_PP_StringFormats::strFill(432, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        this.fileWrite(msb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4</Name>
				<Source><![CDATA[
    boolean rec_N4(str _city, str _state, str _zip, str _ctrycode)
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        30      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        str city = _city;
        str state = _state;
        str zip = _zip;
        str ctrycode = _ctrycode;

        if(city != '' || state != '' || zip != '' || ctrycode != '')
        {
            msb.Append('820');
            msb.Append(SKS_PP_StringFormats::strFill(3, 'N4', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            msb.Append('1100');

            //01    City Address
            if(city)
            {
                msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(city), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                msb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }

            //02    State or Province Code
            if(state)
            {
                msb.Append(substr(this.CharacterReplacement(state), 1, 2));
            }
            else
            {
                msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }

            //03    Postal Code
            if(zip)
            {
                msb.Append(SKS_PP_StringFormats::strFill(9, zip, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }

            //04    Country Code
            if(ctrycode)
            {
                msb.Append(SKS_PP_StringFormats::strFill(3, this.getLogisticsAddressCountryISO(ctrycode), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                msb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }

            //05    Location Qualifier
            msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //06    Location Identifier
            msb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //87-512 Filler
            msb.Append(SKS_PP_StringFormats::strFill(426, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        this.fileWrite(msb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             2       ID
        //02    Reference Number                                    30      AN
        //03    Payment Action Code                                 2       AN
        //04    Net Amount                                          17
        //05    Gross Amount                                        17
        //06    Discount Amount                                     17
        //------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        msb.Append('820');
        msb.Append('RMR');
        msb.Append('2150');

        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT)
            {
                msb.Append('IK');
            }
            else
            {
                msb.Append('IV');
            }

            //02     Reference Number
            msb.Append(SKS_PP_StringFormats::strFill(30, invSKS_EFT_FileDetail.InvoiceNumber, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(32, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //03    Payment Action Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //04    Net Amount
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 17));

        //05    Gross Amount
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur), 17));

        //06    Discount Amount
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur), 17));

        //96-512 Filler
        msb.Append(SKS_PP_StringFormats::strFill(417, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(msb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TDF</Name>
				<Source><![CDATA[
    boolean rec_TDF()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     User Id                                             15       AN
        //2     Partner ID                                          15       AN
        //3     User Reference Number                               22       AN
        //---------------------------------------------------------------------------------
        str partnerID, testFileIndic;
        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        msb.Append('820');
        msb.Append('000');
        msb.Append(SKS_PP_StringFormats::strFill(4, 'N', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //1     User Id
        msb.Append(SKS_PP_StringFormats::strFill(15, 'EPS', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //2     Partner Id
        partnerID = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PartnerID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        msb.Append(SKS_PP_StringFormats::strFill(15, partnerID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //3     User Reference Number
        msb.Append(SKS_PP_StringFormats::strFill(22, subStr(mSKS_EFT_FileDetail.PaymentReference,1,10), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //4     Filler
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5     Table ID
        msb.Append('TDF34C');

        //6     Test or Production Indicator
        testFileIndic = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TestFileIndic', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        if(testFileIndic == 'Y')
        {
            msb.Append('T');
        }
        else
        {
            msb.Append('P');
        }
        //7     Date of Creation
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //8     Time of Creation
        msb.Append(SKS_PP_StringFormats::strTimeHHMMSS());

        //9     Filler
        msb.Append(SKS_PP_StringFormats::strFill(74, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10    ANSI X12 Version
        msb.Append(SKS_PP_StringFormats::strFill(12, '003040', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11    Filler
        msb.Append(SKS_PP_StringFormats::strFill(114, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12    Suffix
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    Filler
        msb.Append(SKS_PP_StringFormats::strFill(222, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(msb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    boolean rec_TRN()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Number                                    30      AN
        //03    Originating Company Identifier                      10      AN
        //04    Reference Number                                    30      AN
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder msb = new System.Text.StringBuilder();

        msb.Append('820');
        msb.Append('TRN');
        msb.Append('1035');

        //01    Trace Type Code
        msb.Append(SKS_PP_StringFormats::strFill(2, '1', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //02    Reference Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT)
        {
            msb.Append(SKS_PP_StringFormats::strFill(30, subStr(mSKS_EFT_FileDetail.PaymentReference,1,10), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            msb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        //03    Originating Company Identifier
        msb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //04    Reference Number
        msb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //83-512 Filler
        msb.Append(SKS_PP_StringFormats::strFill(430, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(msb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select firstonly lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
            mRemittanceAdrLine3 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
                if (vendAddrArray.exists(3))
                {
                    mRemittanceAdrLine3 = vendAddrArray.value(3);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            //Populate Remittance Information from Vendor eBanking details
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>