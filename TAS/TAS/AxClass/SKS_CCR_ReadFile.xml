<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_ReadFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CCR_ReadFile
{
    #SKS_Global

    SKS_BR_FileFormat sks_br_fileformat;
    BankAccountStatement bankAccountStatement;
    BankAccountTrans bankAccountTrans;
    SKS_EB_FilePath FileName;
    UtcDateTime FileDateTime;
    SKS_BR_FormatId FormatId;
    int OmitHeaderRecsNbr;
    int OmitTrailerRecsNbr;
    int ImportCount;
    SKS_CCR_BankTran bankTran;
    SKS_CCR_FileType FileType;
    int Decimal_Places;
    SKS_PP_Setup sks_pp_Setup;
    SKS_CCR_BankHeaderRecID bankHeaderRecId;
    str eventLogText;
    SKS_PP_CommBRPreImportScriptPath gBRPreReadScript;
    str gBRPreReadScriptParams;
    SKS_PP_CommBRPostImportScriptPath gBRPostReadScript;
    str gBRPostReadScriptParams;
    SKS_CCR_ReadFileClassesCustomActionsBase gSKS_CCR_ReadFileClassesCustomActionsBase;
    SKS_BF_BankIntType gSKS_BF_BankIntType;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setSKS_BF_BankIntType</Name>
				<Source><![CDATA[
    public void setSKS_BF_BankIntType(SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        gSKS_BF_BankIntType = _SKS_BF_BankIntType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreReadScript</Name>
				<Source><![CDATA[
    public void setPreReadScript(SKS_PP_CommBRPreImportScriptPath _preReadScript)
    {
        gBRPreReadScript = _preReadScript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreReadScriptParams</Name>
				<Source><![CDATA[
    public void setPreReadScriptParams(str _preReadScriptParams)
    {
        gBRPreReadScriptParams = _preReadScriptParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostReadScript</Name>
				<Source><![CDATA[
    public void setPostReadScript(SKS_PP_CommBRPostImportScriptPath _postReadScript)
    {
        gBRPostReadScript = _postReadScript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostReadScriptParams</Name>
				<Source><![CDATA[
    public void setPostReadScriptParams(str _postReadScriptParams)
    {
        gBRPostReadScriptParams = _postReadScriptParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreReadScriptParams</Name>
				<Source><![CDATA[
    public str getPreReadScriptParams()
    {
        return gBRPreReadScriptParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreReadScript</Name>
				<Source><![CDATA[
    public SKS_PP_CommBRPreImportScriptPath getPreReadScript()
    {
        return gBRPreReadScript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostReadScriptParams</Name>
				<Source><![CDATA[
    public str getPostReadScriptParams()
    {
        return gBRPostReadScriptParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPostReadScript</Name>
				<Source><![CDATA[
    public SKS_PP_CommBRPostImportScriptPath getPostReadScript()
    {
        return gBRPostReadScript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustomActions</Name>
				<Source><![CDATA[
    public void setCustomActions(SKS_CCR_ReadFileClassesCustomActionsBase _SKS_CCR_ReadFileClassesCustomActionsBase)
    {
        gSKS_CCR_ReadFileClassesCustomActionsBase = _SKS_CCR_ReadFileClassesCustomActionsBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateFile</Name>
				<Source><![CDATA[
    // Used by Advanced to check for duplicate file name
    private boolean checkDuplicateFile()
    {
        SKS_CCR_File     sks_ccr_file;
        
        sks_ccr_file = SKS_CCR_File::construct(gSKS_BF_BankIntType);
        sks_ccr_file.setFilePathName(FileName);
        sks_ccr_file.setFileDateTime(FileDateTime);

        if(sks_ccr_file.checkDuplicates(bankHeaderRecId))
        {
            this.handleError(bankHeaderRecId, strFmt("@SKS530", FileName, DateTime2str(FileDateTime, DateFlags::None)), 0);
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    protected void closeFile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeProcessing</Name>
				<Source><![CDATA[
    protected boolean completeProcessing()
    {
        str archivePath;
    
        SKS_CCR_HistoryTable     locSKS_CCR_HistoryTable;
        SKS_BR_ImportStatus     locSKS_BR_ImportStatus;
        SKS_CCR_File             sks_ccr_file;
        boolean                 isDuplicate;  //SKS_BS_BR4_BankStatementDuplicateBlock
        boolean                 isHeaderUpdate;   //SKS_BS_BR4_BankStatementDuplicateBlock
    
        sks_ccr_file = SKS_CCR_File::construct(gSKS_BF_BankIntType);
        sks_ccr_file.setFilePathName(FileName);
    
        isDuplicate = this.checkDuplicateStatement();   //SKS_BS_BR4_BankStatementDuplicateBlock

        if (isDuplicate == true)   //SKS_BS_BR4_BankStatementDuplicateBlock
        {
            isHeaderUpdate = true;
        }
        else
        {
            archivePath = sks_ccr_file.moveToArchive();

            if(gSKS_CCR_ReadFileClassesCustomActionsBase)
            {
                gSKS_CCR_ReadFileClassesCustomActionsBase.modifyCompleteProcessing();
            }
    
        }

      
        if(sks_ccr_file.getErrorText() != '')
        {
            ttsabort;
            ImportCount = 0;
            this.handleError(bankHeaderRecId, sks_ccr_file.getErrorText(), 0);
            return false;
        }
    
        select * from locSKS_CCR_HistoryTable
            where locSKS_CCR_HistoryTable.BankHeaderRecId == bankHeaderRecId &&
            (
                locSKS_CCR_HistoryTable.Action == SKS_CCR_Action::BankStatementAutoReconcileFailed
                || locSKS_CCR_HistoryTable.Action == SKS_CCR_Action::GLAutoPostingFailed
                || locSKS_CCR_HistoryTable.Action == SKS_CCR_Action::BankStatementAutoCreationFailed
                || locSKS_CCR_HistoryTable.Action == SKS_CCR_Action::StatementOmitted
            );

        if (isHeaderUpdate == false)  //SKS_BR4_BankStatementDuplicate --> No duplicate bank statements
        {
            if (locSKS_CCR_HistoryTable)
            {
                locSKS_BR_ImportStatus = SKS_BR_ImportStatus::Warning;
            }
            else
            {
                locSKS_BR_ImportStatus = SKS_BR_ImportStatus::Processed;
            }

            this.updateHeader(locSKS_BR_ImportStatus, archivePath);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankBalance</Name>
				<Source><![CDATA[
    protected void createBankBalance(Date asOfDate, CompanyBankAccountId bankAcct, AmountCur amount)
    {
        SKS_BR_BankBalance sks_br_bankbalance;
    
        select forupdate * from sks_br_bankbalance where
         sks_br_bankbalance.BankHeaderRecId == bankHeaderRecId &&
         sks_br_bankbalance.AccountId == bankAcct &&
         sks_br_bankbalance.AsOfDate == asOfDate;
    
        if(sks_br_bankbalance)
        {
            sks_br_bankbalance.EndBalance = amount;
            sks_br_bankbalance.update();
        }
        else
        {
            sks_br_bankbalance.AccountId = bankAcct;
            sks_br_bankbalance.AsOfDate = asOfDate;
            sks_br_bankbalance.EndBalance = amount;
            sks_br_bankbalance.BankHeaderRecId = bankHeaderRecId;
            sks_br_bankbalance.insert();
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createErrorLog</Name>
				<Source><![CDATA[
    private void createErrorLog(str errorMessage, int lineNumber)
    {
        SKS_CCR_ErrorLog sks_ccr_errorlog;
        SKS_CCR_File sks_ccr_file;
        SKS_CCR_BankHeader locSKS_CCR_BankHeader;
        str errorPath;

        ttsbegin;
        select firstOnly crossCompany  DataAreaId from locSKS_CCR_BankHeader where locSKS_CCR_BankHeader.RecId == bankHeaderRecId;
        changeCompany(locSKS_CCR_BankHeader.company())
        {
            select forupdate * from sks_ccr_errorlog where sks_ccr_errorlog.BankHeaderRecId == bankHeaderRecId;
    
            if(sks_ccr_errorlog)
            {
                sks_ccr_errorlog.LineNumber = lineNumber;
                sks_ccr_errorlog.ErrorText = errorMessage;
                sks_ccr_errorlog.update();
            }
            else
            {
                sks_ccr_errorlog.BankHeaderRecId = bankHeaderRecId;
                sks_ccr_errorlog.LineNumber = lineNumber;
                sks_ccr_errorlog.ErrorText = errorMessage;
                sks_ccr_errorlog.insert();
            }

            sks_ccr_file = SKS_CCR_File::construct(gSKS_BF_BankIntType);
            sks_ccr_file.setFilePathName(FileName);
            errorPath = sks_ccr_file.moveToError();
            sks_ccr_errorlog = null;
            if(gSKS_CCR_ReadFileClassesCustomActionsBase)
            {
                gSKS_CCR_ReadFileClassesCustomActionsBase.modifyCreateErrorLog();
            }
    
            this.updateHeader(SKS_BR_ImportStatus::Error, errorPath);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCompletedErrorLog</Name>
				<Source><![CDATA[
    //SKS-Begin
    //SKS_BR4_BankStatementDuplicate
    private void createCompletedErrorLog(str errorMessage, int lineNumber)
    {
        SKS_CCR_ErrorLog sks_ccr_errorlog;
        SKS_CCR_File sks_ccr_file;
        SKS_CCR_BankHeader locSKS_CCR_BankHeader;
        str errorPath;

        ttsbegin;
        select firstOnly crossCompany  DataAreaId from locSKS_CCR_BankHeader where locSKS_CCR_BankHeader.RecId == bankHeaderRecId;
        changeCompany(locSKS_CCR_BankHeader.company())
        {
            select forupdate * from sks_ccr_errorlog where sks_ccr_errorlog.BankHeaderRecId == bankHeaderRecId;
    
            if(sks_ccr_errorlog)
            {
                sks_ccr_errorlog.LineNumber = lineNumber;
                sks_ccr_errorlog.ErrorText = errorMessage;
                sks_ccr_errorlog.update();
            }
            else
            {
                sks_ccr_errorlog.BankHeaderRecId = bankHeaderRecId;
                sks_ccr_errorlog.LineNumber = lineNumber;
                sks_ccr_errorlog.ErrorText = errorMessage;
                sks_ccr_errorlog.insert();
            }
    
            sks_ccr_file = SKS_CCR_File::construct(gSKS_BF_BankIntType);
            sks_ccr_file.setFilePathName(FileName);
            errorPath = sks_ccr_file.moveToError();

            sks_ccr_errorlog = null;
            if(gSKS_CCR_ReadFileClassesCustomActionsBase)
            {
                gSKS_CCR_ReadFileClassesCustomActionsBase.modifyCreateErrorLog();
            }
    
    
            this.updateHeader(SKS_BR_ImportStatus::CompletedWithErrors, errorPath);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGL</Name>
				<Source><![CDATA[
    //SKS_BR4_BankStatementDuplicate
    //SKS-End

    protected boolean createGL()
    {
        SKS_CCR_GLProcessing locSKS_CCR_GLProcessing;
    
        //set the GLCreationCompany in the imported SKS_CCR_BankTran records.
        SKS_CCR_ReadFile::setGLCreationCompanyAndJournal(bankHeaderRecId);
        locSKS_CCR_GLProcessing = new SKS_CCR_GLProcessing();
        locSKS_CCR_GLProcessing.setHeaderRecId(bankHeaderRecId);
        locSKS_CCR_GLProcessing.run();
    
        if(locSKS_CCR_GLProcessing.getErrorText() != '')
        {
            ttsabort;
            ImportCount = 0;
            this.handleError(bankHeaderRecId, locSKS_CCR_GLProcessing.getErrorText(), locSKS_CCR_GLProcessing.getLastSKS_BR_BankTranAttempted());
            return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    private void createHeader()
    {
        SKS_CCR_BankHeader locSKS_CCR_BankHeader;
    
        locSKS_CCR_BankHeader.SKS_BF_BankIntType = gSKS_BF_BankIntType;
        locSKS_CCR_BankHeader.FileDateTime = FileDateTime;
        locSKS_CCR_BankHeader.Filename = FileName;
        locSKS_CCR_BankHeader.ImportDate = DateTimeUtil::getSystemDateTime();
        locSKS_CCR_BankHeader.Status = SKS_BR_ImportStatus::InProcess;
        locSKS_CCR_BankHeader.insert();
    
        bankHeaderRecId = locSKS_CCR_BankHeader.RecId;
        if(gSKS_CCR_ReadFileClassesCustomActionsBase)
            gSKS_CCR_ReadFileClassesCustomActionsBase.setSKS_CCR_BankHeaderRecID(bankHeaderRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountID</Name>
				<Source><![CDATA[
    /// Finds Bank Account Id for imported bank accounts with "Search" box's Alternate Bank ID
    private SKS_PP_Bank getAccountID(BankAccount accountNum, container _crossCompanyList)
    {
        //Search's "Alternate Bank Id" is set
        //in the eBanking Bank Accounts screen.
        SKS_PP_Bank sks_PP_Bank;
    
        select firstonly crossCompany:_crossCompanyList dataAreaId, BankAccountID from sks_PP_Bank where SKS_PP_Bank.AlternateBankID == accountNum;
        return sks_PP_Bank; //may return null if no matching alternate bank acount found
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccount</Name>
				<Source><![CDATA[
    /// Finds Bank Account Id for bank account number
    protected BankAccountTable getBankAccount(BankAccount accountNum)
    {
        BankAccountTable bankAccountTable;
        SKS_PP_Bank sks_PP_Bank;
        container crossCompanyList;
    
        crossCompanyList = SKS_EB_VirtualCompany::getCCRRecCompanies();     //SKS_FDD_13903
    
        if(strLen(strLRTrim(accountNum)) > 0)
            sks_PP_Bank = this.getAccountID(accountNum, crossCompanyList);
    
    
        if(sks_PP_Bank)//an account ID was retrieved based on the Alternate Bank ID.
            bankAccountTable = this.getBankAccountFromAcctID(sks_PP_Bank);
        else//No Alternate Bank ID was matched, try finding an account based on the supplied Bank Account Num.
            bankAccountTable = this.getBankAccountFromAcctNum(SKS_PP_StringFormats::strLTrimZeroes(accountNum), crossCompanyList);
    
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountByPath</Name>
				<Source><![CDATA[
    protected BankAccountTable getBankAccountByPath()
    {
        SKS_PP_Bank sks_pp_bank;
        BankAccountTable bankAccountTable;
        SKS_CCR_File sks_ccr_file;
        SKS_EB_FilePath path;

        sks_ccr_file = SKS_CCR_File::construct(gSKS_BF_BankIntType);
        sks_ccr_file.setFilePathName(FileName);
    
        path = sks_ccr_file::removeLastPathSlash(sks_ccr_file.getFilePath());
        select crossCompany * from sks_pp_bank
            where ((gSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal && sks_pp_bank.CCR_Path == path)
                    ||
            (gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric && sks_pp_bank.CCR_BankFabricLocation == path))
                    && sks_pp_bank.CCR_FormatID != '';
        changeCompany(sks_pp_bank.company())
        {
            if(sks_pp_bank)
            {
                select * from bankAccountTable
                 where bankAccountTable.AccountID == sks_pp_bank.BankAccountId;
            }
        }
    
        return BankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountCurrency</Name>
				<Source><![CDATA[
    protected CurrencyCode getBankAccountCurrency()
    {
        BankAccountTable bankAccountTable;

        select CurrencyCode from bankAccountTable where bankAccountTable.AccountId == BankAccountStatement.AccountId;
    
        return bankAccountTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountFromAcctID</Name>
				<Source><![CDATA[
    private BankAccountTable getBankAccountFromAcctID(SKS_PP_Bank sks_PP_Bank)
    {
        BankAccountTable bankAccountTable;
    
        changeCompany(sks_PP_Bank.company())
        {
            select firstOnly * from bankAccountTable where bankAccountTable.AccountID == sks_PP_Bank.BankAccountId;
        }
        return  bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountFromAcctNum</Name>
				<Source><![CDATA[
    /// Finds Bank Account Id for bank account number
    private BankAccountTable getBankAccountFromAcctNum(BankAccount accountNum, container _crossCompanyList)
    {
        BankAccountTable bankAccountTable;
    
        while select crosscompany:_crossCompanyList * from bankAccountTable where
         bankAccountTable.AccountNum LIKE '*' + accountNum
        {
            if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.AccountNum) == accountNum)
            {
                return bankAccountTable;
            }
        }
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountId</Name>
				<Source><![CDATA[
    /// Finds Bank Account Id for bank account number
    /// Bank account number must have leading zeros stripped prior to passing to this method
    protected CompanyBankAccountId getBankAccountId(BankAccount accountNum)
    {
        BankAccountTable bankAccountTable;
    
        while select crossCompany * from bankAccountTable where
         bankAccountTable.AccountNum LIKE '*' + accountNum
        {
            if(SKS_PP_StringFormats::strLTrimZeroes(bankAccountTable.AccountNum) == accountNum)
            {
                return bankAccountTable.AccountID;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountNumber</Name>
				<Source><![CDATA[
    protected str getBankAccountNumber()
    {
        BankAccountTable bankAccountTable;

        select * from bankAccountTable where bankAccountTable.AccountId == BankAccountStatement.AccountId;
    
        return bankAccountTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountRecId</Name>
				<Source><![CDATA[
    protected RecId getBankAccountRecId()
    {
        BankAccountTable bankAccountTable;

        select Recid from bankAccountTable where bankAccountTable.AccountId == BankAccountStatement.AccountId;
    
        return bankAccountTable.Recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventLogText</Name>
				<Source><![CDATA[
    public str getEventLogText()
    {

        return eventLogText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getImportCount</Name>
				<Source><![CDATA[
    public int getImportCount()
    {
        ;
        return ImportCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_PP_Setup</Name>
				<Source><![CDATA[
    private void getSKS_PP_Setup()
    {
        ;
        select * from sks_pp_Setup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTagValue</Name>
				<Source><![CDATA[
    protected str getTagValue(List _ListOfSKS_BR_FieldValue, SKS_BR_MT940Field _SKS_BR_MT940Field)
    {
        ListEnumerator locListEnum;
        SKS_BR_FieldValue locSKS_BR_FieldValue;
        str locReturnValue = '';
    
        locListEnum = _ListOfSKS_BR_FieldValue.getEnumerator();
        locListEnum.reset();
        while((strLen(locReturnValue) == 0) && (locListEnum.MoveNext()))
        {
            locSKS_BR_FieldValue = locListEnum.current();
            if(locSKS_BR_FieldValue.getSKS_BR_MT940FieldType() == _SKS_BR_MT940Field)
                locReturnValue = locSKS_BR_FieldValue.getValue();
    
        }

        return locReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    protected void handleError(SKS_CCR_BankHeaderRecID headerId, str errorMessage, int lineNumber)
    {
        this.closeFile();
        this.createErrorLog(errorMessage, lineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCompletedError</Name>
				<Source><![CDATA[
    //SKS-Begin
    //SKS_BR4_BankStatementDuplicate
    protected void handleCompletedError(SKS_CCR_BankHeaderRecID headerId, str errorMessage, int lineNumber)
    {
        this.closeFile();
        this.createCompletedErrorLog(errorMessage, lineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSKS_CCR_BankTran</Name>
				<Source><![CDATA[
    //SKS_BR4_BankStatementDuplicate
    //SKS_End

    protected void initSKS_CCR_BankTran()
    {
        bankTran.clear();
        bankTran.initValue();
        bankTran.FileDateTime = fileDateTime;
        bankTran.Filename = fileName;
        bankTran.CCRHeaderRecId = bankHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    protected boolean openFile()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseValue</Name>
				<Source><![CDATA[
    protected boolean parseValue()
    {
        SKS_CCR_Parse sks_ccr_parse;
    
        sks_ccr_parse = new SKS_CCR_Parse(bankTran);
        sks_ccr_parse.run();
    
        if(sks_ccr_parse.getErrorText() != '')
        {
            ttsabort;
            ImportCount = 0;
            this.handleError(bankHeaderRecId, sks_ccr_parse.getErrorText(), 0);
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTranType</Name>
				<Source><![CDATA[
    protected SKS_BR_TranTypeProcessing processTranType(CompanyBankAccountId _bankAccountId)
    {
        SKS_BR_TranTypeProcessing tranTypeProcessing;

        tranTypeProcessing = new SKS_BR_TranTypeProcessing();
        tranTypeProcessing.setFormatId(FormatId);
        tranTypeProcessing.setValidateTranType(sks_br_fileformat.ValidateTranMapping);
        tranTypeProcessing.setFileTranType(bankTran.FileTranType);
        tranTypeProcessing.setBankAccountId(_bankAccountId);
        tranTypeProcessing.run(true);
    
        return tranTypeProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    protected void readFile()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    SKS_CCR_BankHeaderRecID run()
    {
        ImportCount = 0;
        this.getSKS_PP_Setup();

        this.createHeader();
        if(this.checkDuplicateFile())
        {
            return 0;
        }

        this.readFile();
        if(this.checkDuplicateStatement()) //SKS_BS_BR4_BankStatementDuplicateBlock- changed the code positioning
        {
            return 0;
        }
        return bankHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankAccountStatement</Name>
				<Source><![CDATA[
    void setBankAccountStatement(BankAccountStatement _bankAccountStatement)
    {
        bankAccountStatement = _bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDecimalPlaces</Name>
				<Source><![CDATA[
    void setDecimalPlaces( int Places )
    {
        Decimal_Places = Places;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileDateTime</Name>
				<Source><![CDATA[
    void setFileDateTime(UtcDateTime _fileDateTime)
    {
        FileDateTime = _fileDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileName</Name>
				<Source><![CDATA[
    void setFileName(str _fileName)
    {
        FileName = _fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileType</Name>
				<Source><![CDATA[
    void setFileType(SKS_CCR_FileType _fileType)
    {
        FileType = _fileType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormatId</Name>
				<Source><![CDATA[
    void setFormatId(SKS_BR_FormatId _formatId)
    {
        FormatId = _formatId;
    
        // Read the record from the database and set the other properties
        // Omit headers
        // Omit trailers
        // Decimal Places
        sks_br_fileformat = null;
        select * from sks_br_fileformat where sks_br_fileformat.FormatID == formatId
            && sks_br_fileformat.CCR_IsCCRFormat == NoYes::Yes;     /// SKS_FDD_13903 - To make sure that its picking only CCR format
        this.setOmitHeaderRecsNbr( sks_br_fileformat.OmitHeaderRecs );
        this.setOmitTrailerRecsNbr( sks_br_fileformat.OmitTrailerRecs );
        this.setDecimalPlaces( sks_br_fileformat.DecimalPlaces );
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMatchRuleBasedOnMappingRules</Name>
				<Source><![CDATA[
    protected void setMatchRuleBasedOnMappingRules()
    {
        SKS_BR_GLMappingRuleLookup locSKS_BR_GLMappingRuleLookup;
        SKS_BR_GLMappingRuleGroup locSKS_BR_GLMappingRuleGroup;
        SKS_CCR_BankTran locSKS_CCR_BankTran;
        //SKS_PP_Bank     locSKS_PP_Bank;
    
        //We need to take the parsed value and see if it matches any of the possible mapping options,
        //      if the parsedvalue matches any a mapping rule
        //      {
        //          if the mapping rule is an actual mapping behavior
        //              create GL
        //          else if the mapping rule is matching rule
        //              Set the matching rule, and skip GL creation
        //      }
        while select crosscompany AccountId, recid from banktran
        order by banktran.dataAreaId, banktran.AccountId
        where banktran.CCRHeaderRecId == bankHeaderRecId
        {
            changeCompany(bankTran.company())
            {
                select forupdate locSKS_CCR_BankTran where locSKS_CCR_BankTran.RecId == bankTran.recID;
                if(strLen(locSKS_CCR_BankTran.GLMappingRuleGroupId) > 0)
                {
                    locSKS_BR_GLMappingRuleLookup = SKS_CCR_GLProcessing::findLookupValue(locSKS_CCR_BankTran.GLMappingRuleGroupId, locSKS_CCR_BankTran.ParsedValue);
                    if(locSKS_BR_GLMappingRuleLookup)
                    {
                        // SKS_FDD_13903 - CustomerSettlement is not used for CCR
                        /*if(locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::CustomerSettlement)
                        {
                            locSKS_PP_Bank = SKS_PP_Bank::find(bankTran.AccountId);
                            select forupdate locSKS_CCR_BankTran where locSKS_CCR_BankTran.RecId == bankTran.recID;
                            locSKS_CCR_BankTran.GLMatchOrCreate = SKS_BR_GLMatchOrCreate::CustomerSettlement;
                            locSKS_CCR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleLookup.MatchingRuleGroupId;
                            locSKS_CCR_BankTran.update();
                        }*/
                        if(locSKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::GLMatch)
                        {
                            locSKS_CCR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleLookup.MatchingRuleGroupId;
                            locSKS_CCR_BankTran.GLMatchOrCreate =  SKS_CCR_GLMatchOrCreate::GLMatch;
                            locSKS_CCR_BankTran.GLMappingRuleGroupId = '';
    
                            locSKS_CCR_BankTran.update();
                        }
                        // SKS_FDD_13903 - CustomerSettlement is not used for CCR
                        //Temporarily, Sweep Trans need to have Both the GL MAPPIING RULE GROUP ID & THE MATCHING GROUP ID.
                        //  The matching is used to create the sweep SKS_CCR_BankTran records in during GL trans creation.
                        //  The sweeps will be created with no GL Mapping rule, as that is only used for this Concentration trans.
                        //  The Concentration trans will have it's Matching Rule Group ID cleared immediately following creation
                        //      of the Sweep SKS_CCR_BankTran records.
                        /*else if(locSKS_BR_GLMappingRuleLookup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA)
                        {
                            locSKS_CCR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleLookup.MatchingRuleGroupId;
                            locSKS_CCR_BankTran.GLMatchOrCreate =  SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA;
                            locSKS_CCR_BankTran.update();
                        }*/
                        else if(locSKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::Manual) //10362:  Manual Lookups populate at GJCreate
                        {
                            locSKS_CCR_BankTran.GLMatchOrCreate = SKS_CCR_GLMatchOrCreate::Manual;
                            locSKS_CCR_BankTran.update();
                        }
                        else // Bug 7352: For GLCreate
                        {
                            locSKS_CCR_BankTran.GLMatchOrCreate = locSKS_BR_GLMappingRuleLookup.CCR_GLMatchOrCreate;
                            locSKS_CCR_BankTran.update();
                        }
                    }
                    else //failed to find a match in the Mapping Lookups.  Use Default action
                    {
                        select MatchingRuleGroupId, CCR_GLMatchOrCreate from locSKS_BR_GLMappingRuleGroup
                            where locSKS_BR_GLMappingRuleGroup.RuleGroupId == locSKS_CCR_BankTran.GLMappingRuleGroupId
                            && locSKS_BR_GLMappingRuleGroup.CCR_IsCCReconciliation == NoYes::Yes;
                        /*if(locSKS_BR_GLMappingRuleGroup.GLMatchOrCreate == SKS_BR_GLMatchOrCreate::CustomerSettlement)
                        {
                            locSKS_PP_Bank = SKS_PP_Bank::find(bankTran.AccountId);
                            select forupdate locSKS_CCR_BankTran where locSKS_CCR_BankTran.RecId == bankTran.recID;
                            locSKS_CCR_BankTran.GLMatchOrCreate = SKS_BR_GLMatchOrCreate::CustomerSettlement;
                            locSKS_CCR_BankTran.update();
                        }*/
                        if(locSKS_BR_GLMappingRuleGroup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchorCreate::GLMatch)
                        {
                            locSKS_CCR_BankTran.MatchingRuleGroupId = locSKS_BR_GLMappingRuleGroup.MatchingRuleGroupId;
                            locSKS_CCR_BankTran.GLMatchOrCreate = locSKS_BR_GLMappingRuleGroup.CCR_GLMatchOrCreate;
                            locSKS_CCR_BankTran.GLMappingRuleGroupId = '';
                            locSKS_CCR_BankTran.update();
                        }
                        else if(locSKS_BR_GLMappingRuleGroup.CCR_GLMatchOrCreate == SKS_CCR_GLMatchOrCreate::Manual)  //10362:  Manual Lookups populate at GJCreate
                        {
                            locSKS_CCR_BankTran.GLMatchOrCreate = SKS_CCR_GLMatchOrCreate::Manual;
                            locSKS_CCR_BankTran.update();
                        }
                        else // Bug 7352: For GLCreate, GLCreateSweepAndMatchZBA
                        {
                            locSKS_CCR_BankTran.GLMatchOrCreate = locSKS_BR_GLMappingRuleGroup.CCR_GLMatchOrCreate;
                            locSKS_CCR_BankTran.update();
                        }
                    }
                }
                // Bug 7368
                else if(strLen(locSKS_CCR_BankTran.MatchingRuleGroupId) > 0)
                {
                    locSKS_CCR_BankTran.GLMatchOrCreate =  SKS_CCR_GLMatchOrCreate::GLMatch;
                    locSKS_CCR_BankTran.update();
                }
            }
    
            locSKS_BR_GLMappingRuleGroup = null;
            locSKS_BR_GLMappingRuleLookup = null;
            locSKS_CCR_BankTran = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOmitHeaderRecsNbr</Name>
				<Source><![CDATA[
    void setOmitHeaderRecsNbr(int _omitHeaderRecsNbr)
    {
        OmitHeaderRecsNbr = _omitHeaderRecsNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOmitTrailerRecsNbr</Name>
				<Source><![CDATA[
    void setOmitTrailerRecsNbr(int _omitTrailerRecsNbr)
    {
        OmitTrailerRecsNbr = _omitTrailerRecsNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>str2date</Name>
				<Source><![CDATA[
    protected date str2date(str _text, int _sequence)
    {
        date rtnval;
        str value = _text;
    
        if(SKS_PP_StringFormats::strIndexOf(value,' '))
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,' ') - 1);
        else if(SKS_PP_StringFormats::strIndexOf(value,'T'))
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,'T') - 1);
        else if(SKS_PP_StringFormats::strIndexOf(value,'t'))
            value = SKS_PP_StringFormats::strSub(value,1,SKS_PP_StringFormats::strIndexOf(value,'t') - 1);
    
        rtnval = str2date(value, _sequence);
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountTrans</Name>
				<Source><![CDATA[
    protected void updateBankAccountTrans()
    {
        ;
        bankAccountTrans.AccountStatement = bankAccountStatement.AccountStatementNum;
        bankAccountTrans.AccountStatementDate = bankAccountStatement.AccountStatementDate;
        bankAccountTrans.Included = 1;
        bankAccountTrans.doUpdate();
    
        bankTran.BookNum = bankTran.BankNum; //Update BookNum to indicate a match was found
        bankTran.AccountStatementNum = bankAccountStatement.AccountStatementNum;
        bankTran.AccountStatementDate = bankAccountStatement.AccountStatementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHeader</Name>
				<Source><![CDATA[
    protected void updateHeader(SKS_BR_ImportStatus importStatus, str newPathFile)
    {
        SKS_CCR_BankHeader locSKS_CCR_BankHeader;

        select forupdate * from locSKS_CCR_BankHeader where locSKS_CCR_BankHeader.RecId == bankHeaderRecId;
        locSKS_CCR_BankHeader.Status = importStatus;
        locSKS_CCR_BankHeader.Filename = newPathFile;
        locSKS_CCR_BankHeader.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountId</Name>
				<Source><![CDATA[
    protected boolean validateAccountId(CompanyBankAccountId accountId)
    {
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_CCR_File locSKS_CCR_File;
        sks_pp_Setup locSKS_PP_Setup;
        str filePath;
    
        select firstonly CCRPath, CCRBankFabricLocation from locSKS_PP_Setup;
    
        select * from  locSKS_PP_Bank
         where locSKS_PP_Bank.BankAccountId == accountId;
    
        if(locSKS_PP_Bank && locSKS_PP_Bank.CCR_FormatID != '')
        {
            locSKS_CCR_File = SKS_CCR_File::construct(gSKS_BF_BankIntType);
            locSKS_CCR_File.setFilePathName(FileName);
            filePath = SKS_CCR_File::removeLastPathSlash(locSKS_CCR_File.getFilePath());
    
            if(locSKS_PP_Bank.CCR_FromSetup == 0)
            {
                if(
                    (filepath == locSKS_PP_Bank.CCR_Path
                        && gSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal
                    )
                    ||
                    (filepath == locSKS_PP_Bank.CCR_BankFabricLocation
                        && gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric
                    )
                )
                {
                    return true;
                }
            }
            else
            {
                if(
                    (filepath == locSKS_PP_Setup.CCRPath
                        && gSKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal
                    )
                    ||
                    (filepath == locSKS_PP_Setup.CCRBankFabricLocation
                        && gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric
                    )
                )
                    return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postGL</Name>
				<Source><![CDATA[
    public static void postGL(SKS_CCR_BankHeaderRecID _SKS_CCR_BankHeaderRecID)
    {
        LedgerJournalTable  locLedgerJournalTable;
        LedgerJournalTrans  locLedgerJournalTrans;
        SKS_CCR_BankTran     locSKS_CCR_BankTran;
        LedgerJournalName   LedgerJournalName;
        //SKS_PP_Setup ebanking_setup;
    
        while select crossCompany * from locSKS_CCR_BankTran
                where locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecID &&
                        locSKS_CCR_BankTran.GLMappingRuleGroupId != ''
            join journalnum from locLedgerJournalTrans
                where locSKS_CCR_BankTran.LedgerJournalRecId == locLedgerJournalTrans.RecId
            join journalnum, JournalName, DataAreaId from locLedgerJournalTable
                group by journalnum, DataAreaId, JournalName
                where locLedgerJournalTable.journalnum == locLedgerJournalTrans.journalnum
        {
            changeCompany(locLedgerJournalTable.company())
            {
                LedgerJournalName = null;
                select SKS_CCR_AutoPost from LedgerJournalName where LedgerJournalName.JournalName == locLedgerJournalTable.JournalName;
    
                if(LedgerJournalName.SKS_CCR_AutoPost)
                {
                    try
                    {
                        LedgerJournalPost::postJournal(locLedgerJournalTable, NoYes::No);
                        SKS_CCR_HistoryTable::insertEvent(SKS_CCR_Action::GLAutoPosted,_SKS_CCR_BankHeaderRecID,'',dateNull(),'',locLedgerJournalTable.JournalNum);
                    }
                    catch
                    {
                        SKS_CCR_HistoryTable::insertEvent(SKS_CCR_Action::GLAutoPostingFailed,_SKS_CCR_BankHeaderRecID,'',dateNull(),'',locLedgerJournalTable.JournalNum,strFmt("@SKS3079", "@SYS25908"));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultMatchGroup</Name>
				<Source><![CDATA[
    // Sets the default matching rule group id if no matching rule group or GL mapping rule is set
    public static void setDefaultMatchGroup(SKS_CCR_BankTran _SKS_CCR_BankTran)
    {
        SKS_BR_MatchingRulesMast SKS_BR_MatchingRulesMast;
    
        if(_SKS_CCR_BankTran.MatchingRuleGroupId == '' && _SKS_CCR_BankTran.GLMappingRuleGroupId == '')
        {
            if(_SKS_CCR_BankTran.TranCurrencyAmount > 0)
            {
                select SKS_BR_MatchingRulesMast where
                    SKS_BR_MatchingRulesMast.DefaultCredit == NoYes::Yes
                    && SKS_BR_MatchingRulesMast.CCR_IsCCReconciliation == NoYes::Yes;
            }
            else
            {
                select SKS_BR_MatchingRulesMast where
                    SKS_BR_MatchingRulesMast.DefaultDebit == NoYes::Yes
                    && SKS_BR_MatchingRulesMast.CCR_IsCCReconciliation == NoYes::Yes;
            }
            if(SKS_BR_MatchingRulesMast)
            {
                _SKS_CCR_BankTran.MatchingRuleGroupId = SKS_BR_MatchingRulesMast.RuleGroupId;
                _SKS_CCR_BankTran.MatchDefaultRule = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGLCreationCompanyAndJournal</Name>
				<Source><![CDATA[
    private static void setGLCreationCompanyAndJournal(SKS_CCR_BankHeaderRecID _SKS_CCR_BankHeaderRecID)
    {
        SKS_CCR_BankTran locSKS_CCR_BankTran;
        sks_pp_Setup    locSKS_PP_Setup;
        SKS_CCR_BankTran locSKS_CCR_BankTranUpdate;
        ;
    
        //The Creation Company and Journal
        while select crossCompany dataareaid from locSKS_CCR_BankTran
            group by locSKS_CCR_BankTran.dataAreaId
            where locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecID
        {
            changeCompany(locSKS_CCR_BankTran.company())
            {
                locSKS_PP_Setup = null;
                locSKS_CCR_BankTranUpdate = null;
                select CCRGLCreationCompany, CCRJournalName from locSKS_PP_Setup;
                update_recordset locSKS_CCR_BankTranUpdate
                    setting
                        GLCreationCompany = locSKS_PP_Setup.CCRGLCreationCompany,
                        JournalName = locSKS_PP_Setup.CCRJournalName
                    where locSKS_CCR_BankTranUpdate.CCRHeaderRecId == _SKS_CCR_BankHeaderRecID;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateImportHitRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Import Hit Rate is updated here
    /// </summary>
    /// 7653 - CR
    public static void updateImportHitRate(SKS_CCR_BankHeaderRecID _SKS_CCR_BankHeaderRecID)
    {        
        BankAccountStatement locBankAccountStatement;
        int64 totalImported;
        int64 totalMatched;
        SKS_CCR_BankTran locSKS_CCR_BankTran;
        BankAccountStatement locBankAccountStatementUpt;

        while select crosscompany locBankAccountStatement where locBankAccountStatement.SKS_CCR_BankHeaderRecID == _SKS_CCR_BankHeaderRecID
        {
            changecompany(locBankAccountStatement.company())
            {
                select count(RecId) from locSKS_CCR_BankTran where locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecID; //7653
                totalImported = locSKS_CCR_BankTran.RecId;

                select count(RecId) from locSKS_CCR_BankTran where locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecID && locSKS_CCR_BankTran.Matched == NoYes::Yes; //7653
                totalMatched  = locSKS_CCR_BankTran.RecId;
              
                ttsBegin;        
              
                if(totalImported > 0)
                {
                    locBankAccountStatementUpt = locBankAccountStatement;
                    locBankAccountStatementUpt.selectForUpdate(true);
                    locBankAccountStatementUpt.SKS_CCR_ImportHitRate = (totalMatched / totalImported) * 100;
                    locBankAccountStatementUpt.update();
                }
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDuplicateStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///check for duplicate statement
    /// </summary>
    // 7527 and SKS_BS_BR4_BankStatementDuplicateBlock
    private boolean checkDuplicateStatement()
    {        
        SKS_PP_Bank             locSKS_PP_Bank;
        SKS_CCR_HistoryTable     sks_CCR_HistoryTable,sks_CCR_HistoryTableLoc;
        BankAccountStatement    locBankAccountStatement;
               
        select sks_CCR_HistoryTable where
            sks_CCR_HistoryTable.BankHeaderRecId == bankHeaderRecId;

        select sks_CCR_HistoryTableLoc where
            sks_CCR_HistoryTableLoc.BankHeaderRecId == bankHeaderRecId &&
            sks_CCR_HistoryTableLoc.Action == SKS_CCR_Action::BankStatementAutoCreated;
    
        select firstonly locBankAccountStatement where locBankAccountStatement.AccountStatementNum == sks_CCR_HistoryTable.AccountStatementNum
                                                        && locBankAccountStatement.AccountId == sks_CCR_HistoryTable.AccountID
                                                        && locBankAccountStatement.AccountStatementDate == sks_CCR_HistoryTable.AccountStatementDate
                                                        && locBankAccountStatement.SKS_CCR_BankHeaderRecID != sks_CCR_HistoryTable.BankHeaderRecId;
        if(locBankAccountStatement)
        {
            if (sks_CCR_HistoryTable && !sks_CCR_HistoryTableLoc)
            {
                //Status:Error
                this.handleError(bankHeaderRecId, strFmt("@SKS4395",
                                                        date2str(locBankAccountStatement.AccountStatementDate,-1,-1,-1,-1,-1,-1,DateFlags::None),
                                                        locBankAccountStatement.AccountStatementNum, locSKS_PP_Bank.company(),
                                                        locBankAccountStatement.AccountId), 0);
            }
            else
            {
                //Status:Completed with Errors
                this.handleCompletedError(bankHeaderRecId, strFmt("@SKS4395",
                                                        date2str(locBankAccountStatement.AccountStatementDate,-1,-1,-1,-1,-1,-1,DateFlags::None),
                                                        locBankAccountStatement.AccountStatementNum, locSKS_PP_Bank.company(),
                                                        locBankAccountStatement.AccountId), 0);
            }
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseRefernceNumber</Name>
				<Source><![CDATA[
    protected str parseRefernceNumber(str _ReferenceNumber)
    {
        SKS_BR_FileFormat locSKS_BR_FileFormat;
        
        select firstonly DataAreaID, RecID, RemoveLeadingZeros from locSKS_BR_FileFormat
            where locSKS_BR_FileFormat.FormatID == FormatID
            && locSKS_BR_FileFormat.CCR_IsCCRFormat == NoYes::Yes;      /// SKS_FDD_13903 - To make sure that its picking only CCR format
        if(locSKS_BR_FileFormat)
        {
            if(locSKS_BR_FileFormat.RemoveLeadingZeros)
                return SKS_PP_StringFormats::strLTrimZeroes(global::strLRTrim(_ReferenceNumber));
            else
                return global::strLRTrim(_ReferenceNumber);
        }
        else
            return SKS_PP_StringFormats::strLTrimZeroes(global::strLRTrim(_ReferenceNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditCardReconciliationExtensionLines</Name>
				<Source><![CDATA[
    protected str createCreditCardReconciliationExtensionLines(SKS_CCR_BankHeaderRecID _SKS_CCR_BankHeaderRecID)
    {
        str locErrorMsg;

        if(!SKS_PP_Setup.ModCCReconciliationExtensions)
            return '';

        locErrorMsg = this.createFeeLine(_SKS_CCR_BankHeaderRecID);
        locErrorMsg = this.createMarkupLine(_SKS_CCR_BankHeaderRecID);  //SKS_FDD_15121
        if(strLen(locErrorMsg) == 0)
        {
            locErrorMsg = this.createDepositLine(_SKS_CCR_BankHeaderRecID);
        }
        return locErrorMsg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDepositLine</Name>
				<Source><![CDATA[
    protected str createDepositLine(SKS_CCR_BankHeaderRecID _SKS_CCR_BankHeaderRecID)
    {
        
        SKS_CCR_BankTran locSKS_CCR_BankTran;
        SKS_CCR_BankTran locDepositSKS_CCR_BankTran;
        SKS_BR_FileFormat locSKS_BR_FileFormat;
        SKS_PP_Bank locSKS_PP_Bank;
        boolean locBooleanisCredit = true;
        SKS_CCR_Parse locSKS_CCR_Parse;
        SKS_BR_TranTypeProcessing locSKS_BR_TranTypeProcessing;
        BankAccountTable locBankAccountTable;
        CurrencyExchangeHelper locCurrencyExchangeHelper;

        while Select crosscompany AccountId,
            AccountStatementDate,
            AccountStatementNum,
            CCRHeaderRecId,
            Filename,
            FileDateTime,
            TransCurrency,
            sum(TranAmount),
            sum(TranCurrencyAmount),
            maxof(TranDate),
            maxof(ValueDate),
            DataAreaId
        from locSKS_CCR_BankTran
        group by locSKS_CCR_BankTran.DataAreaId,
                    locSKS_CCR_BankTran.AccountId,
                    locSKS_CCR_BankTran.CCRHeaderRecId,
                    locSKS_CCR_BankTran.OriginalStatementRecId,
                    locSKS_CCR_BankTran.Filename,
                    locSKS_CCR_BankTran.FileDateTime,
                    locSKS_CCR_BankTran.AccountStatementDate,
                    locSKS_CCR_BankTran.AccountStatementNum,
                    locSKS_CCR_BankTran.ImportedStatementDate,
                    locSKS_CCR_BankTran.ImportedStatementNum,
                    locSKS_CCR_BankTran.TransCurrency
        where locSKS_CCR_BankTran.OriginalStatementRecId != 0
                && locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecID
        {
            locSKS_PP_Bank = null;
            locSKS_BR_FileFormat = null;
            locBankAccountTable = null;

            changecompany(locSKS_CCR_BankTran.company())
            {
                Select  CCR_FormatID, RecId from locSKS_PP_Bank
                    where locSKS_PP_Bank.BankAccountId == locSKS_CCR_BankTran.AccountID
                join  CCDepStmtLineDesc,
                    CCDepStmtLineFileTranType,
                    DebitCreditIdentifier,
                    RecId,
                    ValidateTranMapping,
                    CCR_FileType
                    from locSKS_BR_FileFormat
                    where locSKS_BR_FileFormat.FormatID == locSKS_PP_Bank.CCR_FormatID &&
                    locSKS_BR_FileFormat.CCDepGenerateDepositStatementLine == NoYes::Yes
                    && (locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::Delimited
                    || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::FixedField
                    || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::HeartlandFDF
                    || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::Adyen         //SKS_FDD_15121
                    || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::PayPal)       //SKS_FDD_15816
                join CurrencyCode from locBankAccountTable 
                    where locBankAccountTable.AccountID == locSKS_CCR_BankTran.AccountId;

                if(locSKS_BR_FileFormat)
                {
                    locDepositSKS_CCR_BankTran = null;
                    locDepositSKS_CCR_BankTran.AccountId = locSKS_CCR_BankTran.AccountId;
                    locDepositSKS_CCR_BankTran.AccountStatementDate = locSKS_CCR_BankTran.AccountStatementDate;
                    locDepositSKS_CCR_BankTran.AccountStatementNum = locSKS_CCR_BankTran.AccountStatementNum;
                    locDepositSKS_CCR_BankTran.OriginalStatementRecId = locSKS_CCR_BankTran.OriginalStatementRecId;
                    locDepositSKS_CCR_BankTran.CCRHeaderRecId = locSKS_CCR_BankTran.CCRHeaderRecId;
                    locDepositSKS_CCR_BankTran.Filename = locSKS_CCR_BankTran.Filename;
                    locDepositSKS_CCR_BankTran.FileDateTime = locSKS_CCR_BankTran.FileDateTime;
                    locDepositSKS_CCR_BankTran.ImportedStatementDate = locSKS_CCR_BankTran.ImportedStatementDate;
                    locDepositSKS_CCR_BankTran.ImportedStatementNum = locSKS_CCR_BankTran.ImportedStatementNum;
                    locDepositSKS_CCR_BankTran.TranDate = locSKS_CCR_BankTran.TranDate;
                    locDepositSKS_CCR_BankTran.ValueDate = locSKS_CCR_BankTran.ValueDate;
                    locDepositSKS_CCR_BankTran.FileTranType = locSKS_BR_FileFormat.CCDepStmtLineFileTranType;
                    if(locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::PayPal)   //SKS_DevOps_16646
                    {
                        if(locSKS_CCR_BankTran.TransCurrency)
                        {
                            locDepositSKS_CCR_BankTran.TranDescription = 'CCY:' + locSKS_CCR_BankTran.TransCurrency + ' ' + locSKS_BR_FileFormat.CCDepStmtLineDesc;
                        }
                        else
                        {
                            locDepositSKS_CCR_BankTran.TranDescription = locSKS_BR_FileFormat.CCDepStmtLineDesc;
                        }
                    }
                    else
                    {
                        locDepositSKS_CCR_BankTran.TranDescription = locSKS_BR_FileFormat.CCDepStmtLineDesc;
                    }

                    locDepositSKS_CCR_BankTran.TranDescriptionUser = locSKS_BR_FileFormat.CCDepStmtLineDesc;
                    locSKS_BR_TranTypeProcessing = new SKS_BR_TranTypeProcessing();
                    locSKS_BR_TranTypeProcessing.setFormatId(locSKS_PP_Bank.CCR_FormatID);
                    locSKS_BR_TranTypeProcessing.setValidateTranType(locSKS_BR_FileFormat.ValidateTranMapping);
                    locSKS_BR_TranTypeProcessing.setFileTranType(locDepositSKS_CCR_BankTran.FileTranType);
                    locSKS_BR_TranTypeProcessing.setBankAccountId(locDepositSKS_CCR_BankTran.AccountId);
                    locSKS_BR_TranTypeProcessing.run(true);
                    if(locSKS_BR_TranTypeProcessing.getErrorText() != '')
                    {
                        return strfmt("@SKS528", locDepositSKS_CCR_BankTran.FileTranType);
                    }
                    locDepositSKS_CCR_BankTran.TransCurrency = locSKS_CCR_BankTran.TransCurrency;
                    locDepositSKS_CCR_BankTran.TranCurrencyAmount = (locBooleanisCredit)?(locSKS_CCR_BankTran.TranCurrencyAmount * -1):locSKS_CCR_BankTran.TranCurrencyAmount;
                    //currency conversion not necessary as we can sum the already converted amounts.
                    locDepositSKS_CCR_BankTran.TranAmount = (locBooleanisCredit)?(locSKS_CCR_BankTran.TranAmount * -1):locSKS_CCR_BankTran.TranCurrencyAmount;

                    locDepositSKS_CCR_BankTran.BankTranType = locSKS_BR_TranTypeProcessing.getBankTranType();
                    if (strLen(locDepositSKS_CCR_BankTran.BankTranType) > 0)
                    {
                        locDepositSKS_CCR_BankTran.GLMappingRuleGroupId = locSKS_BR_TranTypeProcessing.getGLMappingRuleGroupId();
                        locDepositSKS_CCR_BankTran.MatchingRuleGroupId = locSKS_BR_TranTypeProcessing.getMatchingRuleGroupId();
                    }
                    else
                    {
                        locDepositSKS_CCR_BankTran.GLMappingRuleGroupId = '';
                        locDepositSKS_CCR_BankTran.MatchingRuleGroupId = '';
                        locDepositSKS_CCR_BankTran.GLMatchOrCreate = SKS_CCR_GLMatchOrCreate::GLMatch;
                    }
                    locDepositSKS_CCR_BankTran.DefaultDimension = locSKS_BR_TranTypeProcessing.getDimension();
                    locDepositSKS_CCR_BankTran.ImportedStatementNum = locSKS_CCR_BankTran.ImportedStatementNum;
                    locDepositSKS_CCR_BankTran.ImportedStatementDate = locSKS_CCR_BankTran.ImportedStatementDate;
                    SKS_CCR_ReadFile::setDefaultMatchGroup(locDepositSKS_CCR_BankTran);
                    locSKS_CCR_Parse= new SKS_CCR_Parse(locDepositSKS_CCR_BankTran);
                    locSKS_CCR_Parse.run();
                    locDepositSKS_CCR_BankTran.insert();
                }
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFeeLine</Name>
				<Source><![CDATA[
    private str createFeeLine(SKS_CCR_BankHeaderRecID _SKS_CCR_BankHeaderRecID)
    {
        SKS_CCR_BankTran locSKS_CCR_BankTran;
        SKS_CCR_BankTran locFeeSKS_CCR_BankTran;
        SKS_BR_FileFormat locSKS_BR_FileFormat;
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_CCR_Parse locSKS_CCR_Parse;
        SKS_BR_TranTypeProcessing locSKS_BR_TranTypeProcessing;
        BankAccountTable locBankAccountTable;
        CurrencyExchangeHelper locCurrencyExchangeHelper;

        // vvv Generate Fee Lines vvv
        while Select crosscompany AccountId,
                                AccountStatementDate,
                                ImportedStatementDate,
                                AccountStatementNum,
                                ImportedStatementNum,
                                CCRHeaderRecId,
                                Filename,
                                FileDateTime,
                                TransCurrency,
                                sum(TranCurrencyAmount),
                                sum(TransactionFeesAmt),
                                maxof(TranDate),
                                maxof(ValueDate),
                                DataAreaId
        from locSKS_CCR_BankTran
        group by locSKS_CCR_BankTran.DataAreaId,
                    locSKS_CCR_BankTran.AccountId,
                    locSKS_CCR_BankTran.CCRHeaderRecId,
                    locSKS_CCR_BankTran.OriginalStatementRecId,
                    locSKS_CCR_BankTran.AccountStatementDate,
                    locSKS_CCR_BankTran.AccountStatementNum,
                    locSKS_CCR_BankTran.Filename,
                    locSKS_CCR_BankTran.FileDateTime,
                    locSKS_CCR_BankTran.ImportedStatementDate,
                    locSKS_CCR_BankTran.ImportedStatementNum,
                    locSKS_CCR_BankTran.TransCurrency
        where locSKS_CCR_BankTran.OriginalStatementRecId != 0
                && locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecID
        {
            locSKS_PP_Bank = null;
            locSKS_BR_FileFormat = null;
            locBankAccountTable = null;

            changecompany(locSKS_CCR_BankTran.company())
            {
                Select CCR_FormatID, RecId from locSKS_PP_Bank
            where locSKS_PP_Bank.BankAccountId == locSKS_CCR_BankTran.AccountID
        join  CCFeeReverseSignOnFeeAmt,
                    CCFeeStmtLineDesc,
                    CCFeeStmtLineFileTranType,
                    DebitCreditIdentifier,
                    RecId,
                    ValidateTranMapping,
                    CCR_FileType
            from locSKS_BR_FileFormat
                where locSKS_BR_FileFormat.FormatID == locSKS_PP_Bank.CCR_FormatID &&
                locSKS_BR_FileFormat.CCFFeeGenerateFeeStatementLine == NoYes::Yes &&
                    (locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::Delimited
                    || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::FixedField
                    || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::HeartlandFDF
                    || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::Adyen         //SKS_FDD_15121
                    || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::PayPal)       //SKS_FDD_15121
        join CurrencyCode 
            from locBankAccountTable
                where locBankAccountTable.AccountID == locSKS_CCR_BankTran.AccountId;
                if(locSKS_BR_FileFormat && locSKS_CCR_BankTran.TransactionFeesAmt != 0)
                {
                    locFeeSKS_CCR_BankTran = null;
                    locFeeSKS_CCR_BankTran.AccountId = locSKS_CCR_BankTran.AccountId;
                    locFeeSKS_CCR_BankTran.AccountStatementDate = locSKS_CCR_BankTran.AccountStatementDate;
                    locFeeSKS_CCR_BankTran.AccountStatementNum = locSKS_CCR_BankTran.AccountStatementNum;
                    locFeeSKS_CCR_BankTran.OriginalStatementRecId = locSKS_CCR_BankTran.OriginalStatementRecId;
                    locFeeSKS_CCR_BankTran.CCRHeaderRecId = locSKS_CCR_BankTran.CCRHeaderRecId;
                    locFeeSKS_CCR_BankTran.Filename = locSKS_CCR_BankTran.Filename;
                    locFeeSKS_CCR_BankTran.FileDateTime = locSKS_CCR_BankTran.FileDateTime;
                    locFeeSKS_CCR_BankTran.ImportedStatementDate = locSKS_CCR_BankTran.ImportedStatementDate;
                    locFeeSKS_CCR_BankTran.ImportedStatementNum = locSKS_CCR_BankTran.ImportedStatementNum;
                    locFeeSKS_CCR_BankTran.TranDate = locSKS_CCR_BankTran.TranDate;
                    locFeeSKS_CCR_BankTran.ValueDate = locSKS_CCR_BankTran.ValueDate;
                    locFeeSKS_CCR_BankTran.FileTranType = locSKS_BR_FileFormat.CCFeeStmtLineFileTranType;
                    if(locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::PayPal)   //SKS_DevOps_16646
                    {
                        if(locSKS_CCR_BankTran.TransCurrency)
                        {
                            locFeeSKS_CCR_BankTran.TranDescription = 'CCY:' + locSKS_CCR_BankTran.TransCurrency + ' ' + locSKS_BR_FileFormat.CCFeeStmtLineDesc;
                        }
                        else
                        {
                            locFeeSKS_CCR_BankTran.TranDescription = locSKS_BR_FileFormat.CCFeeStmtLineDesc;
                        }
                    }
                    else
                    {
                        locFeeSKS_CCR_BankTran.TranDescription = locSKS_BR_FileFormat.CCFeeStmtLineDesc;
                    }

                    locFeeSKS_CCR_BankTran.TranDescriptionUser = locSKS_BR_FileFormat.CCFeeStmtLineDesc;
                    locSKS_BR_TranTypeProcessing = new SKS_BR_TranTypeProcessing();
                    locSKS_BR_TranTypeProcessing.setFormatId(locSKS_PP_Bank.CCR_FormatID);
                    locSKS_BR_TranTypeProcessing.setValidateTranType(locSKS_BR_FileFormat.ValidateTranMapping);
                    locSKS_BR_TranTypeProcessing.setFileTranType(locFeeSKS_CCR_BankTran.FileTranType);
                    locSKS_BR_TranTypeProcessing.setBankAccountId(locFeeSKS_CCR_BankTran.AccountId);
                    locSKS_BR_TranTypeProcessing.run(true);
                    if(locSKS_BR_TranTypeProcessing.getErrorText() != '')
                    {
                        return strfmt("@SKS528", locFeeSKS_CCR_BankTran.FileTranType);
                    }
                    locFeeSKS_CCR_BankTran.TransCurrency = locSKS_CCR_BankTran.TransCurrency;
                    if(locSKS_BR_FileFormat.CCFeeReverseSignOnFeeAmt)
                    {
                        locFeeSKS_CCR_BankTran.TranCurrencyAmount = locSKS_CCR_BankTran.TransactionFeesAmt * -1;
                    }
                    else
                    {
                        locFeeSKS_CCR_BankTran.TranCurrencyAmount = locSKS_CCR_BankTran.TransactionFeesAmt;
                    }
                    if(strUpr(locSKS_CCR_BankTran.TransCurrency) == strUpr(locBankAccountTable.CurrencyCode))
                    {
                        locFeeSKS_CCR_BankTran.TranAmount = locFeeSKS_CCR_BankTran.TranCurrencyAmount;
                    }
                    else
                    {
                        locCurrencyExchangeHelper = CurrencyExchangeHelper::construct();
                        locCurrencyExchangeHelper.parmExchangeDate(locSKS_CCR_BankTran.TranDate);
                        locFeeSKS_CCR_BankTran.TranAmount = locCurrencyExchangeHelper.calculateCurrencyToCurrency(locSKS_CCR_BankTran.TransCurrency, locBankAccountTable.CurrencyCode,locFeeSKS_CCR_BankTran.TranCurrencyAmount, true, true);
                    }

                    locFeeSKS_CCR_BankTran.BankTranType = locSKS_BR_TranTypeProcessing.getBankTranType();
                    if (strLen(locFeeSKS_CCR_BankTran.BankTranType) > 0)
                    {
                        locFeeSKS_CCR_BankTran.GLMappingRuleGroupId = locSKS_BR_TranTypeProcessing.getGLMappingRuleGroupId();
                        locFeeSKS_CCR_BankTran.MatchingRuleGroupId = locSKS_BR_TranTypeProcessing.getMatchingRuleGroupId();
                    }
                    else
                    {
                        locFeeSKS_CCR_BankTran.GLMappingRuleGroupId = '';
                        locFeeSKS_CCR_BankTran.MatchingRuleGroupId = '';
                        locFeeSKS_CCR_BankTran.GLMatchOrCreate = SKS_CCR_GLMatchOrCreate::GLMatch;
                    }
                    locFeeSKS_CCR_BankTran.DefaultDimension = locSKS_BR_TranTypeProcessing.getDimension();
                    locFeeSKS_CCR_BankTran.ImportedStatementNum = locSKS_CCR_BankTran.ImportedStatementNum;
                    locFeeSKS_CCR_BankTran.ImportedStatementDate = locSKS_CCR_BankTran.ImportedStatementDate;
                    SKS_CCR_ReadFile::setDefaultMatchGroup(locFeeSKS_CCR_BankTran);
                    locSKS_CCR_Parse= new SKS_CCR_Parse(locFeeSKS_CCR_BankTran);
                    locSKS_CCR_Parse.run();
                    locFeeSKS_CCR_BankTran.insert();
                }
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupLine</Name>
				<Source><![CDATA[
    //SKS_FDD_15121
    private str createMarkupLine(SKS_CCR_BankHeaderRecID _SKS_CCR_BankHeaderRecID)
    {
        SKS_CCR_BankTran locSKS_CCR_BankTran;
        SKS_CCR_BankTran locMarkupSKS_CCR_BankTran;
        SKS_BR_FileFormat locSKS_BR_FileFormat;
        SKS_PP_Bank locSKS_PP_Bank;
        SKS_CCR_Parse locSKS_CCR_Parse;
        SKS_BR_TranTypeProcessing locSKS_BR_TranTypeProcessing;
        BankAccountTable locBankAccountTable;
        CurrencyExchangeHelper locCurrencyExchangeHelper;

        // vvv Generate Markup Lines vvv
        while Select crosscompany AccountId,
                                AccountStatementDate,
                                ImportedStatementDate,
                                AccountStatementNum,
                                ImportedStatementNum,
                                CCRHeaderRecId,
                                Filename,
                                FileDateTime,
                                TransCurrency,
                                sum(TranCurrencyAmount),
                                sum(TransactionMarkupAmt),
                                maxof(TranDate),
                                maxof(ValueDate),
                                DataAreaId
        from locSKS_CCR_BankTran
        group by locSKS_CCR_BankTran.DataAreaId,
                    locSKS_CCR_BankTran.AccountId,
                    locSKS_CCR_BankTran.CCRHeaderRecId,
                    locSKS_CCR_BankTran.OriginalStatementRecId,
                    locSKS_CCR_BankTran.AccountStatementDate,
                    locSKS_CCR_BankTran.AccountStatementNum,
                    locSKS_CCR_BankTran.Filename,
                    locSKS_CCR_BankTran.FileDateTime,
                    locSKS_CCR_BankTran.ImportedStatementDate,
                    locSKS_CCR_BankTran.ImportedStatementNum,
                    locSKS_CCR_BankTran.TransCurrency
        where locSKS_CCR_BankTran.OriginalStatementRecId != 0
                && locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecID
        {
            locSKS_PP_Bank = null;
            locSKS_BR_FileFormat = null;
            locBankAccountTable = null;

            changecompany(locSKS_CCR_BankTran.company())
            {
                Select CCR_FormatID, RecId from locSKS_PP_Bank
                    where locSKS_PP_Bank.BankAccountId == locSKS_CCR_BankTran.AccountID
                    join  CCMarkupReverseSignOnAmt,
                            CCMarkupStmtLineDesc,
                            CCMarkupStmtLineFileTranType,
                            DebitCreditIdentifier,
                            RecId,
                            ValidateTranMapping
                    from locSKS_BR_FileFormat
                        where locSKS_BR_FileFormat.FormatID == locSKS_PP_Bank.CCR_FormatID &&
                        locSKS_BR_FileFormat.CCMarkupGenerateStatementLine == NoYes::Yes &&
                            (locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::Delimited
                            || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::FixedField
                            || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::HeartlandFDF
                            || locSKS_BR_FileFormat.CCR_FileType == SKS_CCR_FileType::Adyen)
                join CurrencyCode
                    from locBankAccountTable
                        where locBankAccountTable.AccountID == locSKS_CCR_BankTran.AccountId;
                if(locSKS_BR_FileFormat && locSKS_CCR_BankTran.TransactionMarkupAmt != 0)
                {
                    locMarkupSKS_CCR_BankTran = null;
                    locMarkupSKS_CCR_BankTran.AccountId = locSKS_CCR_BankTran.AccountId;
                    locMarkupSKS_CCR_BankTran.AccountStatementDate = locSKS_CCR_BankTran.AccountStatementDate;
                    locMarkupSKS_CCR_BankTran.AccountStatementNum = locSKS_CCR_BankTran.AccountStatementNum;
                    locMarkupSKS_CCR_BankTran.OriginalStatementRecId = locSKS_CCR_BankTran.OriginalStatementRecId;
                    locMarkupSKS_CCR_BankTran.CCRHeaderRecId = locSKS_CCR_BankTran.CCRHeaderRecId;
                    locMarkupSKS_CCR_BankTran.Filename = locSKS_CCR_BankTran.Filename;
                    locMarkupSKS_CCR_BankTran.FileDateTime = locSKS_CCR_BankTran.FileDateTime;
                    locMarkupSKS_CCR_BankTran.ImportedStatementDate = locSKS_CCR_BankTran.ImportedStatementDate;
                    locMarkupSKS_CCR_BankTran.ImportedStatementNum = locSKS_CCR_BankTran.ImportedStatementNum;
                    locMarkupSKS_CCR_BankTran.TranDate = locSKS_CCR_BankTran.TranDate;
                    locMarkupSKS_CCR_BankTran.ValueDate = locSKS_CCR_BankTran.ValueDate;
                    locMarkupSKS_CCR_BankTran.FileTranType = locSKS_BR_FileFormat.CCMarkupStmtLineFileTranType;
                    locMarkupSKS_CCR_BankTran.TranDescription = locSKS_BR_FileFormat.CCMarkupStmtLineDesc;
                    locMarkupSKS_CCR_BankTran.TranDescriptionUser = locSKS_BR_FileFormat.CCMarkupStmtLineDesc;
                    locSKS_BR_TranTypeProcessing = new SKS_BR_TranTypeProcessing();
                    locSKS_BR_TranTypeProcessing.setFormatId(locSKS_PP_Bank.CCR_FormatID);
                    locSKS_BR_TranTypeProcessing.setValidateTranType(locSKS_BR_FileFormat.ValidateTranMapping);
                    locSKS_BR_TranTypeProcessing.setFileTranType(locMarkupSKS_CCR_BankTran.FileTranType);
                    locSKS_BR_TranTypeProcessing.setBankAccountId(locMarkupSKS_CCR_BankTran.AccountId);
                    locSKS_BR_TranTypeProcessing.run(true);
                    if(locSKS_BR_TranTypeProcessing.getErrorText() != '')
                    {
                        return strfmt("@SKS528", locMarkupSKS_CCR_BankTran.FileTranType);
                    }
                    locMarkupSKS_CCR_BankTran.TransCurrency = locSKS_CCR_BankTran.TransCurrency;
                    if(locSKS_BR_FileFormat.CCMarkupReverseSignOnAmt)
                    {
                        locMarkupSKS_CCR_BankTran.TranCurrencyAmount = locSKS_CCR_BankTran.TransactionMarkupAmt * -1;
                    }
                    else
                    {
                        locMarkupSKS_CCR_BankTran.TranCurrencyAmount = locSKS_CCR_BankTran.TransactionMarkupAmt;
                    }

                    if(strUpr(locSKS_CCR_BankTran.TransCurrency) == strUpr(locBankAccountTable.CurrencyCode))
                    {
                        locMarkupSKS_CCR_BankTran.TranAmount = locMarkupSKS_CCR_BankTran.TranCurrencyAmount;
                    }
                    else
                    {
                        locCurrencyExchangeHelper = CurrencyExchangeHelper::construct();
                        locCurrencyExchangeHelper.parmExchangeDate(locSKS_CCR_BankTran.TranDate);
                        locMarkupSKS_CCR_BankTran.TranAmount = locCurrencyExchangeHelper.calculateCurrencyToCurrency(locSKS_CCR_BankTran.TransCurrency, locBankAccountTable.CurrencyCode,locMarkupSKS_CCR_BankTran.TranCurrencyAmount, true, true);
                    }

                    locMarkupSKS_CCR_BankTran.BankTranType = locSKS_BR_TranTypeProcessing.getBankTranType();
                    if (strLen(locMarkupSKS_CCR_BankTran.BankTranType) > 0)
                    {
                        locMarkupSKS_CCR_BankTran.GLMappingRuleGroupId = locSKS_BR_TranTypeProcessing.getGLMappingRuleGroupId();
                        locMarkupSKS_CCR_BankTran.MatchingRuleGroupId = locSKS_BR_TranTypeProcessing.getMatchingRuleGroupId();
                    }
                    else
                    {
                        locMarkupSKS_CCR_BankTran.GLMappingRuleGroupId = '';
                        locMarkupSKS_CCR_BankTran.MatchingRuleGroupId = '';
                        locMarkupSKS_CCR_BankTran.GLMatchOrCreate = SKS_CCR_GLMatchOrCreate::GLMatch;
                    }
                    locMarkupSKS_CCR_BankTran.DefaultDimension = locSKS_BR_TranTypeProcessing.getDimension();
                    locMarkupSKS_CCR_BankTran.ImportedStatementNum = locSKS_CCR_BankTran.ImportedStatementNum;
                    locMarkupSKS_CCR_BankTran.ImportedStatementDate = locSKS_CCR_BankTran.ImportedStatementDate;
                    SKS_CCR_ReadFile::setDefaultMatchGroup(locMarkupSKS_CCR_BankTran);
                    locSKS_CCR_Parse= new SKS_CCR_Parse(locMarkupSKS_CCR_BankTran);
                    locSKS_CCR_Parse.run();
                    locMarkupSKS_CCR_BankTran.insert();
                }
            }
        }
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>