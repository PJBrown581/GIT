<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_DEUTSCHE</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_DEUTSCHE Extends SKS_PP_Format_BankGroup
{
    // Deutsche Bank
        // Courtesy of Scientific Designs
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Pos 01-01     1       Constant '*'
        // Pos 02-03     2       Transaction Code (10-Issue, 26-Cancel Issue, 27-Reverse Cancel)
        // Pos 04-08     5       Constant '00000'
        // Pos 09-16     8       Account Number - RJ-LZF
        // Pos 17-26     10      Check Number - RJ-LZF
        // Pos 27-32     6       Check Date MMDDYY
        // Pos 33-43     11      Amount - RJ-LZF
        // Pos 44-56     13      Miscellaneous Field Constant 13 zeroes
        // Pos 57-65     9       Constant - Filler spaces
        // Pos 66-125    60      Payee Line 1 (Txn 10 only)
        // Pos 126-185   60      Payee Line 2 (Txn 10 only, and only if Payee1 is not blank)
    protected str txtDetail()
    {
    
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
    
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        // RecType: (within Payments)
        // 10V - Voucher
        // 20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
    
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        str ItemType;
        int Mult;
        str Name1;
        str Name2;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        System.Text.StringBuilder namebld = new System.Text.StringBuilder();
        ;
    
        // Convert negative void numbers to positives
        Mult = 1;
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = '26';
            if (mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                Mult = -1;
            }
        }
        else
        {
            ItemType = '10';
        }
    
        // Always use the Record Summary Amount - will have correct total for the Check
    
        sb.Append('*' + ItemType);
        sb.Append('00000');
        sb.Append(SKS_PP_StringFormats::strFill(8, strLTrim(StrRTrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(10, strLtrim(strRTrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 11));
        sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            namebld.Append('');
    
        }
        else
        {
            namebld.Append(mSKS_PP_FileDetail.VendName);
        }
        Name2 = ''; //  RemitAttn
    
        namebld = namebld.Replace('=',' ');
        namebld = namebld.Replace(';',' ');
        namebld = namebld.Replace('|',' ');
        namebld = namebld.Replace('<',' ');
    
        namebld = namebld.Replace('>',' ');
        Name1 = namebld.ToString();
        sb.Append(SKS_PP_StringFormats::strFill(60, Name1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(60, Name2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>