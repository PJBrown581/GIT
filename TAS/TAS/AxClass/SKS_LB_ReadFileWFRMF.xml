<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileWFRMF</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_LB_ReadFileWFRMF extends SKS_LB_ReadFile
{
    SKS_LB_Bank msks_lb_bank;
    boolean PaymLevelDesc;
    SKS_EB_FileHub fileHub;
    TextStreamIo  WFRMFFile;
    List FieldFormatsListCheck, FieldFormatsListInvoice, FieldFormatsList, FieldFormatsListBatch, FieldFormatsListBatchTrailer;
    str curline;
    SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

    #define.sRecordCodeFileHeader('FH ') //File header
    #define.sPaymentTypeHeader('PTH') //PaymentTypeHeader
    #define.sBatchHeader('BH ')//BatchHeader
    #define.sPayment('PR ')//Payment
    #define.sPaymentPayorNameAddress('PPR')//PaymentPayorNameAddress
    #define.sPaymentLevelNotes('PNT')//PaymentLevelNotes
    #define.sRemittanceHeader('RMH')//RemittanceHeader
    #define.sRemittanceAdvice('REM')//RemittanceAdvice
    #define.sRemittanceLevelNotes('RNT')//RemittanceLevelNotes
    #define.sBatchTrailer('BT ')//BatchTrailer
    #define.sRecordCodeFileTrailer('FT ')//FileTrailer


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFileHub</Name>
				<Source><![CDATA[
    private SKS_EB_FileHub initFileHub(SKS_EB_FileHub _fileHub = fileHub)
    {
        fileHub = _fileHub;

        if(!fileHub)
        {
            SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;            

            if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;

            fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

            if (Fileformat.CodePage)
            {
                fileHub.parmEncoding(Fileformat.CodePage);
            }
        }
      
        return fileHub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    public void closeFile()
    {
        WFRMFFile.finalize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindBankAccountNumFormatDet</Name>
				<Source><![CDATA[
    str FindBankAccountNumFormatDet(SKS_LB_WFRMFSegment    _WFRMFSegment)
    {
        switch(_WFRMFSegment)
        {
            case SKS_LB_WFRMFSegment::BH:
                    return 'BH';
            case SKS_LB_WFRMFSegment::BT:
                    return 'BT';
            case SKS_LB_WFRMFSegment::PNT:
                    return 'PNT';
            case SKS_LB_WFRMFSegment::PPR:
                    return 'PPR';
            case SKS_LB_WFRMFSegment::PR:
                    return 'PR';
            case SKS_LB_WFRMFSegment::REM:
                    return 'REM';
            case SKS_LB_WFRMFSegment::RMH:
                    return 'RMH';
            case SKS_LB_WFRMFSegment::RNT:
                    return 'RNT';
            default:
                    return 'PNT';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Get_Current_Line</Name>
				<Source><![CDATA[
    str Get_Current_Line()
    {
        return curline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>MappingSearch</Name>
				<Source><![CDATA[
    private void MappingSearch(SKS_LB_WFRMFSegment segment, int occurrcount, str line, listenumerator FileFormatDetlist )
    {
        SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        str value;
    
        while (FileFormatDetlist.moveNext())
        {
            localSKS_LB_FileFormatDet = FileFormatDetlist.current();
            if(segment == localSKS_LB_FileFormatDet.WFRMFSegment && occurrcount == localSKS_LB_FileFormatDet.edioccurrence)
            {
                value = substr(line, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    //Verify that the label is correct
    void openFile(boolean _Relocation = false)
    {
        if(SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            select firstOnly SepPaymByInv from mSKS_LB_Bank where mSKS_LB_Bank.LBPath == System.IO.Path::GetDirectoryName(Filename) && mSKS_LB_Bank.LBFormatId == FormatId;
        }
        else
        {
            select firstOnly SepPaymByInv from mSKS_LB_Bank where mSKS_LB_Bank.LBBankFabricLocation == System.IO.Path::GetDirectoryName(Filename) && mSKS_LB_Bank.LBFormatId == FormatId;            
        }

        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.runFileInquire(Filename);
        if(!_Relocation)
        {
            
            if(!fileHub.attrFileExists())
            {
                //The file %1 does not exist.
                error(strfmt("@SYS62207", fileName));
                return;
            }
        }
        fileHub.runFileLoad(Filename);
        fileHub.StreamInit();

        if (Fileformat.CodePage)
        {
            WFRMFFile = TextStreamIo::constructForRead(fileHub.StreamGet(), Fileformat.CodePage);
        }
        else
        {
            WFRMFFile = TextStreamIo::constructForRead(fileHub.StreamGet());
        }
        
        if (WFRMFFile == null || WFRMFFile.status() != IO_Status::Ok)
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", fileName));
        }
    
        WFRMFFile.inFieldDelimiter('\n');
        WFRMFFile.inRecordDelimiter('\n');
    
        if(!_Relocation)
        {
            PaymLevelDesc = false;
            FieldFormatsListcheck = new List(Types::Record);
            while select FieldFormat order by EDIOccurrence, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::MultiLineCheck
            {
                if(fieldformat.FieldType == SKS_LB_FieldType::TxnDescription)
                {
                    PaymLevelDesc = true;
                }
                FieldFormatsListCheck.addEnd(FieldFormat);
            }
    
            FieldFormatsListInvoice = new List(Types::Record);
            while select FieldFormat order by EDIOccurrence, FormatDetType asc
                where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::MultiLineInvoice
            {
                FieldFormatsListInvoice.addEnd(FieldFormat);
            }
    
            FieldFormatsListBatch = new List(Types::Record);
            while select FieldFormat order by EDIOccurrence, FieldStart, FormatDetType asc
                where fieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_FormatDetType::BatHeader
            {
                FieldFormatsListBatch.addEnd(FieldFormat);
            }
    
            FieldFormatsListBatchTrailer = new List(Types::Record);
            while select FieldFormat order by EDIOccurrence, FieldStart, FormatDetType asc
                where FieldFormat.formatid == Fileformat.FormatID && FieldFormat.FormatDetType == SKS_LB_FormatDetType::BatTrailer
            {
                FieldFormatsListBatchTrailer.addEnd(FieldFormat);
            }
        }
    
        select firstOnly BankAcctFieldFormat where BankAcctFieldFormat.formatid == Fileformat.FormatID && BankAcctFieldFormat.FieldType == SKS_LB_FieldType::LBBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Line</Name>
				<Source><![CDATA[
    int Read_Line( int DesiredLine )
    {
        container line;
        str lineStr;
        int CurrentLine = 0;
    
        if (DesiredLine > 0 && WFRMFFile.status() == IO_status::Ok)
        {
            // Position on the desired line
            CurrentLine = 0;
            while (WFRMFFile.status() == IO_status::Ok && CurrentLine < DesiredLine)
            {
                line = WFRMFFile.read();
                CurrentLine = CurrentLine + 1;
            }
    
            if (WFRMFFile.status() != IO_status::Ok)
            {
                return 1;
            }
    
            [lineStr] = line;
            curline = strrem(lineStr, '\n\r');
        }
        else
        {
            return 1;
        }
    
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Next</Name>
				<Source><![CDATA[
    int Read_Next()
    {
        container line;
        str lineStr;
    
    
    
        line = WFRMFFile.read();
    
        if (WFRMFFile.status() != IO_status::Ok)
        {
            return 1;
        }
    
        [lineStr] = line;
        curline = strrem(con2Str(line), '\n\r');
    
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readFile</Name>
				<Source><![CDATA[
    TmpSKS_LB_Importing readFile()
    {
        int PPRCnt;
        int PNTCnt;
        int RemCnt;
        int RNTCnt;
        boolean tranheaderfound = false;
        boolean TranTrailerFound = false;
        boolean checkFound = false;
        boolean batHeaderFound = false;
        boolean batTrailerFound = false;
        boolean invoiceFound = false;
        boolean PaymHeaderFound = false;
        boolean ValidAcctPathcombo = false;
        Container line;
        str lineStr;
        int linecnt = 1;
        str recordcode;
        int LineNbr;
        Int PaymentRecId = 1;
        int counter = 1;
        ListEnumerator fieldFormatsListEnumeratorCheck;
        ListEnumerator fieldFormatsListEnumeratorInvoice;
        ListEnumerator fieldFormatsListEnumeratorBatch;
        ListEnumerator fieldFormatsListEnumeratorBatchTrailer;
        SKS_LB_WFRMFSegment segment;
        SKS_EB_FilePath         lbpath;
        ;
    
        lbpath =  System.IO.Path::GetDirectoryName(Filename);
        fieldFormatsListEnumeratorCheck = FieldFormatsListCheck.getEnumerator();
        fieldFormatsListEnumeratorInvoice = FieldFormatsListInvoice.getEnumerator();
        fieldFormatsListEnumeratorBatch = FieldFormatsListBatch.getEnumerator();
        fieldFormatsListEnumeratorBatchTrailer = FieldFormatsListBatchTrailer.getEnumerator();
    
    
        ttsBegin;
        line = WFRMFFile.read();
        [lineStr] = line;
        linestr = strrem(lineStr, '\n\r');
    
        while(WFRMFFile.status() == IO_status::Ok || (line != conNull() && WFRMFFile.status() == IO_Status::FileTooShort))
        {
            fieldFormatsListEnumeratorCheck.reset();
            fieldFormatsListEnumeratorInvoice.reset();
            fieldformatslistEnumeratorBatch.reset();
            fieldFormatsListEnumeratorBatchTrailer.reset();
    
            if (strlen(con2Str(line)) == 0) //skip blank lines
            {
                RecordCode = '';
            }
            else
            {
                RecordCode = substr(lineStr,1,3);
            }
    
            if(RecordCode == #sRecordCodeFileHeader)
            {
                tranheaderfound = true;
                TranTrailerFound = false;
                importing.clear();
            }
            else if(RecordCode == #sRecordCodeFileTrailer)
            {
                trantrailerfound = true;
                checkFound = false;
                TranHeaderFound = false;
                PaymHeaderFound = false;
            }
    
            if(TranHeaderFound && !TranTrailerFound)
            {
                if(RecordCode == #sPaymentTypeHeader)
                {
                    this.ReadOneField(substr(linestr, 19, 35), SKS_LB_FieldType::LBBankAccount);
                    PaymHeaderFound = true;
                }
                else if(PaymHeaderFound)
                {
                    if(RecordCode == #sBatchHeader)
                    {
    
                        this.mappingsearch(SKS_LB_WFRMFSegment::BH, 1, linestr, fieldformatslistEnumeratorBatch);
    
                        ValidAcctPathcombo = this.validatepathacctcombo(lbpath);
    
                        if(ValidAcctPathcombo)
                        {
                            batheaderfound = true;
                        }
                        batTrailerFound = false;
                        checkFound = false;
                        invoicefound = false;
                    }
                    else if(batHeaderFound)
                    {
                        switch(RecordCode)
                        {
                            case #sPayment:
                                PPRCnt = 0;
                                PNTCnt = 0;
                                checkFound = true;
                                InvoiceFound = false;
                                this.mappingsearch(SKS_LB_WFRMFSegment::PR, 1, linestr, fieldFormatsListEnumeratorCheck);
                                LineNbr = linecnt;
                                PaymentRecId = linecnt;
                                break;
    
                            case #sBatchTrailer:
                                BatTrailerFound = true;
                                batHeaderFound = false;
                                this.mappingsearch(SKS_LB_WFRMFSegment::BT, 1, linestr, fieldFormatsListEnumeratorBatchTrailer);
                                break;
    
                            case #sPaymentPayorNameAddress:
                                PPRCnt++;
                                this.MappingSearch(SKS_LB_WFRMFSegment::PPR, PPRCnt, linestr, fieldFormatsListEnumeratorCheck);
                                break;
    
                            case #sPaymentLevelNotes:
                                PNTCnt++;
                                this.MappingSearch(SKS_LB_WFRMFSegment::PNT, PNTCnt, linestr, fieldFormatsListEnumeratorCheck);
                                break;
    
                            case #sRemittanceHeader:
                                checkfound = true;
                                invoiceFound = false;
                                REMCnt = 0;
                                RNTCnt = 0;
                                this.mappingsearch(SKS_LB_WFRMFSegment::RMH, 1, linestr, fieldFormatsListEnumeratorCheck);
                                LineNbr = linecnt;
                                break;
    
                            case #sRemittanceAdvice:
                                invoiceFound = true;
                                REMCnt++;
                                this.mappingsearch(SKS_LB_WFRMFSegment::REM, 1, linestr, fieldFormatsListEnumeratorInvoice);
                                break;
    
                            case #sRemittanceLevelNotes:
                                RNTCnt++;
                                this.mappingsearch(SKS_LB_WFRMFSegment::RNT, RNTCnt, linestr, fieldFormatsListEnumeratorInvoice);
                                break;
                        }
                    }
                }
            }
    
            line = WFRMFFile.read();
            [linestr] = line;
            linestr = strrem(lineStr, '\n\r');
            linecnt++;
            recordcode = substr(lineStr,1,3);
    
            if(checkFound && invoiceFound)
            {
                if((recordcode == #sRemittanceHeader) || (recordcode == #sPayment) || (recordcode == #sRecordCodeFileTrailer) || (recordcode == #sBatchHeader) || (recordcode == #sRemittanceAdvice))
                {
                    importing.FileLineNbrBegin = LineNbr;
                    importing.parentRecId = paymentrecid;
                    importing.FileDate = FileDate;
                    importing.insert();//Clear appropriate records
                    if((!mSKS_LB_Bank.sepPaymByInv && PaymLevelDesc && recordcode != #sPayment)
                        || (mSKS_LB_Bank.sepPaymByInv && PaymLevelDesc && recordcode == #sPayment)
                        ||(!PaymLevelDesc))
                    {
                        importing.Description = '';
                    }
                    importing.InvAmount = 0;
                    importing.InvoiceNumber = ' ';
                    importing.DiscAmount = 0;
                    importing.BankPmtCnt = 0;
                    importing.BankPmtTotal = 0;
                    importing.LBInvoice = '';
                }
            }
            else if(checkFound && !invoiceFound)
            {
                if((recordcode == #sPayment) || (recordcode == #sRecordCodeFileTrailer) || (recordcode == #sBatchHeader))
                {
                    importing.FileLineNbrBegin = LineNbr;
                    importing.parentRecId = paymentrecid;
                    importing.FileDate = FileDate;
                    importing.insert();//Clear appropriate records
                    importing.Description = '';
                    importing.InvAmount = 0;
                    importing.InvoiceNumber = ' ';
                    importing.DiscAmount = 0;
                    importing.BankPmtCnt = 0;
                    importing.BankPmtTotal = 0;
                    importing.LBInvoice = '';
                    importing.PaymNote = '';
                }
            }
    
        }
        ttscommit;
    
        return Importing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readNextLine</Name>
				<Source><![CDATA[
    private str readNextLine(TextStreamIo WFRMF)
    {
        Container line;
        str lineStr;
    
        line = WFRMF.read();
        [linestr] = line;
        linestr = strrem(lineStr, '\n\r');
    
        return substr(lineStr,1,3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveBankAccountNumberFromFile</Name>
				<Source><![CDATA[
    Container RetrieveBankAccountNumberFromFile()
    {
        Container   line;
        container   BankAcctCon;
        str         lineStr;
        str         AcctNum;
        boolean     Exit = false;
        while(WFRMFFile.status() == IO_status::Ok && !Exit)
        {
            line = WFRMFFile.read();
            [lineStr] = line;
            linestr = strrem(lineStr, '\n\r');
            if(strScan(lineStr, 'PTH', 0, 3) == 1)
            {
                AcctNum = substr(lineStr,19,35);
                if(conFind(BankAcctCon, AcctNum) == 0)//Makes sure the account number is unique and not already in the container
                {
                    BankAcctCon += AcctNum;
                    Exit = !FileFormat.VerifyAcct ? true : false;
                }
            }
        }
        return BankAcctCon;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>