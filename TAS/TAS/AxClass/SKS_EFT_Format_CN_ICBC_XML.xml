<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CN_ICBC_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CN_ICBC_XML extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CN_ICBC_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20220207')
    XmlDocument xmlDoc;
    XmlElement  nodeRoot;
    XmlElement  nodeEb;
    XmlElement  nodeIn;
    BankAccountTable mBankAccountTable;

    #define.PAYENT('PAYENT')
    #define.PAYPER('PAYPER')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodePage</Name>
				<Source><![CDATA[
    protected int getCodePage()
    {
        return 936;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatCurrency</Name>
				<Source><![CDATA[
    private str formatCurrency(AmountMST _amt)
    {
        str amount;

        amount = strRem(num2str(_amt,0,2,0,0), '.');

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Details_In</Name>
				<Source><![CDATA[
    private void node_Details_In()
    {
        //------------------------------------------------------------------------------------------------------
        //      <in>
        //          <OnlBatF>
        //          <SettleMode>
        //          <TotalNum>
        //          <TotalAmt>
        //          <SignTime>
        //          <iSeqno>
        //          <PayType>
        //          <PayAccNo>
        //          <PayAccNameEN>
        //          <RecAccNo>
        //          <RecAccNameEN>
        //          <SysIOFlg>
        //          <RecBankName>
        //          <CurrType>
        //          <PayAmt>
        //          <CurrType>
        //          <PayAmt>
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        str  signDateTime, signTimeWithMilliSeconds, milliseconds;

        // Select count and sum for this file
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;

        nodeIn = nodeEb.appendChild(xmlDoc.createElement('in'));

        //              <OnlBatF>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'OnlBatF', '1');

        //              <SettleMode>
        str accountingMode;

        accountingMode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AccountingMode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'SettleMode', accountingMode);

        //              <TotalNum>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'TotalNum', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));

        //              <TotalAmt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'TotalAmt', this.formatCurrency(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1));

        //              <SignTime>                
        signDateTime = DateTimeUtil::toFormattedStr(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), Timezone::GMTPLUS0800BEIJING_CHONGQING_HONGKONG), 321, 2, 0, 2, 0, 4, 3, 1, DateFlags::None);

        milliseconds = int2str(WinAPIServer::getTickCount());

        signTimeWithMilliSeconds = strRem(strFmt('%1%2', signDateTime, substr(milliseconds, strLen(milliseconds)-2, 3)), ' ');

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'SignTime', signTimeWithMilliSeconds);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYENT)
        {
            //              <ReqReserved1>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'ReqReserved1', '');

            //              <ReqReserved2>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'ReqReserved2', '');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYPER)
        {
            //              <THBaseAccFlag>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'THBaseAccFlag', '');

            //              <RegSerialNO>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIn, 'RegSerialNO', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Details_Rd</Name>
				<Source><![CDATA[
    private void node_Details_Rd()
    {
        //------------------------------------------------------------------------------------------------------
        //      <Rd>
        //          <iSeqno>
        //          <PayType>
        //          <PayAccNo>
        //          <PayAccNameEN>
        //          <RecAccNo>
        //          <RecAccNameEN>
        //          <SysIOFlg>
        //          <RecBankName>
        //          <CurrType>
        //          <PayAmt>
        //          <CurrType>
        //          <PayAmt>
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeRd;
        VendBankAccount vendBankAccount;
        LedgerJournalTrans      ledgerJournalTrans;
        str flag;

        nodeRd = nodeIn.appendChild(xmlDoc.createElement('rd'));

        //              <iSeqno>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'iSeqno', mSKS_EFT_FileDetail.PaymentReference, 35);

        //              <ReimburseNo>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'ReimburseNo', '');

        //              <ReimburseNum>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'ReimburseNum', '');

        //              <StartDate>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'StartDate', '');

        //              <StartTime>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'StartTime', '');

        //              <PayType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'PayType', '1');

        //              <PayAccNo>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'PayAccNo', mSKS_EFT_FileDetail.BankBankAcct, 34);

        //              <PayAccNameCN>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'PayAccNameCN',  mSKS_EFT_Bank.WOrdPartyName, 60);

        //              <PayAccNameEN>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'PayAccNameEN', '');

        //              <RecAccNo>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecAccNo', mSKS_EFT_FileDetail.DepBankAcct, 34);

        //              <RecAccNameCN>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecAccNameCN', mSKS_EFT_VendorPaym.WBeneName);

        //              <RecAccNameEN>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecAccNameEN', '');

        //              <SysIOFlg>
        if(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 4) == 'ICBK')
        {
            flag = '1';
        }
        else
        {
            flag = '2';
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'SysIOFlg', flag);

        //              <IsSameCity>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'IsSameCity', '');

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYENT)
        {
            //              <Prop>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'Prop', '');
        }

        //              <RecICBCCode>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecICBCCode', '');

        if(flag == '1')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecCityName', '');
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecBankNo', '');
            
        }
        else
        {
            //              <RecCityName>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecCityName', mSKS_EFT_VendorPaym.WBenBankCity);
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecBankNo', mSKS_EFT_FileDetail.DepBankTransit, 13);
        }

        vendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_VendorPaym.VendCompany,mSKS_EFT_VendorPaym.VendAccount,mSKS_EFT_VendorPaym.VendBankAccountId);

        //              <RecBankName>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecBankName', vendBankAccount.Name, 60);

        //              <CurrType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'CurrType', '001');

        //              <PayAmt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'PayAmt', this.formatCurrency(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1));

        //              <UseCode>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'UseCode', '');

        //              <UseCN>
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYPER)
        {
            select firstonly DocumentNum from ledgerJournalTrans where ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
            
            if(flag == '2')
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'UseCN', ledgerJournalTrans.DocumentNum, 10, true);
            }
            else 
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'UseCN', ledgerJournalTrans.DocumentNum, 20, true);
            }
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'UseCN', '');
        }

        //              <EnSummary>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'EnSummary', '');

        //              <PostScript>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'PostScript', '');

        //              <Summary>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'Summary', '');

        //              <Ref>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'Ref', '');

        //              <Oref>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'Oref', '');

        //              <ERPSqn>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'ERPSqn', '');

        //              <BusCode>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'BusCode', '');

        //              <ERPcheckno>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'ERPcheckno', '');

        //              <CrvouhType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'CrvouhType', '');

        //              <CrvouhName>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'CrvouhName', '');

        //              <CrvouhNo>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'CrvouhNo', '');

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PAYENT)
        {
            //              <BankType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'BankType', '');

            //              <FileNames>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'FileNames', '');

            //              <Indexs>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'Indexs', '');

            //              <PaySubNo>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'PaySubNo', '');

            //              <RecSubNo>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'RecSubNo', '');
        }

        //              <MCardNo>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'MCardNo', '');

        //              <MCardName>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRd, 'MCardName', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Header</Name>
				<Source><![CDATA[
    private void node_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //      <pub>
        //          <TransCode>
        //          <CIS>
        //          <BankCode>
        //          <ID>
        //          <TranDate>
        //          <TranTime>
        //          <fSeqno>
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodePub;
        str milliseconds, transDateTime, transDate;

        // Get SKS_EFT_FileFormatPaymSpec
        this.getSKS_EFT_FileFormatPaymSpec();

        nodePub = nodeEb.appendChild(xmlDoc.createElement('pub'));

        //              <TransCode>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePub, 'TransCode', mSKS_EFT_FileFormatPaymSpec.TransactionCode);

        //              <CIS>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePub, 'CIS', mSKS_EFT_FileDetail.FileACHCompanyId);

        //              <BankCode>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePub, 'BankCode', '102');

        //              <Certification ID>
        str certificationID;

        certificationID = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CertificationID', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePub, 'ID', certificationID);

        //              <TranDate>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePub, 'TranDate', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));

        transDate = DateTimeUtil::toFormattedStr(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), Timezone::GMTPLUS0800BEIJING_CHONGQING_HONGKONG), 321, 2, 0, 2, 0, 4, 3, 1, DateFlags::None);

        //              <TranTime>
        milliseconds = int2str(WinAPIServer::getTickCount());

        transDateTime = subStr(strRem(strFmt('%1%2', transDate, substr(milliseconds, strLen(milliseconds)-2, 3)), ' '), 9, 17);

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePub, 'TranTime', transDateTime);

        //              <fSeqno>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePub, 'fSeqno', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        xmlDoc = XmlDocument::newBlank('GBK');

        this.node_CMS();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            this.getSKS_EFT_FileFormatPaymSpec();

            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Get SKS_EFT_Bank
                this.getSKS_EFT_Bank();

                // Get Bank Account Table
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);

                this.node_Header();

                this.node_Details_In();
            }

            this.node_Details_Rd();

            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CMS</Name>
				<Source><![CDATA[
    private void node_CMS()
    {
        //------------------------------------------------------------------------------------------------------
        //  <CMS>
        //      <eb>
        //          <pub>
        //------------------------------------------------------------------------------------------------------

        //CMS Request
        //  <CMs>
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('CMS'));

        //      <eb>
        nodeEb = nodeRoot.appendChild(xmlDoc.createElement('eb'));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>