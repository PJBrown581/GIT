<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_SCOTIABANK_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_SCOTIABANK_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_SCOTIABANK_EDI820 extends SKS_EFT_Format
{    
    #define.FormatVersion('20221003')
    #define.LineEnd('~')
    #define.Separator('*')

    #define.ACHCCD('ACH-CCD')
    #define.ACHPPD('ACH-PPD')
    #define.ACHIAT('ACH-IAT')
    #define.SWT('SWT')
    #define.EFT('EFT')

    int mTranSetCount;
    int mSegmentCount;
    str mIntControlNbr;
    str mGroupControlNbr;
    str mSenderControlNbr;
    AmountMST mPaymentAmount;
    str mCurrentTime;
    SKS_EFT_EDI mSKS_EFT_EDI;
    VendBankAccount mVendBankAccount;
    CustBankAccount mCustBankAccount;
    BankAccountTable mBankAccountTable;
    SKS_EB_Vendor mSKS_EB_Vendor;
    str mBPR_03;
    LogisticsPostalAddress  lpostalAddress;
    LogisticsPostalAddress  locpostalAddress;
    int                     locSequenceNumber;              //SKS#VSTS:14274
    boolean n1RBNamePrinted;//SKS_VSTS_14569

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
        {
            mFileHub.runAppendLine(strUpr(_result));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        boolean firstRec = true;
        locSequenceNumber = 1;              //SKS#VSTS:14274
        ;
        
        while(mSKS_EFT_FileDetail)
        {
            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {
                // Get SKS_EFT_Bank
                this.getSKS_EFT_Bank();
    
                // Get SKS_EB_Vendor
                this.getSKS_EB_Vendor();
    
                // Get SKS_EFT_VendorPaym
                this.getSKS_EFT_VendorPaym();
    
                // Get VendBankAccount
                this.getVendBankAccount();
    
                //Get Remittance Information
                this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            }
            else
            {
                // Get SKS_EFT_Bank
                this.getSKS_EFTAR_Bank();
    
                // Get SKS_EFT_CustomerPaym
                this.getSKS_EFT_CustomerPaym();
    
                // Get CustBankAccount
                this.getCustBankAccount();
            }
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get Bank account
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Initialize EDI class
            if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
            {
                mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_VendorPaym.EDI820Layout, mSKS_EFT_File.RecId);
            }
            else
            {
    
                mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, '', mSKS_EFT_File.RecId);
            }
            mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileFormat.NextFileId,0,0,0,0));
    
            if(firstRec)
            {
                firstRec = false;
    
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Detail lines
            this.rec_ST();
            this.rec_BPR();
    
            this.rec_TRN();
            this.rec_CUR();
            
            this.rec_N1PR();
            this.rec_N3PR();
            this.rec_N4PR();
    
            this.rec_N1PE();    //N2*PE is called from within this method
            this.rec_N3PE();
            this.rec_N4PE();

            this.rec_N1RB();
            if(n1RBNamePrinted)//SKS_VSTS_14569
            {
                this.rec_N3RB();
                this.rec_N4RB();
            }

            this.rec_SE();    
            mSegmentCount = 0;
            locSequenceNumber++;              //SKS#VSTS:14274

            next mSKS_EFT_FileDetail;
            n1RBNamePrinted = false;//SKS_VSTS_14569
        }
        this.rec_GE();
        this.rec_IEA();

        locSequenceNumber = 0;              //SKS#VSTS:14274
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustBankAccount</Name>
				<Source><![CDATA[
    void getCustBankAccount()
    {

        if(mCustBankAccount.AccountID != mSKS_EFT_FileDetail.DepBankAccountId || mCustBankAccount.CustAccount != mSKS_EFT_FileDetail.AccountNum)
        {
            mCustBankAccount = CustBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        //---------------------------------------
        // Load or refresh global mSKS_EB_Vendor
        //---------------------------------------
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankAccount</Name>
				<Source><![CDATA[
    void getVendBankAccount()
    {
        // Load or refresh global mVendBankAccount
    
        if(mVendBankAccount.AccountID != mSKS_EFT_FileDetail.DepBankAccountId || mVendBankAccount.VendAccount != mSKS_EFT_FileDetail.AccountNum)
        {
            mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_BPR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_BPR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //17    Business Function Code                              3       AN        
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        LogisticsPostalAddress lLogisticsPostalAddress;
        LogisticsAddressCountryRegionISOCode countryRegionISO;      //SKS#DevOps:15328
        AmountMST amt;
        str functionCode;
        ;
        mSegmentCount++;
    
        sb.Append('BPR');
        sb.Append(#Separator);
    
        //01    Trans. Handling Code
        
        sb.Append('D');
                    
        sb.Append(#Separator);
    
        //02    Monetary Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(num2str((amt),0,2,0,0));
        sb.Append(#Separator);
    
        //03    Credit/Debit Flag Code
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
        }
        else
        {
            mBPR_03 = 'C';
        }
        sb.Append(mBPR_03);
        sb.Append(#Separator);

        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:                
            Case #ACHPPD:                
            Case #ACHIAT:
                sb.Append('ACH');
                break;
            case #SWT:
                sb.Append('SWT');//SKS_VSTS_14648
                break;            
            case #EFT:          //SKS#VSTS:14274
                sb.Append('ACH');
                break;
        }
        sb.Append(#Separator);

        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
                sb.Append('CCD');
                break;
            Case #ACHPPD:
                sb.Append('PPD');
                break;
            Case #ACHIAT:
                sb.Append('IAT');
                break;
            case #SWT:                  //SKS#VSTS:14274
                sb.Append('');
                break;
        }
        sb.Append(#Separator);
    
        //06    DFI ID No. Qualifier
        lLogisticsPostalAddress = LogisticsPostalAddress::findByLocation(mBankAccountTable.Location);
        countryRegionISO = this.getLogisticsAddressCountryISO(lLogisticsPostalAddress.CountryRegionId);
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #SWT:
                sb.Append('04');
                break;
            Case #EFT:
                sb.Append('04');
                break;
            Case #ACHCCD:
            Case #ACHPPD:
            Case #ACHIAT:           //SKS#DevOps:15328
                if(countryRegionISO == 'CA')                
                {
                    sb.Append('04');
                }
                else                
                {
                    sb.Append('01');
                }
                break;
            Default:
                sb.Append('01');
                break;
        }
        sb.Append(#Separator);
    
        //07    DFI ID Number
        sb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));        //SKS#VSTS:14714, SKS#DevOps:15328,      //SKS#DevOps:17657
        sb.Append(#Separator);
    
        //08    Acct. No. Qual. Code
        sb.Append('DA');
        sb.Append(#Separator);
    
        //09    Account Number
        sb.Append(substr(mSKS_EFT_FileDetail.BankBankAcct, 1, 35));     //SKS#DevOps:16430
        sb.Append(#Separator);
    
        //10    Orig. Co. ID
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
                if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP &&
                   (mSKS_EFT_Bank.CompanyIDUnique && mSKS_EFT_Bank.CompanyIDCCD != ''))
                {
                    sb.Append(substr(mSKS_EFT_Bank.CompanyIDCCD,1,10));
                }
                else if(mSKS_EFTAR_Bank.CompanyIDUnique && mSKS_EFTAR_Bank.CompanyIDCCD != '')
                {
                    sb.Append(substr(mSKS_EFTAR_Bank.CompanyIDCCD,1,10));
                }
                else
                {
                    sb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
                }
                break;
            Case #ACHPPD:
                if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP &&
                   (mSKS_EFT_Bank.CompanyIDUnique && mSKS_EFT_Bank.CompanyIDPPD != ''))
                {
                    sb.Append(substr(mSKS_EFT_Bank.CompanyIDPPD,1,10));
                }
                else if(mSKS_EFTAR_Bank.CompanyIDUnique && mSKS_EFTAR_Bank.CompanyIDPPD != '')
                {
                    sb.Append(substr(mSKS_EFTAR_Bank.CompanyIDPPD,1,10));
                }
                else
                {
                    sb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
                }
                break;
        }
        sb.Append(#Separator);
    
        //11    Orig. Co. Code
        sb.Append(#Separator);
    
        //12    RDFI ID No. Qualifier
        //13    RDFI ID Number        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #SWT:
                if(mSKS_EFT_FileDetail.DepSWIFTNo)
                {
                    sb.Append('02');
                    sb.Append(#Separator);
                    sb.Append(mSKS_EFT_FileDetail.DepSWIFTNo);
                }
                else if(mSKS_EFT_FileDetail.DepBankTransit)
                {
                    sb.Append('01');
                    sb.Append(#Separator);
                    sb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                }
                else
                {
                    sb.Append('04');
                    sb.Append(#Separator);
                    sb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));     //SKS#DevOps:17657
                }
                break;
            case #EFT:
                sb.Append('04');
                sb.Append(#Separator);
                sb.Append(SKS_PP_StringFormats::strFill(8, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));     //SKS#DevOps:17657
                break;
            Default:
                sb.Append('01');
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                break;
        }
        sb.Append(#Separator);
    
        //14    Acct. No. Qual Code
        if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append('SG');
        }
        else
        {
            sb.Append('DA');
        }
        sb.Append(#Separator);
    
        //15    Account Number
        sb.Append(mSKS_EFT_FileDetail.DepBankAcct);     //SKS#VSTS:14274
        sb.Append(#Separator);
    
        //16    Effective Entry Date        
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
    
        functionCode = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('FunctionCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
       
        //17    Business Function Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHIAT   ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT)
        {
            if(functionCode)                                    //SKS#VSTS:15987
            {
                sb.Append(#Separator);
                sb.Append(functionCode);
            }
        }
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CUR</Name>
				<Source><![CDATA[
    /// <summary>    
    /// rec_CUR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_CUR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Currency Code                                       3       ID      Payment currency
        //03    Exchange Rate                                       10      R
        //04    Entity ID Code                                      3       ID
        //05    Currency Code                                       3       ID      Payment currency
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('CUR');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('BK');
        sb.Append(#Separator);
    
        //02    Currency Code
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        //03    Exchange Rate    
        //04    Entity ID Code              //SKS#VSTS:14274

        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_GE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_GE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setTranSetCount(mTranSetCount);
        value = mSKS_EFT_EDI.buildGE();
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_GS
    /// </summary>
    /// <returns>true</returns>
    boolean rec_GS()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //-------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS();
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_IEA
    /// </summary>
    /// <returns>true</returns>
    boolean rec_IEA()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA();
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_ISA
    /// </summary>
    /// <returns>true</returns>
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA();
    
        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N1PE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N1PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str Name;
        str NameOverflow;
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            sb.Append('PE');
        }
        else
        {
            sb.Append('PR');
        }
        sb.Append(#Separator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            Name = mRemittanceName;
        }
        else
        {
            Name = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }    
        
        sb.Append(substr(Name,1,35));
        NameOverflow = subStr(Name,36,35);
        sb.Append(#Separator);
    
        //03    Identification Code Qualifier
        sb.Append('92');
        sb.Append(#Separator);

        //04    Identification Code
        sb.Append(substr(mSKS_EFT_FileDetail.AccountNum,1,17));
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        if(NameOverflow != '')
        {
            this.rec_N2PE(NameOverflow);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N1PR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N1PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        //01     Entity ID Code
        sb.Append('N1');
        sb.Append(#Separator);

        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            sb.Append('PR');
            sb.Append(#Separator);

            //02     Name
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName),1,35));
        }
        else
        {
            sb.Append('PE');
            sb.Append(#Separator);

            //02     Name
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName),1,35));
        }
    
        //03    Identification Code Qualifier
        //04    Identification Code
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1RB</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N1RB
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N1RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Receiving Bank Name
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str name;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('RB');
        sb.Append(#Separator);
    
        //02     Name
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            name = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName);
        }
        else
        {
            name = this.CharacterReplacement(mCustBankAccount.Name);
        }
    
        sb.Append(substr(name,1,35));
        sb.Append(#LineEnd);
    
        if(name != '')
        {
            n1RBNamePrinted = true;//SKS_VSTS_14569
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2PE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N2PE
    /// </summary>
    /// <param name = "_NameOverflow">_NameOverflow</param>
    /// <returns>true</returns>
    boolean rec_N2PE(str _NameOverflow)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Name 2                                              60      AN      Additional name
        //02    Name                                                60      AN      Not used
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('N2');
        sb.Append(#Separator);
    
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            sb.Append('PE');
        }
        else
        {
            sb.Append('PR');
        }
    
        sb.Append(#Separator);
    
        //01    Name 2
        sb.Append(_NameOverflow);
    
        sb.Append(#LineEnd);
    
        mSegmentCount++;
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N3PE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N3PE()
    {
        //---------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
        //---------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();        
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;
        
    
        if(mSKS_EFT_FileDetail.AccountNum && mSKS_EFT_FileDetail.AccountType == LedgerJournalACType::Cust)
        {
            locpostalAddress = this.findPostalAddressLineByPartyLocationRole(CustTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).Party, 'Direct debit');
    
            if(locpostalAddress)
            {
                if(strScan(locpostalAddress.Street, ';', 1, strLen(locpostalAddress.Street)))
                {
                    address = this.addressSplit(locpostalAddress.Street);
                    addressBldgNb = conpeek(address,1);
                    addressStrtNm = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = locpostalAddress.Street;
                }                
            }
        }

        sb.Append('N3');
        sb.Append(#Separator);
        
        if(mModule ==SKS_EFT_Module ::AP)
        {
            //01    Address Information
            sb.Append(substr(mRemittanceAdrLine1,1,35));
    
            //02    Address Information
            if(mRemittanceAdrLine2 != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(mRemittanceAdrLine2,1,35));
            }
        }
        else
        {
            //01    Address Information
            sb.Append(substr(addressStrtNm,1,35));
        
            //02    Address Information
            if(mRemittanceAdrLine2 != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(addressBldgNb,1,35));
            }
        }
    
        sb.Append(#LineEnd);
    
        if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '' || addressStrtNm != '' || addressBldgNb != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N3PR
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N3PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payor Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payor Address (Line 2) Domestic and Foreign
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EB_Address          addressBldgNb, addressStrtNm;
        container               address;

        sb.Append('N3');
        sb.Append(#Separator);

        if(mModule == SKS_EFT_Module::AP)
        {
            //01    Address Information
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr),1,35));
    
            //02    Address Information
            if(mSKS_EFT_Bank.WOrdPartyAddr2 != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr2),1,35));
            }
        }
        else
        {
            lpostalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Direct debit');
    
            if(lpostalAddress)
            {
                if(strScan(lpostalAddress.Street, ';', 1, strLen(lpostalAddress.Street)))
                {
                    address = this.addressSplit(lpostalAddress.Street);
                    addressBldgNb = conpeek(address,1);
                    addressStrtNm = conpeek(address,2);
                }
                else
                {
                    addressStrtNm = lpostalAddress.Street;
                }
            }
            //01    Address Information
            sb.Append(substr(this.CharacterReplacement(addressStrtNm),1,35));
    
            //02    Address Information
            if(addressBldgNb != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(this.CharacterReplacement(addressBldgNb),1,35));
            }
        }
    
        sb.Append(#LineEnd);
    
        if(mSKS_EFT_Bank.WOrdPartyAddr != '' || 
           mSKS_EFT_Bank.WOrdPartyAddr2 != ''||
           addressBldgNb                     ||
           addressStrtNm)
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressSplit</Name>
				<Source><![CDATA[
    /// <summary>
    /// addressSplit
    /// </summary>
    /// <param name = "_address">_address</param>
    /// <returns>true</returns>
    protected container addressSplit(SKS_EB_Address  _address)
    {
        List            strList = new List(Types::String);
        container       address;
        ListIterator    iterator;
    
        strlist = strSplit(_address,';');
        iterator = new ListIterator(strlist);
    
        while(iterator.more())
        {
            address += iterator.value();
            iterator.next();
        }
    
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// findPostalAddressLineByPartyLocationRole
    /// </summary>
    /// <param name = "_party">_party</param>
    /// <param name = "_roleName">_roleName</param>
    /// <returns>true</returns>
    protected LogisticsPostalAddress findPostalAddressLineByPartyLocationRole(
        DirPartyRecId   _party,
        LogisticsLocationRoleName   _roleName)
    {
        DirPartyLocation        partyLocation;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  postalAddress;
    
        while select partyLocation
            where partyLocation.Party == _party
        {
            if(strScan(partyLocation.locationRoleNames(),_roleName,1,strLen(partyLocation.locationRoleNames())))
            {
                logisticsLocation = logisticsLocation::find(partyLocation.Location);
                if(logisticsLocation.IsPostalAddress)
                {
                    postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                    break;
                }
            }
        }
    
        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3RB</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N3RB
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N3RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address information                                 55      AN      Address - Receiving Bank
        //02    Address information                                 55      AN      Identification code/ Correspondent DFI Identification
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        LogisticsPostalAddress lLogisticsPostalAddress;
        sb.Append('N3');
        sb.Append(#Separator);
    
        //01    Address information
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr),1,35));
        }
        else
        {
            select firstonly Street, Location from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == mCustBankAccount.Location;
            sb.Append(subStr(strReplace(this.CharacterReplacement(lLogisticsPostalAddress.Street), '\n', ' '),1,35));
        }
    
        sb.Append(#LineEnd);
    
        if(mSKS_EFT_VendorPaym.WBenBankAddr != '' ||
          (mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AR && lLogisticsPostalAddress.Street != ''))
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N4PE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N4PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //05    Location Qualifier                                  2       ID
        //06    Location Identifier                                 30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('N4');
        sb.Append(#Separator);
    
        if(mModule == SKS_EFT_Module::AP)
        {
            //01    City Address
            sb.Append(substr(mRemittanceCity, 1, 30));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(mRemittanceState, 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(mRemittanceZipCode,1,15));
            sb.Append(#Separator);
    
            //04    Country Code
            sb.Append(mRemittanceCountryRegionId);
        }
        else
        {
            //01    City Address
            sb.Append(substr(locpostalAddress.City, 1, 30));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(locpostalAddress.State, 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(locpostalAddress.ZipCode,1,15));
            sb.Append(#Separator);
    
            //04    Country Code
            sb.Append(this.getLogisticsAddressCountryISO(locpostalAddress.CountryRegionId));
        }
    
        //05    Location Qualifier
        //06    Location Identifier
    
        sb.Append(#LineEnd);
    
        if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != ''||
            locpostalAddress.City || locpostalAddress.State || locpostalAddress.ZipCode || locpostalAddress.CountryRegionId)
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N4PE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N4PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        LogisticsAddressCountryRegionISOCode countryRegionISO;
    
        sb.Append('N4');
        sb.Append(#Separator);

        if(mModule ==SKS_EFT_Module ::AP)
        {
            //01    City Address
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity), 1, 30));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyState), 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(mSKS_EFT_Bank.WOrdPartyZipCode,1,15));
            sb.Append(#Separator);
    
            //04    Country Code
            countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId);
            sb.Append(countryRegionISO);
        }
        else
        {
            //01    City Address
            sb.Append(substr(this.CharacterReplacement(lpostalAddress.City), 1, 30));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(this.CharacterReplacement(lpostalAddress.State), 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(lpostalAddress.ZipCode,1,15));
            sb.Append(#Separator);
    
            //04    Country Code
            countryRegionISO = this.getLogisticsAddressCountryISO(lpostalAddress.CountryRegionId);
            sb.Append(countryRegionISO);
        }
    
        sb.Append(#LineEnd);
    
        if(mSKS_EFT_Bank.WOrdPartyCity != '' || mSKS_EFT_Bank.WOrdPartyState != '' || mSKS_EFT_Bank.WOrdPartyZipCode != '' || mSKS_EFT_Bank.WOrdPartyCountryRegionId != ''||
           lpostalAddress.City != '' || lpostalAddress.State != '' || lpostalAddress.ZipCode!= '' || lpostalAddress.CountryRegionId)
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4RB</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_N4RB
    /// </summary>
    /// <returns>true</returns>
    boolean rec_N4RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Name                                           30      AN
        //02    State or Province Code                              2       ID      Not used
        //03    Postal Code                                         9       ID      Not used
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        LogisticsAddressCountryRegionISOCode countryRegionISO;
        LogisticsPostalAddress lLogisticsPostalAddress;
    
        sb.Append('N4');
        sb.Append(#Separator);    
        
        if(mSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            select firstonly State, ZipCode, Location from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == mVendBankAccount.Location;
            countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        }
        else
        {
            select firstonly City, CountryRegionId, State, ZipCode, Location from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == mCustBankAccount.Location;
            countryRegionISO = this.getLogisticsAddressCountryISO(lLogisticsPostalAddress.CountryRegionId);
        }
        //01    City Name
        if(mSKS_EFT_VendorPaym.WBenBankCity)
        {
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity), 1, 30));
        }
        else if(lLogisticsPostalAddress.City)
        {
            sb.Append(substr(this.CharacterReplacement(lLogisticsPostalAddress.City), 1, 30));
        }
        if(lLogisticsPostalAddress.State != '')
        {
            //02    State or Province Code
            sb.Append(#Separator);
            sb.Append(substr(this.CharacterReplacement(lLogisticsPostalAddress.State), 1, 2));
        }
        else if(lLogisticsPostalAddress.ZipCode != '' || countryRegionISO != '')
        {
            //02    State or Province Code
            sb.Append(#Separator);
        }
    
        if(lLogisticsPostalAddress.ZipCode != '' || countryRegionISO != '')
        {
            sb.Append(#Separator);
    
            if(lLogisticsPostalAddress.ZipCode != '')
            {
                //03    Postal Code
                sb.Append(substr(this.CharacterReplacement(lLogisticsPostalAddress.ZipCode), 1, 15));
            }
    
            if(countryRegionISO != '')
            {
                sb.Append(#Separator);
    
                //04    Country Code
                sb.Append(countryRegionISO);
            }
        }
    
        sb.Append(#LineEnd);
    
        if(mSKS_EFT_VendorPaym.WBenBankCity != ''   ||
           lLogisticsPostalAddress.City != ''       ||
           lLogisticsPostalAddress.State != ''      ||
           lLogisticsPostalAddress.ZipCode != ''    ||
           countryRegionISO != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_SE
    /// </summary>
    /// <returns>true</returns>
    boolean rec_SE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('SE');
        sb.Append(#Separator);
    
        //1     Number of Included Segments
        sb.Append(num2str(mSegmentCount,0,0,0,0));
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        sb.Append(mSenderControlNbr);
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_ST
    /// </summary>
    /// <returns>true</returns>
    boolean rec_ST()
    {
        //------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
        mTranSetCount++;
    
        sb.Append('ST');
        sb.Append(#Separator);
    
        //1     Transaction Set ID Code
        sb.Append('820');
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        mSenderControlNbr = SKS_PP_StringFormats::strFill(9, num2Str(locSequenceNumber, 0,0,0,0),  SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);              //SKS#VSTS:14274

        sb.Append(mSenderControlNbr);
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_TRN
    /// </summary>
    /// <returns>true</returns>
    boolean rec_TRN()
    {
        //-----------------------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Identification                            30      AN      Payment Trace No
        //03    Orig. Co. ID                                        10      AN      Not used
        //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
        //-----------------------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
    
        sb.Append('TRN');
        sb.Append(#Separator);
    
        //01     Trace Type Code
        sb.Append('1');
        sb.Append(#Separator);
    
        //02     Reference Identification        
        sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),30));
    
        //03    Orig. Co. ID
        //04    Reference Number
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>