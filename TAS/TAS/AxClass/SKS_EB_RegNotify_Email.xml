<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_RegNotify_Email</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EB_RegNotify_Email extends Runbasebatch
{
    str msgBody;
    DialogField dialogMsgBody;

    #Define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        msgBody
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method invokes run method and confirms successful execution.
    /// </summary>
    /// <param name="_args">
    /// arguments from caller.
    /// </param>
    /// <param name="_cancellationToken">
    public static void main(Args _args)
    {
        SKS_EB_RegNotify_Email sks_EB_RegNotify_Email = new SKS_EB_RegNotify_Email();

        if(sks_EB_RegNotify_Email.prompt())
        {
            sks_EB_RegNotify_Email.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SKS_EB_RegNotify        sks_EB_RegNotify;
        List strlist;
        ListIterator    iterator;
        str value;
        str msgBodyCustInfo;

        select sks_EB_RegNotify;

        var mailer = SysMailerFactory::getNonInteractiveMailer();

        if(mailer)
        {
            var messageBuilder = new SysMailerMessageBuilder();

            // To
            strlist = this.getEmailTo(sks_EB_RegNotify.EmailTo);
            iterator = new ListIterator(strlist);
            while(iterator.more())
            {
                value = iterator.value();
                messageBuilder.addTo(value);
                iterator.next();
            }

            // From
            messageBuilder.setFrom(sks_EB_RegNotify.EmailFrom);
                
            // Cc
            messageBuilder.addCc(sks_EB_RegNotify.EmailCC);
                
            // ReplyTo
            messageBuilder.addReplyTo(sks_EB_RegNotify.EmailReplyTo);
                
            // Subject
            messageBuilder.setSubject(sks_EB_RegNotify.EmailSubject);
                
            // Message
            msgBodyCustInfo = strFmt("@SKS:SKGRegNotifyEmailPrefix" + ' <br><br>',xInfo::licenseName(), SKS_PP_StringFormats::strRight(xInfo::serialNo(),6));
            messageBuilder.setBody(msgBodyCustInfo + msgBody);

            // Send mail
            mailer.sendNonInteractive(messageBuilder.getMessage());

            // Add message body to log so it is viewable in batch job history.
            info(msgBody);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTo</Name>
				<Source><![CDATA[
    private List getEmailTo(str _emailTo)
    {
        List strlist = new List(Types::String);
        str val;
        ;
        val = strReplace(_emailTo, ',', ';'); //Replace commas with semi-colons so split will handle either
        strlist = strSplit(val,';');
        return strList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        boolean     retVal = true;
        
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                retVal = false;
                break;
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmailBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method create the batch job and execute immediately.
    /// </summary>
    /// <param name="_msgBody">
    /// Text of the message</c> table.
    /// </param>
    public static void createEmailBatch(str _msgBody)
    {
        Batch               Batch;
        BatchHeader         batHeader;
        RunBaseBatch        rbbTask;
        BatchInfo           batInfo;
        
        ttsBegin;
        rbbTask = new SKS_EB_RegNotify_Email();
        batInfo = rbbTask.batchInfo();
        batInfo.parmGroupId(''); // The "Empty batch group".
    
        batHeader = BatchHeader::construct();
        batInfo.parmAutomaticTransaction(true);
        batInfo.parmCaption("@SKS:SKGRegNotifyBatchCaption");

        batHeader.addTask(rbbTask);
        batHeader.save();
        Batch = batInfo.parmBatch();
        if(Batch)
        {
            Batch.reread();
            Batch.selectForUpdate(true);
            Batch.Parameters = [#CurrentVersion, _msgBody];
            Batch.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addGroup("@SYS7755");
        dialogMsgBody = dialog.addField(extendedtypestr(SKS_EB_RegNotify_ExpirationText));
        dialogMsgBody.value(msgBody);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();

        msgBody = dialogMsgBody.value();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>