<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_FIRSTBANKv2_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_FIRSTBANKv2_CSV Extends SKS_PP_Format_BankGroup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addField</Name>
				<Source><![CDATA[
    private void addField(System.Text.StringBuilder _sb, str _strToAppend)
    {
        _sb.Append(_strToAppend);
        _sb.Append(',');
    }

]]></Source>
			</Method>
			<Method>
				<Name>method1</Name>
				<Source><![CDATA[
    private void method1()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // First Bank
        // Version 2 Updated February 5th, 2013
    
        // Pos  Description
        // 01   Account Number
        // 02   Account Type "D"
        // 03   Vendor Name(strip all commas)
        // 04   Check Number (No Padding)
        // 05   Amount  $.¢¢
        // 06   Check Date
        // 07   Voided Check ("N" for everything except checks that never left the office)  Stop Payments are NEVER voided via the Issues file.)
    
    //BP Deviation documented
    protected str txtDetail()
    {
        Str IssueType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::RejectedCheque)
        {
            IssueType = 'Y';
        }
        else
        {
            IssueType = 'N';
        }
    
        this.addField(sb, mSKS_PP_FileDetail.BnkBankAcct);
        this.addField(sb, 'D');
        this.addField(sb, SKS_PP_Format_FIRSTBANKv2_CSV::strRemoveCommas(mSKS_PP_FileDetail.VendName));
        this.addField(sb, mSKS_PP_FileDetail.ChkRefNbr);
        this.addField(sb, num2Str(mSKS_PP_FileDetail.ChkCuryAmt, 1, 2, 1, 0));
        this.addField(sb, SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(IssueType);
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>strRemoveCommas</Name>
				<Source><![CDATA[
    Private static str strRemoveCommas(str _OriginalString)
    {
        str lOriginalString = strLRTrim(_OriginalString);
        int lIntIndexOfComma;
        ;
    
        if(strContains(lOriginalString, ','))
        {
            if(strLen(lOriginalString) == 1)
                lOriginalString = '';
            else if(strStartsWith(lOriginalString, ','))
            {
                lOriginalString =  SKS_PP_StringFormats::strSub(lOriginalString, 2);
            }
            else if(strEndsWith(lOriginalString, ','))
            {
                lOriginalString =  SKS_PP_StringFormats::strSub(lOriginalString, 1, strLen(lOriginalString) - 1);
            }
            else
            {
                lIntIndexOfComma = SKS_PP_StringFormats::strIndexOf(lOriginalString, ',');
                //if the comma exists between to non-space characters, replace it with a space.
                if((SKS_PP_StringFormats::strSub(lOriginalString, lIntIndexOfComma - 1, 1) != ' ')
                    && (SKS_PP_StringFormats::strSub(lOriginalString, lIntIndexOfComma + 1, 1) != ' ')
                    && (SKS_PP_StringFormats::strSub(lOriginalString, lIntIndexOfComma - 1, 1) != ',')
                    && (SKS_PP_StringFormats::strSub(lOriginalString, lIntIndexOfComma + 1, 1) != ','))
    
                {
                    lOriginalString = SKS_PP_StringFormats::strSub(lOriginalString, 1, lIntIndexOfComma - 1)
                                        + ' '
                                        + SKS_PP_StringFormats::strSub(lOriginalString, lIntIndexOfComma + 1);
                }
                else//if the comma is adjecent to an existing space,  don't add another space.
                {
                    lOriginalString = SKS_PP_StringFormats::strSub(lOriginalString, 1, lIntIndexOfComma - 1)
                                        + SKS_PP_StringFormats::strSub(lOriginalString, lIntIndexOfComma + 1);
                }
            }
            if(strContains(lOriginalString, ','))
                lOriginalString = SKS_PP_Format_FIRSTBANKv2_CSV::strRemoveCommas(lOriginalString);
        }
        return lOriginalString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>