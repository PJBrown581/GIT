<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BR_BankAccountReconciliationSummaryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>SKS_BR_BankAccountReconciliationSummaryDP</c> class is the report Data Provider class for the
///     <c>SKS_BR_BankAccountReconciliationSummary</c> SRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(SKS_BR_BankAccountReconciliationSummaryContract))
]
class SKS_BR_BankAccountReconciliationSummaryDP extends SRSReportDataProviderBase
{
    SKS_BR_BankAccountReconSummaryTmp   bankAccountReconSummaryTmp;
    SKS_BR_BankAccountReconStmtTransTmp bankAccountReconStmtTransTmp;
    SKS_BR_BankAccountReconBankTransTmp bankAccountReconBankTransTmp;

    BankAccountTable                    bankAccountTable;
    BankAccountTable                    bankAccountTableMatch;
    LedgerDimensionDefaultAccount       bankAccountLedgerDimension;
    CompanyBankAccountId                bankAccountId;
    EndDate                             endDate;
    boolean                             showReconciliationSummary;
    boolean                             showImportedStmtTransDetails;
    boolean                             showBankTransDetails;
    guid                                emptyGuid;
    str                                 bankAccountReportDescription;

    #SKS_Global
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankAccountReconSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the full data from <c>SKS_BR_BankAccountReconSummaryTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///     The <c>SKS_BR_BankAccountReconSummaryTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SKS_BR_BankAccountReconSummaryTmp))
    ]
    public SKS_BR_BankAccountReconSummaryTmp getBankAccountReconSummaryTmp()
    {
        select bankAccountReconSummaryTmp;
        return bankAccountReconSummaryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountReconStmtTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the full data from <c>SKS_BR_BankAccountReconStmtTransTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///     The <c>SKS_BR_BankAccountReconStmtTransTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SKS_BR_BankAccountReconStmtTransTmp))
    ]
    public SKS_BR_BankAccountReconStmtTransTmp getBankAccountReconStmtTransTmp()
    {
        select bankAccountReconStmtTransTmp;
        return bankAccountReconStmtTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountReconBankTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the full data from <c>SKS_BR_BankAccountReconBankTransTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///     The <c>SKS_BR_BankAccountReconBankTransTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SKS_BR_BankAccountReconBankTransTmp))
    ]
    public SKS_BR_BankAccountReconBankTransTmp getBankAccountReconBankTransTmp()
    {
        select bankAccountReconBankTransTmp;
        return bankAccountReconBankTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankAccountReconSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>SKS_BR_BankAccountReconSummaryTmp</c> temporary table.
    /// </summary>
    private void insertBankAccountReconSummaryTmp()
    {
        Counter lineNumber;
        Amount calculatedGLBalance;
        Amount importedTransAmount, bankTransAmount;

        while select bankAccountTableMatch
            order by AccountID
            where bankAccountTableMatch.LedgerDimension == bankAccountLedgerDimension
        {
            lineNumber++;
            bankAccountReconSummaryTmp.clear();
            bankAccountReconSummaryTmp.LineNumber = lineNumber;
            bankAccountReconSummaryTmp.SummaryTransDescription = strFmt("@SKS:SKGBRBalancePerBank", bankAccountTableMatch.AccountID);
            bankAccountReconSummaryTmp.AccountId = bankAccountTableMatch.AccountID;
            bankAccountReconSummaryTmp.AccountName = bankAccountTableMatch.Name;
            if (bankAccountReportDescription)
            {
                bankAccountReportDescription += ', ' + bankAccountTableMatch.Name;
            }
            else
            {
                bankAccountReportDescription = bankAccountTableMatch.Name;
            }            

            BankAccountStatement bankAccountStatementLocal;

            // Latest balance statement record
            select firstonly1 EndingBalance from bankAccountStatementLocal
                order by AccountStatementDate desc
                where bankAccountStatementLocal.AccountId == bankAccountTableMatch.AccountID
                && bankAccountStatementLocal.AccountStatementDate <= endDate;

            bankAccountReconSummaryTmp.EndingBalance = bankAccountStatementLocal.EndingBalance;
            
            bankAccountReconSummaryTmp.insert();
            calculatedGLBalance += bankAccountReconSummaryTmp.EndingBalance;

            SKS_BR_BankTran importedBankTransBR;

            // Uncleared BR imported statement transactions
            select sum(TranAmount) from importedBankTransBR
                where importedBankTransBR.AccountId == bankAccountTableMatch.AccountID                
                && importedBankTransBR.ImportedStatementDate <= endDate
                && (importedBankTransBR.ManualReconciliationID == emptyGuid || // Not matched
                    (importedBankTransBR.ManualReconciliationID != emptyGuid
                    && importedBankTransBR.AccountStatementNum == '')); // Pre-matched

            importedTransAmount += -importedBankTransBR.TranAmount;

            SKS_CCR_BankTran importedBankTransCCR;

            // Uncleared CCR imported statement transactions
            select sum(TranAmount) from importedBankTransCCR
                where importedBankTransCCR.AccountId == bankAccountTableMatch.AccountID
                && importedBankTransCCR.ImportedStatementDate <= endDate
                && (importedBankTransCCR.ManualReconciliationID == emptyGuid || // Not matched
                    (importedBankTransCCR.ManualReconciliationID != emptyGuid &&
                     importedBankTransCCR.AccountStatementNum == '')); // Pre-matched

            importedTransAmount += -importedBankTransCCR.TranAmount;

            BankAccountTrans bankAccountTransLocal;

            // Cleared bank transactions with a statement date less than
            // or equal to end date and a transaction date greater than end date.            
            select sum(AmountCur), sum(AmountCorrect) from bankAccountTransLocal
                where bankAccountTransLocal.AccountId == bankAccountTableMatch.AccountID
                && bankAccountTransLocal.CurrencyCode == bankAccountTableMatch.CurrencyCode
                && bankAccountTransLocal.TransDate > endDate                
                && bankAccountTransLocal.AccountStatementDate > dateNull()
                && bankAccountTransLocal.AccountStatementDate <= endDate
                && bankAccountTransLocal.Included == NoYes::Yes;

            importedTransAmount += -(bankAccountTransLocal.AmountCur + bankAccountTransLocal.AmountCorrect);                        

            // Uncleared bank transactions
            select sum(AmountCur), sum(AmountCorrect) from bankAccountTransLocal
                where bankAccountTransLocal.AccountId == bankAccountTableMatch.AccountID
                && bankAccountTransLocal.CurrencyCode == bankAccountTableMatch.CurrencyCode
                && bankAccountTransLocal.TransDate <= endDate                
                && bankAccountTransLocal.AccountStatementDate == dateNull()
                && !bankAccountTransLocal.Included
                && !bankAccountTransLocal.Reconciled;

            bankTransAmount += bankAccountTransLocal.AmountCur + bankAccountTransLocal.AmountCorrect;

            // Cleared bank transactions with transaction date less than or
            // equal to end date and a statatement date greater than end date.
            select sum(AmountCur), sum(AmountCorrect) from bankAccountTransLocal
                where bankAccountTransLocal.AccountId == bankAccountTableMatch.AccountID
                && bankAccountTransLocal.CurrencyCode == bankAccountTableMatch.CurrencyCode
                && bankAccountTransLocal.TransDate <= endDate
                && bankAccountTransLocal.AccountStatementDate > endDate;

            bankTransAmount += bankAccountTransLocal.AmountCur + bankAccountTransLocal.AmountCorrect;
        }

        lineNumber++;
        bankAccountReconSummaryTmp.clear();
        bankAccountReconSummaryTmp.LineNumber = lineNumber;
        bankAccountReconSummaryTmp.SummaryTransDescription = "@SKS:SKGBRLessImportedTrans";
        bankAccountReconSummaryTmp.EndingBalance = importedTransAmount;            
        bankAccountReconSummaryTmp.insert();
        calculatedGLBalance += bankAccountReconSummaryTmp.EndingBalance;

        lineNumber++;
        bankAccountReconSummaryTmp.clear();
        bankAccountReconSummaryTmp.LineNumber = lineNumber;
        bankAccountReconSummaryTmp.SummaryTransDescription = "@SKS:SKGBRPlusBankTrans";
        bankAccountReconSummaryTmp.EndingBalance = bankTransAmount;
        bankAccountReconSummaryTmp.insert();
        calculatedGLBalance += bankAccountReconSummaryTmp.EndingBalance;

        lineNumber++;
        bankAccountReconSummaryTmp.clear();
        bankAccountReconSummaryTmp.LineNumber = lineNumber;
        bankAccountReconSummaryTmp.SummaryTransDescription = "@SKS:SKGBRExpectedGLBalance";
        bankAccountReconSummaryTmp.EndingBalance = calculatedGLBalance;
        bankAccountReconSummaryTmp.BorderVisibilityIndicator = 1;
        bankAccountReconSummaryTmp.insert();

        MainAccount mainAccountBank = MainAccount::findByLedgerDimension(bankAccountLedgerDimension);

        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        TransDate startDate = LedgerFiscalCalendar::findOpeningStartDateByDate(calendarRecId, endDate);
        
        AmountCur balanceAmount;

        LedgerBalanceMainAccountByCurrency mainAccountBalance = LedgerBalanceMainAccountByCurrency::construct();

        mainAccountBalance.parmAccountingDateRange(startDate, endDate);
        mainAccountBalance.parmPostingLayerList(con2List([CurrentOperationsTax::Current]));
        mainAccountBalance.parmIncludeOpeningPeriod(true);
        mainAccountBalance.parmIncludeRegularPeriod(true);

        mainAccountBalance.calculateBalance(mainAccountBank);

        TmpAccountSum tmpData = mainAccountBalance.getTmpData();
        
        // checks the main account is used for which currencies
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;
        container                   conCurrencyCode;

        while select TransactionCurrencyCode from generalJournalAccountEntry
        group by generalJournalAccountEntry.TransactionCurrencyCode
        where generalJournalAccountEntry.MainAccount == mainAccountBank.RecId
        
        exists join generalJournalEntry
        where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
           && generalJournalEntry.SubledgerVoucherDataAreaId == curExt()
        {
            conCurrencyCode += generalJournalAccountEntry.TransactionCurrencyCode;
        }

        // if the main account used for multiple currency, no need to calc balance
        // if the main account only used for one currency and it's not a company currency, no need to calc balance
        // if the main account never used but bank account currency is different then company currency, no need to calc balance
        if (conLen(conCurrencyCode) > 1
            || (conLen(conCurrencyCode) == 1 && conPeek(conCurrencyCode, 1) != Ledger::accountingCurrency())
            || (!conCurrencyCode && bankAccountTable.CurrencyCode != Ledger::accountingCurrency()))
        {
            update_recordset bankAccountReconSummaryTmp
            setting HideGLBalanceIndicator = 1;
        }
        else
        {
            select sum(Balance01) from tmpData;

            balanceAmount = tmpData.Balance01;

        
            lineNumber++;
            bankAccountReconSummaryTmp.clear();
            bankAccountReconSummaryTmp.LineNumber = lineNumber;
            bankAccountReconSummaryTmp.SummaryTransDescription = strFmt("@SKS:SKGBRBalancePerGL", mainAccountBank.MainAccountId);
            bankAccountReconSummaryTmp.EndingBalance = balanceAmount;
            bankAccountReconSummaryTmp.insert();

            lineNumber++;
            bankAccountReconSummaryTmp.clear();
            bankAccountReconSummaryTmp.LineNumber = lineNumber;
            bankAccountReconSummaryTmp.SummaryTransDescription = "@SKS:SKGBRVariance";
            bankAccountReconSummaryTmp.EndingBalance = calculatedGLBalance - balanceAmount;
            bankAccountReconSummaryTmp.BorderVisibilityIndicator = 1;
            bankAccountReconSummaryTmp.insert();
        }
        
        update_recordset bankAccountReconSummaryTmp
            setting BankAccountReportDescription = bankAccountReportDescription;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankAccountReconStmtTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>SKS_BR_BankAccountReconStmtTransTmp</c> temporary table.
    /// </summary>
    private void insertBankAccountReconStmtTransTmp()
    {
        while select bankAccountTableMatch
            order by AccountID
            where bankAccountTableMatch.LedgerDimension == bankAccountLedgerDimension
        {
            if (!showReconciliationSummary)
            {
                if (bankAccountReportDescription)
                {
                    bankAccountReportDescription += ', ' + bankAccountTableMatch.Name;
                }
                else
                {
                    bankAccountReportDescription = bankAccountTableMatch.Name;
                }
            }

            SKS_BR_BankTran importedBankTransBR;

            // Uncleared BR imported statement transactions
            while select importedBankTransBR
                where importedBankTransBR.AccountId == bankAccountTableMatch.AccountID
                && importedBankTransBR.ImportedStatementDate <= endDate
                && (importedBankTransBR.ManualReconciliationID == emptyGuid || // Not matched
                    (importedBankTransBR.ManualReconciliationID != emptyGuid
                    && importedBankTransBR.AccountStatementNum == '')) // Pre-matched
            {
                bankAccountReconStmtTransTmp.clear();
                bankAccountReconStmtTransTmp.AccountId = bankAccountTableMatch.AccountID;
                bankAccountReconStmtTransTmp.AccountName = bankAccountTableMatch.Name;
                bankAccountReconStmtTransTmp.BankCustomerNum = importedBankTransBR.BankCustomerNum;
                bankAccountReconStmtTransTmp.BankNum = importedBankTransBR.BankNum;
                bankAccountReconStmtTransTmp.AccountStatementNum = importedBankTransBR.AccountStatementNum;
                bankAccountReconStmtTransTmp.TranDescription = importedBankTransBR.TranDescription;
                bankAccountReconStmtTransTmp.FileTranType = importedBankTransBR.FileTranType;
                bankAccountReconStmtTransTmp.AccountStatementDate = importedBankTransBR.ImportedStatementDate;
                bankAccountReconStmtTransTmp.ValueDate = importedBankTransBR.ValueDate;
                bankAccountReconStmtTransTmp.TranAmount = -importedBankTransBR.TranAmount;
                bankAccountReconStmtTransTmp.ActualImportTranAmount = -importedBankTransBR.TranAmount;
                bankAccountReconStmtTransTmp.TransactionFeesAmt = importedBankTransBR.TransactionFeesAmt;
                bankAccountReconStmtTransTmp.Matched = importedBankTransBR.Matched;
                bankAccountReconStmtTransTmp.MatchIndicatorDesc = enum2Str(bankAccountReconStmtTransTmp.Matched);
                bankAccountReconStmtTransTmp.TranDate = importedBankTransBR.TranDate;
                bankAccountReconStmtTransTmp.ManualReconciliationID = importedBankTransBR.ManualReconciliationID;
                bankAccountReconStmtTransTmp.insert();
            }

            SKS_CCR_BankTran importedBankTransCCR;

            // Uncleared CCR imported statement transactions
            while select importedBankTransCCR
                where importedBankTransCCR.AccountId == bankAccountTableMatch.AccountID
                && importedBankTransCCR.ImportedStatementDate <= endDate
                && (importedBankTransCCR.ManualReconciliationID == emptyGuid || // Not matched
                    (importedBankTransCCR.ManualReconciliationID != emptyGuid &&
                     importedBankTransCCR.AccountStatementNum == '')) // Pre-matched
            {
                bankAccountReconStmtTransTmp.clear();
                bankAccountReconStmtTransTmp.AccountId = bankAccountTableMatch.AccountID;
                bankAccountReconStmtTransTmp.AccountName = bankAccountTableMatch.Name;
                bankAccountReconStmtTransTmp.BankCustomerNum = importedBankTransCCR.BankCustomerNum;
                bankAccountReconStmtTransTmp.BankNum = importedBankTransCCR.BankNum;
                bankAccountReconStmtTransTmp.AccountStatementNum = importedBankTransCCR.AccountStatementNum;
                bankAccountReconStmtTransTmp.TranDescription = importedBankTransCCR.TranDescription;
                bankAccountReconStmtTransTmp.FileTranType = importedBankTransCCR.FileTranType;
                bankAccountReconStmtTransTmp.AccountStatementDate = importedBankTransCCR.ImportedStatementDate;
                bankAccountReconStmtTransTmp.ValueDate = importedBankTransCCR.ValueDate;
                bankAccountReconStmtTransTmp.TranAmount = -importedBankTransCCR.TranAmount;
                bankAccountReconStmtTransTmp.ActualImportTranAmount = -importedBankTransCCR.TranAmount;
                bankAccountReconStmtTransTmp.TransactionFeesAmt = importedBankTransCCR.TransactionFeesAmt;
                // Commented-out until field is implemented in the report to avoid hotfix merge issues.
                //bankAccountReconStmtTransTmp.TransactionMarkupAmt = importedBankTransCCR.TransactionMarkupAmt;  //SKS_FDD_15121
                bankAccountReconStmtTransTmp.Matched = importedBankTransCCR.Matched;
                bankAccountReconStmtTransTmp.MatchIndicatorDesc = enum2Str(bankAccountReconStmtTransTmp.Matched);
                bankAccountReconStmtTransTmp.TranDate = importedBankTransCCR.TranDate;
                bankAccountReconStmtTransTmp.ManualReconciliationID = importedBankTransCCR.ManualReconciliationID;
                bankAccountReconStmtTransTmp.insert();
            }
            
            Map clearedImportedBankTransAmountMap = new Map(Types::Guid, Types::Container);
            Map clearedImportedBankTransUsedAmountMap = new Map(Types::Guid, Types::Container);

            BankAccountTrans bankAccountTransExist;

            // Cleared BR imported statement transactions with a statement date less
            // than or equal to end date and a transaction date greater than end date.
            while select importedBankTransBR
                where importedBankTransBR.AccountId == bankAccountTableMatch.AccountID
                && importedBankTransBR.AccountStatementDate > dateNull()
                && importedBankTransBR.AccountStatementDate <= endDate
                && importedBankTransBR.ManualReconciliationID != emptyGuid
                && importedBankTransBR.AccountStatementNum != ''
            exists join bankAccountTransExist
                where bankAccountTransExist.SKS_BR_ManualReconciliationID == importedBankTransBR.ManualReconciliationID
                && bankAccountTransExist.TransDate > endDate
                && bankAccountTransExist.Included == NoYes::Yes
            {
                bankAccountReconStmtTransTmp.clear();
                bankAccountReconStmtTransTmp.AccountId = bankAccountTableMatch.AccountID;
                bankAccountReconStmtTransTmp.AccountName = bankAccountTableMatch.Name;
                bankAccountReconStmtTransTmp.BankCustomerNum = importedBankTransBR.BankCustomerNum;
                bankAccountReconStmtTransTmp.BankNum = importedBankTransBR.BankNum;
                bankAccountReconStmtTransTmp.AccountStatementNum = importedBankTransBR.AccountStatementNum;
                bankAccountReconStmtTransTmp.TranDescription = importedBankTransBR.TranDescription;
                bankAccountReconStmtTransTmp.FileTranType = importedBankTransBR.FileTranType;
                bankAccountReconStmtTransTmp.AccountStatementDate = importedBankTransBR.AccountStatementDate;
                bankAccountReconStmtTransTmp.ValueDate = importedBankTransBR.ValueDate;                
                bankAccountReconStmtTransTmp.ActualImportTranAmount = -importedBankTransBR.TranAmount;
                bankAccountReconStmtTransTmp.TransactionFeesAmt = importedBankTransBR.TransactionFeesAmt;
                bankAccountReconStmtTransTmp.Matched = importedBankTransBR.Matched;
                bankAccountReconStmtTransTmp.MatchIndicatorDesc = enum2Str(bankAccountReconStmtTransTmp.Matched);
                bankAccountReconStmtTransTmp.TranDate = importedBankTransBR.TranDate;
                bankAccountReconStmtTransTmp.ManualReconciliationID = importedBankTransBR.ManualReconciliationID;

                BankAccountTrans bankAccountTransLocal;

                select sum(AmountCur), sum(AmountCorrect), minof(TransDate) from bankAccountTransLocal
                    where bankAccountTransLocal.SKS_BR_ManualReconciliationID == importedBankTransBR.ManualReconciliationID
                    && bankAccountTransLocal.TransDate > endDate
                    && bankAccountTransLocal.Included == NoYes::Yes;                

                bankAccountReconStmtTransTmp.TranAmount = -(bankAccountTransLocal.AmountCur + bankAccountTransLocal.AmountCorrect);

                if (bankAccountTransLocal.TransDate)
                {
                    bankAccountReconStmtTransTmp.TranDate = bankAccountTransLocal.TransDate;
                }

                // Handle Click-N-Match workbench records with potential many to many relations.
                AmountMST transAmountForMultiManualReconId, curSumAmountForMultiManualReconId;
                int recTtlCntForMultiManualReconId, curRecNbrForMultiManualReconId;
                if (clearedImportedBankTransAmountMap.exists(bankAccountReconStmtTransTmp.ManualReconciliationID))
                {
                    [transAmountForMultiManualReconId, recTtlCntForMultiManualReconId] = clearedImportedBankTransAmountMap.lookup(bankAccountReconStmtTransTmp.ManualReconciliationID);
                    [curSumAmountForMultiManualReconId, curRecNbrForMultiManualReconId] = clearedImportedBankTransUsedAmountMap.lookup(bankAccountReconStmtTransTmp.ManualReconciliationID);

                    // Determine if we're processing the last multi ReconId record.
                    // If so, calculate amount by subtracting already used amount from total amount; otherwise,
                    // use average amount for current record and add to already used amount plus increment record counter.
                    if ((recTtlCntForMultiManualReconId - curRecNbrForMultiManualReconId) == 1)
                    {
                        transAmountForMultiManualReconId = bankAccountReconStmtTransTmp.TranAmount - curSumAmountForMultiManualReconId;
                    }
                    else
                    {
                        clearedImportedBankTransUsedAmountMap.insert(bankAccountReconStmtTransTmp.ManualReconciliationID, 
                            [curSumAmountForMultiManualReconId + transAmountForMultiManualReconId, curRecNbrForMultiManualReconId + 1]);
                    }
                }
                else
                {
                    SKS_BR_BankTran importedBankTransCnt;
                    BankAccountTrans bankAccountTransExistCnt;

                    select count(RecId) from importedBankTransCnt
                        where importedBankTransCnt.AccountId == bankAccountTableMatch.AccountID
                        && importedBankTransCnt.AccountStatementDate > dateNull()
                        && importedBankTransCnt.AccountStatementDate <= endDate
                        && importedBankTransCnt.ManualReconciliationID == bankAccountReconStmtTransTmp.ManualReconciliationID
                        && importedBankTransCnt.AccountStatementNum != ''
                    exists join bankAccountTransExistCnt
                        where bankAccountTransExistCnt.SKS_BR_ManualReconciliationID == importedBankTransCnt.ManualReconciliationID
                        && bankAccountTransExistCnt.TransDate > endDate
                        && bankAccountTransExistCnt.Included == NoYes::Yes;

                    if (importedBankTransCnt.RecId > 1)
                    {
                        transAmountForMultiManualReconId = CurrencyExchange::round(bankAccountReconStmtTransTmp.TranAmount / importedBankTransCnt.RecId, bankAccountTableMatch.CurrencyCode);

                        clearedImportedBankTransAmountMap.insert(bankAccountReconStmtTransTmp.ManualReconciliationID, [transAmountForMultiManualReconId, any2Int(importedBankTransCnt.RecId)]);
                        clearedImportedBankTransUsedAmountMap.insert(bankAccountReconStmtTransTmp.ManualReconciliationID, [transAmountForMultiManualReconId, 1]);
                    }
                }

                if (transAmountForMultiManualReconId)
                {
                    bankAccountReconStmtTransTmp.TranAmount = transAmountForMultiManualReconId;
                    bankAccountReconStmtTransTmp.MatchIndicatorDesc = "@SKS:SKGBRMulti";
                }

                bankAccountReconStmtTransTmp.insert();
            }

            // Reset Map objects
            clearedImportedBankTransAmountMap = new Map(Types::Guid, Types::Container);
            clearedImportedBankTransUsedAmountMap = new Map(Types::Guid, Types::Container);

            // Cleared CCR imported statement transactions with a statement date less
            // than or equal to end date and a transaction date greater than end date.
            while select importedBankTransCCR
                where importedBankTransCCR.AccountId == bankAccountTableMatch.AccountID
                && importedBankTransCCR.AccountStatementDate > dateNull()
                && importedBankTransCCR.AccountStatementDate <= endDate
                && importedBankTransCCR.ManualReconciliationID != emptyGuid
                && importedBankTransCCR.AccountStatementNum != ''
            exists join bankAccountTransExist
                where bankAccountTransExist.SKS_CCR_ManualReconciliationID == importedBankTransCCR.ManualReconciliationID
                && bankAccountTransExist.TransDate > endDate
                && bankAccountTransExist.Included == NoYes::Yes
            {
                bankAccountReconStmtTransTmp.clear();
                bankAccountReconStmtTransTmp.AccountId = bankAccountTableMatch.AccountID;
                bankAccountReconStmtTransTmp.AccountName = bankAccountTableMatch.Name;
                bankAccountReconStmtTransTmp.BankCustomerNum = importedBankTransCCR.BankCustomerNum;
                bankAccountReconStmtTransTmp.BankNum = importedBankTransCCR.BankNum;
                bankAccountReconStmtTransTmp.AccountStatementNum = importedBankTransCCR.AccountStatementNum;
                bankAccountReconStmtTransTmp.TranDescription = importedBankTransCCR.TranDescription;
                bankAccountReconStmtTransTmp.FileTranType = importedBankTransCCR.FileTranType;
                bankAccountReconStmtTransTmp.AccountStatementDate = importedBankTransCCR.AccountStatementDate;
                bankAccountReconStmtTransTmp.ValueDate = importedBankTransCCR.ValueDate;
                bankAccountReconStmtTransTmp.ActualImportTranAmount = -importedBankTransCCR.TranAmount;
                bankAccountReconStmtTransTmp.TransactionFeesAmt = importedBankTransCCR.TransactionFeesAmt;
                // Commented-out until field is implemented in the report to avoid hotfix merge issues.
                //bankAccountReconStmtTransTmp.TransactionMarkupAmt = importedBankTransCCR.TransactionMarkupAmt;  //SKS_FDD_15121
                bankAccountReconStmtTransTmp.Matched = importedBankTransCCR.Matched;
                bankAccountReconStmtTransTmp.MatchIndicatorDesc = enum2Str(bankAccountReconStmtTransTmp.Matched);
                bankAccountReconStmtTransTmp.TranDate = importedBankTransCCR.TranDate;
                bankAccountReconStmtTransTmp.ManualReconciliationID = importedBankTransCCR.ManualReconciliationID;

                BankAccountTrans bankAccountTransLocal;

                select sum(AmountCur), sum(AmountCorrect), minof(TransDate) from bankAccountTransLocal
                    where bankAccountTransLocal.SKS_CCR_ManualReconciliationID == importedBankTransCCR.ManualReconciliationID
                    && bankAccountTransLocal.TransDate > endDate
                    && bankAccountTransLocal.Included == NoYes::Yes;

                bankAccountReconStmtTransTmp.TranAmount = -(bankAccountTransLocal.AmountCur + bankAccountTransLocal.AmountCorrect);

                if (bankAccountTransLocal.TransDate)
                {
                    bankAccountReconStmtTransTmp.TranDate = bankAccountTransLocal.TransDate;
                }

                // Handle Click-N-Match workbench records with potential many to many relations.
                AmountMST transAmountForMultiManualReconId, curSumAmountForMultiManualReconId;
                int recTtlCntForMultiManualReconId, curRecNbrForMultiManualReconId;
                if (clearedImportedBankTransAmountMap.exists(bankAccountReconStmtTransTmp.ManualReconciliationID))
                {
                    [transAmountForMultiManualReconId, recTtlCntForMultiManualReconId] = clearedImportedBankTransAmountMap.lookup(bankAccountReconStmtTransTmp.ManualReconciliationID);
                    [curSumAmountForMultiManualReconId, curRecNbrForMultiManualReconId] = clearedImportedBankTransUsedAmountMap.lookup(bankAccountReconStmtTransTmp.ManualReconciliationID);

                    // Determine if we're processing the last multi ReconId record.
                    // If so, calculate amount by subtracting already used amount from total amount; otherwise,
                    // use average amount for current record and add to already used amount plus increment record counter.
                    if ((recTtlCntForMultiManualReconId - curRecNbrForMultiManualReconId) == 1)
                    {
                        transAmountForMultiManualReconId = bankAccountReconStmtTransTmp.TranAmount - curSumAmountForMultiManualReconId;
                    }
                    else
                    {
                        clearedImportedBankTransUsedAmountMap.insert(bankAccountReconStmtTransTmp.ManualReconciliationID,
                            [curSumAmountForMultiManualReconId + transAmountForMultiManualReconId, curRecNbrForMultiManualReconId + 1]);
                    }
                }
                else
                {
                    SKS_CCR_BankTran importedBankTransCnt;
                    BankAccountTrans bankAccountTransExistCnt;

                    select count(RecId) from importedBankTransCnt
                        where importedBankTransCnt.AccountId == bankAccountTableMatch.AccountID
                        && importedBankTransCnt.AccountStatementDate > dateNull()
                        && importedBankTransCnt.AccountStatementDate <= endDate
                        && importedBankTransCnt.ManualReconciliationID == bankAccountReconStmtTransTmp.ManualReconciliationID
                        && importedBankTransCnt.AccountStatementNum != ''
                    exists join bankAccountTransExistCnt
                        where bankAccountTransExistCnt.SKS_BR_ManualReconciliationID == importedBankTransCnt.ManualReconciliationID
                        && bankAccountTransExistCnt.TransDate > endDate
                        && bankAccountTransExistCnt.Included == NoYes::Yes;

                    if (importedBankTransCnt.RecId > 1)
                    {
                        transAmountForMultiManualReconId = CurrencyExchange::round(bankAccountReconStmtTransTmp.TranAmount / importedBankTransCnt.RecId, bankAccountTableMatch.CurrencyCode);

                        clearedImportedBankTransAmountMap.insert(bankAccountReconStmtTransTmp.ManualReconciliationID, [transAmountForMultiManualReconId, any2Int(importedBankTransCnt.RecId)]);
                        clearedImportedBankTransUsedAmountMap.insert(bankAccountReconStmtTransTmp.ManualReconciliationID, [transAmountForMultiManualReconId, 1]);
                    }
                }

                if (transAmountForMultiManualReconId)
                {
                    bankAccountReconStmtTransTmp.TranAmount = transAmountForMultiManualReconId;
                    bankAccountReconStmtTransTmp.MatchIndicatorDesc = "@SKS:SKGBRMulti";
                }

                bankAccountReconStmtTransTmp.insert();
            }
        }

        if (!showReconciliationSummary && bankAccountReportDescription)
        {
            // Populate one recon summary record to ensure parameter for bank description is populated for report header.
            bankAccountReconSummaryTmp.clear();
            bankAccountReconSummaryTmp.BankAccountReportDescription = bankAccountReportDescription;
            bankAccountReconSummaryTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankAccountReconBankTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>SKS_BR_BankAccountReconBankTransTmp</c> temporary table.
    /// </summary>
    private void insertBankAccountReconBankTransTmp()
    {
        while select bankAccountTableMatch
            order by AccountID
            where bankAccountTableMatch.LedgerDimension == bankAccountLedgerDimension
        {
            if (!showReconciliationSummary && !showImportedStmtTransDetails)
            {
                if (bankAccountReportDescription)
                {
                    bankAccountReportDescription += ', ' + bankAccountTableMatch.Name;
                }
                else
                {
                    bankAccountReportDescription = bankAccountTableMatch.Name;
                }
            }

            BankAccountTrans bankAccountTransLocal;

            // Uncleared bank transactions
            insert_recordset bankAccountReconBankTransTmp(
                AccountId, Voucher, PaymReference, ChequeNum, DepositNum, BankTransType, Txt,
                PaymentMode, TransDate, AmountCur, AccountStatementDate, AccountStatement, Included)
            select 
                AccountId, Voucher, PaymReference, ChequeNum, DepositNum, BankTransType, Txt,
                PaymentMode, TransDate, AmountCur, AccountStatementDate, AccountStatement, Included
            from bankAccountTransLocal
                where bankAccountTransLocal.AccountId == bankAccountTableMatch.AccountID
                && bankAccountTransLocal.CurrencyCode == bankAccountTableMatch.CurrencyCode
                && bankAccountTransLocal.TransDate <= endDate
                && bankAccountTransLocal.AccountStatementDate == dateNull()
                && !bankAccountTransLocal.Included
                && !bankAccountTransLocal.Reconciled;

            update_recordset bankAccountReconBankTransTmp
                setting AccountName = bankAccountTableMatch.Name
                where bankAccountReconBankTransTmp.AccountId == bankAccountTableMatch.AccountID;

            // Cleared bank transactions with transaction date less than or
            // equal to end date and a statatement date greater than end date.
            while select bankAccountTransLocal
                where bankAccountTransLocal.AccountId == bankAccountTableMatch.AccountID
                && bankAccountTransLocal.CurrencyCode == bankAccountTableMatch.CurrencyCode
                && bankAccountTransLocal.TransDate <= endDate
                && bankAccountTransLocal.AccountStatementDate > endDate               
            {
                bankAccountReconBankTransTmp.clear();
                bankAccountReconBankTransTmp.AccountId = bankAccountTableMatch.AccountID;
                bankAccountReconBankTransTmp.AccountName = bankAccountTableMatch.Name;
                bankAccountReconBankTransTmp.Voucher = bankAccountTransLocal.Voucher;
                bankAccountReconBankTransTmp.PaymReference = bankAccountTransLocal.PaymReference;
                bankAccountReconBankTransTmp.ChequeNum = bankAccountTransLocal.ChequeNum;
                bankAccountReconBankTransTmp.DepositNum = bankAccountTransLocal.DepositNum;
                bankAccountReconBankTransTmp.BankTransType = bankAccountTransLocal.BankTransType;
                bankAccountReconBankTransTmp.Txt = bankAccountTransLocal.Txt;
                bankAccountReconBankTransTmp.PaymentMode = bankAccountTransLocal.PaymentMode;
                bankAccountReconBankTransTmp.TransDate = bankAccountTransLocal.TransDate;
                bankAccountReconBankTransTmp.AmountCur = bankAccountTransLocal.AmountCur;
                bankAccountReconBankTransTmp.AccountStatementDate = bankAccountTransLocal.AccountStatementDate;
                bankAccountReconBankTransTmp.AccountStatement = bankAccountTransLocal.AccountStatement;
                bankAccountReconBankTransTmp.Included = bankAccountTransLocal.Included;

                if (bankAccountTransLocal.SKS_BR_ManualReconciliationID != emptyGuid)
                {
                    bankAccountReconBankTransTmp.ManualReconciliationID = bankAccountTransLocal.SKS_BR_ManualReconciliationID;
                }
                else if (bankAccountTransLocal.SKS_CCR_ManualReconciliationID != emptyGuid)
                {
                    bankAccountReconBankTransTmp.ManualReconciliationID = bankAccountTransLocal.SKS_CCR_ManualReconciliationID;
                }
                bankAccountReconBankTransTmp.insert();
            }
        }

        if (!showReconciliationSummary && !showImportedStmtTransDetails && bankAccountReportDescription)
        {
            // Populate one recon summary record to ensure parameter for bank description is populated for report header.
            bankAccountReconSummaryTmp.clear();
            bankAccountReconSummaryTmp.BankAccountReportDescription = bankAccountReportDescription;
            bankAccountReconSummaryTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by <c>SKS_BR_BankAccountReconciliationSummary</c> report.
    /// </remarks>
    public void processReport()
    {
        SKS_BR_BankAccountReconciliationSummaryContract contract = this.parmDataContract();

        bankAccountId = contract.parmBankAccountId();
        endDate = contract.parmEndDate();
        showReconciliationSummary = contract.parmShowReconciliationSummary();
        showImportedStmtTransDetails = contract.parmShowImportedStmtTransDetails();
        showBankTransDetails = contract.parmShowBankTransDetails();

        if (bankAccountId)
        {
            bankAccountTable = BankAccountTable::find(bankAccountId);
            bankAccountLedgerDimension = bankAccountTable.LedgerDimension;
            emptyGuid = str2guid(#EmptyGuidString);

            if (showReconciliationSummary)
            {
                this.insertBankAccountReconSummaryTmp();
            }

            if (showImportedStmtTransDetails)
            {
                this.insertBankAccountReconStmtTransTmp();
            }

            if (showBankTransDetails)
            {
                this.insertBankAccountReconBankTransTmp();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>