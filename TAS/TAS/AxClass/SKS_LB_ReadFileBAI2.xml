<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LB_ReadFileBAI2</Name>
	<SourceCode>
		<Declaration><![CDATA[
//This is copied from SKS_BR_ReadFileBAI2.  If you change one of these,
//consider changing the other.
public class SKS_LB_ReadFileBAI2 extends SKS_LB_ReadFile
{
    SKS_EB_FileHub fileHub;
    TextStreamIo BAI2File;
    SKS_LB_FileFormatDet FileHeadBankAcctFieldFormat;
    SKS_LB_Bank mSKS_LB_Bank;
    str curline;
    #define.RecordCodeFileHeader(1)
    #define.RecordCodeGroupHeader(2)
    #define.RecordCodeLockboxHeader(5)
    #define.RecordCodeCheckTran(6)
    #define.RecordCodeInvoice(4)
    #define.RecordCodeBatchTotal(7)
    #define.RecordCodeLockboxTrailer(8)
    #define.RecordCodeFileTrailer(9)
    int maxlinelengthneeded;
    boolean NoSettlements;
    List FieldFormatsListCheck, FieldFormatsListInvoice, FieldFormatsListBatch, FieldFormatsListBatchTrailer;
    SKS_BF_BankIntType SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFileHub</Name>
				<Source><![CDATA[
    private SKS_EB_FileHub initFileHub(SKS_EB_FileHub _fileHub = fileHub)
    {
        fileHub = _fileHub;

        if(!fileHub)
        {
            SKS_EB_BankIntegOptWithNoLicense bankIntOption = SKS_EB_FileStorage::find().StorageOption_LB;           

            if(bankIntOption == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue)
                SKS_BF_BankIntType = SKS_BF_BankIntType::BankFabric;

            fileHub = SKS_EB_FileHub::construct(SKS_BF_BankIntType);

            if (Fileformat.CodePage)
            {
                fileHub.parmEncoding(Fileformat.CodePage);
            }
        }
      
        return fileHub;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BAI2FormatError</Name>
				<Source><![CDATA[
    void BAI2FormatError( int missingCodeError, int linenumber)
    {
        ;

        ttsabort;
        ImportCount = 0;

        error(strfmt("@SKS558", int2str(missingCodeError), int2str(linenumber)), '');
        importing = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeFile</Name>
				<Source><![CDATA[
    public void closeFile()
    {
        BAI2File.finalize();
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.StreamClose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileLineCount</Name>
				<Source><![CDATA[
    private int fileLineCount()
    {
        int linecnt = 0;
        Container line;

        this.openFile();
        while (BAI2File.status() == IO_status::Ok)
        {
            line = BAI2File.read();

            if (line)
            {
                linecnt++;
            }
        }
        return linecnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindBankAccountNumFormatDet</Name>
				<Source><![CDATA[
    int FindBankAccountNumFormatDet(SKS_LB_FormatDetType    _FormatDetType)
    {
        switch(_FormatDetType)
        {
            case SKS_LB_FormatDetType::FileHeader:
                return 1;
            case SKS_LB_FormatDetType::BatHeader:
                return 5;
            case SKS_LB_FormatDetType::BatTrailer:
                return 7;
            case SKS_LB_FormatDetType::MultiLineCheck:
                return 6;
            case SKS_LB_FormatDetType::MultiLineInvoice:
                return 4;
            default:
                return 5;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Get_Current_Line</Name>
				<Source><![CDATA[
    str Get_Current_Line()
    {
        ;

        return curline;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBAI2TransDescription</Name>
				<Source><![CDATA[
    str GetBAI2TransDescription(Container line, int fieldOffset, int fieldCount, int skipLoc)
    {
        int i;
        str value;

        value = conpeek(line,fieldOffset); // Get transaction description
        i = fieldOffset;
        while (fieldCount > i && strlen(value) < 30)
        {
            // Comma's in the description and less than maximum description length
            i += 1;
            value += ',' + conpeek(line,skipLoc + i); // Get more transaction description
        }

        if (substr(value,1,1) != '/')
        {
            return substr(value,1,30); // 1st 30 characters only.
        }
        else
        {
            return ''; // line termination character means nothing there.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetNoSettlements</Name>
				<Source><![CDATA[
    public boolean GetNoSettlements()
    {
        return NoSettlements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    //Verify that the label is correct
    void openFile(boolean _Relocation = false)
    {
        if(!fileHub)
        {
            fileHub = this.initFileHub();
            this.initFileHub(fileHub);
        }
        fileHub.runFileInquire(Filename);
        if(!_Relocation)
        {
            if(!fileHub.attrFileExists())
            {
                // The file %1 does not exist.
                error(strfmt("@SYS62207", fileName));
                return;
            }
        }
        if(SKS_BF_BankIntType == SKS_BF_BankIntType::FileHubLocal)
        {
            select firstOnly SepPaymByInv from mSKS_LB_Bank where mSKS_LB_Bank.LBPath == System.IO.Path::GetDirectoryName(FileName) && mSKS_LB_Bank.LBFormatId == FormatId;
        }
        else
        {
            select firstOnly SepPaymByInv from mSKS_LB_Bank where mSKS_LB_Bank.LBBankFabricLocation == System.IO.Path::GetDirectoryName(FileName) && mSKS_LB_Bank.LBFormatId == FormatId;            
        }

        fileHub.runFileLoad(FileName);
        fileHub.StreamInit();
        
        if (Fileformat.CodePage)
        {
            BAI2File = TextStreamIo::constructForRead(fileHub.StreamGet(), Fileformat.CodePage);
        }
        else
        {
            BAI2File = TextStreamIo::constructForRead(fileHub.StreamGet());
        }

        if (BAI2File == null || BAI2File.status() != IO_Status::Ok)
        {
            //file could not be opened
            throw error (strfmt("@SYS19312", fileName));
        }
        BAI2File.inFieldDelimiter('\n');
        BAI2File.inRecordDelimiter('\n');

        if(!_Relocation)
        {
            // Decide the minimum line length that is needed to satisfy the format
            select maxof(FieldEnd) from FieldFormat where FieldFormat.FormatId == formatId;
            FieldFormatsListcheck = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
            where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::MultiLineCheck
            {
                FieldFormatsListCheck.addEnd(FieldFormat);
            }

            FieldFormatsListInvoice = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
            where FieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_formatdettype::MultiLineInvoice
            {
                FieldFormatsListInvoice.addEnd(FieldFormat);
            }

            FieldFormatsListBatch = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
            where fieldFormat.FormatID == FileFormat.FormatID && FieldFormat.FormatDetType == SKS_LB_FormatDetType::BatHeader
            {
                FieldFormatsListBatch.addEnd(FieldFormat);
            }

            FieldFormatsListBatchTrailer = new List(Types::Record);
            while select FieldFormat order by FieldStart, FormatDetType asc
            where FieldFormat.formatid == Fileformat.FormatID && FieldFormat.FormatDetType == SKS_LB_FormatDetType::BatTrailer
            {
                FieldFormatsListBatchTrailer.addEnd(FieldFormat);
            }
        }

        select firstOnly BankAcctFieldFormat where BankAcctFieldFormat.formatid == Fileformat.FormatID 
            && BankAcctFieldFormat.FieldType == SKS_LB_FieldType::LBBankAccount 
            && BankAcctFieldFormat.FormatDetType != SKS_LB_FormatDetType::FileHeader;

        select firstOnly FileHeadBankAcctFieldFormat where FileHeadBankAcctFieldFormat.formatid == Fileformat.FormatID
            && FileHeadBankAcctFieldFormat.FieldType == SKS_LB_FieldType::LBBankAccount
            && FileHeadBankAcctFieldFormat.FormatDetType == SKS_LB_FormatDetType::FileHeader;

    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Line</Name>
				<Source><![CDATA[
    int Read_Line( int DesiredLine )
    {
        container line;
        str lineStr;
        int CurrentLine = 0;

        if (DesiredLine > 0 && BAI2File.status() == IO_status::Ok)
        {
            // Position on the desired line
            CurrentLine = 0;
            while (BAI2File.status() == IO_status::Ok && CurrentLine < DesiredLine)
            {
                line = BAI2File.read();
                CurrentLine = CurrentLine + 1;
            }

            if (BAI2File.status() != IO_status::Ok)
            {
                return 1;
            }

            [lineStr] = line;
            curline = strrem(lineStr, '\n\r');
        }
        else
        {
            return 1;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Read_Next</Name>
				<Source><![CDATA[
    int Read_Next()
    {
        container line;
        str lineStr;



        line = BAI2File.read();

        if (BAI2File.status() != IO_status::Ok)
        {
            return 1;
        }

        [lineStr] = line;
        curline = strrem(lineStr, '\n\r');

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readfile</Name>
				<Source><![CDATA[
    TmpSKS_LB_Importing readfile()
    {
        int RecordCode;
        int PrevRecordCode = 0;
        int linecnt = 0;
        Container line;
        str prevLine;
        str lineStr;
        str nextLineStr;
        boolean FileHeaderFound = false;
        boolean FileTrailerFound = false;
        boolean LockboxHeaderFound = false;
        boolean InvoiceFound = false;
        boolean WriteTransaction = false;
        boolean ValidAcctPathcombo = false;
        int PaymentRecId = 0;
        str CheckBatchItem = ' ';
        str InvoiceBatchItem = ' ';
        ListEnumerator fieldFormatsListEnumeratorCheck;
        ListEnumerator fieldFormatsListEnumeratorInvoice;
        ListEnumerator fieldFormatsListEnumeratorBatch;
        ListEnumerator fieldFormatsListEnumeratorBatchTrailer;
        SKS_LB_FileFormatDet localSKS_LB_FileFormatDet;
        str value;
        SKS_EB_FilePath         lbpath;

        ImportCount = 0;

        fieldFormatsListEnumeratorCheck = FieldFormatsListCheck.getEnumerator();
        fieldFormatsListEnumeratorInvoice = FieldFormatsListInvoice.getEnumerator();
        fieldFormatsListEnumeratorBatch = FieldFormatsListBatch.getEnumerator();
        fieldFormatsListEnumeratorBatchTrailer = FieldFormatsListBatchTrailer.getEnumerator();

        NoSettlements = false;

        //this.openFile();
        ttsbegin;
        lbpath =  System.IO.Path::GetDirectoryName(Filename);
        line = BAI2File.read();
        [lineStr] = line;

        while(BAI2File.status() == IO_status::Ok || (line != conNull() && BAI2File.status() == IO_Status::FileTooShort))
        {
            fieldFormatsListEnumeratorCheck.reset();
            fieldFormatsListEnumeratorInvoice.reset();
            fieldformatslistEnumeratorBatch.reset();
            fieldFormatsListEnumeratorBatchTrailer.reset();
            linecnt++;
            lineStr = strrem(lineStr, '\n\r');

            if (strlen(con2Str(line)) == 0) //skip blank lines
            {
                RecordCode=0;
            }
            else
            {
                RecordCode = str2int(substr(lineStr,1,1)); // Get the record code
            }
            //This loop will skip over 6 and 4 records that belong to a 5 record that contains a bank account that is invalid for the directory
            //this loop will end when a record that is not a 6 or a 4 is found
            while(FileHeaderFound == true && ValidAcctPathcombo == false
                && (RecordCode == #recordCodeCheckTran || RecordCode == #recordCodeInvoice)
                && BAI2File.status() == IO_status::Ok)
            {
                linecnt++; // 20137
                line = BAI2File.read();
                [lineStr] = line;

                if (strlen(con2Str(line)) == 0) //skip blank lines
                {
                    RecordCode=0;
                }
                else
                {
                    RecordCode = str2int(substr(lineStr,1,1)); // Get the record code
                }
            }

            switch(RecordCode)
            {
                case #RecordCodeFileHeader:
                    if (FileHeaderFound == true)
                    {
                        ImportCount = 0;
                        ttsabort;
                        // only 1 allowed
                        error("@SKS330");
                        importing = null;
                        return importing;
                    }
                    FileHeaderFound = true;
                    break;
                case #RecordCodeGroupHeader:
                    //ignore 02 records
                    break;
                case #RecordCodeLockboxHeader:
                    if (FileHeaderFound == false)
                    {
                        // missing: 01
                        this.BAI2FormatError(#RecordCodeFileHeader, linecnt);
                        return importing;
                    }
                    // Get processing date - this will be used if no check date is supplied

                    while(fieldFormatsListEnumeratorBatch.moveNext())
                    {
                        localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorBatch.current();
                        value = subStr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                    ValidAcctPathcombo = this.validatepathacctcombo(lbpath);

                    LockBoxHeaderFound = True;
                    break;

                // Check trans may or may not be followed by invoice details.
                // Record Check info for now. If corresponding Invoice information is found later, it will be added
                // to the line.
                case #RecordCodeCheckTran:
                    //Clear these values between checks
                    importing.CustAccount = '';
                    importing.CustName = '';
                    importing.CustomerCompany = '';

                    if (LockBoxHeaderFound == false)
                    {
                        // missing: 5
                        this.BAI2FormatError(#RecordCodeLockboxHeader, linecnt);
                        return importing;
                    }
                    // If an Invoice is found, then a terminating invoice must be found before another check
                    // record is found.
                    if (InvoiceFound == true)
                    {
                        // missing: 4
                        this.BAI2FormatError(#RecordCodeInvoice, linecnt);
                        return importing;
                    }

                    // Save off the check sequence info to verify if Invoice records belong to this Check
                    while (fieldFormatsListEnumeratorCheck.moveNext())
                    {
                        localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorCheck.current();
                        value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                    CheckBatchItem = importing.BatchNum + BatchSequence;
                    PaymentRecId = linecnt;
                    break;
                case #RecordCodeInvoice:
                    // Invoice (4) record is only valid after its corresponding Check (6) record

                    while (fieldFormatsListEnumeratorInvoice.moveNext())
                    {
                        localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorInvoice.current();
                        value = substr(lineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                    InvoiceBatchItem = importing.BatchNum + BatchSequence;

                    if (CheckBatchItem != InvoiceBatchItem)
                    {
                        // missing: 6
                        this.BAI2FormatError(#RecordCodeCheckTran, linecnt);
                        return importing;
                    }

                    InvoiceFound = True;

                    break;

                case #RecordCodeLockboxTrailer:
                    if (LockBoxHeaderFound == false
                        && (str2int(substr(prevLine,1,1)) != #RecordCodeGroupHeader))
                    {
                        // missing: 3
                        this.BAI2FormatError(#RecordCodeLockboxHeader, linecnt);
                        return importing;
                    }
                    LockBoxHeaderFound = false;
                    break;

                case #RecordCodeFileTrailer:
                    if (LockboxHeaderFound == true)
                    {
                        // missing: 8
                        this.BAI2FormatError(#RecordCodeLockboxTrailer, linecnt);
                        return importing;
                    }
                    FileTrailerFound  = true;
                    break;

                default:
                    break;

            }
            // If this is an invoice line, or a check followed by a non-invoice line, a record should be written.
            // get next line to determine what record follows this one.
            line = BAI2File.read();
            [nextLineStr] = line;

            if(RecordCode == #RecordCodeGroupHeader
                && BAI2File.status() == IO_status::OK
                && (str2int(substr(nextLineStr, 1, 1)) == #RecordCodeFileTrailer
                    ||str2int(substr(nextLineStr, 1, 1)) == #RecordCodeLockboxTrailer))
            {
                NoSettlements = true;
            }


            if (RecordCode == #RecordCodeInvoice && ValidAcctPathcombo)
            {
                WriteTransaction = true;
            }

            if (RecordCode == #RecordCodeCheckTran && ValidAcctPathcombo)
            {
                if (BAI2File.status() == IO_status::OK && str2int(substr(nextLineStr, 1, 1)) != #RecordCodeInvoice )
                {
                    WriteTransaction = true;
                }
            }

            if (WriteTransaction)
            {
                WriteTransaction = false;
                importing.FileDate = FileDate;
                if (BAI2File.status() == IO_status::OK && str2int(substr(nextLineStr, 1, 1)) == #RecordCodeBatchTotal )
                {
                    while(fieldFormatsListEnumeratorBatchTrailer.moveNext())
                    {
                        localSKS_LB_FileFormatDet = fieldFormatsListEnumeratorBatchTrailer.current();
                        value = subStr(nextlineStr, localSKS_LB_FileFormatDet.FieldStart, localSKS_LB_FileFormatDet.FieldEnd - localSKS_LB_FileFormatDet.FieldStart + 1);
                        this.ReadOneField(value, localSKS_LB_FileFormatDet.FieldType);
                    }
                }
                ImportCount++;
                importing.FileLineNbrBegin = linecnt;
                importing.ParentRecId = PaymentRecId;
                importing.insert();

                // reset invoice info from line, if terminating invoice reset check info too
                importing.InvAmount = 0;
                importing.InvoiceNumber = ' ';
                importing.BankPmtCnt = 0;
                importing.BankPmtTotal = 0;
                importing.DiscAmount = 0;
                importing.LBInvoice = '';
               

                if( str2int(substr(nextLineStr, 1, 1)) != #RecordCodeInvoice)
                {
                    importing.PaymNote = '';
                    importing.Description = '';
                }

                if (lastIndicator == '9')
                {
                    CheckBatchItem = '';
                    InvoiceBatchItem = '';
                    InvoiceFound = false;
                }
            }
            prevLine = lineStr;
            lineStr = nextLineStr;
        }
        // end while
        if (FileHeaderFound == false)
        {
            // missing: 01
            this.BAI2FormatError(#RecordCodeFileHeader, linecnt);
            return importing;
        }
        if (FileTrailerFound == false)
        {
            // missing: 01
            this.BAI2FormatError(#RecordCodeFileTrailer, linecnt);
            return importing;
        }
        ttscommit;

        return importing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetrieveBankAccountNumberFromFile</Name>
				<Source><![CDATA[
    Container RetrieveBankAccountNumberFromFile()
    {
        int         BankAcctRecCode;
        int         RecordCode;
        Container   line;
        container   BankAcctCon;
        str         lineStr;
        str         nextLineStr;
        str         AcctNum;
        str         FileAcctNum;
        boolean     Exit = false;
        ;

        if(BankAcctFieldFormat || FileHeadBankAcctFieldFormat)
        {
            BankAcctRecCode = this.FindBankAccountNumFormatDet(BankAcctFieldFormat.FormatDetType);
            line = BAI2File.read();
            [lineStr] = line;
            while(BAI2File.status() == IO_status::Ok && !Exit)
            {
                if(isColombia)
                {
                    RecordCode = str2int(substr(lineStr,1,2));
                }
                else
                {
                    RecordCode = str2int(substr(lineStr,1,1));
                }

                if(FileHeadBankAcctFieldFormat && RecordCode == 1)
                {
                    FileAcctNum = subStr(lineStr, FileHeadBankAcctFieldFormat.FieldStart, FileHeadBankAcctFieldFormat.FieldEnd - FileHeadBankAcctFieldFormat.FieldStart + 1);
                    if(!BankAcctFieldFormat)
                    {
                        Exit = true;
                    }
                }
                else if(RecordCode == BankAcctRecCode)
                {
                    AcctNum = subStr(lineStr, BankAcctFieldFormat.FieldStart, BankAcctFieldFormat.FieldEnd - BankAcctFieldFormat.FieldStart + 1);
                    if(conFind(BankAcctCon,AcctNum) == 0 && AcctNum != '')//Makes sure the account number is unique and not already in the container
                    {
                        BankAcctCon += AcctNum;
                        Exit = !FileFormat.VerifyAcct ? true : false;
                    }
                }
                line = BAI2File.read();
                [nextLineStr] = line;
                LineStr = nextLineStr;
            }

            if(conNull() == BankAcctCon)
            {
                BankAcctCon += FileAcctNum;
            }
            return BankAcctCon;
        }
        else
        {
            return BankAcctCon;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>