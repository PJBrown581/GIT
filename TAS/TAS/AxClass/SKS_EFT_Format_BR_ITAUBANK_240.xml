<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_BR_ITAUBANK_240</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_BR_ITAU_240 for Itau bank
/// </summary>
class SKS_EFT_Format_BR_ITAUBANK_240 extends SKS_EFT_Format
{
    #define.FormatVersion('20230516')
    #define.CREDCONTRA('CREDCONTRA')
    #define.TED('TED')
    #define.DOC('DOC')
    #define.PIX('PIX')

    int mRecordCount, mBatchCountTot;
    int mBatchCount;
    int regCount;
    AmountMST mBatchAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountId   prevBankAccount;
        PaymSpec        prevPaymSpec;
    
        // Format header
        this.rec_File_Header();
    
        while(mSKS_EFT_FileDetail)
        {    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId ||
               prevPaymSpec != mSKS_EFT_FileDetail.PaymSpec)                //SKS#DevOps:21356
            {
                // Batch Header
                this.rec_Batch_Header();
            }
    
            // Detail Record
            this.rec_Details();

            prevBankAccount = mSKS_EFT_FileDetail.BankAccountId;
            prevPaymSpec    = mSKS_EFT_FileDetail.PaymSpec;

            next mSKS_EFT_FileDetail;

            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId ||
               prevPaymSpec != mSKS_EFT_FileDetail.PaymSpec)                //SKS#DevOps:21356
            {
                // Format trailer
                this.rec_Batch_Trailer();
            }
        }
        // Format trailer
        this.rec_File_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_File_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// File Header
    /// </summary>
    /// <returns>True</returns>
    public boolean rec_File_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;
        mRecordCount++;

        //  BANK CODE   001-003
        sb.Append('341');

        //  BATCH CODE  004-007
        sb.Append('0000');

        // RECORD TYPE  008-008
        sb.Append('0');

        //  WHITE       009-014
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  FILE LAYOUT     015-017
        sb.Append('080');

        //  COMPANY - REGISTRATION  018-018
        sb.Append('2');

        //  REGISTRATION NUMBER     019-032
        BankAccountTable lBankAccountTable = BankAccountTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.BankAccountId);
        sb.Append(SKS_PP_StringFormats::strFill(14, lBankAccountTable.CompanyPaymId, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  WHITE                   033-052
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  AGENCY                  053-057
        sb.Append(SKS_PP_StringFormats::strFill(5, subStr(mSKS_EFT_FileDetail.BankBankAcct, 5, 4), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  WHITE                   058-058
        sb.Append(' ');

        //  ACCOUNT                 059-070
        sb.Append(SKS_PP_StringFormats::strFill(12, subStr(mSKS_EFT_FileDetail.BankBankAcct, 10, 12), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  WHITE                   071-071
        sb.Append(' ');

        //  DAC                     072-072
        sb.Append(SKS_PP_StringFormats::strFill(1, subStr(mSKS_EFT_FileDetail.BankBankAcct, 23, 1), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  COMPANY NAME            073-102
        sb.Append(SKS_PP_StringFormats::strFill(30, CompanyInfo::find().Name(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  BANK NAME               0103-132
        sb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  WHITE                   0133-0142
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  FILE-CODE               0143-0143
        sb.Append('1');

        //  GENERATION DATE         144-151
        sb.Append(date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 123,DateDay::Digits2 ,DateSeparator::None,DateMonth::Digits2,DateSeparator::None,DateYear::Digits4));

        //  GENERATION TIME         152-157
        sb.Append(SKS_PP_StringFormats::strTimeHHMMSS());

        //  ZEROS                   158-166
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  DENSITY UNIT FILE WRITE DENSITY     167-171
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  WHITE                   172-240
        sb.Append(SKS_PP_StringFormats::strFill(69, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        OutPut = sb.ToString();
        this.fileWrite(OutPut);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Batch_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// Batch Header
    /// </summary>
    /// <returns>True</returns>
    public boolean rec_Batch_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut, paymentMethod;
        mRecordCount++;
        mBatchCount++;
        mBatchCountTot++;

        //  BANK CODE       001-003
        sb.Append('341');

        //  BATCH CODE      004-007
        sb.Append(SKS_PP_StringFormats::strFill(4, num2Str(mBatchCountTot, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  RECORD TYPE         008-008
        sb.Append('1');

        //  TYPE OF OPERATION       009-009
        sb.Append('C');

        LedgerJournalTransPayment_BR lLedgerJournalTransPayment_BR;

        select firstonly EPPaymentType_BR, EPPaymentWay_BR from lLedgerJournalTransPayment_BR where lLedgerJournalTransPayment_BR.RefRecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        //  PAYMENT TYPE            010-011
        sb.Append(SKS_PP_StringFormats::strFill(2, SKS_EFT_Format::getCodelookupvalue('PaymentType', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  PAYMENT METHOD          012-013
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CREDCONTRA:
                paymentMethod = '01';
                break;
            case #DOC:
                paymentMethod = '03';
                break;
            case #TED:
                paymentMethod = '41';
                break;
            case #PIX:
                paymentMethod = '45';
                break;
        }
        sb.Append(SKS_PP_StringFormats::strFill(2, paymentMethod, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  BATCH LAYOUT            014-016
        sb.Append('040');

        //  WHITE                   017-017
        sb.Append(' ');

        //  COMPANY - REGISTRATION      018-018
        sb.Append('2');

        //  REGISTRATION NUMBER         019-032
        BankAccountTable lBankAccountTable = BankAccountTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.BankAccountId);
        sb.Append(SKS_PP_StringFormats::strFill(14, lBankAccountTable.CompanyPaymId, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  LAUNCH ID                   033-036
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  WHITE                       037-052
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  AGENCY                  053-057
        sb.Append(SKS_PP_StringFormats::strFill(5, subStr(mSKS_EFT_FileDetail.BankBankAcct, 5, 4), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  WHITE                   058-058
        sb.Append(' ');

        //  ACCOUNT                 059-070
        sb.Append(SKS_PP_StringFormats::strFill(12, subStr(mSKS_EFT_FileDetail.BankBankAcct, 10, 12), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  WHITE                   071-071
        sb.Append(' ');

        //  DAC                     072-072
        sb.Append(SKS_PP_StringFormats::strFill(1, subStr(mSKS_EFT_FileDetail.BankBankAcct, 23, 1), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  COMPANY NAME            073-102
        sb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_FileDetail.FileACHCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  PURPOSE OF THE LOT      103-132
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  HISTORY OF C/C          133-142
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  COMPANY ADDRESS STREET NAME, AV, PÃ‡A, ETC...            143-172
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  LOCATION NUMBER         173-177
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  COMPLEMENT.             178-192
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  CITY                    193-212
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  ZIP                     213-220
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  STATE                   221-222
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  WHITE                   223-230
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  OCCURRENCES             231-240
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        OutPut = sb.ToString();
        this.fileWrite(OutPut);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    /// <summary>
    /// Details Record
    /// </summary>
    /// <returns>True</returns>
    public boolean rec_Details()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;
        str favoredBank;
        mRecordCount++;
        mBatchCount++;
        regCount++;

        //  BANK CODE       001-003
        sb.Append('341');

        //  BATCH CODE      004-007
        sb.Append(SKS_PP_StringFormats::strFill(4, num2Str(mBatchCountTot, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  RECORD TYPE         008-008
        sb.Append('3');

        //  REGISTRATION NUMBER         009-013
        sb.Append(SKS_PP_StringFormats::strFill(5, num2Str(regCount, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  SEGMENT                     014-014
        sb.Append('A');

        //  MOVEMENT TYPE               015-017
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  CHAMBER                     018-020
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  FAVORED BANK                021-023
        favoredBank = subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 3);
        sb.Append(SKS_PP_StringFormats::strFill(3, favoredBank, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        if(favoredBank == '341' || favoredBank == '409')
        {
            //  ZEROS                   024-024
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            //  AGENCY                  025-028
            sb.Append(SKS_PP_StringFormats::strFill(4, subStr(mSKS_EFT_FileDetail.DepBankAcct, 5, 4), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            //  WHITE                   029-029
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //  ZEROS                   030-035
            sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            //  ACCOUNT                 036-041
            sb.Append(SKS_PP_StringFormats::strFill(6, subStr(mSKS_EFT_FileDetail.DepBankAcct, 16, 6), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left)); //SKS#DevOps:21357

            //  WHITE                   042-042
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //  DAC                     043-043
            sb.Append(SKS_PP_StringFormats::strFill(1, subStr(mSKS_EFT_FileDetail.DepBankAcct, 23, 1), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            //  AGENCY                  024-028
            sb.Append(SKS_PP_StringFormats::strFill(5, subStr(mSKS_EFT_FileDetail.DepBankAcct, 5, 5), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            //  WHITE                   029-029
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //  ACCOUNT                 030-041
            sb.Append(SKS_PP_StringFormats::strFill(12, subStr(mSKS_EFT_FileDetail.DepBankAcct, 10, 12), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

            //  WHITE                   042-042
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

            //  DAC                     043-043
            sb.Append(SKS_PP_StringFormats::strFill(1, subStr(mSKS_EFT_FileDetail.DepBankAcct, 23, 1), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }

        //  NAME OF THE FAVORED         044-073
        sb.Append(SKS_PP_StringFormats::strFill(30, mSKS_EFT_FileDetail.AccountName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  YOUR NUMBER                 074-093
        sb.Append(SKS_PP_StringFormats::strFill(20, this.getInvoiceNbrs(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        this.addFieldElement(gXmlNodeDetailFieldValues, 'TransactionReference', strLRTrim(this.getInvoiceNbrs()), mSKS_EFT_FileDetail.RecId);

        //  DATE OF PAGTO               094-101
        sb.Append(date2str(mSKS_EFT_FileDetail.PaymentTransDate, 123,DateDay::Digits2 ,DateSeparator::None,DateMonth::Digits2,DateSeparator::None,DateYear::Digits4));

        //  CURRENCY - TYPE             102-104
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);

        //  ISPB CODE                   105-112
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  IDENTI. TRANSFER ACCOUNT PAYMENT / PIX  113-114
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  ZEROS                       115-119
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  PAYOUT AMOUNT               120-134
        sb.Append(SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 15));
        mBatchAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;

        //  OUR NUMBER                  135-149
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  WHITE                       150-154
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  EFFECTIVE DATE              155-162
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  EFFECTIVE VALUE             163-177
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  PURPOSE DETAIL              178-197
        sb.Append(SKS_PP_StringFormats::strFill(20, this.getInvoiceNbrs(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  NÂ° OF THE DOCUMENT          198-203
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  NO REGISTRATION             204-217
        VendTable lVendTable = VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

        sb.Append(SKS_PP_StringFormats::strFill(14, strReplace(lVendTable.CNPJCPFNum_BR, '-', ''), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  PURPOSE DOC E OFFICIAL STATUS       218-219
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  TED PURPOSE                 220-224
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  WHITE                       225-229
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  NOTICE                      230-230
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  OCCURRENCES                 231-240
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        OutPut = sb.ToString();
        this.fileWrite(OutPut);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Batch_Trailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Batch Trailer Record
    /// </summary>
    /// <returns>True</returns>
    public boolean rec_Batch_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;
        mRecordCount++;
        mBatchCount++;
    
        //  BANK CODE           001-003
        sb.Append('341');
    
        //  BATCH CODE          004-007
        sb.Append(SKS_PP_StringFormats::strFill(4, num2Str(mBatchCountTot, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  RECORD TYPE         008-008
        sb.Append('5');

        //  WHITE               009-017
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  TOTAL QTDE RECORDS  018-023
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mBatchCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //  TOTAL VALUE PAYABLES    024-041
        sb.Append(SKS_PP_StringFormats::strMoney(mBatchAmount, 18));
    
        //  ZEROS               042-059
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  WHITE               060-230
        sb.Append(SKS_PP_StringFormats::strFill(171, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  OCCURRENCES         231-240
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //Reset Batch values
        mBatchCount = 0;
        mBatchAmount = 0;
        regCount = 0;
    
        OutPut = sb.ToString();
        this.fileWrite(OutPut);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_File_Trailer</Name>
				<Source><![CDATA[
    private boolean rec_File_Trailer()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str OutPut;
        mRecordCount++;

        //  BANK CODE           001-003
        sb.Append('341');
    
        //  BATCH CODE          004-007
        sb.Append('9999');
    
        //  RECORD TYPE         008-008
        sb.Append('9');

        //  WHITE               009-017
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  TOTAL QTDE OF LOTS      018-023
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mBatchCountTot), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  TOTAL QTDE RECORDS      024-029
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  WHITE                   030-240
        sb.Append(SKS_PP_StringFormats::strFill(211, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        OutPut = sb.ToString();
        this.fileWrite(OutPut);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(', ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>