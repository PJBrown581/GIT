<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AU_WESTPACBANK</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AU_WESTPACBANK extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_AU_WESTPACBANK extends SKS_EFT_Format
{
    #define.FormatVersion('20220312')
    #define.DOM('DOM')
    #define.RTGS_IMPS('RTGS-IMPS')
    #define.RTGS_SDPS('RTGS-SDPS')
    #define.INTL('INTL')
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountId prevBankAccount;

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            if(prevBankAccount != mSKS_EFT_FileDetail.BankAccountId)
            {
                // Format header
                this.rec_Debit();
            }               
    
            // Details
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #DOM:
                    this.rec_DOM();
                    break;
                case #RTGS_IMPS:
                case #RTGS_SDPS:
                    this.rec_RTGS();
                    break;
                case #INTL:
                    this.rec_INTL();
                    break;
            }
            prevBankAccount = mSKS_EFT_FileDetail.BankAccountId;
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Debit</Name>
				<Source><![CDATA[
    public boolean rec_Debit()
    {
        //------------------------------------------------------------------------------------------------------
        //Position   Description                    Length      Position
        // 1         Record type                        2           ( 1 -  2)
        // 2         Payment type                       1           ( 3  )
        // 3         Method                             1           ( 4  )
        // 4         Processing mode                    1           ( 5  )
        // 5         Bank code                          4           ( 6  -   9)
        // 6         Account number                     17          ( 10 -  26)
        // 7         Debit description                  8           ( 27 -  34)
        // 8         Value date                         8           ( 35 -  42)
        // 9         Bank instructions                  35          ( 43 -  77) 
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        str value;

        // 1         Record type                    2   ( 1 -  2)
        sb.Append('01');

        // 2         Payment type                   1   ( 3 )
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DOM:
                value = '1';
                break;
            case #RTGS_IMPS:
            case #RTGS_SDPS:
                value = '2';
                break;
            case #INTL:
                value = '3';
                break;
        }
        sb.Append(value);

        // 3         Method                         1   ( 4  )
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4         Processing mode                1   ( 5  )
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #RTGS_IMPS)
        {
            sb.Append('1');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #RTGS_SDPS)
        {
            sb.Append('2');
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 5         Bank code                      4   ( 6  -   9)
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DOM:
            case #INTL:
                value = mSKS_EFT_Bank.WOrdPartyId;
                break;
            case #RTGS_IMPS:
            case #RTGS_SDPS:
                value = 'AU03';
                break;
            default:
                value = '';
                break;
        }
        sb.Append(SKS_PP_StringFormats::strFill(4, value, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6         Account number                     17  ( 10 -  26)
        sb.Append(SKS_PP_StringFormats::strFill(17, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7         Debit description                  8   ( 27 -  34)
        str debitDescrptn;

        debitDescrptn = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DebitDescrptn', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(8, this.CharacterReplacement(debitDescrptn), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8         Value date                         8   ( 35 -  42)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        // 9         Bank instructions                  35  ( 43 -  77)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DOM</Name>
				<Source><![CDATA[
    public boolean rec_DOM()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                    Length      Position
        // 1    Record type                         2   (  1  -   2)
        // 2    Method                              1   (  3 )
        // 3    Bank                                4   ( 4  -   7)
        // 4    BSB & Account number                17  ( 8  -  24)
        // 5    Account name                        35  ( 25 -  59)
        // 6    Amount                              15  ( 60 -  74)
        // 7    Details                             35  ( 75 -  109)
        // 8    Description type                    1   ( 110 )
        // 9    Description                         18  ( 111 -  128)
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        

        // 1    Record type                         2   (  1  -   2)
        sb.Append('03');

        // 2    Method                              1   (  3 )
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Bank                                4   ( 4  -   7)
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    BSB & Account number                17  ( 8  -  24)
        sb.Append(SKS_PP_StringFormats::strFill(17, mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Account name                        35  ( 25 -  59)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Amount                              15  ( 60 -  74)
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 15));

        // 7    Details                             35  ( 75 -  109)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Description type                    1   ( 110 )
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Description                         18  ( 111 -  128)
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RTGS</Name>
				<Source><![CDATA[
    public boolean rec_RTGS()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                    Length      Position
        // 1    Record type                         2   (  1  -   2)
        // 2    Method                              1   (  3 )
        // 3    Bank                                4   ( 4  -   7 )
        // 4    BSB & Account number                34  ( 8  -  41 )
        // 5    Account name                        35  ( 42 -  76 )
        // 6    Amount                              15  ( 77 -  91 )
        // 7    Notify beneficiary                  1   ( 92 )
        // 8    Branch name 1                       35  ( 93 - 127 )
        // 9    Branch name 2                       35  ( 128 - 162 )
        // 10   Beneficiary address 1               35  ( 163 - 197 )
        // 11   Beneficiary address 2               35  ( 198 - 232 )
        // 12   Description                         35  ( 233 - 267 )
        // 13   Description                         35  ( 268 - 302 )
        // 14   Description                         35  ( 303 - 337 )
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        

        // 1    Record type                         2   (  1  -   2)
        sb.Append('07');

        // 2    Method                              1   (  3 )
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Bank                                4   ( 4  -   7)
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    BSB & Account number                34  ( 8  -  41)
        sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Account name                        35  ( 42 -  76)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Amount                              15  ( 77 -  91)
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 15));

        // 7    Notify beneficiary                  1   ( 92 )
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Branch name 1                       35  ( 93 - 127)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Branch name 2                       35  ( 128 - 162)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10   Beneficiary address 1               35  ( 163 - 197)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11   Beneficiary address 2               35  ( 198 - 232)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 12   Description                         35  ( 233 - 267 )
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 13   Description                         35  ( 268 - 302)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 14   Description                         35  ( 303 - 337)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_INTL</Name>
				<Source><![CDATA[
    public boolean rec_INTL()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                    Length      Position
        // 1    Record type                         2   (  1  -   2)
        // 2    BTB Info                            1   (  3 )
        // 3    Amount                              15  ( 4 -  18 )
        // 4    Currency                            3   ( 19 - 21 )
        // 5    Account (Beneficiary) name          35  ( 22 - 56 )
        // 6    Account number or IBAN              34  ( 57 - 90 )
        // 7    Beneficiary address - line 1        35  ( 91 - 125 )     
        // 8    Beneficiary address - line 2        35  ( 126 - 160 )
        // 9    Beneficiary address  - line 3       35  ( 161 - 195 )
        // 10   Bank SWIFT / BIC code               11  ( 196 - 206 )
        // 11   Bank name                           35  ( 207 - 241 )
        // 12   Bank city (i.e.: location)          35  ( 242 - 276 )
        // 13   Branch details(i.e.: Street address)35  ( 277 - 311 )
        // 14   Phone number                        16  ( 312 - 327 )
        // 15   ABS code                            4   ( 328 - 331 )
        // 16   Country code                        2   ( 332 - 333 )
        // 17   Blank field                         14  ( 334 - 347 )
        // 18   Branch identifier (i.e.: National clearing code)    16  ( 348 - 363 )
        // 19   Description                         35  ( 364 - 398 )
        // 20   Description                         35  ( 399 - 433 )
        // 21   Account                             34  ( 434 - 467 )
        // 22   Bank SWIFT /BIC code                11  ( 468 - 478 )
        // 23   Bank name                           35  ( 479 - 513 )
        // 24   Branch details (i.e.: Street address)  - line 1     35  ( 514 - 548 )
        // 25   (IBD) Bank address line 2           35  ( 549 - 583 )
        // 26   Country code                        2   ( 584 - 585 )
        // 27   Blank field                         14  ( 586 - 599 )
        //------------------------------------------------------------------------------------------------------

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        

        // 1    Record type                         2   (  1  -   2)
        sb.Append('06');

        // 2    BTB Info                            1   (  3 )
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Amount                              15  ( 4 -  18 )
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 15));

        // 4    Currency                            3   ( 19 - 21 )
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);

        // 5    Account (Beneficiary) name          35  ( 22 - 56 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Account number or IBAN              34  ( 57 - 90 )
        sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7    Beneficiary address - line 1        35  ( 91 - 125 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Beneficiary address - line 2        35  ( 126 - 160 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Beneficiary address  - line 3       35  ( 161 - 195 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10   Bank SWIFT / BIC code               11  ( 196 - 206 )
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11   Bank name                           35  ( 207 - 241 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 12   Bank city (i.e.: location)          35  ( 242 - 276 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 13   Branch details(i.e.: Street address)35  ( 277 - 311 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 14   Phone number                        16  ( 312 - 327 )
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 15   ABS code                            4   ( 328 - 331 )
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 16   Country code                        2   ( 332 - 333 )
        sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 17   Blank field                         14  ( 334 - 347 )
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 18   Branch identifier (i.e.: National clearing code)    16  ( 348 - 363 )
        if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) == 'IN')
        {
            sb.Append(SKS_PP_StringFormats::strFill(16, subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 19   Description                         35  ( 364 - 398 )
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 20   Description                         35  ( 399 - 433 )
        if(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) == 'CN')
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, this.getJournaltxt(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 21   Account                             34  ( 434 - 467 )
        sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 22   Bank SWIFT /BIC code                11  ( 468 - 478 )
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 23   Bank name                           35  ( 479 - 513 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 24   Branch details (i.e.: Street address)  - line 1     35  ( 514 - 548 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 25   (IBD) Bank address line 2           35  ( 549 - 583 )
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 26   Country code                        2   ( 584 - 585 )
        sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 27   Blank field                         14  ( 586 - 599 )
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        LedgerJournalTrans ledgerJournalTrans;

        select firstonly crossCompany Txt from ledgerJournalTrans where
        ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        return this.CharacterReplacement(ledgerJournalTrans.Txt);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>