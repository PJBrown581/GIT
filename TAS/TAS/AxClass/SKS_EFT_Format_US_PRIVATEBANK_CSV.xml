<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_PRIVATEBANK_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_PRIVATEBANK_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_PRIVATEBANK_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220711')
    #define.DOM('DOM')
    #define.INTL('INTL')

    #define.Separator(',')
    #define.DoubleQuote('"')
    #define.SeparatorSpace(' ')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get RemittanceAddress
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Details
            this.rec_Details();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail
            where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                && invSKS_EFT_FileDetail.InvoiceNumber != '';
    
        while(invSKS_EFT_FileDetail)
        {
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(', ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        // 1    ABA/TRC
        // 2    Account Type
        // 3    Account number
        // 4    Amount
        // 5    Send on Date
        // 6    Currency
        // 7    Bank ID type
        // 8    Bank ID
        // 9    Recipient account #
        //10    Bank name
        //11    Bank address 1
        //12    Bank address 2
        //13    Bank address 3
        //14    Recipient name
        //15    Recipient address 1
        //16    Recipient address 2
        //17    Recipient address 3
        //18    Additional information for recipient
        //19    Bank ID type
        //20    Bank ID
        //21    Intermediary account #
        //22    Bank name
        //23    Bank address 1
        //24    Bank address 2
        //25    Bank address 3
        //26    Bank ID type
        //27    Bank ID
        //28    Intermediary account #
        //29    Bank name
        //30    Bank address 1
        //31    Bank address 2
        //32    Bank address 3
        //33    Wire initiator name
        //34    Wire initiator address 1
        //35    Wire initiator address 2
        //36    Wire initiator address 3
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value, address, wireAddress;
    
    
        // 1    ABA/TRC
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankTransit, 1, 9)));
    
        // 2    Account Type
        if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount) // Checking
        {
            sb.Append(this.wrapField('C'));
        }
        else  // Savings
        {
            sb.Append(this.wrapField('S'));
        }
    
        // 3    Account number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 35)));
    
        // 4    Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));
    
        // 5    Send on Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate)));
    
        // 6    Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOM && mSKS_EFT_FileDetail.DepBankTransit)
        {
            // 7    Bank ID type
            sb.Append(this.wrapField('ABA'));
    
            // 8    Bank ID
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 9)));
        }
        else if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            // 7    Bank ID type
            sb.Append(this.wrapField('SWIFT'));
    
            // 8    Bank ID
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11)));
        }
        else
        {
            // 7    Bank ID type
            sb.Append(this.wrapField(''));
    
            // 8    Bank ID
            sb.Append(this.wrapField(''));
        }
    
        // 9    Recipient account #
        if(mSKS_EFT_FileDetail.DepBankIBAN)
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 35)));
        }
        else if(mSKS_EFT_FileDetail.DepBankAcct)
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }
    
        //10    Bank name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 1, 35), true));
    
        //11    Bank address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), 1, 35), true));
    
        //12    Bank address 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity), 1, 35), true));
    
        //13    Bank address 3
        sb.Append(this.wrapField(subStr(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId), 1, 35)));
    
        //14    Recipient name
        sb.Append(this.wrapField(subStr(mRemittanceName, 1, 35), true));
    
        //15    Recipient address 1
        sb.Append(this.wrapField(subStr(mRemittanceAdrLine1, 1, 35), true));
    
        //16    Recipient address 2
        if(mRemittanceCity || mRemittanceState || mRemittanceZipCode)
        {
            if(mRemittanceCity)
            {
                address += mRemittanceCity;
            }
    
            if(mRemittanceState)
            {
                if(address)
                {
                    address += #SeparatorSpace;
                }
                address += mRemittanceState;
            }
    
            if(mRemittanceZipCode)
            {
                if(address)
                {
                    address += #SeparatorSpace;
                }
                address += mRemittanceZipCode;
            }
        }
    
        sb.Append(this.wrapField(subStr(address, 1, 35), true));
    
        //17    Recipient address 3
        sb.Append(this.wrapField(subStr(this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId), 1, 35)));
    
        //18    Additional information for recipient
        sb.Append(this.wrapField(subStr(this.getInvoiceNbrs(), 1 , 140), true));
    
        value = SKS_EFT_Format::getCodelookupvalue('BankIdType', mSKS_EFT_FileDetail.RecId);
    
        //19    Bank ID type
        sb.Append(this.wrapField(value));
    
        //20    Bank ID
        switch(value)
        {
            case 'SWIFT':
                sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WIntBankSwift, 1, 11)));
                break;
            case 'ABA':
                sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WIntBankId, 1, 9)));
                break;
            default:
                sb.Append(this.wrapField(''));
                break;
        }
    
        //21    Intermediary account #
        sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WIntBankAcct, 1, 35)));
    
        //22    Bank name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), 1, 35), true));
    
        //23    Bank address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr), 1, 35), true));
    
        //24    Bank address 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity), 1, 35), true));
    
        //25    Bank address 3
        sb.Append(this.wrapField(subStr(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId), 1, 35)));
    
        if(mSKS_EFT_VendorPaym.WCrePartySwift)
        {
            //26    Bank ID type
            sb.Append(this.wrapField('SWIFT'));
    
            //27    Bank ID
            sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WCrePartySwift, 1, 11)));
        }
        else if(mSKS_EFT_VendorPaym.WCrePartyBankId)
        {
            //26    Bank ID type
            sb.Append(this.wrapField('ABA'));
    
            //27    Bank ID
            sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WCrePartyBankId, 1, 9)));
        }
        else
        {
            //26    Bank ID type
            sb.Append(this.wrapField(''));
    
            //27    Bank ID
            sb.Append(this.wrapField(''));
        }
    
        //28    Intermediary account #
        sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WCrePartyAcct, 1, 35)));
    
        //29    Bank name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WCrePartyBankName), 1, 35), true));
    
        //30    Bank address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WCrePartyAddr), 1, 35), true));
    
        //31    Bank address 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WCrePartyCity), 1, 35), true));
    
        //32    Bank address 3
        sb.Append(this.wrapField(subStr(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WCrePartyCountryRegionId), 1, 35)));
    
        //33    Wire initiator name
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 1, 35), true));
    
        //34    Wire initiator address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr), 1, 35), true));
    
        //35    Wire initiator address 2
        if(mSKS_EFT_Bank.WOrdPartyCity || mSKS_EFT_Bank.WOrdPartyState || mSKS_EFT_Bank.WOrdPartyZipCode)
        {
            if(mSKS_EFT_Bank.WOrdPartyCity)
            {
                wireAddress += mSKS_EFT_Bank.WOrdPartyCity;
            }
    
            if(mSKS_EFT_Bank.WOrdPartyState)
            {
                if(wireAddress)
                {
                    wireAddress += #SeparatorSpace;
                }
                wireAddress += mSKS_EFT_Bank.WOrdPartyState;
            }
    
            if(mSKS_EFT_Bank.WOrdPartyZipCode)
            {
                if(wireAddress)
                {
                    wireAddress += #SeparatorSpace;
                }
                wireAddress += mSKS_EFT_Bank.WOrdPartyZipCode;
            }
        }
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(wireAddress), 1, 35), true));
    
        //36    Wire initiator address 3
        sb.Append(this.wrapField(subStr(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId), 1, 35), false, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _Quote = false, boolean _addSeparator = true)
    {
        if(_addSeparator)
        {
            if((_Quote && _field != '') && strContains(_field, ','))
            {
                return #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                return _field + #Separator;
            }
        }
        else
        {
            if((_Quote && _field != '') && strContains(_field, ','))
            {
                return #DoubleQuote + _field + #DoubleQuote;
            }
            else
            {
                return _field;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>