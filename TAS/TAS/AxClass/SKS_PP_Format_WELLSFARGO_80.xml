<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_WELLSFARGO_80</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_WELLSFARGO_80 Extends SKS_PP_Format_BankGroup
{
    real Chksum;
    int  Chkcount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // WELLS FARGO POSITIVE PAY FORMAT - Detail Record
    //
    //
    // Pos 01-10    10       Check number - RJ-LZF
    // Pos 11-16    6        Issue date MMDDYY
    // Pos 17-26    10       Account number - LJ-RBF
    // Pos 27-29    3        Trancode (320 = issued check, 370 = cancel old register - void)
    // Pos 30-39    10       Amount (zeroes for void)
    // Pos 40-79    40       Additional description - Payee
    // Pos 80-80    1        Space
    protected str txtDetail()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int Mult = 1;
        str ItemType;
        str Amt;
        ;
    
    
        Mult = 1;
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = '370';
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
               Mult = -1;
            }
        }
        else
        {
            ItemType = '320';
            if(mSKS_PP_FileDetail.ChkCuryAmt == 0)
            {
                ItemType = '430';
            }
        }
    
    
        Amt =  SKS_PP_StringFormats::strMoney(Mult * mSKS_PP_FileDetail.ChkCuryAmt, 10);
    
        Chksum = Chksum + mSKS_PP_FileDetail.ChkCuryAmt;
        Chkcount++;
    
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));
        sb.Append(ItemType);
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(40, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(' ');
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtFormatTrailer</Name>
				<Source><![CDATA[
    // Remove method if not overriding
    protected str txtFormatTrailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        sb.Append('');
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    // File Header Record
    // 1-3  '*03'
    // 4-8  Bank ID
    // 9-23 Account Number
    // 24   File Status (Always 0)
    protected str txtGroupHeader()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_PP_Bank bSKS_PP_Bank;
        Container company;
        ;
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
    
        sb.Append('*03');
        sb.Append(SKS_PP_StringFormats::strFill(5, strltrim(strrtrim(bSKS_PP_Bank.PP01)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(15, strltrim(strrtrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));
        sb.Append('0');
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // Trailer Record
    // 1     '&'
    // 2-15  Spaces
    // 16-20 Record Count
    // 21-23 3 Spaces
    // 24-33 Total Amount
    // 34-80 Spaces
    protected str txtGroupTrailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str Amt;
        ;
    
        Amt =  SKS_PP_StringFormats::strMoney(Chksum, 10);
    
        sb.Append('&');// Trailer Record
        sb.Append(SKS_PP_StringFormats::strFill(14, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5, int2str(Chkcount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(47, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        ChkSum = 0.00;
        Chkcount = 0;
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>