<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_OutboundFormat_AUDDIS_HSBC</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_OutboundFormat_AUDDIS_HSBC extends SKS_DD_OutboundFormat
{
    System.Text.StringBuilder   sb;
    SKS_DDMandateDataDeliveryReference ddMandateDataDeliveryReference;
    int mandateSequenceNumber = 0;
    int mDDICount = 0;

    //------------------------------------------------------------------------------------------------------
    //Nbr   Content                                                 Position      Size
    // 1    Label identifier                                        (  01-  03)      3
    // 2    Label identifier                                        (  04-  04)      1
    // 3    Serial number                                           (  05-  10)      6
    // 4    Accessibility indicator                                 (  11-  11)      1
    // 5    Reserved field                                          (  12-  31)      20
    // 6    Reserved field                                          (  32-  37)      6
    // 7    Owner ID                                                (  38-  51)      14
    // 8    Reserved field                                          (  52-  79)      28
    // 9    Label standard level                                    (  79-  80)      1
    //------------------------------------------------------------------------------------------------------

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>rec_VOL1</Name>
				<Source><![CDATA[
    public boolean rec_VOL1()
    {
        // 1    Label identifier                                       01-  03
        sb.Append('VOL');

        // 2    Label identifier                                       04-  04
        sb.Append('1');
        
        // 3    Serial number                                          05-  21
        sb.Append(SKS_PP_StringFormats::strFill(6, SKS_PP_StringFormats::strRight(ddMandateDataDeliveryReference, 6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 4    Accessibility indicator                                11-  11
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Reserved field                                         12-  31
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Reserved field                                         32-  37
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7    Owner ID                                               38-  51
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EB_BankTable.CreditorNumber1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Reserved field                                         52-  79
        sb.Append(SKS_PP_StringFormats::strFill(28, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Label standard level                                   80-  80
        sb.Append('1');

        sb.Append(System.Environment::NewLine);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HDR1</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Content                                                 Position      Size
    // 1    Label identifier                                        (  01-  03)      3
    // 2    Label identifier                                        (  04-  04)      1
    // 3    File identifier                                         (  05-  21)      17
    // 4    Set identification                                      (  22-  27)      6
    // 5    File section number                                     (  28-  31)      4
    // 6    File sequence number                                    (  32-  35)      4
    // 7    Generation number                                       (  36-  39)      4
    // 8    Generation version number                               (  40-  41)      2
    // 9    Creation date                                           (  42-  47)      6
    // 10   Expiration date                                         (  48-  53)      6
    // 11   Accessibility indicator                                 (  54-  54)      1
    // 12   Block count                                             (  55-  60)      6
    // 13   System code                                             (  61-  73)      13
    // 14   Reserved field                                          (  74-  80)      7
    //------------------------------------------------------------------------------------------------------
    public boolean rec_HDR1()
    {
        // 1    Label identifier                                        01-  03
        sb.Append('HDR');

        // 2    Label identifier                                        04-  04
        sb.Append('1');

        // 3    File identifier                                         05-  21
        sb.Append('A');

        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EB_BankTable.CreditorNumber1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append('S');

        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append('1');

        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EB_BankTable.CreditorNumber1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 4    Set identification                                      22-  27
        sb.Append(SKS_PP_StringFormats::strFill(6, SKS_PP_StringFormats::strRight(ddMandateDataDeliveryReference, 6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    File section number                                     28-  31
        sb.Append('0001');

        // 6    File sequence number                                    32-  35
        sb.Append('0001');

        // 7    Generation number                                       36-  39
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Generation version number                               40-  41
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Creation date                                           42-  47
        sb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        // 10   Expiration date                                         48-  53
        sb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + 1),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        
        // 11   Accessibility indicator                                 54-  54
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 12   Block count                                             55-  60
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 13   System code                                             61-  73
        sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 14   Reserved field                                          74-  80
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(System.Environment::NewLine);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_HDR2</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Content                                                 Position      Size
    // 1    Label identifier                                        (  01-  03)      3
    // 2    Label identifier                                        (  04-  04)      1
    // 3    Record format                                           (  05-  05)      1
    // 4    Block length			                                (  06-  10)      5
    // 5    Record length                                           (  11-  15)      5
    // 6    Reserved for operating systems                          (  16-  50)      35
    // 7    Buffer offset                                           (  51-  52)      2
    // 8    Reserved field                                          (  53-  80)      28
    //------------------------------------------------------------------------------------------------------
    public boolean rec_HDR2()
    {
        // 1    Label identifier                                        01-  03
        sb.Append('HDR');

        // 2    Label identifier                                        04-  04
        sb.Append('2');

        // 3    Record format                                           05-  05
        sb.Append('F');

        // 4    Block length			                                06-  10
        sb.Append('02000');

        // 5    Record length                                           11-  15
        sb.Append('00100');

        // 6    Reserved for operating systems                          16-  50
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7    Buffer offset                                           51-  52
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Reserved field                                          53-  80
        sb.Append(SKS_PP_StringFormats::strFill(28, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(System.Environment::NewLine);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UHL1</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Content                                                 Position      Size
    // 1    Label identifier                                        (  01-  03)      3
    // 2    Label number                                            (  04-  04)      1
    // 3    Bacs processing day                                     (  05-  10)      6
    // 4    Identifying number of receiving party                   (  11-  20)      10
    // 5    Currency code                                           (  21-  22)      2
    // 6    Country code                                            (  23-  28)      6
    // 7    Work code                                               (  29-  37)      9
    // 8    File number                                             (  38-  40)      3
    // 9    Reserved field                                          (  41-..47)      7
    // 10   Audit print identifier                                  (  48-..54)      7
    // 11   For use by User/bureau                                  (  55-..80)      26
    //------------------------------------------------------------------------------------------------------
    public boolean rec_UHL1()
    {
        // 1    Label identifier                                        01-  03
        sb.Append('UHL');

        // 2    Label number                                            04-  04
        sb.Append('1');

        // 3    Bacs processing day                                     05-  10
        sb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(today()),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        // 4    Identifying number of receiving party                   11-  20
        sb.Append('999999');

        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Currency code                                           21-  22
        sb.Append('00');

        // 6    Country code                                            23-  28
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Work code                                               29-  37
        sb.Append('1 DAILY  ');

        // 8    File number                                             38-  40
        //sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append('001');       //Ash Devops#15157

        // 9    Reserved field                                          41-  47
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10   Audit print identifier                                  48-  54
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11   For use by User/bureau                                  55-  80
        sb.Append(SKS_PP_StringFormats::strFill(26, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(System.Environment::NewLine);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Content                                                 Position      Size
    // 1    Destination sort code number                            (  01-  06)      6
    // 2    Destination account number                              (  07-  14)      8
    // 3    Destination type of account                             (  15-  15)      1
    // 4    Transaction code                                        (  16-  17)      2
    // 5    Originating sort code                                   (  18-  23)      6
    // 6    Originating account number                              (  24-  31)      8
    // 7    Free format                                             (  32-  35)      4
    // 8    Amount                                                  (  36-  46)      11
    // 9    User's name                                             (  47-  64)      18
    // 10   Users reference                                         (  65-  82)      18
    // 11   Destination account name                                (  83- 100)      18
    // 12   Bacs processing day of data                             ( 101- 106)      6
    //------------------------------------------------------------------------------------------------------
   
    public boolean rec_Detail(CustMandateStatus _status)
    {
        mDDICount++;

        // 1    Destination sort code number                             01-  06
        sb.Append(SKS_PP_StringFormats::strFill(6, CustBankAccount::find(mCustDirectDebitMandate.CustAccount, mCustDirectDebitMandate.BankAccount).RegistrationNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 2    Destination account number                               07-  14
        sb.Append(SKS_PP_StringFormats::strFill(8, CustBankAccount::find(mCustDirectDebitMandate.CustAccount, mCustDirectDebitMandate.BankAccount).AccountNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Destination type of account                              15-  15
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Transaction code                                         16-  17
        if(_status == CustMandateStatus::New)
        {
            sb.Append('0N');
        }
        else if(_status == CustMandateStatus::Canceled ||
                _status == CustMandateStatus::Expired)
        {
            sb.Append('0C');
        }

        // 5    Originating sort code                                    18-  23
        sb.Append(SKS_PP_StringFormats::strFill(6, BankAccountTable::find(mSKS_PP_Bank.BankAccountId).RegistrationNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Originating account number                               24-  31
        sb.Append(SKS_PP_StringFormats::strFill(8, BankAccountTable::find(mSKS_PP_Bank.BankAccountId).AccountNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Free format                                              32-  35
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Amount                                                   36-  46
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 9    User's name                                              47-  64
        sb.Append(SKS_PP_StringFormats::strFill(18, mSKS_EB_BankTable.CreditorNumber2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10   Users reference                                          65-  82
        sb.Append(SKS_PP_StringFormats::strFill(18, mCustDirectDebitMandate.MandateReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11   Destination account name                                 83- 100
        CustTable locCustTable;

        locCustTable = CustTable::find(mCustDirectDebitMandate.CustAccount);

        sb.Append(SKS_PP_StringFormats::strFill(18, SKS_EFT_Common::getCustomerNameByParty(locCustTable.Party), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 12   Bacs processing day of data                             101- 106
        //sb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(today()),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left)); //Ash DevOps#15157

        sb.Append(System.Environment::NewLine);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_EOF1</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Content                                                 Position      Size
    // 1    Label identifier                                        (  01-  06)      6
    // 2    Label number                                            (  07-  14)      8
    // 3    Same as HDR1                                            (  15-  15)      1
    // 4    Block count                                             (  16-  17)      2
    // 5    Same as HDR1                                            (  18-  23)      6
    //------------------------------------------------------------------------------------------------------
    public boolean rec_EOF1()
    {
        // 1    Label identifier                                        01-  06
        sb.Append('EOF');

        // 2    Label number                                            07-  14
        sb.Append('1');

        // 3    Same as HDR1                                            15-  15

        // 3    File identifier                                         05-  21
        sb.Append('A');

        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EB_BankTable.CreditorNumber1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append('S');

        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append('1');

        sb.Append(SKS_PP_StringFormats::strFill(6, mSKS_EB_BankTable.CreditorNumber1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 4    Set identification                                      22-  27
        sb.Append(SKS_PP_StringFormats::strFill(6, SKS_PP_StringFormats::strRight(ddMandateDataDeliveryReference, 6), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    File section number                                     28-  31
        sb.Append('0001');

        // 6    File sequence number                                    32-  35
        sb.Append('0001');

        // 7    Generation number                                       36-  39
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Generation version number                               40-  41
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Creation date                                           42-  47
        sb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(today()),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));

        // 10   Expiration date                                         48-  53
        sb.Append(SKS_PP_StringFormats::strFill(6, subStr(date2julian(today() + 1),3,5), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
        
        // 11   Accessibility indicator                                 54-  54
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Block count                                             16-  17
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Same as HDR1                                            18-  23
        // 13   System code                                             61-  73
        sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 14   Reserved field                                          74-  80
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(System.Environment::NewLine);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_EOF2</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Content                                                 Position      Size
    // 1    Label identifier                                        (  01-  06)      6
    // 2    Label number                                            (  07-  14)      8
    // 3    Same as HDR2                                            (  05-  80)      76
    //------------------------------------------------------------------------------------------------------
    public boolean rec_EOF2()
    {
        // 1    Label identifier                                        01-  06
        sb.Append('EOF');

        // 2    Label number                                            07-  14
        sb.Append('2');

        // 3    Same as HDR2                                            05-  80

        // 3    Record format                                           05-  05
        sb.Append('F');

        // 4    Block length                                            06-  10
        sb.Append('02000');

        // 5    Record length                                           11-  15
        sb.Append('00100');

        // 6    Reserved for operating systems                          16-  50
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7    Buffer offset                                           51-  52
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Reserved field                                          53-  80
        sb.Append(SKS_PP_StringFormats::strFill(28, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(System.Environment::NewLine);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_UTL1</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Content                                                 Position      Size
    // 1    Label identifier                                        (  01-  03)      3
    // 2    Label number                                            (  04-  04)      1
    // 3    Monetary total od debit records                         (  05-  17)      13
    // 4    Monetary total od credit records                        (  18-  30)      13
    // 5    Count of debit records                                  (  31-  37)      7
    // 6    Count of debit records                                  (  38-  44)      7
    // 7    Reserved for future standardisation                     (  45-  52)      8
    // 8    DDI count                                               (  53-  59)      7
    // 9    For use by user or bureau                               (  60-  80)      21
    //------------------------------------------------------------------------------------------------------
    public boolean rec_UTL1()
    {
        // 1    Label identifier                                        01-  03
        sb.Append('UTL');

        // 2    Label number                                            04-  04
        sb.Append('1');

        // 3    Monetary total od debit records                         05-  17
        sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Monetary total od credit records                        18-  30
        sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    Count of debit records                                  31-  37
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        // 6    Count of debit records                                  38-  44
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        // 7    Reserved for future standardisation                     45-  52
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    DDI count                                               53-  59
        sb.Append(SKS_PP_StringFormats::strFill(7, num2Str(mandateSequenceNumber, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        // 9    For use by user or bureau                               55-  80
        sb.Append(SKS_PP_StringFormats::strFill(21, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    public str formatStructure(CustDirectDebitMandate  _custDirectDebitMandate)
    {

        sb = new System.Text.StringBuilder();

        boolean isCustDirectDebitMandateFound;
        CustMandateStatus status;

        mCustDirectDebitMandate = _custDirectDebitMandate;

        while(_custDirectDebitMandate)
        {
            //Devops 15878 - allow multiple Auddis mandates
            //if(this.CheckMandateSentStatus(mCustDirectDebitMandate.CustAccount) ||
            if(mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Sent || mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Rejected ||
               (_custDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Accepted && (mCustDirectDebitMandate.Status == CustMandateStatus::New || mCustDirectDebitMandate.Status == CustMandateStatus::Active))) // only one mandate record can be at sent status per customer
            {
                next _custDirectDebitMandate;
                continue;
            }

            //status = _custDirectDebitMandate.getStatus();
            status = this.getMandateStatus();

            //info("Mandate ID " + _custDirectDebitMandate.MandateReference + " Status 1 is :" + enum2Str(status));

            if(status != CustMandateStatus::Modified)
            {
                isCustDirectDebitMandateFound = true;
                break;
            }
            else
            {
                next _custDirectDebitMandate;
                continue;
            }
        }

        if(isCustDirectDebitMandateFound)
        {
            ttsbegin;
            ddMandateDataDeliveryReference = NumberSeq::newGetNum(SKS_PP_Setup::numRefDDMandateDataDeliveryNextReferenceNo()).num();
            ttscommit;

            mSKS_PP_Bank = SKS_PP_Bank::find(mCustDirectDebitMandate.CreditorBankAccount);
            mSKS_EB_BankTable = SKS_EB_BankTable::find(mSKS_PP_Bank.BankID);

            this.rec_VOL1();

            this.rec_HDR1();

            this.rec_HDR2();

            this.rec_UHL1();

            ttsbegin;

            while(mCustDirectDebitMandate)
            {
                //Devops 15878 - allow multiple Auddis mandates
                //if(this.CheckMandateSentStatus(mCustDirectDebitMandate.CustAccount) ||  
                if(mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Sent || mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Rejected ||
                    (mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Accepted && (mCustDirectDebitMandate.Status == CustMandateStatus::New || mCustDirectDebitMandate.Status == CustMandateStatus::Active))) // only one mandate record can be at sent status per customer
                {
                    next mCustDirectDebitMandate;
                    continue;
                }
            
                //status = mCustDirectDebitMandate.getStatus();
                status = this.getMandateStatus();

                if(status != CustMandateStatus::Modified)
                {
                    mandateSequenceNumber++;
                    //info("Mandate ID " + mCustDirectDebitMandate.MandateReference + " Status 2 is :" + enum2Str(status));

                    // Detail Record
                    this.rec_Detail(status);

                    mCustDirectDebitMandate.selectForUpdate(true);
                    if(mCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Ready && status == CustMandateStatus::New)
                    {
                        mCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Accepted;
                        mCustDirectDebitMandate.Status = CustMandateStatus::New;        //Ash DevOps#15157
                    }
                    else if((mCustDirectDebitMandate.Status == CustMandateStatus::Canceled ||
                             status == CustMandateStatus::Canceled) ||
                            (mCustDirectDebitMandate.Status == CustMandateStatus::Expired ||
                             status == CustMandateStatus::Expired))
                    {
                        mCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Sent;
                    }
                    mCustDirectDebitMandate.SKS_EB_RegisterStatusSent = NoYesCombo::Yes;
                    mCustDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
                    mCustDirectDebitMandate.SKS_EB_RegisterStatusDate = DateTimeUtil::getSystemDateTime();
                    mCustDirectDebitMandate.SKS_EB_DataDeliveryReference = ddMandateDataDeliveryReference;
                    mCustDirectDebitMandate.SKS_EB_MandateSequenceNumber = SKS_PP_StringFormats::strFill(6, num2Str(mandateSequenceNumber, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
                    mCustDirectDebitMandate.update();

                    next mCustDirectDebitMandate;
                }
                else
                {
                    next mCustDirectDebitMandate;
                }

            }

            ttscommit;

            this.rec_EOF1();

            this.rec_EOF2();

            this.rec_UTL1();
            
            return sb.ToString();
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CheckMandateSentStatus</Name>
				<Source><![CDATA[
    public boolean CheckMandateSentStatus(CustAccount _custAccount)
    {
        CustDirectDebitMandate locCustDirectDebitMandate;
        boolean fExists = false;

        select firstonly locCustDirectDebitMandate
            where locCustDirectDebitMandate.CustAccount == _custAccount
            && (locCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Sent ||
            locCustDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Rejected);

        if(locCustDirectDebitMandate)
        {
            fExists = true;
        }
 
        return  fExists;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>