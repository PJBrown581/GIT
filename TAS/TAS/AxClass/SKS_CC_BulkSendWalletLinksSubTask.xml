<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_BulkSendWalletLinksSubTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_BulkSendWalletLinksSubTask extends RunBaseBatch
{
    #OCCRetryCount
    container               recordList;
    str                     threadCaption;
    boolean                 isBatchMode;
    boolean                 displaySendWalletLinkResults;
    Counter                 sendWalletLinksCnt;
    int                     procStartTime;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        recordList,
        threadCaption,
        displaySendWalletLinkResults,
        isBatchMode
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newSubTask</Name>
				<Source><![CDATA[
    public static SKS_CC_BulkSendWalletLinksSubTask newSubTask(
        container _recordList,
        str _threadCaption,
        boolean _displaySendWalletLinkResults,
        boolean _isBatchMode = false)
    {
        SKS_CC_BulkSendWalletLinksSubTask bulkSendWalletLinksSubTask = SKS_CC_BulkSendWalletLinksSubTask::construct();

        bulkSendWalletLinksSubTask.parmRecordList(_recordList);
        bulkSendWalletLinksSubTask.parmThreadCaption(_threadCaption);
        bulkSendWalletLinksSubTask.parmDisplaySendWalletLinkResults(_displaySendWalletLinkResults);
        bulkSendWalletLinksSubTask.parmIsBatchMode(_isBatchMode);

        return bulkSendWalletLinksSubTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsBatchMode</Name>
				<Source><![CDATA[
    public boolean parmIsBatchMode(boolean _isBatchMode = isBatchMode)
    {
        isBatchMode = _isBatchMode;

        return isBatchMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplaySendWalletLinkResults</Name>
				<Source><![CDATA[
    public boolean parmDisplaySendWalletLinkResults(boolean _displaySendWalletLinkResults = displaySendWalletLinkResults)
    {
        displaySendWalletLinkResults = _displaySendWalletLinkResults;

        return displaySendWalletLinkResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordList</Name>
				<Source><![CDATA[
    public container parmRecordList(container _recordList = recordList)
    {
        recordList = _recordList;

        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmThreadCaption</Name>
				<Source><![CDATA[
    public str parmThreadCaption(str _threadCaption = threadCaption)
    {
        threadCaption = _threadCaption;

        return threadCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLogResults</Name>
				<Source><![CDATA[
    public void displayLogResults()
    {
        info(strFmt("@SKS:SKGCCCWalletLinkLinksSent", sendWalletLinksCnt));

        int procEndTime = WinAPIServer::getTickCount();
        int procExecutionTime = (procEndTime-procStartTime) div 1000;
        if (procExecutionTime)
        {
            str execTimeUnit = "@SKS:SKGCCSecondsProcUnit";
            if (procExecutionTime > 180)
            {
                // Greater than 180 seconds then convert to minutes
                procExecutionTime = any2Int(procExecutionTime / 60);
                execTimeUnit = "@SKS:SKGCCMinutesProcUnit";
            }
            info(strFmt("@SKS:SKGCCProcElapsedTimeWithProcUnit", procExecutionTime, execTimeUnit));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();
        SKS_CC_BulkSendWalletLinks::checkWalletLinkModuleIsEnabled(sKS_PP_Setup);

        procStartTime = WinAPIServer::getTickCount();

        for (int counterIdx = 1; counterIdx <= conLen(recordList); counterIdx++)
        {
            RecId custTableRecId = conPeek(recordList, counterIdx);
            if (!custTableRecId)
            {
                continue;
            }

            CustTable custTable = CustTable::findRecId(custTableRecId);
            if (!custTable)
            {
                error(strFmt("@SKS:SKGCCCouldNotFindCustToSendLink", custTableRecId));
                continue;
            }

            Email custEmail;
            SMS custSMS;

            if (sks_PP_Setup.CCPLContactDefaultPreference == SKS_CC_PLContactDefaultPreference::Email)
            {
                custEmail = SKS_CC_SendWalletLink::getPrimaryOrFirstElectronicAddressByType(custTable.Party,
                    LogisticsElectronicAddressMethodType::Email);
            }

            if (!custEmail && sks_PP_Setup.CCPLContactDefaultPreference == SKS_CC_PLContactDefaultPreference::Phone)
            {
                custSMS = SKS_CC_SendWalletLink::getPrimaryOrFirstElectronicAddressByType(custTable.Party,
                    LogisticsElectronicAddressMethodType::Phone);

                custSMS = strAlpha(custSMS);

                const str phoneLongDistanceDigitUS = '1';
                if (!strStartsWith(custSMS, phoneLongDistanceDigitUS))
                {
                    custSMS = phoneLongDistanceDigitUS + custSMS;
                }
            }

            if (!custEmail && !custSMS)
            {
                continue;
            }

            setPrefix(strFmt('%1: %2', "@SYS7149", custTable.AccountNum));
            
            try
            {
                SKS_CC_PayFabricWalletHandler pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
              
                pfWalletHandler.parmCustAccount(custTable.AccountNum);                
                pfWalletHandler.setPayFabricCustomerNbr();
                pfWalletHandler.sendAndRecordWalletLink(custEmail, custSMS, '', true);

                sendWalletLinksCnt++;

                if (displaySendWalletLinkResults)
                {
                    info(strFmt("@SKS:SKGCCWalletLinkSentToCustomer", custTable.AccountNum));
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                error(strFmt("@SKS:SKGCCErrorFoundWhileSendWalletLink", custTable.AccountNum));
            }
            catch (Exception::CLRError)
            {
                error(strFmt("@SKS:SKGCCErrorFoundWhileSendWalletLink", custTable.AccountNum));
            }
            catch (Exception::Error)
            {
                error(strFmt("@SKS:SKGCCErrorFoundWhileSendWalletLink", custTable.AccountNum));
            }
        }

        this.displayLogResults();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = runbase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_BulkSendWalletLinksSubTask construct()
    {
        return new SKS_CC_BulkSendWalletLinksSubTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS:SKGCCBulkSendWalletLinks";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;
    
        ret = super();

        if (threadCaption)
        {
            ret = threadCaption;
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>