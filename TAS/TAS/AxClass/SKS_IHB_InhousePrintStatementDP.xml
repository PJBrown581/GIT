<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_InhousePrintStatementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SRSReportParameterAttribute(classStr(SKS_IHB_InhousePrintStatementContract))]
class SKS_IHB_InhousePrintStatementDP extends SRSReportDataProviderBase 
{    
    SKS_IHB_InhouseBankAccountsStatementDetails inhousebankAccStatement;
    SKS_IHB_InhousePrintStatementContract       inhousePrintStmtContract;
    SKS_IHB_InhouseBankTransactionsTmp          inhouseBankTransTmp;

    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSKS_IHB_InhouseBankTransactionsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>SKS_IHB_InhouseBankTransactionsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>VendAccruedPurchasesTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SKS_IHB_InhouseBankTransactionsTmp))
    ]
    public SKS_IHB_InhouseBankTransactionsTmp getSKS_IHB_InhouseBankTransactionsTmp()
    {
        select inhouseBankTransTmp;
        return inhouseBankTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    public void processReport()
    {
        RecId                                       stmtRecId;
        CompanyBankAccountId                        accountId ;
        TransDate                                   statementDate;
        SKS_IHB_InhouseBankAccountsStatementDetails inhousebankAccountStatementPrev,
                                                    inhousebankAccountStatementCurr;
        BankAccountTrans                            bankAccountTrans;
        AmountMST                                   closingBal, withdr, deposit;
        LogisticsAddressing                         companyAddress;
        UserInfo                                    userInfo;//SKS_Bug_10268
        PreferredLocale                             preferredLocale;//SKS_Bug_10268

        companyAddress = LogisticsPostalAddress::findByLocation(CompanyInfo::find().postalAddress().Location).Address;
        inhousePrintStmtContract = this.parmDataContract() as SKS_IHB_InhousePrintStatementContract;
        stmtRecId = inhousePrintStmtContract.parmstatementTableRecId();
        accountId = inhousePrintStmtContract.parmstatementTableAccountId();
        statementDate = inhousePrintStmtContract.parmstatementTablestmtDate();
        
        inhousebankAccountStatementCurr = SKS_IHB_InhouseBankAccountsStatementDetails::findByRecId(stmtRecId);         
        //SKS_Bug_10268 -->
        select firstonly RecId, PreferredLocale from userInfo where userInfo.Id == curUserId();
        preferredLocale =  userInfo.PreferredLocale != '' ? userInfo.PreferredLocale : 'en-us';
        //SKS_Bug_10268 <--
        if(inhousebankAccountStatementCurr)
        {
            inhousebankAccountStatementPrev = SKS_IHB_InhouseBankAccountsStatementDetails::findByAccAndStatementDatePrev(inhousebankAccountStatementCurr.AccountId,
                                                                                                                    inhousebankAccountStatementCurr.StatementDate);
        }
        else
        {
            inhousebankAccountStatementPrev = SKS_IHB_InhouseBankAccountsStatementDetails::findByAccAndStatementDatePrev(accountId, statementDate);
        }
        
        if (inhousebankAccountStatementPrev)
        {
            inhouseBankTransTmp.AccountId           = accountId;
            inhouseBankTransTmp.StatementNumber     = this.getStmtNumber(statementDate);//SKS_Bug_10264
            inhouseBankTransTmp.StatementDate       = statementDate;
            inhouseBankTransTmp.OpeningBalance      = inhousebankAccountStatementPrev.EndingBalance;
            inhouseBankTransTmp.TransDescription    = "@SYS22797";
            inhouseBankTransTmp.Balance             = inhousebankAccountStatementPrev.EndingBalance;
            inhouseBankTransTmp.ComAddress          = companyAddress;
            inhouseBankTransTmp.insert();
            closingBal = inhouseBankTransTmp.Balance;
        }
        else
        {
            inhouseBankTransTmp.AccountId           = accountId;
            inhouseBankTransTmp.StatementNumber     = this.getStmtNumber(statementDate);//SKS_Bug_10264
            inhouseBankTransTmp.StatementDate       = statementDate;
            inhouseBankTransTmp.OpeningBalance      = 0;
            inhouseBankTransTmp.TransDescription    = "@SYS22797";
            inhouseBankTransTmp.Balance             = 0;
            inhouseBankTransTmp.ComAddress          = companyAddress;
            inhouseBankTransTmp.insert();
            
        }
        
        while select bankAccountTrans
            where bankAccountTrans.AccountId == accountId
                && bankAccountTrans.TransDate <= statementDate
                && bankAccountTrans.TransDate >inhousebankAccountStatementPrev.StatementDate
        {
            if (bankAccountTrans)
            {
                inhouseBankTransTmp.AccountId           = accountId;
                inhouseBankTransTmp.StatementNumber     = this.getStmtNumber(statementDate);
                inhouseBankTransTmp.StatementDate       = statementDate;
                inhouseBankTransTmp.OpeningBalance      = inhousebankAccountStatementPrev.EndingBalance;
                inhouseBankTransTmp.TransDescription    = bankAccountTrans.Txt;
                inhouseBankTransTmp.Balance             += bankAccountTrans.AmountCur; // SKS_Bug_10400
                inhouseBankTransTmp.Deposit             = 0;
                inhouseBankTransTmp.Withdrawals         = 0;
                if ( bankAccountTrans.AmountCur > 0) // SKS_Bug_10400
                {
                    inhouseBankTransTmp.Deposit = bankAccountTrans.AmountCur;// SKS_Bug_10400
                    deposit += inhouseBankTransTmp.Deposit;
                }
                else
                {
                    inhouseBankTransTmp.Withdrawals = bankAccountTrans.AmountCur;// SKS_Bug_10400
                    withdr += inhouseBankTransTmp.Withdrawals;
                }               
                inhouseBankTransTmp.TransDate           = bankAccountTrans.TransDate;
                inhouseBankTransTmp.ComAddress          = companyAddress;
                inhouseBankTransTmp.ValueDate           = bankAccountTrans.SKS_IHB_ValueDate; 
                inhouseBankTransTmp.insert();
            }
        }
        update_recordset inhouseBankTransTmp
            setting ClosingBalance = inhousebankAccountStatementPrev.EndingBalance + deposit - abs(withdr),
                    TotalWithdrawals = withdr,
                    TotalDeposit = deposit,
                    CurrencyCode = BankAccountTable::find(accountId).CurrencyCode,
                    PreferredLocale = preferredLocale //SKS_Bug_10268
        where inhouseBankTransTmp.AccountId == accountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStmtNumber</Name>
				<Source><![CDATA[
    //SKS_Bug_10264
    public BankAccountStatementNum getStmtNumber(TransDate _statementDate)
    {
        BankAccountStatementNum stmtNumber;

        stmtNumber = int2Str(year(_statementDate));
        if(strLen(int2Str(mthOfYr(_statementDate))) < 2)
        {
            stmtNumber += ('0'+ int2Str(mthOfYr(_statementDate)));
        }
        else
        {
            stmtNumber += int2Str(mthOfYr(_statementDate));
        }
        if(strLen(int2Str(dayOfMth(_statementDate))) < 2)
        {
            stmtNumber += ('0'+ int2Str(dayOfMth(_statementDate)));
        }
        else
        {
            stmtNumber += int2Str(dayOfMth(_statementDate));
        }
        return stmtNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>