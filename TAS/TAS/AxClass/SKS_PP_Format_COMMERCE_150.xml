<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_Commerce_150</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_COMMERCE_150 extends SKS_PP_Format_BankGroup
{
    str vendName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    protected str txtDetail()
    {
        //  Beginning number        Field Length    Field Desc
        //      01                     01               Spacer
        //      02                     10               Account Number
        //      12                     10               Check Number
        //      22                     11               Check Amount
        //      33                     06               Date issued
        //      39                     03               Ident code
        //      42                     01               Type code
        //      43                     108              Payee Name and address info    
        
        

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int mult = 1;
        str typeCode,address;
        container company;
        SKS_PP_Bank bSKS_PP_Bank;
        LogisticsPostalAddress  postalAddress;
        BankChequeTable     lBankChequeTable;
       
        //Convert negative void numbers to positives        
        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            typeCode = 'V';
            if(mSKS_PP_FileDetail.chkcuryamt < 0)
            {
                mult = -1;
            }
        }
        else
        {
            typeCode = 'I';
        }
                     
        // Spacer
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // Account Number
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Check Number
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //  Check Amount
        sb.Append(SKS_PP_StringFormats::strMoney(mult * mSKS_PP_FileDetail.Chkcuryamt, 11));

        //  Date Issued MMDDYY
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate, DateSeparator::None));

        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP01 from bSKS_PP_Bank where bSKS_PP_Bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;

        // Ident Code
        sb.Append(SKS_PP_StringFormats::strFill(3, bSKS_PP_Bank.PP01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //  Type code
        sb.Append(typeCode);

        select BankNegInstRecipientName, RemittanceAddress from lBankChequeTable where lBankChequeTable.SKS_PP_FILENBR == mSKS_PP_FileDetail.FileNbr &&
            lBankChequeTable.ChequeNum == mSKS_PP_FileDetail.ChkRefNbr &&
            lBankChequeTable.AccountID == mSKS_PP_FileDetail.ChkBankAcct;

        if(lBankChequeTable)
        {
            vendName = lBankChequeTable.BankNegInstRecipientName;

            postalAddress  = LogisticsPostalAddress::findRecId(lBankChequeTable.RemittanceAddress);
        }

        if(postalAddress)
        {
            if(postalAddress.Street)
            {
                address = ' ' + strReplace(postalAddress.Street, '\n', ' ');
            }
            if(postalAddress.City)
            {
                address += ' ' + postalAddress.City;
            }
            if(postalAddress.State)
            {
                address += ' ' + postalAddress.State;
            }
            if(postalAddress.ZipCode)
            {
                address += ' ' + postalAddress.ZipCode;
            }
            if(postalAddress.CountryRegionId)
            {
                address += ' ' + this.getLogisticsAddressCountryISO(postalAddress.CountryRegionId);
            }
        }

        //  Payee Name and address info
        sb.Append(SKS_PP_StringFormats::strFill(108, (vendName + address ), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsAddressCountryISO</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionISOCode getLogisticsAddressCountryISO(LogisticsAddressCountryRegionId _countryRegion)
    {
        //------------------------------------------------------------------------------------------------------
        // Load or refresh global mLogisticsAddressCountryRegion
        // Return a 2 digit ISO country code
        //------------------------------------------------------------------------------------------------------
        str value;
        LogisticsAddressCountryRegion logisticsAddressCountry;

        if(_countryRegion != '' && strLen(_countryRegion) > 2)
        {
            if(logisticsAddressCountry.CountryRegionId != _countryRegion)
            {
                logisticsAddressCountry = LogisticsAddressCountryRegion::find(_countryRegion);
            }
            value = logisticsAddressCountry.ISOcode;
        }
        else
        {
            value = _countryRegion;
        }
        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>