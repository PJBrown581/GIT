<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BMOHARRIS_WIRE_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BMOHARRIS_WIRE_CSV
/// </summary>
class SKS_EFT_Format_US_BMOHARRIS_WIRE_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220609')
    #define.DOM_WIRE('DOM-WIRE')
    #define.INTL_WIRE('INTL-WIRE')

    #define.Separator(',')    
    str emailDetails;             
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int length = 0,  boolean _addSeparator = true)
    {
        str text;

        if(_addSeparator)
        {
            if(length != 0)
            {
                text = subStr(_field, 1, length) + #Separator;
            }
            else
            {
                text = _field + #Separator;
            }
        }
        else
        {
            text = _field;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            // Payment Details
            this.rec_PaymentDetails();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PaymentDetails
    /// </summary>
    /// <returns>true</returns>
    boolean rec_PaymentDetails()
    {
        //1     Template Name
        //2     Funding Account
        //3     Amount
        //4     Value Date
        //5     Payment Currency
        //6     Beneficiary Account number
        //7     Additional routing charges will be paid by
        //8     Primary contact name of ordering customer
        //9     Primary contact phone number of  ordering customer
        //10    Beneficiary Name
        //11    Beneficiary Address Line 1
        //12    Beneficiary Address Line 2
        //13    Beneficiary City
        //14    Beneficiary Province/State
        //15    Beneficiary Postal Code / Zip code
        //16    Beneficiary Country Code
        //17    Beneficiary Bank ID Type
        //18    Beneficiary Bank ID
        //19    Beneficiary Bank Name
        //20    Beneficiary Bank Address Line 1
        //21    Beneficiary Bank Address Line 2
        //22    Beneficiary City
        //23    Beneficiary Province/State
        //24    Beneficiary Postal Code / Zip code
        //25    Beneficiary Bank Country Code
        //26    Purpose of wire Line 1
        //27    Purpose of wire Line 2
        //28    Purpose of wire Line 3
        //29    Purpose of wire Line 4
        //30    Ordering Customer Name
        //31    Ordering Customer Account Number
        //32    Ordering Customer Address Line 1
        //33    Ordering Customer Address Line 2
        //34    Ordering Customer City
        //35    Ordering Customer Province/State
        //36    Ordering Customer Postal code /Zip code
        //37    Ordering Customer Country Code
        //38    Intermediary Institution ID Type
        //39    Intermediary Institution ID
        //40    Intermediary Institution Name
        //41    Intermediary Institution Address Line 1
        //42    Intermediary Institution Address Line 2
        //43    Intermediary Institution City
        //44    Intermediary Institution Province/State
        //45    Intermediary Institution Postal Code / Zip code
        //46    Intermediary Institution Country Code
        //47    Sender to Receiver Information – Line 1
        //48    Sender to Receiver Information – Line 2
        //49    Sender to Receiver Information – Line 3
        //50    Sender to Receiver Information – Line 4
        //51    Sender to Receiver Information – Line 5
        //52    Sender to Receiver Information – Line 6
        //----------------------------------------------------------------------
        str w01, w02, charges;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1     Template Name
        w01 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TemplateName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(this.wrapField(w01, 50));

        //2     Funding Account
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 16));

        //3     Amount
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0), 15));
        
        //4     Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Slash)));

        //5     Payment Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //6     Beneficiary Account number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_WIRE)
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 34));
        }
        else
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 23));
        }

        //7     Additional routing charges will be paid by
        charges = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
        sb.Append(this.wrapField(charges, 3));
                
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTL_WIRE)
        {
            //8     Primary contact name of ordering customer
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 40));

            //9     Primary contact phone number of  ordering customer
            w02 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ContactPhoneNumber', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
            sb.Append(this.wrapField(w02, 12));
        }
        else
        {
            sb.Append(this.wrapField());
            sb.Append(this.wrapField());
        }       

        //10    Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35));

        //11    Beneficiary Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));

        //12    Beneficiary Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 35));

        //13    Beneficiary City
        //14    Beneficiary Province/State
        //15    Beneficiary Postal Code / Zip code
        sb.Append(this.wrapField(this.CharacterReplacement(strLRTrim(mSKS_EFT_FileDetail_VendAddress.BeneCity + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneState + ' ' + mSKS_EFT_FileDetail_VendAddress.BeneZipPostal)), 30));

        //16    Beneficiary Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 2));

        //17    Beneficiary Bank ID Type
        //18    Beneficiary Bank ID
        //19    Beneficiary Bank Name
        //20    Beneficiary Bank Address Line 1
        //21    Beneficiary Bank Address Line 2
        //22    Beneficiary City
        //23    Beneficiary Province/State
        //24    Beneficiary Postal Code / Zip code
        //25    Beneficiary Bank Country Code
        if(mSKS_EFT_FileDetail.DepSwiftNo)
        {
            sb.Append(this.wrapField('SWIFT'));
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo, 11));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
        }
        else if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            sb.Append(this.wrapField('FED'));
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 11));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
        }
        else
        {
            sb.Append(this.wrapField('OTHER'));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35));
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), 35));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(''));
            sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), 2));
        }
        
        //26    Purpose of wire Line 1
        sb.Append(this.wrapField(''));

        //27    Purpose of wire Line 2
        sb.Append(this.wrapField(''));

        //28    Purpose of wire Line 3
        sb.Append(this.wrapField(''));

        //29    Purpose of wire Line 4
        sb.Append(this.wrapField(''));

        //30    Ordering Customer Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 35));

        //31    Ordering Customer Account Number
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.BankBankAcct), 34));

        //32    Ordering Customer Address Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 35));

        //33    Ordering Customer Address Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 35));

        //34    Ordering Customer City
        //35    Ordering Customer Province/State
        //36    Ordering Customer Postal code /Zip code
        sb.Append(this.wrapField(this.CharacterReplacement(strLRTrim(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyState + ' ' + mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode)), 30));
                
        //37    Ordering Customer Country Code
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 2));

        //38    Intermediary Institution ID Type
        sb.Append(this.wrapField(''));

        //39    Intermediary Institution ID
        sb.Append(this.wrapField(''));

        //40    Intermediary Institution Name
        sb.Append(this.wrapField(''));

        //41    Intermediary Institution Address Line 1
        sb.Append(this.wrapField(''));

        //42    Intermediary Institution Address Line 2
        sb.Append(this.wrapField(''));

        //43    Intermediary Institution City
        sb.Append(this.wrapField(''));

        //44    Intermediary Institution Province/State
        //45    Intermediary Institution Postal Code / Zip code
        sb.Append(this.wrapField(''));

        //46    Intermediary Institution Country Code
        sb.Append(this.wrapField(''));

        //47    Sender to Receiver Information – Line 1
        sb.Append(this.wrapField(''));

        //48    Sender to Receiver Information – Line 2
        sb.Append(this.wrapField(''));

        //49    Sender to Receiver Information – Line 3
        sb.Append(this.wrapField(''));

        //50    Sender to Receiver Information – Line 4
        sb.Append(this.wrapField(''));

        //51    Sender to Receiver Information – Line 5
        sb.Append(this.wrapField(''));

        //52    Sender to Receiver Information – Line 6
        sb.Append(this.wrapField('', 0, false));


        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>