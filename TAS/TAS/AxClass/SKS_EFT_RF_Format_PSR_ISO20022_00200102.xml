<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_PSR_ISO20022_00200102</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_PSR_ISO20022_00200102 extends SKS_EFT_RF_Format
{
    boolean gInTransaction;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        System.Xml.XmlDocument locXmlDocument;
        System.Xml.XmlNode locXMLNode;
        str locTempStr;

        locXmlDocument = new System.Xml.XmlDocument();
        locSKS_EB_FileHub.runFileLoad(_filename);
        locXmlDocument.LoadXML(locSKS_EB_FileHub.fileBody());
    
        if(locXmlDocument.get_HasChildNodes())
        {
            locXMLNode = locXmlDocument.get_FirstChild(); //<?XML ... node.
            locXMLNode = locXMLNode.get_NextSibling();//<Document xmlns...
    
            locTempStr = locXMLNode.get_Name();
            locTempStr = strUpr(locTempStr);
            if(locTempStr == 'DOCUMENT')
            {
                this.processNode(locXMLNode);
            }
            //cleanup an pending nodes
            if(mSKS_EFT_RF_Transaction != null)
                mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            if(mSKS_EFT_RF_SentFile != null)
                mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
        }
    
        return mSKS_EFT_RF_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        str rtnval = '';
        int classId;
        //BEGIN VALIDATION VARIABLES
        //BEGIN QUALIFIERS
        boolean locXMlTagFound = false;
        boolean locMsgIDFound = false;
        boolean locCreDtTmFound = false;
        boolean locGrpHdrFound = false;
        boolean locOrgnlMsgIdFound = false;
        boolean locOrgnlCreDtTmFound = false;
        boolean locPaymentStatusReportFlagFound = false;
        //BEGIN DISQUALIFIER VARIABLES
        //none
        //END VALIDATION VARIABLES
        System.String locString;
        //Setup filestream
        locSKS_EB_FileHub.setFileName(_filename);
        locSKS_EB_FileHub.runFileInquire();
        if(!locSKS_EB_FileHub.attrFileExists())
        {
            // The file %1 does not exist.
            error(strfmt("@SYS62207", _filename));
            return null;
        }
        locSKS_EB_FileHub.runFileLoad(_filename);
        locSKS_EB_FileHub.StreamInit();
        System.IO.StreamReader locStreamReader = new System.IO.StreamReader(locSKS_EB_FileHub.streamGet());
    
        //priming read
        locString = locStreamReader.ReadLine();
        while(locString != null)
        {
            locString = locString.ToUpper();
            locString = locString.Trim();
            if(!System.String::IsNullOrWhiteSpace(locString))
            {
                if(!locXMLTagFound)
                {
                    if(locString.StartsWith(strUpr('<?xml')))
                        locXmlTagFound = true;
                    else
                    {
                        //NOT AN XML DOCUMENT
                        break;
                    }
    
                }
    
                if(locString.Contains(strUpr('<pain.002.001.02>')))
                {
                    locPaymentStatusReportFlagFound = true;
                }
                if(locString.Contains(strUpr('<GrpHdr>')))
                {
                   locGrpHdrFound = true;
                }
                if(locString.Contains(strUpr('<MsgId>')))
                {
                   locMsgIDFound = true;
                }
                if(locString.Contains(strUpr('<CreDtTm>')))
                {
                   locCreDtTmFound = true;
                }
                if(locString.Contains(strUpr('<OrgnlMsgId>')))
                {
                   locOrgnlMsgIdFound = true;
                }
                if(locString.Contains(strUpr('<OrgnlCreDtTm>')))
                {
                   locOrgnlCreDtTmFound = true;
                }
    
            }
            locString = locStreamReader.ReadLine();
            if(!System.String::IsNullOrEmpty(locString))
                locString = locString.ToUpper();
        }
        if(locPaymentStatusReportFlagFound
            && locGrpHdrFound
            && locMsgIDFound
            && locCreDtTmFound
            && locOrgnlMsgIdFound
            && locOrgnlCreDtTmFound)
        {
            //ALl Qualifers show this a PSR-ISO20022-00200102 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        locStreamReader.Close();
        locSKS_EB_FileHub.StreamClose();
        return rtnval;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
    
        gInTransaction = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    private void processNode(System.Xml.XmlNode _XmlNode)
    {
        System.Xml.XmlNode locXMLNode;
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
        str locNodeName;
        str locTempStr;
    
    
        locTempStr = _XMLNode.get_Name();
        locTempStr = strUpr(locTempStr);
        switch(locTempStr)
        {
            case 'DOCUMENT':
                if(mSKS_EFT_RF_File == null)
                {
                    mSKS_EFT_RF_File = new SKS_EFT_RF_File();
                }
                break;
            case 'PAIN.002.001.02':
                break;
            case 'GRPHDR':
                //No action
                break;
            case 'MSGID':
                //No Action
                break;
            case 'ORGNLGRPINFANDSTS':
                break;
            case 'ORGNLMSGID':
                if(mSKS_EFT_RF_SentFile != null)
                {
                    if(mSKS_EFT_RF_Transaction != null)
                    {
                        mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
                        mSKS_EFT_RF_Transaction = null;
                    }
                    mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
                }
                mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
                gInTransaction = false;
                mSKS_EFT_RF_SentFile.setID(_XmlNode.get_InnerText());
                break;
            case 'GRPSTS':
                mSKS_EFT_RF_SentFile.setStatus(_XmlNode.get_InnerText());
                break;
            case 'TXINFANDSTS':
                if(mSKS_EFT_RF_Transaction != null)
                    mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
                mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
                gInTransaction = true;
                break;
            case 'ORGNLENDTOENDID':
                mSKS_EFT_RF_Transaction.setID(_XmlNode.get_InnerText());
                break;
            case 'TXSTS':
                mSKS_EFT_RF_Transaction.setStatus(_XmlNode.get_InnerText());
                break;
            case 'CD':
                if(gInTransaction)
                    mSKS_EFT_RF_Transaction.setStatusReason(_XmlNode.get_InnerText());
                else
                    mSKS_EFT_RF_SentFile.setStatus(_XmlNode.get_InnerText());
                break;
            case 'ADDTLSTSRSNINF':
                mSKS_EFT_RF_Transaction.setAdditionalData(_XmlNode.get_InnerText());
                break;
        }
    
        if(_XmlNode.get_HasChildNodes())
        {
            //priming read
            locXMLNodeList = _XmlNode.get_ChildNodes();
            locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
            locXMLNodeListEnum.Reset();
            while(locXMLNodeListEnum.MoveNext())
            {
                locXMLNode = locXMLNodeListEnum.get_Current();
                locNodeName = locXMLNode.get_Name();
                if(strUpr(locNodeName) != '#TEXT')
                    this.processNode(locXMLNode);
            }
    
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilekey</Name>
				<Source><![CDATA[
    protected void setFilekey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSRKey</Name>
				<Source><![CDATA[
    private static str getPSRKey(System.Xml.XmlNode _XmlNode)
    {
        str rtnval;
        str locNodeName;
        str locTempValue;
        System.Xml.XmlNode locXmlNode;
        System.Xml.XmlNodeList locXMLNodeList;
        System.Collections.IEnumerator locXMLNodeListEnum;
    
        if(strUpr(_XmlNode.get_Name()) == 'MSGID')
            rtnval = _XmlNode.get_InnerText();
        else
        {
            if(_XmlNode.get_HasChildNodes())
            {
                //priming read
                locXMLNodeList = _XmlNode.get_ChildNodes();
                locXMLNodeListEnum = locXMLNodeList.GetEnumerator();
                locXMLNodeListEnum.Reset();
                while(locXMLNodeListEnum.MoveNext())
                {
                    locXMLNode = locXMLNodeListEnum.get_Current();
                    locNodeName = locXMLNode.get_Name();
                    if(strUpr(locNodeName) != '#TEXT')
                    {
                        locTempValue = SKS_EFT_RF_Format_PSR_ISO20022_00200102::getPSRKey(locXMLNode);
                        if(locTempValue != '')
                            rtnval = locTempValue;
                    }
                }
            }
        }
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File locSKS_EFTAP_File = null)
    {
        return locSKS_EFTAP_File.FileNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        str rtnval;
    
        rtnval = _SKS_EFT_FileDetail.PaymentReference;
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>