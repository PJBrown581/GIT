<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_BMO_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_BMO_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_BMO_EDI820 extends SKS_EFT_Format
{
    #define.FormatVersion('20220929')
    #define.LineEnd('~')
    #define.Separator('*')
    #define.ACHCTX('ACH-CTX')
    #define.ACHCCD('ACH-CCD')
    #define.ACHPPD('ACH-PPD')
    #define.FWT('FWT')
    #define.SWT('SWT')
    #define.CHKPBC('CHK-PBC')

    #define.CHK('CHK')
    #define.EFT_EDI('EFT-EDI')
    #define.WIRE('WIRE')


    int mTranSetCount;
    int mSegmentCount;
    str mIntControlNbr;
    str mGroupControlNbr;
    str mSenderControlNbr;
    AmountMST mPaymentAmount;
    SKS_EFT_EDI mSKS_EFT_EDI;
    SKS_EB_Vendor mSKS_EB_Vendor;
    LogisticsAddressCountryRegion mLogisticsAddressCountryRegion;
    str mBPR_03;
    str name;
    SKS_EFT_FileDetail prevSKS_EFT_FileDetail;


    str     m820Section;
    AmountMST    mAMTTotal;
    str     mISASection;
    str     mGSSection;
    int     mCtrlQuantity;
    str     mGECntrlnum;
    str     mIEACntrlnum;




}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
        {
            mFileHub.runAppendLine(strUpr(_result));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]

    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
    
        while(mSKS_EFT_FileDetail)
        {
            mCtrlQuantity++;

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
            
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EB_Vendor
            this.getSKS_EB_Vendor();
    
            // Get VendBankAccount
            this.getVendBankAccount();
    
            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, this.getLayoutName(mSKS_EFT_FileDetail, mSKS_EFT_File), mSKS_EFT_File.RecId, mSKS_EFT_FileDetail);

            if(firstRec)
            {
                firstRec = false;
    
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Detail lines
            this.rec_ST();
            this.rec_BPR();
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                Case #SWT:
                    this.rec_NTEZZZ();
                    break;
            }    
            this.rec_TRN();            

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #SWT:
                case #CHK:
                case #EFT_EDI:
                case #WIRE:
                    this.rec_CUR();
                    break;
            }
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCCD:
                Case #ACHCTX:
                Case #ACHPPD:
                case #SWT:
                case #FWT:
                case #CHK:
                case #EFT_EDI:
                case #WIRE:
                    this.rec_REFTN();
                    this.rec_DTM097();
                    break;
                Case #CHKPBC:
                    this.rec_REFCK();
                    this.rec_DTM097();
                    break;
            }
            this.rec_N1PR();

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #EFT_EDI:
                case #WIRE:
                    this.rec_N2N3PR('N2');
                    break;
                case #CHK:
                    this.rec_N2N3PR('N3');
                    break;
            }

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #EFT_EDI:
                case #WIRE:
                case #CHK:
                    this.rec_N4PR();
                    break;
            }

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                Case #SWT:
                    this.rec_N1RB();
                    break;
            }
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #FWT:
                    this.rec_N3RB();
                    break;
            }

            
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #SWT:
                case #FWT:
                    this.rec_N1C1();
                    this.rec_N3PE();
                    break;
                case #ACHCCD:
                case #ACHPPD:
                case #ACHCTX:
                case #CHKPBC:
                case #EFT_EDI:
                case #WIRE:
                case #CHK:
                    this.rec_N1PE(); //N2*PE is called from within this method
                    this.rec_N3PE();
                    this.rec_N4PE();
            }

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #WIRE:
                    this.rec_N1RB();
                    this.rec_N3RB();
                    this.rec_N4RB();
                    this.rec_N1C1();
                    this.rec_N1C2();
                    this.rec_N1C3();
                    break;
                case #CHK ://SKS_VSTS_14304
                case #EFT_EDI :
                    this.rec_ENT();
                    break;
            }

    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #ACHCTX:
                Case #ACHCCD:
                Case #ACHPPD:
                Case #CHKPBC:
                    this.rec_ENT();
                    break;
            }
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    Case #ACHCCD:
                    Case #ACHPPD:
                    Case #ACHCTX:
                    case #CHKPBC:
                    case #EFT_EDI:
                    case #WIRE:
                    case #CHK:
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
                        this.rec_DTM(invSKS_EFT_FileDetail);
                        break;
                }
            }
            this.rec_SE();
    
            mSegmentCount = 0;

            if(mSKS_EFT_FileDetail.PaymentCompany == curExt())
                prevSKS_EFT_FileDetail.data(mSKS_EFT_FileDetail);
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE();
        this.rec_IEA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    boolean rec_N1PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('PE');
        sb.Append(#Separator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            Name = mRemittanceName;
        }
        else
        {
            Name = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }
    
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHPPD:
            Case #ACHCTX:
            Case #FWT:
            Case #SWT:
                sb.Append(substr(Name,1,30));
                break;
            Default:
                sb.Append(substr(Name,1,60));
                break;
        }

        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK  ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT_EDI)
        {
            //03    Identification Code Qualifier
            sb.Append(#Separator);//SKS_VSTS_14227
            sb.Append('1');
        
            //04    Identification Code
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CHK:
                Case #EFT_EDI:
                    sb.Append(#Separator);
                    sb.Append(substr(mSKS_EFT_FileDetail.AccountNum,1,17));
                    break;
            }
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1RB</Name>
				<Source><![CDATA[
    boolean rec_N1RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Receiving Bank Name
        //--------------------------------------------------------------------------------------------------
        int len;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
            
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('RB');
        sb.Append(#Separator);
    
        //02     Name
        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT  ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK  ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT_EDI)
        {
            len = 35;
        }
        else
        {
            len = 60;
        }
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName),1,len));
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
            case #EFT_EDI:
            case #WIRE:
            case #SWT:      //SKS#DevOps:18024
                if(mSKS_EFT_FileDetail.DepSwiftNo)
                {
                    sb.Append(#Separator);
                    sb.Append('ZZ');
                    sb.Append(#Separator);
                    sb.Append(subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 17));
                }
                
                break;
        }

        sb.Append(#LineEnd);
        if(mSKS_EFT_FileDetail_BenBank.BenBankName != '' || mSKS_EFT_FileDetail.DepSwiftNo)
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
            m820Section += sb.ToString();
            m820Section += '\r\n';
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    boolean rec_N1PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
        //04    Identification Code                                 80      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int length;
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('PR');
        sb.Append(#Separator);
    
        //02     Name
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #CHKPBC:
                length = 30;
                break;
            Case #SWT:
                length = 60;
                break;
            Case #FWT:
                length = 50;
                break;
            case #CHK:
            case #EFT_EDI:
            case #WIRE:
                length = 35;
                break;
        }
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName),1,length));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1C1</Name>
				<Source><![CDATA[
    boolean rec_N1C1()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('C1');
        sb.Append(#Separator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            Name = mRemittanceName;
        }
        else
        {
            Name = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }
        sb.Append(subStr(Name, 1, 35));
        sb.Append(#Separator);
        
        //03    Identification Code Qualifier
        sb.Append('ZZ');
        sb.Append(#Separator);

        //04    Identification Code
        sb.Append(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 27));
                
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        //---------------------------------------
        // Load or refresh global mSKS_EB_Vendor
        //---------------------------------------
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankAccount</Name>
				<Source><![CDATA[
    void getVendBankAccount()
    {
        // Load or refresh global mVendBankAccount
    
        if(msks_EFT_FileDetail_BankAddress.AccountID != mSKS_EFT_FileDetail.DepBankAccountId || msks_EFT_FileDetail_BankAddress.VendCustAccount != mSKS_EFT_FileDetail.AccountNum) //FDD-10590
        {
            mSKS_EFT_FileDetail_BenBank = SKS_EFT_FileDetail_BenBank::find(mSKS_EFT_FileDetail.RecId);

            select msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CUR</Name>
				<Source><![CDATA[
    boolean rec_CUR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Currency Code                                       3       ID      Payment currency
        //03    Exchange Rate                                       10      R
        //04    Entity ID Code                                      3       ID
        //05    Currency Code                                       3       ID      Payment currency
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('CUR');
        sb.Append(#Separator);
    
        //01     Entity ID Code
        sb.Append('PR');
        sb.Append(#Separator);
    
        //02    Currency Code
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
        
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    boolean rec_BPR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //17    Business Function Code                              3       AN
        //18    Intermediary DFI ID Number Qualifier                2       ID
        //19    Intermediary DFI ID Number                          12      AN
        //20    Intermediary Account # Qualifier                    3       ID
        //21    Intermediary Bank Account number                    35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        ;
        mSegmentCount++;
    
        sb.Append('BPR');
        sb.Append(#Separator);
    
        //01    Trans. Handling Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHPPD:
            Case #ACHCTX:
            case #FWT:
            case #SWT:
            case #CHKPBC:
            case #CHK:
            case #EFT_EDI:
            case #WIRE:
                sb.Append('D');
                break;
        }
        sb.Append(#Separator);
    
        //02    Monetary Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        mAMTTotal += amt;
        sb.Append(num2str((amt),0,2,0,0));
        sb.Append(#Separator);
    
        //03    Credit/Debit Flag Code
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
        }
        else
        {
            mBPR_03 = 'C';
        }
        sb.Append(mBPR_03);
        sb.Append(#Separator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCTX:
            Case #ACHPPD:
                sb.Append('ACH');
                break;
            Case #CHKPBC:
                sb.Append('CHK');
                break;
            Case #FWT:
                sb.Append('FWT');
                break;
            Case #SWT:
            case #WIRE:
                sb.Append('SWT');
                break;

            Case #CHK:
                sb.Append('PBD');
                break;
            Case #EFT_EDI:
                if(mBPR_03 == 'D')
                {
                    sb.Append('DXD');
                }
                else
                {
                    sb.Append('DXC');
                }
                break;
        }
        sb.Append(#Separator);
    
        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
                sb.Append('CCD');
                break;
            Case #ACHCTX:
                sb.Append('CTX');
                break;
            Case #ACHPPD:
                sb.Append('PPD');
                break;
            Case #CHKPBC:
                sb.Append('PBC');
                break;
        }
        sb.Append(#Separator);
    
        //06    DFI ID No. Qualifier
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
            case #EFT_EDI:
            case #WIRE:
                sb.Append('04');
                break;
            default:
                sb.Append('01');
        }
        sb.Append(#Separator);
    
        //07    DFI ID Number
        if(mSKS_EFT_FileDetail.BankOrigDFI != '') //SKS#VSTS:14357
        {
            sb.Append(mSKS_EFT_FileDetail.BankOrigDFI);
        }
        else
        {
            sb.Append(mSKS_EFT_FileDetail.BankBankTransit);
        }
        sb.Append(#Separator);
    
        //08    Acct. No. Qual. Code
        sb.Append('DA');
        sb.Append(#Separator);
    
        //09    Account Number
        sb.Append(mSKS_EFT_FileDetail.BankBankAcct);
        sb.Append(#Separator);
    
        //10    Orig. Co. ID
        sb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
        sb.Append(#Separator);
    
        //11    Orig. Co. Code
        sb.Append(#Separator);
    
        //12    RDFI ID No. Qualifier
        //13    RDFI ID Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHKPBC:
            case #CHK:
                sb.Append(#Separator);
                break;
            case #SWT:
                sb.Append('02');
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.DepSwiftNo);
                break;
            Case #EFT_EDI:
            Case #WIRE:
                sb.Append('04');
                sb.Append(#Separator);
                sb.Append(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 12));
                break;
            Default:
                sb.Append('01');
                sb.Append(#Separator);
                sb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                break;
        }
        sb.Append(#Separator);
    
        //14    Acct. No. Qual Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #FWT:
            Case #SWT:
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    sb.Append('SG');
                }
                else
                {
                    sb.Append('DA');
                }
                break;
        }
        sb.Append(#Separator);
    
        //15    Account Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCTX:
            Case #ACHPPD:
            Case #FWT:
            Case #SWT:
            case #EFT_EDI:
            case #WIRE:
                sb.Append(mSKS_EFT_FileDetail.DepBankAcct);
                break;
        }
        sb.Append(#Separator);
        
        //16    Effective Entry Date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM097</Name>
				<Source><![CDATA[
    boolean rec_DTM097()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('DTM');
        sb.Append(#Separator);
    
        //01     Date/Time Qualifier
        sb.Append('097');
        sb.Append(#Separator);
    
        //03    Description
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
    
        sb.Append(#LineEnd);
    
        mSegmentCount++;
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        sb.Append('DTM');
        sb.Append(#Separator);
    
        //01     Date/Time Qualifier
        sb.Append('003');
        sb.Append(#Separator);
    
        //03    Description
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
    
        sb.Append(#LineEnd);
    
        // Only write segment if an Invoice exists.  If no invoice, the Invoice date will be null.
        if(invSKS_EFT_FileDetail.InvoiceDate != dateNull())
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
            m820Section += sb.ToString();
            m820Section += '\r\n';
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    boolean rec_ENT()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Assigned Number                                     6       N0
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('ENT');
        sb.Append(#Separator);
    
        //01    Assigned Number
        sb.Append('1');
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    boolean rec_GE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        int len;
        mSKS_EFT_EDI.setTranSetCount(mTranSetCount);
        value = mSKS_EFT_EDI.buildGE(prevSKS_EFT_FileDetail); //FDD-10590
    
        len = strLen(value);

        mGECntrlnum = subStr(value, len, -10);

        this.fileWrite(value);
        m820Section += value;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    boolean rec_GS()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //-------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS(mSKS_EFT_FileDetail); //FDD-10590
    
        mGSSection = value;

        this.fileWrite(value);
        m820Section += value;
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    boolean rec_IEA()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        int len;
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA(prevSKS_EFT_FileDetail); 
    
        len = strLen(value);

        mIEACntrlnum = subStr(value, len, -10);

        this.fileWrite(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA(mSKS_EFT_FileDetail); //FDD-10590
        mISASection = value;
        this.fileWrite(value);
        m820Section += value;
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    boolean rec_N3PE()
    {
        //---------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
        //---------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int length;
    
        if(Name)
        {
            sb.Append('N3');
            sb.Append(#Separator);
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CHKPBC:
                case #SWT:
                case #FWT:
                case #CHK:
                case #EFT_EDI:
                case #WIRE:
                    length = 35;
                    break;
                Default:
                    length = 30;
                    break;
            }
    
            //01    Address Information
            sb.Append(substr(mRemittanceAdrLine1,1,length));
    
            //02    Address Information
            if(mRemittanceAdrLine2 != '' && mSKS_EFT_FileFormatPaymSpec.TransactionCode != #SWT)
            {
                sb.Append(#Separator);
                sb.Append(substr(mRemittanceAdrLine2,1,length));
            }
    
            sb.Append(#LineEnd);
    
            if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
                m820Section += sb.ToString();
                m820Section += '\r\n';
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PR</Name>
				<Source><![CDATA[
    boolean rec_N3PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payor Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payor Address (Line 2) Domestic and Foreign
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int length;
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append('N3');
            sb.Append(#Separator);
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #CHKPBC:
                    length = 35;
                    break;
                Default:
                    length = 55;
                    break;
            }
    
            //01    Address Information
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr),1,length));
    
            //02    Address Information
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
            {
                sb.Append(#Separator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2),1,length));
            }
    
            sb.Append(#LineEnd);
    
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
                m820Section += sb.ToString();
                m820Section += '\r\n';
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3RB</Name>
				<Source><![CDATA[
    boolean rec_N3RB()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address information                                 55      AN      Address - Receiving Bank
        //02    Address information                                 55      AN      Identification code/ Correspondent DFI Identification
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        if(mSKS_EFT_FileDetail_BenBank.BenBankName)
        {
            sb.Append('N3');
            sb.Append(#Separator);
    
            //01    Address information
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr),1,35));
            sb.Append(#LineEnd);

            if(mSKS_EFT_FileDetail_BenBank.BenBankAddr != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
                m820Section += sb.ToString();
                m820Section += '\r\n';
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    boolean rec_N4PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //05    Location Qualifier                                  2       ID
        //06    Location Identifier                                 30      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        if(Name)
        {
            sb.Append('N4');
            sb.Append(#Separator);
    
            //01    City Address
            sb.Append(substr(mRemittanceCity, 1, 30));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(mRemittanceState, 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(strRem(mRemittanceZipCode, '-'),1,9));//SKS_VSTS_14705
            sb.Append(#Separator);
    
            //04    Country Code
            sb.Append(mRemittanceCountryRegionId);
    
            //05    Location Qualifier
            //06    Location Identifier
    
            sb.Append(#LineEnd);
    
            if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
                m820Section += sb.ToString();
                m820Section += '\r\n';
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    boolean rec_N4PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        //LogisticsAddressCountryRegionISOCode countryRegionISO;
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName)
        {
            sb.Append('N4');
            sb.Append(#Separator);
    
            //01    City Address
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 1, 19));
            sb.Append(#Separator);
    
            //02    State or Province Code
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 1, 2));
            sb.Append(#Separator);
    
            //03    Postal Code
            sb.Append(substr(strRem(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, '-'),1,10));//SKS_VSTS_14705
            sb.Append(#Separator);
    
            //04    Country Code
            //countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);
            sb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
    
            sb.Append(#LineEnd);
    
            if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyState != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId != '')
            {
                mSegmentCount++;
                this.fileWrite(sb.ToString());
                m820Section += sb.ToString();
                m820Section += '\r\n';
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTEZZZ</Name>
				<Source><![CDATA[
    boolean rec_NTEZZZ()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Note Reference                                      3       ID
        //02    Description                                         35      AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // Originator to Beneficiary
        mSegmentCount++;
    
        sb.Append('NTE');
        sb.Append(#Separator);
    
        //01     Note Reference
        sb.Append('ZZZ');
        sb.Append(#Separator);
    
        //02     Description
        sb.Append(substr(this.CharacterReplacement(msKS_EFT_FileDetail_Instructions.BankInst1),1,60));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFCK</Name>
				<Source><![CDATA[
    boolean rec_REFCK()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    30      AN      Check Number
        //03    Description                                         80      AN      Not Used
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('CK');
        sb.Append(#Separator);
    
        //02     Check Number
        sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),8));
    
        //03    Description
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFTN</Name>
				<Source><![CDATA[
    boolean rec_REFTN()
    {
        //---------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Identification                            30      AN      Check Number (Not used for ACH)
        //03    Description                                         80      AN      CORP PMT
        //---------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
    
        sb.Append('REF');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        sb.Append('TN');
        sb.Append(#Separator);
    
        //02     Check Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SWT ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FWT ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),30));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #EFT_EDI ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRE)
        {
            sb.Append(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference,15));
        }
    
        //03    Description
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #ACHCCD:
            Case #ACHCTX:
            Case #ACHPPD:
                sb.Append(#Separator);
                sb.Append('CORP PMT');
                break;
        }
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    9       AN
        //03    Payment Action Code                                 2       ID
        //04    Amount paid                                         18      R
        //05    Original Amount                                     18      R
        //06    Discount Amount                                     18      R
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        mSegmentCount++;
    
        sb.Append('RMR');
        sb.Append(#Separator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            sb.Append('IV'); // Only write IV if an invoice number exists
        }
        sb.Append(#Separator);
    
        //02     Reference Number
        sb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,19));
        sb.Append(#Separator);
    
        //03    Payment Action Code
        sb.Append(#Separator);
    
        //04    Amount paid
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
    
        sb.Append(num2str(amt,0,2,0,0));
        sb.Append(#Separator);
    
        //05    Original Amount
        amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
    
        sb.Append(num2str(amt,0,2,0,0));
        sb.Append(#Separator);
    
        //06    Discount Amount
        amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
        sb.Append(num2str(amt,0,2,0,0));
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    boolean rec_SE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //--------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mSegmentCount++;
    
        sb.Append('SE');
        sb.Append(#Separator);
    
        //1     Number of Included Segments
        sb.Append(num2str(mSegmentCount,0,0,0,0));
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        sb.Append(mSenderControlNbr);
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    boolean rec_ST()
    {
        //------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        mSegmentCount++;
        mTranSetCount++;
    
        sb.Append('ST');
        sb.Append(#Separator);
    
        //1     Transaction Set ID Code
        sb.Append('820');
        sb.Append(#Separator);
    
        //2     Trans. Set Cont. Number
        if(strLen(mSKS_EFT_FileDetail.PaymentReference) < 4)
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),9);
        }
        sb.Append(mSenderControlNbr);
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    boolean rec_TRN()
    {
        //-----------------------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Identification                            30      AN      Payment Trace No
        //03    Orig. Co. ID                                        10      AN      Not used
        //04    Reference Number                                    30      AN      Customer-supplied descriptive data to be used by ARP
        //-----------------------------------------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value;//SKS_VSTS_14241
        mSegmentCount++;
    
        sb.Append('TRN');
        sb.Append(#Separator);
    
        //01     Trace Type Code
        sb.Append('1');
        sb.Append(#Separator);
    
        //02     Reference Identification
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SWT:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),50));
                break;
            Case #EFT_EDI:
            Case #WIRE:
                sb.Append(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference,15));
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),30));
                break;
        }
        
        //03    Orig. Co. ID
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #CHK:
            case #EFT_EDI:
            case #WIRE:
                sb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
                break;
        }
        //04    Reference Number
        value = SKS_EFT_Format::getCodelookupvalue('BenMailHandle', mSKS_EFT_FileDetail.RecId);//SKS_VSTS_14241
        if(value)
        {
            sb.Append(#Separator);
            sb.Append(value);//SKS_VSTS_14241
        }
    
        sb.Append(#LineEnd);
    
        this.fileWrite(sb.ToString());
        m820Section += sb.ToString();
        m820Section += '\r\n';
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        //Populate Remittance Information from Vendor eBanking details
        mRemittanceName = mSKS_EFT_FileDetail_VendAddress.BeneName;
        mRemittanceAdrLine1 = mSKS_EFT_FileDetail_VendAddress.BeneAddr;
        mRemittanceAdrLine2 = mSKS_EFT_FileDetail_VendAddress.BeneAddr2;
        mRemittanceCity = mSKS_EFT_FileDetail_VendAddress.BeneCity;
        mRemittanceState = mSKS_EFT_FileDetail_VendAddress.BeneState;
        mRemittanceZipCode = mSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlfilespecific</Name>
				<Source><![CDATA[
    protected void controlfilespecific(SysDictClass _obj, Object _classInstance)
    {
        _obj.callObject('settotSection', _classInstance, m820Section);
        _obj.callObject('setSenderControlnum', _classInstance, mSenderControlNbr);
        _obj.callObject('setMonetaryAmt', _classInstance, mAMTTotal);
        _obj.callObject('setISASection', _classInstance, mISASection);
        _obj.callObject('setGSSection', _classInstance, mGSSection);
        _obj.callObject('setGECntrlnum', _classInstance, mGECntrlnum);
        _obj.callObject('setIEACntrlnum', _classInstance, mIEACntrlnum);
        _obj.callObject('setCtrlQuantity', _classInstance, mCtrlQuantity);
        _obj.callObject('setLineEnd', _classInstance, #LineEnd);
        _obj.callObject('setSeparator', _classInstance, #Separator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLayoutName</Name>
				<Source><![CDATA[
    //SKS_Custom_VSTS_14441
    public str getLayoutName(SKS_EFT_FileDetail _SKS_EFT_FileDetail, SKS_EFTAP_File _mSKS_EFT_File)
    {
        mSKS_EFT_FileDetail_AddendaDetailConfig = SKS_EFT_FileDetail_AddendaDetailConfig::find(_SKS_EFT_FileDetail.RecId);

        return mSKS_EFT_FileDetail_AddendaDetailConfig.EDI820Layout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2N3PR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Address Information                                 35      AN      Payor Address (Line 1) Domestic and Foreign
    //02    Address Information                                 35      AN      Payor Address (Line 2) Domestic and Foreign
    boolean rec_N2N3PR(str value)
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        sb.Append(value);
        sb.Append(#Separator);
        
        //01    Address Information
        sb.Append(substr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr,1,35));
        
        //02    Address Information
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
        {
            sb.Append(#Separator);
            sb.Append(substr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2,1,35));
        }
        
        sb.Append(#LineEnd);
        
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr != '' || mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2 != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4RB</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Name                                           30      AN
    //02    State or Province Code                              2       ID      Not used
    //03    Postal Code                                         9       ID      Not used
    //04    Country Code                                        3       ID
    boolean rec_N4RB()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        sb.Append('N4');
        sb.Append(#Separator);
        
        //01    City Name
        sb.Append(substr(mSKS_EFT_FileDetail_BenBank.BenBankCity, 1, 30));
        
        select firstonly msks_EFT_FileDetail_BankAddress where msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
                msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress;
        
        if(msks_EFT_FileDetail_BankAddress.State != '')
        {
            //02    State or Province Code
            sb.Append(#Separator);
            sb.Append(subStr(msks_EFT_FileDetail_BankAddress.State, 1, 2));
        }
        if(msks_EFT_FileDetail_BankAddress.ZipCode != '')
        {
            //03    Postal Code
            sb.Append(#Separator);
            sb.Append(subStr(msks_EFT_FileDetail_BankAddress.ZipCode, 1, 9));
        }
        
        if(msks_EFT_FileDetail_BankAddress.CountryRegionId != '')
        {
            //04    Country Code
            sb.Append(#Separator);
            sb.Append(msks_EFT_FileDetail_BankAddress.CountryRegionId);
        }
        
        sb.Append(#LineEnd);
        
        if(mSKS_EFT_FileDetail_BenBank.BenBankCity != '' ||
           msks_EFT_FileDetail_BankAddress.State != '' ||
           msks_EFT_FileDetail_BankAddress.ZipCode != '' ||
           mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1C2</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
    //03    Identification Code Qualifier                       2       ID
    //04    Identification Code                                 80      AN      Vendor number
    boolean rec_N1C2()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        sb.Append('N1');
        sb.Append(#Separator);
        
        //01    Entity ID Code
        sb.Append('C2');
        sb.Append(#Separator);
        
        //02    Name
        sb.Append(subStr(mSKS_EFT_FileDetail_BenBank.BenBankName, 1, 35));
        
        if(mSKS_EFT_FileDetail.DepSwiftNo != '')
        {
            sb.Append(#Separator);
            
            //03    Identification Code Qualifier
            sb.Append('ZZ');
            sb.Append(#Separator);
            
            //04    Identification Code
            sb.Append(mSKS_EFT_FileDetail.DepSwiftNo);
        }
        sb.Append(#LineEnd);
        
        if(mSKS_EFT_FileDetail_BenBank.BenBankName != '' || mSKS_EFT_FileDetail.DepSwiftNo != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1C3</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity ID Code                                      3       ID
    //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
    //03    Identification Code Qualifier                       2       ID
    //04    Identification Code                                 80      AN      Vendor number
    boolean rec_N1C3()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        sb.Append('N1');
        sb.Append(#Separator);
        
        //01    Entity ID Code
        sb.Append('C3');
        sb.Append(#Separator);
        
        //02    Name
        sb.Append(subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, 1, 35));
        
        if(mSKS_EFT_FileDetail.BankBankSwiftNo != '')
        {
            sb.Append(#Separator);
            
            //03    Identification Code Qualifier
            sb.Append('ZZ');
            sb.Append(#Separator);
            
            //04    Identification Code
            sb.Append(mSKS_EFT_FileDetail.BankBankSwiftNo);
        }
        sb.Append(#LineEnd);
        
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName != '' || mSKS_EFT_FileDetail.BankBankSwiftNo != '')
        {
            mSegmentCount++;
            this.fileWrite(sb.ToString());
        }
        
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>