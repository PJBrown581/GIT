<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_MS_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_MS_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_MS_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220701')
    #define.Separator(',')
    #define.DoubleQuote('"')
    BankAccountTable mBankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get Bank account
            mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
    
            // Details
            this.rec_Details();
    
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        LedgerJournalTrans ledgerJournalTrans;
    
        select crossCompany Txt from ledgerJournalTrans where
            ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
        return this.CharacterReplacement(ledgerJournalTrans.Txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    public boolean rec_Details()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        // 1    Profile Name
        // 2    Client Ref No
        // 3    Transaction Type
        // 4    Pay/Rec Indicator
        // 5    Value Date
        // 6    Category
        // 7    Client MS Account
        // 8    Amount
        // 9    Currency
        //10    Bank ABANumber/ChipID/SortCode
        //11    Bank BIC Code
        //12    Bank Name
        //13    Beneficiary Account
        //14    Beneficiary BIC Code
        //15    Beneficiary Account Name
        //16    Further Credit Acount
        //17    Further Credit BIC Code
        //18    Further Credit Account Name
        //19    Swift Comments 1
        //20    Swift Comments 2
        //21    Description
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str Branch, BankID;
        int pos;
    
        // 1    Profile Name
        sb.Append(this.wrapField('CASH01'));
    
        // 2    Client Ref No
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference)));
    
        // 3    Transaction Type
        sb.Append(this.wrapField(''));
    
        // 4    Pay/Rec Indicator
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField('R'));
        }
        else
        {
            sb.Append(this.wrapField('P'));
        }
    
        // 5    Value Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate)));
    
        // 6    Category
        sb.Append(this.wrapField('FDS'));
    
        // 7    Client MS Account
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct));
    
        // 8    Amount
        sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0)));
    
        // 9    Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));
    
        //10    Bank ABANumber
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit));
    
        //11    Bank BIC Code
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo));
    
        //12    Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), true));
    
        //13    Beneficiary Account
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN));
        }
        else
        {
            if(mSKS_EFT_FileDetail.DepBankAcct == '')
            {
                sb.Append(this.wrapField('0000000000'));
            }
            else
            {
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct));
            }
        }
    
        //14    Beneficiary BIC Code
        sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WBenBankAcct));
    
        //15    Beneficiary Account Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName), true));
    
        if(mSKS_EFT_VendorPaym.WCrePartyAcct != '' ||
           mSKS_EFT_VendorPaym.WCrePartySwift != '' ||
           mSKS_EFT_VendorPaym.WCrePartyName != '')
        {
            //16    Further Credit Account
            sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WCrePartyAcct));
    
            //17    Further Credit BIC Code
            sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WCrePartySwift));
    
            //18    Further Credit Account Name
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WCrePartyName), true));
        }
        else
        {
            //16    Further Credit Account
            sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankAcct));
    
            //17    Further Credit BIC Code
            sb.Append(this.wrapField(mSKS_EFT_VendorPaym.WIntBankSwift));
    
            //18    Further Credit Account Name
            sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName), true));
        }
    
        if(mSKS_EFT_FileDetail.PaymentCurrencyCode == 'CAD')
        {
            pos = strFind(mSKS_EFT_VendorPaym.WBenBankBranch, '-',0,strLen(mSKS_EFT_VendorPaym.WBenBankBranch));
            Branch = subStr(mSKS_EFT_VendorPaym.WBenBankBranch, 0, pos - 1);
            BankID = subStr(mSKS_EFT_VendorPaym.WBenBankBranch,pos + 1, strLen(mSKS_EFT_VendorPaym.WBenBankBranch));
    
            //19    Swift Comments 1
            sb.Append(this.wrapField(this.CharacterReplacement(Branch), true));
    
            //20    Swift Comments 2
            sb.Append(this.wrapField(BankID, true));
        }
        else
        {
            //19    Swift Comments 1
            sb.Append(this.wrapField('', true));
    
            //20    Swift Comments 2
            sb.Append(this.wrapField('', true));
        }
        //21    Description
        sb.Append(this.wrapField(this.getJournaltxt(), true, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '',  boolean _Quote = false, boolean _addSeparator = true)
    {
        if(_addSeparator)
        {
            if(_Quote && _field != '')
            {
                return #DoubleQuote + _field + #DoubleQuote + #Separator;
            }
            else
            {
                return _field + #Separator;
            }
        }
        else
        {
            if(_Quote && _field != '')
            {
                return #DoubleQuote + _field + #DoubleQuote;
            }
            else
            {
                return _field;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>