<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_ES_AEB_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_ES_AEB_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_ES_AEB_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20220112';
        dataContractVersion = '1.0';
        conFormatID = ['ES-AEB-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
//ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
//BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
//FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
//IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
//WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
//WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','Comapny Id','','',0,'ES - Spanish Banking Association - ISO20022 Credit Transfer',0,'','','ES-AEB-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'ES-AEB-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
//BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('ES-AEB-XML'):
                paymSpecList = this.getPaymSpecsMetaData_ES_AEB_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_ES_AEB_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_ES_AEB_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Urgent SEPA Payment',1,'SEPA','','SEPA','TRADE PAY',0,'ES-AEB-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Non-Urgent SEPA Payment',1,'SEPA','','SEPA-NURG','TRADE PAY',0,'ES-AEB-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Non-SEPA Credit Transfer',1,'NON-SEPA','','NON-SEPA','TRADE PAY',0,'ES-AEB-XML',0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('ES-AEB-XML'):
                notesList = this.getNotesMetaData_ES_AEB_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_ES_AEB_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_ES_AEB_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['ES-AEB-XML','SEPA','-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Id is required and stored in either SWIFT code or Sender Id field.:--Debtor name is required stored on Name field.:--Debtor first address line stored on Address 1 field.:--Zip/postal code City fields are printed in Debtor second address line.:--Country is stored on Country/region field.::-Cash and bank management module > Bank Account:--Either IBAN or bank account number is required. If both are populated then IBAN will take precedence.:--Either SWIFT code or Routing number is required. If both are populated SWIFT code will take precedence.::-Vendor Bank Account fields:--IBAN is required.:--Either the SWIFT code or Routing number is required. If both are populated SWIFT code will take precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and stored in the Beneficiary Name field.:--Creditor first address line stored on Address 1 field.:--Zip/postal code City fields are printed in Debtor second address line.:--Country is stored on Country/region field.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC or Bank Id will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['ES-AEB-XML','SEPA-NURG','-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Id is required and stored in either SWIFT code or Sender Id field.:--Debtor name is required stored on Name field.:--Debtor first address line stored on Address 1 field.:--Zip/postal code City fields are printed in Debtor second address line.:--Country is stored on Country/region field.::-Cash and bank management module > Bank Account:--Either IBAN or bank account number is required. If both are populated then IBAN will take precedence.:--Either SWIFT code or Routing number is required. If both are populated SWIFT code will take precedence.::-Vendor Bank Account fields:--IBAN is required.:--Either the SWIFT code or Routing number is required. If both are populated SWIFT code will take precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and stored in the Beneficiary Name field.:--Creditor first address line stored on Address 1 field.:--Zip/postal code City fields are printed in Debtor second address line.:--Country is stored on Country/region field.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC or Bank Id will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['ES-AEB-XML','NON-SEPA','-Initiating Party Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::-EFT+ bank account > AP EFT+ field> Wire/IAT ordering party tab:--Debtor Id is required and stored in either SWIFT code or Sender Id field.:--Debtor name is required stored on Name field.:--Debtor first address line stored on Address 1 field.:--Zip/postal code City fields are printed in Debtor second address line.:--Country is stored on Country/region field.::-Cash and bank management module > Bank Account:--Either IBAN or bank account number is required. If both are populated then IBAN will take precedence.:--Either SWIFT code or Routing number is required. If both are populated SWIFT code will take precedence.::-Vendor Bank Account fields:--Either IBAN or bank account number is required. If both are populated then IBAN will take precedence.:--Either the SWIFT code or Routing number is required. If both are populated SWIFT code will take precedence.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-1 tab:--Creditor Name is required and stored in the Beneficiary Name field.:--Creditor first address line stored on Address 1 field.:--Zip/postal code City fields are printed in Debtor second address line.:--Country is stored on Country/region field.:--The charges bearer is set on the Charges indicator field in the Other notes section.::-Vendor eBanking details > Payment specifications fields > Wire transfer/IAT-2 tab:--Intermediary Agent BIC or Bank Id will be included if the SWIFT code or Bank Id on the Intermediary bank section is populated.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
//FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('ES-AEB-XML'):
                validationsList = this.getValidationsMetaData_ES_AEB_XML();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_ES_AEB_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_ES_AEB_XML()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Initiating Party Id','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Initiating party BICOrBEI','GrpHdr > InitgPty > Id > Orgid > BICOrBEI','WordParty SWIFT code','15','WOrdPartySWIFTNo','','','3',0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Bank Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Bank Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Bank Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Bank City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number',0,'AccountNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','3',0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > Cd','Bank transit number',0,'RegistrationNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Vendor Swift number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId >BIC','Swift Code related  Vendor','9','SWIFTNo','','',0,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Vendor Country Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Vendor Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine > Address','Address related to vendor','16','WBeneAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Vendor Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine > Address','Address related to vendor','16','WBeneAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine ','ZIP/Postal code  related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','City ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine ','Vendor city','16','WBeneCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Initiating Party Id','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Initiating party BICOrBEI','GrpHdr > InitgPty > Id > Orgid > BICOrBEI','WordParty SWIFT code','15','WOrdPartySWIFTNo','','','3',0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Bank Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Bank Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Bank Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Bank City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number',0,'AccountNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','3',0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > Cd','Bank transit number',0,'RegistrationNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Vendor Swift number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId >BIC','Swift Code related  Vendor','9','SWIFTNo','','',0,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Vendor Country Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Vendor Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine > Address','Address related to vendor','16','WBeneAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Vendor Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine > Address','Address related to vendor','16','WBeneAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine ','ZIP/Postal code  related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','City ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine ','Vendor city','16','WBeneCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','SEPA-NURG','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Initiating Party Id','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Initiating party BICOrBEI','GrpHdr > InitgPty > Id > Orgid > BICOrBEI','WordParty SWIFT code','15','WOrdPartySWIFTNo','','','3',0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Bank Country code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Bank Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Bank Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine > Address','Address related to bank','15','WOrdPartyAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Bank City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Bank Zip/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional Identification (fast tab) > IBAN','PmtInf > DbtrAcct > Id > IBAN','IBAN related to Bank',0,'IBAN','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number',0,'AccountNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','','3',0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > Cd','Bank transit number',0,'RegistrationNum','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Vendor Swift number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift code ','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId >BIC','Swift Code related  Vendor','9','SWIFTNo','','',0,0,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary (group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',0,0,1,'70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Vendor Country Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Vendor Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine > Address','Address related to vendor','16','WBeneAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Vendor Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine > Address','Address related to vendor','16','WBeneAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','ZIP/Postal Code ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine ','ZIP/Postal code  related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','City ','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine ','Vendor city','16','WBeneCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','IBAN related to Vendor','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3',0,1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['ES-AEB-XML','NON-SEPA','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number ','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','','3',0,1,'35',0,0]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['ES-AEB-XML','Charges','Charges']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
//FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['ES-AEB-XML','Charges','Shared costs','SHAR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['ES-AEB-XML','Charges','By the payer','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['ES-AEB-XML','Charges','On account Beneficiary','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['ES-AEB-XML','Charges','According to the service-level agreement','SLEV']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
//FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('ES-AEB-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_DK_BANKCONNECT_BEC_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_DK_BANKCONNECT_BEC_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_DK_BANKCONNECT_BEC_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['ES-AEB-XML','ES-AEB-XML','NON-SEPA','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['ES-AEB-XML','ES-AEB-XML','SEPA-NURG','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
//FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['ES-AEB-XML','*','FormatLookup','*','*','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['ES-AEB-XML','*','FormatValidations','*','15','W01']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('ES-AEB-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_ES_AEB_XML();
                break;

        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_ES_AEB_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_ES_AEB_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['ES-AEB-XML','ES-AEB-XML','InitiatingPartyId','Sender Id',1,'InitiatingPartyId','',1,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > Orgid > Othr > Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['ES-AEB-XML','ES-AEB-XML','CompanySuffix','Company CIF suffix',1,'CompanySuffix','',1,'','XXXXXXXXXX','Company CIF suffix']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating the bank code lookpups from the W0X fields.
    /// </summary>
    protected void updateBankCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('ES-AEB-XML'):
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateBankFields('InitiatingPartyId', gSKS_EFT_Bank.W01);
                }
                if(gSKS_EFT_Bank.W02)
                {
                    this.updateBankFields('CompanySuffix', gSKS_EFT_Bank.W02);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('ES-AEB-XML'):
                if(gSKS_EFT_VendorPaym.WChargesIndic)
                {
                    this.updateVendorFields('Charges', gSKS_EFT_VendorPaym.WChargesIndic, true);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>