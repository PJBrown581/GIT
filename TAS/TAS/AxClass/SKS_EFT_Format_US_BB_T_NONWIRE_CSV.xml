<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BB_T_NONWIRE_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BB_T_NONWIRE_CSV  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BB_T_NONWIRE_CSV  extends SKS_EFT_Format
{
    #define.FormatVersion('20220615')
    #define.ACH('ACH')
    #define.CHK('CHK')
    #define.EFT('EFT')

    #define.Separator(',')
    #define.DoubleQuotes('"')
     
    SKS_EB_Vendor mSKS_EB_Vendor;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get Remittance Address
            this.getRemittanceAddress(true);
    
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Summary Record
            this.rec_Summary();

            // Payment Record
            this.rec_Payment();
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                {
                    // Details
                    this.rec_Remit(invSKS_EFT_FileDetail);
                }
            }
            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Summary</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Summary
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Summary()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                     length
        //1	    Record Type	                        1
        //2	    Payment Date	                    10
        //3	    Company (Payer) name	            35
        //4	    Company (Payer) name 2	            35
        //5	    Payer address1	                    35
        //6	    Payer address2	                    35
        //7	    Payer City Name	                    30
        //8	    Payer State or Province Code	    2
        //9	    Payer Postal Code	                15
        //10	Payer ISO Country Code	            3
        //11	Payer Routing Number	            9
        //12	Payer Account Number	            13
        //13	Promo Line 1	                    50
        //14	Promo Line 2	                    50
        //15	Promo Line 3	                    50
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1	    Record Type	                        1
        sb.Append(this.wrapField('S'));

        //2	    Payment Date	                    10
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.PaymentTransDate, DateSeparator::Slash)));

        //3	    Company (Payer) name	            35
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 35));

        //4	    Company (Payer) name 2	            35
        sb.Append(this.wrapField(''));

        //5	    Payer address1	                    35
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr), 35));

        //6	    Payer address2	                    35
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr2), 35));

        //7	    Payer City Name	                    30
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity), 30));

        //8	    Payer State or Province Code	    2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyState), 2));

        //9	    Payer Postal Code	                15
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyZipCode), 15));

        //10	Payer ISO Country Code	            3
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId), 3));

        //11	Payer Routing Number	            9
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankTransit, 9)); 

        //12	Payer Account Number	            13
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 13));

        //13	Promo Line 1	                    50
        sb.Append(this.wrapField());

        //14	Promo Line 2	                    50
        sb.Append(this.wrapField());

        //15	Promo Line 3	                    50
        sb.Append(this.wrapField(), 0, false);
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Payment
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Payment()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                     length
        //1	    Record Type	                        1
        //2	    Payment Type Indicator              3
        //3	    Payment Number	                    10
        //4	    Payment Amount	                    18
        //5	    Payee Number	                    17
        //6	    Payee name1	                        57
        //7	    Payee name 2	                    57
        //8	    Payee address1	                    57
        //9	    Payee address2	                    55
        //10	Payee address3	                    55
        //11	Payee City Name	                    30
        //12	Payee State or Province Code	    2
        //13	Payee Postal Code	                15
        //14	Payee ISO Country Code	            2
        //15	Payee Routing Number	            9
        //16	Payee Account Number	            35
        //17	Memo Field	                        30
        //18	Delivery_Method	                    4
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        //1	    Record Type	                        1
        sb.Append(this.wrapField('P'));

        //2	    Payment Type Indicator              3
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACH:
                sb.Append(this.wrapField('ACH'));
                break;
            case #CHK:
            case #EFT:
                sb.Append(this.wrapField('CHK'));
                break;            
        }
        //3	    Payment Number	                    10
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference)));

        //4	    Payment Amount	                    18
        sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        //5	    Payee Number	                    17
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountNum), 17));

        //6	    Payee name1	                        57
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
        {
            sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceName), 22));
        }
        else
        {
            sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceName), 57));
        }

        //7	    Payee name 2	                    57
        sb.Append(this.wrapField());

        //8	    Payee address1	                    57
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceAdrLine1), 57));

        //9	    Payee address2	                    55
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceAdrLine2), 55));

        //10	Payee address3	                    55
        sb.Append(this.wrapField());

        //11	Payee City Name	                    30
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceCity), 30));

        //12	Payee State or Province Code	    2
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceState), 2));

        //13	Payee Postal Code	                15
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceZipCode), 15));

        //14	Payee ISO Country Code	            2
        sb.Append(this.wrapField(this.CharacterReplacement(mRemittanceCountryRegionId), 2));

        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'ACH')
        {
            //15	Payee Routing Number	        9
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 9));

            //16	Payee Account Number	        35
            sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 35));
        }
        else
        {
            //15	Payee Routing Number	        9
            sb.Append(this.wrapField());

            //16	Payee Account Number	        35
            sb.Append(this.wrapField());
        }

        //17	Memo Field	                        30
        sb.Append(this.wrapField());

        //18	Delivery_Method	                    4
        sb.Append(this.wrapField(), 0, false);
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Remit</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Remit
    /// </summary>
    /// <param name = "invSKS_EFT_FileDetail">invSKS_EFT_FileDetail</param>
    /// <returns>true</returns>
    boolean rec_Remit(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description                     length
        //1	    Record Type	                        1
        //2	    Invoice Number	                    30
        //3	    Invoice Date	                    10
        //4	    Remittance Description	            30
        //5	    Invoice Amount	                    18
        //6	    Discount Amount	                    18
        //7	    Amount Paid	                        18
        //---------------------------------------------------------------------------------
        VendTrans lVendTrans;
        Amount amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();


        //1	    Record Type	                        1
        sb.Append(this.wrapField('I'));

        //2	    Invoice Number	                    30
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 30));

        //3	    Invoice Date	                    10
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash)));

        //4	    Remittance Description	            30
        select crossCompany PaymId from lVendTrans where
           lVendTrans.RecId == invSKS_EFT_FileDetail.VendTransRecId;

        sb.Append(this.wrapField(this.wrapField(this.CharacterReplacement(lVendTrans.PaymId), 30)));        //SKS#DevOps:17063

        //5	    Invoice Amount	                    18
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0, 2, 1, 0)));

        //6	    Discount Amount	                    18
        sb.Append(this.wrapField(num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1, 0, 2, 1, 0)));

        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;

        // 7	Amount Paid	                        18
        sb.Append(this.wrapField(num2str(amt * -1, 0, 2, 1, 0), 18, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    private str getEmail()
    {
        VendTable vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;

        mSKS_EB_Vendor = SKS_EB_Vendor::findByCompany(mSKS_EFT_FileDetail.PaymentCompany, mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select * from DirPartyContactInfoview
                where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                    &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
            if(DirPartyContactInfoView.Locator)
            {
                return DirPartyContactInfoView.Locator;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean quotes = true, boolean _addSeparator = true)
    {
        str text;
        ;
        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            if(text != '' && strContains(text, ','))
            {
                text = #DoubleQuotes + text + #DoubleQuotes + #Separator;
            }
            else
            {
                text = text + #Separator;
            }
        }
        return text;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>