<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_NumberSequenceCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class creates the eBanking number sequences
// It is run as part of upgrade
// This class removes the need to run the number sequence wizard
class SKS_EB_NumberSequenceCreate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(SKS_PP_Setup _SKS_PP_Setup)
    {
        NumberSeqModuleLockbox      numSeqLockbox;
        NumberSeqModuleAPEFTPlus    numSeqAPEFTPlus;
        NumberSeqModuleAREFTPlus    numSeqAREFTPlus;
        NumberSeqModuleAPEFTPlusInbound numSeqAPEFTPlusInbound;
        NumberSeqModuleEPay         numSeqEPay;
        NumberSeqModulePosPay       numSeqPositivePay;
        NumberSeqModuleSCF          numSeqSCF;
        NumberSeqModuleBTB          numSeqBTB;
        NumberSeqModuleCNP          numSeqCNP;
        NumberSeqModuleDDMandateDataDelivery numSeqDDMandateDataDelivery;
        SKS_IHB_NumberSequenceModule    numSeqIHBExtVendorNetting;
        NumberSequenceReference     locNumberSequenceReference;
        NumberSequenceTable         locNumberSequenceTable;
        container                   segmentsAP,segmentsAR,segmentsBT,segmentsCR;
        str                         annotatedFormat, format;

        // Create eSettlement/Lockbox number sequences
        numSeqLockbox = new NumberSeqModuleLockbox();
        numSeqLockbox.loadModule();

        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_LB_NextJournalNumber),null,'',NoYes::No,'######');
        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_LB_PaymentReferenceNumber),null,'',NoYes::No,'######');

        // Create AP EFT number sequences
        numSeqAPEFTPlus = new NumberSeqModuleAPEFTPlus();
        numSeqAPEFTPlus.loadModule();

        segmentsAP += [[0, curExt()]];
        segmentsAP += [[-1,'-AP']];
        segmentsAP += [[-2,'##########']];
        annotatedFormat  = NumberSeq::createAnnotatedFormatFromSegments(segmentsAP);
        format           = NumberSeq::createAnnotatedFormatFromSegments(segmentsAP, false);
        //NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_APNextJournalNumber),null,'',NoYes::No,curext() + '-##########');
        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_APNextJournalNumber),null,'',NoYes::No, format);
        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_APReferenceNumber),null,'',NoYes::No,'########');

        // Create AP EFT Inbound number sequences
        numSeqAPEFTPlusInbound = new NumberSeqModuleAPEFTPlusInbound();
        numSeqAPEFTPlusInbound.loadModule();

        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_RF_AP_NextFileNumber),null,'',NoYes::No,'##########');

        // Create AR EFT number sequences
        numSeqAREFTPlus = new NumberSeqModuleAREFTPlus();
        numSeqAREFTPlus.loadModule();

        segmentsAR += [[0, curExt()]];
        segmentsAR += [[-1,'-DD']];
        segmentsAR += [[-2,'##########']];
        annotatedFormat  = NumberSeq::createAnnotatedFormatFromSegments(segmentsAR);
        format           = NumberSeq::createAnnotatedFormatFromSegments(segmentsAR, false);
        //NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_ARNextJournalNumber),null,'',NoYes::No,'######');
        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_ARNextJournalNumber),null,'',NoYes::No,format);
        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_ARReferenceNumber),null,'',NoYes::No,'########');

        // Create ePay number sequences
        numSeqEPay = new NumberSeqModuleEPay();
        numSeqEPay.loadModule();

        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EPY_NextePayPmtNum),null,'',NoYes::No,'##########');

        // Create Positive Pay number sequence
        numSeqPositivePay = new NumberSeqModulePosPay();
        numSeqPositivePay.loadModule();

        locNumberSequenceReference = NumberSequenceTable::autoCreate(extendedTypeNum(SKS_PP_FileNbr),null,'',NoYes::No,'######');

        // Create SCF number sequence  - FDD-14323- Supply chain finance
        numSeqSCF = new NumberSeqModuleSCF();
        numSeqSCF.loadModule();

        locNumberSequenceReference = NumberSequenceTable::autoCreate(extendedTypeNum(SKS_SCF_FileNbr),null,'',NoYes::No,'######');
        locNumberSequenceReference = NumberSequenceTable::autoCreate(extendedTypeNum(SKS_SCF_AcknowledgementId),null,'',NoYes::No,'######');
        locNumberSequenceReference = NumberSequenceTable::autoCreate(extendedTypeNum(SKS_SCF_SettlementId),null,'',NoYes::No,'######');
        locNumberSequenceReference = NumberSequenceTable::autoCreate(extendedTypeNum(SKS_SCF_InvoiceNum),null,'',NoYes::No,'######');

        // Create Bank to bank transfer number sequences
        numSeqBTB = new NumberSeqModuleBTB();
        numSeqBTB.loadModule();

        segmentsBT += [[0, curExt()]];
        segmentsBT += [[-1,'-BT']];
        segmentsBT += [[-2,'########']];
        annotatedFormat  = NumberSeq::createAnnotatedFormatFromSegments(segmentsBT);
        format           = NumberSeq::createAnnotatedFormatFromSegments(segmentsBT, false);

        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_BTBNextJournalNumber),null,'',NoYes::No,format);
        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_BTBReferenceNumber),null,'',NoYes::No,'########');

        // Create  Customer reimbursement number sequences
        numSeqCNP = new NumberSeqModuleCNP();
        numSeqCNP.loadModule();

        segmentsCR += [[0, curExt()]];
        segmentsCR += [[-1,'-CR']];
        segmentsCR += [[-2,'########']];
        annotatedFormat  = NumberSeq::createAnnotatedFormatFromSegments(segmentsCR);
        format           = NumberSeq::createAnnotatedFormatFromSegments(segmentsCR, false);

        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_CNPNextJournalNumber),null,'',NoYes::No,format);
        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_EFT_CNPReferenceNumber),null,'',NoYes::No,'########');

        //the following code is use to initially assign the value to the number sequence for Postitive Pay.
        //  this is relevant in an upgrade scenario; pre 9.0 verions of eBanking(aka: TAS) used a number stored in a string in the
        //  SKS_PP_SETUP.  This block of code initializes the new number sequence to use the next number from the old system.
        if(str2int(_SKS_PP_Setup.PPNextFileNbr) > 0)
        {
            locNumberSequenceTable = locNumberSequenceReference.numberSequenceTable(true);
            locNumberSequenceTable.NextRec = str2int(_SKS_PP_Setup.PPNextFileNbr);
            _SKS_PP_Setup.PPNextFileNbr = SKS_PP_StringFormats::strFill(strLen(_SKS_PP_Setup.PPNextFileNbr),'',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left);
            ttsBegin;
            locNumberSequenceTable.update();
            ttsCommit;

        }
        //TAS-Mandate Automation --> Start
        //Create Direct debit mandate data delivery sequence
        numSeqDDMandateDataDelivery = new NumberSeqModuleDDMandateDataDelivery();
        numSeqDDMandateDataDelivery.loadmodule();

        NumberSequenceTable::autoCreate(extendedTypeNum(SKS_DDMandateDataDeliveryReference),null,'',NoYes::No,'########');
        //TAS-Mandate Automation --> End

        // Create File Id  - FDD-18672- IHB Intercompany netting ERP outside of D365
        numSeqIHBExtVendorNetting = new SKS_IHB_NumberSequenceModule();
        numSeqIHBExtVendorNetting.loadModule();

        locNumberSequenceReference = NumberSequenceTable::autoCreate(extendedTypeNum(SKS_IHB_VendNettingNumber),null,'',NoYes::No,'########');
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>