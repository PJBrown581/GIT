<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_SendWalletLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_SendWalletLink extends RunBase
{
    CustAccount     custAccount;
    CustName        custName;
    Email           linkEmail;
    SMS             linkSMS;
    ItemFreeTxt     linkMessage;
    DialogField     dfCustomer;
    DialogField     dfCustomerName;
    DialogField     dfLinkEmail;
    DialogField     dfLinkSMS;
    DialogField     dfLinkMessage;
    DialogField     dfPFCustomer;
    CustTable       callerCustTable;
    RefTableId      oneTimeCustRefTableId;
    RefRecId        oneTimeCustRefRecId;
    String50        payFabricCustomerNbr;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>customerEmail_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the customer email lookup.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormControl</c> object that needs the lookup.
    /// </param>
    private void customerEmail_lookup(FormStringControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        QueryBuildRange         qbrType;
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tableNum(DirPartyContactInfoView));
        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Type));
        qbrType.value(queryValue(LogisticsElectronicAddressMethodType::Email));

        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Party));
        qbrType.value(queryValue(callerCustTable.Party));

        _formControl.lookupButton(FormLookupButton::Always);

        sysTableLookup  = SysTableLookup::newParameters(tableNum(DirPartyContactInfoView), _formControl);
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, Locator));
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, IsPrimary));
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, LocationName));        

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerPhone_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the customer phone lookup.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormControl</c> object that needs the lookup.
    /// </param>
    private void customerPhone_lookup(FormStringControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        QueryBuildRange         qbrType;
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tableNum(DirPartyContactInfoView));
        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Type));
        qbrType.value(queryValue(LogisticsElectronicAddressMethodType::Phone));

        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Party));
        qbrType.value(queryValue(callerCustTable.Party));

        _formControl.lookupButton(FormLookupButton::Always);

        sysTableLookup  = SysTableLookup::newParameters(tableNum(DirPartyContactInfoView), _formControl);
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, Locator));
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, IsPrimary));
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, LocationName));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog;

        dialog = super();
        dialog.addText("@SKS:SKGCCSendWalletLinkInstructionText", 300);
        
        dfLinkEmail = dialog.addField(extendedtypestr(Email), "@SKS:SKGCCSendEmailTo");
        dfLinkSMS = dialog.addField(extendedtypestr(SMS), "@SKS:SKGCCSendSMSTo");
        dfLinkMessage = dialog.addField(extendedtypestr(ItemFreeTxt), "@SKS:SKGCCMessageOptional");
        dfCustomer = dialog.addField(extendedtypestr(custAccount));
        dfCustomerName = dialog.addField(extendedtypestr(CustName));        

        dfCustomer.allowEdit(false);
        dfCustomer.skip(true);
        dfCustomer.value(custAccount);

        dfCustomerName.allowEdit(false);
        dfCustomerName.skip(true);
        dfCustomerName.value(callerCustTable.name());

        if (oneTimeCustRefTableId && oneTimeCustRefRecId && payFabricCustomerNbr)
        {
            dfPFCustomer = dialog.addField(extendedtypestr(String50), "@SKS:SKGCCOneTimeCustPFNbr");
            dfPFCustomer.allowEdit(false);
            dfPFCustomer.skip(true);
            dfPFCustomer.value(payFabricCustomerNbr);
        }        

        SKS_PP_Setup sks_PP_Setup = SKS_PP_Setup::find();
        Email custEmail;
        SMS custSMS;

        if (sks_PP_Setup.CCPLContactDefaultPreference == SKS_CC_PLContactDefaultPreference::Email)
        {
            custEmail = SKS_CC_SendWalletLink::getPrimaryOrFirstElectronicAddressByType(callerCustTable.Party,
                LogisticsElectronicAddressMethodType::Email);

            if (custEmail)
            {
                dfLinkEmail.value(custEmail);
            }            
        }

        if (!custEmail && sks_PP_Setup.CCPLContactDefaultPreference == SKS_CC_PLContactDefaultPreference::Phone)
        {
            custSMS = SKS_CC_SendWalletLink::getPrimaryOrFirstElectronicAddressByType(callerCustTable.Party,
                LogisticsElectronicAddressMethodType::Phone);

            if (custSMS)
            {
                dfLinkSMS.value(custSMS);
            }
        }

        dfLinkEmail.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                     methodStr(SKS_CC_SendWalletLink, customerEmail_lookup),
                                                     this);

        dfLinkSMS.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                   methodStr(SKS_CC_SendWalletLink, customerPhone_lookup),
                                                   this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        const str phoneLongDistanceDigitUS = '1';

        ret = super();
        
        linkEmail = dfLinkEmail.value();
        linkSMS = dfLinkSMS.value();
        if (linkSMS)
        {
            linkSMS = strAlpha(linkSMS);
            if (!strStartsWith(linkSMS, phoneLongDistanceDigitUS))
            {
                linkSMS = phoneLongDistanceDigitUS + linkSMS;
            }            
        }

        linkMessage = dfLinkMessage.value();
        custAccount = dfCustomer.value();
        custName = dfCustomerName.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerCustTable</Name>
				<Source><![CDATA[
    public CustTable parmCallerCustTable(CustTable _callerCustTable = callerCustTable)
    {
        callerCustTable = _callerCustTable;
        return callerCustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOneTimeCustRefRecId</Name>
				<Source><![CDATA[
    public RefRecId parmOneTimeCustRefRecId(RefRecId _oneTimeCustRefRecId = oneTimeCustRefRecId)
    {
        oneTimeCustRefRecId = _oneTimeCustRefRecId;
        return oneTimeCustRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOneTimeCustRefTableId</Name>
				<Source><![CDATA[
    public RefTableId parmOneTimeCustRefTableId(RefTableId _oneTimeCustRefTableId = oneTimeCustRefTableId)
    {
        oneTimeCustRefTableId = _oneTimeCustRefTableId;
        return oneTimeCustRefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;

        if (!linkEmail && !linkSMS)
        {
            ret = checkFailed("@SKS:SKGCCEmailOrSMSMustBeSpecified");
        }

        if (linkEmail && linkSMS)
        {
            ret = checkFailed("@SKS:SKGCCBothEmailAndSMSMayNotBeSpecified");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();

        if (sks_pp_setup.ModCC == NoYes::No || sks_pp_setup.CCPLEnableWalletLinks == NoYes::No)
        {
            throw error("@SKS:SKGCCSendWalletLinkIsNotAllowedErrorMsg");
        }

        if (!sKS_PP_Setup.CCPayLinkEnumUpgraded)
        {
            throw error("@SKS:SKGCCRefreshLinkIsNotAllowedDueToUpgrade");
        }

        SKS_CC_PayFabricWalletHandler pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
              
        pfWalletHandler.parmCustAccount(custAccount);
        if (oneTimeCustRefTableId && oneTimeCustRefRecId)
        {
            pfWalletHandler.parmOneTimeCustRefTableId(oneTimeCustRefTableId);
            pfWalletHandler.parmOneTimeCustRefRecId(oneTimeCustRefRecId);
        }
        pfWalletHandler.setPayFabricCustomerNbr();
        pfWalletHandler.sendAndRecordWalletLink(linkEmail, linkSMS, linkMessage);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_SendWalletLink construct()
    {
        return new SKS_CC_SendWalletLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS:SKGCCSendWalletLink";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayFabricCustomerNbr</Name>
				<Source><![CDATA[
    public void setPayFabricCustomerNbr()
    {
        custAccount = callerCustTable.AccountNum;
        if (oneTimeCustRefTableId && oneTimeCustRefRecId)
        {
            payFabricCustomerNbr = SKS_CC_PayFabricWalletHandler::getPayFabricCustomerNbrForOneTimeCust(
                oneTimeCustRefTableId,
                oneTimeCustRefRecId,
                callerCustTable.AccountNum);
        }
        else
        {
            payFabricCustomerNbr = callerCustTable.AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CC_SendWalletLink   sKS_CC_SendWalletLink = SKS_CC_SendWalletLink::construct();
        CustTable               custTableForWallet;        

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (_args.dataset() != tableNum(CustTable))
        {
            throw error(Error::missingRecord(tableStr(CustTable)));
        }

        if (!_args.record())
        {
            throw error(Error::missingRecord(tableStr(CustTable)));
        }

        custTableForWallet = _args.record();
        sKS_CC_SendWalletLink.parmCallerCustTable(custTableForWallet);

        if (sKS_CC_SendWalletLink.prompt())
        {
            sKS_CC_SendWalletLink.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryOrFirstElectronicAddressByType</Name>
				<Source><![CDATA[
    public static LogisticsElectronicAddressLocator getPrimaryOrFirstElectronicAddressByType(
        DirPartyRecId _partyRecId,
        LogisticsElectronicAddressMethodType _type = LogisticsElectronicAddressMethodType::Phone)
    {
        LogisticsElectronicAddress electronicAddress;
        DirPartyLocation dirPartyLocation;

        electronicAddress = DirParty::primaryElectronicAddress(_partyRecId, _type);
        if (!electronicAddress)
        {
            // Get first electronic address found by type. No explicit order by specified.
            select firstonly electronicAddress
            exists join dirPartyLocation
                where electronicAddress.Type == _type
                    && dirPartyLocation.Location == electronicAddress.Location
                    && dirPartyLocation.Party == _partyRecId;
        }

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>