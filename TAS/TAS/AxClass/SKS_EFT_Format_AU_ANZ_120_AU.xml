<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AU_ANZ_120_AU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AU_ANZ_120_AU extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_AU_ANZ_120_AU extends SKS_EFT_Format
{
    #define.FormatVersion('20220411')
    int         mTotalTransaction;
    AmountMST   mTotalAmount, creditAmount, debitAmount;
    str         companyName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        boolean first = true;

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            if(first)
            {
                // payment batch header
                this.rec_Header();
                first = false;
            }

            // Transfer Log File record
            this.rec_Detail();

            next mSKS_EFT_FileDetail;
        }

        // Batch control Record
        this.rec_BatchControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        //1	    Record type         	                                            1	    (1  - 1)
        //2	    BSB (legacy field)	                                                7	    (2  - 8)
        //3	    Account Number(legacy field)	                                    9	    (9  - 17)
        //4	    Reserved	                                                        1	    (18 - 18)
        //5	    Sequence number	                                                    2	    (19 - 20)
        //6	    Name of User’s Financial Institution                                3	    (21	- 23)
        //7	    Reserved	                                                        7	    (24	- 30)
        //8	    Name of User supplying File	                                        26	    (31	- 56)
        //9	    User Identification Number	                                        6	    (57	- 62)
        //10	Description of entries on File 	                                    12	    (63	- 74)
        //11	Date to be   processed	                                            6	    (75 - 80)
        //12	Time	                                                            4	    (81 - 84)
        //13    Reserved                                                            36      (85-  120)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str senderId;

        //1	    Record type         	                                            1	    (1  - 1)
        sb.Append('0');

        //2	    BSB (legacy field)	                                                7	    (2  - 8)
        sb.Append(SKS_PP_StringFormats::strFill(7, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //3	    Account Number(legacy field)	                                    9	    (9  - 17)
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //4	    Reserved	                                                        1	    (18 - 18)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5	    Sequence number	                                                    2	    (19 - 20)
        sb.Append('01');

        //6	    Name of User’s Financial Institution                                3	    (21	- 23)
        sb.Append(SKS_PP_StringFormats::strFill(3, this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //7	    Reserved	                                                        7	    (24	- 30)
        sb.Append(SKS_PP_StringFormats::strFill(7, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8	    Name of User supplying File	                                        26	    (31	- 56)
        companyName = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CompanyName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(26, companyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //9	    User Identification Number	                                        6	    (57	- 62)
        senderId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SenderId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(6, senderId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10	Description of entries on File 	                                    12	    (63	- 74)
        sb.Append(SKS_PP_StringFormats::strFill(12, 'Payment', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11	Date to be   processed	                                            6	    (75 - 80)
        sb.Append(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits2));

        //12	Time	                                                            4	    (81 - 84)
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    Reserved                                                            36      (85-  120)
        sb.Append(SKS_PP_StringFormats::strFill(36, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));       

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_Detail()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        //1	    Record type         	                                            1	    (1  - 1)
        //2	    BSB of account to be CREDITED or DEBITED	                        7	    (2  - 8)
        //3	    Account number to be CREDITED or DEBITED	                        9	    (9 - 17)
        //4	    Withholding Tax Indicator                                          16	    (18 - 18)
        //5	    Transaction Code	                                                2	    (19 - 20)
        //6	    Amount to be CREDITED or DEBITED	                                10	    (21	- 30)
        //7	    Title of account to be CREDITED or DEBITED	                        32	    (31	- 62)
        //8	    Lodgement Reference Produced on the recipient’s Account Statement.  18	    (63	- 80)
        //9	    Trace BSB Number	                                                7	    (81	- 87)
        //10	Trace Account Number                                                9	    (88	- 96)
        //11	Name of  Remitter                                                   16	    (97 - 112)        
        //13    Withholding amount                                                  18      (113- 120)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str transactionCode;
        
        mTotalTransaction++;

        //1	    Record type         	                                            1	    (1  - 1)
        sb.Append('1');

        //2	    BSB of account to be CREDITED or DEBITED	                        7	    (2  - 8)
        sb.Append(SKS_PP_StringFormats::strFill(7, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //3	    Account number to be CREDITED or DEBITED	                        9	    (9 - 17)
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //4	    Withholding Tax Indicator                                           1	    (18 - 18)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5	    Transaction Code	                                                2	    (19 - 20)
        transactionCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TransactionCode', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(2, transactionCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //6	    Amount to be CREDITED or DEBITED	                                10	    (21	- 30)
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 10));
        mTotalAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        //7	    Title of account to be CREDITED or DEBITED	                        32	    (31	- 62)
        sb.Append(SKS_PP_StringFormats::strFill(32, mSKS_EFT_FileDetail_VendAddress.BeneName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8	    Lodgement Reference Produced on the recipient’s Account Statement.  18	    (63	- 80)
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
        sb.Append(SKS_PP_StringFormats::strFill(18, msks_EFT_FileDetail_PaymentLine.TransactionTxt, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //9	    Trace BSB Number	                                                7	    (81	- 87)
        sb.Append(SKS_PP_StringFormats::strFill(7, mSKS_EFT_FileDetail.BankBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10	Trace Account Number                                                9	    (88	- 96)
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11	Name of  Remitter                                                   16	    (97 - 112)
        sb.Append(SKS_PP_StringFormats::strFill(16, companyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    Withholding amount                                                  8      (113- 120)
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BatchControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_BatchControl
    /// </summary>
    /// <returns>true</returns>
    public boolean rec_BatchControl()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        //1	    Record type         	                                            1	    (1  - 1)
        //2	    Reserved        	                                                7	    (2  - 8)
        //3	    Reserved                    	                                    12	    (9  - 20)
        //4	    Batch Net Total Amount	                                            10	    (21 - 30)
        //5	    Batch Credit Total Amount	                                        10	    (31 - 40)
        //6	    Batch Debit Total Amount                                            10	    (41	- 50)
        //7	    Reserved	                                                        24	    (51	- 74)
        //8	    Batch Total Item Count                                              6	    (75	- 80)
        //9	    Reserved                	                                        40	    (81	- 120)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();        

        //1	    Record type         	                                            1	    (1  - 1)
        sb.Append('7');

        //2	    Reserved        	                                                7	    (2  - 8)
        sb.Append('999-999');

        //3	    Reserved                    	                                    12	    (9  - 20)
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //4	    Batch Net Total Amount	                                            10	    (21 - 30)
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mTotalAmount, 10));

        //5	    Batch Credit Total Amount	                                        10	    (31 - 40)
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mTotalAmount, 10));

        //6	    Batch Debit Total Amount                                            10	    (41	- 50)
        if(mTotalAmount > 0)                                        
        {
            sb.Append(SKS_PP_StringFormats::strMoney(mTotalAmount, 10));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }

        //7	    Reserved	                                                        24	    (51	- 74)
        sb.Append(SKS_PP_StringFormats::strFill(24, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8	    Batch Total Item Count                                              6	    (75	- 80)
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mTotalTransaction), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //9	    Reserved                	                                        40	    (81	- 120)
        sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>