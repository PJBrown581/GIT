<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_TDBANK_ARS</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_TDBANK_ARS Extends SKS_PP_Format_BankGroup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>date2Julian</Name>
				<Source><![CDATA[
    str date2Julian(date _date)
    {
    int days;
    str strDays;
    str strYears;
    int years;
    ;
    
    days = dayOfYr(_date);
    years = Year(_date);
    strDays = int2str(days);
    stryears = int2str(Years);
    
    strYears = int2str(Years);
    if (strlen(strDays) == 1)
    {
        strDays = '00' + strDays;
    }
    else if(strlen(strDays) == 2)
    {
        strDays = '0' + strDays;
    }
    
    return strYears + strDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Bank of Tokyo - Mitsubishi UFJ, Ltd.
        // CMS - Fixed Field format
        // Courtesy of Justing Parker
    
        // Pos       Len     Description
        // 01-04     4       Bank ID  First 4 characters
        // 05-06     2       Application = 02
        // 07-22     16      Account  Number
        // 23-24     2       Item Type 60 = Check
        // 25-34     10      Serial Number
        // 35-45     11      issue Amount)
        // 46-75     30      Payee
        // 76-82     10      date
        // 83-84     2       10- Issued, 12- Cancelled, 11 - Void
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM("ComputerName")  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> "X"                - "X" records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = "P"                      - "P" records are for Positive Pay
    
        // Below only want records with RecSection = "20P" (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        // RecType: (within Payments)
        // 10V - Voucher
        // 20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
    
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        Str Amt;
        str itemStatus;
        SKS_PP_Bank sks_pp_bank;
        Container company;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        if (mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::VoidCheque)
        {
            itemstatus = '11';
        }
        else if(mSKS_PP_FileDetail.ChkType == SKS_PP_ChequeType::CancelledCheque)
        {
            itemstatus = '12';
        }
        else
        {
            itemstatus = '10';
        }
    
        Amt = SKS_PP_StringFormats::strMoney(mSKS_PP_FileDetail.ChkCuryAmt,11);
    
        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select crossCompany:company PP01 from sks_pp_bank where sks_pp_bank.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;
    
        sb.Append(SKS_PP_StringFormats::strFill(4, Substr(SKS_PP_Bank.PP01,1,4), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append('02');
        sb.Append(SKS_PP_StringFormats::strFill(16, mSKS_PP_FileDetail.BnkBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append('60');
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(Amt);
        sb.Append(SKS_PP_StringFormats::strFill(30, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append('0');
        sb.Append(itemStatus);
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>