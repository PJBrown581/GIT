<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_UK_NATWEST_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_UK_NATWEST_XML extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_UK_NATWEST_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20230525';
        dataContractVersion = '1.0';
        conFormatID = ['UK-NATWEST-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
        //ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
        //BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
        //FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
        //IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
        //WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
        //WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',1,'UK - NatWest - ISO20022',0,'','','UK-NATWEST-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,1,0,'UK-NATWEST-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
        //BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
        //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
        //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
        //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('UK-NATWEST-XML'):
                paymSpecList = this.getPaymSpecsMetaData_UK_NATWEST_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_UK_NATWEST_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_UK_NATWEST_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Standard Domestic Payment',1,'STDDP','','STDDP','TRADE PAY',0,'UK-NATWEST-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Urgent Domestic Payment',1,'URGDP','','URGDP','TRADE PAY',0,'UK-NATWEST-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'IAT Transfer',1,'IATRF','','IATRF','TRADE PAY',0,'UK-NATWEST-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International SEPA Payment',1,'INTL-SEPA','','INTL-SEPA','TRADE PAY',0,'UK-NATWEST-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'International Non SEPA Payment',1,'INTL-NSEPA','','INTL-NSEPA','TRADE PAY',0,'UK-NATWEST-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('UK-NATWEST-XML'):
                notesList = this.getNotesMetaData_UK_NATWEST_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_UK_NATWEST_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_UK_NATWEST_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWEST-XML','STDDP','-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.::-Vendor Static Payment Reference is stored in the Vendor eBanking details > Vendor > Account info tab.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWEST-XML','URGDP','-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.::-Vendor Static Payment Reference is stored in the Vendor eBanking details > Vendor > Account info tab.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWEST-XML','IATRF','-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWEST-XML','INTL-SEPA','-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['UK-NATWEST-XML','INTL-NSEPA','-This format uses Code lookups.Please review the fields on these forms.:--Code lookup fields tab on EFT+ file formats > Payment specifications.:--Vendor eBanking details > Payment specifications > Additional fields.::-Initiating Party Name is set in Organization administration > Setup > Organization > Legal entities > Name field.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('UK-NATWEST-XML'):
                validationsList = this.getValidationsMetaData_UK_NATWEST_XML();
                break;

        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_UK_NATWEST_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_UK_NATWEST_XML()
    {
        container   validationsList;

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',1,'2','1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','ZIP/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > ZIP/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Country/region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','',3,'2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','PmtInf > DbtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',3,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','SWIFT code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > SWIFT code','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',1,'2','','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Branch','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Branch','PmtInf > CdTrfTxInf > CdtrAgt > BrnchId > ID ','Beneficiary Branch Name ','16','WBenBankBranch','','',0,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Vendor bank Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/region','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > PstlAdr > Ctry','Country related to vendor bank','16','WBenBankCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',1,1,'','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','ZIP/postal code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/postal code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','ZipCode related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','City related to vendor','16','WBeneCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','3',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','STDDP','','Bank account number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank account number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account number related to Vendor','9','AccountNum','','','3',0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',1,'2','1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','ZIP/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > ZIP/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Vendor Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Country/region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','',3,'2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','PmtInf > DbtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',3,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','SWIFT code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > SWIFT code','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',1,'2','','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','SWIFT code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > SWIFT code','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BIC','Intermediary Swift number related to vendor','16','WIntBankSwift','','',1,'2','','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Bank Id','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Bank ID','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > ClrSysMmbId > MmbId','Intermediary Bank Id related to vendor','16','WIntBankId','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Name','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > Nm','City','16','WIntBankName','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Country/Region','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > Ctry','Intermediary Bank Country related to vendor','16','WIntBankCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Address','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','Intermediary Bank Address related to vendor','16','WIntBankAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Address 2','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','Intermediary Bank Address related to vendor','16','WIntBankAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > City','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','City','16','WIntBankCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Branch Id','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > BrnchId','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BrnchId > Id','Intermediary Bank BranchId related to vendor','16','WIntBankBranch','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Branch','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Branch','PmtInf > CdTrfTxInf > CdtrAgt > BrnchId > ID ','Beneficiary Branch Name ','16','WBenBankBranch','','',0,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Vendor bank Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/region','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > PstlAdr > Ctry','Country related to vendor bank','16','WBenBankCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',1,1,'','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','ZIP/postal code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/postal code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','ZipCode related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','City related to vendor','16','WBeneCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','2',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','URGDP','','Bank account number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank account number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account number related to Vendor','9','AccountNum','','','2',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','ZIP/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > ZIP/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Country/region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','PmtInf > DbtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',0,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','SWIFT code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > SWIFT code','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',1,'2','','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',1,0,1,'6',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Branch','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Branch','PmtInf > CdTrfTxInf > CdtrAgt > BrnchId > ID ','Beneficiary Branch Name ','16','WBenBankBranch','','',0,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Vendor bank Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank(group) > Country/region','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > PstlAdr > Ctry','Country related to vendor bank','16','WBenBankCountryRegionId','','',0,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',1,1,'','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','ZIP/postal code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/postal code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','ZipCode related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','City related to vendor','16','WBeneCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','2',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','IATRF','','Bank account number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank account number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account number related to Vendor','9','AccountNum','','','2',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',1,'2','1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','ZIP/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > ZIP/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Country/region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','',1,'2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','PmtInf > DbtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',0,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',1,'2','','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','SWIFT code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > SWIFT code','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BIC','Intermediary Swift number related to vendor','16','WIntBankSwift','','',1,'2','','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Bank Id','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Bank ID','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > ClrSysMmbId > MmbId','Intermediary Bank Id related to vendor','16','WIntBankId','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Name','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > Nm','City','16','WIntBankName','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Country/Region','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > Ctry','Intermediary Bank Country related to vendor','16','WIntBankCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Address','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','Intermediary Bank Address related to vendor','16','WIntBankAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Address 2','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','Intermediary Bank Address related to vendor','16','WIntBankAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > City','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','City','16','WIntBankCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Branch Id','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > BrnchId','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BrnchId > Id','Intermediary Bank BranchId related to vendor','16','WIntBankBranch','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Branch','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Branch','PmtInf > CdTrfTxInf > CdtrAgt > BrnchId > ID ','Beneficiary Branch Name ','16','WBenBankBranch','','',0,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',1,1,'','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','ZIP/postal code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/postal code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','ZipCode related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','City related to vendor','16','WBeneCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','2',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-SEPA','','Bank account number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank account number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account number related to Vendor','9','AccountNum','','','2',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',1,'2','1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','ZIP/postal code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > ZIP/postal code','PmtInf > Dbtr > PstlAdr > AdrLine','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','City related to bank','15','WOrdPartyCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Country/region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank',0,'IBAN','','','3','2',1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Bank account number','Cash and bank management > Select bank account > edit > General (fast tab) > Bank account number','PmtInf > DbtrAcct > Id > Othr > Id','Account number related to Bank',0,'AccountNum','','',3,0,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Bank Swift number','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank',0,'SWIFTNo','','',1,'2','','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','SWIFT code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > SWIFT code','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BIC','Intermediary Swift number related to vendor','16','WIntBankSwift','','',1,'2','','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Bank Id','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Bank ID','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > ClrSysMmbId > MmbId','Intermediary Bank Id related to vendor','16','WIntBankId','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Name','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > Nm','City','16','WIntBankName','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Country/Region','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > Ctry','Intermediary Bank Country related to vendor','16','WIntBankCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Address','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Address','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','Intermediary Bank Address related to vendor','16','WIntBankAddr','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > Address 2','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','Intermediary Bank Address related to vendor','16','WIntBankAddr2','','',1,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > City','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > PstlAdr > AdrLine','City','16','WIntBankCity','','',1,1,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Branch Id','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 2(Fast tab) > Intermediary bank(group) > BrnchId','PmtInf > CdTrfTxInf > IntrmyAgt1 > FinInstnId > BrnchId > Id','Intermediary Bank BranchId related to vendor','16','WIntBankBranch','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Branch','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Branch','PmtInf > CdTrfTxInf > CdtrAgt > BrnchId > ID ','Beneficiary Branch Name ','16','WBenBankBranch','','',0,'2','','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',1,1,'','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','ZIP/postal code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/postal code','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','ZipCode related to vendor','16','WBeneZipPostal','','',1,1,'',0,0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','City related to vendor','16','WBeneCity','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > AdrLine','Address related to vendor','16','WBeneAddr','','',1,'2',1,'35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Country/region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > IBAN','PmtInf > CdtTrfTxInf > CdtrAcct > Id > IBAN','IBAN related to vendor','9','BankIBAN','','','2',1,1,'34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['UK-NATWEST-XML','INTL-NSEPA','','Bank account number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank account number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account number related to Vendor','9','AccountNum','','','2',1,1,'34',0,0]);

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['UK-NATWEST-XML','ChrgBr','Charge Bearer']);
        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['UK-NATWEST-XML','BtchBooking','Batch Booking']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWEST-XML','ChrgBr','Beneficiary','BEN']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWEST-XML','ChrgBr','Payor','OUR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWEST-XML','ChrgBr','Shared','SHAR']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWEST-XML','ChrgBr','Borne By Debtor','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWEST-XML','ChrgBr','Borne By Creditor','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWEST-XML','BtchBooking','True','True']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['UK-NATWEST-XML','BtchBooking','False','False']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
        //FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('UK-NATWEST-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_UK_NATWEST_XML();
                break;
        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_UK_NATWEST_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_UK_NATWEST_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','STDDP','ChrgBr','Charge Bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','URGDP','ChrgBr','Charge Bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','IATRF','ChrgBr','Charge Bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','INTL-SEPA','ChrgBr','Charge Bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','INTL-NSEPA','ChrgBr','Charge Bearer',0,'ChrgBr','',0,'','','PmtInf > ChrgBr']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','STDDP','VendorPmtRef','Vendor Static PaymentReference',1,'VendorPmtRef','',0,'','XXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > PmtId > EndToEndId']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','URGDP','VendorPmtRef','Vendor Static PaymentReference',1,'VendorPmtRef','',0,'','XXXXXXXXXXXXXXXXXX','PmtInf > CdtTrfTxInf > PmtId > EndToEndId']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','INTL-NSEPA','BtchBooking','Batch Booking',0,'BtchBooking','',0,'','','PmtInf > BtchBookg']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','INTL-SEPA','BtchBooking','Batch Booking',0,'BtchBooking','',0,'','','PmtInf > BtchBookg']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','STDDP','BtchBooking','Batch Booking',0,'BtchBooking','',0,'','','PmtInf > BtchBookg']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','URGDP','BtchBooking','Batch Booking',0,'BtchBooking','',0,'','','PmtInf > BtchBookg']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
        //FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['UK-NATWEST-XML','*','FormatLookup','*','*','']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['UK-NATWEST-XML','*','FormatValidations','*','15','W01']);
        deleteList = ConIns(deleteList,conLen(deleteList)+1,['UK-NATWEST-XML','*','FormatValidations','*','1','IBAN']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch(_formatID)
        {
            case ('UK-NATWEST-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_UK_NATWEST_XML();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_UK_NATWEST_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_UK_NATWEST_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['UK-NATWEST-XML','UK-NATWEST-XML','InitgPtyId','Initiating party id',1,'InitgPtyId','',1,'','XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX','GrpHdr > InitgPty > Id > Orgid > Othr > Id']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vednor code lookpus from BE0X and Legacu code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        if(gSKS_EFT_VendorPaym.WChargesIndic)
        {
            this.updateVendorFields('ChrgBr', gSKS_EFT_VendorPaym.WChargesIndic, true);
        }
        if(gSKS_EFT_VendorPaym.BE01)
        {
            this.updateVendorFields('VendorPmtRef', gSKS_EFT_VendorPaym.BE01);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>