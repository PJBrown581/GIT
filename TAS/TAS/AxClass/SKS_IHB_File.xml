<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_File</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_IHB_File
{
    str fileName;
    str fileExtension;
    str filePath;
    str filePathName;
    str errorText;
    UTCDateTime fileDateTime;
    SKS_BF_BankIntType gSKS_BF_BankIntType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_IHB_File construct(SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        return new SKS_IHB_File(_SKS_BF_BankIntType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        gSKS_BF_BankIntType = _SKS_BF_BankIntType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorText</Name>
				<Source><![CDATA[
    str getErrorText()
    {
        return errorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileName</Name>
				<Source><![CDATA[
    str getFileName()
    {
        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilePath</Name>
				<Source><![CDATA[
    str getFilePath()
    {
        return filePath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveFile</Name>
				<Source><![CDATA[
    private void moveFile(str sourcePathFile, str destinationPath, str destinationFileName)
    {
        SKS_EB_FileHub locSKS_EB_FileHub = SKS_EB_FileHub::construct(gSKS_BF_BankIntType);
        System.Exception netExcepn;
        System.String[] locBFLocationAndName;
        str locFileName = '';
        str locFilePath = '';
        ;
    
        try
        {
            locSKS_EB_FileHub.parmThrowErrorIfException(false);
            locSKS_EB_FileHub.runDirectoryCreate(destinationPath);

            if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
            {
                if(strContains(sourcePathFile,@'/'))
                    locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(sourcePathFile,@'//');
                else if(strContains(sourcePathFile,@'\'))
                    locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(sourcePathFile,@'\\');
                else
                    throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");

                locFileName = locBFLocationAndName.GetValue(1);
                locFilePath = locBFLocationAndName.GetValue(0);

                locSKS_EB_FileHub.setFileName(locFileName,'','','','',locFilePath);
                locSKS_EB_FileHub.runFileMoveTo(System.IO.Path::Combine(destinationPath, destinationFileName));

            }
            else
            {
                locSKS_EB_FileHub.runFileInquire(sourcePathFile);
                locSKS_EB_FileHub.runFileMoveTo(System.IO.Path::Combine(destinationPath, destinationFileName));
            }
        }
        catch(Exception::CLRError)
        {
            netExcepn = CLRInterop::getLastException();
            errorText = netExcepn.get_Message();
        }
        catch(Exception::Error)
        {
            if (locSKS_EB_FileHub.errorHasException())
            {
                error(locSKS_EB_FileHub.errorException());
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToArchive</Name>
				<Source><![CDATA[
    // Returns new path\file name
    str moveToArchive()
    {
        SKS_PP_Setup pp_Setup;
        str archivePath;
        str archiveFileName;
        SKS_PP_StringFormats formats = new SKS_PP_StringFormats();
        str archiveNbrString;
        ;
        archivePath = System.IO.Path::Combine(filePath ,'Archive');
    
        ttsbegin;
    
        select forupdate firstonly pp_Setup;
    
        if (pp_Setup.IHBArchiveNbr < 999999)
        {
            pp_Setup.IHBArchiveNbr = pp_Setup.IHBArchiveNbr + 1;
        }
        else
        {
            pp_Setup.IHBArchiveNbr = 1;
        }
    
        if (pp_Setup.validateWrite())
        {
            pp_Setup.update();
        }
    
        archiveNbrString = formats.fill_String(6, int2Str(pp_Setup.IHBArchiveNbr), '0', 'L');
    
        archiveFileName = fileName + '-' + archiveNbrString + fileExtension;
    
        this.moveFile(filePathName, archivePath, archiveFileName);
    
        ttscommit;
    
        return System.IO.Path::Combine(archivePath,archiveFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToError</Name>
				<Source><![CDATA[
    // Returns new path\file name
    str moveToError()
    {
        str errorPath;
        str errorFileName;
        ;
        errorPath = System.IO.Path::Combine(filePath,'Errors');
        errorFileName = fileName + fileExtension;
    
        this.moveFile(filePathName, errorPath, errorFileName);
        return System.IO.Path::Combine(errorPath, errorFileName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFilePathName</Name>
				<Source><![CDATA[
    void setFilePathName(str _filePathName, SKS_EB_FilePath _filePath)
    {
        if(gSKS_BF_BankIntType == SKS_BF_BankIntType::BankFabric)
        {
            filePathName = System.IO.Path::Combine(_filePath, _filePathName);
            filePath = _filePath;
        }
        else
        {
            filePathName = _filePathName;
            filePath = System.IO.Path::GetDirectoryName(_filePathName);
        }
        
        fileName = System.IO.Path::GetFileNameWithoutExtension(_filePathName);
        fileExtension = System.IO.Path::GetExtension(_filePathName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>