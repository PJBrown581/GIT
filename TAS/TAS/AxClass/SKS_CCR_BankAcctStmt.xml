<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_BankAcctStmt</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_CCR_BankAcctStmt
{
    CompanyBankAccountId AccountID;
    TransDate AccountStatementDate;
    TransDate ReconcileDate;
    BankAccountStatementNum AccountStatementNum;
    AmountCur EndingBalance;
    CurrencyCode CurrCode;
    str gErrorMessage;
    SKS_CCR_BankTran     gSKS_CCR_BankTran;//SKS_BR1

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCCRStatement</Name>
				<Source><![CDATA[
    public BankAccountStatement createCCRStatement(BankAccountStatement _BankAccountStatement, RefRecId _SKS_CCR_BankHeaderRecId, boolean _CreateRegardlessOfAccountSettings = false)
    {
        #SKS_Global
        SKS_PP_Bank     locSKS_PP_Bank;
        SKS_PP_Setup    locSKS_PP_Setup;
        BankAccountStatement locBankAccountStatement;
        SKS_CCR_BankTran locSKS_CCR_BankTran;
        BankAccountStatement BankAccountStatement;
        BankAccountStatement = _BankAccountStatement;

        void createStatement()
        {
            //if another file has already created a statement for this date, statement number, and account, set warning message and create HistoryTable event.
            select firstonly locBankAccountStatement where locBankAccountStatement.AccountStatementNum == BankAccountStatement.AccountStatementNum
                                                    && locBankAccountStatement.AccountId == BankAccountStatement.AccountID
                                                    && locBankAccountStatement.AccountStatementDate == BankAccountStatement.AccountStatementDate
                                                    && locBankAccountStatement.SKS_CCR_BankHeaderRecID != _SKS_CCR_BankHeaderRecId;

            if(locBankAccountStatement)
            {
                gErrorMessage = strFmt("@SKS2961", date2str(BankAccountStatement.AccountStatementDate,-1,-1,-1,-1,-1,-1,DateFlags::None), BankAccountStatement.AccountStatementNum, locSKS_PP_Bank.company(), BankAccountStatement.AccountId);
                SKS_CCR_HistoryTable::insertEvent(SKS_CCR_Action::BankStatementAutoCreationFailed,
                                                    _SKS_CCR_BankHeaderRecId,
                                                    BankAccountStatement.AccountId,
                                                    BankAccountStatement.AccountStatementDate,
                                                    BankAccountStatement.AccountStatementNum,
                                                    '',
                                                    gErrorMessage);
                BankAccountStatement = null;
               //BankAccountStatement = locBankAccountStatement; // commented for 7506 - To return null
            }
            else
            {
                select firstonly forUpdate locBankAccountStatement where locBankAccountStatement.AccountStatementNum == BankAccountStatement.AccountStatementNum
                                                && locBankAccountStatement.AccountId == BankAccountStatement.AccountID
                                                && locBankAccountStatement.AccountStatementDate == BankAccountStatement.AccountStatementDate
                                                && locBankAccountStatement.SKS_CCR_BankHeaderRecId == _SKS_CCR_BankHeaderRecId;
                //if this file has already created a statement, pull it back into memory so new records can be created on this statement
                if(locBankAccountStatement)
                {
                    BankAccountStatement = null;
                    BankAccountStatement = locBankAccountStatement;
                }
                //if the file doesn't already exist, create it.
                else
                {
                    // Copy to resolve cross company issue.
                    buf2Buf(BankAccountStatement, locBankAccountStatement);
                    locBankAccountStatement.SKS_CCR_BankHeaderRecID = _SKS_CCR_BankHeaderRecId;
                    locBankAccountStatement.insert();
                    BankAccountStatement = null;
                    BankAccountStatement = locBankAccountStatement;
                    SKS_CCR_HistoryTable::insertEvent(SKS_CCR_Action::BankStatementAutoCreated,
                                                        _SKS_CCR_BankHeaderRecId,
                                                        BankAccountStatement.AccountId,
                                                        BankAccountStatement.AccountStatementDate,
                                                        BankAccountStatement.AccountStatementNum);
                }
            }
        }

        select firstonly DataAreaId from locSKS_PP_Bank where locSKS_PP_Bank.BankAccountId == BankAccountStatement.AccountId;

        select firstOnly OriginalStatementRecId, RecId from locSKS_CCR_BankTran where locSKS_CCR_BankTran.AccountId == BankAccountStatement.AccountId
                                                    && locSKS_CCR_BankTran.TranDate == BankAccountStatement.AccountStatementDate
                                                    && locSKS_CCR_BankTran.AccountStatementNum == BankAccountStatement.AccountStatementNum  //SKS_FDD_15121
                                                    && locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecId;

        if(locSKS_CCR_BankTran)
        {
            select firstOnly locBankAccountStatement where locBankAccountStatement.RecId == locSKS_CCR_BankTran.OriginalStatementRecId;
            if(locBankAccountStatement)
            {
                BankAccountStatement = null;
                BankAccountStatement = locBankAccountStatement;
            }
            else
            {
                createStatement();
            }
        }
        else
        {
            createStatement();

        }
        return BankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId getAccountId()
    {
        return AccountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStatementDate</Name>
				<Source><![CDATA[
    public TransDate getAccountStatementDate()
    {
        return AccountStatementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountStmtNum</Name>
				<Source><![CDATA[
    public BankAccountStatementNum getAccountStmtNum()
    {
        return AccountStatementNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode getCurrencyCode()
    {
        return CurrCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndingBalance</Name>
				<Source><![CDATA[
    public AmountCur  getEndingBalance()
    {
        return EndingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getError</Name>
				<Source><![CDATA[
    public str getError()
    {
        return gErrorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReconcileDate</Name>
				<Source><![CDATA[
    public TransDate getReconcileDate()
    {
        return ReconcileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_CCR_BankTran</Name>
				<Source><![CDATA[
    //SKS_BR1
    public SKS_CCR_BankTran getSKS_CCR_BankTran()
    {
        return gSKS_CCR_BankTran;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountId</Name>
				<Source><![CDATA[
    public void setAccountId(CompanyBankAccountId _accountID)
    {
        AccountID = _accountID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountStatementDate</Name>
				<Source><![CDATA[
    public void setAccountStatementDate(TransDate _accountStmtDate)
    {
        AccountStatementDate = _accountStmtDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountStmtNum</Name>
				<Source><![CDATA[
    public void setAccountStmtNum(BankAccountStatementNum _accountStatementNum)
    {
        AccountStatementNum = _accountStatementNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    public void setCurrencyCode(CurrencyCode _currencyCode)
    {
        CurrCode = _currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEndingBalance</Name>
				<Source><![CDATA[
    public void setEndingBalance(AmountCur _endingBalance)
    {
        EndingBalance = _endingBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReconcileDate</Name>
				<Source><![CDATA[
    public void setReconcileDate(TransDate _reconcileDate)
    {
        ReconcileDate = _reconcileDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBankStatements</Name>
				<Source><![CDATA[
    //// SKS_FDD_13903 - No use since this has been called from Click-N-Match, which is notused for CCR
    //SKS_BR1
    /*public void setSKS_BR_BankTranRecord(SKS_BR_BankTran _sKS_BR_BankTran)
    {
        gSKS_BR_BankTran = _sKS_BR_BankTran;
    }*/

    public static void deleteBankStatements(SKS_CCR_BankHeaderRecId _SKS_CCR_BankHeaderRecId)
    {
        BankAccountStatement lBankAccountStatement;
        BankAccountTrans lBankAccountTrans;
        SKS_CCR_BankTran lSKS_CCR_BankTran;

        while Select forupdate crosscompany lBankAccountStatement
                where lBankAccountStatement.SKS_CCR_BankHeaderRecID == _SKS_CCR_BankHeaderRecId
                && lBankAccountStatement.SKS_CCR_BankHeaderRecID != 0
        {
            changeCompany(lBankAccountStatement.company())
            {
                ttsBegin;
                if(lBankAccountStatement.ReconcileDate != dateNull())
                {
                    info(strFmt("@SKS:SKGBRNoDelReconciledStmt"
                                    ,lBankAccountStatement.company(), lBankAccountStatement.AccountId, lBankAccountStatement.AccountStatementNum, lBankAccountStatement.AccountStatementDate));
                }
                else
                {


                    lSKS_CCR_BankTran = null;

                    while select AccountId, AccountStatementDate, AccountStatementNum from lSKS_CCR_BankTran
                        group by lSKS_CCR_BankTran.AccountId, lSKS_CCR_BankTran.AccountStatementDate, lSKS_CCR_BankTran.AccountStatementNum
                        where lSKS_CCR_BankTran.AccountId == lBankAccountStatement.AccountId
                            && lSKS_CCR_BankTran.AccountStatementDate == lBankAccountStatement.AccountStatementDate
                            && lSKS_CCR_BankTran.AccountStatementNum == lBankAccountStatement.AccountStatementNum
                    {

                        // Reset fields so transactions are marked cleared for the statement that is being deleted
                        lBankAccountTrans = null;
                        lBankAccountTrans.skipDataMethods(true);
                        update_recordSet lBankAccountTrans setting
                            AccountStatement = '',
                            AccountStatementDate = dateNull(),
                            Included = NoYes::No,
                            SKS_BR_AlreadyMarked = NoYes::No,
                            SKS_BR_IsSelected = NoYes::No
                                where   lBankAccountTrans.AccountId == lBankAccountStatement.AccountId &&
                                        lBankAccountTrans.AccountStatement == lBankAccountStatement.AccountStatementNum &&
                                        lBankAccountTrans.AccountStatementDate == lBankAccountStatement.AccountStatementDate &&
                                        lBankAccountTrans.Reconciled == NoYes::No;
                    }
                }
                lBankAccountStatement.delete();
                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importUnmatchedAmount</Name>
				<Source><![CDATA[
    public static AmountMST importUnmatchedAmount(BankAccountStatement _bankAccountStatement)
    {
        #SKS_Global
        SKS_CCR_BankTran lSKS_CCR_BankTran;

        select sum(TranCurrencyAmount) from lSKS_CCR_BankTran
            where lSKS_CCR_BankTran.OriginalStatementRecId == _bankAccountStatement.RecId &&
                  lSKS_CCR_BankTran.ManualReconciliationID == str2guid(#EmptyGuidString); // Not-matched

        return lSKS_CCR_BankTran.TranCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importUnmatchedCount</Name>
				<Source><![CDATA[
    public static SKS_EB_Count importUnmatchedCount(BankAccountStatement _bankAccountStatement)
    {
        #SKS_Global
        SKS_CCR_BankTran lSKS_CCR_BankTran;

        select count(RecId) from lSKS_CCR_BankTran
            where lSKS_CCR_BankTran.OriginalStatementRecId == _bankAccountStatement.RecId &&
                  lSKS_CCR_BankTran.ManualReconciliationID == str2guid(#EmptyGuidString); // Not-matched

        SKS_EB_Count recIdCnt = lSKS_CCR_BankTran.RecId;

        return recIdCnt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastStmtDate</Name>
				<Source><![CDATA[
    // Gets last statement date
    // Code is similar to openingBalance method in BankAccountStatement table
    public static Date lastStmtDate(BankAccountStatement _BankAccountStatement)
    {
        BankAccountStatement    bankAccountStatement;
        date                    openingDate;
        ;

        select reverse EndingBalance from bankAccountStatement
            order by AccountStatementDate, AccountStatementNum
            where bankAccountStatement.AccountId            == _BankAccountStatement.AccountId               &&
                  bankAccountStatement.AccountStatementDate <= _BankAccountStatement.AccountStatementDate    &&
                  bankAccountStatement.RecId                != _BankAccountStatement.RecId;
        if (bankAccountStatement.AccountStatementDate == _BankAccountStatement.AccountStatementDate)
        {
            while (bankAccountStatement.AccountStatementNum > _BankAccountStatement.AccountStatementNum)
            {
                next bankAccountStatement;
            }
        }
        if (bankAccountStatement)
        {
            openingDate = bankAccountStatement.AccountStatementDate;
        }

        return openingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReconcileStatement</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckSelectForUpdateAbsent","Buffer locBankAccountStatement is selected forUpdate and is passed to other methods where it is modified.")]
    Public static void ReconcileStatement(SKS_CCR_BankHeaderRecId _SKS_CCR_BankHeaderRecId)
    {
        #SKS_Global

        str                                     locErrorMessage;
        SKS_CCR_BankTran                        locSKS_CCR_BankTran;
        BankAccountStatement                    locBankAccountStatement;
        BankAccountReconcile                    locBankAccountReconcile;
        SKS_PP_Bank                             locSKS_PP_Bank;
        boolean                                 reconciled = false; // 7647

        //Reconcile statements that have transactions
        while select crossCompany DataAreaId, OriginalStatementRecId from locSKS_CCR_BankTran
                    group by locSKS_CCR_BankTran.OriginalStatementRecId, locSKS_CCR_BankTran.dataAreaId
                    where locSKS_CCR_BankTran.CCRHeaderRecId == _SKS_CCR_BankHeaderRecId
        {
            changeCompany(locSKS_CCR_BankTran.company())
            {
                locBankAccountStatement = null;
                select forUpdate locBankAccountStatement where locBankAccountStatement.RecId == locSKS_CCR_BankTran.OriginalStatementRecId;

                //deteremine if AutoReconcile is on.
                locSKS_PP_Bank = null;
                /*// SKS_FDD_13903 - below code commented since GLMatchOrCreate == SKS_BR_GLMatchOrCreate::GLCreateSweepAndMatchZBA is not useful for CCR
                //if not ZBA, then reconcile using this' account's settings (only SKS_BR_BANKTRANS blonging to a ZBA account will have a ZBA parent RecID)
                if(locSKS_BR_BankTran.ZBAParentRecid == 0)
                    Select firstfast firstonly BRAutoReconcile from locSKS_PP_Bank where locSKS_PP_Bank.BankAccountId == locBankAccountStatement.AccountId;
                else
                {
                    locZBAParentSKS_BR_BankTran = null;
                    select crossCompany AccountID, DataAreaId from  locZBAParentSKS_BR_BankTran where locZBAParentSKS_BR_BankTran.RecId == locSKS_BR_BankTran.ZBAParentRecid;
                    changeCompany(locZBAParentSKS_BR_BankTran.company())
                    {
                        Select firstfast firstonly BRAutoReconcile from locSKS_PP_Bank where locSKS_PP_Bank.BankAccountId == locZBAParentSKS_BR_BankTran.AccountId;
                    }
                }*/
                Select firstfast firstonly CCR_AutoReconcile from locSKS_PP_Bank where locSKS_PP_Bank.BankAccountId == locBankAccountStatement.AccountId;
                if(locSKS_PP_Bank.CCR_AutoReconcile)
                {
                    SKS_CCR_BankAcctStmt::reconcileStatementForAcct(locBankAccountStatement);
                }
            }
        }

        // vvv 7647,10909,12958 vvv
        locBankAccountStatement = null;
        locSKS_PP_Bank = null;
        locSKS_CCR_BankTran = null;
        while select forupdate crossCompany locBankAccountStatement where 
            locBankAccountStatement.ReconcileDate == dateNull() &&
            locBankAccountStatement.SKS_CCR_BankHeaderRecID == _SKS_CCR_BankHeaderRecId
            join CCR_AutoReconcile, RecId from locSKS_PP_Bank where
                    locSKS_PP_Bank.CCR_AutoReconcile == NoYes::Yes &&
                    locSKS_PP_Bank.BankAccountId == locBankAccountStatement.AccountId
            notexists join locSKS_CCR_BankTran where
                    locSKS_CCR_BankTran.OriginalStatementRecId == locBankAccountStatement.RecId
        {
            changecompany(locBankAccountStatement.company())
            {
                SKS_CCR_BankAcctStmt::reconcileStatementForAcct(locBankAccountStatement);
            }
        }
        // ^^^ 7647,10909,12958 ^^^
    }

]]></Source>
			</Method>
			<Method>
				<Name>reconcileStatementForAcct</Name>
				<Source><![CDATA[
    public static void reconcileStatementForAcct(BankAccountStatement   _bankAccountStatement)
    {
        #SKS_Global

        str                                     locErrorMessage;
        BankAccountReconcile                    locBankAccountReconcile;
        if(SKS_CCR_BankAcctStmt::importUnmatchedCount(_bankAccountStatement) > 0)
        {

            SKS_CCR_HistoryTable::insertEvent(SKS_CCR_Action::BankStatementAutoReconcileFailed,
                                                _bankAccountStatement.SKS_CCR_BankHeaderRecID, //Bug 10909
            _bankAccountStatement.AccountId
                                                ,_bankAccountStatement.AccountStatementDate,
                                                _bankAccountStatement.AccountStatementNum,
                                                '',
                                                "@SKS3047");
            return;
        }
    //Verify everything on the current statement balances
        // SKS_FDD_13903 - Commented the below code. For CCR the unreconciled amount will not be zero as we might have currency adjusment balance. instead use unReconciledCurrencyBalance 
        //if(SKS_CCR_BankAcctStmt::unreconciledAmount(_bankAccountStatement) == 0)
        //{
        if(SKS_CCR_BankAcctStmt::unReconciledCurrencyBalance(_bankAccountStatement) == 0)
        {
            try
            {
                ttsbegin;
                // Perform the currency adjustments.
                SKS_CCR_CurrencyAdjustment::processCurrencyAdjustment(_bankAccountStatement);
                //RECONCILE...
                info(strfmtLB(strFmt("@SKS3048",
                _bankAccountStatement.AccountStatementNum,
                date2Str(_bankAccountStatement.AccountStatementDate,-1,-1,-1,-1,-1,-1,DateFlags::None),
                _bankAccountStatement.AccountId,
                _bankAccountStatement.company())));

                locBankAccountReconcile = null;
                locBankAccountReconcile = new BankAccountReconcile();
                locBankAccountReconcile.setParameters(_bankAccountStatement);
                locBankAccountReconcile.isCalledFromCCR(true);
                locBankAccountReconcile.run();

                info(strfmtLB(strFmt("@SKS3049",
                _bankAccountStatement.AccountStatementNum,
                date2Str(_bankAccountStatement.AccountStatementDate,-1,-1,-1,-1,-1,-1,DateFlags::None),
                _bankAccountStatement.AccountId,
                _bankAccountStatement.company())));

                SKS_CCR_HistoryTable::insertEvent(SKS_CCR_Action::BankStatementAutoReconciled,
                                            _bankAccountStatement.SKS_CCR_BankHeaderRecID, //Bug 10909
            _bankAccountStatement.AccountId
                                            ,_bankAccountStatement.AccountStatementDate,
                                            _bankAccountStatement.AccountStatementNum);
                ttscommit;
            }
            catch
            {
                locErrorMessage = strfmtLB(strFmt("@SKS3050",
                    _bankAccountStatement.AccountStatementNum,
                    SKS_PP_StringFormats::strDateMMDDYYYY(_bankAccountStatement.AccountStatementDate),
                    _bankAccountStatement.AccountId,
                    _bankAccountStatement.company()));
                SKS_CCR_HistoryTable::insertEvent(SKS_CCR_Action::BankStatementAutoReconcileFailed,
                                            _bankAccountStatement.SKS_CCR_BankHeaderRecID, //Bug 10909
            _bankAccountStatement.AccountId
                                            ,_bankAccountStatement.AccountStatementDate,
                                            _bankAccountStatement.AccountStatementNum,
                                            '',
                                            locErrorMessage);

                info(locErrorMessage);
            }
        }
        else
        {
            SKS_CCR_HistoryTable::insertEvent(SKS_CCR_Action::BankStatementAutoReconcileFailed,
                                                _bankAccountStatement.SKS_CCR_BankHeaderRecID, //Bug 10909
            _bankAccountStatement.AccountId
                                                ,_bankAccountStatement.AccountStatementDate,
                                                _bankAccountStatement.AccountStatementNum,
                                                '',
                                                "@SKS3057");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unreconciledAmount</Name>
				<Source><![CDATA[
    public static AmountCur unreconciledAmount(BankAccountStatement _bankAccountStatement)
    {
        AmountCur                   clearedAmount;
        AmountCur                   missingAmount;
        AmountCur                   totalAmount;
        // 7653 -->
        BankAccountTrans            bankAccountTrans;
        BankTransTypeGroupDetails   bankTransGroupDetails;

        BankTransTypeGroup bankTransTypeGroup = new BankTransTypeGroup(_bankAccountStatement);

        //SKS_bug_8687 -->
        select sum(AmountCur), sum(AmountCorrect), count(AmountMST) from bankAccountTrans
            where bankAccountTrans.AccountId  == _bankAccountStatement.AccountId
                && bankAccountTrans.AccountStatementDate == _bankAccountStatement.AccountStatementDate
                && bankAccountTrans.AccountStatement == _bankAccountStatement.AccountStatementNum
                && bankAccountTrans.SKS_CCR_IsCurrencyAdjustment == NoYes::No; //execlude the Currency adjustment transactions

        clearedAmount += (bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect);
        bankTransTypeGroup.insertBankTransTypeSum(bankAccountTrans, bankTransGroupDetails.BankTransactionTypeGroup);
        // SKS_FDD_13903 - Commented the below code, for CCR the ending balance and opening balance will zero always
         //missingAmount = (_bankAccountStatement.EndingBalance - _bankAccountStatement.openingBalance() - clearedAmount);
        
        select sum(AmountCur) from bankAccountTrans
            where bankAccountTrans.AccountId  == _bankAccountStatement.AccountId
                && bankAccountTrans.AccountStatementDate == _bankAccountStatement.AccountStatementDate
                && bankAccountTrans.AccountStatement == _bankAccountStatement.AccountStatementNum
                && bankAccountTrans.SKS_CCR_IsCurrencyAdjustment == NoYes::Yes;
        //SKS_bug_8687 
        return clearedAmount + bankAccountTrans.AmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unreconciledAmountAggregate</Name>
				<Source><![CDATA[
    // 7542 - CR
    public static AmountCur unreconciledAmountAggregate(BankAccountStatement _bankAccountStatement)
    {
        AmountCur           clearedAmount;
        AmountCur           missingAmount;

        BankAccountStatement bankAccountStatement;

        while select bankAccountStatement
            order by AccountStatementDate
            where bankAccountStatement.AccountStatementDate <= _bankAccountStatement.AccountStatementDate
             && bankAccountStatement.AccountId == _bankAccountStatement.AccountId
        {
            BankTransTypeGroup bankTransTypeGroup = new BankTransTypeGroup(bankAccountStatement);
            clearedAmount = bankTransTypeGroup.createBankGroupSums();
            missingAmount += (bankAccountStatement.EndingBalance - bankAccountStatement.openingBalance() - clearedAmount);
        }
        return missingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unReconciledCurrencyBalance</Name>
				<Source><![CDATA[
    // SKS_FDD_13903 below code has been commented since this is not used in CCR
    /// <summary>
    /// update the transaction which is reconciled through reconcile statement button
    /// </summary>
    /// CR-9689
    /*public static void updateReconcileStatement(BankAccountStatement _bankAccountStatement)
    {
        changecompany(_bankAccountStatement.DataAreaId)
        {
            BankAccountTrans bankAccountTrans;
            bankAccountTrans.skipDataMethods(true);

            ttsbegin;
            update_recordset bankAccountTrans
                setting SKS_CCR_MarkedFromReconcileStatement = NoYes::Yes
                where bankAccountTrans.AccountId == _bankAccountStatement.AccountId
                    && bankAccountTrans.AccountStatement == _bankAccountStatement.AccountStatementNum
                    && bankAccountTrans.AccountStatementDate == _bankAccountStatement.AccountStatementDate
                    && bankAccountTrans.Included == NoYes::Yes
                    && bankAccountTrans.Reconciled == NoYes::Yes;

            ttscommit;
        }
    }*/

    // SKS_FDD_13903
    // Calculate the unReconciledCurrency Balance from the bank Transaction currency(BankTransAmountCur)
    public static AmountCur unReconciledCurrencyBalance(BankAccountStatement _bankAccountStatement)
    {
        AmountCur                   clearedAmount;
        AmountCur                   missingAmount;
        AmountCur                   totalAmount;
        // 7653 -->
        BankAccountTrans            bankAccountTrans;
        BankTransTypeGroupDetails   bankTransGroupDetails;

        BankTransTypeGroup bankTransTypeGroup = new BankTransTypeGroup(_bankAccountStatement);

        select sum(BankTransAmountCur) from bankAccountTrans
            where bankAccountTrans.AccountId  == _bankAccountStatement.AccountId
                && bankAccountTrans.AccountStatementDate == _bankAccountStatement.AccountStatementDate
                && bankAccountTrans.AccountStatement == _bankAccountStatement.AccountStatementNum
                && bankAccountTrans.SKS_CCR_IsCurrencyAdjustment == NoYes::No; //execlude the Currency adjustment transactions

        return bankAccountTrans.BankTransAmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>