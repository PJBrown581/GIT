<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AT_RAIFFEISENBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AT_RAIFFEISENBANK_XML extends SKS_EFT_Format_ISO_20022_001001003
/// </summary>
class SKS_EFT_Format_AT_RAIFFEISENBANK_XML extends SKS_EFT_Format_ISO_20022_001001003
{
    #define.FormatVersion('20230214')
    #define.SEPA('SEPA')
    #define.NON_SEPA('NON-SEPA')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Cdtr_Nm
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
        int len=0;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'AT-RAIFFEISENBANK-XML':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #SEPA:
                    case #NON_SEPA:
                        len = 70;
                        break;
                }
                break;
            default:
                len =140;
                break;
            
        }
        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', mSKS_EFT_FileDetail_VendAddress.BeneName, len);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        this.node_PstlAdr(_nodeCdtr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr, mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, mSKS_EFT_FileDetail_VendAddress.BeneCity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                      MmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeIntrmyAgt1;
        XmlElement nodeFinInstnId;
        XmlElement nodeBrnchId;
        XmlElement nodeClrSysMmbId;
        boolean printIntryAgt1 = true;
    
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'AT-RAIFFEISENBANK-XML':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #SEPA:
                    case #NON_SEPA:
                        printIntryAgt1 = false;
                        break;
                }
                break;
            
        }
        if((mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '' || mSKS_EFT_FileDetail_Intermediary.IntBankId != '')&& printIntryAgt1)
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(mSKS_EFT_FileDetail_Intermediary.IntBankSwift != '')
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
            }
    
            //                  ClrSysMmbId
            if(mSKS_EFT_FileDetail_Intermediary.IntBankId != '')
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail_Intermediary.IntBankId, 0, false);
            }
    
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 140, false);
    
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, mSKS_EFT_FileDetail_Intermediary.IntBankAddr + '' + mSKS_EFT_FileDetail_Intermediary.IntBankAddr2, '', mSKS_EFT_FileDetail_Intermediary.IntBankCity);
    
            //              BrnchId
            if(mSKS_EFT_FileDetail_Intermediary.IntBankBranch != '')
            {
                nodeBrnchId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Purp
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //              Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePurp;
        str value;

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Purp', mSKS_EFT_FileDetail.RecId));
        if(value && (mSKS_EFT_FileDetail.PaymSpec == #SEPA || mSKS_EFT_FileDetail.PaymSpec == #NON_SEPA))
        {
            //                  Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
    
        //              PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);
       
        //              Id
        this.node_PmtInf_Cdtr_Id(nodeCdtr);

        //      CtctDtls
        this.node_PmtInf_Cdtr_CtctDtls(nodeCdtr);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_CtctDtls</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_CtctDtls
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_CtctDtls(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      4.1: CtclDtls
        //      4.10.1: Nm
        //      4.10.2: PhneNb
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtctDtls;
        SKS_EB_Vendor sks_eb_vendor;
        str         email;
        if(mSKS_EFT_FileDetail.PaymSpec == #NON_SEPA)
        {


            sks_eb_Vendor = SKS_EB_Vendor::findByCompany(mSKS_EFT_FileDetail.PaymentCompany, mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        

            if(sks_eb_Vendor.EM1Vendor)
            {
                email =  VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).email();

                email = email ? email + ';' : email;
            }

            email = sks_eb_Vendor.EM2Addr ? email + sks_eb_Vendor.EM2Addr + ';' : email;

            email = sks_eb_Vendor.EM3Addr ? email + sks_eb_Vendor.EM3Addr + ';' : email;

            email = sks_eb_Vendor.EM4Addr ? email + sks_eb_Vendor.EM4Addr + ';' : email;

            if(email)
            {
                nodeCtctDtls = _nodeCdtr.appendChild(xmlDoc.createElement('CtctDtls'));

                //          E mail Address
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'EmailAdr', this.CharacterReplacement(email));
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
        XmlElement nodeSvcLvl;    
        str svclvl = SKS_EFT_Format::getCodelookupvalue('SvcLvlCd', mSKS_EFT_FileDetail.RecId);
        
        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.8: SvcLvl
        nodeSvcLvl = nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));
    
        if(mSKS_EFT_FileDetail.PaymSpec == #NON_SEPA && svclvl)
        {
           
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', svclvl);
        }
        else
        {
            //                  Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', 'SEPA');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_Id
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.16: Id
        //                          9.1.17: SchmeNm
        //                              9.1.18: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId != '')
        {
            //          9.1.12: Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  9.1.15: Othr
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      9.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', mSKS_EFT_FileDetail_BankAccount.WOrdPartyId, 35);
    
            if(mSKS_EFT_FileDetail.PaymSpec != #SEPA && mSKS_EFT_FileDetail.PaymSpec != #NON_SEPA)
            {
                //                          9.1.17: SchmeNm
                nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));

                //                              9.1.18: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'TXID');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_CtctDtls</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_CtctDtls
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_CtctDtls(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      4.1: CtclDtls
        //      4.10.1: Nm
        //      4.10.2: PhneNb
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtctDtls;
        str email = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Email',mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA)
        {
            nodeCtctDtls = _nodeDbtr.appendChild(xmlDoc.createElement('CtctDtls'));

            //          Email
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'EmailAdr', email);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //          Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);
    
        //          PstlAdr
        this.node_PmtInf_Dbtr_PstlAdr(nodeDbtr);
    
        //          Id
        this.node_PmtInf_Dbtr_Id(nodeDbtr);

        
        this.node_PmtInf_Dbtr_CtctDtls(nodeDbtr);
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_Nm
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
    
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_UltmtDbtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_UltmtDbtr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_UltmtDbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23: UltmtDbtr
        //              Nm
        //              BIC
        //              ClrSysMmbId
        //                  MmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeUltmtDbtr;
        boolean     printUltmtDbtr;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'AT-RAIFFEISENBANK-XML':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #SEPA:
                    case #NON_SEPA:
                        printUltmtDbtr = true;
                        break;
                }
                break;
            
        }

        if(mSKS_EFT_FileDetail.PaymentCompany !=  mSKS_EFT_FileDetail.AccountCompany &&
           SKS_PP_Setup::find().IHB_Active &&
           printUltmtDbtr)
        {
            //      2.23: UltmtDbtr
            nodeUltmtDbtr = nodePmtInf.appendChild(xmlDoc.createElement('UltmtDbtr'));
    
            //          Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeUltmtDbtr, 'Nm', CompanyInfo::findDataArea(mSKS_EFT_FileDetail.AccountCompany).name(), 140, false);
            
           
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAcct
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
    
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
    
        //      2.20: DbtrAcct
        nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
        //          Id
        nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.BankBankIBAN != '')
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
        }

        if(mSKS_EFT_FileDetail.PaymSpec == #SEPA || mSKS_EFT_FileDetail.PaymSpec == #NON_SEPA)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);

        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', SKS_EFT_Format::getCodelookupvalue('BankCurrencyCd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_ChrgBr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------
        if(mSKS_EFT_FileDetail.PaymSpec == #NON_SEPA)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr',SKS_EFT_Format::getCodelookupvalue('SvcLvlCd', mSKS_EFT_FileDetail.RecId));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'SLEV');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.29: InstrId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtId;
    
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));
    
        //              2.29: InstrId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    
        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 35));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    ///node_CdtTrfTxInf_CdtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeSchmeNm;
        XmlElement nodeOthr;
        boolean    printName,printID;
        str        ID,PrtryCountry;
    
        ID =SKS_EFT_Format::getCodelookupvalue('CdtrAgtID', mSKS_EFT_FileDetail.RecId);
        PrtryCountry =SKS_EFT_Format::getCodelookupvalue('PrtryCountry', mSKS_EFT_FileDetail.RecId);
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'AT-RAIFFEISENBANK-XML':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    
                    case #NON_SEPA:
                        printName = true;
                        printID = true;
                        break;
                }
                break;
        }
        
        //          2.77: CdtrAgt
        nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //              FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
        if(mSKS_EFT_FileDetail.DepSwiftNo != '')
        {
            //                  BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 11);
        }
        else if(printName && mSKS_EFT_FileDetail_BenBank.BenBankName)
        {
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName));
        }
        else if(printID && PrtryCountry && ID)
        {
            nodeOthr = nodeFinInstnId.appendChild(xmlDoc.createElement('Othr'));
            //                  ID
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', ID);

           
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', PrtryCountry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  BICorBEI
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        str TaxID;


        TaxID = SKS_EFT_Format::getCodelookupvalue('BenTaxId', mSKS_EFT_FileDetail.RecId);

        if(TaxID == '' && (mSKS_EFT_FileDetail.FormatId != 'AT-RAIFFEISENBANK-XML'))
        {
            TaxID = mSKS_EFT_FileDetail.VATNum;
    
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  BICorBEI
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'BICorBEI', TaxID);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAcct
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeSchmeNm;
        XmlElement nodeCdtrAcctIdOthr;
        boolean printAcctNum=false;
    
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'AT-RAIFFEISENBANK-XML':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    
                    case #NON_SEPA:
                        printAcctNum=true;
                        break;
                }
                break;
        }
        
        //          2.80: CdtrAcct
        nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
        //              Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            //                  IBAN
            nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
        }
        else if(mSKS_EFT_FileDetail.DepBankAcct && printAcctNum)
        {
            //                  Othr
            nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
                
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id',  mSKS_EFT_FileDetail.DepBankAcct);

            nodeSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BBAN');

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForCdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_InstrForCdtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_InstrForCdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.82: InstrForCdtrAgt
        //              InstrInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInstrForCdtrAgt;

        str value = SKS_EFT_Format::getCodelookupvalue('InstrForCdtrAgt', mSKS_EFT_FileDetail.RecId);
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #NON_SEPA && value)
        {
            //          2.82: InstrForCdtrAgt
            nodeInstrForCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('InstrForCdtrAgt'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInstrForCdtrAgt, 'Cd',value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]

    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()
    {
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('Document'));
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns', 'urn:multicash:cz:sepa:pain.001.002.03');
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns:xsi', 'http://www.w3.org/2001/XMLSchema-instance');
        nodeRoot = nodeRoot.appendChild(xmlDoc.createElement('CstmrCdtTrfInitn'));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>