<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_BF_Connection</Name>
	<SourceCode>
		<Declaration><![CDATA[
using  Microsoft.Dynamics.ApplicationPlatform.Environment;
using System.Reflection;
using System.Collections;

class SKS_BF_Connection
{
    Str gDNS;
    SKG_BF.Models.ClientCreds gClient = new SKG_BF.Models.ClientCreds();
    str gBaseUrl;
    SKG_File.Models.SKGFileModel gFile;
    SKS_EB_FileStorage gSKS_EB_FileStorage;
    SKG_File.Models.SKGFileAttributeModel gAttribute;
    SKG_File.Models.SKGResponseModel gResponse;
    SKG_File.Models.SKGAppendLineModel gAppend;
    str gFileName;
    str gBF_Location;
    str gFileBody;
    int gEncoding;
    utcdatetime gLastTripToTheServer;
    SKG_BF.Models.ERPResponseContract gBF_ResponseContract;
    private SKG_BF.Models.Direction gDirection;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBF_ResponseContract</Name>
				<Source><![CDATA[
    public SKG_BF.Models.ERPResponseContract getBF_ResponseContract(){return gBF_ResponseContract;}

]]></Source>
			</Method>
			<Method>
				<Name>getDirection</Name>
				<Source><![CDATA[
    public SKG_BF.Models.Direction  getDirection(){return gDirection;}

]]></Source>
			</Method>
			<Method>
				<Name>setDirection</Name>
				<Source><![CDATA[
    public void setDirection(SKG_BF.Models.Direction _SKG_BF_Models_Direction){gDirection = _SKG_BF_Models_Direction;}

]]></Source>
			</Method>
			<Method>
				<Name>constuct</Name>
				<Source><![CDATA[
    public static SKS_BF_Connection constuct()
    {
        return new SKS_BF_Connection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        select * from gSKS_EB_FileStorage;

        gDNS = SKS_EB_FileHub::getDNS(SKS_BF_BankIntType::BankFabric);
        gBaseUrl = gSKS_EB_FileStorage.BankFabricURL;

        gClient.Tenant = gSKS_EB_FileStorage.BankFabricTenant;
        gClient.Subscription = gSKS_EB_FileStorage.BankFabricSubscription;
        gClient.ClientId = gSKS_EB_FileStorage.BankFabricClientID;
        gClient.Secret = gSKS_EB_FileStorage.parmBankFabricClientIDS(false, '');
        gClient.Scope = gSKS_EB_FileStorage.BankFabricScope;
        gClient.URL = gSKS_EB_FileStorage.BankFabricURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BFPINExchange</Name>
				<Source><![CDATA[
    public void BFPINExchange()
    {
        SKS_EB_FileStorage sksFileStorage;
        SKS_BF_ResponseStatus sks_BF_ResponseStatus;

        SKS_PP_Setup lSKS_PP_Setup;
        select firstonly RegVersion from lSKS_PP_Setup;

        select firstonly sksFileStorage;
        Str myString = sksFileStorage.BankFabricPin;

        SKG_BF.Client.Sender sender = new SKG_BF.Client.Sender();

        SKG_BF.Models.SecretsContract contract = new SKG_BF.Models.SecretsContract();

        SKG_BF.Models.ERPResponseContract responseContract = new SKG_BF.Models.ERPResponseContract();

        contract.DNS = gDNS;
        contract.PIN = sksFileStorage.BankFabricPin;
        contract.TASVersion = lSKS_PP_Setup.RegVersion;

        sender.SecretsContract = contract;

        sender.PinExchange(sksFileStorage.BankFabricURL);

        responseContract = sender.ResponseContract;

        ttsbegin;
        sksFileStorage.selectForUpdate(true);

        sksFileStorage.BankFabricResponseStatus = str2Enum(sks_BF_ResponseStatus,responseContract.Status.ToString());

        if (responseContract.Status == SKG_BF.Models.ERPResponseModelStatus::PINExchangeComplete)
        {
            sksFileStorage.BankFabricClientID = sender.SecretsContract.ClientId;
            sksFileStorage.BankFabricClientIDS = sender.SecretsContract.Secret;
            sksFileStorage.BankFabricSecretName = sender.SecretsContract.SecretName;
            sksFileStorage.BankFabricTenant = sender.SecretsContract.Tenant;
            sksFileStorage.BankFabricSubscription = sender.SecretsContract.Subscription;
            sksFileStorage.BankFabricScope = sender.SecretsContract.Scope;
            sksFileStorage.BankFabricPin = '';
            sksFileStorage.BankfabricPinExchDatetime = DateTimeUtil::getSystemDateTime();
            sksFileStorage.BankFabricResponseReason = "@SKS:SKGBFPinExchangedSuccessfully";


            Box::infoOnceModal("@SKS:SKGBFResponse","@SKS:SKGBFPINExchange" ,"@SKS:SKGBFPinExchangeSucceeded" , "@SYS80122") ;
        }
        else
        {
            Box::infoOnceModal("@SKS:SKGBFResponse","@SKS:SKGBFPinExchangeFailed" ,responseContract.FailureReason , "@SYS32112") ;
            sksFileStorage.BankFabricResponseReason = responseContract.FailureReason;
            sksFileStorage.BankfabricPinExchDatetime = utcDateTimeNull();
            sksFileStorage.BankFabricClientID = '';
            sksFileStorage.BankFabricClientIDS = '';
            sksFileStorage.BankFabricTenant = '';
            sksFileStorage.BankFabricSubscription = '';
            sksFileStorage.BankFabricScope = '';
        }

        sksFileStorage.update();
        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>BFGetFileLocation</Name>
				<Source><![CDATA[
    public container BFGetFileLocation(SKS_BF_FileLocCategory _Category,SKS_BF_LookupTable _BFLookupTable = SKS_BF_LookupTable::FileLocations, boolean _test = false)
    {
        container    conFileLocationList;

        conFileLocationList = this.GetLookupList(_Category,_BFLookupTable,_test);
        
        return conFileLocationList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLookupList</Name>
				<Source>
                      <![CDATA[
    private container GetLookupList(SKS_BF_FileLocCategory _Category, SKS_BF_LookupTable _BFLookupTable, boolean _test)
    {
        SKS_BF_ResponseStatus   sks_BF_ResponseStatus;
        int                     listCount,i;
        container               conFileLocation,conFileLocationList;
        str                     contractCategory;

        SKG_BF.Client.Sender sender = new SKG_BF.Client.Sender();
        SKG_BF.Models.MultiFieldDropdownContract bfFileLocationContract = new SKG_BF.Models.MultiFieldDropdownContract();
        SKG_BF.Models.MultiFieldDropdowns bfFileLocation = new SKG_BF.Models.MultiFieldDropdowns();
        bfFileLocationContract.SecretName = gSKS_EB_FileStorage.BankFabricSecretName;

       

        SKG_BF.Models.ERPResponseContract responseContract = new SKG_BF.Models.ERPResponseContract();

        try
        {
        
            sender.Credentials = gClient;
            bfFileLocationContract.DNS = gDNS;
            switch(_BFLookupTable)
            {
                case SKS_BF_LookupTable::FileLocations:
                    bfFileLocationContract.LookupTable = SKG_BF.Models.LookupTable::FileLocations;
                    break;

                case SKS_BF_LookupTable::FileNames:
                    bfFileLocationContract.LookupTable = SKG_BF.Models.LookupTable::FileNames;
                    break;

                case SKS_BF_LookupTable::Communications:
                    bfFileLocationContract.LookupTable = SKG_BF.Models.LookupTable::Communications;
                    break;

                case SKS_BF_LookupTable::Paths:
                    bfFileLocationContract.LookupTable = SKG_BF.Models.LookupTable::Paths;
                    break;
                
                case SKS_BF_LookupTable::PCardReconFormats:
                    bfFileLocationContract.LookupTable = SKG_BF.Models.LookupTable::PCardFormats;
                    break;
            }
            
            if(gDirection != new SKG_BF.Models.Direction())
                bfFileLocationContract.Direction = gDirection;
            
            switch (_Category)
            {
                case SKS_BF_FileLocCategory::APEFT:
                    bfFileLocationContract.Category = 'AP EFT+ OutBound';
                    bfFileLocationContract.Module = 'AP EFT+';
                    break;

                case SKS_BF_FileLocCategory::AREFT:
                    bfFileLocationContract.Category = 'Direct Debit OutBound';
                    bfFileLocationContract.Module = 'Direct debit';
                    break;
                case SKS_BF_FileLocCategory::ARES:
                    bfFileLocationContract.Category = 'AR eSettlement';
                    bfFileLocationContract.Module = 'ARES';
                    break;
                case SKS_BF_FileLocCategory::ARESExt:
                    bfFileLocationContract.Category = 'AR eSettlement External';
                    bfFileLocationContract.Module = 'ARESExternal';
                    break;
                case SKS_BF_FileLocCategory::APEFTInbound:
                    bfFileLocationContract.Category = 'AP EFT+ InBound';
                    bfFileLocationContract.Module = 'AP EFT+';
                    break;

                case SKS_BF_FileLocCategory::AREFTInbound:
                    bfFileLocationContract.Category = 'Direct Debit InBound';
                    bfFileLocationContract.Module = 'Direct debit';
                    break;
                case SKS_BF_FileLocCategory::BR:
                    bfFileLocationContract.Category = 'Bank Rec';
                    bfFileLocationContract.Module = 'eBank Rec';
                    break;
                case SKS_BF_FileLocCategory::CCR:
                    bfFileLocationContract.Category = 'Credit Card Rec';
                    bfFileLocationContract.Module = 'Credit Card Rec';
                    break;
                case SKS_BF_FileLocCategory::PosPay:
                    bfFileLocationContract.Category = 'Positive Pay';
                    bfFileLocationContract.Module = 'Positive Pay';
                    break;
                case SKS_BF_FileLocCategory::FXInboundTradeAck:                
                    bfFileLocationContract.Category = 'FXAll Inbound Trade';
                    bfFileLocationContract.Module = 'FX automation';
                    break;

                case SKS_BF_FileLocCategory::FXInboundSettlement:
                    bfFileLocationContract.Category = 'FXAll Inbound Settlement';
                    bfFileLocationContract.Module = 'FX automation';
                    break;

                case SKS_BF_FileLocCategory::FXOutboundPymtInstr:
                    bfFileLocationContract.Category = 'FXAll Outbound Payment';
                    bfFileLocationContract.Module = 'FX automation';
                    break;
                
                case SKS_BF_FileLocCategory::FXOutboundTrade:
                    bfFileLocationContract.Category = 'FXAll Outbound Trade';
                    bfFileLocationContract.Module = 'FX automation';
                    break;
                
                case SKS_BF_FileLocCategory::BTB:
                    bfFileLocationContract.Category = 'Bank to bank Outbound';
                    bfFileLocationContract.Module = 'Bank to bank transfer';
                    break;

                case SKS_BF_FileLocCategory::BTBInbound:
                    bfFileLocationContract.Category = 'Bank to bank Inbound';
                    bfFileLocationContract.Module = 'Bank to bank transfer';
                    break;

                case SKS_BF_FileLocCategory::CNP:
                    bfFileLocationContract.Category = 'Customer reimbursement Outbound';
                    bfFileLocationContract.Module = 'Customer reimbursement';
                    break;

                case SKS_BF_FileLocCategory::CNPInbound:
                    bfFileLocationContract.Category = 'Customer reimbursement Inbound';
                    bfFileLocationContract.Module = 'Customer reimbursement';
                    break;
                case SKS_BF_FileLocCategory::ElectronicFundsFileRelocation:
                    bfFileLocationContract.Category = 'Electronic Funds file relocation';
                    bfFileLocationContract.Module = 'Electronic Funds file relocation';
                    break;
                case SKS_BF_FileLocCategory::MandateAutomation:

                    if(gDirection == SKG_BF.Models.Direction::In)
                    {
                        bfFileLocationContract.Category = 'Mandate automation inbound';                        
                    }
                    else
                    {
                        bfFileLocationContract.Category = 'Mandate automation outbound';
                    }
                    bfFileLocationContract.Module = 'Mandate automation';
                    break;
                case SKS_BF_FileLocCategory::MandateAutomationInbound:
                    bfFileLocationContract.Category = 'Mandate automation inbound';
                    bfFileLocationContract.Module = 'Mandate automation';
                    break;

                case SKS_BF_FileLocCategory::InHouseBankInterestRate:
                    bfFileLocationContract.Category = 'In House Bank Interest';
                    bfFileLocationContract.Module = 'In-house bank interest rate';
                    break;

                case SKS_BF_FileLocCategory::IHBExternalVendor:
                    bfFileLocationContract.Category = 'In house bank vendor netting';
                    bfFileLocationContract.Module = 'In house bank vendor netting';
                    break;
                case SKS_BF_FileLocCategory::PCard:
                    bfFileLocationContract.Category = 'PCard recon inbound';
                    bfFileLocationContract.Module = 'PCard recon';
                    break;
                case SKS_BF_FileLocCategory::PRA:
                    bfFileLocationContract.Category = 'Payment remittance automation';
                    bfFileLocationContract.Module = 'Payment remittance automation';
                    break;                    
            }


            sender.MultiFieldDropdownContract = bfFileLocationContract;
               
            sender.GetMultiFieldDropdownList();

            bfFileLocationContract = sender.MultiFieldDropdownContract;
            
            SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bfFileLocationContract);

            if (bfFileLocationContract.Success)
            {

                if (_test)
                {
                    conFileLocationList = conIns(conFileLocationList,1,"@SKS:SKGBFConnectionSuccess");
                }
                else
                {
                    listCount = sender.MultiFieldDDLListCount();
                
                    for (i = 1 ; i <= listCount ; i++)
                    {
                        bfFileLocation = sender.GetMultiFieldDropdownItem(i-1);
                        conFileLocation = conIns(conFileLocation,1,bfFileLocation.Name);
                        conFileLocation = conIns(conFileLocation,2,bfFileLocation.Description);

                        conFileLocationList = conIns(conFileLocationList,i,conFileLocation);
                    }
                }

            }
            else
            {
                if (_test)
                {
                    conFileLocationList = conIns(conFileLocationList,1,"@SKS:SKGBFConnectionFail" + sender.ResponseContract.FailureReason);
                }
                else
                {
                    Error(sender.ResponseContract.FailureReason);
                }
            }
            
        }
        catch
        {
            Error("@SKS:SKGBFConnectionError") ;
        }

        return conFileLocationList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>P66682fb1b1e479ca2532ca62e10c079</Name>
				<Source><![CDATA[
    public static void P66682fb1b1e479ca2532ca62e10c079(System.Object _ResponseObject)
    {
        SKS_EB_FileStorage locSKS_EB_FileStorage;

        System.String[] locSNS = SKG_BF.Models.SKG_BF_Functions::P66682fb1b1e479ca2532ca62e10c079(_ResponseObject);
        if(!System.String::IsNullOrEmpty(locSNS.GetValue(1)) && !System.String::IsNullOrEmpty(locSNS.GetValue(0)))
        {
            str secnme = locSNS.getValue(0) ;
            str sec =     locSNS.getValue(1);
            select firstonly forupdate locSKS_EB_FileStorage;
            locSKS_EB_FileStorage.BankFabricSecretName = secnme;
            locSKS_EB_FileStorage.BankFabricClientIDS = sec;
            ttsbegin;
            locSKS_EB_FileStorage.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetCredentialContract</Name>
				<Source><![CDATA[
    public static SKG_BF.Models.ClientCreds SetCredentialContract(SKS_BF_AzureOperation _Operation)
    {
        SKS_EB_FileStorage sksFileStorage;
        select firstonly sksFileStorage;
        str BFURL;
        
        SKG_BF.Models.ClientCreds credsContract = new SKG_BF.Models.ClientCreds();

        credsContract.Tenant = sksFileStorage.BankFabricTenant;
        credsContract.Subscription = sksFileStorage.BankFabricSubscription;
        credsContract.ClientId = sksFileStorage.BankFabricClientId;
        credsContract.Secret = sksFileStorage.parmBankFabricClientIDS(false, '');
        credsContract.Scope = sksFileStorage.BankFabricScope;
        
        BFURL = sksFileStorage.BankFabricURL;
        BFURL = SKS_BF_Connection::GetBankFabricURL(BFURL, _Operation);

        credsContract.URL =  BFURL; 

        return credsContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetCommNameFromString</Name>
				<Source><![CDATA[
    public static str  GetCommNameFromString(str _commName_Path = '', str _fileName = '')
    {
        str commName_Path = _commName_Path;

        if (commName_Path == null || commName_Path == '')
        {
            return '';
        }
        
        List strList = new List(Types::String);
        strList = strSplit(commName_Path, '/');
        ListEnumerator le;
        str brCommName = '';

        le = strList.getEnumerator();
        le.reset();
        le.moveNext();
        if(le.current() != null)
        {
            brCommName = le.current();
        }
        
        return brCommName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetPathFromString</Name>
				<Source><![CDATA[
    public static str GetPathFromString(str _commName_Path = '', str _fileName = '')
    {
        str commName_Path = _commName_Path;

        if (commName_Path == null || commName_Path == '')
        {
            return '';
        }
        
        List strList = new List(Types::String);
        strList = strSplit(commName_Path, '/');
        ListEnumerator le;
        str bfPath = '';

        le = strList.getEnumerator();
        le.reset();

        le.moveNext();
        str brCommName = le.current();

        le.moveNext();

        if (le.current() != null)
        {
            bfPath = le.current();
        }

        return bfPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetFileList</Name>
				<Source><![CDATA[
    public List GetFileList( str _directory, str searchPattern)
    {
        List locFilenames = new List(Types::String);
        SKS_EB_FileStorage locSKS_EB_FileStorage;
        
        SKG_BF.Models.FileContract bF_fileContract = new SKG_BF.Models.FileContract();
        SKG_BF.Client.Sender bf_Sender = new SKG_BF.Client.Sender();
        bf_Sender.FileAction = SKG_BF.Models.FileContractAction::GetFileList;

        bF_fileContract.Action =  SKG_BF.Models.FileContractAction::GetFileList;
        bF_fileContract.BankFabricFileLocation = _directory;
        bF_fileContract.DNS = gDNS;
        
        str resource = SKS_BF_Connection::GetBankFabricURL(gBaseUrl, SKS_BF_AzureOperation::GetFileList);
        bF_fileContract.RuntimeUrl = resource;
        bF_fileContract.SecretName = locSKS_EB_FileStorage.BankFabricSecretName;
        bf_Sender.Credentials = gClient;
        bf_Sender.FileContract = bF_fileContract;

        bf_Sender.GetFileListForFolder();

        gBF_ResponseContract = bF_Sender.ResponseContract;

        SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(gBF_ResponseContract);

        int numFiles = bf_Sender.FileListCount();

        for (int i = 1; i <= numFiles ; i++)
        {
            locFilenames.addEnd(bf_Sender.GetFileListItem(i -1));
        }

        return locFilenames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetBankFabricURL</Name>
				<Source>
                  <![CDATA[
    public static str GetBankFabricURL(str _URL, SKS_BF_AzureOperation _Operation)
    {
        int URLLength;
        boolean shorturl;
        str BFURL;

        BFURL = strLRTrim(_URL);
        URLLength = strLen(BFURL);
        shorturl = (strFind(BFURL,'/',URLLength,URLLength*-1) ==  URLLength) ? false : true;

        if (shorturl)
        {
            BFURL = BFURL + '/';
        }
        
        switch (_Operation)
        {
            case SKS_BF_AzureOperation::SendFile:                
                BFURL = BFURL + 'api/erp/sendfiles/';                
                break;

            case SKS_BF_AzureOperation::GetFile:
                BFURL = BFURL + 'api/erp/getfiles/';              
                
                break;

            case SKS_BF_AzureOperation::CheckFileExists:
                BFURL = '/NotImplemented/';
                break;

            case SKS_BF_AzureOperation::Communication:
                BFURL = BFURL + 'api/erp/communication/';            
                
                break;

            case SKS_BF_AzureOperation::DeleteFile:
                BFURL = BFURL + 'api/erp/deletefile/'; 
                break;

            case SKS_BF_AzureOperation::CopyFile:
                BFURL = BFURL + 'api/erp/copyfile/';
                break;

            case SKS_BF_AzureOperation::GetFileList:
                BFURL = BFURL + 'api/erp/filelistfordirectory/';
                
                break;

            case SKS_BF_AzureOperation::MoveFile:
                BFURL = BFURL + 'api/erp/movefile/';                
                
                break;

            case SKS_BF_AzureOperation::MultiFieldDropdown:
                BFURL = BFURL + 'api/erp/getlookuplist/';
                
                break;

            case SKS_BF_AzureOperation::EFTFormat:
                BFURL = BFURL + 'api/eftformat/';
                break;
            case SKS_BF_AzureOperation::GetBRStatementAPI:
                BFURL = BFURL + 'api/erp/bankstatements/import';
                break;

            case SKS_BF_AzureOperation::EFTFormatInbound:
                BFURL = BFURL + 'api/eftformat/inbound/';
                
                break;

            case SKS_BF_AzureOperation::PaymentStatus:
                BFURL = BFURL + 'api/erp/payments/status/';
                
                break;

            case SKS_BF_AzureOperation::PaymentCreate:
                BFURL = BFURL + 'api/erp/payments/create/';
                break;
            
            case SKS_BF_AzureOperation::PCardInbound:
                BFURL = BFURL + 'api/erp/pcardrecon/import/';
                break;
                
            case SKS_BF_AzureOperation::PRA:
                BFURL = BFURL + 'api/erp/paymentremitautomation/imports/';               
        
                break;                
        }

        return BFURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributes</Name>
				<Source><![CDATA[
    public SKG_File.Models.SKGFileModel getAttributes(boolean _getBody)
    {
        if (gFile == null || gFileName == '')
            throw error("@SKS:SKGFileNameBlank");

        SKG_BF.Models.FileContract bF_FileContract = new SKG_BF.Models.FileContract(); // BankFabric
        SKG_BF.Client.Sender bF_Sender = new SKG_BF.Client.Sender();
        
        gFile.FileBody = '';
        gFile.FileEncoding = gEncoding;

        // Always set the Action on both FileHub and BankFabric objects
        if (_getBody) 
        {
            bF_Sender.FileAction = SKG_BF.Models.FileContractAction::GetFile;
            gFile.Action = SKG_File.Models.SKGFileAction::OpenFile;
        }
        else
        {
            bF_Sender.FileAction = SKG_BF.Models.FileContractAction::GetAttributesOnly;
            gFile.Action = SKG_File.Models.SKGFileAction::InquireAttributes;
        }
        bF_Sender.Credentials = gClient;
        
        bF_FileContract.SecretName = gSKS_EB_FileStorage.BankFabricSecretName;
        bF_FileContract.BankFabricFileLocation = gBF_Location;
        bF_FileContract.crlf = gFile.FileCRLF;
        bF_FileContract.BOMRemove = gFile.FileRemoveUTF8BOM;
        bF_FileContract.FileName = gFile.FileName;
        bF_FileContract.DNS = gDNS;
        bF_FileContract.RuntimeUrl = gClient.URL;
        bF_FileContract.Action = bF_Sender.FileAction;

        bF_Sender.FileContract = bF_FileContract;

        // Making the API call
        bF_Sender.GetFiles();

        SKG_BF.Models.ERPResponseContract bF_ResponseContract = bF_Sender.ResponseContract;

        SKS_BF_Connection::P66682fb1b1e479ca2532ca62e10c079(bF_ResponseContract);
            
        SKG_File.Models.SKGFileAttributeModel fileAttrib = gFile.Attribute;

        // Set original file hub contract data as if calling file hub
        if (bF_ResponseContract.FileAttributes != null)
        {
            fileAttrib.CreateDateUTC = bF_ResponseContract.FileAttributes.CreateDateUTC;
            fileAttrib.ModifiedDateUTC = bF_ResponseContract.FileAttributes.ModifiedDateUTC;
            fileAttrib.Size = bF_ResponseContract.FileAttributes.Size;
            fileAttrib.Exists = bF_ResponseContract.FileAttributes.Exists;
        }
        gFile.FileBody = bF_ResponseContract.data;
        gFile.Attribute = fileAttrib;

        if (gFile.Response.ExceptionLabelId == '')
        {
            gAttribute = gFile.Attribute;
            gFileBody = gFile.FileBody;
        }

        return gFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFLocation</Name>
				<Source><![CDATA[
    public static str getBFLocation(SKS_EB_FilePathName _SKS_EB_FilePathName)
    {
        System.String[] locBFLocationAndName;
        if(strContains(_SKS_EB_FilePathName,@'/'))
            locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_SKS_EB_FilePathName,@'//');
        else if(strContains(_SKS_EB_FilePathName,@'\'))
            locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_SKS_EB_FilePathName,@'\\');
        else
            throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
        return locBFLocationAndName.GetValue(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFFileName</Name>
				<Source><![CDATA[
    public static str getBFFileName(SKS_EB_FilePathName _SKS_EB_FilePathName)
    {
        System.String[] locBFLocationAndName;
        if(strContains(_SKS_EB_FilePathName,@'/'))
            locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_SKS_EB_FilePathName,@'//');
        else if(strContains(_SKS_EB_FilePathName,@'\'))
            locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_SKS_EB_FilePathName,@'\\');
        else
            throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
        return locBFLocationAndName.GetValue(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileName</Name>
				<Source><![CDATA[
    public SKG_File.Models.SKGFileModel setFileName(str _fileName,
                                                    str preCommand = '',
                                                    str preArgument = '',
                                                    str posCommand = '',
                                                    str posArgument = '',
                                                    str _filePath = '',
                                                    str _fileNumber = '',
                                                    str _companyId = '')
    {
        System.String[] locBFLocationAndName;
        if(strContains(_fileName,@'/'))
            locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'//'); 
        else if(strContains(_fileName,@'\'))
            locBFLocationAndName = System.Text.RegularExpressions.Regex::Split(_fileName,@'\\');
        else
            throw Global::error("@SKS:SKGBRFileErrorBFNameStructure");
        gBF_Location = locBFLocationAndName.GetValue(0);
        gFileName = locBFLocationAndName.GetValue(1);
        gFile = new SKG_File.Models.SKGFileModel();
        gFile.FullName = gFileName;
        gFile.CommandPre = preCommand;
        gFile.CommandPreArguments = preArgument;
        gFile.CommandPos = posCommand;
        gFile.CommandPosArguments = posArgument;

        gAppend = null;
        gResponse = null;
        GAttribute = null;

        gFileBody = '';
        gLastTripToTheServer  = utcDateTimeNull();
        return gFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEncoding</Name>
				<Source><![CDATA[
    public int parmEncoding(int _encoding = gEncoding)
    {
        gEncoding = _encoding;
        return gEncoding;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>