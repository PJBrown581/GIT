<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_SendPayLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_SendPayLink extends RunBase
{
    SKS_PP_Setup    sks_PP_Setup;
    CustAccount     custAccount;
    CustName        custName;
    Email           linkEmail;
    SMS             linkSMS;
    ItemFreeTxt     linkMessage;
    Amount          linkAmount, callerAmount;
    Amount          callerTaxAmount;
    DialogField     dfCustomer;
    DialogField     dfCustomerName;
    DialogField     dfLinkEmail;
    DialogField     dfLinkSMS;
    DialogField     dfLinkMessage;
    DialogField     dfLinkAmount;
    DialogField     dfDocumentId;
    DialogField     dfDocumentType;
    DialogField     dfPFCustomer;
    SalesTable      callerSalesTable;
    CustTable       callerCustTable;
    RefTableId      oneTimeCustRefTableId;
    RefRecId        oneTimeCustRefRecId;
    String50        payFabricCustomerNbr;
    Common          callerRecord;
    boolean         isPreAuth;
    Num             callerDocId;
    FieldLabel      callerFldLabelForCtrl;
    SKS_CC_PayLinkEntityType callerDocumentType;
    LedgerJournalTrans callerLedgerJournalTrans;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>customerEmail_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the customer email lookup.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormControl</c> object that needs the lookup.
    /// </param>
    private void customerEmail_lookup(FormStringControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        QueryBuildRange         qbrType;
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tableNum(DirPartyContactInfoView));
        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Type));
        qbrType.value(queryValue(LogisticsElectronicAddressMethodType::Email));

        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Party));
        qbrType.value(queryValue(callerCustTable.Party));

        _formControl.lookupButton(FormLookupButton::Always);

        sysTableLookup  = SysTableLookup::newParameters(tableNum(DirPartyContactInfoView), _formControl);
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, Locator));
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, IsPrimary));
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, LocationName));        

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerPhone_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the customer phone lookup.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormControl</c> object that needs the lookup.
    /// </param>
    private void customerPhone_lookup(FormStringControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        QueryBuildRange         qbrType;
        Query                   query = new Query();
        QueryBuildDataSource    qbds = query.addDataSource(tableNum(DirPartyContactInfoView));
        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Type));
        qbrType.value(queryValue(LogisticsElectronicAddressMethodType::Phone));

        qbrType = qbds.addRange(fieldNum(DirPartyContactInfoView, Party));
        qbrType.value(queryValue(callerCustTable.Party));

        _formControl.lookupButton(FormLookupButton::Always);

        sysTableLookup  = SysTableLookup::newParameters(tableNum(DirPartyContactInfoView), _formControl);
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, Locator));
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, IsPrimary));
        sysTableLookup.addLookupfield(fieldNum(DirPartyContactInfoView, LocationName));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase       dialog;

        dialog = super();

        dialog.addText("@SKS:SKGCCSendPayLinkInstructionText", 400);
        if (!this.parmIsPreAuth())
        {
            dialog.addText("@SKS:SKGCCSendPrePaymentAddtlInstructionText", 400);
        }

        dfLinkEmail = dialog.addField(extendedtypestr(Email), "@SKS:SKGCCSendEmailTo");
        dfLinkSMS = dialog.addField(extendedtypestr(SMS), "@SKS:SKGCCSendSMSTo");
        dfLinkAmount = dialog.addField(extendedtypestr(AmountCur), "@SKS:SKGCCAmount");
        dfLinkAmount.value(callerAmount);
        if (isPreAuth)
        {
            dfLinkAmount.allowEdit(false);
            dfLinkAmount.skip(true);
        }

        dfLinkMessage = dialog.addField(extendedtypestr(ItemFreeTxt), "@SKS:SKGCCMessageOptional");

        dfDocumentId = dialog.addField(extendedtypestr(String30), callerFldLabelForCtrl);
        dfDocumentId.allowEdit(false);
        dfDocumentId.skip(true);
        dfDocumentId.value(callerDocId);

        dfDocumentType = dialog.addField(enumstr(SKS_CC_PayLinkEntityType), "@SKS:SKGCCDocumentType");
        dfDocumentType.allowEdit(false);
        dfDocumentType.skip(true);
        dfDocumentType.value(callerDocumentType);

        dfCustomer = dialog.addField(extendedtypestr(custAccount));
        dfCustomerName = dialog.addField(extendedtypestr(CustName));        

        dfCustomer.allowEdit(false);
        dfCustomer.skip(true);
        dfCustomer.value(custAccount);

        dfCustomerName.allowEdit(false);
        dfCustomerName.skip(true);
        dfCustomerName.value(callerCustTable.name());

        if (oneTimeCustRefTableId && oneTimeCustRefRecId && payFabricCustomerNbr)
        {
            dfPFCustomer = dialog.addField(extendedtypestr(String50), "@SKS:SKGCCOneTimeCustPFNbr");
            dfPFCustomer.allowEdit(false);
            dfPFCustomer.skip(true);
            dfPFCustomer.value(payFabricCustomerNbr);
        }
        
        Email custEmail;
        SMS custSMS;

        if (sks_PP_Setup.CCPLContactDefaultPreference == SKS_CC_PLContactDefaultPreference::Email)
        {
            custEmail = SKS_CC_SendWalletLink::getPrimaryOrFirstElectronicAddressByType(callerCustTable.Party,
                LogisticsElectronicAddressMethodType::Email);

            if (custEmail)
            {
                dfLinkEmail.value(custEmail);
            }            
        }

        if (!custEmail && sks_PP_Setup.CCPLContactDefaultPreference == SKS_CC_PLContactDefaultPreference::Phone)
        {
            custSMS = SKS_CC_SendWalletLink::getPrimaryOrFirstElectronicAddressByType(callerCustTable.Party,
                LogisticsElectronicAddressMethodType::Phone);

            if (custSMS)
            {
                dfLinkSMS.value(custSMS);
            }
        }

        dfLinkEmail.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                     methodStr(SKS_CC_SendWalletLink, customerEmail_lookup),
                                                     this);

        dfLinkSMS.control().registerOverrideMethod(methodStr(FormStringControl, lookup),
                                                   methodStr(SKS_CC_SendWalletLink, customerPhone_lookup),
                                                   this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        const str phoneLongDistanceDigitUS = '1';

        ret = super();
        
        linkEmail = dfLinkEmail.value();
        linkSMS = dfLinkSMS.value();
        if (linkSMS)
        {
            linkSMS = strAlpha(linkSMS);
            if (!strStartsWith(linkSMS, phoneLongDistanceDigitUS))
            {
                linkSMS = phoneLongDistanceDigitUS + linkSMS;
            }            
        }

        linkAmount = dfLinkAmount.value();
        linkMessage = dfLinkMessage.value();

        custAccount = dfCustomer.value();
        custName = dfCustomerName.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPreAuth</Name>
				<Source><![CDATA[
    public boolean parmIsPreAuth(boolean _isPreAuth = isPreAuth)
    {
        isPreAuth = _isPreAuth;
        return isPreAuth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValuesFromCallingRecord</Name>
				<Source><![CDATA[
    public boolean setValuesFromCallingRecord(Common _callingRecord)
    {
        SKS_CC_PayLinkQueue payLinkQueueCheck;
        AmountCur salesOrderTotalAmount, markedAmount;

        sks_PP_Setup = SKS_PP_Setup::find();

        if (sks_pp_setup.ModCC == NoYes::No || sks_pp_setup.CCPLEnablePayLinks == NoYes::No)
        {
            throw error("@SKS:SKGCCSendPayLinkIsNotAllowedErrorMsg");
        }

        if (!sks_pp_setup.CCPayLinkEnumUpgraded)
        {
            throw error("@SKS:SKGCCRefreshLinkIsNotAllowedDueToUpgrade");
        }

        callerRecord = _callingRecord;
        switch (callerRecord.TableId)
        {
            case tableNum(SalesTable):
                callerSalesTable = _callingRecord;               

                // Reread record to ensure the latest changes are fetched.
                callerSalesTable.reread();

                callerCustTable = callerSalesTable.custTable_InvoiceAccount();

                if (callerSalesTable.SalesType == SalesType::ReturnItem)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidTypeForSendPayLinksErrorMsg", callerSalesTable.SalesId, enum2Str(callerSalesTable.SalesType)));
                }

                if (callerSalesTable.SalesStatus == SalesStatus::Invoiced || callerSalesTable.SalesStatus == SalesStatus::Canceled)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidStatusForSendPayLinksErrorMsg", callerSalesTable.SalesId, enum2Str(callerSalesTable.SalesStatus)));
                }

                if (callerSalesTable.ProjId)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidDueToProjectForSendPaylinksErrorMsg", callerSalesTable.SalesId, callerSalesTable.ProjId));
                }

                if (isPreAuth && callerSalesTable.payment().CreditCardPaymentType != CreditCardPaymentType::CreditCard)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidDueToPaymTermForSendPaylinksErrorMsg", callerSalesTable.SalesId));
                }

                if (!isPreAuth)
                {
                    if (sks_PP_Setup.CCUsePaymModeForSOPrePay)
                    {
                        if (!callerSalesTable.PaymMode)
                        {
                            throw error(strFmt("@SKS:SKGCCMustSpecifyMOPOnSOForPrePayMsg",
                                fieldId2PName(tableNum(SKS_PP_Setup), fieldNum(SKS_PP_Setup, CCUsePaymModeForSOPrePay)),
                                callerSalesTable.SalesId));
                        }

                        CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(callerSalesTable.PaymMode);
                        if (custPaymModeTable.PaymentType != CustPaymentType::CreditCard)
                        {
                            throw error(strFmt("@SKS:SKGCCMustSpecifyMOPOnSOForPrePayMsg",
                                fieldId2PName(tableNum(SKS_PP_Setup), fieldNum(SKS_PP_Setup, CCUsePaymModeForSOPrePay)),
                                callerSalesTable.SalesId));
                        }

                        if (!custPaymModeTable.offsetLedgerDimension())
                        {
                            throw error(strFmt("@SKS:SKGCCMustSpecifyMOPWithOffsetOnSOForPrePayMsg",
                                fieldId2PName(tableNum(SKS_PP_Setup), fieldNum(SKS_PP_Setup, CCUsePaymModeForSOPrePay)),
                                callerSalesTable.SalesId));
                        }
                    }
                    else
                    {
                        if (!sks_PP_Setup.CCPLPrePaymentPaymMode)
                        {
                            throw error(strFmt("@SKS:SKGCCCannotFindPaymModeForPrePayJournal", tableId2PName(callerSalesTable.TableId), callerSalesTable.RecId));
                        }
                    }
                }

                if (callerCustTable.OneTimeCustomer)
                {
                    oneTimeCustRefTableId = callerSalesTable.TableId;
                    oneTimeCustRefRecId = callerSalesTable.RecId;
                }
                this.setPayFabricCustomerNbr();

                payLinkQueueCheck = SKS_CC_PayLinkQueue::FindByRefWithTypeAndStatus(
                    callerSalesTable.TableId,
                    callerSalesTable.RecId,
                    SKS_CC_PayLinkProcessStatus::Pending,
                    SKS_CC_PayLinkTransactionType::PayLink,
                    payFabricCustomerNbr);

                if (payLinkQueueCheck)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidDueToPayLinkFoundForSendPayLinks", callerSalesTable.SalesId));
                }

                payLinkQueueCheck = SKS_CC_PayLinkQueue::FindByRefWithTypeAndStatus(
                    callerSalesTable.TableId,
                    callerSalesTable.RecId,
                    SKS_CC_PayLinkProcessStatus::Error,
                    SKS_CC_PayLinkTransactionType::PayLink,
                    payFabricCustomerNbr);

                if (payLinkQueueCheck)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidDueToErrorPayLinkFoundForSendPayLinks", callerSalesTable.SalesId));
                }

                CreditCardAuthTrans ccAuthTrans = CreditCardAuthTrans::findValidPreApproval(callerSalesTable.SalesId);
                if (ccAuthTrans)
                {
                    throw error(strFmt("@SKS:SKGCCInvalidDueToPreAuthFoundForSendPayLinks", callerSalesTable.SalesId));
                }

                payLinkQueueCheck = SKS_CC_PayLinkQueue::FindByRefWithTypeAndStatus(
                    oneTimeCustRefTableId,
                    oneTimeCustRefRecId,
                    SKS_CC_PayLinkProcessStatus::Pending,
                    SKS_CC_PayLinkTransactionType::WalletLink,
                    payFabricCustomerNbr);

                if (payLinkQueueCheck)
                {
                    if (Box::okCancel("@SKS:SKGCCPendingWalletLinkExistDlgMsg", DialogButton::Cancel) == DialogButton::Cancel)
                    {
                        return false;
                    }                    
                }

                SalesTotals salesTotals = SalesTotals_Sales::construct(callerSalesTable, SalesUpdate::All);
                salesOrderTotalAmount = salesTotals.totalAmount();
                salesTotals.tax().taxAmountCalculated();
                markedAmount = SKS_CC_CreditCardProcess::sKS_CC_GetMarkedAmount(callerSalesTable);
                
                if (isPreAuth && callerSalesTable && DlvTerm::find(callerSalesTable.DlvTerm).SKS_CC_AddFreightToCCAuth == NoYes::Yes)
                {
                    salesOrderTotalAmount += callerSalesTable.projectedFreightCharge(salesOrderTotalAmount);
                }

                callerAmount = salesOrderTotalAmount - markedAmount; 
                callerTaxAmount = salesTotals.totalTaxAmount();                

                if ((abs(callerAmount) > abs(salesOrderTotalAmount)) || !callerAmount)
                {
                    throw error(strFmt("@SKS:SKGCCSORemainAmtIsZeroErrorMsg", callerSalesTable.SalesId));
                }

                if (isPreAuth)
                {
                    if (!CustParameters::find().CreditCardPreAuthorization)
                    {
                        throw error(strFmt("@SKS:SKGCCPreAuthPaylinkMayNotBeSentDueToARParmSetting", callerSalesTable.SalesId));
                    }

                    if (sks_PP_Setup.CCDisableStdSalesOrderPreAuth == NoYes::Yes)
                    {
                        throw error(strFmt("@SKS:SKGCCPreAuthPaylinkMayNotBeSentDueToTASParmSetting", callerSalesTable.SalesId));
                    }

                    callerDocumentType = SKS_CC_PayLinkEntityType::SalesOrderPreAuth;
                }
                else
                {
                    callerDocumentType = SKS_CC_PayLinkEntityType::SalesOrderPrePayment;
                }

                if (isPreAuth && callerSalesTable.CreditCardCustRefId)
                {
                    if (Box::okCancel("@SKS:SKGCCCreditCardOverrideDlgMsg", DialogButton::Cancel) == DialogButton::Cancel)
                    {
                        return false;
                    }
                }

                callerDocId = callerSalesTable.SalesId;
                callerFldLabelForCtrl = fieldId2PName(tableNum(SalesTable), fieldNum(SalesTable, SalesId));                           
                break;
            case tableNum(LedgerjournalTrans):
                callerLedgerJournalTrans = _callingRecord;

                // Reread record to ensure the latest changes are fetched.
                callerLedgerJournalTrans.reread();

                callerCustTable = CustTable::find(callerLedgerJournalTrans.accountDisplay());

                if (callerCustTable.OneTimeCustomer)
                {
                    oneTimeCustRefTableId = callerLedgerJournalTrans.TableId;
                    oneTimeCustRefRecId = callerLedgerJournalTrans.RecId;
                }
                this.setPayFabricCustomerNbr();

                payLinkQueueCheck = SKS_CC_PayLinkQueue::FindByRefWithTypeAndStatus(
                    callerLedgerJournalTrans.TableId,
                    callerLedgerJournalTrans.RecId,
                    SKS_CC_PayLinkProcessStatus::Pending,
                    SKS_CC_PayLinkTransactionType::PayLink,
                    payFabricCustomerNbr);

                if (payLinkQueueCheck)
                {
                    throw error(strFmt("@SKS:SKGCCJLInvalidDueToPayLinkFoundForSendPayLinks",
                        callerLedgerJournalTrans.JournalNum, callerLedgerJournalTrans.Voucher));
                }

                payLinkQueueCheck = SKS_CC_PayLinkQueue::FindByRefWithTypeAndStatus(
                    callerLedgerJournalTrans.TableId,
                    callerLedgerJournalTrans.RecId,
                    SKS_CC_PayLinkProcessStatus::Error,
                    SKS_CC_PayLinkTransactionType::PayLink,
                    payFabricCustomerNbr);

                if (payLinkQueueCheck)
                {
                    throw error(strFmt("@SKS:SKGCCJLInvalidDueToErrorPayLinkFoundForSendPayLinks",
                        callerLedgerJournalTrans.JournalNum, callerLedgerJournalTrans.Voucher));
                }
                
                if (SKS_CC_CustPaymTable::findPendingPayment(callerLedgerJournalTrans.TableId, callerLedgerJournalTrans.RecId))
                {
                    throw error(strFmt("@SKS:SKGCCJLInvalidDueToPaymentFoundForSendPayLinks",
                        callerLedgerJournalTrans.JournalNum, callerLedgerJournalTrans.Voucher));
                }                

                payLinkQueueCheck = SKS_CC_PayLinkQueue::FindByRefWithTypeAndStatus(
                    oneTimeCustRefTableId,
                    oneTimeCustRefRecId,
                    SKS_CC_PayLinkProcessStatus::Pending,
                    SKS_CC_PayLinkTransactionType::WalletLink,
                    payFabricCustomerNbr);

                if (payLinkQueueCheck)
                {
                    if (Box::okCancel("@SKS:SKGCCJLPendingWalletLinkExistDlgMsg", DialogButton::Cancel) == DialogButton::Cancel)
                    {
                        return false;
                    }
                }
                
                markedAmount = 0;
                callerTaxAmount = 0;
                callerAmount = SKS_CC_CustPaymTable::getCreditCardAmountFromSource(callerLedgerJournalTrans.TableId,
                    callerLedgerJournalTrans.RecId);                

                if (!callerAmount)
                {
                    throw error(strFmt("@SKS:SKGCCJLRemainAmtIsZeroErrorMsg",
                        callerLedgerJournalTrans.JournalNum, callerLedgerJournalTrans.Voucher));
                }
                
                callerDocumentType = SKS_CC_PayLinkEntityType::PaymentJournalCapture;                
                callerDocId = strFmt('%1-%2', callerLedgerJournalTrans.JournalNum, callerLedgerJournalTrans.Voucher);
                callerFldLabelForCtrl = fieldId2PName(tableNum(LedgerJournalTrans), fieldNum(LedgerJournalTrans, JournalNum));
                break;
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean     ret = true;

        if (!linkAmount)
        {
            ret = checkFailed("@SKS:SKGCCAmountMustBeSpecifiedToSendAPayLink");
        }

        if (linkAmount > callerAmount)
        {
            ret = checkFailed(strFmt("@SKS:SKGCCPayLinkAmounteExceedsOpenSOAmount", linkAmount, callerAmount));
        }

        if (!linkEmail && !linkSMS)
        {
            ret = checkFailed("@SKS:SKGCCEmailOrSMSMustBeSpecified");
        }

        if (linkEmail && linkSMS)
        {
            ret = checkFailed("@SKS:SKGCCBothEmailAndSMSMayNotBeSpecified");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SKS_CC_PayFabricWalletHandler pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
              
        pfWalletHandler.parmCustAccount(custAccount);
        if (oneTimeCustRefTableId && oneTimeCustRefRecId)
        {
            pfWalletHandler.parmOneTimeCustRefTableId(oneTimeCustRefTableId);
            pfWalletHandler.parmOneTimeCustRefRecId(oneTimeCustRefRecId);
        }
        pfWalletHandler.setPayFabricCustomerNbr();
        pfWalletHandler.parmPayLinkCallerRecord(callerRecord);
        pfWalletHandler.sendAndRecordPayLink(linkEmail, linkSMS, linkAmount, callerAmount, callerTaxAmount, linkMessage, isPreAuth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_SendPayLink construct()
    {
        return new SKS_CC_SendPayLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS:SKGCCSendPayLink";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayFabricCustomerNbr</Name>
				<Source><![CDATA[
    public void setPayFabricCustomerNbr()
    {
        custAccount = callerCustTable.AccountNum;
        if (oneTimeCustRefTableId && oneTimeCustRefRecId)
        {
            payFabricCustomerNbr = SKS_CC_PayFabricWalletHandler::getPayFabricCustomerNbrForOneTimeCust(
                oneTimeCustRefTableId,
                oneTimeCustRefRecId,
                callerCustTable.AccountNum);
        }
        else
        {
            payFabricCustomerNbr = callerCustTable.AccountNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CC_SendPayLink   sKS_CC_SendPayLink = SKS_CC_SendPayLink::construct();        

        if (!_args)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!_args.record())
        {
            throw error(Error::missingRecord(funcName()));
        }

        const str constPreAuthParm = 'PreAuth';
        if (_args.parm() && _args.parm() == constPreAuthParm)
        {
            sKS_CC_SendPayLink.parmIsPreAuth(true);
        }

        boolean retValue = sKS_CC_SendPayLink.setValuesFromCallingRecord(_args.record());
        if (!retValue)
        {
            return;
        }

        if (sKS_CC_SendPayLink.prompt())
        {
            sKS_CC_SendPayLink.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryOrFirstElectronicAddressByType</Name>
				<Source><![CDATA[
    public static LogisticsElectronicAddressLocator getPrimaryOrFirstElectronicAddressByType(
        DirPartyRecId _partyRecId,
        LogisticsElectronicAddressMethodType _type = LogisticsElectronicAddressMethodType::Phone)
    {
        LogisticsElectronicAddress electronicAddress;
        DirPartyLocation dirPartyLocation;

        electronicAddress = DirParty::primaryElectronicAddress(_partyRecId, _type);
        if (!electronicAddress)
        {
            // Get first electronic address found by type. No explicit order by specified.
            select firstonly electronicAddress
            exists join dirPartyLocation
                where electronicAddress.Type == _type
                    && dirPartyLocation.Location == electronicAddress.Location
                    && dirPartyLocation.Party == _partyRecId;
        }

        return electronicAddress ? electronicAddress.Locator : '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>