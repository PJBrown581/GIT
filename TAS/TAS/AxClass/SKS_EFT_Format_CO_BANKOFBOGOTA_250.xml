<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CO_BANKOFBOGOTA_250</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CO_BANKOFBOGOTA_250  extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CO_BANKOFBOGOTA_250  extends SKS_EFT_Format
{
    #define.FormatVersion('20220329')
    #define.ACH('ACH')
    #define.FAST_CARD('FAST-CARD')

    SKS_EB_Vendor       mSKS_EB_Vendor;
    str totalRecords;
    str totalAmount;
    boolean header = true;
    boolean compId = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();

            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FAST_CARD && header)
            {
                //  Header logging
                this.rec_Header();
                header = false;
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH && compId)
            {
                // Company identification record
                this.rec_CompanyIdentification();
                compId = false;
            }
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACH)
            {
                // Movement registration information
                this.rec_RegistrationInfo();

                // Registration of additional information of the beneficiary

                // First part
                this.rec_RegistrationOfAddtlInfo_1();

                // Second part
                this.rec_RegistrationOfAddtlInfo_2();

                // Third part
                this.rec_RegistrationOfAddtlInfo_3();
            }
            else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FAST_CARD)
            {
                //  Detail logging
                this.rec_Detail();
            }

            next mSKS_EFT_FileDetail;
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FAST_CARD)
        {
            //  Control log
            this.rec_Control();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CompanyIdentification</Name>
				<Source><![CDATA[
    public boolean rec_CompanyIdentification()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 1    Type of registration. should always be one (1)                   1          (  1 -   2)
        // 2    Date to apply the format scatter AAAAMMDD                        8          (  2 -   9)
        // 3    Zero space                                                       24         ( 10 -  33)
        // 4    Dispersion Account Type:                                         1          ( 34 -  34)
        // 5    Zero space                                                       16         ( 35 -  40)
        // 6    Dispersion Account number                                        11         ( 41 -  51)
        // 7    Name of the company that performs the scattering                 1          ( 52 -  91)
        // 8    Company identification Number                                    11         ( 92 -  102)
        // 9    Type of movement by which the DISPERSION is to be performed      3          ( 103 - 105)
        //10    Code of the city where the originator has settled the account, 
        //      according to the table of cities. See annex 4 City chart         15         ( 106 - 109)
        //11    Date of elaboration format AAAAMMDD                              8          ( 110 - 117)
        //12    Code of the office where the company that performs the 
        //      DISPERSION owns its account. It must correspond to the first 
        //      three digits of the company's account number (position 43-45).   3          ( 118 - 120)
        //13    Customer Identification Type:                                    1          ( 121 - 121)
        //14    Blank spaces                                                     48         ( 122 - 169)
        //15    Send additional message file indicator                           1          ( 170 - 170)
        //      If additional message file is sent, you must place S.
        //      No additional message file is sent, blank space must be left.            
        //16    Blank spaces                                                     80          (171 - 250)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        // 1    Type of registration. should always be one (1)                   1          (  1 -   2)
        sb.Append('1');

        // 2    Date to apply the format scatter AAAAMMDD                        8          (  2 -   9)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.PaymentTransDate));

        // 3    Zero space                                                       24         ( 10 -  33)
        sb.Append(SKS_PP_StringFormats::strFill(24, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Dispersion Account Type:                                         1          ( 34 -  34)         
        if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::CheckingAccount)                                    //SKG#VSTS:11123
        {
            sb.Append('1');
        }
        else if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append('2');
        }
        else if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::LoanAccount)
        {
            sb.Append('5');
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        
        // 5    Zero space                                                       6         ( 35 -  40)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Dispersion Account number                                        11         ( 41 -  51)
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Name of the company that performs the scattering                 40          ( 52 -  91)
        sb.Append(SKS_PP_StringFormats::strFill(40, mSKS_EFT_FileDetail.FileACHCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Company identification Number                                    11         ( 92 -  102)  
        str companyIdentNum;

        companyIdentNum = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CompanyIdentNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(11, this.CharacterReplacement(companyIdentNum), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));              //SKG#VSTS:11123

        // 9    Type of movement by which the DISPERSION is to be performed      3          ( 103 - 105)
        switch(mSKS_EFT_FileFormatPaymSpec.PaymSpec)
        {
            case 'ACH-NOMINA':
                sb.Append('001');
                break;
            case 'ACH-PROVE':
                sb.Append('002');
                break;
            case 'ACH-OTROS':
                sb.Append('003');
                break;
        }

        //10    Code of the city where the originator has settled the account,
        //      according to the table of cities. See annex 4 City chart         15         ( 106 - 109)
        sb.Append('0001');

        //11    Date of elaboration format AAAAMMDD                              8          ( 110 - 117)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //12    Code of the office where the company that performs the
        //      DISPERSION owns its account. It must correspond to the first
        //      three digits of the company's account number (position 43-45).   3          ( 118 - 120)
        sb.Append(SKS_PP_StringFormats::strFill(3, subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 3), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //13    Customer Identification Type:                                    1          ( 121 - 121)
        sb.Append('N');

        //14    Blank spaces                                                     48         ( 122 - 169)
        sb.Append(SKS_PP_StringFormats::strFill(48, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //15    Send additional message file indicator                           1          ( 170 - 170)
        //      If additional message file is sent, you must place S.
        //      No additional message file is sent, blank space must be left.
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16    Blank spaces                                                     80          (171 - 250)
        sb.Append(SKS_PP_StringFormats::strFill(80, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));        
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RegistrationInfo</Name>
				<Source><![CDATA[
    public boolean rec_RegistrationInfo()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 1    Type of registration. Value should always be two (2)             1          (  1 -   2)
        // 2    Type of identification                                           1          (  2 -   2)
        // 3    Identification number of the beneficiary owner of the            11         (  3 -   13)
        //      Account. (align with zeros to the left)
        //      The NIT number will be validated for the check digit                                                       
        // 4    Beneficiary's name.
        //      Align left with white spaces on the right.                       40         ( 14 -  53)                                         
        // 5    Value at zero                                                    1          ( 54 -  54)
        // 6    Beneficiary Account Type                                         1          ( 55 -  55)
        // 7    Beneficiary's account number. Complete with spaces on the right. 17         ( 56 -  72)
        // 8    Value to be paid To each beneficiary account 
        //      (the last two positions are decimals).                           18         ( 73 -  90)
        // 9    Payment-Subscription form. You should always go a A              1          ( 91 -  91)
        //10    field should go in zeros                                         3          ( 92 -  94)
        //11    Bank's compensation code where the beneficiary has the account.  8          ( 95 -  97)                                     
        //12    Code of the city where the beneficiary has the account filed,    4          ( 98 - 101)
        //      of ACUERWith the city chart. See annex 4 City chart.   
        //13    Start of ADDENDA concept information                             9          ( 102 - 110)
        //      Originator or abbreviated name                                    
        //14    Blank spaces                                                     1          ( 111 - 111)
        //15    Additional comments that the company wants to give to the        70         ( 112 - 181)        
        //      beneficiaries, describing the reason for the
        //      Payment. End of information ADDENDA concept.
        //16    Value in zero                                                    1          (182 - 182)
        //17    Invoice number or voucher                                        10         (183 - 192)
        //18    Mail indicator                                                   1          (193 - 193)
        //19    Blank spaces                                                     8          (194 - 201)
        //20    Share value of the LIBRANZA (the last two positions are          16         (202 - 219)
        //      Decimals). If you do not have libranzas service leave blank
        //21    LIBRANZA Number (Applies to Libranzas customers credifacil,      11         (220 - 230) 
        //      if you do not have this service send whites
        //22    Blank spaces                                                     11         (231 - 241)
        //23    Message send indicator in additional file                        1          (242 - 242)
        //24    Blank spaces                                                     8          (243 - 250)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        // 1    Type of registration. Value should always be two (2)             1          (  1 -   2)
        sb.Append('2');

        // 2    Type of identification                                           1          (  2 -   2)
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('TypeOfIdentification', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Identification number of the beneficiary owner of the            11         (  3 -   13)
        //      Account. (align with zeros to the left)
        //      The NIT number will be validated for the check digit
        sb.Append(SKS_PP_StringFormats::strFill(11, this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('IdentificationNum', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));                                 //SKG#VSTS:11123

        // 4    Beneficiary's name.
        //      Align left with white spaces on the right.                       40         ( 14 -  53)
        sb.Append(SKS_PP_StringFormats::strFill(40, mSKS_EFT_VendorPaym.WBeneName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Value at zero                                                    1          ( 54 -  54)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Beneficiary Account Type                                         1          ( 55 -  55)
        if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::CheckingAccount)                                 //SKG#VSTS:11123
        {
            sb.Append('1');
        }
        else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append('2');
        }
        else if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::LoanAccount)
        {
            sb.Append('5');
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }

        // 7    Beneficiary's account number. Complete with spaces on the right. 17         ( 56 -  72)
        sb.Append(SKS_PP_StringFormats::strFill(17, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Value to be paid To each beneficiary account
        //      (the last two positions are decimals).                           16         ( 73 -  90)
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 18));

        // 9    Payment-Subscription form. You should always go a A              1          ( 91 -  91)
        sb.Append('A');

        //10    field should go in zeros                                         3          ( 92 -  94)
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //11    Bank's compensation code where the beneficiary has the account.  3          ( 95 -  97)
        sb.Append(SKS_PP_StringFormats::strFill(3, this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('CompensationCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
                                             
        //12    Code of the city where the beneficiary has the account filed,    4          ( 98 - 101)
        //      of ACUERWith the city chart. See annex 4 City chart.
        sb.Append('0001');

        //13    Start of ADDENDA concept information                             9          ( 102 - 110)
        //      Originator or abbreviated name
        sb.Append(SKS_PP_StringFormats::strFill(9, mSKS_EFT_Bank.ACHCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //14    Blank spaces                                                     1          ( 111 - 111)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //15    Additional comments that the company wants to give to the        70         ( 112 - 181)
        //      beneficiaries, describing the reason for the
        //      Payment. End of information ADDENDA concept.
        sb.Append(SKS_PP_StringFormats::strFill(70, 'Se Pagan Facturas ' + this.getInvoiceNbrs(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16    Value in zero                                                    1          (182 - 182)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //17    Invoice number or voucher                                        10         (183 - 192)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //18    Mail indicator                                                   1          (193 - 193)
        sb.Append('C');

        //19    Blank spaces                                                     8          (194 - 201)
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //20    Share value of the LIBRANZA (the last two positions are          16         (202 - 219)
        //      Decimals). If you do not have libranzas service leave blank
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //21    LIBRANZA Number (Applies to Libranzas customers credifacil,      11         (220 - 230)
        //      if you do not have this service send whites
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //22    Blank spaces                                                     11         (231 - 241)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //23    Message send indicator in additional file                        1          (242 - 242)
        sb.Append('N');

        //24    Blank spaces                                                     8          (243 - 250) 
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RegistrationOfAddtlInfo_1</Name>
				<Source><![CDATA[
    public boolean rec_RegistrationOfAddtlInfo_1()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 1    Type of registration. Value should always be three (3)           1          (  1 -  1)
        // 2    Blank spaces                                                     10         (  2 -  11)
        // 3    This field must have the electronic address of the               50         (  12-  61)
        //      The beneficiary's MAIL. You can send more than one 
        //      email address separated with a comma (,)
        // 4    Spaces in zeros                                                  4          ( 62 -  65)                             
        // 5    First part of the text of the information to send VIA EMAIL.     160        ( 66 -  225)
        //      If you are sending additional text file (annex 2.1) whitespace.                                                    1          ( 54 -  54)
        // 6    Blank spaces                                                     25         ( 226 - 250)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        // 1    Type of registration. Value should always be three (3)           1          (  1 -  1)
        sb.Append('3');

        // 2    Blank spaces                                                     10         (  2 -  11)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    This field must have the electronic address of the               50         (  12-  61)
        //      The beneficiary's MAIL. You can send more than one
        //      email address separated with a comma (,)
        sb.Append(SKS_PP_StringFormats::strFill(50, this.getEmail(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Spaces in zeros                                                  4          ( 62 -  65)
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    First part of the text of the information to send VIA EMAIL.     160        ( 66 -  225)
        //      If you are sending additional text file (annex 2.1) whitespace.      
        sb.Append(SKS_PP_StringFormats::strFill(160, 'Se Pagan Facturas ' + this.getInvoiceNbrs(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                                                     
        // 6    Blank spaces                                                     25         ( 226 - 250)
        sb.Append(SKS_PP_StringFormats::strFill(25, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RegistrationOfAddtlInfo_2</Name>
				<Source><![CDATA[
    public boolean rec_RegistrationOfAddtlInfo_2()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 1    Type of registration. Value should always be three (3)           1          (  1 -  1)
        // 2    Blank spaces                                                     10         (  2 -  11)
        // 3    This field must have the electronic address of the               50         (  12-  61)
        //      The beneficiary's MAIL. You can send more than one
        //      email address separated with a comma (,)
        // 4    Spaces in zeros                                                  4          ( 62 -  65)
        // 5    First part of the text of the information to send VIA EMAIL.     160        ( 66 -  225)
        //      If you are sending additional text file (annex 2.1) whitespace.                                                    1          ( 54 -  54)
        // 6    Blank spaces                                                     25         ( 226 - 250)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        // 1    Type of registration. Value should always be three (3)           1          (  1 -  1)
        sb.Append('3');

        // 2    Blank spaces                                                     10         (  2 -  11)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    This field must have the electronic address of the               50         (  12-  61)
        //      The beneficiary's MAIL. You can send more than one
        //      email address separated with a comma (,)
        sb.Append(SKS_PP_StringFormats::strFill(50, this.getEmail(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Spaces in zeros                                                  4          ( 62 -  65)
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    First part of the text of the information to send VIA EMAIL.     160        ( 66 -  225)
        //      If you are sending additional text file (annex 2.1) whitespace.
        sb.Append(SKS_PP_StringFormats::strFill(160, 'Se Pagan Facturas ' + this.getInvoiceNbrs(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                                                     
        // 6    Blank spaces                                                     25         ( 226 - 250)
        sb.Append(SKS_PP_StringFormats::strFill(25, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RegistrationOfAddtlInfo_3</Name>
				<Source><![CDATA[
    public boolean rec_RegistrationOfAddtlInfo_3()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 1    Type of registration. Value should always be three (3)           1          (  1 -  1)
        // 2    Blank spaces                                                     10         (  2 -  11)
        // 3    This field must have the electronic address of the               50         (  12-  61)
        //      The beneficiary's MAIL. You can send more than one
        //      email address separated with a comma (,)
        // 4    Spaces in zeros                                                  4          ( 62 -  65)
        // 5    First part of the text of the information to send VIA EMAIL.     160        ( 66 -  225)
        //      If you are sending additional text file (annex 2.1) whitespace.                                                    1          ( 54 -  54)
        // 6    Blank spaces                                                     25         ( 226 - 250)
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        // 1    Type of registration. Value should always be three (3)           1          (  1 -  1)
        sb.Append('3');

        // 2    Blank spaces                                                     10         (  2 -  11)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    This field must have the electronic address of the               50         (  12-  61)
        //      The beneficiary's MAIL. You can send more than one
        //      email address separated with a comma (,)
        sb.Append(SKS_PP_StringFormats::strFill(50, this.getEmail(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Spaces in zeros                                                  4          ( 62 -  65)
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    First part of the text of the information to send VIA EMAIL.     160        ( 66 -  145)
        //      If you are sending additional text file (annex 2.1) whitespace.
        sb.Append(SKS_PP_StringFormats::strFill(80, 'Se Pagan Facturas ' + this.getInvoiceNbrs(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        sb.Append(SKS_PP_StringFormats::strFill(80, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                                                     
        // 6    Blank spaces                                                     25         ( 226 - 250)
        sb.Append(SKS_PP_StringFormats::strFill(25, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    public boolean rec_Header()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 0    Type of record                                                   1             1
        // 1    Type of identification dispersant                                1             2
        // 2    Identification number Dispersant                                 15            3 
        // 3    Bank Code                                                        4             18
        // 4    Type of product                                                  2             22
        // 5    Product number Dispersant                                        19            24
        // 6    Convention Code                                                  4             43
        // 7    Number of records                                                10            47
        // 8    Total value to disperse                                          20            57
        // 9    Application Date Dispersion                                      8             77
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        
        // 0    Type of record                                                   1             1
        sb.Append('1');

        // 1    Type of identification dispersant                                1             2
        sb.Append('N');

        // 2    Identification number Dispersant                                 15            3
        str companyIdentNum;

        companyIdentNum = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CompanyIdentNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(15, companyIdentNum, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Bank Code                                                        4             18
        sb.Append('0001');

        // 4    Type of product                                                  2             22
        if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
        {
            sb.Append('02');
        }
        else
        {
            sb.Append('01');
        }
        // 5    Product number Dispersant                                        19            24
        sb.Append(SKS_PP_StringFormats::strFill(19, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Convention Code                                                  4             43
        sb.Append(SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('ConventionCode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));

        // 7    Number of records                                                10            47
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary;
        
        totalRecords = num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0);
        totalAmount =  SKS_PP_StringFormats::strMoney(-1 * tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 20);

        sb.Append(SKS_PP_StringFormats::strFill(10, totalRecords, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Total value to disperse                                          20            57
        sb.Append(totalAmount);
        
        // 9    Application Date Dispersion                                      8             77
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    public boolean rec_Detail()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 0    Type of record                                                   1             1
        // 1    Beneficiary Identification Type                                  1             2
        // 2    Beneficiary Identification Number                                15            3
        // 3    Type of operation                                                1             18
        // 4    Operation value                                                  17            19
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        // 0    Type of record                                                   1             1
        sb.Append('2');

        // 1    Beneficiary Identification Type                                  1             2
        sb.Append('T');

        // 2    Beneficiary Identification Number                                15            3
        sb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(mSKS_EFT_FileDetail.AccountNum), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Type of operation                                                1             18
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('TypeOfOperation', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Operation value                                                  17            19
        sb.Append(SKS_PP_StringFormats::strMoney(-1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 17));
        
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Control</Name>
				<Source><![CDATA[
    public boolean rec_Control()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                                     Length      Position
        // 0    Type of record                                                   1             1
        // 1    Number of records                                                10            2
        // 2    Sum value                                                        20            12
        //------------------------------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        
        // 0    Type of record                                                   1             1
        sb.Append('9');

        // 1    Number of records                                                10            2
        sb.Append(SKS_PP_StringFormats::strFill(10, totalRecords, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 2    Sum value                                                        20            12
        sb.Append(totalAmount);

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    private str getEmail()
    {
        VendTable vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;

        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select * from DirPartyContactInfoview
                where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                    &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
            if(DirPartyContactInfoView.Locator)
            {
                return DirPartyContactInfoView.Locator;
            }
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
    
            if(invSKS_EFT_FileDetail)
            {
                sb.Append(', ');
            }
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>