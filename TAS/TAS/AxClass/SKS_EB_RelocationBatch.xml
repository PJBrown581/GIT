<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_RelocationBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EB_RelocationBatch extends SKS_EB_Batch
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        Batch               bat;
        RefRecId            locRefRecID;
        SKS_EB_CommProcess  lSKS_EB_CommProcess;
        DictClass locDictClass;
        Object locClassInstance;
        ExecutePermission perm;
        str locSKS_EB_Send_getParams;
        boolean locSKS_EB_Send_Send;
        SKS_BF_BankIntType  sksBankIntType;
        ;

        bat = this.parmCurrentBatch();
        locRefRecID = bat.RecId;

        while select lSKS_EB_CommProcess where lSKS_EB_CommProcess.RelocBatchJobId == locRefRecID
        {
            sksBankIntType = SKS_EB_Batch::GetIntegrationType(lSKS_EB_CommProcess);

            //get the paramters for the file retrieval, and place them in a parameters string.
            locSKS_EB_Send_getParams = SKS_EB_Send::getParams(lSKS_EB_CommProcess,
                                                                '',
                                                                '',
                                                                '');

            //Execute the acutal upload action
            locSKS_EB_Send_Send = SKS_EB_Send::Send(lSKS_EB_CommProcess,
                                                    locSKS_EB_Send_getParams,
                                                    lSKS_EB_CommProcess.CommUserProg,
                                                    lSKS_EB_CommProcess.RelocFilePath,
                                                    this.isInBatch(),
                                                    lSKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation ? true : false,
                                                    '',
                                                    lSKS_EB_CommProcess.RelocBankFabricLocation);  //Bankfabric

            if(!locSKS_EB_Send_Send)
            {
                error(strFmt("@SKS:SKGCommunicationFailed", lSKS_EB_CommProcess.CommID));
                //allowing processing to continue in case there are local files waiting to process
            }

            if (lSKS_EB_CommProcess.RelocClass)
            {
                perm = new ExecutePermission();
                perm.assert();
                locDictClass = new DictClass(className2Id(lSKS_EB_CommProcess.RelocClass));
                locClassInstance = locDictClass.makeObject();
                locDictClass.callObject('RelocationProcess', locClassInstance, lSKS_EB_CommProcess,sksBankIntType);
                CodeAccessPermission::revertAssert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>