<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_RF_Format_EDI997</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_RF_Format_EDI997 extends SKS_EFT_RF_Format
{
    //Class Variables
    //primities
    boolean gErrorsExist;
    str mFileName;
    str mFileID;
    str mTED; //Technical Error Description (and we will include the related Notes/Special Instructions
    str gAK1Key;
    str gFieldDelimiter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getField</Name>
				<Source><![CDATA[
    private str getField(System.String _Record, int _FieldNumber)
    {
        str rtnval;
        //str locWorkingStr  = _Record;
        int locStartIndex, locEndIndex = 0;
        int locCounter = 0, locLength;
    
        ;
    
        while( locCounter < _FieldNumber - 1)
        {
            locCounter++;
            if(locStartindex > 0)
                locStartIndex = SKS_PP_StringFormats::strIndexOf(_Record, gFieldDelimiter, locStartIndex) + 1;
            else
                locStartIndex = SKS_PP_StringFormats::strIndexOf(_Record, gFieldDelimiter) + 1;
            if(locStartIndex <= 1)
                break;
        }
        locLength = _Record.get_Length();
        if(locStartIndex < locLength)
            if(locStartIndex > 1)
                locEndIndex = SKS_PP_StringFormats::strIndexOf(_Record, gFieldDelimiter, locStartIndex);
        if(locStartIndex > 1)
        {
            if(locStartIndex < locEndIndex)
                rtnval = SKS_PP_StringFormats::strSub(_Record,locStartIndex, locEndIndex - locStartIndex);
            else
                rtnval = SKS_PP_StringFormats::strSub(_Record,locStartIndex);
        }
    
    
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFile</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getFile(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        container locRecord;
        int i;//index of the current location in the container
        TextStreamIo locTextIo;
        System.String locString;
        ;
    
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locTextIo = TextStreamIo::ConstructForRead(fileHub.StreamGet());

        locTextIo.inRecordDelimiter('~');
        locTextIo.inFieldDelimiter('埬때Э̄Kč⚳巏');
        if(!mSKS_EFT_RF_File)
        {
            mSKS_EFT_RF_File = new SKS_EFT_RF_File();
        }
        while(locTextIo.status() == IO_Status::Ok)
        {
            locRecord = locTextIo.read();
            if(conLen(locRecord) > 0)
            {
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }
                locString = strLRTrim(conPeek(locRecord, 1));
                if(!System.String::IsNullOrEmpty(locString))
                {
                    if(locString.StartsWith('ISA'))
                    {
                        gFieldDelimiter = locString.Substring(3,1);
                    }
                    if(locString.StartsWith('GS'))
                    {
                        this.processGSRecord(locString);
                    }
                    Else if(locString.StartsWith('AK1'))
                    {
                        this.processAK1Record(locString);
                    }
                    Else if(locString.StartsWith('AK2'))
                    {
                        this.processAK2Record(locString);
                    }
                    Else if(locString.StartsWith('AK5'))
                    {
                        this.processAK5Record(locString);
                    }
                    Else if(locString.StartsWith('AK9'))
                    {
                        this.processAK9Record(locString);
                    }
                    Else if(locString.StartsWith('SE'))
                    {
                        this.processSERecord(locString);
                    }
                    Else if(locString.StartsWith('GE'))
                    {
                        this.processSERecord(locString);
                    }
                }//if(!System.String::IsNullOrEmpty(locString))
            }
        }//while(locStreamReader.get_EndOfStream());
        //must use the getSKS_EFT_RF_File() method becuase, if any pending mSKS_EFT_RF_SentFile have yet to be pushed into the list, this will do it.
        if(locTextIo)
        {
            locTextIo.finalize();
            locTextIo = null;
        }
        //if an error occured, don't return anything
        if(gErrorsExist)
        {
            mSKS_EFT_RF_File = null;
        }
        return this.getSKS_EFT_RF_File();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatId</Name>
				<Source><![CDATA[
    public str getFormatId(str _filename, boolean _serverPath, SKS_BF_BankIntType _SKS_BF_BankIntType = SKS_BF_BankIntType::FileHubLocal)
    {
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(_SKS_BF_BankIntType);
        str rtnval = '';
        int classId;
        //BEGIN VALIDATION VARIABLES
        boolean FirstRecordWithTextIsISA00Found = false;
        boolean GSFound = false;
        boolean STFound = false;
        int RecordsWithText = 0;
        int i;
        container locRecord;
        //BEGIN DISQUALIFIER VARIABLES
        //none
        //END VALIDATION VARIABLES
        CommaStreamIo locCommaIo;
        ;
    
        fileHub.setFileName(_filename);
        fileHub.runFileLoad(_filename);
        fileHub.streamInit();
        locCommaIo = CommaStreamIo::ConstructForRead(fileHub.StreamGet());

        locCommaIo.inRecordDelimiter('~');
        gFieldDelimiter = '*';
        locCommaIo.inFieldDelimiter(gFieldDelimiter);
        while(locCommaIo.status() == IO_Status::Ok)
        {
    
            locRecord = locCommaIo.read();
            if(conLen(locRecord) > 0 )
            {
                for(i = 1; i <= conLen(locRecord); i++)
                {
                    locRecord = conPoke(locRecord, i, strRem(conPeek(locRecord,i), '\r\n'));
                }
                RecordsWithText++;
                if(strUpr(conPeek(locRecord,1)) == 'ISA'
                    && strUpr(conPeek(locRecord,2)) == '00'
                    && RecordsWithText == 1)
                    FirstRecordWithTextIsISA00Found = true;
                else if(strUpr(conPeek(locRecord,1)) == 'GS'
                        && strUpr(conPeek(locRecord,2)) == 'FA')
                    GSFound = true;
                else if(strUpr(conPeek(locRecord,1)) == 'ST'
                    && strUpr(conPeek(locRecord,2)) == '997')
                    STFound = true;
            }
            if(FirstRecordWithTextIsISA00Found && GSFound && STFound)
                break;
        }
        if(FirstRecordWithTextIsISA00Found
        && GSFound
        && STFound)
        {
            //ALl Qualifers show this a SWIFT_ACKNAK_07262013 file
            classId = classIdGet(this);
            rtnval = classId2Name(ClassId);
        }
        if(locCommaIo)
        {
            locCommaIo.finalize();
            locCommaIo = null;
        }
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_RF_File</Name>
				<Source><![CDATA[
    public SKS_EFT_RF_File getSKS_EFT_RF_File()
    {
    
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
    
        return mSKS_EFT_RF_File;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAK1Record</Name>
				<Source><![CDATA[
    //Process the Functional Group Response Header(AK1) record
    protected void processAK1Record(System.String _AK1Record)
    {
        str locTemp;
        ;
    
        locTemp = strLRTrim(this.getField(_AK1Record, 3));
        locTemp = SKS_PP_StringFormats::strSub(locTemp,strLen(locTemp) - 8);
        mFileID = SKS_PP_StringFormats::strFill(9,locTemp,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left);
        if(mSKS_EFT_RF_SentFile != null)
        {
            mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
            mSKS_EFT_RF_SentFile = null;
        }
        mSKS_EFT_RF_SentFile = new SKS_EFT_RF_SentFile();
        this.setFileKey(mFileID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAK2Record</Name>
				<Source><![CDATA[
    //Process the  Transaction Set Response Header(AK2) record
    protected void processAK2Record(System.String _AK2Record)
    {
    
        if(mSKS_EFT_RF_Transaction)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            mSKS_EFT_RF_Transaction = null;
        }
        mSKS_EFT_RF_Transaction = new SKS_EFT_RF_Transaction();
        mSKS_EFT_RF_Transaction.setID(
            SKS_PP_StringFormats::strFill(9,SKS_PP_StringFormats::strSub(mFileID,1,9)
                ,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left)
            + SKS_PP_StringFormats::strFill(30,strLRTrim(this.getField(_AK2Record, 3)),
                SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAK5Record</Name>
				<Source><![CDATA[
    //Process Transaction Set Response Trailer(AK5) record
    protected void processAK5Record(System.String _AK5Record)
    {
        str locErrorCode;
        str locTranStatus;
        ;
    
        if(mSKS_EFT_RF_Transaction)
        {
            locTranStatus = strUpr(strLRTrim(this.getField(_AK5Record, 2)));
            mSKS_EFT_RF_Transaction.setStatus(locTranStatus);
    
            locErrorCode = this.getField(_AK5Record, 3);
            if(locTranStatus != 'A' && strLen(locErrorCode) > 0)
            {
                mSKS_EFT_RF_Transaction.setStatusReason(locErrorCode);
            }
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAK9Record</Name>
				<Source><![CDATA[
    //Process the Functional Group Response Header
    protected void processAK9Record(System.String _AK9Record)
    {
        str locGroupStatus;
        str locReasonCode;
        ;
    
        if(mSKS_EFT_RF_SentFile)
        {
            locGroupStatus = strUpr(strLRTrim(this.getField(_AK9Record, 2)));
            mSKS_EFT_RF_SentFile.setStatus(locGroupStatus);
    
            locReasonCode = this.getField(_AK9Record, 6);
            if(locGroupStatus != 'A' && strLen(locReasonCode) > 0)
            {
                mSKS_EFT_RF_SentFile.setStatusReason('GRP' + locReasonCode);
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGERecord</Name>
				<Source><![CDATA[
    //Process the Functional Group Trailer(GE) record
    protected void processGERecord(System.String _GERecord)
    {
        mSKS_EFT_RF_File.addSentFile(mSKS_EFT_RF_SentFile);
        mSKS_EFT_RF_SentFile = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGSRecord</Name>
				<Source><![CDATA[
    //Process the Functional Group Header(GS) record
    protected void processGSRecord(System.String _GSRecord)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>processISARecord</Name>
				<Source><![CDATA[
    //Process the Interchange Control Header(ISA) record
    protected void processISARecord(System.String _ISARecord)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSERecord</Name>
				<Source><![CDATA[
    //Process the Transaction Set Trailer(SE) record
    protected void processSERecord(System.String _SERecord)
    {
        if(mSKS_EFT_RF_Transaction)
        {
            mSKS_EFT_RF_SentFile.addTransaction(mSKS_EFT_RF_Transaction);
            mSKS_EFT_RF_Transaction = null;
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileKey</Name>
				<Source><![CDATA[
    protected void setFileKey(str _InboundFileKey)
    {
        mSKS_EFT_RF_SentFile.setID(_InboundFileKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReason</Name>
				<Source><![CDATA[
    private void setStatusReason(SKS_EFT_RF_Stucture _SKS_EFT_RF_Structure, str _StatusReasonCode, str _StatusReasonDesc = '')
    {
        System.Text.StringBuilder sb;
        ;
    
        sb = new System.Text.StringBuilder();
        if(strLen(_SKS_EFT_RF_Structure.getStatusReason()) == 0)
        {
            _SKS_EFT_RF_Structure.setStatusReason(_StatusReasonCode);
            _SKS_EFT_RF_Structure.setStatusReasonDesc(_StatusReasonDesc);
        }
        else
        {
            if(strLen(_SKS_EFT_RF_Structure.getAdditionalData()) > 0)
            {
                sb.Append('\\\\');//seperate this TED from the previous TED
            }
            sb.Append(_StatusReasonCode);
            sb.Append('-');
            sb.Append(_StatusReasonDesc);
            _SKS_EFT_RF_Structure.setAdditionalData(sb.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTextBlock</Name>
				<Source><![CDATA[
    private str setTextBlock()
    {
        str locTextBlock;
    
        return locTextBlock;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegment</Name>
				<Source><![CDATA[
    public static str getSegment(SKS_EB_RecId _SKS_EFT_FILE_RecId, SKS_EFT_EDI820_Segment _SKS_EFT_EDI820_Segment, int _pos)
    {
        SKS_EFT_EDI820_Data lSKS_EFT_EDI820_Data;
        str value;
        UserId lUserId;
        xSession session;
    
        session = new xSession();
        lUserId = session.userId();
    
        select firstonly FileRecId, UserId, Segment, FieldNbr, DataValue from lSKS_EFT_EDI820_Data where
                                                 lSKS_EFT_EDI820_Data.FileRecId == _SKS_EFT_FILE_RecId &&
                                                 lSKS_EFT_EDI820_Data.UserId == lUserId &&
                                                 lSKS_EFT_EDI820_Data.Segment == _SKS_EFT_EDI820_Segment &&
                                                 lSKS_EFT_EDI820_Data.FieldNbr == _pos;
    
        value = SKS_EFT_EDI::getDbValue(lSKS_EFT_EDI820_Data.DataValue);
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundFileKeyGen</Name>
				<Source><![CDATA[
    public static str outboundFileKeyGen(str _OutFilename, SKS_EFTAP_File _SKS_EFTAP_File)
    {
        str rtnval;
        str locFileKey;
        ;
    
        locFileKey = SKS_EFT_RF_Format_EDI997::getSegment(_SKS_EFTAP_File.RecId, SKS_EFT_EDI820_Segment::H0080GS, 6);
        if(strLen(locFileKey) > 9)
            rtnval = SKS_PP_StringFormats::strSub(locFileKey,strLen(locFileKey) - 8);
        else
            rtnval = SKS_PP_StringFormats::strFill(9,locFileKey,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left);
        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outboundTransKeyGen</Name>
				<Source><![CDATA[
    public static str outboundTransKeyGen(str _FileName = '', SKS_EFT_FileDetail _SKS_EFT_FileDetail = null, SKS_EFTAP_File _SKS_EFTAP_FILE = null)
    {
        System.Text.StringBuilder sb;
        str locFileKey;
        ;
    
        locFileKey = SKS_EFT_RF_Format_EDI997::getSegment(_SKS_EFTAP_File.RecId, SKS_EFT_EDI820_Segment::H0080GS, 6);
        sb = new System.Text.StringBuilder();
        if(strLen(locFileKey) > 9)
        {
            sb.Append(SKS_PP_StringFormats::strSub(locFileKey,strLen(locFileKey) - 8));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(9,locFileKey,SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        }        
        sb.Append(SKS_PP_StringFormats::strFill(30, SKS_PP_StringFormats::strRight(_SKS_EFT_FileDetail.PaymentReference, 9),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left)); //SKS#DevOps:14879
    
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>