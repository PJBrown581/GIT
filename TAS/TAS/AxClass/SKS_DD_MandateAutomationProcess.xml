<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_MandateAutomationProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The main class to create and send the SRS file
/// </summary>
using Microsoft.Dynamics.ApplicationPlatform.SSRSReportRuntime.Instrumentation;
using Microsoft.Dynamics.AX.Framework.DocumentContract;
using Microsoft.Dynamics.AX.Framework.Reporting.Shared;

class SKS_DD_MandateAutomationProcess
{
    SysEmailTable           emailTable;
    System.IO.MemoryStream  ioStream;
    SYSEmailMessageTable    message;
    str                     messageBody;
    str						attachmentfileName;
    CustDirectDebitMandate  custDirectDebitMandate;
    LogisticsElectronicAddressLocator   locator;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmMandateRecord</Name>
				<Source><![CDATA[
    public CustDirectDebitMandate parmMandateRecord(CustDirectDebitMandate _mandateRecord = null)
    {
        if(_mandateRecord)
        {
            custDirectDebitMandate = _mandateRecord;
        }

        return custDirectDebitMandate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAttachmentFileName</Name>
				<Source><![CDATA[
    public str parmAttachmentFileName(str _fileName = '')
    {
        if(strLen(_fileName) > 0)
        {
            attachmentfileName = _fileName;
        }

        return attachmentfileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogisticsElectronicAddressLocator</Name>
				<Source><![CDATA[
    public LogisticsElectronicAddressLocator parmLogisticsElectronicAddressLocator(LogisticsElectronicAddressLocator _locator = '')
    {
        if(strLen(_locator) > 0)
        {
            locator = _locator;
        }

        return locator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginProcess</Name>
				<Source><![CDATA[
	/// <summary>
    /// Processes the email or print of a mandate.
    /// </summary>
    /// <param name = "_mandateRecord"></param>
    /// <param name = "_sendMail"></param>
    /// <param name = "_template"></param>
    /// <param name = "_locator"></param>
    public  static void beginProcess(CustDirectDebitMandate _mandateRecord, boolean _sendMail, SKS_EFT_TemplateAttach _template, LogisticsElectronicAddressLocator _locator, boolean _attachToDocumentManagement = true)
    {
        System.Exception ex;

        try
        {
            SKS_DD_MandateAutomationProcess   autoProcess= new SKS_DD_MandateAutomationProcess();
            boolean isMandateGeneratedAndAttached = true;

            autoProcess.parmMandateRecord(_mandateRecord);

            if(_attachToDocumentManagement)
            {
                isMandateGeneratedAndAttached = SKS_DD_MandateAutomationProcess::attachDocument(_mandateRecord,_sendMail);
            }
        
            if(isMandateGeneratedAndAttached)
            {
                if(_sendMail)
                {
                    autoProcess.parmLogisticsElectronicAddressLocator(_locator);
                    autoProcess.constructMessageBody( _template);
                    autoProcess.emailMandate();
                }
                else
                {
                    autoProcess.printMandatetoPrinter();
                }
            }
        }
        catch(ex)
        {
            error(strFmt("@SKS:SKGMandateAutoProcessFailed", _mandateRecord.MandateReference, _mandateRecord.CustAccount, _mandateRecord.company()) + ' ' + ex.Message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructMessageBody</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs email message body
    /// </summary>
    /// <param name = "_template"></param>
    public void constructMessageBody(SKS_EFT_TemplateAttach  _template)
    {
        if (_template)
        {
            emailTable = SysEmailTable::find(_template);
            message = SysEmailMessageTable::find(emailTable.EmailId,emailTable.DefaultLanguage);

            if (!emailTable || !message)
            {
                info("@SKS:SKGEmailFailed");
                return;
            }
            messagebody = message.Mail;
            messagebody = strReplace(messageBody,'%CompanyName%',CompanyInfo::findDataArea(curExt()).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the report to file and attaches it to document management.
    /// </summary>
    /// <param name = "_custDirectDebitMandate"> Selected mandate record.</param>
    /// <param name = "_forEmail">Print settings and controller class will be setup based on this.</param>
    public static boolean attachDocument(CustDirectDebitMandate _custDirectDebitMandate, boolean _forEmail = false)
    {
        Args          args;
        str           locControllerClassName;
        SysDictClass  locSysDictClass;
        str           locFileName, locFileNameNoExtension;
        str           locMandateSchemeStr;
        System.Exception     ex;

        try
        {
            SKS_DD_MandateAutomationProcess   autoProcess= new SKS_DD_MandateAutomationProcess();

            if((_custDirectDebitMandate.MandateScheme == CustMandateScheme::B2B && _custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Standard)
                || _custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Leverander)
            {
                locControllerClassName = _forEmail?SKS_EFT_Setup::find().B2BLS_FormEmail:SKS_EFT_Setup::find().B2BLS_FormReguarEmail;
            }
            else if((_custDirectDebitMandate.MandateScheme == CustMandateScheme::CORE && _custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Standard)
                || _custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Betalings)
            {
                locControllerClassName = _forEmail?SKS_EFT_Setup::find().CoreBS_FormEmail:SKS_EFT_Setup::find().CoreBSFormRegularEmail;
            }

            locMandateSchemeStr = _custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Standard? enum2Str(_custDirectDebitMandate.MandateScheme) : enum2Str(_custDirectDebitMandate.SKS_EB_MandateType);

            locFileNameNoExtension = 'DirectDebitMandate_' + locMandateSchemeStr + '_' + CustTable::find(_custDirectDebitMandate.CustAccount).name();
            if(strLen(locFileNameNoExtension) > 56)
            {
                locFileNameNoExtension = subStr(locFileNameNoExtension,1,56);
            }
            locFileName = locFileNameNoExtension + '.pdf';

            autoProcess.parmAttachmentFileName(locFileName);

            args = new Args();
            args.record(_custDirectDebitMandate);
            args.name(locFileName);

            locSysDictClass = new SysDictClass(className2Id(locControllerClassName));
            locSysDictClass.callStatic('main',args);
        }
        catch(ex)
        {
            error(strFmt("@SKS:SKGMandateDocumentAttachmentFailed",_custDirectDebitMandate.MandateReference, _custDirectDebitMandate.CustAccount, _custDirectDebitMandate.company()) + ' ' + ex.Message);
            return false;
        }

        info(strFmt("@SKS:SKGMandateDocumentAttachmentSuccess",_custDirectDebitMandate.MandateReference, _custDirectDebitMandate.CustAccount, _custDirectDebitMandate.company()));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportStream</Name>
				<Source><![CDATA[
    public	System.IO.MemoryStream getReportStream()
    {
        DocuRef docuRef;
        System.IO.MemoryStream stream;
        CustDirectDebitMandate locCustDirectDebitMandate;

        locCustDirectDebitMandate = this.parmMandateRecord();

        docuRef = DocuRef::findTableIdRecId(locCustDirectDebitMandate.DataAreaId, locCustDirectDebitMandate.TableId, locCustDirectDebitMandate.RecId);

        if(docuRef)
        {
			if(strLen(this.parmAttachmentFileName()) == 0)
            {
                this.parmAttachmentFileName(docuRef.Name);
            }
            container fileContainer = DocumentManagement::getAttachmentAsContainer(docuRef);
            stream = Binary::constructFromContainer(fileContainer).getMemoryStream();
        }

        return stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailMandate</Name>
				<Source><![CDATA[
    public boolean emailMandate()
    {
        SysMailerMessageBuilder     messageBuilder;
        str                         html;
        container                   data;
        boolean                     ret = false;

        #File
        
        messageBuilder = new SysMailerMessageBuilder();

        messageBuilder.setFrom(emailTable.SenderAddr,emailTable.SenderName)
            .setSubject(message.Subject);
        messageBuilder.addReplyTo(SKS_EFT_Setup::find().SKS_DD_MandatesReplyToEMail);
        messageBuilder.addTo(locator);

        switch (emailTable.priority)
        {
            case eMailPriority::High:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::High);
                break;
            case eMailPriority::Low:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::Low);
                break;
            default:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::Normal);
                break;
        }
        [html, data] = SysEmailBatch::embedImages(messageBody);
    
        messageBuilder.setBody(html);
        messageBuilder.addAttachment(this.getReportStream(), this.parmAttachmentFileName(),System.Web.MimeMapping::GetMimeMapping(this.parmAttachmentFileName()));

        
        System.Exception exception;
        try
        {
            ret = SysMailerFactory::sendNonInteractive(messageBuilder.getMessage());
        }
        catch(exception)
        {
            error(exception.get_Message());
            ret=false ;
        }        

        info(strFmt("@SYS31964",locator));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMandatetoPrinter</Name>
				<Source><![CDATA[
	public void printMandatetoPrinter()
    {
        SRSPrintDestinationSettings printDestinationSettings = new SRSPrintDestinationSettings();
        str pageSettings = SRSProxy::getDefaultPrinterPageSettings();
        printDestinationSettings.printerPageSettings(pageSettings);

        if(printDestinationSettings)
        {
            System.IO.MemoryStream stream = this.getReportStream();
            PdfDocumentContract documentContract = DocumentContractFactory::Instance.Create(DocumentContractType::Pdf);
            documentContract.Name = attachmentFileName;
            documentContract.Contents = stream.ToArray();
            documentContract.Settings = printDestinationSettings.printerPageSettings();
            documentContract.TargetType = TargetType::Printer;
            documentContract.ActivityID = InstrumentationHelper::EnsureActivityIdIsSet();

            SrsReportRunPrinter::sendDocumentContractToDocumentRouter(documentContract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOriginalTemplate</Name>
				<Source><![CDATA[
    // Template original
    static void initializeOriginalTemplate()
    {
        SysEmailMessageTable SysEmailMessageTable;
        SysEmailTable SysEmailTable;
        
        SysEmailTable.Description = 'Original';
        SysEmailTable.EmailId = 'SKS_DD_Ori';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();
    
        SysEmailMessageTable.EmailId = 'SKS_DD_Ori';
        SysEmailMessageTable.Mail =@'
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META content="text/html; charset=unicode" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 11.00.9600.18450"></HEAD>
<BODY>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><FONT face=Calibri>Please find attached the
direct debit mandate agreement.<?xml:namespace prefix = "o" ns =
"urn:schemas-microsoft-com:office:office" /><o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><o:p><FONT
face=Calibri>&nbsp;</FONT></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><FONT face=Calibri>Please sign the document and
return it by replying to this email.</FONT><o:p></o:p></SPAN></P>
<P>Best Regards,&nbsp;<BR>%CompanyName%&nbsp;<BR><BR></P></BODY></HTML>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Direct debit mandate original';
        SysEmailMessageTable.XSLTMail = '';
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReminder1Template</Name>
				<Source><![CDATA[
    // Template for Reminder 1
    static void initializeReminder1Template()
    {
        SysEmailMessageTable SysEmailMessageTable;
        SysEmailTable SysEmailTable;
        
        SysEmailTable.Description = 'Reminder1';
        SysEmailTable.EmailId = 'SKS_DD_Rm1';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();
    
        SysEmailMessageTable.EmailId = 'SKS_DD_Rm1';;
        SysEmailMessageTable.Mail =@'
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META content="text/html; charset=unicode" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 11.00.9600.18450"></HEAD>
<BODY>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><FONT face=Calibri>Reminder 1:<BR><BR>Please find attached the
direct debit mandate agreement.<?xml:namespace prefix = "o" ns =
"urn:schemas-microsoft-com:office:office" /><o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><o:p><FONT
face=Calibri>&nbsp;</FONT></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><FONT face=Calibri>Please sign the document and
return it by replying to this email.</FONT><o:p></o:p></SPAN></P>
<P>Best Regards,&nbsp;<BR>%CompanyName%&nbsp;<BR><BR></P></BODY></HTML>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Direct debit mandate reminder1';
        SysEmailMessageTable.XSLTMail = '';
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReminder2Template</Name>
				<Source><![CDATA[
    /// Template for Reminder 2
    static void initializeReminder2Template()
    {
        SysEmailMessageTable SysEmailMessageTable;
        SysEmailTable SysEmailTable;

        SysEmailTable.Description = 'Reminder2';
        SysEmailTable.EmailId = 'SKS_DD_Rm2';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();
    
        SysEmailMessageTable.EmailId = 'SKS_DD_Rm2';;
        SysEmailMessageTable.Mail =@'
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML><HEAD>
<META content="text/html; charset=unicode" http-equiv=Content-Type>
<META name=GENERATOR content="MSHTML 11.00.9600.18450"></HEAD>
<BODY>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><FONT face=Calibri>Reminder 2:<BR><BR>Please find attached the
direct debit mandate agreement.<?xml:namespace prefix = "o" ns =
"urn:schemas-microsoft-com:office:office" /><o:p></o:p></FONT></SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><o:p><FONT
face=Calibri>&nbsp;</FONT></o:p></SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-AU
style="mso-ansi-language: EN-AU"><FONT face=Calibri>Please sign the document and
return it by replying to this email.</FONT><o:p></o:p></SPAN></P>
<P>Best Regards,&nbsp;<BR>%CompanyName%&nbsp;<BR><BR></P></BODY></HTML>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Direct debit mandate reminder2';
        SysEmailMessageTable.XSLTMail = '';
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>