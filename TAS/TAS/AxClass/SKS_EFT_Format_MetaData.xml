<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_MetaData</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_Format_MetaData
{
    container   conFormatID;
    Str         productVersion;
    str         formatGroupVersion;
    str         formatfiletype;
    str         dataContractVersion;
    SKS_EFT_FileFormat gSKS_EFT_FileFormat;
    SKS_EFT_FileFormatPaymSpec gSKS_EFT_FileFormatPaymSpec;
    SKS_EFT_VendorPaym gSKS_EFT_VendorPaym;
    SKS_EFT_CustomerPaym gSKS_EFT_CustomerPaym;
    SKS_EFT_CustReimbursementPaym gSKS_EFT_CustReimbursementPaym;
    SKS_EFT_Bank gSKS_EFT_Bank;   
    SKS_EFTAR_Bank gSKS_EFTAR_Bank;
    SKS_EFTBTB_Bank gSKS_EFTBTB_Bank;
    SKS_EFTCNP_Bank gSKS_EFTCNP_Bank;
    SKS_EB_CodeSource   gformatGroupSourceCode;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetFormatsList</Name>
				<Source><![CDATA[
    public container GetFormatsList()
    {
        return this.conFormatID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetFormatGroupVersion</Name>
				<Source><![CDATA[
    public str GetFormatGroupVersion()
    {
        return formatGroupVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportFormatMetaData</Name>
				<Source><![CDATA[
    public void ImportFormatMetaData()
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatHeader> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatHeader>();
        
        SKG_File.Models.SKGFormatMetadataFormatHeader format;
        container headerlist;
        int       numrecords;
        int       counter;
        boolean   importDetails;
        str       fileformattype;
        boolean   importGrpDetails;
        boolean   formatRecordsDeleted;     

        fileformattype = this.getFormatFileType();

        if (fileformattype == 'EFT')
        {
            //Delete Format Records
            //this.DeleteFormat();
        
            //Get format headers data container
            headerlist = this.getHeaderMetaData();

            //get format list of headers and import
            formatList = this.formatHeaders(headerlist);
            format = formatList.get_item(0);

            gformatGroupSourceCode = this.chkFormatGroupCodeSource(format.FormatId);

            if (gformatGroupSourceCode == SKS_EB_CodeSource::D365)
            {
                numrecords = formatList.get_count();

                importGrpDetails = true;

                for(counter = 0; counter < numrecords; Counter++)
                {                
                    format = formatList.get_item(Counter);
                    if (!formatRecordsDeleted)
                    {
                        formatRecordsDeleted = this.chkDeleteData(format.FormatId, format.formatGroupVersion);
                    }

                    importDetails = this.CreateFormatHeader(format, gformatGroupSourceCode, SKS_EFT_APIFormatType::File);  //H

                    if (importDetails)
                    {                
                        this.importFormatDetails(format.FormatId,importGrpDetails);
                        importGrpDetails = false;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>chkFormatGroupCodeSource</Name>
				<Source><![CDATA[
    private SKS_EB_CodeSource chkFormatGroupCodeSource(str _formatID)
    {
        SKS_EB_CodeSource   formatGroupSourceCode;
        SKS_EFT_FileFormat fileFormat;

        select firstonly fileFormat
        where fileFormat.FormatId == _formatId && fileformat.FormatGroupCodeSource == SKS_EB_CodeSource::BankFabric;

        if (fileFormat)
        {
            formatGroupSourceCode = fileformat.FormatGroupCodeSource;
        }
        else
        {
            formatGroupSourceCode = SKS_EB_CodeSource::D365;
        }
        return formatGroupSourceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFormatGroupDetails</Name>
				<Source><![CDATA[
    public void importFormatGroupDetails()
    {
        this.importCodeLookups();                           //C
        this.importCodeLookupvalues();                      //V

        this.importBankCodeLookups();                           
        this.importBankCodeLookupvalues();  
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFormatDetails</Name>
				<Source><![CDATA[
    public void importFormatDetails(str _formatID, boolean _ImpGrpDetails = false)
    {
        if (_ImpGrpDetails)
        {
            //Import once - format group level metadata
            this.importFormatGroupDetails();
        }

        this.importControlFormat(_formatID);                //T
        //this.importFormatLookups(_formatID);                //L
        this.ImportPaySpecs(_formatID);                     //D
        this.ImportPaySpecsFields(_formatID);               //F
        this.importFileFormatNotes(_formatID);              //N
        this.importBankFormatValidations(_formatID);        //B
        this.ImportFileFormatFields(_formatID);

        this.updateCodelookupValues(_formatID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>chkDeleteData</Name>
				<Source><![CDATA[
    private boolean chkDeleteData(SKS_EFT_FormatId _formatId,SKS_EB_Version _formatGroupVersion)
    {
        boolean   formatRecordsDeleted;
        SKS_EFT_FileFormat fileFormat;

        select firstonly fileFormat 
        where fileFormat.FormatId == _formatId && fileformat.Selected == NoYes::Yes;

        if (fileFormat)
        {
            if (fileFormat.formatGroupVersion != _formatGroupVersion)
            {
                this.DeleteFormat();
                formatRecordsDeleted = true;
            }
        }
        return formatRecordsDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteFormat</Name>
				<Source><![CDATA[
    public void DeleteFormat()
    {
        SKS_EFT_FormatMetaData_Delete formatMetaDataDelete;

        container   deleteList;
        formatMetaDataDelete = new SKS_EFT_FormatMetaData_Delete();
        deleteList = this.getDeleteMetaData();
        formatMetaDataDelete.deleteMetaData(deleteList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importDVRules</Name>
				<Source><![CDATA[
    private void importDVRules()
    {
        container   DVRulesList;

        DVRulesList = this.getDVRulesMetaData();
        this.CreateDVRules(DVRulesList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importDVDetails</Name>
				<Source><![CDATA[
    private void importDVDetails()
    {
        container   DVDetailsList;

        DVDetailsList = this.getDVDetailsMetaData();
        this.CreateDVDetails(DVDetailsList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importValidationMapping</Name>
				<Source><![CDATA[
    private void importValidationMapping()
    {
        container   mappingList;

        mappingList = this.getValidationMappingMetaData();
        this.CreateValidationMapping(mappingList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importCodeLookups</Name>
				<Source><![CDATA[
    private void importCodeLookups()
    {
        container   codeLookupList;

        codeLookupList = this.getCodeLookupMetaData();
        this.CreateCodeLookup(codeLookupList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importCodeLookupvalues</Name>
				<Source><![CDATA[
    private void importCodeLookupvalues()
    {
        container   codeLookupValuesList;

        codeLookupValuesList = this.getCodeLookupValuesMetaData();
        this.CreateCodeLookupValues(codeLookupValuesList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importBankCodeLookups</Name>
				<Source><![CDATA[
    private void importBankCodeLookups()
    {
        container   codeLookupList;

        codeLookupList = this.getBankCodeLookupMetaData();
        this.CreateBankCodeLookup(codeLookupList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importBankCodeLookupvalues</Name>
				<Source><![CDATA[
    private void importBankCodeLookupvalues()
    {
        container   codeLookupValuesList;

        codeLookupValuesList = this.getBankCodeLookupValuesMetaData();
        this.CreateBankCodeLookupValues(codeLookupValuesList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importControlFormat</Name>
				<Source><![CDATA[
    private void importControlFormat(str _formatID)
    {
        container   ControlFormatList;

        ControlFormatList = this.getControlFormatMetaData(_formatID);
        this.CreateControlFormat(ControlFormatList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportPaySpecs</Name>
				<Source><![CDATA[
    //private void importFormatLookups(str _formatID)
    //{
    //    container   formatLookupsList;

    //    formatLookupsList = this.getFormatLookupsMetaData(_formatID);
    //    this.CreateformatLookups(formatLookupsList);

    //}

    private void ImportPaySpecs(str _formatID)
    {
        container   paymSpecList;
        
        paymSpecList = this.getPaymSpecsMetaData(_formatID);
        this.CreateFormatPaySpecs(paymSpecList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportPaySpecsFields</Name>
				<Source><![CDATA[
    private void ImportPaySpecsFields(str _formatID)
    {
        container   paymSpecFieldList;
        
        paymSpecFieldList = this.getPaymSpecFieldsMetaData(_formatID);
        this.CreateFormatPaySpecsFields(paymSpecFieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportFileFormatFields</Name>
				<Source><![CDATA[
    private void ImportFileFormatFields(str _formatID)
    {
        container   paymSpecFieldList;
        
        paymSpecFieldList = this.getFileFormatFieldsMetaData(_formatID);
        this.CreateFileFormatFields(paymSpecFieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>importFileFormatNotes</Name>
				<Source><![CDATA[
    private void importFileFormatNotes(str _formatID)
    {
        container   notesList;

        notesList = this.getNotesMetaData(_formatID);
        this.CreateFormatNotes(notesList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importBankFormatValidations</Name>
				<Source><![CDATA[
    private void importBankFormatValidations(str _formatID)
    {
        container   ValidationsList;
        
        ValidationsList = this.getValidationsMetaData(_formatID);
        this.CreateFormatValidations(ValidationsList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        str    fileformattype;

        info("@SKS:SKGMetadataFileType");
        return fileformattype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container headerList;
        
        info("@SKS:SKGMetadataHeader");
        return headerList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        info("@SKS:SKGMetadataDelete");
        return deleteList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDVRulesMetaData</Name>
				<Source><![CDATA[
    protected container getDVRulesMetaData()
    {
        container   DVRulesList;

        //info("Format class is missing Data Validation Rules metadata method getDVRulesMetaData.");
        return DVRulesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDVDetailsMetaData</Name>
				<Source><![CDATA[
    protected container getDVDetailsMetaData()
    {
        container   DVDetailsList;

        //info("Format class is missing Data Validation Details metadata method getDVDetailsMetaData.");
        return DVDetailsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationMappingMetaData</Name>
				<Source><![CDATA[
    protected container getValidationMappingMetaData()
    {
        container   mappingList;

        //info("Format class is missing Validation mapping metadata method getValidationMappingMetaData.");
        return mappingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        info("@SKS:SKGMetadataLookupCd");
        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        info("@SKS:SKGMetadataLookupValue");
        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        info("@SKS:SKGFormatBankCodeLookup");
        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        info("@SKS:SKGFormatBankCodeLookupsMissing");
        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        info("@SKS:SKGMetadataControlFmt");
        return ControlFormatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    //protected container getFormatLookupsMetaData(str _formatID)
    //{
    //    container   formatLookupsList;

    //    info("@SKS:SKGMetadataFormatLookup");
    //    return formatLookupsList;
    //}

    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        info("@SKS:SKGMetadataPaymSpec");
        return paymSpecList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        info("@SKS:SKGMetadataPaymSpecFields");
        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        info(strFmt("@SKS:SKGFormatClassMissing"));
        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        info("@SKS:SKGMetadataFormatNotes");
        return notesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        info("@SKS:SKGMetadataFormatValid");
        return validationsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Format Header
    /// </summary>
    /// <param name = "format">Format</param>
    /// <param name = "_CodeSource">CodeSource</param>
    /// <param name = "_APIFormatType">APIFormatType</param>
    /// <returns>True or false</returns>
    //============================================== Format Header =========================================================
    public boolean CreateFormatHeader(SKG_File.Models.SKGFormatMetadataFormatHeader format, SKS_EB_CodeSource _CodeSource, SKS_EFT_APIFormatType _APIFormatType)
    {
        SKS_EFT_FileFormat fileFormat;
        SKS_PP_Setup    lSKS_PP_Setup;
        boolean updateformat;
        boolean importDetails;

        importDetails = false;
        lSKS_PP_Setup = SKS_PP_Setup::find();

        select firstonly fileFormat
            where fileFormat.FormatId == format.FormatId;

        if (fileFormat)
        {
            if (format.ProductVersion != '' && (lSKS_PP_Setup.RegVersion != format.ProductVersion || fileFormat.productversion != format.ProductVersion))
            {
                Info("@SKS:SKGTASProductVersionCompatible");
                return importDetails;
            }
            if (fileFormat.formatGroupVersion == format.formatGroupVersion)
            {
                return importDetails;
            }
            else
            {
                fileFormat.selectForUpdate(true);
                updateformat = true;
            }
        }
        else
        {
            updateformat = false;
        }
                        
        fileFormat.BEDesc01 = format.BEDesc01;
        fileFormat.BEDesc02 = format.BEDesc02;
        fileFormat.BEMask01 = format.BEMask01;
        fileFormat.BEMask02 = format.BEMask02;
        fileFormat.CompanyIdMask = format.CompanyIdMask;
        fileFormat.CompanyIdTitle = format.CompanyIdTitle;
        fileFormat.CompanyNameMask = format.CompanyNameMask;
        fileFormat.CompanyNameTitle = format.CompanyNameTitle;
        fileFormat.Description = format.Description;
        fileFormat.EDI = format.EDI;
        fileFormat.EntryClassMask = format.EntryClassMask;
        fileFormat.EntryClassTitle = format.EntryClassTitle;
        fileFormat.ExternalFormat = format.ExternalFormat;
        fileFormat.FormatGroup = format.FormatGroup;
        fileFormat.FormatId = format.FormatId;
        fileFormat.FormatType = format.FormatType;
        fileFormat.ImmDestMask = format.ImmDestMask;
        fileFormat.ImmDestNameMask = format.ImmDestNameMask;
        fileFormat.ImmDestNameTitle = format.ImmDestNameTitle;
        fileFormat.ImmDestTitle = format.ImmDestTitle;
        fileFormat.ImmOriginMask = format.ImmOriginMask;
        fileFormat.ImmOriginNameMask = format.ImmOriginNameMask;
        fileFormat.ImmOriginNameTitle = format.ImmOriginNameTitle;
        fileFormat.ImmOriginTitle = format.ImmOriginTitle;
        fileFormat.IncludeCpnyCredit = format.IncludeCpnyCredit;
        fileFormat.IncludeCpnyDebit = format.IncludeCpnyDebit;
        fileFormat.LastEffectiveDate = format.LastEffectiveDate;
        fileFormat.MastAcctList = format.MastAcctList;
        fileFormat.RecordLength = format.RecordLength;
        fileformat.SKS_BTB_FundTransferType = format.BTB_FundTransferType;
        fileFormat.SupportsMultiCompany = format.SupportsMultiCompany;
        fileFormat.SupportsMultipleEffectiveDates = format.SupportsMultipleEffectiveDates;
        fileFormat.TrimRecord = format.TrimRecord;
        fileFormat.TwoFileNameAddition = format.TwoFileNameAddition;
        fileFormat.UseWithBanktoBank = format.UseWithBankToBank;
        fileFormat.UseWithCustReimbursements = format.UseWithCustReimbursements;
        fileFormat.UseWithCustomers = format.UseWithCustomers;
        fileFormat.UseWithVendors = format.UseWithVendors;
        fileFormat.UseAddenda = format.UseAddenda;
        fileFormat.WBank01Description = format.WBank01Description;
        fileFormat.WBank01Mask = format.WBank01Mask;
        fileFormat.WBank01Required = format.WBank01Required;
        fileFormat.WBank02Description = format.WBank02Description;
        fileFormat.WBank02Mask = format.WBank02Mask;
        fileFormat.WBank02Required = format.WBank02Required;
        fileFormat.WBank03Description = format.WBank03Description;
        fileFormat.WBank03Mask = format.WBank03Mask;
        fileFormat.WBank03Required = format.WBank03Required;
        fileFormat.WBank04Description = format.WBank04Description;
        fileFormat.WBank04Mask = format.WBank04Mask;
        fileFormat.WBank04Required = format.WBank04Required;
        fileFormat.ProductVersion = format.ProductVersion;
        fileFormat.formatGroupVersion = format.FormatGroupVersion;
        fileFormat.FormatGroupDataContractVersion = format.DataContractVersion;
        fileFormat.FormatGroupCodeSource = _CodeSource;
        fileFormat.APIFileFormatType = _APIFormatType;

        if (updateformat)
        {
            ttsbegin;
            fileFormat.update();
            ttscommit;

            if (fileFormat.Selected)
            {
                importDetails = true;
            }
        }
        else
        {
            fileFormat.ARDateOffset = format.ARDateOffset;
            fileFormat.BlockFill = format.BlockFill;
            fileFormat.CrLf = format.CrLf;
            fileFormat.DaysPriorToEffectiveDate = format.DaysPriorToEffectiveDate;
            fileFormat.NextDailyReset = format.NextDailyReset;
            fileFormat.NextDailyResetDate = format.NextDailyResetDate;
            fileFormat.NextFileId = format.NextFileId;
            fileFormat.NextSequenceNumber = format.NextSequenceNumber;
            fileFormat.PayDateIsEffDate = format.PayDateIsEffDate;
            fileFormat.PreNote = format.PreNote;
            fileFormat.PreNoteDays = format.PreNoteDays;
            //fileFormat.ProductVersion = format.ProductVersion;
            //fileFormat.formatGroupVersion = format.formatGroupVersion;
            ttsbegin;
            fileFormat.insert();
            ttscommit;
        }

        return importDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatHeaders</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatHeader> formatHeaders(container _headerList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatHeader> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatHeader>();

        SKG_File.Models.SKGFormatMetadataFormatHeader format;

        container   formatHeader;
        int i;

        for (i = 1 ; i <= conLen(_headerList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataFormatHeader();

            formatHeader = conPeek(_headerList,i);
            
            format.ProductVersion = conpeek(formatHeader, 1);
            format.formatGroupVersion = conpeek(formatHeader, 2);
            format.UseWithCustomers = conpeek(formatHeader, 3);
            format.UseWithVendors = conpeek(formatHeader, 4);
            format.UseWithBanktoBank = conpeek(formatHeader, 5);
            format.UseWithCustReimbursements = conpeek(formatHeader, 6);
            format.BEDesc01 = conpeek(formatHeader, 7);
            format.BEDesc02 = conpeek(formatHeader, 8);
            format.BEMask01 = conpeek(formatHeader, 9);
            format.BEMask02 = conpeek(formatHeader, 10);
            format.BlockFill = conpeek(formatHeader, 11);
            format.CompanyIdMask = conpeek(formatHeader, 12);
            format.CompanyIdTitle = conpeek(formatHeader, 13);
            format.CompanyNameTitle = conpeek(formatHeader, 14);
            format.CompanyNameMask = conpeek(formatHeader, 15);
            Format.CrLf = conpeek(formatHeader, 16);
            format.Description = conpeek(formatHeader, 17);            
            format.EffectiveDateOffset = conpeek(formatHeader, 18);
            format.EntryClassTitle = conpeek(formatHeader, 19);
            format.EntryClassMask = conpeek(formatHeader, 20);            
            format.FormatId = conpeek(formatHeader, 21);
            format.FormatType = conpeek(formatHeader, 22);
            format.ImmDestMask = conpeek(formatHeader, 23);
            format.ImmDestTitle = conpeek(formatHeader, 24);
            format.ImmDestNameTitle = conpeek(formatHeader, 25);
            format.ImmDestNameMask = conpeek(formatHeader, 26);            
            format.ImmOriginTitle = conpeek(formatHeader, 27);
            format.ImmOriginMask = conpeek(formatHeader, 28);
            format.ImmOriginNameTitle = conpeek(formatHeader,29);
            format.ImmOriginNameMask = conpeek(formatHeader, 30);
            format.IncludeCpnyCredit = conpeek(formatHeader, 31);
            format.IncludeCpnyDebit = conpeek(formatHeader, 32);
            format.LastEffectiveDate = str2Date(conpeek(formatHeader, 33),123);
            format.NextDailyReset = conpeek(formatHeader, 34);
            format.NextDailyResetDate = str2Date(conpeek(formatHeader, 35),123);
            format.NextFileId = conpeek(formatHeader, 36);
            format.NextSequenceNumber = conpeek(formatHeader, 37);
            format.PreNote = conpeek(formatHeader, 38);
            format.RecordLength = conpeek(formatHeader, 39);
            format.selected = conpeek(formatHeader, 40);
            format.TrimRecord = conpeek(formatHeader, 41);
            format.TwoFileNameAddition = conpeek(formatHeader, 42);
            format.WBank01Description = conpeek(formatHeader, 43);
            format.WBank01Mask = conpeek(formatHeader, 44);
            format.WBank01Required = conpeek(formatHeader, 45);
            format.WBank02Required = conpeek(formatHeader, 46);          
            format.WBank02Mask = conpeek(formatHeader, 47);
            format.WBank02Description = conpeek(formatHeader, 48);
            format.WBank03Required = conpeek(formatHeader, 49);
            format.WBank03Mask = conpeek(formatHeader, 50);
            format.WBank03Description = conpeek(formatHeader, 51);
            format.WBank04Required = conpeek(formatHeader, 52);
            format.WBank04Mask = conpeek(formatHeader, 53);
            format.WBank04Description = conpeek(formatHeader, 54);
            Format.PreNoteDays = conpeek(formatHeader, 55);
            format.EDI = conpeek(formatHeader, 56);
            format.PayDateIsEffDate = conpeek(formatHeader, 57);
            format.ARDateOffset = conpeek(formatHeader, 58);
            format.UseAddenda = conpeek(formatHeader, 59);
            format.MastAcctList = conpeek(formatHeader, 60);
            format.FormatGroup = conpeek(formatHeader, 61);
            format.SupportsMultipleEffectiveDates = conpeek(formatHeader, 62);
            format.SupportsMultiCompany = conpeek(formatHeader, 63);
            format.ExternalFormat = conpeek(formatHeader, 64);
            format.BTB_FundTransferType = conpeek(formatHeader, 65);
            
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateDVRules</Name>
				<Source><![CDATA[
    //============================================== Data Validation Rules =========================================================
    private void CreateDVRules(container _DVRulesList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVRules> formatList;
        formatList = This.DVRules(_DVRulesList);
        this.CreateDVRulesDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateDVRulesDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateDVRulesDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateDVRulesDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVRules> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataDVRules format;

        SKS_EFT_DataValidationRule  DVRules;
        int                         numrecords, counter;
        boolean                     updateformat;

        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly DVRules where DVRules.DataRuleID == format.DataRuleID;

            if (DVRules)
            {
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            DVRules.Description = format.Description;
            DVRules.SKS_EB_AndOr = format.SKS_EB_AndOr;

            if (updateformat)           //Discuss delete action as per importcsv
            {
                if (DVRules.UserUpdated == 0)
                {
                    DVRules.selectForUpdate(true);
                    ttsbegin;
                    DVRules.update();
                    ttscommit;
                }
            }
            else
            {
                DVRules.DataRuleId = format.DataRuleId;
                DVRules.UserUpdated = format.UserUpdated;
                ttsbegin;
                DVRules.insert();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>DVRules</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVRules> DVRules(container _DVRulesList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVRules> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVRules>();

        SKG_File.Models.SKGFormatMetadataDVRules format;

        container   DVRules;
        int i;

        for (i = 1 ; i <= conLen(_DVRulesList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataDVRules();

            DVRules = conPeek(_DVRulesList,i);

            format.DataRuleId = conpeek(DVRules, 1);
            format.Description = conpeek(DVRules, 2);
            format.SKS_EB_AndOr = conpeek(DVRules, 3);
            format.UserUpdated = conpeek(DVRules, 4);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateDVDetails</Name>
				<Source><![CDATA[
    //============================================== Data Validation Details =========================================================
    private void CreateDVDetails(container _DVDetailsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVDetails> formatList;
        formatList = This.DVDetails(_DVDetailsList);
        this.CreateDVDetailsDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateDVDetailsDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateDVDetailsDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateDVDetailsDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVDetails> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataDVDetails format;

        SKS_EFT_DataValidationDetails   DVDetails;
        SKS_EFT_DataValidationRule      DVRules;
        int                             numrecords, counter;
        boolean                         updateformat;

        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly DVRules where DVRules.DataRuleID == Format.DataRuleID;

            if (DVRules && DVRules.UserUpdated == NoYes::No)
            {
                select firstonly DVDetails where DVDetails.DataRuleId == format.DataRuleId
                            && DVDetails.SKS_EB_ValidationFilter == any2Enum(format.SKS_EB_ValidationFilter)
                            && DVDetails.Value == format.Value;

                if (DVDetails)
                {
                    updateformat = true;
                }
                else
                {
                    updateformat = false;
                }
                        
                DVDetails.CaseSensitive = format.CaseSensitive;

                if (updateformat)           //Discuss delete action as per importcsv
                {
                    DVDetails.selectForUpdate(true);
                    ttsbegin;
                    DVDetails.update();
                    ttscommit;                    
                }
                else
                {
                    DVDetails.DataRuleId = format.DataRuleId;
                    DVDetails.SKS_EB_ValidationFilter = format.SKS_EB_ValidationFilter;
                    DVDetails.Value = format.Value;
                    ttsbegin;
                    DVDetails.insert();
                    ttscommit;
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>DVDetails</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVDetails> DVDetails(container _DVDetailsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVDetails> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataDVDetails>();

        SKG_File.Models.SKGFormatMetadataDVDetails format;

        container   DVDetails;
        int i;

        for (i = 1 ; i <= conLen(_DVDetailsList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataDVDetails();

            DVDetails = conPeek(_DVDetailsList,i);

            format.DataRuleId = conpeek(DVDetails, 1);
            format.SKS_EB_ValidationFilter = conpeek(DVDetails, 2);
            format.Value = conpeek(DVDetails, 3);
            format.CaseSensitive = conpeek(DVDetails, 4);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateValidationMapping</Name>
				<Source><![CDATA[
    //============================================== Validation Mapping =========================================================
    private void CreateValidationMapping(container _mappingList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataValidationMapping> mappingList;
        mappingList = This.ValidationMapping(_mappingList);
        this.CreateValidationMappingDatabase(mappingList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateValidationMappingDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateValidationMappingDatabase
    /// </summary>
    /// <param name = "_mappingList">MappingList</param>
    public void CreateValidationMappingDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataValidationMapping> _mappingList)
    {
        SKG_File.Models.SKGFormatMetadataValidationMapping format;

        SKS_EFT_BRValidationAltFieldMapping   vMapping;
        int                             numrecords, counter;

        numrecords = _mappingList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _mappingList.get_item(Counter);

            select firstonly vMapping
                     where vMapping.SourceContext == any2Enum(format.SourceContext) &&
                           vMapping.SourceField == format.SourceField;
                        
            vMapping.MappingFieldLocation = format.MappingFieldLocation;
            vMapping.MappingSourceContext = format.MappingSourceContext;
            vMapping.MappingField = format.MappingField;

            if (vMapping)           //Discuss delete action as per importcsv
            {
                vMapping.selectForUpdate(true);
                ttsbegin;
                vMapping.update();
                ttscommit;
            }
            else
            {
                vMapping.SourceContext = any2Enum(format.SourceContext);
                vMapping.SourceField = format.SourceField;
                ttsbegin;
                vMapping.insert();
                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidationMapping</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataValidationMapping> ValidationMapping(container _mappingList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataValidationMapping> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataValidationMapping>();

        SKG_File.Models.SKGFormatMetadataValidationMapping format;

        container   mapping;
        int i;

        for (i = 1 ; i <= conLen(_mappingList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataValidationMapping();

            mapping = conPeek(_mappingList,i);

            format.SourceContext = conpeek(mapping, 1);
            format.SourceField = conpeek(mapping, 2);
            format.MappingSourceContext = conpeek(mapping, 3);
            format.MappingField = conpeek(mapping, 4);
            format.MappingFieldLocation = conpeek(mapping, 5);
            
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateControlFormat</Name>
				<Source><![CDATA[
    //============================================== Control Format =========================================================
    private void CreateControlFormat(container _ControlFormatList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataControlFormat> formatList;
        formatList = This.ControlFormat(_ControlFormatList);
        this.CreateControlFormatDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateControlFormatDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateControlFormatDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateControlFormatDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataControlFormat> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataControlFormat format;

        SKS_EFT_ControlFiles  controlFiles;
        int                numrecords, counter;
        boolean            updateformat;
        
        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly forupdate controlFiles where controlFiles.FileFormatID == format.fileFormatID && controlFiles.EFTControlFileFormatID == format.EFTControlFileFormatID;

            if (controlFiles)
            {
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            controlFiles.EFTControlFileDescription = format.EFTControlFileDescription;
            

            if (updateformat)           //Discuss delete action as per importcsv
            {
                ttsbegin;
                controlFiles.update();
                ttscommit;
            }
            else
            {
                controlFiles.FileFormatID = format.FileFormatID;
                controlFiles.EFTControlFileFormatID = format.EFTControlFileFormatID;
                ttsbegin;
                controlFiles.insert();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>ControlFormat</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataControlFormat> ControlFormat(container _ControlFormatList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataControlFormat> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataControlFormat>();

        SKG_File.Models.SKGFormatMetadataControlFormat format;

        container   codelookup;
        int i;

        for (i = 1 ; i <= conLen(_ControlFormatList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataControlFormat();

            codelookup = conPeek(_ControlFormatList,i);

            format.FileFormatID = conpeek(codelookup, 1);
            format.EFTControlFileFormatID = conpeek(codelookup, 2);
            format.EFTControlFileDescription = conpeek(codelookup, 3);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCodeLookup</Name>
				<Source><![CDATA[
    //============================================== Code Lookup =========================================================
    private void CreateCodeLookup(container _codeLookupList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookup> formatList;
        formatList = This.CodeLookups(_codeLookupList);
        this.CreateCodeLookupDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCodeLookupDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateCodeLookupDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateCodeLookupDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookup> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataCodeLookup format;

        SKS_EB_CODELOOKUP  codeLookup;
        int                numrecords, counter;
        boolean            updateformat;
        
        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly codeLookup
                where codeLookup.codeid == format.codeid
                   && codeLookup.FormatGroup == format.formatgroup;

            if (codeLookup)
            {
                codeLookup.selectForUpdate(true);
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            codeLookup.Codeid = format.CodeID;
            codeLookup.Description = format.Description;
            codeLookup.FormatGroup = format.FormatGroup;
            

            if (updateformat)           //Discuss delete action as per importcsv
            {
                ttsbegin;
                codeLookup.update();
                ttscommit;
            }
            else
            {
                ttsbegin;
                codeLookup.insert();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>CodeLookups</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookup> CodeLookups(container _codeLookupList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookup> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookup>();

        SKG_File.Models.SKGFormatMetadataCodeLookup format;

        container   codelookup;
        int i;

        for (i = 1 ; i <= conLen(_codeLookupList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataCodeLookup();

            codelookup = conPeek(_codeLookupList,i);

            format.FormatGroup = conpeek(codelookup, 1);
            format.CodeId = conpeek(codelookup, 2);
            format.Description = conpeek(codelookup, 3);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCodeLookupValues</Name>
				<Source><![CDATA[
    //============================================== Code Lookup values=========================================================
    private void CreateCodeLookupValues(container _codeLookupvaluesList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookupValues> formatList;
        formatList = This.CodeLookupvalues(_codeLookupvaluesList);
        this.CreateCodeLookupValuesDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateCodeLookupValuesDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateCodeLookupValuesDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateCodeLookupValuesDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookupValues> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataCodeLookupValues format;

        SKS_EB_CODELOOKUPVALUES  codeLookupValues;
        int                      numrecords, counter;
        boolean                  updateformat;

        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly codeLookupValues
                where codeLookupValues.codeid == format.codeid
                   && codeLookupValues.FormatGroup == format.formatgroup
                   && codelookupvalues.DisplayValue == format.DisplayValue;

            if (codeLookupValues)
            {
                codeLookupValues.selectForUpdate(true);
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            codeLookupValues.FormatGroup = format.FORMATGROUP;
            codeLookupValues.CodeId = format.CODEID;
            codeLookupValues.DisplayValue = format.DISPLAYVALUE;
            codeLookupValues.CodeValue = Format.CodeValue;
            

            if (updateformat)           //Discuss delete action as per importcsv
            {
                ttsbegin;
                codeLookupValues.update();
                ttscommit;
            }
            else
            {
                ttsbegin;
                codeLookupValues.insert();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>CodeLookupvalues</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookupValues> CodeLookupvalues(container _codeLookupValuesList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookupValues> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataCodeLookupValues>();

        SKG_File.Models.SKGFormatMetadataCodeLookupValues format;

        container   codeLookupValues;
        int i;

        for (i = 1 ; i <= conLen(_codeLookupValuesList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataCodeLookupValues();

            codeLookupValues = conPeek(_codeLookupValuesList,i);

            format.FormatGroup = conpeek(codeLookupValues, 1);
            format.CodeId = conpeek(codeLookupValues, 2);
            format.DisplayValue = conpeek(codeLookupValues, 3);
            format.CodeValue = conpeek(codeLookupValues, 4);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateformatLookups</Name>
				<Source><![CDATA[
    //============================================== Format Lookups =========================================================
    private void CreateformatLookups(container _formatLookupsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatLookups> formatList;
        SKG_File.Models.SKGFormatMetadataFormatLookups format;

        SKS_EFT_FileFormatLookups   fileFormatLookups;
        int                         numrecords, counter;
        boolean                     updateformat;

        
        formatList = This.FormatLookups(_formatLookupsList);
        
        numrecords = formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = formatList.get_item(Counter);

            select firstonly fileFormatLookups
                where fileFormatLookups.FormatId == format.FormatId
                   && fileFormatLookups.FieldValue == format.FieldValue
                   && fileFormatLookups.LookupType == any2Enum(format.LOOKUPTYPE);

            if (fileFormatLookups)
            {
                fileFormatLookups.selectForUpdate(true);
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            fileFormatLookups.FORMATID = format.FormatID;
            fileFormatLookups.LookupType = format.LOOKUPTYPE;
            fileFormatLookups.FieldValue = format.FIELDVALUE;
            fileFormatLookups.FieldData = format.FieldData;
            

            if (updateformat)       //Discuss delete action as per importcsv
            {
                ttsbegin;
                fileFormatLookups.update();
                ttscommit;
            }
            else
            {
                ttsbegin;
                fileFormatLookups.insert();
                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatLookups</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatLookups> FormatLookups(container _formatLookupsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatLookups> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatLookups>();

        SKG_File.Models.SKGFormatMetadataFormatLookups format;

        container   formatLookups;
        int i;

        for (i = 1 ; i <= conLen(_formatLookupsList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataFormatLookups();

            formatLookups = conPeek(_formatLookupsList,i);

            format.FORMATID = conpeek(formatLookups, 1);
            format.lookuptype = conpeek(formatLookups, 2);
            format.fieldvalue = conpeek(formatLookups, 3);
            format.fielddata = conpeek(formatLookups, 4);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatPaySpecs</Name>
				<Source><![CDATA[
    //============================================== Payment Specs =========================================================
    private void CreateFormatPaySpecs(container _PaymSpecList) 
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatPaymSpecs> formatList;
        formatList = this.FormatPaySpecs(_PaymSpecList);
        this.CreateFormatPaySpecsDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatPaySpecsDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateFormatPaySpecsDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateFormatPaySpecsDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatPaymSpecs> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataFormatPaymSpecs format;

        SKS_EFT_FileFormatPaymSpec  fileFormatPaymSpec;
        int                         numrecords, counter;
        boolean                     updateformat;

        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly fileFormatPaymSpec
                where fileFormatPaymSpec.FormatId == format.FormatId
                   && fileFormatPaymSpec.PaymSpec == format.PaymSpec;

            if (fileFormatPaymSpec)
            {
                fileFormatPaymSpec.selectForUpdate(true);
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            fileFormatPaymSpec.FORMATID = format.FormatID;
            fileFormatPaymSpec.PAYMSPEC = format.PaymSpec;
            fileFormatPaymSpec.VBARoutingReqd = format.VBARoutingReqd;
            fileFormatPaymSpec.VBAAccountReqd = format.VBAAccountReqd;
            fileFormatPaymSpec.VBASwiftReqd = format.VBASwiftReqd;
            fileFormatPaymSpec.VBAIBANReqd = format.VBAIBANReqd;
            fileFormatPaymSpec.ARPaymSpecName = format.ARPaymSpecName;
            fileFormatPaymSpec.BEBeneBankAcctReqd = format.BEBeneBankAcctReqd;
            fileFormatPaymSpec.BE01Reqd = format.BE01Reqd;
            fileFormatPaymSpec.BE02Reqd = format.BE02Reqd;
            fileFormatPaymSpec.BE01Use = format.BE01Use;
            fileFormatPaymSpec.BE02Use = format.BE02Use;
            fileFormatPaymSpec.PaymSpecFileDescr = format.PaymSpecFileDescr;
            fileFormatPaymSpec.RecordSummary = str2Int(format.RecordSummary);
            fileFormatPaymSpec.TransactionCode = format.TransactionCode;
            fileFormatPaymSpec.EmailNote = format.EmailNote;
            fileFormatPaymSpec.PaymSpec = format.PaymSpec;
            fileFormatPaymSpec.PaymSpecName = format.PaymSpecName;
            fileFormatPaymSpec.FilterSeparateFile = format.FilterSeparateFile;
            fileFormatPaymSpec.FormatId = format.FormatId;
            fileFormatPaymSpec.CpnyIDNameReq = format.CpnyIDNameReq;
            fileFormatPaymSpec.EmailOff = format.EmailOff;
            fileFormatPaymSpec.VendorUse = format.VendorUse;
            fileFormatPaymSpec.WireTabs = format.WireTabs;
            fileFormatPaymSpec.SamePaymentDate = format.SamePaymentDate;
            fileFormatPaymSpec.SelectByPaymentDate = format.SelectByPaymentDate;
            fileFormatPaymSpec.PreNote = format.PreNote;
            fileFormatPaymSpec.TxnNacha = format.TxnNacha;
            fileFormatPaymSpec.UseCheckNumber = format.UseCheckNumber;
            fileFormatPaymSpec.UseWithCustomers = format.UseWithCustomers;     
            fileFormatPaymSpec.UseWithVendors = format.UseWithVendors;         
            fileFormatPaymSpec.UseWithBanktoBank = format.USEWITHBANKTOBANK;
            fileFormatPaymSpec.UseWithCustReimbursements = format.USEWITHCUSTREIMBURSEMENTS;
            fileFormatPaymSpec.SKS_BTB_PaymSpecFundTransferType = format.BTB_PAYMSPECFUNDTRANSFERTYPE;
            fileFormatPaymSpec.EDI = format.EDI;
            fileFormatPaymSpec.APIGroupType = format.APIGroupType;
            fileFormatPaymSpec.APIGroupName = format.APIGroupName;
            fileFormatPaymSpec.InvoiceDetail = format.InvoiceDetail;
            fileFormatPaymSpec.RemitAvailability = format.RemitAvailability;
            if(fileFormatPaymSpec.RemitType == SKS_EFT_RemitType::NotSet)
            {
                fileFormatPaymSpec.RemitType = format.RemitType;
            }
            if(fileFormatPaymSpec.APNameType == SKS_EFT_APNameType::NotSet)
            {
                fileFormatPaymSpec.APNameType = format.APNameType;
            }
            if(fileFormatPaymSpec.APAddressType == SKS_EFT_APAddressType::NotSet)
            {
                fileFormatPaymSpec.APAddressType = format.APAddressType;
            }
            if(fileFormatPaymSpec.DDNameType == SKS_EFT_DDNameType::NotSet)
            {
                fileFormatPaymSpec.DDNameType = format.DDNameType;
            }
            if(fileFormatPaymSpec.DDAddressType == SKS_EFT_DDAddressType::NotSet)
            {
                fileFormatPaymSpec.DDAddressType = format.DDAddressType;
            }
            if(fileFormatPaymSpec.CRNameType == SKS_EFT_CRNameType::NotSet)
            {
                fileFormatPaymSpec.CRNameType = format.CRNameType;
            }
            if(fileFormatPaymSpec.CRAddressType == SKS_EFT_CRAddressType::NotSet)
            {
                fileFormatPaymSpec.CRAddressType = format.CRAddressType;
            }

            if (updateformat)           //Discuss delete action as per importcsv
            {
                ttsbegin;
                fileFormatPaymSpec.update();
                ttscommit;
            }
            else
            {
                ttsbegin;
                fileFormatPaymSpec.insert();
                ttscommit;
            }

            //update_recordset fileformat Setting UseWithCustomers = fileFormatPaymSpec.UseWithCustomers, UseWithVendors = fileFormatPaymSpec.UseWithVendors
            //    where fileformat.FormatId == fileFormatPaymSpec.FormatId;    //discuss logic to update header
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatPaySpecs</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatPaymSpecs> FormatPaySpecs(container _PaymSpecList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatPaymSpecs> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatPaymSpecs>();

        SKG_File.Models.SKGFormatMetadataFormatPaymSpecs format;

        container   paymspec;
        int i;

        for (i = 1 ; i <= conLen(_PaymSpecList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataFormatPaymSpecs();

            paymspec = conPeek(_PaymSpecList,i);

            format.VBARoutingReqd = conpeek(paymspec, 1);
            format.VBAAccountReqd = conpeek(paymspec, 2);
            format.VBASwiftReqd = conpeek(paymspec, 3);
            format.VBAIBANReqd = conpeek(paymspec, 4);
            format.ARPaymSpecName = conPeek(paymspec, 5);
            format.BEBeneBankAcctReqd = conpeek(paymspec, 6);
            format.BE01Reqd = conpeek(paymspec, 7);
            format.BE02Reqd = conpeek(paymspec, 8);
            format.BE01Use = conpeek(paymspec, 9);
            format.BE02Use = conpeek(paymspec, 10);
            format.PaymSpecFileDescr = conpeek(paymspec, 11);
            format.RecordSummary = conpeek(paymspec, 12);
            format.TransactionCode = conpeek(paymspec, 13);
            format.EmailNote = conpeek(paymspec, 14);
            format.PaymSpec = conpeek(paymspec, 15);
            format.PaymSpecName = conpeek(paymspec, 16);
            format.FilterSeparateFile = conpeek(paymspec, 17);
            format.FormatId = conpeek(paymspec, 18);
            format.CpnyIDNameReq = conpeek(paymspec, 20);
            format.EmailOff = conpeek(paymspec, 21);
            format.VendorUse = conpeek(paymspec, 22);
            format.WireTabs = conpeek(paymspec, 23);
            format.SamePaymentDate = conpeek(paymspec, 24);
            format.SelectByPaymentDate = conpeek(paymspec, 25);
            format.PreNote = conpeek(paymspec, 26);
            format.TxnNacha = conpeek(paymspec, 27);
            format.UseCheckNumber = conpeek(paymspec, 28);
            format.UseWithCustomers = conPeek(paymspec, 29);
            format.UseWithVendors = conPeek(paymspec, 30);
            format.EDI = conPeek(paymspec, 31);
            format.UseWithBanktoBank = conPeek(paymspec, 32);
            format.BTB_PaymSpecFundTransferType = conPeek(paymspec, 33);
            format.UseWithCustReimbursements = conPeek(paymspec, 34);
            format.InvoiceDetail = conPeek(paymspec, 35);
            format.RemitAvailability = conPeek(paymspec, 36);
            format.RemitType = conPeek(paymspec, 37);
            format.APNameType = conPeek(paymspec, 38);
            format.APAddressType = conPeek(paymspec, 39);
            format.DDNameType = conPeek(paymspec, 40);
            format.DDAddressType = conPeek(paymspec, 41);
            format.CRNameType = conPeek(paymspec, 42);
            format.CRAddressType = conPeek(paymspec, 43);
            format.APIGroupType = conPeek(paymspec, 44);
            format.APIGroupName = conPeek(paymspec, 45);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatPaySpecsFields</Name>
				<Source><![CDATA[
    //============================================== Payment Specifications Fields =========================================================
    private void CreateFormatPaySpecsFields(container _PaySpecsFieldsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataPaymSpecFields> formatList;
        formatList = this.PaymSpecsFields(_PaySpecsFieldsList);
        this.CreateFormatPaySpecsFieldsDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatPaySpecsFieldsDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateFormatPaySpecsFieldsDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateFormatPaySpecsFieldsDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataPaymSpecFields> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataPaymSpecFields format;

        SKS_EFT_FileFormatPaymSpecFields   formatPaymSpecsFields;
        SKS_EFT_FileFormatPaymSpec         formatpaymspecs;
        SKS_EB_CodeLookupValues            codeLookupValues; 
        int                                numrecords, counter;
        boolean                            updateformat;
        
        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);
            formatpaymspecs = null;
            select firstonly formatpaymspecs where formatpaymspecs.formatid == format.FORMATID && formatpaymspecs.PaymSpec == format.PAYMSPEC;
            if(!formatpaymspecs)
            {
                info(strFmt("@SKS:SKGPaymSpecMissing",format.PaymSpec, format.FORMATID));
            }

            codeLookupValues = null;
            if(format.DefaultValue != '' && format.FieldType == 0)
            {
                select firstonly codeLookupValues where codeLookupValues.CodeId == format.CodeId
                                                && codeLookupValues.DisplayValue == format.DefaultValue
                                                && codeLookupValues.FormatGroup == format.FormatGroup;

                if(!codeLookupValues)
                {
                    info(strFmt("@SKS:SKGFormatLookupValueMissing",format.DefaultValue,format.CodeId,format.FormatGroup));
                }
            }

            if (formatpaymspecs)
            {
                select * from formatPaymSpecsFields
                    where formatPaymSpecsFields.FileFormatPaymSpecRecId == formatpaymspecs.RecId
                       && formatPaymSpecsFields.FormatFieldId == format.FormatFieldId
                       && formatPaymSpecsFields.FormatGroup == format.FormatGroup;

                if (formatPaymSpecsFields)
                {
                    if (formatPaymSpecsFields.UserUpdated == NoYes::Yes)     //if user modified then don't update
                    {
                        continue;
                    }

                    formatPaymSpecsFields.selectForUpdate(true);
                    updateformat = true;
                }
                else
                {
                    updateformat = false;
                }
                        
                formatPaymSpecsFields.FileFormatPaymSpecRecId = formatpaymspecs.recid;
                formatPaymSpecsFields.FormatGroup = format.FormatGroup;
                formatPaymSpecsFields.FormatFieldId = format.FormatFieldId;
                formatPaymSpecsFields.CodeId = format.CodeId;
                formatPaymSpecsFields.Description = format.description;
                formatPaymSpecsFields.FieldType = format.FieldType;
                formatPaymSpecsFields.DefaultCodeLookupValuesRecId = codeLookupValues.recid;
                formatPaymSpecsFields.Required = format.Required;
                formatPaymSpecsFields.FixedValue = format.Fixedvalue;
                formatPaymSpecsFields.FixedMask = format.Fixedmask;
                formatPaymSpecsFields.TechNote = format.TechNote;
                //formatPaymSpecsFields.UserUpdated = format.UserUpdated

                if (updateformat)       
                {
                    ttsbegin;
                    formatPaymSpecsFields.update();
                    ttscommit;
                }
                else
                {
                    ttsbegin;
                    formatPaymSpecsFields.insert();
                    ttscommit;
                }
                this.VendPaymLookupAddition(formatPaymSpecsFields, format.FORMATID, format.PaymSpec);
                this.bankPaymookupAddition(formatPaymSpecsFields, format.FORMATID, format.PaymSpec);
                this.CustReimbPaymLookupAddition(formatPaymSpecsFields, format.FORMATID, format.PaymSpec);
                this.CustomerPaymLookupAddition(formatPaymSpecsFields, format.FORMATID, format.PaymSpec);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymSpecsFields</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataPaymSpecFields> PaymSpecsFields(container _PaySpecsFieldsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataPaymSpecFields> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataPaymSpecFields>();

        SKG_File.Models.SKGFormatMetadataPaymSpecFields format;

        container   formatLookups;
        int i;

        for (i = 1 ; i <= conLen(_PaySpecsFieldsList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataPaymSpecFields();

            formatLookups = conPeek(_PaySpecsFieldsList,i);

            format.FORMATGROUP = conpeek(formatLookups, 1);
            format.FORMATID = conpeek(formatLookups, 2);
            format.PAYMSPEC = conpeek(formatLookups, 3);
            format.FORMATFIELDID = conpeek(formatLookups, 4);
            format.DESCRIPTION = conpeek(formatLookups, 5);
            format.FIELDTYPE = conpeek(formatLookups, 6);
            format.CODEID = conpeek(formatLookups, 7);
            format.Defaultvalue = conpeek(formatLookups, 8);
            format.REQUIRED = conpeek(formatLookups, 9);
            format.FIXEDVALUE = conpeek(formatLookups, 10);
            format.FIXEDMASK = conpeek(formatLookups, 11);
            format.TECHNOTE = conpeek(formatLookups, 12);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatNotes</Name>
				<Source><![CDATA[
    //============================================== Notes =========================================================
    private void CreateFormatNotes(container _notesList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatNotes> formatList;
        formatList = This.FormatNotes(_notesList);
        this.CreateFormatNotesDatabase(formatlist);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatNotesDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateFormatNotesDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateFormatNotesDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatNotes> _formatList)
    {

        SKG_File.Models.SKGFormatMetadataFormatNotes format;

        SKS_EFT_FileFormatNotes     fileFormatNotes;
        int                         numrecords, counter;
        boolean                     updateformat;

        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly fileFormatNotes
                where fileFormatNotes.FormatId == format.FormatId
                   && fileFormatNotes.PaymSpec == format.PaymSpec;

            if (fileFormatNotes) 
            {
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            fileFormatNotes.FORMATID = format.FormatID;
            fileFormatNotes.PAYMSPEC = format.PaymSpec;
            fileFormatNotes.Note = format.Note;

            if (!updateformat) // Format notes are never updated, they are inserted if not found
            {
                ttsbegin;
                fileFormatNotes.insert();
                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatNotes</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatNotes> FormatNotes(container _notesList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatNotes> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatNotes>();

        SKG_File.Models.SKGFormatMetadataFormatNotes format;

        container   notes;
        int i;

        for (i = 1 ; i <= conLen(_notesList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataFormatNotes();

            notes = conPeek(_notesList,i);

            format.FORMATID = conpeek(notes, 1);
            format.PAYMSPEC = conpeek(notes, 2);
            format.note = strReplace(conpeek(notes, 3), ':', '\r\n');
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatValidations</Name>
				<Source><![CDATA[
    //============================================== Validations =========================================================
    private void CreateFormatValidations(container _ValidationsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatValidations> formatList;
        formatList = This.FormatValidations(_ValidationsList);
        this.CreateFormatValidationsDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFormatValidationsDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateFormatValidationsDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateFormatValidationsDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatValidations> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataFormatValidations format;

        SKS_EFT_BankFormatValidation  bankFormatValidation, bankFormatValIDMax;
        int                         numrecords, counter;
        boolean                     updateformat;

        numrecords = _formatList.get_count();
        
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select maxOf(Id) from bankFormatValIDMax
                            where bankFormatValIDMax.FormatId == format.FormatId &&
                                  bankFormatValIDMax.PaymSpec == format.PaymSpec;           //Confirm ID logic??

            select firstonly bankFormatValidation
                where bankFormatValidation.SourceContext == any2Enum(format.SourceContext)
                   && bankFormatValidation.SourceField == format.SourceField
                   && bankFormatValidation.FormatId == format.FormatId
                   && bankFormatValidation.PaymSpec == format.PaymSpec
                   && bankFormatValidation.ISOCountrySpec == format.ISOCOUNTRYSPEC
                   && bankFormatValidation.Module == any2Enum(format.Module)
                   && bankFormatValidation.BTB_TransferType == any2Enum(format.BTB_TransferType);


            if (bankFormatValidation)
            {
                if (bankFormatValidation.UserUpdated == NoYes::Yes)     //if user modified then don't update
                {
                    continue;
                }
                bankFormatValidation.selectForUpdate(true);
                updateformat = true;
            }
            else
            {
                updateformat = false;
                bankFormatValidation.id  = bankFormatValIDMax.id + 1;
            }
                        
            bankFormatValidation.FORMATID = format.FormatID;
            bankFormatValidation.PAYMSPEC = format.PaymSpec;
            //bankFormatValidation.Id = format.ID;                              //Confirm ID logic??
            bankFormatValidation.SOURCEFIELDDESC = format.SOURCEFIELDDESC;
            bankFormatValidation.SOURCEFIELDLOC = format.SOURCEFIELDLOC;
            bankFormatValidation.TARGETFIELDLOC = format.TARGETFIELDLOC;
            bankFormatValidation.Notes = format.NOTES;
            bankFormatValidation.SOURCECONTEXT = format.SOURCECONTEXT;
            bankFormatValidation.SOURCEFIELD = format.SOURCEFIELD;
            bankFormatValidation.ISOCOUNTRYSPEC = format.ISOCOUNTRYSPEC;
            bankFormatValidation.BTB_TransferType = format.BTB_TransferType;
            bankFormatValidation.COUNTRYCONTEXT = format.COUNTRYCONTEXT;
            bankFormatValidation.REQUIRED = format.REQUIRED;
            bankFormatValidation.LENGTHVALIDATION = format.LENGTHVALIDATION;
            bankFormatValidation.MINLENGTH = format.MINLENGTH;
            bankFormatValidation.MAXLENGTH = format.MAXLENGTH;
            bankFormatValidation.USERUPDATED = format.USERUPDATED;
            bankFormatValidation.MODULE = format.MODULE;
            bankFormatValidation.DATARULEID = format.DATARULEID;
            

            if (updateformat)
            {
                ttsbegin;
                bankFormatValidation.update();
                ttscommit;
            }
            else
            {
                ttsbegin;
                bankFormatValidation.insert();
                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatValidations</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatValidations> FormatValidations(container _ValidationsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatValidations> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFormatValidations>();

        SKG_File.Models.SKGFormatMetadataFormatValidations format;

        container   validation;
        int i;

        for (i = 1 ; i <= conLen(_ValidationsList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataFormatValidations();

            validation = conPeek(_ValidationsList,i);

            
            format.FORMATID = conpeek(validation, 1);
            format.PAYMSPEC = conpeek(validation, 2);
            format.ID = conpeek(validation, 3);
            format.SOURCEFIELDDESC = conpeek(validation, 4);
            format.SOURCEFIELDLOC = conPeek(validation, 5);
            format.TARGETFIELDLOC = conpeek(validation, 6);
            format.Notes = conpeek(validation, 7);
            format.SOURCECONTEXT = conpeek(validation, 8);
            format.SOURCEFIELD = conpeek(validation, 9);
            format.ISOCOUNTRYSPEC = conpeek(validation, 10);
            format.COUNTRYCONTEXT = conpeek(validation, 11);
            format.REQUIRED = conpeek(validation, 12);
            format.LENGTHVALIDATION = conpeek(validation, 13);
            format.MINLENGTH = conpeek(validation, 14);
            format.MAXLENGTH = conpeek(validation, 15);
            format.USERUPDATED = conpeek(validation, 16);
            format.MODULE = conpeek(validation, 17);
            format.DATARULEID = conpeek(validation, 18);
            format.BTB_TransferType = conPeek(validation, 19);
            
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendPaymLookupAddition</Name>
				<Source><![CDATA[
    private void VendPaymLookupAddition(SKS_EFT_FileFormatPaymSpecFields sksDetFields, SKS_EFT_FormatId _FormatID, PaymSpec _PaymSpec)
    {
        SKS_EFT_VendorPaym          lSKS_EFT_VendorPaym;
        SKS_EFT_VendorPaymLookup    lSKS_EFT_VendorPaymLookup;
        VendPaymModeTable           lVendPaymModeTable;

        while
            select RecId
            from lSKS_EFT_VendorPaym
            join lVendPaymModeTable
            where lSKS_EFT_VendorPaym.PaymMode == lVendPaymModeTable.PaymMode
                    && lSKS_EFT_VendorPaym.PaymSpec == _PaymSpec
                    && lVendPaymModeTable.SKS_EFT_FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_VendorPaymLookup
            where lSKS_EFT_VendorPaymLookup.vendorpaymrecid == lSKS_EFT_VendorPaym.RecId
                    && lSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_VendorPaymLookup.RecId == 0)
            {
                lSKS_EFT_VendorPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_VendorPaymLookup.VendorPaymRecId = lSKS_EFT_VendorPaym.RecId;
                lSKS_EFT_VendorPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_VendorPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankPaymookupAddition</Name>
				<Source><![CDATA[
    private void bankPaymookupAddition(SKS_EFT_FileFormatPaymSpecFields sksDetFields, SKS_EFT_FormatId _FormatID, PaymSpec _PaymSpec)
    {
        SKS_EFT_BanktoBankPaym          lSKS_EFT_BanktoBankPaym;
        SKS_EFT_BankPaymLookup          lSKS_EFT_BankPaymLookup;
        SKS_BTB_PaymModeTable           lSKS_BTB_PaymModeTable;

        while
            select RecId
            from lSKS_EFT_BanktoBankPaym
            join lSKS_BTB_PaymModeTable
            where lSKS_EFT_BanktoBankPaym.PaymMode == lSKS_BTB_PaymModeTable.PaymMode
                    && lSKS_EFT_BanktoBankPaym.PaymSpec == _PaymSpec
                    && lSKS_BTB_PaymModeTable.FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_BankPaymLookup
            where lSKS_EFT_BankPaymLookup.bankpaymrecid == lSKS_EFT_BanktoBankPaym.RecId
                    && lSKS_EFT_BankPaymLookup.FileFormatPaymSpecFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_BankPaymLookup.RecId == 0)
            {
                lSKS_EFT_BankPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_BankPaymLookup.FileFormatPaymSpecFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_BankPaymLookup.BankPaymRecId = lSKS_EFT_BanktoBankPaym.RecId;
                lSKS_EFT_BankPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_BankPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustReimbPaymLookupAddition</Name>
				<Source><![CDATA[
    private void CustReimbPaymLookupAddition(SKS_EFT_FileFormatPaymSpecFields sksDetFields, SKS_EFT_FormatId _FormatID, PaymSpec _PaymSpec)
    {
        SKS_EFT_CustReimbursementPaym          lSKS_EFT_CustReimbursementPaym;
        SKS_EFT_CustReimbursementPaymLookup    lSKS_EFT_CustReimbursementPaymLookup;
        CustPaymModeTable           lCustPaymModeTable;

        while
            select RecId
            from lSKS_EFT_CustReimbursementPaym
            join lCustPaymModeTable
            where lSKS_EFT_CustReimbursementPaym.PaymMode == lCustPaymModeTable.PaymMode
                    && lSKS_EFT_CustReimbursementPaym.PaymSpec == _PaymSpec
                    && lCustPaymModeTable.SKS_CNP_FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_CustReimbursementPaymLookup
            where lSKS_EFT_CustReimbursementPaymLookup.CustReimbPaymRecId == lSKS_EFT_CustReimbursementPaym.RecId
                    && lSKS_EFT_CustReimbursementPaymLookup.FileFormatPaymSpecFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_CustReimbursementPaymLookup.RecId == 0)
            {
                lSKS_EFT_CustReimbursementPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_CustReimbursementPaymLookup.FileFormatPaymSpecFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_CustReimbursementPaymLookup.CustReimbPaymRecId = lSKS_EFT_CustReimbursementPaym.RecId;
                lSKS_EFT_CustReimbursementPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_CustReimbursementPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustomerPaymLookupAddition</Name>
				<Source><![CDATA[
    private void CustomerPaymLookupAddition(SKS_EFT_FileFormatPaymSpecFields sksDetFields, SKS_EFT_FormatId _FormatID, PaymSpec _PaymSpec)
    {
        SKS_EFT_CustomerPaym          lSKS_EFT_CustomerPaym;
        SKS_EFT_CustomerPaymLookup lSKS_EFT_CustomerPaymLookup;
        CustPaymModeTable           lCustPaymModeTable;

        while
            select RecId
            from lSKS_EFT_CustomerPaym
            join lCustPaymModeTable
            where lSKS_EFT_CustomerPaym.PaymMode == lCustPaymModeTable.PaymMode
                    && lSKS_EFT_CustomerPaym.PaymSpec == _PaymSpec
                    && lCustPaymModeTable.SKS_EFT_FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_CustomerPaymLookup
            where lSKS_EFT_CustomerPaymLookup.CustPaymRecId == lSKS_EFT_CustomerPaym.RecId
                    && lSKS_EFT_CustomerPaymLookup.FileFormatPaymSpecFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_CustomerPaymLookup.RecId == 0)
            {
                lSKS_EFT_CustomerPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_CustomerPaymLookup.FileFormatPaymSpecFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_CustomerPaymLookup.CustPaymRecId = lSKS_EFT_CustomerPaym.RecId;
                lSKS_EFT_CustomerPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_CustomerPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportInboundMetaData</Name>
				<Source><![CDATA[
    //====================================================== Inbound MetaData ==================================================
    public void ImportInboundMetaData()
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundFormat> formatList;
        SKG_File.Models.SKGFormatMetadataInboundFormat format;
        container   conInboundFormat;
        int numrecords;
        int counter;
        boolean importDetails;
        str fileformattype;

        fileformattype = this.getFormatFileType();

        if (fileformattype == 'EFTInbound')
        {
            //Delete Format Records
            this.DeleteInboundFormat();
               
            //Get format header data
            conInboundFormat = this.getInboundFormatMetaData();
            formatlist  = this.getInboundFormatlist(conInboundFormat);
            numrecords = formatList.get_count();

            for(counter = 0; counter < numrecords; Counter++)
            {            
                format = formatList.get_item(Counter);
                importDetails = this.CreateInboundFormatHeader(format);  //I

                if (importDetails)
                {
                    this.importInboundDetails(format.FormatId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importInboundDetails</Name>
				<Source><![CDATA[
    public void importInboundDetails(str _formatID)
    {
        this.importInboundStatus(_formatID);                //S
        this.importInboundReasonCD(_formatID);            //R
    }

]]></Source>
			</Method>
			<Method>
				<Name>importInboundStatus</Name>
				<Source><![CDATA[
    private void importInboundStatus(str _formatID)
    {
        container   statusList;

        statusList = this.getInboundStatusMetaData(_formatID);
        this.CreateInboundStatus(statusList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>importInboundReasonCD</Name>
				<Source><![CDATA[
    private void importInboundReasonCD(str _formatID)
    {
        container   reasonCodeList;

        reasonCodeList = this.getInboundRCodeMetaData(_formatID);
        this.CreateInboundReasonCodes(reasonCodeList);

    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundFormatMetaData</Name>
				<Source><![CDATA[
    protected container getInboundFormatMetaData()
    {
        container formatList;
        
        info("@SKS:SKGInboundFormatMissing");
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundStatusMetaData</Name>
				<Source><![CDATA[
    protected container getInboundStatusMetaData(str _formatID)
    {
        container formatList;
        
        info("@SKS:SKGInboundFormatStatusMissing");
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundRCodeMetaData</Name>
				<Source><![CDATA[
    protected container getInboundRCodeMetaData(str _formatID)
    {
        container formatList;
        
        info("@SKS:SKGInboundFormatReasonCodeMissing");
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateInboundFormatHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateInboundFormatHeader
    /// </summary>
    /// <param name = "format">format</param>
    /// <param name = "_CodeSource">_CodeSource</param>
    /// <returns>boolean</returns>
    //============================================== Format Header =========================================================
    public boolean CreateInboundFormatHeader(SKG_File.Models.SKGFormatMetadataInboundFormat format, SKS_EB_CodeSource _CodeSource = SKS_EB_CodeSource::D365)
    {
        SKS_EFT_InboundFileFormat InboundFormat;
        SKS_PP_Setup    lSKS_PP_Setup;
        boolean updateformat;
        boolean importDetails;

        importDetails = false;
        lSKS_PP_Setup = SKS_PP_Setup::find();

        select firstonly InboundFormat
            where InboundFormat.FormatId == format.FormatId;

        if (InboundFormat)
        {
            if (format.ProductVersion != '' && (lSKS_PP_Setup.RegVersion != format.ProductVersion || InboundFormat.productversion != format.ProductVersion))
            {
                Info("@SKS:SKGTASProductVersionCompatible");
                return importDetails;
            }
            if (InboundFormat.formatGroupVersion == format.formatGroupVersion)
            {
                return importDetails;
            }
            else
            {
                InboundFormat.selectForUpdate(true);
                updateformat = true;
            }
        }
        else
        {
            updateformat = false;
        }
                        
        InboundFormat.Description = format.Description;
        InboundFormat.SKS_DD_Modules = format.SKS_DD_Modules;
        InboundFormat.formatGroupVersion = format.formatGroupVersion;
        inboundformat.FormatCodeSource = _CodeSource;
        inboundformat.FormatDataContractVersion = format.DataContractVersion;
        if(_CodeSource == SKS_EB_CodeSource::BankFabric)
        {
            inboundformat.APIFormatType = SKS_EFT_APIFormatType::API;
        }

        if (updateformat)
        {
            ttsbegin;
            InboundFormat.update();
            ttscommit;

            if (InboundFormat.Selected)
            {
                importDetails = true;
            }
        }
        else
        {
            InboundFormat.FormatId = format.FormatId;
            InboundFormat.Selected = format.Selected;
            InboundFormat.ProductVersion = format.ProductVersion;

            ttsbegin;
            InboundFormat.insert();
            ttscommit;
        }

        return importDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundFormatlist</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundFormat> getInboundFormatlist(container _conInboundFormat)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundFormat> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundFormat>();

        SKG_File.Models.SKGFormatMetadataInboundFormat format;

        container   inboundFormat;
        int i;

        for (i = 1 ; i <= conLen(_conInboundFormat) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataInboundFormat();

            inboundFormat = conPeek(_conInboundFormat,i);

            //FormatId,Description,ProductVersion,formatGroupVersion
            format.ProductVersion = conpeek(inboundFormat, 1);
            format.formatGroupVersion = conpeek(inboundFormat, 2);
            format.FormatId = conpeek(inboundFormat, 3);
            format.Description = conpeek(inboundFormat, 4);
            format.SKS_DD_Modules = conpeek(inboundFormat, 5);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateInboundStatus</Name>
				<Source><![CDATA[
    //============================================== Inbound Statuses =========================================================
    /// <summary>
    /// CreateInboundStatus
    /// </summary>
    /// <param name = "_InboundStatusList">_InboundStatusList</param>
    /// <param name = "_CodeSource">_CodeSource</param>
    /// <returns>boolean</returns>
    public void CreateInboundStatus(container _InboundStatusList, SKS_EB_CodeSource _CodeSource = SKS_EB_CodeSource::D365)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundStatuses> formatList;
        SKG_File.Models.SKGFormatMetadataInboundStatuses format;

        SKS_EFT_InboundStatuses  inboundStatus;
        int                numrecords, counter;
        boolean            updateformat;

        if (_CodeSource == SKS_EB_CodeSource::D365)
        {
            formatList = This.getinboundStatusList(_InboundStatusList);
        }
        else
        {
            formatList = conPeek(_InboundStatusList,1);
        }

        numrecords = formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = formatList.get_item(Counter);

            select forupdate InboundStatus where InboundStatus.FormatId == format.FormatId 
                    && InboundStatus.StatusType == any2Enum(format.StatusType) && InboundStatus.StatusId == format.StatusId;

            if (InboundStatus)
            {
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            InboundStatus.Origin = format.Origin;
            InboundStatus.StatusIdDisplay = format.StatusIdDisplay;            

            if (updateformat)           //Discuss delete action as per importcsv
            {
                ttsbegin;
                InboundStatus.update();
                ttscommit;
            }
            else
            {
                InboundStatus.FormatId = format.FormatId;
                InboundStatus.StatusType = any2Enum(format.StatusType);
                InboundStatus.StatusId = format.StatusId;
                ttsbegin;
                InboundStatus.insert();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getinboundStatusList</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundStatuses> getinboundStatusList(container _InboundStatusList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundStatuses> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundStatuses>();

        SKG_File.Models.SKGFormatMetadataInboundStatuses format;

        container   conStatus;
        int i;

        for (i = 1 ; i <= conLen(_InboundStatusList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataInboundStatuses();

            conStatus = conPeek(_InboundStatusList,i);

            //FormatId,StatusType,StatusId,StatusIdDisplay,Origin
            format.FormatId = conpeek(conStatus, 1);
            format.StatusType = conpeek(conStatus, 2);
            format.StatusId = conpeek(conStatus, 3);
            format.StatusIdDisplay = conpeek(conStatus, 4);
            format.Origin = conpeek(conStatus, 5);
            
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateInboundReasonCodes</Name>
				<Source><![CDATA[
    //============================================== Inbound Reason Codes =========================================================
    /// <summary>
    /// CreateInboundReasonCodes
    /// </summary>
    /// <param name = "_InboundReasonCds">_InboundReasonCds</param>
    /// <param name = "_CodeSource">_CodeSource</param>
    /// <returns>boolean</returns
    public void CreateInboundReasonCodes(container _InboundReasonCds, SKS_EB_CodeSource _CodeSource = SKS_EB_CodeSource::D365)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundReasonCodes> formatList;
        SKG_File.Models.SKGFormatMetadataInboundReasonCodes format;

        SKS_EFT_InboundReasonCodes  reasonCodes;
        int                numrecords, counter;
        boolean            updateformat;

        if (_CodeSource == SKS_EB_CodeSource::D365)
        {
            formatList = This.getinboundReasonCds(_InboundReasonCds);
        }
        else
        {
            formatList = conPeek(_InboundReasonCds,1);
        }

        numrecords = formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = formatList.get_item(Counter);

            select forupdate reasonCodes where reasonCodes.FormatId == format.FormatId
                    && reasonCodes.ReasonCode == format.reasonCode;

            if (reasonCodes)
            {
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            reasonCodes.Origin = format.Origin;
            reasonCodes.ReasonDesc = format.ReasonDesc;

            if (updateformat)           //Discuss delete action as per importcsv
            {
                ttsbegin;
                reasonCodes.update();
                ttscommit;
            }
            else
            {
                reasonCodes.FormatId = format.FormatId;
                reasonCodes.ReasonCode = format.ReasonCode;
                ttsbegin;
                reasonCodes.insert();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>getinboundReasonCds</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundReasonCodes> getinboundReasonCds(container _InboundReasonCds)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundReasonCodes> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataInboundReasonCodes>();

        SKG_File.Models.SKGFormatMetadataInboundReasonCodes format;

        container   conReasonCodes;
        int i;

        for (i = 1 ; i <= conLen(_InboundReasonCds) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataInboundReasonCodes();

            conReasonCodes = conPeek(_InboundReasonCds,i);

            //FormatId,ReasonCode,ReasonDesc,Origin
            format.FormatId = conpeek(conReasonCodes, 1);
            format.ReasonCode = conpeek(conReasonCodes, 2);
            format.ReasonDesc = conpeek(conReasonCodes, 3);
            format.Origin = conpeek(conReasonCodes, 4);
            
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DeleteInboundFormat</Name>
				<Source><![CDATA[
    public void DeleteInboundFormat()
    {
        SKS_EFT_FormatMetaData_Delete formatMetaDataDelete;
        container   deleteList;

        deleteList = this.getDeleteMetaData();
        formatMetaDataDelete = new SKS_EFT_FormatMetaData_Delete();
        formatMetaDataDelete.deleteInboundMetaData(deleteList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ImportFormatCommonMetaData</Name>
				<Source><![CDATA[
    //====================================================== Inbound MetaData ==================================================
    public void ImportFormatCommonMetaData()
    {
        str       fileformattype;

        fileformattype = this.getFormatFileType();

        if (fileformattype == 'EFTCommon')
        {
            //Delete Format Records
            this.DeleteFormat();

            // import Data Validations Rules and Details metadata
            this.importDVRules();               //DVR
            this.importDVDetails();             //DVD
            this.importValidationMapping();     //M
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateBankCodeLookup</Name>
				<Source><![CDATA[
    //============================================== Bank Code Lookup =========================================================
    private void CreateBankCodeLookup(container _codeLookupList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookup> formatList;
        formatList = This.CodeLookups(_codeLookupList);
        this.CreateBankCodeLookupDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateBankCodeLookupDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateBankCodeLookupDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateBankCodeLookupDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookup> _formatList)
    {
        
        SKG_File.Models.SKGFormatMetadataBankCodeLookup format;

        SKS_EB_BANKCODELOOKUP  bankcodeLookup;
        int                numrecords, counter;
        boolean            updateformat;

        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly bankcodeLookup
                where bankcodeLookup.codeid == format.codeid
                   && bankcodeLookup.FormatGroup == format.formatgroup;

            if (bankcodeLookup)
            {
                bankcodeLookup.selectForUpdate(true);
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            bankcodeLookup.Codeid = format.CodeID;
            bankcodeLookup.Description = format.Description;
            bankcodeLookup.FormatGroup = format.FormatGroup;
            

            if (updateformat)          
            {
                ttsbegin;
                bankcodeLookup.update();
                ttscommit;
            }
            else
            {
                ttsbegin;
                bankcodeLookup.insert();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>BankCodeLookups</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookup> BankCodeLookups(container _codeLookupList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookup> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookup>();

        SKG_File.Models.SKGFormatMetadataBankCodeLookup format;

        container   codelookup;
        int i;

        for (i = 1 ; i <= conLen(_codeLookupList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataBankCodeLookup();

            codelookup = conPeek(_codeLookupList,i);

            format.FormatGroup = conpeek(codelookup, 1);
            format.CodeId = conpeek(codelookup, 2);
            format.Description = conpeek(codelookup, 3);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateBankCodeLookupValues</Name>
				<Source><![CDATA[
    //============================================== Code Lookup values=========================================================
    private void CreateBankCodeLookupValues(container _codeLookupvaluesList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookupValues> formatList;
        formatList = This.BankCodeLookupvalues(_codeLookupvaluesList);
        this.CreateBankCodeLookupValuesDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateBankCodeLookupValuesDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateBankCodeLookupValuesDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateBankCodeLookupValuesDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookupValues> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataBankCodeLookupValues format;

        SKS_EB_BANKCODELOOKUPVALUES  codeLookupValues;
        int                      numrecords, counter;
        boolean                  updateformat;

        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);

            select firstonly codeLookupValues
                where codeLookupValues.codeid == format.codeid
                   && codeLookupValues.FormatGroup == format.formatgroup
                   && codelookupvalues.DisplayValue == format.DisplayValue;

            if (codeLookupValues)
            {
                codeLookupValues.selectForUpdate(true);
                updateformat = true;
            }
            else
            {
                updateformat = false;
            }
                        
            codeLookupValues.FormatGroup = format.FORMATGROUP;
            codeLookupValues.CodeId = format.CODEID;
            codeLookupValues.DisplayValue = format.DISPLAYVALUE;
            codeLookupValues.CodeValue = Format.CodeValue;
            

            if (updateformat)           
            {
                ttsbegin;
                codeLookupValues.update();
                ttscommit;
            }
            else
            {
                ttsbegin;
                codeLookupValues.insert();
                ttscommit;
            }

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>BankCodeLookupvalues</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookupValues> BankCodeLookupvalues(container _codeLookupValuesList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookupValues> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataBankCodeLookupValues>();

        SKG_File.Models.SKGFormatMetadataBankCodeLookupValues format;

        container   codeLookupValues;
        int i;

        for (i = 1 ; i <= conLen(_codeLookupValuesList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataBankCodeLookupValues();

            codeLookupValues = conPeek(_codeLookupValuesList,i);

            format.FormatGroup = conpeek(codeLookupValues, 1);
            format.CodeId = conpeek(codeLookupValues, 2);
            format.DisplayValue = conpeek(codeLookupValues, 3);
            format.CodeValue = conpeek(codeLookupValues, 4);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFileFormatFields</Name>
				<Source><![CDATA[
    //============================================== FileFormat Fields =========================================================
    private void CreateFileFormatFields(container _PaySpecsFieldsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFileFormatFields> formatList;
        formatList = This.FileFormatFields(_PaySpecsFieldsList);
        this.CreateFileFormatFieldsDatabase(formatList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateFileFormatFieldsDatabase</Name>
				<Source><![CDATA[
    /// <summary>
    /// CreateFileFormatFieldsDatabase
    /// </summary>
    /// <param name = "_formatList">FormatList</param>
    public void CreateFileFormatFieldsDatabase(System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFileFormatFields> _formatList)
    {
        SKG_File.Models.SKGFormatMetadataFileFormatFields format;

        SKS_EFT_FileFormatFields                fileformatFields;
        SKS_EFT_FileFormat                      fileformat;
        SKS_EB_BankCodeLookupValues             codeLookupValues;
        int                                numrecords, counter;
        boolean                            updateformat;
       
        numrecords = _formatList.get_count();
        for(counter = 0; counter < numrecords; Counter++)
        {

            format = _formatList.get_item(Counter);
            fileformat = null;

            select firstonly fileformat where fileformat.formatid == format.FORMATID;
            if(!fileformat)
            {
                info(strFmt("@SKS:SKGFileFormatValidation",format.FORMATID));
            }

            codeLookupValues = null;
            if(format.DefaultValue != '' && format.FieldType == 0)
            {
                select firstonly codeLookupValues where codeLookupValues.CodeId == format.CodeId
                                                && codeLookupValues.DisplayValue == format.DefaultValue
                                                && codeLookupValues.FormatGroup == format.FormatGroup;

                if(!codeLookupValues)
                {
                    info(strFmt("@SKS:SKGFormatLookupValueMissing",format.DefaultValue,format.CodeId,format.FormatGroup));
                }
            }

            if (fileformat)
            {
                select * from fileformatFields
                    where fileformatFields.FileFormatRecId == fileformat.RecId
                       && fileformatFields.FormatFieldId == format.FormatFieldId
                       && fileformatFields.FormatGroup == format.FormatGroup;

                if (fileformatFields)
                {
                    if (fileformatFields.UserUpdated == NoYes::Yes)     //if user modified then don't update
                    {
                        continue;
                    }

                    fileformatFields.selectForUpdate(true);
                    updateformat = true;
                }
                else
                {
                    updateformat = false;
                }
                        
                fileformatFields.FileFormatRecId = fileformat.recid;
                fileformatFields.FormatGroup = format.FormatGroup;
                fileformatFields.FormatFieldId = format.FormatFieldId;
                fileformatFields.CodeId = format.CodeId;
                fileformatFields.Description = format.description;
                fileformatFields.FieldType = format.FieldType;
                fileformatFields.DefaultCodeLookupValuesRecId = codeLookupValues.recid;
                fileformatFields.Required = format.Required;
                fileformatFields.FixedValue = format.Fixedvalue;
                fileformatFields.FixedMask = format.Fixedmask;
                fileformatFields.TechNote = format.TechNote;

                if (updateformat)       
                {
                    ttsbegin;
                    fileformatFields.update();
                    ttscommit;
                    this.BankAccountPaymLookupAddition(fileformatFields, format.FORMATID);
                    this.BTBBankAccountPaymLookupAddition(fileformatFields, format.FORMATID);
                    this.CNPBankAccountPaymLookupAddition(fileformatFields, format.FORMATID);
                    this.ARBankAccountPaymLookupAddition(fileformatFields, format.FORMATID);
                }
                else
                {
                    ttsbegin;
                    fileformatFields.insert();
                    ttscommit;
                    this.BankAccountPaymLookupAddition(fileformatFields, format.FORMATID);
                    this.BTBBankAccountPaymLookupAddition(fileformatFields, format.FORMATID);
                    this.CNPBankAccountPaymLookupAddition(fileformatFields, format.FORMATID);
                    this.ARBankAccountPaymLookupAddition(fileformatFields, format.FORMATID);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FileFormatFields</Name>
				<Source><![CDATA[
    private System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFileFormatFields> FileFormatFields(container _PaySpecsFieldsList)
    {
        System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFileFormatFields> formatList = new System.Collections.Generic.List<SKG_File.Models.SKGFormatMetadataFileFormatFields>();

        SKG_File.Models.SKGFormatMetadataFileFormatFields format;

        container   formatLookups;
        int i;

        for (i = 1 ; i <= conLen(_PaySpecsFieldsList) ; i++)
        {
            format = new SKG_File.Models.SKGFormatMetadataFileFormatFields();

            formatLookups = conPeek(_PaySpecsFieldsList,i);

            format.FORMATGROUP = conpeek(formatLookups, 1);
            format.FORMATID = conpeek(formatLookups, 2);
            format.FORMATFIELDID = conpeek(formatLookups, 3);
            format.DESCRIPTION = conpeek(formatLookups, 4);
            format.FIELDTYPE = conpeek(formatLookups, 5);
            format.CODEID = conpeek(formatLookups, 6);
            format.Defaultvalue = conpeek(formatLookups, 7);
            format.REQUIRED = conpeek(formatLookups, 8);
            format.FIXEDVALUE = conpeek(formatLookups, 9);
            format.FIXEDMASK = conpeek(formatLookups, 10);
            format.TECHNOTE = conpeek(formatLookups, 11);
            formatList.add(format);

            format = null;
        }
        return formatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BankAccountPaymLookupAddition</Name>
				<Source><![CDATA[
    private void BankAccountPaymLookupAddition(SKS_EFT_FileFormatFields sksDetFields, SKS_EFT_FormatId _FormatID)
    {
        SKS_EFT_Bank          lSKS_EFT_Bank;
        SKS_EFT_BankAccountPaymLookup    lSKS_EFT_BankAccountPaymLookup;
        VendPaymModeTable           lVendPaymModeTable;

        while
            select RecId
            from lSKS_EFT_Bank
            join lVendPaymModeTable
            where lSKS_EFT_Bank.PaymMode == lVendPaymModeTable.PaymMode
                    && lVendPaymModeTable.SKS_EFT_FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_BankAccountPaymLookup
            where lSKS_EFT_BankAccountPaymLookup.BankPaymRecId == lSKS_EFT_Bank.RecId
                    && lSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_BankAccountPaymLookup.RecId == 0)
            {
                lSKS_EFT_BankAccountPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_BankAccountPaymLookup.BankPaymRecId = lSKS_EFT_Bank.RecId;
                lSKS_EFT_BankAccountPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_BankAccountPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ARBankAccountPaymLookupAddition</Name>
				<Source><![CDATA[
    private void ARBankAccountPaymLookupAddition(SKS_EFT_FileFormatFields sksDetFields, SKS_EFT_FormatId _FormatID)
    {
        SKS_EFTAR_Bank          lSKS_EFTAR_Bank;
        SKS_EFT_ARBankAccountPaymLookup    lSKS_EFT_ARBankAccountPaymLookup;
        CustPaymModeTable           lCustPaymModeTable;

        while
            select RecId
            from lSKS_EFTAR_Bank
            join lCustPaymModeTable
            where lSKS_EFTAR_Bank.PaymMode == lCustPaymModeTable.PaymMode
                    && lCustPaymModeTable.SKS_EFT_FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_ARBankAccountPaymLookup
            where lSKS_EFT_ARBankAccountPaymLookup.BankPaymRecId == lSKS_EFTAR_Bank.RecId
                    && lSKS_EFT_ARBankAccountPaymLookup.FileFormatFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_ARBankAccountPaymLookup.RecId == 0)
            {
                lSKS_EFT_ARBankAccountPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_ARBankAccountPaymLookup.FileFormatFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_ARBankAccountPaymLookup.BankPaymRecId = lSKS_EFTAR_Bank.RecId;
                lSKS_EFT_ARBankAccountPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_ARBankAccountPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BTBBankAccountPaymLookupAddition</Name>
				<Source><![CDATA[
    private void BTBBankAccountPaymLookupAddition(SKS_EFT_FileFormatFields sksDetFields, SKS_EFT_FormatId _FormatID)
    {
        SKS_EFTBTB_Bank          lSKS_EFTBTB_Bank;
        SKS_EFT_BTBBankAccountPaymLookup    lSKS_EFT_BTBBankAccountPaymLookup;
        SKS_BTB_PaymModeTable           lSKS_BTB_PaymModeTable;

        while
            select RecId
            from lSKS_EFTBTB_Bank
            join lSKS_BTB_PaymModeTable
            where lSKS_EFTBTB_Bank.PaymMode == lSKS_BTB_PaymModeTable.PaymMode
                    && lSKS_BTB_PaymModeTable.FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_BTBBankAccountPaymLookup
            where lSKS_EFT_BTBBankAccountPaymLookup.BankPaymRecId == lSKS_EFTBTB_Bank.RecId
                    && lSKS_EFT_BTBBankAccountPaymLookup.FileFormatFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_BTBBankAccountPaymLookup.RecId == 0)
            {
                lSKS_EFT_BTBBankAccountPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_BTBBankAccountPaymLookup.FileFormatFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_BTBBankAccountPaymLookup.BankPaymRecId = lSKS_EFTBTB_Bank.RecId;
                lSKS_EFT_BTBBankAccountPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_BTBBankAccountPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CNPBankAccountPaymLookupAddition</Name>
				<Source><![CDATA[
    private void CNPBankAccountPaymLookupAddition(SKS_EFT_FileFormatFields sksDetFields, SKS_EFT_FormatId _FormatID)
    {
        SKS_EFTCNP_Bank          lSKS_EFTCNP_Bank;
        SKS_EFT_CNPBankAccountPaymLookup    lSKS_EFT_CNPBankAccountPaymLookup;
        CustPaymModeTable           lCustPaymModeTable;

        while
            select RecId
            from lSKS_EFTCNP_Bank
            join lCustPaymModeTable
            where lSKS_EFTCNP_Bank.PaymMode == lCustPaymModeTable.PaymMode
                    && lCustPaymModeTable.SKS_CNP_FormatId == _FormatID
        {
            select count(RecId)
            from lSKS_EFT_CNPBankAccountPaymLookup
            where lSKS_EFT_CNPBankAccountPaymLookup.BankPaymRecId == lSKS_EFTCNP_Bank.RecId
                    && lSKS_EFT_CNPBankAccountPaymLookup.FileFormatFieldsRecId == sksDetFields.RecId;
    
            if(lSKS_EFT_CNPBankAccountPaymLookup.RecId == 0)
            {
                lSKS_EFT_CNPBankAccountPaymLookup.CodeLookupValuesRecId = sksDetFields.DefaultCodeLookupValuesRecId;
                lSKS_EFT_CNPBankAccountPaymLookup.FileFormatFieldsRecId = sksDetFields.RecId;
                lSKS_EFT_CNPBankAccountPaymLookup.BankPaymRecId = lSKS_EFTCNP_Bank.RecId;
                lSKS_EFT_CNPBankAccountPaymLookup.FixedValue = sksDetFields.FixedValue;
                lSKS_EFT_CNPBankAccountPaymLookup.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCodelookupValues</Name>
				<Source><![CDATA[
    private void updateCodelookupValues(SKS_EFT_FormatId _formatID)
    {
        VendPaymModeTable lVendPaymModeTable;
        CustPaymModeTable lCustPaymModeTable;
        SKS_BTB_PaymModeTable lSKS_BTB_PaymModeTable;

        select firstonly gSKS_EFT_FileFormat where gSKS_EFT_FileFormat.FormatId == _formatID;

        while select gSKS_EFT_Bank
            join lVendPaymModeTable
            where gSKS_EFT_Bank.PaymMode == lVendPaymModeTable.PaymMode
                    && lVendPaymModeTable.SKS_EFT_FormatId == gSKS_EFT_FileFormat.FormatId
                    && (gSKS_EFT_Bank.W01 || gSKS_EFT_Bank.W02 || gSKS_EFT_Bank.W03 || gSKS_EFT_Bank.W04)
        {
            this.updateBankCodelookupValues();
            this.updateBankRecords();
        }

        while select gSKS_EFTAR_Bank
            join lCustPaymModeTable
            where gSKS_EFTAR_Bank.PaymMode == lCustPaymModeTable.PaymMode
                    && lCustPaymModeTable.SKS_EFT_FormatId == gSKS_EFT_FileFormat.FormatId
                    && (gSKS_EFTAR_Bank.W01 || gSKS_EFTAR_Bank.W02 || gSKS_EFTAR_Bank.W03 || gSKS_EFTAR_Bank.W04)
        {
            this.updateARBankCodelookupValues();
            this.updateARBankRecords();
        }

        while select gSKS_EFTBTB_Bank
            join lSKS_BTB_PaymModeTable
            where gSKS_EFTBTB_Bank.PaymMode == lSKS_BTB_PaymModeTable.PaymMode
                    && lSKS_BTB_PaymModeTable.FormatId == gSKS_EFT_FileFormat.FormatId
                    && (gSKS_EFTBTB_Bank.W01 || gSKS_EFTBTB_Bank.W02 || gSKS_EFTBTB_Bank.W03 || gSKS_EFTBTB_Bank.W04)
        {
            this.updateBTBBankCodelookupValues();
            this.updateBTBBankRecords();
        }

        while select gSKS_EFTCNP_Bank
            join lCustPaymModeTable
            where gSKS_EFTCNP_Bank.PaymMode == lCustPaymModeTable.PaymMode
                    && lCustPaymModeTable.SKS_CNP_FormatId == gSKS_EFT_FileFormat.FormatId
                    && (gSKS_EFTCNP_Bank.W01 || gSKS_EFTCNP_Bank.W02 || gSKS_EFTCNP_Bank.W03 || gSKS_EFTCNP_Bank.W04)
        {
            this.updateCNPBankCodelookupValues();
            this.updateCNPBankRecords();
        }

        
        while select gSKS_EFT_VendorPaym
            join gSKS_EFT_FileFormatPaymSpec
            where gSKS_EFT_FileFormatPaymSpec.FormatId == gSKS_EFT_VendorPaym.FormatId
                && gSKS_EFT_FileFormatPaymSpec.PaymSpec == gSKS_EFT_VendorPaym.PaymSpec
                && gSKS_EFT_VendorPaym.FormatId == gSKS_EFT_FileFormat.FormatId
            && (gSKS_EFT_VendorPaym.BE01 || gSKS_EFT_VendorPaym.BE02 || gSKS_EFT_VendorPaym.WBeneAdvice || gSKS_EFT_VendorPaym.WBeneMailHandling
            || gSKS_EFT_VendorPaym.WChargesIndic || gSKS_EFT_VendorPaym.WBenBankAdvice
            || gSKS_EFT_VendorPaym.WBenBankAcctType || gSKS_EFT_VendorPaym.WCrePartyAcctType
            || gSKS_EFT_VendorPaym.WCrePartyAdvice || gSKS_EFT_VendorPaym.WIntBankQualifier)
        {
            this.updateVendorCodelookupValues();
            this.updateVendorRecords();
        }

        while select gSKS_EFT_CustomerPaym
            join gSKS_EFT_FileFormatPaymSpec
            where gSKS_EFT_FileFormatPaymSpec.FormatId == gSKS_EFT_CustomerPaym.FormatId
                && gSKS_EFT_FileFormatPaymSpec.PaymSpec == gSKS_EFT_CustomerPaym.PaymSpec
                && gSKS_EFT_CustomerPaym.FormatId == gSKS_EFT_FileFormat.FormatId
            && (gSKS_EFT_CustomerPaym.BE01 || gSKS_EFT_CustomerPaym.BE02)
        {
            this.updateCustomerCodelookupValues();
            this.updateCustomerRecords();
        }

        while select gSKS_EFT_CustReimbursementPaym
            join gSKS_EFT_FileFormatPaymSpec
            where gSKS_EFT_FileFormatPaymSpec.FormatId == gSKS_EFT_CustReimbursementPaym.FormatId
                && gSKS_EFT_FileFormatPaymSpec.PaymSpec == gSKS_EFT_CustReimbursementPaym.PaymSpec
                && gSKS_EFT_CustReimbursementPaym.FormatId == gSKS_EFT_FileFormat.FormatId
            && (gSKS_EFT_CustReimbursementPaym.WBeneAdvice || gSKS_EFT_CustReimbursementPaym.WBeneMailHandling
            || gSKS_EFT_CustReimbursementPaym.WChargesIndic || gSKS_EFT_CustReimbursementPaym.WBenBankAdvice
            || gSKS_EFT_CustReimbursementPaym.WBenBankAcctType || gSKS_EFT_CustReimbursementPaym.WCrePartyAcctType
            || gSKS_EFT_CustReimbursementPaym.WCrePartyAdvice || gSKS_EFT_CustReimbursementPaym.WIntBankQualifier)
        {
            this.updateCustReimbursementCodelookupValues();
            this.updateCustReimbursementRecords();
        }        

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup in vendor ebanking 
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup in customer ebanking 
    /// </summary>
    protected void updateCustomerCodelookupValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustReimbursementCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup in customer reimbursement 
    /// </summary>
    protected void updateCustReimbursementCodelookupValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from W0X fields
    /// </summary>
    protected void updateBankCodelookupValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from W0X fields
    /// </summary>
    protected void updateARBankCodelookupValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBTBBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from W0X fields
    /// </summary>
    protected void updateBTBBankCodelookupValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCNPBankCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from W0X fields
    /// </summary>
    protected void updateCNPBankCodelookupValues()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from W0X fields
    /// </summary>
    /// <param name = "_codeId">CodeId</param>
    /// <param name = "_field">Fieldvalue</param>
    /// <param name = "_Codelookup">Yes or No value</param>
    public void updateBankFields(SKS_EB_CodeId _codeId, SKS_EB_CustomField35 _field, boolean _Codelookup = false)
    {
        SKS_EFT_BankAccountPaymLookup   gSKS_EFT_BankAccountPaymLookup;
        SKS_EFT_FileFormatFields        gSKS_EFT_FileFormatFields;
        SKS_EB_BankCodeLookupValues     gSKS_EB_BankCodeLookupValues;

        select firstonly RecId from gSKS_EFT_FileFormatFields
                where gSKS_EFT_FileFormatFields.FileFormatRecId == gSKS_EFT_FileFormat.RecId
                && gSKS_EFT_FileFormatFields.CodeId == _codeId;

        if (gSKS_EFT_FileFormatFields)
        {
            if(_Codelookup)
            {
                select firstonly RecId from gSKS_EB_BankCodeLookupValues where gSKS_EB_BankCodeLookupValues.CodeId == _codeId
                    && gSKS_EB_BankCodeLookupValues.FormatGroup == gSKS_EFT_FileFormat.FormatGroup
                    && gSKS_EB_BankCodeLookupValues.DisplayValue == _field;

                if(gSKS_EB_BankCodeLookupValues)
                {
                    update_recordset gSKS_EFT_BankAccountPaymLookup setting CodeLookupValuesRecId = gSKS_EB_BankCodeLookupValues.RecId
                        where gSKS_EFT_BankAccountPaymLookup.BankPaymRecId == gSKS_EFT_Bank.RecId
                        && gSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == gSKS_EFT_FileFormatFields.RecId;
                }
            }
            else
            {
                update_recordset gSKS_EFT_BankAccountPaymLookup setting FixedValue = _field
                        where gSKS_EFT_BankAccountPaymLookup.BankPaymRecId == gSKS_EFT_Bank.RecId
                        && gSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == gSKS_EFT_FileFormatFields.RecId;
            }
        }
        else
        {
            warning(strFmt("@SKS:SKGFileformatFieldsMissing", gSKS_EFT_FileFormat.FormatId, _codeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from W0X fields
    /// </summary>
    /// <param name = "_codeId">CodeId</param>
    /// <param name = "_field">Fieldvalue</param>
    /// <param name = "_Codelookup">Yes or No value</param>
    public void updateARBankFields(SKS_EB_CodeId _codeId, SKS_EB_CustomField35 _field, boolean _Codelookup = false)
    {
        SKS_EFT_ARBankAccountPaymLookup   gSKS_EFT_BankAccountPaymLookup;
        SKS_EFT_FileFormatFields        gSKS_EFT_FileFormatFields;
        SKS_EB_BankCodeLookupValues     gSKS_EB_BankCodeLookupValues;

        select firstonly RecId from gSKS_EFT_FileFormatFields
                where gSKS_EFT_FileFormatFields.FileFormatRecId == gSKS_EFT_FileFormat.RecId
                && gSKS_EFT_FileFormatFields.CodeId == _codeId;

        if (gSKS_EFT_FileFormatFields)
        {
            if(_Codelookup)
            {
                select firstonly RecId from gSKS_EB_BankCodeLookupValues where gSKS_EB_BankCodeLookupValues.CodeId == _codeId
                    && gSKS_EB_BankCodeLookupValues.FormatGroup == gSKS_EFT_FileFormat.FormatGroup
                    && gSKS_EB_BankCodeLookupValues.DisplayValue == _field;

                if(gSKS_EB_BankCodeLookupValues)
                {
                    update_recordset gSKS_EFT_BankAccountPaymLookup setting CodeLookupValuesRecId = gSKS_EB_BankCodeLookupValues.RecId
                        where gSKS_EFT_BankAccountPaymLookup.BankPaymRecId == gSKS_EFTAR_Bank.RecId
                        && gSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == gSKS_EFT_FileFormatFields.RecId;
                }
            }
            else
            {
                update_recordset gSKS_EFT_BankAccountPaymLookup setting FixedValue = _field
                        where gSKS_EFT_BankAccountPaymLookup.BankPaymRecId == gSKS_EFTAR_Bank.RecId
                        && gSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == gSKS_EFT_FileFormatFields.RecId;
            }
        }
        else
        {
            warning(strFmt("@SKS:SKGFileformatFieldsMissing", gSKS_EFT_FileFormat.FormatId, _codeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBTBBankFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from W0X fields
    /// </summary>
    /// <param name = "_codeId">CodeId</param>
    /// <param name = "_field">Fieldvalue</param>
    /// <param name = "_Codelookup">Yes or No value</param>
    public void updateBTBBankFields(SKS_EB_CodeId _codeId, SKS_EB_CustomField35 _field, boolean _Codelookup = false)
    {
        SKS_EFT_BTBBankAccountPaymLookup   gSKS_EFT_BankAccountPaymLookup;
        SKS_EFT_FileFormatFields        gSKS_EFT_FileFormatFields;
        SKS_EB_BankCodeLookupValues     gSKS_EB_BankCodeLookupValues;

        select firstonly RecId from gSKS_EFT_FileFormatFields
                where gSKS_EFT_FileFormatFields.FileFormatRecId == gSKS_EFT_FileFormat.RecId
                && gSKS_EFT_FileFormatFields.CodeId == _codeId;

        if (gSKS_EFT_FileFormatFields)
        {
            if(_Codelookup)
            {
                select firstonly RecId from gSKS_EB_BankCodeLookupValues where gSKS_EB_BankCodeLookupValues.CodeId == _codeId
                    && gSKS_EB_BankCodeLookupValues.FormatGroup == gSKS_EFT_FileFormat.FormatGroup
                    && gSKS_EB_BankCodeLookupValues.DisplayValue == _field;

                if(gSKS_EB_BankCodeLookupValues)
                {
                    update_recordset gSKS_EFT_BankAccountPaymLookup setting CodeLookupValuesRecId = gSKS_EB_BankCodeLookupValues.RecId
                        where gSKS_EFT_BankAccountPaymLookup.BankPaymRecId == gSKS_EFTBTB_Bank.RecId
                        && gSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == gSKS_EFT_FileFormatFields.RecId;
                }
            }
            else
            {
                update_recordset gSKS_EFT_BankAccountPaymLookup setting FixedValue = _field
                        where gSKS_EFT_BankAccountPaymLookup.BankPaymRecId == gSKS_EFTBTB_Bank.RecId
                        && gSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == gSKS_EFT_FileFormatFields.RecId;
            }
        }
        else
        {
            warning(strFmt("@SKS:SKGFileformatFieldsMissing", gSKS_EFT_FileFormat.FormatId, _codeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCNPBankFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from W0X fields
    /// </summary>
    /// <param name = "_codeId">CodeId</param>
    /// <param name = "_field">Fieldvalue</param>
    /// <param name = "_Codelookup">Yes or No value</param>
    public void updateCNPBankFields(SKS_EB_CodeId _codeId, SKS_EB_CustomField35 _field, boolean _Codelookup = false)
    {
        SKS_EFT_CNPBankAccountPaymLookup   gSKS_EFT_BankAccountPaymLookup;
        SKS_EFT_FileFormatFields        gSKS_EFT_FileFormatFields;
        SKS_EB_BankCodeLookupValues     gSKS_EB_BankCodeLookupValues;

        select firstonly RecId from gSKS_EFT_FileFormatFields
                where gSKS_EFT_FileFormatFields.FileFormatRecId == gSKS_EFT_FileFormat.RecId
                && gSKS_EFT_FileFormatFields.CodeId == _codeId;
        if (gSKS_EFT_FileFormatFields)
        {
            if(_Codelookup)
            {
                select firstonly RecId from gSKS_EB_BankCodeLookupValues where gSKS_EB_BankCodeLookupValues.CodeId == _codeId
                    && gSKS_EB_BankCodeLookupValues.FormatGroup == gSKS_EFT_FileFormat.FormatGroup
                    && gSKS_EB_BankCodeLookupValues.DisplayValue == _field;

                if(gSKS_EB_BankCodeLookupValues)
                {
                    update_recordset gSKS_EFT_BankAccountPaymLookup setting CodeLookupValuesRecId = gSKS_EB_BankCodeLookupValues.RecId
                        where gSKS_EFT_BankAccountPaymLookup.BankPaymRecId == gSKS_EFTCNP_Bank.RecId
                        && gSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == gSKS_EFT_FileFormatFields.RecId;
                }
            }
            else
            {
                update_recordset gSKS_EFT_BankAccountPaymLookup setting FixedValue = _field
                        where gSKS_EFT_BankAccountPaymLookup.BankPaymRecId == gSKS_EFTCNP_Bank.RecId
                        && gSKS_EFT_BankAccountPaymLookup.FileFormatFieldsRecId == gSKS_EFT_FileFormatFields.RecId;
            }
        }
        else
        {
            warning(strFmt("@SKS:SKGFileformatFieldsMissing", gSKS_EFT_FileFormat.FormatId, _codeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updating codelookup from LegacyLookup fields for vendor ebanking details
    /// </summary>
    /// <param name = "_codeId">codeid</param>
    /// <param name = "_vendorPaymField">vendorpaymfieldvalue</param>
    /// <param name = "_Codelookup">Yes or No value</param>
    public void updateVendorFields(SKS_EB_CodeId _codeId, SKS_EB_CustomLookupData150 _vendorPaymField, boolean _LegacyCodelookup = false)
    {
        SKS_EFT_FileFormatPaymSpecFields    gSKS_EFT_FileFormatPaymSpecFields;
        SKS_EFT_VendorPaymLookup    gSKS_EFT_VendorPaymLookup;
        SKS_EB_CodeLookupValues gSKS_EB_CodeLookupValues;

        select firstonly RecId from gSKS_EFT_FileFormatPaymSpecFields
            where gSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == gSKS_EFT_FileFormatPaymSpec.RecId
            && gSKS_EFT_FileFormatPaymSpecFields.CodeId == _codeId;

        if (gSKS_EFT_FileFormatPaymSpecFields)
        {
            if(_LegacyCodelookup)
            {
                select firstonly RecId from gSKS_EB_CodeLookupValues where gSKS_EB_CodeLookupValues.CodeId == _codeId
                    && gSKS_EB_CodeLookupValues.FormatGroup == gSKS_EFT_FileFormat.FormatGroup
                    && gSKS_EB_CodeLookupValues.DisplayValue == _vendorPaymField;

                update_recordset gSKS_EFT_VendorPaymLookup setting CodeLookupValuesRecId = gSKS_EB_CodeLookupValues.RecId
                    where gSKS_EFT_VendorPaymLookup.VendorPaymRecId == gSKS_EFT_VendorPaym.RecId
                    && gSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == gSKS_EFT_FileFormatPaymSpecFields.RecId;
            }
            else
            {
                update_recordset gSKS_EFT_VendorPaymLookup setting FixedValue = _vendorPaymField
                    where gSKS_EFT_VendorPaymLookup.VendorPaymRecId == gSKS_EFT_VendorPaym.RecId
                    && gSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == gSKS_EFT_FileFormatPaymSpecFields.RecId;
            }
        }
        else
        {
            warning(strFmt("@SKS:SKGFileformatFieldsMissing", gSKS_EFT_FileFormat.FormatId, _codeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating codelookup from BE0X fields for customer ebanking details
    /// </summary>
    /// <param name = "_codeId">CodeId</param>
    /// <param name = "_field">fieldvalue</param>
    public void updateCustomerFields(SKS_EB_CodeId _codeId, SKS_EB_CustomField35 _field)
    {
        SKS_EFT_FileFormatPaymSpecFields  gSKS_EFT_FileFormatPaymSpecFields;
        SKS_EFT_CustomerPaymLookup    lSKS_EFT_CustomerPaymLookup;

        select firstonly RecId from gSKS_EFT_FileFormatPaymSpecFields
                where gSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == gSKS_EFT_FileFormatPaymSpec.RecId
                && gSKS_EFT_FileFormatPaymSpecFields.CodeId == _codeId;

        if (gSKS_EFT_FileFormatPaymSpecFields)
        {
            update_recordset lSKS_EFT_CustomerPaymLookup setting FixedValue = _field
                    where lSKS_EFT_CustomerPaymLookup.CustPaymRecId == gSKS_EFT_CustomerPaym.RecId
                    && lSKS_EFT_CustomerPaymLookup.FileFormatPaymSpecFieldsRecId == gSKS_EFT_FileFormatPaymSpecFields.RecId;
        }
        else
        {
            warning(strFmt("@SKS:SKGFileformatFieldsMissing", gSKS_EFT_FileFormat.FormatId, _codeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustReimbursementFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updating legacy lookups for Cust reiembursement
    /// </summary>
    /// <param name = "_codeId">CodeId</param>
    /// <param name = "_CustReimbPaymField">vendorPaymField</param>
    public void updateCustReimbursementFields(SKS_EB_CodeId _codeId, SKS_EB_CustomLookup _CustReimbPaymField)
    {
        SKS_EFT_FileFormatPaymSpecFields    lSKS_EFT_FileFormatPaymSpecFields;
        SKS_EFT_CustReimbursementPaymLookup    lSKS_EFT_CustReimbursementPaymLookup;
        SKS_EB_CodeLookupValues             lSKS_EB_CodeLookupValues;       
        

        select firstonly RecId from lSKS_EFT_FileFormatPaymSpecFields
                where lSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == gSKS_EFT_FileFormatPaymSpec.RecId
                && lSKS_EFT_FileFormatPaymSpecFields.CodeId == _codeId;

        if (lSKS_EFT_FileFormatPaymSpecFields)
        {
            select firstonly RecId from lSKS_EB_CodeLookupValues where lSKS_EB_CodeLookupValues.CodeId == _codeId
                    && lSKS_EB_CodeLookupValues.FormatGroup == gSKS_EFT_FileFormat.FormatGroup
                    && lSKS_EB_CodeLookupValues.CodeValue == _CustReimbPaymField;

            update_recordset lSKS_EFT_CustReimbursementPaymLookup setting CodeLookupValuesRecId = lSKS_EB_CodeLookupValues.RecId
                    where lSKS_EFT_CustReimbursementPaymLookup.CustReimbPaymRecId == gSKS_EFT_CustReimbursementPaym.RecId
                    && lSKS_EFT_CustReimbursementPaymLookup.FileFormatPaymSpecFieldsRecId == lSKS_EFT_FileFormatPaymSpecFields.RecId;
        }
        else
        {
            warning(strFmt("@SKS:SKGFileformatFieldsMissing", gSKS_EFT_FileFormat.FormatId, _codeId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankRecords</Name>
				<Source><![CDATA[
    private void updateBankRecords()
    {
        SKS_EFT_Bank lSKS_EFT_Bank;

        select firstonly forupdate lSKS_EFT_Bank where 
            lSKS_EFT_Bank.RecId == gSKS_EFT_Bank.RecId;

        ttsbegin;
        lSKS_EFT_Bank.W01 = '';
        lSKS_EFT_Bank.W02 = '';
        lSKS_EFT_Bank.W03 = '';
        lSKS_EFT_Bank.W04 = '';
        lSKS_EFT_Bank.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateARBankRecords</Name>
				<Source><![CDATA[
    private void updateARBankRecords()
    {
        SKS_EFTAR_Bank lSKS_EFTAR_Bank;

        select firstonly forupdate lSKS_EFTAR_Bank where
            lSKS_EFTAR_Bank.RecId == gSKS_EFTAR_Bank.RecId;

        ttsbegin;
        lSKS_EFTAR_Bank.W01 = '';
        lSKS_EFTAR_Bank.W02 = '';
        lSKS_EFTAR_Bank.W03 = '';
        lSKS_EFTAR_Bank.W04 = '';
        lSKS_EFTAR_Bank.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBTBBankRecords</Name>
				<Source><![CDATA[
    private void updateBTBBankRecords()
    {
        SKS_EFTBTB_Bank lSKS_EFTBTB_Bank;

        select firstonly forupdate lSKS_EFTBTB_Bank where
            lSKS_EFTBTB_Bank.RecId == gSKS_EFTBTB_Bank.RecId;

        ttsbegin;
        lSKS_EFTBTB_Bank.W01 = '';
        lSKS_EFTBTB_Bank.W02 = '';
        lSKS_EFTBTB_Bank.W03 = '';
        lSKS_EFTBTB_Bank.W04 = '';
        lSKS_EFTBTB_Bank.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCNPBankRecords</Name>
				<Source><![CDATA[
    private void updateCNPBankRecords()
    {
        SKS_EFTCNP_Bank lSKS_EFTCNP_Bank;

        select firstonly forupdate lSKS_EFTCNP_Bank where
            lSKS_EFTCNP_Bank.RecId == gSKS_EFTCNP_Bank.RecId;

        ttsbegin;
        lSKS_EFTCNP_Bank.W01 = '';
        lSKS_EFTCNP_Bank.W02 = '';
        lSKS_EFTCNP_Bank.W03 = '';
        lSKS_EFTCNP_Bank.W04 = '';
        lSKS_EFTCNP_Bank.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorRecords</Name>
				<Source><![CDATA[
    private void updateVendorRecords()
    {
        SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;

        select firstonly forupdate lSKS_EFT_VendorPaym where 
            lSKS_EFT_VendorPaym.RecId == gSKS_EFT_VendorPaym.RecId; 

        ttsbegin;
        lSKS_EFT_VendorPaym.BE01 = '';
        lSKS_EFT_VendorPaym.BE02 = '';
        lSKS_EFT_VendorPaym.WBeneAdvice = '';
        lSKS_EFT_VendorPaym.WBeneMailHandling = '';
        lSKS_EFT_VendorPaym.WChargesIndic = '';
        lSKS_EFT_VendorPaym.WBenBankAdvice = '';
        lSKS_EFT_VendorPaym.WBenBankAcctType = '';
        lSKS_EFT_VendorPaym.WCrePartyAcctType = '';
        lSKS_EFT_VendorPaym.WCrePartyAdvice = '';
        lSKS_EFT_VendorPaym.WIntBankQualifier = '';
        lSKS_EFT_VendorPaym.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustomerRecords</Name>
				<Source><![CDATA[
    private void updateCustomerRecords()
    {
        SKS_EFT_CustomerPaym lSKS_EFT_CustomerPaym;

        select firstonly forupdate lSKS_EFT_CustomerPaym where
            lSKS_EFT_CustomerPaym.RecId == gSKS_EFT_CustomerPaym.RecId;

        ttsbegin;
        lSKS_EFT_CustomerPaym.BE01 = '';
        lSKS_EFT_CustomerPaym.BE02 = '';
        lSKS_EFT_CustomerPaym.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustReimbursementRecords</Name>
				<Source><![CDATA[
    private void updateCustReimbursementRecords()
    {
        SKS_EFT_CustReimbursementPaym lSKS_EFT_CustReimbursementPaym;

        select firstonly forupdate lSKS_EFT_CustReimbursementPaym where
            lSKS_EFT_CustReimbursementPaym.RecId == gSKS_EFT_CustReimbursementPaym.RecId;

        ttsbegin;
        lSKS_EFT_CustReimbursementPaym.WBeneAdvice = '';
        lSKS_EFT_CustReimbursementPaym.WBeneMailHandling = '';
        lSKS_EFT_CustReimbursementPaym.WChargesIndic = '';
        lSKS_EFT_CustReimbursementPaym.WBenBankAdvice = '';
        lSKS_EFT_CustReimbursementPaym.WBenBankAcctType = '';
        lSKS_EFT_CustReimbursementPaym.WCrePartyAcctType = '';
        lSKS_EFT_CustReimbursementPaym.WCrePartyAdvice = '';
        lSKS_EFT_CustReimbursementPaym.WIntBankQualifier = '';
        lSKS_EFT_CustReimbursementPaym.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>