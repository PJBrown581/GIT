<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_TH_WithHoldingTaxFields</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_TH_WithHoldingTaxFields
{
    //LedgerJournalTransExtensionTH
    boolean         mRecordsFound;
    str             mBranchNumber;
    SysDate         mCertificateDate;
    str             mCertificateNumber;
    TransDate       mInvoiceDate;
    TransDate       mInvoiceReceiptDate;
    RefRecId        mLedgerJournalTrans;
    str             mPaymentGrossUpOtherDetail;
    int             mPaymentGrossUpType;
    DirPartyName    mRealVendName;
    RefRecId        mTaxAgent;
    TransDate       mTaxInvoiceReceiptDate;
    Int             mTaxNatureOfAddress;
    CompanyCoRegNum mTaxRegNum;

    //TaxWitholdTransExtensionTH
    AmountMST       mInvoiceCurUpdatedWithholdBaseAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>BranchNumber</Name>
				<Source><![CDATA[
    public str BranchNumber()
    {
        return mBranchNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CertificateDate</Name>
				<Source><![CDATA[
    public SysDate CertificateDate()
    {
        return mCertificateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CertificateNumber</Name>
				<Source><![CDATA[
    public str CertificateNumber()
    {
        return mCertificateNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_TH_WithHoldingTaxFields</Name>
				<Source><![CDATA[
    public void getSKS_EFT_TH_WithHoldingTaxFields(RefRecId _LedJournalTransRecId)
    {
        Dicttable           dictTable;
        Common              common;
        int                 tableid;
    
        if(mLedgerJournalTrans != _LedJournalTransRecId)
        {
            mLedgerJournalTrans = _LedJournalTransRecId;
    
            tableid = tableName2Id('LedgerJournalTransExtensionTH');
    
            dictTable= new DictTable(tableid);
            if (dictTable != null)
            {
                common = dictTable.makeRecord();
    
                select firstOnly common where common.(fieldName2id(tableid, 'LedgerJournalTrans')) == mLedgerJournalTrans;
    
                if(!common)
                {
                    mRecordsFound = false;
                }
                else
                {
                    mRecordsFound = true;
                    mBranchNumber = common.(fieldName2id(tableid, 'BranchNumber'));
                    mCertificateDate = common.(fieldName2id(tableid, 'CertificateDate'));
                    mCertificateNumber = common.(fieldName2id(tableid, 'CertificateNumber'));
                    mInvoiceDate = common.(fieldName2id(tableid, 'InvoiceDate'));
                    mInvoiceReceiptDate = common.(fieldName2id(tableid, 'InvoiceReceiptDate'));
                    mPaymentGrossUpOtherDetail = common.(fieldName2id(tableid, 'PaymentGrossUpOtherDetail'));
                    mPaymentGrossUpType = common.(fieldName2id(tableid, 'PaymentGrossUpType'));
                    mRealVendName = common.(fieldName2id(tableid, 'RealVendName'));
                    mTaxAgent = common.(fieldName2id(tableid, 'TaxAgent'));
                    mTaxInvoiceReceiptDate = common.(fieldName2id(tableid, 'TaxInvoiceReceiptDate'));
                    mTaxNatureOfAddress = common.(fieldName2id(tableid, 'TaxNatureOfAddress'));
                    mTaxRegNum = common.(fieldName2id(tableid, 'TaxRegNum'));
    
                    //TaxWithholdTransExensionTH
                    tableid = tableName2Id('TaxWithholdTransExensionTH');
    
                    dictTable= new DictTable(tableid);
                    if (dictTable != null)
                    {
                        common = dictTable.makeRecord();
    
                        select firstOnly common where common.(fieldName2id(tableid, 'LedgerJournalTrans')) == mLedgerJournalTrans;
    
                        if(!common)
                        {
                            mRecordsFound = false;
                        }
                        else
                        {
                            mRecordsFound = true;
                            mInvoiceCurUpdatedWithholdBaseAmount = common.(fieldName2id(tableid, 'InvoiceCurUpdatedWithholdBaseAmount'));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InvoiceCurUpdatedWithholdBaseAmount</Name>
				<Source><![CDATA[
    public AmountMST InvoiceCurUpdatedWithholdBaseAmount()
    {
        return mInvoiceCurUpdatedWithholdBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InvoiceDate</Name>
				<Source><![CDATA[
    public TransDate InvoiceDate()
    {
        return mInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InvoiceReceiptDate</Name>
				<Source><![CDATA[
    public TransDate InvoiceReceiptDate()
    {
        return mInvoiceReceiptDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymentGrossUpOtherDetail</Name>
				<Source><![CDATA[
    public str PaymentGrossUpOtherDetail()
    {
        return mPaymentGrossUpOtherDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymentGrossUpType</Name>
				<Source><![CDATA[
    public int PaymentGrossUpType()
    {
        // Enum
        // 0 - Tax Deductible
        // 1 - Single iteration
        // 2 - Perpetual
        //10 - Other
    
        return mPaymentGrossUpType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RealVendName</Name>
				<Source><![CDATA[
    public DirPartyName RealVendName()
    {
        return mRealVendName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>RecordsFound</Name>
				<Source><![CDATA[
    public boolean RecordsFound()
    {
        return mRecordsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxAgent</Name>
				<Source><![CDATA[
    public RefRecId TaxAgent()
    {
        return mTaxAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxInvoiceReceiptDate</Name>
				<Source><![CDATA[
    public TransDate TaxInvoiceReceiptDate()
    {
        return mTaxInvoiceReceiptDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxNatureOfAddress</Name>
				<Source><![CDATA[
    public Int TaxNatureOfAddress()
    {
        // Enum
        // 0 = Head Office
        // 1 = Branch
        return mTaxNatureOfAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxRegNum</Name>
				<Source><![CDATA[
    public CompanyCoRegNum TaxRegNum()
    {
        return mTaxRegNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>