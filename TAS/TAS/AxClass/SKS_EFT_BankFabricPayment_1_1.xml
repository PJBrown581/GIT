<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_BankFabricPayment_1_1</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
class SKS_EFT_BankFabricPayment_1_1 extends SKS_EFT_BankFabricPayment_1_0
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildPaymentFileData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build payment file
    /// </summary>
    protected EFT.DataContract_1_0.PaymentFile buildPaymentFileData()
    {
        paymentFile = new EFT.DataContract_1_0.PaymentFile();

        SKS_PP_Setup lSKS_PP_Setup;
        select firstonly RegCustomerID from lSKS_PP_Setup;

        // Payment file
        paymentFile.FileNumber = gSKS_EFT_File.FileNbr;
        paymentFile.FormatGroup = gSKS_EFT_FileFormat.FormatGroup;
        paymentFile.FormatGroupVersion = gSKS_EFT_FileFormat.FormatGroupVersion;
        paymentFile.DataContractVersion = gSKS_EFT_FileFormat.FormatGroupDataContractVersion;
        paymentFile.TASSerialNumber = lSKS_PP_Setup.RegCustomerID;

        // DD and BTB transfer in are treated like DD.
        // AP, Customer reimbursement and BTB transfer out are treated like AP
        if(gSKS_EFT_File.EFTFileType == SKS_EFT_Module::AR ||
            (gSKS_EFT_File.EFTFileType == SKS_EFT_Module::BTB && gSKS_EFT_File.TransferDirection == SKS_BTB_TransferType::Transfer_in))
        {
            paymentFile.Module = EFT.DataContract_1_0.Module::DirectDebit;
        }
        else
        {
            paymentFile.Module = EFT.DataContract_1_0.Module::AccountsPayable;
        }
        paymentFile.RecordLength = gSKS_EFT_FileFormat.RecordLength;

        // Initialize EDI class
        if(gSKS_EFT_FileFormat.EDI)
        {
            if(paymentFile.Module == EFT.DataContract_1_0.Module::AccountsPayable)
            {
                SKS_EFT_FileDetail_AddendaDetailConfig lSKS_EFT_FileDetail_AddendaDetailConfig = SKS_EFT_FileDetail_AddendaDetailConfig::find(lSKS_EFT_FileDetail.RecId);
                gSKS_EFT_EDI = new SKS_EFT_EDI(gSKS_EFT_File.FormatId, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail_AddendaDetailConfig.EDI820Layout, gSKS_EFT_File.RecId);
            }
            else
            {
                gSKS_EFT_EDI = new SKS_EFT_EDI(gSKS_EFT_File.FormatId, lSKS_EFT_FileDetail.PaymSpec, '', gSKS_EFT_File.RecId);
            }
            gSKS_EFT_EDI.setEFTFileId(num2str(gSKS_EFT_FileFormat.NextFileId,0,0,0,0));
            this.paymentFileEDIEnvelope();
        }
        this.paymentFileXOther();

        this.file_Extras();

        this.companyInfoAddress();

        this.paymentFileBankHolidays();

        this.buildPayments();

        return paymentFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Payments
    /// </summary>
    protected void buildPayments()
    {
        Generic.List<EFT.DataContract_1_0.Payment> Payments = new Generic.List<EFT.DataContract_1_0.Payment>();

        while select lSKS_EFT_FileDetail where lSKS_EFT_FileDetail.FileRecId == gSKS_EFT_File.RecId &&
            lSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
            lSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary
            outer join lSKS_EFT_FileDetail_PaymentLine where
                lSKS_EFT_FileDetail_PaymentLine.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_BankAccount where
                gSKS_EFT_FileDetail_BankAccount.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_CustAddress where
                gSKS_EFT_FileDetail_CustAddress.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_VendAddress where
                gSKS_EFT_FileDetail_VendAddress.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_BenBank where
                gSKS_EFT_FileDetail_BenBank.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_Intermediary where
                gSKS_EFT_FileDetail_Intermediary.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_Mandate where
                gSKS_EFT_FileDetail_Mandate.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_CreditParty where
                gSKS_EFT_FileDetail_CreditParty.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gsKS_EFT_FileDetail_Instructions where
                gsKS_EFT_FileDetail_Instructions.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_AddendaHeader where
                gSKS_EFT_FileDetail_AddendaHeader.RefRecId == lSKS_EFT_FileDetail.RecId
            outer join gSKS_EFT_FileDetail_CustBankAddresses where
                (gSKS_EFT_FileDetail_CustBankAddresses.RefRecId == lSKS_EFT_FileDetail.RecId &&
                gSKS_EFT_FileDetail_CustBankAddresses.AddressType == SKS_EFT_AddressType::CustBankAddress)
            outer join gSKS_EFT_FileDetail_BankAddresses where
                (gSKS_EFT_FileDetail_BankAddresses.RefRecId == lSKS_EFT_FileDetail.RecId &&
                gSKS_EFT_FileDetail_BankAddresses.AddressType == SKS_EFT_AddressType::BankAddress)
            outer join gSKS_EFT_FileDetail_VendCountryAddresses where
                (gSKS_EFT_FileDetail_VendCountryAddresses.RefRecId == lSKS_EFT_FileDetail.RecId &&
                gSKS_EFT_FileDetail_VendCountryAddresses.AddressType == SKS_EFT_AddressType::VendCountryAddress)
            outer join gSKS_EFT_FileDetail_VendBankAddress where
                (gSKS_EFT_FileDetail_VendBankAddress.RefRecId == lSKS_EFT_FileDetail.RecId &&
                gSKS_EFT_FileDetail_VendBankAddress.AddressType == SKS_EFT_AddressType::VendBankAddress)

        {
            payment = new EFT.DataContract_1_0.Payment();
            
            gSKS_EFT_FileFormatPaymSpec = null;
            gSKS_EFT_FileFormatPaymSpec = SKS_EFT_FileFormatPaymSpec::findByCompany(lSKS_EFT_FileDetail.PaymentCompany,lSKS_EFT_FileDetail.FormatId,lSKS_EFT_FileDetail.PaymSpec);

            gledgerJournalTrans = null;
            select firstonly crosscompany BankTransType from gledgerJournalTrans
                            where gledgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;

            payment.BankPurposeCode = lSKS_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode;
            payment.BankPurposeName = lSKS_EFT_FileDetail_PaymentLine.BankCentralBankPurposeName;
            payment.BankPurposeText = lSKS_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText;
            if(gSKS_EFT_FileDetail_AddendaHeader.CompanyID != '')
            {
                payment.CompanyId = gSKS_EFT_FileDetail_AddendaHeader.CompanyID;
            }
            else
            {
                payment.CompanyId = lSKS_EFT_FileDetail.FileACHCompanyId;
            }
            if(gSKS_EFT_FileDetail_AddendaHeader.CompanyName != '')
            {
                payment.CompanyName = gSKS_EFT_FileDetail_AddendaHeader.CompanyName;
            }
            else
            {
                payment.CompanyName = lSKS_EFT_FileDetail.FileACHCompanyName;
            }
            payment.CurrencyCode = lSKS_EFT_FileDetail.PaymentCurrencyCode;
            payment.EffectiveDate = CLRSystemDateTime2UtcDateTime(DateTimeUtil::newDateTime(lSKS_EFT_FileDetail.EffectiveDate,0));
            payment.FormatId = lSKS_EFT_FileDetail.FormatId;
            payment.ISORemittanceType = gSKS_EFT_FileFormatPaymSpec.RemitType;
            payment.PaymentDescription = lSKS_EFT_FileDetail_PaymentLine.TransactionTxt;
            payment.PaymentId = lSKS_EFT_FileDetail.PaymId;
            payment.PaymentKey = lSKS_EFT_FileDetail.RecId;
            payment.PaymentNotes = lSKS_EFT_FileDetail.PaymentNotes;
            payment.PaymentReference = lSKS_EFT_FileDetail.PaymentReference;
            payment.PaymentSpec = lSKS_EFT_FileDetail.PaymSpec;
            if(gSKS_EFT_FileDetail_AddendaHeader.CompanyDescription != '')
            {
                payment.PaymentSpecName = gSKS_EFT_FileDetail_AddendaHeader.CompanyDescription;
            }
            else
            {
                payment.PaymentSpecName = lSKS_EFT_FileDetail.PaymSpecName;
            }

            if(lSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
            {
                payment.Prenote = true;
            }
            payment.TransactionCode = lSKS_EFT_FileDetail.TransactionCode;

            payment.PaymentAmountCur = lSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
            if(lSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur < 0)
            {
                payment.DebitCredit = EFT.DataContract_1_0.DebitCreditType::Credit;
                payment.PaymentAmountCur = payment.PaymentAmountCur * -1;
            }
            else if(lSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
            {
                payment.DebitCredit = EFT.DataContract_1_0.DebitCreditType::Debit;

            }
            else if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
            {
                payment.DebitCredit = EFT.DataContract_1_0.DebitCreditType::Debit; // DD prenote
            }
            else
            {
                payment.DebitCredit = EFT.DataContract_1_0.DebitCreditType::Credit; // AP prenote
            }

            this.paymentXOther();
            this.codeLookup();
            this.codeLookupBank();
            this.payment_Extras();
            this.debtor();
            this.debtorAccount();
            this.debtorAgent();
            this.directDebitInfo();
            this.creditor();
            this.creditorAccount();
            this.creditorAgent();
            this.creditParty();
            this.intermediary();
            this.instructions();
            this.taxWithholding();
            this.taxWithholdTH();
            if(gSKS_EFT_FileFormatPaymSpec.InvoiceDetail)
            {
                this.invoices();
            }
            this.addendaLines();

            Payments.Add(payment);
        }
        if(gSKS_EFT_File.EFTFileType == SKS_EFT_Module::AR)
        {
            this.characterReplacement(paymentFile, gSKS_EFTAR_Bank.CharacterReplacementGroupId);
        }
        else if(gSKS_EFT_File.EFTFileType == SKS_EFT_Module::BTB)
        {
            this.characterReplacement(paymentFile, gSKS_EFTBTB_Bank.CharacterReplacementGroupId);
        }
        else if(gSKS_EFT_File.EFTFileType == SKS_EFT_Module::CNP)
        {
            this.characterReplacement(paymentFile, gSKS_EFTCNP_Bank.CharacterReplacementGroupId);
        }
        else
        {
            this.characterReplacement(paymentFile, gSKS_EFTAP_Bank.CharacterReplacementGroupId);
        }

        // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
        System.Object asObject = Payments;
        paymentFile.Payments = asObject;

        this.fileHeader(paymentFile);
        this.fileTrailer(paymentFile);
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditorAgent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creditor Agent
    /// </summary>
    protected void creditorAgent()
    {
        EFT.DataContract_1_0.PaymentCreditorAgent creditorAgent = new EFT.DataContract_1_0.PaymentCreditorAgent();
        EFT.DataContract_1_0.PaymentPostalAddress creditorAgentAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther creditorAgentAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();
        EFT.DataContract_1_0.PaymentCreditorAgentXOther creditorAgentxOther = new EFT.DataContract_1_0.PaymentCreditorAgentXOther();
        SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;

        if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
        {
            creditorAgent.Branch = '';
            creditorAgent.CurrencyCode = lSKS_EFT_FileDetail.CurrencyCode;
            creditorAgent.RoutingNumber = lSKS_EFT_FileDetail.BankBankTransit;
            creditorAgent.RoutingNumberType = lSKS_EFT_FileDetail.BankBankCodeType;
            creditorAgent.SWIFTCode = lSKS_EFT_FileDetail.BankBankSwiftNo;

            creditorAgentAddress.AddressLine1 = gSKS_EFT_FileDetail_BankAddresses.Addr;
            creditorAgentAddress.AddressLine2 = gSKS_EFT_FileDetail_BankAddresses.Addr2;
            creditorAgentAddress.TownName = gSKS_EFT_FileDetail_BankAddresses.City;
            creditorAgentAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAddresses.CountryRegionId);
            creditorAgentAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAddresses.CountryRegionId).CountryRegionId;
            creditorAgentAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAddresses.CountryRegionId).displayName();
            creditorAgentAddress.CountrySubDivision = gSKS_EFT_FileDetail_BankAddresses.State;
            creditorAgentAddress.PostCode = gSKS_EFT_FileDetail_BankAddresses.ZipCode;
            creditorAgent.Name = gSKS_EFT_FileDetail_BankAddresses.Name;
        }
        else
        {
            creditorAgent.Branch = gSKS_EFT_FileDetail_BenBank.BenBankBranch;
            creditorAgent.CurrencyCode = lSKS_EFT_FileDetail.DepBankCurrency;
            creditorAgent.Name = gSKS_EFT_FileDetail_BenBank.BenBankName;
            creditorAgent.RoutingNumber = lSKS_EFT_FileDetail.DepBankTransit;
            creditorAgent.RoutingNumberType = lSKS_EFT_FileDetail.DepBankCodeType;
            creditorAgent.SWIFTCode = lSKS_EFT_FileDetail.DepSwiftNo;

            creditorAgentAddress.AddressLine1 = gSKS_EFT_FileDetail_BenBank.BenBankAddr;
            creditorAgentAddress.TownName = gSKS_EFT_FileDetail_BenBank.BenBankCity;
            creditorAgentAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
            creditorAgentAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId).CountryRegionId;
            creditorAgentAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId).displayName();
            
            lSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::findbycompany(lSKS_EFT_FileDetail.PaymentCompany ? lSKS_EFT_FileDetail.PaymentCompany :
                lSKS_EFT_FileDetail.DataAreaId, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum,
                lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);

            if(lSKS_EFT_VendorPaym.WBeneUseVendBankAcc == NoYes::Yes)
            {
                creditorAgentAddress.CountrySubDivision = gSKS_EFT_FileDetail_VendBankAddress.State;
                creditorAgentAddress.PostCode = gSKS_EFT_FileDetail_VendBankAddress.ZipCode;
            }

            creditorAgentxOther.BankId = gSKS_EFT_FileDetail_BenBank.BenBankAcct;
        }

        creditorAgent.PostalAddress = creditorAgentAddress;
        creditorAgentAddress.XOther = creditorAgentAddressxOther;
        creditorAgent.XOther = creditorAgentxOther;
        payment.CreditorAgent = creditorAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Debtor
    /// </summary>
    protected void debtor()
    {
        EFT.DataContract_1_0.PaymentDebtor debtor = new EFT.DataContract_1_0.PaymentDebtor();
        EFT.DataContract_1_0.PaymentDebtorXOther debtorxOther = new EFT.DataContract_1_0.PaymentDebtorXOther();
        EFT.DataContract_1_0.PaymentPostalAddress debtorAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther debtorAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();
        CustTable   lCustTable;
        DirPartyTable  lDirPartyTable;

        if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
        {
            debtor.Id = lSKS_EFT_FileDetail.AccountNum;
            debtor.Name = lSKS_EFT_FileDetail.AccountName;

            debtorAddress.AddressLine1 = gSKS_EFT_FileDetail_CustAddress.CustAddr;
            debtorAddress.AddressLine2 = gSKS_EFT_FileDetail_CustAddress.CustAddr2;
            debtorAddress.TownName = gSKS_EFT_FileDetail_CustAddress.CustCity;
            debtorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId);
            debtorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId).CountryRegionId;
            debtorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CustAddress.CustCountryRegionId).displayName();
            debtorAddress.CountrySubDivision = gSKS_EFT_FileDetail_CustAddress.CustState;
            debtorAddress.PostCode = gSKS_EFT_FileDetail_CustAddress.CustZipPostal;

            lCustTable = CustTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            select * from lDirPartyTable where lDirPartyTable.RecId == lCustTable.Party;

            debtorxOther.Language = lDirPartyTable.LanguageId;
        }
        else
        {
            debtor.BICOrBEI = gSKS_EFT_FileDetail_BankAccount.WOrdPartySWIFTNo;
            debtor.Id = gSKS_EFT_FileDetail_BankAccount.WOrdPartyId;
            debtor.Name = gSKS_EFT_FileDetail_BankAccount.WOrdPartyName;

            debtorAddress.AddressLine1 = gSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr;
            debtorAddress.AddressLine2 = gSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2;
            debtorAddress.TownName = gSKS_EFT_FileDetail_BankAccount.WOrdPartyCity;
            debtorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);
            debtorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)).CountryRegionId;
            debtorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId)).displayName();
            debtorAddress.CountrySubDivision = gSKS_EFT_FileDetail_BankAccount.WOrdPartyState;
            debtorAddress.PostCode = gSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode;

            debtorAddressxOther.CountryName = gSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryName;

            debtorxOther.TaxId = lSKS_EFT_FileDetail.CoRegNum;
        }
        debtor.XOther = debtorxOther;
        debtorAddress.XOther = debtorAddressxOther;
        debtor.PostalAddress = debtorAddress;
        payment.Debtor = debtor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtorAgent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Debtor agent
    /// </summary>
    protected void debtorAgent()
    {
        EFT.DataContract_1_0.PaymentDebtorAgent debtorAgent = new EFT.DataContract_1_0.PaymentDebtorAgent();
        EFT.DataContract_1_0.PaymentDebtorAgentXOther debtorAgentxOther = new EFT.DataContract_1_0.PaymentDebtorAgentXOther();
        EFT.DataContract_1_0.PaymentPostalAddress debtorAgentAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther debtorAgentAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();

        if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
        {
            debtorAgent.BankSortCode = '';
            debtorAgent.Name = gSKS_EFT_FileDetail_CustBankAddresses.Name;
            debtorAgent.RoutingNumber = lSKS_EFT_FileDetail.DepBankTransit;
            debtorAgent.RoutingNumberType = lSKS_EFT_FileDetail.DepBankCodeType;
            debtorAgent.SWIFTCode = lSKS_EFT_FileDetail.DepSwiftNo;

            debtorAgentAddress.AddressLine1 = gSKS_EFT_FileDetail_CustBankAddresses.Addr;
            debtorAgentAddress.AddressLine2 = gSKS_EFT_FileDetail_CustBankAddresses.Addr2;
            debtorAgentAddress.TownName = gSKS_EFT_FileDetail_CustBankAddresses.City;
            debtorAgentAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_CustBankAddresses.CountryRegionId);
            debtorAgentAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CustBankAddresses.CountryRegionId).CountryRegionId;
            debtorAgentAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CustBankAddresses.CountryRegionId).displayName();
            debtorAgentAddress.CountrySubDivision = gSKS_EFT_FileDetail_CustBankAddresses.State;
            debtorAgentAddress.PostCode = gSKS_EFT_FileDetail_CustBankAddresses.ZipCode;

            debtorAgentxOther.Phone = gSKS_EFT_FileDetail_CustBankAddresses.Phone;
            debtorAgentxOther.PhoneExtension = gSKS_EFT_FileDetail_CustBankAddresses.PhoneLocal;

        }
        else
        {
            debtorAgent.BankSortCode = lSKS_EFT_FileDetail.BankBankSortCode;
            debtorAgent.RoutingNumber = lSKS_EFT_FileDetail.BankBankTransit;
            debtorAgent.RoutingNumberType = lSKS_EFT_FileDetail.BankBankCodeType;
            debtorAgent.SWIFTCode = lSKS_EFT_FileDetail.BankBankSwiftNo;

            debtorAgentAddress.AddressLine1 = gSKS_EFT_FileDetail_BankAddresses.Addr;
            debtorAgentAddress.AddressLine2 = gSKS_EFT_FileDetail_BankAddresses.Addr2;
            debtorAgentAddress.TownName = gSKS_EFT_FileDetail_BankAddresses.City;
            debtorAgentAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAddresses.CountryRegionId);
            debtorAgentAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAddresses.CountryRegionId).CountryRegionId;
            debtorAgentAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAddresses.CountryRegionId).displayName();
            debtorAgentAddress.CountrySubDivision = gSKS_EFT_FileDetail_BankAddresses.State;
            debtorAgentAddress.PostCode = gSKS_EFT_FileDetail_BankAddresses.ZipCode;

            debtorAgent.Name = gSKS_EFT_FileDetail_BankAddresses.Name;
        }

        debtorAgent.XOther = debtorAgentxOther;
        debtorAgent.PostalAddress = debtorAgentAddress;
        debtorAgentAddress.XOther = debtorAgentAddressxOther;

        payment.DebtorAgent = debtorAgent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfoAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets company address
    /// </summary>
    protected void companyInfoAddress()
    {
        EFT.DataContract_1_0.PaymentCompanyInfo companyInfo = new EFT.DataContract_1_0.PaymentCompanyInfo();
        EFT.DataContract_1_0.PaymentPostalAddress companyInfoAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther companyInfoAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();

        if(paymentFile.Module == EFT.DataContract_1_0.Module::AccountsPayable)
        {
            companyInfoAddress.AddressLine1 = gSKS_EFT_FileDetail_Addresses.Addr;
            companyInfoAddress.AddressLine2 = gSKS_EFT_FileDetail_Addresses.Addr2;
            companyInfoAddress.TownName = gSKS_EFT_FileDetail_Addresses.City;
            companyInfoAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_Addresses.CountryRegionId);
            companyInfoAddress.CountrySubDivision = gSKS_EFT_FileDetail_Addresses.State;
            companyInfoAddress.PostCode = gSKS_EFT_FileDetail_Addresses.ZipCode;
            companyInfoAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_Addresses.CountryRegionId).CountryRegionId;
            companyInfoAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_Addresses.CountryRegionId).displayName();

        }
        else if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
        {
            if(gSKS_EFT_FileFormat.FormatGroup == 'UK-HSBC-XML-EU-AR' || gSKS_EFT_FileFormat.FormatGroup == 'PT-MILLENNIUMBCP-XML-AR' || gSKS_EFT_FileFormat.FormatGroup == 'IE-BANKIRELAND-XML-AR')
            {
                LogisticsPostalAddress  postalAddress;

                postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Previous Mandate Address');

                companyInfoAddress.AddressLine1 = postalAddress.Street;
                companyInfoAddress.TownName = postalAddress.City;
                companyInfoAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(postalAddress.CountryRegionId);
                companyInfoAddress.CountrySubDivision = postalAddress.State;
                companyInfoAddress.PostCode = postalAddress.ZipCode;
                companyInfoAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).CountryRegionId;
                companyInfoAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(postalAddress.CountryRegionId).displayName();
            }
            else
            {
                companyInfoAddress.AddressLine1 = gSKS_EFT_FileDetail_BankAccount.Addr;
                companyInfoAddress.AddressLine2 = gSKS_EFT_FileDetail_BankAccount.Addr2;
                companyInfoAddress.TownName = gSKS_EFT_FileDetail_BankAccount.City;
                companyInfoAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.CountryRegionId);
                companyInfoAddress.CountrySubDivision = gSKS_EFT_FileDetail_BankAccount.State;
                companyInfoAddress.PostCode = gSKS_EFT_FileDetail_BankAccount.ZipPostal;
                companyInfoAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAccount.CountryRegionId).CountryRegionId;
                companyInfoAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAccount.CountryRegionId).displayName();
            }
        }
        CompanyInfo.PostalAddress = companyInfoAddress;
        companyInfoAddress.XOther = companyInfoAddressxOther;
        paymentFile.CompanyInfo = CompanyInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creditor
    /// </summary>
    protected void creditor()
    {
        EFT.DataContract_1_0.PaymentCreditor creditor = new EFT.DataContract_1_0.PaymentCreditor();
        EFT.DataContract_1_0.PaymentCreditorXOther creditorxOther = new EFT.DataContract_1_0.PaymentCreditorXOther();
        EFT.DataContract_1_0.PaymentPostalAddress creditorAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther creditorAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();

        if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit)
        {
            creditor.Id = lSKS_EFT_FileDetail.FileACHCompanyId;
            creditor.Name = lSKS_EFT_FileDetail.FileACHCompanyName;

            creditorAddress.AddressLine1 = gSKS_EFT_FileDetail_BankAccount.Addr;
            creditorAddress.AddressLine2 = gSKS_EFT_FileDetail_BankAccount.Addr2;
            creditorAddress.TownName = gSKS_EFT_FileDetail_BankAccount.City;
            creditorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_BankAccount.CountryRegionId);
            creditorAddress.CountrySubDivision = gSKS_EFT_FileDetail_BankAccount.State;
            creditorAddress.StreetName = gSKS_EFT_FileDetail_BankAccount.Street;
            creditorAddress.PostCode = gSKS_EFT_FileDetail_BankAccount.ZipPostal;
            creditorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAccount.CountryRegionId).CountryRegionId;
            creditorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_BankAccount.CountryRegionId).displayName();
        }
        else
        {
            switch(gsks_eft_FileDetail_AddendaHeader.AccountIDOvr)
            {
                case SKS_EFT_AddendaOverwrite::AccountName:
                    creditor.Id = lSKS_EFT_FileDetail.AccountName;
                    break;
                case SKS_EFT_AddendaOverwrite::AccountNum:
                    creditor.Id = lSKS_EFT_FileDetail.AccountNum;
                    break;
                case SKS_EFT_AddendaOverwrite::BeneName:
                    creditor.Id = gSKS_EFT_FileDetail_VendAddress.BeneName;
                    break;
                case SKS_EFT_AddendaOverwrite::Fixed:
                    creditor.Id = gsks_eft_FileDetail_AddendaHeader.IdentificationFixedValue;
                    break;
                default:
                    creditor.Id = lSKS_EFT_FileDetail.AccountNum;
                    break;
            }
            
            switch(gsks_eft_FileDetail_AddendaHeader.RecCompany)
            {
                case SKS_EFT_AddendaOverwrite::AccountName:
                    creditor.Name = lSKS_EFT_FileDetail.AccountName;
                    break;
                case SKS_EFT_AddendaOverwrite::AccountNum:
                    creditor.Name = lSKS_EFT_FileDetail.AccountNum;
                    break;
                case SKS_EFT_AddendaOverwrite::BeneName:
                    creditor.Name = gSKS_EFT_FileDetail_VendAddress.BeneName;
                    break;
                case SKS_EFT_AddendaOverwrite::Fixed:
                    creditor.Name = gsks_eft_FileDetail_AddendaHeader.RecCompanyFixedValue;
                    break;
                default:
                    creditor.Name = gSKS_EFT_FileDetail_VendAddress.BeneName;
                    break;
            }
            
            creditor.VATNum = lSKS_EFT_FileDetail.VATNum;
            creditorAddress.AddressLine1 = gSKS_EFT_FileDetail_VendAddress.BeneAddr;
            creditorAddress.AddressLine2 = gSKS_EFT_FileDetail_VendAddress.BeneAddr2;
            creditorAddress.TownName = gSKS_EFT_FileDetail_VendAddress.BeneCity;
            creditorAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
            creditorAddress.CountrySubDivision = gSKS_EFT_FileDetail_VendAddress.BeneState;
            creditorAddress.StreetName = gSKS_EFT_FileDetail_VendAddress.BeneStreet;
            creditorAddress.BuildingNumber = gSKS_EFT_FileDetail_VendAddress.BeneStreetNumber;
            creditorAddress.PostCode = gSKS_EFT_FileDetail_VendAddress.BeneZipPostal;
                        
            creditorAddressxOther.AddressLine3 = gSKS_EFT_FileDetail_VendAddress.BeneAddr3;
            creditorAddressxOther.BuildingCompliment = gSKS_EFT_FileDetail_VendAddress.BeneBuildingCompliment;
            creditorAddressxOther.County = gSKS_EFT_FileDetail_VendAddress.BeneCounty;
            creditorAddressxOther.DistrictName = gSKS_EFT_FileDetail_VendAddress.BeneDistrictName;
            creditorAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).CountryRegionId;
            creditorAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).displayName();

            creditorxOther.ERPCompany = lSKS_EFT_FileDetail.AccountCompany;
            creditorxOther.ExternalIdentifier = lSKS_EFT_FileDetail.VendYourAccountNum;
            creditorxOther.Fax = gSKS_EFT_FileDetail_VendAddress.Fax;

            VendTable lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            DirPartyContactInfoview lDirPartyContactInfoview;
            select * from lDirPartyContactInfoview where lDirPartyContactInfoview.Party == lVendTable.Party && lDirPartyContactInfoview.IsPrimary == true
                &&  lDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Phone;

            creditorxOther.Phone = lDirPartyContactInfoview.Locator;

            creditorxOther.TaxWithholdGroup = lVendTable.TaxWithholdGroup;

            Generic.List<EFT.DataContract_1_0.PaymentEmailAddress> PaymentEmailAddresses = new Generic.List<EFT.DataContract_1_0.PaymentEmailAddress>();
            if(gSKS_EFT_FileDetail_VendAddress.Locator || gSKS_EFT_FileDetail_VendAddress.LocationName)
            {
                EFT.DataContract_1_0.PaymentEmailAddress emailp = new EFT.DataContract_1_0.PaymentEmailAddress();
                emailp.EmailIdentifer = 'Primary';
                emailp.EmailAddress = gSKS_EFT_FileDetail_VendAddress.Locator;
                emailp.EmailName = gSKS_EFT_FileDetail_VendAddress.LocationName;
                PaymentEmailAddresses.Add(emailp);
            }
            SKS_EB_Vendor lSKS_EB_Vendor = SKS_EB_Vendor::findByCompany(lSKS_EFT_FileDetail.PaymentCompany, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            if(lSKS_EB_Vendor.EM1Vendor)
            {
                SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;
                lSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::findbycompany(lSKS_EFT_FileDetail.PaymentCompany ? lSKS_EFT_FileDetail.PaymentCompany :
                                    lSKS_EFT_FileDetail.DataAreaId, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum,
                                    lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);

                container email = SKS_EFT_VendorLoad::primaryEmail(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_VendorPaym.WBeneRemittanceLocation);
                DirPartyContactInfoview mDirPartyContactInfoview = conPeek(email,2);

                if(mDirPartyContactInfoview.Locator)
                {
                    EFT.DataContract_1_0.PaymentEmailAddress email1 = new EFT.DataContract_1_0.PaymentEmailAddress();
                    email1.EmailIdentifer = 'EMail1';
                    email1.EmailAddress = mDirPartyContactInfoview.Locator;
                    email1.EmailName = mDirPartyContactInfoview.LocationName;
                    PaymentEmailAddresses.Add(email1);
                }
            }

            if(lSKS_EB_Vendor.EM2Addr || lSKS_EB_Vendor.EM2Name)
            {
                EFT.DataContract_1_0.PaymentEmailAddress email2 = new EFT.DataContract_1_0.PaymentEmailAddress();
                email2.EmailIdentifer = 'EMail2';
                email2.EmailAddress = lSKS_EB_Vendor.EM2Addr;
                email2.EmailName = lSKS_EB_Vendor.EM2Name;
                PaymentEmailAddresses.Add(email2);
            }

            if(lSKS_EB_Vendor.EM3Addr || lSKS_EB_Vendor.EM3Name)
            {
                EFT.DataContract_1_0.PaymentEmailAddress email3 = new EFT.DataContract_1_0.PaymentEmailAddress();
                email3.EmailIdentifer = 'EMail3';
                email3.EmailAddress = lSKS_EB_Vendor.EM3Addr;
                email3.EmailName = lSKS_EB_Vendor.EM3Name;
                PaymentEmailAddresses.Add(email3);
            }

            if(lSKS_EB_Vendor.EM4Addr || lSKS_EB_Vendor.EM4Name)
            {
                EFT.DataContract_1_0.PaymentEmailAddress email4 = new EFT.DataContract_1_0.PaymentEmailAddress();
                email4.EmailIdentifer = 'EMail4';
                email4.EmailAddress = lSKS_EB_Vendor.EM4Addr;
                email4.EmailName = lSKS_EB_Vendor.EM4Name;
                PaymentEmailAddresses.Add(email4);
            }
            
            this.creditorxother_Extension(PaymentEmailAddresses);

            // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
            System.Object asObject = PaymentEmailAddresses;
            creditorxOther.PaymentEmailAddresses = asObject;

        }
        creditor.XOther = creditorxOther;
        creditorAddress.XOther = creditorAddressxOther;
        creditor.PostalAddress = creditorAddress;
        this.creditor_Extension(creditor);
        payment.Creditor = creditor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intermediary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intermediary
    /// </summary>
    protected void intermediary()
    {
        EFT.DataContract_1_0.PaymentIntermediary intermediary = new EFT.DataContract_1_0.PaymentIntermediary();
        EFT.DataContract_1_0.PaymentPostalAddress intermediaryAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther intermediaryAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();

        intermediary.Account = gSKS_EFT_FileDetail_Intermediary.IntBankAcct;
        intermediary.BankId = gSKS_EFT_FileDetail_Intermediary.IntBankId;
        intermediary.Branch = gSKS_EFT_FileDetail_Intermediary.IntBankBranch;
        intermediary.Name = gSKS_EFT_FileDetail_Intermediary.IntBankName;
        intermediary.SWIFTCode = gSKS_EFT_FileDetail_Intermediary.IntBankSwift;

        intermediaryAddress.AddressLine1 = gSKS_EFT_FileDetail_Intermediary.IntBankAddr;
        intermediaryAddress.AddressLine2 = gSKS_EFT_FileDetail_Intermediary.IntBankAddr2;
        intermediaryAddress.TownName = gSKS_EFT_FileDetail_Intermediary.IntBankCity;
        intermediaryAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId);
        intermediaryAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId).CountryRegionId;
        intermediaryAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId).displayName();

        intermediary.PostalAddress = intermediaryAddress;
        intermediaryAddress.XOther = intermediaryAddressxOther;
        payment.Intermediary = intermediary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Credit Party
    /// </summary>
    protected void creditParty()
    {
        EFT.DataContract_1_0.PaymentCreditParty creditParty = new EFT.DataContract_1_0.PaymentCreditParty();
        EFT.DataContract_1_0.PaymentCreditPartyXOther creditPartyxOther = new EFT.DataContract_1_0.PaymentCreditPartyXOther();
        EFT.DataContract_1_0.PaymentPostalAddress creditPartyAddress = new EFT.DataContract_1_0.PaymentPostalAddress();
        EFT.DataContract_1_0.PaymentPostalAddressxOther creditPartyAddressxOther = new EFT.DataContract_1_0.PaymentPostalAddressxOther();

        creditPartyxOther.Account = gSKS_EFT_FileDetail_CreditParty.CrePartyAcct;
        creditPartyxOther.BankId = gSKS_EFT_FileDetail_CreditParty.CrePartyBankId;
        creditPartyxOther.BankName = gSKS_EFT_FileDetail_CreditParty.CrePartyBankName;
        creditPartyxOther.Name = gSKS_EFT_FileDetail_CreditParty.CrePartyName;
        creditPartyxOther.SWIFTCode = gSKS_EFT_FileDetail_CreditParty.CrePartySwift;

        creditPartyAddress.AddressLine1 = gSKS_EFT_FileDetail_CreditParty.CrePartyAddr;
        creditPartyAddress.TownName = gSKS_EFT_FileDetail_CreditParty.CrePartyCity;
        creditPartyAddress.Country = SKS_EFT_BankFabricPayment::getLogisticsAddressCountryISO(gSKS_EFT_FileDetail_CreditParty.CrePartyCountryRegionId);
        creditPartyAddressxOther.CountryISO3 = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CreditParty.CrePartyCountryRegionId).CountryRegionId;
        creditPartyAddressxOther.CountryName = LogisticsAddressCountryRegion::findByISOCode(gSKS_EFT_FileDetail_CreditParty.CrePartyCountryRegionId).displayName();

        creditPartyxOther.PostalAddress = creditPartyAddress;
        creditPartyAddress.XOther = creditPartyAddressxOther;
        creditParty.XOther = creditPartyxOther;

        payment.CreditParty = creditParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment_Extras</Name>
				<Source><![CDATA[
    /// <summary>
    /// Payment extra key value pairs
    /// </summary>
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every WorkflowTrackingStatusTable record(inner loop) for every relevant WorkflowTrackingTable record(outer loop)")]
    protected void payment_Extras()
    {
        Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups = new Generic.List<EFT.DataContract_1_0.PaymentExtra>();
        EFT.DataContract_1_0.PaymentExtra lookup;

        SKS_EFT_FileDetail_Extra lSKS_EFT_FileDetail_Extra;
        while select lSKS_EFT_FileDetail_Extra where lSKS_EFT_FileDetail_Extra.RefRecId == lSKS_EFT_FileDetail.RecId && lSKS_EFT_FileDetail_Extra.CodeLookupType == SKS_EFT_CodeLookupType::Extra
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = lSKS_EFT_FileDetail_Extra.FieldName;
            lookup.Value = lSKS_EFT_FileDetail_Extra.Value;
            lookups.Add(lookup);
        }
                
        
        if(paymentFile.Module == EFT.DataContract_1_0.Module::AccountsPayable)
        {
            str dbtrAgtName = LogisticsLocation::find(gSKS_EFT_FileDetail_BankAddresses.Location).Description;

            if(dbtrAgtName)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'DbtrAgtNm';
                lookup.Value = dbtrAgtName;
                lookups.Add(lookup);
            }
        }

        if(paymentFile.Module == EFT.DataContract_1_0.Module::DirectDebit) //UK-HSBC-XML-UK-AR
        {
            if(lSKS_EFT_FileDetail.BankBankSortCode)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'BankBankSortCode';
                lookup.Value = lSKS_EFT_FileDetail.BankBankSortCode;
                lookups.Add(lookup);
            }
        }
        
        if(lSKS_EFT_FileDetail.FormatId == 'CH-SIX-LSV')
        {
            LogisticsPostalAddress postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(),'Direct Debit');
            str cmpDescription = LogisticsLocation::find(postalAddress.Location).Description;

            if(cmpDescription)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CompanyDescription';
                lookup.Value = cmpDescription;
                lookups.Add(lookup);
            }
        }
        if(lSKS_EFT_FileDetail.FormatId == 'AT-RAIFFEISENBANK-CFD-CZ')
        {
            VendBankAccount mVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'BankConstantSymbol';
            lookup.Value = int642Str(mVendBankAccount.BankConstantSymbol);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-WESTERN-UNION-XML')
        {
            str PTPayeeID = SKS_EFT_Format::getCodelookupvalue('PTPayeeIDOption', lSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PTPayeeIDOptionValue';
            lookup.Value = VendTable::find(PTPayeeID).AccountNum;   //VendTable::find(PTPayeeID).RecId
            lookups.Add(lookup);
        }
        if(lSKS_EFT_FileDetail.FormatId == 'US-UNION-PAYER-DIRECT-CSV')
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'YourAccountNum';
            lookup.Value = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum).YourAccountNum;
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'CH-UBS-KEYLINK-TREA-CSV')
        {
            WorkflowTrackingStatusTable     workflowTrackingStatus;
            WorkflowTrackingTable           workflowTrackingTable;
            WorkflowTrackingCommentTable    workflowTrackingCommentTable;
            UserInfo userInfo;
            TransDateTime                   approvaldate1, approvaldate2;
            int approvecount;
            str approvalname1, approvalname2;

            while select firstFast RecId,CreatedDateTime, User from workflowTrackingTable
                order by workflowTrackingTable.CreatedDateTime,workflowTrackingTable.RecId asc
                join workflowTrackingCommentTable
                where workflowTrackingCommentTable.WorkflowTrackingTable == workflowTrackingTable.RecId
                join UserInfo where UserInfo.id == WorkflowTrackingTable.User
                exists join workflowTrackingStatus
                where workflowTrackingTable.WorkflowTrackingStatusTable ==  workflowTrackingStatus.RecId
                    && workflowTrackingStatus.ContextRecId == LedgerJournalTable::find(LedgerJournalTrans::findByRef(curExt(),lSKS_EFT_FileDetail.PaymentLineRecId).JournalNum).RecId   //SKS#DevOps:15791
                    && workflowTrackingTable.TrackingType == WorkflowTrackingType::Approval
            {
                approvecount++;
                if(approvecount == 1)
                {
                    approvalname1 = userInfo.name;
                    approvaldate1 = workflowTrackingCommentTable.CreatedDateTime;
                }
                if(approvecount == 2)
                {
                    approvalname2 = userInfo.name;
                    approvaldate2 = workflowTrackingCommentTable.CreatedDateTime;
                }
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'Approver1';
            lookup.Value = approvalname1;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'Approver2';
            lookup.Value = approvalname2;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'ApproverDate1';
            lookup.Value = datetime2Str(approvaldate1);
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'ApproverDate2';
            lookup.Value = datetime2Str(approvaldate2);
            lookups.Add(lookup);

        }

        if(lSKS_EFT_FileDetail.FormatId == 'JP-ZENGINBANK-120')
        {
            VendBankAccount     lVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            BankGroupId AccountGroupId = BankAccountTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.BankAccountId).BankGroupId;
            BankGroup bankGroup = BankGroup::find(AccountGroupId);

            BankGroupId vendBankGroupId = lVendBankAccount.BankGroupId;
            BankGroup vendBankGroup = BankGroup::find(vendBankGroupId);

            if(bankGroup)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemittingBankNumber';
                lookup.Value = bankgroup.Code_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemittingBankName';
                lookup.Value = bankgroup.NameKana_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemittingBranchNumber';
                lookup.Value = bankgroup.BranchCode_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'RemittingBranchName';
                lookup.Value = bankgroup.BranchNameKana_JP;
                lookups.Add(lookup);
            }

            if(vendBankGroup)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'ReceivingBankNumber';
                lookup.Value = vendBankGroup.Code_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'ReceivingBankName';
                lookup.Value = vendBankGroup.NameKana_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'ReceivingBranchNumber';
                lookup.Value = vendBankGroup.BranchCode_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'ReceivingBranchName';
                lookup.Value = vendBankGroup.BranchNameKana_JP;
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'BankAccountNameKana_JP';
                lookup.Value = lVendBankAccount.BankAccountNameKana_JP;
                lookups.Add(lookup);
            }
        }
        
        if(lSKS_EFT_FileDetail.FormatId == 'MX-HSBC-SIP-CSV')
        {
            CompanyInfo companyInfo;
            SKS_EFT_VendorPaym lSKS_EFT_VendorPaym;
            lSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::findbycompany(lSKS_EFT_FileDetail.PaymentCompany ? lSKS_EFT_FileDetail.PaymentCompany :
                                    lSKS_EFT_FileDetail.DataAreaId, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum,
                                    lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);

            companyInfo = CompanyInfo::findDataArea(lSKS_EFT_VendorPaym.VendCompany);

            if(companyInfo)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CompanyInforRfcMX';
                lookup.Value = companyInfo.Rfc_MX;
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'EU-DANSKEBANK-XML-PL' || lSKS_EFT_FileDetail.FormatId == 'PL-MBANK-XML')
        {
            SplitPaymentMandatoryRule_PL splitPaymentMandatoryRule_PL;

            select splitPaymentMandatoryRule_PL
                where splitPaymentMandatoryRule_PL.PaymMode == lSKS_EFT_FileDetail.PaymMode && splitPaymentMandatoryRule_PL.Specification == lSKS_EFT_FileDetail.PaymSpec; //DevOps 18774


            if(splitPaymentMandatoryRule_PL)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'PaymentMandatoryRulePL';
                lookup.Value = 'True'; 
                lookups.Add(lookup);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'PaymentMandatoryRulePLCtgyPurp';
                lookup.Value = 'SPLT';
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'EU-DANSKEBANK-XML-NO')
        {
            str idNumber;
            str idType;

            WorkflowTrackingStatusTable     workflowTrackingStatus;
            WorkflowTrackingTable           workflowTrackingTable;
            WorkflowTrackingCommentTable    workflowTrackingCommentTable;
            UserInfo userInfo;
            HcmPersonIdentificationNumber   lHcmPersonIdentificationNumber;
            DirPerson   lDirPerson;
            int approvecount;

            while select firstFast RecId,CreatedDateTime, User from workflowTrackingTable
            order by workflowTrackingTable.CreatedDateTime,workflowTrackingTable.RecId asc
            join workflowTrackingCommentTable
            where workflowTrackingCommentTable.WorkflowTrackingTable == workflowTrackingTable.RecId
            join UserInfo where UserInfo.id == WorkflowTrackingTable.User
            exists join workflowTrackingStatus
            where workflowTrackingTable.WorkflowTrackingStatusTable ==  workflowTrackingStatus.RecId
                && workflowTrackingStatus.ContextRecId == LedgerJournalTable::find(LedgerJournalTrans::findByRef(curExt(),lSKS_EFT_FileDetail.PaymentLineRecId).JournalNum).RecId   //SKS#DevOps:15791
            && workflowTrackingTable.TrackingType == WorkflowTrackingType::Approval
            {
                lDirPerson = DirPerson::find(DirPersonUser::find(userInfo.id).PersonParty);
                boolean first = true;

                while select lHcmPersonIdentificationNumber where lHcmPersonIdentificationNumber.Person == lDirPerson.RecId
                {
                    if(first && (HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId == 'SOSE' ||
                    HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId == 'NIDN'))
                    {
                        first = false;

                        approvecount++;
                        idNumber = lHcmPersonIdentificationNumber.IdentificationNumber;
                        idType = HcmIdentificationType::find(lHcmPersonIdentificationNumber.IdentificationType).IdentificationTypeId;

                        lookup = new EFT.DataContract_1_0.PaymentExtra();
                        lookup.Key = 'idNumber'+int2Str(approvecount);
                        lookup.Value = idNumber;
                        lookups.Add(lookup);

                        lookup = new EFT.DataContract_1_0.PaymentExtra();
                        lookup.Key = 'idType'+int2Str(approvecount);
                        lookup.Value = idType;
                        lookups.Add(lookup);
                    }
                }
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'idTypeCount';
            lookup.Value = int2Str(approvecount);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-CHASE-SD-SUA-CSV')
        {
            CompanyInfo     companyinfo;
            DataArea        dataarea;
            str             timezone, finaltimezone;
   
            companyinfo = CompanyInfo::find();

            select dataarea where dataarea.id == companyinfo.DataArea;
            timezone = strFmt('%1', dataarea.timeZone);
            finaltimezone = subStr(timezone,5,6);
            finaltimezone = strRem(finaltimezone, ':');

            if(finaltimezone)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'CompanyTimeZone';
                lookup.Value = finaltimezone;
                lookups.Add(lookup);
            }
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-SUNTRUSTBANK-TSV')
        {
            MarkupTrans       markuptrans;
            VendInvoiceJour   vendinvoicejour;

            select crossCompany  vendinvoicejour where
            vendinvoicejour.InvoiceId == lSKS_EFT_FileDetail.InvoiceNumber;

            select Value from markuptrans where markuptrans.TransRecId == vendinvoicejour.RecId &&
                                     markuptrans.TransTableId == vendinvoicejour.TableId &&
                                     markuptrans.MarkupCode == 'FREIGHT'  ;

           
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'MarkupTransValue';
            lookup.Value = num2str(markuptrans.Value,0,0,0,0);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-COMERICA-XML' || lSKS_EFT_FileDetail.FormatId == 'EU-BNP-SWIFT-MT100' || lSKS_EFT_FileDetail.FormatId == 'US-CNB-XML')
        {
            LedgerJournalTrans lLedgerJournalTrans;

            select firstonly ExchRate from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;
           
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'ExchRate';
            lookup.Value = num2str(lLedgerJournalTrans.ExchRate,0,2,1,0);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-BOA-CPPX-2015')
        {
            LedgerJournalTrans lLedgerJournalTrans;
            LogisticsLocation lLogisticsLocation;
            str mLocationID;

            if (lSKS_EFT_FileDetail.PaymentLineRecId != 0)
            {
                select RemittanceLocation from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;
                lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);

                mLocationID = lLogisticsLocation.LocationId;

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'LocationID';
                lookup.Value = mLocationID;
                lookups.Add(lookup);
            }
        }
        if(lSKS_EFT_FileDetail.FormatId == 'EU-BNP-SWIFT-MT100')
        {
            LedgerJournalTrans lLedgerJournalTrans;

            select firstonly ExchRate from lLedgerJournalTrans where lLedgerJournalTrans.RecId == lSKS_EFT_FileDetail.PaymentLineRecId;
           
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'SequenceNum';
            lookup.Value = num2str(lSKS_EFT_FileDetail.SequenceNum,0,0,0,0);
            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'BR-ITAUBANK-240')
        {
            LedgerJournalTransPayment_BR lLedgerJournalTransPayment_BR;

            select firstonly EPPaymentType_BR, EPPaymentWay_BR from lLedgerJournalTransPayment_BR where lLedgerJournalTransPayment_BR.RefRecId == lSKS_EFT_FileDetail.PaymentLineRecId;

            VendTable lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            BankAccountTable lBankAccountTable = BankAccountTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.BankAccountId);
            
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'CompanyPaymId';
            lookup.Value = lBankAccountTable.CompanyPaymId;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'EPPaymentTypeBR';
            lookup.Value = lLedgerJournalTransPayment_BR.EPPaymentType_BR;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'EPPaymentWayBR';
            lookup.Value = lLedgerJournalTransPayment_BR.EPPaymentWay_BR;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'EPCompanyDocumentBR';
            lookup.Value = lLedgerJournalTransPayment_BR.EPCompanyDocument_BR;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'CNPJCPFNumBR';
            lookup.Value = lVendTable.CNPJCPFNum_BR;
            lookups.Add(lookup);
        }

        if (gSKS_EFT_FileFormat.FormatGroup == 'UK-NATWEST-XML-AR' || gSKS_EFT_FileFormat.FormatGroup == 'UK-HSBC-XML-EU-AR' ||
            gSKS_EFT_FileFormat.FormatGroup == 'PT-MILLENNIUMBCP-XML-AR' ||
            gSKS_EFT_FileFormat.FormatGroup == 'IE-BANKIRELAND-XML-AR' ||
            gSKS_EFT_FileFormat.FormatGroup == 'IT-UNICREDIT-XML-AR')
            
        {
            LogisticsPostalAddress  postalAddress;
            LogisticsLocation       lLogisticsLocation;

            postalAddress = this.findPostalAddressLineByPartyLocationRole(CompanyInfo::current(), 'Previous Mandate Address');
            

            lLogisticsLocation = LogisticsLocation::find(postalAddress.Location);

            if(lLogisticsLocation.Description)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'DrctDbtTxNm';
                lookup.Value = lLogisticsLocation.Description;
                lookups.Add(lookup);
            }
        }

        if(gSKS_EFT_FileFormat.FormatGroup == 'US-CITICONNECT-XML')
        {
            VendTable lVendTable;
            DirPartyLocation dirPartyLocation;
            LogisticsElectronicAddress lLogisticsElectronicAddress;
            LogisticsElectronicAddressRole lLogisticsElectronicAddressRole;
            LogisticsLocationRole lLogisticsLocationRole;
            str telNo;
            str email;

            boolean telephonenumber = true;
            boolean emailvalue = true;

            lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

            while select Location from DirPartyLocation where dirPartyLocation.party == lVendTable.Party
                join lLogisticsElectronicAddress where lLogisticsElectronicAddress.Location == dirPartyLocation.Location
                    join LocationRole from lLogisticsElectronicAddressRole where lLogisticsElectronicAddressRole.ElectronicAddress == lLogisticsElectronicAddress.RecId
                                join Name from lLogisticsLocationRole
                                    where lLogisticsLocationRole.RecId == lLogisticsElectronicAddressRole.LocationRole && lLogisticsLocationRole.Name == 'SKGPaymentContact'
            {
                if (lLogisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone && telephonenumber)
                {
                    if (lLogisticsElectronicAddress.Locator)
                    {
                        telNo = lLogisticsElectronicAddress.Locator;
                        telephonenumber = false;
                    }
                }
                else if (lLogisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email && emailvalue)
                {
                    if (lLogisticsElectronicAddress.Locator)
                    {
                        email = lLogisticsElectronicAddress.Locator;
                        emailvalue = false;
                    }
                }
            }

            if(telNo)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'SKGPaymentContactPhone';
                lookup.Value = telNo;
                lookups.Add(lookup);
            }

            if(email)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'SKGPaymentContactEmail';
                lookup.Value = email;
                lookups.Add(lookup);
            }

            VendBankAccount     lVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            if(lVendBankAccount.BankAccountNameKana_JP)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'VendBankAccountNameKana_JP';
                lookup.Value = lVendBankAccount.BankAccountNameKana_JP;
                lookups.Add(lookup);
            }

            str acctType;

            switch (lVendBankAccount.TransType_JP)
            {
                case VendBankTransType_JP::Checking:
                    acctType = 'TO';
                    break;
                case VendBankTransType_JP::OrdinarySavings:
                    acctType = 'FU';
                    break;
                case VendBankTransType_JP::Others:
                    acctType = 'SO';
                    break;
                case VendBankTransType_JP::Savings:
                    acctType = 'TI';
                    break;
            }


            if(acctType)
            {
                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'VendBankTransType_JP';
                lookup.Value = acctType;
                lookups.Add(lookup);
            }

            PeriodStart start;       //SKSDevOps:15853
            PeriodEnd End;

            start = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::find().RecId), systemDateGet()).StartDate;
            End = FiscalCalendarYear::findYearByCalendarDate(Ledger::fiscalCalendar(CompanyInfo::find().RecId), systemDateGet()).enddate;

            
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PeriodStart';
            if(lSKS_EFT_FileDetail.TransactionCode == 'TAX-908')
            {
                lookup.Value = int2str(year(start)) + '-' + subStr(int2str(year(End)),3,4);
            }
            else
            {
                lookup.Value = SKS_PP_StringFormats::strDateYYYYMMDD(start, DateSeparator::Hyphen);
            }

            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PeriodEnd';
            if(lSKS_EFT_FileDetail.TransactionCode == 'TAX-908')
            {
                lookup.Value = int2str(year(start)) + '-' + subStr(int2str(year(End)),3,4);
            }
            else
            {
                lookup.Value = SKS_PP_StringFormats::strDateYYYYMMDD(End, DateSeparator::Hyphen);
            }

            lookups.Add(lookup);


        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-CITICONNECT-WL-XML-IN')
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PurpCodeDescription';

            lookup.Value = this.getCodelookupDescription('PurpCode', gSKS_EFT_FileFormatPaymSpec);

            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-CITICONNECT-WL-XML-PK')
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'PurpOfPmtPKDescription';

            lookup.Value = this.getCodelookupDescription('PurpOfPmtPK', gSKS_EFT_FileFormatPaymSpec);

            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'RelationPKDescription';

            lookup.Value = this.getCodelookupDescription('RelationPK', gSKS_EFT_FileFormatPaymSpec);

            lookups.Add(lookup);
        }

        if(lSKS_EFT_FileDetail.FormatId == 'US-CITICONNECT-WL-XML-US' || lSKS_EFT_FileDetail.FormatId == 'US-CITICONNECT-WL-XML-CA')
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'APEMReplyToAddr';

            lookup.Value = SKS_EFT_Setup::find().APEMReplyToAddr;

            lookups.Add(lookup);
        }

        if(gSKS_EFT_FileFormat.FormatGroup == 'US-BOA-XML')
        {
            VendBankAccount mVendBankAccount = VendBankAccount::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum, lSKS_EFT_FileDetail.DepBankAccountId);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'VendBankAccount_Phone';
            lookup.Value = mVendBankAccount.Phone;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'VendBankAccount_ContactPerson';
            lookup.Value = mVendBankAccount.ContactPerson;
            lookups.Add(lookup);

            DirPartyLocation dirPartyLocation;
            LogisticsElectronicAddress lLogisticsElectronicAddress;
            LogisticsElectronicAddressRole lLogisticsElectronicAddressRole;
            LogisticsLocationRole lLogisticsLocationRole;
            VendTable lVendTable;
            str contactName, contactPhone;

            lVendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);  //SKSDevOps:17662

            while select Location from DirPartyLocation where dirPartyLocation.party == lVendTable.Party
                    join lLogisticsElectronicAddress where lLogisticsElectronicAddress.Location == dirPartyLocation.Location
                        join LocationRole from lLogisticsElectronicAddressRole where lLogisticsElectronicAddressRole.ElectronicAddress == lLogisticsElectronicAddress.RecId
                                          join Name from lLogisticsLocationRole
                                              where lLogisticsLocationRole.RecId == lLogisticsElectronicAddressRole.LocationRole && lLogisticsLocationRole.Name == 'SKGPaymentContact'
            {
                if (LogisticsElectronicAddressMethodType::Phone)
                {
                    if (lLogisticsElectronicAddress.Locator)
                    {
                        contactPhone = lLogisticsElectronicAddress.Locator;
                    }
                }

                contactName = lLogisticsElectronicAddress.Description;
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'SKGPaymentContact_Name';
            lookup.Value = contactName;
            lookups.Add(lookup);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'SKGPaymentContact_Phone';
            lookup.Value = contactPhone;
            lookups.Add(lookup);

            //Customization

            SKS_PP_Setup locSKS_PP_Setup;

            select * from locSKS_PP_Setup;

            if(locSKS_PP_Setup.RegCustomerID == 'FreshPet')
            {
                VendTable  locvendTable;

                locvendTable = VendTable::findByCompany(lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum);

                lookup = new EFT.DataContract_1_0.PaymentExtra();
                lookup.Key = 'Cdtr_Nm_Extension';
                lookup.Value = DirPartyTable::getName(locvendTable.Party);
                lookups.Add(lookup);
            }
        }


        this.payment_Extras_Extension(lookups);
        // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
        System.Object asObject = lookups;
        payment.Payment_Extras = asObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodelookupDescription</Name>
				<Source><![CDATA[
    private str getCodelookupDescription(SKS_EB_CodeId _FormatFieldID, SKS_EFT_FileFormatPaymSpec _SKS_EFT_FileFormatPaymSpec)
    {
        SKS_EFT_FileFormatPaymSpecFields lSKS_EFT_FileFormatPaymSpecFields;
        SKS_EB_CodeLookupValues lSKS_EB_CodeLookupValues;
        SKS_EFT_VendorPaymLookup lSKS_EFT_VendorPaymLookup;
        SKS_EFT_VendorPaym lSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::findbycompany(lSKS_EFT_FileDetail.PaymentCompany ? lSKS_EFT_FileDetail.PaymentCompany :
                                    lSKS_EFT_FileDetail.DataAreaId, lSKS_EFT_FileDetail.AccountCompany, lSKS_EFT_FileDetail.AccountNum,
                                    lSKS_EFT_FileDetail.PaymMode, lSKS_EFT_FileDetail.PaymSpec, lSKS_EFT_FileDetail.DepBankAccountId);
        str ret = '';
    
        select FileFormatPaymSpecRecId, FormatFieldID, RecId, FieldType, FixedValue from lSKS_EFT_FileFormatPaymSpecFields
                                                                                   where lSKS_EFT_FileFormatPaymSpecFields.FileFormatPaymSpecRecId == _SKS_EFT_FileFormatPaymSpec.RecId &&
                                                                                         lSKS_EFT_FileFormatPaymSpecFields.FormatFieldID == _FormatFieldID join CodeLookupValuesRecId, FixedValue, FileFormatPaymSpecFieldsRecId
                                                                                    from lSKS_EFT_VendorPaymLookup
                                                                                   where lSKS_EFT_VendorPaymLookup.FileFormatPaymSpecFieldsRecId == lSKS_EFT_FileFormatPaymSpecFields.RecId
                                                                                      && lSKS_EFT_VendorPaymLookup.VendorPaymRecId == lSKS_EFT_VendorPaym.RecId;

        if(lSKS_EFT_FileFormatPaymSpecFields.FieldType == SKS_EFT_CodeFieldType::CodeLookup)
        {
            select DisplayValue, RecId from lSKS_EB_CodeLookupValues where lSKS_EB_CodeLookupValues.RecId == lSKS_EFT_VendorPaymLookup.CodeLookupValuesRecId;
            ret =  lSKS_EB_CodeLookupValues.DisplayValue;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressLineByPartyLocationRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds postal address by party location role
    /// </summary>
    /// <param name = "_party">Party record Id</param>
    /// <param name = "_roleName">Logistics location role name</param>
    /// <returns>Returns a postal address</returns>
    protected LogisticsPostalAddress findPostalAddressLineByPartyLocationRole(
                DirPartyRecId   _party,
                LogisticsLocationRoleName   _roleName)
    {
        DirPartyLocation        partyLocation;
        LogisticsLocation       logisticsLocation;
        LogisticsPostalAddress  postalAddress;
    
        while select partyLocation
            where partyLocation.Party == _party
        {
            if(strScan(partyLocation.locationRoleNames(),_roleName,1,strLen(partyLocation.locationRoleNames())))
            {
                logisticsLocation = logisticsLocation::find(partyLocation.Location);
                if(logisticsLocation.IsPostalAddress)
                {
                    postalAddress = LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
                    break;
                }
            }
        }
    
        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>file_Extras</Name>
				<Source><![CDATA[
   /// <summary>
    /// File extra key value pairs
    /// </summary>
    protected void file_Extras()
    {
        Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups = new Generic.List<EFT.DataContract_1_0.PaymentExtra>();
        EFT.DataContract_1_0.PaymentExtra lookup;

        //File level
        lookup = new EFT.DataContract_1_0.PaymentExtra();
        lookup.Key = 'FileName';
        lookup.Value = gSKS_EFT_File.FileName;
        lookups.Add(lookup);

        if(gSKS_EFT_File.FormatId == 'BF-CORISBANK-DSV')
        {
            LedgerJournalTable lLedgerJournalTable;
            SKS_EFT_FileDetail locSKS_EFT_FileDetail;

            select firstonly locSKS_EFT_FileDetail where locSKS_EFT_FileDetail.fileRecId == gSKS_EFT_File.RecId;

            //Change company -
            changecompany(locSKS_EFT_FileDetail.PaymentCompany)
            {
                select firstonly Name from lLedgerJournalTable where
                    lLedgerJournalTable.JournalNum == locSKS_EFT_FileDetail.PaymentJournalNum;
            }

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'JournalName';
            lookup.Value = lLedgerJournalTable.Name;
            lookups.Add(lookup);
        }

        if(gSKS_EFT_File.FormatId == 'CO-BANCOLOMBIA-ACH-95')
        {
            int64 seqCnt;
            SKS_EFTAP_File lSKS_EFTAP_File;

            select count(RecId) from lSKS_EFTAP_File where lSKS_EFTAP_File.EffectiveDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) &&
                                    lSKS_EFTAP_File.FormatId == 'CO-BANCOLOMBIA-ACH-95';

            seqCnt = any2Int(lSKS_EFTAP_File.RecId);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'FileSequenceCountACH95';
            lookup.Value = num2Str(seqCnt, 0,0,0,0);
            lookups.Add(lookup);
        }
        if(gSKS_EFT_File.FormatId == 'CO-BANCOLOMBIA-PMT-95')
        {
            int64 seqCnt;
            SKS_EFTAP_File lSKS_EFTAP_File;

            select count(RecId) from lSKS_EFTAP_File where lSKS_EFTAP_File.EffectiveDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) &&
                                    lSKS_EFTAP_File.FormatId == 'CO-BANCOLOMBIA-PMT-95';

            seqCnt = any2Int(lSKS_EFTAP_File.RecId);

            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = 'FileSequenceCountPMT95';
            lookup.Value = num2Str(seqCnt, 0,0,0,0);
            lookups.Add(lookup);
        }

        // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
        System.Object asObject = lookups;
        paymentFile.File_Extras = asObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>directDebitInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Direct Debit Info
    /// </summary>
    protected void directDebitInfo()
    {
        EFT.DataContract_1_0.PaymentDirectDebitInfo directDebitInfo = new EFT.DataContract_1_0.PaymentDirectDebitInfo();
        directDebitInfo.DirectDebitId = gSKS_EFT_FileDetail_Mandate.DirectDebitId;
        directDebitInfo.MandateReference = gSKS_EFT_FileDetail_Mandate.MandateReference;
        directDebitInfo.MandateScheme = this.getMandateScheme(gSKS_EFT_FileDetail_Mandate.MandateScheme);
        directDebitInfo.MandatePaymentType = gSKS_EFT_FileDetail_Mandate.MandatePaymentType;
        directDebitInfo.MandateSequenceType = gSKS_EFT_FileDetail_Mandate.MandateSequenceType;
        directDebitInfo.MandateSignatureDate = CLRSystemDateTime2UtcDateTime(DateTimeUtil::newDateTime(gSKS_EFT_FileDetail_Mandate.SignatureDate,0));

        payment.DirectDebitInfo = directDebitInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMandateScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Bank account type
    /// </summary>
    /// <param name = "_mandateScheme">Mandate scheme</param>
    /// <returns>An object for Mandate scheme</returns>
    protected EFT.DataContract_1_0.DirectDebitMandateScheme getMandateScheme(CustMandateScheme _mandateScheme)
    {
        EFT.DataContract_1_0.BankAccountTypes retVal;

        switch(_mandateScheme)
        {
            case CustMandateScheme::B2B:
                retVal = EFT.DataContract_1_0.DirectDebitMandateScheme::B2B;
                break;
            case CustMandateScheme::CORE:
                retVal = EFT.DataContract_1_0.DirectDebitMandateScheme::Core;
                break;
            case CustMandateScheme::COR1:
                retVal = EFT.DataContract_1_0.DirectDebitMandateScheme::COR1;
                break;
        }

        return retVal;

    }

]]></Source>
			</Method>
			<Method>
				<Name>codeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Code lookup
    /// </summary>
    protected void codeLookup()
    {
        Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups = new Generic.List<EFT.DataContract_1_0.PaymentExtra>();
        EFT.DataContract_1_0.PaymentExtra lookup;

        SKS_EFT_FileDetail_Extra lSKS_EFT_FileDetail_Extra;
        while select lSKS_EFT_FileDetail_Extra where lSKS_EFT_FileDetail_Extra.RefRecId == lSKS_EFT_FileDetail.RecId && lSKS_EFT_FileDetail_Extra.CodeLookupType == SKS_EFT_CodeLookupType::CodeLookup
        {
            lookup = new EFT.DataContract_1_0.PaymentExtra();
            lookup.Key = lSKS_EFT_FileDetail_Extra.FieldName;
            lookup.Value = lSKS_EFT_FileDetail_Extra.Value;
            lookups.Add(lookup);
        }

        this.codeLookup_Extension(lookups);

        // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
        System.Object asObject = lookups;
        payment.CodeLookups = asObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invoice fields
    /// </summary>
    /// <param name = "_invSKS_EFT_FileDetail">File detail</param>
    /// <returns>Payment invoice</returns>
    protected EFT.DataContract_1_0.PaymentInvoice setInvoiceFields(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        EFT.DataContract_1_0.PaymentInvoice invoice = new EFT.DataContract_1_0.PaymentInvoice();
        EFT.DataContract_1_0.PaymentInvoiceXOther invoicexOther = new EFT.DataContract_1_0.PaymentInvoiceXOther();
        VendInvoiceJour     vendInvoiceJour;
        CustTransOpen       lCustTransOpen;
        VendTransOpen       lVendTransOpen;
        invoice.CurrencyCode = _invSKS_EFT_FileDetail.InvoiceCurrencyCode;

        int multiplier = 1;
        if(_invSKS_EFT_FileDetail.Module == SKS_EFT_Module::AP || _invSKS_EFT_FileDetail.Module == SKS_EFT_Module::CNP
            || (_invSKS_EFT_FileDetail.Module == SKS_EFT_Module::BTB && gSKS_EFT_File.TransferDirection == SKS_BTB_TransferType::Transfer_out))
        {
            multiplier = -1;
        }
        invoice.DiscountAmountPmtCur = _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * multiplier;
        invoice.InvoiceDate = CLRSystemDateTime2UtcDateTime(DateTimeUtil::newDateTime(_invSKS_EFT_FileDetail.InvoiceDate,0));
        invoice.InvoiceDescription = _invSKS_EFT_FileDetail.InvoiceTransactionTxt;
        invoice.InvoiceNumber = _invSKS_EFT_FileDetail.InvoiceNumber;
        invoice.PaymentId = _invSKS_EFT_FileDetail.PaymId;
        invoice.PONumber = _invSKS_EFT_FileDetail.PurchId;
        invoice.SettleAmountInvCur = _invSKS_EFT_FileDetail.InvoiceSettleAmountCur * multiplier;
        invoice.SettleAmountPmtCur = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * multiplier;


        if(paymentFile.Module == EFT.DataContract_1_0.Module::AccountsPayable)
        {
            if(_invSKS_EFT_FileDetail.InvoiceNumber)
            {
                vendInvoiceJour.clear();

                changecompany(_invSKS_EFT_FileDetail.InvoiceCompany)
                {
                    select firstOnly SumTax from  vendInvoiceJour
                        where vendInvoiceJour.InvoiceAccount    ==  _invSKS_EFT_FileDetail.AccountNum &&
                        vendInvoiceJour.InvoiceDate      ==  _invSKS_EFT_FileDetail.InvoiceDate &&
                        vendInvoiceJour.InvoiceId         ==  _invSKS_EFT_FileDetail.InvoiceNumber;

                    if(!vendInvoiceJour)
                    {
                        select firstOnly SumTax from  vendInvoiceJour
                            where vendInvoiceJour.InvoiceAccount    ==  _invSKS_EFT_FileDetail.AccountNum &&
                            vendInvoiceJour.DocumentDate            ==  _invSKS_EFT_FileDetail.InvoiceDate &&
                            vendInvoiceJour.InvoiceId               ==  _invSKS_EFT_FileDetail.InvoiceNumber;
                    }
                }

                invoicexOther.VATAmount = vendInvoiceJour.SumTax;
            }

            select crossCompany DueDate from lVendTransOpen
                where lVendTransOpen.RefRecId == _invSKS_EFT_FileDetail.VendTransRecId;

            if(lVendTransOpen)
            {
                invoicexOther.InvoiceDueDate = CLRSystemDateTime2UtcDateTime(DateTimeUtil::newDateTime(lVendTransOpen.DueDate,0));
            }
        }
        else
        {
            select crossCompany DueDate from lCustTransOpen
                where lCustTransOpen.RefRecId == _invSKS_EFT_FileDetail.VendTransRecId;

            if(lCustTransOpen)
            {
                invoicexOther.InvoiceDueDate = CLRSystemDateTime2UtcDateTime(DateTimeUtil::newDateTime(lCustTransOpen.DueDate,0));
            }
        }
        
        invoice.XOther = invoicexOther;

        this.setInvoiceFields_Extesnion(_invSKS_EFT_FileDetail, invoice);

        return invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditor_Extension</Name>
				<Source><![CDATA[
    protected void creditor_Extension(EFT.DataContract_1_0.PaymentCreditor creditor)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditorxother_Extension</Name>
				<Source><![CDATA[
    protected void creditorxother_Extension(Generic.List<EFT.DataContract_1_0.PaymentEmailAddress> PaymentEmailAddresses)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditorAgent_Extension</Name>
				<Source><![CDATA[
    protected void creditorAgent_Extension(EFT.DataContract_1_0.PaymentCreditorAgent creditorAgent)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment_Extras_Extension</Name>
				<Source><![CDATA[
    protected void payment_Extras_Extension(Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>file_Extras_Extension</Name>
				<Source><![CDATA[
    protected void file_Extras_Extension(Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>codeLookup_Extension</Name>
				<Source><![CDATA[
    protected void codeLookup_Extension(Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtor_Extension</Name>
				<Source><![CDATA[
    protected void debtor_Extension(EFT.DataContract_1_0.PaymentDebtor debtor)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtorAgent_Extension</Name>
				<Source><![CDATA[
    protected void debtorAgent_Extension(EFT.DataContract_1_0.PaymentDebtorAgent debtorAgent)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInvoiceFields_Extesnion</Name>
				<Source><![CDATA[
    protected void setInvoiceFields_Extesnion(SKS_EFT_FileDetail _invSKS_EFT_FileDetail, EFT.DataContract_1_0.PaymentInvoice invoice)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoice_Extras_Extension</Name>
				<Source><![CDATA[
    protected void invoice_Extras_Extension(SKS_EFT_FileDetail _invSKS_EFT_FileDetail, Generic.List<EFT.DataContract_1_0.PaymentExtra> lookups)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>