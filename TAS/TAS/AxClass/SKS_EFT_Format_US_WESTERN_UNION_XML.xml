<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_WESTERN_UNION_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_WESTERN_UNION_XML extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_WESTERN_UNION_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20220608')
    XmlElement          nodeRoot;
    XmlDocument         xmlDoc;    
    XmlElement          nodePayments;
    XmlElement          nodeRemittance;
    SKS_EFT_FileDetail invSKS_EFT_FileDetail;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    { 
        //Initialize XML
        xmlDoc = XmlDocument::newBlank();

        this.node_MessageRoot();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Get Remittance information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
                        
            //      <PmtInfo>
            this.node_Payments();       
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.node_RemitInfo(nodeRemittance, invSKS_EFT_FileDetail);
            }            

            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()
    {
        nodeRoot = xmldoc.appendChild(xmlDoc.createElement3('ns0', 'TPDocXML', 'http://EAI'));
            
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'Version', '1.0');
    
        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'FileID', subStr(mSKS_EFT_File.FileNbr, 1, 50));        
        
        nodePayments = nodeRoot.appendChild(xmlDoc.createElement('Payments'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Payments</Name>
				<Source><![CDATA[
    private void node_Payments()
    {         
        XmlElement nodePayment;
        XmlElement nodePayTo;
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        str PTPayeeID;

        nodePayment = nodePayments.appendChild(xmlDoc.createElement('Payment'));
        
        SKS_EFT_Format::xmlsetAttributeText(nodePayment, 'PaymentID', subStr(mSKS_EFT_FileDetail.PaymentReference, 1, 50));

        nodePayTo = nodePayment.appendChild(xmlDoc.createElement('PayTo'));

        select firstonly RemittanceLocation from lLedgerJournalTrans
                where lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);

        PTPayeeID = SKS_EFT_Format::getCodelookupvalue('PTPayeeIDOption', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        if(PTPayeeID && VendTable::find(PTPayeeID).RecId)//SKS_VSTS_13601
        {

            SKS_EFT_Format::xmlsetAttributeText(nodePayTo, 'PTPayeeID', subStr(mSKS_EFT_FileDetail.AccountNum, 1, 50));
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodePayTo, 'PTPayeeID', subStr(mSKS_EFT_FileDetail.AccountNum + this.CharacterReplacement(lLogisticsLocation.Description), 1, 50));
        }

        SKS_EFT_Format::xmlsetAttributeText(nodePayTo, 'PTPayeeName', subStr(this.CharacterReplacement(mRemittanceName), 1, 50));

        SKS_EFT_Format::xmlsetAttributeText(nodePayTo, 'PTAmount', num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 0, 2, 1, 0));
        
        nodeRemittance = nodePayment.appendChild(xmlDoc.createElement('Remittance'));

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittance, 'Type', 'XML');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo</Name>
				<Source><![CDATA[
    private void node_RemitInfo(XmlElement _nodePayment, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        XmlElement nodeRemittanceRecord;
        str purchOrderNum;
        
        nodeRemittanceRecord = nodeRemittance.appendChild(xmlDoc.createElement('RemittanceRecord'));

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'PayerDocumentDate', SKS_PP_StringFormats::strDateMMDDYY(invSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Slash));

        purchOrderNum = this.get_POInfo(_invSKS_EFT_FileDetail);

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'PayerDocumentType', 'PO');

        if(purchOrderNum)
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'PayerDocumentNumber', subStr(purchOrderNum, 1, 50));
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'PayerDocumentNumber', 'NO MATCH');
        }

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'PayeeDocumentDate', SKS_PP_StringFormats::strDateMMDDYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash));

        if(invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)//SKS_VSTS_14359
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'PayeeDocumentType', 'CM');
        }
        else
        {
            SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'PayeeDocumentType', 'IV');
        }

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'PayeeDocumentNumber', subStr(invSKS_EFT_FileDetail.InvoiceNumber, 1, 50));

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'AmountInPayeeDocument', num2str((invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1, 0, 2, 0, 0));

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'AmountPaid', num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'AdjustmentAmount', num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1,0,2,0,0));

        SKS_EFT_Format::xmlsetAttributeText(nodeRemittanceRecord, 'AdjustmentReason', 'DISCOUNT');
    }

]]></Source>
			</Method>
			<Method>
				<Name>get_POInfo</Name>
				<Source><![CDATA[
    private str get_POInfo(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        VendInvoiceJour vendInvoiceJour;
        Container companyInfo;
        str PONum = '';
        ;

        companyInfo += _invSKS_EFT_FileDetail.InvoiceCompany;

        // See if PO exists
        if(conPeek(companyInfo, 1) != '')
        {
            select firstOnly crossCompany:companyInfo PurchId, InvoiceAccount, InvoiceDate, InvoiceId from vendInvoiceJour where
            vendInvoiceJour.InvoiceAccount == _invSKS_EFT_FileDetail.AccountNum &&
            vendInvoiceJour.InvoiceDate == _invSKS_EFT_FileDetail.InvoiceDate &&
            vendInvoiceJour.InvoiceId == _invSKS_EFT_FileDetail.InvoiceNumber &&
            vendInvoiceJour.PurchId != '';

            if(vendInvoiceJour)
            {
                PONum = vendInvoiceJour.PurchId;
            }
        }
        return PONum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>