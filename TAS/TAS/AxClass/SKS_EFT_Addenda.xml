<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Addenda</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EFT_Addenda
{
    SKS_EFT_FileFormatPaymSpec  mSKS_EFT_FileFormatPaymSpec;
    SKS_EFT_AddendaFormats      mSKS_EFT_AddendaFormats;
    SKS_EFTAP_File              mSKS_EFT_File;
    SKS_EFT_FileDetail          mSKS_EFT_FileDetail;
    //FDd-10590 --->
    SKS_EFT_FileDetail_AddendaHeader        msks_eft_FileDetail_AddendaHeader;
    SKS_EFT_FileDetail_AddendaDetailConfig  mSKS_EFT_FileDetail_AddendaDetailConfig;
    SKS_EFT_FileDetail_AddendaCustom        mSKS_EFT_FileDetail_AddendaCustom;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>AddendaValues</Name>
				<Source><![CDATA[
    //<--- FDd-10590
    private str AddendaValues()
    {
        str value;
        int pmtCuryPrec;
        int invCuryPrec;
        ;
    
        switch (mSKS_EFT_FileDetail_AddendaDetailConfig.Valuetype)
        {
            case SKS_EFT_AddendaValueType::Cus1:
                value = mSKS_EFT_FileDetail_AddendaCustom.CustomStr1;
                break;
            case SKS_EFT_AddendaValueType::Cus2:
                value = mSKS_EFT_FileDetail_AddendaCustom.CustomStr2;
                break;
            case SKS_EFT_AddendaValueType::Cus3:
                value = mSKS_EFT_FileDetail_AddendaCustom.CustomStr3;
                break;
            case SKS_EFT_AddendaValueType::Cus4:
                value = mSKS_EFT_FileDetail_AddendaCustom.CustomStr4;
                break;
            case SKS_EFT_AddendaValueType::CusAmt1:
                invCuryPrec = SKS_EB_Currency::getCurrencyPrecision(mSKS_EFT_FileDetail.InvoiceCurrencyCode);
                value = this.formatAmount(mSKS_EFT_FileDetail_AddendaCustom.CustomAmt1, false, invCuryPrec);
                break;
            case SKS_EFT_AddendaValueType::CusAmt2:
                invCuryPrec = SKS_EB_Currency::getCurrencyPrecision(mSKS_EFT_FileDetail.InvoiceCurrencyCode);
                value = this.formatAmount(mSKS_EFT_FileDetail_AddendaCustom.CustomAmt2, false, invCuryPrec);
                break;
            case SKS_EFT_AddendaValueType::CusAmt3:
                invCuryPrec = SKS_EB_Currency::getCurrencyPrecision(mSKS_EFT_FileDetail.InvoiceCurrencyCode);
                value = this.formatAmount(mSKS_EFT_FileDetail_AddendaCustom.CustomAmt3, false, invCuryPrec);
                break;
            case SKS_EFT_AddendaValueType::CusAmt4:
                invCuryPrec = SKS_EB_Currency::getCurrencyPrecision(mSKS_EFT_FileDetail.InvoiceCurrencyCode);
                value = this.formatAmount(mSKS_EFT_FileDetail_AddendaCustom.CustomAmt4, false, invCuryPrec);
                break;
            case SKS_EFT_AddendaValueType::CusDate1:
                value = this.formatDate(mSKS_EFT_FileDetail_AddendaCustom.CustomDate1);
                break;
            case SKS_EFT_AddendaValueType::CusDate2:
                value = this.formatDate(mSKS_EFT_FileDetail_AddendaCustom.CustomDate2);
                break;
            case SKS_EFT_AddendaValueType::EffectiveDate:
                value = this.formatDate(mSKS_EFT_File.EffectiveDate);
                break;
            case SKS_EFT_AddendaValueType::FedTaxInv:
                value = this.getFederalTaxid(mSKS_EFT_FileDetail.InvoiceCompany);
                break;
            case SKS_EFT_AddendaValueType::FedTaxPaym:
                value = this.getFederalTaxid(mSKS_EFT_FileDetail.PaymentCompany);
                break;
            case SKS_EFT_AddendaValueType::Fixed:
                value = mSKS_EFT_FileDetail_AddendaDetailConfig.FixedValue;
                break;
            case SKS_EFT_AddendaValueType::FixedMM:
                value = this.FormatFixedMM();
                break;
            case SKS_EFT_AddendaValueType::InvoiceAmt:
                invCuryPrec = SKS_EB_Currency::getCurrencyPrecision(mSKS_EFT_FileDetail.InvoiceCurrencyCode);
                value = this.formatAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountCur, true, invCuryPrec);
                break;
            case SKS_EFT_AddendaValueType::InvoiceAmtPmtCur:
                pmtCuryPrec = SKS_EB_Currency::getCurrencyPrecision(mSKS_EFT_FileDetail.PaymentCurrencyCode);
                value = this.formatAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, true, pmtCuryPrec);
                break;
            case SKS_EFT_AddendaValueType::InvoiceOrCredit: //FDD-10590 --->
                if(mSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
                {
                    value = 'CM';
                }
                else
                {
                    value = 'IV';
                }
                break; // <--- FDD-10590
            case SKS_EFT_AddendaValueType::InvoiceDate:
                value = this.formatDate(mSKS_EFT_FileDetail.InvoiceDate);
                break;
            case SKS_EFT_AddendaValueType::InvoiceNum:
                value = mSKS_EFT_FileDetail.InvoiceNumber;
                break;
            case SKS_EFT_AddendaValueType::InvoiceTxt:
                value = mSKS_EFT_FileDetail.InvoiceTransactionTxt;
                break;
            case SKS_EFT_AddendaValueType::TaxRegInv:
                value = this.getTaxRegistration(mSKS_EFT_FileDetail.InvoiceCompany);
                break;
            case SKS_EFT_AddendaValueType::TaxRegPaym:
                value = this.getTaxRegistration();
                break;
            case SKS_EFT_AddendaValueType::VendPaymId:
                value = this.getVendPaymID(mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.AccountCompany);
                break;
            case SKS_EFT_AddendaValueType::InvoiceOrigAmt:
                invCuryPrec = SKS_EB_Currency::getCurrencyPrecision(mSKS_EFT_FileDetail.InvoiceCurrencyCode);
                value = this.formatAmount(mSKS_EFT_FileDetail.InvoiceOrigAmountCur, true, invCuryPrec);
                break;
            default: //Not Used or Blank
                value = '';
                break;
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAddenda</Name>
				<Source><![CDATA[
    public str buildAddenda()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str addenda;
    
        this.getSKS_EFT_AddendaData();

        select mSKS_EFT_FileDetail_AddendaDetailConfig order by mSKS_EFT_FileDetail_AddendaDetailConfig.FieldNumber
            where mSKS_EFT_FileDetail_AddendaDetailConfig.AddendaCodeID == mSKS_EFT_FileFormatPaymSpec.AddendaCodeID
               && mSKS_EFT_FileDetail_AddendaDetailConfig.RefRecId == mSKS_EFT_FileDetail.RecId; 

        while(mSKS_EFT_FileDetail_AddendaDetailConfig) //FDD-10590
        {
            if(this.CustomAddendaValues())
            {
                sb.Append(this.formatStrData(this.CustomAddendaValues()));
            }
            else
            {
                sb.Append(this.formatStrData(this.AddendaValues()));
            }

            next mSKS_EFT_FileDetail_AddendaDetailConfig;
            if(mSKS_EFT_FileDetail_AddendaDetailConfig)
            {
                if(mSKS_EFT_FileDetail_AddendaDetailConfig.ValueType != SKS_EFT_AddendaValueType::NotUsed) //FDD-10590
                {
                    sb.Append('*');
                }
            }
            else
            {
                sb.Append('\\');
            }
        }
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAmount</Name>
				<Source><![CDATA[
    private str formatAmount(AmountCur _value, boolean flipSign, int curyPrec)
    {
        AmountCur value;
        str ret;
        ;
    
        value = _value;

        if(value)
        {
            if(flipSign)
            {
                value = -1 * value;
            }
            if(mSKS_EFT_FileDetail_AddendaDetailConfig.IncludeDecimal)
            {
                ret = num2str(value,0,curyPrec,0,0);
            }
            else
            {
                ret = strRem(num2str(value, 0, 2, 1, 0), '.');
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDate</Name>
				<Source><![CDATA[
    private str formatDate(date _date)
    {
        str ret;
    
        if(mSKS_EFT_FileDetail_AddendaDetailConfig.DateFormat == SKS_EFT_DateFormat::DateYYMMDD)
        {
            ret = SKS_PP_StringFormats::strDateYYMMDD(_date);
        }
        else
        {
            ret = SKS_PP_StringFormats::strDateYYYYMMDD(_date);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatFixedMM</Name>
				<Source><![CDATA[
    private str FormatFixedMM()
    {
        str ret;
        ;
        ret = int2str(mthOfYr(mSKS_EFT_FileDetail.PaymentTransDate));
    
        if(strLen(ret) < 2)
        {
            ret = SKS_PP_StringFormats::strFill(2, ret, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
    
        ret = strReplace(mSKS_EFT_FileDetail_AddendaDetailConfig.FixedValue, 'MM', ret);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStrData</Name>
				<Source><![CDATA[
    private str formatStrData(str _value)
    {
        str value;
        //Pad field
        value = _value;

        if(mSKS_EFT_FileDetail_AddendaDetailConfig.MaxLength > 0)
        {
            value = subStr(value, 1, mSKS_EFT_FileDetail_AddendaDetailConfig.MaxLength);
        }
    
        if(mSKS_EFT_FileDetail_AddendaDetailConfig.PadField == NoYes::Yes)
        {
            value = SKS_PP_StringFormats::strFill(mSKS_EFT_FileDetail_AddendaDetailConfig.MaxLength, value, mSKS_EFT_FileDetail_AddendaDetailConfig.PadCharacter, mSKS_EFT_FileDetail_AddendaDetailConfig.PadSide);
        }
    
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFederalTaxid</Name>
				<Source><![CDATA[
    private str getFederalTaxid(SelectableDataArea _company = curext())
    {
        //CompanyInfo     lCompanyInfo;
        str ret;
        ;
        if(_company == '')
        {
            _company = curext();
        }
        ret = mSKS_EFT_FileDetail.Tax1099RegNum; //FDD-10590
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_AddendaData</Name>
				<Source><![CDATA[
    // Load or refresh global mSKS_EFT_AddendaData
    private void getSKS_EFT_AddendaData()
    {
        //SelectableDataArea lCompany;
        //LedgerJournalTrans locForeignLedgerJournalTrans;
        ;
    
        /*if(mSKS_EFT_FileDetail.InvoiceCompany == '')
        {
            lCompany = curext();
        }
        else
        {
            lCompany = mSKS_EFT_FileDetail.InvoiceCompany;
        }
    
        mLedgerJournalTrans = null;
        changeCompany(lCompany)
        {
            select mLedgerJournalTrans where mLedgerJournalTrans.VendTransId == mSKS_EFT_FileDetail.VendTransRecId;
            //in the envent of intercompany transactions, the needed ledgerjournaltrans is in a foreign company
            //the following IF retrieves the needed ledgerjournaltrans.
            if(mLedgerJournalTrans.ForeignVoucher && mLedgerJournalTrans.ForeignCompany)
            {
                changeCompany(mLedgerJournalTrans.ForeignCompany)
                {
                    select firstOnly locForeignLedgerJournalTrans
                        where locForeignLedgerJournalTrans.Voucher == mLedgerJournalTrans.ForeignVoucher
                            && locForeignLedgerJournalTrans.Invoice == mLedgerJournalTrans.Invoice
                            && locForeignLedgerJournalTrans.AmountCurCredit == mLedgerJournalTrans.AmountCurCredit
                            && locForeignLedgerJournalTrans.AmountCurDebit == mLedgerJournalTrans.AmountCurDebit
                            && locForeignLedgerJournalTrans.TransDate == mLedgerJournalTrans.TransDate
                            && locForeignLedgerJournalTrans.LedgerDimension == mLedgerJournalTrans.LedgerDimension;
                }
                mLedgerJournalTrans = null;
                mLedgerJournalTrans = locForeignLedgerJournalTrans;
             }
    
            //mSKS_EFT_AddendaData = null; //8675 -- because SKS_EFT_AddendaData could be from any company it needs nulled every time.
            mSKS_EFT_FileDetail_AddendaCustom = null;
            if(mLedgerJournalTrans)
            {
                //mSKS_EFT_AddendaData = SKS_EFT_AddendaData::find(mLedgerJournalTrans.RecId);
                mSKS_EFT_FileDetail_AddendaCustom = SKS_EFT_FileDetail_AddendaCustom::find(mSKS_EFT_FileDetail.RecId); //FDD-10590
            }
        }*/ //FDD-10590
        mSKS_EFT_FileDetail_AddendaCustom = SKS_EFT_FileDetail_AddendaCustom::find(mSKS_EFT_FileDetail.RecId); //FDD-10590
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistration</Name>
				<Source><![CDATA[
    private str getTaxRegistration(SelectableDataArea _company = curext())
    {
        //CompanyInfo     lCompanyInfo;
        str ret;
        ;
        if(_company == '')
        {
            _company = curext();
        }
        ret = mSKS_EFT_FileDetail.CoRegNum; //FDD-10590
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendPaymID</Name>
				<Source><![CDATA[
    private VendPaymId getVendPaymID(LedgerJournalAC _Account, CompanyID _AccountCompany)
    {
        VendTable       VendTable;
        container       VirtualCompanyCompanies;
    
        VirtualCompanyCompanies = [_AccountCompany];
    
        select firstonly crossCompany:VirtualCompanyCompanies PaymID from VendTable where VendTable.AccountNum == _Account;
    
        return VendTable.PaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddendaFormats</Name>
				<Source><![CDATA[
    public void setAddendaFormats(SKS_EFT_AddendaFormats _SKS_EFT_AddendaFormats)
    {
        mSKS_EFT_AddendaFormats = _SKS_EFT_AddendaFormats;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddendaHeaderFormats</Name>
				<Source><![CDATA[
    //FDD-10590 --->
    public void setAddendaHeaderFormats(SKS_EFT_FileDetail_AddendaHeader    _sks_eft_FileDetail_AddendaHeader)
    {
        msks_eft_FileDetail_AddendaHeader = _sks_eft_FileDetail_AddendaHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFile</Name>
				<Source><![CDATA[
    public void setFile(SKS_EFTAP_File _mSKS_EFT_File)
    {
        mSKS_EFT_File = _mSKS_EFT_File;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileDetail</Name>
				<Source><![CDATA[
    public void setFileDetail(SKS_EFT_FileDetail _mSKS_EFT_FileDetail)
    {
        mSKS_EFT_FileDetail = _mSKS_EFT_FileDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFileFormatPaymSpec</Name>
				<Source><![CDATA[
    public void setFileFormatPaymSpec(SKS_EFT_FileFormatPaymSpec _mSKS_EFT_FileFormatPaymSpec)
    {
        mSKS_EFT_FileFormatPaymSpec = _mSKS_EFT_FileFormatPaymSpec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceLedgerJournalTransForAddenda</Name>
				<Source><![CDATA[
    public server static LedgerJournalTrans getInvoiceLedgerJournalTransForAddenda(LedgerJournalTrans _LedgerJournalTrans, boolean _posted)
    {
        SKS_EFT_AddendaData     lSKS_EFT_AddendaData;
        LedgerJournalTrans      lLedgerJournalTrans;
    
        lLedgerJournalTrans = _LedgerJournalTrans;
    
        // If Invoice is posted and it was paid with a different method of payment and payment spec
        // Set the in memory LedgerJournalTrans table buffer to the method of payment and payment spec that were used
        // The Invoice will not be permanently updated with these values
        if(_posted)
        {
            select firstonly lSKS_EFT_AddendaData where
                lSKS_EFT_AddendaData.LedgerJournalTransRecId == _LedgerJournalTrans.RecId &&
                (lSKS_EFT_AddendaData.LedgerJournalTransPaymMode != _LedgerJournalTrans.PaymMode ||
                lSKS_EFT_AddendaData.LedgerJournalTransPaymSpec != _LedgerJournalTrans.PaymSpec);
    
            if(lSKS_EFT_AddendaData)
            {
                // _LedgerJournalTrans is passed by reference so we need to select it again
                // instead of updating what was passed in
                lLedgerJournalTrans = null;
                select crossCompany lLedgerJournalTrans where lLedgerJournalTrans.RecId == _LedgerJournalTrans.RecId;
    
                lLedgerJournalTrans.PaymMode = lSKS_EFT_AddendaData.LedgerJournalTransPaymMode;
                lLedgerJournalTrans.PaymSpec = lSKS_EFT_AddendaData.LedgerJournalTransPaymSpec;
            }
        }
    
        return lLedgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAddenda</Name>
				<Source><![CDATA[
    static public boolean isAddenda(SKS_EFT_PaymModeInfo _SKS_EFT_PaymodeInfo)
    {
        SKS_EFT_FileFormatPaymSpec  lSKS_EFT_FileFormatPaymSpec;
        boolean                     AddendaEnabled = false;
    
        select firstOnly AddendaSpec, AddendaCodeId, PaymSpec, FormatId from lSKS_EFT_FileFormatPaymSpec where
            lSKS_EFT_FileFormatPaymSpec.PaymSpec == _SKS_EFT_PaymodeInfo.PaymSpec() &&
            lSKS_EFT_FileFormatPaymSpec.AddendaSpec == NoYes::Yes &&
            lSKS_EFT_FileFormatPaymSpec.FormatId == _SKS_EFT_PaymodeInfo.FormatId();
    
        if(lSKS_EFT_FileFormatPaymSpec)
        {
            if(SKS_EFT_Addenda::UseAddendaCustomFields(lSKS_EFT_FileFormatPaymSpec.AddendaCodeId))
                AddendaEnabled = true;
        }
        return AddendaEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UseAddendaCustomFields</Name>
				<Source><![CDATA[
    static private boolean UseAddendaCustomFields(SKS_EFT_AddendaCodeID _AddendaCodeID)
    {
        SKS_EFT_AddendaFields   lSKS_EFT_AddendaFields;
        boolean                 inUse = false;
    
        select firstOnly ValueType from lSKS_EFT_AddendaFields where lSKS_EFT_AddendaFields.AddendaCodeID == _AddendaCodeID
                                                                && (lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::Cus1
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::Cus2
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::Cus3
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::Cus4
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::CusAmt1
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::CusAmt2
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::CusAmt3
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::CusAmt4
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::CusDate1
                                                                || lSKS_EFT_AddendaFields.ValueType == SKS_EFT_AddendaValueType::CusDate2);
        if(lSKS_EFT_AddendaFields)
        {
            inUse = true;
        }
    
        return inUse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddenda</Name>
				<Source><![CDATA[
    public static server boolean validateAddenda(LedgerJournalTrans _LedgerJournalTrans, boolean _marked = true)
    {
        SKS_EFT_PaymModeInfo    lSKS_EFT_PaymModeInfo;
        VendPaymModeTable       lVendPaymModeTable;
        boolean                 AddendaEnabled = false;
    
        select firstOnly SKS_EFT_FormatId, PaymMode from lVendPaymModeTable where lVendPaymModeTable.PaymMode == _LedgerJournalTrans.PaymMode;
    
        if(lVendPaymModeTable.SKS_EFT_FormatId != '' && _marked)
        {
            lSKS_EFT_PaymModeInfo = new SKS_EFT_PaymModeInfo();
            lSKS_EFT_PaymModeInfo.FormatId(lVendPaymModeTable.SKS_EFT_FormatId);
            lSKS_EFT_PaymModeInfo.PaymMode(lVendPaymModeTable.PaymMode);
            lSKS_EFT_PaymModeInfo.PaymSpec(_LedgerJournalTrans.PaymSpec);
    
            AddendaEnabled = SKS_EFT_Addenda::isAddenda(lSKS_EFT_PaymModeInfo);
        }
    
        return AddendaEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddendaByPaymModeAndSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates Addenda is active by payment mode and spec.
    /// </summary>
    /// <param name = "_paymMode">Payment mode</param>
    /// <param name = "_paymSpec">Payment spec</param>
    /// <returns>Returns true if Addenda is active</returns>
    public static boolean validateAddendaByPaymModeAndSpec(VendPaymMode _paymMode, PaymSpec _paymSpec)
    {
        boolean                 ret;
        VendPaymModeTable       vendPaymModeTable;
        SKS_EFT_PaymModeInfo    paymModeInfo;

        if (_paymMode
            && _paymSpec)
        {
            select firstOnly SKS_EFT_FormatId
              from vendPaymModeTable
             where vendPaymModeTable.PaymMode == _paymMode;
    
            if (vendPaymModeTable.SKS_EFT_FormatId)
            {
                paymModeInfo = new SKS_EFT_PaymModeInfo();
                paymModeInfo.FormatId(vendPaymModeTable.SKS_EFT_FormatId);
                paymModeInfo.PaymMode(_paymMode);
                paymModeInfo.PaymSpec(_paymSpec);
    
                ret = SKS_EFT_Addenda::isAddenda(paymModeInfo);
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddendaCustomData</Name>
				<Source><![CDATA[
    public static server boolean validateAddendaCustomData(LedgerJournalTrans _ledgerJournalTrans, VendPaymModeTable _vendPaymModeTable, boolean _enableLog)
    {
        SKS_EFT_AddendaFields       lSKS_EFT_AddendaFields;
        SKS_EFT_FileFormatPaymSpec  lSKS_EFT_FileFormatPaymSpec;
        container                   conCustomFields;
        container                   conCustomFieldLabels;
        boolean                     noMissingData = true;
    
        // See if this is an Addenda spec and if there is at least one custom field required for the Addenda code
        select firstOnly AddendaSpec, AddendaCodeId, PaymSpec, FormatId from lSKS_EFT_FileFormatPaymSpec where
            lSKS_EFT_FileFormatPaymSpec.FormatId == _vendPaymModeTable.SKS_EFT_FormatId &&
            lSKS_EFT_FileFormatPaymSpec.PaymSpec == _ledgerJournalTrans.PaymSpec &&
            lSKS_EFT_FileFormatPaymSpec.AddendaSpec == NoYes::Yes
        join lSKS_EFT_AddendaFields where
            lSKS_EFT_AddendaFields.AddendaCodeID == lSKS_EFT_FileFormatPaymSpec.AddendaCodeID &&
            lSKS_EFT_AddendaFields.CustFieldRequired == NoYes::Yes;
    
        if(lSKS_EFT_FileFormatPaymSpec)
        {
            // Load all required custom fields into a container for later use.
            while select AddendaCodeID, CustFieldRequired, CustomField, ValueType from lSKS_EFT_AddendaFields where
                lSKS_EFT_AddendaFields.AddendaCodeID == lSKS_EFT_FileFormatPaymSpec.AddendaCodeID &&
                lSKS_EFT_AddendaFields.CustFieldRequired == NoYes::Yes
            {
                conCustomFields += lSKS_EFT_AddendaFields.ValueType;
                conCustomFieldLabels += lSKS_EFT_AddendaFields.CustomField;
            }
    
            noMissingData = SKS_EFT_Addenda::validateInvoiceCustomData(_ledgerJournalTrans, conCustomFields, conCustomFieldLabels, _enableLog);
        }
        return noMissingData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAddendaInvoice</Name>
				<Source><![CDATA[
    public static server boolean validateAddendaInvoice(LedgerJournalTrans _LedgerJournalTrans, boolean _posted)
    {
        boolean                 AddendaEnabled = false;
    
        AddendaEnabled = SKS_EFT_Addenda::validateAddenda(SKS_EFT_Addenda::getInvoiceLedgerJournalTransForAddenda(_LedgerJournalTrans, _posted));
    
        return AddendaEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoiceCustomData</Name>
				<Source><![CDATA[
    private static server boolean validateInvoiceCustomData(LedgerJournalTrans _PaymentLedgerJournalTrans, container _conCustomFields, container _conCustomFieldLabels, boolean _enableLog)
    {
        SpecTrans specTrans;
        container virtualCompanyCompanies;
        VendTransOpen vendTransOpen;
        SKS_EFT_AddendaData SKS_EFT_AddendaData;
        LedgerJournalTrans ledgerJournalTrans;
        SKS_EFT_AddendaValueType addendaValueType;
        int containerCounter;
        boolean ret = true;
        str errorMessage;
    
        void logMessage()
        {
            errorMessage = strFmt("@SKS2596", ledgerJournalTrans.Invoice, conPeek(_conCustomFieldLabels, containerCounter));
            SKS_EFT_JournalValidate::errorLog(errorMessage, _PaymentLedgerJournalTrans, _enableLog);
            ret = false;
        }
    
        virtualCompanyCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curExt());
    
        while select specTrans where specTrans.SpecRecId == _PaymentLedgerJournalTrans.RecId
        {
            vendTransOpen = null;
            ledgerJournalTrans = null;
            SKS_EFT_AddendaData = null;
    
            select firstonly crosscompany:virtualCompanycompanies RefRecId, RecId from vendTransOpen
              where
                 vendTransOpen.RecId == specTrans.RefRecId
            join Invoice, RecId from ledgerJournalTrans
              where
                 ledgerJournalTrans.VendTransId == vendTransOpen.RefRecId;
    
            select firstonly crosscompany:virtualCompanycompanies SKS_EFT_AddendaData
              where SKS_EFT_AddendaData.LedgerJournalTransRecId == ledgerJournalTrans.RecId;
    
            for(containerCounter = 1; containerCounter <= conLen(_conCustomFields); containerCounter++)
            {
                addendaValueType = conPeek(_conCustomFields, containerCounter);
                switch(addendaValueType)
                {
                    case SKS_EFT_AddendaValueType::Cus1:
                        if(SKS_EFT_AddendaData.CustomStr1 == '')
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::Cus2:
                        if(SKS_EFT_AddendaData.CustomStr2 == '')
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::Cus3:
                        if(SKS_EFT_AddendaData.CustomStr3 == '')
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::Cus4:
                        if(SKS_EFT_AddendaData.CustomStr4 == '')
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::CusAmt1:
                        if(SKS_EFT_AddendaData.CustomAmt1 == 0)
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::CusAmt2:
                        if(SKS_EFT_AddendaData.CustomAmt2 == 0)
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::CusAmt3:
                        if(SKS_EFT_AddendaData.CustomAmt3 == 0)
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::CusAmt4:
                        if(SKS_EFT_AddendaData.CustomAmt4 == 0)
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::CusDate1:
                        if(SKS_EFT_AddendaData.CustomDate1 == dateNull())
                        {
                            logMessage();
                        }
                        break;
                    case SKS_EFT_AddendaValueType::CusDate2:
                        if(SKS_EFT_AddendaData.CustomDate2 == dateNull())
                        {
                            logMessage();
                        }
                        break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustomAddendaValues</Name>
				<Source><![CDATA[
    public str CustomAddendaValues()
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>