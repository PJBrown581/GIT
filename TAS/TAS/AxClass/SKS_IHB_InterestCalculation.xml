<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_IHB_InterestCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_IHB_InterestCalculation extends SKS_EB_Batch
{
    AmountCur   totalInterest;
    CurrencyCode currencyCode;
    RefRecId parentJouranlRecId;
    LedgerJournalTrans postedledgerJournalTrans;
    LedgerJournalTable parentledgerJournaltable;
    boolean post;
    counter daysOfYear;
    // SKS_FDD_9848 -->
    AmountCur           totalOverDraftInterest;
    LedgerJournalTrans  postedOverDraftledgerJournalTrans;
    RefRecId            postedOverDraftJournalRecId;
    boolean             overDraftInterestCalculated;
    RefRecId            postedAppropriationJourRecId;
    container           calculationSummaryRecId;
    RefRecId            appropriationFeeRecId; //Bug 10960
    // SKS_FDD_9848 <--
    //FDD-11448 --->
    Map                 bankEndDateMap;
    AmountCur           nonCompountInterestAccumulate;//, summaryNonCompountIntAccumulate;
    AmountCur           excludeNonCompountInt, excludePostedInterstAmt;
    RefRecId            CalcInterestSummaryPostedGJ;
    //<--- FDD-11448
    AmountCur           prevInterestAmount, prevOverDraftInterestAmt; //SKS_Bug_12270
    //SKS_13971_interestsummaryhistory--->
    Voucher calculationSummaryVoucher;
    SKS_IHB_CalculatedInterestHistory SKS_IHB_CalculatedInterestHistory;
    SKS_IHB_CalculatedInterestSummaryHistory SKS_IHB_CalculatedInterestSummaryHistory;
    SKS_IHB_CalculatedInterestSummaryHistory calculatedInterestSummaryHistory;
    sKS_IHB_CalculatedInterest calculatedInterest;
    //SKS_13971_interestsummaryhistory<---
    boolean firstRec;              //SKS_Bug_21012

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_PP_Sys tmpSKS_PP_Sys = new SKS_PP_Sys();
        //FDD-11448 --->
        Map                         bankEndDateMap;
        MapEnumerator               bankEndDateMapEnumerator;
        TransDate                   endDate;
        BankAccountID               bankAccountID;
        SKS_IHB_CalculatedInterest  sKS_IHB_CalculatedInterest;
        //<--- FDD-11448

        SKS_IHB_CalculatedInterestHistory SKS_IHB_CalculatedInterestHistory; //SKS_13971_interestsummaryhistory

        if ( !tmpSKS_PP_Sys.ValidateSetup('SKS_IHB_InterestCalculation'))
        {
            return;
        }

        container           calculationSummaryRecIdLoc;
        SKS_IHB_InterestCalculation sKS_IHB_InterestCalculation = new SKS_IHB_InterestCalculation();
        SKS_IHB_CalculatedInterestSummary calculatedInterestSummaryLoc;
        if (sKS_IHB_InterestCalculation.prompt())
        {
            info("@SKS:SKGIHBCalculatingInterest");
            try
            {
                ttsbegin;
                sKS_IHB_InterestCalculation.calculateInterest(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                //FDD-11448 --->
                bankEndDateMap = sKS_IHB_InterestCalculation.parmBankEndDateMap();
                bankEndDateMapEnumerator = bankEndDateMap.getEnumerator();
                ttscommit;
                ttsbegin;
                while (bankEndDateMapEnumerator.moveNext())
                {
                    bankAccountID = bankEndDateMapEnumerator.currentKey();
                    endDate = bankEndDateMapEnumerator.currentValue();
                    update_recordset sKS_IHB_CalculatedInterest
                    setting Recalculate = NoYes::No
                        where sKS_IHB_CalculatedInterest.BankAccountID == bankAccountID;
                    //SKS_13971_interestsummaryhistory -->
                    update_recordset SKS_IHB_CalculatedInterestHistory
                        setting Recalculate = NoYes::No
                        where SKS_IHB_CalculatedInterestHistory.BankAccountID == bankAccountID;
                    //SKS_13971_interestsummaryhistory <--
                }
                //<--- FDD-11448
                ttscommit;
                // SKS_FDD_9848 -->
                calculationSummaryRecIdLoc = sKS_IHB_InterestCalculation.parmCalculateInterestSummary();
                if(conLen(calculationSummaryRecIdLoc) > 0)
                {
                    for(int i = 1; i<= conLen(calculationSummaryRecIdLoc); i++)
                    {
                        SKS_EFT_SendMail sKS_EFT_SendMail =  new SKS_EFT_SendMail();
                        calculatedInterestSummaryLoc = SKS_IHB_CalculatedInterestSummary::find(conPeek(calculationSummaryRecIdLoc,i));
                        sKS_EFT_SendMail.interestNoteEmailProcess(calculatedInterestSummaryLoc);
                    }
                }
                // SKS_FDD_9848 <--
                info("@SKS:SKGTheInterestCalculationCompleted");
            }
            catch
            {
                ttsabort;
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentJournal</Name>
				<Source><![CDATA[
    public RefRecId parmParentJournal(RefRecId _RefRecId = parentJouranlRecId)
    {
        parentJouranlRecId = _RefRecId;
        return parentJouranlRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentledgerJournaltable</Name>
				<Source><![CDATA[
    public LedgerJournalTable parmParentledgerJournaltable(LedgerJournalTable _parentledgerJournaltable =  parentledgerJournaltable)
    {
        parentledgerJournaltable =  _parentledgerJournaltable;
        return parentledgerJournaltable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = postedledgerJournalTrans)
    {
        postedledgerJournalTrans = _ledgerJournalTrans;
        return postedledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTransOverDraftInterestLine</Name>
				<Source><![CDATA[
    // SKS_FDD_9848
    public LedgerJournalTrans parmLedgerJournalTransOverDraftInterestLine(LedgerJournalTrans _ledgerJournalTrans = postedOverDraftledgerJournalTrans)
    {
        postedOverDraftledgerJournalTrans = _ledgerJournalTrans;
        return postedOverDraftledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeNonCompountInt</Name>
				<Source><![CDATA[
    //FDD-11448  --->
    public AmountCur parmExcludeNonCompountInt(AmountCur _excludeNonCompountInt = excludeNonCompountInt)
    {
        excludeNonCompountInt = _excludeNonCompountInt;
        return excludeNonCompountInt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludePostedInterstAmt</Name>
				<Source><![CDATA[
    public AmountCur parmExcludePostedInterstAmt(AmountCur _excludePostedInterstAmt = excludePostedInterstAmt)
    {
        excludePostedInterstAmt = _excludePostedInterstAmt;
        return excludePostedInterstAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerdiodStartEndDates</Name>
				<Source><![CDATA[
    //<--- FDD-11448

    public container getPerdiodStartEndDates(SKS_PP_Bank _sKS_PP_Bank, TransDate _transDate)
    {
        if (_sKS_PP_Bank.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Month)
        {
            return [dateStartMth(_transDate), dateEndMth(_transDate)];
        }
        else
        {
            if (_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth>_sKS_PP_Bank.IHB_CalculationFrequencyEndMonth)
            {
                if (mthOfYr(_transDate)>=_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth)
                {
                    return [dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate))),
                    dateEndMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyEndMonth, year(_transDate)+1))];
                }
                else
                {
                    return [dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)-1)),
                    dateEndMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyEndMonth, year(_transDate)))];
                }
            }
            else
            {
                return [dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate))),
                    dateEndMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyEndMonth, year(_transDate)))];
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousPeriodEndDate</Name>
				<Source><![CDATA[
    public TransDate getPreviousPeriodEndDate(SKS_PP_Bank _sKS_PP_Bank, TransDate _transDate)
    {
        if (_sKS_PP_Bank.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Month)
        {
            return dateEndMth(prevMth(_transDate));
        }
        else
        {
            if (_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth>_sKS_PP_Bank.IHB_CalculationFrequencyEndMonth)
            {
                if (mthOfYr(_transDate)>_sKS_PP_Bank.IHB_CalculationFrequencyStartMonth)
                {
                    return dateEndMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyEndMonth, year(_transDate)));
                }
                else
                {
                    return dateEndMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyEndMonth, year(_transDate)-1));
                }
            }
            else
            {
                return dateEndMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyEndMonth, year(_transDate)-1));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextPeriodStartDate</Name>
				<Source><![CDATA[
    public TransDate getNextPeriodStartDate(SKS_PP_Bank _sKS_PP_Bank, TransDate _transDate)
    {
        if (_sKS_PP_Bank.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Month)
        {
            return dateStartMth(nextMth(_transDate));
        }
        else
        {
            return dateStartMth(mkDate(dayOfMth(_transDate), _sKS_PP_Bank.IHB_CalculationFrequencyStartMonth, year(_transDate)+1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidPostingDate</Name>
				<Source><![CDATA[
    public TransDate getValidPostingDate(SKS_PP_Bank _sKS_PP_Bank, TransDate _transDate, RefRecId _refRecid)
    {
        Ledger ledger;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;

        ledger = Ledger::find(Ledger::primaryLedger(_refRecid));

        select firstonly fiscalCalendarPeriod
            where fiscalCalendarPeriod.FiscalCalendar      == ledger.FiscalCalendar
                && fiscalCalendarPeriod.StartDate <= _transDate
                && fiscalCalendarPeriod.EndDate   >= _transDate
                && fiscalCalendarPeriod.Type   == FiscalPeriodType::Operating
            join ledgerFiscalCalendarPeriod
            where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                && ledgerFiscalCalendarPeriod.Ledger == Ledger::current()
                && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open;

         // If the period is open for the transdate return the same
        if (fiscalCalendarPeriod.RecId)
        {
            return _sKS_PP_Bank.IHB_LastStatementDate > _transDate ? _sKS_PP_Bank.IHB_LastStatementDate+1 : _transDate;
        }

        select firstonly fiscalCalendarPeriod
            order by fiscalCalendarPeriod.StartDate
            where fiscalCalendarPeriod.FiscalCalendar      == ledger.FiscalCalendar
                && fiscalCalendarPeriod.StartDate > _transDate
                && fiscalCalendarPeriod.Type   == FiscalPeriodType::Operating
            join ledgerFiscalCalendarPeriod
            where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                && ledgerFiscalCalendarPeriod.Ledger == Ledger::current()
                && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open;

        return _sKS_PP_Bank.IHB_LastStatementDate > fiscalCalendarPeriod.StartDate ? _sKS_PP_Bank.IHB_LastStatementDate+1 : fiscalCalendarPeriod.StartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInterest</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every In-house bank (outer loop) through bank transactions(outer loop)")]
    public void calculateInterest(TransDate _currentDate)
    {
        BankAccountTrans bankAccountTransRec;
        SKS_PP_Bank sKS_PP_Bank;
        TransDate startDate;
        TransDate endDate;
        TransDate periodStartDate;
        TransDate nextPeriodStartDate;
        TransDate periodEndDate;
        SKS_IHB_CalculatedInterest sKS_IHB_CalculatedInterestLoc;
        SKS_IHB_CalculatedInterest sKS_IHB_CalculatedInterestCalc;
        SKS_IHB_CalculatedInterest sKS_IHB_CalculatedInterestPrev;
        AmountCur previousCalculationBase = 0;
        SKS_IHB_InterestRates sKS_IHB_InterestRates;
        SKS_IHB_InterestMarkup sKS_IHB_InterestMarkup;
        AmountCur previouslyPostedInterest;
        TransDate postingDate;
        TransDate previousPeriodEndDate;
        AmountCur interestDiff;
        // SKS_FDD_9848 -->
        AmountCur appropriateAmount;
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummary;
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummaryLoc;
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummaryTotalBase;
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummaryTotalPrev; //12045
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedAppropriationFee;
        // SKS_FDD_9848 <--
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummaryLast;//SKS_Bug_11792
        TransDate appropriationCalDate; // SKS_Bug_11008
        
        bankEndDateMap = new Map(Types::String, Types::Date); //FDD-11448
        while select sKS_PP_Bank
            where sKS_PP_Bank.SKS_IHBInhouseBank      == NoYes::Yes
                && sKS_PP_Bank.IHB_PayOffCalculated   == NoYes::No //FDD-11448 --->
                && sKS_PP_Bank.IHB_InterestRateId     != '' //<--- FDD-11448
        {
            firstRec = true;               //SKS_Bug_21012

            calculatedInterestSummaryHistory = null;
            this.parmCurrencyCode(BankAccountTable::find(sKS_PP_Bank.BankAccountId).CurrencyCode);

            select firstonly sKS_IHB_CalculatedInterestLoc
                where sKS_IHB_CalculatedInterestLoc.Recalculate == NoYes::Yes
                   && sKS_IHB_CalculatedInterestLoc.BankAccountID == sKS_PP_Bank.BankAccountId;

            select firstonly bankAccountTransRec
                order by SKS_IHB_ValueDate
                where bankAccountTransRec.SKS_IHB_InterestCalculated == NoYes::No
                   && bankAccountTransRec.AccountId == sKS_PP_Bank.BankAccountId
                   && bankAccountTransRec.SKS_IHB_ValueDate < _currentDate  //SKS_DevOps_15698
                   && bankAccountTransRec.SKS_IHB_ValueDate != datenull();

            startDate = dateNull();
            if (sKS_IHB_CalculatedInterestLoc.RecId && bankAccountTransRec.RecId)
            {
                startDate = sKS_IHB_CalculatedInterestLoc.ValueDate < bankAccountTransRec.SKS_IHB_ValueDate ? sKS_IHB_CalculatedInterestLoc.ValueDate : bankAccountTransRec.SKS_IHB_ValueDate;
            }
            else if (sKS_IHB_CalculatedInterestLoc.RecId)
            {
                startDate = sKS_IHB_CalculatedInterestLoc.ValueDate;
            }
            else if (bankAccountTransRec.RecId)
            {
                startDate = bankAccountTransRec.SKS_IHB_ValueDate;
            }
            endDate   = this.getPreviousPeriodEndDate(sKS_PP_Bank, _currentDate);
            
            if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded &&
                sKS_PP_Bank.IHB_InterestEndDate &&
                (endDate > sKS_PP_Bank.IHB_InterestEndDate || _currentDate>sKS_PP_Bank.IHB_InterestEndDate)) //FDD-11448 --->
            {
                if(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany) //SKS_Bug_12271
                {
                    changecompany(sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                    {
                        SKS_PP_Bank locsKS_PP_Bank = null;
                        select firstonly locsKS_PP_Bank
                        where locsKS_PP_Bank.BankAccountId == sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount;
                        locsKS_PP_Bank.IHB_InterestEndDate  = sKS_PP_Bank.IHB_InterestEndDate;
                        locsKS_PP_Bank.IHB_PayOffCalculated = NoYes::Yes;
                        ttsbegin;
                        locsKS_PP_Bank.selectForUpdate(true);
                        locsKS_PP_Bank.update();
                        ttscommit;
                    }
                 }//SKS_Bug_12271
                endDate                             = sKS_PP_Bank.IHB_InterestEndDate;
                sKS_PP_Bank.IHB_PayOffCalculated    = NoYes::Yes;
                ttsbegin;
                sKS_PP_Bank.selectForUpdate(true);
                sKS_PP_Bank.update();
                ttscommit;
            }
            bankEndDateMap.insert(sKS_PP_Bank.BankAccountId, endDate);

            //<--- FDD-11448
            //SKS_Bug_11792 --
            if (startDate == datenull())
            {
                select firstonly sKS_IHB_CalculatedInterestSummaryLast
                    order by  ValueDate desc
                        where sKS_IHB_CalculatedInterestSummaryLast.BankAccountID == sKS_PP_Bank.BankAccountId;
                if (sKS_IHB_CalculatedInterestSummaryLast.ValueDate == endDate)
                {
                    continue;
                }
                else
                {
                    select firstonly sKS_IHB_CalculatedInterestPrev
                        order by  ValueDate desc
                        where sKS_IHB_CalculatedInterestPrev.BankAccountID == sKS_PP_Bank.BankAccountId;
                }
            }
            //SKS_Bug_11792 <--
            daysOfYear = sKS_PP_Bank.IHB_InterestDaysCalcMethod == SKS_IHB_InterestDaysCalcMeth::act360 ? 360 : 365;

            if ((startDate == datenull()  &&  sKS_IHB_CalculatedInterestPrev.RecId == 0) || startDate > endDate) //SKS_Bug_11792
            {
                continue;
            }

            this.validatePreReq(sKS_PP_Bank);

            select firstonly sKS_IHB_InterestRates
                where sKS_IHB_InterestRates.InterestRateId == sKS_PP_Bank.IHB_InterestRateId;

            select firstonly sKS_IHB_InterestMarkup
                 where sKS_IHB_InterestMarkup.MarkupId == sKS_PP_Bank.IHB_InterestMarkupId;

            // previous record need days of interest calculation need change so the interest also changes.
            if (!sKS_IHB_CalculatedInterestPrev.RecId) //SKS_Bug_11792
            {
                select firstonly sKS_IHB_CalculatedInterestPrev
                    order by  ValueDate desc
                    where sKS_IHB_CalculatedInterestPrev.BankAccountID == sKS_PP_Bank.BankAccountId
                       && sKS_IHB_CalculatedInterestPrev.ValueDate < startDate;
                       //&& sKS_IHB_CalculatedInterestPrev.NewTransactionAmount != 0;   //SKS_DevOps_15697
            }
            if (sKS_IHB_CalculatedInterestPrev.RecId)
            {
                StartDate = sKS_IHB_CalculatedInterestPrev.ValueDate;
                previousCalculationBase = (sKS_IHB_CalculatedInterestPrev.CalculationBase + sKS_IHB_CalculatedInterestPrev.OverdraftBase) - sKS_IHB_CalculatedInterestPrev.NewTransactionAmount; // SKS_FDD_9848
                //FDD-11448 --->
                //SKS_Bug_12270 -->
                //nonCompountInterestAccumulate = sKS_IHB_CalculatedInterestPrev.Noncompoundedinterestaccumulated;
                /*select firstonly sKS_IHB_CalculatedInterestSummaryLast
                    order by  ValueDate desc
                        where sKS_IHB_CalculatedInterestSummaryLast.BankAccountID == sKS_PP_Bank.BankAccountId
                           && sKS_IHB_CalculatedInterestSummaryLast.ValueDate < startDate;
                nonCompountInterestAccumulate = sKS_IHB_CalculatedInterestPrev.Noncompoundedinterestaccumulated;
                //summaryNonCompountIntAccumulate = sKS_IHB_CalculatedInterestPrev.Noncompoundedinterestaccumulated;*/
                //FDD-11448 <---
                //SKS_Bug_12270 <--
            }

            [periodStartDate, periodEndDate] = this.getPerdiodStartEndDates(sKS_PP_Bank, startDate);

            // if period starts in between need to add remaining period interest also for posting.
            select sum (CreditInterest), sum (DebitInterest), sum(OverdraftDebitInterest) from sKS_IHB_CalculatedInterestCalc
                where sKS_IHB_CalculatedInterestCalc.ValueDate >= periodStartDate
                    && sKS_IHB_CalculatedInterestCalc.ValueDate < StartDate
                    && sKS_IHB_CalculatedInterestCalc.BankAccountID == sKS_PP_Bank.BankAccountId;
            totalInterest =  sKS_IHB_CalculatedInterestCalc.CreditInterest + sKS_IHB_CalculatedInterestCalc.DebitInterest;
            totalOverDraftInterest = sKS_IHB_CalculatedInterestCalc.OverdraftDebitInterest;

            previousPeriodEndDate = this.getPreviousPeriodEndDate(sKS_PP_Bank, periodStartDate);
            select sum (CreditInterest), sum (DebitInterest), sum(OverdraftDebitInterest) from sKS_IHB_CalculatedInterestCalc
                where sKS_IHB_CalculatedInterestCalc.ValueDate == previousPeriodEndDate
                    && sKS_IHB_CalculatedInterestCalc.BankAccountID == sKS_PP_Bank.BankAccountId;
            totalInterest =  totalInterest+ sKS_IHB_CalculatedInterestCalc.CreditInterest + sKS_IHB_CalculatedInterestCalc.DebitInterest;
            totalOverDraftInterest = totalOverDraftInterest+sKS_IHB_CalculatedInterestCalc.OverdraftDebitInterest;
            //SKS_Bug_12270 -->
            if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)
            {
                select firstonly Noncompoundedinterestaccumulated from sKS_IHB_CalculatedInterestCalc
                order by  ValueDate desc
                where sKS_IHB_CalculatedInterestCalc.ValueDate < StartDate
                    && sKS_IHB_CalculatedInterestCalc.BankAccountID == sKS_PP_Bank.BankAccountId;
                nonCompountInterestAccumulate = sKS_IHB_CalculatedInterestCalc.Noncompoundedinterestaccumulated;
            }
            //SKS_Bug_12270 <--
            // Find next period start date to post the interest
            nextPeriodStartDate = this.getNextPeriodStartDate(sKS_PP_Bank, periodStartDate);

            periodStartDate     = startDate;
            if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded &&
                sKS_PP_Bank.IHB_InterestEndDate && periodEndDate > sKS_PP_Bank.IHB_InterestEndDate) //FDD-11448 --->
            {
                periodEndDate  = sKS_PP_Bank.IHB_InterestEndDate;
            }
            //<--- FDD-11448

            // Find the period end date is open, else find the next open date.
            postingDate = this.getValidPostingDate(sKS_PP_Bank, periodEndDate, CompanyInfo::findDataArea(sKS_PP_Bank.DataAreaId).RecId);

            if (periodStartDate != periodEndDate) // SKS_FDD_9848, // Bug 11582
            {
                previouslyPostedInterest = this.reversePreviousCycleData(periodStartDate, periodEndDate, postingDate, SKS_PP_Bank);
            }
            // 12045-->
            else
            {
                select firstonly * from sKS_IHB_CalculatedInterestSummaryTotalPrev
                    where sKS_IHB_CalculatedInterestSummaryTotalPrev.ValueDate == periodEndDate
                        && sKS_IHB_CalculatedInterestSummaryTotalPrev.BankAccountID == sKS_PP_Bank.BankAccountId;
                if (sKS_IHB_CalculatedInterestSummaryTotalPrev.ParentGLRecId)
                {
                    parentJouranlRecId = sKS_IHB_CalculatedInterestSummaryTotalPrev.ParentGLRecId;
                }
                if (sKS_IHB_CalculatedInterestSummaryTotalPrev.OverdraftParentGLRecId)
                {
                    this.parmLedgerJournalTransOverDraftInterestLine(LedgerJournalTrans::findRecId(sKS_IHB_CalculatedInterestSummaryTotalPrev.OverdraftParentGLRecId, false));
                }
                previouslyPostedInterest = this.previouslyPostedInterest(sKS_IHB_CalculatedInterestSummaryTotalPrev.ParentGLRecId);
                this.parmPrevInterestAmount(previouslyPostedInterest);//SKS_Bug_12270
                previouslyPostedInterest += this.previouslyPostedInterest(sKS_IHB_CalculatedInterestSummaryTotalPrev.OverdraftParentGLRecId);
                this.parmPrevODInterestAmount(previouslyPostedInterest);//SKS_Bug_12270
                sKS_IHB_CalculatedInterestSummaryTotalPrev.clear();
            }
            // 12045<--

            while (periodStartDate)
            {
                // Calculate interest for the period.
                previousCalculationBase =  this.calculateInterestForPeriod(sKS_PP_Bank, periodStartDate, periodEndDate, previousCalculationBase, sKS_IHB_InterestRates, sKS_IHB_InterestMarkup);

                if (periodStartDate != periodEndDate)       // SKS_Bug_11444
                {
                    if (totalInterest != 0)                 // SKS_Bug_11444
                    {
                        // Post the interest for the period.
                        parentledgerJournaltable =  this.postInterest(sKS_PP_Bank, postingDate, periodEndDate, parentledgerJournaltable);
                        this.parmParentJournal(postedledgerJournalTrans.RecId);
                    }
                    // SKS_Bug_12045 -->
                    // Calculate appropriate fee amount
                    if(postingDate >= periodEndDate)
                    {
                        appropriationCalDate = periodEndDate;
                    }
                    else
                    {
                        appropriationCalDate = postingDate;
                    }
                    sKS_IHB_CalculatedAppropriationFee = this.checkAppropriationTrans(sKS_PP_Bank, appropriationCalDate);
                    if(!sKS_IHB_CalculatedAppropriationFee.AppropriationParentGLRecId)
                    {
                        appropriateAmount = this.appropriationFeeCalculation(sKS_PP_Bank, appropriationCalDate);
                        if(appropriateAmount != 0 && sKS_PP_Bank.IHB_AppropriationfeeID)
                        {
                            parentledgerJournaltable = this.postInterest(sKS_PP_Bank, postingDate, periodEndDate, parentledgerJournaltable, true, appropriateAmount);
                        }
                    }
                    else
                    {
                        appropriateAmount = sKS_IHB_CalculatedAppropriationFee.Appropriationfee;
                        this.parmAppropriationFeeRecId(0);
                    }
                    // Calculate overdraft interest amount
                    if(totalOverDraftInterest != 0 && sKS_PP_Bank.IHB_OverdraftInterestID)
                    {
                        parentledgerJournaltable = this.postInterest(sKS_PP_Bank, postingDate, periodEndDate, parentledgerJournaltable, false, 0 , true, totalOverDraftInterest);
                    }
                    // SKS_Bug_12045 <--
                    if(postingDate >= periodEndDate)
                    {
                        this.insertCalculatedInterestSummary(sKS_PP_Bank, periodEndDate, previousCalculationBase, (previousCalculationBase - sKS_PP_Bank.IHB_AppropiationAmount), appropriateAmount, this.parmAppropriationFeeRecId(), calculationSummaryVoucher); //Bug 10960
                        calculationSummaryVoucher = '';
                    }
                    else
                    {
                        this.insertCalculatedInterestSummary(sKS_PP_Bank, postingDate, previousCalculationBase, (previousCalculationBase - sKS_PP_Bank.IHB_AppropiationAmount), appropriateAmount, this.parmAppropriationFeeRecId(), calculationSummaryVoucher); //Bug 10960
                        calculationSummaryVoucher = '';
                    }
                    // SKS_Bug_11008 <--
                    // SKS_FDD_9848 <--
                }
                // SKS_Bug_10961 -->
                if(!sKS_IHB_CalculatedAppropriationFee.AppropriationParentGLRecId)
                {
                    interestDiff = (totalInterest + totalOverDraftInterest + appropriateAmount) - previouslyPostedInterest;
                }
                else
                {
                    interestDiff = (totalInterest + totalOverDraftInterest) - previouslyPostedInterest;
                }
                //SKS_Bug_12127 -->
                // for non-compound the interest amount should not be added
                //SKS_Bug_12270 -->
                if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)
                {
                    interestDiff = interestDiff - totalInterest + this.parmPrevInterestAmount();
                }
                //SKS_Bug_12270 <--
                //SKS_Bug_12127 <--
                appropriateAmount = 0;
                // SKS_Bug_10961 <--
                totalInterest = 0;
                totalOverDraftInterest = 0; // SKS_FDD_9848
                //SKS_Bug_12270 -->
                this.parmPrevInterestAmount(0);
                this.parmPrevODInterestAmount(0);
                //SKS_Bug_12270 <--

                // Check the iteration need to continue for next period.
                if (nextPeriodStartDate < EndDate)
                {
                    previousPeriodEndDate = periodEndDate;
                    select sum(AmountCur), SKS_IHB_ValueDate from bankAccountTransRec
                        group by SKS_IHB_ValueDate
                        where bankAccountTransRec.AccountId == sKS_PP_Bank.BankAccountId
                           && bankAccountTransRec.SKS_IHB_ValueDate == periodEndDate;

                    // Get the next period start and end dates.
                    [periodStartDate, periodEndDate] = this.getPerdiodStartEndDates(sKS_PP_Bank, nextPeriodStartDate);

                    if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded &&
                        sKS_PP_Bank.IHB_InterestEndDate && periodEndDate > sKS_PP_Bank.IHB_InterestEndDate) //FDD-11448 --->
                    {
                        periodEndDate = endDate;
                    }
                    //<--- FDD-11448

                    // Find next period start date to post the interest
                    nextPeriodStartDate = this.getNextPeriodStartDate(sKS_PP_Bank, periodStartDate);

                    // Find the period end date is open, else find the next open date.
                    postingDate = this.getValidPostingDate(sKS_PP_Bank, periodEndDate, CompanyInfo::findDataArea(sKS_PP_Bank.DataAreaId).RecId);

                    previouslyPostedInterest = this.reversePreviousCycleData(periodStartDate, periodEndDate, postingDate, SKS_PP_Bank);

                    // Last day of the period's interest will posted to next period.
                    if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded) //FDD-11448 --->
                    {
                        this.createInterestLine(sKS_PP_Bank, previousPeriodEndDate, periodEndDate, previousCalculationBase,
                            bankAccountTransRec.AmountCur + interestDiff, sKS_IHB_InterestRates, sKS_IHB_InterestMarkup);//SKS_Bug_12127
                        previousCalculationBase = previousCalculationBase + bankAccountTransRec.AmountCur + interestDiff //SKS_Bug_12127
                            - this.parmExcludeNonCompountInt() - this.parmExcludePostedInterstAmt();
                        this.parmExcludeNonCompountInt(0);
                        this.parmExcludePostedInterstAmt(0);
                    }
                    else //<--- FDD-11448
                    {
                        this.createInterestLine(sKS_PP_Bank, previousPeriodEndDate, periodEndDate, previousCalculationBase, bankAccountTransRec.AmountCur + interestDiff, sKS_IHB_InterestRates, sKS_IHB_InterestMarkup);
                        previousCalculationBase = previousCalculationBase + bankAccountTransRec.AmountCur + interestDiff;
                    }
                    interestDiff = 0;
                }
                else
                {
                    previousPeriodEndDate = periodEndDate;
                    select sum(AmountCur), SKS_IHB_ValueDate from bankAccountTransRec
                        group by SKS_IHB_ValueDate
                        where bankAccountTransRec.AccountId == sKS_PP_Bank.BankAccountId
                           && bankAccountTransRec.SKS_IHB_ValueDate == periodEndDate;

                    // if next period is not in current scope Last day of the period's interest will be 0. The same line will be updated in the next cycle.
                    if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded) //FDD-11448 --->
                    {
                        this.createInterestLine(sKS_PP_Bank, periodEndDate, periodEndDate,
                            previousCalculationBase, bankAccountTransRec.AmountCur + interestDiff, sKS_IHB_InterestRates, sKS_IHB_InterestMarkup);//SKS_Bug_12270
                        previousCalculationBase = previousCalculationBase + bankAccountTransRec.AmountCur + interestDiff //SKS_Bug_12127
                            - this.parmExcludeNonCompountInt() - this.parmExcludePostedInterstAmt();//SKS_Bug_12270
                        this.parmExcludeNonCompountInt(0);
                        this.parmExcludePostedInterstAmt(0);
                    }
                    else //<--- FDD-11448
                    {
                        this.createInterestLine(sKS_PP_Bank, periodEndDate, periodEndDate, previousCalculationBase, bankAccountTransRec.AmountCur + interestDiff, sKS_IHB_InterestRates, sKS_IHB_InterestMarkup);
                        previousCalculationBase = previousCalculationBase + bankAccountTransRec.AmountCur + interestDiff;
                    }
                    previouslyPostedInterest = 0;
                    interestDiff = 0;
                    periodStartDate = dateNull();
                }
                //SKS_Bug_12127 -->
                //if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Compound)
                //{
                //SKS_Bug_12127 <--
                select firstonly forupdate sKS_IHB_CalculatedInterestSummaryTotalBase
                    where sKS_IHB_CalculatedInterestSummaryTotalBase.BankAccountID == sKS_PP_Bank.BankAccountId
                        && sKS_IHB_CalculatedInterestSummaryTotalBase.ValueDate == previousPeriodEndDate;
                if (sKS_IHB_CalculatedInterestSummaryTotalBase.RecId)
                {
                    if(sKS_PP_Bank.IHB_OverdraftInterestID &&
                    sKS_PP_Bank.IHB_AppropiationAmount > 0 &&
                    (previousCalculationBase > sKS_PP_Bank.IHB_AppropiationAmount))
                    {
                        sKS_IHB_CalculatedInterestSummaryTotalBase.InterestBase  = sKS_PP_Bank.IHB_AppropiationAmount;                        
                        sKS_IHB_CalculatedInterestSummaryTotalBase.OverdraftBase = previousCalculationBase - sKS_PP_Bank.IHB_AppropiationAmount;
                    }
                    else
                    {
                        sKS_IHB_CalculatedInterestSummaryTotalBase.InterestBase = previousCalculationBase;                        
                        sKS_IHB_CalculatedInterestSummaryTotalBase.OverdraftBase = 0;
                    }
                    //SKS_Bug_12127 -->
                    if(sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Compound)
                    {
                        sKS_IHB_CalculatedInterestSummaryTotalBase.TotalBase = previousCalculationBase;
                    }
                    else
                    {
                        sKS_IHB_CalculatedInterestSummaryTotalBase.TotalBase = previousCalculationBase + sKS_IHB_CalculatedInterestSummaryTotalBase.Noncompoundedinterestaccumulated;
                    }
                    //SKS_Bug_12127 <--
                    sKS_IHB_CalculatedInterestSummaryTotalBase.update();
                    //SKS_13971_interestsummaryhistory -->
                    SKS_IHB_CalculatedInterestSummaryHistory SKS_IHB_CalculatedInterestSummaryHistoryUpdate;
                    update_recordset SKS_IHB_CalculatedInterestSummaryHistoryUpdate
                        setting InterestBase = sKS_IHB_CalculatedInterestSummaryTotalBase.InterestBase,
                        OverdraftBase = sKS_IHB_CalculatedInterestSummaryTotalBase.OverdraftBase,
                        TotalBase = sKS_IHB_CalculatedInterestSummaryTotalBase.TotalBase
                        where SKS_IHB_CalculatedInterestSummaryHistoryUpdate.RecId == calculatedInterestSummaryHistory.RecId;
                    //SKS_13971_interestsummaryhistory <--
                }
                //}//SKS_Bug_12127
                // SKS_FDD_9848 -->
                update_recordset sKS_IHB_CalculatedInterestSummary
                setting ParentGLRecId = parentJouranlRecId
                where  sKS_IHB_CalculatedInterestSummary.ValueDate == previousPeriodEndDate
                    && sKS_IHB_CalculatedInterestSummary.BankAccountID == sKS_PP_Bank.BankAccountId;

                // SKS_FDD_9848 <--
                //SKS_Bug_12045 -->
                parentJouranlRecId = 0;
                postedledgerJournalTrans.Clear();
                //}SKS_Bug_12045 <--
                // SKS_FDD_9848 -->
                // Link the overdraft interest and posted journal
                postedOverDraftJournalRecId = this.parmLedgerJournalTransOverDraftInterestLine().RecId;

                update_recordset sKS_IHB_CalculatedInterestSummary
                setting OverdraftParentGLRecId = postedOverDraftJournalRecId
                    where sKS_IHB_CalculatedInterestSummary.ValueDate == previousPeriodEndDate
                    && sKS_IHB_CalculatedInterestSummary.BankAccountID == sKS_PP_Bank.BankAccountId;
                postedOverDraftJournalRecId = 0;// SKS_Bug_12045
                postedOverDraftledgerJournalTrans.clear();
                select firstonly sKS_IHB_CalculatedInterestSummaryLoc
                where sKS_IHB_CalculatedInterestSummaryLoc.ParentGLRecId == parentJouranlRecId
                    && sKS_IHB_CalculatedInterestSummaryLoc.BankAccountID == sKS_PP_Bank.BankAccountId;

                if(sKS_IHB_CalculatedInterestSummaryLoc && sKS_PP_Bank.IHB_OD_SendEmail == NoYes::Yes)
                {
                    int clacRecIdCnt = conLen(calculationSummaryRecId);
                    clacRecIdCnt++;
                    calculationSummaryRecId = conIns(calculationSummaryRecId, clacRecIdCnt, sKS_IHB_CalculatedInterestSummaryLoc.RecId);
                }
                // SKS_FDD_9848 <--
            }

            if (parentledgerJournaltable.RecId)
            {
                this.submitPosting(sKS_PP_Bank, parentledgerJournaltable);
            }
            bankAccountTransRec.skipDataMethods(true); // SKS_FDD_9848
            update_recordset bankAccountTransRec
            setting SKS_IHB_InterestCalculated = NoYes::Yes
            where bankAccountTransRec.SKS_IHB_InterestCalculated == NoYes::No
                && bankAccountTransRec.SKS_IHB_ValueDate >= StartDate
                && bankAccountTransRec.SKS_IHB_ValueDate <= EndDate
                && bankAccountTransRec.AccountId == sKS_PP_Bank.BankAccountId;

            sKS_IHB_InterestRates.clear();
            sKS_IHB_InterestMarkup.clear();
            parentledgerJournaltable.clear();
            previousCalculationBase = 0;
            previouslyPostedInterest = 0;
            //summaryNonCompountIntAccumulate = 0; //FDD-11448 //SKS_Bug_12270
            sKS_IHB_CalculatedInterestPrev.clear(); //SKS_Bug_12045
            nonCompountInterestAccumulate = 0;//SKS_Bug_12270
        }
        //SKS_13971_interestsummaryhistory -->
        SKS_IHB_CalculatedInterestHistory SKS_IHB_CalculatedInterestupdate;
        TransDate fromdates,toDates;
        [fromdates, toDates] = this.getPerdiodStartEndDates(SKS_PP_Bank::find(calculatedInterestSummaryHistory.BankAccountID),calculatedInterestSummaryHistory.ValueDate);
        fromdates = this.getPreviousPeriodEndDate(SKS_PP_Bank::find(calculatedInterestSummaryHistory.BankAccountID),calculatedInterestSummaryHistory.ValueDate);
        update_recordset SKS_IHB_CalculatedInterestupdate
                setting voucher = calculatedInterestSummaryHistory.Voucher
                where SKS_IHB_CalculatedInterestupdate.BankAccountID == calculatedInterestSummaryHistory.BankAccountID
                && (SKS_IHB_CalculatedInterestupdate.valueDate >=  fromdates||
                SKS_IHB_CalculatedInterestupdate.valueDate <= toDates-1)
                && SKS_IHB_CalculatedInterestupdate.voucher == '';
        //SKS_13971_interestsummaryhistory <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePostedJournal</Name>
				<Source><![CDATA[
    public LedgerJournalTable reversePostedJournal(RefRecId _refRecId, TransDate _postingDate, TransDate _documentDate, LedgerJournalTable _ledgerJournaltable,
        boolean overDraftReversal = false, SKS_PP_Bank _sKS_PP_Bank = null)  // SKS_FDD_9848 SKS_Bug_12341
    {
        Voucher             voucher;
        LedgerJournalTable  ledgerJournaltable;
        LedgerJournalTrans  ledgerJournalTrans = LedgerJournalTrans::findRecId(_refRecId, false);
        LedgerJournalTrans  ledgerJournalTransLoc;
        SKS_IHB_CalculatedInterestPostedJournals    interestPostedJournals; //FDD-11448
        LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(LedgerJournalType::Payment);
        SKS_PP_Setup    sKS_PP_SetupLoc = SKS_PP_Setup::find();
        SKS_PP_Bank     SKS_PP_BankLoc;//SKS_Bug_12754

        if (!sKS_PP_SetupLoc.IHB_GLJournalName)
        {
            throw error ("@SKS:SKGIHBInterestJournalValidation");
        }
        if (_ledgerJournaltable.RecId == 0)
        {
            ledgerJournaltable.clear();
            ledgerJournaltable.JournalName = sKS_PP_SetupLoc.IHB_GLJournalName;
            ledgerJournaltable.initFromLedgerJournalName(ledgerJournaltable.JournalName);
            ledgerJournaltable.insert();
        }
        else
        {
            ledgerJournaltable = _ledgerJournaltable;
        }

        if(ledgerJournalEngine.takeNewVoucher())
        {
            voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
        }

        TransDate reversalDate = SKS_PP_Sys::getReversalDate(ledgerJournalTrans.TransDate, true);

        SKS_EFT_Reversal::CreatePaymJournal(null, ledgerJournalTrans,null, reversalDate, sKS_PP_SetupLoc.IHB_GLJournalName, ledgerJournaltable,  voucher);

        ledgerJournalTrans = LedgerJournalTrans::findRecId(_refRecId, false);
        select forupdate firstonly ledgerJournalTransLoc
            where ledgerJournalTransLoc.JournalNum == ledgerJournaltable.JournalNum
               && ledgerJournalTransLoc.Voucher == voucher;

        ledgerJournalTransLoc.SKS_IHB_IntercoAccountType     = ledgerJournalTrans.SKS_IHB_IntercoAccountType;
        ledgerJournalTransLoc.SKS_IHB_IntercoCompany         = ledgerJournalTrans.SKS_IHB_IntercoCompany;
        ledgerJournalTransLoc.SKS_IHB_IntercoLedgerDimension = ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension;
        //SKS_Bug_12754 -->
        //if the current bank have linkedin company setup but old posted transactions doesnot have linked company
        if(_sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany && ledgerJournalTrans.SKS_IHB_IntercoCompany == '')
        {
            changecompany(_sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
            {
                sks_PP_BankLoc = SKS_PP_Bank::find(_sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount, _sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany);
            }
            if(ledgerJournalTransLoc.AmountCurDebit)
            {
                ledgerJournalTransLoc.BankTransType   = sks_PP_BankLoc.IHB_InterestExpenseBankTransType;
                ledgerJournalTransLoc.SKS_IHB_IntercoLedgerDimension = sks_PP_BankLoc.IHB_InterestIncomeLedgerDimension;
            }
            else
            {
                ledgerJournalTransLoc.BankTransType  = sks_PP_BankLoc.IHB_InterestIncomeBankTransType;
                ledgerJournalTransLoc.SKS_IHB_IntercoLedgerDimension = sks_PP_BankLoc.IHB_InterestExpenseLedgerDimension;
            }
            ledgerJournalTransLoc.SKS_IHB_IntercoCompany = _sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany;
        }
        //SKS_Bug_12754 <--
        ledgerJournalTransLoc.DocumentDate                   = _documentDate;
        ledgerJournalTransLoc.TransDate                      = _postingDate;
        ledgerJournalTransLoc.Txt                            = "@SKS:SKGIHBInterestReversal";
         // SKS_FDD_9848 -->
        if(overDraftReversal)
        {
            ledgerJournalTransLoc.Txt = "@SKS:SKGIHBOverdraftRev";
        }
        // SKS_FDD_9848 <--
        ledgerJournalTransLoc.update();
        //FDD-11448 --->
        // for non-Compound, insert a interest related journal entry into SKS_IHB_CalculatedInterestPostedJournals table//SKS_Bug_12341
        if(ledgerJournalTrans && !overDraftReversal && _sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)//SKS_Bug_12341
        {                        
            interestPostedJournals = SKS_IHB_CalculatedInterestPostedJournals::findGLRecId(ledgerJournalTrans.RecId);
            if(!interestPostedJournals)
            {
                interestPostedJournals.clear();
                interestPostedJournals.GLRecId = ledgerJournalTrans.RecId;                
                interestPostedJournals.insert();
            }
        }
        // for non-Compound, insert a interest related journal entry into SKS_IHB_CalculatedInterestPostedJournals table//SKS_Bug_12341
        if(ledgerJournalTransLoc && !overDraftReversal && _sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)//SKS_Bug_12341
        {                                    
            interestPostedJournals = SKS_IHB_CalculatedInterestPostedJournals::findGLRecId(ledgerJournalTransLoc.RecId);
            if(!interestPostedJournals)
            {
                //SKS_Bug_12341 -->
                interestPostedJournals.clear();
                interestPostedJournals.GLRecId = ledgerJournalTransLoc.RecId;                
                interestPostedJournals.insert();
                //SKS_Bug_12341 <--
            }                
        }
        //<--- FDD-11448
        return ledgerJournaltable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInterest</Name>
				<Source><![CDATA[
        public LedgerJournalTable postInterest(
        SKS_PP_Bank _sKS_PP_Bank,
        TransDate _postingDate,
        TransDate _documentDate,
        LedgerJournalTable _ledgerJournaltable,
        boolean _createAppropriateJournal = false,
        Amountcur _appropriateAmt = 0,
        boolean _createOverDraftJournal = false,
        Amountcur _overDraftAmt = 0) // SKS_FDD_9848
    {
        LedgerJournalTable ledgerJournaltable;
        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalEngine ledgerJournalEngine = LedgerJournalEngine::construct(LedgerJournalType::Payment);
        SKS_PP_Setup    sKS_PP_SetupLoc = SKS_PP_Setup::find();
        SKS_PP_Bank sKS_PP_BankLoc;
        SKS_IHB_CalculatedInterestPostedJournals    interestPostedJournals; //FDD-11448

        if(_sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany != '')
        {
            changecompany (_sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
            {
                sKS_PP_BankLoc = SKS_PP_BanK::find(_sKS_PP_Bank.SKS_IHBLinkedinhousebankaccount);
            }
            // SKS_Bug_10908 -->
            if(sKS_PP_BankLoc)
            {
                if(_createAppropriateJournal && !sKS_PP_BankLoc.IHB_AppropriationFeeLedgerAccount && _sKS_PP_Bank.IHB_AppropriationfeeID) //SKS_Bug_10908
                {
                    throw error(strFmt("@SYS76498", "@SYS76997", sKS_PP_BankLoc.DataAreaId) + "@ElectronicReporting:ComponentDetailsSeparator" + strFmt("@SKS:SKGIHBCalPostingValidation", "@SKS:SKGIHBAppropriationfee", sKS_PP_BankLoc.BankAccountId));
                }
                if(_createOverDraftJournal && !sKS_PP_BankLoc.IHB_OverdraftInterestLedgerAccount && _sKS_PP_Bank.IHB_OverdraftInterestID) //SKS_Bug_10908
                {
                    throw error(strFmt("@SYS76498", "@SYS76997", sKS_PP_BankLoc.DataAreaId) + "@ElectronicReporting:ComponentDetailsSeparator" + strFmt("@SKS:SKGIHBCalPostingValidation", "@SKS:SKGIHBOverdraftInterest", sKS_PP_BankLoc.BankAccountId));
                }
            }
            // SKS_Bug_10908 <--
        }
        else
        {
            sKS_PP_BankLoc = _sKS_PP_Bank;
        }

        if (!sKS_PP_SetupLoc.IHB_GLJournalName)
        {
            throw error ("@SKS:SKGIHBInterestJournalValidation");
        }
        if (_ledgerJournaltable.RecId == 0)
        {
            ledgerJournaltable.clear();
            ledgerJournaltable.JournalName = sKS_PP_SetupLoc.IHB_GLJournalName;
            ledgerJournaltable.initFromLedgerJournalName(ledgerJournaltable.JournalName);
            ledgerJournaltable.insert();
        }
        else
        {
            ledgerJournaltable = _ledgerJournaltable;
        }

        ledgerJournalTrans.Company = curext();
        ledgerJournalTrans.TransactionType = LedgerTransType::Payment;
        ledgerJournalTrans.JournalNum   = ledgerJournaltable.JournalNum;
        ledgerJournalTrans.DocumentDate = _documentDate;
        ledgerJournalTrans.TransDate    = _postingDate;
        ledgerJournalTrans.AccountType  = LedgerJournalACType::Bank;
        ledgerJournalTrans.LedgerDimension = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(_sKS_PP_Bank.BankAccountId, LedgerJournalACType::Bank);
        ledgerJournalEngine.accountModified(ledgerJournalTrans);
        ledgerJournalEngine.initTaxItemGroup(ledgerJournalTrans);
        if(ledgerJournalEngine.takeNewVoucher())
        {
            ledgerJournalTrans.Voucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTable)).getNew(false);
        }
        ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
        ledgerJournalTrans.PaymSpec = '';
        ledgerJournalTrans.PaymReference = '';
        ledgerJournalTrans.SKS_IHB_IntercoCompany = _sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany;
        ledgerJournalTrans.SKS_IHB_IntercoAccountType = LedgerJournalACType::Ledger;
        if(totalInterest>0)
        {
            if (!_sKS_PP_Bank.IHB_InterestIncomeLedgerDimension)
            {
                throw error(strFmt("@SYS76498", "@SYS76997", _sKS_PP_Bank.DataAreaId) + "@ElectronicReporting:ComponentDetailsSeparator" + strFmt("@SKS:SKGIHBInterestCalculationPostingAccountsValidation", _sKS_PP_Bank.BankAccountId));
            }
            ledgerJournalTrans.AmountCurDebit = totalInterest;
            ledgerJournalTrans.AmountCurCredit = 0.0;//SKS_Bug_12344
            ledgerJournalTrans.BankTransType  = _sKS_PP_Bank.IHB_InterestIncomeBankTransType;
            ledgerJournalTrans.OffsetLedgerDimension = _sKS_PP_Bank.IHB_InterestIncomeLedgerDimension;
            ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension = sKS_PP_BankLoc.IHB_InterestExpenseLedgerDimension;
        }
        else
        {
            if (!_sKS_PP_Bank.IHB_InterestExpenseLedgerDimension)
            {
                throw error(strFmt("@SYS76498", "@SYS76997", _sKS_PP_Bank.DataAreaId) + "@ElectronicReporting:ComponentDetailsSeparator" + strFmt("@SKS:SKGIHBInterestCalculationPostingAccountsValidation", _sKS_PP_Bank.BankAccountId));
            }
            ledgerJournalTrans.AmountCurCredit = totalInterest * -1;
            ledgerJournalTrans.AmountCurDebit  = 0.0; //SKS_Bug_12344
            ledgerJournalTrans.BankTransType   = _sKS_PP_Bank.IHB_InterestExpenseBankTransType;
            ledgerJournalTrans.OffsetLedgerDimension = _sKS_PP_Bank.IHB_InterestExpenseLedgerDimension;
            ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension = sKS_PP_BankLoc.IHB_InterestIncomeLedgerDimension;
        }
        // SKS_FDD_9848 -->
        if(_createOverDraftJournal && _overDraftAmt != 0)
        {
            ledgerJournalTrans.AmountCurDebit = _overDraftAmt;
            ledgerJournalTrans.AmountCurCredit = 0.0;//SKS_Bug_12344
            if(!_sKS_PP_Bank.IHB_OverdraftInterestLedgerAccount)
            {
                throw error(strFmt("@SYS76498", "@SYS76997", _sKS_PP_Bank.DataAreaId) + "@ElectronicReporting:ComponentDetailsSeparator" + strFmt("@SKS:SKGIHBInterestCalculationPostingAccountsValidation", _sKS_PP_Bank.BankAccountId));
            }
            ledgerJournalTrans.OffsetLedgerDimension = _sKS_PP_Bank.IHB_OverdraftInterestLedgerAccount;
            ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension = sKS_PP_BankLoc.IHB_OverdraftInterestLedgerAccount;
        }
        if(_createAppropriateJournal && _appropriateAmt != 0)
        {
            ledgerJournalTrans.AmountCurDebit = _appropriateAmt;
            ledgerJournalTrans.AmountCurCredit = 0.0;//SKS_Bug_12045
            if(!_sKS_PP_Bank.IHB_AppropriationFeeLedgerAccount)
            {
                throw error(strFmt("@SYS76498", "@SYS76997", _sKS_PP_Bank.DataAreaId) + "@ElectronicReporting:ComponentDetailsSeparator" + strFmt("@SKS:SKGIHBInterestCalculationPostingAccountsValidation", _sKS_PP_Bank.BankAccountId));
            }
            ledgerJournalTrans.OffsetLedgerDimension = _sKS_PP_Bank.IHB_AppropriationFeeLedgerAccount;
            ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension = sKS_PP_BankLoc.IHB_AppropriationFeeLedgerAccount;
        }
        // SKS_FDD_9848 <--
        ledgerJournalEngine.offsetAccountModified(ledgerJournalTrans);
        ledgerJournalTrans.company = curExt();
        ledgerJournalTrans.CashDiscAmount = 0;
        ledgerJournalTrans.CurrencyCode = this.parmCurrencyCode();
        ledgerJournalEngine.currencyModified(ledgerJournalTrans);
        ledgerJournalTrans.CashDiscCode = '';
        ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
        ledgerJournalTrans.Txt = "@SKS:SKGIHBCalculatedInterest";
        // SKS_FDD_9848 -->
        if(_createOverDraftJournal)
        {
            ledgerJournalTrans.Txt =  "@SKS:SKGIHBOverdraftInterest";
        }
        if(_createAppropriateJournal)
        {
            ledgerJournalTrans.Txt =  "@SKS:SKGIHBAppropriationfee";
        }
        // SKS_FDD_9848 <--
        if(ledgerJournalTrans.validateWrite())
        {
            ledgerJournalTrans.insert();
        }
        // SKS_FDD_9848 -->
        if(!_createAppropriateJournal && !_createOverDraftJournal)
        {
            this.parmLedgerJournalTrans(ledgerJournalTrans);
        }
        if(_createOverDraftJournal && _overDraftAmt != 0)
        {
            this.parmLedgerJournalTransOverDraftInterestLine(ledgerJournalTrans);
        }
        if(_createAppropriateJournal)
        {
            this.parmAppropriationFeeRecId(ledgerJournalTrans.RecId); //Bug 10960
        }
        // SKS_FDD_9848 <--
        // for non-Compound, insert a interest related journal entry into SKS_IHB_CalculatedInterestPostedJournals table //SKS_Bug_12341
        if(!_createOverDraftJournal && !_createAppropriateJournal && _sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)//SKS_Bug_12341
        {
            //FDD-11448 --->                        
            interestPostedJournals = SKS_IHB_CalculatedInterestPostedJournals::findGLRecId(ledgerJournalTrans.RecId);
            if(!interestPostedJournals)//SKS_Bug_12341
            {
                interestPostedJournals.clear();
                interestPostedJournals.GLRecId = ledgerJournalTrans.RecId;
                interestPostedJournals.insert();
            }                
            //<--- FDD-11448
        }

        //SKS_13971_interestsummaryhistory--->
        if(ledgerJournalTrans.Txt == "@SKS:SKGIHBCalculatedInterest")
        {
            calculationSummaryVoucher = ledgerJournalTrans.Voucher;
        }
        //SKS_13971_interestsummaryhistory<---

        return ledgerJournaltable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
     public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankEndDateMap</Name>
				<Source><![CDATA[
        //FDD-11448 --->
    public Map parmBankEndDateMap(Map _bankEndDateMap = bankEndDateMap)
    {
        bankEndDateMap = _bankEndDateMap;
        return bankEndDateMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculatedInterestSummary</Name>
				<Source><![CDATA[
    public RefRecId parmCalculatedInterestSummary(RefRecId _CalcInterestSummaryPostedGJ = CalcInterestSummaryPostedGJ)
    {
        CalcInterestSummaryPostedGJ = _CalcInterestSummaryPostedGJ;
        return CalcInterestSummaryPostedGJ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatedInterestDetails</Name>
				<Source><![CDATA[
        //<--- FDD-11448
    public static void calculatedInterestDetails(CompanyBankAccountId _companyBankAccountId, TransDate _transDate, SKS_IHB_CalculatedInterestDetails _sKS_IHB_CalculatedInterestDetails,
        sks_pp_bank _sks_PP_Bank) //FDD-11448
    {
        BankAccountTrans                    bankAccountTrans;
        LedgerJournalTrans                  ledgerJournalTrans; //FDD-11448 --->
        SKS_IHB_CalculatedInterestPostedJournals    interestPostedJournals;
        //<--- FDD-11448

        if(_sks_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Compound)
        {
            insert_recordset _sKS_IHB_CalculatedInterestDetails (AmountCur, TransDate, ValueDate, Voucher)
                select AmountCur, TransDate, SKS_IHB_ValueDate, Voucher from bankAccountTrans
                    where bankAccountTrans.AccountId == _companyBankAccountId
                       && bankAccountTrans.SKS_IHB_ValueDate == _transDate
                       && bankAccountTrans.SKS_IHB_InterestCalculated == NoYes::Yes
                       && bankAccountTrans.SKS_IHB_ValueDate != dateNull();
        }
        else //FDD-11448 --->
        {
            while select AmountCur, TransDate, SKS_IHB_ValueDate, Voucher from bankAccountTrans
                where bankAccountTrans.AccountId == _companyBankAccountId
                   && bankAccountTrans.SKS_IHB_ValueDate == _transDate
                   && bankAccountTrans.SKS_IHB_InterestCalculated == NoYes::Yes
                   && bankAccountTrans.SKS_IHB_ValueDate != dateNull()
            {
                //SKS_Bug_12341 -->
                ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(bankAccountTrans.Voucher, bankAccountTrans.TransDate);
                if(ledgerJournalTrans)
                {
                    interestPostedJournals = SKS_IHB_CalculatedInterestPostedJournals::findGLRecId(ledgerJournalTrans.RecId);
                    if(!interestPostedJournals)//SKS_Bug_12341 <--
                    {
                        _sKS_IHB_CalculatedInterestDetails.clear();
                        _sKS_IHB_CalculatedInterestDetails.AmountCur = bankAccountTrans.AmountCur;
                        _sKS_IHB_CalculatedInterestDetails.TransDate = bankAccountTrans.TransDate;
                        _sKS_IHB_CalculatedInterestDetails.ValueDate = bankAccountTrans.SKS_IHB_ValueDate;
                        _sKS_IHB_CalculatedInterestDetails.Voucher   = bankAccountTrans.Voucher;
                        _sKS_IHB_CalculatedInterestDetails.insert();
                    }
                }                
            }//<--- FDD-11448
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
        /// <summary>
        ///    Indicates whether the batch task can be seen in the batch journal.
        /// </summary>
        /// <returns>
        ///    Always returns true.
        /// </returns>
    public boolean canGoBatchJournal()
    {
        boolean ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    client server public static ClassDescription description()
    {
        return "@SYS19775";
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitPosting</Name>
				<Source><![CDATA[
    public void submitPosting(SKS_PP_Bank _sks_PP_Bank, LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalCheckPost  jourCheckPost;
        try
        {
            jourCheckPost = ledgerJournalCheckPost::newLedgerJournalTable(_ledgerJournalTable, NoYes::Yes, NoYes::Yes);
            jourCheckPost.run();
            info( strFmt("@SYS76498", "@SYS76997", _sks_PP_Bank.DataAreaId) + "@LeanProductionFlowVisualization:Separator" + strFmt("@SYS95692", _ledgerJournalTable.JournalNum));
        }
        catch
        {
            throw error("@SYS23002");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInterestForPeriod</Name>
				<Source><![CDATA[
     public AmountCur calculateInterestForPeriod (SKS_PP_Bank _sks_PP_Bank,
                                                TransDate _periodStartDate,
                                                Transdate _periodEndDate,
                                                AmountCur _calculationBase,
                                                SKS_IHB_InterestRates _sKS_IHB_InterestRates,
                                                SKS_IHB_InterestMarkup _sKS_IHB_InterestMarkup)

    {
        BankAccountTrans    bankAccountTrans = null;
        AmountCur calculationBase = _calculationBase; // FDD-11448
        boolean recordsFound;
        SKS_IHB_CalculatedInterest    locSKS_IHB_CalculatedInterest;

        while select sum(AmountCur), SKS_IHB_ValueDate from bankAccountTrans
                group by SKS_IHB_ValueDate
                order by SKS_IHB_ValueDate
                where bankAccountTrans.SKS_IHB_ValueDate >= _periodStartDate
                   && bankAccountTrans.SKS_IHB_ValueDate < _periodEndDate
                   && bankAccountTrans.AccountId == _sKS_PP_Bank.BankAccountId
                   && bankAccountTrans.SKS_IHB_ValueDate != dateNull()
        {
            recordsFound = true;

            this.createInterestLine(_sks_PP_Bank, bankAccountTrans.SKS_IHB_ValueDate, _periodEndDate, calculationBase, bankAccountTrans.AmountCur, _sKS_IHB_InterestRates, _sKS_IHB_InterestMarkup);

            calculationBase = calculationBase + bankAccountTrans.AmountCur;
            if (_sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded) //FDD-11448 --->
            {
                calculationBase = calculationBase - this.parmExcludeNonCompountInt();
                calculationBase = calculationBase - this.parmExcludePostedInterstAmt();
                this.parmExcludeNonCompountInt(0);
                this.parmExcludePostedInterstAmt(0);
            }
        }

        if(!recordsFound && firstRec)       //SKS_Bug_21012-->
        {
            recordsFound = true;
                
            SKS_IHB_CalculatedInterest     sKS_IHB_CalculatedInterestPrev;

            select sum(NewTransactionAmount), ValueDate from locSKS_IHB_CalculatedInterest
                group by ValueDate
                order by ValueDate
                where locSKS_IHB_CalculatedInterest.ValueDate >= _periodStartDate
                   && locSKS_IHB_CalculatedInterest.ValueDate < _periodEndDate
                   && locSKS_IHB_CalculatedInterest.BankAccountID == _sKS_PP_Bank.BankAccountId
                   && locSKS_IHB_CalculatedInterest.ValueDate != dateNull();

            delete_from sKS_IHB_CalculatedInterestPrev
                    where sKS_IHB_CalculatedInterestPrev.ValueDate >= _periodStartDate
                        && sKS_IHB_CalculatedInterestPrev.ValueDate < _periodEndDate
                        && sKS_IHB_CalculatedInterestPrev.BankAccountID == _sKS_PP_Bank.BankAccountId;

            if(locSKS_IHB_CalculatedInterest.ValueDate != dateNull())
            {
                this.createInterestLine(_sks_PP_Bank, locSKS_IHB_CalculatedInterest.ValueDate, _periodEndDate, calculationBase, locSKS_IHB_CalculatedInterest.NewTransactionAmount, _sKS_IHB_InterestRates, _sKS_IHB_InterestMarkup);
                calculationBase = calculationBase + locSKS_IHB_CalculatedInterest.NewTransactionAmount;
                if (_sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded) //FDD-11448 --->
                {
                    calculationBase = calculationBase - this.parmExcludeNonCompountInt();
                    calculationBase = calculationBase - this.parmExcludePostedInterstAmt();
                    this.parmExcludeNonCompountInt(0);
                    this.parmExcludePostedInterstAmt(0);
                }
            }
        }
        firstRec = false;
        //SKS_Bug_21012<----

        //SKS_Bug_12270 -->
        //summaryNonCompountIntAccumulate = summaryNonCompountIntAccumulate + nonCompountInterestAccumulate;
        //nonCompountInterestAccumulate = 0;        
        //SKS_Bug_12270 <--
        //<--- FDD-11448
        return calculationBase;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createInterestLine</Name>
				<Source><![CDATA[
    public void createInterestLine(SKS_PP_Bank _sks_PP_Bank,
                                        TransDate _valueDate,
                                        Transdate _periodEndDate,
                                        AmountCur _calculationBase,
                                        AmountCur _newTransactionAmount,
                                        SKS_IHB_InterestRates _sKS_IHB_InterestRates,
                                        SKS_IHB_InterestMarkup _sKS_IHB_InterestMarkup)
    {
        SKS_IHB_InterestMarkupDetail    sKS_IHB_InterestMarkupDetail;
        SKS_IHB_InterestRatesDetail     sKS_IHB_InterestRatesDetail;
        SKS_IHB_InterestMarkupDetail    sKS_IHB_InterestMarkupDetailPeriodEnd;
        SKS_IHB_InterestRatesDetail     sKS_IHB_InterestRatesDetailPeriodEnd;
        sKS_IHB_CalculatedInterest      sKS_IHB_CalculatedInterest;
        LedgerJournalTrans              ledgerJournalTransloc;
        AmountCur                       excludeNonCompountInterest = 0, excludePostedInterstAmount = 0;
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummary;
        BankAccountTrans                  bankAccountTransLoc;
        BankAccountTrans bankAccountTrans;
        TransDate nextTransDate;
        TransDate valueDate = _valueDate;
        Map interestRate = new Map(Types::Date, Types::Container);// SKS_FDD_9848
        MapEnumerator interestRateEnumerator;
        SKS_IHB_InterestRate sKS_IHB_InterestRate;
        SKS_IHB_Markup  sKS_IHB_Markup;
        // SKS_FDD_9848 -->
        SKS_IHB_InterestRate overDraftInterestRate;
        SKS_IHB_OverdraftInterestRatesDetails sKS_IHB_OverdraftInterestRateDetails;
        SKS_IHB_OverdraftInterestRatesDetails sKS_IHB_OverdraftInterestRateDetailsPeriodEnd;
        SKS_IHB_OverdraftInterestRates   sKS_IHB_OverdraftInterestRate;
        container   getInterestRatedetails;
        // SKS_FDD_9848 <--
        TransDate nextPeriodStartDate;

        select firstonly sKS_IHB_CalculatedInterest
            where sKS_IHB_CalculatedInterest.BankAccountID == _sks_PP_Bank.BankAccountId
               && sKS_IHB_CalculatedInterest.ValueDate == _valueDate;
        if (_sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded) //FDD-11448 --->
        {
            select sum(AmountCur) from bankAccountTransLoc
                where bankAccountTransLoc.AccountId == _sKS_PP_Bank.BankAccountId
                   && bankAccountTransLoc.SKS_IHB_ValueDate == _valueDate
            exists join ledgerJournalTransloc
                where ledgerJournalTransloc.Voucher   == bankAccountTransLoc.Voucher
                   && ledgerJournalTransloc.TransDate == bankAccountTransLoc.TransDate
                   && ledgerJournalTransloc.BankTransType == _sKS_PP_Bank.IHB_InterestRepaymentNonCompounded;
            excludeNonCompountInterest = bankAccountTransLoc.AmountCur;
            this.parmExcludeNonCompountInt(excludeNonCompountInterest);
            select sum(AmountCur) from bankAccountTransLoc
                where bankAccountTransLoc.AccountId == _sKS_PP_Bank.BankAccountId
                   && bankAccountTransLoc.SKS_IHB_ValueDate == _valueDate
            exists join ledgerJournalTransloc
                where ledgerJournalTransloc.Voucher   == bankAccountTransLoc.Voucher
                   && ledgerJournalTransloc.TransDate == bankAccountTransLoc.TransDate
            exists join sKS_IHB_CalculatedInterestSummary
                where sKS_IHB_CalculatedInterestSummary.ParentGLRecId == ledgerJournalTransloc.RecId;
                   //SKS_Bug_12127 -->
                   /*|| sKS_IHB_CalculatedInterestSummary.OverdraftParentGLRecId == ledgerJournalTransloc.RecId
                  || sKS_IHB_CalculatedInterestSummary.AppropriationParentGLRecId == ledgerJournalTransloc.RecId;*/
                  //SKS_Bug_12127 <--
            excludePostedInterstAmount = bankAccountTransLoc.AmountCur;
            this.parmExcludePostedInterstAmt(excludePostedInterstAmount);
        }
        if (_sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)
        {
            sKS_IHB_CalculatedInterest.NewTransactionAmount =  _newTransactionAmount - excludePostedInterstAmount;
            sKS_IHB_CalculatedInterest.CalculationBase = _calculationBase + _newTransactionAmount - excludeNonCompountInterest - excludePostedInterstAmount;
        }
        //FDD-11448 <---
        else
        {
            sKS_IHB_CalculatedInterest.NewTransactionAmount =  _newTransactionAmount;
            sKS_IHB_CalculatedInterest.CalculationBase = _calculationBase + _newTransactionAmount;
        }
        sKS_IHB_CalculatedInterest.BankAccountID   = _sKS_PP_Bank.BankAccountId;
        sKS_IHB_CalculatedInterest.ValueDate       = _valueDate;
        sKS_IHB_CalculatedInterest.InterestRateId  = _sKS_PP_Bank.IHB_InterestRateId;
        sKS_IHB_CalculatedInterest.MarkupId        = _sKS_PP_Bank.IHB_InterestMarkupId;
        // SKS_FDD_9848 -->
        sKS_IHB_CalculatedInterest.OverdraftInterestID = _sKS_PP_Bank.IHB_OverdraftInterestID;
        sKS_IHB_CalculatedInterest.AppropriationfeeID = _sKS_PP_Bank.IHB_AppropriationfeeID;
        // SKS_FDD_9848 <--

        select firstonly sKS_IHB_InterestMarkupDetail
                order by ValidFrom desc
            where sKS_IHB_InterestMarkupDetail.MarkupId == _sKS_IHB_InterestMarkup.RecId
                && sKS_IHB_InterestMarkupDetail.ValidFrom <= _valueDate;

        select firstonly sKS_IHB_InterestRatesDetail
                order by ValidFrom desc
            where sKS_IHB_InterestRatesDetail.InterestId == _sKS_IHB_InterestRates.RecId
                && sKS_IHB_InterestRatesDetail.ValidFrom <= _valueDate;

        select firstonly SKS_IHB_ValueDate from bankAccountTrans
                order by SKS_IHB_ValueDate
            where bankAccountTrans.SKS_IHB_ValueDate <= _periodEndDate
                && bankAccountTrans.SKS_IHB_ValueDate > _valueDate
                && bankAccountTrans.AccountId == _sKS_PP_Bank.BankAccountId;

        // SKS_FDD_9848 -->
        select firstonly RecId from sKS_IHB_OverdraftInterestRate
                where sKS_IHB_OverdraftInterestRate.OverdraftInterestID == _sKS_PP_Bank.IHB_OverdraftInterestID;
        if((sKS_IHB_CalculatedInterest.CalculationBase + sKS_IHB_CalculatedInterest.OverdraftBase) > _sKS_PP_Bank.IHB_AppropiationAmount)
        {
            select firstonly OverdraftInterest from sKS_IHB_OverdraftInterestRateDetails
                      order by ValidFrom desc
                where sKS_IHB_OverdraftInterestRateDetails.OverdraftInterestID == sKS_IHB_OverdraftInterestRate.RecId &&
                    sKS_IHB_OverdraftInterestRateDetails.ValidFrom <= _valueDate;
        }
        // SKS_FDD_9848 <--
        if (this.getPreviousPeriodEndDate(_sKS_PP_Bank, _periodEndDate) == _valueDate)
        {
            nextPeriodStartDate = this.getNextPeriodStartDate(_sKS_PP_Bank, _valueDate);
            select firstonly sKS_IHB_InterestMarkupDetailPeriodEnd
                where sKS_IHB_InterestMarkupDetailPeriodEnd.MarkupId == _sKS_IHB_InterestMarkup.RecId
                   && sKS_IHB_InterestMarkupDetailPeriodEnd.ValidFrom == nextPeriodStartDate;
            if (sKS_IHB_InterestMarkupDetailPeriodEnd.RecId)
            {
                sKS_IHB_InterestMarkupDetail.data(sKS_IHB_InterestMarkupDetailPeriodEnd);
                sKS_IHB_InterestMarkupDetailPeriodEnd.clear();
            }
            select firstonly sKS_IHB_InterestRatesDetailPeriodEnd
                where sKS_IHB_InterestRatesDetailPeriodEnd.InterestId == _sKS_IHB_InterestRates.RecId
                   && sKS_IHB_InterestRatesDetailPeriodEnd.ValidFrom == nextPeriodStartDate;
            if (sKS_IHB_InterestRatesDetailPeriodEnd.RecId)
            {
                sKS_IHB_InterestRatesDetail.data(sKS_IHB_InterestRatesDetailPeriodEnd);
                sKS_IHB_InterestRatesDetailPeriodEnd.clear();
            }
            if((sKS_IHB_CalculatedInterest.CalculationBase + sKS_IHB_CalculatedInterest.OverdraftBase) > _sKS_PP_Bank.IHB_AppropiationAmount)
            {
                select firstonly OverdraftInterest from sKS_IHB_OverdraftInterestRateDetailsPeriodEnd
                    where sKS_IHB_OverdraftInterestRateDetailsPeriodEnd.OverdraftInterestID == sKS_IHB_OverdraftInterestRate.RecId &&
                          sKS_IHB_OverdraftInterestRateDetailsPeriodEnd.ValidFrom == nextPeriodStartDate;
                if (sKS_IHB_OverdraftInterestRateDetailsPeriodEnd.RecId)
                {
                    sKS_IHB_OverdraftInterestRateDetails.data(sKS_IHB_OverdraftInterestRateDetailsPeriodEnd);
                    sKS_IHB_OverdraftInterestRateDetailsPeriodEnd.clear();
                }
            }
        }
        if (sKS_IHB_CalculatedInterest.CalculationBase > 0)
        {
            interestRate.insert(_valueDate, [sKS_IHB_InterestRatesDetail.InterestRate + sKS_IHB_InterestMarkupDetail.DebitMarkUp, sKS_IHB_OverdraftInterestRateDetails.OverdraftInterest]); // SKS_FDD_9848
            sKS_IHB_Markup = sKS_IHB_InterestMarkupDetail.DebitMarkUp;
        }
        else
        {
            interestRate.insert(_valueDate, [sKS_IHB_InterestRatesDetail.InterestRate - sKS_IHB_InterestMarkupDetail.CreditMarkUp]); // SKS_FDD_9848
            sKS_IHB_Markup = -sKS_IHB_InterestMarkupDetail.CreditMarkUp;
        }
        sKS_IHB_InterestRate = sKS_IHB_InterestRatesDetail.InterestRate;
        overDraftInterestRate = sKS_IHB_OverdraftInterestRateDetails.OverdraftInterest; // SKS_FDD_9848

        if (bankAccountTrans.RecId)
        {
            nextTransDate = bankAccountTrans.SKS_IHB_ValueDate;
        }
        else
        {
            nextTransDate =  _periodEndDate;
        }

        // if there is any interest rate or markup rate change between the current transaction and next transaction, need to split the interest calculation.
        valueDate++;
        while (valueDate < nextTransDate)
        {
            select firstonly sKS_IHB_InterestMarkupDetail
                order by ValidFrom desc
            where sKS_IHB_InterestMarkupDetail.MarkupId == _sKS_IHB_InterestMarkup.RecId
                && sKS_IHB_InterestMarkupDetail.ValidFrom == valueDate;

            if (sKS_IHB_InterestMarkupDetail.RecId)
            {
                if (sKS_IHB_CalculatedInterest.CalculationBase > 0)
                {
                    sKS_IHB_Markup = sKS_IHB_InterestMarkupDetail.DebitMarkUp;
                }
                else
                {
                    sKS_IHB_Markup = -sKS_IHB_InterestMarkupDetail.CreditMarkUp;
                }
            }

            select firstonly sKS_IHB_InterestRatesDetail
                order by ValidFrom desc
            where sKS_IHB_InterestRatesDetail.InterestId == _sKS_IHB_InterestRates.RecId
                && sKS_IHB_InterestRatesDetail.ValidFrom == valueDate;

            if (sKS_IHB_InterestRatesDetail.RecId)
            {
                sKS_IHB_InterestRate = sKS_IHB_InterestRatesDetail.InterestRate;
            }
            // SKS_FDD_9848 -->
            if ((sKS_IHB_CalculatedInterest.CalculationBase + sKS_IHB_CalculatedInterest.OverdraftBase) > _sks_PP_Bank.IHB_AppropiationAmount)
            {
                select firstonly OverdraftInterest from sKS_IHB_OverdraftInterestRateDetails
                    order by ValidFrom desc
                where sKS_IHB_OverdraftInterestRateDetails.OverdraftInterestID == sKS_IHB_OverdraftInterestRate.RecId &&
                    sKS_IHB_OverdraftInterestRateDetails.ValidFrom == valueDate;
            }

            if(sKS_IHB_OverdraftInterestRateDetails.RecId)
            {
                overDraftInterestRate = sKS_IHB_OverdraftInterestRateDetails.OverdraftInterest;
            }
            if (sKS_IHB_InterestMarkupDetail.RecId || sKS_IHB_InterestRatesDetail.RecId || sKS_IHB_OverdraftInterestRateDetails.RecId)
            {
                interestRate.insert(valueDate, [sKS_IHB_InterestRate + sKS_IHB_Markup, overDraftInterestRate]); // SKS_Bug_10959
            }
            // SKS_FDD_9848 <--
            valueDate++;
        }

        interestRate.insert(nextTransDate, [0]); // SKS_FDD_9848
        interestRateEnumerator = new MapEnumerator(interestRate);

        // for the period end transactions current calculation cycle.
        if (_valueDate != _periodEndDate)
        {
            interestRateEnumerator.moveNext();
            valueDate = interestRateEnumerator.currentKey();
            // SKS_FDD_9848 -->
            getInterestRatedetails = interestRateEnumerator.currentValue();
            sKS_IHB_InterestRate = conPeek(getInterestRatedetails, 1);
            if(conLen(getInterestRatedetails) > 1)
            {
                overDraftInterestRate = conPeek(getInterestRatedetails, 2);
            }
            // SKS_FDD_9848 <--
        }
        else
        {
            valueDate = _valueDate;
        }
        // enumerator current values will be next line info for the current Calculated interest line, next line info is needed to find the no. of days difference.
        while (interestRateEnumerator.moveNext())
        {
            nextTransDate =  interestRateEnumerator.currentKey();
            sKS_IHB_CalculatedInterest.DaysInterest = nextTransDate - valueDate;
            sKS_IHB_CalculatedInterest.InterestRate = sKS_IHB_InterestRate;
            sKS_IHB_CalculatedInterest.ValueDate = valueDate;
            if (sKS_IHB_CalculatedInterest.CalculationBase > 0)
            {
                // SKS_FDD_9848 -->
                // SKS_Bug_10885 -->
                sKS_IHB_CalculatedInterest.OverdraftBase = 0;
                if(_sks_PP_Bank.IHB_OverdraftInterestID &&
                    _sks_PP_Bank.IHB_AppropiationAmount > 0)
                {
                    // SKS_Bug_10885 <--
                    if(sKS_IHB_CalculatedInterest.CalculationBase > _sks_PP_Bank.IHB_AppropiationAmount)
                    {
                        sKS_IHB_CalculatedInterest.OverdraftBase = sKS_IHB_CalculatedInterest.CalculationBase - _sks_PP_Bank.IHB_AppropiationAmount;
                    }
                    else
                    {
                        sKS_IHB_CalculatedInterest.OverdraftBase   = 0 ;
                    }
                } // SKS_Bug_10885
                if(sKS_IHB_CalculatedInterest.OverdraftBase > 0)
                {
                    sKS_IHB_CalculatedInterest.CalculationBase = _sks_PP_Bank.IHB_AppropiationAmount;
                    sKS_IHB_CalculatedInterest.OverdraftInterestRate = sKS_IHB_InterestRate + overDraftInterestRate;
                    sKS_IHB_CalculatedInterest.OverdraftDebitInterest = decRound(((sKS_IHB_CalculatedInterest.OverdraftBase)/100) * sKS_IHB_CalculatedInterest.OverdraftInterestRate * (sKS_IHB_CalculatedInterest.DaysInterest/daysOfYear), 2);
                    totalOverDraftInterest = totalOverDraftInterest + sKS_IHB_CalculatedInterest.OverdraftDebitInterest;
                }
                sKS_IHB_CalculatedInterest.DebitInterest = decRound((sKS_IHB_CalculatedInterest.CalculationBase/100) * sKS_IHB_CalculatedInterest.InterestRate * (sKS_IHB_CalculatedInterest.DaysInterest/daysOfYear),2);
                totalInterest = totalInterest + sKS_IHB_CalculatedInterest.DebitInterest;
                sKS_IHB_CalculatedInterest.CreditInterest = 0;
                // SKS_FDD_9848 <--
                // SKS_Bug_12045 -->
                sKS_IHB_CalculatedInterest.TotalBase = sKS_IHB_CalculatedInterest.CalculationBase + sKS_IHB_CalculatedInterest.OverdraftBase +
                                                       sKS_IHB_CalculatedInterest.DebitInterest + sKS_IHB_CalculatedInterest.OverdraftDebitInterest;
                // SKS_Bug_12045 <--
            }
            else
            {
                sKS_IHB_CalculatedInterest.CreditInterest      = decRound((sKS_IHB_CalculatedInterest.CalculationBase/100) *sKS_IHB_CalculatedInterest.InterestRate * (sKS_IHB_CalculatedInterest.DaysInterest/daysOfYear),2);
                totalInterest = totalInterest + sKS_IHB_CalculatedInterest.CreditInterest;
                sKS_IHB_CalculatedInterest.DebitInterest = 0;
                // SKS_Bug_10961 -->
                sKS_IHB_CalculatedInterest.OverdraftBase = 0;
                sKS_IHB_CalculatedInterest.OverdraftDebitInterest = 0;
                sKS_IHB_CalculatedInterest.OverdraftInterestRate = 0;
                totalOverDraftInterest = totalOverDraftInterest + sKS_IHB_CalculatedInterest.OverdraftDebitInterest;
                sKS_IHB_CalculatedInterest.TotalBase = sKS_IHB_CalculatedInterest.CalculationBase + sKS_IHB_CalculatedInterest.OverdraftBase
                                                       // SKS_Bug_12045 -->
                                                       +sKS_IHB_CalculatedInterest.CreditInterest;
                                                       // SKS_Bug_12045 <--
                // SKS_Bug_10961 <--
            }
            if(_sks_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded) //FDD-11448 --->
            {
                if(sKS_IHB_CalculatedInterest.CalculationBase < 0)
                    sKS_IHB_CalculatedInterest.Noncompoundedinterest  = -(sKS_IHB_CalculatedInterest.DebitInterest + sKS_IHB_CalculatedInterest.OverdraftDebitInterest - sKS_IHB_CalculatedInterest.CreditInterest);
                else
                    sKS_IHB_CalculatedInterest.Noncompoundedinterest  = sKS_IHB_CalculatedInterest.DebitInterest - sKS_IHB_CalculatedInterest.CreditInterest;

                sKS_IHB_CalculatedInterest.Noncompoundedinterestaccumulated  = nonCompountInterestAccumulate
                                                                               + sKS_IHB_CalculatedInterest.Noncompoundedinterest + excludeNonCompountInterest;
                nonCompountInterestAccumulate = sKS_IHB_CalculatedInterest.Noncompoundedinterestaccumulated;

            }
            else
            {
                sKS_IHB_CalculatedInterest.Noncompoundedinterest = 0;
            }
            //SKS_Bug_12270 -->
            if(_sks_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)
            {
                sKS_IHB_CalculatedInterest.TotalBase = sKS_IHB_CalculatedInterest.CalculationBase + sKS_IHB_CalculatedInterest.OverdraftBase
                                                       + sKS_IHB_CalculatedInterest.OverdraftDebitInterest + sKS_IHB_CalculatedInterest.Noncompoundedinterest;              
            }
            //SKS_Bug_12270 <--
            //<--- FDD-11448
            if (sKS_IHB_CalculatedInterest.RecId == 0)
            {
                sKS_IHB_CalculatedInterest.insert();
            }
            else
            {
                sKS_IHB_CalculatedInterest.selectForUpdate(true);
                sKS_IHB_CalculatedInterest.Recalculate = NoYes::No;
                sKS_IHB_CalculatedInterest.update();
            }
            // SKS_FDD_9848 -->
            getInterestRatedetails = interestRateEnumerator.currentValue();
            sKS_IHB_InterestRate = conPeek(getInterestRatedetails, 1);
            if(conLen(getInterestRatedetails) > 1)
            {
                overDraftInterestRate = conPeek(getInterestRatedetails, 2);
            }
            // SKS_FDD_9848 <--
            valueDate = nextTransDate;
            //SKS_13971_interestsummaryhistory -->
            if(sKS_IHB_CalculatedInterest)
            {
                this.createCalcInterestSummaryHistory(sKS_IHB_CalculatedInterest,tableNum(sKS_IHB_CalculatedInterest));
            }
            //SKS_13971_interestsummaryhistory <--
            sKS_IHB_CalculatedInterest = this.copyInterestCalculationLine(sKS_IHB_CalculatedInterest, valueDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePreReq</Name>
				<Source><![CDATA[
    public void validatePreReq(SKS_PP_Bank _sks_PP_Bank)
    {
        if (!_sks_PP_Bank.IHB_InterestRateId)
        {
            throw error(strFmt("@SKS:SKGIHBInterestCalculationInterestRateValidation", _sks_PP_Bank.BankAccountId));
        }

        if (!_sks_PP_Bank.IHB_InterestMarkupId)
        {
            throw error(strFmt("@SKS:SKGIHBInterestCalculationMarkUpIdValidation", _sks_PP_Bank.BankAccountId));
        }
        if (!_sks_PP_Bank.SKS_IHBInhouseBank)
        {
            throw error(strFmt("@SKS:SKGIHBInterestLinkedBankValidation", _sks_PP_Bank.BankAccountId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>previouslyPostedInterest</Name>
				<Source><![CDATA[
    public AmountCur previouslyPostedInterest(RefRecId _refRecId)
    {
        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(_refRecId, false);
        return ledgerJournalTrans.AmountCurDebit != 0 ? ledgerJournalTrans.AmountCurDebit : -ledgerJournalTrans.AmountCurCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyInterestCalculationLine</Name>
				<Source><![CDATA[
    public SKS_IHB_CalculatedInterest copyInterestCalculationLine(SKS_IHB_CalculatedInterest _sKS_IHB_CalculatedInterest, TransDate _valueDate)
    {
        SKS_IHB_CalculatedInterest sKS_IHB_CalculatedInterest;

        select firstonly sKS_IHB_CalculatedInterest
            where sKS_IHB_CalculatedInterest.BankAccountID == _sKS_IHB_CalculatedInterest.BankAccountId
               && sKS_IHB_CalculatedInterest.ValueDate == _valueDate;

        sKS_IHB_CalculatedInterest.BankAccountID = _sKS_IHB_CalculatedInterest.BankAccountID;
        sKS_IHB_CalculatedInterest.InterestRateId = _sKS_IHB_CalculatedInterest.InterestRateId;
        sKS_IHB_CalculatedInterest.MarkupId = _sKS_IHB_CalculatedInterest.MarkupId;
        sKS_IHB_CalculatedInterest.CalculationBase = _sKS_IHB_CalculatedInterest.CalculationBase + _sKS_IHB_CalculatedInterest.OverdraftBase;
        // SKS_FDD_9848 -->
        sKS_IHB_CalculatedInterest.OverdraftInterestID = _sKS_IHB_CalculatedInterest.OverdraftInterestID;
        sKS_IHB_CalculatedInterest.AppropriationfeeID = _sKS_IHB_CalculatedInterest.AppropriationfeeID;
        // SKS_FDD_9848 <--

        return  sKS_IHB_CalculatedInterest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePreviousCycleData</Name>
				<Source><![CDATA[
     private AmountCur reversePreviousCycleData(TransDate _periodStartDate,
                                               TransDate _periodEndDate,
                                               TransDate _postingDate,
                                               SKS_PP_Bank _sKS_PP_Bank)
    {
        SKS_IHB_CalculatedInterest sKS_IHB_CalculatedInterestPrev;
        AmountCur   previouslyPostedInterest;
        // SKS_FDD_9848 -->
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummary;
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummaryLoc;
        // SKS_FDD_9848 <--

        // Find if the interest got posted earlier for the same period.
        // SKS_FDD_9848 -->
        select firstonly ParentGLRecId from sKS_IHB_CalculatedInterestSummaryLoc
            where  sKS_IHB_CalculatedInterestSummaryLoc.ValueDate     == _periodEndDate
                && sKS_IHB_CalculatedInterestSummaryLoc.ParentGLRecId != 0
                && sKS_IHB_CalculatedInterestSummaryLoc.BankAccountID == _sKS_PP_Bank.BankAccountId;

        select firstonly OverdraftParentGLRecId from sKS_IHB_CalculatedInterestSummary
            where sKS_IHB_CalculatedInterestSummary.ValueDate == _periodEndDate
                && sKS_IHB_CalculatedInterestSummary.OverdraftParentGLRecId != 0
                && sKS_IHB_CalculatedInterestSummary.BankAccountID == _sKS_PP_Bank.BankAccountId;

        if(sKS_IHB_CalculatedInterestSummaryLoc.ParentGLRecId)
        {
            previouslyPostedInterest = this.previouslyPostedInterest(sKS_IHB_CalculatedInterestSummaryLoc.ParentGLRecId);
            this.parmPrevInterestAmount(previouslyPostedInterest);//SKS_Bug_12270
            parentledgerJournaltable =  this.reversePostedJournal(sKS_IHB_CalculatedInterestSummaryLoc.ParentGLRecId, _postingDate, _periodEndDate, parentledgerJournaltable, false, _sKS_PP_Bank);//SKS_Bug_12341
        }
        if(sKS_IHB_CalculatedInterestSummary.OverdraftParentGLRecId)
        {
            previouslyPostedInterest += this.previouslyPostedInterest(sKS_IHB_CalculatedInterestSummary.OverdraftParentGLRecId);
            this.parmPrevODInterestAmount(previouslyPostedInterest);//SKS_Bug_12270
            parentledgerJournaltable =  this.reversePostedJournal(sKS_IHB_CalculatedInterestSummary.OverdraftParentGLRecId, _postingDate, _periodEndDate, parentledgerJournaltable, true, _sKS_PP_Bank);//SKS_Bug_12341
        }
        // SKS_FDD_9848 <--
        // delete the interest lines for the period if exists
        
        //SKS_Bug_21012---->
        if(firstRec)
        {
            BankAccountTrans bankaccounttrans;

            select count(RecId) from bankaccounttrans
                where bankaccounttrans.SKS_IHB_ValueDate >= _periodStartDate
                    && bankaccounttrans.SKS_IHB_ValueDate < _periodEndDate
                    && bankaccounttrans.AccountId == _sKS_PP_Bank.BankAccountId;

            if(bankaccounttrans.RecId > 0)
            {
                delete_from sKS_IHB_CalculatedInterestPrev
                    where sKS_IHB_CalculatedInterestPrev.ValueDate >= _periodStartDate
                        && sKS_IHB_CalculatedInterestPrev.ValueDate < _periodEndDate
                        && sKS_IHB_CalculatedInterestPrev.BankAccountID == _sKS_PP_Bank.BankAccountId;
            }
        }       //SKS_Bug_21012<----
        else
        {
            delete_from sKS_IHB_CalculatedInterestPrev
                    where sKS_IHB_CalculatedInterestPrev.ValueDate >= _periodStartDate
                        && sKS_IHB_CalculatedInterestPrev.ValueDate < _periodEndDate
                        && sKS_IHB_CalculatedInterestPrev.BankAccountID == _sKS_PP_Bank.BankAccountId;
        }

        return previouslyPostedInterest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCalculatedInterestSummary</Name>
				<Source><![CDATA[
        /// <summary>
        /// Insert the Calculated interest summary details.
        /// </summary>
        // SKS_FDD_9848
     public void insertCalculatedInterestSummary(SKS_PP_Bank _sKS_PP_Bank,
        TransDate _postingDate,
        AmountCur   _calculationInterestBase,
        AmountCur   _overDraftBase,
        Amountcur   _appropriationFee,
        RefRecId    _appropriationFeeRecId,
        Voucher     _voucher) //Bug 10960
    {
        SKS_IHB_CalculatedInterestSummary  calculatedInterestSummary;
        //SKS_IHB_CalculatedInterestPostedJournals    interestPostedJournals;//SKS_Bug_12341

        ttsbegin;
        select calculatedInterestSummary
            where calculatedInterestSummary.BankAccountID == _sKS_PP_Bank.BankAccountId &&
                calculatedInterestSummary.ValueDate == _postingDate;

        calculatedInterestSummary.BankAccountID         = _sKS_PP_Bank.BankAccountId;
        calculatedInterestSummary.ValueDate             = _postingDate;
        calculatedInterestSummary.CalculationFrequency  = _sKS_PP_Bank.IHB_InterestCalcFreq;
        calculatedInterestSummary.Voucher               = _voucher; //SKS_13971_interestsummaryhistory

        //SKS_FDD_11448 -->
        if(_sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)
        {
            calculatedInterestSummary.Noncompoundedinterest = totalInterest;
            calculatedInterestSummary.Interest = 0;
            calculatedInterestSummary.Noncompoundedinterestaccumulated = nonCompountInterestAccumulate;//SKS_Bug_12270
        }
        else //SKS_FDD_11448 <--
        {
            calculatedInterestSummary.Interest              = totalInterest;
            calculatedInterestSummary.Noncompoundedinterest = 0; //FDD-11448
        }

        calculatedInterestSummary.OverdraftInterest     = totalOverDraftInterest;
        calculatedInterestSummary.Appropriationfee      = _appropriationFee;
        //Bug 10960 -->
        if(_appropriationFeeRecId)
        {
            calculatedInterestSummary.AppropriationParentGLRecId = _appropriationFeeRecId;
        }
        //Bug 10960 <--
        if(totalOverDraftInterest > 0 && _overDraftBase > 0) // SKS_Bug_10961
        {
            calculatedInterestSummary.OverdraftBase = _overDraftBase;
        }
        // SKS_Bug_11803 -->
        else if(_overDraftBase > 0)
        {
            calculatedInterestSummary.OverdraftBase = _overDraftBase;
        }
        // SKS_Bug_11803 <--
        // SKS_Bug_10961 -->
        else
        {
            calculatedInterestSummary.OverdraftBase = 0;
        }
        // SKS_Bug_10961 <--
        if(_sKS_PP_Bank.IHB_OverdraftInterestID &&
            _sKS_PP_Bank.IHB_AppropiationAmount > 0 &&
            (_calculationInterestBase > _sKS_PP_Bank.IHB_AppropiationAmount)) // SKS_Bug_10885
        {
            calculatedInterestSummary.InterestBase = _sKS_PP_Bank.IHB_AppropiationAmount;
            calculatedInterestSummary.OverdraftBase = _calculationInterestBase - _sKS_PP_Bank.IHB_AppropiationAmount;
        }
        //21 dec start
        else
        {
            calculatedInterestSummary.InterestBase = _calculationInterestBase;
            calculatedInterestSummary.OverdraftBase = 0;
        }
        //SKS_FDD_11448 -->
        if(_sKS_PP_Bank.IHB_InterestCalcMethod == SKS_IHB_InterestCalcMeth::Noncompounded)
        {
            //SKS_Bug_12127 -->
            //calculatedInterestSummary.TotalBase = calculatedInterestSummary.InterestBase + calculatedInterestSummary.OverdraftBase + calculatedInterestSummary.Noncompoundedinterest + _appropriationFee + totalOverDraftInterest; //FDD-11448
            calculatedInterestSummary.TotalBase = calculatedInterestSummary.InterestBase + calculatedInterestSummary.OverdraftBase +
                                                  calculatedInterestSummary.Noncompoundedinterestaccumulated;
            //SKS_Bug_12127 <--
        }
        //SKS_FDD_11448 <--
        else
        {
            calculatedInterestSummary.TotalBase = calculatedInterestSummary.InterestBase + calculatedInterestSummary.OverdraftBase;
        }
        if(!calculatedInterestSummary)
        {
            calculatedInterestSummary.insert();
        }
        else
        {
            calculatedInterestSummary.selectForUpdate(true);
            calculatedInterestSummary.update();
        }       
        _appropriationFeeRecId = 0;// SKS_Bug_12045
        ttscommit;
        //SKS_13971_interestsummaryhistory -->
        TransDate fromdates,toDates;
        [fromdates, toDates] = this.getPerdiodStartEndDates(SKS_PP_Bank::find(calculatedInterestSummaryHistory.BankAccountID),calculatedInterestSummaryHistory.ValueDate);
        fromdates = this.getPreviousPeriodEndDate(SKS_PP_Bank::find(calculatedInterestSummaryHistory.BankAccountID),calculatedInterestSummaryHistory.ValueDate);

        if(calculatedInterestSummary)
        {
            this.createCalcInterestSummaryHistory(calculatedInterestSummary,tableNum(SKS_IHB_CalculatedInterestSummary));
            SKS_IHB_CalculatedInterestHistory SKS_IHB_CalculatedInterestupdate;
            
            update_recordset SKS_IHB_CalculatedInterestupdate
                setting voucher = calculatedInterestSummaryHistory.Voucher
                where SKS_IHB_CalculatedInterestupdate.BankAccountID == calculatedInterestSummaryHistory.BankAccountID
                && (SKS_IHB_CalculatedInterestupdate.valueDate >=  fromdates||
                SKS_IHB_CalculatedInterestupdate.valueDate <= toDates-1)
                &&SKS_IHB_CalculatedInterestupdate.voucher == '';
        }
        //SKS_13971_interestsummaryhistory <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>appropriationFeeCalculation</Name>
				<Source><![CDATA[
        /// <summary>
        /// Calculate the Appropriation fee.
        /// </summary>
        /// <param name = "_sKS_PP_Bank">It contains the <c>SKS_PP_Bank</c> table buffer.</param>
        /// <returns>Return calculated appropriation Amount.</returns>
        // SKS_FDD_9848
    public AmountCur appropriationFeeCalculation(SKS_PP_Bank _sKS_PP_Bank, TransDate _valueDate)
    {
        AmountCur calculatedAppropriationFee;
        SKS_IHB_AppropriationfeesDetails sKS_IHB_AppropriationFeesDetails;
        SKS_IHB_AppropriationFees appropriationFee;

        select firstonly RecId from appropriationFee
                where appropriationFee.AppropriationFeeID == _sKS_PP_Bank.IHB_AppropriationFeeID;

        select firstonly AppropriationFee from sKS_IHB_AppropriationFeesDetails
            order by ValidFrom desc
                where sKS_IHB_AppropriationFeesDetails.AppropriationfeeID == appropriationFee.RecId
                && sKS_IHB_AppropriationFeesDetails.ValidFrom <= _valueDate;
        if(sKS_IHB_AppropriationFeesDetails)
        {
            if(_sKS_PP_Bank.IHB_InterestCalcFreq == SKS_IHB_InterestCalcFreq::Month)
            {
                calculatedAppropriationFee = decRound((_sKS_PP_Bank.IHB_AppropiationAmount * (sKS_IHB_AppropriationFeesDetails.AppropriationFee/100))/12, 2);
            }
            else
            {
                calculatedAppropriationFee =  decRound((_sKS_PP_Bank.IHB_AppropiationAmount * (sKS_IHB_AppropriationFeesDetails.AppropriationFee/100)), 2);
            }
        }
        return calculatedAppropriationFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAppropriationTrans</Name>
				<Source><![CDATA[
        /// <summary>
        /// Delete the appropriation transaction to avoid duplicate amount.
        /// </summary>
        /// <param name = "_sKS_PP_Bank">It contains the <c>SKS_PP_Bank</c>.</param>
        /// <param name = "_postingDate">It contains the posting date in summary.</param>
        // SKS_FDD_9848
    public SKS_IHB_CalculatedInterestSummary checkAppropriationTrans(SKS_PP_Bank _sKS_PP_Bank, TransDate _postingDate)
    {
        SKS_IHB_CalculatedInterestSummary sKS_IHB_CalculatedInterestSummary;

        select firstonly AppropriationParentGLRecId,Appropriationfee from sKS_IHB_CalculatedInterestSummary
            where sKS_IHB_CalculatedInterestSummary.ValueDate == _postingDate
                && sKS_IHB_CalculatedInterestSummary.AppropriationParentGLRecId != 0
                && sKS_IHB_CalculatedInterestSummary.BankAccountID == _sKS_PP_Bank.BankAccountId;

        return sKS_IHB_CalculatedInterestSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateInterestSummary</Name>
				<Source><![CDATA[
        /// <summary>
        ///
        /// </summary>
    public container parmCalculateInterestSummary(container _calculationSummaryRecId = calculationSummaryRecId)
    {
        calculationSummaryRecId = _calculationSummaryRecId;
        return calculationSummaryRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAppropriationFeeRecId</Name>
				<Source><![CDATA[
        //Bug 10960
    public RefRecId parmAppropriationFeeRecId(RefRecId _appropriationFeeRecId = appropriationFeeRecId)
    {
        appropriationFeeRecId = _appropriationFeeRecId;
        return appropriationFeeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevInterestAmount</Name>
				<Source><![CDATA[
    //SKS_Bug_12270 -->
    public AmountCur parmPrevInterestAmount(AmountCur _prevInterestAmount = prevInterestAmount)
    {
        prevInterestAmount = _prevInterestAmount;
        return prevInterestAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrevODInterestAmount</Name>
				<Source><![CDATA[
    public AmountCur parmPrevODInterestAmount(AmountCur _prevOverDraftInterestAmt = prevOverDraftInterestAmt)
    {
        prevOverDraftInterestAmt = _prevOverDraftInterestAmt;
        return prevOverDraftInterestAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCalcInterestSummaryHistory</Name>
				<Source><![CDATA[
    //SKS_Bug_12270 <--

    //SKS_13971_interestsummaryhistory -->
    public void createCalcInterestSummaryHistory(Common _common,TableId _tableId)
    {
        if(_tableId == tableNum(SKS_IHB_CalculatedInterestSummary))
        {
            SKS_IHB_CalculatedInterestSummary calculatedInterestSummary;

            calculatedInterestSummary = _common as SKS_IHB_CalculatedInterestSummary;

            calculatedInterestSummaryHistory.AppropriationParentGLRecId = calculatedInterestSummary.AppropriationParentGLRecId;
            calculatedInterestSummaryHistory.Appropriationfee = calculatedInterestSummary.Appropriationfee;
            calculatedInterestSummaryHistory.BankAccountID = calculatedInterestSummary.BankAccountID;
            calculatedInterestSummaryHistory.CalculationFrequency = calculatedInterestSummary.CalculationFrequency;
            calculatedInterestSummaryHistory.Interest = calculatedInterestSummary.Interest;
            calculatedInterestSummaryHistory.ValueDate = calculatedInterestSummary.ValueDate;
            calculatedInterestSummaryHistory.InterestBase = calculatedInterestSummary.InterestBase;
            calculatedInterestSummaryHistory.Noncompoundedinterest = calculatedInterestSummary.Noncompoundedinterest;
            calculatedInterestSummaryHistory.Noncompoundedinterestaccumulated = calculatedInterestSummary.Noncompoundedinterestaccumulated;
            calculatedInterestSummaryHistory.OverdraftBase = calculatedInterestSummary.OverdraftBase;
            calculatedInterestSummaryHistory.OverdraftInterest = calculatedInterestSummary.OverdraftInterest;
            calculatedInterestSummaryHistory.ParentGLRecId = calculatedInterestSummary.ParentGLRecId;
            calculatedInterestSummaryHistory.Voucher = calculatedInterestSummary.Voucher;
            calculatedInterestSummaryHistory.insert();
        }
        else if(_tableId == tableNum(sKS_IHB_CalculatedInterest))
        {
            SKS_IHB_CalculatedInterestHistory calculatedInterestHistory;
            RecordInsertList insCalcIntHistory;

            calculatedInterest = _common as sKS_IHB_CalculatedInterest;
            insCalcIntHistory = new RecordInsertList(tableNum(SKS_IHB_CalculatedInterestHistory)
            ,true,true,true,true,true,calculatedInterestHistory);

            calculatedInterestHistory.AppropriationfeeID = calculatedInterest.AppropriationfeeID;
            calculatedInterestHistory.BankAccountID = calculatedInterest.BankAccountID;
            calculatedInterestHistory.CalculationBase = calculatedInterest.CalculationBase;
            calculatedInterestHistory.CreditInterest = calculatedInterest.CreditInterest;
            calculatedInterestHistory.DaysInterest = calculatedInterest.DaysInterest;
            calculatedInterestHistory.DebitInterest = calculatedInterest.DebitInterest;
            calculatedInterestHistory.InterestRate = calculatedInterest.InterestRate;
            calculatedInterestHistory.InterestRateId = calculatedInterest.InterestRateId;
            calculatedInterestHistory.MarkupId = calculatedInterest.MarkupId;
            calculatedInterestHistory.NewTransactionAmount = calculatedInterest.NewTransactionAmount;
            calculatedInterestHistory.Noncompoundedinterest = calculatedInterest.Noncompoundedinterest;
            calculatedInterestHistory.Noncompoundedinterestaccumulated = calculatedInterest.Noncompoundedinterestaccumulated;
            calculatedInterestHistory.OverdraftBase = calculatedInterest.OverdraftBase;
            calculatedInterestHistory.OverdraftDebitInterest = calculatedInterest.OverdraftDebitInterest;
            calculatedInterestHistory.OverdraftInterestID = calculatedInterest.OverdraftInterestID;
            calculatedInterestHistory.OverdraftInterestRate = calculatedInterest.OverdraftInterestRate;
            calculatedInterestHistory.Recalculate = calculatedInterest.Recalculate;
            calculatedInterestHistory.ValueDate = calculatedInterest.ValueDate;
            calculatedInterestHistory.totalbase = calculatedInterest.TotalBase;
            insCalcIntHistory.add(calculatedInterestHistory);
            insCalcIntHistory.insertDatabase();
        }
    }
    //SKS_13971_interestsummaryhistory <--

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>