<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_TR_ISBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_TR_ISBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_TR_ISBANK_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20220312')
    #define.NURG('NURG')
    #define.URGP('URGP')
    #define.BKTR('BKTR')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName), 140);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                      Id
        //                      Tp/Ptry
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrAcctTp;
        str value;
        
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::No && subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) != 'CHK')
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
            
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
            
            if(mSKS_EFT_FileDetail.DepBankIBAN != '' )
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', mSKS_EFT_FileDetail.DepBankIBAN);
            }
            else
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
                
                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', mSKS_EFT_FileDetail.DepBankAcct, 34);
            }

            //              Tp
            //                  Cd/Ptry

            if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
            {
                value = 'SVGS';
            }
            else
            {
                value = 'CACC';
            }

            if(value == 'SVGS' || value == 'CACC')
            {
                nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', value);
            }
            else if (value != '')
            {
                nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Prtry', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeBrnchId;

        if(mSKS_EFT_FileDetail.DepSwiftNo != '' || mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
            
           //              FinInstnId
             nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
            
            if(mSKS_EFT_FileDetail.DepSwiftNo != '')
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
            }
            else
            {
                //                  ClrSysMmbId
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }

            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35, false);
            
            //                  PstlAdr
            this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
            
            if(mSKS_EFT_FileDetail_BenBank.BenBankBranch)
            {
                            //              BrnchId
               nodeBrnchId = nodeCdtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

                            //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankBranch), 35);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
        
        if(mSKS_EFT_FileDetail.DepBankTransit != '')
        {
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail.DepBankTransit, 35, false);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
        // Override in format if element is needed
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
        
        batchCount++;
        
        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec;
        
        
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
        
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
        
        //      2.2: PmtMtd
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);
        
        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));
        
        //      2.5: CtrlSum
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
        
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
        
        //      2.17: ReqdExctnDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate, DateSeparator::Hyphen));

        //      2.19: Dbtr
        this.node_PmtInf_Dbtr(nodePmtInf);
        
        //      2.20: DbtrAcct
        this.node_PmtInf_DbtrAcct(nodePmtInf);
        
        //      2.21: DbtrAgt
        this.node_PmtInf_DbtrAgt(nodePmtInf);
        
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    protected void node_PmtInf_BtchBookg(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.3: BtchBookg
        //------------------------------------------------------------------------------------------------------

        str value, btchbkg;

        btchbkg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #NURG:
            case #URGP:
            case #BKTR:
                if(strUpr(btchbkg) == 'Y')
                {
                    value = 'true';
                }
                else
                {
                    value = 'false';
                }
                break;
        }

        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'BtchBookg', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        this.node_PstlAdr(_nodeCdtr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr, mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, mSKS_EFT_FileDetail_VendAddress.BeneCity, 0, mSKS_EFT_FileDetail_VendAddress.BeneAddr2, mSKS_EFT_FileDetail_VendAddress.BeneState, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------

        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #NURG:
                value = 'SHAR';
                break;
            case #URGP:
                value = 'CRED';
                break;
            case #BKTR:
                value = 'DEBT';
                break;
        }

        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', value);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)),0,false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        str debitorId;

        debitorId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DebitorId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(debitorId)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
            
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
            
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
            
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', debitorId, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------

        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 140);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------

        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct_Id_Othr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct_Id_Othr(XmlElement _nodeAcctId)
    {
        //------------------------------------------------------------------------------------------------------
        //              Othr
        //                  Id
        //                  SchmeNm
        //                      Cd
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        XmlElement nodeDbtrAcctTp;
        str         value;
        
        if(mSKS_EFT_FileDetail.BankBankAcct)
        {
            //              Othr
            nodeOthr = _nodeAcctId.appendChild(xmlDoc.createElement('Othr'));
            
            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct, 34);
            
            //                  SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
            
            //                      Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BBAN');
            
            if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
            {
                value = 'SVGS';
            }
            else
            {
                value = 'CACC';
            }
            if(value == 'SVGS' || value == 'CACC')
            {
                nodeDbtrAcctTp = _nodeAcctId.appendChild(xmlDoc.createElement('Tp'));
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctTp, 'Cd', value);
            }
            //                      Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeAcctId, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);

            //                          Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeAcctId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 70);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              ClrSysMmbId
        //                  MmbId
        //              BIC (base class)
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------

        XmlElement nodeDbtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmBId;
        XmlElement nodeBrnchId;

        //      2.21: DbtrAgt
        nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));

        //          FinInstnId
        nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(mSKS_EFT_FileDetail.BankBankSwiftNo)
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.BankBankSwiftNo, 0, false);
        }
        else
        {
            //              ClrSysMmbId
            nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', mSKS_EFT_FileDetail.BankBankTransit, 35, false);
        }
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId)
        {
            //                  BrnchId
            nodeBrnchId = nodeDbtrAgt.appendChild(xmlDoc.createElement('BrnchId'));

            //              Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId), 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.8: SvcLvl
        //              2.9: Cd
        //          2.11: LclInstrm
        //              2.13: Prtry
        //          2.14: CtgyPurp
        //              2.15: Cd
        //------------------------------------------------------------------------------------------------------

        XmlElement  nodePmftTpInf;
        XmlElement  nodeSvcLvl;

        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

        //          2.8: SvcLvl
        nodeSvcLvl = nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));

        //              2.9: Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', mSKS_EFT_FileFormatPaymSpec.TransactionCode);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>