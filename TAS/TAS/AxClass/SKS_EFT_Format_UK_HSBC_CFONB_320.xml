<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_UK_HSBC_CFONB_320</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_UK_HSBC_CFONB_320 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_UK_HSBC_CFONB_320 extends SKS_EFT_Format
{
    int         mPaymentCount, itemSeqNum;
    str         batchSequence;
    int seqNum;
    AmountMST mPaymentAmount;
    #define.FormatVersion('20221212')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            this.rec_03();

            this.rec_04();

            this.rec_05();

            this.rec_08();

            next mSKS_EFT_FileDetail;
        }
        seqNum = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_03</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_03
    /// </summary>
    /// <returns>true/false</returns>
    public boolean rec_03()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str accntType,value,DebitType,SIRET;

        seqNum++;
        // 1    Entry code                                          2          (  1 -   2)
        sb.Append('03');

        // 2    Transaction code                                                         2          (  3 -   4)
        sb.Append('PI');

        // 3    Sequence N                                                         6          (  5 -   10)
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(seqNum, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Creation date                                              8          (  11 -  18)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        // 5    Ordering Party Name                                        35          ( 19 - 53)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)); 

        // 6    Ordering Party Address              35*3         ( 54 - 158)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7    SIRET NÂ° of issuer                                 14         (159 - 172)
        SIRET = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SIRET', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(14, this.CharacterReplacement(SIRET), SKS_PP_FillCharacter::space, SKS_PP_FillSide::Right));

        // 8    Remittance reference                             16          (173 - 188)
        sb.Append(SKS_PP_StringFormats::strFill(16, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Issuing bank BIC code                          11          ( 189 - 199)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10    Account to be debited type                    1         (200)
        accntType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AcctDebitedType', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(accntType), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));

        // 11    Account to be debited                           34          ( 201 - 234)
        if(str2Int(accntType) == 1)
        {
            //iban
            value =  mSKS_EFT_FileDetail.BankBankIBAN;
        }
        else if(str2Int(accntType) == 2)
        {
            //cash and bank mngmt bank accnt no
            value =  mSKS_EFT_FileDetail.BankBankAcct;
        }
        else
        {
            value = '';
        }
        sb.Append(SKS_PP_StringFormats::strFill(34, this.CharacterReplacement(value), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12    Currency code of account to be debited           3         (235 - 237 )
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.CurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    Client identification                           16        (238 - 253)
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //14    Charges account number type                     1          254
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //15    Charges account number                          34        255 to 288
        sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16    Charges account currency code                    3       289 to 291
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //17-1    Service Code                                    4          292 to 295
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //17-2    Priority instruction                      1          296
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //17-3    Date qualifier                    3          297 to 299
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //17-4    Reserved field                      8          300 to 307
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //18    Type of debit                     1          308
        DebitType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DebitType', mSKS_EFT_FileDetail.RecId));

        sb.Append(SKS_PP_StringFormats::strFill(1, DebitType, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //19    Type of remittance                     1          309
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //20    Desired execution date                     8          310 to 317
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //21    Transfer currency code                     3          318-320
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_04</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_04
    /// </summary>
    /// <returns>true/false</returns>
    public boolean rec_04()
    {
        str MethodOfPaym;
        str benAccntType;
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Entry code                            2    1-  2
        sb.Append('04');

        // 2        Transaction code                     2    3-   4
        sb.Append('PI');

        // 3    Sequence N                                                         6          (  5 -   10)
        seqNum++;
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(seqNum, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4        Beneficiary account number type            1    11
        benAccntType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BeneficiaryAcctType', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(benAccntType), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5        Beneficiary account number            34    12-     45
        if(str2Int(benAccntType) == 1)
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if (str2Int(benAccntType) == 2)
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 6        Name of beneficiary                     35    46- 80
        sb.Append(strUpr(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right)));

        // 7        Beneficiary Name Address                105 81- 185
        //   Beneficiary Address 1
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //    Beneficiary Address 2
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //        Beneficiary Address 3
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8        National ID of beneficiary                    17    186 to 202
        sb.Append(SKS_PP_StringFormats::strFill(17, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9        Country code of beneficiary                    2    203- 204
        sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10        Transaction reference                 16    205 to 220
        sb.Append(SKS_PP_StringFormats::strFill(16, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11        Nature of the amount               1    221
        sb.Append(SKS_PP_StringFormats::strFill(1, 'T', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 12        Reserved field                  4    222 to 225
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 13        Transaction amount                 15    226 to 239
        mPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        sb.Append(SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur*-1, 15));

        // 14        Number of decimal places        1    240
        //sb.Append(SKS_PP_StringFormats::strFill(1, '1', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 15        Reserved field                  1    241
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //16        Economic regulatory code        3   242 to 244
        sb.Append(SKS_PP_StringFormats::strFill(3, 'NNN', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //17        Country code for central bank reporting    2   245 to 246
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //18       Method of payment                1        247
        MethodOfPaym = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MethodOfPaym', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(MethodOfPaym), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //19      Details of Charges               2        248 to 249
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //20      Charges account number type      1        250
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //21      Charges account number          34        251 to 284
        sb.Append(SKS_PP_StringFormats::strFill(34, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //22      Currency of the charges account number    3        285 to 287
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 23        Reserved field                  22    288 to 309
        sb.Append(SKS_PP_StringFormats::strFill(22, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 24    Execution date                    8          (  310 -  317)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));

        //25      Transfer currency code       3        318-320
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.PaymentCurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_05</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_05
    /// </summary>
    /// <returns>true/false</returns>
    public boolean rec_05()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1        Entry code                       2    1-  2
        sb.Append('05');

        // 2        Transaction code                  2    3-   4
        sb.Append('PI');

        // 3    Sequence N                           6          (  5 -   10)
        seqNum++;
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(seqNum, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //4     Name of the beneficiaryâs bank           35    11 to 45
        sb.Append(SKS_PP_StringFormats::strFill(35, (this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //5   Address of beneficiaryâs bank            35* 3   46 to 150
        //    Beneficiary Bank Address 1 (Branch)
        sb.Append(SKS_PP_StringFormats::strFill(35,this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr) , SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //    Beneficiary Bank Address 2
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //    Beneficiary Bank Address 3
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //6  BIC code                            11    151 to 161
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //7  Beneficiary bankâs country code      2    162 to 163
        sb.Append(SKS_PP_StringFormats::strFill(2, this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //8  Reserved field                       157          164 to 320
        sb.Append(SKS_PP_StringFormats::strFill(157, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_08</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_08
    /// </summary>
    /// <returns>true/false</returns>
    public boolean rec_08()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str value,SIRET,accntType;

        seqNum++;
        // 1    Entry code                        2          (  1 -   2)
        sb.Append('08');

        // 2    Transaction code                  2          (  3 -   4)
        sb.Append('PI');

        // 3    Sequence N                        6          (  5 -   10)
        sb.Append(SKS_PP_StringFormats::strFill(6, num2Str(seqNum, 0,0,0,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Creation date                     8          (  11 -  18)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));

        // 5    Reserved field                    35*4          (19 - 158)
        sb.Append(SKS_PP_StringFormats::strFill(140, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Issuerâs SIRET NÂ°                                 14         (159 - 172)
        SIRET = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SIRET', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(14, this.CharacterReplacement(SIRET), SKS_PP_FillCharacter::space, SKS_PP_FillSide::Right));

        // 7    Remittance reference                             16          (173 - 188)
        sb.Append(SKS_PP_StringFormats::strFill(16, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Reserved field                                    11          (189 - 199)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Account to be debited type                        1         (200)
        accntType = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('AcctDebitedType', mSKS_EFT_FileDetail.RecId));
        sb.Append(SKS_PP_StringFormats::strFill(1, this.CharacterReplacement(accntType), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 10    Account to be debited                           34          ( 201 - 234)
        if(str2Int(accntType) == 1)
        {
            //iban
            value =  mSKS_EFT_FileDetail.BankBankIBAN;
        }
        else if(str2Int(accntType) == 2)
        {
            //cash and bank mngmt bank accnt no
            value =  mSKS_EFT_FileDetail.BankBankAcct;
        }
        else
        {
            value = '';
        }
        sb.Append(SKS_PP_StringFormats::strFill(34, this.CharacterReplacement(value), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //11    Currency code of account to be debited           3         (235 - 237 )
        sb.Append(SKS_PP_StringFormats::strFill(3, mSKS_EFT_FileDetail.CurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //12    Client identification                           16        (238 - 253)
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //13    CHECKING TOTAL                                  18          254 - 271
        sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount*-1, 18));

        //14    Reserved field                                  49          272 to 320
        sb.Append(SKS_PP_StringFormats::strFill(49, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------

        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select  * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
              order by mSKS_EFT_FileDetail.PaymentCompany,
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
            mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select firstonly * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>