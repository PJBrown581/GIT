<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CustDirectDebitMandateEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Cust table direct debit mandate event handler
/// </summary>
class SKS_CustDirectDebitMandateEventHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CustDirectDebitMandate_Post_doOpenTransactionsExistForMandate</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD-7182 Cancel Mandate with open invoices
    /// When the Direct debit Functionality is enabled in TAS parameters when a mandate is cancelled should be disabled.
    /// </summary>
    /// <param name="args">args</param>
    [PostHandlerFor(tableStr(CustDirectDebitMandate), tableStaticMethodStr(CustDirectDebitMandate, doOpenTransactionsExistForMandate))]
    public static void CustDirectDebitMandate_Post_doOpenTransactionsExistForMandate(XppPrePostArgs args)
    {
        SKS_EFT_Setup   sKS_EFT_Setup = SKS_EFT_Setup::find();

        if(sKS_EFT_Setup.ModAREFT)
        {
            args.setReturnValue(0);
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD-16340 while updating mandate status updating customer records.
    /// </summary>
    /// <param name="sender">Sender</param>
    /// <param name="e">EventArgs</param>
    [DataEventHandler(tableStr(CustDirectDebitMandate), DataEventType::Updated),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void CustDirectDebitMandate_onUpdated(Common sender, DataEventArgs e)
    {
        CustDirectDebitMandate custDirectDebitMandate = sender as CustDirectDebitMandate;
        CustTable   custTableLoc;
        SKS_DD_MandateMOPUpdates lSKS_DD_MandateMOPUpdates;

        
        if(custDirectDebitMandate.Status == CustMandateStatus::Canceled)
        {
            lSKS_DD_MandateMOPUpdates = SKS_DD_MandateMOPUpdates::findRecord(custDirectDebitMandate.SKS_EB_MandateType, custDirectDebitMandate.MandateScheme);

            select firstonly custTableLoc where custTableLoc.AccountNum == custDirectDebitMandate.CustAccount;

            if(lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesCancelUpdates == NoYes::Yes)
            {
                custTableLoc.PaymMode = lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesPaymModeCancel;
                custTableLoc.PaymSpec = lSKS_DD_MandateMOPUpdates.SKS_DD_MandatesPaymSpecCancel;

                ttsbegin;
                custTableLoc.selectForUpdate(true);
                custTableLoc.doupdate();
                ttscommit;

                SKS_EB_CustDirectDebitMandateEventHandler::updateCustomerOpenTransactionRecords(custTableLoc, CustMandateStatus::Canceled);
            }
        }
        else if(custDirectDebitMandate.getStatus() == CustMandateStatus::New)
        {
            SKS_EB_CustDirectDebitMandateEventHandler::updateCustTableRecords(custDirectDebitMandate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// FDD-16340 while updating mandate status updating customer records.
    /// </summary>
    /// <param name="sender">Sender</param>
    /// <param name="e">EventArgs</param>
    [DataEventHandler(tableStr(CustDirectDebitMandate), DataEventType::Inserted),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void CustDirectDebitMandate_onInserted(Common sender, DataEventArgs e)
    {
        CustDirectDebitMandate custDirectDebitMandate = sender as CustDirectDebitMandate;
        CustTable   custTableLoc;

        if(custDirectDebitMandate.getStatus() == CustMandateStatus::New)
        {
            SKS_EB_CustDirectDebitMandateEventHandler::updateCustTableRecords(custDirectDebitMandate);
           
            select firstOnly custTableLoc where custTableLoc.AccountNum == custDirectDebitMandate.CustAccount;

            if(!custDirectDebitMandate.BankAccount)
            {
                ttsbegin;
                custDirectDebitMandate.selectForUpdate(true);
                custDirectDebitMandate.BankAccount = custTableLoc.BankAccount;
                custDirectDebitMandate.doUpdate();
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_Post_modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Directdebit post modified method
    /// </summary>
    /// <param name = "args">args</param>
    [PostHandlerFor(tableStr(CustDirectDebitMandate), tableMethodStr(CustDirectDebitMandate, modifiedField))]
    public static void CustDirectDebitMandate_Post_modifiedField(XppPrePostArgs args)
    {
        FieldId fieldId = args.getArg('_fieldId');
        CustDirectDebitMandate custDirectDebitMandate = args.getThis();
        CustDirectDebitMandate custDirectDebitMandateOrig = custDirectDebitMandate.orig();
        switch(fieldId)
        {
            case fieldNum(CustDirectDebitMandate, SKS_EB_MandateAutoStatus):
                if(custDirectDebitMandate.SKS_EB_MandateAutoStatus == SKS_EB_MandateAutoStatus::Canceled)
                {
                    if(Box::yesNo("@SYS24514", DialogButton::No) == DialogButton::Yes)
                    {
                        custDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Ready;
                        custDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
                        custDirectDebitMandate.SKS_EB_RegisterStatusSent = NoYesCombo::No;
                    }
                    else
                    {
                        custDirectDebitMandate.SKS_EB_MandateAutoStatus = custDirectDebitMandateOrig.SKS_EB_MandateAutoStatus;
                    }
                }
                else
                {
                    custDirectDebitMandate.SKS_EB_MandateAutoStatus = custDirectDebitMandateOrig.SKS_EB_MandateAutoStatus;
                }
                break;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_Post_getStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the status of signed mandates to Incomplete when Bank resgister status is not accepted.
    /// </summary>
    /// <param name="args">args</param>
    [PostHandlerFor(tableStr(CustDirectDebitMandate), tableMethodStr(CustDirectDebitMandate, getStatus))]
    public static void CustDirectDebitMandate_Post_getStatus(XppPrePostArgs args)
    {
        CustDirectDebitMandate  custDirectDebitMandate   = args.getThis();

        if((custDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Ready ||
            custDirectDebitMandate.SKS_EB_BankRegisterStatus == SKS_EB_BankRegisterStatus::Sent) && (custDirectDebitMandate.IsFirst && custDirectDebitMandate.UsageCount == 0) && 
            ((custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Auddis /*DevOps 15157*/ && custDirectDebitMandate.CancellationDate == dateNull() /*Auddis Cancel 14101*/) 
            || custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Betalings || custDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Leverander /*Bug 11066*/) 
            && custDirectDebitMandate.SKS_EB_MandateAutoStatus != SKS_EB_MandateAutoStatus::Canceled /*Bug 11030*/)
        {
            args.setReturnValue(CustMandateStatus::Incomplete);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustDirectDebitMandate_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clearing the links
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">args</param>
    // Bug 10971
    [FormDataSourceEventHandler(formDataSourceStr(CustDirectDebitMandate, CustDirectDebitMandate), FormDataSourceEventType::Initialized),SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void CustDirectDebitMandate_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        sender.query().dataSourceTable(tablenum(CustDirectDebitMandate)).clearDynalinks();
        if(!SKS_PP_Setup::find().RegMandateAutomation)
        {
            sender.object(fieldNum(CustDirectDebitMandate, SKS_DD_Limitamount)).visible(false);
            sender.object(fieldNum(CustDirectDebitMandate, SKS_DD_isblocked)).visible(false);
        }

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>