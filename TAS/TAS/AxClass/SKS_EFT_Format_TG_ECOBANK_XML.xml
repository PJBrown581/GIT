<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_TG_ECOBANK_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_TG_ECOBANK_XML extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_TG_ECOBANK_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20230414')
    #define.SYSTEM('SYSTEM')
    #define.CEMAC('CEMAC')
    #define.SWIFT('SWIFT')

    XmlDocument         xmlDoc;
    XmlElement          nodeRoot;
    XmlElement          nodePayBatch;
    BankAccountTable    mBankAccountTable;
    SKS_EB_Vendor       mSKS_EB_Vendor;
    int                 totalInst;
    Amount              totalAmnt;   

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //Initialize XML
        xmlDoc = XmlDocument::newBlank();
    
        this.node_MessageRoot();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();
            
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                //      Get Bank Account Table
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
    
                //      PayBatch
                this.node_PayBatch();
            }
            //          PayInstrument
            this.node_PayInstrument();
                                
            next mSKS_EFT_FileDetail;

            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                //          Trailer
                this.node_Trailer();

                //reset the variables
                totalInst = 0;
                totalAmnt =0;
            }            
        }       

        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_MessageRoot
    /// </summary>
    protected void node_MessageRoot()
    {
        nodeRoot = xmlDoc.appendChild(xmlDoc.createElement('Msg'));
        nodeRoot = nodeRoot.appendChild(xmlDoc.createElement('MsgBody'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PayBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PayBatch
    /// </summary>
    protected void node_PayBatch()
    {
        //------------------------------------------------------------------------------------------------------
        //  PayBatch
        //      ClientCode
        //      MyProductCode
        //      PayProductCode
        //      DebitAccount
        //      ActivationDate
        //      BatchReference
        //      Remarks
        //------------------------------------------------------------------------------------------------------
        
        str clientCode,productCode;

        clientCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClientCode', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
        productCode = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ProductCode', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));

        //  PayBatch
        nodePayBatch = nodeRoot.appendChild(xmlDoc.createElement('PayBatch'));
    
        //      ClientCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayBatch, 'ClientCode', this.CharacterReplacement(clientCode), 10);

        //      MyProductCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayBatch, 'MyProductCode', this.CharacterReplacement(productCode), 10);

        //      PayProductCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayBatch, 'PayProductCode', '');

        //      DebitAccount
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayBatch, 'DebitAccount', subStr(mSKS_EFT_FileDetail.BankBankAcct,11,11), 21);//DevOps20408d

        //      ActivationDate
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayBatch, 'ActivationDate', date2str(mSKS_EFT_File.EffectiveDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4), 8);

        //      BatchReference
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayBatch, 'BatchReference', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr, 20));

        //      Remarks
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayBatch, 'Remarks', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PayInstrument</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PayInstrument
    /// </summary>
    protected void node_PayInstrument()
    {
        //------------------------------------------------------------------------------------------------------
        //      PayInstrument
        // 1        InstrumentRef
        // 2        PayProductCode
        // 3        BeneCode
        // 4        BeneName
        // 5        BeneMobile
        // 6        BeneEmail
        // 7        BeneBank
        // 8        BeneBankBranch
        // 9        BeneBankBIC
        // 10       BeneBankAddress
        // 11       BeneBankCountry
        // 12       BeneAccountNmbr
        // 13       BeneAccountCCY
        // 14       BeneIBAN
        // 15       BeneAddress
        // 16       BeneCountry
        // 17       BeneState 
        // 18       BeneCity 
        // 19       BenePostCode 
        // 20       BeneTelePhoneNmber 
        // 21       BeneFax 
        // 22       BeneDocType 
        // 23       BeneDocId 
        // 24       BeneResidentInd 
        // 25       BeneCorrBankBIC 
        // 26       OPCode 
        // 27       OPName 
        // 28       OPMobileNmbr 
        // 29       OPEmail 
        // 30       OPAddress 
        // 31       OPCountry 
        // 32       OPState 
        // 33       OPCity 
        // 34       OPPostCode 
        // 35       OPTelephone 
        // 36       OPFax 
        // 37       OPIVR 
        // 38       OPDocType 
        // 39       OPDocID 
        // 40       OPResidentInd 
        // 41       DebitAcctNmbr 
        // 42       PaymentCCY 
        // 43       RateType 
        // 44       ContractRef 
        // 45       AmountInd 
        // 46       PaymentAmnt 
        // 47       DebitAmnt 
        // 48       ActivationDate 
        // 49       InstrumentDate 
        // 50       ChargeTo 
        // 51       PayoutLoc 
        // 52       InstrumentNmbr 
        // 53       PickupBranch 
        // 54       BeneIVR 
        // 55       DeliveryMode 
        // 56       DeliveryBranch 
        // 57       AuthorisedPerson 
        // 58       AuthorisedPersonID 
        // 59       DebitRef
        // 60       DebitDetails 
        // 61       CreditRef 
        // 62       CreditDetails 
        // 63       SupportDocName 
        // 64       MypEnrichment1 
        // 65       MypEnrichment2 
        // 66       MypEnrichment3 
        // 67       MypEnrichment4 
        // 68       MypEnrichment5 
        //          Enrichments 
        //             Enrichment 
        //                  EnrichmentValue 
        //             /Enrichment 
        //          /Enrichments 
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePayInstrument;
        XmlElement nodeEnrichments;
        XmlElement nodeEnrichment;
        VendTable               vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;
        str address, amountInd, rateType;
        str BankId;
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        totalInst++;

        BankId = SKS_EFT_Format::getCodelookupvalue('BeneBankID', mSKS_EFT_FileDetail.RecId);

        //      PayInstrument
        nodePayInstrument = nodePayBatch.appendChild(xmlDoc.createElement('PayInstrument'));

        // 1         InstrumentRef
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'InstrumentRef', SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 20));

        // 2        PayProductCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'PayProductCode', '');

        // 3        BeneCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneCode', '');

        // 4        BeneName
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneName', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName), 40);

        // 5        BeneMobile
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneMobile', '');

        // 6        BeneEmail
        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select * from DirPartyContactInfoview
                where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                    &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneEmail', this.CharacterReplacement(DirPartyContactInfoView.Locator), 255);

        // 7        BeneBank
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBank', '');

        //7     BeneBankIdType
        //8     BeneBankId
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SYSTEM:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankIdType', 'SYSTEM');
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankId', BankId);
                break;
            case #CEMAC:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankIdType', 'CEMAC');
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankId', BankId);
                break;
            case #SWIFT:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankIdType', 'SWIFT');
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankId', mSKS_EFT_FileDetail.DepSwiftNo);
                break;
        }

        // 8        BeneBankBranch
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankBranch', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankBranch), 10);

        // 9        BeneBankBIC
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankBIC', mSKS_EFT_FileDetail.DepSwiftNo, 11);

        // 10       BeneBankAddress
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankAddress', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr), 150);

        // 11       BeneBankCountry
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneBankCountry', this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId), 30);

        // 12       BeneAccountNmbr
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SYSTEM:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneAccountNmbr', subStr(mSKS_EFT_FileDetail.DepBankAcct, 11, 11));//DevOps20408
                break;
            case #CEMAC:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneAccountNmbr', subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 23));
                break;
            default:
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneAccountNmbr', mSKS_EFT_FileDetail.DepBankAcct, 35);
                break;
        }

        // 13       BeneAccountCCY
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneAccountCCY', mSKS_EFT_FileDetail.PaymentCurrencyCode, 3);

        // 14       BeneIBAN
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneIBAN', mSKS_EFT_FileDetail.DepBankIBAN, 35);

        // 15       BeneAddress
        if(mSKS_EFT_VendorPaym.WBeneAddr)
        {
            address = mSKS_EFT_VendorPaym.WBeneAddr;
        }
        if(address)
        {
            address += ',';
        }
        if(mSKS_EFT_VendorPaym.WBeneAddr2)
        {
            address = mSKS_EFT_VendorPaym.WBeneAddr2;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneAddress', this.CharacterReplacement(address), 150);

        // 16       BeneCountry
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneCountry', this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBeneCountryRegionId), 30);

        // 17       BeneState
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneState', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneState), 30);

        // 18       BeneCity
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneCity', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity), 30);

        // 19       BenePostCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BenePostCode', this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneZipPostal), 8);

        // 20       BeneTelePhoneNmber
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneTelePhoneNmber', '');

        // 21       BeneFax
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneFax', '');

        // 22       BeneDocType
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneDocType', '');

        // 23       BeneDocId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneDocId', '');

        // 24       BeneResidentInd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneResidentInd', '');

        // 25       BeneCorrBankBIC
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneCorrBankBIC', '');

        // 26       OPCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPCode', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyId), 10);

        // 27       OPName
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPName', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 40);

        // 28       OPMobileNmbr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPMobileNmbr', '');

        // 29       OPEmail
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPEmail', '');

        // 30       OPAddress
        if(mSKS_EFT_Bank.WOrdPartyAddr)
        {
            address = mSKS_EFT_Bank.WOrdPartyAddr;
        }
        if(address)
        {
            address += ',';
        }
        if(mSKS_EFT_Bank.WOrdPartyAddr2)
        {
            address += mSKS_EFT_Bank.WOrdPartyAddr2;
        }
        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPAddress', this.CharacterReplacement(address), 150);

        // 31       OPCountry
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPCountry', this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId), 30);

        // 32       OPState
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPState', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyState), 30);

        // 33       OPCity
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPCity', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity), 30);

        // 34       OPPostCode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPPostCode', this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyZipCode), 10);

        // 35       OPTelephone
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPTelephone', '');

        // 36       OPFax
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPFax', '');

        // 37       OPIVR
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPIVR', '');

        // 38       OPDocType
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPDocType', '');

        // 39       OPDocID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPDocID', '');

        // 40       OPResidentInd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'OPResidentInd', '');

        // 41       DebitAcctNmbr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'DebitAcctNmbr', subStr(mSKS_EFT_FileDetail.BankBankAcct,11,11), 21);//DevOps20879

        // 42       PaymentCCY
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            amountInd = 'P';
        }
        else
        {
            amountInd = 'D';
        }

      
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'PaymentCCY', mSKS_EFT_FileDetail.PaymentCurrencyCode, 3);//DevOps20879
     

        // 43       RateType
        if(mSKS_EFT_FileDetail.PaymentCurrencyCode != mBankAccountTable.CurrencyCode)
        {
            rateType = this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('RateType', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'RateType', rateType);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'RateType', '');
        }

        // 44       ContractRef
        if(rateType == '1')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'ContractRef', this.CharacterReplacement(SKS_EFT_Format::getValueFromCode('ContractRef', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId)), 40);
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'ContractRef', '');
        }

        // 45       AmountInd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'AmountInd', amountInd);

        // 46       PaymentAmnt
        
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'PaymentAmnt', num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0,2,1,0));

        // 47       DebitAmnt
        if(amountInd == 'D')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'DebitAmnt',num2Str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 0,2,1,0));
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'DebitAmnt', '');
        }

        totalAmnt += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        // 48       ActivationDate
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'ActivationDate', date2str(mSKS_EFT_File.EffectiveDate, 123, DateDay::Digits2, DateSeparator::None, DateMonth::Digits2, DateSeparator::None, DateYear::Digits4), 8);

        // 49       InstrumentDate
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'InstrumentDate', '');

        // 50       ChargeTo
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'ChargeTo', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)), 1);

        // 51       PayoutLoc
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'PayoutLoc', '');

        // 52       InstrumentNmbr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'InstrumentNmbr', '');

        // 53       PickupBranch
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'PickupBranch', '');

        // 54       BeneIVR
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'BeneIVR', '');

        // 55       DeliveryMode
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'DeliveryMode', '');

        // 56       DeliveryBranch
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'DeliveryBranch', '');

        // 57       AuthorisedPerson
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'AuthorisedPerson', '');

        // 58       AuthorisedPersonID
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'AuthorisedPersonID', '');

        // 59       DebitRef
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'DebitRef',msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText,50);

        // 60       DebitDetails
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'DebitDetails', '');

        // 61       CreditRef
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'CreditRef', msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText,50);

        // 62       CreditDetails
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'CreditDetails', '');

        // 63       SupportDocName
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'SupportDocName', '');

        // 64       MypEnrichment1
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'MypEnrichment1', '');

        // 65       MypEnrichment2
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'MypEnrichment2', '');

        // 66       MypEnrichment3
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'MypEnrichment3', '');

        // 67       MypEnrichment4
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'MypEnrichment4', '');

        // 68       MypEnrichment5
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePayInstrument, 'MypEnrichment5', '');
        
        //          Enrichments
        nodeEnrichments = nodePayInstrument.appendChild(xmlDoc.createElement('Enrichments'));

        //              Enrichment
        nodeEnrichment = nodeEnrichments.appendChild(xmlDoc.createElement('Enrichment'));

        //                  EnrichmentValue
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeEnrichment, 'EnrichmentValue', '');    
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_Trailer</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_Trailer
    /// </summary>
    protected void node_Trailer()
    {
        //------------------------------------------------------------------------------------------------------
        //      Trailer
        // 1        TotalInst
        // 2        TotalAmnt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeTrailer;

        //      Trailer
        nodeTrailer = nodePayBatch.appendChild(xmlDoc.createElement('Trailer'));

        // 1         TotalInst
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTrailer, 'TotalInst', num2str(totalInst, 0,0,0,0), 5);

        // 2        TotalAmnt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTrailer, 'TotalAmnt',num2Str(totalAmnt * -1, 0,2,1,0));//DevOps20879
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>