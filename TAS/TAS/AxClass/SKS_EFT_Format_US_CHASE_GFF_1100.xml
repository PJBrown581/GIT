<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_GFF_1100</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_GFF_1100 extends SKS_EFT_Format_US_CHASE_GFF_1019
/// </summary>
class SKS_EFT_Format_US_CHASE_GFF_1100 extends SKS_EFT_Format_US_CHASE_GFF_1019
{
    #define.FormatVersion('20221111')
    SKS_EB_Vendor mSKS_EB_Vendor;

    #define.PTT('PTT')
    #define.ACHPPD('ACH-PPD')
    #define.ACHCCD('ACH-CCD')
    #define.PTT826('PTT-826')
    #define.EMEAWIRES('EMEA-WIRE')
    #define.EMEADRAFT('EMEA-DRAFT')

    str mRemitMode;
    str backOfficeCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //----------------------------------------------------
        //File Header
        //  Batch Header
        //      PM Record   (Payment Record 1)
        //      PN Record   (Payment Record 2)
        //      A1 Record   (Beneficiary's Address)
        //  Batch Trailer
        //File Trailer
        //----------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        ;
    
        //Get sequence number
        this.getSequenceNumber();
    
        //File Header
        this.rec_FHeader();
    
        //Batch Header
        mBatchRecordTotal = 0;
        mTransactionTotal = 0;
        this.rec_BHeader();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get SKS_EB_Vendor
            this.getSKS_EB_Vendor();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get remit mode
            mRemitMode = SKS_EFT_Format::getValueFromCode('RemitMode', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
    
            // Get RemittanceAddress
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            //PM Record
            this.rec_PM();
    
            //IR Record
            this.rec_IR();
    
            //P2 Record
            this.rec_P2();
    
            //A1 Record
            this.rec_A1();
    
            //A4 Record
            this.rec_A4();
    
            //R1 Record   (Remittance Information Record 1)
            //RA Record   (Remittance Information Record 2)
    
            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                {
                    this.rec_R1(invSKS_EFT_FileDetail);  //PTT,ACHPPD,ACHCCD,PTT826,EMEAWIRES
                    this.rec_RA(invSKS_EFT_FileDetail); //PTT,ACHPPD,ACHCCD,PTT826,EMEAWIRES
                }
            }
            next mSKS_EFT_FileDetail;
        }
    
        //Batch Trailer
        this.rec_BTrailer();
    
        //File Trailer
        this.rec_FTrailer();
    
        //Set sequence number
        this.setSequenceNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalPaymentId</Name>
				<Source><![CDATA[
    private str getJournalPaymentId()
    {
        LedgerJournalTrans lLedgerJournalTrans;
    
        select firstOnly PaymId from lLedgerJournalTrans where
            lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
        return lLedgerJournalTrans.PaymId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequenceNumber</Name>
				<Source><![CDATA[
    protected void getSequenceNumber()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_A1</Name>
				<Source><![CDATA[
    public boolean rec_A1()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record ID                       (  1-  2)
        // 2    Beneficiary's Name (Cont.)      (  3- 37)
        // 3    Beneficiary's Address 1         ( 38- 72)
        // 4    Beneficiary's Address 2         ( 73-107)
        // 5    Beneficiary's Address 3         (108-142)
        // 6    Beneficiary's Address 4 (City)  (143-175)
        // 7    Beneficiary's Address 4 (State) (176-177)
        // 8    Country Code                    (178-179)
        // 9    Filler                          (    180)
        //10    Zip Code                        (181-190)
        //11    Reserved                        (191-210)
        //-------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mBatchRecordTotal++;
    
        // 1    Record ID                       (  1-  2)
        sb.Append('A1');
    
        // 2    Beneficiary/Reciever's Name (Cont.)      (  3- 37)
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        if(mSKS_EFT_FileDetail.PaymSpec == #EMEADRAFT && backOfficeCode == 'LON')
        {
            // 3    Beneficiary/Reciever's Address 1         ( 38- 72)
            sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceAdrLine2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 4    Beneficiary/Reciever's Address 2         ( 73-107)
            sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 5    Beneficiary/Reciever's Address 3         (108-142)
            sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 6    Beneficiary/Reciever's Address 4 (City)  (143-175)
            sb.Append(SKS_PP_StringFormats::strFill(33, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 7    Beneficiary/Reciever's Address 4 (State) (176-177)
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 8    Country Code                    (178-179)
            sb.Append(SKS_PP_StringFormats::strFill(2,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            // 3    Beneficiary/Reciever's Address 1         ( 38- 72)
            sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceAdrLine1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 4    Beneficiary/Reciever's Address 2         ( 73-107)
            sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceAdrLine2, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 5    Beneficiary/Reciever's Address 3         (108-142)
            sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 6    Beneficiary/Reciever's Address 4 (City)  (143-175)
            sb.Append(SKS_PP_StringFormats::strFill(33, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 7    Beneficiary/Reciever's Address 4 (State) (176-177)
            sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 8    Country Code                    (178-179)
            sb.Append(SKS_PP_StringFormats::strFill(2,mRemittanceCountryRegionId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        // 9    Filler                          (    180)
        sb.Append(SKS_PP_StringFormats::strFill(1,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        //10    Reciever Country/Zip Code       (181-190)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //11    Reserved                        (191-210)
        sb.Append(SKS_PP_StringFormats::strFill(20,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_A4</Name>
				<Source><![CDATA[
    public boolean rec_A4()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        //1     Record ID                               (1 – 2)
        //2     Remittance Receiver Contact Name        (3 – 37)
        //3     Remittance Destination Value- Primary   (38-117)
        //4     Remittance Destination Value- Alt       (118-177)
        //5     Remittance Delivery Mode                (178-179)
        //6     Remittance File Type                    (180-189)
        //7     Remittance Form ID                      (190-199)
        //8     Remittance Summary Ind                  (200-200)
        //9     Filler                                  (201-210)
    
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        VendTable vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;
        str fileType;
        str remitSummary;
    
        if(mRemitMode == 'EM' && mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select * from DirPartyContactInfoview
                    where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                        &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
    
            mBatchRecordTotal++;
    
            //1     Record ID                               (1 – 2)
            sb.Append('A4');
    
            //2     Remittance Receiver Contact Name        (3 – 37)
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(DirPartyContactInfoview.LocationName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //3     Remittance Destination Value- Primary   (38-117)
            sb.Append(SKS_PP_StringFormats::strFill(80, DirPartyContactInfoView.Locator, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //4     Remittance Destination Value- Alt       (118-177)
            sb.Append(SKS_PP_StringFormats::strFill(60, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //5     Remittance Delivery Mode                (178-179)
            sb.Append(SKS_PP_StringFormats::strFill(2, this.CharacterReplacement(mRemitMode), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //6     Remittance File Type                    (180-189)
            fileType = SKS_EFT_Format::getValueFromCode('EmailFileType', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
            sb.Append(SKS_PP_StringFormats::strFill(10, fileType, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //7     Remittance Form ID                      (190-199)
            sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RmtFormatId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //8     Remittance Summary Ind                  (200-200)
            remitSummary = SKS_EFT_Format::getValueFromCode('RemitSummary', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId);
            sb.Append(SKS_PP_StringFormats::strFill(1, remitSummary, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //9     Filler                                  (201-210)
            sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BHeader</Name>
				<Source><![CDATA[
    public boolean rec_BHeader()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record ID           (  1-  2)
        // 2    Batch Number        (  3-  6)
        // 3    Value Date          (  7- 14)
        // 4    Message Reference   ( 15- 49)
        // 5    Bundling Reference  ( 50- 65)
        // 6    Reserved            ( 66-106)
        // 7    Batch reference     (107-141)
        // 8    Reserved            (142-210)
        //-------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mBatchRecordTotal++;
    
        // 1    Record ID           (  1-  2)
        sb.Append('BH');
    
        // 2    Batch Number        (  3-  6)
        sb.Append('0001');
    
        // 3    Value Date          (  7- 14)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        // 4    Message Reference   ( 15- 49)
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 5    Bundling Reference  ( 50- 65)
        sb.Append(SKS_PP_StringFormats::strFill(16,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 6    Reserved            ( 66-100)
        sb.Append(SKS_PP_StringFormats::strFill(41,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 7    Batch reference     (107-141)
        sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 8    Reserved            (142-210)
        sb.Append(SKS_PP_StringFormats::strFill(69,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BTrailer</Name>
				<Source><![CDATA[
    public boolean rec_BTrailer()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record ID           (  1-  2)
        // 2    Amount Hash Total   (  3- 27)
        // 3    Batch Record Total  ( 28- 37)
        // 4    Transaction Total   ( 38- 47)
        // 5    Reserved            ( 48-210)
        //-------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mBatchRecordTotal++;
    
        // 1    Record ID           (  1-  2)
        sb.Append('BT');
    
        // 2    Amount Hash Total   (  3- 27)
        sb.Append(SKS_PP_StringFormats::strFill(25, num2str(mHashTotal,0,2,1,0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 3    Batch Record Total  ( 28- 37)
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(mBatchRecordTotal), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 4    Transaction Total   ( 38- 47)
        sb.Append(SKS_PP_StringFormats::strFill(10, int2str(mTransactionTotal), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 5    Reserved            ( 48-210)
        sb.Append(SKS_PP_StringFormats::strFill(163,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FHeader</Name>
				<Source><![CDATA[
    public boolean rec_FHeader()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record ID           (  1-  2)
        // 2    Sender ID           (  3- 12)
        // 3    Reciever ID         ( 13- 27)
        // 4    File Create Date    ( 28- 35)
        // 5    File Create Time    ( 36- 41)
        // 6    File Number         ( 42- 47)
        // 7    File Type indicator ( 48- 48)
        // 8    Reserved            ( 49-205)
        // 9    GFF Version No.     (206-210)
        //-------------------------------------------------------------------------
        str fileNum;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    Record ID           (  1-  2)
        sb.Append('FH');
    
        // 2    Sender ID           (  3- 12)
        sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_Bank.ACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 3    Reciever ID         ( 13- 27)
        sb.Append('CHASE 006981815');
    
        // 4    File Create Date    ( 28- 35)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    
        // 5    File Create Time    ( 36- 41)
        sb.Append(SKS_PP_StringFormats::strTimeHHMMSS());
    
        // 6    File Number         ( 42- 47)
        fileNum = SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + int2str(mSequenceNumber), 6);
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'FileKey', fileNum, mSKS_EFT_File.RecId);
        sb.Append(SKS_PP_StringFormats::strFill(6,fileNum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 7    File Type indicator ( 48- 48)
         sb.Append('G');
    
        // 8    Reserved            ( 49-205)
        sb.Append(SKS_PP_StringFormats::strFill(157,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        // 9    GFF Version No.     (206-210)
        sb.Append('01100');
        this.fileWrite(sb.ToString());
        mSequenceNumber++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FTrailer</Name>
				<Source><![CDATA[
    public boolean rec_FTrailer()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record ID           (  1-  2)
        // 2    File Batch Total    (  3- 12)
        // 3    Amount Hash Total   ( 13- 37)
        // 4    Reserved            ( 38-210)
        //-------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    Record ID           (  1-  2)
        sb.Append('FT');
    
        // 2    File Batch Total    (  3- 12) This will always be 1 since multiple effective dates are not permitted
        sb.Append('0000000001');
    
        // 3    Amount Hash Total   ( 13- 37)
        sb.Append(SKS_PP_StringFormats::strFill(25, num2str(mHashTotal,0,2,1,0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        // 4    Reserved            ( 38-210)
        sb.Append(SKS_PP_StringFormats::strFill(173,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IR</Name>
				<Source><![CDATA[
    public boolean rec_IR()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record ID                       (  1-  2)
        // 2    Instruction Code 1              (  3- 37)
        // 3    Instruction Code 2              ( 38- 72)
        // 4    Instruction Code 3              ( 73-107)
        // 5    Reserved                        (108-210)
        //-------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        // 1    Record ID                       (  1-  2)
        sb.Append('IR');
    
        // 2    Instruction Code 1              (  3- 37)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText1), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 3    Instruction Code 2              ( 38- 72)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 4    Instruction Code 3              ( 73-107)
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText3), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 5    Reserved                        (108-210)
        sb.Append(SKS_PP_StringFormats::strFill(103,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
        if(mSKS_EFT_FileDetail.PaymSpec == #EMEAWIRES &&
          (mSKS_EFT_VendorPaym.WPmtInstText1 != '' ||
           mSKS_EFT_VendorPaym.WPmtInstText2 != '' ||
           mSKS_EFT_VendorPaym.WPmtInstText3 != ''))
        {
            mBatchRecordTotal++;
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_P2</Name>
				<Source><![CDATA[
    public boolean rec_P2()
    {
        //-------------------------------------------------------------------------
        //Nbr   Content
        // 1    Record ID                       (  1-  2)
        // 2    Sender's Text 1                 (  3- 37)
        // 3    Sender's Text 2                 ( 38- 72)
        // 4    Sender's Text 3                 ( 73-107)
        // 5    Sender's Text 4                 (108-142)
        // 6    Reserved                        (143-210)
        //-------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str paymId;
    
        if(mSKS_EFT_FileDetail.PaymSpec == #PTT826)
        {
            paymId = this.getJournalPaymentId();
    
            if(paymId != '')
            {
                mBatchRecordTotal++;
    
                // 1    Record ID                       (  1-  2)
                sb.Append('P2');
    
                // 2    Sender's Text 1              (  3- 37)
                sb.Append(SKS_PP_StringFormats::strFill(35, paymId, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                // 3    Sender's Text 2              ( 38- 72)
                sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                // 4    Sender's Text 3              ( 73-107)
                sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                // 5    Sender's Text 4              (108-142)
                sb.Append(SKS_PP_StringFormats::strFill(35,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
                // 5    Sender's Text 4              (143-210)
                sb.Append(SKS_PP_StringFormats::strFill(68,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
    
                this.fileWrite(sb.ToString());
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PM</Name>
				<Source><![CDATA[
    public boolean rec_PM()
    {
        AmountCur amount;
        VendBankAccount lVendBankAccount;
        str value;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mTransactionTotal++;
        mBatchRecordTotal++;
    
        // 1    Record ID                       (  1-  2)
        sb.Append('PM');
    
        // 2    Originator's Reference Number   (  3- 18)
        sb.Append(SKS_PP_StringFormats::strFill(16, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 3    Transaction Amount              ( 19- 33)
        amount = -1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        mHashTotal += this.getPositiveAmount(amount);
        if(mSKS_EFT_FileDetail.PaymSpec == #PTT)
        {
            sb.Append(SKS_PP_StringFormats::strFill(15, num2str(amount, 0, 2, 1, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(15, strRem(num2str(amount, 0, 2, 1, 0),'-'), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        }
    
        // 4    Currency                        ( 34- 36)
        sb.Append(mSKS_EFT_FileDetail.PaymentCurrencyCode);
    
        // 5    Payment Method                  ( 37- 39)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #PTT826:
            case #EMEAWIRES:
                sb.Append('TLX');
                break;
            case #EMEADRAFT:
                sb.Append('DFT');
                break;
            default:
                sb.Append('   ');
                break;
        }
    
        // 6    Transaction Type                ( 40- 41)
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0 && (mSKS_EFT_FileDetail.PaymSpec == #ACHPPD || mSKS_EFT_FileDetail.PaymSpec == #ACHCCD))
        {
            sb.Append('02');
        }
        else
        {
            sb.Append('01');
        }
    
        // 7    Back Office ID/Code             ( 42- 44)
        backOfficeCode = SKS_EFT_Format::getCodelookupvalue('BackOfficeCd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank);
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #EMEAWIRES:
            case #EMEADRAFT:
                sb.Append(SKS_PP_StringFormats::strFill(3, this.CharacterReplacement(backOfficeCode), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
            default:
                sb.Append('GEN');
                break;
        }
    
        // 8    Originator's Account Number     ( 45- 79)
        sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        // 9    Bank Charges                    ( 80- 80)
        if(mSKS_EFT_FileDetail.FormatId == 'US-CHASE-GFF-1100-EMEA')
        {
            sb.Append(SKS_PP_StringFormats::strFill(1, SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(' ');
        }
    
        //10    Correspondent Charges           ( 81- 81)
        sb.Append(' ');
    
        //11    Beneficiary Name                ( 82-116)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #EMEADRAFT:
                if(backOfficeCode == 'LON')
                {
                    sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceAdrLine1, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                else
                {
                    sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                break;
            case #ACHPPD:
            case #ACHCCD:
                if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
                {
                    sb.Append(SKS_PP_StringFormats::strFill(35, subStr(mRemittanceName, 1, 24), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                else
                {
                    sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                }
                break;
            default:
                sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
                break;
        }
    
        //12    Beneficiary Bank ID             (117-151)
        if(mSKS_EFT_FileDetail.PaymSpec == #PTT826)
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, 'POFICHBE', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(mSKS_EFT_FileDetail.DepSwiftNo != '')
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepSwiftNo, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            if(mSKS_EFT_FileDetail.PaymSpec == #EMEAWIRES)
            {
                select BankCodeType, VendAccount from lVendBankAccount where lVendBankAccount.VendAccount == mSKS_EFT_FileDetail.AccountNum;
    
                switch(lVendBankAccount.BankCodeType)
                {
                    case BankCodeType::Code_BL:
                        value = '/BL';
                        break;
                    case BankCodeType::Code_SC:
                        value = '/SC';
                        break;
                    default:
                        value = '/FW';
                        break;
                }
            }
            else
            {
                value = '';
            }
    
            sb.Append(SKS_PP_StringFormats::strFill(35, value + mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //13    Beneficiary Account Number      (152-186)
        if(mSKS_EFT_FileDetail.PaymSpec == #EMEADRAFT && backOfficeCode == 'LON')
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mRemittanceName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else if(mSKS_EFT_FileDetail.DepBankIBAN != '')
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankIBAN, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(35, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //14    Beneficiary Account Type        (    187)
        sb.Append(' ');
    
        //15    Business Function Code          (188-190)
        sb.Append('   ');
    
        //16    Payment Vehicle                 (191-193)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #PTT826:
            case #EMEAWIRES:
            case #EMEADRAFT:
                sb.Append('SWT');
                break;
            default:
                sb.Append('BOP');
                break;
        }
    
        //17    ACH/IACH Payment Type           (194-196)
        switch(mSKS_EFT_FileDetail.PaymSpec)
        {
            case #ACHPPD:
                sb.Append('PPD');
                break;
            case #ACHCCD:
                sb.Append('CCD');
                break;
            case #PTT:
                sb.Append('PPD');
                break;
            default:
                sb.Append('   ');
                break;
        }
    
        //18    Company ID                      (197-207)
        sb.Append(SKS_PP_StringFormats::strFill(11,subStr(mSKS_EFT_FileDetail.FileACHCompanyId, 1, 7), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //19    Remittance Details Indicator    (208-210)
        if(mRemitMode == 'EM' && mSKS_EB_Vendor.EM1Vendor)
        {
            sb.Append('YES');
        }
        else
        {
            sb.Append('NO ');
        }
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_R1</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                       (  1-  2)
    // 2    Line type indicator             (  3-  4)
    // 3    Payee Reference                 (  5- 34)
    // 4    Filler                          ( 35- 37)
    // 5    Payer Reference                 ( 38- 67)
    // 6    Filler                          ( 68- 70)
    // 7    Invoice Date                    ( 71- 78)
    // 8    Filler                          ( 79- 81)
    // 9    Additional Ref 1                ( 82-111)
    //10    Filler                          (112-114)
    //11    Additional Ref 2                (115-144)
    //12    Filler                          (145-147)
    //13    Additional Ref 3                (148-177)
    //14    Filler                          (178-180)
    //15    Additional Ref 4                (181-210)
    
    public boolean rec_R1(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str PONum;
    
        if(mSKS_EFT_FileDetail.PaymSpec ==  #EMEAWIRES  ||
            mSKS_EFT_FileDetail.PaymSpec == #PTT826     ||
            mSKS_EFT_FileDetail.PaymSpec == #PTT        ||
            mSKS_EFT_FileDetail.PaymSpec == #ACHPPD     ||
            mSKS_EFT_FileDetail.PaymSpec == #ACHCCD)
        {
            mBatchRecordTotal++;
    
            // 1    Record ID                       (  1-  2)
            sb.Append('R1');
    
            // 2    Line type indicator             (  3-  4)
            sb.Append('01');
    
            // 3    Payee Reference                 (  5- 34)
            sb.Append(SKS_PP_StringFormats::strFill(30,_invSKS_EFT_FileDetail.InvoiceNumber, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 4    Filler                          ( 35- 37)
            sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 5    Payer Reference (Description)   ( 38- 67)
            sb.Append(SKS_PP_StringFormats::strFill(30,this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceTransactionTxt), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 6    Filler                          ( 68- 70)
            sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 7    Invoice Date                    ( 71- 78)
            sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate));
    
            PONum = this.get_POInfo(_invSKS_EFT_FileDetail);
    
            if(PONum)
            {
                // 8    Additional Ref 1 Qualifier      ( 79- 81)
                sb.Append(SKS_PP_StringFormats::strFill(3,'PO', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                // 9    Additional Ref 1                (82- 111)
                sb.Append(SKS_PP_StringFormats::strFill(30,PONum, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            else
            {
                // 8    Filler                          ( 79- 81)
                sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
                // 9    Additional Ref 1                ( 82-111)
                sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            }
            //10    Filler                          (112-114)
            sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //11    Additional Ref 2                (115-144)
            sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //12    Filler                          (145-147)
            sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //13    Additional Ref 3                (148-177)
            sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //14    Filler                          (178-180)
            sb.Append(SKS_PP_StringFormats::strFill(3,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            //15    Additional Ref 4                (181-210)
            sb.Append(SKS_PP_StringFormats::strFill(30,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RA</Name>
				<Source><![CDATA[
    //Nbr   Content
    // 1    Record ID                       (  1-  2)
    // 2    Line type indicator             (  3-  4)
    // 3    Filler                          (  5- 13)
    // 4    Gross Amount                    ( 14- 28)
    // 5    Filler                          ( 29- 30)
    // 6    Discount Amount                 ( 31- 45)
    // 7    Filler                          ( 46- 47)
    // 8    Withholding Amount              ( 48- 62)
    // 9    Filler                          ( 63- 64)
    //10    Net Amount                      ( 65- 79)
    //11    Reserved                        ( 80-210)
    
    public boolean rec_RA(SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountCur grossAmt;
        ;
        if(mSKS_EFT_FileDetail.PaymSpec == #EMEAWIRES   ||
            mSKS_EFT_FileDetail.PaymSpec == #PTT826     ||
            mSKS_EFT_FileDetail.PaymSpec == #PTT        ||
            mSKS_EFT_FileDetail.PaymSpec == #ACHPPD     ||
            mSKS_EFT_FileDetail.PaymSpec == #ACHCCD)
        {
            mBatchRecordTotal++;
            // 1    Record ID                       (  1-  2)
            sb.Append('RA');
    
            // 2    Line type indicator             (  3-  4)
            sb.Append('01');
    
            // 3    Filler                          (  5- 13)
            sb.Append(SKS_PP_StringFormats::strFill(9,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            // 4    Gross Amount                    ( 14- 28)
            grossAmt = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur;
    
            sb.Append(SKS_PP_StringFormats::strFill(15,num2str(-1 * grossAmt, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
            // 5    Filler                          ( 29- 30)
            sb.Append('  ');
    
            // 6    Discount Amount                 ( 31- 45)
            sb.Append(SKS_PP_StringFormats::strFill(15,num2str(-1 * _invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
            // 7    Filler                          ( 46- 47)
            sb.Append('  ');
    
            // 8    Withholding Amount              ( 48- 62)
            sb.Append(SKS_PP_StringFormats::strFill(15,'0.00', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
            // 9    Filler                          ( 63- 64)
            sb.Append('  ');
    
            //10    Net Amount                     ( 65- 79)
            sb.Append(SKS_PP_StringFormats::strFill(15,num2str(-1 * _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur, 0, 2, 1, 0), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Left));
    
            //11    Reserved                        ( 80-210)
            sb.Append(SKS_PP_StringFormats::strFill(131,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            this.fileWrite(sb.ToString());
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequenceNumber</Name>
				<Source><![CDATA[
    protected void setSequenceNumber()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>