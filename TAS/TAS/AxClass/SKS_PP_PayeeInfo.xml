<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_PayeeInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_PayeeInfo
{
    LogisticsPostalAddress postalAddress;
    str accountName;
    int i;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAccountName</Name>
				<Source><![CDATA[
    public str getAccountName()
    {
        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress getAddress()
    {
        return postalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayeeLineInfo</Name>
				<Source><![CDATA[
    private void getPayeeLineInfo(SKS_PP_FileDetail _SKS_PP_FileDetail)
    {
        BankChequeTable bankChequeTable;
        VendTable vendTable;
        RemittanceLocation remittanceLocation;
        LogisticsLocationEntity location;
        CustTable custTable;
        SelectableDataArea companyId;
        ;
    
        i = 1;
    
        changeCompany(_SKS_PP_FileDetail.ChkCpnyId)
        {
            select firstonly RECIPIENTTYPE, RecipientCompany from bankChequeTable where bankChequeTable.SKS_PP_FILENBR == _SKS_PP_FileDetail.FileNbr
                && bankChequeTable.ChequeNum == _SKS_PP_FileDetail.ChkRefNbr
                && bankChequeTable.AccountID == _SKS_PP_FileDetail.ChkBankAcct;
        }
    
        if(bankChequeTable)
        {
            if(bankChequeTable.RecipientCompany != '')
            {
                companyId = bankChequeTable.RecipientCompany;
            }
            else
            {
                companyId = _SKS_PP_FileDetail.ChkCpnyId;
            }
            changeCompany(companyId)
            {
                if (!bankChequeTable.RemittanceAddress)
                {
                    if(bankChequeTable.RecipientType == BankChequeRecipientType::Vend)
                    {
                        vendTable = VendTable::find(_SKS_PP_FileDetail.VendorAccount);
    
                        //Verify if the remittancelocation on the table is still active; if no remittancelocation exists or is invalid then default
                        remittanceLocation =  VendTable::getDefaultRemittanceLocation(vendTable.AccountNum);
    
                        //get the vendors remit to address
                        location    = LogisticsLocationEntity::constructFromLocationRecId(remittanceLocation);
                        postalAddress     = location ? LogisticsLocationEntity::location2PostalAddress(location.parmLocationRecId(), DateTimeUtil::getSystemDateTime(), true) : vendTable.postalAddress();
    
                        if(postalAddress)
                        {
                            accountName = location ? location.parmLocationDescription() : '';
                        }
                        else
                        {
                            accountName = vendTable.name();
                        }
                    }
                    else if(bankChequeTable.RecipientType == BankChequeRecipientType::Cust)
                    {
                        custTable = CustTable::find(_SKS_PP_FileDetail.VendorAccount);
    
                        accountName = custTable.name();
                        postalAddress = custTable.postalAddress();
                    }
                }
                else
                {
                    postalAddress  = LogisticsPostalAddress::findRecId(bankChequeTable.RemittanceAddress);
                    accountName   = LogisticsLocation::locationNameFromRecId(postalAddress.Location);
                }
    
            }
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SKS_PP_FileDetail _SKS_PP_FileDetail)
    {
        this.getPayeeLineInfo(_SKS_PP_FileDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parsePayeeLine</Name>
				<Source><![CDATA[
    public str parsePayeeLine()
    {
        str result;
        str char;
        ;
    
        char = substr(postalAddress.Address, i, 1);
        while (char != '\n' && i <= strLen(postalAddress.Address))
        {
            result += char;
            i ++;
            char = substr(postalAddress.Address, i, 1);
        }
    
        i++;
    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCounter</Name>
				<Source><![CDATA[
    private void resetCounter()
    {
        i = 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>