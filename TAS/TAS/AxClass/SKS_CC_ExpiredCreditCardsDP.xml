<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_ExpiredCreditCardsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>SKS_CC_ExpiredCreditCardsDP</c> class is the report Data Provider class for the
///     <c>SKS_CC_ExpiredCreditCards</c> SRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(SKS_CC_ExpiredCreditCards)),
    SRSReportParameterAttribute(classStr(SKS_CC_ExpiredCreditCardsContract))
]
class SKS_CC_ExpiredCreditCardsDP extends SRSReportDataProviderBase
{
    SKS_CC_ExpiredCreditCardsTmp expiredCreditCardsTmp;
    NoYes showExpiredCreditCards, showExpiringCreditCards;
    PositiveDays expiredDays, expiringDays;    
  
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExpiredCreditCardsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the full data from <c>SKS_CC_ExpiredCreditCardsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///     The <c>SKS_CC_ExpiredCreditCardsTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SKS_CC_ExpiredCreditCardsTmp))
    ]
    public SKS_CC_ExpiredCreditCardsTmp getExpiredCreditCardsTmp()
    {
        select expiredCreditCardsTmp;
        return expiredCreditCardsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExpiredCreditCardsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the <c>SKS_CC_ExpiredCreditCardsTmp</c> temporary table for expired/expiring credit cards.
    /// </summary>
    private void insertExpiredCreditCardsTmp()
    {
        boolean recordsFound;
        date expiredDaysDate, expiringDaysDate;        
        date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());        

        if (showExpiredCreditCards && expiredDays)
        {
            expiredDaysDate = DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), -expiredDays));

            SKS_CC_CreditCardCustView creditCardCustView;
            Query queryExpired = new Query(this.parmQuery());
            QueryBuildDataSource qbdsCreditCardCustView = queryExpired.dataSourceTable(tableNum(SKS_CC_CreditCardCustView));

            QueryBuildFieldList qbdsFldListCCView = qbdsCreditCardCustView.fields();
            qbdsFldListCCView.clearFieldList();
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, CardNumber));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, CreditCardTypeName));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, CardRecId));            
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, ExpiryDate));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, Name));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, UniqueCardId));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, SKS_CC_DefaultCard));
            qbdsFldListCCView.dynamic(QueryFieldListDynamic::No);

            QueryBuildRange qbrExpirationDate;
            if (qbdsCreditCardCustView)
            {
                qbrExpirationDate = qbdsCreditCardCustView.findRange(fieldNum(SKS_CC_CreditCardCustView, ExpirationDate));
            }

            if (!qbrExpirationDate)
            {
                qbrExpirationDate = qbdsCreditCardCustView.addRange(fieldNum(SKS_CC_CreditCardCustView, ExpirationDate));
            }

            qbrExpirationDate.value(SysQuery::range(expiredDaysDate, (currentDate - 1)));

            QueryBuildDataSource qbdsCustTable = queryExpired.dataSourceTable(tableNum(CustTable));

            QueryBuildFieldList qbdsFldListCust = qbdsCustTable.fields();
            qbdsFldListCust.clearFieldList();
            qbdsFldListCust.addField(fieldNum(CustTable, AccountNum));            
            qbdsFldListCust.dynamic(QueryFieldListDynamic::No);

            Map fieldMapping = new Map(Types::String, Types::Container);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CardNumber), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, CardNumber)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CreditCardTypeName), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, CreditCardTypeName)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CreditCardCustRecId), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, CardRecId)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, ExpiryDate), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, ExpiryDate)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CardHolderName), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, Name)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, UniqueCardId), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, UniqueCardId)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, IsDefaultCard), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, SKS_CC_DefaultCard)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CustAccount), [qbdsCustTable.uniqueId(), fieldStr(CustTable, AccountNum)]);

            query::insert_recordset(expiredCreditCardsTmp, fieldMapping, queryExpired);

            update_recordset expiredCreditCardsTmp
                setting ExpiredStatus = 'Expired';
        }

        if (showExpiringCreditCards && expiringDays)
        {
            expiringDaysDate = DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), expiringDays));

            Query queryExpiring = new Query(this.parmQuery());
            QueryBuildDataSource qbdsCreditCardCustView = queryExpiring.dataSourceTable(tableNum(SKS_CC_CreditCardCustView));

            QueryBuildFieldList qbdsFldListCCView = qbdsCreditCardCustView.fields();
            qbdsFldListCCView.clearFieldList();
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, CardNumber));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, CreditCardTypeName));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, CardRecId));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, ExpiryDate));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, Name));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, UniqueCardId));
            qbdsFldListCCView.addField(fieldNum(SKS_CC_CreditCardCustView, SKS_CC_DefaultCard));
            qbdsFldListCCView.dynamic(QueryFieldListDynamic::No);

            QueryBuildRange qbrExpirationDate;
            if (qbdsCreditCardCustView)
            {
                qbrExpirationDate = qbdsCreditCardCustView.findRange(fieldNum(SKS_CC_CreditCardCustView, ExpirationDate));
            }

            if (!qbrExpirationDate)
            {
                qbrExpirationDate = qbdsCreditCardCustView.addRange(fieldNum(SKS_CC_CreditCardCustView, ExpirationDate));
            }

            qbrExpirationDate.value(SysQuery::range((currentDate + 1), expiringDaysDate));

            QueryBuildDataSource qbdsCustTable = queryExpiring.dataSourceTable(tableNum(CustTable));

            QueryBuildFieldList qbdsFldListCust = qbdsCustTable.fields();
            qbdsFldListCust.clearFieldList();
            qbdsFldListCust.addField(fieldNum(CustTable, AccountNum));
            qbdsFldListCust.dynamic(QueryFieldListDynamic::No);

            Map fieldMapping = new Map(Types::String, Types::Container);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CardNumber), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, CardNumber)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CreditCardTypeName), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, CreditCardTypeName)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CreditCardCustRecId), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, CardRecId)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, ExpiryDate), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, ExpiryDate)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CardHolderName), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, Name)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, UniqueCardId), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, UniqueCardId)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, IsDefaultCard), [qbdsCreditCardCustView.uniqueId(), fieldStr(SKS_CC_CreditCardCustView, SKS_CC_DefaultCard)]);
            fieldMapping.insert(fieldStr(SKS_CC_ExpiredCreditCardsTmp, CustAccount), [qbdsCustTable.uniqueId(), fieldStr(CustTable, AccountNum)]);

            query::insert_recordset(expiredCreditCardsTmp, fieldMapping, queryExpiring);

            update_recordset expiredCreditCardsTmp
                setting ExpiredStatus = 'Expiring'
                where expiredCreditCardsTmp.ExpiredStatus == '';
        }

        SKS_CC_ExpiredCreditCardsTmp expiredCreditCardsTmpCnt;
        expiredCreditCardsTmpCnt.linkPhysicalTableInstance(expiredCreditCardsTmp);

        select count(RecId) from expiredCreditCardsTmpCnt;
        if (!expiredCreditCardsTmpCnt.RecId)
        {
            return;
        }

        CustTable custTable;
        DirPartyTable dirPartyTable;

        update_recordset expiredCreditCardsTmp
            setting CustomerName = dirPartyTable.Name
            join TableId from custTable
                where custTable.AccountNum == expiredCreditCardsTmp.CustAccount
            join Name from dirPartyTable
                where dirPartyTable.RecId == custTable.Party;

        while select forupdate expiredCreditCardsTmp
        {
            SalesTable salesTable;
            
            select count(RecId) from salesTable
                where salesTable.CustAccount == expiredCreditCardsTmp.CustAccount
                && (salesTable.SalesStatus == SalesStatus::Backorder ||
                    salesTable.SalesStatus == SalesStatus::Delivered)
                && salesTable.CreditCardCustRefId == expiredCreditCardsTmp.CreditCardCustRecId;

            if (salesTable.RecId)
            {
                expiredCreditCardsTmp.OpenSalesOrderCnt = salesTable.RecId;
            }

            CreditCardAuthTrans creditCardAuthTrans;
            
            select count(RecId) from creditCardAuthTrans
                where creditCardAuthTrans.UniqueCardId == expiredCreditCardsTmp.UniqueCardId
                && creditCardAuthTrans.ApprovalType == CreditCardOperation::Authorize
                && !creditCardAuthTrans.ApprovalExpired
                && !creditCardAuthTrans.ApprovalVoid
                && creditCardAuthTrans.ProcessorStatus == CreditCardProcessorStatus::Approved;

            if (creditCardAuthTrans.RecId)
            {
                expiredCreditCardsTmp.PendingAuthTransCnt = creditCardAuthTrans.RecId;
            }

            ttsbegin;            
            expiredCreditCardsTmp.doUpdate();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by <c>SKS_CC_ExpiredCreditCards</c> report.
    /// </remarks>
    public void processReport()
    {
        SKS_CC_ExpiredCreditCardsContract contract = this.parmDataContract();

        showExpiredCreditCards = contract.parmShowExpiredCreditCards();
        showExpiringCreditCards = contract.parmShowExpiringCreditCards();
        expiredDays = contract.parmExpiredDays();
        expiringDays = contract.parmExpiringDays();
        
        this.insertExpiredCreditCardsTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>