<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_VendBankAccountsEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_VendBankAccountsEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>VendBankAccount_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(VendBankAccounts, VendBankAccount), FormDataSourceEventType::Activated)]
    public static void VendBankAccount_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        
        SKS_VendBankAccountsEventHandler::SKS_setPreNoteStatusEnabled(formRun);
        SKS_VendBankAccountsEventHandler::SKS_setAccountApprovalEnabled(formRun);
        SKS_VendBankAccountsEventHandler::SKS_setEFTTab(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendBankAccount_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(VendBankAccounts, VendBankAccount), FormDataSourceEventType::Initialized)]
    public static void VendBankAccount_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        SKS_EFT_VendorPaym msks_eft_vendorpaym;
        FormRun form = sender.formRun();
        VendTable vendTable = form.args().record() as vendTable;
        Query query = sender.query();
        QueryBuildRange qbrVendor;
        QueryBuildRange qbrBank;

        if (form.args().dataset() == tablenum(VendTable))
        {
            qbrVendor = query.dataSourceNo(1).addRange(fieldnum(VendBankAccount, AccountID));
            qbrVendor.value(msks_eft_vendorpaym.VendBankAccountId);
            
            qbrBank = query.dataSourceNo(1).addRange(fieldnum(VendBankAccount, VendAccount));
            qbrBank.value(vendTable.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendBankAccounts_Post_canClose</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(VendBankAccounts), formMethodStr(VendBankAccounts, canClose))]
    public static void VendBankAccounts_Post_canClose(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        FormDataSource vendBankAccount_ds  = formRun.dataSource(formDataSourceStr(VendBankAccounts, VendBankAccount)) as FormDataSource;
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();

        if(vendBankAccount.RecId)
        {
            vendBankAccount.validateWrite();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>BankAccountType_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, BankAccountType), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, BankGroupID), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, BankIBAN), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, RegistrationNum), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SWIFTNo), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, AccountNum), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankId), FormDataFieldEventType::Modified), // SKS FDD 9536 -->//
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankSwift), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankAcct), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankName), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankBranch), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankAddr), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankAddr2), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankCity), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WIntBankCountryRegionId), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WCrePartyBankId), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WCrePartySwift), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WCrePartyAcct), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WCrePartyBankName), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WCrePartyName), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WCrePartyAddr), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WCrePartyCity), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_IHB_WCrePartyCountryRegionId), FormDataFieldEventType::Modified)] // SKS FDD 9536 <--//
    public static void BankAccountType_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource vendBankAccount_ds = sender.dataSource();
        FormRun form = vendBankAccount_ds.formRun();

        SKS_VendBankAccountsEventHandler::SKS_changePreNoteStatus(form);
        SKS_VendBankAccountsEventHandler::SKS_changeAccountApproval(form);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_AcctStatus_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_EFT_AcctStatus), FormDataFieldEventType::Modified)]
    public static void SKS_EFT_AcctStatus_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource vendBankAccount_ds = sender.datasource();
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();

        ttsbegin;
        if(vendBankAccount.SKS_EFT_AcctStatus == SKS_EFT_AcctApprovalStatus::Approved)
        {
            vendBankAccount.SKS_EFT_AcctApprover = curuserid();
            vendBankAccount.SKS_EFT_AcctApprovalDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            vendBankAccount.SKS_EFT_AcctApprover = '';
            vendBankAccount.SKS_EFT_AcctApprovalDate = dateNull();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PreNoteStatus_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_EFT_PreNoteStatus), FormDataFieldEventType::Modified)]
    public static void SKS_EFT_PreNoteStatus_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        SKS_EB_PreNoteStatus currentPreNoteStatus, mOrigPreNoteStatus;
        FormDataSource vendBankAccount_ds = sender.datasource();
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();
        FormRun form = vendBankAccount_ds.formRun();
        DictEnum dictSKSNotesStatus = new DictEnum(enumNum(SKS_EB_PreNoteStatus));        
        mOrigPreNoteStatus = dictSKSNotesStatus.name2Value(form.parmPreNoteStatus());

        ttsbegin;        
        currentPreNoteStatus = vendBankAccount.SKS_EFT_PreNoteStatus;

        if(mOrigPreNoteStatus != currentPreNoteStatus)
        {
            if(vendBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::New && mOrigPreNoteStatus != SKS_EB_PreNoteStatus::New)
            {
                info("@SKS1574");
                vendBankAccount.SKS_EFT_PreNoteDate = dateNull();
            }
            else if(vendBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::Approved && mOrigPreNoteStatus == SKS_EB_PreNoteStatus::Pending)
            {
                info("@SKS1575");
                vendBankAccount.SKS_EFT_PreNoteDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            }
        }
        
        form.parmPreNoteStatus(dictSKSNotesStatus.value2Label(vendBankAccount.SKS_EFT_PreNoteStatus));        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PreNoteStatus_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(VendBankAccounts, VendBankAccount, SKS_EFT_PreNoteStatus), FormDataFieldEventType::Validated)]
    public static void SKS_EFT_PreNoteStatus_OnValidated(FormDataObject sender, FormDataFieldEventArgs e)
    {
        SKS_EB_PreNoteStatus currentPreNoteStatus,mOrigPreNoteStatus;
        FormDataSource vendBankAccount_ds = sender.datasource();
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();   
        FormRun form = vendBankAccount_ds.formRun();
        DictEnum dictSKSNotesStatus = new DictEnum(enumNum(SKS_EB_PreNoteStatus));
                        
        mOrigPreNoteStatus = dictSKSNotesStatus.name2Value(form.parmPreNoteStatus());
        currentPreNoteStatus = vendBankAccount.SKS_EFT_PreNoteStatus;

        if(mOrigPreNoteStatus != currentPreNoteStatus)
        {
            SKS_VendBankAccountsEventHandler::SKS_validatePreNote(vendBankAccount_ds.formRun());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendBankAccounts_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(VendBankAccounts), formMethodStr(VendBankAccounts, init))]
    public static void VendBankAccounts_Post_init(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        FormDesign formDesign = formRun.design();
        FormStringControl isVisibleValue = formDesign.controlName(formControlStr(VendBankAccounts, IsVisibleValue));

        isVisibleValue.text("@SKS1576");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_VendorPaym</Name>
				<Source><![CDATA[
    public static SKS_EFT_VendorPaym getSKS_EFT_VendorPaym(str _parmValue)
    {
        SKS_EFT_VendorPaym msks_eft_vendorpaym;

        if (_parmValue)
        {
            select crosscompany msks_eft_vendorpaym where msks_eft_vendorpaym.RecId == str2int64(_parmValue);
        }
        return msks_eft_vendorpaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EFT_Setup</Name>
				<Source><![CDATA[
    public static SKS_EFT_Setup getSKS_EFT_Setup(FormRun  _formRun)
    {
        SKS_EFT_Setup msks_eft_setup;
        SKS_EFT_VendorPaym msks_eft_vendorpaym;

        if (_formRun.args().parm())
        {
            msks_eft_vendorpaym = SKS_VendBankAccountsEventHandler::getSKS_EFT_VendorPaym(_formRun.args().parm());
            changeCompany(msks_eft_vendorpaym.company())
            {
                select firstonly msks_eft_setup;
            }
        }
        else
        {
            select firstonly msks_eft_setup;
        }

        return msks_eft_setup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_changeAccountApproval</Name>
				<Source><![CDATA[
    static void SKS_changeAccountApproval(FormRun  _formRun)
    {
        FormDataSource  vendBankAccount_ds = _formRun.dataSource(formDataSourceStr(VendBankAccounts, VendBankAccount)) as FormDataSource;
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();
        FormComboBoxControl vendBankAccount_SKS_EFT_AcctStatus = _formRun.Design().controlName(formControlStr(VendBankAccounts,VendBankAccount_SKS_EFT_AcctStatus));
        
        if(SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(_formRun).APAcctApproval == NoYes::Yes)
        {
            VendBankAccount.SKS_EFT_AcctStatus = SKS_EFT_AcctApprovalStatus::Pending;
            VendBankAccount.SKS_EFT_AcctModifier = curuserid();
            VendBankAccount.SKS_EFT_AcctModifiedDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            VendBankAccount.SKS_EFT_AcctApprover = '';
            VendBankAccount.SKS_EFT_AcctApprovalDate = dateNull();
            VendBankAccount.SKS_EFT_APAccountApprGroup = SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(_formRun).APAccountApprGroup;
            
            // Disable field in case this user was allowed to approve and has now changed a field
            vendBankAccount_SKS_EFT_AcctStatus.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_changePreNoteStatus</Name>
				<Source><![CDATA[
    static void SKS_changePreNoteStatus(FormRun  _formRun)
    {
        FormDataSource vendBankAccount_ds = _formRun.dataSource(formDataSourceStr(VendBankAccounts, VendBankAccount)) as FormDataSource;
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();
        SKS_EFT_Setup msks_eft_setup = SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(_formRun);
        SKS_EFT_FileFormat sks_eft_fileformat;
        SKS_EFT_FileFormatPaymSpec sks_eft_fileformatpaymspec;
        SKS_EFT_VendorPaym sks_eft_vendorpaym;
        DictEnum dictSKSNotesStatus = new DictEnum(enumNum(SKS_EB_PreNoteStatus));
        
        if(vendBankAccount.SKS_EFT_PreNoteStatus != SKS_EB_PreNoteStatus::New)
        {
            changeCompany(msks_eft_setup.company())
            {
                select firstonly prenote, formatid from sks_eft_fileformat
                    where sks_eft_fileformat.PreNote == NoYes::Yes
                    join formatid, paymspec, vendbankaccountid from sks_eft_vendorpaym
                    where sks_eft_vendorpaym.VendBankAccountId == vendbankaccount.AccountID && 
                        sks_eft_vendorpaym.FormatId == sks_eft_fileformat.FormatId && 
                        sks_eft_vendorpaym.VendAccount == vendBankAccount.AccountNum
                    join prenote, formatid, paymspec from sks_eft_fileformatpaymspec
                    where  sks_eft_fileformatpaymspec.FormatId == sks_eft_vendorpaym.FormatId && 
                        sks_eft_fileformatpaymspec.PaymSpec == sks_eft_vendorpaym.PaymSpec && 
                        sks_eft_fileformatpaymspec.PreNote == NoYes::Yes;
                
                if(sks_eft_fileformat && msks_eft_setup.APReqPreNote)
                {
                    vendBankAccount.SKS_EFT_PreNoteStatus = SKS_EB_PreNoteStatus::New;
                    _formRun.parmPreNoteStatus(dictSKSNotesStatus.value2Label(SKS_EB_PreNoteStatus::New));                    
                    vendBankAccount.SKS_EFT_PreNoteDate = global::dateNull();
                    info("@SKS1574");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_getUserGroupList</Name>
				<Source><![CDATA[
    static boolean SKS_getUserGroupList(FormRun  _formRun)
    {
        boolean ret;
        UserGroupList   usergrouplist;
        
        select firstonly * from usergrouplist where usergrouplist.userid == curuserid() && usergrouplist.groupId == SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(_formRun).APAccountApprGroup;
        
        if(usergrouplist)
        {
            ret = true;
        }
        else
        {
            ret = false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_setAccountApprovalEnabled</Name>
				<Source><![CDATA[
    static void SKS_setAccountApprovalEnabled(FormRun  _formRun)
    {
        FormDesign formDesign = _formRun.design();
        FormGroupControl accountApproval = formDesign.controlName(formControlStr(VendBankAccounts, AccountApproval));
        FormDataSource vendBankAccount_ds = _formRun.dataSource(formDataSourceStr(VendBankAccounts, VendBankAccount)) as FormDataSource;
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();
        FormComboBoxControl vendBankAccount_SKS_EFT_AcctStatus = formDesign.controlName(formControlStr(VendBankAccounts, VendBankAccount_SKS_EFT_AcctStatus));
        SKS_EFT_Setup msks_eft_setup = SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(_formRun);
        //SKS FDD 9536 -->
        FormGroupControl IHB_WireIntermediaryBank = formDesign.controlName(formControlStr(VendBankAccounts, SKS_IHB_WireIntermediaryBank));
        FormGroupControl IHB_WireCreditParty = formDesign.controlName(formControlStr(VendBankAccounts, SKS_IHB_WireCreditParty));
        //SKS FDD 9536 <--

        if(msks_eft_setup.APAcctApproval == NoYes::No)
        {
            accountApproval.visible(false);
        }
        else
        {
            if(msks_eft_setup.APApproverChangeInfo == NoYes::Yes)
            {
                //Sks_Bug_7538 --->
                if(SKS_VendBankAccountsEventHandler::SKS_getUserGroupList(_formRun))
                {
                    //Sks_Bug_7538 <---
                    vendBankAccount_ds.object(fieldnum(VendBankAccount, Name)).allowedit(false);
                    vendBankAccount_ds.object(fieldnum(VendBankAccount, BankGroupID)).allowedit(false);
                    vendBankAccount_ds.object(fieldnum(VendBankAccount, BankCodeType)).allowedit(false);
                    vendBankAccount_ds.object(fieldnum(VendBankAccount, RegistrationNum)).allowedit(false);
                    vendBankAccount_ds.object(fieldnum(VendBankAccount, AccountNum)).allowedit(false);
                    vendBankAccount_ds.object(fieldnum(VendBankAccount, SWIFTNo)).allowedit(false);
                    vendBankAccount_ds.object(fieldnum(VendBankAccount, BankIBAN)).allowedit(false);
                    vendBankAccount_ds.object(fieldnum(VendBankAccount, BankAccountType)).allowedit(false);
                    //Sks_Bug_7538 --->

                    //SKS FDD 9536 -->
                    IHB_WireIntermediaryBank.enabled(false);
                    IHB_WireCreditParty.enabled(false);
                    //SKS FDD 9536 <--
                }
                //Sks_Bug_7538 <----
            }
            
            accountApproval.visible(true);
            
            if(vendBankAccount.SKS_EFT_AcctStatus != SKS_EFT_AcctApprovalStatus::Approved &&
               vendBankAccount.SKS_EFT_AcctModifier != curuserid() &&
               SKS_VendBankAccountsEventHandler::SKS_getUserGroupList(_formRun))//Sks_Bug_7538
            {
                vendBankAccount_SKS_EFT_AcctStatus.enabled(true);
            }
            else
            {
                vendBankAccount_SKS_EFT_AcctStatus.enabled(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_setEFTTab</Name>
				<Source><![CDATA[
    static void SKS_setEFTTab(FormRun  _formRun)
    {
        FormDesign formDesign = _formRun.design();
        FormGroupControl accountApproval = formDesign.controlName(formControlStr(VendBankAccounts, AccountApproval));
        FormGroupControl eftPlusPreNote = formDesign.controlName(formControlStr(VendBankAccounts, EFTPlusPreNote));
        FormStringControl isVisibleValue = formDesign.controlName(formControlStr(VendBankAccounts, IsVisibleValue));

        if(!eftPlusPreNote.isVisible() && !accountApproval.isVisible())
        {
            isVisibleValue.visible(true);
        }
        else
        {
            isVisibleValue.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_setPreNoteStatusEnabled</Name>
				<Source><![CDATA[
    static void SKS_setPreNoteStatusEnabled(FormRun  _formRun)
    {
        FormDesign formDesign = _formRun.design();
        FormDataSource vendBankAccount_ds = _formRun.dataSource(formDataSourceStr(VendBankAccounts, VendBankAccount)) as FormDataSource;
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();
        SKS_EFT_Setup msks_eft_setup = SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(_formRun);
        SKS_EFT_VendorPaym msks_eft_vendorpaym = SKS_VendBankAccountsEventHandler::getSKS_EFT_VendorPaym(_formRun.args().parm());
        SKS_EFT_FileFormat sks_eft_fileformat;
        SKS_EFT_FileFormatPaymSpec sks_eft_fileformatpaymspec;
        FormGroupControl eftPlusPreNote = formDesign.controlName(formControlStr(VendBankAccounts, EFTPlusPreNote));
        FormComboBoxControl vendBankAccount_SKS_EFT_PreNoteStatus = formDesign.controlName(formControlStr(VendBankAccounts, VendBankAccount_SKS_EFT_PreNoteStatus));
        DictEnum dictSKSNotesStatus = new DictEnum(enumNum(SKS_EB_PreNoteStatus));
                
        _formRun.parmPreNoteStatus(dictSKSNotesStatus.value2Label(vendBankAccount.SKS_EFT_PreNoteStatus));

        if(msks_eft_setup.APReqPreNote)
        {
            if(msks_eft_vendorpaym && vendBankAccount.SKS_EFT_PreNoteStatus != SKS_EB_PreNoteStatus::NotApplicable)
            {
                changeCompany(msks_eft_setup.company())
                {
                    select firstonly prenote, formatid from sks_eft_fileformat
                        where sks_eft_fileformat.PreNote == NoYes::Yes && 
                            sks_eft_fileformat.FormatId == msks_eft_vendorpaym.FormatId
                        join prenote, formatid, paymspec from sks_eft_fileformatpaymspec
                        where  sks_eft_fileformatpaymspec.FormatId == msks_eft_vendorpaym.FormatId && 
                            sks_eft_fileformatpaymspec.PaymSpec == msks_eft_vendorpaym.PaymSpec && 
                            sks_eft_fileformatpaymspec.PreNote == NoYes::Yes;
                }
                if(sks_eft_fileformat)
                {
                    eftPlusPreNote.visible(true);
                    vendBankAccount_SKS_EFT_PreNoteStatus.enabled(true);
                }
                else
                {
                    eftPlusPreNote.visible(false);
                }
            }
            else
            {
                if(vendBankAccount.SKS_EFT_PreNoteStatus == SKS_EB_PreNoteStatus::NotApplicable)
                {
                    eftPlusPreNote.visible(false);
                }
                else
                {
                    eftPlusPreNote.visible(true);
                    vendBankAccount_SKS_EFT_PreNoteStatus.enabled(true);
                }
            }
        }
        else
        {
            eftPlusPreNote.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_validatePreNote</Name>
				<Source><![CDATA[
    static boolean SKS_validatePreNote(FormRun  _formRun)
    {
        FormDataSource vendBankAccount_ds = _formRun.dataSource(formDataSourceStr(VendBankAccounts, VendBankAccount)) as FormDataSource;
        VendBankAccount vendBankAccount = vendBankAccount_ds.cursor();
        SKS_EFT_Setup msks_eft_setup = SKS_VendBankAccountsEventHandler::getSKS_EFT_Setup(_formRun);
        SKS_EFT_VendorPaym sks_vendPaym = SKS_VendBankAccountsEventHandler::getSKS_EFT_VendorPaym(_formRun.args().parm());        
        SKS_EFT_FileFormat sks_eft_fileformat;
        SKS_EFT_FileFormatPaymSpec sks_eft_fileformatpaymspec;
        SKS_EB_PreNoteStatus mOrigPreNoteStatus;
        DictEnum dictSKSNotesStatus = new DictEnum(enumNum(SKS_EB_PreNoteStatus));

        mOrigPreNoteStatus = dictSKSNotesStatus.name2Value(_formRun.parmPreNoteStatus());
                
        changeCompany(msks_eft_setup.company())
        {
            switch(vendBankAccount.SKS_EFT_PreNoteStatus)
            {
                case SKS_EB_PreNoteStatus::NotApplicable:
                    select firstonly sks_vendPaym 
                        where sks_vendPaym.VendAccount == vendBankAccount.VendAccount &&
                            sks_vendPaym.VendBankAccountId == vendBankAccount.AccountID
                        join PreNote, FormatId from sks_eft_FileFormat 
                        where sks_eft_FileFormat.FormatId == sks_vendPaym.FormatId &&
                            sks_eft_FileFormat.PreNote == NoYes::Yes
                        join PreNote, FormatId, PaymSpec from sks_eft_fileformatpaymspec 
                        where sks_eft_fileformatpaymspec.FormatId == sks_vendPaym.FormatId &&
                            sks_eft_fileformatpaymspec.PaymSpec == sks_vendpaym.PaymSpec &&
                            sks_eft_fileformatpaymspec.PreNote == NoYes::Yes;
                    
                    if(sks_vendPaym) // Prenotes on for spec and in use by vendor so can't set to Not applicable
                    {
                        return checkfailed("@SKS1571");
                    }
                    break;
                    
                case SKS_EB_PreNoteStatus::Pending:
                    if(mOrigPreNoteStatus != SKS_EB_PreNoteStatus::Pending)
                    {
                        return checkfailed("@SKS1572");
                    }
                    break;
                    
                case SKS_EB_PreNoteStatus::Approved:
                    if(mOrigPreNoteStatus == SKS_EB_PreNoteStatus::New || mOrigPreNoteStatus == SKS_EB_PreNoteStatus::NotApplicable)
                    {
                        return checkfailed("@SKS1573");
                    }
                    break;
                    
                default:
                    break;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>VendBankAccount_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updated EventHandler
    /// </summary>
    /// <param name="sender">sender</param>
    /// <param name="e">e</param>
    [DataEventHandler(tableStr(VendBankAccount), DataEventType::Updated),
        SuppressBPWarning('BPParameterNotUsed', 'Parameter e required in signature')]
    public static void VendBankAccount_onUpdated(Common sender, DataEventArgs e)
    {
        //<Issue20483>
        VendBankAccount vendBankAccount = sender as VendBankAccount;

        if(vendBankAccount.currentBankAccountStatus() == enum2Str(BankAccountStatus::Active))
        {
            SKS_EFT_VendorPaym::update_EFT_VendorPaymAddress(vendBankAccount);
        }
        //</Issue20483>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>