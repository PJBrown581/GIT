<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_APCreateBankAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_APCreateBankAccount Class for creating a TAS_Auto Bank account
/// </summary>
class SKS_EFT_APCreateBankAccount
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreateBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating a TAS_Auto Bank account
    /// </summary>
    /// <param name = "_vendTableLoc">VendTable buffer</param>
    /// <returns> returnd true if bank account created otherwise; false </returns>
    public static boolean CreateBankAccount(VendTable _vendTableLoc)
    {
        VendBankAccount vendBankAccount, locVendBankAccount;
        SKS_EFT_FileFormatPaymSpec fileFormatPaymSpec;
        boolean istrue = false;

        if((_vendTableLoc.PaymMode && _vendTableLoc.PaymSpec))
        {
            select firstonly fileFormatPaymSpec
                where fileFormatPaymSpec.FormatId  == VendPaymModeTable::find(_vendTableLoc.PaymMode).SKS_EFT_FormatId
                    && fileFormatPaymSpec.PaymSpec == _vendTableLoc.PaymSpec;

            if(fileFormatPaymSpec.APAutoCreateBankAccount)
            {
                select firstonly locVendBankAccount
                    where locVendBankAccount.VendAccount == _vendTableLoc.AccountNum
                        && locVendBankAccount.AccountID == 'TAS_AUTO';

                if(!locVendBankAccount)
                {
                    vendBankAccount.AccountID = 'TAS_AUTO';
                    vendBankAccount.Name = 'TAS_AUTO';
                    vendBankAccount.VendAccount = _vendTableLoc.AccountNum;
                    vendBankAccount.insert();
                     
                    if(!_vendTableLoc.BankAccount)
                    {
                        ttsbegin;
                        _vendTableLoc.selectForUpdate(true);
                        _vendTableLoc.BankAccount = 'TAS_AUTO';
                        _vendTableLoc.update();
                        ttscommit;
                    }
                }
                else if (locVendBankAccount && _vendTableLoc.BankAccount == '')
                {
                    ttsbegin;
                    _vendTableLoc.selectForUpdate(true);
                    _vendTableLoc.BankAccount = 'TAS_AUTO';
                    _vendTableLoc.update();
                    ttscommit;
                }

                istrue = true;
            }
        }
        return istrue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorPaymSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creating vendor eBanking details
    /// </summary>
    /// <param name = "_vendAccount">vendAccount buffer</param>
    /// <param name = "_companyId">CompanyId buffer</param>
    /// <param name = "_paymMode">PaymMode buffer</param>
    /// <param name = "_paymSpec">PaymSpec buffer</param>
    /// <param name = "_vendBankAccountId">vendor BankAccountId buffer</param>
    public static void createVendorPaymSpec(VendAccount _vendAccount,
                                          CompanyId _companyId,
                                          PaymMode _paymMode,
                                          PaymSpec _paymSpec,
                                          VendBankAccountId _vendBankAccountId)
    {
        SKS_EFT_VendorPaym sks_EFT_VendorPaym;
    
        sks_EFT_VendorPaym.VendCompany        = _companyId;
        sks_EFT_VendorPaym.VendAccount        = _vendAccount;
        sks_EFT_VendorPaym.PaymMode           = _paymMode;
        sks_EFT_VendorPaym.PaymSpec           = _paymSpec;
        sks_EFT_VendorPaym.VendBankAccountId  = _vendBankAccountId;
        sks_EFT_VendorPaym.AllowDR            = NoYes::Yes;

        // 21677
        VendPaymModeTable paymMode = VendPaymModeTable::find(_paymMode);
        if (paymMode.SKS_EFT_FormatId)
        {
            sks_EFT_VendorPaym.EDI820Layout = SKS_EFT_FileFormatPaymSpec::find(paymMode.SKS_EFT_FormatId, _paymSpec).EDI820DefaultPartner;
        }
    
        SKS_EFT_Vendorload::UpdateVendorAddresses(SKS_EFT_VendorPaym, false);
        SKS_EFT_Vendorload::UpdateVendorBankAddresses(SKS_EFT_VendorPaym);
    
        sks_EFT_VendorPaym.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendorEBankingDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create vendor ebanking details.
    /// </summary>
    /// <param name = "_vendTable"> VendTable </param>
    /// <param name = "_companyId"> Company id </param>
    /// <returns> returns if it is successful otherwise, false </returns>
    public static boolean createVendorEBankingDetail(VendTable _vendTable, CompanyId _companyId)
    {
        SKS_EB_Vendor   sks_EB_Vendor;
        SKS_EFT_Setup sks_eft_Setup;
    
        sks_EB_Vendor = SKS_EB_Vendor::find(_companyId, _VendTable.AccountNum);
    
        if(sks_EB_Vendor)
        {
            return false;
        }
    
        //primary index fields
        sks_EB_Vendor.VendAccount = _VendTable.AccountNum;
        sks_EB_Vendor.VendCompany = _companyId;
    
        sks_EB_Vendor.Active = NoYes::Yes;
        sks_EB_Vendor.PaymCanChange = NoYes::Yes;            
        sks_EB_Vendor.EMNotification = NoYes::Yes;
            
        sks_EB_Vendor.EM1Vendor = NoYes::Yes;
    
        sks_EB_Vendor.EMReplyToFromBank = NoYes::Yes;
        sks_EB_Vendor.EMTemplateFromBank = NoYes::Yes;
    
        // Template default.
        sks_EB_Vendor.APTemplateFromSetup = NoYes::Yes;
        sks_EB_Vendor.APTemplateAttachment     = sks_eft_Setup.APTemplateAttachment;
        sks_EB_Vendor.APSRS1Attachment         = sks_eft_Setup.APSRS1Attachment;
        sks_EB_Vendor.APSRS2Attachment         = sks_eft_Setup.APSRS2Attachment;
    
        //Remit Attach Detail
        sks_EB_Vendor.EMTemplateWithAttachFromBank = NoYes::Yes;
    
        sks_EB_Vendor.EMTemplateFromSetup = NoYes::Yes;
        sks_EB_Vendor.EMAttachNbrDocs = sks_eft_Setup.APEMAttachNbrDocs;
        sks_EB_Vendor.EMAttachFileName = sks_eft_Setup.APEMAttachFileName;
        sks_EB_Vendor.EMAttachInclDate = sks_eft_Setup.APEMAttachInclDate;
        sks_EB_Vendor.EMAttachInclVend = sks_eft_Setup.APEMAttachInclVend;
        sks_EB_Vendor.EMAttachFileExt = sks_eft_Setup.APEMAttachFileExt;
    
        // SRS1 attachment default
        sks_EB_Vendor.APSRS1EMTemplateFromSetup = NoYes::Yes;
        sks_EB_Vendor.APSRS1EmailSSRS          = sks_eft_Setup.APSRS1EmailSSRS;
        sks_EB_Vendor.APSRS1FileName           = sks_eft_Setup.APSRS1FileName;
        sks_EB_Vendor.APSRS1FileType           = sks_eft_Setup.APSRS1FileType;
    
        // SRS2 attachment deafult
        sks_EB_Vendor.APSRS2EMTemplateFromSetup = NoYes::Yes;
        sks_EB_Vendor.APSRS2EmailSSRS          = sks_eft_Setup.APSRS2EmailSSRS;
        sks_EB_Vendor.APSRS2FileName           = sks_eft_Setup.APSRS2FileName;
        sks_EB_Vendor.APSRS2FileType           = sks_eft_Setup.APSRS2FileType;
    
        sks_EB_Vendor.insert();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndUpdateDefVendBankAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create and Update the vendor bank account.
    /// </summary>
    /// <param name = "_vendTable"> vendTable buffer</param>
    /// <returns> return true otherwise; false </returns>
    public static boolean createAndUpdateDefVendBankAcct(VendTable _vendTable)
    {
        VendBankAccount vendBankAccount = VendBankAccount::find(_vendTable.AccountNum, 'TAS_AUTO');
        if(_vendTable && !vendBankAccount)
        {
            vendBankAccount.clear();
            vendBankAccount.AccountID = 'TAS_AUTO';
            vendBankAccount.Name = 'TAS AUTO';
            vendBankAccount.VendAccount = _vendTable.AccountNum;
            vendBankAccount.insert();
            
    
            //Default vend bank account
            if (_vendTable.BankAccount == '')
            {
                ttsbegin;
                _vendTable.selectForUpdate(true);
                _vendTable.BankAccount = vendBankAccount.AccountID;
                _vendTable.update();
                ttscommit;
            }
        }
        else if (vendBankAccount && _vendTable.BankAccount == '')
        {
            //Default vend bank account
            ttsbegin;
            _vendTable.selectForUpdate(true);
            _vendTable.BankAccount = vendBankAccount.AccountID;
            _vendTable.update();
            ttscommit; 
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendBankAccountBulkLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Crating bank account while bulkload
    /// </summary>
    /// <param name = "_vendTable">custtable buffer</param>
    /// <returns>vendBankAccount</returns>
    public static vendBankAccount createVendBankAccountBulkLoad(VendTable _vendTable)
    {
        vendBankAccount vendBankAccount;
        vendBankAccount locVendBankAccount;

        select firstonly locVendBankAccount
            where locVendBankAccount.VendAccount == _vendTable.AccountNum
                && locVendBankAccount.AccountID == 'TAS_AUTO';

        if (_vendTable && ! locVendBankAccount)
        {
            ttsbegin;
            vendBankAccount.clear();
            vendBankAccount.AccountID = 'TAS_AUTO';
            vendBankAccount.Name = 'TAS AUTO';
            vendBankAccount.VendAccount = _vendTable.AccountNum;
            vendBankAccount.insert();
            ttscommit;
        }

        return vendBankAccount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>