<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_Send</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_EB_Send
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParams</Name>
				<Source><![CDATA[
    public static str getParams(SKS_EB_CommProcess _SKS_EB_CommProcess,
                                    SKS_EB_FileName _SKS_EB_FileName,
                                    SKS_EB_FilePath _SKS_EB_FilePath,
                                    str _StrFileOnDisk,
                                    SKS_EB_ParamGroup _SKS_EB_ParamGroup = SKS_EB_ParamGroup::unclassified,
                                    str _SKS_EB_ControlFileName = '',
                                    str _SKS_EB_ControlFileNamePath = '')
    {
        SKS_EB_CommParams locSKS_EB_Params;
        System.Text.StringBuilder sbCommParams = new System.Text.StringBuilder();

        if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation)
        {
            while select * from locSKS_EB_Params order by locSKS_EB_Params.ParamOrder
                        where locSKS_EB_Params.CommID == _SKS_EB_CommProcess.CommID
                                && locSKS_EB_Params.ParamGroup == _SKS_EB_ParamGroup
            {
                if(locSKS_EB_Params.RelocParamType == SKS_EB_RelocParamType::FixedValue)
                                sbCommParams.Append('"' + locSKS_EB_Params.Value + '" ');
                else if(locSKS_EB_Params.RelocParamType == SKS_EB_RelocParamType::InboundRelocationPath)
                                sbCommParams.Append('"' + SKS_BR_File::removeLastPathSlash(_SKS_EB_FilePath) + '" ');
            }
        }
        else
        {
            while select * from locSKS_EB_Params order by locSKS_EB_Params.ParamOrder
                        where locSKS_EB_Params.CommID == _SKS_EB_CommProcess.CommID
                                && locSKS_EB_Params.ParamGroup == _SKS_EB_ParamGroup
            {
                if(locSKS_EB_Params.ParamType == SKS_EB_ParamType::FixedValue)                        //Todo BankFabric is this the file name creator?
                            sbCommParams.Append('"' + locSKS_EB_Params.Value + '" ');
                else if(locSKS_EB_Params.ParamType == SKS_EB_ParamType::FileName)
                            sbCommParams.Append('"' + _SKS_EB_FileName + '" ');
                else if(locSKS_EB_Params.ParamType == SKS_EB_ParamType::FilePath)
                            sbCommParams.Append('"' + SKS_BR_File::removeLastPathSlash(_SKS_EB_FilePath) + '" ');
                else if(locSKS_EB_Params.ParamType == SKS_EB_ParamType::FileNameAndPath)
                            sbCommParams.Append('"' + _StrFileOnDisk + '" ');
                else if(locSKS_EB_Params.ParamType == SKS_EB_ParamType::ControlFileName)
                            sbCommParams.Append('"' + _SKS_EB_ControlFileName + '" ');
                else if(locSKS_EB_Params.ParamType == SKS_EB_ParamType::ControlFileNamePath)
                            sbCommParams.Append('"' + _SKS_EB_ControlFileNamePath + '"');
            }
        }
        return sbCommParams.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>Send</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will handle sending and recieveing communication
    /// </summary>
    /// <param name = "_SKS_EB_CommProcess"></param>
        /// <param name = "_params">Items specified in the SKS_EB_CommProcess's optional parameters grid</param>
    /// <param name = "_StrUserCommProgram"></param>
    /// <param name = "_FilePath">On download, this is the path the file will be placed in.  No filename is specified as the bank will determine this.  On upload, this will contain both the path and filename to specify exactly which file to upload</param>
    /// <param name = "_IsBatch"></param>
    /// <returns></returns>
    public static boolean Send(SKS_EB_CommProcess _SKS_EB_CommProcess, str _params, str _StrUserCommProgram, str _FilePath, boolean _IsBatch, boolean _reloc = false, str _filename = '', str _filelocation = '')
    {
        boolean         rtnval;
        DialogButton    diagBut;
        str             locAdditionalInfo;
        SKS_EB_Send     sks_EB_Send;
        SKS_BF_BankIntType  sksBankIntType;
        
        rtnval = rtnval;
        sksBankIntType = SKS_EB_Batch::GetIntegrationType(_SKS_EB_CommProcess);

        While (true)
        {

            try
            {
                if (sksBankIntType == SKS_BF_BankIntType::BankFabric)
                {
                  
                    if(_SKS_EB_CommProcess.BankFabricCommunicationName == '' && _SKS_EB_CommProcess.Module != SKS_EB_Module::Lockbox)
                    {
                        error(strFmt("@SKS:SKGBankFabricCommNameEmpty",_SKS_EB_CommProcess.CommID));
                        return false;
                    }
                    else
                    {
                        SKS_EB_BankFabric fileFabric = SKS_EB_BankFabric::construct();
                        fileFabric.runProgram(_SKS_EB_CommProcess, _filelocation, _filename, _reloc);

                        if (fileFabric.errorHasException())
                        {
                            error(fileFabric.errorException());
                            rtnval = false;
                        }
                        else
                        {
                            rtnval = true;
                        }
                    }
                }
                else
                {                            
                    if(_SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::None)
                    {
                        rtnval = true;
                    }
                    else if (_SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::Browser)
                    {
                        if (_StrUserCommProgram)
                        {
                            Browser br = new Browser();
                            br.navigate(_StrUserCommProgram);
                        }

                        rtnval = true;
                    }
                    else if (_SKS_EB_CommProcess.CommType == SKS_PP_CommunicationsType::WebService)
                    {
                        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
                        fileHub.parmThrowErrorIfException(false);
                        if(_SKS_EB_CommProcess.CommTimeout > 0)
                        {
                            fileHub.parmTimeOutValue(_SKS_EB_CommProcess.CommTimeout);
                        }
                        fileHub.callWebService(_SKS_EB_CommProcess.Direction, _FilePath, _SKS_EB_CommProcess.FileType, _SKS_EB_CommProcess.CommUserProg, _params);

                        if (fileHub.errorHasException())
                        {
                            error(fileHub.errorException());
                            rtnval = false;
                        }
                        else
                        {
                            rtnval = true;
                        }
                    }
                    else  
                    {
                   
                            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
                            fileHub.parmThrowErrorIfException(false);
                            if(_SKS_EB_CommProcess.CommTimeout > 0)
                            {
                                fileHub.parmTimeOutValue(_SKS_EB_CommProcess.CommTimeout);
                            }
                            fileHub.runProgram(_StrUserCommProgram, _params, _FilePath, _reloc); 

                            if (fileHub.errorHasException())
                            {
                                error(fileHub.errorException());
                                rtnval = false;
                            }
                            else
                            {
                                rtnval = true;
                            }

                    }
                }
                
            }
            catch
            {
                rtnval = false;
            }

            if (rtnval)
            {
                break;
            }
            else
            {
                //Adds a param to the method so that this dialog isnot called for batch processes.
                if(_SKS_EB_CommProcess.FileCreateType != SKS_EB_FileCreate::Manual || _IsBatch)
                    diagBut = DialogButton::No;
                else
                {
                    diagBut = Box::yesNo(
                        locAdditionalInfo + "@SKS197",
                        DialogButton::No, // Initial focus is on the No button.
                        "@SKS198");
                }
                if (diagBut == DialogButton::No)
                {
                    break;
                }
                locAdditionalInfo = '';
            }
        }
        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>