<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_EU_BNP_XML_03</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_EU_BNP_XML_03  extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_EU_BNP_XML_03  extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20230518')
    #define.NORM('NORM')
    #define.URGP('URGP')
    #define.INTC('INTC')
    #define.SEPA('SEPA')
    #define.SEPA_URG('SEPA-URG')
    #define.NSEPA_URG('NSEPA-URG')
    #define.PRL('PRL')
    #define.POST('POST')
    #define.INTL_NSEPA('INTL-NSEPA')
    #define.INTL_UWIRE('INTL-UWIRE')
    #define.INTL_WIRE('INTL-WIRE')
    #define.URG_DWIRE('URG-DWIRE')

    #define.DOM('DOM')
    #define.TAX('TAX')
    #define.INTL('INTL')
    #define.INTL_URG('INTL-URG')
    #define.SOCS('SOCS')

    #define.CHAPS('CHAPS')              // SKS#VSTS:13646
    #define.FSTR_PMT('FSTR-PMT')        // SKS#VSTS:13646

    #define.GIRO04('GIRO-04')           //SKS#DevOps:17042
    #define.FIK71('FIK-71')             //SKS#DevOps:17042
    #define.FIK73('FIK-73')             //SKS#DevOps:17042
    #define.FIK75('FIK-75')             //SKS#DevOps:17042

    #define.KID('KID')                  //SKS#DevOps:17043
    #define.PAYM_INV('PAYM-INV')        //SKS#DevOps:17043
    #define.PAYM_CUSID('PAYM-CUSID')    //SKS#DevOps:17043
    #define.BANK_GIRO('BANK-GIRO')     //SKS#DevOps:17044
    #define.PLUS_GIRO('PLUS-GIRO')     //SKS#DevOps:17044
    #define.TT('TT')
    #define.DOMLV('DOM-LV')

    #define.NORM_ZENGN('NORM-ZENGN')
    #define.NORM_FXYCS('NORM-FXYCS')
    #define.INTC_FXYCS('INTC-FXYCS')

    #define.URGDOM('URG-DOM')
    #define.DOMLVSD('DOM-LV-SD')

    #define.TAX('TAX')
    #define.ZUS('ZUS')
    #define.SPLIT('SPLIT')

    #define.DOCC_NORM('DOCC-NORM')
    #define.DOCD_INTC('DOCD-INTC')
    #define.TEDC_NORM('TEDC-NORM')
    #define.TEDD_INTC('TEDD-INTC')
    #define.PAYRL_DOC('PAYRL-DOC')
    #define.PAYRL_TED('PAYRL-TED')
    #define.BOLETO('BOLETO')

    #define.RMB_LOC('RMB-LOC')
    #define.RMB_URG('RMB-URG')
    #define.RMBX('RMBX')
    #define.PAYROLL('PAYROLL')

    #define.REMT_ADV('REMT-ADV')
    #define.CHK_ADV('CHK-ADV')

    #define.WIRE('WIRE')
    #define.ACH('ACH')
    #define.FOREIGN('FOREIGN')

    #define.CHK_SERVE('CHK-SERVE')
    #define.CHK_RAPID('CHK-RAPID')
    #define.CHK_DD_MP('CHK-DD-MP')
    #define.CHK_DD_RP('CHK-DD-RP')
    #define.CHK_LTR('CHK-LTR')
    #define.NEFT('NEFT')
    #define.RTGS('RTGS')

    #define.MYHVP('MYHVP')          //SKS#DevOps:20473
    #define.MYLVP('MYLVP')          //SKS#DevOps:20473
    #define.MYINTC('MYINTC')        //SKS#DevOps:20473
    #define.MYINTL('MYINTL')        //SKS#DevOps:20473

    #define.THHVP('THHVP')          //SKS#DevOps:20833
    #define.THLVP('THLVP')          //SKS#DevOps:20833
    #define.THTT('THTT')            //SKS#DevOps:20833
    #define.CHK_TH('CHK-TH')        //SKS#DevOps:20833

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        CompanyBankAccountId    prevBankAccountId;
        PaymMode                prevPaymMode;
        PaymSpec                prevPaymSpec;
        CurrencyCode            prevCurrency;
        SKS_EB_Date             prevEffectiveDate;
        DataAreaId              prevAcctCompany;        //SKS#DevOps:22012
    
        xmlDoc = XmlDocument::newBlank(this.getEncoding());
    
        this.node_MessageRoot();
    
        this.node_GrpHdr();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);

            select msks_EFT_FileDetail_BankAddress where
                msks_EFT_FileDetail_BankAddress.RefRecId == mSKS_EFT_FileDetail.RecID
                && msks_EFT_FileDetail_BankAddress.AddressType == SKS_EFT_AddressType::BankAddress;
    
            mSKS_EFT_FileDetail_Extra = SKS_EFT_FileDetail_Extra::findRefRecId(mSKS_EFT_FileDetail.RecId);
    
            if(prevBankAccountId != mSKS_EFT_FileDetail.BankAccountId ||
               prevPaymMode != mSKS_EFT_FileDetail.PaymMode ||
               prevPaymSpec != mSKS_EFT_FileDetail.PaymSpec ||
               prevCurrency != mSKS_EFT_FileDetail.PaymentCurrencyCode ||
               prevEffectiveDate != mSKS_EFT_FileDetail.EffectiveDate  ||
               prevAcctCompany != mSKS_EFT_FileDetail.AccountCompany        //SKS#DevOps:22012
            )
            {
                this.node_PmtInf();
    
                prevBankAccountId = mSKS_EFT_FileDetail.BankAccountId;
                prevPaymMode = mSKS_EFT_FileDetail.PaymMode;
                prevPaymSpec = mSKS_EFT_FileDetail.PaymSpec;
                prevCurrency = mSKS_EFT_FileDetail.PaymentCurrencyCode;
                prevEffectiveDate = mSKS_EFT_FileDetail.EffectiveDate;
                prevAcctCompany   = mSKS_EFT_FileDetail.AccountCompany;        //SKS#DevOps:22012
            }
    
            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));
    
            //Get Addenda information
            this.setAddenda();
    
            //For AP
            this.node_CdtTrfTxInf();
    
            next mSKS_EFT_FileDetail;
        }

        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_UltmtDbtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_UltmtDbtr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_UltmtDbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.23: UltmtDbtr
        //              Nm
        //              BIC
        //              ClrSysMmbId
        //                  MmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeUltmtDbtr;
        boolean     printUltmtDbtr;
        LogisticsPostalAddress postalAddress;

        postalAddress = CompanyInfo::findDataArea(mSKS_EFT_FileDetail.AccountCompany).postalAddress();

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-DK':
            case 'EU-BNP-XML-CZ':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        printUltmtDbtr = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-CH':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #SEPA:
                        printUltmtDbtr = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-CN':
            case 'EU-BNP-XML-HK':
            case 'EU-BNP-XML-IN':
                printUltmtDbtr = true;
                break;
        }
        if(mSKS_EFT_FileDetail.PaymentCompany !=  mSKS_EFT_FileDetail.AccountCompany &&
           SKS_PP_Setup::find().IHB_Active &&
           printUltmtDbtr)
        {
            //      2.23: UltmtDbtr
            nodeUltmtDbtr = nodePmtInf.appendChild(xmlDoc.createElement('UltmtDbtr'));
    
            //          Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeUltmtDbtr, 'Nm', CompanyInfo::findDataArea(mSKS_EFT_FileDetail.AccountCompany).name(), 140, false);
            
            //              PstlAdr
            this.node_PstlAdr(nodeUltmtDbtr, postalAddress.CountryRegionId, postalAddress.Street, postalAddress.ZipCode, postalAddress.City, 70, postalAddress.BuildingCompliment,postalAddress.State,true);//DevOps20934
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_Dbtr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //          PstlAdr
        //          Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtr;
    
        //      2.19: Dbtr
        nodeDbtr = nodePmtInf.appendChild(xmlDoc.createElement('Dbtr'));
    
        //          Nm
        this.node_PmtInf_Dbtr_Nm(nodeDbtr);
    
        //          PstlAdr
        this.node_PmtInf_Dbtr_PstlAdr(nodeDbtr);
    
        //          Id
        this.node_PmtInf_Dbtr_Id(nodeDbtr);

        this.node_PmtInf_Dbtr_CtctDtls(nodeDbtr);//DevOps20427
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_CtctDtls</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_CtctDtls
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_CtctDtls(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      4.1: CtclDtls
        //      4.10.2: PhneNb
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtctDtls;
        str phone = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PhoneNo',mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #RMBX)
        {
            nodeCtctDtls = _nodeDbtr.appendChild(xmlDoc.createElement('CtctDtls'));
          
            //          PhneNb
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'PhneNb', phone);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrNodes</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrNodes(XmlElement _nodePmtInf)
    {
        //      2.19: Dbtr
        this.node_PmtInf_Dbtr(_nodePmtInf);
    
        //      2.20: DbtrAcct
        this.node_PmtInf_DbtrAcct(_nodePmtInf);
    
        //      2.21: DbtrAgt
        this.node_PmtInf_DbtrAgt(_nodePmtInf);

        //      2.23: UltmtDbtr
        this.node_PmtInf_UltmtDbtr(_nodePmtInf); //SKS#DevOps:20221
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_Id
    /// </summary>
    /// <param name = "_nodeInitgPty">_nodeInitgPty</param>
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        str InitiatingPartyId;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-CA':
            case 'EU-BNP-XML-BR':
            case 'EU-BNP-XML-CN':
            case 'EU-BNP-XML-CH':
            case 'EU-BNP-XML-DE':
            case 'EU-BNP-XML-DK':
            case 'EU-BNP-XML-ES-03':
            case 'EU-BNP-XML-TR':            
            case 'EU-BNP-XML-UK':           // SKS#VSTS:13646
            case 'EU-BNP-XML-03':           // SKS#DevOps:15855
            case 'EU-BNP-XML-SG':
            case 'EU-BNP-XML-JP':
            case 'EU-BNP-XML-CZ':
            case 'EU-BNP-XML-IN':
            case 'EU-BNP-XML-HK':
            case 'EU-BNP-XML-TH':           // SKS#DevOps:20833
            case 'EU-BNP-XML-NO':           // SKS#DevOps:21589
                InitiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
                break;
        }
        if(InitiatingPartyId)
        {
            //          Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', InitiatingPartyId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_BtchBookg</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_BtchBookg
    /// </summary>
    /// <param name = "_BtchBookg">_BtchBookg</param>
    protected void node_PmtInf_BtchBookg(XmlElement _BtchBookg)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.3: BtchBookg
        //------------------------------------------------------------------------------------------------------
        str batchBooking;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-UK':
                if(strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))) == 'Y')
                {
                    batchBooking = 'true';
                }
                else
                {
                    batchBooking = 'false';
                }
                break;
            case 'EU-BNP-XML-03':
                if(strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))) == 'Y')
                {
                    batchBooking = 'true';
                }
                else
                {
                    batchBooking = 'false';
                }
                break;
            case 'EU-BNP-XML-DE':
                if(strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))) == 'Y')
                {
                    batchBooking = 'true';
                }
                else
                {
                    batchBooking = 'false';
                }
                break;
            case 'EU-BNP-XML-FR':
            case 'EU-BNP-XML-IE':           //SKS#DevOps:16924
            case 'EU-BNP-XML-CZ':           //SKS#DevOps:17041
            case 'EU-BNP-XML-DK':           //SKS#DevOps:17042
            case 'EU-BNP-XML-NO':           //SKS#DevOps:17043
            case 'EU-BNP-XML-SE':           //SKS#DevOps:17044
            case 'EU-BNP-XML-HK':
            case 'EU-BNP-XML-JP':
            case 'EU-BNP-XML-SG':
            case 'EU-BNP-XML-PL':
            case 'EU-BNP-XML-CH':
            case 'EU-BNP-XML-BR':
            case 'EU-BNP-XML-CN':
            case 'EU-BNP-XML-IN':
            case 'EU-BNP-XML-TH':           //SKS#DevOps:20833
                if(strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))) == 'Y')
                {
                    batchBooking = 'true';
                }
                else
                {
                    batchBooking = 'false';
                }
                break;
            case 'EU-BNP-XML-ES-03':        //SKS#DevOps:16924
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTC:
                        if(strUpr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Btchbkg', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank))) == 'Y')
                        {
                            batchBooking = 'true';
                        }
                        else
                        {
                            batchBooking = 'false';
                        }
                        break;
                }
                break;
        }
        if(batchBooking)
        {
            //              2.3: BtchBookg
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _BtchBookg, 'BtchBookg', batchBooking);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //              2.9: Cd
        //          2.11: LclInstrm
        //              2.13: Prtry
        //------------------------------------------------------------------------------------------------------

        XmlElement nodePmftTpInf;

        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));

        //          2.7: InstrPrty
        this.node_PmtInf_PmtTpInf_InstrPrty(nodePmftTpInf);

        //          2.8: SvcLvl
        this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);

        //          2.11: LclInstrm
        this.node_PmtInf_PmtTpInf_LclInstrm(nodePmftTpInf);

        //          2.14: CtgyPurp
        this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmftTpInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_InstrPrty
    /// </summary>
    /// <param name = "_nodeInstrPrty">_nodeInstrPrty</param>
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodeInstrPrty)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.7: InstrPrty
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str     value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #INTC:
                        value = 'NORM';
                        break;
                    case #SEPA_URG:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'NORM';
                        break;
                }
                break;
            case 'EU-BNP-XML-CZ':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                        value = 'NORM';
                        break;
                    case #URGP:
                        value = 'HIGH';
                        break;
                    case #SEPA:             //SKS#DevOps:17041
                    case #INTL_NSEPA:       //SKS#DevOps:17041
                        value = 'NORM';
                        break;
                    case #SEPA_URG:             //SKS#DevOps:17041
                    case #INTL_URG:       //SKS#DevOps:17041
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-CH':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #PRL:
                    case #INTC:
                    case #INTL_NSEPA:
                    case #SEPA:
                        value = 'NORM';
                        break;
                    case #URGP:
                        value = 'HIGH';
                        break;
                }
                break;            
            case 'EU-BNP-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #PRL:
                    case #INTC:
                    case #SEPA:
                    case #WIRE:
                    case #ACH:
                    case #FOREIGN:
                        value = 'NORM';
                        break;
                    case #INTL_NSEPA:       //SKS#DevOps:17045
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty',mSKS_EFT_FileDetail.RecId));
                        break;
                    case #URGP:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:                    
                    case #SEPA:
                    case #INTC:
                    case #GIRO04:
                    case #FIK71:               //SKS#DevOps:17042
                    case #FIK73:
                    case #FIK75:
                    case #INTL_NSEPA:
                        value = 'NORM';
                        break;
                    case #URGP:
                        value = 'HIGH';
                        break;
                    case #INTL_URG:
                    case #SEPA_URG:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-ES-03':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                    case #NORM:
                        value = 'NORM';
                        break;
                    case #URGP:         //SKS#DevOps:16924
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-TR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                    case #TAX:
                    case #SOCS:
                        value = 'NORM';
                        break;
                }
                break;
            case 'EU-BNP-XML-UK':                               // SKS#VSTS:13646
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                    case #SEPA:
                    case #INTL_NSEPA:
                        value = 'NORM';
                        break;
                    case #CHAPS:
                    case #SEPA_URG:
                    case #NSEPA_URG:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-NO':                               // SKS#DevOps:17043
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL_URG:
                    case #URGP:
                    case #SEPA_URG:
                        value = 'HIGH';
                        break;
                    case #NORM:
                    case #KID:
                    case #PAYM_INV:
                    case #PAYM_CUSID:
                    case #INTL://DevOps21380
                    case #SEPA://DevOps21380
                        value = 'NORM';
                        break;
                }
                break;
            case 'EU-BNP-XML-MY':                               // SKS#DevOps:20473
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYHVP:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty',mSKS_EFT_FileDetail.RecId));
                        break;
                    case #MYLVP:
                    case #MYINTC:
                    case #MYINTL:
                        value = 'NORM';
                        break;
                }
                break;
            case 'EU-BNP-XML-03':                               // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'NORM';
                        break;
                    case #SEPA_URG:
                        value = 'HIGH';
                        break;
                    case #INTL:                 // SKS#DevOps:17073
                        value = 'NORM';
                        break;
                    case #INTL_URG:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-FR':                               // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #URGP:
                        value = 'HIGH';
                        break;
                    case #NORM:
                        value = 'NORM';
                        break;
                    case #INTL:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty',mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-IE':                               // SKS#DevOps:16925
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #URGP:
                        value = 'HIGH';
                        break;
                    case #NORM:
                        value = 'NORM';
                        break;
                    case #INTL_NSEPA:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty',mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-SE':                               // SKS#DevOps:17044
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #URGP:
                    case #SEPA_URG:
                    case #INTL_URG:
                        value = 'HIGH';
                        break;
                    case #NORM:
                    case #BANK_GIRO:
                    case #PLUS_GIRO:
                    case #SEPA:
                    case #INTL_NSEPA:
                        value = 'NORM';
                        break;
                }
                break;
            case 'EU-BNP-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #TT:
                    case #INTC:
                    case #DOMLV:
                    case #FSTR_PMT:
                        value = 'NORM';
                        break;
                }
                break;
            case 'EU-BNP-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #NORM_ZENGN:
                    case #INTC:
                    case #NORM_FXYCS:
                        value = 'NORM';
                        break;
                }
                break;
            case 'EU-BNP-XML-HK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOMLV:
                    case #DOMLVSD:
                    case #TT:
                    case #INTC:
                        value = 'NORM';
                        break;
                    case #URGDOM:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #NORM:
                    case #SPLIT:
                    case #ZUS:
                    case #TAX:
                    case #INTL_NSEPA:
                        value = 'NORM';
                        break;
                    case #SEPA_URG:
                    case #URGDOM:
                    case #INTL_URG:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-BR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOCC_NORM:
                    case #DOCD_INTC:
                    case #TEDC_NORM:
                    case #TEDD_INTC:
                    case #PAYRL_DOC:
                    case #PAYRL_TED:
                    case #BOLETO:
                        value = 'NORM';
                        break;
                }
                break;
            case 'EU-BNP-XML-CN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RMB_LOC:
                    case #RMBX:
                    case #TT:
                    case #INTC:
                    case #PAYROLL:
                        value = 'NORM';
                        break;
                    case #RMB_URG:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-IN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHK_ADV:
                    case #REMT_ADV:
                    case #PAYROLL:
                    case #CHK_SERVE:
                    case #CHK_RAPID:
                    case #CHK_DD_MP:
                    case #CHK_DD_RP:
                    case #CHK_LTR:
                    case #TT:
                    case #NEFT:
                    case #INTC:
                        value = 'NORM';
                        break;
                    case #RTGS:
                        value = 'HIGH';
                        break;
                }
                break;
            case 'EU-BNP-XML-TH':                   //SKS#DevOps:20833
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #THLVP:
                    case #THTT:
                    case #CHK_TH:
                        value = 'NORM';
                        break;
                    case #THHVP:
                        value = 'HIGH';
                        break;
                }
                break;
        }
        
        //             2.7: InstrPrty
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeInstrPrty, 'InstrPrty', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_SvcLvl
    /// </summary>
    /// <param name = "_nodePmftTpInf">_nodePmftTpInf</param>
    protected void node_PmtInf_PmtTpInf_SvcLvl(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.8: SvcLvl
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeSvcLvl;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL_UWIRE:
                    case #INTC:
                    case #URG_DWIRE:
                        value = 'URGP';
                        break;
                    case #INTL_WIRE:
                        value = 'NURG';
                        break;
                }
                break;
            case 'EU-BNP-XML-CH':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #PRL:
                    case #INTL_NSEPA:
                        value = 'NURG';
                        break;
                    case #URGP:
                        value = 'URGP';
                        break;
                    case #SEPA:
                        value = 'SEPA';
                        break;                                       
                }
                break;
            case 'EU-BNP-XML-IN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NEFT:
                        value = 'NURG';
                        break;
                }
                break;
            case 'EU-BNP-XML-CZ':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                        value = 'NURG';
                        break;
                    case #URGP:
                        value = 'URGP';
                        break;
                    case #SEPA:
                    case #SEPA_URG:
                        value = 'SEPA';
                        break;
                    case #INTL_NSEPA:
                        value = 'NURG';
                        break;
                    case #INTL_URG:
                        value = 'URGP';
                        break;
                }
                break;
            case 'EU-BNP-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #PRL:
                    case #URGP:
                    case #SEPA:
                        value = 'SEPA';
                        break;
                    case #INTL_NSEPA:       //SKS#DevOps:17045
                    case #ACH:
                        value = 'NURG';
                        break;
                    case #WIRE:
                        value = 'URGP';
                        break;
                }
                break;
            case 'EU-BNP-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #GIRO04:       //SKS#DevOps:17042
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #INTL_NSEPA:
                        value = 'NURG';
                        break;
                    case #URGP:
                        value = 'URGP';
                        break;
                    case #SEPA:
                    case #SEPA_URG:
                        value = 'SEPA';
                        break;
                    case #INTL:
                        value = 'URGP';
                        break;
                }
                break;
            case 'EU-BNP-XML-ES-03':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        value = 'NURG';
                        break;
                    case #NORM:
                    case #URGP:         //SKS#DevOsp:16924
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-BNP-XML-MY':           //SKS#DevOps:20473
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYLVP:
                    case #MYINTC:
                        value = 'NURG';
                        break;
                }
                break;
            case 'EU-BNP-XML-UK':                                   // SKS#VSTS:13646
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        value = 'SEPA';
                        break;
                    case #CHAPS:
                    case #NSEPA_URG:        //SKS#DevOps:21573
                        value = 'URGP';
                        break;
                    case #INTL_NSEPA:       //SKS#DevOps:21573
                        value = 'NURG';
                        break;
                }
                break;
            case 'EU-BNP-XML-03':                                   // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        value = 'SEPA';
                        break;
                    case #INTL:
                        value = 'NURG';
                        break;
                    case #INTL_URG:
                        value = 'URGP';
                        break;
                }
                break;
            case 'EU-BNP-XML-FR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                        value = 'SEPA';
                        break;
                    case #INTL:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SvcLvlCd', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-IE':           //SKS#DevOps:16925
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                        value = 'SEPA';
                        break;
                    case #INTL_NSEPA:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SvcLvlCd', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-NO':                                   // SKS#VSTS:13646
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        value = 'SEPA';
                        break;
                    case #NORM:
                    case #KID:
                    case #PAYM_INV:
                    case #PAYM_CUSID:
                    case #INTL:
                        value = 'NURG';
                        break;
                    case #URGP:
                    case #INTL_URG:
                        value = 'URGP';
                        break;
                }
                break;
            case 'EU-BNP-XML-SE':           //SKS#DevOps:16925
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #INTL_NSEPA:
                        value = 'NURG';
                        break;
                    case #URGP:
                    case #INTL_URG:
                        value = 'URGP';
                        break;
                    case #SEPA:
                    case #SEPA_URG:
                        value = 'SEPA';
                        break;
                }
                break;
            case 'EU-BNP-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOMLV:
                        value = 'NURG';
                        break;
                    case #FSTR_PMT:
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-BNP-XML-HK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOMLV:
                        value = 'NURG';
                        break;
                    case #DOMLVSD:
                        value = 'SDVA';
                        break;
                }
                break;
            case 'EU-BNP-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        value = 'SEPA';
                        break;
                    case #NORM:
                    case #SPLIT:
                    case #ZUS:
                    case #TAX:
                    case #INTL_NSEPA:
                        value = 'NURG';
                        break;
                    case #URGDOM:
                    case #INTL_URG:
                        value = 'URGP';
                        break;
                }
                break;
            case 'EU-BNP-XML-TH':                   //SKS#DevOps:20833
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #THLVP:
                        value = 'NURG';
                        break;
                }
                break;
        }
        if(value)
        {
            //          2.8: SvcLvl
            nodeSvcLvl = _nodePmftTpInf.appendChild(xmlDoc.createElement('SvcLvl'));

            //              2.9: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSvcLvl, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_LclInstrm
    /// </summary>
    /// <param name = "_nodePmftTpInf">_nodePmftTpInf</param>
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //                  2.13: Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeLclInstrm;
        str         value;
        boolean     cd;
        boolean     prtry;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CZ':                       // SKS#DevOps:17041
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #SEPA_URG:
                        value = 'SDCL';
                        cd    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-CN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RMBX:
                        value = 'RMBX';
                        prtry    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-BR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BOLETO:
                        value = 'BOLETO';
                        prtry    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                        value = '356';
                        prtry = true;
                        break;
                    case #GIRO04:       //SKS#DevOps:17042
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                        value = 'DO';
                        prtry = true;
                        break;
                    case #SEPA:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #SEPA_URG:
                        value = 'SDCL';
                        cd    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-UK':                       // SKS#VSTS:13646
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #SEPA_URG:
                        value = 'SDCL';
                        cd    = true;
                        break;
                    case #FSTR_PMT:
                        value = 'FPS';
                        prtry = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-03':                       // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #SEPA_URG:
                        value = 'SDCL';
                        cd    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-FR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #URGP:
                        value = 'SDCL';
                        cd = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-ES-03':        //SKS#DevOps:16924
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #URGP:
                        value = 'SDCL';
                        cd = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-IE':        //SKS#DevOps:16925
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #URGP:
                        value = 'SDCL';
                        cd = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-NO':           //SKS#DevOps:21589
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #SEPA_URG:
                        value = 'SDCL';
                        cd    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-SE':                       // SKS#DevOps:17043
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #SEPA_URG:
                        value = 'SDCL';
                        cd    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM_FXYCS:
                    case #INTC_FXYCS:
                        value = 'FXYCS';
                        prtry = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                        value = 'ONCL';
                        cd    = true;
                        break;
                    case #SEPA_URG:
                        value = 'SDCL';
                        cd    = true;
                        break;
                    case #SPLIT:
                        value = 'VAT53';
                        prtry = true;
                        break;
                }
                break;
        }  
        if(value)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));

            if(cd)
            {
                //              2.12: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
            }
            else if(prtry)
            {
                //              2.13: Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Prtry', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_PmtTpInf_CtgyPurp
    /// </summary>
    /// <param name = "_nodePmftTpInf">_nodePmftTpInf</param>
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
        str value;
        boolean printPrtry;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-CN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                    case #RMBX:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp',mSKS_EFT_FileDetail.RecId));
                        break;
                    case #PAYROLL:
                        value = 'SALA';
                        break;
                }
                break;
            case 'EU-BNP-XML-IN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #PAYROLL:
                        value = 'SALA';
                        break;
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-BR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOCD_INTC:
                    case #TEDD_INTC:
                        value = 'INTC';
                        break;
                    case #PAYRL_DOC:
                    case #PAYRL_TED:
                        value = 'SALA';
                        break;
                }
                break;
            case 'EU-BNP-XML-CH':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #PRL:
                        value = 'SALA';
                        break;
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-CZ':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                    case #SEPA:           //SKS#DevOps:17041
                    case #SEPA_URG:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp',mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #PRL:
                        value = 'SALA';
                        break;
                    case #INTC:
                        value = 'INTC';
                        break;
                    case #INTL_NSEPA:           //SKS#DevOps:17045
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp',mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:     //SKS#DevOps:16490
                    case #SEPA_URG:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp',mSKS_EFT_FileDetail.RecId));
                        break;
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-HK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-MY':       //SKS#DevOps:20473
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYINTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-TR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {       
                    case #DOM:
                        value = 'SALA';
                        break;
                }
                break;
            case 'EU-BNP-XML-UK':                 // SKS#VSTS:13646
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-03':                 // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                    case #INTL:
                    case #INTL_URG:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp',mSKS_EFT_FileDetail.RecId));
                        break;
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-FR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                    case #INTL:
                    case #URGP:
                    case #NORM:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp',mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-ES-03':            //SKS#DevOps:16924
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                    case #URGP:
                    case #NORM:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp',mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-IE':           //SKS#DevOPs:16925
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                    case #INTL_NSEPA:
                    case #URGP:
                    case #NORM:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CtgyPurp',mSKS_EFT_FileDetail.RecId));
                        break;
                }
            case 'EU-BNP-XML-NO':       //SKS#DevOps:17043
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                    case #INTL:
                    case #INTL_URG:
                        value = 'SALA';
                        break;
                }
                break;
            case 'EU-BNP-XML-SE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                    case #INTC_FXYCS:
                        value = 'INTC';
                        break;
                }
                break;
            case 'EU-BNP-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                        value = 'INTC';
                        break;
                    case #ZUS:
                        value = 'LBRI';
                        printPrtry = true;
                        break;
                    case #TAX:
                        value = 'TAXS';
                        break;
                }
                break;
        }

        if(value)
        {
            //           2.14: CtgyPurp
            nodeCtgyPurp = _nodePmftTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));

            if(printPrtry)
            {
                //              2.16: Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Prtry', value);
            }
            else
            {
                //              2.15: Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_Id
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchmeNm
        //                          Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        boolean    printDbtrId;
        str        printCode;
        str dbtrId;
        int len;
    
        dbtrId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DbtrId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-FR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        printDbtrId = true;
                        printCode = 'SIRET';
                        len = 14;
                        break;
                }
                break;
        }
        if(printDbtrId && dbtrId)
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', dbtrId,len);
    
            //                      SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

            if(printCode)
            {
                //                          Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', printCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_Nm
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_Nm(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Nm
        //------------------------------------------------------------------------------------------------------
        int len;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-03':
                len = 70;
                break;
            case 'EU-BNP-XML-CZ':       //SKS#DevOps:17041
            case 'EU-BNP-XML-DK':       //SKS#DevOps:17042
                len = 35;
                break;
            default:
                len = 140;
                break;
        }
        //          Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeDbtr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Dbtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeDbtr">_nodeDbtr</param>
    protected void node_PmtInf_Dbtr_PstlAdr(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          PstlAdr
        
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA':
            case 'EU-BNP-XML-FR':
            case 'EU-BNP-XML-IE':               // SKS#DevOps:16925
            case 'EU-BNP-XML-UK':               // SKS#VSTS:13646
            case 'EU-BNP-XML-NO':               // SKS#DevOps:17043
            case 'EU-BNP-XML-SE':               // SKS#DevOps:17044
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                break;
            case 'EU-BNP-XML-CZ':             // SKS#DevOps:17041
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                break;
            case 'EU-BNP-XML-03':             // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                    case #INTC:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                    case #INTL:
                    case #INTL_URG:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                        break;
                }                
                break;
            case 'EU-BNP-XML-ES-03':             // SKS#DevOps:16924
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTC:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                    default:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                        break;
                }
                break;
            case 'EU-BNP-XML-DE':             // SKS#DevOps:17045
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL_NSEPA:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                    default:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                        break;
                }
                break;
            case 'EU-BNP-XML-DK':       //SKS#DevOps:17042
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO04:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #INTL_NSEPA:
                    case #INTL_URG:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity);
                        break;
                    default:
                        this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                        break;
                }
                break;
            default:
                this.node_PstlAdr(_nodeDbtr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 35, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAcct
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str        iban, acctNum, schmeNm;
        boolean    printDbtrAcct;
        
        iban        = mSKS_EFT_FileDetail.BankBankIBAN;
        acctNum     = mSKS_EFT_FileDetail.BankBankAcct;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA':
                iban            = '';
                printDbtrAcct   = true;
                break;
            case 'EU-BNP-XML-03':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        printDbtrAcct   = true;
                        acctNum         = '';
                        break;
                    default:
                        printDbtrAcct   = true;
                        schmeNm         = 'BBAN';
                        break;
                }
                break;
            default:
                printDbtrAcct   = true;
                schmeNm         = 'BBAN';
                break;
        }
        if(printDbtrAcct && (iban || acctNum))
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = _nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
            
            if(iban)
            {
                //              IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
            }
            else if(acctNum)
            {
                //              Othr
                nodeOthr = nodeDbtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
                //                  Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct);

                if(schmeNm)
                {
                    //                  SchmeNm
                    nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
                    //                      Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schmeNm);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_DbtrAgt
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_DbtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.21: DbtrAgt
        //          FinInstnId
        //              BIC
        //              ClrSysMmbId
        //                  MmbId
        //              PstlAdr
        //                  Ctry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeDbtrAgt;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeClrSysMmBId;
        XmlElement  nodePstlAdr;
        XmlElement  nodeOthr;
        str         swift, rtg;
        boolean     printDbtrAgt;
        boolean     pstlAddr;
        boolean     printNotProvided;

        swift = mSKS_EFT_FileDetail.BankBankSwiftNo;
        rtg   = mSKS_EFT_FileDetail.BankBankTransit;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-CA':
            case 'EU-BNP-XML-CH':
            case 'EU-BNP-XML-DE':          
                printDbtrAgt    = true;
                rtg             = '';
                break;
            case 'EU-BNP-XML-CZ':       //SKS#DevOps:17041
                printDbtrAgt    = true;
                pstlAddr        = true;
                rtg             = '';
                break;
            case 'EU-BNP-XML-NO':       //SKS#DevOps:17043
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-SE':       //SKS#DevOps:17044
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-DK':       //SKS#DevOps:17042
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO04:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #INTL_NSEPA:
                    case #INTL_URG:
                        printDbtrAgt    = true;
                        pstlAddr        = true;
                        break;
                    default:
                        printDbtrAgt    = true;
                        rtg             = '';
                        break;

                }
                break;
            case 'EU-BNP-XML-ES-03':            //SKS#DevOps:16924
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTC:
                        printDbtrAgt    = true;
                        pstlAddr        = true;
                        break;
                    default:
                        printDbtrAgt    = true;
                        rtg             = '';
                        break;
                }
                break;
            case 'EU-BNP-XML-TR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOM:
                        printDbtrAgt    = true;
                        break;
                    default:
                        printDbtrAgt    = true;
                        rtg             = '';
                        break;                        
                }
                break;            
            case 'EU-BNP-XML-UK':             // SKS#VSTS:13646
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-03':             // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        printDbtrAgt        = true;
                        printNotProvided    = true;
                        break;
                    case #INTL:
                    case #INTL_URG:
                    case #INTC:
                        printDbtrAgt        = true;
                        rtg                 = '';
                        break;
                }
                break;   
            case 'EU-BNP-XML-FR':
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-IE':
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-SG':
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-JP':
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-HK':
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-PL':
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-BR':
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-CN':
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-IN':
            case 'EU-BNP-XML-MY':       //SKS#DevOps:20473
                printDbtrAgt    = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-TH':       //SKS#DevOps:20833
                printDbtrAgt    = true;
                break;
        }
        if(printDbtrAgt)
        {
            //      2.21: DbtrAgt
            nodeDbtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAgt'));
    
            //          FinInstnId
            nodeFinInstnId = nodeDbtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(swift)
            {
                //              BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
            }
            else if(printNotProvided)
            {
                //              Othr
                nodeOthr = nodeFinInstnId.appendChild(xmlDoc.createElement('Othr'));
    
                //                  Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', 'NOTPROVIDED', 0, false);
            }
            else if(rtg)
            {
                //              ClrSysMmbId
                nodeClrSysMmBId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
    
                //                  MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId', rtg, 0, false);
            }
            if(pstlAddr)
            {
                //              PstlAdr
                nodePstlAdr = nodeFinInstnId.appendChild(xmlDoc.createElement('PstlAdr'));
        
                //                  Ctry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId), 0, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_ChrgBr
    /// </summary>
    /// <param name = "_nodePmtInf">_nodePmtInf</param>
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-DK':
            case 'EU-BNP-XML-CH':
            case 'EU-BNP-XML-UK':             // SKS#VSTS:13646            
            case 'EU-BNP-XML-BR':
            case 'EU-BNP-XML-CN':
            case 'EU-BNP-XML-IN':
            case 'EU-BNP-XML-SE':
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId)), 0, false);
                break;
            case 'EU-BNP-XML-DE':             // SKS#DevOps:17045
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId)), 0, false);
                break;
            case 'EU-BNP-XML-03':             // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'SLEV');
                        break;
                    case #INTC:                 //DevOps18819
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId)), 0, false);
                        break;

                }
                break;
            case 'EU-BNP-XML-CZ':             // SKS#DevOps:17041
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'SLEV');
                        break;
                    default:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr',mSKS_EFT_FileDetail.RecId)), 0, false);
                        break;
                }
                break;
            case 'EU-BNP-XML-FR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTL:
                    case #INTC:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId)), 0, false);
                        break;
                }
                break;
            case 'EU-BNP-XML-ES-03':        //SKS#DevOps:16924
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTC:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId)), 0, false);
                        break;
                }
                break;
            case 'EU-BNP-XML-IE':           //SKS#DevOps:16925
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId)), 0, false);
                break;
            case 'EU-BNP-XML-NO':           // SKS#DevOps:17043
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'SLEV');
                        break;
                    default:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId)), 0, false);
                        break;
                }
                break;
            case 'EU-BNP-XML-SG':
            case 'EU-BNP-XML-JP':
            case 'EU-BNP-XML-HK':
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId)), 0, false);
                break;
            case 'EU-BNP-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'SLEV');
                        break;
                    default:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChrgBr', mSKS_EFT_FileDetail.RecId)), 0, false);
                        break;
                }
                break;
            case 'EU-BNP-XML-MY':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYHVP:
                    case #MYLVP:
                    case #MYINTC:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmtInf, 'ChrgBr', 'DEBT');
                        break;
                }
                break;
        } 
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_PmtId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_PmtId
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_PmtId(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.28: PmtId
        //              2.30: EndToEndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodePmtId;
        int length;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA' :
            case 'EU-BNP-XML-TR' :
                length = 16;
                break;
            default:
                length = 35;
                break;
        }
                
        //          2.28: PmtId
        nodePmtId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('PmtId'));

        if(mSKS_EFT_FileDetail.FormatId == 'EU-BNP-XML-SG')
        {
            //              2.30: InstrId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'InstrId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), length));
        }

        //              2.30: EndToEndId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtId, 'EndToEndId', SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), length));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChrgBr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_ChrgBr
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_ChrgBr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.51: ChrgBr
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA' :
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges',mSKS_EFT_FileDetail.RecId)), 0, false);
                break;
            case 'EU-BNP-XML-ES-03':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'ChrgBr', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId)), 0, false);
                        break;
                }
                break;
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_IntrmyAgt1</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_IntrmyAgt1
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_IntrmyAgt1(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.71: IntrmyAgt1
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                      MmbId
        //                  Nm
        //                  PstlAdr
        //              BrnchId
        //                  Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeIntrmyAgt1;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeBrnchId;
        XmlElement  nodeClrSysMmbId;
        str         swift, intbankId;
        boolean     printIntrmyAgt;
        swift       = mSKS_EFT_FileDetail_Intermediary.IntBankSwift;
        intbankId   = mSKS_EFT_FileDetail_Intermediary.IntBankId;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA':
            case 'EU-BNP-XML-CH':
            case 'EU-BNP-XML-DE':
            case 'EU-BNP-XML-DK':
            case 'EU-BNP-XML-ES-03':
            case 'EU-BNP-XML-TR':
            case 'EU-BNP-XML-UK':                     // SKS#VSTS:13646
            case 'EU-BNP-XML-PL':
            case 'EU-BNP-XML-SG':
            case 'EU-BNP-XML-JP':
            case 'EU-BNP-XML-HK':
                printIntrmyAgt = true;
                break;
            case 'EU-BNP-XML-03':                     // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                    case #INTL_URG:
                        printIntrmyAgt = true;
                        intbankId      = '';
                        break;
                }                
                break;
            case 'EU-BNP-XML-FR':
                printIntrmyAgt = true;
                intbankId      = '';
                break;
        }
        if(printIntrmyAgt && (swift || intbankId))
        {
            //          2.71: IntrmyAgt1
            nodeIntrmyAgt1 = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('IntrmyAgt1'));
    
            //              FinInstnId
            nodeFinInstnId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 0, false);
            }
            else if(intbankId)
            {
                //                  ClrSysMmbId
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                //                      MmbId
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', mSKS_EFT_FileDetail_Intermediary.IntBankId, 0, false);
            }
    
            //                  Nm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 140, false);
    
            //                  PstlAdr
            this.node_PstlAdr(nodeFinInstnId, mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId, mSKS_EFT_FileDetail_Intermediary.IntBankAddr + '' + mSKS_EFT_FileDetail_Intermediary.IntBankAddr2, '', mSKS_EFT_FileDetail_Intermediary.IntBankCity);
    
            //              BrnchId
            if(mSKS_EFT_FileDetail_Intermediary.IntBankBranch != '')
            {
                nodeBrnchId = nodeIntrmyAgt1.appendChild(xmlDoc.createElement('BrnchId'));
                //              Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBrnchId, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankBranch));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------

        XmlElement  nodeCdtrAgt;
        XmlElement  nodeFinInstnId;
        XmlElement  nodeClrSysMmbId;
        XmlElement  nodeClrSysId;
        XmlElement  nodeOthr;           //SKS#DevOps:15855
        str         value;
        str         swift, rtg;
        boolean     printCdtrAgt;
        boolean     cdtrAgtName;
        boolean     pstlAddr;
        boolean     printNotProvided;
        boolean     clrSysIdPrtry;
        int         mmbIdLength = 0;

        swift   =   mSKS_EFT_FileDetail.DepSwiftNo;
        rtg     =   mSKS_EFT_FileDetail.DepBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA':
                printCdtrAgt    = true;
                cdtrAgtName     = true;
                pstlAddr        = true;
                value           = 'CACPA';
                break;
            case 'EU-BNP-XML-CN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RMB_LOC:
                    case #RMB_URG:
                    case #PAYROLL:
                        swift = '';
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        value           = 'CNAPS';
                        break;
                    case #TT:
                    case #INTC:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        rtg = '';
                        break;
                    case #RMBX:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        if(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'CN')
                        {
                            swift = '';
                            value       = 'CNAPS';
                        }
                        break;
                }
                break;
            case 'EU-BNP-XML-BR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOCC_NORM:
                    case #DOCD_INTC:
                    case #TEDC_NORM:
                    case #TEDD_INTC:
                    case #PAYRL_DOC:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        clrSysIdPrtry   = true;
                        value           = 'BRNCC';
                        mmbIdLength = 8;
                        swift = '';
                        break;
                    case #PAYRL_TED:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        clrSysIdPrtry   = true;
                        value           = 'BRNCC';
                        mmbIdLength = 9;
                        swift = '';
                        break;
                    case #BOLETO:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-CH':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #POST:
                    case #INTL_NSEPA:
                        printCdtrAgt    = true;
                        rtg             = '';
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #NORM:
                    case #URGP:
                    case #PRL:
                    case #INTC:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        value           = 'CHBCC';
                        break;
                }
                break;
            case 'EU-BNP-XML-CZ':           //SKS#DevOps:17041
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTC:
                        printCdtrAgt    = true;
                        value           = 'CZNCC';
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #SEPA:
                    case #SEPA_URG:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #INTL_NSEPA:
                    case #INTL_URG:
                        rtg             = '';
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-DE':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #PRL:
                        if(mSKS_EFT_FileDetail.DepBankIBAN)
                        {
                            return;
                        }
                        else
                        {
                            printCdtrAgt    = true;
                            rtg             = '';
                            cdtrAgtName     = true;
                            pstlAddr        = true;
                        }
                        break;
                    case #INTC:
                    case #SEPA:
                        printCdtrAgt    = true;
                        rtg             = '';
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #INTL_NSEPA:           //SKS#DevOps:17045
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #WIRE:
                    case #ACH:
                    case #FOREIGN:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ClrSysIdCd', mSKS_EFT_FileDetail.RecId));
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTC:
                        printCdtrAgt    = true;
                        rtg             = '';
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break; 
                    case #SEPA:
                    case #SEPA_URG:
                        if(mSKS_EFT_FileDetail.DepBankIBAN)
                        {
                            return;
                        }
                        else
                        {
                            printCdtrAgt    = true;
                            rtg             = '';
                            cdtrAgtName     = true;
                            pstlAddr        = true;
                        }
                        break;
                    case #INTL_NSEPA://DevOps19609
                    case #INTL_URG:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-ES-03':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        value    = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BenBankRC', mSKS_EFT_FileDetail.RecId)); 
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #NORM:
                    case #URGP:
                    case #INTC:                     //SKS#DevOps:16924
                        printCdtrAgt    = true;
                        pstlAddr        = true;
                        break;
                    
                }
                break;
            case 'EU-BNP-XML-NO':                   //SKS#DevOps:17043
                printCdtrAgt    = true;
                cdtrAgtName     = true;
                pstlAddr        = true;
                break;
            case 'EU-BNP-XML-MY':           //SKS#DevOps:20473
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYHVP:
                        printCdtrAgt    = true;
                        if(rtg)
                        {
                            swift       = '';
                        }
                        value = 'MYHVP';
                        clrSysIdPrtry   = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #MYLVP:
                        printCdtrAgt    = true;
                        if(rtg)
                        {
                            swift       = '';
                        }
                        clrSysIdPrtry   = true;
                        value = 'MYHVP';//DevOps20941
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #MYINTC:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    case #MYINTL:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-TR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        rtg             = '';
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                    default:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;                    
                }
                break;
            case 'EU-BNP-XML-UK':                     // SKS#VSTS:13646
                printCdtrAgt    = true;
                cdtrAgtName     = true;
                pstlAddr        = true;
                value           = 'GBDSC';
                break;
            case 'EU-BNP-XML-03':                      //SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                    case #INTC:
                        rtg                 = '';
                        printCdtrAgt        = true;
                        printNotProvided    = true;
                        break;
                    case #INTL:
                    case #INTL_URG:
                        printCdtrAgt    = true;
                        cdtrAgtName     = true;
                        pstlAddr        = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-FR':
                printCdtrAgt    = true;
                pstlAddr        = true;
                cdtrAgtName     = true;
                break;
            case 'EU-BNP-XML-IE':               //SKS#DevOps:16925
                printCdtrAgt    = true;
                pstlAddr        = true;
                cdtrAgtName     = true;
                break;
            case 'EU-BNP-XML-SG':
                printCdtrAgt    = true;
                pstlAddr        = true;
                cdtrAgtName     = true;

                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #TT:
                    case #DOMLV:
                    case #INTC:
                        rtg = '';
                        break;
                    case #FSTR_PMT:
                        value = 'SGIBG';
                        break;
                }
                break;
            case 'EU-BNP-XML-JP':
                printCdtrAgt    = true;
                pstlAddr        = true;
                cdtrAgtName     = true;

                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #NORM_FXYCS:
                    case #INTC_FXYCS:
                        swift = '';
                        break;
                    case #NORM_ZENGN:
                        swift = '';
                        value = 'JPZGN';
                        break;
                    case #INTC:
                        rtg = '';
                        break;
                }
                break;
            case 'EU-BNP-XML-HK':
                printCdtrAgt    = true;
                pstlAddr        = true;
                cdtrAgtName     = true;

                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #URGDOM:
                    case #TT:
                    case #INTC:
                        rtg = '';
                        break;
                    case #DOMLVSD:
                    case #DOMLV:
                        value = 'HKNCC';
                        break;
                }
                break;
            case 'EU-BNP-XML-PL':
                printCdtrAgt    = true;
                pstlAddr        = true;
                cdtrAgtName     = true;
                break;
            case 'EU-BNP-XML-IN':
                printCdtrAgt    = true;
                pstlAddr        = true;
                cdtrAgtName     = true;
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NEFT:
                    case #RTGS:
                        swift ='';//DevOps20553
                        value = 'INFSC';
                        mmbIdLength = 11;
                        break;
                    case #CHK_SERVE:
                    case #CHK_RAPID:
                    case #CHK_DD_MP:
                    case #CHK_DD_RP:
                    case #CHK_LTR:
                        printCdtrAgt    = false;
                        break;
                }
                break;
            case 'EU-BNP-XML-TH':           //SKS#DevOps:20833
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #THHVP:
                    case #THLVP:
                        printCdtrAgt    = true;
                        value           = 'THNCC';
                        break;
                    case #THTT:
                        printCdtrAgt    = true;
                        break;
                }
                break;
        }
        if(printCdtrAgt)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));
    
            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', mSKS_EFT_FileDetail.DepSwiftNo, 0, false);
            }
            else if(printNotProvided)                           //SKS#DevOps:15855
            {
                //              Othr
                nodeOthr = nodeFinInstnId.appendChild(xmlDoc.createElement('Othr'));
    
                //                  Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', 'NOTPROVIDED');
            }
            else if(rtg)
            {
                nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));
                
                if(value)
                {
                    nodeClrSysId = nodeClrSysMmbId.appendChild(xmlDoc.createElement('ClrSysId'));

                    if(clrSysIdPrtry)
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Prtry', value, 0, false);
                    }
                    else
                    {
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', value, 0, false);
                    }
                }

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', rtg, mmbIdLength, false);
            }

            if(cdtrAgtName)
            {
                //                  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 0, false);
            }
            if(pstlAddr)
            {
                //                  PstlAdr
                this.node_CdtTrfTxInf_CdtrAgt_PstlAdr(nodeFinInstnId);
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_CtctDtls</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_CtctDtls
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_CtctDtls(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //         CtctDtls
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement  nodeCtctDtls;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-MY':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYINTC:
                    case #MYINTL:
                    case #MYHVP://DevOps20843
                    case #MYLVP:
                        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('BeneResident', mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
        }
        if(value)
        {
            //          CtctDtls
            nodeCtctDtls = _nodeCdtr.appendChild(xmlDoc.createElement('CtctDtls'));
        
            //              Othr
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtctDtls, 'Othr', '/BR/' + value, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RltdRmtInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RltdRmtInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RltdRmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.91: RltdRmtInf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement      nodeRltdRmtInf;
        SKS_EB_Vendor   lSKS_EB_Vendor;
        str             email;
        boolean         printRltdRmtInf;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)//DevOps20893,20895
        {
            case 'EU-BNP-XML-MY':
            case 'EU-BNP-XML-SG':
                printRltdRmtInf = true;
                break;
        }
        
        if(printRltdRmtInf)
        {
            //          2.91: RltdRmtInf
            nodeRltdRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RltdRmtInf'));
            
            lSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);

            if(mSKS_EFT_FileDetail_VendAddress.Locator)
            {
                email += mSKS_EFT_FileDetail_VendAddress.Locator;
            }
            if(lSKS_EB_Vendor.EM2Addr)
            {
                if(email)
                {
                    email += ',';
                }
                email += lSKS_EB_Vendor.EM2Addr;
            }
            if(lSKS_EB_Vendor.EM3Addr)
            {
                if(email)
                {
                    email += ',';
                }
                email += lSKS_EB_Vendor.EM3Addr;
            }
            if(lSKS_EB_Vendor.EM4Addr)
            {
                if(email)
                {
                    email += ',';
                }
                email += lSKS_EB_Vendor.EM4Addr;
            }
            
            if( email)
            {
                //              2.94: RmtLctnElctrncAdr
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRltdRmtInf, 'RmtLctnElctrncAdr', email, 0, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_PstlAdr
    /// </summary>
    /// <param name = "_nodeCdtrAgt">_nodeCdtrAgt</param>
    protected void node_CdtTrfTxInf_CdtrAgt_PstlAdr(XmlElement _nodeCdtrAgt)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
    
        if(mSKS_EFT_FileFormatPaymSpec.FormatId == 'EU-BNP-XML-FR')
        {
            this.node_PstlAdr(_nodeCdtrAgt, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', mSKS_EFT_FileDetail_BenBank.BenBankCity);
        }
        else
        {
            this.node_PstlAdr(_nodeCdtrAgt, mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId, mSKS_EFT_FileDetail_BenBank.BenBankAddr, '', '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Cdtr_Nm
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_CdtTrfTxInf_Cdtr_Nm(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //------------------------------------------------------------------------------------------------------
       
        int len;
    
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-03':
                len = 70;
                break;
            default:
                len = 140;
                break;

        }
        //              Nm
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtr, 'Nm', mSKS_EFT_FileDetail_VendAddress.BeneName, len, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_PstlAdr
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA':
            case 'EU-BNP-XML-FR':
            case 'EU-BNP-XML-UK':                   // SKS#VSTS:13646
            case 'EU-BNP-XML-IE':                   // SKS#DevOps:16925
            case 'EU-BNP-XML-CZ':                   // SKS#VSTS:17041
            case 'EU-BNP-XML-NO':                   // SKS#DevOps:17043
            case 'EU-BNP-XML-SE':                   // SKS#DevOps:17044
            case 'EU-BNP-XML-CN':
            case 'EU-BNP-XML-IN':
                this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity);
                break;    
            case 'EU-BNP-XML-DK':                 // SKS#DevOps:17042
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO04:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:
                    case #INTL_NSEPA:
                    case #INTL_URG:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity);
                        break;
                    default:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
                        break;
                }
                break;
            case 'EU-BNP-XML-03':                 // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity);
                        break;
                    default:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
                        break;
                }
                break;
            case 'EU-BNP-XML-DE':                 // SKS#DevOps:17045
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL_NSEPA:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity);
                        break;
                    default:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
                        break;
                }
                break;
            case 'EU-BNP-XML-ES-03':                 // SKS#DevOps:16924
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTC:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrLine1, mRemittanceZipCode, mRemittanceCity);
                        break;
                    default:
                        this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
                        break;
                }
                break;
            default:
                this.node_PstlAdr(_nodeCdtr, mRemittanceCountryRegionId, mRemittanceAdrline1, mRemittanceZipCode, mRemittanceCity, 35, mRemittanceAdrLine2, mRemittanceState, true);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAcct
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id

        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeSchmeNm;
        XmlElement nodeCdtrAcctTp;
        str         iban, acctNum, cd, prtry, cdtrAcctTpValue;
        boolean     printCdtrAcct;
        int len;
        VendBankAccount vendBankAccount;
        vendBankAccount = VendBankAccount::findByCompany(msks_eft_FileDetail.AccountCompany, msks_eft_FileDetail.AccountNum, msks_eft_FileDetail.DepBankAccountId);

        iban        =   mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum     =   mSKS_EFT_FileDetail.DepBankAcct;
        len         =   35;


        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-CA':
            case 'EU-BNP-XML-DE':
            case 'EU-BNP-XML-ES-03':
            case 'EU-BNP-XML-TR':
            case 'EU-BNP-XML-IE':           //SKS#DevOps:16925
                cd          =   'BBAN';
                printCdtrAcct    =   true;
                break;
            case 'EU-BNP-XML-CH':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        acctNum         = '';
                        cd          =   'BBAN';
                        printCdtrAcct   = true;
                        break;
                    case #POST://DevOps20844
                        iban = vendBankAccount.QRIBAN_CH;
                        cd          =   'BBAN';
                        printCdtrAcct    = true;
                        break;
                    default:
                        cd          =   'BBAN';
                        printCdtrAcct    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-CZ':       //SKS#DevOps:17041
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        acctNum         = '';
                        cd          =   'BBAN';
                        printCdtrAcct   = true;
                        break;
                    default:
                        cd          =   'BBAN';
                        printCdtrAcct    = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-UK':                     // SKS#VSTS:13646
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHAPS:
                        if(mSKS_EFT_FileDetail.DepSwiftNo && iban)
                        {
                            acctNum         = '';                            
                        }
                        else
                        {
                            iban = '';
                        }
                        printCdtrAcct   = true;
                        cd          =   'BBAN';
                        break;
                    default:
                        printCdtrAcct    = true;
                        cd          =   'BBAN';
                        break;
                }
                break;
            case 'EU-BNP-XML-03':                     // SKS#DevOps:15855
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        acctNum         = '';
                        printCdtrAcct   = true;
                        break;
                    case #INTL:
                    case #INTL_URG:
                    case #INTC:
                        printCdtrAcct   = true;
                        cd          =   'BBAN';
                        break;
                }
                break;
            case 'EU-BNP-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                        acctNum         = '';
                        cd          =   'BBAN';
                        printCdtrAcct   = true;
                        break;
                    case #GIRO04:
                    case #FIK71:
                    case #FIK73:
                    case #FIK75:            //SKS#DevOps:17042
                        printCdtrAcct   = true;
                        if(acctNum)
                        {
                            len     = 10;
                            prtry   = 'OCR';
                            iban    = '';
                        }
                        break;
                    default:
                        printCdtrAcct    = true;
                        cd          =   'BBAN';
                        break;
                }
                break;
            case 'EU-BNP-XML-FR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #URGP:
                    case #INTL:
                    case #INTC:
                        printCdtrAcct   = true;
                        cd          =   'BBAN';
                        break;
                }
                break;
            case 'EU-BNP-XML-NO':               //SKS#DevOps:17043
                printCdtrAcct   =   true;
                cd              =   'BBAN';
                break;
            case 'EU-BNP-XML-MY':               //SKS#DevOps:20473
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYHVP:
                    case #MYLVP:
                    case #MYINTC:
                        printCdtrAcct   =   true;
                        len             =   34;
                        cd              =   'BBAN';
                        cdtrAcctTpValue =    this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CdtrAcctTp',mSKS_EFT_FileDetail.RecId));
                        break;
                    case #MYINTL:
                        printCdtrAcct   =   true;
                        len             =   34;
                        cd              =   'BBAN';
                        break;
                }
                break;
            case 'EU-BNP-XML-SE':               //SKS#DevOps:17044
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #BANK_GIRO:
                        printCdtrAcct   =   true;
                        len             =   8;
                        prtry           =   'BGRN';
                        break;
                    case #PLUS_GIRO:
                        printCdtrAcct   =   true;
                        len             =   10;
                        cd              =   'BBAN';
                        break;
                    default:
                        printCdtrAcct   =   true;
                        break;

                }                
                break;
            case 'EU-BNP-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOMLV:
                        printCdtrAcct   = true;
                        iban = '';
                        cd          =   'BBAN';
                        break;
                    default:
                        printCdtrAcct   = true;
                        cd          =   'BBAN';
                        break;
                }
                break;
            case 'EU-BNP-XML-JP':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #NORM:
                    case #NORM_ZENGN:
                    case #NORM_FXYCS:
                    case #INTC_FXYCS:
                    case #INTC:
                        printCdtrAcct   = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-HK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #URGDOM:
                    case #DOMLVSD:
                    case #DOMLV:
                    case #TT:
                    case #INTC:
                        printCdtrAcct   = true;
                        iban = '';
                        cd          =   'BBAN';
                        break;
                }
                break;
            case 'EU-BNP-XML-CN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RMB_LOC:
                    case #RMB_URG:
                        printCdtrAcct   = true;
                        iban = '';
                        cd          =   'BBAN';
                        break;
                    case #RMBX:
                        printCdtrAcct   = true;
                        if(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId) == 'CN')
                        {
                            iban = '';
                            cd          =   'BBAN';
                        }
                        break;
                    case #TT:
                        printCdtrAcct   = true;
                        break;
                    case #INTC:
                    case #PAYROLL:
                        printCdtrAcct   = true;
                        iban = '';
                        break;
                }
                break;
            case 'EU-BNP-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SEPA:
                    case #SEPA_URG:
                    case #NORM:
                    case #URGDOM:
                    case #INTC:
                    case #TAX:
                    case #ZUS:
                    case #SPLIT:
                        printCdtrAcct   = true;
                        acctNum = '';
                        break;
                    case #INTL_NSEPA:
                    case #INTL_URG:
                        printCdtrAcct    = true;
                        cd          =   'BBAN';
                        break;
                }
                break;
            case 'EU-BNP-XML-BR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOCC_NORM:
                    case #DOCD_INTC:
                    case #TEDC_NORM:
                    case #TEDD_INTC:
                    case #PAYRL_DOC:
                    case #PAYRL_TED:
                        printCdtrAcct   = true;
                        iban = '';
                        break;
                    case #BOLETO:
                        printCdtrAcct   = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-IN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #PAYROLL:
                        printCdtrAcct   = true;
                        iban = '';
                        break;
                    case #CHK_SERVE:
                    case #CHK_RAPID:
                    case #CHK_DD_MP:
                    case #CHK_DD_RP:
                    case #CHK_LTR:
                        printCdtrAcct    = false;
                        break;
                    default:
                        printCdtrAcct   = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-TH':            //SKS#DevOps:20833
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #THHVP:
                        printCdtrAcct   = true;
                        break;
                    case #THTT:
                        printCdtrAcct   = true;
                        len = 11;
                        break;
                    case #THLVP:
                        printCdtrAcct   = true;
                        len = 34;
                        break;
                }
                break;
        }

        if(printCdtrAcct)
        {
            //          2.80: CdtrAcct
            nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
        
            //              Id
            nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

            if(iban)
            {
                //                  IBAN
                nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
            }
            else if(acctNum)
            {
                //                  Othr
                nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));

                //                      Id
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', acctNum, len);

                if(cd)
                {
                    //                  SchmeNm
                    nodeSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));

                    //                      Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', cd);
                }
                else if(prtry)
                {
                    //                  SchmeNm
                    nodeSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));

                    //                      Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Prtry', prtry);
                }
            }
            if (cdtrAcctTpValue != '')
            {
                nodeCdtrAcctTp = nodeCdtrAcct.appendChild(xmlDoc.createElement('Tp'));

                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctTp, 'Cd', cdtrAcctTpValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// BankCentralBankPurposeCode
    /// </summary>
    /// <returns>BankCentralBankPurposeCode</returns>
    private BankCentralBankPurposeCode getBankPurposeCode()
    {
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        return this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf
    /// </summary>
    protected void node_PmtInf()
    {
        //------------------------------------------------------------------------------------------------------
        //  2.0: PmtInf
        //      2.1: PmtInfId
        //      2.2: PmtMtd
        //      2.4: NbOfTxs
        //      2.5: CtrlSum
        //      2.6: PmtTpInf
        //      2.17: ReqdExctnDt
        //      2.19: Dbtr
        //      2.20: DbtrAcct
        //      2.21: DbtrAgt
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail tmpSKS_EFT_FileDetail;
    
        batchCount++;
    
        // Select count and sum for this bank account
        select COUNT(InvoiceOrigAmountCur), SUM(InvoiceSettleAmountPmtCur) from tmpSKS_EFT_FileDetail
            where
                tmpSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                tmpSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                tmpSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                tmpSKS_EFT_FileDetail.BankAccountId == mSKS_EFT_FileDetail.BankAccountId &&
                tmpSKS_EFT_FileDetail.EffectiveDate == mSKS_EFT_FileDetail.EffectiveDate &&
                tmpSKS_EFT_FileDetail.PaymMode == mSKS_EFT_FileDetail.PaymMode &&
                tmpSKS_EFT_FileDetail.PaymSpec == mSKS_EFT_FileDetail.PaymSpec &&
                tmpSKS_EFT_FileDetail.PaymentCurrencyCode == mSKS_EFT_FileDetail.PaymentCurrencyCode&&
                tmpSKS_EFT_FileDetail.AccountCompany == mSKS_EFT_FileDetail.AccountCompany;         //SKS#DevOps:22012
    
    
        //  2.0: PmtInf
        nodePmtInf = nodeRoot.appendChild(xmlDoc.createElement('PmtInf'));
    
        //      2.1: PmtInfId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtInfId', SKS_PP_StringFormats::strRight(mSKS_EFT_File.FileNbr + '-' + int2str(batchCount),35));
    
        //      2.2: PmtMtd
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'CHK');
        }
        else
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'PmtMtd', 'TRF');
        }
    
        //      2.3: BtchBookg
        this.node_PmtInf_BtchBookg(nodePmtInf);

        //      2.4: NbOfTxs
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'NbOfTxs', num2str(tmpSKS_EFT_FileDetail.InvoiceOrigAmountCur,0,0,0,0));

        
        if(mSKS_EFT_FileFormatPaymSpec.FormatId != 'EU-BNP-XML-FR')
        {
            //      2.5: CtrlSum
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'CtrlSum', num2str(tmpSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
        }
        
    
        //      2.6: PmtTpInf
        this.node_PmtInf_PmtTpInf(nodePmtInf);
    
        //      2.17: ReqdExctnDt
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ReqdExctnDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
    
        this.node_PmtInf_DbtrNodes(nodePmtInf);
        
    
        //      2.24 ChrgBr
        this.node_PmtInf_ChrgBr(nodePmtInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-FR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                    case #INTC:
                    case #NORM:
                    case #URGP:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-BNP-XML-DK':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #GIRO04:
                    case #FIK71:
                    case #FIK75:
                    case #FIK73:
                        this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-BNP-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #KID:
                    case #PAYM_CUSID:
                        this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(_nodeCdtTrfTxInf);
                        break;
                    case #PAYM_INV:
                        this.node_CdtTrfTxInf_RmtInf_Strd(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-BNP-XML-SE':               //SKS#DevOps:17044
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #PLUS_GIRO:
                    case #BANK_GIRO:
                        this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-BNP-XML-CH':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #POST:
                        this.node_CdtTrfTxInf_RmtInf_CdtrRefInf(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            case 'EU-BNP-XML-CN'://DevOps20846
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RMBX:
                        this.node_CdtTrfTxInf_RmtInf_UstrdStrd(_nodeCdtTrfTxInf);
                        break;
                    default:
                        this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                        break;
                }
                break;
            default:
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_CdtrRefInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_CdtrRefInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    private void node_CdtTrfTxInf_RmtInf_CdtrRefInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //                  2.120: CdtrRefInf
        //                      2.121: Tp
        //                          2.122: CdOrPrtry
        //                              2.123: Cd
        //                      2.126: Ref
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeStrd;
        XmlElement nodeCdtrRefInf;
        XmlElement nodeTp ;
        XmlElement nodeCdOrPrtry;
        XmlElement nodeRmtInf;
        str value;
        boolean firstRec = true;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
            {
                case 'EU-BNP-XML-DK':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #GIRO04:
                            value = '04/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                            break;
                        case #FIK71:
                            value = '71/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                            break;
                        case #FIK75:
                            value = '75/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                            break;
                        case #FIK73:
                            value = '73/';
                            break;
                    }
                    break;
                case 'EU-BNP-XML-NO':               //SKS#DevOps:17043
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #KID:
                            value = subStr(invSKS_EFT_FileDetail.PaymId, 1, 25);
                            break;
                        case #PAYM_CUSID:
                            value = subStr(invSKS_EFT_FileDetail.PaymId, 1, 15);
                            if(value)
                            {
                                value = 'CUST'+ value;
                            }
                            break;
                    }
                    break;
                case 'EU-BNP-XML-SE':               //SKS#DevOps:17043
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #BANK_GIRO:
                            value = subStr(invSKS_EFT_FileDetail.PaymId, 1, 14);
                            break;
                        case #PLUS_GIRO:
                            value = subStr(invSKS_EFT_FileDetail.PaymId, 1, 35);
                            break;
                    }
                    break;
                case 'EU-BNP-XML-CH':
                    switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                    {
                        case #POST:
                            value = subStr(invSKS_EFT_FileDetail.PaymId, 1, 27);
                            break;
                    }
                    break;
            }

            if(value)
            {
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }

                //              2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

                //                  2.120: CdtrRefInf
                nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
        
                //                      2.121: Tp
                nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
        
                //                          2.122: CdOrPrtry
                nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));

                if(mSKS_EFT_FileDetail.PaymSpec == #POST)
                {
                    //                              2.123: Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Prtry', 'QRR');
                }
                else
                {
                    //                              2.123: Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');
                }
                
                //                      2.126: Ref
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', value);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_Strd
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_Strd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocAmt;
        boolean firstRec = true;

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }

            //              2.100: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

            //              2.101: RfrdDocInf
            this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);

            //              2.109 RfrdDocAmt
            nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
            this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RmtInf_Amt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_RmtInf_Amt
    /// </summary>
    /// <param name = "_nodeRfrdDocAmt">_nodeRfrdDocAmt</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    protected void node_RmtInf_Amt(XmlElement _nodeRfrdDocAmt, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.42: Amt
        //              2.43: InstdAmt
        //------------------------------------------------------------------------------------------------------
        XmlElement  currentElement;
        AmountMST   Remitted;
        AmountMST   CreditNote;

        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountCur > 0)
        {
            Remitted = 0;
            CreditNote = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            Remitted = _invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
            CreditNote = 0;
        }

        if(Remitted != 0)
        {
            //      RmtdAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'RmtdAmt', num2str(Remitted,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
        else
        {
            //      CdtNoteAmt
            currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRfrdDocAmt, 'CdtNoteAmt', num2str(CreditNote,0,2,1,0));
            SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', _invSKS_EFT_FileDetail.PaymentCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_RfrdDocInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_RfrdDocInf
    /// </summary>
    /// <param name = "_nodeStrd">_nodeStrd</param>
    /// <param name = "_invSKS_EFT_FileDetail">_invSKS_EFT_FileDetail</param>
    private void node_CdtTrfTxInf_RmtInf_RfrdDocInf(XmlElement _nodeStrd, SKS_EFT_FileDetail _invSKS_EFT_FileDetail)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.101: RfrdDocInf
        //                  2.102: Tp
        //                      2.103: CdOrPrtry
        //                          2.104: Cd
        //                  2.107: Number
        //                  2.108: RltdDt
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRfrdDocInf;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;

        switch(mSKS_EFT_FileFormatPaymSpec.FormatId)
        {
            case 'EU-BNP-XML-NO':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #PAYM_INV:
                        //              2.101: RfrdDocInf
                        nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
                        //                  2.102: Tp
                        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
                        //                      2.103: CdOrPrtry
                        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
                        //                          2.104: Cd
                        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
                        {
                            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');
                        }
                        else
                        {
                            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
                        }
        
                        //                  2.107: Number
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', _invSKS_EFT_FileDetail.InvoiceNumber, 20);
        
                        //                  2.108: RltdDt
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
                        
                        break;
                }
                break;
            case 'EU-BNP-XML-CN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RMBX:
                        //              2.101: RfrdDocInf
                        nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
                        //                  2.102: Tp
                        nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
                        //                      2.103: CdOrPrtry
                        nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
                        //                          2.104: Cd
                        if(_invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
                        {
                            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CINV');
                        }
                        else
                        {
                            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'CREN');
                        }
        
                        //                  2.107: Number
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', _invSKS_EFT_FileDetail.InvoiceNumber, 20);
        
                        //                  2.108: RltdDt
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'RltdDt', SKS_PP_StringFormats::strDateYYYYMMDD(_invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
                        
                        break;
                }
                break;
            case 'EU-BNP-XML-FR':       //SKS_DevOps_18301
                //              2.101: RfrdDocInf
                nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));

                //                  2.107: Number
                if(_invSKS_EFT_FileDetail.InvoiceNumber)
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.PaymId));
                }
                break;

            default:
                //              2.101: RfrdDocInf
                nodeRfrdDocInf = _nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));

                //                  2.107: Number
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', this.CharacterReplacement(_invSKS_EFT_FileDetail.InvoiceNumber));
                break;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_UstrdStrd</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_UstrdStrd
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_UstrdStrd(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeRfrdDocAmt;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        str invNumbers;

        invNumbers = this.getInvoiceNbrs();
        if(invNumbers)
        {
          
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 1, 35), 35, false);

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 36, 35), 35, false);

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 71, 35), 35, false);

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 106, 35), 35, false);

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                //              2.100: Strd
                nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));

                //              2.101: RfrdDocInf
                this.node_CdtTrfTxInf_RmtInf_RfrdDocInf(nodeStrd, invSKS_EFT_FileDetail);

                //              2.109 RfrdDocAmt
                nodeRfrdDocAmt = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocAmt'));
                this.node_RmtInf_Amt(nodeRfrdDocAmt, invSKS_EFT_FileDetail);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RgltryRptg</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RgltryRptg
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RgltryRptg(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.89: RgltryRptg
        //              Dtls
        //                  Inf
        //------------------------------------------------------------------------------------------------------
    
        XmlElement  nodeRgltryRptg;
        XmlElement currentElement;
        XmlElement  nodeDtls;
        boolean     printRgltryRptg;
        str rgltryRptg;
        str Cd1,Cd2,Cd3;
        str Inf1,Inf2,Inf3;
        str inf;
    
        rgltryRptg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryRptg',mSKS_EFT_FileDetail.RecId));
        msks_EFT_FileDetail_PaymentLine = SKS_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-FR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTL:
                        printRgltryRptg = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-NO':           //SKS#DevOps:21589
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #INTC:
                    case #INTL:
                    case #INTL_URG:
                        printRgltryRptg = true;
                        inf             = msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeCode;
                        break;
                }
                break;
            case 'EU-BNP-XML-SE':           //SKS#DevOps:17044
                if((msks_eft_FileDetail.PaymentCurrencyCode == 'SEK'            &&
                    mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1 > 150))
                {
                    printRgltryRptg = true;
                }
                break;
            case 'EU-BNP-XML-MY':           //SKS#DevOps:20473
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYHVP:
                    case #MYLVP:
                    case #MYINTC:
                        printRgltryRptg = true;
                        rgltryRptg = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MYRgltryRptg',mSKS_EFT_FileDetail.RecId));
                        break;
                }
                break;
            case 'EU-BNP-XML-CN'://DevOps20427
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RMBX:
                        Cd1 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryRptgDtlsCd1',mSKS_EFT_FileDetail.RecId));
                        Cd2 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryRptgDtlsCd2',mSKS_EFT_FileDetail.RecId));
                        Cd3 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryRptgDtlsCd3',mSKS_EFT_FileDetail.RecId));
                        Inf1 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryRptgDtlsInf1',mSKS_EFT_FileDetail.RecId));
                        Inf2 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryRptgDtlsInf2',mSKS_EFT_FileDetail.RecId));
                        Inf3 = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('RgltryRptgDtlsInf3',mSKS_EFT_FileDetail.RecId));

                        nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));
               
                
                        nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(Cd1));
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(Inf1));
                
                        nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(Cd2));
                        currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Amt',
                    num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
                        SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode);
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(Inf2));

                        nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(Cd3));
                        currentElement = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Amt',
                    num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,1,0));
                        SKS_EFT_Format::xmlsetAttributeText(currentElement, 'Ccy', mSKS_EFT_FileDetail.PaymentCurrencyCode);
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(Inf3));

                        break;
                }
                break;
        }
    
        if((rgltryRptg || inf)  && printRgltryRptg)
        {
            nodeRgltryRptg = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RgltryRptg'));
            nodeDtls = nodeRgltryRptg.appendChild(xmlDoc.createElement('Dtls'));

            if(rgltryRptg)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Cd', this.CharacterReplacement(rgltryRptg));
            }
            if(inf)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDtls, 'Inf', this.CharacterReplacement(inf));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf
    /// </summary>
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
    
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
    
        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtTpInf(nodeCdtTrfTxInf);
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);
    
        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        //          2.71: IntrmyAgt1
        this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
    
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
    
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
    
        //          2.82: InstrForCdtrAgt
        this.node_CdtTrfTxInf_InstrForCdtrAgt(nodeCdtTrfTxInf);

        //          2.85: InstrForDbtrAgt
        this.node_CdtTrfTxInf_InstrForDbtrAgt(nodeCdtTrfTxInf);
    
        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);
    
        //          2.89: RgltryRptg
        this.node_CdtTrfTxInf_RgltryRptg(nodeCdtTrfTxInf);

        //          2.90: Tax
        this.node_CdtTrfTxInf_Tax(nodeCdtTrfTxInf);
    
        //          2.91: RltdRmtInf
        this.node_CdtTrfTxInf_RltdRmtInf(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Cdtr</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Cdtr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.79: Cdtr
        //              Nm
        //              PstlAdr
        //              Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtr;
    
        //          2.79: Cdtr
        nodeCdtr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Cdtr'));
    
        //              Nm
        this.node_CdtTrfTxInf_Cdtr_Nm(nodeCdtr);
    
        //              PstlAdr
        this.node_PmtInf_Cdtr_PstlAdr(nodeCdtr);
    
        //              Id
        this.node_PmtInf_Cdtr_Id(nodeCdtr);

        //              Id
        this.node_PmtInf_Cdtr_CtctDtls(nodeCdtr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForDbtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_InstrForDbtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_InstrForDbtrAgt(XmlElement _nodeCdtTrfTxInf)                                        //SKG#DevOps:15855
    {
        //------------------------------------------------------------------------------------------------------
        //          2.85: InstrForDbtrAgt
        //              InstrInf
        //------------------------------------------------------------------------------------------------------
        str value;

        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrForDbtrAgt', mSKS_EFT_FileDetail.RecId));

        if(value)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'InstrForDbtrAgt', value);     
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_Purp
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        XmlElement nodeId;
        str Purpvalue,CdValue,PurpPrtryLookup;
        boolean printPurpCd, printCd;
        boolean printPurpPrtry,printBankCentralPurposeCode;
        str BankCentralPurposeCode = this.getBankPurposeCode();
        boolean printPurpPrtryLookup;

        PurpPrtryLookup =this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PurpPrtryLookup', mSKS_EFT_FileDetail.RecId));

        Purpvalue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PurpPrtry', mSKS_EFT_FileDetail.RecId));
       
        CdValue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PurpCd', mSKS_EFT_FileDetail.RecId));
        

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOMLV://DevOps20798
                    case #FSTR_PMT:
                        printPurpPrtryLookup =true;
                        break;
                    case #INTL:
                        printPurpCd = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-MY':           //SKS#DevOps:20473
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #MYHVP:
                        printPurpPrtry =true;
                        Purpvalue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PurpPrtryMY', mSKS_EFT_FileDetail.RecId));
                        break;
                    case #MYLVP:
                        printPurpPrtry =true;
                        Purpvalue = '1';
                        break;
                }
                break;
            case 'EU-BNP-XML-TR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TAX:
                    case #SOCS:
                    case #INTL:
                        printPurpPrtry = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-CN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #RMBX:
                        printCd = true;                             //SKS#DevOps:20969
                        printBankCentralPurposeCode = true;
                        break;
                    case #INTC:
                    case #TT:
                        printBankCentralPurposeCode = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-IN':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #TT:
                        printBankCentralPurposeCode = true;
                        break;
                }
                break;
        }

        if((CdValue && printPurpCd) || (printPurpPrtry && Purpvalue) ||  (BankCentralPurposeCode && printBankCentralPurposeCode) || (printPurpPrtryLookup && PurpPrtryLookup ))
        {
            nodeId = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));

            if(printPurpCd)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Cd', CdValue);
            }
            else if(printPurpPrtry)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Prtry', Purpvalue);
            }
            else if(printBankCentralPurposeCode)
            {
                if(printCd)             //SKS#DevOps:20969
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Cd', BankCentralPurposeCode);
                }
                else
                {
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Prtry', BankCentralPurposeCode);
                }
            }
            else if(printPurpPrtryLookup)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeId, 'Prtry', PurpPrtryLookup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Tax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tax
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">CdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_Tax(XmlElement _nodeCdtTrfTxInf)            //SKG_DevOps_18618
    {
        XmlElement  nodeTax;
        XmlElement  nodeDbtr;
        boolean printTax;
        str taxId;


        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SPLIT:
                    case #TAX:
                        printTax = true;
                        break;
                }
                break;
        }

        if(printTax)
        {
            taxId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DbtrTaxId', mSKS_EFT_FileDetail.RecId));

            //          Tax
            nodeTax = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Tax'));

            //          Dbtr
            nodeDbtr = nodeTax.appendChild(xmlDoc.createElement('Dbtr'));
    
            //              TaxId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtr, 'TaxId', taxId, 15);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_Ustrd
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers;
        boolean printUstrdDifferently;
        AmountMST   amt;
        SKS_EFT_FileDetail sks_EFT_FileDetail;
        str                paymentDetails,description;
        VendInvoiceJour    vendInvoiceJour;
        boolean            print35Char;
        boolean             printBankCode;
        boolean            printmultUstrd;
        boolean            firstrec = true;
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-CN':
            case 'EU-BNP-XML-IN':
                print35Char = true;
                break;
            case 'EU-BNP-XML-PL':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #SPLIT:
                        printUstrdDifferently = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-TH':               //SKS#DevOps:20833
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #CHK_TH:
                        printBankCode = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-SG':
                switch(mSKS_EFT_FileFormatPaymSpec.PaymSpec)
                {
                    case #DOMLV:
                    case #FSTR_PMT:
                    case #INTC:
                    case #NORM:
                    case #TT:
                        printmultUstrd = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-MY':
                switch(mSKS_EFT_FileFormatPaymSpec.PaymSpec)
                {
                    case #MYHVP:
                    case #MYLVP:
                    case #MYINTC:
                    case #MYINTL:
                        printmultUstrd = true;
                        break;
                }
                break;
        }

        if(printUstrdDifferently)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

            description = LedgerJournalTrans::findRecId(mSKS_EFT_FileDetail.PaymentLineRecId, false).PaymentNotes;

            paymentDetails = '/VAT/'+num2str(this.getTotalTaxAmount(),0,2,2,0) + '/IDC/'+mSKS_EFT_FileDetail.VATNum + '/INV/'+this.getInvoiceNbrs() + '/TXT/'+description;

            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', paymentDetails, 140);
        }
        else if(print35Char)
        {
            invNumbers = this.getInvoiceNbrs();
            if(invNumbers)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 1, 35), 35, false);

                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 36, 35), 35, false);

                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 71, 35), 35, false);

                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', subStr(invNumbers, 106, 35), 35, false);
            }
        }
        else if(printmultUstrd)
        {
            select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
            while(invSKS_EFT_FileDetail)
            {
                if(firstrec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstrec = false;
                }
                if(invSKS_EFT_FileDetail.InvoiceNumber == '')
                {
                    // If no invoice number, go to next record
                    next invSKS_EFT_FileDetail;
                    continue;
                }
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd','/RMAV/' + invSKS_EFT_FileDetail.InvoiceNumber,140);
    
                next invSKS_EFT_FileDetail;
            }
        }
        else if(printBankCode && mSKS_EFT_FileDetail.DepBankTransit)
        {
            //          2.98: RmtInf
            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
            //              2.99: Ustrd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', '/PKLOC/' + mSKS_EFT_FileDetail.DepBankTransit, 14, false);
        }
        else
        {    
            invNumbers = this.getInvoiceNbrs();
            if(invNumbers)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
    
                //              2.99: Ustrd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalTaxAmount</Name>
				<Source><![CDATA[
    private Amount getTotalTaxAmount()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        VendInvoiceJour  vendinvoicejour;
        Amount taxamount;
        
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
        
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            select SumTax from vendinvoicejour where vendinvoicejour.InvoiceId == invSKS_EFT_FileDetail.InvoiceNumber;
            taxamount += vendinvoicejour.SumTax;
            
            next invSKS_EFT_FileDetail;
        }
        return taxamount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_Id
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.79: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //                      SchemeName
        XmlElement nodeId;
        XmlElement nodeOrgPvtId;
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
        str     value, schmeNmCd;
        boolean printCdtrId;
        
        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-BR':
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DOCC_NORM:
                    case #DOCD_INTC:
                    case #TEDC_NORM:
                    case #TEDD_INTC:
                    case #PAYRL_DOC:
                    case #PAYRL_TED:
                        printCdtrId = true;
                        value = SKS_EFT_Format::getCodelookupvalue('CNPJ', mSKS_EFT_FileDetail.RecId);
                        schmeNmCd = 'COID';
                        break;
                }
                break;
        }

        if(value && printCdtrId)
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));

            //              OrgId
            nodeOrgPvtId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
                                      
            //                  Othr
            nodeOthr = nodeOrgPvtId.appendChild(xmlDoc.createElement('Othr'));
            
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', this.CharacterReplacement(value));
            
            //                      SchmeNm
            nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', schmeNmCd);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_ChqInstr</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_ChqInstr
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_ChqInstr(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.52 ChqInstr
        //              2.54 ChqNb
        //              2.58 DlvryMtd
        //                  2.59: Cd
        //              2.67 MemoField
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeChqInstr;
        XmlElement nodeDlvryMtd;
        XmlElement nodeDlvryTo;
        XmlElement nodeAdr;
        XmlElement nodeChqFr;
        str chqNb;       
        str value, chqTpvalue;
        boolean printChqInstr;
        boolean printChqNb = true;
        boolean printCdtrDetails;
        boolean printCd;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-IN':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #CHK_SERVE:
                    case #CHK_RAPID:
                        chqTpvalue = 'BCHQ';
                        printChqInstr = true;
                        break;
                    case #CHK_DD_MP:
                    case #CHK_DD_RP:
                        chqTpvalue = 'DRFT';
                        printChqInstr = true;
                        break;
                    case #CHK_LTR:
                        chqTpvalue = 'CCHQ';
                        printChqInstr = true;
                        break;
                    case #CHK_ADV:
                        chqTpvalue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChqTp', mSKS_EFT_FileDetail.RecId));
                        printChqInstr = true;
                        break;
                }
                break;
            case 'EU-BNP-XML-TH':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #CHK_TH:
                        chqTpvalue = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChqTp', mSKS_EFT_FileDetail.RecId));
                        printChqNb = false;
                        printChqInstr = true;
                        printCdtrDetails = true;
                        printCd   = true;
                        break;
                }
                break;
        }

        if(printChqInstr)
        {
            //          2.52 ChqInstr
            nodeChqInstr = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('ChqInstr'));

            //              2.53 ChqTp
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqTp', chqTpvalue, 0, false);

            if(printChqNb)
            {

                chqNb = SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
    
                //              2.54 ChqNb
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'ChqNb', chqNb, 0, false);
            }
            
            //              2.55 ChqFr
            nodeChqFr = nodeChqInstr.appendChild(xmlDoc.createElement('ChqFr'));

            if(printCdtrDetails)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqFr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 140, false);

                this.node_PstlAdr(nodeChqFr, mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId, mSKS_EFT_FileDetail_VendAddress.BeneAddr, mSKS_EFT_FileDetail_VendAddress.BeneZipPostal, mSKS_EFT_FileDetail_VendAddress.BeneCity, 0, mSKS_EFT_FileDetail_VendAddress.BeneAddr2, mSKS_EFT_FileDetail_VendAddress.BeneState);
            }
            else
            {
                //                  2.56  Nm
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqFr, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 140, false);

                this.node_PstlAdr(nodeChqFr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr, mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 0, mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, true);
            }
            

            value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DlvryMtd', mSKS_EFT_FileDetail.RecId));
            if(value)
            {
                //              2.58 DlvryMtd
                nodeDlvryMtd = nodeChqInstr.appendChild(xmlDoc.createElement('DlvryMtd'));
                
                if(printCd)
                {
                    //                  2.59: Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Cd', value, 0, false);
                }
                else
                {
                    //                  2.60: Prtry
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryMtd, 'Prtry', value, 0, false);
                }
            }

            //              2.61 DlvrTo
            nodeDlvryTo = nodeChqInstr.appendChild(xmlDoc.createElement('DlvrTo'));
            if(value)
            {
                if(value == 'MLDB' || value == 'CRDB' || value == 'PUDB' || value == 'RGDB')
                {
                    //              2.62 Nm
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryTo, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName));
                    //              2.63 Adr
                    nodeAdr = nodeDlvryTo.appendChild(xmlDoc.createElement('Adr'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'StrtNm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'BldgNb', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'PstCd', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'TwnNm', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'CtrySubDvsn', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'Ctry', this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId));
                }
                else
                {
                    //              2.62 Nm
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDlvryTo, 'Nm', this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName));
                    //              2.63 Adr
                    nodeAdr = nodeDlvryTo.appendChild(xmlDoc.createElement('Adr'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'StrtNm', this.CharacterReplacement(mRemittanceAdrline1), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'BldgNb', this.CharacterReplacement(mRemittanceAdrline2), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'PstCd', this.CharacterReplacement(mRemittanceZipCode), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'TwnNm', this.CharacterReplacement(mRemittanceCity), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'CtrySubDvsn', this.CharacterReplacement(mRemittanceState), 0, false);
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeAdr, 'Ctry', this.getLogisticsAddressCountryISO(mRemittanceCountryRegionId));
                }
            }

            //                      2.64 InstrPrty
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'InstrPrty', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrPrty', mSKS_EFT_FileDetail.RecId)), 0, false);

            //              2.66 FrmsCd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'FrmsCd', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('FrmsCd', mSKS_EFT_FileDetail.RecId)), 35, false);

            //              2.67 MemoField
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'MemoFld', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('MemoFld', mSKS_EFT_FileDetail.RecId)), 0, false);

            //              2.69 PrtLctn
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChqInstr, 'PrtLctn', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PrtLctn', mSKS_EFT_FileDetail.RecId)), 0, false);
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForCdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_InstrForCdtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_InstrForCdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.82: InstrForCdtrAgt
        //              InstrInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeInstrForCdtrAgt;
        str     value;
        boolean     printInstrForCdtrAgt;

        switch(mSKS_EFT_FileDetail.FormatId)
        {
            case 'EU-BNP-XML-IN':
                switch(mSKS_EFT_FileDetail.TransactionCode)
                {
                    case #CHK_ADV:
                    case #CHK_SERVE:
                    case #CHK_RAPID:
                        printInstrForCdtrAgt = true;
                        value = 'CHQB';
                        break;
                    case #CHK_DD_MP:
                        printInstrForCdtrAgt = true;
                        value = 'PAYO';
                        break;
                    case #CHK_DD_RP:
                        printInstrForCdtrAgt = true;
                        value = 'BKDD';
                        break;
                }
                break;
        }

        if(printInstrForCdtrAgt && value)
        {
            //          2.82: InstrForCdtrAgt
            nodeInstrForCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('InstrForCdtrAgt'));
    
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInstrForCdtrAgt, 'InstrInf', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
            join mSKS_EFT_FileDetail_BankAccount
                order by mSKS_EFT_FileDetail.AccountCompany,          //SKS#DevOps:22012
        mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BankAccount.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>