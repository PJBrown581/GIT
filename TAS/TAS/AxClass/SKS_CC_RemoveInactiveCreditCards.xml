<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_RemoveInactiveCreditCards</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_RemoveInactiveCreditCards extends RunBaseBatch
{
    #OCCRetryCount
    QueryRun                queryRun;
    DialogField             dfNumberOfThreads;
    DialogField             dfRemoveExpiredCards;
    DialogField             dfRemoveInactiveCards;
    DialogField             dfExpiredDays;
    DialogField             dfInactiveDays;
    DialogField             dfDisplayCardRemovalResults;
    PositiveNumber          numberOfThreads;
    NoYes                   removeExpiredCards;
    NoYes                   removeInactiveCards;
    PositiveNumber          expiredDays;
    PositiveNumber          inactiveDays;
    NoYes                   displayCardRemovalResults;
    Map                     recordsToProcessMap;
    Counter                 creditCardCounter;

    #define.CurrentVersion(1)
    #localmacro.CurrentList        
        numberOfThreads,
        displayCardRemovalResults,
        removeExpiredCards,
        removeInactiveCards,
        expiredDays,
        inactiveDays
    #endmacro    

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super();
        
        dfNumberOfThreads = dialog.addFieldValue(extendedTypeStr(PositiveNumber), numberOfThreads, "@SYS109551");
        dfDisplayCardRemovalResults = dialog.addFieldValue(extendedTypeStr(NoYesId), displayCardRemovalResults, "@SKS:SKGCCDispEachCCRemResults");
        
        DialogGroup removeExpiredCardsGroup = dialog.addGroup("@SKS:SKGCCExpiredCreditCards");
        dfRemoveExpiredCards = dialog.addFieldValue(extendedTypeStr(NoYesId), removeExpiredCards, "@SKS:SKGCCRemoveExpiredCreditCards", "@SKS:SKGCCRemoveExpiredCreditCardsHelpText");
        dfExpiredDays = dialog.addFieldValue(extendedTypeStr(PositiveNumber), expiredDays, "@SKS:SKGCCExpiredDays");
        DialogGroup removeInactiveCardsGroup = dialog.addGroup("@SKS:SKGCCInactiveCreditCards");
        dfRemoveInactiveCards = dialog.addFieldValue(extendedTypeStr(NoYesId), removeInactiveCards, "@SKS:SKGCCRemoveInactiveCreditCards", "@SKS:SKGCCRemoveInactiveCreditCardsHelpText");
        dfInactiveDays = dialog.addFieldValue(extendedTypeStr(PositiveNumber), inactiveDays, "@SKS:SKGCCInactiveDays");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();
        
        numberOfThreads = dfNumberOfThreads.value();
        displayCardRemovalResults = dfDisplayCardRemovalResults.value();
        removeExpiredCards = dfRemoveExpiredCards.value();
        expiredDays = dfExpiredDays.value();
        removeInactiveCards = dfRemoveInactiveCards.value();
        inactiveDays = dfInactiveDays.value();
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (numberOfThreads > 8)
        {
            ret = checkFailed("@SKS:SKGCCMaxNbrOfThreadsAllowedIsEight");
        }

        if (!removeExpiredCards && !removeInactiveCards)
        {
            ret = checkFailed(strFmt("@SKS:SKGCCShowExpiredCreditCardsWarnMsg", 
                "@SKS:SKGCCRemoveExpiredCreditCards", "@SKS:SKGCCRemoveInactiveCreditCards"));
        }

        if (removeExpiredCards && !expiredDays)
        {
            ret = checkFailed(strFmt("@SYS84753", "@SKS:SKGCCExpiredDays"));
        }

        if (removeInactiveCards && !inactiveDays)
        {
            ret = checkFailed(strFmt("@SYS84753", "@SKS:SKGCCInactiveDays"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected Query buildQuery()
    {        
        Query qry = new Query();

        QueryBuildDataSource qbdsCreditCardCust = qry.addDataSource(tableNum(CreditCardCust));
        qbdsCreditCardCust.addOrderByField(fieldNum(CreditCardCust, RecId));

        qbdsCreditCardCust.addRange(fieldNum(CreditCardCust, CustAccount));

        QueryBuildDataSource qbdsCustTable = qbdsCreditCardCust.addDataSource(tableNum(CustTable));
        qbdsCustTable.fetchMode(QueryFetchMode::One2One);
        qbdsCustTable.joinMode(JoinMode::ExistsJoin);
        qbdsCustTable.relations(true);
        
        qbdsCustTable.addRange(fieldNum(CustTable, CustGroup));
        qbdsCustTable.addRange(fieldNum(CustTable, PaymTermId));
                
        return qry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        if (!queryRun)
        {
            queryRun = new QueryRun(this.buildQuery());
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        queryRun = new QueryRun(this.buildQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        PackedQueryRun packedQueryRun;        

        switch (version)
        {
            case(#CurrentVersion):
                [version, #Currentlist, packedQueryRun] = _packedClass;

                if (packedQueryRun)
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecordList</Name>
				<Source><![CDATA[
    protected void processRecordList()
    {
        SKS_CC_RemoveInactiveCreditCardsSubTask removeCreditCardSubTask;
        BatchHeader batchHeader;
        container rangesPerThreadCon;
        container keyRangesCon;
        container creditCardList, keysRangeList;

        if (this.isInBatch())
        {
            if (!numberOfThreads)
            {
                numberOfThreads = 4;
            }

            if (creditCardCounter <= numberOfThreads)
            {
                numberOfThreads = 1;
            }
        }
        else
        {
            numberOfThreads = 1;
        }

        [rangesPerThreadCon, keyRangesCon] = this.setRangePerThread(creditCardCounter);

        if (this.isInBatch())
        {            
            str batchThreadCaption;
            int i;
            for (i = 1; i <= numberOfThreads; i++)
            {
                if (!batchHeader)
                {
                    batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
                }

                creditCardList = conPeek(rangesPerThreadCon, i);
                if (!creditCardList)
                {
                    continue;
                }
                keysRangeList = conPeek(keyRangesCon, i);

                int curTaskRangeFrom, curTaskRangeTo, curTaskNbrOfRecords;
                curTaskRangeFrom = conPeek(keysRangeList, 1);
                curTaskNbrOfRecords = conLen(keysRangeList);
                curTaskRangeTo = conPeek(keysRangeList, curTaskNbrOfRecords);
                
                batchThreadCaption = strFmt("@SKS:SKGCCPayLinkBatchThreadCaption", SKS_CC_RemoveInactiveCreditCardsSubTask::description(), i, curTaskRangeFrom, curTaskRangeTo);
                removeCreditCardSubTask = SKS_CC_RemoveInactiveCreditCardsSubTask::newSubTask(creditCardList, batchThreadCaption, displayCardRemovalResults, true);

                batchHeader.addRuntimeTask(removeCreditCardSubTask, this.parmCurrentBatch().RecId);
            }
            
            if (batchHeader)
            {
                batchHeader.save();
            }
        }
        else
        {
            // when not in batch
            creditCardList = conPeek(rangesPerThreadCon, 1);
            SKS_CC_RemoveInactiveCreditCardsSubTask::newSubTask(creditCardList, '', displayCardRemovalResults, false).run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangePerThread</Name>
				<Source><![CDATA[
    private container setRangePerThread(int _nbrToProc)
    {
        container       recordsToProcCon, keysToProcCon;
        container       curRecsCon, curKeysCon;
        int             intDiv, lastUsedRange, i;
        int             curKey;
        int64           curValue;
        MapEnumerator   me;

        intDiv = _nbrToProc div numberOfThreads;

        i = 1;
        lastUsedRange = intDiv;
        me = recordsToProcessMap.getEnumerator();
        while (me.moveNext())
        {
            curKey = me.currentKey();
            curValue = me.currentValue();
            curRecsCon += curValue;
            curKeysCon += curKey;

            if (i < numberOfThreads && curKey == lastUsedRange)
            {
                lastUsedRange += intDiv;
                recordsToProcCon = conIns(recordsToProcCon, i, curRecsCon);
                keysToProcCon = conIns(keysToProcCon, i, curKeysCon);
                curRecsCon = conNull();
                curKeysCon = conNull();
                i++;
            }
        }

        if (curRecsCon && conLen(curRecsCon) != 0)
        {
            recordsToProcCon = conIns(recordsToProcCon, i, curRecsCon);
            keysToProcCon = conIns(keysToProcCon, i, curKeysCon);
        }

        return [recordsToProcCon, keysToProcCon];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        date currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        date nullDateToUse = dateNull() + 1;
        CreditCardCust creditCardCust;

        recordsToProcessMap = new Map(Types::Integer, Types::Int64);
        if (removeExpiredCards && expiredDays)
        {
            Query qryExpired = new Query(queryRun.query());
            QueryBuildDataSource qbdsCreditCardCust;
            qbdsCreditCardCust = qryExpired.dataSourceTable(tableNum(CreditCardCust));

            QueryBuildDataSource qbdsCreditCardView;
            if (qbdsCreditCardCust)
            {
                qbdsCreditCardView = qbdsCreditCardCust.addDataSource(tableNum(SKS_CC_CreditCardCustView));
                qbdsCreditCardView.joinMode(JoinMode::ExistsJoin);
                qbdsCreditCardView.addLink(fieldNum(CreditCardCust, RecId), fieldNum(SKS_CC_CreditCardCustView, CardRecId), qbdsCreditCardCust.name());

                QueryBuildRange qbrExpirationDate = qbdsCreditCardView.addRange(fieldNum(SKS_CC_CreditCardCustView, ExpirationDate));

                date expirationDate = currentDate - expiredDays;
                qbrExpirationDate.value(SysQuery::range(nullDateToUse, expirationDate));
            }            

            QueryRun qryRunExpired = new QueryRun(qryExpired);
            while (qryRunExpired.next())
            {
                creditCardCust = qryRunExpired.get(tableNum(CreditCardCust));

                creditCardCounter++;
                recordsToProcessMap.insert(creditCardCounter, creditCardCust.RecId);
            }
        }

        if (removeInactiveCards && inactiveDays)
        {
            Query qryInactive = new Query(queryRun.query());
            QueryBuildDataSource qbdsCreditCardCust;
            qbdsCreditCardCust = qryInactive.dataSourceTable(tableNum(CreditCardCust));
            
            if (qbdsCreditCardCust)
            {
                QueryBuildDataSource qbdsCreditCardAuthTransExist;
                qbdsCreditCardAuthTransExist = qbdsCreditCardCust.addDataSource(tableNum(CreditCardAuthTrans), literalStr('CreditCardAuthTransExist'));
                qbdsCreditCardAuthTransExist.joinMode(JoinMode::ExistsJoin);
                qbdsCreditCardAuthTransExist.addLink(fieldNum(CreditCardCust, UniqueCardId), fieldNum(CreditCardAuthTrans, UniqueCardId), qbdsCreditCardCust.name());

                QueryBuildDataSource qbdsCreditCardAuthTransNotExist;
                qbdsCreditCardAuthTransNotExist = qbdsCreditCardCust.addDataSource(tableNum(CreditCardAuthTrans), literalStr('CreditCardAuthTransNotExist'));
                qbdsCreditCardAuthTransNotExist.joinMode(JoinMode::NoExistsJoin);
                qbdsCreditCardAuthTransNotExist.addLink(fieldNum(CreditCardCust, UniqueCardId), fieldNum(CreditCardAuthTrans, UniqueCardId), qbdsCreditCardCust.name());

                QueryBuildRange qbrApprovedDateTime = qbdsCreditCardAuthTransNotExist.addRange(fieldNum(CreditCardAuthTrans, ApprovedDateTime));

                date inactiveDate = (currentDate - inactiveDays) + 1;
                utcdatetime inactiveDateTime = DateTimeUtil::newDateTime(inactiveDate, 0, DateTimeUtil::getUserPreferredTimeZone());
                qbrApprovedDateTime.value(SysQuery::range(inactiveDateTime, DateTimeUtil::maxValue()));
            }

            QueryRun qryRunInactive = new QueryRun(qryInactive);
            while (qryRunInactive.next())
            {
                creditCardCust = qryRunInactive.get(tableNum(CreditCardCust));

                creditCardCounter++;
                recordsToProcessMap.insert(creditCardCounter, creditCardCust.RecId);
            }
        }

        if (!creditCardCounter || !recordsToProcessMap || recordsToProcessMap.empty())
        {
            return;
        }

        info(strFmt("@SKS:SKGCCCreditCardsToRemove", creditCardCounter));

        this.processRecordList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SKS_CC_RemoveInactiveCreditCards construct()
    {
        return new SKS_CC_RemoveInactiveCreditCards();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public server static ClassDescription description()
    {
        return "@SKS:SKGCCRemoveExpiredOrInactiveCreditCards";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SKS_CC_RemoveInactiveCreditCards removeInactiveCreditCards = SKS_CC_RemoveInactiveCreditCards::construct();

        if (SKS_PP_Setup::find().ModCC == NoYes::No)
        {
            throw error("@SKS6608");
        }              
        
        if (!SKS_CC_PayFabricWalletHandler::isPayFabricActiveProcessor())
        {
            throw error("@SKS:SKGCCPayFabricNotActivePaymProc");
        }

        if (removeInactiveCreditCards.prompt())
        {
            removeInactiveCreditCards.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {    
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>