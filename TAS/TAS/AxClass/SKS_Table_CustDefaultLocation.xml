<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_Table_CustDefaultLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_Table_CustDefaultLocation
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EH_Delete_Pre</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(CustDefaultLocation), DataEventType::Deleting)]
    public static void EH_Delete_Pre(Common sender, DataEventArgs e)
    {
        CustDefaultLocation locCustDefaultLocation;
        ;
    
        locCustDefaultLocation = sender as CustDefaultLocation;
    
        //SKS_EPY Code
        SKS_Table_CustDefaultLocation::UpdateCustomerInEPay(locCustDefaultLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Insert_Post</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(CustDefaultLocation), DataEventType::Inserted)]
    public static void EH_Insert_Post(Common sender, DataEventArgs e)
    {
        CustDefaultLocation locCustDefaultLocation;
        ;
    
        locCustDefaultLocation = sender as CustDefaultLocation;
    
        //SKS_EPY CODE
        SKS_Table_CustDefaultLocation::UpdateCustomerInEPay(locCustDefaultLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>EH_Update_Pre</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(CustDefaultLocation), DataEventType::Updating)]
    public static void EH_Update_Pre(Common sender, DataEventArgs e)
    {
        CustDefaultLocation locCustDefaultLocation;
    
        ;
    
        locCustDefaultLocation = sender as CustDefaultLocation;
    
        //SKS_EPY CODE BLOCK
    
    
        SKS_Table_CustDefaultLocation::UpdateCustomerInEPay(locCustDefaultLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCustomerInEPay</Name>
				<Source><![CDATA[
    private static void UpdateCustomerInEPay(CustDefaultLocation _CustDefaultLocation)
    {
        CustTable locCustTable;
       //DirPartyContactInfoView locDirPartyContactInfoView;
        DirPartyLocationRole locDirPartyLocationRole;
        DirPartyTable locDirPartyTable;
        LogisticsLocationRole locLogisticsLocationRole;
        SKS_EPY_QueueData locSKS_EPY_QueueData, locNewSKS_EPY_QueueData;
        SKS_EPY_Queue locSKS_EPY_Queue, locNewSKS_EPY_Queue;
        boolean locQueueCreated = false;
        ;
    
        select firstonly RecId from locDirPartyLocationRole
            join RecId from locLogisticsLocationRole
            where locDirPartyLocationRole.LocationRole == locLogisticsLocationRole.RecId
                && locDirPartyLocationRole.recid == _CustDefaultLocation.PartyLocationRole
                && (locLogisticsLocationRole.Type == LogisticsLocationRoleType::RemitTo
                    || locLogisticsLocationRole.Type == LogisticsLocationRoleType::Delivery);
        if(locDirPartyLocationRole)
        {
            while select crosscompany RecId from locCustTable
                where locCustTable.AccountNum == _CustDefaultLocation.AccountNum
                join Name from locDirPartyTable where locDirPartyTable.RecId == locCustTable.Party
            {
                //If not ePay Customer, do nothing.
                if(!SKS_Table_CustTable::isEpayCustomer(locCustTable))
                    continue;
                changeCompany(locCustTable.company())
                {
                    select locSKS_EPY_Queue
                        join locSKS_EPY_QueueData
                        where locSKS_EPY_QueueData.QueueRecId == locSKS_EPY_Queue.RecId
                            && locSKS_EPY_QueueData.TableRecId == locCustTable.RecId
                            && locSKS_EPY_QueueData.SourceTable == SKS_EPY_Table::CustTable
                            && (locSKS_EPY_Queue.ChangeType == SKS_EPY_ChangeType::Created || locSKS_EPY_Queue.ChangeType == SKS_EPY_ChangeType::Updated)
                            && locSKS_EPY_Queue.Action == SKS_EPY_Action::SendToEpay
                            && locSKS_EPY_Queue.Status == SKS_EPY_Status::New
                            && locSKS_EPY_Queue.Entity == SKS_EPY_Entity::Customer;
                    if(!locSKS_EPY_Queue)
                    {
                        //because we only have one queued event, we only want to insert a single queue item
                        if(!locQueueCreated)
                        {
                            locNewSKS_EPY_Queue.Entity = SKS_EPY_Entity::Customer;
                            locNewSKS_EPY_Queue.ChangeType = SKS_EPY_ChangeType::Updated;
                            locNewSKS_EPY_Queue.Action = SKS_EPY_Action::SendToEpay;
                            locNewSKS_EPY_Queue.InitiatingTable = SKS_EPY_Table::CustDefaultLocation;
                            locNewSKS_EPY_Queue.InitiatingRecId = _CustDefaultLocation.RecId;
                            locNewSKS_EPY_Queue.Status = SKS_EPY_Status::New;
                            locNewSKS_EPY_Queue.AccountName = locDirPartyTable.Name;
                            locNewSKS_EPY_Queue.AccountNum = locCustTable.AccountNum;
                            locNewSKS_EPY_Queue.insert();
                            locQueueCreated = true;
                        }
                        //there can be many queued data items.
                        locNewSKS_EPY_QueueData.SourceTable = SKS_EPY_Table::CustTable;
                        locNewSKS_EPY_QueueData.TableRecId = locCustTable.RecId;
                        locNewSKS_EPY_QueueData.QueueRecId = locNewSKS_EPY_Queue.RecId;
                        locNewSKS_EPY_QueueData.insert();
    
                        locSKS_EPY_Queue = null;
                        locSKS_EPY_QueueData = null;
                        locNewSKS_EPY_QueueData = null;
                        //Do NOT null the locNewSKS_EPY_Queue record.  we only create this once and need to persist the recId so all child queuedata records relate to a single Queue record.
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>