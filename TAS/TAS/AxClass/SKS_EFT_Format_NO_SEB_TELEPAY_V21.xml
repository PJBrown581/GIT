<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_NO_SEB_TELEPAY_V21</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_NO_SEB_TELEPAY_V21 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_NO_SEB_TELEPAY_V21 extends SKS_EFT_Format
{
    #define.FormatVersion('20220523')
    SKS_EFT_SequenceNumber mSequenceNumber;
    SKS_EFT_FileId mSequenceControl;
    int mPaymentCount;
    int mRecordCount;
    AmountMST mPaymentAmount;
    str enterpriseNum;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>application_Header</Name>
				<Source><![CDATA[
    //Nbr   Description                         Comment
    //1     AH-Id (2)
    //2     AH-Version (1)
    //3     AH-Return Code (2)
    //4     AH-Procedure Id (4)
    //5     AH-Transaction Date (4)
    //6     AH-Seq. No. (6)
    //7     AH-Transcode (8)
    //8     AH-Userid (11)
    //9     AH-No. of 80 Char (2)
    
    str application_Header()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str monthStr;
        str dayStr;
        ;
    
        //1 AH-Id (2)
        sb.Append('AH');
    
        //2 AH-Version (1)
        sb.Append('2');
    
        //3 AH-Return Code (2)
        sb.Append('00');
    
        //4 AH-Procedure Id (4)
        sb.Append('TBII');
    
        //5 AH-Transaction Date (4)
        monthStr = SKS_PP_StringFormats::strFill(2, int2str(mthOfYr(mSKS_EFT_File.EffectiveDate)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        dayStr = SKS_PP_StringFormats::strFill(2, int2str(dayOfMth(mSKS_EFT_File.EffectiveDate)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        sb.Append(monthStr + dayStr);
    
        //6 AH-Seq. No. (6)
        sb.Append(SKS_PP_StringFormats::strFill(6, int2str(mSequenceNumber), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //7 AH-Transcode (8)
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //8 AH-Userid (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //9 AH-No. of 80 Char (2)
        sb.Append('04');
    
        this.incrementSequenceNumber();
    
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSegments</Name>
				<Source><![CDATA[
    private void createSegments(str _strBuilder)
    {
        int i;
        str segmentStr;
        int startPos = 1;
        ;
    
        i = 1;
    
        //Split into 4 - 80 character lines
        while(i<=4)
        {
            segmentStr = substr(_strBuilder, startPos, 80);
            this.fileWrite(segmentStr);
    
            startPos = startPos + 80;
    
            i++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
    
        enterpriseNum = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('EnterpriseNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        //Get sequence number and sequence control
        this.getSequence();
    
        //Create BETFOR00 record
        this.rec_BETFOR00();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            //Create BETFOR21 record
            this.rec_BETFOR21();
    
            //Create BETFOR23 record
            // Currently only create a single consolidated BETFOR23 record
            this.rec_BETFOR23();
    
            next mSKS_EFT_FileDetail;
        }
    
        //Create BETFOR99 record
        this.rec_BETFOR99();
    
        //Set sequence number and sequence control
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        ;
    
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Control
            mSequenceControl = mSKS_EFT_FileFormat.NextFileId;
    
            // If found, check date
            if(mSKS_EFT_FileFormat.NextDailyResetDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                //Get Next Sequence Number
                mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
            }
            else
            {
                mSequenceNumber = 1;
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceControl</Name>
				<Source><![CDATA[
    private void incrementSequenceControl()
    {
        if(mSequenceControl >= 9999)
        {
            mSequenceControl = 0;
        }
        else
        {
            mSequenceControl++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999)
        {
            mSequenceNumber = 0;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BETFOR00</Name>
				<Source><![CDATA[
    //Nbr   Description                         Comment
    //1     Transaction Code (8)
    //2     Enterprise Number (11)
    //3     Division (11)
    //4     Sequence Control (4)
    //5     Reserved (6)
    //6     Production Date (4)
    //7     Password (10)
    //8     Version (10)
    //9     New Password (10)
    //10    Operator No. (11)
    //11    SIGILL: SEAL-USE (1)
    //12    SIGILL: SEAL DATE (6)
    //13    SIGILL: PART KEY (20)
    //14    SIGILL: SEAL HOW (1)
    //15    RESERVED (143)
    //16    OWN REFERENCE BATCH (15)
    //17    RESERVED (9)
    
    boolean rec_BETFOR00()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str monthStr;
        str dayStr;
        ;
    
        mRecordCount++;
    
        //Add application header
        sb.Append(this.application_Header());
    
        //1     Transaction Code (8)
        sb.Append('BETFOR00');
    
        //2     Enterprise Number (11)
        
        sb.Append(SKS_PP_StringFormats::strFill(11, this.CharacterReplacement(enterpriseNum), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3     Division (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //4     Sequence Control (4)
        sb.Append(SKS_PP_StringFormats::strFill(4, int2str(mSequenceControl), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //5     Reserved (6)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //6     Production Date (4)
        monthStr = SKS_PP_StringFormats::strFill(2, int2str(mthOfYr(mSKS_EFT_File.EffectiveDate)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        dayStr = SKS_PP_StringFormats::strFill(2, int2str(dayOfMth(mSKS_EFT_File.EffectiveDate)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        sb.Append(monthStr + dayStr);
    
        //7     Password (10)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //8     Version (10)
        sb.Append('VERSJON002');
    
        //9     New Password (10)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //10    Operator No. (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //11    SIGILL: SEAL-USE (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //12    SIGILL: SEAL DATE (6)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //13    SIGILL: PART KEY (20)
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //14    SIGILL: SEAL HOW (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //15    RESERVED (143)
        sb.Append(SKS_PP_StringFormats::strFill(143, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //16    OWN REFERENCE BATCH (15)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //17    RESERVED (9)
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.createSegments(sb.ToString());
    
        this.incrementSequenceControl();
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BETFOR21</Name>
				<Source><![CDATA[
    //Nbr   Description                         Comment
    //1     TRANSACTION CODE (8)
    //2     ENTERPRISE NUMBER (11)
    //3     ACCOUNT NUMBER (11)
    //4     SEQUENCE CONTROL (4)
    //5     REFERENCE NUMBER (6)
    //6     PAYMENT DATE (6)
    //7     OWN REF. ORDER (30)
    //8     RESERVED (1)
    //9     PAYEE’S ACCOUNT NUMBER (11)
    //10    PAYEE’S NAME (30)
    //11    ADDRESS 1 (30)
    //12    ADDRESS 2 (30)
    //13    POSTCODE (4)
    //14    CITY (26)
    //15    AMOUNT TO OWN ACCOUNT (15)
    //16    TEXT CODE (3)
    //17    TRANSFER CODE (1)
    //18    CANCELLATION CODE (1)
    //19    TOTAL AMOUNT (15)
    //20    CLIENT REFERENCE (5)
    //21    VALUE DATE (6)
    //22    VALUE DATE RECEIVING BANK (6)
    //23    CANCELLATION CAUSE (1)
    //24    RESERVED (9)
    //25    FORM NO (10)
    
    boolean rec_BETFOR21()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        AmountMST amt;
        ;
    
        mRecordCount++;
    
        //Add application header
        sb.Append(this.application_Header());
    
        //1     TRANSACTION CODE (8)
        sb.Append('BETFOR21');
    
        //2     ENTERPRISE NUMBER (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, this.CharacterReplacement(enterpriseNum), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3     ACCOUNT NUMBER (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //4     SEQUENCE CONTROL (4)
        sb.Append(SKS_PP_StringFormats::strFill(4, int2str(mSequenceControl), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //5     REFERENCE NUMBER (6)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //6     PAYMENT DATE (6)
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        //7     OWN REF. ORDER (30)
        sb.Append(SKS_PP_StringFormats::strFill(30, strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //8     RESERVED (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //9     PAYEE’S ACCOUNT NUMBER (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //10    PAYEE’S NAME (30)
        sb.Append(SKS_PP_StringFormats::strFill(30, strUpr(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //11    ADDRESS 1 (30)
        sb.Append(SKS_PP_StringFormats::strFill(30, strUpr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //12    ADDRESS 2 (30)
        sb.Append(SKS_PP_StringFormats::strFill(30, strUpr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //13    POSTCODE (4)
        sb.Append(SKS_PP_StringFormats::strFill(4, strUpr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneZipPostal)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //14    CITY (26)
        sb.Append(SKS_PP_StringFormats::strFill(26, strUpr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //15    AMOUNT TO OWN ACCOUNT (15)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //16    TEXT CODE (3)
        sb.Append('600');
    
        //17    TRANSFER CODE (1)
        sb.Append('F');
    
        //18    CANCELLATION CODE (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //19    TOTAL AMOUNT (15)
        amt = mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        sb.Append(SKS_PP_StringFormats::strMoney(amt, 15));
    
        //20    CLIENT REFERENCE (5)
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //21    VALUE DATE (6)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //22    VALUE DATE RECEIVING BANK (6)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //23    CANCELLATION CAUSE (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //24    RESERVED (9)
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //25    FORM NO (10)
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        mPaymentCount++;
        mPaymentAmount += amt;
    
        this.createSegments(sb.ToString());
    
        this.incrementSequenceControl();
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BETFOR23</Name>
				<Source><![CDATA[
    //Nbr   Description                         Comment
    //1     TRANSACTION CODE (8)
    //2     ENTERPRISE NUMBER (11)
    //3     ACCOUNT NUMBER (11)
    //4     SEQUENCE CONTROL (4)
    //5     REFERENCE NUMBER (6)
    //6     PAYEE REF. INVOICE (40)
    //7     PAYEE REF. INVOICE (40)
    //8     PAYEE REF. INVOICE (40)
    //9     KID (27)
    //10    OWN REFERENCE INVOICE (30)
    //11    INVOICE AMOUNT (15)
    //12    DEBIT/CREDIT CODE (1)
    //13    INVOICE NUMBER (20)
    //14    SERIAL NUMBER (3)
    //15    CANCELLATION CAUSE (1)
    //16    CUSTOMER NUMBER (15)
    //17    INVOICE DATE (8)                    YYYYMMDD
    boolean rec_BETFOR23()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        mRecordCount++;
    
        //Add application header
        sb.Append(this.application_Header());
    
        //1     TRANSACTION CODE (8)
        sb.Append('BETFOR23');
    
        //2     ENTERPRISE NUMBER (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, this.CharacterReplacement(enterpriseNum), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3     ACCOUNT NUMBER (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //4     SEQUENCE CONTROL (4)
        sb.Append(SKS_PP_StringFormats::strFill(4, int2str(mSequenceControl), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //5     REFERENCE NUMBER (6)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //6     PAYEE REF. INVOICE (40)
        sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //7     PAYEE REF. INVOICE (40)
        sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //8     PAYEE REF. INVOICE (40)
        sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //9     KID (27)
        sb.Append(SKS_PP_StringFormats::strFill(27, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //10    OWN REFERENCE INVOICE (30)
        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //11    INVOICE AMOUNT (15)
        sb.Append(SKS_PP_StringFormats::strMoney(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1, 15));
    
        //12    DEBIT/CREDIT CODE (1)
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(SKS_PP_StringFormats::strFill(1, 'K', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(1, 'D', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
    
        //13    INVOICE NUMBER (20)
        sb.Append(SKS_PP_StringFormats::strFill(20, this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHImmOrigin), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //14    SERIAL NUMBER (3)
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Right));
    
        //15    CANCELLATION CAUSE (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //16    CUSTOMER NUMBER (15)
        sb.Append(SKS_PP_StringFormats::strFill(15, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //17    INVOICE DATE (8)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        this.createSegments(sb.ToString());
    
        this.incrementSequenceControl();
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BETFOR99</Name>
				<Source><![CDATA[
    //Nbr   Description                         Comment
    //1     Transaction Code (8)
    //2     Enterprise Number (11)
    //3     Reserved (11)
    //4     Sequence Control (4)
    //5     Reserved (6)
    //6     Production Date (4)
    //7     Number of Payments (4)
    //8     Total Amount Batch (15)
    //9     Number of Records (5)
    //10    Reserved (163)
    //11    SIGILL: SECURITY (4)
    //12    SIGILL: LANGUAGE (1)
    //13    SIGILL: VERSION (1)
    //14    SIGILL: INTERFACE (1)
    //15    SIGILL: CONTROL FIELD (18)
    //16    VERSION SOFTWARE (16)
    //17    VERSION BANK (8)
    
    boolean rec_BETFOR99()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str monthStr;
        str dayStr;
        ;
    
        mRecordCount++;
    
        //Add application header
        sb.Append(this.application_Header());
    
        //1     Transaction Code (8)
        sb.Append('BETFOR99');
    
        //2     Enterprise Number (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, this.CharacterReplacement(enterpriseNum), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //3     Reserved (11)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //4     Sequence Control (4)
        sb.Append(SKS_PP_StringFormats::strFill(4, int2str(mSequenceControl), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //5     Reserved (6)
        sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //6     Production Date (4)
        monthStr = SKS_PP_StringFormats::strFill(2, int2str(mthOfYr(mSKS_EFT_File.EffectiveDate)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        dayStr = SKS_PP_StringFormats::strFill(2, int2str(dayOfMth(mSKS_EFT_File.EffectiveDate)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        sb.Append(monthStr + dayStr);
    
        //7     Number of Payments (4)
        sb.Append(SKS_PP_StringFormats::strFill(4, int2str(mPaymentCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //8     Total Amount Batch (15)
        sb.Append(SKS_PP_StringFormats::strMoney(mPaymentAmount, 15));
    
        //9     Number of Records (5)
        sb.Append(SKS_PP_StringFormats::strFill(5, int2str(mRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
    
        //10    Reserved (163)
        sb.Append(SKS_PP_StringFormats::strFill(163, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //11    SIGILL: SECURITY (4)
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //12    SIGILL: LANGUAGE (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //13    SIGILL: VERSION (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //14    SIGILL: INTERFACE (1)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //15    SIGILL: CONTROL FIELD (18)
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //16    VERSION SOFTWARE (16)
        sb.Append(SKS_PP_StringFormats::strFill(16, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //17    VERSION BANK (8)
        sb.Append(SKS_PP_StringFormats::strFill(8, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.createSegments(sb.ToString());
    
        this.incrementSequenceControl();
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.NextDailyResetDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
    
            sks_eft_fileformat.NextFileId = mSequenceControl;
    
            sks_eft_fileformat.update();
    
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>