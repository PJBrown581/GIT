<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CHASE_ACCESS_CSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CHASE_ACCESS_CSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CHASE_ACCESS_CSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220927')
    #define.Delimiter(',')
    #define.Pipe('|')
    int64   mPaymentCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;

        this.rec_FileHeader();

        while(mSKS_EFT_FileDetail)
        {
            this.rec_PaymentHeader();

            this.rec_PayeeName();

            this.rec_PayeeAddress();

            this.rec_AdditionalPayeeAddress();

            this.rec_PayeePostalRecord();

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                if(invSKS_EFT_FileDetail.InvoiceNumber != '')
                {
                    this.rec_RemittenceDetail(invSKS_EFT_FileDetail);
                }
            }
            next mSKS_EFT_FileDetail;
        }

        this.rec_FileTrailerRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileHeader</Name>
				<Source><![CDATA[
    private boolean rec_FileHeader()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append(this.wrapField('FILHDR'));

        // 2 File Destination
        sb.Append(this.wrapField(subStr('PWS',1,10)));

        // 3 Customer ID
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.FileACHCompanyId,1,32)));

        // 4 Transaction Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::Slash)));

        // 5 Transaction time
        sb.Append(this.wrapField(SKS_PP_StringFormats::strTimeHHMM(),false));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentHeader</Name>
				<Source><![CDATA[
    private boolean rec_PaymentHeader()
    {
        SKS_EFT_FileDetail eft_fileDetail_paymentAmount;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append(this.wrapField('PMTHDR'));

        // 2 Courier code
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CourierCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,8)));

        // 3 Form code
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('FormCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)),1,8)));

        // 4 Payment date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Slash)));

        // 5 Payment amount
        select sum(InvoiceSettleAmountPmtCur) from eft_fileDetail_paymentAmount
        where eft_fileDetail_paymentAmount.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;

        sb.Append(this.wrapField(subStr(num2str(-1*eft_fileDetail_paymentAmount.InvoiceSettleAmountPmtCur,0,2,1,0),1,17)));

        // 6 Account number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct,1,17)));

        // 7 Check Number
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 1, 10),false));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayeeName</Name>
				<Source><![CDATA[
    private boolean rec_PayeeName()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;
        
        // 1 Record Identifier
        sb.Append(this.wrapField('PAYENM'));

        // 2 Payee name 1 
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 1,35)));

        // 3 Payee name 2
        sb.Append(this.wrapField(''));

        // 4 Vendor number
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.AccountNum, 1, 19),false));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayeeAddress</Name>
				<Source><![CDATA[
    private boolean rec_PayeeAddress()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append(this.wrapField('PYEADD'));

        // 2    Payee Address 1
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 1, 35)));

        // 3    Payee Address 2
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 1, 35)));

        // 4    Phone
        sb.Append(this.wrapField('',false));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_AdditionalPayeeAddress</Name>
				<Source><![CDATA[
    private boolean rec_AdditionalPayeeAddress()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append(this.wrapField('ADDPYE'));

        // Payee address line 3
        sb.Append(this.wrapField(''));

        // Payee address line 4
        sb.Append(this.wrapField('',false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PayeePostalRecord</Name>
				<Source><![CDATA[
    private boolean rec_PayeePostalRecord()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append(this.wrapField('PYEPOS'));

        // 2 Payee city
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity), 1, 35)));

        // 3 Payee state
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState), 1, 35)));

        // 4 Payee ZIP
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal), 1, 10)));

        // 5 Payee country
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId), 1, 3), false));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RemittenceDetail</Name>
				<Source><![CDATA[
    private boolean rec_RemittenceDetail(SKS_EFT_FileDetail  invSKS_EFT_FileDetail)
    {
        AmountMST amt;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        mPaymentCount++;

        // 1 Record Identifier
        sb.Append(this.wrapField('RMTDTL'));

        // 2 Invoice number
        sb.Append(this.wrapField(subStr(invSKS_EFT_FileDetail.InvoiceNumber, 1, 30)));

        // 3 Description
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt), 1, 30)));

        // 4 Invoice Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Slash)));

        // 5 Net amount
        sb.Append(this.wrapField(subStr(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0), 1, 17)));

        // 6 Gross Amount
        amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
        sb.Append(this.wrapField(subStr(num2str(amt,0,2,0,0), 1, 17)));

        // 7 Discount Amount
        amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
        sb.Append(this.wrapField(subStr(num2str(amt,0,2,0,0), 1, 17),false));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FileTrailerRecord</Name>
				<Source><![CDATA[
    private boolean rec_FileTrailerRecord()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        mPaymentCount++;

        // 1 Record Identifier
        sb.Append(this.wrapField('FILTRL'));

        // 2 Number of records
        sb.Append(this.wrapField(SKS_PP_StringFormats::strFill(6, subStr(int642str(mPaymentCount), 1, 6), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left),false));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _Delimit = true)
    {
        if(strContains(_field, ','))
        {
            _field = #Pipe+_field+#Pipe;
        }

        if(_Delimit)
        {
            return _field + #Delimiter;
        }
        else
        {
            return _field;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>