<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_MX_BANAMEX_TEF_05</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_MX_BANAMEX_TEF_05 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_MX_BANAMEX_TEF_05 extends SKS_EFT_Format
{
    #define.FormatVersion('20220530')
    SKS_EFT_SequenceNumber mSequenceNumber;

    int mCRecordCount;
    int mDRecordCount;

    AmountMST mCreditAmount;
    AmountMST mDebitAmount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        //Get sequence number
        this.getSequence();

        //Set Sequence
        this.incrementSequenceNumber();

        this.rec_Control();

        while(mSKS_EFT_FileDetail)
        {
            this.rec_Global();

            this.rec_Individual();

            next mSKS_EFT_FileDetail;
        }

        this.rec_Total();

        //Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 99 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;

        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;

        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Control</Name>
				<Source><![CDATA[
    public boolean rec_Control()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1    Type of record                              (        1)       1
        sb.Append('1');

        // 2    Client identification number                (   02- 13)       12
        sb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.FileACHCompanyId, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 3    Payment date                                (  14-  19)       6
        sb.Append(SKS_PP_StringFormats::strDateMMDDYY(mSKS_EFT_File.EffectiveDate));

        // 4    Sequential of the file                      (  20-  23)       4
        sb.Append(SKS_PP_StringFormats::strFill(4, num2str(mSequenceNumber, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    Name of the company                         (  24-  59)       36
        sb.Append(SKS_PP_StringFormats::strFill(36, mSKS_EFT_FileDetail.FileACHCompanyName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Description of the file                     (  60-  79)       20
        msks_EFT_FileDetail_PaymentLine = SKS_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

        sb.Append(SKS_PP_StringFormats::strFill(20, msks_EFT_FileDetail_PaymentLine.TransactionTxt, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 7    Nature of the file                          (  80-  81)       2
        sb.Append('05');

        // 8    Instructions for payment orders             (  82- 121)       40
        sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Layout version                             (   122- 122)       1
        sb.Append('C');

        // 10   Volume                                     (   123- 123)       1
        sb.Append('0');

        // 11   Characteristics of the file                (   124- 124)       1
        sb.Append('0');

        // 12   Status of the file                         (   125- 126)       2
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 13    Type of record                             (   127-138)       12
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Global</Name>
				<Source><![CDATA[
    public boolean rec_Global()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1    Type of record                              (        1)       1
        sb.Append('2');

        // 2    Operation code                              (   02- 02)       1
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append('0');
            mCRecordCount++;

            mCreditAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        }
        else
        {
            sb.Append('1');

            mDRecordCount++;

            mDebitAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        }

        // 3    Currency code                              (  03-  05)       3
        sb.Append('001');

        // 4    Amount                                     (  06-  23)       18
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 18));

        // 5    Type of account                            ( 24-   25)       2
        sb.Append('01');

        // 6    Branch number                              ( 26-   29)       4
        sb.Append(SKS_PP_StringFormats::strFill(4, SKS_EFT_Format::getCodelookupvalue('BranchNum', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Account number                              ( 30-  49)       20
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Blank                                       ( 50-  69)       20
        sb.Append(SKS_PP_StringFormats::strFill(20, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Refund Amount                               ( 70-  87)       18
        sb.Append(SKS_PP_StringFormats::strFill(18, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Individual</Name>
				<Source><![CDATA[
    public boolean rec_Individual()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1    Type of record                              (        1)       1
        sb.Append('3');

        // 2    Operation code                              (   02- 02)       1
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append('0');
        }
        else
        {
            sb.Append('1');
        }

        // 3    Currency code                              (   03- 05)       3
        sb.Append('001');

        // 4    Amount                                     (   06- 23)       18
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 18));

        // 5    Type of account                            (   24- 25)       2
        sb.Append('01');

        // 6    Account number                             (   26- 45)       20
        sb.Append(SKS_PP_StringFormats::strFill(20, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Reference of the operation                 (   45- 85)       40
        sb.Append(SKS_PP_StringFormats::strFill(10, SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 10), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        sb.Append(SKS_PP_StringFormats::strFill(30, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Payee                                      (  86- 140)       55
        sb.Append(SKS_PP_StringFormats::strFill(55, mSKS_EFT_FileDetail_VendAddress.BeneName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Instructions                               ( 141- 180)       40
        sb.Append(SKS_PP_StringFormats::strFill(40, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 10   Description                                ( 181- 204)       24
        sb.Append(SKS_PP_StringFormats::strFill(24, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 11   Bank Code                                  ( 205- 208)       4
        sb.Append(SKS_PP_StringFormats::strFill(4, mSKS_EFT_FileDetail_BenBank.BenBankBranch, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 12   Low Value reference                        ( 209- 215)       7
        sb.Append(SKS_PP_StringFormats::strFill(7, SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 7), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 13   Term                                       ( 216- 217)       2
        sb.Append('00');

        // 14   Authorization number                       ( 218- 229)       12
        sb.Append(SKS_PP_StringFormats::strFill(12, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 15   Status                                     ( 230- 230)       1
        sb.Append(' ');

        // 16   Error originated                           ( 231- 234)       4
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 17   Error number                               ( 235- 238)       4
        sb.Append(SKS_PP_StringFormats::strFill(4, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 18   Error message                              ( 239- 269)       31
        sb.Append(SKS_PP_StringFormats::strFill(31, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Total</Name>
				<Source><![CDATA[
    public boolean rec_Total()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        // 1    Type of record                              (        1)       1
        sb.Append('4');

        // 2    Currency code                               (  2-   04)       3
        sb.Append('001');

        // 3    Number of credits                           ( 04-   10)       6
        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(mCRecordCount, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    Total amount of credits                     ( 11-   28)       18
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mCreditAmount), 18));

        // 5    Number of debits                            ( 29-   34)       6
        sb.Append(SKS_PP_StringFormats::strFill(6, num2str(mDRecordCount, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Total amount of debits                      ( 35-   52)       18
        sb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mDebitAmount), 18));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()//SKS_VSTS_13691
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
                order by mSKS_EFT_FileDetail.RecordSection,
                        mSKS_EFT_FileDetail.PaymMode,
                        mSKS_EFT_FileDetail.PaymSpec,
                        mSKS_EFT_FileDetail.EffectiveDate,
                        mSKS_EFT_FileDetail.DepCountryRegionId,
                        mSKS_EFT_FileDetail.RecordType,
                        mSKS_EFT_FileDetail.BankAccountId,
                        mSKS_EFT_FileDetail.AccountNum,
                        mSKS_EFT_FileDetail.PaymentReference,
                        mSKS_EFT_FileDetail.RecId
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_BankAccount
                where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                    mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                    mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                    mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
                    mSKS_EFT_FileDetail_BenBank.RefRecId == mSKS_EFT_FileDetail.RecId &&
                    mSKS_EFT_FileDetail_BankAccount.RefRecId == mSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>