<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_PNCBANK_350</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_PNCBANK_350 extends SKS_PP_Format_BankGroup
{
    int         mCheckRecords;
    int         mTotalRecords;
    AmountMST   mCheckAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtGroupHeader</Name>
				<Source><![CDATA[
    // Pos 01-03    3        Record Identifier '010'
    // Pos 04-18    15       Sender Identification Number
    // Pos 19-21    3        Business Application Format
    // Pos 22-37    16       Customer Name
    // Pos 38-45    8        Transmission Date
    // Pos 46-49    4        Transmission Time
    // Pos 50-59    10       Client File ID
    // Pos 60-350   291      Space Filler
    protected str txtGroupHeader()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        SKS_PP_Bank bSKS_PP_Bank_1;
        Container company;

        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company PP01, PP02, PP03 from bSKS_PP_Bank_1 where bSKS_PP_Bank_1.BankAccountId == mSKS_PP_FileDetail.ChkBankAcct;

        mTotalRecords++;

        sb.Append('010');
        sb.Append(SKS_PP_StringFormats::strFill(15, bSKS_PP_Bank_1.PP02, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(3, bSKS_PP_Bank_1.PP03, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(16, bSKS_PP_Bank_1.PP01, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        sb.Append(SKS_PP_StringFormats::strTimeHHMM());
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(291,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtGroupTrailer</Name>
				<Source><![CDATA[
    // Pos 01-03    3        Record Identifier '090'
    // Pos 04-16    13       Total Dollar amount of Checks
    // Pos 17-23    7        Total Records, Checks
    // Pos 24-36    13       Total Dollar amount of ACHs
    // Pos 37-43    7        Total Records, ACHs
    // Pos 44-56    13       Total Dollar amount of Wires
    // Pos 57-63    7        Total Records, Wire
    // Pos 64-76    13       Total Dollar amount of Cards
    // Pos 77-83    7        Total Records, Cards
    // Pos 84-96    13       Total Payment Dollar Amounts
    // Pos 97-103   7        Total Payment Records
    // Pos 104-116  13       Total File Dollar Amounts
    // Pos 117-123  7        Total File Records
    // Pos 124-350  227      Filler Spaces
    protected str txtGroupTrailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        mTotalRecords++;

        sb.Append('090');
        sb.Append(SKS_PP_StringFormats::strMoney(mCheckAmount, 13));
        sb.Append(SKS_PP_StringFormats::strFill(7, int2str(mCheckRecords),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(13, '',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(7, '',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(13, '',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(7, '',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(13, '',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(7, '',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mCheckAmount, 13));
        sb.Append(SKS_PP_StringFormats::strFill(7, int2str(mCheckRecords),SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strMoney(mCheckAmount, 13));
        sb.Append(SKS_PP_StringFormats::strFill(7, int2str(mTotalRecords), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(227, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        mCheckAmount = 0;
        mCheckRecords = 0;
        mTotalRecords = 0;

        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Pos 01-03    1        Record Identifier '060'
    // Pos 04-06    3        Payment Type 'CHK'
    // Pos 07-07    7        Check Instruction
    // Pos 08-17    10       Vendor Number
    // Pos 18-19    2        Mail Instruction
    // Pos 20-21    2        Bulk Mail Address Code
    // Pos 22-24    3        Currency Type
    // Pos 25-34    10       Check Serial Number
    // Pos 35-42    8        Effective Date of Check
    // Pos 43-55    13       Payment Amount
    // Pos 56-90    35       Payee Name 1
    // Pos 91-125   35       Payee Name 2
    // Pos 126-160  35       Payee Address 1
    // Pos 161-195  35       Payee Address 2
    // Pos 196-230  35       Payee Address 3
    // Pos 231-257  27       Payee City
    // Pos 258-259  2        Payee State
    // Pos 260-268  9        Payee Zip Code
    // Pos 269-269  1        Space Filler
    // Pos 270-272  3        Payee Country
    // Pos 273-277  5        Number of Remittance Lines
    // Pos 278-287  10       Space Filler
    // Pos 288-337  50       Payment data
    // Pos 338-350  13       Space Filler
    protected str txtDetail()
    {
        //BP Deviation Documented
        BankAccountTable gBankAccountTable;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        int mult = 1;
        str itemType;
        Container company;

        if(mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            itemType = 'V';
            if(mSKS_PP_FileDetail.ChkCuryAmt < 0)
            {
                mult = -1;
            }
        }
        else
        {
            itemType = 'I';
        }

        mCheckRecords++;

        company = [mSKS_PP_FileDetail.ChkCpnyId];
        select firstonly crossCompany:company CurrencyCode from gBankAccountTable where gBankAccountTable.AccountID == mSKS_PP_FileDetail.ChkBankAcct;
        mCheckAmount = mCheckAmount + mSKS_PP_FileDetail.ChkCuryAmt;
        
        mTotalRecords++;

        sb.Append('060');
        sb.Append('CHK');
        sb.Append(itemType);
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.VendorAccount, SKS_PP_FillCharacter::Space, SKS_PP_Fillside::Right));
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(3, gBankAccountTable.CurrencyCode, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(10, mSKS_PP_FileDetail.ChkRefNbr, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_PP_FileDetail.ChkDocDate));
        sb.Append(SKS_PP_StringFormats::strMoney(mult * mSKS_PP_FileDetail.ChkCuryAmt, 13));
        sb.Append(SKS_PP_StringFormats::strFill(70, mSKS_PP_FileDetail.VendName, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(27, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(' ');
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(5, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(10, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(50, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(13, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>