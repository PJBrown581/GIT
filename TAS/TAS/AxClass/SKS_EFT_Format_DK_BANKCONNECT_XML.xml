<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_DK_BANKCONNECT_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_DK_BANKCONNECT_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
/// </summary>
class SKS_EFT_Format_DK_BANKCONNECT_XML extends SKS_EFT_Format_ISO_20022_001001003_FD
{
    #define.FormatVersion('20220713')
    #define.PTDA_NORM('PTDA-NORM')
    #define.PTDA_SDAY('PTDA-SDAY')
    #define.PTDA_URGP('PTDA-URGP')
    #define.DIP_FI_71('DIP-FI-71')
    #define.DIP_FI_73('DIP-FI-73')
    #define.DIP_FI_75('DIP-FI-75')
    #define.DSALARY('DSALARY')
    #define.SEPA('SEPA')
    #define.FAT_ORD('FAT-ORD')
    #define.FAT_EXP('FAT-EXP')
    #define.FIN_NBT('FIN-NBT')
    #define.EAP_CPR('EAP-CPR')
    #define.EAP_CVR('EAP-CVR')
    #define.EAP_CVR_P('EAP-CVR-P')
    #define.EAP_CVR_SE('EAP-CVR-SE')
    #define.EAP_SE('EAP-SE')
    #define.GIRO04('GIRO-04')
    #define.GIRO01('GIRO-01')
    #define.GIRO15('GIRO-15')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_GrpHdr_InitgPty_Id</Name>
				<Source><![CDATA[
    protected void node_GrpHdr_InitgPty_Id(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          9.1.12: Id
        //              9.1.13: OrgId
        //                  9.1.15: Othr
        //                      9.1.1.16: Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOther;
        XmlElement nodeSchmeNm;
        str initiatingPartyId;

        this.getSKS_EFT_FileFormatPaymSpec();
        initiatingPartyId = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InitiatingPartyId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));

        if(initiatingPartyId)
        {
            //          9.1.12: Id
            nodeId = _nodeInitgPty.appendChild(xmlDoc.createElement('Id'));
            
            //              9.1.13: OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
            
            //                  9.1.15: Other
            nodeOther = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));

            //                      9.1.1.16: Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOther, 'Id', initiatingPartyId, 35);
            
            //                          9.1.17 : SchmeNm
            nodeSchmeNm = nodeOther.appendChild(xmlDoc.createElement('SchmeNm'));

            //                          9.1.18 : Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'CUST');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.6: PmtTpInf
        //          2.7: InstrPrty
        //          2.8: SvcLvl
        //          2.11: LclInstrm
        //          2.14: CtgyPurp
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePmftTpInf;
        boolean printSvcLvl = true;
    
        //      2.6: PmtTpInf
        nodePmftTpInf = _nodePmtInf.appendChild(xmlDoc.createElement('PmtTpInf'));
    
        //          2.7: InstrPrty
        this.node_PmtInf_PmtTpInf_InstrPrty(nodePmftTpInf);
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DIP_FI_71:
            case #DIP_FI_73:
            case #DIP_FI_75:
            case #FAT_ORD:
            case #GIRO04:
                printSvcLvl = false;
                break;
        }
        if(printSvcLvl)
        {
            //          2.8: SvcLvl
            this.node_PmtInf_PmtTpInf_SvcLvl(nodePmftTpInf);
        }
    
        //          2.11: LclInstrm
        this.node_PmtInf_PmtTpInf_LclInstrm(nodePmftTpInf);
    
        //          2.14: CtgyPurp
        this.node_PmtInf_PmtTpInf_CtgyPurp(nodePmftTpInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_SvcLvl_Cd</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_SvcLvl_Cd(XmlElement _nodeSvcLvl)
    {
        //------------------------------------------------------------------------------------------------------
        //              2.9: Cd
        //------------------------------------------------------------------------------------------------------
        str value;
                   
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #PTDA_NORM:
            case #PTDA_SDAY:
            case #DSALARY:
            case #EAP_CPR:
            case #EAP_CVR:
            case #EAP_CVR_P:
            case #EAP_CVR_SE:
            case #EAP_SE:
            case #GIRO01:
            case #GIRO15:
                value = 'NURG';
                break;
            case #SEPA:
                value = 'SEPA';
                break;
            case #FAT_EXP:
            case #FIN_NBT:
                value = 'URGP';
                break;
            case #PTDA_URGP:
                value = 'URNS';
                break;
        }
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeSvcLvl, 'Cd', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_LclInstrm</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_LclInstrm(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.11: LclInstrm
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeLclInstrm;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #PTDA_NORM:
            case #DSALARY:
            case #EAP_CPR:
            case #EAP_CVR:
            case #EAP_CVR_P:
            case #EAP_CVR_SE:
            case #EAP_SE:
            case #GIRO01:
            case #GIRO15:
                value = 'ONCL';
                break;
            case #PTDA_SDAY:
                value ='SDCL';
                break;
            case #SEPA:
            case #FAT_ORD:
            case #FAT_EXP:
            case #FIN_NBT:
                value ='IN';
                break;
        }
        if(value)
        {
            //          2.11: LclInstrm
            nodeLclInstrm = _nodePmftTpInf.appendChild(xmlDoc.createElement('LclInstrm'));
    
            //              Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeLclInstrm, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_InstrPrty</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_InstrPrty(XmlElement _nodePmftTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.7: InstrPrty
        //------------------------------------------------------------------------------------------------------

        //          InstrPrty
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodePmftTpInf, 'InstrPrty', 'NORM');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Dbtr_Id</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Dbtr_Id(XmlElement _nodeDbtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Dbtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
    
        if(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId != '')
        {
            //          Id
            nodeId = _nodeDbtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: DbtrAcct
        //          Id
        //              IBAN
        //              Othr
        //          Ccy
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDbtrAcct;
        XmlElement nodeDbtrAcctId;
    
        if(mSKS_EFT_FileDetail.BankBankIBAN || mSKS_EFT_FileDetail.BankBankAcct)
        {
            //      2.20: DbtrAcct
            nodeDbtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('DbtrAcct'));
    
            //          Id
            nodeDbtrAcctId = nodeDbtrAcct.appendChild(xmlDoc.createElement('Id'));
    
            if(mSKS_EFT_FileDetail.BankBankIBAN)
            {
                //              IBAN
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcctId, 'IBAN', mSKS_EFT_FileDetail.BankBankIBAN);
            }
            else
            {
                //              Othr
                this.node_PmtInf_DbtrAcct_Id_Othr(nodeDbtrAcctId);
            }
    
            //              Ccy
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDbtrAcct, 'Ccy', mSKS_EFT_FileDetail.CurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_DbtrAcct_Id_Othr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_DbtrAcct_Id_Othr(XmlElement _nodeAcctId)
    {
        //------------------------------------------------------------------------------------------------------
        //              Othr
        //                  Id
        //                  SchmeNm
        //                      Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeOthr;
        XmlElement nodeSchmeNm;
    
        //              Othr
        nodeOthr = _nodeAcctId.appendChild(xmlDoc.createElement('Othr'));
    
        //                  Id
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', mSKS_EFT_FileDetail.BankBankAcct, 14);
    
        //                  SchmeNm
        nodeSchmeNm = nodeOthr.appendChild(xmlDoc.createElement('SchmeNm'));
    
        //                      Cd
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSchmeNm, 'Cd', 'BBAN');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.77: CdtrAgt
        //              FinInstnId
        //                  BIC
        //                  ClrSysMmbId
        //                  PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        str swift, rtg;
    
        swift = mSKS_EFT_FileDetail.DepSwiftNo;
        rtg   = mSKS_EFT_FileDetail.DepBankTransit;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DSALARY:
                rtg = '';
                break;
        }

        if(swift || rtg)
        {
            //          2.77: CdtrAgt
            nodeCdtrAgt = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
            //              FinInstnId
            nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

            if(swift)
            {
                //                  BIC
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', swift, 0, false);
            }
            else if(rtg)
            {
                this.node_CdtTrfTxInf_CdtrAgt_MmbId(nodeFinInstnId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAgt_MmbId</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_CdtrAgt_MmbId
    /// </summary>
    /// <param name = "_nodeFinInstnId">_nodeFinInstnId</param>
    protected void node_CdtTrfTxInf_CdtrAgt_MmbId(XmlElement _nodeFinInstnId)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.77: CdtrAgent
        //          ClrSysMmbId
        //              ClrSysId
        //                  Cd
        //          MmbId
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeClrSysMmbId;
        XmlElement nodeClrSysId;
        str cd;
        
        if(mSKS_EFT_FileDetail.DepBankTransit)
        {
            //          ClrSysMmbId
            nodeClrSysMmbId = _nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            //                  2.59: Cd
            cd = SKS_EFT_Format::getCodelookupvalue('ClrSysIdCd', mSKS_EFT_FileDetail.RecId);

            if(cd)
            {
                //              ClrSysId
                nodeClrSysId = nodeClrSysMmBId.appendChild(xmlDoc.createElement('ClrSysId'));
    
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysId, 'Cd', cd);
            }
            //                  MmbId
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmBId, 'MmbId',mSKS_EFT_FileDetail.DepBankTransit, 0, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_PstlAdr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_Cdtr_PstlAdr(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          PstlAdr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePstlAdr;
    
            
        if((mRemittanceZipCode != '' || mRemittanceCity != '' || mRemittanceCountryRegionId != '' ||  mRemittanceAdrline1 != '' || mRemittanceAdrline2 != '') ||
            mRemittanceState != '')
        {
            //      PstlAdr
            nodePstlAdr = _nodeCdtr.appendChild(xmlDoc.createElement('PstlAdr'));
    
            //          StrtNm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'StrtNm', this.CharacterReplacement(mRemittanceAdrline1), 70, false);
    
            //          BldgNb
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'BldgNb', this.CharacterReplacement(mRemittanceAdrline2), 16, false);
    
            //          PstCd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'PstCd', mRemittanceZipCode, 16, false);
    
            //          TwnNm
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'TwnNm', this.CharacterReplacement(mRemittanceCity), 35, false);
    
            //          Ctry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePstlAdr, 'Ctry', mRemittanceCountryRegionId, 2, false);
        }
            
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_CdtrAcct</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_CdtrAcct(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.80: CdtrAcct
        //              Id
        //                  Othr
        //                  Id
        //              Tp/Ptry
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeCdtrAcctIdOthr;
        XmlElement nodeCdtrSchmeNm;
        VendTable  vendorTable;
        DirPartyTable lDirPartyTable;
        DirOrganization lDirOrganizationl;
        DirOrganizationBase lDirOrganizationBase;
        int length = 0;
        str valuePrtry, iban, acctNum;
        iban = mSKS_EFT_FileDetail.DepBankIBAN;
        acctNum = mSKS_EFT_FileDetail.DepBankAcct;

        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DIP_FI_71:
            case #DIP_FI_73:
            case #DIP_FI_75:
            case #GIRO01:
            case #GIRO04:
            case #GIRO15:
                length = 8;
                valuePrtry = 'OCR';
                break;
            case #EAP_CVR:        //SKS#DevOps:15359
                length = 8;
                iban = '';
                valuePrtry = 'NKV';
                break;                        
            case #EAP_CVR_SE:      //SKS#DevOps:15359
                length = 8;
                iban = '';
                valuePrtry = 'NKR';
                break;
            case #EAP_SE:
                vendorTable = VendTable::findByCompany(mSKS_EFT_VendorPaym.VendCompany, mSKS_EFT_VendorPaym.VendAccount);

                select firstonly RecId from lDirPartyTable where lDirPartyTable.RecId == vendorTable.Party;

                select firstonly RecId from lDirOrganizationBase where lDirOrganizationBase.RecId == lDirPartyTable.RecId;

                select firstonly OrgNumber from lDirOrganizationl where
                lDirOrganizationl.RecID == lDirOrganizationBase.RecId;

                acctNum = lDirOrganizationl.OrgNumber;
                length = 8;
                iban = '';
                valuePrtry = 'NKS';
                break;
            case #EAP_CPR:      //SKS#DevOps:15359
                length = 10;
                iban = '';
                valuePrtry = 'NKC';
                break;                        
            case #EAP_CVR_P:      //SKS#DevOps:15359
                length = 10;
                iban = '';
                valuePrtry = 'NKP';
                break;
            case #PTDA_NORM:
                if(strLen(mSKS_EFT_FileDetail.DepBankTransit) == 4 && strLen(mSKS_EFT_FileDetail.DepBankAcct) == 10)
                {
                    acctNum = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;
                }
                else if(strLen(mSKS_EFT_FileDetail.DepBankAcct) == 14)
                {
                    acctNum = mSKS_EFT_FileDetail.DepBankAcct;
                }
                length = 14;
                break;
            case #PTDA_SDAY:
            case #PTDA_URGP:
                if(strLen(mSKS_EFT_FileDetail.DepBankTransit) == 4 && strLen(mSKS_EFT_FileDetail.DepBankAcct) == 10)
                {
                    acctNum = mSKS_EFT_FileDetail.DepBankTransit + mSKS_EFT_FileDetail.DepBankAcct;
                }
                else if(strLen(mSKS_EFT_FileDetail.DepBankAcct) == 14)
                {
                    acctNum = mSKS_EFT_FileDetail.DepBankAcct;
                }
                break;
        }

        //          2.80: CdtrAcct
        nodeCdtrAcct = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
        //              Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));

        if(iban)
        {
            //                  IBAN
            nodeCdtrAcctId = SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', iban);
        }
        else
        {
            //                  Othr
            nodeCdtrAcctIdOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
          
            //                      Id 
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctIdOthr, 'Id', acctNum, length, false);

            //                      SchmeNm
            nodeCdtrSchmeNm = nodeCdtrAcctIdOthr.appendChild(xmlDoc.createElement('SchmeNm'));

            if(valuePrtry)
            {
                //                          Prtry
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Prtry', valuePrtry);
            }
            else
            {
                //                          Cd
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrSchmeNm, 'Cd', 'BBAN');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_Purp</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_Purp(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.86: Purp
        //              2.88: Prtry
        //------------------------------------------------------------------------------------------------------
        XmlElement nodePurp;
        boolean printPurp = true;
        str value;
        
        value = this.getJournalPaymentNotes();
                
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SEPA:
                printPurp = false;
                break;
        }
        if(printPurp && value)
        {
            //          2.86: Purp
            nodePurp = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('Purp'));
    
            //              2.88: Prtry
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePurp, 'Prtry', value, 35);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalPaymentNotes</Name>
				<Source><![CDATA[
    protected str getJournalPaymentNotes()//SKS_VSTS_13296
    {
        str value = '';
        LedgerJournalTrans lLedgerJournalTrans;
    
        select PaymentNotes from lLedgerJournalTrans where
        lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
        if(lLedgerJournalTrans.PaymentNotes != '')
        {
            value = strReplace(lLedgerJournalTrans.PaymentNotes, '\r', ' ');
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DIP_FI_71:
            case #DIP_FI_73:
            case #DIP_FI_75:
            case #GIRO01:
            case #GIRO04:
            case #GIRO15:
                this.node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf(_nodeCdtTrfTxInf);
                break;
            default:
                this.node_CdtTrfTxInf_RmtInf_Ustrd(_nodeCdtTrfTxInf);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_PmtTpInf_CtgyPurp</Name>
				<Source><![CDATA[
    protected void node_PmtInf_PmtTpInf_CtgyPurp(XmlElement _nodePmtTpInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.14 CtgyPurp
        //             2.15 Cd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCtgyPurp;
        str value;

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DSALARY:
                value = 'SALA';
                break;
            default:
                value = 'SUPP';
                break;
        }
        if(value)
        {
            //          2.14: CtgyPurp
            nodeCtgyPurp = _nodePmtTpInf.appendChild(xmlDoc.createElement('CtgyPurp'));
    
            //              2.15: Cd
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCtgyPurp, 'Cd', value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_ChrgBr</Name>
				<Source><![CDATA[
    protected void node_PmtInf_ChrgBr(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.24 ChrgBr
        //------------------------------------------------------------------------------------------------------
        str value;
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #SEPA:
                value = 'SLEV';
                break;
            default:
                value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('Charges', mSKS_EFT_FileDetail.RecId));
                break;
        }

        //      2.24 ChrgBr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInf, 'ChrgBr', value, 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd_RfrdDocInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_Strd_RfrdDocInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_Strd_RfrdDocInf(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        XmlElement nodeRfrdDocInf;
        boolean firstRec = true;

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                && invSKS_EFT_FileDetail.InvoiceNumber != ''
        {
            if(firstRec)
            {
                //          2.98: RmtInf
                nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                firstRec = false;
            }    

            //              2.100: Strd
            nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
    
            //              2.101: RfrdDocInf
            nodeRfrdDocInf = nodeStrd.appendChild(xmlDoc.createElement('RfrdDocInf'));
    
            //                  2.102: Tp
            nodeTp = nodeRfrdDocInf.appendChild(xmlDoc.createElement('Tp'));
    
            //                      2.103: CdOrPrtry
            nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
            //              2.104: Cd
            if(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur <= 0)
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Prtry', 'CINV');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Prtry', 'CREN');
            }
            //               2.126: Nb
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRfrdDocInf, 'Nb', invSKS_EFT_FileDetail.InvoiceNumber, 0, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_RmtInf_Strd_CdtrRefInf(XmlElement _nodeCdtTrfTxInf)
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        XmlElement nodeRmtInf;
        XmlElement nodeStrd;
        XmlElement nodeTp;
        XmlElement nodeCdOrPrtry;
        XmlElement nodeCdtrRefInf;
        boolean firstRec = true;
        str fik;

        while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
        {
            if(invSKS_EFT_FileDetail.PaymId)
            {
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #DIP_FI_71:
                        fik = '71/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                        break;
                    case #DIP_FI_73:
                        fik = '73/';
                        break;
                    case #GIRO01:
                        fik = '01/';
                        break;
                    case #GIRO04:
                        fik = '04/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                        break;
                    case #GIRO15:
                        fik = '15/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                        break;
                    case #DIP_FI_75:
                        fik = '75/' + subStr(invSKS_EFT_FileDetail.PaymId, 1, 16);
                        break;
                } 
                if(firstRec)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                    firstRec = false;
                }
                if(fik)
                {
                    //              2.100: Strd
                    nodeStrd = nodeRmtInf.appendChild(xmlDoc.createElement('Strd'));
    
                    //          2.120: CdtrRefInf
                    nodeCdtrRefInf = nodeStrd.appendChild(xmlDoc.createElement('CdtrRefInf'));
    
                    //              2.121: Tp
                    nodeTp = nodeCdtrRefInf.appendChild(xmlDoc.createElement('Tp'));
    
                    //                  2.122: CdOrPrtry
                    nodeCdOrPrtry = nodeTp.appendChild(xmlDoc.createElement('CdOrPrtry'));
    
                    //                      2.123: Cd
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdOrPrtry, 'Cd', 'SCOR');
    
                    //               2.126: Ref
                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrRefInf, 'Ref', fik, 0, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_RmtInf_Ustrd</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf_RmtInf_Ustrd(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.98: RmtInf
        //              2.99: Ustrd
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeRmtInf;
        str invNumbers;
        int i;
        boolean firstRec = true;

        invNumbers = this.getInvoiceNbrs();
        
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #FAT_ORD:
            case #FAT_EXP:
            case #FIN_NBT:
            case #SEPA://DevOps19646
                if(invNumbers)
                {
                    for(i =0; i <= strLen(invNumbers); i+= 35)
                    {
                        if(firstRec)
                        {
                            //          2.98: RmtInf
                            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                            firstRec = false;
                        }
                        if(i >= 140)            //SKS#DevOps:16951
                        {
                            break;
                        }
                        // 2.99: Ustrd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', substr(invNumbers, i+1, 35),35,false);//SKS_VSTS_13290
                    }
                }
                break;
            case #PTDA_NORM:
            case #PTDA_SDAY:
            case #PTDA_URGP:
                if(mModule == SKS_EFT_Module::BTB)
                {
                    msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);

                    if(msks_EFT_FileDetail_PaymentLine.TransactionTxt)
                    {
                        invNumbers = msks_EFT_FileDetail_PaymentLine.TransactionTxt;
                    }
                    else
                    {
                        invNumbers = mSKS_EFT_FileDetail.BankBankIBAN;
                    }
                }

                if(invNumbers)
                {
                    for(i =0; i <= strLen(invNumbers); i+= 35)
                    {
                        if(firstRec)
                        {
                            //          2.98: RmtInf
                            nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));
                            firstRec = false;
                        }
                        if(i >= 140)            //SKS#DevOps:16951
                        {
                            break;
                        }
                        // 2.99: Ustrd
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', substr(invNumbers, i+1, 35),35,false);//SKS_VSTS_13290
                    }
                }
                break;
            default:
                if(invNumbers)
                {
                    //          2.98: RmtInf
                    nodeRmtInf = _nodeCdtTrfTxInf.appendChild(xmlDoc.createElement('RmtInf'));

                    SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRmtInf, 'Ustrd', invNumbers, 140);		//SKS#DevOps:16951
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf</Name>
				<Source><![CDATA[
    protected void node_CdtTrfTxInf()
    {
        //------------------------------------------------------------------------------------------------------
        //      2.27: CdtTrfTxInf
        //          2.28: PmtId
        //          2.31: PmtTpInf
        //          2.42: Amt
        //          2.51: ChrgBr
        //          2.52: ChqInstr
        //          2.77: CdtrAgt
        //          2.79: Cdtr
        //          2.80: CdtrAcct
        //          2.98: RmtInf
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtTrfTxInf;
    
        //      2.27: CdtTrfTxInf
        nodeCdtTrfTxInf = nodePmtInf.appendChild(xmlDoc.createElement('CdtTrfTxInf'));
    
        //          2.28: PmtId
        this.node_CdtTrfTxInf_PmtId(nodeCdtTrfTxInf);
    
        //          2.31 PmtTpInf
        this.node_CdtTrfTxInf_PmtTpInf(nodeCdtTrfTxInf);
    
        //          2.42: Amt
        this.node_CdtTrfTxInf_Amt(nodeCdtTrfTxInf);
    
        //          2.51: ChrgBr
        this.node_CdtTrfTxInf_ChrgBr(nodeCdtTrfTxInf);
    
        //          2.52 ChqInstr
        if(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber == NoYes::Yes || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK')
        {
            this.node_CdtTrfTxInf_ChqInstr(nodeCdtTrfTxInf);
        }
    
        //          2.71: IntrmyAgt1
        this.node_CdtTrfTxInf_IntrmyAgt1(nodeCdtTrfTxInf);
    
        //          2.77: CdtrAgt
        this.node_CdtTrfTxInf_CdtrAgt(nodeCdtTrfTxInf);
    
        //          2.79: Cdtr
        this.node_CdtTrfTxInf_Cdtr(nodeCdtTrfTxInf);
    
        //          2.80: CdtrAcct
        this.node_CdtTrfTxInf_CdtrAcct(nodeCdtTrfTxInf);
    
        //          2.82: InstrForCdtrAgt
        this.node_CdtTrfTxInf_InstrForCdtrAgt(nodeCdtTrfTxInf);

        //          2.85: InstrForDbtrAgt
        this.node_CdtTrfTxInf_InstrForDbtrAgt(nodeCdtTrfTxInf);
    
        //          2.86: Purp
        this.node_CdtTrfTxInf_Purp(nodeCdtTrfTxInf);
    
        //          2.89: RgltryRptg
        this.node_CdtTrfTxInf_RgltryRptg(nodeCdtTrfTxInf);
    
        //          2.91: RltdRmtInf
        this.node_CdtTrfTxInf_RltdRmtInf(nodeCdtTrfTxInf);
    
        //          2.98: RmtInf
        this.node_CdtTrfTxInf_RmtInf(nodeCdtTrfTxInf);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_CdtTrfTxInf_InstrForDbtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_CdtTrfTxInf_InstrForDbtrAgt
    /// </summary>
    /// <param name = "_nodeCdtTrfTxInf">_nodeCdtTrfTxInf</param>
    protected void node_CdtTrfTxInf_InstrForDbtrAgt(XmlElement _nodeCdtTrfTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          2.82: InstrForDbtrAgt
        //------------------------------------------------------------------------------------------------------

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #SEPA)
        {
            //          2.85: InstrForDbtrAgt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'InstrForDbtrAgt', '97');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FAT_ORD ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #FAT_EXP)            //SKS#DevOsp:16968
        {
            //          2.85: InstrForDbtrAgt
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeCdtTrfTxInf, 'InstrForDbtrAgt', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('InstrForDbtrAgt', mSKS_EFT_FileDetail.RecId)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>