<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BNY_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BNY_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BNY_EDI820 extends SKS_EFT_Format
{
    #define.FormatVersion('20221019')
    #define.ACHCTX('ACH-CTX')
    #define.ACHPPD('ACH-PPD')
    #define.WIR_FWT('WIR-FWT')
    #define.WIR_SWT('WIR-SWT')
    #define.CHK('CHK')

    int mTranSetCount;
    int mSegmentCount;
    str mSenderControlNbr;
    str mLineEnd;
    str mSeparator;
    str mBPR_03;
    SKS_EFT_EDI mSKS_EFT_EDI;
    VendBankAccount mVendBankAccount;
    BankAccountTable mBankAccountTable;
    System.Text.StringBuilder sb;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCRLF</Name>
				<Source><![CDATA[
    protected boolean getCRLF()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildString</Name>
				<Source><![CDATA[
    boolean buildString()
    {
        System.Text.StringBuilder msb;
        str record = sb.ToString();
        int pos = 1;
        int length;
        int recMod;
        int lineCount;
        str value;
        int totalCount = 1;
    
        length = strLen(record);
        lineCount = length div 80;
        recMod = length mod 80;
    
        if(recMod > 0)
        {
            lineCount++;
        }
        msb = new System.Text.StringBuilder();
        // Create the compressed records
        while(lineCount >= totalCount)
        {
            
            value = subStr(record, pos, 80);
            pos = pos + 80;
    
            // Pmt Related Info 04-83
            msb.Append(value);
            msb.Append('\n');

            
            totalCount++;
        }
        this.fileWrite(msb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        if(_result != '')
            mFileHub.runAppendLine(strUpr(_result));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    [SuppressBPWarningAttribute("BPCheckNestedLoopinCode","Necessary to allow the processing of every invoice(inner loop) for every relevant parent file detail record(outer loop)")]
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
    
        sb = new System.Text.StringBuilder();
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();       //SKS#DevOps:16230

            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get VendBankAccount
            this.getVendBankAccount();
    
            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);            
    
            // Get Bank account
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_VendorPaym.EDI820Layout, mSKS_EFT_File.RecId);
            
            mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileFormat.NextFileId,0,0,0,0));
            mSeparator = mSKS_EFT_EDI.getDataElementSeparator();
            mLineEnd = mSKS_EFT_EDI.getSegmentTerminator();
    
            if(firstRec)
            {
                firstRec = false;
    
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Detail lines
            this.rec_ST();
            this.rec_BPR();

            this.rec_TRN();

            this.rec_N1PR();
            this.rec_N3PR();
            this.rec_N4PR();

            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #WIR_FWT:
                case #WIR_SWT:
                    this.rec_N1BK();
                    this.rec_N3BK();
                    this.rec_N4BK();
                    break;
            }
        
            this.rec_N1PE(); //N2*PE is called from within this method
            this.rec_N3PE();
            this.rec_N4PE();

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX  ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD  ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
            {
                this.rec_ENT();
            }

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #ACHCTX:
                    case #ACHPPD:
                    case #CHK:
                        this.rec_RMRIV(invSKS_EFT_FileDetail);
                        this.rec_DTM(invSKS_EFT_FileDetail);
                        break;
                }
            }
    
            this.rec_SE();
    
            mSegmentCount = 0;
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE();
        this.rec_IEA();
        this.buildString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendBankAccount</Name>
				<Source><![CDATA[
    void getVendBankAccount()
    {
        // Load or refresh global mVendBankAccount
    
        if(mVendBankAccount.AccountID != mSKS_EFT_FileDetail.DepBankAccountId || mVendBankAccount.VendAccount != mSKS_EFT_FileDetail.AccountNum)
        {
            mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    boolean rec_BPR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trans. Handling Code                                1       ID
        //02    Monetary Amount                                     10      R
        //03    Credit/Debit Flag Code                              1       ID
        //04    Payment Method Code                                 3       ID
        //05    Payment Format                                      3       ID
        //06    DFI ID No. Qualifier                                2       ID
        //07    DFI ID Number                                       9       AN
        //08    Acct. No. Qual. Code                                2       ID
        //09    Account Number                                      12      AN
        //10    Orig. Co. ID                                        10      AN
        //11    Orig. Co. Code                                      9       AN
        //12    RDFI ID No. Qualifier                               2       ID
        //13    RDFI ID Number                                      9       N
        //14    Acct. No. Qual Code                                 2       ID
        //15    Account Number                                      35      AN
        //16    Effective Entry Date                                8       DT
        //17    Business Function Code                              3       AN
        //18    Intermediary DFI ID Number Qualifier                2       ID
        //19    Intermediary DFI ID Number                          12      AN
        //20    Intermediary Account # Qualifier                    3       ID
        //21    Intermediary Bank Account number                    35      AN
        //--------------------------------------------------------------------------------------------------   
        AmountMST amt;
        str value;
        ;
        mSegmentCount++;
    
        sb.Append('BPR');
        sb.Append(mSeparator);
    
        //01    Trans. Handling Code
        if(mSKS_EFT_FileDetail.RecordType == SKS_EFT_RecordType::PreNote)
        {
            sb.Append('P');
        }
        else
        {
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #WIR_FWT:
                case #WIR_SWT:
                    sb.Append('D');
                    break;
                case #ACHCTX:
                case #ACHPPD:
                case #CHK:
                    sb.Append(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TransHandlngCode', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)));
                    break;
            }
        }
        sb.Append(mSeparator);
    
        //02    Monetary Amount
        amt = this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur);
        sb.Append(num2str((amt),0,2,0,0));
        sb.Append(mSeparator);
    
        //03    Credit/Debit Flag Code  
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
        }
        else
        {
            mBPR_03 = 'C';
        }
        sb.Append(mBPR_03);
        sb.Append(mSeparator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIR_FWT:
                sb.Append('FWT');
                break;
            case #WIR_SWT:
                sb.Append('SWT');
                break;
            case #ACHCTX:
            case #ACHPPD:
                sb.Append('ACH');
                break;
            case #CHK:
                sb.Append('CHK');
                break;
        }
        sb.Append(mSeparator);
    
        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCTX:
                sb.Append('CTX');
                break;
            case #ACHPPD:
                sb.Append('PPD');
                break;
            case #CHK:
                sb.Append('PBC');
                break;
        }
        sb.Append(mSeparator);
    
        //06    DFI ID No. Qualifier
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIR_SWT:
                value = '02';
                break;
            default:
                value = '01';
                break;
        }
        if(value)
        {
            sb.Append(value);
        }
        sb.Append(mSeparator);
    
        //07    DFI ID Number
        if(value == '01')
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_FWT)
            {
                sb.Append(subStr(mSKS_EFT_FileDetail.BankBankTransit, 1, 9));
            }
            else
            {
                sb.Append(subStr(mSKS_EFT_FileDetail.BankBankTransit, 1, 12));
            }
        }
        else if(value == '02')
        {
            sb.Append(subStr(mBankAccountTable.SWIFTNo, 1, 9));
        }
        sb.Append(mSeparator);
    
        //08    Acct. No. Qual. Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            if(mSKS_EFT_FileDetail.BankAcctType == BankAccountType::SavingsAccount)
            {
                sb.Append('SG');
            }
            else
            {
                sb.Append('DA');
            }
        }
        sb.Append(mSeparator);
    
        //09    Account Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK      ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_FWT  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_SWT)
        {
            sb.Append(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 35));
        }
        sb.Append(mSeparator);
    
        //10    Orig. Co. ID
        sb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId,1,10));
        sb.Append(mSeparator);
    
        //11    Orig. Co. Code
        sb.Append(mSeparator);
    
        //12    RDFI ID No. Qualifier
        //13    RDFI ID Number
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #WIR_SWT:
                if(mSKS_EFT_FileDetail.DepSWIFTNo)
                {
                    sb.Append('02');
                    sb.Append(mSeparator);
                    sb.Append(mSKS_EFT_FileDetail.DepSWIFTNo);
                }
                break;
            default:
                if(mSKS_EFT_FileDetail.DepBankTransit)
                {
                    sb.Append('01');
                    sb.Append(mSeparator);
                    sb.Append(mSKS_EFT_FileDetail.DepBankTransit);
                }
                else
                {
                    sb.Append('');
                    sb.Append(mSeparator);
                    sb.Append('');
                }
                break;
        }
        sb.Append(mSeparator);
    
        //14    Acct. No. Qual Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_FWT  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_SWT  ||
           (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK     && 
            mSKS_EFT_FileDetail.DepBankAcct))
        {            
            if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
            {
                sb.Append('SG');
            }
            else
            {
                sb.Append('DA');
            }
        }
        sb.Append(mSeparator);

        //15    Account Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHPPD   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK      ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_FWT  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_SWT)
        {
            sb.Append(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35));
        }        
        sb.Append(mSeparator);
    
        //16    Effective Entry Date
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate));
        
        sb.Append(mLineEnd);               
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    boolean rec_GE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Transaction Sets Included                 6       N
        //2     Group Control Number                                9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setTranSetCount(mTranSetCount);
        value = mSKS_EFT_EDI.buildGE();
    
        sb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    boolean rec_GS()
    {
        //-------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Functional ID Code                                  2       AN
        //2     Application Sender's Code                           15      AN
        //3     Application Receiver's Code                         15      AN
        //4     Date                                                8       D
        //5     Time                                                8       T
        //6     Group Control Number                                9       AN
        //7     Responsible Agency Code                             2       AN
        //8     Version/Release ID Code                             12      AN
        //-------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildGS();
    
        sb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    boolean rec_IEA()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Functional Group                 5       N
        //2     Interchange Control Number                          9       AN
        //--------------------------------------------------------------------------------------------------
        str value;
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA();
    
        sb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    boolean rec_ISA()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Authorization Information Qualifier                 2       AN      00
        //02    Authorization Information                           10      AN      Blank fill
        //03    Security Information Qualifier                      2       AN      00
        //04    Security Information                                10      AN      Blank fill
        //05    Interchange ID Qualifier                            2       AN      ZZ
        //06    Interchange Sender ID                               15      AN      Fed Tax Id
        //07    Interchange ID Qualifier                            2       AN      ZZ
        //08    Interchange Receiver ID                             15      AN      ABA Bank
        //09    Interchange Date                                    6       D       YYMMDD
        //10    Interchange Time                                    4       T       HHMM
        //11    Interchange Control Standards Identifier            1       AN      U
        //12    Interchange Control Version Number                  5       AN      00200
        //13    Interchange Control Number                          9       N       Control number (Zero padded)
        //14    Acknowledgement Requested                           1       N       0
        //15    Test Indicator                                      1       AN      P
        //16    Subelement Separator                                1       AN      ~
        //------------------------------------------------------------------------------------------------------
        str value;
    
        value = mSKS_EFT_EDI.buildISA();
    
        sb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    boolean rec_N1PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Payee Name (Line 1) Domestic and Foreign
        //03    Identification Code Qualifier                       2       ID
        //04    Identification Code                                 80      AN      Vendor number
        //--------------------------------------------------------------------------------------------------     
        str Name;
        str nameOverflow;
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(mSeparator);
    
        //01     Entity ID Code
        //02     Name
        if(mRemittanceName != '')
        {
            Name = mRemittanceName;
        }
        else
        {
            Name = this.CharacterReplacement(mSKS_EFT_FileDetail.AccountName);
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_FWT  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_SWT)
        {
            sb.Append('BE');
            sb.Append(mSeparator);
            sb.Append(substr(Name,1,34));
            NameOverflow = subStr(Name,35,34);
        }
        else
        {
            sb.Append('PE');
            sb.Append(mSeparator);
            sb.Append(substr(Name,1,60));
            nameOverflow = subStr(Name,61,60);
        }
    
        sb.Append(mLineEnd);                
        if(nameOverflow != '')
        {
            this.rec_N2PE(nameOverflow);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    boolean rec_N1PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                35      AN      Payer Name
        //--------------------------------------------------------------------------------------------------
        int length;
        mSegmentCount++;
    
        sb.Append('N1');
        sb.Append(mSeparator);
    
        //01     Entity ID Code
        sb.Append('PR');
        sb.Append(mSeparator);
    
        //02     Name
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            Case #WIR_FWT:
            Case #WIR_SWT:
                length = 34;
                break;
            default:
                length = 60;
                break;
        }
        sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName),1,length));
    
        sb.Append(mLineEnd);                                
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1BK</Name>
				<Source><![CDATA[
    boolean rec_N1BK()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Entity ID Code                                      3       ID
        //02    Name                                                60      AN      Receiving Bank Name
        //--------------------------------------------------------------------------------------------------
        if(mSKS_EFT_VendorPaym.WBenBankName!= '')
        {
            sb.Append('N1');
            sb.Append(mSeparator);
    
            //01     Entity ID Code
            sb.Append('BK');
            sb.Append(mSeparator);
    
            //02     Name
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),1,34));
            sb.Append(mLineEnd);
            mSegmentCount++;
        }               
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N2PE</Name>
				<Source><![CDATA[
    boolean rec_N2PE(str _NameOverflow)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Name 2                                              60      AN      Additional name
        //02    Name                                                60      AN      Not used
        //--------------------------------------------------------------------------------------------------
    
        sb.Append('N2');
        sb.Append(mSeparator);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_FWT  ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIR_SWT)
        {
            sb.Append('BE');
        }
        else
        {
            sb.Append('PE');
        }
        sb.Append(mSeparator);
    
        //01    Name 2
        sb.Append(_NameOverflow);
    
        sb.Append(mLineEnd);
    
        mSegmentCount++;            
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    boolean rec_N3PE()
    {
        //---------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payee Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payee Address (Line 2) Domestic and Foreign
        //---------------------------------------------------------------------------------------------------------------------
        int length;
        
        if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '')
        {

            sb.Append('N3');
            sb.Append(mSeparator);
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #WIR_FWT:
                Case #WIR_SWT:
                    length = 34;
                    break;
                default:
                    length = 55;
                    break;
            }
    
            //01    Address Information
            sb.Append(substr(mRemittanceAdrLine1,1,length));
    
            //02    Address Information
            if(mRemittanceAdrLine2 != '')
            {
                sb.Append(mSeparator);
                sb.Append(substr(mRemittanceAdrLine2,1,length));
            }
    
            sb.Append(mLineEnd);
            mSegmentCount++;
        }           
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PR</Name>
				<Source><![CDATA[
    boolean rec_N3PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address Information                                 35      AN      Payor Address (Line 1) Domestic and Foreign
        //02    Address Information                                 35      AN      Payor Address (Line 2) Domestic and Foreign
        //--------------------------------------------------------------------------------------------------
        int length;
    
        if(mSKS_EFT_Bank.WOrdPartyAddr != '' || mSKS_EFT_Bank.WOrdPartyAddr2 != '')
        {
            sb.Append('N3');
            sb.Append(mSeparator);
    
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                Case #WIR_FWT:
                Case #WIR_SWT:
                    length = 34;
                    break;
                default:
                    length = 55;
                    break;
            }
    
            //01    Address Information
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr),1,length));
    
            //02    Address Information
            if(mSKS_EFT_Bank.WOrdPartyAddr2 != '')
            {
                sb.Append(mSeparator);
                sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr2),1,length));
            }
    
            sb.Append(mLineEnd);
            mSegmentCount++;
        }            
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3BK</Name>
				<Source><![CDATA[
    boolean rec_N3BK()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Address information                                 34      AN      Address - Receiving Bank
        //02    Address information                                 34      AN      Identification code/ Correspondent DFI Identification
        //--------------------------------------------------------------------------------------------------

        if(mSKS_EFT_VendorPaym.WBenBankAddr != '')
        {
            sb.Append('N3');
            sb.Append(mSeparator);
    
            //01    Address information
            sb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr),1,34));
    
            sb.Append(mLineEnd);
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    boolean rec_N4PE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        30      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         15      ID
        //04    Country Code                                        3       ID
        //05    Location Qualifier                                  2       ID
        //06    Location Identifier                                 30      AN
        //--------------------------------------------------------------------------------------------------
        
        if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
        {
            sb.Append('N4');
            sb.Append(mSeparator);
    
            //01    City Address
            sb.Append(substr(mRemittanceCity, 1, 30));
            sb.Append(mSeparator);
    
            //02    State or Province Code
            sb.Append(substr(mRemittanceState, 1, 2));
            sb.Append(mSeparator);
    
            //03    Postal Code
            sb.Append(substr(mRemittanceZipCode,1,15));
            sb.Append(mSeparator);
    
            //04    Country Code
            sb.Append(mRemittanceCountryRegionId);
    
            //05    Location Qualifier
            //06    Location Identifier    
            sb.Append(mLineEnd);    
            mSegmentCount++;
        }        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    boolean rec_N4PR()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Address                                        19      AN
        //02    State or Province Code                              2       ID
        //03    Postal Code                                         9       ID
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        LogisticsAddressCountryRegionISOCode countryRegionISO;
        if(mSKS_EFT_Bank.WOrdPartyCity != '' || mSKS_EFT_Bank.WOrdPartyState != '' || mSKS_EFT_Bank.WOrdPartyZipCode != '' || mSKS_EFT_Bank.WOrdPartyCountryRegionId != '')
        {
            sb.Append('N4');
            sb.Append(mSeparator);
    
            //01    City Address
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity), 1, 30));
            sb.Append(mSeparator);
    
            //02    State or Province Code
            sb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyState), 1, 2));
            sb.Append(mSeparator);
    
            //03    Postal Code
            sb.Append(substr(mSKS_EFT_Bank.WOrdPartyZipCode,1,15));
            sb.Append(mSeparator);
    
            //04    Country Code
            countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId);
            sb.Append(countryRegionISO);
    
            sb.Append(mLineEnd);
            mSegmentCount++;
        }            
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4BK</Name>
				<Source><![CDATA[
    boolean rec_N4BK()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    City Name                                           30      AN
        //02    State or Province Code                              2       ID      Not used
        //03    Postal Code                                         15      ID      Not used
        //04    Country Code                                        3       ID
        //--------------------------------------------------------------------------------------------------
        LogisticsAddressCountryRegionISOCode countryRegionISO;
        LogisticsPostalAddress lLogisticsPostalAddress;
    
        if(mSKS_EFT_VendorPaym.WBenBankCity != ''   ||
           lLogisticsPostalAddress.State != ''      ||
           lLogisticsPostalAddress.ZipCode != ''    ||
           countryRegionISO != '')
        {
            sb.Append('N4');
            sb.Append(mSeparator);
    
            //01    City Name
            sb.Append(substr(mSKS_EFT_VendorPaym.WBenBankCity, 1, 30));
    
            select firstonly State, ZipCode, Location from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == mVendBankAccount.Location;
            countryRegionISO = this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WBenBankCountryRegionId);
        
            if(lLogisticsPostalAddress.State != '')
            {
                //02    State or Province Code
                sb.Append(mSeparator);
                sb.Append(lLogisticsPostalAddress.State);
            }
            else if(lLogisticsPostalAddress.ZipCode != '' || countryRegionISO != '')
            {
                //02    State or Province Code
                sb.Append(mSeparator);
            }
    
            if(lLogisticsPostalAddress.ZipCode != '' || countryRegionISO != '')
            {
                sb.Append(mSeparator);
    
                if(lLogisticsPostalAddress.ZipCode != '')
                {
                    //03    Postal Code
                    sb.Append(lLogisticsPostalAddress.ZipCode);
                }
    
                if(countryRegionISO != '')
                {
                    sb.Append(mSeparator);
    
                    //04    Country Code
                    sb.Append(countryRegionISO);
                }
            }
    
            sb.Append(mLineEnd);
            mSegmentCount++;
        }            
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    boolean rec_SE()
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Number of Included Segments                         10      NO
        //2     Trans. Set Cont. Number                             9       AN
        //--------------------------------------------------------------------------------------------------
        mSegmentCount++;
    
        sb.Append('SE');
        sb.Append(mSeparator);
    
        //1     Number of Included Segments
        sb.Append(num2str(mSegmentCount,0,0,0,0));
        sb.Append(mSeparator);
    
        //2     Trans. Set Cont. Number
        sb.Append(mSenderControlNbr);
        sb.Append(mLineEnd);
           
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    boolean rec_ST()
    {
        //------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //1     Transaction Set ID Code                             3       ID
        //2     Trans. Set Cont. Number                             9       AN
        //------------------------------------------------------------------------------------
    
        mSegmentCount++;
        mTranSetCount++;
    
        sb.Append('ST');
        sb.Append(mSeparator);
    
        //1     Transaction Set ID Code
        sb.Append('820');
        sb.Append(mSeparator);
    
        //2     Trans. Set Cont. Number
        mSenderControlNbr = SKS_PP_StringFormats::strFill(9, int2str(mTranSetCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);

        sb.Append(mSenderControlNbr);
        sb.Append(mLineEnd);         
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    boolean rec_TRN()
    {
        //-----------------------------------------------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Trace Type Code                                     2       ID
        //02    Reference Identification                            30      AN      Payment Trace No
        //-----------------------------------------------------------------------------------------------------------------------------------------    
        mSegmentCount++;
        str value;
    
        sb.Append('TRN');
        sb.Append(mSeparator);
    
        //01     Trace Type Code
        sb.Append('1');
        sb.Append(mSeparator);
    
        //02     Reference Identification
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCTX:
            case #ACHPPD:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),15));
                break;
            case #CHK:
                sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
                break;
            case #WIR_FWT:
            case #WIR_SWT:
                sb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),16));
                break;
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            sb.Append(mSeparator);

            //03      Originating Company Identifier
            sb.Append(mSeparator);

            //04      Reference Identification
            value = SKS_EFT_Format::getCodelookupvalue('MailHandlngCode', mSKS_EFT_FileDetail.RecId);

            if(!value)
            {
                value = '001';
            }

            sb.Append(value);
        }
    
        sb.Append(mLineEnd);   
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Assigned Number                                     6       N0
    boolean rec_ENT()
    {        
        mSegmentCount++;
    
        sb.Append('ENT');
        sb.Append(mSeparator);
    
        //01    Assigned Number
        sb.Append('1');
    
        sb.Append(mLineEnd);              
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Reference No. Qualifier                             3       ID
        //02    Reference Number                                    9       AN
        //03    Payment Action Code                                 2       ID
        //04    Amount paid                                         18      R
        //05    Original Amount                                     18      R
        //06    Discount Amount                                     18      R
        //--------------------------------------------------------------------------------------------------        
        mSegmentCount++;
    
        sb.Append('RMR');
        sb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            sb.Append('IV'); // Only write IV if an invoice number exists
        }
        sb.Append(mSeparator);
    
        //02     Reference Number
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHK)
        {
            sb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,22));
        }
        else
        {
            sb.Append(substr(invSKS_EFT_FileDetail.InvoiceNumber,1,30));
        }
        sb.Append(mSeparator);
    
        //03    Payment Action Code
        sb.Append(mSeparator);
    
        //04    Amount paid
        sb.Append(num2str(invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1,0,2,0,0));
        sb.Append(mSeparator);
    
        //05    Original Amount
        sb.Append(num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur)*-1,0,2,0,0));
        sb.Append(mSeparator);
    
        //06    Discount Amount
        sb.Append(num2str(invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur*-1,0,2,0,0));
    
        sb.Append(mLineEnd);              
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //--------------------------------------------------------------------------------------------------
        //Nbr   Description                                         Max     Type    Comment
        //01    Date/Time Qualifier                                 3       ID
        //02    Date                                                4       Date    CCYYMMDD
        //--------------------------------------------------------------------------------------------------
    
        // Only write segment if an Invoice exists.  If no invoice, the Invoice date will be null.
        if(invSKS_EFT_FileDetail.InvoiceDate != dateNull())
        {
            sb.Append('DTM');
            sb.Append(mSeparator);
    
            //01     Date/Time Qualifier
            sb.Append('003');
            sb.Append(mSeparator);
    
            //02    Date
            sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate));
    
            sb.Append(mLineEnd);
            mSegmentCount++;
        }            
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>