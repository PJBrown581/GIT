<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_CNB_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_CNB_XML extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_CNB_XML extends SKS_EFT_Format
{
    #define.FormatVersion('20221003')
    XmlDocument         xmlDoc;
    XmlElement          nodeRoot;
    XmlElement          nodeBatchId;
    XmlElement          nodePmtAddRq;
    XmlElement          nodePmtInfo;
    XmlElement          nodePaySvcRq;
    str                 deliveryMethod;
    SKS_EFT_FileDetail  invSKS_EFT_FileDetail;

    #define.PPD('ACH-PPD')
    #define.CCD('ACH-CCD')
    #define.CTX('ACH-CTX')
    #define.DOMWIRE('DOM-WIRE')
    #define.INTWIRE('INT-WIRE')
    #define.COS('COS')              //SKS#DevOps:16384

    #define.cnb('cnb')
    #define.cnbValue('urn:cnb-com-EASI:XSD:1')


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {

        //Initialize XML
        xmlDoc = XmlDocument::newBlank();
    
        this.node_MessageRoot();
    
        this.node_IFX();

        this.node_RqUID();//SKS_VSTS_14311

        while(mSKS_EFT_FileDetail)
        {
            
            //          <PmtAddRq>
            nodePmtAddRq = nodePaySvcRq.appendChild(xmlDoc.createElement('PmtAddRq'));//SKS_VSTS_14311

            this.node_PmtAddRq();//SKS_VSTS_14311

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get Remittance information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);
    
            // Get SKS_EFT_Bank
            mSKS_EFT_FileDetail_BankAccount = SKS_EFT_FileDetail_BankAccount::find(mSKS_EFT_FileDetail.RecId);
    
            //      <PmtInfo>
            this.node_PmtInfo();
            
            //          <RemitInfo>
            this.node_PmtInfo_RemitInfo();
    
            //          <DepAcctIdFrom>
            this.node_PmtInfo_DepAcctIdFrom(nodePmtInfo);
    
            this.node_PmtInfo_TransDetails();
    
            next mSKS_EFT_FileDetail;
        }
        this.fileWrite(xmlDoc.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = lRemittancePostalAddress.CountryRegionId;
        }
        else
        {
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = LogisticsAddressCountryRegion::findByISOCode(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId).CountryRegionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_MessageRoot</Name>
				<Source><![CDATA[
    protected void node_MessageRoot()
    {
        guid guid1;
        str string;
    
        guid1 = newGuid();
        string = guid2str(guid1);

        nodeRoot = xmldoc.appendChild(xmlDoc.createElement3(#cnb, 'CNBEASI', #cnbValue));

        SKS_EFT_Format::xmlsetAttributeText(nodeRoot, 'xmlns', 'urn:ifxforum-org:XSD:1'); //SKS_VSTS_13721

        //                  BatchId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRoot, 'BatchId', subStr(string, 2, 36), 0, true, #cnb, #cnbValue);

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_IFX</Name>
				<Source><![CDATA[
    private void node_IFX()
    {
        XmlElement  nodeIFX;
        XmlElement  nodeSignonRq;
        XmlElement nodeClientApp;


        nodeIFX = nodeRoot.appendChild(xmlDoc.createElement('IFX'));

        //          <SignonRq>
        nodeSignonRq = nodeIFX.appendChild(xmlDoc.createElement('SignonRq'));
    
        //          <ClientDt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSignonRq, 'ClientDt', DateTimeUtil::toStr(DateTimeUtil::utcNow()));

        //          <CustLangPref>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSignonRq, 'CustLangPref', 'US');
    
        //                  ClientApp
        nodeClientApp = nodeSignonRq.appendChild(xmlDoc.createElement('ClientApp'));

        //                      Org
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClientApp, 'Org', '');

        //                      Name
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClientApp, 'Name', '');

        //                      Version
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClientApp, 'Version', '');


        //          <PaySvcRq>
        nodePaySvcRq = nodeIFX.appendChild(xmlDoc.createElement('PaySvcRq'));


    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RqUID</Name>
				<Source><![CDATA[
    private void node_RqUID()
    {
        guid guid1;
        str string;

        guid1 = newGuid();
        string = guid2str(guid1);

        //          <RqUID>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePaySvcRq, 'RqUID', subStr(string, 2, 36));
    
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'RqUID', string, mSKS_EFT_File.RecId);

    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtAddRq</Name>
				<Source><![CDATA[
    private void node_PmtAddRq()
    {
        XmlElement  nodeCustId;
        XmlElement  nodeMsgRqHdr;
        XmlElement  nodeNetworkTrnInfo;
        guid guid2;
        str string;
    
        guid2 = newGuid();
        string = guid2str(guid2);
    
        //          <RqUID>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtAddRq, 'RqUID', subStr(string, 2, 36), 0);
    
        this.addFieldElement(gXmlNodeHeaderFieldValues, 'RqUIDT', string, mSKS_EFT_FileDetail.RecId);       //SKS#DevOsp:16542
    
        //      MsgRqHdr
        nodeMsgRqHdr = nodePmtAddRq.appendChild(xmlDoc.createElement('MsgRqHdr'));

        //          NetworkTrnInfo
        nodeNetworkTrnInfo = nodeMsgRqHdr.appendChild(xmlDoc.createElement('NetworkTrnInfo'));

        //              NetworkOwner
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeNetworkTrnInfo, 'NetworkOwner', 'Other');

        //              OriginatorName
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeNetworkTrnInfo, 'OriginatorName', '');

        //              Desc
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeNetworkTrnInfo, 'Desc', '');

        //          <CustId>
        nodeCustId = nodePmtAddRq.appendChild(xmlDoc.createElement('CustId'));
    
        //          <SPName>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustId, 'SPName', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyName));
    
        //          <CustLoginId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustId, 'CustLoginId', this.CharacterReplacement(mSKS_EFT_FileDetail.FileACHCompanyId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo</Name>
				<Source><![CDATA[
    private void node_PmtInfo()
    {
        XmlElement nodeCurAmt;

        //          <PmtInfo>
        nodePmtInfo = nodePmtAddRq.appendChild(xmlDoc.createElement('PmtInfo'));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTWIRE)
        {
            //              <CurAmt>
            nodeCurAmt = nodePmtInfo.appendChild(xmlDoc.createElement('CurAmt'));
    
            //              <Amt>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'Amt', num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));
        }       
    
        //          <PayerInfo>
        this.node_PmtInfo_PayerInfo(nodePmtInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo_PayerInfo</Name>
				<Source><![CDATA[
    private void node_PmtInfo_PayerInfo(XmlElement _nodePmtInfo)
    {
        XmlElement  nodePayerInfo;
        XmlElement  nodeOrgInfo;
        XmlElement  nodeOrgId;
        XmlElement  nodeCompositeContactInfo;
        XmlElement  nodeContactInfo;

        //              <PayerInfo>
        nodePayerInfo = _nodePmtInfo.appendChild(xmlDoc.createElement('PayerInfo'));
    
        //              <OrgInfo>
        nodeOrgInfo = nodePayerInfo.appendChild(xmlDoc.createElement('OrgInfo'));
    
        //              <Name>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail_BankAccount.WOrdPartyName), 16);

        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD)
        {
            //          <OrgId>
            nodeOrgId = nodePayerInfo.appendChild(xmlDoc.createElement('OrgId'));
    
            //          <OrgIdType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'OrgIdType', 'ACH');
        
            //          <OrgIdNum>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOrgId, 'OrgIdNum', '');//SKS_VSTS_13800
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #COS)        //SKS#DevOps:16384
        {
            //          <CompositeContactInfo>
            nodeCompositeContactInfo = nodeOrgInfo.appendChild(xmlDoc.createElement('CompositeContactInfo'));
    
            //          <ContactInfoType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCompositeContactInfo, 'ContactInfoType', 'GeneralInfo');

            //          <ContactInfo>
            nodeContactInfo = nodeCompositeContactInfo.appendChild(xmlDoc.createElement('ContactInfo'));
    
            //          <PostAddr>
            this.node_PostAddr(nodeContactInfo, subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr,1, 35), subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyAddr2, 1, 35),
            subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyCity, 1, 35), subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyState, 1, 35),
            subStr(mSKS_EFT_FileDetail_BankAccount.WOrdPartyZipCode, 1, 35), mSKS_EFT_FileDetail_BankAccount.WOrdPartyCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo_RemitInfo</Name>
				<Source><![CDATA[
    private void node_PmtInfo_RemitInfo()
    {
        XmlElement  nodeRemitInfo;
        SKS_EFT_FileDetail tempSKS_EFT_FileDetail;
    
        //          <RemitInfo>
        nodeRemitInfo = nodePmtInfo.appendChild(xmlDoc.createElement('RemitInfo'));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)     //SKS#DevOps:16384
        {
            //          <RemitInstruction>
            this.node_RemitInfo_RemitInstruction(nodeRemitInfo);
        }
    
        //          <SettlementInfo>
        this.node_RemitInfo_SettlementInfo(nodeRemitInfo);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)     //SKS#DevOps:16384
        {
            //          <ChkInfo>
            this.node_RemitInfo_ChkInfo(nodeRemitInfo);
        }
    
        //          <CustPayeeInfo>
        this.node_RemitInfo_CustPayeeInfo(nodeRemitInfo);
    
        //          <CurAmt>
        this.node_RemitInfo_CurAmt(nodeRemitInfo);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)     //SKS#DevOps:16384
        {
            while select tempSKS_EFT_FileDetail where tempSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
                && tempSKS_EFT_FileDetail.InvoiceVoucherNumber != ''
            {
                //          <ChkInfo>
                this.node_RemitInfo_InvoiceInfo(nodeRemitInfo, tempSKS_EFT_FileDetail);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_RemitInstruction</Name>
				<Source><![CDATA[
    private void node_RemitInfo_RemitInstruction(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeCustPayeeInfo;
        
        //          <RemitInstruction>
        nodeCustPayeeInfo = _nodeRemitInfo.appendChild(xmlDoc.createElement('RemitInstruction'));
    
        //                  <DeliveryInstruction>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustPayeeInfo, 'DeliveryInstruction', this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DeliveryInstruction', mSKS_EFT_FileDetail.RecId)));

        //                  <DeliveryMethod>
        deliveryMethod = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('DeliveryMethod', mSKS_EFT_FileDetail.RecId));
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCustPayeeInfo, 'DeliveryMethod', deliveryMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_SettlementInfo</Name>
				<Source><![CDATA[
    private void node_RemitInfo_SettlementInfo(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeSettlementInfo;
        XmlElement  nodeDepAcctId;
        XmlElement  nodeBankInfo;
        XmlElement  nodePmtInstruction;
        XmlElement  nodePostAddr;
    
        //      <SettlementInfo>
        nodeSettlementInfo = _nodeRemitInfo.appendChild(xmlDoc.createElement('SettlementInfo'));
    
        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSettlementInfo, 'SettlementMethod', 'ACH');//SKS_VSTS_13800
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOMWIRE)
        {
            //      <SettlementMethod>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSettlementInfo, 'SettlementMethod', 'FedNet');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)        //SKS#DevOps:16384
        {
            //      <SettlementMethod>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSettlementInfo, 'SettlementMethod', 'OutsourcedCheckPrinting');
        }
        else
        {
            //      <SettlementMethod>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSettlementInfo, 'SettlementMethod', 'SWIFT');
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #COS)         //SKS#DevOps:16384
        {
            //      <DepAcctId>
            nodeDepAcctId = nodeSettlementInfo.appendChild(xmlDoc.createElement('DepAcctId'));
    
            if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD)
            {
                //      <AcctId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctId, 'AcctId', subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 17));
            }
            else
            {
                //      <AcctId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctId, 'AcctId', subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 32));
            }
    
            //      <AcctType>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctId, 'AcctType', 'DDA');
    
            //      <BankInfo>
            nodeBankInfo = nodeDepAcctId.appendChild(xmlDoc.createElement('BankInfo'));
    
            if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOMWIRE)
            {
                //      <BankIdType>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'ABA');
    
                //      <BankId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 9));
            }
            else
            {
                //      <BankIdType>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'SWIFT');
    
                //      <BankId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 11));
            }
    
            if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOMWIRE ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTWIRE)
            {
                //      <Name>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'Name', subStr(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 1, 35));

                //          <PostAddr>
                nodePostAddr = nodeBankInfo.appendChild(xmlDoc.createElement('PostAddr'));

                //              Addr1
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), 35);

                //              Addr2
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', '');

                //              City
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), 17);

                //              StateProv
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', '');

                //              PostalCode
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', '');
    
                //          <Country>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId);
            }        

            //                  Memo
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeSettlementInfo, 'Memo', '');

        
            //      <PmtInstruction>
            nodePmtInstruction = nodeSettlementInfo.appendChild(xmlDoc.createElement('PmtInstruction'));
            
            if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD)
            {
                //      <PmtFormat>
                switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
                {
                    case #PPD:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'PPD');
                        break;
                    case #CCD:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'CCD');
                        break;
                    case #CTX:
                        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInstruction, 'PmtFormat', 'CTX');
                        break;
                }
            }
            else
            {
                if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTWIRE)
                {
                    this.node_RemitInfo_RefInfo(nodePmtInstruction);
                }

                this.node_PmtInst_IntermediaryDepAcct(nodePmtInstruction);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_ChkInfo</Name>
				<Source><![CDATA[
    private void node_RemitInfo_ChkInfo(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeChkInfo;
    
        //      <ChkInfo>
        nodeChkInfo = _nodeRemitInfo.appendChild(xmlDoc.createElement('ChkInfo'));

        //          <ChkNum>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChkInfo, 'ChkNum', mSKS_EFT_FileDetail.PaymentReference);

        //          <Memo>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeChkInfo, 'Memo', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInst_IntermediaryDepAcct</Name>
				<Source><![CDATA[
    private void node_PmtInst_IntermediaryDepAcct(XmlElement  _nodeXferInfo)
    {
        //------------------------------------------------------------------------------------------------------
        //              <IntermediaryDepAcct>
        //                  <BankInfo>
        //                      <BankIdType>
        //                      <BankId>
        //                      <Name>
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeIntermediaryDepAcct;
        XmlElement nodeBankInfo;
        XmlElement  nodeDepAcctId;
    
        if(mSKS_EFT_FileDetail_Intermediary.IntBankId || mSKS_EFT_FileDetail_Intermediary.IntBankAcct)
        {
            //              <IntermediaryDepAcct>
            nodeIntermediaryDepAcct = _nodeXferInfo.appendChild(xmlDoc.createElement('IntermediaryDepAcct'));
    
            //                  <SeqNum>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeIntermediaryDepAcct, 'SeqNum', '1');

            //                  <DepAcctId>
            nodeDepAcctId = nodeIntermediaryDepAcct.appendChild(xmlDoc.createElement('DepAcctId'));

            if(mSKS_EFT_FileDetail_Intermediary.IntBankAcct)
            {
                //                      <AcctId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctId, 'AcctId', mSKS_EFT_FileDetail_Intermediary.IntBankAcct, 24);

                //      <AcctType>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctId, 'AcctType', 'DDA');
            }

            if(mSKS_EFT_FileDetail_Intermediary.IntBankId)
            {
                //                  <BankInfo>
                nodeBankInfo = nodeDepAcctId.appendChild(xmlDoc.createElement('BankInfo'));
    
                //                      <BankIdType>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'ABA');
    
                //                      <BankId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', mSKS_EFT_FileDetail_Intermediary.IntBankId);
        
                //                      <Name>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'Name', this.CharacterReplacement(mSKS_EFT_FileDetail_Intermediary.IntBankName), 0, false);
    
                //                      <PostAddr>
                this.node_PostAddr(nodeBankInfo, mSKS_EFT_FileDetail_Intermediary.IntBankAddr, mSKS_EFT_FileDetail_Intermediary.IntBankAddr2, '', '', '', mSKS_EFT_FileDetail_Intermediary.IntBankCountryRegionId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_RefInfo</Name>
				<Source><![CDATA[
    private void node_RemitInfo_RefInfo(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeRefInfo;

        //                  <RefInfo>
        nodeRefInfo = _nodeRemitInfo.appendChild(xmlDoc.createElement('RefInfo'));

        //                      <RefType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefType', 'TRCTRL');

        //                      <RefId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefId', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_CustPayeeInfo</Name>
				<Source><![CDATA[
    private void node_RemitInfo_CustPayeeInfo(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeCustPayeeInfo;
        XmlElement  nodeContactInfo;
        XmlElement  nodeFSPayee;
    
        //          <CustPayeeInfo>
        nodeCustPayeeInfo = _nodeRemitInfo.appendChild(xmlDoc.createElement('CustPayeeInfo'));
    
        //          <FSPayee>
        nodeFSPayee = nodeCustPayeeInfo.appendChild(xmlDoc.createElement('FSPayee'));
    
        //          <PostAddr>
        this.node_PostAddr(nodeFSPayee, subStr(mRemittanceAdrLine1, 1, 35), subStr(mRemittanceAdrLine2, 1, 35), subStr(mRemittanceCity, 1, 35), subStr(mRemittanceState, 1, 35), subStr(mRemittanceZipCode, 1, 35), mRemittanceCountryRegionId);

        //this.getmRemittanceName(); //SKS_DevOps_17523

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)         //SKS#DevOps:16384
        {
            //              <LegalName>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFSPayee, 'LegalName', this.CharacterReplacement(subStr(mRemittanceName, 1, 80)));
        }

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #COS)         //SKS#DevOps:16384
        {
            //          <ContactInfo>
            nodeContactInfo = nodeFSPayee.appendChild(xmlDoc.createElement('ContactInfo'));
    
            //          <ContactName>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeContactInfo, 'ContactName', this.CharacterReplacement(mRemittanceName));

            //          <EmailAddr>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeContactInfo, 'EmailAddr', '');
        }

        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)
        {
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #COS)
            {
                //          <PmtId>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRemitInfo, 'PmtId', '');
            }

            //          <Memo>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRemitInfo, 'Memo', '');

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)
            {
                //          <BillingAcct>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRemitInfo, 'BillingAcct', subStr(mSKS_EFT_FileDetail.AccountNum, 1, 15));
            }
            else
            {
                //          <BillingAcct>
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeRemitInfo, 'BillingAcct', VendTable::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum).PaymId); //SKS#DevOps:17879
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_CurAmt</Name>
				<Source><![CDATA[
    private void node_RemitInfo_CurAmt(XmlElement _nodeRemitInfo)
    {
        XmlElement  nodeCurAmt;
        LedgerJournalTrans  lLedgerJournalTrans;
    
        //              <CurAmt>
        nodeCurAmt = _nodeRemitInfo.appendChild(xmlDoc.createElement('CurAmt'));
    
        //              <Amt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'Amt', num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTWIRE)
        {
            //              <CurCode>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'CurCode', mSKS_EFT_FileDetail.PaymentCurrencyCode);

            select firstonly ExchRate from lLedgerJournalTrans where lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

            if(mSKS_EFT_FileDetail.CurrencyCode == 'USD' && mSKS_EFT_FileDetail.PaymentCurrencyCode == 'USD')       //SKS#VSTS:14501
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'CurRate', '1.00');
            }
            else
            {
                SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'CurRate', num2str((lLedgerJournalTrans.ExchRate),0,2,1,0));
            }

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'CurConvertRule', 'Direct');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_RemitInfo_InvoiceInfo</Name>
				<Source><![CDATA[
    private void node_RemitInfo_InvoiceInfo(XmlElement _nodeRemitInfo, SKS_EFT_FileDetail tempSKS_EFT_FileDetail)
    {
        XmlElement  nodeInvoiceInfo;
        XmlElement  nodeRefInfo;
        XmlElement  nodeTotalCurAmt;
        XmlElement  nodeDiscount;
        XmlElement  nodeCurAmt;
        XmlElement  nodeInvoiceAdj;        
    
        //              <InvoiceInfo>
        nodeInvoiceInfo = _nodeRemitInfo.appendChild(xmlDoc.createElement('InvoiceInfo'));
    
        //                  <InvoiceNum>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInvoiceInfo, 'InvoiceNum', this.CharacterReplacement(tempSKS_EFT_FileDetail.InvoiceNumber));
        
        //              <RefInfo>
        nodeRefInfo = nodeInvoiceInfo.appendChild(xmlDoc.createElement('RefInfo'));

        //                  <RefType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefType', 'DocumentAmount');

        //                  <RefId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeRefInfo, 'RefId', num2str(this.getPositiveAmount(tempSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));

        //              <TotalCurAmt>
        nodeTotalCurAmt = nodeInvoiceInfo.appendChild(xmlDoc.createElement('TotalCurAmt'));

        //                  <Amt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeTotalCurAmt, 'Amt', num2str(this.getPositiveAmount((tempSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur + tempSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1),0,2,1,0));

        //                  <EffDt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeInvoiceInfo, 'EffDt', SKS_PP_StringFormats::strDateYYYYMMDD(tempSKS_EFT_FileDetail.InvoiceDate, DateSeparator::Hyphen));
        
        //              <Discount>
        nodeDiscount = nodeInvoiceInfo.appendChild(xmlDoc.createElement('Discount'));

        //                  <CurAmt>
        nodeCurAmt = nodeDiscount.appendChild(xmlDoc.createElement('CurAmt'));

        //                  <Amt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'Amt', num2str(this.getPositiveAmount(tempSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1),0,2,1,0));

        //              <InvoiceAdj>
        nodeInvoiceAdj = nodeInvoiceInfo.appendChild(xmlDoc.createElement('InvoiceAdj'));

        //                  <CurAmt>
        nodeCurAmt = nodeInvoiceAdj.appendChild(xmlDoc.createElement('CurAmt'));

        //                  <Amt>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCurAmt, 'Amt', num2str(this.getPositiveAmount(tempSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1),0,2,1,0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo_DepAcctIdFrom</Name>
				<Source><![CDATA[
    private void node_PmtInfo_DepAcctIdFrom(XmlElement _nodePmtInfo)
    {
        XmlElement nodeDepAcctIdFrom;
        XmlElement nodeBankInfo;
        int noOfDays;
    
        //          <DepAcctIdFrom>
        nodeDepAcctIdFrom = _nodePmtInfo.appendChild(xmlDoc.createElement('DepAcctIdFrom'));
    
        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #INTWIRE ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #DOMWIRE ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)
        {
            //          <AcctId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'AcctId', subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 9));
        }
        else
        {
            //          <AcctId>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'AcctId', subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 34));
        }
    
        //          <AcctType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeDepAcctIdFrom, 'AcctType', 'DDA');
    
        //          <BankInfo>
        nodeBankInfo = nodeDepAcctIdFrom.appendChild(xmlDoc.createElement('BankInfo'));
    
        //          <BankIdType>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankIdType', 'ABA');
    
        //          <BankId>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeBankInfo, 'BankId', subStr(mSKS_EFT_FileDetail.BankBankTransit, 1, 34));

        //          DueDt
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #COS)     //SKS#DevOps:16384
        {
            switch(deliveryMethod)
            {
                case 'USPS':
                    noOfDays = 6;
                    break;
                case 'FedExOvernight':
                    noOfDays = 2;
                    break;
                case 'FedEx2ndDay':
                    noOfDays = 3;
                    break;
                case 'FedExGround':
                    noOfDays = 4;
                    break;
            }
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInfo, 'DueDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate + noOfDays, DateSeparator::Hyphen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInfo_TransDetails</Name>
				<Source><![CDATA[
    private void node_PmtInfo_TransDetails()
    {
        if (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CCD ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CTX ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #PPD)
        {
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInfo, 'Category', this.CharacterReplacement(mSKS_EFT_FileFormatPaymSpec.PaymSpecName));//SKS_VSTS_13800
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #COS)     //SKS#DevOsp:16384
        {
            //          <PrcDt>
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePmtInfo, 'PrcDt', SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::Hyphen));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PostAddr</Name>
				<Source><![CDATA[
    private void node_PostAddr(XmlElement  _node,
                               str _Addr1   = '',
                               str _Addr2   = '',
                               str _City    = '',
                               str _StateProv = '',
                               str _PostalCode = '',
                               str _Country = '')
    {
        XmlElement nodePostAddr;
    
        //                  <PostAddr>
        nodePostAddr = _node.appendChild(xmlDoc.createElement('PostAddr'));
    
        //                  <Addr1>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr1', this.CharacterReplacement(_Addr1));
    
        //                  <Addr2>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Addr2', this.CharacterReplacement(_Addr2));
    
        //                  <City>l
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'City', this.CharacterReplacement(_City));
    
        //                  <StateProv>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'StateProv', this.CharacterReplacement(_StateProv));
    
        //                  <PostalCode>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'PostalCode', this.CharacterReplacement(_PostalCode));

        //                  <Country>
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodePostAddr, 'Country', _Country);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail
            join mSKS_EFT_FileDetail_VendAddress
            join mSKS_EFT_FileDetail_BenBank
            join mSKS_EFT_FileDetail_Intermediary
            join mSKS_EFT_FileDetail_CreditParty
            join msKS_EFT_FileDetail_Instructions
              order by mSKS_EFT_FileDetail.PaymentCompany, //SKS_VSTS_12798
                   mSKS_EFT_FileDetail.RecordSection,
                   mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.PaymentCurrencyCode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_VendAddress.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_BenBank.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_Intermediary.RefRecId &&
                mSKS_EFT_FileDetail.RecId == mSKS_EFT_FileDetail_CreditParty.RefRecId &&
                mSKS_EFT_FileDetail.RecId == msKS_EFT_FileDetail_Instructions.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileWrite</Name>
				<Source><![CDATA[
    protected void fileWrite(str _result)
    {
        _result = strReplace(_result, '<IFX xmlns="">', '<IFX>'); //SKS_VSTS_13721

        if(_result != '')
        {
            mFileHub.runAppendLine(_result);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>