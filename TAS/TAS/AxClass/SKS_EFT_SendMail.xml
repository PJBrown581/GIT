<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_SendMail</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Mail;

public class SKS_EFT_SendMail
{

    str             senderAddr;
    str             senderName;
    Email           emailAddr;

    SKS_EFT_EmailSendType   emailType;
    Email           testAddr;
    custVendAC      vendcustAcct;

    str             messageBody;

    TextBuffer      vendcustBuffer;
    TextBuffer      pmtsBuffer;
    TextBuffer      pmtInstanceBuffer;
    TextBuffer      invsBuffer;

    str             pmtMsgTemplate;
    str             invMsgTemplate;

    List                attachmentFileNameList;
    List                attachmentDataList;
    FilenameOpen        attachmentfileName;
    FileNameOpen        attachmentBaseName;
    str                 attachmentPathName;

    container           attachmentdata;

    Map mappings;
    Map pmtMappings;
    Map invMappings;

    SKS_EFTAP_File mSKS_EFT_File;
    SKS_EFT_FileDetail mFileDetailVendCustSum;
    SKS_EFT_FileDetail mFileDetailPmt;
    SKS_EFT_FileDetail mFileDetailInv;
    SKS_EB_Vendor mSKS_EB_Vendor;
    SKS_LB_Depositor mSKS_LB_Depositor;
    SKS_EFT_Bank mSKS_EFT_Bank;
    SKS_EFTAR_Bank mSKS_EFTAR_Bank;
    DirPartyContactInfoview mDirPartyContactInfoview;
    VendTable mVendTable;
    CustTable mCustTable;
    SKS_EFT_Setup mEFTSetup;
    SYSEmailTable emailTable;
    SYSEmailMessageTable message;
    SysEmailParameters parameters;

    DocuRef docuRef; // Added for attachment on DD2

    int sentEmails;
    int failedEmails;

    int advSentEmails;
    int advFailedEmails;

    int pmtCuryDecimals;
    int invCuryDecimals;

    boolean doAttachments;
    boolean doEmail;
    boolean retEmail; //9496
    Email   directDebitEmailAddr;
    NoYes   failedCntUpdated; // 9205 CR

    #admin
    #define.CurrentVersion(3)
    #localmacro.CurrentList
        senderAddr,
        senderName,
        subject,
        emailAddr,
        messageBody,
        priority,
        attachmentfileName,
        attachmentdata,
        isTraceAble,
        isWithRetries
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAddr</Name>
				<Source><![CDATA[
    public void addAddr(SysMailerMessageBuilder messageBuilder, Email _email, str _name, SKS_EB_EMailTo _type)
    {
        if(_email)
        {
            if(SKS_PP_StringFormats::validateEmail(_email)) //9496-->
            {
                retEmail = true; //9496 <--
                switch (_type)
                {
                    case SKS_EB_EmailTo::To:
                        messageBuilder.addTo(_email, _name);
                        break;
                    case SKS_EB_EmailTo::Cc:
                        messageBuilder.addCc(_email, _name);
                        break;
                    case SKS_EB_EmailTo::Bcc:
                        messageBuilder.addBcc(_email, _name);
                        break;
                }
            }
            else //9496 -->
            {
                warning(strFmt("@SKS:SKGInvalidEmailFormat", _email));
            } //9496 <--
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>addAttachmentfileName</Name>
				<Source><![CDATA[
    private void addAttachmentfileName(FilenameOpen _attachmentfileName)
    {
        ;
        if (!attachmentFileNameList)
        {
            attachmentFileNameList = new List(Types::String);
        }

        if (attachmentFileNameList)
        {
            attachmentFileNameList.addEnd(_attachmentfileName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecipients</Name>
				<Source><![CDATA[
    private void addRecipients(SysMailerMessageBuilder messageBuilder, SKS_EFT_Module _eftModule)
    {
        // 7536 -->
        LogisticsElectronicAddress      logisticsElectronicAddress;
        SKS_EFT_Setup                   sks_EFT_Setup;

        // 7536 <--
        ;
        if (emailType == SKS_EFT_EmailSendType::Test)
        {
            this.addAddr(messageBuilder, testAddr,'',SKS_EB_EmailTo::To);
        }
        else
        {
            sks_EFT_Setup = SKS_EFT_Setup::find();// 7536

            if(_eftModule == SKS_EFT_Module::AP)
            {
                ////SKS_9496_CR Start
                this.addAPEmailRecipients(messageBuilder);
                this.AddInternalBCCEmail(sks_EFT_Setup, messageBuilder,conNull());

                messageBuilder.addReplyTo(mSKS_EFT_Bank.APEMReplyToAddr, mSKS_EFT_Bank.APEMReplytoName);
            }
            else if(_eftModule == SKS_EFT_Module::AR)
            {
                if (mSKS_LB_Depositor.EM1Customer)
                {
                    if(sks_EFT_Setup.EmailContactPurpose != '')
                    {
                        logisticsElectronicAddress = this.getContactInfoByPurpose();
                        this.addAddr(messageBuilder, logisticsElectronicAddress.Locator, logisticsElectronicAddress.Description, mSKS_LB_Depositor.EM1ToCcBcc);
                        // 7536 <--
                    }
                    else
                    {
                        if(mDirPartyContactInfoview.Locator)
                        {
                            this.addAddr(messageBuilder, mDirPartyContactInfoview.Locator, mDirPartyContactInfoview.LocationName, mSKS_LB_Depositor.EM1ToCcBcc);
                        }
                    }
                    // 7536 <--
                }

                this.addAddr(messageBuilder, mSKS_LB_Depositor.EM2Addr, mSKS_LB_Depositor.EM2Name, mSKS_LB_Depositor.EM2ToCcBcc);
                this.addAddr(messageBuilder, mSKS_LB_Depositor.EM3Addr, mSKS_LB_Depositor.EM3Name, mSKS_LB_Depositor.EM3ToCcBcc);
                this.addAddr(messageBuilder, mSKS_LB_Depositor.EM4Addr, mSKS_LB_Depositor.EM4Name, mSKS_LB_Depositor.EM4ToCcBcc);

                messageBuilder.addReplyTo(mSKS_EFTAR_Bank.AREMReplyToAddr, mSKS_EFTAR_Bank.AREMReplytoName);
            }
        }


    }

]]></Source>
			</Method>
			<Method>
				<Name>addressesString</Name>
				<Source><![CDATA[
    private str addressesString(SKS_EFT_Module _eftModule)
    {
        str result;
        container emailAddresses;
        // 7536 -->
        LogisticsElectronicAddress      logisticsElectronicAddress;
        SKS_EFT_Setup                   sks_EFT_Setup;
        // 7536 <--
        ;

        if(_eftModule == SKS_EFT_Module::AP)
        {
            if (mSKS_EB_Vendor.EM1Vendor && mDirPartyContactInfoview.Locator)
            {
                emailAddresses += mDirPartyContactInfoview.Locator;
            }

            if(mSKS_EB_Vendor.EM2Addr)
            {
                emailAddresses += mSKS_EB_Vendor.EM2Addr;
            }

            if(mSKS_EB_Vendor.EM3Addr)
            {
                emailAddresses += mSKS_EB_Vendor.EM3Addr;
            }

            if(mSKS_EB_Vendor.EM4Addr)
            {
                emailAddresses += mSKS_EB_Vendor.EM4Addr;
            }
        }
        else if(_eftModule == SKS_EFT_Module::AR)
        {
            if (mSKS_LB_Depositor.EM1Customer)
            {
                // 7536 -->
                sks_EFT_Setup = SKS_EFT_Setup::find();
                if(sks_EFT_Setup.EmailContactPurpose != '')
                {
                    logisticsElectronicAddress = this.getContactInfoByPurpose();
                    emailAddresses += logisticsElectronicAddress.Locator;
                    // 7536 <--
                }
            }
            else
            {
                if(mDirPartyContactInfoview.Locator)
                {
                    emailAddresses += mDirPartyContactInfoview.Locator;
                }
            }
            if(mSKS_LB_Depositor.EM2Addr)
            {
                emailAddresses += mSKS_LB_Depositor.EM2Addr;
            }

            if(mSKS_LB_Depositor.EM3Addr)
            {
                emailAddresses += mSKS_LB_Depositor.EM3Addr;
            }

            if(mSKS_LB_Depositor.EM4Addr)
            {
                emailAddresses += mSKS_LB_Depositor.EM4Addr;
            }
        }

        result = con2str(emailAddresses, ', ');

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>advFailedEmailCount</Name>
				<Source><![CDATA[
    public int advFailedEmailCount()
    {
        return advFailedEmails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>advSentEmailCount</Name>
				<Source><![CDATA[
    public int advSentEmailCount()
    {
        return advSentEmails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAttachment</Name>
				<Source><![CDATA[
    private void buildAttachment()
    {
        TextBuffer      attachBuffer = new TextBuffer();

        // if doing attachments, remove everything between the markers since that data will be moved to the attachment
        // otherwise, just remove the beginning and ending markers themselves.
        if (doAttachments)
        {
            vendcustBuffer.find('%ATTACH%.*%ATTACHEND%');
            attachBuffer.setText(this.stripHtml(vendcustBuffer.substr(vendcustBuffer.matchPos()+8,vendcustBuffer.matchlen()-19)));

            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
            fileHub.runFileCreate(attachmentFileName, attachBuffer.getText());

            this.addAttachmentfileName(attachmentFileName);
            vendcustBuffer.replace('%ATTACH%.*%ATTACHEND%','');
        }
        else
        {
            vendcustBuffer.replace('%ATTACH%','');
            vendcustBuffer.replace('%ATTACHEND%','');
        }

        attachBuffer=null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileNameVariablesForEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to get file name.
    /// </summary>
    /// <param name="_mSKS_LB_Depositor">
    /// SKS_LB_Depositor object.
    /// </param>
    /// <param name="_mSKS_EFTAP_File">
    /// SKS_EFTAP_File object.
    /// </param>
    /// <param name="_attachmentFileName">
    /// FileName object parameter
    /// </param>
    /// <returns>
    /// File name object.
    /// </returns>
    public Filename getFileNameVariablesForEmail(SKS_LB_Depositor _mSKS_LB_Depositor,SKS_EFTAP_File _mSKS_EFTAP_File,FileName _attachmentFileName)
    {
        SKS_EFT_FileDetail              report_EFT_fileDetail;
        Filename                        attachmentFileNameMail = _attachmentFileName;

        select firstonly report_EFT_fileDetail
            where report_EFT_fileDetail.FileRecId == _mSKS_EFTAP_File.RecId;

        attachmentFileNameMail = SKS_FileNameReplace::replaceDateFormatValue(attachmentFileNameMail,dateNull(),true); // 10265
        attachmentFileNameMail = strReplace(attachmentFileNameMail,'%AccountNum%', report_EFT_fileDetail.AccountNum);
        attachmentFileNameMail = strReplace(attachmentFileNameMail,'%CompanyName%', report_EFT_fileDetail.company());
        attachmentFileNameMail = strReplace(attachmentFileNameMail,'%DDFileNumber%', _mSKS_EFTAP_File.FileNbr);

        return attachmentFileNameMail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAPFileNameVariablesForEmail</Name>
				<Source><![CDATA[
    // CR - 9496 start
    /// <summary>
    /// Method to get file name.
    /// </summary>
    /// <param name="_mSKS_EB_Vendor">
    /// SKS_LB_Depositor object.
    /// </param>
    /// <param name="_mSKS_EFTAP_File">
    /// SKS_EFTAP_File object.
    /// </param>
    /// <param name="_attachmentFileName">
    /// FileName object parameter
    /// </param>
    /// <returns>
    /// File name object.
    /// </returns>
    public Filename getAPFileNameVariablesForEmail(SKS_EB_Vendor _mSKS_EB_Vendor,SKS_EFTAP_File _mSKS_EFTAP_File,FileName _attachmentFileName)
    {
        SKS_EFT_FileDetail              report_EFT_fileDetail;
        Filename                        attachmentFileNameMail = _attachmentFileName;

        select firstonly report_EFT_fileDetail
            where report_EFT_fileDetail.FileRecId == _mSKS_EFTAP_File.RecId;

        attachmentFileNameMail = SKS_FileNameReplace::replaceDateFormatValue(attachmentFileNameMail,dateNull(),true); // 10265
        attachmentFileNameMail = strReplace(attachmentFileNameMail,'%AccountNum%', report_EFT_fileDetail.AccountNum);
        attachmentFileNameMail = strReplace(attachmentFileNameMail,'%CompanyName%', report_EFT_fileDetail.company());
        attachmentFileNameMail = strReplace(attachmentFileNameMail,'%APFileNumber%', _mSKS_EFTAP_File.FileNbr);

        return attachmentFileNameMail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustomerBlock</Name>
				<Source><![CDATA[
    // CR - 9496 end

    private void buildCustomerBlock()
    {
        this.buildCustomerMapping();

        // FDD-BS-DD remit attach <--
        vendcustBuffer.setText(SysEmailMessage::stringExpand(messageBody, SysEmailTable::htmlEncodeParameters(mappings)));
        //find the payment block and extract it as the template to use for all payments within this vendor
        vendcustBuffer.find('%PMTBLOCK%.*%PMTBLOCKEND%');
        pmtMsgTemplate = vendcustBuffer.substr(vendcustBuffer.matchPos()+10,vendcustBuffer.matchlen()-23);

        //new customer, reset the buffer holding the array of payments.
        pmtsBuffer.setText('');

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCustomerMapping</Name>
				<Source><![CDATA[
    public void buildCustomerMapping()
    {
        mappings = null;
        mappings = new Map(Types::String, Types::String);

        if (attachmentFileName)
        {
            mappings.insert('FN',attachmentBaseName);
        }

        mappings.insert('PaymentDate',this.formatDate(mSKS_EFT_File.EffectiveDate, SKS_EFT_DateSetting::DateYYYY_MM_DD)); //YYYY-MM-DD
        mappings.insert('PaymentRegionalDate',this.formatDate(mSKS_EFT_File.EffectiveDate, SKS_EFT_DateSetting::DateRegional)); //Formatted to Regional Settings
        mappings.insert('PaymentDateNoFormat',this.formatDate(mSKS_EFT_File.EffectiveDate, SKS_EFT_DateSetting::DateYYYYMMDD)); //YYYYMMDD
        mappings.insert('CompanyName',mSKS_EFTAR_Bank.AREMCompanyName);
        mappings.insert('CustAccount',mFileDetailVendCustSum.AccountNum);
        mappings.insert('CustName', SKS_EFT_Common::getCustomerNameByParty(mCustTable.Party));
        // FDD-BS-DD remit attach -->
        mappings.insert('SRSFileName1', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS1FileName));
        mappings.insert('SRSAdvFileName1', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS1FileName));
        mappings.insert('SRSFileName2', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS2FileName));
        mappings.insert('SRSAdvFileName2', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS2FileName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInvoiceBlock</Name>
				<Source><![CDATA[
    private void buildInvoiceBlock(SKS_EFT_FileDetail _sks_EFT_FileDetail)
    {
        this.buildInvoiceMapping(_sks_EFT_FileDetail);

        //build this invoice and add to the array of invoices
        invsBuffer.appendText(SysEmailMessage::stringExpand(invMsgTemplate, SysEmailTable::htmlEncodeParameters(invMappings)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInvoiceMapping</Name>
				<Source><![CDATA[
    public void buildInvoiceMapping(SKS_EFT_FileDetail _sks_EFT_FileDetail)
    {
        VendTrans locVendTrans;
        CustTrans locCustTrans;
        CustInvoiceSalesLink    SalesLink;
        SalesTable  SalesTable;  

        //select the invoice
        if(_SKS_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            select crossCompany DocumentDate, RecId, Txt, PaymId, DocumentNum from locVendTrans
                where locVendTrans.RecId == _SKS_EFT_FileDetail.VendTransRecId;
        }
        else //SKS_EFT_FileDetail.Module == SKS_EFT_Module::AR  Direct debit invoice
        {
            select crossCompany DocumentDate, RecId, Txt from locCustTrans
                where locCustTrans.RecId == _SKS_EFT_FileDetail.VendTransRecId;

            Select PurchOrderFormNum from SalesTable
                join SalesID from SalesLink where locCustTrans.Invoice == SalesLink.InvoiceID &&
                SalesTable.SalesId == SalesLink.salesId;

        }

        invMappings = null;
        invMappings = new Map(Types::String, Types::String);
        invMappings.insert('InvoiceNbr', _sks_EFT_FileDetail.InvoiceNumber);
        invMappings.insert('InvoiceDate', this.formatDate(_sks_EFT_FileDetail.InvoiceDate, SKS_EFT_DateSetting::DateYYYY_MM_DD));
        invMappings.insert('InvoiceRegionalDate', this.formatDate(_sks_EFT_FileDetail.InvoiceDate, SKS_EFT_DateSetting::DateRegional));
        invMappings.insert('InvoiceDateNoFormat', this.formatDate(_sks_EFT_FileDetail.InvoiceDate, SKS_EFT_DateSetting::DateYYYYMMDD));
        invMappings.insert('InvoiceCurrency', _sks_EFT_FileDetail.InvoiceCurrencyCode);

        if(_sks_EFT_FileDetail.Module == SKS_EFT_Module::AP)
        {
            invMappings.insert('InvoiceBeginningBalance', this.formatCurValue(-(this.getInvoiceRemainingBalance(_sks_EFT_FileDetail)) , invCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceBalance', this.formatCurValue(-(this.getInvoiceRemainingBalance(_sks_EFT_FileDetail) - (_sks_EFT_FileDetail.InvoiceSettleAmountCur + _sks_EFT_FileDetail.InvoiceDiscAmountCur)) , invCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceDescription', _sks_EFT_FileDetail.InvoiceTransactionTxt);
            invMappings.insert('InvoiceAmt', this.formatCurValue(-_sks_EFT_FileDetail.InvoiceOrigAmountCur, invCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceSettleInvCur', this.formatCurValue(-_sks_EFT_FileDetail.InvoiceSettleAmountCur, invCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceSettlePmtCur', this.formatCurValue(-_sks_EFT_FileDetail.InvoiceSettleAmountPmtCur, pmtCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceDisc', this.formatCurValue(-_sks_EFT_FileDetail.InvoiceDiscAmountPmtCur, pmtCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            // FDD-BS-AP remit attach --> CR - 9496 start
            invMappings.insert('SRSFileName1', this.getAPFileNameVariablesForEmail(mSKS_EB_Vendor,mSKS_EFT_File,mSKS_EB_Vendor.APSRS1FileName));
            invMappings.insert('SRSFileName2', this.getAPFileNameVariablesForEmail(mSKS_EB_Vendor,mSKS_EFT_File,mSKS_EB_Vendor.APSRS2FileName));
            // FDD-BS-AP remit attach <-- CR - 9496 end
            invMappings.insert('InvoiceDocumnetDateRegionalFormat', this.formatDate(locVendTrans.DocumentDate, SKS_EFT_DateSetting::DateRegional));
            invMappings.insert('InvoiceDocumentDateNoFormat', this.formatDate(locVendTrans.DocumentDate, SKS_EFT_DateSetting::DateYYYYMMDD));
            // 8786 -->
            invMappings.insert('InvoiceDescription', locVendTrans.Txt);
            // 8786 <--
            //12040
            invMappings.insert('PaymentID', locVendTrans.PaymId);
            invMappings.insert('InvCompanyName',CompanyInfo::findDataArea(locVendTrans.company()).Name);
            //12040
            invMappings.insert('InvoiceDocId', locVendTrans.DocumentNum);
        }
        else
        {
            invMappings.insert('InvoiceBeginningBalance',this.formatCurValue(this.getInvoiceRemainingBalance(_sks_EFT_FileDetail), invCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceBalance', this.formatCurValue(this.getInvoiceRemainingBalance(_sks_EFT_FileDetail) - (_sks_EFT_FileDetail.InvoiceSettleAmountCur + _sks_EFT_FileDetail.InvoiceDiscAmountCur) , invCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceAmt', this.formatCurValue(_sks_EFT_FileDetail.InvoiceOrigAmountCur, invCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceSettleInvCur', this.formatCurValue(_sks_EFT_FileDetail.InvoiceSettleAmountCur, invCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceSettlePmtCur', this.formatCurValue(_sks_EFT_FileDetail.InvoiceSettleAmountPmtCur, pmtCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            invMappings.insert('InvoiceDisc', this.formatCurValue(_sks_EFT_FileDetail.InvoiceDiscAmountPmtCur, pmtCuryDecimals, _sks_EFT_FileDetail.InvoiceCurrencyCode));
            // FDD-BS-DD remit attach -->
            invMappings.insert('SRSFileName1', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS1FileName));
            invMappings.insert('SRSAdvFileName1', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS1FileName));
            invMappings.insert('SRSFileName2', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS2FileName));
            invMappings.insert('SRSAdvFileName2', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS2FileName));
            // FDD-BS-DD remit attach <--
            invMappings.insert('InvoiceDocumnetDateRegionalFormat', this.formatDate(locCustTrans.DocumentDate, SKS_EFT_DateSetting::DateRegional));
            invMappings.insert('InvoiceDocumentDateNoFormat', this.formatDate(locCustTrans.DocumentDate, SKS_EFT_DateSetting::DateYYYYMMDD));
            // 8786 -->
            invMappings.insert('InvoiceDescription', locCustTrans.Txt);
            // 8786 >--
            invMappings.insert('CustReq', SalesTable.PurchOrderFormNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPaymentARBlock</Name>
				<Source><![CDATA[
    private void buildPaymentARBlock()
    {
        this.buildPaymentARMapping();

        pmtInstanceBuffer.setText(SysEmailMessage::stringExpand(pmtMsgTemplate, SysEmailTable::htmlEncodeParameters(pmtMappings)));

        //find the invoice block and extract it as the template to use for all invoices within this payment
        pmtInstanceBuffer.find('%INVOICEBLOCK%.*%INVOICEBLOCKEND%');
        invMsgTemplate = pmtInstanceBuffer.substr(pmtInstanceBuffer.matchPos()+14,pmtInstanceBuffer.matchlen()-31);

        //new payment, reset the buffer holding the array of invoices.
        invsBuffer.setText('');

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPaymentARMapping</Name>
				<Source><![CDATA[
    public void buildPaymentARMapping()
    {
        SKS_EFT_CustomerPaym sks_eft_CustomerPaym;

        sks_eft_CustomerPaym = SKS_EFT_CustomerPaym::findByCompany(
            mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId,
            mFileDetailVendCustSum.AccountCompany,
            mFileDetailVendCustSum.AccountNum,
            mFileDetailVendCustSum.PaymMode,
            mFileDetailPmt.PaymSpec,
            mFileDetailPmt.DepBankAccountId);//FDD-10590

        pmtMappings = null;
        pmtMappings = new Map(Types::String, Types::String);
        pmtMappings.insert('DepBankRTN', mFileDetailPmt.DepBankTransit);
        pmtMappings.insert('DepBankAcct', mFileDetailPmt.DepBankAcct);

        if (strlen(mFileDetailPmt.DepBankAcct) < 4)
        {
            pmtMappings.insert('DepBankAcctLast4', mFileDetailPmt.DepBankAcct);
        }
        else
        {
            pmtMappings.insert('DepBankAcctLast4', '**' + substr(mFileDetailPmt.DepBankAcct, strlen(mFileDetailPmt.DepBankAcct)-3,4));
        }

        pmtMappings.insert('PaymentRef', mFileDetailPmt.PaymentReference);
        pmtMappings.insert('PaymentAmt', this.formatCurValue(mFileDetailPmt.InvoiceSettleAmountPmtCur,pmtCuryDecimals, mFileDetailPmt.PaymentCurrencyCode));
        pmtMappings.insert('PaymentCurrency', mFileDetailPmt.PaymentCurrencyCode);
        // FDD-BS-DD remit attach -->
        pmtMappings.insert('SRSFileName1', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS1FileName));
        pmtMappings.insert('SRSAdvFileName1', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS1FileName));
        pmtMappings.insert('SRSFileName2', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS2FileName));
        pmtMappings.insert('SRSAdvFileName2', this.getFileNameVariablesForEmail(mSKS_LB_Depositor,mSKS_EFT_File,mSKS_LB_Depositor.SKS_DDR_SRS2FileName));
        // FDD-BS-DD remit attach <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPaymentBlock</Name>
				<Source><![CDATA[
    private void buildPaymentBlock()
    {
        this.buildPaymentMapping();

        pmtInstanceBuffer.setText(SysEmailMessage::stringExpand(pmtMsgTemplate, SysEmailTable::htmlEncodeParameters(pmtMappings)));

        //find the invoice block and extract it as the template to use for all invoices within this payment
        pmtInstanceBuffer.find('%INVOICEBLOCK%.*%INVOICEBLOCKEND%');
        invMsgTemplate = pmtInstanceBuffer.substr(pmtInstanceBuffer.matchPos()+14,pmtInstanceBuffer.matchlen()-31);

        //new payment, reset the buffer holding the array of invoices.
        invsBuffer.setText('');

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPaymentMapping</Name>
				<Source><![CDATA[
    public void buildPaymentMapping()
    {
        SKS_EFT_VendorPaym sks_eft_VendorPaym;

        sks_eft_VendorPaym = SKS_EFT_VendorPaym::findByCompany(
            mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId,
            mFileDetailVendCustSum.AccountCompany,
            mFileDetailVendCustSum.AccountNum,
            mFileDetailVendCustSum.PaymMode,
            mFileDetailPmt.PaymSpec,
            mFileDetailPmt.DepBankAccountId); //FDD-10590

        pmtMappings = null;
        pmtMappings = new Map(Types::String, Types::String);
        pmtMappings.insert('PaymentDate',this.formatDate(mFileDetailPmt.EffectiveDate, SKS_EFT_DateSetting::DateYYYY_MM_DD)); //YYYY-MM-DD
        pmtMappings.insert('PaymentRegionalDate',this.formatDate(mFileDetailPmt.EffectiveDate, SKS_EFT_DateSetting::DateRegional)); //Formatted to Regional Settings
        pmtMappings.insert('PaymentDateNoFormat',this.formatDate(mFileDetailPmt.EffectiveDate, SKS_EFT_DateSetting::DateYYYYMMDD)); //MM-DD-YYYY
        pmtMappings.insert('DepBankRTN', mFileDetailPmt.DepBankTransit);
        pmtMappings.insert('DepBankAcct', mFileDetailPmt.DepBankAcct);
        pmtMappings.insert('PaymentCurrency', mFileDetailPmt.PaymentCurrencyCode);

        if (strlen(mFileDetailPmt.DepBankAcct) < 4)
        {
            pmtMappings.insert('DepBankAcctLast4', mFileDetailPmt.DepBankAcct);
        }
        else
        {
            pmtMappings.insert('DepBankAcctLast4', '**' + substr(mFileDetailPmt.DepBankAcct, strlen(mFileDetailPmt.DepBankAcct)-3,4));
        }

        pmtMappings.insert('BenBankSwift', mFileDetailPmt.DepSwiftNo);
        pmtMappings.insert('BenBankAcct', sks_eft_VendorPaym.WBenBankAcct);

        if (strlen(sks_eft_VendorPaym.WBenBankAcct) < 4)
        {
            pmtMappings.insert('BenBankAcctLast4', sks_eft_VendorPaym.WBenBankAcct);
        }
        else
        {
            pmtMappings.insert('BenBankAcctLast4', '**' + substr(sks_eft_VendorPaym.WBenBankAcct, strlen(sks_eft_VendorPaym.WBenBankAcct)-3,4));
        }

        pmtMappings.insert('BenBankName', sks_eft_VendorPaym.WBenBankName);
        pmtMappings.insert('PaymentRef', mFileDetailPmt.PaymentReference);
        pmtMappings.insert('PaymentAmt', this.formatCurValue(-mFileDetailPmt.InvoiceSettleAmountPmtCur,pmtCuryDecimals, mFileDetailPmt.PaymentCurrencyCode));

        // FDD-BS-DD remit attach --> CR - 9496 start
        pmtMappings.insert('SRSFileName1', this.getAPFileNameVariablesForEmail(mSKS_EB_Vendor,mSKS_EFT_File,mSKS_EB_Vendor.APSRS1FileName));
        pmtMappings.insert('SRSFileName2', this.getAPFileNameVariablesForEmail(mSKS_EB_Vendor,mSKS_EFT_File,mSKS_EB_Vendor.APSRS2FileName));
        // FDD-BS-DD remit attach <-- CR - 9496 end
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVendorBlock</Name>
				<Source><![CDATA[
    private void buildVendorBlock()
    {
        this.buildVendorMapping();

        vendcustBuffer.setText(SysEmailMessage::stringExpand(messageBody, SysEmailTable::htmlEncodeParameters(mappings)));
        //find the payment block and extract it as the template to use for all payments within this vendor
        vendcustBuffer.find('%PMTBLOCK%.*%PMTBLOCKEND%');
        pmtMsgTemplate = vendcustBuffer.substr(vendcustBuffer.matchPos()+10,vendcustBuffer.matchlen()-23);

        //new vendor, reset the buffer holding the array of payments.
        pmtsBuffer.setText('');

    }

]]></Source>
			</Method>
			<Method>
				<Name>buildVendorMapping</Name>
				<Source><![CDATA[
    public void buildVendorMapping()
    {
        VendBankAccount lVendBankAccount;

        lVendBankAccount = VendBankAccount::find(mFileDetailVendCustSum.AccountNum, mFileDetailVendCustSum.DepBankAccountId);
        mappings = null;
        mappings = new Map(Types::String, Types::String);

        if (attachmentFileName)
        {
            mappings.insert('FN',attachmentBaseName);
        }

        if(mSKS_EFT_File.EffectiveDate != dateNull())
        {
            mappings.insert('PaymentDate',this.formatDate(mSKS_EFT_File.EffectiveDate, SKS_EFT_DateSetting::DateYYYY_MM_DD)); //YYYY-MM-DD
            mappings.insert('PaymentRegionalDate',this.formatDate(mSKS_EFT_File.EffectiveDate, SKS_EFT_DateSetting::DateRegional)); //Formatted to Regional Settings
            mappings.insert('PaymentDateNoFormat',this.formatDate(mSKS_EFT_File.EffectiveDate, SKS_EFT_DateSetting::DateYYYYMMDD)); //YYYYMMDD
        }

        mappings.insert('CompanyName',mSKS_EFT_Bank.APEMCompanyName);
        mappings.insert('VendAccount',mFileDetailVendCustSum.AccountNum);
        mappings.insert('VendName', SKS_EFT_Common::getVendorNameByParty(mVendTable.Party));
        mappings.insert('BankName',  lVendBankAccount.Name);
        mappings.insert('IBAN', lVendBankAccount.BankIBAN);
        mappings.insert('SWIFT',lVendBankAccount.SWIFTNo);

        // FDD-BS-DD remit attach --> CR - 9496 start
        mappings.insert('SRSFileName1', this.getAPFileNameVariablesForEmail(mSKS_EB_Vendor,mSKS_EFT_File,mSKS_EB_Vendor.APSRS1FileName));
        mappings.insert('SRSFileName2', this.getAPFileNameVariablesForEmail(mSKS_EB_Vendor,mSKS_EFT_File,mSKS_EB_Vendor.APSRS2FileName));
        // FDD-BS-DD remit attach <-- CR - 9496 end

        mappings.insert('OurAccount', mVendTable.YourAccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailError</Name>
				<Source><![CDATA[
    private void emailError(str _errorMsg, NoYes _advEmail, SKS_EFT_Module _eftModule)
    {
        doEmail = false;

        if(_advEmail)
        {
            advFailedEmails += 1;
            this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::AdvEmailFailed, 1, 0);
        }
        else
        {
            failedEmails += 1;
            this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::CompletedNoEmail, 1, 0);
        }

        if(_eftModule == SKS_EFT_Module::AP)
        {
            info(strfmt(_errorMsg, mVendTable.AccountNum));
        }
        else if(_eftModule == SKS_EFT_Module::AR)
        {
            info(strfmt(_errorMsg, mCustTable.AccountNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>emailResults</Name>
				<Source><![CDATA[
    void emailResults(NoYes _advEmail)
    {
        ;
        if(_advEmail)
        {
            if(this.advFailedEmailCount() > 0)
            {
                Box::stop(strfmt("@SKS1981",this.advSentEmailCount(),this.advFailedEmailCount()));
            }
        }
        else
        {
            if (this.failedEmailCount() > 0)
            {
                Box::stop(strfmt("@SKS1025",this.sentEmailCount(),this.failedEmailCount()));
            }
        }



    }

]]></Source>
			</Method>
			<Method>
				<Name>failedEmailCount</Name>
				<Source><![CDATA[
    public int failedEmailCount()
    {
        return failedEmails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatCurValue</Name>
				<Source><![CDATA[
    private str formatCurValue(real _curValue, int _decimals, CurrencyCode _fileCurrency)
    {
        str CurFormat;
        Currency currency;

        select Symbol from currency
            where currency.CurrencyCode == _fileCurrency;

        if (!doAttachments)
        {
            CurFormat = currency.Symbol + num2Str(_curValue, 3,_decimals, 1, 2);
            return CurFormat;
        }
        else
        {
            return num2Str(_curValue, 3,_decimals, 1, 0);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDate</Name>
				<Source><![CDATA[
    private str formatDate(Date _dateValue, SKS_EFT_DateSetting _datesetting)
    {
        if(_datesetting == SKS_EFT_DateSetting::DateYYYYMMDD)
        {
            return Date2Str(_dateValue, 321, DateDay::Digits2, DateSeparator::None,
                                    DateMonth::Digits2, DateSeparator::None, DateYear::Digits4,DateFlags::None);
        }
        else if(_datesetting == SKS_EFT_DateSetting::DateRegional)
        {
            return Date2Str(_dateValue, -1, DateDay::Digits2, -1, DateMonth::Digits2, -1,
                                    DateYear::Digits4,DateFlags::None);
        }
        else
        {
            return Date2Str(_dateValue, 321, DateDay::Digits2, DateSeparator::Hyphen,
                                    DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4,DateFlags::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceRemainingBalance</Name>
				<Source><![CDATA[
    private amountCur getInvoiceRemainingBalance(SKS_EFT_FileDetail _SKS_EFT_FileDetail)
    {
        CustTransOpen locCustTransOpen;
        VendTransOpen locVendTransOpen;
        SpecTrans locSpecTrans;
        AmountCur rtnval;

        if(_SKS_EFT_FileDetail.Module == SKS_EFT_Module::AR)
        {
            //These can be joined because SpecTrans is NOT company specific, so we just crosscompany the CustTrans to guarantee we can find it.
            select crossCompany AmountCur, DataAreaId, RecId, RefRecId from locCustTransOpen
                    where locCustTransOpen.RefRecId == _SKS_EFT_FileDetail.VendTransRecId
                join DataAreaId, RecId, RefRecId, SpecRecId from locSpecTrans
                    where
                    locSpecTrans.RefRecId == locCustTransOpen.RecId
                    && locSpecTrans.SpecRecId == _SKS_EFT_FileDetail.PaymentLineRecId;

            rtnval = locCustTransOpen.AmountCur;
        }
        else//else is the AP code
        {
            //These can be joined because SpecTrans is NOT company specific, so we just crosscompany the VendTrans to guarantee we can find it.
            select crossCompany AmountCur, DataAreaId, RecId, RefRecId from locVendTransOpen
                    where locVendTransOpen.RefRecId == _SKS_EFT_FileDetail.VendTransRecId
                join DataAreaId, RecId, RefRecId, SpecRecId from locSpecTrans
                    where
                    locSpecTrans.RefRecId == locVendTransOpen.RecId
                    && locSpecTrans.SpecRecId == _SKS_EFT_FileDetail.PaymentLineRecId;
            rtnval = locVendTransOpen.AmountCur;
        }
        if(!locSpecTrans)//if no invoice exists, just return the Original balance(which will be the payment amount)
        {
            rtnval = _SKS_EFT_FileDetail.InvoiceOrigAmountCur;//The +/- is managed in the build invoice block depending on the context from which this is called.
        }
        return(rtnval);

    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInfo</Name>
				<Source><![CDATA[
    private void initCustInfo(NoYes _advEmailUsed)
    {

        ;
        // Get the vendor email information. If the vendor is not set up for email, marks as complete and skip. If the
        // vendor is set up to receive email but has no email address set up, leave marked as CompleteNoEmail and
        // increase failed email count.
        doEmail = true;
        //mSKS_LB_Depositor = SKS_LB_Depositor::findWithSetup(mFileDetailVendCustSum.AccountCompany, mFileDetailVendCustSum.AccountNum,
        //                    mFileDetailVendCustSum.BankAccountId, mFileDetailVendCustSum.PaymMode); //FDD-10590

        mSKS_LB_Depositor = SKS_LB_Depositor::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId, mFileDetailVendCustSum.AccountCompany, mFileDetailVendCustSum.AccountNum);//FDD-10590
        mSKS_EFTAR_Bank = SKS_EFTAR_Bank::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId, mFileDetailVendCustSum.BankAccountId, mFileDetailVendCustSum.PaymMode);//FDD-10590

        if(_advEmailUsed)
        {
            if (!mSKS_LB_Depositor ||  mSKS_LB_Depositor.AENotification == NoYes::No)
            {
                doEmail = false;
                return;
            }
        }
        else
        {
            if (!mSKS_LB_Depositor ||  mSKS_LB_Depositor.EMNotification == NoYes::No)
            {
                doEmail = false;
                this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Completed, 0, 0);
                return;
            }
        }

        mCustTable = CustTable::findByCompany(mFileDetailVendCustSum.AccountCompany, mFileDetailVendCustSum.AccountNum);
        select * from mDirPartyContactInfoview
                 where mDirPartyContactInfoview.Party == mCustTable.Party && mDirPartyContactInfoview.IsPrimary == true
                       &&  mDirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;

        // 7536 -->
        LogisticsElectronicAddress      logisticsElectronicAddress;
        sks_eft_emailpurpose            sks_eft_emailpurpose;
        SKS_EFT_Setup                   sks_EFT_Setup = SKS_EFT_Setup::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId);//FDD-10590
        select firstonly sks_eft_emailpurpose where sks_eft_emailpurpose.sks_eb_orderhierarchy == 1;
        // 7536 <--
        if(sks_EFT_Setup.EmailContactPurpose != '')
        {
            logisticsElectronicAddress = this.getContactInfoByPurpose();
        }

        if (!(mSKS_LB_Depositor.EM1Customer && (mDirPartyContactInfoview.Locator != '' || (sks_EFT_Setup.EmailContactPurpose != '' && logisticsElectronicAddress.Locator != ''))) && !mSKS_LB_Depositor.EM2Addr && !mSKS_LB_Depositor.EM3Addr && !mSKS_LB_Depositor.EM4Addr)
        {
            this.emailError("@SKS1969", _advEmailUsed, SKS_EFT_Module::AR);
            return;
        }

        // set up correct message template base on whether attachments will be used.
        // fileRecID was used to store the invoice count.
        // if NbrDoc is set to zero, it means to never use attachments
        if ((mSKS_LB_Depositor.EMAttachNbrDocs !=0) && (mFileDetailVendCustSum.fileRecID >= mSKS_LB_Depositor.EMAttachNbrDocs))
        {
            doAttachments = true;
            changecompany(mSKS_LB_Depositor.company())//FDD-10590
            {
                if(_advEmailUsed)
                {
                    if(mSKS_LB_Depositor.EMAENTemplateAttach)
                    {
                        emailTable = SysEmailTable::find(mSKS_LB_Depositor.EMAENTemplateAttach);
                    }
                    else
                    {
                        emailTable = SysEmailTable::find(mSKS_EFTAR_Bank.ARAENTemplateAttach);
                    }
                }
                else
                {
                    if(mSKS_LB_Depositor.EMTemplateAttach)
                    {
                        emailTable = SysEmailTable::find(mSKS_LB_Depositor.EMTemplateAttach);
                    }
                    else
                    {
                        emailTable = SysEmailTable::find(mSKS_EFTAR_Bank.AREMTemplateAttach);
                    }
                }
            } //FDD-10590
            attachmentBaseName = mSKS_LB_Depositor.EMAttachFileName;
            if (mSKS_LB_Depositor.EMAttachInclDate)
            {
                attachmentBaseName = attachmentBaseName + '_' + date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                                                         321,DateDay::Digits2, DateSeparator::None,
                                                                         DateMonth::Digits2, DateSeparator::None, DateYear::Digits4,DateFlags::None);
            }
            if (mSKS_LB_Depositor.EMAttachInclCust)
            {
                attachmentBaseName = attachmentBaseName + '_' + mSKS_LB_Depositor.AccountNum;
            }
            if (mSKS_LB_Depositor.EMAttachFileExt)
            {
                attachmentBaseName = attachmentBaseName + '.' + mSKS_LB_Depositor.EMAttachFileExt;
            }

            attachmentPathName = sks_EFT_Setup.AREMAttachPath + @'\' + mSKS_EFT_File.FileNbr; //FDD-10590
            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
            fileHub.parmThrowErrorIfException(false);
            fileHub.runDirectoryCreate(attachmentPathName);
            if(fileHub.errorHasException())
            {
                this.emailError(fileHub.errorException(), NoYes::No, SKS_EFT_Module::AR);
                return;
            }
            attachmentfileName = attachmentPathName + @'\' + attachmentBaseName;
        }
        else
        {
            doAttachments = false;
            changecompany(mSKS_LB_Depositor.company())//FDD-10590
            {
                if(_advEmailUsed)
                {
                    if(mSKS_LB_Depositor.EMAENTemplateNoAttach) //Bug-11856
                    {
                        emailTable = SysEmailTable::find(mSKS_LB_Depositor.EMAENTemplateNoAttach);
                    }
                    else //Bug-11856 --->
                    {
                        emailTable = SysEmailTable::find(mSKS_EFTAR_Bank.ARAENTemplateNoAttach);
                    } //<--- Bug-11856
                }
                else
                {
                    if(mSKS_LB_Depositor.EMTemplateNoAttach) //Bug-11856
                    {
                        emailTable = SysEmailTable::find(mSKS_LB_Depositor.EMTemplateNoAttach);
                    }
                    else //Bug-11856 --->
                    {
                        emailTable = SysEmailTable::find(mSKS_EFTAR_Bank.AREMTemplateNoAttach);
                    } //<--- Bug-11856
                }
            }//FDD-10590
        }
        changecompany(mSKS_LB_Depositor.company())//FDD-10590
        {
            if(mSKS_LB_Depositor.EMTemplateLanguage) //Bug-11856
            {
                message = SysEmailMessageTable::find(emailTable.EmailId,mSKS_LB_Depositor.EMTemplateLanguage);
            }
            else //Bug-11856 --->
            {
                message = SysEmailMessageTable::find(emailTable.EmailId,mSKS_EFTAR_Bank.AREMTemplateLanguage);
            } //<--- Bug-11856
        }//FDD-10590
        if (!emailTable || !message)
        {
            this.emailError("@SKS1970", _advEmailUsed, SKS_EFT_Module::AR);
            return;
        }
        messagebody = message.Mail;

        // Get paying banking information too since that can be used in the email.
        this.resetEmail();
        if (mSKS_EFTAR_Bank.AREMAttachmentName)
        {
            this.addAttachmentfileName(sks_EFT_Setup.AREMAttachPath + @'\' + mSKS_EFTAR_Bank.AREMAttachmentName); //FDD-10590
        }
        // FDD-BS-DD remit attach - 7369CR -->
        this.validate_SKS_DDRParameters(_advEmailUsed, mFileDetailVendCustSum.AccountNum, mFileDetailVendCustSum.AccountCompany);
        // FDD-BS-DD remit attach - 7369CR <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmailProcessing</Name>
				<Source><![CDATA[
    private void initEmailProcessing()
    {
        vendcustBuffer = new TextBuffer();
        pmtInstanceBuffer = new TextBuffer();
        pmtsBuffer = new TextBuffer();
        invsBuffer = new TextBuffer();
        parameters = SysEmailParameters::find();
        sentEmails = 0;
        failedEmails = 0;
        advSentEmails = 0;
        advFailedEmails = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInfo</Name>
				<Source><![CDATA[
    public void initVendInfo()
    {
        DirPartyLocation            dirPartyLocation;
        LogisticsLocationRole                locationRole;
        LogisticsElectronicAddress  lLogisticsElectronicAddress;
        logisticsElectronicAddressRole  logisticsElectronicAddressRole;
        SKS_EFT_VendorPaym locSKS_EFT_VendorPaym;
        SKS_PP_Bank sks_PP_Bank; //SKS IHB 9615
        ;
        // Get the vendor email information. If the vendor is not set up for email, marks as complete and skip. If the
        // vendor is set up to receive email but has no email address set up, leave marked as CompleteNoEmail and
        // increase failed email count.
        doEmail = true;
        mSKS_EB_Vendor.clear();
        //mSKS_EB_Vendor = SKS_EB_Vendor::findWithSetup(mFileDetailVendCustSum.AccountCompany, mFileDetailVendCustSum.AccountNum,
        //        mFileDetailVendCustSum.BankAccountId, mFileDetailVendCustSum.PaymMode);//FDD-10590

        //FDD-10590 --->
        mSKS_EB_Vendor = SKS_EB_Vendor::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId, mFileDetailVendCustSum.AccountCompany, mFileDetailVendCustSum.AccountNum);
        SKS_EFT_Setup  sks_EFT_Setup = SKS_EFT_Setup::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId);//<--- FDD-10590
        mSKS_EFT_Bank = SKS_EFT_Bank::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId, mFileDetailVendCustSum.BankAccountId, mFileDetailVendCustSum.PaymMode);//<--- FDD-10590
        locSKS_EFT_VendorPaym = SKS_EFT_VendorPaym::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId,
                                                                    mFileDetailVendCustSum.AccountCompany,
                                                                    mFileDetailVendCustSum.AccountNum,
                                                                    mFileDetailVendCustSum.PaymMode,
                                                                    mFileDetailVendCustSum.PaymSpec,
                                                                    mFileDetailVendCustSum.DepBankAccountId,
                                                                    false); //FDD-10590
        if (!mSKS_EB_Vendor ||  mSKS_EB_Vendor.EMNotification == NoYes::No)
        {
            doEmail = false;
            this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Completed, 0, 0);
            return;
        }

        mVendTable = VendTable::findByCompany(mFileDetailVendCustSum.AccountCompany, mFileDetailVendCustSum.AccountNum);

        select * from lLogisticsElectronicAddress
                    where lLogisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                        join dirPartyLocation
                            where dirPartyLocation.Location == lLogisticsElectronicAddress.Location &&
                                    dirPartyLocation.Party == mVendTable.Party
                        join logisticsElectronicAddressRole
                            where logisticsElectronicAddressRole.ElectronicAddress == lLogisticsElectronicAddress.RecId
                        join locationRole
                            where locationRole.RecId == logisticsElectronicAddressRole.LocationRole
                                && locationRole.Name == sks_EFT_Setup.APEmailContactPurpose; //FDD-10590

        if(!lLogisticsElectronicAddress)
        {
            mDirPartyContactInfoview = conpeek(SKS_EFT_VendorLoad::primaryEmail(mFileDetailVendCustSum.AccountCompany, mFileDetailVendCustSum.AccountNum, locSKS_EFT_VendorPaym.RecId), 2);
        }
        else
        {
            select * from mDirPartyContactInfoview where mDirPartyContactInfoview.electronicaddress == logisticsElectronicAddressRole.ElectronicAddress;

        }

        if (
            (!(mSKS_EB_Vendor.EM1Vendor && mDirPartyContactInfoview.Locator) && !mSKS_EB_Vendor.EM2Addr && !mSKS_EB_Vendor.EM3Addr && !mSKS_EB_Vendor.EM4Addr)
            || (mSKS_EB_Vendor.EM1Vendor && mDirPartyContactInfoview.Locator && !SKS_PP_StringFormats::validateEmail(mDirPartyContactInfoview.Locator))
            )
        {
            this.emailError("@SKS1608", NoYes::No, SKS_EFT_Module::AP);
            return;
        }

        // set up correct message template base on whether attachments will be used.
        // fileRecID was used to store the invoice count.
        // if NbrDoc is set to zero, it means to never use attachments
        if ((mSKS_EB_Vendor.EMAttachNbrDocs !=0) && (mFileDetailVendCustSum.fileRecID >= mSKS_EB_Vendor.EMAttachNbrDocs))
        {
            doAttachments = true;
            changecompany(mSKS_EB_Vendor.company()) //FDD-10590
            {
                if(mSKS_EB_Vendor.EMTemplateAttach)
                {
                    emailTable = SysEmailTable::find(mSKS_EB_Vendor.EMTemplateAttach);
                }
                else
                {
                    emailTable = SysEmailTable::find(mSKS_EFT_Bank.APEMTemplateAttach);
                }
            }//FDD-10590
            attachmentBaseName = mSKS_EB_Vendor.EMAttachFileName;
            if (mSKS_EB_Vendor.EMAttachInclDate)
            {
                attachmentBaseName = attachmentBaseName + '_' + date2str(mSKS_EFT_File.TransmitDate, 321,DateDay::Digits2, DateSeparator::None,
                                                                            DateMonth::Digits2, DateSeparator::None, DateYear::Digits4,DateFlags::None);
            }
            if (mSKS_EB_Vendor.EMAttachInclVend)
            {
                attachmentBaseName = attachmentBaseName + '_' + mSKS_EB_Vendor.VendAccount;
            }
            if (mSKS_EB_Vendor.EMAttachFileExt)
            {
                attachmentBaseName = attachmentBaseName + '.' + mSKS_EB_Vendor.EMAttachFileExt;
            }
            attachmentPathName = sks_EFT_Setup.APEMAttachPath + @'\' + mSKS_EFT_File.FileNbr;//FDD-10590
            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
            fileHub.parmThrowErrorIfException(false);
            fileHub.runDirectoryCreate(attachmentPathName);
            if(fileHub.errorHasException())
            {
                this.emailError(fileHub.errorException(), NoYes::No, SKS_EFT_Module::AP);
                return;
            }
            attachmentfileName = attachmentPathName + @'\' + attachmentBaseName;
        }
        else
        {
            changecompany(mSKS_EB_Vendor.company()) //FDD-10590
            {
                doAttachments = false;
                if(mSKS_EB_Vendor.EMTemplateNoAttach) //Bug-11856
                {
                    emailTable = SysEmailTable::find(mSKS_EB_Vendor.EMTemplateNoAttach);
                }
                else //Bug-11856 --->
                {
                    emailTable = SysEmailTable::find(mSKS_EFT_Bank.APEMTemplateNoAttach);
                } //<--- Bug-11856
            }//FDD-10590
        }
        changecompany(mSKS_EB_Vendor.company()) //FDD-10590
        {
            if(mSKS_EB_Vendor.EMTemplateLanguage) //Bug-11856
            {
                message = SysEmailMessageTable::find(emailTable.EmailId,mSKS_EB_Vendor.EMTemplateLanguage);
            }
            else //Bug-11856 --->
            {
                message = SysEmailMessageTable::find(emailTable.EmailId,mSKS_EFT_Bank.APEMTemplateLanguage);
            } //<--- Bug-11856
        }//FDD-10590
        if (!emailTable || !message)
        {
            this.emailError("@SKS1607", NoYes::No, SKS_EFT_Module::AP);
            return;
        }
        messagebody = message.Mail;

        // Get paying banking information too since that can be used in the email.

        //SKS IHB 9615 start
        if(mFileDetailVendCustSum.EFTAP_IHBBankAccount != '')
        {
            sks_PP_Bank = SKS_PP_Bank::find(mFileDetailVendCustSum.EFTAP_IHBBankAccount, mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId);//FDD-10590
            if (sks_PP_Bank.APEMAttachmentName)
            {
                this.addAttachmentfileName(sks_EFT_Setup.APEMAttachPath + @'\' + sks_PP_Bank.APEMAttachmentName);//FDD-10590
            }
        }
        //SKS IHB 9615 start
        else
        {
            this.resetEmail();
            if (mSKS_EFT_Bank.APEMAttachmentName)
            {
                this.addAttachmentfileName(sks_EFT_Setup.APEMAttachPath + @'\' + mSKS_EFT_Bank.APEMAttachmentName);//FDD-10590
            }
        }
        // FDD-BS-AP remit attach - 9496CR -->
        this.validate_SKS_APRParameters(mFileDetailVendCustSum.AccountNum, mFileDetailVendCustSum.AccountCompany);
        // FDD-BS-AP remit attach - 9496CR <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>process_EFT_eMail</Name>
				<Source><![CDATA[
    Public boolean process_EFT_eMail(SKS_EFT_FileNbr _fileNbr, SKS_EFT_Module _module, SKS_EFT_EmailSendType _emailType = SKS_EFT_EmailSendType::All, Email _emailAddr = '', CustVendAc _account = '', NoYes _advEmail = NoYes::No)
    {
        //-----------------------------------------------------------------
        //main entry point for email processing for AP/AR EFT transmissions
        //-----------------------------------------------------------------
        str emailAddresses;
        vendcustAcct = _account;
        emailType = _emailType;
        boolean emailSent;
        System.Exception    emailException;
        //15759 exchange email limit
        utcdatetime lastTime;
        Integer64   emailCount;
        int64       emailCountLimit;
        Integer64   emailTime;      //in seconds
        Integer64   emailTimeLimit; //in seconds

        select firstonly mEFTSetup;

        if (emailType == SKS_EFT_EmailSendType::Test)
        {
            testAddr = _emailAddr;
        }
        select firstonly mSKS_EFT_File
        where mSKS_EFT_File.FileNbr == _fileNbr && mSKS_EFT_File.EFTFileType == _module;
        if (!mSKS_EFT_File)
        {
            info("@SKS1027");
            return false;
        }

        this.initEmailProcessing();
        this.selectCustVendSumList(mSKS_EFT_File.EFTFileType, _advEmail);

        // setup email limit
        emailCountLimit = 30;
        emailCount = 0;
        emailTimeLimit = 60;
        emailTime = 0;
        lastTime = DateTimeUtil::getSystemDateTime();

        // Loop through the distinct vendors, one email per vendor.
        While (mFileDetailVendCustSum)
        {
            if(mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP)
            {
                // SKS_FDD_10590 -->
                // check setup in payment company
                if (SKS_EFT_Setup::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId).ModAPEmail == NoYes::No)
                {
                    info(strfmt("@SKS1610", mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId));
                    return false;
                }
                // SKS_FDD_10590 <--
                this.initVendInfo();
            }
            else
            {
                // SKS_FDD_10590 -->
                if (SKS_EFT_Setup::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId).ModAREmail == NoYes::No)
                {
                    info(strfmt("@SKS1610", mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId));
                    return false;
                }
                // SKS_FDD_10590 <--
                this.initCustInfo(_advEmail);
            }
            if (doEmail)
            {
                if(mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP)
                {
                    this.buildVendorBlock();
                }
                else
                {
                    this.buildCustomerBlock();
                }
                this.selectPaymentRecords(_advEmail);
                While (mFileDetailPmt)
                {
                    pmtCuryDecimals = SKS_EB_Currency::getCurrencyPrecision(mFileDetailPmt.PaymentCurrencyCode);
                    if(mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP) //wire information
                    {
                        this.buildPaymentBlock();
                    }
                    else
                    {
                        this.buildPaymentARBlock();
                    }

                    // if summary is by Invoice, the payment and invoice lines are the same line, else need to spin
                    // thru the invoice line, building an invoice block for each line.
                    if (mFileDetailPmt.InvoiceNumber)
                    {
                        invCuryDecimals = SKS_EB_Currency::getCurrencyPrecision(mFileDetailPmt.InvoiceCurrencyCode);
                        this.buildInvoiceBlock(mFileDetailPmt);
                    }
                    else
                    {
                        this.selectInvoiceRecords();
                        While (mFileDetailInv)
                        {
                            invCuryDecimals = SKS_EB_Currency::getCurrencyPrecision(mFileDetailInv.InvoiceCurrencyCode);
                            this.buildInvoiceBlock(mFileDetailInv);
                            next mFileDetailInv;
                        }
                    }
                    // replace the invoice block in this instance of the payment block, then add this payment block to the rest of the payments
                    pmtInstanceBuffer.replace('%INVOICEBLOCK%.*%INVOICEBLOCKEND%',invsBuffer.getText());
                    pmtsBuffer.appendText(pmtInstanceBuffer.getText());
                    next mFileDetailPmt;
                }
                vendcustBuffer.replace('%PMTBLOCK%.*%PMTBLOCKEND%',pmtsBuffer.getText());
                this.buildAttachment();
                messagebody = vendcustBuffer.getText();
                //16394                
                try
                {
                    emailSent = this.sendMail(mSKS_EFT_File.EFTFileType, _advEmail);
                }
                catch(Exception::Error)
                {
                    info(strfmt("@SKS1026", mVendTable.AccountNum, emailAddresses));
                    emailSent = false;

                    next mFileDetailVendCustSum;
                    continue;
                }
                catch(Exception::CLRError)
                {
                    emailException = CLRInterop::getLastException();

                    if (!CLRInterop::isNull(emailException.get_InnerException()))
                        emailException = emailException.get_InnerException();

                    info(emailException.get_message());

                    info(strfmt("@SKS1026", mVendTable.AccountNum, emailAddresses));

                    emailSent = false;

                    next mFileDetailVendCustSum;
                    continue;
                }

                if (emailSent)
                {
                    // 18309 - if email is sent successfully, reset failure count to 0 
                    if(_advEmail)
                    {                           
                        //this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::AdvEmailSent, -mFileDetailVendCustSum.AdvEmailFailed, 1);
                        this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::AdvEmailSent, 0, 1);
                        advSentEmails += 1;
                    }
                    else
                    {
                        SKS_EFT_FileStatus fileStatus = SKS_EFT_FileStatus::Completed;

                        if (mSKS_EFT_File.FileStatus == SKS_EFT_FileStatus::TransmittedEmailPending)
                        {
                            fileStatus = SKS_EFT_FileStatus::Transmitted;
                        }

                        //this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::Completed, -mFileDetailVendCustSum.EmailFailed, 1);
                        this.Update_SKS_EFT_FileDetail(fileStatus, 0, 1);
                        sentEmails += 1;
                    }

                }
                else
                {

                    if(_advEmail)
                    {
                        this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::AdvEmailFailed, 1, 0);
                        advFailedEmails += 1;
                    }
                    else
                    {
                        this.Update_SKS_EFT_FileDetail(SKS_EFT_FileStatus::CompletedNoEmail, 1, 0);
                        failedEmails +=1;
                    }

                    emailAddresses = this.addressesString(mSKS_EFT_File.EFTFileType);

                    if(mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AP)
                    {
                        error(strfmt("@SKS1026", mVendTable.AccountNum, emailAddresses));
                    }
                    else if(mSKS_EFT_File.EFTFileType == SKS_EFT_Module::AR)
                    {
                        error(strfmt("@SKS1980", mCustTable.AccountNum, emailAddresses));
                    }
                }

                //exchange limit of 30 emails per minute
                emailCount++;
                if (emailCount == emailCountLimit)
                {
                    emailTime = DateTimeUtil::getDifference(DateTimeUtil::getSystemDateTime(),lastTime);

                    if (emailTime < emailTimeLimit)
                        sleep(int642int((emailTimeLimit-emailTime) * 1000));

                    emailCount = 0;
                    lastTime = DateTimeUtil::getSystemDateTime();
                }

                //clean up attachments if necessary
                if (doAttachments)
                {
                    SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
                    fileHub.parmThrowErrorIfException(false);
                    fileHub.runDirectoryDelete(attachmentPathName, true);
                }

            }
            next mFileDetailVendCustSum;
        }

        if(_advEmail)
        {
            if (advfailedEmails != 0)
            {
                if(emailType == SKS_EFT_EmailSendType::All)
                {
                    error(strfmt("@SKS1981",advSentEmails,advFailedEmails), "@SKS1315");
                }
                this.parmSKS_EFT_FileDetailFailCntUpdated(true); // 9205 CR
                return false;
            }
            else
            {
                info(strfmt("@SKS1987",advSentEmails));
                return true;
            }
        }
        else
        {
            if (failedEmails != 0)
            {
                if(emailType == SKS_EFT_EmailSendType::All)
                {
                    error(strfmt("@SKS1025",sentEmails,failedEmails), "@SKS1315");
                }
                this.parmSKS_EFT_FileDetailFailCntUpdated(true); // 9205 CR
                return false;
            }
            else
            {
                info(strfmt("@SKS1029",sentEmails));
                return true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetEmail</Name>
				<Source><![CDATA[
    private void resetEmail()
    {
        ;
        attachmentFileNameList = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectCustVendSumList</Name>
				<Source><![CDATA[
    private void selectCustVendSumList(SKS_EFT_Module _eftModule, NoYes _advemail )
    {
        if (emailType == SKS_EFT_EmailSendType::Test || emailType == SKS_EFT_EmailSendType::Individual)
        {
            select AccountCompany, AccountNum, BankAccountId, PaymMode, count(fileRecID), EmailFailed, AdvEmailFailed, EFTAP_IHBBankAccount, PaymentCompany, DepBankAccountId //SKS IHB 9615 //FDD-10590
                from mFileDetailVendCustSum
                group by AccountCompany, AccountNum, BankAccountId, PaymMode, EmailFailed, AdvEmailFailed, EFTAP_IHBBankAccount, PaymentCompany, DepBankAccountId //SKS IHB 9615 //FDD-10590
                where mFileDetailVendCustSum.RecordType == SKS_EFT_RecordType::Invoice &&
                    mFileDetailVendCustSum.RecordSummary != SKS_EFT_RecordSummary::NonSummary && // Exclude lines that aren't remit lines
                    mFileDetailVendCustSum.AccountNum == vendcustAcct &&
                    mFileDetailVendCustSum.PaymentRejected == NoYes::No &&
                    mFileDetailVendCustSum.FileRecId == mSKS_EFT_File.RecId;

            if (mFileDetailVendCustSum.fileRecID == 0 && emailType == SKS_EFT_EmailSendType::Test)
            {
                if(_eftModule == SKS_EFT_Module::AP)
                {
                    box::info(strfmt("@SKS1609", vendcustAcct,  mSKS_EFT_File.FileNbr));
                }
                else if(_eftModule == SKS_EFT_Module::AR)
                {
                    box::info(strfmt("@SKS1979", vendcustAcct,  mSKS_EFT_File.FileNbr));
                }
            }
        }
        else
        {
            if(_advemail)
            {
                select AccountCompany, AccountNum, BankAccountId, PaymMode, count(fileRecID), PaymentCompany, DepBankAccountId //FDD-10590
                    from mFileDetailVendCustSum
                    group by AccountCompany, AccountNum, BankAccountId, PaymMode, PaymentCompany, DepBankAccountId //FDD-10590
                    where (mFileDetailVendCustSum.FileStatus == SKS_EFT_FileStatus::FileCreated|| mFileDetailVendCustSum.FileStatus == SKS_EFT_FileStatus::AdvEmailFailed)
                        && mFileDetailVendCustSum.RecordType == SKS_EFT_RecordType::Invoice
                        && mFileDetailVendCustSum.RecordSummary != SKS_EFT_RecordSummary::NonSummary // Exclude lines that aren't remit lines
                        && mFileDetailVendCustSum.PaymentRejected == NoYes::No
                        && mFileDetailVendCustSum.FileRecId == mSKS_EFT_File.RecId;
            }
            else
            {
                //SKS IHB 9615
                if(mEFTSetup.IHB_Remit == NoYes::Yes)
                {
                    select AccountCompany, AccountNum, BankAccountId, PaymMode, count(fileRecID), EFTAP_IHBBankAccount, PaymentCompany //FDD-10590
                        from mFileDetailVendCustSum
                        group by AccountCompany, AccountNum, BankAccountId, PaymMode, EFTAP_IHBBankAccount, PaymentCompany //FDD-10590
                        where mFileDetailVendCustSum.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail
                            && mFileDetailVendCustSum.RecordType == SKS_EFT_RecordType::Invoice
                            && mFileDetailVendCustSum.RecordSummary != SKS_EFT_RecordSummary::NonSummary // Exclude lines that aren't remit lines
                            && ((mFileDetailVendCustSum.RecordSection == SKS_EFT_RecordSection::Payments && !mSKS_EFT_File.FXAProcessing) // RecordSection based on FXAll
                            || (mFileDetailVendCustSum.RecordSection == SKS_EFT_RecordSection::FXAllVendor && mSKS_EFT_File.FXAProcessing))
                        && mFileDetailVendCustSum.PaymentRejected == NoYes::No
                        && mFileDetailVendCustSum.FileRecId == mSKS_EFT_File.RecId;
                }
                //SKS IHB 9615
                else
                {                             
                    select AccountCompany, AccountNum, BankAccountId, PaymMode, count(fileRecID), PaymentCompany, DepBankAccountId //FDD-10590
                        from mFileDetailVendCustSum
                            group by AccountCompany, AccountNum, BankAccountId, PaymMode, PaymentCompany, DepBankAccountId //FDD-10590
                        where mFileDetailVendCustSum.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail
                            && mFileDetailVendCustSum.RecordType == SKS_EFT_RecordType::Invoice
                            && mFileDetailVendCustSum.RecordSummary != SKS_EFT_RecordSummary::NonSummary // Exclude lines that aren't remit lines
                        && ((mFileDetailVendCustSum.RecordSection == SKS_EFT_RecordSection::Payments && !mSKS_EFT_File.FXAProcessing) // RecordSection based on FXAll
                        || (mFileDetailVendCustSum.RecordSection == SKS_EFT_RecordSection::FXAllVendor && mSKS_EFT_File.FXAProcessing))
                            && mFileDetailVendCustSum.PaymentRejected == NoYes::No
                            && mFileDetailVendCustSum.FileRecId == mSKS_EFT_File.RecId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInvoiceRecords</Name>
				<Source><![CDATA[
    private void selectInvoiceRecords()
    {

        select * from mFileDetailInv
            order by mFileDetailInv.RecId
            where mFileDetailInv.FileRecId == mSKS_EFT_File.RecId &&
                mFileDetailInv.RecordSummaryRecId == mFileDetailPmt.RecId;

    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    private void selectPaymentRecords(NoYes _advEmail)
    {
        if (emailType == SKS_EFT_EmailSendType::Test || emailType == SKS_EFT_EmailSendType::Individual)
        {
            // if test email or individual email, use records of any status
            //SKS IHB 9615 -->
            if(mEFTSetup.IHB_Remit == NoYes::Yes && mFileDetailVendCustSum.EFTAP_IHBBankAccount != '')
            {
                select * from mFileDetailPmt
                order by mFileDetailPmt.PaymentReference
                where mFileDetailPmt.FileRecId == mSKS_EFT_File.RecId &&
                    mFileDetailPmt.AccountCompany == mFileDetailVendCustSum.AccountCompany &&
                    mFileDetailPmt.AccountNum == mFileDetailVendCustSum.AccountNum &&
                    mFileDetailPmt.RecordSummaryRecId == 0 &&
                    mFileDetailPmt.EFTAP_IHBBankAccount == mFileDetailVendCustSum.EFTAP_IHBBankAccount;
            }
            //SKS IHB 9615 <--
            else
            {
                select * from mFileDetailPmt
                order by mFileDetailPmt.PaymentReference
                where mFileDetailPmt.FileRecId == mSKS_EFT_File.RecId &&
                    mFileDetailPmt.AccountCompany == mFileDetailVendCustSum.AccountCompany &&
                    mFileDetailPmt.AccountNum == mFileDetailVendCustSum.AccountNum &&
                    mFileDetailPmt.BankAccountId == mFileDetailVendCustSum.BankAccountId &&
                    mFileDetailPmt.PaymMode == mFileDetailVendCustSum.PaymMode &&
                    mFileDetailPmt.RecordSummaryRecId == 0;
            }
        }
        else if(_advEmail)
        {
            select * from mFileDetailPmt
            order by mFileDetailPmt.PaymentReference
            where mFileDetailPmt.FileRecId == mSKS_EFT_File.RecId &&
                mFileDetailPmt.AccountCompany == mFileDetailVendCustSum.AccountCompany &&
                mFileDetailPmt.AccountNum == mFileDetailVendCustSum.AccountNum &&
                mFileDetailPmt.BankAccountId == mFileDetailVendCustSum.BankAccountId &&
                mFileDetailPmt.PaymMode == mFileDetailVendCustSum.PaymMode &&
                (mFileDetailPmt.FileStatus == SKS_EFT_FileStatus::AdvEmailFailed ||
                   mFileDetailPmt.FileStatus == SKS_EFT_FileStatus::FileCreated) &&
                mFileDetailPmt.RecordSummaryRecId == 0;
        }
        else
        {
            // only use the records in CompleteNoEmail status
            //SKS IHB 9615 -->
            if(mEFTSetup.IHB_Remit == NoYes::Yes && mFileDetailVendCustSum.EFTAP_IHBBankAccount != '')
            {
                select * from mFileDetailPmt
                order by mFileDetailPmt.PaymentReference
                where mFileDetailPmt.FileRecId == mSKS_EFT_File.RecId &&
                    mFileDetailPmt.AccountCompany == mFileDetailVendCustSum.AccountCompany &&
                    mFileDetailPmt.AccountNum == mFileDetailVendCustSum.AccountNum &&
                    mFileDetailPmt.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail &&
                    mFileDetailPmt.RecordSummaryRecId == 0 &&
                    mFileDetailPmt.EFTAP_IHBBankAccount == mFileDetailVendCustSum.EFTAP_IHBBankAccount;
            }
            //SKS IHB 9615 <--
            else
            {
                // only use the records in CompleteNoEmail status
                select * from mFileDetailPmt
                order by mFileDetailPmt.PaymentReference
                where mFileDetailPmt.FileRecId == mSKS_EFT_File.RecId &&
                    mFileDetailPmt.AccountCompany == mFileDetailVendCustSum.AccountCompany &&
                    mFileDetailPmt.AccountNum == mFileDetailVendCustSum.AccountNum &&
                    mFileDetailPmt.BankAccountId == mFileDetailVendCustSum.BankAccountId &&
                    mFileDetailPmt.PaymMode == mFileDetailVendCustSum.PaymMode &&
                    mFileDetailPmt.FileStatus == SKS_EFT_FileStatus::CompletedNoEmail &&
                    mFileDetailPmt.RecordSummaryRecId == 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    private boolean sendMail(SKS_EFT_Module _eftModule, NoYes _advEmail = NoYes::No)
    {
       // #SysMailer        
        SysMailerMessageBuilder messageBuilder;

        InteropPermission interopPermission;

        Filename htmlDecodedFileName;
        str filePath;
        str fileName;
        str fileExtension;
        str emailSender;

        boolean ret = true;

        str html;
        container data;
        List list;
        ListEnumerator enumerator;
        ListEnumerator attachmentFileNameListEnumerator;

        int i = 1;
        int  maxAttachmentSize;

        interopPermission = new InteropPermission(InteropKind::ComInterop);
        interopPermission.assert();
        messageBuilder = new SysMailerMessageBuilder();
        CodeAccessPermission::revertAssert();

        maxAttachmentSize = parameters.MaxEmailAttachmentSize;

        //maxAttachmentSize in megabytes
        //if (maxAttachmentSize < 1)
        //    maxAttachmentSize = #maxAttachmentSizeDefault;

        //SKS-DD Begin
        emailSender = this.AssignEmailSender();
        messageBuilder.setFrom(emailSender, emailTable.SenderName)
            .setSubject(message.Subject);
        //SKS-DD End

        switch (emailTable.priority)
        {
            case eMailPriority::High:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::High);
                break;
            case eMailPriority::Low:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::Low);
                break;
            default:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::Normal);
                break;
        }

        [html, data] = SysEmailBatch::embedImages(messageBody);

        messageBuilder.setBody(html);

        list = List::create(data);
        enumerator = list.getEnumerator();
        while (enumerator.moveNext())
        {
            htmlDecodedFileName = strReplace(SysEmailTable::htmlDecode(enumerator.current()),@"/",@"\");

            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
            fileHub.runFileInquire(htmlDecodedFileName);
            if (fileHub.attrFileExists() && fileHub.attrFileSize() < (maxAttachmentSize * 1000000))
            {
                fileHub.runFileLoad();
                messageBuilder.addRelatedBodyPart(this.loadStringToStream(fileHub.fileBody()), int2Str(i));
                i++;
            }
        }

        try
        {
            retEmail = false; //9496
            this.addRecipients(messageBuilder, _eftModule);
        }
        catch
        {
            return false;
        }

        if (attachmentFileNameList)
        {
            attachmentFileNameListEnumerator = attachmentFileNameList.getEnumerator();
            while (attachmentFileNameListEnumerator.moveNext())
            {

                attachmentfileName = attachmentFileNameListEnumerator.current();
                if (attachmentfileName)
                {
                    [filePath, filename, fileExtension] = Global::fileNameSplit(attachmentfileName);

                    SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();
                    fileHub.runFileInquire(attachmentfileName);
                    if (fileHub.attrFileExists() && fileHub.attrFileSize() < (maxAttachmentSize * 1000000))
                    {
                        fileHub.runFileLoad();
                        messageBuilder.addAttachment(this.loadStringToStream(fileHub.fileBody()), System.IO.Path::GetFileName(attachmentfileName));
                    }
                    else
                    {
                        error(strfmt("@SKS1614",attachmentfileName));
                        ret=false;
                    }
                }
            }
        }

        // FDD-BS-DD remit attach -->
        SKS_PreliminaryRemitAdvice_Emailing  PreliminaryRemitAdvice = new SKS_PreliminaryRemitAdvice_Emailing();

        if (mSKS_LB_Depositor) //9496
        {
            if (_advEmail)
            {
                if (mSKS_LB_Depositor.SKS_DDR_SRS1Attachment &&  mSKS_LB_Depositor.SKS_DDR_SRS1AdvancedEmailSSRS != '')
                {
                    PreliminaryRemitAdvice.addAttachmentToMail(mSKS_EFT_File,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS1FileName,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS1FileType,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS1AdvancedEmailSSRS,
                                                               mFileDetailVendCustSum.AccountNum,
                                                               messageBuilder,
                                                               _advEmail);
                }
                if (mSKS_LB_Depositor.SKS_DDR_SRS2Attachment && mSKS_LB_Depositor.SKS_DDR_SRS2AdvancedEmailSSRS != '')
                {
                    PreliminaryRemitAdvice.addAttachmentToMail(mSKS_EFT_File,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS2FileName,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS2FileType,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS2AdvancedEmailSSRS,
                                                               mFileDetailVendCustSum.AccountNum,
                                                               messageBuilder,
                                                               _advEmail);
                }
            }
            else
            {
                if (mSKS_LB_Depositor.SKS_DDR_SRS1Attachment && mSKS_LB_Depositor.SKS_DDR_SRS1EmailSSRS != '')
                {
                    PreliminaryRemitAdvice.addAttachmentToMail(mSKS_EFT_File,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS1FileName,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS1FileType,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS1EmailSSRS,
                                                               mFileDetailVendCustSum.AccountNum,
                                                               messageBuilder,
                                                               _advEmail);
                }
                if (mSKS_LB_Depositor.SKS_DDR_SRS2Attachment && mSKS_LB_Depositor.SKS_DDR_SRS2EmailSSRS != '')
                {
                    PreliminaryRemitAdvice.addAttachmentToMail(mSKS_EFT_File,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS2FileName,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS2FileType,
                                                               mSKS_LB_Depositor.SKS_DDR_SRS2EmailSSRS,
                                                               mFileDetailVendCustSum.AccountNum,
                                                               messageBuilder,
                                                               _advEmail);
                }
            }
        }
        // FDD-BS-DD remit attach <--
        //CR - 9496 start
        else if (mSKS_EB_Vendor)
        {
            container   conReportOptions;
            if (mSKS_EB_Vendor.APSRS1Attachment && mSKS_EB_Vendor.APSRS1EmailSSRS != '')
            {
                conReportOptions += mSKS_EB_Vendor.APHideDueDateAtt1;
                PreliminaryRemitAdvice.addAPAttachmentToMail(mSKS_EFT_File,
                                                               mFileDetailVendCustSum,
                                                               mSKS_EB_Vendor.APSRS1FileName,
                                                               mSKS_EB_Vendor.APSRS1FileType,
                                                               mSKS_EB_Vendor.APSRS1EmailSSRS,                                                               
                                                               messageBuilder, NoYes::No,
                                                               mFileDetailVendCustSum.EFTAP_IHBBankAccount,// SKS IHB 9615
                                                               conReportOptions); 
            }
            conReportOptions = conNull();
            if (mSKS_EB_Vendor.APSRS2Attachment && mSKS_EB_Vendor.APSRS2EmailSSRS != '')
            {
                conReportOptions += mSKS_EB_Vendor.APHideDueDateAtt2;
                PreliminaryRemitAdvice.addAPAttachmentToMail(mSKS_EFT_File,
                                                               mFileDetailVendCustSum,
                                                               mSKS_EB_Vendor.APSRS2FileName,
                                                               mSKS_EB_Vendor.APSRS2FileType,
                                                               mSKS_EB_Vendor.APSRS2EmailSSRS,                                                               
                                                               messageBuilder, NoYes::No,
                                                               mFileDetailVendCustSum.EFTAP_IHBBankAccount,//SKS IHB 9615
                                                               conReportOptions); 
            }
        }
        //CR - 9496 end

        if(retEmail)
        {
            if (ret)
            {
                System.Exception exception;
                try
                {
                    ret = SysMailerFactory::sendNonInteractive(messageBuilder.getMessage());
                }
                catch(exception)
                {                    
                    error(exception.get_Message());
                    ret=false ;                                        
                }
            }
        }

        //remove any object handles so that objects will clean up properly
        attachmentFileNameList=null;
        if(retEmail) // 9496 -->
        {
            ret = true;
        }
        else
        {
            ret = false;
        } // 9496 <--
        return ret;

    }

]]></Source>
			</Method>
			<Method>
				<Name>sentEmailCount</Name>
				<Source><![CDATA[
    public int sentEmailCount()
    {
        return sentEmails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stripHtml</Name>
				<Source><![CDATA[
    private str stripHtml(str _str)
    {
        int pos;
        int foundpos;
        int endpos;
        TextBuffer t = new Textbuffer();
        ;
        t.setText(_str);
        //first turn breaks and paragraph marks into CR/LF
        t.replace('\\<br\\>','\r\n');
        t.replace('\\</p\\>','\r\n\r\n');

        //now just remove any other html tags to flatten into text
        pos = 0;
        while (t.find('\\<',pos))
        {
            foundpos = t.matchPos();
            t.find('\\>',foundpos+1);
            endpos=t.matchPos();
            t.delete(foundpos,(endpos - foundpos) + 1);
            pos=foundpos;
        }
        //clean up the final html encoding and return result
        return strReplace(SysEmailTable::htmlDecode(t.getText()),'&nbsp;',' ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>update_SKS_EFT_FileDetail</Name>
				<Source><![CDATA[
    private void update_SKS_EFT_FileDetail(SKS_EFT_FileStatus _keepDeleteStatus, int failCount, int sentCount)
    {
        SKS_EFT_FileDetail sks_eft_FileDetail, sks_eft_FileDetailLoc;
        SKS_EFT_FileDetailAdv   sks_eft_FileDetailAdv;
        ;


        if (emailType != SKS_EFT_EmailSendType::Test) // test emails should not update status
        {

            if (_keepDeleteStatus == SKS_EFT_FileStatus::AdvEmailFailed ||
                _keepDeleteStatus == SKS_EFT_FileStatus::AdvEmailNotSent ||
                _keepDeleteStatus == SKS_EFT_FileStatus::AdvEmailSent)
            {
                update_recordset sks_eft_FileDetail
                    setting FileStatus = _keepDeleteStatus,
                        AdvEmailFailed = sks_eft_FileDetail.AdvEmailFailed + failCount,
                        AdvEmailSent = sks_eft_FileDetail.AdvEmailSent + sentCount
                    where sks_eft_FileDetail.FileRecId == mSKS_EFT_File.RecId
                        && sks_eft_FileDetail.AccountCompany == mFileDetailVendCustSum.AccountCompany
                        && sks_eft_FileDetail.AccountNum == mFileDetailVendCustSum.AccountNum
                        && sks_eft_FileDetail.BankAccountId == mFileDetailVendCustSum.BankAccountId
                        && sks_eft_FileDetail.PaymMode == mFileDetailVendCustSum.PaymMode;

                // FDD-BS-DD remit attach Bug 7630 -->
                select firstonly * from sks_eft_FileDetailLoc
                    where sks_eft_FileDetailLoc.FileRecId == mSKS_EFT_File.RecId
                        && sks_eft_FileDetailLoc.InvoiceNumber != ''
                        && sks_eft_FileDetailLoc.AccountCompany == mFileDetailVendCustSum.AccountCompany
                        && sks_eft_FileDetailLoc.AccountNum     == mFileDetailVendCustSum.AccountNum
                        && sks_eft_FileDetailLoc.BankAccountId  == mFileDetailVendCustSum.BankAccountId
                        && sks_eft_FileDetailLoc.PaymMode       == mFileDetailVendCustSum.PaymMode;

                sks_eft_FileDetailAdv = SKS_EFT_FileDetailAdv::find(sks_eft_FileDetailLoc.PaymentLineRecId,
                                                        sks_eft_FileDetailLoc.PmtSelectionRecId,
                                                        sks_eft_FileDetailLoc.VendTransRecId,
                                                        sks_eft_FileDetailLoc.FileRecId,
                                                        true);

                sks_eft_FileDetailAdv.AdvEmailFailed    =  sks_eft_FileDetailLoc.AdvEmailFailed;
                sks_eft_FileDetailAdv.AdvEmailSent      =  sks_eft_FileDetailLoc.AdvEmailSent;
                sks_eft_FileDetailAdv.FileRecId         =  sks_eft_FileDetailLoc.FileRecId;
                sks_eft_FileDetailAdv.PaymentLineRecId  =  sks_eft_FileDetailLoc.PaymentLineRecId;
                sks_eft_FileDetailAdv.VendTransRecId    =  sks_eft_FileDetailLoc.VendTransRecId;
                sks_eft_FileDetailAdv.PmtSelectionRecId =  sks_eft_FileDetailLoc.PmtSelectionRecId;


                if (sks_eft_FileDetailAdv.RecId != 0)
                {
                    ttsbegin;
                    sks_eft_FileDetailAdv.update();
                    ttscommit;
                }
                else
                {
                    sks_eft_FileDetailAdv.insert();
                }
                // FDD-BS-DD remit attach Bug 7630 <--
            }
            else
            {
                // FDD-BS-DD remit attach Bug 7630 -->
                select firstonly * from sks_eft_FileDetailLoc
                    where sks_eft_FileDetailLoc.FileRecId == mSKS_EFT_File.RecId
                        && sks_eft_FileDetailLoc.InvoiceNumber != ''
                        && sks_eft_FileDetailLoc.AccountCompany == mFileDetailVendCustSum.AccountCompany
                        && sks_eft_FileDetailLoc.AccountNum     == mFileDetailVendCustSum.AccountNum
                        && sks_eft_FileDetailLoc.BankAccountId  == mFileDetailVendCustSum.BankAccountId
                        && sks_eft_FileDetailLoc.PaymMode       == mFileDetailVendCustSum.PaymMode;

                sks_eft_FileDetailAdv = SKS_EFT_FileDetailAdv::find(sks_eft_FileDetailLoc.PaymentLineRecId,
                                                        sks_eft_FileDetailLoc.PmtSelectionRecId,
                                                        sks_eft_FileDetailLoc.VendTransRecId,
                                                        sks_eft_FileDetailLoc.FileRecId,
                                                        true);    
                
                // FDD-BS-DD remit attach Bug 7630 <--
                
                //  <18309> reset email failure count if email is sent successfully
                ttsbegin;
                while select forupdate sks_eft_FileDetail
                    where sks_eft_FileDetail.FileRecId == mSKS_EFT_File.RecId
                        && sks_eft_FileDetail.AccountCompany == mFileDetailVendCustSum.AccountCompany
                        && sks_eft_FileDetail.AccountNum == mFileDetailVendCustSum.AccountNum
                        && sks_eft_FileDetail.BankAccountId == mFileDetailVendCustSum.BankAccountId
                        && sks_eft_FileDetail.PaymMode == mFileDetailVendCustSum.PaymMode
                        && (sks_eft_FileDetail.EFTAP_IHBBankAccount == mFileDetailVendCustSum.EFTAP_IHBBankAccount || sks_eft_FileDetail.EFTAP_IHBBankAccount =='') //SKS 9615
                {
                    sks_eft_FileDetail.FileStatus = _keepDeleteStatus;                    
                    sks_eft_FileDetail.EmailSent = sks_eft_FileDetail.EmailSent + sentCount;
                    if(sks_eft_FileDetail.EmailSent)
                    {
                        sks_eft_FileDetail.EmailFailed = 0;
                    }
                    else
                    {
                        sks_eft_FileDetail.EmailFailed = sks_eft_FileDetail.EmailFailed + failCount;
                    }                    
                    sks_eft_FileDetail.AdvEmailFailed = sks_eft_FileDetailAdv.AdvEmailFailed;
                    sks_eft_FileDetail.AdvEmailSent   = sks_eft_FileDetailAdv.AdvEmailSent;
                        
                    sks_eft_FileDetail.doUpdate();
                }
                ttscommit; 
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeARTemplates</Name>
				<Source><![CDATA[
    server static void initializeARTemplates()
    {
        SysEmailMessageTable SysEmailMessageTable;
        SysEmailTable SysEmailTable;
        ;

        SysEmailTable.Description = 'Direct debit withdrawal';
        SysEmailTable.EmailId = 'SKS_DD';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();

        SysEmailMessageTable.EmailId = 'SKS_DD';
        SysEmailMessageTable.Mail =@'
    <!--AXAPTA  TYPE="WebPageWeblet" MarginWidth="0" WebletName="WebLet108426451" MarginHeight="0" -->
    <BODY><P>This is NOT an Invoice. DO NOT SEND PAYMENT</P>
    <P>This is a notification that there will be an electronic funds withdrawal for Account %CustAccount% - %CustName% on %PaymentRegionalDate%<BR>Funds withdrawal detail:</P>
    <P><TABLE style="WIDTH: 348px; HEIGHT: 171px" border=0 cellSpacing=0 cellPadding=0 width=348>  <TBODY><TR>  <TD>&nbsp;</TD>  <TD>&nbsp;</TD></TR>  <TR>  <TD>%PMTBLOCK%</TD>  <TD></TD></TR>  <TR>  <TD>  <P>Payment Ref Number:</P></TD>
    <TD>%PaymentRef%</TD></TR>  <TR>  <TD>Payment Amount:</TD>  <TD>%PaymentAmt%</TD></TR>  <TR>
    <TD>Customer Bank Account:</TD>  <TD>%DepBankAcct%</TD></TR>  <TR>  <TD>&nbsp;</TD>  <TD>&nbsp;</TD></TR></TBODY></TABLE></P>
    <P>  <TABLE style="WIDTH: 348px; HEIGHT: 171px" border=0 cellSpacing=0 cellPadding=0 width=348>  <TBODY>  <TR>
    <TD>%INVOICEBLOCK%</TD>  <TD></TD></TR>  <TR>  <TD>Invoice Number:</TD>  <TD>%InvoiceNbr%</TD></TR>  <TR>  <TD>Invoice Date:</TD>  <TD>%InvoiceRegionalDate%</TD></TR>  <TR>  <TD>Invoice Original Amount:</TD>  <TD>%InvoiceAmt%</TD></TR>  <TR>  <TD>Invoice Amount Paid:</TD>  <TD>%InvoiceSettleInvCur%</TD></TR>  <TR>  <TD>Invoice Discount Amount:</TD>  <TD>%InvoiceDisc%</TD></TR>  <TR>  <TD>&nbsp;</TD>  <TD>&nbsp;</TD></TR>  <TR>  <TD>  <P>%INVOICEBLOCKEND%</P>  <P>%PMTBLOCKEND%</P></TD>  <TD></TD></TR></></TBODY></TABLE></P>  <P>Thank you,</P>  <P>%CompanyName%</P></BODY>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Electronic Funds Withdrawal';
        SysEmailMessageTable.XSLTMail = '' ;
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();

        SysEmailTable.Description = 'Direct debit withdrawal';
        SysEmailTable.EmailId = 'SKS_DDAtt';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();

        SysEmailMessageTable.EmailId = 'SKS_DDAtt';
        SysEmailMessageTable.Mail =@'
    <!--AXAPTA  Type="WebPageWeblet" MarginWidth="0" WebletName="WebLet108945217" MarginHeight="0" --><P>This is a notification that there will be an electronic funds withdrawal for Account %CustAccount% - %CustName% on %PaymentRegionalDate%<BR>Funds withdrawal
    detail is in the attachment (%FN%)<BR><BR>%ATTACH%Account Number: %CustAccount%<BR>Payment Date: %PaymentDateNoFormat% %PMTBLOCK%%INVOICEBLOCK%<BR>
    Cust Bank Acct, Ref Number,&nbsp;Pmt Amount, Inv Nbr, Inv Date, Inv Orig Amt, Amt Pd, Disc&nbsp;Amt<BR>%DepBankAcct%, %PaymentRef%, %PaymentAmt%, %InvoiceNbr%, %InvoiceDateNoFormat%, %InvoiceAmt%, %InvoiceSettleInvCur%, %InvoiceDisc%<BR>
    %INVOICEBLOCKEND%%PMTBLOCKEND%%ATTACHEND%</P><P>Thank you,&nbsp;<BR>%CompanyName%&nbsp;<BR><BR></P>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Electronic Funds Withdrawal';
        SysEmailMessageTable.XSLTMail = '';
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTemplates</Name>
				<Source><![CDATA[
    static void initializeTemplates()
    {
        SysEmailMessageTable SysEmailMessageTable;
        SysEmailTable SysEmailTable;
        ;
        SysEmailTable.Description = 'EFT+ remittance';
        SysEmailTable.EmailId = 'SKS_EFT';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();


        SysEmailMessageTable.EmailId = 'SKS_EFT';
        SysEmailMessageTable.Mail =@'
    <!--AXAPTA  TYPE="WebPageWeblet" MarginWidth="0" WebletName="WebLet108426451" MarginHeight="0" -->
    <BODY><P>This is&nbsp;an electronic payment remittance<FONT size=2 face="Tw Cen MT Condensed"> </FONT>for %VendName%</P>
    <P>  <TABLE style="WIDTH: 262px; HEIGHT: 133px" border=0 cellSpacing=0 cellPadding=0 width=262>  <TBODY>  <TR>  <TD>Account Number:</TD>  <TD>%VendAccount%</TD></TR>  <TR>  <TD>&nbsp;</TD>  <TD>&nbsp;</TD></TR>  <TR>  <TD>%PMTBLOCK%</TD>  <TD></TD></TR><TR>  <TD>  <P>Payment Date:</P></TD>  <TD>%PaymentRegionalDate%</TD></TR>  <TR>  <TD>  <P>Payment Ref Number:</P></TD>
    <TD>%PaymentRef%</TD></TR>  <TR>  <TD>Payment Amount:</TD>  <TD>%PaymentAmt%</TD></TR>  <TR>
    <TD>Vendor Bank Account:</TD>  <TD>%DepBankAcct%</TD></TR>  <TR>  <TD>&nbsp;</TD>  <TD>&nbsp;</TD></TR></TBODY></TABLE></P>
    <P>  <TABLE style="WIDTH: 348px; HEIGHT: 171px" border=0 cellSpacing=0 cellPadding=0 width=348>  <TBODY>  <TR>
    <TD>%INVOICEBLOCK%</TD>  <TD></TD></TR>  <TR>  <TD>Invoice Number:</TD>  <TD>%InvoiceNbr%</TD></TR>  <TR>  <TD>Invoice Date:</TD>  <TD>%InvoiceRegionalDate%</TD></TR>  <TR>  <TD>Invoice Original Amount:</TD>  <TD>%InvoiceAmt%</TD></TR>  <TR>  <TD>Invoice Amount Paid:</TD>  <TD>%InvoiceSettleInvCur%</TD></TR>  <TR>  <TD>Invoice Discount Amount:</TD>  <TD>%InvoiceDisc%</TD></TR> <TR>  <TD>Invoice Payment Id:</TD>  <TD>%PaymentID%</TD></TR> <TR>  <TD>Invoice Company Name:</TD>  <TD>%InvCompanyName%</TD></TR> <TR>  <TD>&nbsp;</TD>  <TD>&nbsp;</TD></TR>  <TR>  <TD>  <P>%INVOICEBLOCKEND%</P>  <P>%PMTBLOCKEND%</P></TD>  <TD></TD></TR></></TBODY></TABLE></P>  <P>Thank you,</P>  <P>%CompanyName%</P></BODY>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Electronic Funds Remittance';
        SysEmailMessageTable.XSLTMail = '' ;
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();

        SysEmailTable.Description = 'EFT+ remittance';
        SysEmailTable.EmailId = 'SKS_EFTAtt';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();

        SysEmailMessageTable.EmailId = 'SKS_EFTAtt';
        SysEmailMessageTable.Mail =@'
    <P>This is an electronic payment remittance notice for:<BR>%VendName%<BR>Account Number: %VendAccount%<BR>Remittance detail is in the attachment (%FN%)<BR><BR>%ATTACH%Account Number: %VendAccount% %PMTBLOCK%%INVOICEBLOCK%<BR>Payment Date,Vend Bank Acct, Ref Number,&nbsp;Pmt Amount, Inv Nbr, Inv Date, Inv Orig Amt, Amt Pd, Disc&nbsp;Amt, Document ID<BR>%PaymentDateNoFormat%, %DepBankAcct%, %PaymentRef%, %PaymentAmt%, %InvoiceNbr%, %InvoiceDateNoFormat%, %InvoiceAmt%, %InvoiceSettleInvCur%, %InvoiceDisc%, %InvoiceDocID%<BR>%INVOICEBLOCKEND%%PMTBLOCKEND%%ATTACHEND%</P>  <P>Thank you,&nbsp;<BR>%CompanyName%&nbsp;<BR><BR></P>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Electronic Funds Remittance';
        SysEmailMessageTable.XSLTMail = '';
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();

    }

]]></Source>
			</Method>
			<Method>
				<Name>mailServerTest</Name>
				<Source><![CDATA[
    server static void mailServerTest(SysEmailAddress _fromAddr, SysEmailAddress _toAddr)
    {
        System.Exception exception;

        try
        {
            var mailer = SysMailerFactory::getNonInteractiveMailer();

            if(mailer)
            {
                var messageBuilder = new SysMailerMessageBuilder();

                // From
                messageBuilder.setFrom(_fromAddr);

                // To
                messageBuilder.addTo(_toAddr);

                // Subject
                messageBuilder.setSubject("@SKS1617");

                // Message
                messageBuilder.setBody("@SKS1617");

                // Send mail
                mailer.sendNonInteractive(messageBuilder.getMessage());

                Box::info("@SKS1621");
            }
        }
        catch(exception)
        {
            error('Error trying to send email: ' + exception.Message);
            error('Stack Trace: ' + exception.StackTrace);
            Box::stop("@SKS1619");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates attachment and path
    /// </summary>
    /// <param name = "_file">Name of file</param>
    /// <param name = "_module">Module AP or AR</param>
    /// <param name = "_path">Attachment path. Used when calling from setup</param>
    /// <returns></returns>
    server static boolean validateAttachment(SKS_EB_FileName _file, SKS_EFT_Module _module, str _path = '')
    {
        SysEmailParameters parameters = SysEmailParameters::find();
        SKS_EB_FilePathName fullName;
        SKS_EB_FilePath attachPath;
        boolean ret = true;
        SKS_EFT_Setup lSKS_EFT_Setup;

        if(_path != '')
        {
            attachPath = _path;
        }
        else
        {
            select firstOnly APEMAttachPath, AREMAttachPath from lSKS_EFT_Setup;

            if(_module == SKS_EFT_Module::AP)
            {
                if(lSKS_EFT_Setup.APEMAttachPath == '')
                {
                    error("@SKS1656");
                    return false;
                }
                else
                {
                    attachPath = lSKS_EFT_Setup.APEMAttachPath;
                }
            }
            else //AR
            {
                if(lSKS_EFT_Setup.AREMAttachPath == '')
                {
                    error("@SKS1656");
                    return false;
                }
                else
                {
                    attachPath = lSKS_EFT_Setup.AREMAttachPath;
                }
            }
        }

        if(_file != '')
        {
            fullName = attachPath + @'\' + _file;

            SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct();

            fileHub.runFileInquire(fullName);
            if (!fileHub.attrFileExists())
            {
                error(strFmt("@SKS1611", attachPath));
                return false;

            }
            else if(fileHub.attrFileSize() > (parameters.maxEmailAttachmentSize * 1000000))
            {
                error("@SKS1620");
                return false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadStringToStream</Name>
				<Source><![CDATA[
    private System.IO.MemoryStream loadStringToStream(str _text)
    {
        return new System.IO.MemoryStream(new System.Text.UTF8Encoding().GetBytes(_text));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_SKS_DDRParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///  validates direct debit setups for remittance and preliminary reports
    /// </summary>
    /// <param name="_advEmailUsed">
    /// advanced email used.
    /// </param>
    /// <param name="_custAccount">
    /// customer account.
    /// </param>
    /// <param name="_custCompany">
    /// customer company.
    /// </param>
    // FDD-BS-DD remit attach - 7369CR
    public void validate_SKS_DDRParameters(NoYes    _advEmailUsed,
                                           CustAccount  _custAccount,
                                           DataAreaId   _custCompany)
    {
        str     validationMsg;


        if (mSKS_LB_Depositor.SKS_DDR_SRS1Attachment == NoYes::Yes)
        {
            if (mSKS_LB_Depositor.SKS_DDR_SRS1FileName == '')
            {
                validationMsg = strFmt("@SKS6142", _custCompany, _custAccount);
            }
        }
        if (validationMsg == '' && mSKS_LB_Depositor.SKS_DDR_SRS2Attachment == NoYes::Yes)
        {
            if (mSKS_LB_Depositor.SKS_DDR_SRS2FileName == '')
            {
                validationMsg = strFmt("@SKS6145", _custCompany, _custAccount);
            }
        }

        if (validationMsg == '' && _advEmailUsed)
        {
            if (mSKS_LB_Depositor.SKS_DDR_SRS1Attachment == NoYes::Yes
                && mSKS_LB_Depositor.SKS_DDR_SRS1AdvancedEmailSSRS == '')
            {
                validationMsg = strFmt("@SKS6140", _custCompany, _custAccount);
            }
            else if (mSKS_LB_Depositor.SKS_DDR_SRS2Attachment == NoYes::Yes
                    && mSKS_LB_Depositor.SKS_DDR_SRS2AdvancedEmailSSRS == '')
            {
                validationMsg = strFmt("@SKS6143", _custCompany, _custAccount);
            }
        }
        else if (validationMsg == '')
        {
            if (mSKS_LB_Depositor.SKS_DDR_SRS1Attachment == NoYes::Yes
                && mSKS_LB_Depositor.SKS_DDR_SRS1EmailSSRS == '')
            {
                validationMsg = strFmt("@SKS6141", _custCompany, _custAccount);
            }
            else if (mSKS_LB_Depositor.SKS_DDR_SRS2Attachment == NoYes::Yes
                    && mSKS_LB_Depositor.SKS_DDR_SRS2EmailSSRS == '')
            {
                validationMsg = strFmt("@SKS6144", _custCompany, _custAccount);
            }
        }
        if (validationMsg != '')
        {
            this.emailError(validationMsg, _advEmailUsed, SKS_EFT_Module::AR);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_SKS_APRParameters</Name>
				<Source><![CDATA[
    //CR - 9496 start
    /// <summary>
    ///  validates direct debit setups for remittance and preliminary reports
    /// </summary>
    /// <param name="_custAccount">
    /// customer account.
    /// </param>
    /// <param name="_custCompany">
    /// customer company.
    /// </param>
    // FDD-BS-DD remit attach - 7369CR
    public void validate_SKS_APRParameters(VendAccount  _vendAccount,
                                           DataAreaId   _vendCompany)
    {
        str     validationMsg;


        if (mSKS_EB_Vendor.APSRS1Attachment == NoYes::Yes)
        {
            if (mSKS_EB_Vendor.APSRS1FileName == '')
            {
                validationMsg = strFmt("@SKS:SKGSRS1FileName", _vendCompany, _vendAccount);
            }
        }
        if (validationMsg == '' && mSKS_EB_Vendor.APSRS2Attachment == NoYes::Yes)
        {
            if (mSKS_EB_Vendor.APSRS2FileName == '')
            {
                validationMsg = strFmt("@SKS:SKGSRS2FileName", _vendCompany, _vendAccount);
            }
        }
        else if (validationMsg == '')
        {
            if (mSKS_EB_Vendor.APSRS1Attachment == NoYes::Yes
                && mSKS_EB_Vendor.APSRS1EmailSSRS == '')
            {
                validationMsg = strFmt("@SKS:SKGSRS1EmailSSRS", _vendCompany, _vendAccount);
            }
            else if (mSKS_EB_Vendor.APSRS2Attachment == NoYes::Yes
                    && mSKS_EB_Vendor.APSRS2EmailSSRS == '')
            {
                validationMsg = strFmt("@SKS:SKGSRS2EmailSSRS", _vendCompany, _vendAccount);
            }
        }
        if (validationMsg != '')
        {
            this.emailError(validationMsg, NoYes::No, SKS_EFT_Module::AP);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactInfoByPurpose</Name>
				<Source><![CDATA[
    //CR - 9496 end

    /// <summary>
    /// 7536- gets contract info.
    /// </summary>
    /// <returns>
    /// returns logistic electronic address.
    /// </returns>
    public logisticsElectronicAddress getContactInfoByPurpose()
    {
        SKS_EFT_Setup                   sks_EFT_Setupbuff;
        LogisticsElectronicAddress      logisticsElectronicAddress;
        DirPartyLocation                dirPartyLocation;
        LogisticsLocationRole           locationRole;
        LogisticsElectronicAddressRole  logisticsElectronicAddressRole;

        if (mSKS_LB_Depositor.EM1Customer)
        {
            // 7536 -->
            sks_EFT_Setupbuff = SKS_EFT_Setup::findByCompany(mFileDetailVendCustSum.PaymentCompany ? mFileDetailVendCustSum.PaymentCompany : mFileDetailVendCustSum.DataAreaId); //FDD-10590
            mCustTable = CustTable::findByCompany(mFileDetailVendCustSum.AccountCompany, mFileDetailVendCustSum.AccountNum);
            if(sks_EFT_Setupbuff.EmailContactPurpose != '')
            {
                changecompany(mSKS_LB_Depositor.company())//FDD-10590
                {
                    select Locator, Description from logisticsElectronicAddress
                        where logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Email
                    exists join dirPartyLocation
                        where dirPartyLocation.Location == logisticsElectronicAddress.Location &&
                                dirPartyLocation.Party == mCustTable.Party
                    exists join logisticsElectronicAddressRole
                        where logisticsElectronicAddressRole.ElectronicAddress == logisticsElectronicAddress.RecId
                    exists join locationRole
                        where locationRole.RecId == logisticsElectronicAddressRole.LocationRole
                            && locationRole.Name == sks_EFT_Setupbuff.EmailContactPurpose;
                } //FDD-10590
            }
        }

        return logisticsElectronicAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSKS_EFT_FileDetailFailCntUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// It store the value as true,when failer count is already updated from process_EFT_eMail method.
    /// </summary>
    // 9205 CR
    [DataMemberAttribute]
    public NoYes parmSKS_EFT_FileDetailFailCntUpdated(NoYes _failedCntUpdated = failedCntUpdated)
    {
        failedCntUpdated = _failedCntUpdated;
        return failedCntUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTemplateWithOutAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the E-Mail without attchment template without payment details.
    /// </summary>
    // SKS_Bug_9586
    public server static void  initializeTemplateWithOutAttachments()
    {
        SysEmailMessageTable    sysEmailMessageTable;
        SysEmailTable           sysEmailTable;

        sysEmailTable.Description = 'Direct debit withdrawal';
        sysEmailTable.EmailId = 'SKS_DD_SRS';
        sysEmailTable.SenderAddr = 'noReply@mycompany.com';
        sysEmailTable.DefaultLanguage = 'en-us';
        sysEmailTable.SenderName = 'My Company';
        sysEmailTable.Priority = eMailPriority::Normal;
        sysEmailTable.BatchGroupId = '';
        sysEmailTable.insert();

        sysEmailMessageTable.EmailId = 'SKS_DD_SRS';
        sysEmailMessageTable.Mail =@'
    <!--AXAPTA  TYPE="WebPageWeblet" MarginWidth="0" WebletName="WebLet108426451" MarginHeight="0" -->
    <BODY><P>This is NOT an Invoice. DO NOT SEND PAYMENT</P>
    <P>This is a notification that there will be an electronic funds withdrawal for Account %CustAccount% - %CustName% on %PaymentRegionalDate%<BR></P><BR>
    <P>See attachment for details.</P><BR>
     <P>Thank you,</P>  <P>%CompanyName%</P></BODY>';
        sysEmailMessageTable.LanguageId = 'en-us';
        sysEmailMessageTable.Subject = 'Electronic Funds Withdrawal';
        sysEmailMessageTable.XSLTMail = '' ;
        sysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        sysEmailMessageTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAPTemplateWithOutAttachments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the E-Mail template without payment details.
    /// </summary>
    // SKS_Bug_9586
    public server static void  initializeAPTemplateWithOutAttachments()
    {
        SysEmailMessageTable    sysEmailMessageTable;
        SysEmailTable           sysEmailTable;

        sysEmailTable.Description = 'EFT+ remittance';
        sysEmailTable.EmailId = 'SKS_EFT_SRS';
        sysEmailTable.SenderAddr = 'noReply@mycompany.com';
        sysEmailTable.DefaultLanguage = 'en-us';
        sysEmailTable.SenderName = 'My Company';
        sysEmailTable.Priority = eMailPriority::Normal;
        sysEmailTable.BatchGroupId = '';
        sysEmailTable.insert();

        sysEmailMessageTable.EmailId = 'SKS_EFT_SRS';
        SysEmailMessageTable.Mail =@'
    <P>This is an electronic payment remittance notice for:<BR>%VendName%<BR>Account Number: %VendAccount%<BR>Remittance detail is in the attachment. </P> <BR> <P>Thank you,&nbsp;<BR>%CompanyName%&nbsp;<BR><BR></P>';

        sysEmailMessageTable.LanguageId = 'en-us';
        sysEmailMessageTable.Subject = 'Electronic Funds Remittance';// SKS_Bug_10219
        sysEmailMessageTable.XSLTMail = '' ;
        sysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        sysEmailMessageTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeIHBTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the E-Mail template for IHB bank.
    /// </summary>
    // SKS_9652
    public server static void initializeIHBTemplate()
    {
        SysEmailMessageTable SysEmailMessageTable;
        SysEmailTable SysEmailTable;
        ;
        SysEmailTable.Description = 'Bank statement';
        SysEmailTable.EmailId = 'IHB_Stmt';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();


        SysEmailMessageTable.EmailId = 'IHB_Stmt';
        SysEmailMessageTable.Mail =@'
    <!--AXAPTA  TYPE="WebPageWeblet" MarginWidth="0" WebletName="WebLet108426451" MarginHeight="0" -->
    <BODY><P>Bank statement generated for bank account:<FONT size=2 face="Tw Cen MT Condensed"> </FONT> %BANKACCOUNTID% for date:%StatementDateRegional%</P>
    <P>  <TABLE style="WIDTH: 262px; HEIGHT: 133px" border=0 cellSpacing=0 cellPadding=0 width=262> <P>Thank you,</P>  <P>%CompanyName%</P></BODY>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Bank statement';
        SysEmailMessageTable.XSLTMail = '' ;
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeIHBInterestNoteTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the E-Mail template for IHB Interest note.
    /// </summary>
    // FDD 9848 OD InterestCalculation
    public server static void initializeIHBInterestNoteTemplate()
    {
        SysEmailMessageTable SysEmailMessageTable;
        SysEmailTable SysEmailTable;
        ;
        SysEmailTable.Description = 'Interest note';
        SysEmailTable.EmailId = 'SKS_ODNote';
        SysEmailTable.SenderAddr = 'noReply@mycompany.com';
        SysEmailTable.DefaultLanguage = 'en-us';
        SysEmailTable.SenderName = 'My Company';
        SysEmailTable.Priority = eMailPriority::Normal;
        SysEmailTable.BatchGroupId = '';
        SysEmailTable.insert();


        SysEmailMessageTable.EmailId = 'SKS_ODNote';
        SysEmailMessageTable.Mail =@'
    <!--AXAPTA  TYPE="WebPageWeblet" MarginWidth="0" WebletName="WebLet108426451" MarginHeight="0" -->
    <BODY><P>Interest note generated for Bank account:<FONT size=2 face="Tw Cen MT Condensed"> </FONT> %BANKACCOUNTID%  for date: %InterestDateRegional%</P>
    <P>  <TABLE style="WIDTH: 262px; HEIGHT: 133px" border=0 cellSpacing=0 cellPadding=0 width=262>';
        SysEmailMessageTable.LanguageId = 'en-us';
        SysEmailMessageTable.Subject = 'Interest note';
        SysEmailMessageTable.XSLTMail = '' ;
        SysEmailMessageTable.LayoutType = SysEmailLayoutType::StaticLayout;
        SysEmailMessageTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSKSCCRCPTTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// <15478>
    /// Initialize email template for CC Receipt
    /// </summary>
    public server static void initializeSKSCCRCPTTemplate()
    {
        SysEmailMessageTable SysEmailMessageTable;
        SysEmailTable SysEmailTable;
        ;
        sysEmailTable.Description = 'SKS CC Receipt';
        sysEmailTable.EmailId = 'SKS_CC_RCT';
        sysEmailTable.SenderAddr = 'noReply@mycompany.com';
        sysEmailTable.DefaultLanguage = 'en-us';
        sysEmailTable.SenderName = 'My Company';
        sysEmailTable.Priority = eMailPriority::Normal;
        sysEmailTable.BatchGroupId = '';
        sysEmailTable.insert();

        sysEmailMessageTable.EmailId = 'SKS_CC_RCT';
        SysEmailMessageTable.Mail =@'<P>This is NOT an Invoice. DO NOT SEND PAYMENT<BR>See attachment for details of your recent credit card payment.</P> <BR> <P>Thank you.</P>';
        sysEmailMessageTable.LanguageId = 'en-us';
        sysEmailMessageTable.Subject = 'Credit Card Receipt';
        SysEmailMessageTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestNoteEmailProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the E-Mail parameters and process for send email for IHB Interest note.
    /// </summary>
    // FDD 9848 OD InterestCalculation
    public  void interestNoteEmailProcess(
        SKS_IHB_CalculatedInterestSummary   _calculationSummary)
    {
        this.initilizeInterestNoteEmailParameters(_calculationSummary);
        this.sendIHBInterestNoteEMail(_calculationSummary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initilizeInterestNoteEmailParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setting the email details.
    /// </summary>
    /// <param name="_fileName">
    /// File name to attach.
    /// </param>
    /// <param name="_emailAddr">
    /// Email address to send mail.
    /// </param>
    /// <remarks>
    /// Email details setup.
    /// </remarks>
    // FDD 9848 OD InterestCalculation
    public void initilizeInterestNoteEmailParameters(
        SKS_IHB_CalculatedInterestSummary   _calculationSummary)
    {
        CompanyBankAccountId        accountId = _calculationSummary.BankAccountId;
        TransDate                   valuedate = _calculationSummary.ValueDate;
        SKS_PP_Bank                 inhouseBankSetup;

        inhouseBankSetup =SKS_PP_Bank::find(accountId, curExt());

        if (inhouseBankSetup.RecId)
        {
            doEmail = true;
            emailTable = SysEmailTable::find(inhouseBankSetup.IHB_OD_AttachTemplate);
            message = SysEmailMessageTable::find(emailTable.EmailId,emailTable.DefaultLanguage);

            if (!emailTable || !message)
            {
                info("@SKS:SKGEmailFailed");
                return;
            }
            messagebody = message.Mail;
            messagebody = strReplace(messageBody,'%BankAccountId%',accountId);
            messagebody = strReplace(messageBody,'%BankAccountName%',BankAccountTable::find(accountId).Name);
            messagebody = strReplace(messageBody,'%InterestDateRegional%',this.formatDate(valuedate,SKS_EFT_DateSetting::DateRegional));
            messagebody = strReplace(messageBody,'%InterestDateNoFormat%',this.formatDate(valuedate,SKS_EFT_DateSetting::DateYYYYMMDD));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendIHBInterestNoteEMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// process for send email for IHB Interest note.
    /// </summary>
    // FDD 9848 OD InterestCalculation
    public boolean sendIHBInterestNoteEMail(
        SKS_IHB_CalculatedInterestSummary   _calculationSummary)
    {
        SysMailerMessageBuilder     messageBuilder;
        SKS_PP_Bank                 inhouseBankSetup;
        str                         html;
        container                   data;
        boolean                     ret = true;
        CompanyBankAccountId        accountId = _calculationSummary.BankAccountId;

        #File

        messageBuilder   = new SysMailerMessageBuilder();
        inhouseBankSetup =SKS_PP_Bank::find(accountId, curExt());

        messageBuilder.setFrom(emailTable.SenderAddr, emailTable.SenderName)
                      .setSubject(message.Subject);
        messageBuilder.addReplyTo(inhouseBankSetup.IHB_OD_ReplyToEmail,inhouseBankSetup.IHB_OD_ReplyToName);
        messageBuilder.addTo(inhouseBankSetup.IHB_OD_InterestNoteEmailAddress);

        switch (emailTable.priority)
        {
            case eMailPriority::High:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::High);
                break;
            case eMailPriority::Low:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::Low);
                break;
            default:
                messageBuilder.setPriority(System.Net.Mail.MailPriority::Normal);
                break;
        }
        [html, data] = SysEmailBatch::embedImages(messageBody);

        messageBuilder.setBody(html);
        // code for PDF attachment.
        this.addInterestNoteAttachmentToMail(_calculationSummary, messageBuilder);

        if(ret)
        {
            System.Exception exception;
            try
            {
                ret = SysMailerFactory::sendNonInteractive(messageBuilder.getMessage());
            }
            catch(exception)
            {
                error(exception.get_Message());
                ret=false ;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInterestNoteAttachmentToMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// add attachment to send email for IHB Interest note.
    /// </summary>
    // FDD 9848 OD InterestCalculation
    public void addInterestNoteAttachmentToMail(
        SKS_IHB_CalculatedInterestSummary   _calculationSummary,
        SysMailerMessageBuilder             _messageBuilder
      )
    {

        SRSReportRunService                             srsReportRunService = new SrsReportRunService();
        Microsoft.Dynamics.AX.Framework.Reporting.Shared.ReportingService.ParameterValue[]  parameterValueArray;
        Map                                             reportParametersMap;
        SRSReportExecutionInfo                          executionInfo = new SRSReportExecutionInfo();
        System.Byte[]                                   reportBytes = null;

        SKS_PP_Bank                                     bankAccount = SKS_PP_Bank::find(_calculationSummary.BankAccountID);
        Filename                                        attachmentInterestNoteFileName = SKS_PP_Bank::find(bankAccount.BankAccountId).IHB_OD_FileName;
        SKS_IHB_InterestNoteContract                    contract = new SKS_IHB_InterestNoteContract();
        SKS_IHB_InterestNoteController                  ihbController;
        SRSPrintDestinationSettings                     settings;
        SRSProxy                                        srsProxy;
        ;
        attachmentInterestNoteFileName = strReplace(attachmentInterestNoteFileName,'%LegalEntityId%', curExt());
        attachmentInterestNoteFileName = strReplace(attachmentInterestNoteFileName,'%BankAccountId%', bankAccount.BankAccountId);
        attachmentInterestNoteFileName = SKS_FileNameReplace::replaceDateFormatValue(attachmentInterestNoteFileName,_calculationSummary.ValueDate,false, true);

        contract.parmBankAccount(bankAccount.RecId);
        contract.parmCalculatedInterestSummary(_calculationSummary.RecId);
        // set the controller
        ihbController = new SKS_IHB_InterestNoteController();
        ihbController.parmReportName(ssrsReportStr(SKS_IHB_InterestNote,Report));
        ihbController.parmReportContract().parmRdpContract(contract);
        // Provide printer settings
        settings = ihbController.parmReportContract().parmPrintSettings();
        settings.printMediumType(SRSPrintMediumType::Email);
        settings.fileFormat(bankAccount.IHB_OD_FileType);
        ihbController.parmReportContract().parmReportServerConfig(SRSConfiguration::getDefaultServerConfiguration());
        ihbController.parmReportContract().parmReportExecutionInfo(executionInfo);

        srsReportRunService.getReportDataContract(ihbController.parmreportcontract().parmReportName());
        srsReportRunService.preRunReport(ihbController.parmreportcontract());

        // 19239 Docentric integration 03Jun2022 ->
        SKS_RenderResult renderResult = new SKS_RenderResult();
        this.renderAttachment(ihbController, renderResult);
        reportBytes = renderResult.reportBytes();

        if (!reportBytes)
        {
            reportParametersMap = srsReportRunService.createParamMapFromContract(ihbController.parmReportContract());
            parameterValueArray = SrsReportRunUtil::getParameterValueArray(reportParametersMap);

            srsProxy = SRSProxy::constructWithConfiguration(ihbController.parmReportContract().parmReportServerConfig());
            // Actual rendering to byte array
            reportBytes = srsproxy.renderReportToByteArray(ihbController.parmreportcontract().parmreportpath(),
                                                      parameterValueArray,
                                                      settings.fileFormat(),
                                                      settings.deviceinfo());
        }

        _messageBuilder.addAttachment(new System.IO.MemoryStream(reportBytes), attachmentInterestNoteFileName + '.' + enum2Str(settings.fileFormat()));

    }

]]></Source>
			</Method>
			<Method>
				<Name>AddInternalBCCEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// SIGNATURE IS LOCKED BY CUSTOMIZATION
    /// </summary>
    /// <param name = "_SKS_EFT_Setup">EFT SETUP</param>
    /// <param name = "messageBuilder">messageBuilder</param>
    /// <param name = "_AdditionalFields">This container is to facilitate future changes/customizations</param>
    [SuppressBPWarning('BPParameterNotUsed', 'Parameter _AdditionalFields required for backward support')]
    public void AddInternalBCCEmail(SKS_EFT_Setup _SKS_EFT_Setup, SysMailerMessageBuilder messageBuilder, container _AdditionalFields)
    {
        if(_SKS_EFT_Setup.APInternalBCCEmail != '')
        {
            this.addAddr(messageBuilder, _SKS_EFT_Setup.APInternalBCCEmail, 'Internal Contact', SKS_EB_EMailTo::Bcc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Docentric integration
    /// </summary>
    /// <param name = "_controller">Controller</param>
    /// <param name = "_result">Result</param>
    delegate void renderAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>renderAPAttachment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Docentric integration
    /// </summary>
    /// <param name = "_controller">Controller</param>
    /// <param name = "_result">Result</param>
    delegate void renderAPAttachment(SrsReportRunController _controller, SKS_RenderResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>AssignEmailSender</Name>
				<Source><![CDATA[
    //SIGNATURE IS LOCKED BY CUSTOMIZATION
    public str AssignEmailSender()
    {
        return emailtable.SenderAddr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAPEmailRecipients</Name>
				<Source><![CDATA[
    //SIGNATURE IS LOCKED BY CUSTOMIZATION
    public void addAPEmailRecipients(SysMailerMessageBuilder messageBuilder, boolean _SkipForCustom = false)
    {
        if(!_SkipForCustom)
        {
            //SKS_9496_CR Start
            if (mSKS_EB_Vendor.EM1Vendor && mDirPartyContactInfoview.Locator)
            {
                this.addAddr(messageBuilder, mDirPartyContactInfoview.Locator, mDirPartyContactInfoview.LocationName, mSKS_EB_Vendor.EM1ToCcBcc);
            }
            // 7536 <--
            this.addAddr(messageBuilder, mSKS_EB_Vendor.EM2Addr, mSKS_EB_Vendor.EM2Name, mSKS_EB_Vendor.EM2ToCcBcc);
            this.addAddr(messageBuilder, mSKS_EB_Vendor.EM3Addr, mSKS_EB_Vendor.EM3Name, mSKS_EB_Vendor.EM3ToCcBcc);
            this.addAddr(messageBuilder, mSKS_EB_Vendor.EM4Addr, mSKS_EB_Vendor.EM4Name, mSKS_EB_Vendor.EM4ToCcBcc);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>