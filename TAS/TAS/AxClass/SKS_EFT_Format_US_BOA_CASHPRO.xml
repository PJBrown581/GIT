<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BOA_CASHPRO</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Bank of America
// CashPo
//
// Supports transaction types: Domestic High Value (Wire) and International High Value (Wire)
//
// Structure:
// Payment
/// <summary>
/// SKS_EFT_Format_US_BOA_CASHPRO extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BOA_CASHPRO extends SKS_EFT_Format
{
    #define.FormatVersion('20220609')
    #define.Comma(',')
    #define.DoubleQuote('"')
    #define.WireIntlHV('WIRE-IHV')
    int mRecordCount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Detail lines
            this.rec_Payment();
    
            next mSKS_EFT_FileDetail;
        }
        this.rec_Trailer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    //Nbr     Description
    // 1      Destination Country (2)
    // 2      Payment Type (3)
    // 3      Debit account (34)
    // 4      Drawee Country (35) [Not used]
    // 5      Originator Name (35) [Not used]
    // 6      Originator Account (34)
    // 7      Originator Address (35)
    // 8      Originator City (35)
    // 9      Originator Country (2)
    // 10     Beneficiary Name (35)
    // 11     Beneficiary Account (34)
    // 12     Beneficiary Address (35)
    // 13     Beneficiary City (35)
    // 14     Beneficiary Postal Code (35)
    // 15     Beneficiary Country (2)
    // 16     Beneficiary Bank ID (35)
    // 17     Beneficiary Type (15) [Not used]
    // 18     Beneficiary E-mail (200) [Not used]
    // 19     Beneficiary Advising (200) [Not used]
    // 20     Notes (400) [Not used]
    // 21     Send Note to Beneficiary (1) [Not used]
    // 22     Contact Name (35) [Not used]
    // 23     Contact Phone Number (34) [Not used]
    // 24     TaxPayer ID (TIN) (31) [Not used]
    // 25     TaxPayer Name Control (4) [Not used]
    // 26     TaxPayer Name (35) [Not used]
    // 27     TaxPayer Address (35) [Not used]
    // 28     TaxPayer City (35) [Not used]
    // 29     TaxPayer Postal Code (35) [Not used]
    // 30     Tax Type Code (5) [Not used]
    // 31     Tax Year (2) [Not used]
    // 32     Tax Month (2) [Not used]
    // 33     Interest Amount (13) [Not used]
    // 34     Penalty Amount (13) [Not used]
    // 35     Social Security (10) [Not used]
    // 36     Medicare (10) [Not used]
    // 37     Withholdings (10) [Not used]
    // 38     Currency (3)
    // 39     Credit Amount (13)
    // 40     Debit Amount (13)
    // 41     Value Date (10)
    // 42     System Field 1 (10) [Not used]
    // 43     System Field 2 (10) [Not used]
    // 44     System Field 3 (10) [Not used]
    // 45     System Field 4 (13) [Not used]
    // 46     System Field 5 (13) [Not used]
    // 47     System Field 6 (13) [Not used]
    // 48     System Field 7 (50) [Not used]
    // 49     System Field 8 (50) [Not used]
    // 50     System Field 9 (50) [Not used]
    // 51     System Field 10 (50) [Not used]
    // 52     System Field 11 (50) [Not used]
    // 53     System Field 12 (50) [Not used]
    // 54     System Field 13 (50) [Not used]
    // 55     System Field 14 (50) [Not used]
    // 56     System Field 15 (50) [Not used]
    // 57     System Field 16 (50) [Not used]
    // 58     System Field 17 (50) [Not used]
    // 59     System Field 18 (50) [Not used]
    // 60     System Field 19 (50) [Not used]
    // 61     System Field 20 (50) [Not used]
    // 62     Sender Reference Number (16)
    // 63     Related Reference (16) [Not used]
    // 64     Beneficiary Information Line 1 (35)
    // 65     Beneficiary Information Line 2 (35)
    // 66     Beneficiary Information Line 3 (35)
    // 67     Beneficiary Information Line 4 (35)
    // 68     Purpose of payment (35) [Not used]
    // 69     User Defined Field 1 (35) [Not used]
    // 70     User Defined Field 2 (35) [Not used]
    // 71     User Defined Field 3 (35) [Not used]
    // 72     User Defined Field 4 (35) [Not used]
    // 73     User Defined Field 5 (35) [Not used]
    // 74     Intermediary Bank ID (31)
    // 75     Receiving Bank ID (31) [Not used]
    // 76     Charges (3) [Not used]
    // 77     Receiver Information Line 1 (35) [Not used]
    // 78     Receiver Information Line 2 (35) [Not used]
    // 79     Receiver Information Line 3 (35) [Not used]
    // 80     Receiver Information Line 4 (35) [Not used]
    // 81     Template Code (35) [Not used]
    // 82     Template Name (35) [Not used]
    private boolean rec_Payment()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        mRecordCount++;
    
        // 1     Destination Country (2)
        sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WBenBankCountryRegionId,1,2)));
    
        // 2    Payment Type (3)
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileFormatPaymSpec.TransactionCode,1,3)));
    
        // 3     Debit account (34)
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.BankBankAcct,1,34)));
    
        // 4     Drawee Country (35) [Not used]
        sb.Append(this.wrapField());
    
        // 5     Originator Name (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName),1,35)));
    
        // 6     Originator Account (34) [Not used]
        sb.Append(this.wrapField());
    
        // 7     Originator Address (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr),1,35)));
    
        // 8     Originator City (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity),1,35)));
    
        // 9     Originator Country (2)
        sb.Append(this.wrapField(subStr(mSKS_EFT_Bank.WOrdPartyCountryRegionId,1,2)));
    
        // 10     Beneficiary Name (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),1,35)));
    
        // 11     Beneficiary Account (34)
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankAcct,1,34)));
    
        // 12     Beneficiary Address (35)
        sb.Append(this.wrapField(subStr(strRem(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr), '\r\n'),1,35)));
    
        // 13     Beneficiary City (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneCity),1,35)));
    
        // 14     Beneficiary Postal Code (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneZipPostal),1,35)));
    
        // 15     Beneficiary Country (2)
        sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WBeneCountryRegionId,1,2)));
    
        // 16     Beneficiary Bank ID (35)
        if(strUpr(mSKS_EFT_FileDetail.PaymSpec) == #WireIntlHV)
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepSwiftNo,1,35)));
        }
        else
        {
            sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.DepBankTransit,1,35)));
        }
    
        // 17     Beneficiary Type (15) [Not used]
        sb.Append(this.wrapField());
    
        // 18     Beneficiary E-mail (200) [Not used]
        sb.Append(this.wrapField());
    
        // 19     Beneficiary Advising (200) [Not used]
        sb.Append(this.wrapField());
    
        // 20     Notes (400) [Not used]
        sb.Append(this.wrapField());
    
        // 21     Send Note to Beneficiary (1) [Not used]
        sb.Append(this.wrapField());
    
        // 22     Contact Name (35) [Not used]
        sb.Append(this.wrapField());
    
        // 23     Contact Phone Number (34) [Not used]
        sb.Append(this.wrapField());
    
        // 24     TaxPayer ID (TIN) (31) [Not used]
        sb.Append(this.wrapField());
    
        // 25     TaxPayer Name Control (4) [Not used]
        sb.Append(this.wrapField());
    
        // 26     TaxPayer Name (35) [Not used]
        sb.Append(this.wrapField());
    
        // 27     TaxPayer Address (35) [Not used]
        sb.Append(this.wrapField());
    
        // 28     TaxPayer City (35) [Not used]
        sb.Append(this.wrapField());
    
        // 29     TaxPayer Postal Code (35) [Not used]
        sb.Append(this.wrapField());
    
        // 30     Tax Type Code (5) [Not used]
        sb.Append(this.wrapField());
    
        // 31     Tax Year (2) [Not used]
        sb.Append(this.wrapField());
    
        // 32     Tax Month (2) [Not used]
        sb.Append(this.wrapField());
    
        // 33     Interest Amount (13) [Not used]
        sb.Append(this.wrapField());
    
        // 34     Penalty Amount (13) [Not used]
        sb.Append(this.wrapField());
    
        // 35     Social Security (10) [Not used]
        sb.Append(this.wrapField());
    
        // 36     Medicare (10) [Not used]
        sb.Append(this.wrapField());
    
        // 37     Withholdings (10) [Not used]
        sb.Append(this.wrapField());
    
        // 38     Currency (3)
        sb.Append(this.wrapField(subStr(mSKS_EFT_FileDetail.PaymentCurrencyCode,1,3)));
    
        // 39     Credit Amount (13)
        // 40     Debit Amount (13)
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append(this.wrapField());
            sb.Append(this.wrapField(num2str(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur,0,2,1,0)));
        }
        else
        {
            sb.Append(this.wrapField(num2str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur),0,2,1,0)));
            sb.Append(this.wrapField());
        }
    
        // 41     Value Date (10)
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_EFT_File.EffectiveDate)));
    
        // 42     System Field 1 (10) [Not used]
        sb.Append(this.wrapField());
    
        // 43     System Field 2 (10) [Not used]
        sb.Append(this.wrapField());
    
        // 44     System Field 3 (10) [Not used]
        sb.Append(this.wrapField());
    
        // 45     System Field 4 (13) [Not used]
        sb.Append(this.wrapField());
    
        // 46     System Field 5 (13) [Not used]
        sb.Append(this.wrapField());
    
        // 47     System Field 6 (13) [Not used]
        sb.Append(this.wrapField());
    
        // 48     System Field 7 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 49     System Field 8 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 50     System Field 9 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 51     System Field 10 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 52     System Field 11 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 53     System Field 12 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 54     System Field 13 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 55     System Field 14 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 56     System Field 15 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 57     System Field 16 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 58     System Field 17 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 59     System Field 18 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 60     System Field 19 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 61     System Field 20 (50) [Not used]
        sb.Append(this.wrapField());
    
        // 62     Sender Reference Number (16)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),1,16)));
    
        // 63     Related Reference (16) [Not used]
        sb.Append(this.wrapField());
    
        // 64     Beneficiary Information Line 1 (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText1),1,35)));
    
        // 65     Beneficiary Information Line 2 (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText2),1,35)));
    
        // 66     Beneficiary Information Line 3 (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText3),1,35)));
    
        // 67     Beneficiary Information Line 4 (35)
        sb.Append(this.wrapField(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WPmtInstText4),1,35)));
    
        // 68     Purpose of payment (35) [Not used]
        sb.Append(this.wrapField());
    
        // 69     User Defined Field 1 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 70     User Defined Field 2 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 71     User Defined Field 3 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 72     User Defined Field 4 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 73     User Defined Field 5 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 74     Intermediary Bank ID (31)
        sb.Append(this.wrapField(subStr(mSKS_EFT_VendorPaym.WIntBankAcct,1,31)));
    
        // 75     Receiving Bank ID (31) [Not used]
        sb.Append(this.wrapField());
    
        // 76     Charges (3) [Not used]
        sb.Append(this.wrapField());
    
        // 77     Receiver Information Line 1 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 78     Receiver Information Line 2 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 79     Receiver Information Line 3 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 80     Receiver Information Line 4 (35) [Not used]
        sb.Append(this.wrapField());
    
        // 81     Template Code (35) [Not used]
        sb.Append(this.wrapField());
    
        // 82     Template Name (35) [Not used]
        sb.Append(this.wrapField('', false));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Trailer</Name>
				<Source><![CDATA[
    //Nbr    Description
    // 1     File Type
    // 2     Record Type
    // 3     Hash Total [Not used]
    // 4     Record Count
    private boolean rec_Trailer()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        sb.Append(this.wrapField('PAYMENT'));
        sb.Append(this.wrapField('TRAILER'));
        sb.Append(this.wrapField());
        sb.Append(this.wrapField(num2str(mRecordCount,0,0,0,0), false));
    
        this.fileWrite(sb.ToString());
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', boolean _commaDelimit = true)
    {
        if(_commaDelimit)
        {
            return #DoubleQuote + _field + #DoubleQuote + #Comma;
        }
        else
        {
            return #DoubleQuote + _field + #DoubleQuote;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>