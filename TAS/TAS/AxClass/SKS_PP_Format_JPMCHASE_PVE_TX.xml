<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_PP_Format_JPMCHASE_PVE_TX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_PP_Format_JPMCHASE_PVE_TX Extends SKS_PP_Format_BankGroup
{
    // JP MORGAN CHASE BANK - PVE - TX POSITIVE PAY FORMAT - Detail Section
        // Courtesy of: Harpreet Chawla, Hotels.com
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>txtDetail</Name>
				<Source><![CDATA[
    // Pos 1:      1   Blank
        // Pos 2-12:   11  Bank Account Number - Required
        // Pos 13-15:  3   Blank
        // Pos 16-25:  10  Check Number ie right justified - left zero fill
        // Pos 26-37:  12  Check Amt ie right justified - left zero fill
        // Pos 38-43:  6   Blank
        // Pos 44-45:  2   Void Indicator(optional): Code 26 to void checks
        // Pos 46-60:  15  Additional Info(optional) ie we are using this for 'Vendor Name'
        // Pos 61-68:  8   Date of Issue-Format(mmddyyyy)
        // Pos 69-118: 50  Payee Name (30 characters from the Check Remittance)
    protected str txtDetail()
    {
        // Note that the Working Table has records at the Voucher level (used by EFT as well)
        // They are summarized and coded - so that you can easily get just the check records
        // See the Report | Record Selection filter -
        // These filters will give the Check Records only
        // {SKS_PP_FileDetail.ComputerName} = RIPARAM('ComputerName')  - File can be used by multiple computers at once
        // and {SKS_PP_FileDetail.RecordSummary} <> 'X'                - 'X' records need to be skipped over
        // and {SKS_PP_FileDetail.FileType} = 'P'                      - 'P' records are for Positive Pay
        // Below only want records with RecSection = '20P' (payment record)
        // RecSection - defines sections:
        // 10H - Header
        // 20P - Payments
        //   RecType: (within Payments)
        //   10V - Voucher
        //   20P - PreNotes (should not be any with Pos Pay)
        // 30B - Blockfill
        // 40T - Trailer
        // The field with the summarized information for a check is RECORDSUMAMT (see below)
    
        str Amt;
        str ItemType;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        if (mSKS_PP_FileDetail.ChkType != SKS_PP_ChequeType::Cheque)
        {
            ItemType = '26';         //Chase Bank code for void checks
            Amt =  SKS_PP_StringFormats::strMoney(0.00, 12);
        }
        else
        {
            ItemType = '  ';//Two spaces
            // Always use the Record Summary Amount - will have correct total for the Check
            Amt =  SKS_PP_StringFormats::strMoney(mSKS_PP_FileDetail.ChkCuryAmt, 12);
        }
            sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(11, strLtrim(strRtrim(mSKS_PP_FileDetail.BnkBankAcct)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strFill(10, strLtrim(StrRTrim(mSKS_PP_FileDetail.ChkRefNbr)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
            sb.Append(Amt);
            sb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(ItemType);
            sb.Append(SKS_PP_StringFormats::strFill(15, strltrim(strRtrim(mSKS_PP_FileDetail.VendName)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            sb.Append(SKS_PP_StringFormats::strDateMMDDYYYY(mSKS_PP_FileDetail.ChkDocDate));
            sb.Append(SKS_PP_StringFormats::strFill(50, substr(strltrim(strrtrim(mSKS_PP_FileDetail.VendName)),1,50), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
            return sb.ToString();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>