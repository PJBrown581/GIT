<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_AE_MASHREQBANK_DSV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_AE_MASHREQBANK_DSV extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_AE_MASHREQBANK_DSV extends SKS_EFT_Format
{
    #define.FormatVersion('20220719')
    #define.DFT('DFT')
    #define.IFT('IFT')
    #define.BKT('BKT')
    #define.ECHK('ECHK')
    #define.Separator('|')
    str bankCodeText;
    int invCount;
    boolean DFTHeader = true;
    boolean CHKHeader = true;

    str dealRef, emailDetails;      //SKS#DevOps:16668
    SKS_EB_Date valuedate;
    int dealrate;
    SKS_EB_Vendor   mSKS_EB_Vendor;      //SKS#DevOps:16668

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail   invSKS_EFT_FileDetail;

        while(mSKS_EFT_FileDetail)
        {
            this.getSKS_EFT_FileFormatPaymSpec();

            //SKS_EB_Vendor
            this.getSKS_EB_Vendor();

            // Get RemittanceAddress
            this.getRemittanceAddress((mSKS_EFT_FileFormatPaymSpec.UseCheckNumber || subStr(mSKS_EFT_FileDetail.PaymSpec, 1, 3) == 'CHK'));

            // Payment Details
            switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
            {
                case #DFT:
                case #IFT:
                case #BKT:
                    if(DFTHeader)           //SKS#DevOps:15960
                    {
                        this.rec_Header();
                        DFTHeader = false;
                    }
                    this.rec_PaymentDetails();
                    while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
                    {
                        //Invoice Details
                        this.rec_InvoiceDetails(invSKS_EFT_FileDetail);
                    }
                    break;
                case #ECHK:
                    if(CHKHeader)        //SKS#DevOps:15960
                    {
                        this.rec_CHKHeader();
                        CHKHeader = false;
                    }
                    this.rec_CHKPaymentDetails();
                    while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && invSKS_EFT_FileDetail.InvoiceNumber != ''
                    {
                        //Invoice Details
                        this.rec_CHKInvoiceDetails(invSKS_EFT_FileDetail);
                    }
                    break;
            }
            invCount = 0;

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPurposeText</Name>
				<Source><![CDATA[
    private void getBankPurposeText()
    {
        msks_EFT_FileDetail_PaymentLine = sks_EFT_FileDetail_PaymentLine::find(mSKS_EFT_FileDetail.RecId);
    
        bankCodeText = this.CharacterReplacement(msks_EFT_FileDetail_PaymentLine.BankCentralBankPurposeText);
    
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSKS_EB_Vendor</Name>
				<Source><![CDATA[
    void getSKS_EB_Vendor()
    {
        if(mSKS_EB_Vendor.VendAccount != mSKS_EFT_FileDetail.AccountNum || mSKS_EB_Vendor.VendCompany != mSKS_EFT_FileDetail.AccountCompany)
        {
            mSKS_EB_Vendor = SKS_EB_Vendor::find(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmail</Name>
				<Source><![CDATA[
    private str getEmail()
    {
        VendTable vendorTable;
        DirPartyContactInfoview DirPartyContactInfoview;
        str value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('EmailID', mSKS_EFT_FileDetail.RecId));

    
        emailDetails = '';

        if(mSKS_EB_Vendor.EM1Vendor)
        {
            vendorTable = VendTable::findByCompany(mSKS_EB_Vendor.VendCompany, mSKS_EB_Vendor.VendAccount);
            select * from DirPartyContactInfoview
                where DirPartyContactInfoview.Party == vendorTable.Party && DirPartyContactInfoview.IsPrimary == true
                    &&  DirPartyContactInfoview.Type == LogisticsElectronicAddressMethodType::Email;
            if(DirPartyContactInfoView.Locator)
            {
                emailDetails = DirPartyContactInfoView.Locator;
            }
        }

        if(mSKS_EB_Vendor.EM2Addr && emailDetails)
        {
            emailDetails += ';' + mSKS_EB_Vendor.EM2Addr;
        }
        else if(mSKS_EB_Vendor.EM2Addr)
        {
            emailDetails += mSKS_EB_Vendor.EM2Addr;
        }

        if(mSKS_EB_Vendor.EM3Addr && emailDetails)
        {
            emailDetails += ';' + mSKS_EB_Vendor.EM3Addr;
        }
        else if(mSKS_EB_Vendor.EM3Addr)
        {
            emailDetails += mSKS_EB_Vendor.EM3Addr;
        }

        if(mSKS_EB_Vendor.EM4Addr && emailDetails)
        {
            emailDetails += ';' + mSKS_EB_Vendor.EM4Addr;
        }
        else if(mSKS_EB_Vendor.EM4Addr)
        {
            emailDetails += mSKS_EB_Vendor.EM4Addr;
        }
        if(value && emailDetails)//DevOps19584
        {
            emailDetails += ';' + value;
        }
        else if(value)
        {
            emailDetails += value;
        }
        return emailDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PaymentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_PaymentDetails
    /// </summary>
    /// <returns>true or false</returns>
    public boolean rec_PaymentDetails()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1    Record Type
        //2    Value Date
        //3    Transaction Currency
        //4    Payment Amount
        //5    Charge Account No
        //6    Charge Type
        //7    Debit Account No.
        //8    Deal Reference No
        //9    Deal Rate
        //10    Dealer Name
        //11    Deal Date
        //12    Beneficiary Name
        //13    Beneficiary Account No.
        //14    Beneficiary Bank Swift Code
        //15    Routing Code
        //16    Beneficiary Bank Name
        //17    Beneficiary Bank Address
        //18    Beneficiary Bank Location
        //19    Beneficiary Bank Country
        //20    Purpose Of Payment
        //21    Intermediary Bank Swift Code
        //22    Transfer Type
        //23    Beneficiary E-mail Id
        //24    Customer Reference No
        //25    No of Invoices

        //---------------------------------------------------------------------------------
        SKS_EFT_FileDetail       tempSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    

        this.getAdditionalValues();
        
        //1     Record Type
        sb.Append(this.wrapField('P'));

        //2     Value Date
        if(valuedate)
        {
            sb.Append(this.wrapField(date2str(valuedate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4)));
        }
        else
        {
            sb.Append(this.wrapField(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4)));
        }
        
        //3     Transaction Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //4     Payment Amount
        sb.Append(this.wrapField(num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 15));

        //5     Charge Account No
        sb.Append(this.wrapField());        //SKS#DevOps:16668

        //6     Charge Type
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('ChargesIndic', mSKS_EFT_FileDetail.RecId))));

        //7     Debit Account No.
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 12));

        //8     Deal Reference No
        sb.Append(this.wrapField(dealRef));

        //9     Deal Rate
        if(dealrate)
        {
            sb.Append(this.wrapField(num2Str(dealrate, 0, 2, 1, 0)));
        }
        else
        {
            sb.Append(this.wrapField(''));
        }

        //10    Dealer Name
        sb.Append(this.wrapField(''));

        //11    Deal Date
        sb.Append(this.wrapField(''));

        //12    Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35));

        //13    Beneficiary Account No.
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #IFT:
            case #DFT:
                if(mSKS_EFT_FileDetail.DepBankIBAN)
                {
                    sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankIBAN, 34));
                }
                else
                {
                    sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 34));
                }
                break;
            default:
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankAcct, 34));
                break;
        }

        //14    Beneficiary Bank Swift Code
        //15    Routing Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #DFT:
            case #IFT:
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepSwiftNo, 11));
                if(mSKS_EFT_FileDetail.DepSwiftNo == '')
                {
                    sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 11));
                }
                else
                {
                    sb.Append(this.wrapField(''));
                }
                break;
            default:
                sb.Append(this.wrapField(''));
                sb.Append(this.wrapField(mSKS_EFT_FileDetail.DepBankTransit, 11));
                break;
        }

        //16    Beneficiary Bank Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankName), 35));

        //17    Beneficiary Bank Address
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankAddr), 35));

        //18    Beneficiary Bank Location
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_BenBank.BenBankCity), 35));

        //19    Beneficiary Bank Country
        sb.Append(this.wrapField(this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_BenBank.BenBankCountryRegionId), 35));

        //20    Purpose Of Payment
        this.getBankPurposeText();

        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #BKT:
                sb.Append(this.wrapField(this.CharacterReplacement(bankCodeText), 25));
                break;
            default:
                sb.Append(this.wrapField(this.CharacterReplacement(bankCodeText), 70));
                break;
        }

        //21    Intermediary Bank Swift Code
        sb.Append(this.wrapField(mSKS_EFT_FileDetail_Intermediary.IntBankSwift, 11));

        //22    Transfer Type
        sb.Append(this.wrapField(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TransferType', mSKS_EFT_FileDetail.RecId))));

        //23    Beneficiary E-mail Id
        this.getEmail();            //SKS#DevOps:16668
        sb.Append(this.wrapField(emailDetails, 255));

        //24    Customer Reference No
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, 16));

        //25    No of Invoices
        select count(RecId) from tempSKS_EFT_FileDetail where tempSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && tempSKS_EFT_FileDetail.InvoiceNumber != '';
        sb.Append(this.wrapField(num2str((tempSKS_EFT_FileDetail.RecId),0,0,0,0), 3, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Header</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Header
    /// </summary>
    /// <returns>true or false</returns>
    public boolean rec_Header()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1    Record Type
        //2    Value Date
        //3    Transaction Currency
        //4    Payment Amount
        //5    Charge Account No
        //6    Charge Type
        //7    Debit Account No.
        //8    Deal Reference No
        //9    Deal Rate
        //10    Dealer Name
        //11    Deal Date
        //12    Beneficiary Name
        //13    Beneficiary Account No.
        //14    Beneficiary Bank Swift Code
        //15    Routing Code
        //16    Beneficiary Bank Name
        //17    Beneficiary Bank Address
        //18    Beneficiary Bank Location
        //19    Beneficiary Bank Country
        //20    Purpose Of Payment
        //21    Intermediary Bank Swift Code
        //22    Transfer Type
        //23    Beneficiary E-mail Id
        //24    Customer Reference No
        //25    No of Invoices

        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Record Type
        sb.Append(this.wrapField('Record Type'));

        //2     Value Date
        sb.Append(this.wrapField('Value Date'));
        
        //3     Transaction Currency
        sb.Append(this.wrapField('Transaction Currency'));

        //4     Payment Amount
        sb.Append(this.wrapField('Payment Amount'));

        //5     Charge Account No
        sb.Append(this.wrapField('Charge Account No'));

        //6     Charge Type
        sb.Append(this.wrapField('Charge Type'));

        //7     Debit Account No.
        sb.Append(this.wrapField('Debit Account No.'));

        //8     Deal Reference No
        sb.Append(this.wrapField('Deal Reference No'));

        //9     Deal Rate
        sb.Append(this.wrapField('Deal Rate'));

        //10    Dealer Name
        sb.Append(this.wrapField('Dealer Name'));

        //11    Deal Date
        sb.Append(this.wrapField('Deal Date'));

        //12    Beneficiary Name
        sb.Append(this.wrapField('Beneficiary Name'));

        //13    Beneficiary Account No.        
        sb.Append(this.wrapField('Beneficiary Account No.'));
              

        //14    Beneficiary Bank Swift Code
        sb.Append(this.wrapField('Beneficiary Bank Swift Code'));

        //15    Routing Code
        sb.Append(this.wrapField('Routing Code'));

        //16    Beneficiary Bank Name
        sb.Append(this.wrapField('Beneficiary Bank Name'));

        //17    Beneficiary Bank Address
        sb.Append(this.wrapField('Beneficiary Bank Address'));

        //18    Beneficiary Bank Location
        sb.Append(this.wrapField('Beneficiary Bank Location'));

        //19    Beneficiary Bank Country
        sb.Append(this.wrapField('Beneficiary Bank Country'));

        //20    Purpose Of Payment        
        sb.Append(this.wrapField('Purpose Of Payment'));

        //21    Intermediary Bank Swift Code
        sb.Append(this.wrapField('Intermediary Bank Swift Code'));

        //22    Transfer Type
        sb.Append(this.wrapField('Transfer Type'));

        //23    Beneficiary E-mail Id
        sb.Append(this.wrapField('Beneficiary E-mail Id'));

        //24    Customer Reference No
        sb.Append(this.wrapField('Customer Reference No'));

        //25    No of Invoices        
        sb.Append(this.wrapField('No of Invoices', 0, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CHKHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_CHKHeader
    /// </summary>
    /// <returns>true or false</returns>
    public boolean rec_CHKHeader()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Record Type
        //2     Debit Account No.
        //3     Value Date
        //4     Transaction Currency
        //5     Payment Amount
        //6     Beneficiary Name
        //7     Beneficiary Addr. Line 1
        //8     Beneficiary Addr. Line 2
        //9     Customer Reference No
        //10    Beneficiary E-mail Id
        //11    Additional Details
        //12    No of Invoices
        //13    Cheque No
        //---------------------------------------------------------------------------------        
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Record Type
        sb.Append(this.wrapField('Record Type'));

        //2     Debit Account No.
        sb.Append(this.wrapField('Debit Account No.'));

        //3     Value Date
        sb.Append(this.wrapField('Value Date'));

        //4     Transaction Currency
        sb.Append(this.wrapField('Transaction Currency'));

        //5     Payment Amount
        sb.Append(this.wrapField('Payment Amount'));

        //6     Beneficiary Name
        sb.Append(this.wrapField('Beneficiary Name'));

        //7     Beneficiary Addr. Line 1
        sb.Append(this.wrapField('Beneficiary Addr. Line 1'));

        //8     Beneficiary Addr. Line 2
        sb.Append(this.wrapField('Beneficiary Addr. Line 2'));

        //9     Customer Reference No
        sb.Append(this.wrapField('Customer Reference No'));

        //10    Beneficiary E-mail Id
        sb.Append(this.wrapField('Beneficiary E-mail Id'));

        //11    Additional Details
        sb.Append(this.wrapField('Additional Details'));

        //12    No of Invoices        
        sb.Append(this.wrapField('No of Invoices'));

        //13    Cheque No
        sb.Append(this.wrapField('Cheque No', 0, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CHKPaymentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_CHKPaymentDetails
    /// </summary>
    /// <returns>true or false</returns>
    public boolean rec_CHKPaymentDetails()
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Record Type
        //2     Debit Account No.
        //3     Value Date
        //4     Transaction Currency
        //5     Payment Amount        
        //6     Beneficiary Name
        //7     Beneficiary Addr. Line 1
        //8     Beneficiary Addr. Line 2
        //9     Customer Reference No
        //10    Beneficiary E-mail Id
        //11    Additional Details
        //12    No of Invoices
        //13    Cheque No
        //---------------------------------------------------------------------------------
        SKS_EFT_FileDetail       tempSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
    
        //1     Record Type
        sb.Append(this.wrapField('P'));

        //2     Debit Account No.
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.BankBankAcct, 12));

        //3     Value Date
        sb.Append(this.wrapField(date2str(mSKS_EFT_FileDetail.EffectiveDate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4)));

        //4     Transaction Currency
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentCurrencyCode));

        //5     Payment Amount
        sb.Append(this.wrapField(num2str((mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 15));

        //6     Beneficiary Name
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName), 35));

        //7     Beneficiary Addr. Line 1
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr), 35));

        //8     Beneficiary Addr. Line 2
        sb.Append(this.wrapField(this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2), 35));

        //9     Customer Reference No
        sb.Append(this.wrapField(mSKS_EFT_FileDetail.PaymentReference, 16));

        //10    Beneficiary E-mail Id
        this.getEmail();        //SKS#DevOps:16668
        sb.Append(this.wrapField(emailDetails, 255));

        //11    Additional Details
        sb.Append(this.wrapField());

        //12    No of Invoices
        select count(RecId) from tempSKS_EFT_FileDetail where tempSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId && tempSKS_EFT_FileDetail.InvoiceNumber != '';
        sb.Append(this.wrapField(num2str((tempSKS_EFT_FileDetail.RecId),0,0,0,0), 3));

        //13    Cheque No
        sb.Append(this.wrapField(SKS_PP_StringFormats::strRight(mSKS_EFT_FileDetail.PaymentReference, 3), 3, false));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_InvoiceDetails</Name>
				<Source><![CDATA[
    public boolean rec_InvoiceDetails(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Record Type
        //2     Invoice Serial No.
        //3     Invoice Number
        //4     Invoice Date
        //5     Invoice Description
        //6     Deductions
        //7     Invoice Amount
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        invCount++;
        //1     Record Type
        sb.Append(this.wrapField('I'));

        //2     Invoice Serial No.
        sb.Append(this.wrapField(num2str(invCount,0,0,0,0), 4));

        //3     Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 30));

        //4     Invoice Date
        sb.Append(this.wrapField(date2str(invSKS_EFT_FileDetail.InvoiceDate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4)));

        //5     Invoice Description
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt), 100));

        //6     Deductions
        sb.Append(this.wrapField(''));

        //7     Invoice Amount
        sb.Append(this.wrapField(num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 15, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_CHKInvoiceDetails</Name>
				<Source><![CDATA[
    public boolean rec_CHKInvoiceDetails(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        //---------------------------------------------------------------------------------
        //Nbr   Description
        //1     Record Type
        //2     Invoice Serial No.
        //3     Invoice Number
        //4     Invoice Description
        //5     Invoice Date
        //6     Invoice Amount
        //7     Your Ref
        //---------------------------------------------------------------------------------
        System.Text.StringBuilder sb = new System.Text.StringBuilder();

        invCount++;
        //1     Record Type
        sb.Append(this.wrapField('I'));

        //2     Invoice Serial No.
        sb.Append(this.wrapField(num2str(invCount,0,0,0,0), 4));

        //3     Invoice Number
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 13));

        //4     Invoice Description
        sb.Append(this.wrapField(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceTransactionTxt), 100));

        //5     Invoice Date
        sb.Append(this.wrapField(date2str(invSKS_EFT_FileDetail.InvoiceDate, 123, DateDay::Digits2, DateSeparator::Slash, DateMonth::Digits2, DateSeparator::Slash, DateYear::Digits4)));

        //6     Invoice Amount
        sb.Append(this.wrapField(num2str((invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur) * -1,0,2,1,0), 13, false));

        //7     Your Ref
        sb.Append(this.wrapField('', 0, false));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean _addSeparator = true)
    {
        str text;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);
    
        if(UseCheckNum && mSKS_EFT_FileDetail.PaymentLineRecId != 0)
        {
            select firstonly lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
                    where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                        && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
            lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);
    
            //Populate Remittance Information
            mRemittanceName = lLogisticsLocation.Description;
    
            vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);
    
            mRemittanceAdrLine1 = '';
            mRemittanceAdrLine2 = '';
    
            if(vendAddrArray.exists(1))
            {
                mRemittanceAdrLine1 = vendAddrArray.value(1);
                if (vendAddrArray.exists(2))
                {
                    mRemittanceAdrLine2 = vendAddrArray.value(2);
                }
            }
            mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
            mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
            mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        }
        else
        {
            mRemittanceName = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneName);
            mRemittanceAdrLine1 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr);
            mRemittanceAdrLine2 = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneAddr2);
            mRemittanceCity = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneCity);
            mRemittanceState = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneState);
            mRemittanceZipCode = this.CharacterReplacement(mSKS_EFT_FileDetail_VendAddress.BeneZipPostal);
            mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(mSKS_EFT_FileDetail_VendAddress.BeneCountryRegionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPaymentRecords</Name>
				<Source><![CDATA[
    [SuppressBPWarning('BPErrorSelectUsingFirstOnly', 'The buffer is used in next statement or in a datasource query loop.')]
    protected void selectPaymentRecords()
    {
        //------------------------------------------------------------------------------------------------------
        // Standard payment selction
        // Override if different selection is need for a format
        //------------------------------------------------------------------------------------------------------
    
        //Order by clause must match the clause in the SKS_EFT_Processing.SumByPayment
        select * from mSKS_EFT_FileDetail            
                join mSKS_EFT_FileDetail_VendAddress
                join mSKS_EFT_FileDetail_BenBank
                join mSKS_EFT_FileDetail_Intermediary
          order by mSKS_EFT_FileDetail.RecordSection,
                    mSKS_EFT_FileDetail.PaymMode,
                   mSKS_EFT_FileDetail.PaymSpec,
                   mSKS_EFT_FileDetail.EffectiveDate,
                   mSKS_EFT_FileDetail.DepCountryRegionId,
                   mSKS_EFT_FileDetail.RecordType,
                   mSKS_EFT_FileDetail.BankAccountId,
                   mSKS_EFT_FileDetail.AccountNum,
                   mSKS_EFT_FileDetail.PaymentReference,
                   mSKS_EFT_FileDetail.RecId
          where mSKS_EFT_FileDetail.FileRecId == mSKS_EFT_File.RecId &&
                mSKS_EFT_FileDetail.RecordSection == SKS_EFT_RecordSection::Payments &&
                mSKS_EFT_FileDetail.RecordSummary != SKS_EFT_RecordSummary::NonSummary &&
                mSKS_EFT_FileDetail_VendAddress.RefRecId == mSKS_EFT_FileDetail.RecId &&
                mSKS_EFT_FileDetail_BenBank.RefRecId == mSKS_EFT_FileDetail.RecId &&
                mSKS_EFT_FileDetail_Intermediary.RefRecId == mSKS_EFT_FileDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdditionalValues</Name>
				<Source><![CDATA[
    public void getAdditionalValues()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>