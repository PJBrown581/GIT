<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_LedgerJournalTransCustPaymEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class SKS_LedgerJournalTransCustPaymEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LedgerJournalTrans_OnWritten</Name>
				<Source>
          <![CDATA[
    /// <summary>
    /// 
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans), FormDataSourceEventType::Written)]
    public static void LedgerJournalTrans_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LedgerJournalTrans ledgerJournalTrans = sender.cursor();
        SKS_DD_CustVendMandPaymValidate custVendMandPaymValidate;
        CustDirectDebitMandate  custDirectDebitMandate;
        CustAccount    custAcct;

        //check if customer has mandate with limit
        if (LedgerJournalTrans.AccountType == LedgerJournalACType::Cust && CustPaymModeTable::find(ledgerJournalTrans.PaymMode).SKS_EFT_PaymMode && SKS_PP_Setup::find().RegMandateAutomation)
        {
            custAcct = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(LedgerJournalTrans.LedgerDimension);

            select firstonly crosscompany CustAccount from custDirectDebitMandate
            where custDirectDebitMandate.DataAreaId == LedgerJournalTrans.Company && custDirectDebitMandate.CustAccount == custAcct
                    && custDirectDebitMandate.SKS_DD_Limitamount != 0;

            if (custDirectDebitMandate)
            {
                custVendMandPaymValidate = SKS_DD_CustVendMandPaymValidate::construct(ledgerJournalTrans.JournalNum);
                custVendMandPaymValidate.validateCustPayment_LedgerJournalTrans();
            }

            
            FormRun element = sender.formRun();
            element.bookRefresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymReconciliationReject_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, PaymReconciliationReject), FormControlEventType::Clicked)]
    public static void PaymReconciliationReject_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun element = sender.formRun();

        //SKS-begin
        element.bookRefresh();
        //SKS-end
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTransCustPaym_Post_bookRefresh</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PostHandlerFor(formStr(LedgerJournalTransCustPaym), formMethodStr(LedgerJournalTransCustPaym, bookRefresh)),
    PostHandlerFor(formStr(LedgerJournalTransCustPaym), formMethodStr(LedgerJournalTransCustPaym, initLedger))]
    public static void LedgerJournalTransCustPaym_Post_bookRefresh(XppPrePostArgs args)
    {
        FormRun formRun = args.getThis();
        FormDesign formDesign = formRun.design(0);        
        LedgerJournalTable  ledgerJournalTable = formRun.ledgerJournalTable();
        LedgerJournalName ledgerJournalName = ledgerJournalTable.ledgerJournalName();
        FormControl sks_EFT_JournalState = formDesign.controlName(formControlStr(LedgerJournalTransCustPaym, SKS_EFT_JournalState));
        FormControl sksChangeEFTStatus = formDesign.controlName(formControlStr(LedgerJournalTransCustPaym, SKSChangeEFTStatus));
        
        FormControl sksValidateEFT = formDesign.controlName(formControlStr(LedgerJournalTransCustPaym, SKSValidateEFT));


        //VSTS11060
        SKS_EFT_Setup   lSKS_EFT_Setup;
        FormControl     sksChangeDDEFTStatusAuto = formDesign.controlName(formControlStr(LedgerJournalTransCustPaym, SKSChangeDDStatusAuto));
        FormControl     sksChangeCNPEFTStatusAuto = formDesign.controlName(formControlStr(LedgerJournalTransCustPaym, SKSChangeCNPStatusAuto));
        FormControl     sksCreatePaymReimbJournal = formDesign.controlName(formControlStr(LedgerJournalTransCustPaym, SKS_CNP_CreatePaymReimbJournal));
        FormControl     custPaymProposalCreate = formDesign.controlName(formControlStr(LedgerJournalTransCustPaym, CustPaymProposalCreate));
        //VSTS11060

        sksChangeDDEFTStatusAuto.visible(false);
        sks_EFT_JournalState.visible(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment);
        sksChangeEFTStatus.visible(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment);
        SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable, sksChangeEFTStatus, false, true);
        
        if (SKS_Table_LedgerJournalTable::checkCustReimbursement(ledgerJournalTable))
        {
            custPaymProposalCreate.visible(false);

            select firstonly CNPAutoCreate, CNPCreateSendLater from lSKS_EFT_Setup;

            sksChangeEFTStatus.enabled(lSKS_EFT_Setup.CNPCreateSendLater
                                       && (!ledgerJournalName.WorkflowApproval || ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Approved));

            sksChangeCNPEFTStatusAuto.visible(lSKS_EFT_Setup.CNPAutoCreate);
            sksChangeCNPEFTStatusAuto.enabled(lSKS_EFT_Setup.CNPAutoCreate
                                              && (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors)
                                              && (!ledgerJournalName.WorkflowApproval || ledgerJournalTable.WorkflowApprovalStatus == LedgerJournalWFApprovalStatus::Approved));
        }
        else
        {
            sksCreatePaymReimbJournal.visible(false);
            sksChangeCNPEFTStatusAuto.visible(false);
           
            //VSTS11060
            sksChangeDDEFTStatusAuto.visible(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment);
            //SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable, sksChangeDDEFTStatusAuto, false, true);

            //EFT Change state Auto Create
            select firstonly ARAutoCreate from lSKS_EFT_Setup;
            sksChangeDDEFTStatusAuto.visible(lSKS_EFT_Setup.ARAutoCreate);
    
            if((ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready || 
                ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Errors) &&
                sksChangeEFTStatus.enabled() == true)
            {
                sksChangeDDEFTStatusAuto.enabled(true);
            }
            else
            {
                sksChangeDDEFTStatusAuto.enabled(false);
            }
        }

        //VSTS11060

        // EFT+ Validate button
        sksValidateEFT.visible(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment);
        //SKS_EFT_JournalForm::setSKS_EFT_Button(ledgerJournalTable , sksValidateEFT, true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_SelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans), FormDataSourceEventType::SelectionChanged)]
    public static void LedgerJournalTrans_SelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        CustPaymModeTable custPaymModeTable;
        FormRun formRun = sender.formRun();
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans)) as FormDataSource;
        Formdesign formdesign = formrun.design(0);
        FormControl sKS_EFTAR_IHBBankAccount = formdesign.controlName(formControlStr(LedgerJournalTransCustPaym, LedgerJournalTrans_SKS_EFTAR_IHBBankAccount));
        SKS_PP_Setup sKS_PP_Setup = SKS_PP_Setup::find();
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();

        // This re-enables controls that were disabled by EFT+
        // This is needed when moving from line to line so controls get re-enabled correctly
        SKS_LedgerJournalTransCustPaymEventHandler::SKS_EFT_PaymentStatusEnable(formRun,true);
        
        SKS_LedgerJournalTransCustPaymEventHandler::ChangeButtonDeleteTransactionsState(formRun);

        // SKS_FDD_9536 -->
        if(ledgerJournalTrans.Company != curExt() && sKS_PP_Setup.IHB_Active)
        {
            sKS_EFTAR_IHBBankAccount.enabled(true);
        }
        else
        {
            sKS_EFTAR_IHBBankAccount.enabled(false);
        }

        //Enable/Disable Method of Payment and Payment Spec
        //DO Not call if a new line
        if(ledgerJournalTrans)
        {
            SKS_EFT_JournalForm::DisableARPaymModeAndSpec(ledgerJournalTrans.Company, ledgerJournalTrans.LedgerDimension, ledgerJournalTrans_ds);
            
            if(ledgerJournalTrans.SKS_EFT_ARPmtSelectionRecId != 0 || ledgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId != 0)
            {
                SKS_LedgerJournalTransCustPaymEventHandler::SKS_EFT_PaymentStatusEnable(formRun, false, true); // If transferred to EFT+, only allow reject
            }
            else
            {
                select firstOnly SKS_EFT_PaymMode, SKS_CNP_PaymMode from custPaymModeTable where custPaymModeTable.PaymMode == ledgerJournalTrans.PaymMode;
                if(custPaymModeTable.SKS_EFT_PaymMode || custPaymModeTable.SKS_CNP_PaymMode)
                {
                    SKS_LedgerJournalTransCustPaymEventHandler::SKS_EFT_PaymentStatusEnable(formRun,false);
                }  
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to enable/disable CC payments menu item buttons and controls.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans), FormDataSourceEventType::Activated)]
    public static void LedgerJournalTrans_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {        
        FormRun formRun = sender.formRun();
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans)) as FormDataSource;
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();

        //SKS-CCA-Begin
        if(ledgerJournalTrans)
        {            
            FormControl sKS_CC_CustPaymTableCtrl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKS_CC_CustPaymTable));
            FormControl SKS_CC_AmtChargedCtrl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKS_CC_AmtCharged));
            FormControl SKS_CC_AmtChargedLabelCtrl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKS_CC_AmtChargedLabel));
            FormButtonControl SKS_ViewLBWorkbenchCtrl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym,SKS_ViewLBWorkbench));

            if (LedgerJournalTrans.PaymMode && sKS_CC_CustPaymTableCtrl.visible())
            {
                boolean sksIsCreditCardPayment = SKS_CC_CustPaymTable::IsCreditCardPaymMode(LedgerJournalTrans.PaymMode);
                boolean sksHasCreditCardPaymentRecord = SKS_CC_CustPaymTable::hasCreditCardPaymentRecord(ledgerJournalTrans.TableId, ledgerJournalTrans.RecId);

                SKS_CC_AmtChargedCtrl.visible(sksIsCreditCardPayment || sksHasCreditCardPaymentRecord);
                sKS_CC_CustPaymTableCtrl.enabled(sksIsCreditCardPayment || sksHasCreditCardPaymentRecord);
            }
            else
            {
                SKS_CC_AmtChargedCtrl.visible(false);
            }

            SKS_CC_AmtChargedLabelCtrl.visible(SKS_CC_AmtChargedCtrl.visible());

            if(SKS_LedgerJournalTransCustPaymEventHandler::getLBJournal(LedgerJournalTrans))
            {
                SKS_ViewLBWorkbenchCtrl.visible(true);
                SKS_ViewLBWorkbenchCtrl.text("@SKS:SKGViewWorkbench");
            }
            else
            {
                SKS_ViewLBWorkbenchCtrl.visible(false);
            }                 
       
            //SKS_LedgerJournalTransCustPaymEventHandler::setPaymModeAndSpecValue(sender);
        }
        //SKS-CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLBJournal</Name>
				<Source><![CDATA[
    private static SKS_LB_Journal getLBJournal(LedgerJournalTrans ledgerJournalTrans)
    {
        SKS_LB_Journal sks_lb_journal;
        SKS_LB_JournalAR sks_lb_journalar;

        select * from SKS_LB_Journal
            join sks_lb_journalar
                where SKS_LB_Journal.JournalID == sks_lb_journalar.JournalId
                    && SKS_LB_Journal.BatchNum == sks_lb_journalar.BatchNum
                    && ledgerJournalTrans.recid == SKS_LB_Journalar.LedgerJournalTransRecId;

        return sks_lb_journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_Deleting</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans), FormDataSourceEventType::Deleting)]
    public static void LedgerJournalTrans_Deleting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource('LedgerJournalTrans');
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();

        SKS_DD_CustTransMandApplied::deleteCustTransMandApplied(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustVendBankAccountId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, CustVendBankAccountId), FormDataFieldEventType::Modified),
    FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, PaymSpec), FormDataFieldEventType::Modified)]
    public static void CustVendBankAccountId_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        LedgerJournalTrans ledgerjournalTrans = sender.datasource().cursor();

        SKS_LedgerJournalTransCustPaymEventHandler::SKS_EFT_SetOffsetAccount(ledgerjournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerDimension_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, LedgerDimension), FormDataFieldEventType::Modified)]
    public static void LedgerDimension_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {        
        FormDataSource  ledgerJournalTrans_ds = sender.datasource();
        LedgerJournalTrans ledgerjournalTrans = sender.datasource().cursor();        
       
        // Enable/Disable Method of Payment and Payment Spec
        SKS_EFT_JournalForm::DisableARPaymModeAndSpec(ledgerjournalTrans.Company, ledgerjournalTrans.LedgerDimension, ledgerJournalTrans_ds);
        SKS_LedgerJournalTransCustPaymEventHandler::SKS_EFT_SetOffsetAccount(ledgerjournalTrans);
        //SKS_LedgerJournalTransCustPaymEventHandler::setPaymModeAndSpecValue(ledgerJournalTrans_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSValidateEFT_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, SKSValidateEFT), FormControlEventType::Clicked)]
    public static void SKSValidateEFT_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        LedgerJournalTable ledgerJournalTable = formRun.ledgerJournalTable();
        LedgerJournalTable ledgerJournalTableUpd;
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource('LedgerJournalTrans');
        SKS_DD_CustVendPaymExceptionList custVendPaymExceptionList;
        SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();

        if(SKS_Table_LedgerJournalTable::checkCustReimbursement(ledgerJournalTable))
        {
            SKS_EFT_CNPJournalValidate::validateSet(ledgerJournalTable,false,false);
        }
        else
        {
            SKS_EFT_ARJournalValidate::validateSet(ledgerJournalTable,false,false, true,lSKS_EFT_Setup.DDFormatValidMultiThread);
        }

        select firstonly RecId from custVendPaymExceptionList
            where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum && 
                custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

        if(custVendPaymExceptionList.RecId == 0)
        {
            ledgerJournalTable.selectForUpdate(true);
            ledgerJournalTable.SKS_EFT_JournalState  = SKS_EFT_JournalState::Ready;
        }
        else
        {
            ledgerJournalTable.selectForUpdate(true);
            ledgerJournalTable.SKS_EFT_JournalState  = SKS_EFT_JournalState::Errors;
        }

        ledgerJournalTable.update();

        // 7199 -->
        select firstonly RecId from custVendPaymExceptionList
            where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum && 
                custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

        if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Ready && 
            custVendPaymExceptionList.RecId == 0)
        {
            info("@SYS17146");
        }
        else
        {
            ledgerJournalTableUpd.skipDataMethods(true);    //TAS_CAR
            update_recordset ledgerJournalTableUpd
                setting SKS_EFT_JournalState  = SKS_EFT_JournalState::Errors
                where ledgerJournalTableUpd.RecId ==  ledgerJournalTable.RecId;
        }
        // 7199 <--
        formRun.bookRefresh();
        ledgerJournalTrans_ds.research(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSChangeEFTStatus_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, SKSChangeEFTStatus), FormControlEventType::Clicked)]
    public static void SKSChangeEFTStatus_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        LedgerJournalTable ledgerJournalTable;
        ledgerJournalTable = formRun.ledgerJournalTable();
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource('LedgerJournalTrans');
        SKS_DD_CustVendPaymExceptionList    custVendPaymExceptionList;
        Map                 splitJournalsMap = new Map(Types::Record, Types::String); //SKS_FDD_11060
                
        if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable))
            {
                ledgerJournalTable.update();
                formRun.bookRefresh();
                ledgerJournalTrans_ds.research(true);
            }
        }
        else
        {            
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable))
            {
                SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();
                if(SKS_Table_LedgerJournalTable::checkCustReimbursement(ledgerJournalTable))
                {
                    SKS_EFT_CNPJournalValidate::validateSet(ledgerJournalTable,false,true);

                    select RecId from custVendPaymExceptionList
                        where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
                        custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

                    if (custVendPaymExceptionList)
                    {
                        ledgerJournalTable.SKS_EFT_JournalState  = SKS_EFT_JournalState::Errors;
                    }
                    ledgerJournalTable.update();
                }
                else
                {
                    SKS_EB_SplitJournalByDate   splitJournalByDate = new SKS_EB_SplitJournalByDate();
                
                    ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::No;
                    splitJournalsMap = splitJournalByDate.splitJournalLines(ledgerJournalTable); //SKS_FDD_11060
                SKS_EFT_ARJournalValidate::validateSet(ledgerJournalTable,false,true,lSKS_EFT_Setup.DDFormatValidJournal,lSKS_EFT_Setup.DDFormatValidMultiThread);
                    select firstonly RecId from custVendPaymExceptionList
                    where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
                    custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

                    if (custVendPaymExceptionList)
                    {
                        ledgerJournalTable.SKS_EFT_JournalState  = SKS_EFT_JournalState::Errors;
                    }
                    ledgerJournalTable.update();
                    SKS_Table_LedgerJournalTable::iterateSplitJournal(splitJournalsMap, ledgerJournalTable); // SKS_FDD_105990
                  
                }


                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                {
                    info("@SKS2025");
                }
                formRun.bookRefresh();
                ledgerJournalTrans_ds.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_ViewLBWorkbench_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, SKS_ViewLBWorkbench), FormControlEventType::Clicked)]
    public static void SKS_ViewLBWorkbench_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormDataSource ledgerJournalTrans_ds = sender.formRun().dataSource('LedgerJournalTrans');
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();

        Args args = new Args();
        args.name(formstr(SKS_LB_ProcessFiles));
        args.caller(sender.formRun());
        args.record(SKS_LedgerJournalTransCustPaymEventHandler::getLBJournal(ledgerJournalTrans));

        FormRun formRun = classFactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait(true);

    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_SetOffsetAccount</Name>
				<Source><![CDATA[
    public static void SKS_EFT_SetOffsetAccount(LedgerJournalTrans _ledgerJournalTrans)
    {
        companyBankAccountId offsetAccount;
        CustTable custTable;
        DimensionDynamicAccount dimensionDynamicAccount;
    
        changeCompany(_ledgerJournalTrans.Company)
        {
            custTable = CustTable::findByLedgerDimension(_ledgerJournalTrans.LedgerDimension);
        }
    
        offsetAccount = SKS_EFT_CustomerPaym::getBankAccountId
                            (_ledgerJournalTrans.Company,
                            custTable.AccountNum,
                            _ledgerJournalTrans.PaymMode,
                            _ledgerJournalTrans.PaymSpec,
                            _ledgerJournalTrans.CustVendBankAccountId);
    
        if (offsetAccount)
        {
            dimensionDynamicAccount = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(offsetAccount, LedgerJournalACType::Bank);
            _ledgerJournalTrans.OffsetLedgerDimension = dimensionDynamicAccount;
            _ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Bank;
        }    
    }

]]></Source>
			</Method>
			<Method>
				<Name>AmountCurDebit_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to set payment status when journal line matches approved CC payment amount.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, AmountCurDebit), FormDataFieldEventType::Validated),
    FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, TransDate), FormDataFieldEventType::Validated)]
    public static void AmountCurDebit_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        LedgerJournalTrans ledgerJournalTrans = sender.datasource().cursor();
       
        //SKS-CCA-Begin
        if (LedgerJournalTrans.RecId && LedgerJournalTrans.AmountCurDebit &&
            LedgerJournalTrans.PaymentStatus != CustVendPaymStatus::Confirmed &&
            SKS_CC_CustPaymTable::IsCreditCardPaymMode(LedgerJournalTrans.PaymMode) &&
            abs(SKS_CC_CustPaymTable::getCreditCardAmountCharged(LedgerJournalTrans.TableId, LedgerJournalTrans.RecId)) == LedgerJournalTrans.AmountCurDebit)
        {
            LedgerJournalTrans.PaymentStatus = CustVendPaymStatus::Confirmed;
        }
        //SKS-CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>AmountCurCredit_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to set payment status when journal line matches approved CC payment amount.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, AmountCurCredit), FormDataFieldEventType::Modified)]    
    public static void AmountCurCredit_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        LedgerJournalTrans ledgerJournalTrans = sender.datasource().cursor();
       
        //SKS-CCA-Begin        
        if (LedgerJournalTrans.RecId && LedgerJournalTrans.AmountCurCredit &&
            LedgerJournalTrans.PaymentStatus != CustVendPaymStatus::Confirmed &&
            SKS_CC_CustPaymTable::IsCreditCardPaymMode(LedgerJournalTrans.PaymMode) &&
            SKS_CC_CustPaymTable::getCreditCardAmountCharged(LedgerJournalTrans.TableId, LedgerJournalTrans.RecId) == LedgerJournalTrans.AmountCurCredit)
        {
            LedgerJournalTrans.PaymentStatus = CustVendPaymStatus::Confirmed;
        }        
        //SKS-CCA-End        
    }

]]></Source>
			</Method>
			<Method>
				<Name>Company_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to validate field change when approved CC payments exist.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, Company), FormDataFieldEventType::Validating)]
    public static void Company_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _e)    
    {
        LedgerJournalTrans ledgerJournalTrans = _sender.datasource().cursor();
       
        //SKS-CCA-Begin
        FormDataFieldCancelEventArgs cancelEvent = _e as FormDataFieldCancelEventArgs;

        boolean isValid = !cancelEvent.cancel();        

        SelectableDataArea origCompany = LedgerJournalTrans.orig().Company;

        if (LedgerJournalTrans.RecId && LedgerJournalTrans.Company != origCompany &&
            SKS_CC_CustPaymTable::hasApprovedCreditCardPayments(LedgerJournalTrans.TableId,
                                                                LedgerJournalTrans.RecId))
        {
            isValid = checkFailed(strFmt("@SKS6315", fieldId2pname(tableNum(LedgerJournalTrans), fieldNum(LedgerJournalTrans, Company))));
        }
        
        cancelEvent.cancel(!isValid);
        //SKS-CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>CurrencyCode_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to validate field change when approved CC payments exist.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, CurrencyCode), FormDataFieldEventType::Validating)]
    public static void CurrencyCode_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        LedgerJournalTrans ledgerJournalTrans = _sender.datasource().cursor();
       
        //SKS-CCA-Begin
        FormDataFieldCancelEventArgs cancelEvent = _e as FormDataFieldCancelEventArgs;

        boolean isValid = !cancelEvent.cancel();

        CurrencyCode origCurrencyCode = LedgerJournalTrans.orig().CurrencyCode;

        if (LedgerJournalTrans.RecId && LedgerJournalTrans.CurrencyCode != origCurrencyCode &&
            SKS_CC_CustPaymTable::hasApprovedCreditCardPayments(LedgerJournalTrans.TableId,
                                                                LedgerJournalTrans.RecId))
        {
            isValid = checkFailed(strFmt("@SKS6315", fieldId2pname(tableNum(LedgerJournalTrans), fieldNum(LedgerJournalTrans, CurrencyCode))));
        }
        
        cancelEvent.cancel(!isValid);
        //SKS-CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerDimension_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to validate field change when approved CC payments exist.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, LedgerDimension), FormDataFieldEventType::Validating)]
    public static void LedgerDimension_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        LedgerJournalTrans ledgerJournalTrans = _sender.datasource().cursor();
       
        //SKS-CCA-Begin
        FormDataFieldCancelEventArgs cancelEvent = _e as FormDataFieldCancelEventArgs;

        boolean isValid = !cancelEvent.cancel();

        DimensionDynamicAccount origLedgerDimension = LedgerJournalTrans.orig().LedgerDimension;

        if (LedgerJournalTrans.RecId && LedgerJournalTrans.LedgerDimension != origLedgerDimension &&
            SKS_CC_CustPaymTable::hasApprovedCreditCardPayments(LedgerJournalTrans.TableId,
                                                                LedgerJournalTrans.RecId))
        {
            isValid = checkFailed(strFmt("@SKS6315", fieldId2pname(tableNum(LedgerJournalTrans), fieldNum(LedgerJournalTrans, LedgerDimension))));
        }
        
        cancelEvent.cancel(!isValid);
        //SKS-CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymentStatus_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to validate field change when approved CC payments exist.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, PaymentStatus), FormDataFieldEventType::Validating)]
    public static void PaymentStatus_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        LedgerJournalTrans ledgerJournalTrans = _sender.datasource().cursor();
       
        //SKS-CCA-Begin
        FormDataFieldCancelEventArgs cancelEvent = _e as FormDataFieldCancelEventArgs;

        boolean isValid = !cancelEvent.cancel();

        if (isValid)
        {
            if (LedgerJournalTrans.PaymMode &&
                CustPaymModeTable::find(LedgerJournalTrans.PaymMode).PaymentType == CustPaymentType::CreditCard)
            {
                if (LedgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed &&
                    LedgerJournalTrans.orig().PaymentStatus != CustVendPaymStatus::Confirmed)
                {
                    isValid = checkFailed(strFmt("@SKS6314", enum2str(LedgerJournalTrans.PaymentStatus), enum2str(CustPaymentType::CreditCard)));
                }
            }
        }
        
        cancelEvent.cancel(!isValid);
        ///SKS-CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>PaymMode_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to validate field change when approved CC payments exist.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, PaymMode), FormDataFieldEventType::Validating)]
    public static void PaymMode_OnValidating(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        LedgerJournalTrans ledgerJournalTrans = _sender.datasource().cursor();
       
        //SKS-CCA-Begin
        FormDataFieldCancelEventArgs cancelEvent = _e as FormDataFieldCancelEventArgs;

        boolean isValid = !cancelEvent.cancel();

        PaymMode origPaymMode = LedgerJournalTrans.orig().PaymMode;

        if (LedgerJournalTrans.RecId && LedgerJournalTrans.PaymMode != origPaymMode &&
            SKS_CC_CustPaymTable::hasApprovedCreditCardPayments(LedgerJournalTrans.TableId,
                                                                LedgerJournalTrans.RecId))
        {
            isValid = checkFailed(strFmt("@SKS6315", fieldId2pname(tableNum(LedgerJournalTrans), fieldNum(LedgerJournalTrans, PaymMode))));
        }
        
        cancelEvent.cancel(!isValid);
        ///SKS-CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTransCustPaym_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// CCA-Used to set control visibility based on CC module being active on TAS parameters.
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormEventHandler(formStr(LedgerJournalTransCustPaym), FormEventType::Initialized)]
    public static void LedgerJournalTransCustPaym_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        //SKS-CCA-Begin
        FormRun formRun = _sender;
        boolean isSKSCCModuleActive;
        if (SKS_PP_Setup::find().ModCC == NoYes::Yes)
        {
            isSKSCCModuleActive = true;
        }

        LedgerJournalTrans ledgerJournalTrans = formRun.dataSource('LedgerJournalTrans').cursor();

        if (SKS_Table_LedgerJournalTable::checkCustReimbursement(_sender.args().record()))
        {
            
            FormControl custPaymentExecDate_BE = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, custPaymentExecDate_BE));
            custPaymentExecDate_BE.visible(false);

            FormControl sKSChangeDDStatusAutoControl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKSChangeDDStatusAuto));
            sKSChangeDDStatusAutoControl.visible(false);

            FormButtonControl sKSChangeEFTStatusControl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKSChangeEFTStatus));
            sKSChangeEFTStatusControl.text('Change Customer reimbursement status – Send file later');

            FormButtonControl sKSValidateEFTControl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKSValidateEFT));
            sKSValidateEFTControl.text('Validate customer reimbursement');
            
            FormControl buttonCreatePaym = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, buttonCreatePayment));
            buttonCreatePaym.visible(false);

            FormControl buttonDeposit = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, buttonDepositSlip));
            buttonDeposit.visible(false);
            
            FormControl buttonCustInpayment = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, CustInpayment));
            buttonCustInpayment.visible(false);

            FormControl buttonCustVendNACHAIATInfoTable_US = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, CustVendNACHAIATInfoTable_US));
            buttonCustVendNACHAIATInfoTable_US.visible(false);
            
            FormStringControl sKS_EFT_JournalState = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKS_EFT_JournalState)) as FormStringControl;
            sKS_EFT_JournalState.label('CUSTOMER REIMBURSEMENT STATE');
            sKS_EFT_JournalState.helpText('Indicates the state of this journal in the customer reimbursement process');

            formRun.design().caption('Customer reimbursement journal');

            
            
            FormStaticTextControl FormStaticTextControl1 = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, FormStaticTextControl1)) as FormStaticTextControl;

            FormStaticTextControl1.text('CUSTOMER REIMBURSEMENT STATE');
            //sKS_EFT_JournalStateCaption.text('CUSTOMER REIMBURSEMENT STATE');

            FormComboBoxControl LedgerJournalTrans_AccountType1 = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, LedgerJournalTrans_AccountType1)) as FormComboBoxControl;
            LedgerJournalTrans_AccountType1.enabled(false);
        }
        else
        {
            FormControl sKSChangeCNPStatusAuto = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKSChangeCNPStatusAuto));
            sKSChangeCNPStatusAuto.visible(false);
        }

        FormControl sKS_CC_CustPaymTableCtrl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKS_CC_CustPaymTable));
        sKS_CC_CustPaymTableCtrl.visible(isSKSCCModuleActive);
        FormControl SKS_CC_AmtChargedCtrl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKS_CC_AmtCharged));
        SKS_CC_AmtChargedCtrl.visible(isSKSCCModuleActive);
        FormControl SKS_CC_AmtChargedLabelCtrl = formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, SKS_CC_AmtChargedLabel));
        SKS_CC_AmtChargedLabelCtrl.visible(isSKSCCModuleActive);
        //SKS-CCA-End
    }

]]></Source>
			</Method>
			<Method>
				<Name>PostJournal_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, PostJournal), FormControlEventType::Clicked)]
    public static void PostJournal_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans ledgerJournalTrans = sender.formRun().dataSource('LedgerJournalTrans').cursor();
        
        if (ledgerJournalTrans.ledgerJournalTable().Posted == NoYes::Yes &&                    
            SKS_DD_CustVendPaymExceptionList::findByJournalNum(ledgerJournalTrans.JournalNum) != 0) //check if record exists for journal number
        {
            SKS_DD_CustVendPaymExceptionList::deleteExceptionList_JournalNum(ledgerJournalTrans.JournalNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFT_PaymentStatusEnable</Name>
				<Source><![CDATA[
    static void SKS_EFT_PaymentStatusEnable(FormRun  _formRun, boolean _enabled, boolean _transferred = false)
    {
        FormDataSource ledgerJournalTrans_ds = _formRun.dataSource(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans)) as FormDataSource;
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        FormControl paymReconciliationNone = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, PaymReconciliationNone));
        FormControl paymReconciliationSent = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, PaymReconciliationSent));
        FormControl paymReconciliationRecieved = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, PaymReconciliationRecieved));
        FormControl paymReconciliationConfirm = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, PaymReconciliationConfirm));
        FormControl paymReconciliationReject = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, PaymReconciliationReject));
        FormControl bankChequeReuse = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, BankChequeReuse));
        FormControl custVendPaymReconciliationDelete = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, CustVendPaymReconciliationDelete));
        FormControl custVendPaymReconciliationDeleted = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, CustVendPaymReconciliationDeleted));
        FormControl custVendPaymReconciliationSentDelete = _formRun.Design().controlName(formControlStr(LedgerJournalTransCustPaym, CustVendPaymReconciliationSentDelete));
        LedgerJournalTable  ledgerJournalTable = _formRun.ledgerJournalTable();
        
        if(_enabled)
        {
            ledgerJournalTrans_ds.object(fieldnum(LedgerJournalTrans, PaymentStatus)).enabled(true);
            paymReconciliationNone.enabled(true);
            paymReconciliationSent.enabled(true);
            paymReconciliationRecieved.enabled(true);
            paymReconciliationConfirm.enabled(true);
            paymReconciliationReject.enabled(true);
            bankChequeReuse.enabled(true);
            custVendPaymReconciliationDelete.enabled(true);
            custVendPaymReconciliationSentDelete.enabled(true);
            custVendPaymReconciliationDeleted.enabled(true);
        }
        else
        {
            paymReconciliationNone.enabled(false);
            paymReconciliationSent.enabled(false);
            paymReconciliationRecieved.enabled(false);
            paymReconciliationConfirm.enabled(false);
            paymReconciliationReject.enabled(false);

            if(_transferred)
            {
                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Rejected)
                {
                    paymReconciliationNone.enabled(true);
                }

                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Recieved)
                {
                    paymReconciliationReject.enabled(true);
                    paymReconciliationConfirm.enabled(true);
                    paymReconciliationSent.enabled(true);
                }
                    
                if(ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed)
                {
                    paymReconciliationReject.enabled(true);
                    paymReconciliationRecieved.enabled(true);
                    paymReconciliationSent.enabled(true);
                }

                if (LedgerJournalTrans.PaymentStatus == CustVendPaymStatus::Sent)
                {
                    paymReconciliationReject.enabled(true);
                    paymReconciliationRecieved.enabled(true);
                    paymReconciliationConfirm.enabled(true);
                }
         
                if(LedgerJournalTrans.PaymentStatus == CustVendPaymStatus::None)
                {
                    paymReconciliationReject.enabled(true);
                }
            }
            else
            {
                if(ledgerJournalTrans.BankChequeNum != '')
                {
                    paymReconciliationReject.enabled(true);
                }
                else
                {
                    if(ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::Rejected)
                    {
                        if(ledgerJournalTrans.PaymentStatus != CustVendPaymStatus::None)
                        {
                            ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
                            if(SKS_Table_LedgerJournalTable::checkCustReimbursement(ledgerJournalTable))
                            {   
                                SKS_LedgerJournalTransCustPaymEventHandler::setCNPStatusNoneForAllApplicable(ledgerJournalTrans);
                            }
                            else
                            {
                                SKS_LedgerJournalTransCustPaymEventHandler::setDDStatusNoneForAllApplicable(ledgerJournalTrans);
                            }

                            ledgerJournalTrans_ds.research(true);
                            info("@SKS2353");
                        }
                    }
                    else
                    {
                        paymReconciliationNone.enabled(true);
                    }
                }
            }            
            bankChequeReuse.enabled(false);
            custVendPaymReconciliationDelete.enabled(false);
            custVendPaymReconciliationSentDelete.enabled(false);
            custVendPaymReconciliationDeleted.enabled(false);
            ledgerJournalTrans_ds.object(fieldnum(LedgerJournalTrans, PaymentStatus)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ChangeButtonDeleteTransactionsState</Name>
				<Source><![CDATA[
    static void ChangeButtonDeleteTransactionsState(FormRun _formRun)
    {
        FormControl buttonDeleteTransactions = _formRun.design().controlName(formControlStr(LedgerJournalTransCustPaym, buttonDeleteTransactions));
        LedgerJournalTable ledgerJournalTable = _formRun.args().record();

        if (ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred
            || ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::PartiallyTransferred)
        {
            buttonDeleteTransactions.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSChangeDDStatusAuto_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, SKSChangeDDStatusAuto), FormControlEventType::Clicked)]
    public static void SKSChangeDDStatusAuto_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        LedgerJournalTrans trans = transDS.cursor();
        LedgerJournalTable  ledgerJournalTable;
        ledgerJournalTable  = formRun.args().record();
        LedgerJournalTrans  lLedgerJournalTrans;
        SKS_DD_CustVendPaymExceptionList    custVendPaymExceptionList;
        Map                 splitJournalsMap = new Map(Types::Record, Types::String); //SKS_FDD_11060
               
        if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable))
            {
                ledgerJournalTable.update();
                formRun.bookRefresh();
                transDS.research(true);
            }
        }
        else
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable, true))
            {
                SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();
                ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::Yes;

                SKS_EB_SplitJournalByDate   splitJournalByDate = new SKS_EB_SplitJournalByDate();

                splitJournalsMap = splitJournalByDate.splitJournalLines(ledgerJournalTable);
                SKS_EFT_ARJournalValidate::validateSet(ledgerJournalTable,false,true,lSKS_EFT_Setup.DDFormatValidJournal,lSKS_EFT_Setup.DDFormatValidMultiThread);
                select firstonly RecId from custVendPaymExceptionList
                where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
                    custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

                if(custVendPaymExceptionList)
                {
                    ledgerJournalTable.SKS_EFT_JournalState  = SKS_EFT_JournalState::Errors;
                }
                ledgerJournalTable.update();
                SKS_Table_LedgerJournalTable::iterateSplitJournal(splitJournalsMap, ledgerJournalTable); // SKS_FDD_105990
                    
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                {
                    info("@SKS2025");
                    //Bug 10659 --->
                    select firstonly lLedgerJournalTrans where lLedgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                                                    && lLedgerJournalTrans.SKS_IHB_InterComp == NoYes::No;
                    if(lLedgerJournalTrans) //Bug 10659 <---
                    {
                        SKS_EFT_Processing::PostFromAutoCreate(trans); //Bug 10659
                    }
                }

                formRun.bookRefresh();
                transDS.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKSChangeCNPStatusAuto_OnClicked</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, SKSChangeCNPStatusAuto), FormControlEventType::Clicked)]
    public static void SKSChangeCNPStatusAuto_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource transDS = formRun.dataSource('LedgerJournalTrans');
        LedgerJournalTrans trans = transDS.cursor();
        LedgerJournalTable  ledgerJournalTable;
        ledgerJournalTable  = formRun.args().record();
        LedgerJournalTrans  lLedgerJournalTrans;
        SKS_DD_CustVendPaymExceptionList    custVendPaymExceptionList;
        //Map                 splitJournalsMap = new Map(Types::Record, Types::String); //SKS_FDD_11060
               
        if(ledgerJournalTable.SKS_EFT_JournalState == SKS_EFT_JournalState::Transferred)
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable))
            {
                ledgerJournalTable.update();
                formRun.bookRefresh();
                transDS.research(true);
            }
        }
        else
        {
            if(SKS_Table_LedgerJournalTable::SetEFTJournalState(ledgerJournalTable, true))
            {
                ledgerJournalTable.SKS_EFT_AutoCreate = NoYes::Yes;

                //SKS_EB_SplitJournalByDate   splitJournalByDate = new SKS_EB_SplitJournalByDate();

                //ttsbegin;
                //splitJournalsMap = splitJournalByDate.splitJournalLines(ledgerJournalTable);

                SKS_EFT_CNPJournalValidate::validateSet(ledgerJournalTable,false,true);

                select RecId from custVendPaymExceptionList
                    where custVendPaymExceptionList.JournalId == ledgerJournalTable.JournalNum &&
                    custVendPaymExceptionList.ErrorWarning == SKS_DD_ErrorWarning::Error;

                if(custVendPaymExceptionList)
                {
                    ledgerJournalTable.SKS_EFT_JournalState  = SKS_EFT_JournalState::Errors;
                }
                ledgerJournalTable.update();
                //SKS_Table_LedgerJournalTable::iterateSplitJournal(splitJournalsMap, ledgerJournalTable); // SKS_FDD_105990
                //ttscommit;
                    
                if(ledgerJournalTable.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
                {
                    info("@SKS2025");
                    //Bug 10659 --->
                    select lLedgerJournalTrans where lLedgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                                                && lLedgerJournalTrans.SKS_IHB_InterComp == NoYes::No;
                    if(lLedgerJournalTrans) //Bug 10659 <---
                    {
                        SKS_EFT_Processing::PostFromAutoCreate(trans); //Bug 10659
                    }
                }

                formRun.bookRefresh();
                transDS.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CNP_CreatePaymReimbJournal_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, SKS_CNP_CreatePaymReimbJournal), FormControlEventType::Clicked)]
    public static void SKS_CNP_CreatePaymReimbJournal_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        FormRun formRun = sender.formRun();
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource();
        boolean allowEditSave;
        boolean allowCreateSave;
        boolean allowDeleteSave;

        // clear unused vouchers prior to invoking creation process
        LedgerJournalEngine_CustPayment ledgerJournalEngineGet = formRun.parmLedgerJournalEngine();

        ledgerJournalEngineGet.clearVoucher();

        allowEditSave = ledgerJournalTrans_ds.allowEdit();
        allowCreateSave = ledgerJournalTrans_ds.allowCreate();
        allowDeleteSave = ledgerJournalTrans_ds.allowDelete();

        ledgerJournalTrans_ds.allowEdit(false);
        ledgerJournalTrans_ds.allowCreate(false);
        ledgerJournalTrans_ds.allowDelete(false);

        ledgerJournalTrans_ds.allowEdit(allowEditSave);
        ledgerJournalTrans_ds.allowCreate(allowCreateSave);
        ledgerJournalTrans_ds.allowDelete(allowDeleteSave);

        LedgerJournalFormTrans_Payment journalFormTransGet = formRun.parmJournalFormTrans();
        journalFormTransGet.researchJournalLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnInitialized</Name>
				<Source><![CDATA[
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans), FormDataSourceEventType::Initialized)]
    public static void LedgerJournalTrans_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun headerFormRun = sender.formrun().args().caller() as FormRun;

        if(headerFormRun.args().menuItemName() == menuItemDisplayStr(SKS_CNP_CustReimbursementJour))
        {
            var formLookup = SKS_CNP_LedgerJournalTransCustPaymLookup::construct();
 
            sender.object(fieldNum(LedgerJournalTrans, PaymMode)).registerOverrideMethod(methodStr(FormDataObject, lookup),
                methodStr(SKS_CNP_LedgerJournalTransCustPaymLookup,lookupPaymMode ), formLookup);

            sender.object(fieldNum(LedgerJournalTrans, PaymSpec)).registerOverrideMethod(methodStr(FormDataObject, lookup),
                methodStr(SKS_CNP_LedgerJournalTransCustPaymLookup, lookupPaymSpec), formLookup);

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymModeAndSpecValue</Name>
				<Source><![CDATA[
    protected static void setPaymModeAndSpecValue(FormDataSource _fds)
    {
        SKS_EFT_Setup setup;

        select setup;

        _fds.object(fieldNum(LedgerJournalTrans, PaymMode)).setValue(setup.CNPDefaultPaymMode);
        _fds.object(fieldNum(LedgerJournalTrans, PaymSpec)).setValue(setup.CNPDefaultPaymSpec);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans), FormDataSourceEventType::InitValue)]
    public static void LedgerJournalTrans_OnInitValue(FormDataSource sender, FormDataSourceEventArgs e)
    {
        SKS_LedgerJournalTransCustPaymEventHandler::setPaymModeAndSpecValue(sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalEngine_CustPayment_Post_initFromCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to initialize payment mode on journal line.
    /// </summary>
    /// <param name="_ppArgs"></param>
    [PostHandlerFor(classStr(LedgerJournalEngine_CustPayment), methodStr(LedgerJournalEngine_CustPayment, initFromCustTable))]
    public static void LedgerJournalEngine_CustPayment_Post_initFromCustTable(XppPrePostArgs _ppArgs)
    {
        LedgerJournalTable  ledgerJournalTable;

        LedgerJournalTrans ledgerJournalTrans = _ppArgs.getArg(identifierStr(ledgerJournalTrans));
        SKS_EFT_Setup lSKS_EFT_Setup = SKS_EFT_Setup::find();

        select firstonly JournalName from ledgerJournalTable where ledgerJournalTable.journalnum == ledgerJournalTrans.JournalNum;
        if (LedgerJournalName::find(ledgerJournalTable.JournalName).SKS_CNP_CustReimbursementJournal)
        {
            if(lSKS_EFT_Setup.CNPDefaultPaymMode)
            {
                ledgerJournalTrans.PaymMode = lSKS_EFT_Setup.CNPDefaultPaymMode;
                ledgerJournalTrans.PaymSpec = lSKS_EFT_Setup.CNPDefaultPaymSpec;
                ledgerJournalTrans.BankTransType = CustPaymModeTable::find(lSKS_EFT_Setup.CNPDefaultPaymMode).BankTransType; //Issue20392: Set BankTransType from Default PaymMode
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_Pre_deleteForLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    [PreHandlerFor(tableStr(LedgerJournalTrans), tableStaticMethodStr(LedgerJournalTrans, deleteForLedgerJournalTable))]
    public static void LedgerJournalTrans_Pre_deleteForLedgerJournalTable(XppPrePostArgs args)
    {
        LedgerJournalTable              ledgerJournalTable;

        ledgerJournalTable = Args.getArg('_ledgerJournalTable');
        
        SKS_DD_CustTransMandApplied::deleteCustTransMandApplied_JournalNum(LedgerJournalTable.JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_Pre_deleteTransFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the <c>SKS_DD_CustTransMandApplied</c> table.
    /// </summary>
    /// <param name="args">
    /// It contains the <c>LedgerJournalTrans</c> record.
    /// </param>
    [PreHandlerFor(tableStr(LedgerJournalTrans), tableStaticMethodStr(LedgerJournalTrans, deleteTransFromVoucher))]
    public static void LedgerJournalTrans_Pre_deleteTransFromVoucher(XppPrePostArgs args)
    {
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalId                 journalNum;
        Voucher                         voucher;

        ledgerJournalTrans = args.getThis();

        journalNum = Args.getArg('_journalNum');
        voucher = Args.getArg('_voucher');

        while select  ledgerJournalTrans        //TAS_CAR
            index hint NumVoucherIdx
            where ledgerJournalTrans.JournalNum == journalNum &&
                  ledgerJournalTrans.Voucher    == voucher
        {
            SKS_DD_CustTransMandApplied::deleteCustTransMandApplied(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonApprove_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, buttonApprove), FormControlEventType::Clicked)]
    public static void buttonApprove_OnClicked(FormControl sender, FormControlEventArgs e)
    {
        LedgerJournalTrans trans = sender.formRun().dataSource('LedgerJournalTrans').cursor();
        LedgerJournalTable journal;

        select forupdate journal where journal.JournalNum == trans.journalNum;

        if (SKS_Table_LedgerJournalTable::EFTMOPExists(journal) && journal.Approver)
        {
            try
            {
                if(SKS_EFT_JournalValidate::validateSet(journal.JournalType, journal, true))
                {
                    journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Transferred;

                    if(SKS_eft_setup::find().SKS_DD_WorkFlowSendType == SKS_DD_WorkFlowSendType::SendNow && SKS_EFT_Setup::find().ARAutoCreate)
                    {
                        journal.SKS_EFT_AutoCreate = true;
                    }

                    str returnmessage = SKS_Table_LedgerJournalTable::SyncEFTRecords(true, journal);
                }
                else
                {
                    journal.SKS_EFT_JournalState = SKS_EFT_JournalState::Errors;
                }
            }
            catch
            {
            }
            finally
            {
                //commit state change
                //doUpdate to skip the event handler
                ttsbegin;
                journal.doUpdate();
                ttscommit;
            }

            if(journal.SKS_EFT_AutoCreate && journal.SKS_EFT_JournalState != SKS_EFT_JournalState::Errors)
            {
                info("@SKS2025");
                SKS_EFT_Processing::PostFromAutoCreate(trans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCNPStatusNoneForAllApplicable</Name>
				<Source><![CDATA[
    public static void setCNPStatusNoneForAllApplicable(LedgerJournalTrans _ledgerjournaltrans)
    {
        LedgerJournalTrans  lLedgerJournalTrans;
        ttsbegin;
        while select forupdate lLedgerJournalTrans
            where lLedgerJournalTrans.JournalNum == _ledgerjournaltrans.JournalNum
            && lLedgerJournalTrans.SKS_EFT_CNPPmtSelectionRecId == 0
            && lLedgerJournalTrans.PaymentStatus != CustVendPaymStatus::None
            && lLedgerJournalTrans.RecId != _ledgerjournaltrans.RecId
        {
            lLedgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
            lLedgerJournalTrans.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDDStatusNoneForAllApplicable</Name>
				<Source><![CDATA[
    public static void setDDStatusNoneForAllApplicable(LedgerJournalTrans _ledgerjournaltrans)
    {
        LedgerJournalTrans  lLedgerJournalTrans;
        ttsbegin;
        while select forupdate lLedgerJournalTrans
            where lLedgerJournalTrans.JournalNum == _ledgerjournaltrans.JournalNum
            && lLedgerJournalTrans.SKS_EFT_ARPmtSelectionRecId == 0
            && lLedgerJournalTrans.PaymentStatus != CustVendPaymStatus::None
            && lLedgerJournalTrans.RecId != _ledgerjournaltrans.RecId
        {
            lLedgerJournalTrans.PaymentStatus = CustVendPaymStatus::None;
            lLedgerJournalTrans.doUpdate();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Company_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the in-house bank account field.
    /// </summary>
    /// <param name="sender">It contains the caller datasource.</param>
    /// <param name="e">Modified event.</param>
    // SKS_FDD_9536
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, Company), FormDataFieldEventType::Modified)]
    public static void Company_OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource ledgerJournalTrans_ds = sender.dataSource();
        LedgerJournalTrans ledgerJournalTrans = ledgerJournalTrans_ds.cursor();
        FormRun formRun = ledgerJournalTrans_ds.formRun();
        Formdesign formdesign = formrun.design(0);
        FormControl sKS_EFTAR_IHBBankAccount = formdesign.controlName(formControlStr(LedgerJournalTransCustPaym, LedgerJournalTrans_SKS_EFTAR_IHBBankAccount));

        if(ledgerJournalTrans.Company != curExt() && SKS_PP_Setup::find().IHB_Active)
        {
            sKS_EFTAR_IHBBankAccount.enabled(true);
        }
        else
        {
            sKS_EFTAR_IHBBankAccount.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFTAR_IHBBankAccount_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validate In-house bank account.
    /// </summary>
    /// <param name="sender">It contains the caller datasource.</param>
    /// <param name="e">Validating event.</param>
    // SKS_FDD_9536
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, SKS_EFTAR_IHBBankAccount), FormDataFieldEventType::Validating)]
    public static void SKS_EFTAR_IHBBankAccount_OnValidating(FormDataObject sender, FormDataFieldEventArgs e)
    {
        LedgerJournalTrans      ledgerJournalTrans = sender.dataSource().cursor();
        SKS_EFTAR_PaymJourCreate::validateInHouseBank(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_EFTAR_IHBBankAccount__OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the data base while modifying this field
    /// </summary>
    /// <param name="sender">FormDataObject</param>
    /// <param name="e">FormDataFieldEventArgs</param>
    [FormDataFieldEventHandler(formDataFieldStr(LedgerJournalTransCustPaym, LedgerJournalTrans, SKS_EFTAR_IHBBankAccount), FormDataFieldEventType::Modified),
    SuppressBPWarning('BPParameterNotUsed', 'False positive')]
    public static void SKS_EFTAR_IHBBankAccount__OnModified(FormDataObject sender, FormDataFieldEventArgs e)
    {
        FormDataSource ledgerJournalTrans_ds = sender.dataSource();
        FormRun formRun = ledgerJournalTrans_ds.formRun();

        ledgerJournalTrans_ds.write();
        formRun.bookRefresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_Post_validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate In-house bank account.
    /// </summary>
    /// <param name="args">It contains the <c>LedgerJournalTrans</c> record.</param>
    // SKS_FDD_9536
    [PostHandlerFor(tableStr(LedgerJournalTrans), tableMethodStr(LedgerJournalTrans, validateWrite))]
    public static void LedgerJournalTrans_Post_validateWrite(XppPrePostArgs args)
    {
        // SKS_10238 CR -->
        SKS_PP_Bank         sKS_PP_Bank;
        SKS_PP_Bank         sKS_PP_BankLoc;
        LedgerJournalTable  ledgerJournalTable;
        // SKS_10238 CR <--
        LedgerJournalTrans  ledgerJournalTrans = args.getThis();
        DataAreaId          linkedIHBCompany;
        // SKS_10238 CR -->
        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();
        

        if(ledgerJournalTable.JournalType == LedgerJournalType::Daily &&
            !ledgerJournalTable.SKS_EFTAP_IsIHBJournal && !ledgerJournalTable.SKS_EFTAR_IsIHBJournal)
        {
            if(ledgerJournalTrans.AccountType ==  LedgerJournalACType::Bank &&
                ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                ledgerJournalTrans.OffsetLedgerDimension &&
                ledgerJournalTrans.LedgerDimension)
            {
                sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension), ledgerJournalTrans.OffsetCompany);
                sKS_PP_BankLoc = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension), ledgerJournalTrans.Company);
                //Bug-12112 --->
                if(sKS_PP_Bank && sKS_PP_BankLoc)
                {
                    checkFailed("@SKS:SKGIHBAccOffsetAcc");
                }
                // <--- Bug-12112
                if((!sKS_PP_Bank && sKS_PP_BankLoc) ||
                    (sKS_PP_Bank && !sKS_PP_BankLoc))
                {
                    if(!ledgerJournalTrans.SKS_IHB_IntercoCompany ||
                        ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension == 0)
                    {
                        checkFailed("@SKS:SKGIHBIntercoAccountVal");
                    }
                    else
                    {
                        if(sKS_PP_Bank)
                        {
                            linkedIHBCompany = sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany;
                        }
                        else
                        {
                            linkedIHBCompany = sKS_PP_BankLoc.SKS_IHBLinkedinhousebankcompany;
                        }
                        if(ledgerJournalTrans.SKS_IHB_IntercoCompany != linkedIHBCompany)
                        {
                            checkFailed("@SKS:SKGIHBIntercoCompVal");
                        }
                    }
                }
            }
            else if (ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)
            {
                if(ledgerJournalTrans.AccountType ==  LedgerJournalACType::Bank &&
                        ledgerJournalTrans.LedgerDimension)
                {
                    sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.LedgerDimension), ledgerJournalTrans.Company);
                    if(sKS_PP_Bank)
                    {
                        if(!ledgerJournalTrans.SKS_IHB_IntercoCompany ||
                            ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension == 0)
                        {
                            checkFailed("@SKS:SKGIHBIntercoAccountVal");
                        }
                        else
                        {
                            if(ledgerJournalTrans.SKS_IHB_IntercoCompany != sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                            {
                                checkFailed("@SKS:SKGIHBIntercoCompVal");
                            }
                        }
                    }
                }
                // SKS_bug_10358 -->
                else if(ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                    ledgerJournalTrans.OffsetLedgerDimension)
                {
                    sKS_PP_Bank = SKS_PP_Bank::findIHBBank(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(ledgerJournalTrans.OffsetLedgerDimension), ledgerJournalTrans.OffsetCompany);
                    if(sKS_PP_Bank)
                    {
                        if(!ledgerJournalTrans.SKS_IHB_IntercoCompany ||
                            ledgerJournalTrans.SKS_IHB_IntercoLedgerDimension == 0)
                        {
                            checkFailed("@SKS:SKGIHBIntercoAccountVal");
                        }
                        else
                        {
                            if(ledgerJournalTrans.SKS_IHB_IntercoCompany != sKS_PP_Bank.SKS_IHBLinkedinhousebankcompany)
                            {
                                checkFailed("@SKS:SKGIHBIntercoCompVal");
                            }
                        }
                    }
                }
            }
        }

        if(ledgerJournalTable.JournalType == LedgerJournalType::CustPayment)
        {
            if(ledgerJournalTrans.Company != curExt() && SKS_PP_Setup::find().IHB_Active && !ledgerJournalTrans.SKS_EFTAR_IHBBankAccount)
            {
                throw warning("@SKS:SKGIHBBankMandatory");
            }
        }

        if(ledgerJournalTable.JournalType == LedgerJournalType::Daily)
        {
            if((ledgerJournalTrans.Company != curExt() || 
                (ledgerJournalTrans.OffsetCompany && ledgerJournalTrans.Company != ledgerJournalTrans.OffsetCompany))
                && SKS_PP_Setup::find().IHB_Active && !ledgerJournalTrans.SKS_EFTGL_IHBBankAccount &&
                    (ledgerJournalTrans.AccountType ==  LedgerJournalACType::Cust ||
                    ledgerJournalTrans.AccountType ==  LedgerJournalACType::Ledger ||
                    ledgerJournalTrans.AccountType ==  LedgerJournalACType::Bank   ||
                    ledgerJournalTrans.AccountType ==  LedgerJournalACType::FixedAssets ||
                    ledgerJournalTrans.AccountType ==  LedgerJournalACType::Vend))
            {
                throw warning("@SKS:SKGIHBBankMandatory");
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_OnSelectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable or disable the IHB intercompany reversal.
    /// </summary>
    /// <param name="sender">It contains the <c>LedgerJournalTrans</c> datasource.</param>
    /// <param name="e">It contains the datasource event.</param>
    // SKS_FDD_9664
    [FormDataSourceEventHandler(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans), FormDataSourceEventType::SelectionChanged)]
    public static void LedgerJournalTrans_OnSelectionChanged(FormDataSource sender, FormDataSourceEventArgs e)
    {
        LedgerJournalTrans  lledgerJourTrans = sender.cursor();
        LedgerJournalTrans  ledgerJournalTransLoc;
        LedgerJournalTrans  lledgerJournalTrans;
        LedgerJournalTrans  lledgerJournalTransLoc;
        LedgerJournalTrans  localLedgerjournaltrans;
        boolean             ret;
        FormRun             formRun = sender.formRun();
        LedgerJournalTable  ledgerJournalTable = lledgerJourTrans.ledgerJournalTable();
        //Bug 10556 ----->
        int                     markedRecord;
        FormMenuButtonControl  buttonFunctions = formRun.design().controlName(Formcontrolstr(LedgerJournalTransCustPaym, buttonFunctions));
        FormDataSource ledgerJournalTrans_ds = formRun.dataSource(formDataSourceStr(LedgerJournalTransCustPaym, LedgerJournalTrans)) as FormDataSource;
        MultiSelectionHelper    selectionHelper = MultiSelectionHelper::construct();

        selectionHelper.parmDataSource(ledgerJournalTrans_ds);
        lledgerJournalTrans = selectionHelper.getFirst();
        markedRecord = ledgerJournalTrans_ds.recordsMarked().lastIndex();
        // ----> Bug 10556

        select count(RecId) from ledgerJournalTransLoc
            where ledgerJournalTransLoc.JournalNum == lledgerJourTrans.JournalNum &&
                ledgerJournalTransLoc.SKS_IHB_InterComp == NoYes::Yes;

        if(ledgerJournalTable.Posted &&
            ledgerJournalTransLoc.RecId > 0)
        {
            while(lledgerJournalTrans) //Bug 10556
            {
                select firstonly RecId from lledgerJournalTransLoc
                    where lledgerJournalTransLoc.SKS_EFTAR_RevOrigRecId == lledgerJournalTrans.RecId;
                if(lLedgerJournalTrans.SKS_IHB_InterComp && !lledgerJournalTransLoc)
                {
                    if(lLedgerJournalTrans.Company != curExt())
                    {
                        changecompany(lLedgerJournalTrans.Company)
                        {
                            select localLedgerjournaltrans
                                where localLedgerjournaltrans.ForeignVoucher == lLedgerJournalTrans.voucher
                                    && localLedgerJournalTrans.ForeignCompany == lLedgerJournalTrans.dataAreaId
                                    && localLedgerjournaltrans.Invoice == lLedgerJournalTrans.Invoice
                                    && localLedgerjournaltrans.AmountCurCredit == lLedgerJournalTrans.AmountCurCredit
                                    && localLedgerjournaltrans.AmountCurDebit == lLedgerJournalTrans.AmountCurDebit
                                    && localLedgerjournaltrans.TransDate == lLedgerJournalTrans.TransDate
                                    && localLedgerjournaltrans.LedgerDimension == lLedgerJournalTrans.LedgerDimension
                                    && localLedgerjournaltrans.CustTransId != 0;

                            ret = SKS_EFT_Reversal::checkCustTransCanBeReversed(localLedgerjournaltrans, null);
                        }
                    }
                    else
                    {
                        ret = SKS_EFT_Reversal::checkCustTransCanBeReversed(lLedgerJournalTrans, null);
                    }

                    if(ret)
                    {
                        //formRun.design().controlName(Formcontrolstr(LedgerJournalTransCustPaym, SKS_EFTAR_IHBInterCompReversal)).enabled(true);
                    }
                    else
                    {
                        //formRun.design().controlName(Formcontrolstr(LedgerJournalTransCustPaym, SKS_EFTAR_IHBInterCompReversal)).enabled(false);
                        break;
                    }
                }
                else
                {
                    //formRun.design().controlName(Formcontrolstr(LedgerJournalTransCustPaym, SKS_EFTAR_IHBInterCompReversal)).enabled(false);
                    break;
                }
                lledgerJournalTrans = selectionHelper.getNext(); //Bug 10556
            }
        }
        else
        {
            //formRun.design().controlName(Formcontrolstr(LedgerJournalTransCustPaym, SKS_EFTAR_IHBInterCompReversal)).enabled(false);
        }
        buttonFunctions.multiSelect(NoYes::Yes);  //Bug 10556
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_SKS_EFTAR_IHBBankAccount_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LedgerJournalTransCustPaym, LedgerJournalTrans_SKS_EFTAR_IHBBankAccount), FormControlEventType::Lookup)]
    public static void LedgerJournalTrans_SKS_EFTAR_IHBBankAccount_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SKS_PP_Bank), sender);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        LedgerJournalTrans      ledgerJournalTrans = sender.formRun().dataSource().cursor();

        queryBuildDataSource = query.addDataSource(tableNum(SKS_PP_Bank));
        queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBInhouseBank)).value("1");
        queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBLinkedinhousebankcompany)).value(ledgerJournalTrans.Company);
        sysTableLookup.addLookupfield(fieldNum(SKS_PP_Bank, BankAccountId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        FormControlCancelableSuperEventArgs event = e as FormControlCancelableSuperEventArgs;

        event.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTrans_SKS_EFTGL_IHBBankAccount_OnLookup</Name>
				<Source><![CDATA[
    [FormControlEventHandler(formControlStr(LedgerJournalTransDaily, LedgerJournalTrans_SKS_EFTGL_IHBBankAccount), FormControlEventType::Lookup)]
    public static void LedgerJournalTrans_SKS_EFTGL_IHBBankAccount_OnLookup(FormControl sender, FormControlEventArgs e)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(SKS_PP_Bank), sender);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        LedgerJournalTrans      ledgerJournalTrans = sender.formRun().dataSource().cursor();
        

        queryBuildDataSource = query.addDataSource(tableNum(SKS_PP_Bank));
        queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBInhouseBank)).value("1");

        if(ledgerJournalTrans.Company != curExt())
        {
            queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBLinkedinhousebankcompany)).value(ledgerJournalTrans.Company);
        }
        else
        {
            queryBuildDataSource.addRange(fieldNum(SKS_PP_Bank, SKS_IHBLinkedinhousebankcompany)).value(ledgerJournalTrans.OffsetCompany);
        }

        sysTableLookup.addLookupfield(fieldNum(SKS_PP_Bank, BankAccountId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        FormControlCancelableSuperEventArgs event = e as FormControlCancelableSuperEventArgs;

        event.CancelSuperCall();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>