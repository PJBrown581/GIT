<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_SE_BANKGIROT_80_AR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Auto giro payments for Bankgirot 
/// </summary>
/// <summary>
/// SKS_EFT_Format_SE_BANKGIROT_80_AR extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_SE_BANKGIROT_80_AR extends SKS_EFT_Format
{
    #define.FormatVersion('20221008')
    #define.GIRO_NORM('GIRO-NORM')
    #define.GIRO_URGP('GIRO-URGP')
    
    BankAccountTable        mBankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// formatStructure
    /// </summary>
    protected void formatStructure()
    {
        // Get SKS_EFT_FileFormatPaymSpec
        this.getSKS_EFT_FileFormatPaymSpec();

        if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
        {
            // get SKS_EFTAR_Bank
            this.getSKS_EFTAR_Bank();

            // Get Bank account
            mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
        }
        
        // Opening Record
        this.rec_TK01();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            // Details
            this.rec_Details();

            next mSKS_EFT_FileDetail;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TK01</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_TK01
    /// </summary>
    /// <returns>true or false</returns>
    //Nbr   Content
    // 1    Transaction code                                        (    1)
    // 2    Date written                                            ( 3-10)
    // 3    Layout name                                             ( 11-18)
    // 4    Reserved field                                          ( 19-62)
    // 5    Payee's customer number                                 ( 63-68)
    // 6    Payee's bankgiro number                                 ( 69-78)
    // 7    Reserved field                                          ( 79-80)
    
    public boolean rec_TK01()
    {
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
        
        // 1    Transaction code                                        (    1)
        sb.Append('01');

        // 2    Date written                                            ( 3-10)
        sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None));

        // 3    Layout name                                             ( 11-18)
        sb.Append('AUTOGIRO');

        // 4    Reserved field                                          ( 19-62)
        sb.Append(SKS_PP_StringFormats::strFill(44,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 5    Payee's customer number                                 ( 63-68)
        sb.Append(SKS_PP_StringFormats::strFill(6, this.CharacterReplacement(mBankAccountTable.DebitDirectId), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Payee's bankgiro number                                 ( 69-78)
        str swedishBGAccnt;

        swedishBGAccnt = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SwedishBGAccnt', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(10, swedishBGAccnt, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Reserved field                                          ( 79-80)
        sb.Append(SKS_PP_StringFormats::strFill(2,'', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Details</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Details
    /// </summary>
    /// <returns>true or false</returns>
    //Nbr   Description
    // 1    Transaction code                ( 1-2)
    // 2    Payment date                    ( 3-10)
    // 3    Period code                     ( 11)
    // 4    Number of recurring payments    ( 12-14)
    // 5    Reserved field                  ( 15)
    // 6    Payer number                    ( 16-31)
    // 7    Amount                          ( 32-43)
    // 8    Payee's bankgiro number         ( 44-53)
    // 9    Reference                       ( 54-69)
    // 10   Reserved field                  ( 70-80)

    public boolean rec_Details()
    {
        str     amount,value;
        str     invoiceNumbers;
        SKS_EFT_FileDetail  invSKS_EFT_FileDetail;
        CustTransOpen       locCustTransOpen;

        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;

        // 1    Transaction code                ( 1-2)
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            sb.Append('82');
        }
        else
        {
            sb.Append('32');
        }

        // 2    Payment date                    ( 3-10)
        if(mSKS_EFT_FileFormatPaymSpec.PaymSpec == 'GIRO-NORM')
        {
            select  VendTransRecId from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;

            select crossCompany DueDate from locCustTransOpen
                where locCustTransOpen.RefRecId == invSKS_EFT_FileDetail.VendTransRecId;

            sb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(locCustTransOpen.DueDate, DateSeparator::None));
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(8, 'GENAST', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }

        // 3    Period code                     ( 11)
        sb.Append('0');

        // 4    Number of recurring payments    ( 12-14)
        sb.Append(SKS_PP_StringFormats::strFill(3, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));//SKS_VSTS_14071

        // 5    Reserved field                  ( 15)
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 6    Payer number                    ( 16-31)
        sb.Append(SKS_PP_StringFormats::strFill(16, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Amount                          ( 32-43)
        amount = num2Str(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 1, 2, 1, 0);
        amount = strRem(amount, '.');
        sb.Append(SKS_PP_StringFormats::strFill(12, amount, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Payee's bankgiro number         ( 44-53)
        mSKS_EFTAR_Bank = SKS_EFTAR_Bank::find(mSKS_EFT_FileDetail.BankAccountId, mSKS_EFT_FileDetail.PaymMode);

        str swedishBGAccnt;

        swedishBGAccnt = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('SwedishBGAccnt', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        sb.Append(SKS_PP_StringFormats::strFill(10, swedishBGAccnt, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 9    Reference                       ( 54-69)
        value = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('PayeeRef', mSKS_EFT_FileDetail.RecId,SKS_EFT_CodeLookupType::CodeLookupBank));
        if(value == 'InvoiceId')
        {
            invoiceNumbers = subStr(this.getInvoiceNbrs(), 1, 16);
            sb.Append(SKS_PP_StringFormats::strFill(16, invoiceNumbers, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            this.addFieldElement(gXmlNodeDetailFieldValues, 'InOutKey', invoiceNumbers, mSKS_EFT_FileDetail.RecId);
        }
        else
        {
            sb.Append(SKS_PP_StringFormats::strFill(16, mSKS_EFT_FileDetail.PaymentReference, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
            this.addFieldElement(gXmlNodeDetailFieldValues, 'InOutKey', mSKS_EFT_FileDetail.PaymentReference, mSKS_EFT_FileDetail.RecId);
        }


        // 10   Reserved field                  ( 70-80)
        sb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceNbrs</Name>
				<Source><![CDATA[
    /// <summary>
    /// getInvoiceNbrs
    /// </summary>
    /// <returns>str</returns>
    protected str getInvoiceNbrs()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str invString;
    
        select InvoiceNumber from invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId;
    
        while(invSKS_EFT_FileDetail)
        {
            if(invSKS_EFT_FileDetail.InvoiceNumber == '')
            {
                // If no invoice number, go to next record
                next invSKS_EFT_FileDetail;
                continue;
            }
            sb.Append(invSKS_EFT_FileDetail.InvoiceNumber);
    
            next invSKS_EFT_FileDetail;
        }
    
        invString = this.CharacterReplacement(sb.ToString());
        return invString;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>