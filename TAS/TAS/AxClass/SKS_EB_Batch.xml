<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EB_Batch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Abstract class for batch processes.
/// </summary>
abstract class SKS_EB_Batch extends RunBaseBatch
{
    #DEFINE.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the batch task can be seen in the batch journal.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ErrorsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true if error exist.
    /// </summary>
    /// <returns>Returns true if error exist</returns>
    boolean ErrorsExist()
    {
        InfologData locInfoLogData;
        boolean locErrorsExist = false;
        SysInfologEnumerator locSysInfologEnumerator;
    
    
        locInfoLogData = infolog.infologData();
        locSysInfologEnumerator = SysInfologEnumerator::newData(locInfoLogData);
    
        while (locSysInfologEnumerator.moveNext() && !LocErrorsExist)
        {
            if(locSysInfologEnumerator.currentException() == Exception::Error)
            {
                LocErrorsExist = true;
                break;
            }
        }
    
        return LocErrorsExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
    
        if(this.ErrorsExist())
        {
            throw Exception::Error;
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the values in the <c>Container</c> parameter.
    /// </summary>
    /// <param name="_packedClass">
    /// A <c>container</c> with a packed version of the class.
    /// </param>
    /// <returns>
    /// true if the class was unpacked using the container; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);
    
        [version] = _packedClass;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetIntegrationType</Name>
				<Source><![CDATA[
    public static SKS_BF_BankIntType GetIntegrationType(SKS_EB_CommProcess _SKS_EB_CommProcess)
    {
        SKS_EB_FileStorage      sksEBFilestorage;
        boolean                 usingBankFabric;
        SKS_BF_BankIntType      sksBankIntType;

        select firstonly sksEBFilestorage;

        switch (_SKS_EB_CommProcess.Module)
        {
            //Todo Need to review all modules with Kevin/Ben
            case SKS_EB_Module::PP:
                usingBankFabric = (sksEBFilestorage.StorageOption_PP == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;

            case SKS_EB_Module::eBankRec:
                usingBankFabric = (sksEBFilestorage.StorageOption_BR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;

            case SKS_EB_Module::CreditCardReconciliation:
                usingBankFabric = (sksEBFilestorage.StorageOption_CCR == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;

            case SKS_EB_Module::Lockbox:
                usingBankFabric = (sksEBFilestorage.StorageOption_LB == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;

            case SKS_EB_Module::APEFT, SKS_EB_Module::AREFT, SKS_EB_Module::APMAL, SKS_EB_Module::FXAll, SKS_EB_Module::BankToBankTransfer, SKS_EB_Module::CustomerReimbursements :
                usingBankFabric = (sksEBFilestorage.StorageOption_APEFTFXDD == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;

            case SKS_EB_Module::InHouseBankInterestRate:
                usingBankFabric = (sksEBFilestorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;

            case SKS_EB_Module::MandateAutomation:
                usingBankFabric = (sksEBFilestorage.StorageOption_MandateAutomation == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;
            case SKS_EB_Module::ElectronicFundsFileRelocation:
                usingBankFabric = (sksEBFilestorage.StorageOption_APEFTFXDD == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;

            case SKS_EB_Module::IHBExternalVendor:
                usingBankFabric = (sksEBFilestorage.StorageOption_IHB == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? True : false);
                break;
        }

        if (usingBankFabric)
        {
            sksBankIntType = SKS_BF_BankIntType::BankFabric;
        }
        else
        {
            sksBankIntType = SKS_BF_BankIntType::FileHubLocal;
        }

        return sksBankIntType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new batch record.
    /// </summary>
    /// <param name = "_SKS_EB_CommProcess">Communication process record</param>
    /// <param name = "_element">Form element object</param>
    /// <returns>Returns a record Id of batch record</returns>
    public static recid createBatch(SKS_EB_CommProcess _SKS_EB_CommProcess, Object _element = null)
    {
        recid rtnval;
        ;
    
        if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound || _SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation)
        {
            rtnval = SKS_EB_Batch::createInboundBatch(_SKS_EB_CommProcess, _element);
        }
        else
        {
            rtnval = SKS_EB_Batch::createOutboundBatch(_SKS_EB_CommProcess,_element);
        }

        return rtnval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInboundBatch</Name>
				<Source><![CDATA[
    private static recid createInboundBatch(SKS_EB_CommProcess  _SKS_EB_CommProcess, Object _element)
    
    {
        Dialog              dialog;
        DialogField         dialogField;
        DialogField         dialogFieldClassLookup;
        BatchJob            locBatchJob;
        Batch               locBatch;
        BatchHeader         batHeader;
        BatchCaption        locBatchCaption;
        RunBaseBatch        rbbTask;
        BatchInfo           batInfo;
        SysRecurrenceData   recurData;
        boolean             locBoolCreateBatch;
    
        Args args = new Args();
        FormRun formrun;
        ;
    
    
        // Create Default Bank Account Information dialog only if there is an element(this indicator tells if this is from a form).
        if(_element)
        {
            dialog = new Dialog("@SYS114518");
            dialogField = dialog.addField(extendedTypeStr(BatchCaption), "@SYS114518");
            
			if(_SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation)
            {
                dialogFieldClassLookup = dialog.addField(extendedTypeStr(Name), "@SYS60851");
                dialogFieldClassLookup.registerOverrideMethod(methodStr(FormStringControl, lookup),methodStr(SKS_DD_MandatesBatchInbound,lookupInboundClass),new SKS_DD_MandatesBatchInbound());
            }
            if(_SKS_EB_CommProcess.APIFormatType == SKS_EFT_APIFormatType::API && !(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound && _SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec)) //SKS_ElectronicBankAPIChanges
            {
                dialogFieldClassLookup = dialog.addField(extendedTypeStr(Name), "@SYS60851");
                dialogFieldClassLookup.registerOverrideMethod(methodStr(FormStringControl, lookup),methodStr(SKS_EFT_APIBatchInbound,lookupInboundClass),new SKS_EFT_APIBatchInbound());
            }
        }
        if(dialog)
        {
            locBoolCreateBatch = dialog.run();
        }
        else
        {
            locBoolCreateBatch = true;
        }
        if (locBoolCreateBatch)
        {
            if(_SKS_EB_CommProcess.Module == SKS_EB_Module::PP)
            {
                rbbTask = new SKS_PP_AutoCreate();
            }
            else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::APMAL)
            {
                rbbTask = new SKS_EFT_MAL_AutoCreate();
            }
            else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::Lockbox)
            {
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
                {
                    rbbTask = new SKS_LB_AutoCreate();
                }
                else
                {
                    rbbTask = new SKS_EB_RelocationBatch();
                }
            }
            else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec)
            {
                //SKS_ElectronicBankAPIChanges
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound && _SKS_EB_CommProcess.APIFormatType == SKS_EFT_APIFormatType::File)
                {
                    rbbTask = new SKS_BR_InboundStatements();
                }
                else if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound && _SKS_EB_CommProcess.APIFormatType == SKS_EFT_APIFormatType::API)
                {
                    rbbTask = new SKS_BR_InboundStatementsAPI();
                }
                //SKS_ElectronicBankAPIChanges
                else
                {
                    rbbTask = new SKS_EB_RelocationBatch();
                }
            }
            else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::CreditCardReconciliation)
            {
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
                {
                    rbbTask = new SKS_CCR_Batch();
                }
                else
                {
                    rbbTask = new SKS_CCR_RelocationBatch();
                }
            }
            else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::FXAll)
            {
                rbbTask = new SKS_FXA_Inbound();
            }

            else  if(_SKS_EB_CommProcess.Module == SKS_EB_Module::AREFT) //Direct debit INBOUND
            {
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
                {
                    rbbTask = new SKS_DD_InboundFiles();
                }
                else
                {
                    rbbTask = new SKS_EB_RelocationBatch();
                }
            }            

            else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation)
            {
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::InboundRelocation)
                {
                    rbbTask = new SKS_EB_RelocationBatch();
                }
                else
                {
                    if(dialogFieldClassLookup.value())
                    {
                        rbbTask = DictClass::createObject(dialogFieldClassLookup.value());
                    }
                }
            }
            else if (_SKS_EB_CommProcess.Module == SKS_EB_Module::InHouseBankInterestRate)
            {
                rbbTask = new SKS_IHB_ImportInterestRates();
            }
            else  if(_SKS_EB_CommProcess.Module == SKS_EB_Module::SupplyChainFinance) // FDD-14323- Supply chain finance
            {
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
                {
                    rbbTask = new SKS_SCF_InboundFiles();
                }              
                else
                {
                    rbbTask = new SKS_EB_RelocationBatch();
                }
            }
            else  if(_SKS_EB_CommProcess.Module == SKS_EB_Module::BankToBankTransfer) //FDD-14181- Bank to bank transfer
            {
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
                {
                    rbbTask = new SKS_BTB_InboundFiles();
                }
                else
                {
                    rbbTask = new SKS_EB_RelocationBatch();
                }
            }
            else  if(_SKS_EB_CommProcess.Module == SKS_EB_Module::CustomerReimbursements) //FDD - Customer Reimbursements
            {
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
                {
                    rbbTask = new SKS_CNP_InboundFiles();
                }
                else
                {
                    rbbTask = new SKS_EB_RelocationBatch();
                }
            }

            else  if(_SKS_EB_CommProcess.Module == SKS_EB_Module::IHBExternalVendor) // FDD - IHB External Vendor
            {
                if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
                {
                    rbbTask = new SKS_IHB_VendNettingInboundFiles();
                }
                else
                {
                    rbbTask = new SKS_EB_RelocationBatch();
                }
            }
            else  if(_SKS_EB_CommProcess.Module == SKS_EB_Module::PCard)
            {
                rbbTask = new SKS_PCard_Inbound();
            }
            else//EFT INBOUND
            {
                    if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Inbound)
                    {
                        if (_SKS_EB_CommProcess.APIFormatType == SKS_EFT_APIFormatType::API && dialogFieldClassLookup.value())
                        {
                            rbbTask = DictClass::createObject(dialogFieldClassLookup.value());
                        }
                        else
                        {
                            rbbTask = new SKS_EFT_InboundFiles();
                        }
                    }
                    else
                    {
                        rbbTask = new SKS_EB_RelocationBatch();
                    }
            }
            
            if(dialog)
            {
                locBatchCaption = dialogField.value();
            }
            else
            {
                locBatchCaption = rbbTask.caption();
            }
            select firstOnly locBatch where locBatch.Caption == locBatchCaption;
            
            if(locBatch && dialog)
            {
                error(strFmt("@SKS2463", locBatchCaption));
                return 0;
            }
            else if(locBatch)
            {
                return locBatch.RecId;
            }
            
            ttsBegin;
            batInfo = rbbTask.batchInfo();
            batInfo.parmCaption(locBatchCaption);
            
            batInfo.parmGroupId(''); // The "Empty batch group".
            
            
            // Set recurrance
            recurData = SysRecurrence::defaultRecurrence();
            
            if(_SKS_EB_CommProcess.Direction ==SKS_EB_Direction::Outbound)
            {
                recurData = SKS_EB_Batch::setRecurrenceStartDateTimeAdjusted(recurData, DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 64800));
                if(_SKS_EB_CommProcess.Module == SKS_EB_Module::FXAll)
                {
                    recurData = SysRecurrence::setRecurrenceUnit(recurData, SysRecurrenceUnit::Minute, 1);
                }
                else
                {
                    recurData = SysRecurrence::setRecurrenceUnit(recurData, SysRecurrenceUnit::Day, 1);
                }
            }
            else
            {
                recurData = SKS_EB_Batch::setRecurrenceStartDateTimeAdjusted(recurData, DateTimeUtil::utcNow());
                recurData = SysRecurrence::setRecurrenceUnit(recurData, SysRecurrenceUnit::hour, 2);
            }
            
            
            
            batHeader = BatchHeader::construct();
            batHeader.addTask(rbbTask);
            batHeader.parmRecurrenceData(recurData);
            batHeader.save();
            
            //if being run from the ui, informa the user their batch is scheduled
            if(dialog)
            {
                info(strFmt("@SKS2466", dialogField.value()));
            }
            ttsCommit;
            
            ttsBegin;
            //For auto-created BR Batches(auto-created is indicated by a null element param), Place in a withhold status.
            if(_SKS_EB_CommProcess.Module == SKS_EB_Module::eBankRec && !_element)
            {
                locBatch = batInfo.parmBatch();
                locBatch.Status = BatchStatus::Hold;
                locBatch.update();

                select firstonly forupdate locBatchJob where locBatchJob.RecId == locBatch.BatchJobId;
                if(locBatchJob)
                {
                    locBatchJob.Status = BatchStatus::Hold;
                    locBatchJob.update();
                }
            }
            ttsCommit;
    
            //if being run from the UI, instruct the user to review the default settings, then take them to the batch form
            if(dialog)
            {
                info("@SKS2464");

                Batch::jumpRef(batInfo.parmBatch().RecId);
            }
        }
        return batInfo.parmBatch().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInboundRelocationBatch</Name>
				<Source><![CDATA[
    private static recid createInboundRelocationBatch(SKS_EB_CommProcess  _SKS_EB_CommProcess, Object _element = null )
    {
        Dialog              dialog;
        DialogField         dialogField;
        Batch               Batch;
        BatchHeader         batHeader;
        RunBaseBatch        rbbTask;
        BatchInfo           batInfo;
        SysRecurrenceData   recurData;
        Args args = new Args();
        FormRun formrun;
        ;


        // _SKS_EB_CommProcess is not used, and is not deleted for backwards support. These codes were added to avoid BP warning.
        SKS_EB_CommProcess localCommProcess = _SKS_EB_CommProcess;
        localCommProcess = localCommProcess;

    
        // Create Default Bank Account Information dialog
        dialog = new Dialog("@SYS114518");
        dialogField = dialog.addField(extendedTypeStr(BatchCaption), "@SYS114518");
    
        if (dialog.run())
        {
            select firstOnly Batch where Batch.Caption == dialogField.value();
            if(!Batch)
            {
    
                ttsBegin;
    
                rbbTask = new SKS_EB_RelocationBatch();
    
                batInfo = rbbTask.batchInfo();
                batInfo.parmCaption(dialogField.value());
                batInfo.parmGroupId(''); // The "Empty batch group".
    
                // Set recurrance
                recurData = SysRecurrence::defaultRecurrence();
                // start in 30 seconds
                recurData = SKS_EB_Batch::setRecurrenceStartDateTimeAdjusted(recurData, DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 64800));
                // recur every 1 minute
                recurData = SysRecurrence::setRecurrenceUnit(recurData, SysRecurrenceUnit::Hour, 2);
    
                batHeader = BatchHeader::construct();
                batHeader.addTask(rbbTask);
                batHeader.parmRecurrenceData(recurData);
                batHeader.save();
                Batch = batInfo.parmBatch();
    
                info(strFmt("@SKS2466", dialogField.value()));
    
                ttsCommit;
    
                info("@SKS2464");
    
                args.caller(_element);
                args.parm(Batch.caption);
                args.name(formStr(BatchJob));
                formRun = classFactory.formRunClass(args);
                formRun.init();
                formRun.run();
                formRun.wait();

                return Batch.BatchJobId;    
            }
            else
            {
    
                error(strFmt("@SKS2463", dialogfield.value()));
                return 0;
            }
    
        }
        else
        {
            // If they just cancelled the dialog, then no error.
            return 0;
        }
    
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOutboundBatch</Name>
				<Source><![CDATA[
    private static recid createOutboundBatch(SKS_EB_CommProcess  _SKS_EB_CommProcess, Object _element = null )
    {
        Dialog              dialog;
        DialogField         dialogField;
        DialogField         dialogFieldClassLookup;
        Batch               Batch;
        BatchHeader         batHeader;
        RunBaseBatch        rbbTask;
        BatchInfo           batInfo;
        SysRecurrenceData   recurData;
        Args args = new Args();
        FormRun formrun;
        ;
    
        // Create Default Bank Account Information dialog
        dialog = new Dialog("@SYS114518");
        dialogField = dialog.addField(extendedTypeStr(BatchCaption), "@SYS114518");

        if(_SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation)
        {
            dialogFieldClassLookup = dialog.addField(extendedTypeStr(Name), "@SYS60851");
            dialogFieldClassLookup.registerOverrideMethod(methodStr(FormStringControl, lookup),methodStr(SKS_DD_MandatesBatchOutbound,lookupOutboundClass),new SKS_DD_MandatesBatchOutbound());
        }
    
        if (dialog.run())
        {
            select firstOnly Batch where Batch.Caption == dialogField.value();
            if(!Batch)
            {
    
                ttsBegin;
    
                if(_SKS_EB_CommProcess.Module == SKS_EB_Module::PP)
                {
                    rbbTask = new SKS_PP_AutoCreate();
                }
                else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::APMAL)
                {
                    rbbTask = new SKS_EFT_MAL_AutoCreate();
                }
                else if(_SKS_EB_CommProcess.Module == SKS_EB_Module::MandateAutomation)
                {
                    if(dialogFieldClassLookup.value())
                    {
                        rbbTask = DictClass::createObject(dialogFieldClassLookup.value());
                    }
                }
                else if(_SKS_EB_CommProcess.Direction == SKS_EB_Direction::Outbound)
                {
                    rbbTask = new SKS_SCF_OutboundFiles();
                }
    
    
                batInfo = rbbTask.batchInfo();
                batInfo.parmCaption(dialogField.value());
                batInfo.parmGroupId(''); // The "Empty batch group".
    
                // Set recurrance
                recurData = SysRecurrence::defaultRecurrence();
                // start in 30 seconds
                recurData = SKS_EB_Batch::setRecurrenceStartDateTimeAdjusted(recurData, DateTimeUtil::newDateTime(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 64800));
                // recur every 1 minute
                recurData = SysRecurrence::setRecurrenceUnit(recurData, SysRecurrenceUnit::Day, 1);
    
                batHeader = BatchHeader::construct();
                batHeader.addTask(rbbTask);
                batHeader.parmRecurrenceData(recurData);
                batHeader.save();
                Batch = batInfo.parmBatch();
    
                info(strFmt("@SKS2466", dialogField.value()));
    
                ttsCommit;
    
                info("@SKS2464");
    
                Batch::jumpRef(Batch.RecId);

                return Batch.RecId;    
            }
            else
            {
    
                error(strFmt("@SKS2463", dialogfield.value()));
                return 0;
            }
    
        }
        else
        {
            // If they just cancelled the dialog, then no error.
            return 0;
        }
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Batch description.
    /// </summary>
    /// <returns>Returns batch description</returns>
    static client server ClassDescription description()
    {
        throw error(Error::missingOverload(funcname()));
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows lookup according to list.
    /// </summary>
    /// <param name = "_formStringControl">Form control object</param>
    /// <param name = "_valueList">Value list</param>
    /// <param name = "_columnLabel">Column label</param>
    public static client void lookupList(FormStringControl _formStringControl, List _valueList, str _columnLabel = '')
    {
        Args    args;
        FormRun formRun;
        ;
        if (_formStringControl && _valueList && _valueList.typeId() == Types::String)
        {
            args = new Args(formstr(SysLookup));
            args.parmObject(_valueList);
            args.parm(_columnLabel);
    
            formRun = classFactory.formRunClass(args);
            _formStringControl.performFormLookup(formRun);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecurrenceStartDateTimeAdjusted</Name>
				<Source><![CDATA[
    public static SysRecurrenceData setRecurrenceStartDateTimeAdjusted(
        SysRecurrenceData _sysRecurrenceData, UTCDateTime _dateTime)
    {
        date startDate;
        timeOfDay startTime;
        TimeOfDay tmpStartTime;
        Timezone timezone;
        SysRecurrenceData sysRecurrenceData
        ;
        sysRecurrenceData = _sysRecurrenceData;
        timezone = conpeek(sysRecurrenceData, 9);
        tmpStartTime = DateTimeUtil::time(_dateTime);
    
        startDate = DateTimeUtil::date(_dateTime);
        startTime = DateTimeUtil::time(_dateTime);
        sysRecurrenceData = SysRecurrence::setRecurrenceStartDate(sysRecurrenceData, startDate);
        return SysRecurrence::setRecurrenceTime(sysRecurrenceData, startTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>