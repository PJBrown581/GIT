<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_BB_T_EDI820</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_US_BB_T_EDI820 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_BB_T_EDI820 extends SKS_EFT_Format
{
    #define.FormatVersion('20221011')
    #define.ACHCTX('ACH-CTX')
    #define.CHKCBC('CHK-CBC')
    #define.WIRSWT('WIR-SWT')
    #define.WIRBKW('WIR-BKW')
    #define.WIRFWT('WIR-FWT')
    #define.SegmentEnd('\r\n')

    str mRemitStreetNumber;
    str mRemitBuildingCompliment;

    str     mSenderControlNbr;
    int     mTranSetCount;
    int     mSegmentCount;
    str     mLineEnd; 
    str     mSeparator;
    str     mBPR_03;
    str     mUniqueBatchNbr;
    str     mISASection;
    str     mGSSection;
    str     mGECntrlnum;
    str     mIEASection;
    int     mCtrlQuantity;
    AmountMST    mAMTTotal;
    SKS_EFT_EDI  mSKS_EFT_EDI;
    BankAccountTable mBankAccountTable;
    System.Text.StringBuilder msb; 

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildString</Name>
				<Source><![CDATA[
    boolean buildString()
    {
        System.Text.StringBuilder sb;
        str record = msb.ToString();
        int pos = 1;
        int length;
        int recMod;
        int lineCount;
        str value;
        int totalCount = 1;
    
        length = strLen(record);
        lineCount = length div 80;
        recMod = length mod 80;
    
        if(recMod > 0)
        {
            lineCount++;
        }
    
        // Create the compressed records
        while(lineCount >= totalCount)
        {
            sb = new System.Text.StringBuilder();
            value = subStr(record, pos, 80);
            pos = pos + 80;
    
            // Pmt Related Info 04-83
            sb.Append(value);
            this.fileWrite(sb.ToString());
            totalCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        SKS_EFT_FileDetail invSKS_EFT_FileDetail;
        boolean firstRec = true;
    
        msb = new System.Text.StringBuilder();
    
        while(mSKS_EFT_FileDetail)
        {    
            mCtrlQuantity++;

            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();
    
            // Get Bank account
            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }
    
            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);  
    
            // Initialize EDI class
            mSKS_EFT_EDI = new SKS_EFT_EDI(mSKS_EFT_File.FormatId, mSKS_EFT_FileDetail.PaymSpec, mSKS_EFT_VendorPaym.EDI820Layout, mSKS_EFT_File.RecId);
            mSKS_EFT_EDI.setEFTFileId(num2str(mSKS_EFT_FileFormat.NextFileId, 0, 0, 0, 0));
            mSeparator = mSKS_EFT_EDI.getDataElementSeparator();
            mLineEnd = mSKS_EFT_EDI.getSegmentTerminator();
    
            if(firstRec)
            {
                firstRec = false;
                this.rec_ISA();
                this.rec_GS();
            }
    
            // Heading
            this.rec_ST();
            this.rec_BPR();
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRSWT ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRFWT ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRBKW ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC)
            {
                this.rec_NTE();
            }

            this.rec_TRN();

            this.rec_REFBT();
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC && mSKS_EFT_FileFormatPaymSpec.UseCheckNumber)
            {
                this.rec_REFCK();
                this.rec_REFEV();
            }
            this.rec_N1PR();

            if((mSKS_EFT_VendorPaym.WIntBankSwift != '' || mSKS_EFT_VendorPaym.WIntBankId != '') &&
               (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRSWT ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRFWT ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRBKW))
            {
                this.rec_N1Z6();
                this.rec_N4Z6();
            }

            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRSWT   ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRBKW   ||
               mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRFWT)
            {
                this.rec_N1RB();
                this.rec_N4RB();
            }

            this.rec_N1PE();     
    
            if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC)
            {
                this.rec_PER();
            }
      
            this.rec_ENT();

            while select invSKS_EFT_FileDetail where invSKS_EFT_FileDetail.RecordSummaryRecId == mSKS_EFT_FileDetail.RecId
            {
                this.rec_RMRIV(invSKS_EFT_FileDetail);
                this.rec_REFPO(invSKS_EFT_FileDetail);
                this.rec_DTM(invSKS_EFT_FileDetail);
            }
    
            this.rec_SE(mSegmentCount);
    
            mSegmentCount = 0;
    
            next mSKS_EFT_FileDetail;
        }
    
        this.rec_GE(mTranSetCount);
        this.rec_IEA();
    
        this.fileWrite(msb.ToString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ISA</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Authorization Information Qualifier                 2       AN      00
    //02    Authorization Information                           10      AN      Blank fill
    //03    Security Information Qualifier                      2       AN      00
    //04    Security Information                                10      AN      Blank fill
    //05    Interchange ID Qualifier                            2       AN      ZZ
    //06    Interchange Sender ID                               15      AN      Fed Tax Id
    //07    Interchange ID Qualifier                            2       AN      ZZ
    //08    Interchange Receiver ID                             15      AN      ABA Bank
    //09    Interchange Date                                    6       D       YYMMDD
    //10    Interchange Time                                    4       T       HHMM
    //11    Interchange Control Standards Identifier            1       AN      U
    //12    Interchange Control Version Number                  5       AN      00200
    //13    Interchange Control Number                          9       N       Control number (Zero padded)
    //14    Acknowledgement Requested                           1       N       0
    //15    Test Indicator                                      1       AN      P
    //16    Subelement Separator                                1       AN      ~
    //------------------------------------------------------------------------------------------------------
    boolean rec_ISA()
    {
        str value;
    
        value = mSKS_EFT_EDI.buildISA();

        mISASection = value;
    
        msb.Append(value);
        msb.Append(#SegmentEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GS</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //1     Functional ID Code                                  2       AN
    //2     Application Sender's Code                           15      AN
    //3     Application Receiver's Code                         15      AN
    //4     Date                                                8       D
    //5     Time                                                8       T
    //6     Group Control Number                                9       AN
    //7     Responsible Agency Code                             2       AN
    //8     Version/Release ID Code                             12      AN
    //------------------------------------------------------------------------------------------------------
    boolean rec_GS()
    {
        str value;
    
        value = mSKS_EFT_EDI.buildGS();

        mGSSection = value;

        msb.Append(value);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ST</Name>
				<Source><![CDATA[
    //---------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //1     Transaction Set ID Code                             3       ID
    //2     Trans. Set Cont. Number                             9       AN
    //---------------------------------------------------------------------------------
    boolean rec_ST()
    {   
        mSegmentCount++;
        mTranSetCount++;
    
        msb.Append('ST');
        msb.Append(mSeparator);
    
        //1     Transaction Set ID Code
        msb.Append('820');
        msb.Append(mSeparator);
    
        //2     Trans. Set Cont. Number
        if(strLen(mSKS_EFT_FileDetail.PaymentReference) < 4)
        {
            mSenderControlNbr = SKS_PP_StringFormats::strFill(4, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left);
        }
        else
        {
            mSenderControlNbr = SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 9);
        }
    
        msb.Append(mSenderControlNbr);
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_BPR</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Trans. Handling Code                                1       ID
    //02    Monetary Amount                                     18      R
    //03    Credit/Debit Flag Code                              1       ID
    //04    Payment Method Code                                 3       ID
    //05    Transaction Format Code                             10      ID
    //06    ODFI ID No. Qualifier                               2       ID
    //07    ODFI ID Number                                      12      AN
    //08    Originator Account Number Qualifier                 2       ID
    //09    Originator Account Number                           35      AN
    //10    Orig. Co. ID                                        10      AN
    //11    Orig. Co. Code                                      9       AN
    //12    RDFI ID No. Qualifier                               2       ID
    //13    RDFI ID Number                                      12      AN
    //14    Receiver Acct. No. Qualifier                        2       ID
    //15    Receiver Account Number                             35      AN
    //16    Effective Entry Date                                8       DT
    //------------------------------------------------------------------------------------------------------
    boolean rec_BPR()
    {        
        AmountMST amt;
        str value;    
      
        mSegmentCount++;
    
        msb.Append('BPR');
        msb.Append(mSeparator);
    
        //01    Trans. Handling Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
        {
            msb.Append(SKS_EFT_Format::getValueFromCode('HandlCd', mSKS_EFT_FileFormatPaymSpec, mSKS_EFT_VendorPaym.RecId));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRBKW)
        {
            msb.Append('D');
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRFWT)
        {
            msb.Append('X');
        }
        else
        {
            msb.Append('C');
        }

        msb.Append(mSeparator);
    
        //02    Monetary Amount
        amt = -1 * mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;
        mAMTTotal += amt;
        msb.Append(num2str((amt), 0, 2, 0 ,0));
        msb.Append(mSeparator);
    
        //03    Credit/Debit Flag Code
        if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
        {
            mBPR_03 = 'D';
        }
        else
        {
            mBPR_03 = 'C';
        }
        msb.Append(mBPR_03);
        msb.Append(mSeparator);
    
        //04    Payment Method Code
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCTX:
                msb.Append('ACH');
                break;
            case #WIRSWT:
                msb.Append('SWT');
                break;
            case #CHKCBC:
                msb.Append('CHK');
                break;
            case #WIRBKW:
                msb.Append('BKW');
                break;
            case #WIRFWT:
                msb.Append('FWT');
                break;
        }
        msb.Append(mSeparator);
    
        //05    Payment Format
        switch(mSKS_EFT_FileFormatPaymSpec.TransactionCode)
        {
            case #ACHCTX:
                msb.Append('CTX');
                break;
            case #WIRSWT:
            case #WIRBKW:
            case #WIRFWT:
                msb.Append('');
                break;
            case #CHKCBC:
                msb.Append('CBC');
                break;
        }
        msb.Append(mSeparator);
    
        //06    DFI ID No. Qualifier
        msb.Append('01');
        msb.Append(mSeparator);
    
        //07    DFI ID Number
        msb.Append(subStr(mSKS_EFT_FileDetail.BankBankTransit, 1, 12));
        msb.Append(mSeparator);
    
        //08    Originator  Acct. No. Qual. Code
        msb.Append('DA');
        msb.Append(mSeparator);
    
        //09    Originator  Account Number
        msb.Append(subStr(mSKS_EFT_FileDetail.BankBankAcct, 1, 35));
        msb.Append(mSeparator);
    
        //10    Originating Company Identifier
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRSWT &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRBKW &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRFWT)
        {
            msb.Append(substr(mSKS_EFT_FileDetail.FileACHCompanyId, 1, 10));
        }       

        msb.Append(mSeparator);
    
        //11    Originating Company Supplemental Code
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC)
        {
            msb.Append(SKS_PP_StringFormats::strFill(9, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CompanySupplementalCd', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        }
        msb.Append(mSeparator);
    
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHKCBC)
        {
            //12    DFI ID No. Qualifier
            if(mSKS_EFT_FileDetail.DepSwiftNo != '' &&
               (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRSWT  ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRBKW  ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRFWT))
            {
                msb.Append('02');
                value = subStr(mSKS_EFT_FileDetail.DepSwiftNo, 1, 12);
            }
            else
            {
                msb.Append('01');
                value = subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 12);
            }
            msb.Append(mSeparator);
    
            //13    DFI ID Number
            msb.Append(value);

            msb.Append(mSeparator);
    
            //14    Receiver Account Number Qualifier
            //15    Receiver Account Number
            if(mSKS_EFT_FileDetail.DepBankIBAN                           &&
               (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRSWT   ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRBKW   ||
                mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRFWT))
            {
                msb.Append(mSeparator);
                msb.Append(subStr(mSKS_EFT_FileDetail.DepBankIBAN, 1, 35));
            }
            else
            {
                if(mSKS_EFT_FileDetail.DepBankAcctType == BankAccountType::SavingsAccount)
                {
                    msb.Append('SG');
                }
                else
                {
                    msb.Append('DA');
                }
                msb.Append(mSeparator);

                msb.Append(subStr(mSKS_EFT_FileDetail.DepBankAcct, 1, 35));
            }
            msb.Append(mSeparator);
        }
        else
        {
            //12    DFI ID No. Qualifier
            msb.Append(mSeparator);
            //13    DFI ID Number
            msb.Append(mSeparator);
            //14    Receiver Account Number Qualifier
            msb.Append(mSeparator);
            //15    Receiver Account Number
            msb.Append(mSeparator);
        }
    
        //16    Effective Entry Date
        msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(mSKS_EFT_FileDetail.EffectiveDate, DateSeparator::None));

        if((mSKS_EFT_VendorPaym.WIntBankSwift != '' || mSKS_EFT_VendorPaym.WIntBankId != '') &&
           (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRSWT ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRFWT ||
            mSKS_EFT_FileFormatPaymSpec.TransactionCode == #WIRBKW))
        {
            msb.Append(mSeparator);
    
            //17    Business Function Code
            msb.Append(mSeparator);            
            
            if(mSKS_EFT_VendorPaym.WIntBankSwift != '')
            {
                //18    Intermediary DFI ID Number Qualifier
                msb.Append('02');
                msb.Append(mSeparator);

                //19    Intermediary DFI ID Number
                msb.Append(subStr(mSKS_EFT_VendorPaym.WIntBankSwift, 1, 12));
            }
            else
            {
                //18    Intermediary DFI ID Number Qualifier
                msb.Append('01');
                msb.Append(mSeparator);

                //19    Intermediary DFI ID Number
                msb.Append(subStr(mSKS_EFT_VendorPaym.WIntBankId, 1, 12));
            }
        }
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TRN</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Trace Type Code                                     2       ID
    //02    Reference Number (TRN)                              30      AN      
    //03    Orig. Co. ID                                        10      AN      Not used
    //04    Reference Number                                    30      AN      
    boolean rec_TRN()
    {
        mSegmentCount++;
    
        msb.Append('TRN');
        msb.Append(mSeparator);
    
        //01     Trace Type Code
        msb.Append('1');
        msb.Append(mSeparator);
    
        //02     Reference Number
        msb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 30));  
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PR</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity Identifier Qualifier                         3       ID
    //02    Name                                                60      AN      Payer Name
    //03    Identification Code Qualifier                       02      ID      PI - Used by ePayables
    //04    Identification Code                                 80      AN
    //------------------------------------------------------------------------------------------------------
    boolean rec_N1PR()
    {        
        mSegmentCount++;
    
        msb.Append('N1');
        msb.Append(mSeparator);
    
        //01     Entity Identifier Qualifier
        msb.Append('PR');
        msb.Append(mSeparator);
    
        //02     Name
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
        {
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 1, 22));
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC)
        {
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 1, 35));
        }
        else
        {
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyName), 1, 60));
        }       
    
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX   ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC)
        {
            this.rec_N3PR();        
            this.rec_N4PR();
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PR</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description
    //01    Address Information
    //------------------------------------------------------------------------------------------------------
    boolean rec_N3PR()
    {            
        if(mSKS_EFT_Bank.WOrdPartyAddr != '' || mSKS_EFT_Bank.WOrdPartyAddr2 != '')
        {
            mSegmentCount++;

            msb.Append('N3');
            msb.Append(mSeparator);

            //01     Address Information
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr), 1, 55));
            msb.Append(mSeparator);

            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyAddr2), 1, 55));
            msb.Append(mLineEnd);

            msb.Append(#SegmentEnd);
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PR</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Address                                        30      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         15       ID
    //04    Country Code                                        3       ID
    boolean rec_N4PR()
    {
        if(mSKS_EFT_Bank.WOrdPartyCity != '' || mSKS_EFT_Bank.WOrdPartyState != '' || mSKS_EFT_Bank.WOrdPartyZipCode != '' || mSKS_EFT_Bank.WOrdPartyCountryRegionId != '')
        {
            msb.Append('N4');
            msb.Append(mSeparator);
    
            //01    City Address
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyCity), 1, 30));
            msb.Append(mSeparator);
    
            //02    State or Province Code
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_Bank.WOrdPartyState), 1, 2));
            msb.Append(mSeparator);
    
            //03    Postal Code
            msb.Append(substr(mSKS_EFT_Bank.WOrdPartyZipCode, 1, 15));
            msb.Append(mSeparator);
    
            //04    Country Code
            msb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_Bank.WOrdPartyCountryRegionId));
    
            msb.Append(mLineEnd);
            msb.Append(#SegmentEnd);
    
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1RB</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity Identifier Qualifier                         3       ID
    //02    Beneficiary Bank Name                               60      AN
    //------------------------------------------------------------------------------------------------------
    boolean rec_N1RB()
    {        
        VendBankAccount     mVendBankAccount;
        mSegmentCount++;
    
        msb.Append('N1');
        msb.Append(mSeparator);
    
        //01     Entity Identifier Qualifier
        msb.Append('RB');
        msb.Append(mSeparator);

        mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);
    
        //02     Beneficiary Bank Name
        msb.Append(subStr(this.CharacterReplacement(mVendBankAccount.Name), 1, 60));
        
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1PE</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------------------
    //Nbr   Description
    //01    Entity Identifier Code
    //02    Name
    //------------------------------------------------------------------------------------------------------------------
    boolean rec_N1PE()
    {        
        str vendName;
    
        mSegmentCount++;
    
        msb.Append('N1');
        msb.Append(mSeparator);
    
        //01     Entity Identifier Code
        msb.Append('PE');
        msb.Append(mSeparator);
    
        //02     Name
        if(mRemittanceName != '')
        {
            vendName = mRemittanceName;
        }
        else
        {
            vendName = mSKS_EFT_FileDetail.AccountName;
        }
    
        msb.Append(substr(this.CharacterReplacement(vendName), 1, 60));

        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC || mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX)
        {
            msb.Append(mSeparator);
            msb.Append('93');
        }
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRBKW  &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRSWT  &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRFWT)
        {
            msb.Append(mSeparator);
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_FileDetail.AccountNum), 1, 80));
        }

        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);

        this.rec_N3PE();    
        
        this.rec_N4PE();
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N3PE</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description
    //01    Address 1
    //------------------------------------------------------------------------------------------------------
    boolean rec_N3PE()
    {
        str address;

        if(mRemittanceCountryRegionId == 'AR' || mRemittanceCountryRegionId == 'BO' || mRemittanceCountryRegionId == 'BR' ||
           mRemittanceCountryRegionId == 'CL' || mRemittanceCountryRegionId == 'CO' || mRemittanceCountryRegionId == 'EC' ||
           mRemittanceCountryRegionId == 'FK' || mRemittanceCountryRegionId == 'GY' || mRemittanceCountryRegionId == 'PY' ||
           mRemittanceCountryRegionId == 'PE' || mRemittanceCountryRegionId == 'GS' || mRemittanceCountryRegionId == 'SR' ||
           mRemittanceCountryRegionId == 'UY' || mRemittanceCountryRegionId == 'VE')
        {
            if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 || mRemitStreetNumber != '' || mRemitBuildingCompliment)
            {
                msb.Append('N3');
                msb.Append(mSeparator);
                mSegmentCount++;
    
                //01    Address Information
                msb.Append(substr(this.CharacterReplacement(mRemittanceAdrLine1), 1, 55));
                msb.Append(mSeparator);
                                
                if(mRemittanceAdrLine2 != '')
                {
                    address = mRemittanceAdrLine2 ;
                }
                if(mRemitStreetNumber != '')
                {
                    if(address != '')
                    {
                        address += ' ';
                    }
                    address += mRemitStreetNumber;
                }
                if(mRemitBuildingCompliment != '')
                {
                    if(address != '')
                    {
                        address += ' ';
                    }
                    address += mRemitBuildingCompliment;
                }
                
                msb.Append(subStr(address, 1, 55));

                msb.Append(mLineEnd);
                msb.Append(#SegmentEnd);
            }
        }
        else
        {
            if(mRemittanceAdrLine1 != '' || mRemittanceAdrLine2 != '')
            {
                msb.Append('N3');
                msb.Append(mSeparator);
                mSegmentCount++;
    
                //01    Address Information
                msb.Append(substr(this.CharacterReplacement(mRemittanceAdrLine1), 1, 55));
                msb.Append(mSeparator);

                msb.Append(substr(this.CharacterReplacement(mRemittanceAdrLine2), 1, 55));
                msb.Append(mLineEnd);
                msb.Append(#SegmentEnd);            
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4PE</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Address                                        19      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         9       ID
    //04    Country Code                                        3       ID
    boolean rec_N4PE()
    {
        if(mRemittanceCity != '' || mRemittanceState != '' || mRemittanceZipCode != '' || mRemittanceCountryRegionId != '')
        {
            msb.Append('N4');
            msb.Append(mSeparator);
    
            //01    City Address
            msb.Append(substr(this.CharacterReplacement(mRemittanceCity), 1, 30));
            msb.Append(mSeparator);
    
            //02    State or Province Code
            msb.Append(substr(this.CharacterReplacement(mRemittanceState), 1, 2));
            msb.Append(mSeparator);
    
            //03    Postal Code
            msb.Append(substr(mRemittanceZipCode, 1, 15));
            msb.Append(mSeparator);
    
            //04    Country Code
            msb.Append(mRemittanceCountryRegionId);
    
            msb.Append(mLineEnd);
            msb.Append(#SegmentEnd);
    
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_PER</Name>
				<Source><![CDATA[
    boolean rec_PER()
    {        
        mSegmentCount++;

        msb.Append('PER');
        msb.Append(mSeparator);

        //  Contact Function Code
        msb.Append('AR');
        msb.Append(mSeparator);

        //  Name
        msb.Append(mSeparator);

        //  Communication Number Qualifier
        msb.Append('TM');
        msb.Append(mSeparator);

        //  Communication Number
        msb.Append(this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('CommunicationNumber', mSKS_EFT_FileDetail.RecId)));
        
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ENT</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Assigned Number                                     6       N0
    boolean rec_ENT()
    {
        mSegmentCount++;
    
        msb.Append('ENT');
        msb.Append(mSeparator);
    
        //01    Assigned Number
        msb.Append('1');
    
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_RMRIV</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference No. Qualifier                             3       ID
    //02    Reference Number                                    20       AN
    //03    Transaction Action Code
    //04    Net Amount
    //05    Gross Amount
    //06    Discount Amount
    boolean rec_RMRIV(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        AmountMST amt;
    
        mSegmentCount++;
    
        msb.Append('RMR');
        msb.Append(mSeparator);
    
        //01     Reference No. Qualifier
        if(invSKS_EFT_FileDetail.InvoiceNumber != '')
        {
            msb.Append('IV'); // Only write IV if an invoice number exists
        }
        msb.Append(mSeparator);
    
        //02     Reference Number
        msb.Append(substr(this.CharacterReplacement(invSKS_EFT_FileDetail.InvoiceNumber), 1, 30));
        msb.Append(mSeparator);
    
        //03    Transaction Action Code
        msb.Append(mSeparator);
    
        //04    Net Amount
        amt = invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur * -1;
        msb.Append(num2str(amt, 0, 2, 0, 0));
        msb.Append(mSeparator);
    
        //05    Gross Amount
        amt = (invSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur + invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur) * -1;
        msb.Append(num2str(amt, 0, 2, 0, 0));
        msb.Append(mSeparator);
    
        //06    Discount Amount
        amt = invSKS_EFT_FileDetail.InvoiceDiscAmountPmtCur * -1;
        msb.Append(num2str(amt, 0, 2, 0, 0));
    
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_DTM</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Date/Time Qualifier                                 3       ID
    //02    Date                                                4       Date    CCYYMMDD
    //------------------------------------------------------------------------------------------------------
    boolean rec_DTM(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        if(invSKS_EFT_FileDetail.InvoiceNumber != '' && 
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRSWT   &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRBKW   &&
           mSKS_EFT_FileFormatPaymSpec.TransactionCode != #WIRFWT)
        {
            mSegmentCount++;
    
            msb.Append('DTM');
            msb.Append(mSeparator);
    
            //01     Date/Time Qualifier
            msb.Append('003');
            msb.Append(mSeparator);
    
            //02    Date
            msb.Append(SKS_PP_StringFormats::strDateYYYYMMDD(invSKS_EFT_FileDetail.InvoiceDate, DateSeparator::None));
    
            msb.Append(mLineEnd);
            msb.Append(#SegmentEnd);
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_SE</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Included Segments                         10      NO
    //2     Transaction Set Control Number                      9       AN
    //------------------------------------------------------------------------------------------------------
    boolean rec_SE(int _count)
    {        
        _count++;
        mSegmentCount++;

        msb.Append('SE');
        msb.Append(mSeparator);
    
        //1     Number of Included Segments
        msb.Append(num2str(_count,0,0,0,0));
        msb.Append(mSeparator);
    
        //2     Transaction Set Control Number
        msb.Append(mSenderControlNbr);
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_GE</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Transaction Sets Included                 6       N
    //2     Group Control Number                                9       AN
    //------------------------------------------------------------------------------------------------------
    boolean rec_GE(int _count)
    {        
        str value;
        int len;
    
        mSKS_EFT_EDI.setTranSetCount(_count);
        value = mSKS_EFT_EDI.buildGE();

        len = strLen(value);

        mGECntrlnum = subStr(value, len, -10);
    
        msb.Append(value);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_IEA</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //1     Number of Included Functional Group                 5       N
    //2     Interchange Control Number                          9       AN
    //------------------------------------------------------------------------------------------------------
    boolean rec_IEA()
    {        
        str value;
    
        mSKS_EFT_EDI.setFunctionalGroupCount(1);
        value = mSKS_EFT_EDI.buildIEA();

        mIEASection = value;
    
        msb.Append(value);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFCK</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference Identification                            03       ID
    //02    Reference Identification                            10       NO

    boolean rec_REFCK()
    {
        mSegmentCount++;
    
        msb.Append('REF');
        msb.Append(mSeparator);
    
        //01     Reference Identification
        msb.Append('CK');
        msb.Append(mSeparator);
    
        //02     Reference Identification
        msb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), 10));
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFEV</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference Identification Qualifier                  03       ID
    //02    Reference Identification                            30       AN

    boolean rec_REFEV()
    {
        mSegmentCount++;
    
        msb.Append('REF');
        msb.Append(mSeparator);
    
        //01     Reference Identification Qualifier
        msb.Append('EV');
        msb.Append(mSeparator);
    
        //02     Reference Identification
        msb.Append('CLT');
        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFPO</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference Identification Qualifier                  3       ID
    //02    Reference Description                               30      AN    
    //03    Description                                         45      AN
    //------------------------------------------------------------------------------------------------------
    boolean rec_REFPO(SKS_EFT_FileDetail invSKS_EFT_FileDetail)
    {
        VendInvoiceJour vendInvoiceJour;
        ;

        if(invSKS_EFT_FileDetail.InvoiceCompany != ''  &&
          (mSKS_EFT_FileFormatPaymSpec.TransactionCode == #ACHCTX ||
           mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC))
        {
            // See if PO exists
            select  firstOnly crossCompany PurchId, InvoiceAccount, InvoiceDate, InvoiceId 
                from vendInvoiceJour where  vendInvoiceJour.InvoiceAccount == invSKS_EFT_FileDetail.AccountNum &&
                                            vendInvoiceJour.InvoiceDate == invSKS_EFT_FileDetail.InvoiceDate &&
                                            vendInvoiceJour.InvoiceId == invSKS_EFT_FileDetail.InvoiceNumber;                

            if(vendInvoiceJour.PurchId)
            {
                mSegmentCount++;
    
                msb.Append('REF');
                msb.Append(mSeparator);
    
                //01     Reference Identification Qualifier
                msb.Append('PO');
                msb.Append(mSeparator);

                //02    Reference Description
                msb.Append(substr(this.CharacterReplacement(vendInvoiceJour.PurchId), 1, 30));
    
                msb.Append(mLineEnd);
                msb.Append(#SegmentEnd);
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_REFBT</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    Reference Identification Qualifier                  03       ID
    //02    Reference Identification                            10       AN

    boolean rec_REFBT()
    {
        mSegmentCount++;
    
        msb.Append('REF');
        msb.Append(mSeparator);
    
        //01     Reference Identification
        msb.Append('BT');
        msb.Append(mSeparator);
    
        //02     Reference Identification        
        msb.Append(SKS_PP_StringFormats::strRight(this.CharacterReplacement(mSKS_EFT_File.FileNbr), 30));

        mUniqueBatchNbr = mSKS_EFT_File.FileNbr;

        msb.Append(mLineEnd);
        msb.Append(#SegmentEnd);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>controlfilespecific</Name>
				<Source><![CDATA[
    protected void controlfilespecific(SysDictClass _obj, Object _classInstance)
    {
        _obj.callObject('setSenderControlnum', _classInstance, mSenderControlNbr);
        _obj.callObject('setUniqueBatchNbr', _classInstance, mUniqueBatchNbr);
        _obj.callObject('setMonetaryAmt', _classInstance, mAMTTotal);
        _obj.callObject('setISASection', _classInstance, mISASection);
        _obj.callObject('setGSSection', _classInstance, mGSSection);
        _obj.callObject('setGECntrlnum', _classInstance, mGECntrlnum);
        _obj.callObject('setIEASection', _classInstance, mIEASection);
        _obj.callObject('setCtrlQuantity', _classInstance, mCtrlQuantity);
        _obj.callObject('setLineEnd', _classInstance, mLineEnd);
        _obj.callObject('setSeparator', _classInstance, mSeparator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N1Z6</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Entity Identifier Qualifier                         3       ID
    //02    Name                                                60      AN      Intermediary Bank Name
    //------------------------------------------------------------------------------------------------------
    boolean rec_N1Z6()
    {
        if(mSKS_EFT_VendorPaym.WIntBankName)
        {
            mSegmentCount++;
    
            msb.Append('N1');
            msb.Append(mSeparator);
    
            //01     Entity Identifier Qualifier
            msb.Append('Z6');
            msb.Append(mSeparator);
    
            //02     Name
            msb.Append(subStr(mSKS_EFT_VendorPaym.WIntBankName, 1, 60));
    
            msb.Append(mLineEnd);
            msb.Append(#SegmentEnd);
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4Z6</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Name                                           30      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         15       ID
    //04    Country Code                                        3       ID
    boolean rec_N4Z6()
    {
        if(mSKS_EFT_VendorPaym.WIntBankCity != '' || mSKS_EFT_VendorPaym.WIntBankCountryRegionId != '' ||
           mSKS_EFT_VendorPaym.WIntBankAddr != '' || mSKS_EFT_VendorPaym.WIntBankAddr2 != '')
        {
            msb.Append('N4');
            msb.Append(mSeparator);
    
            //01    City Name
            msb.Append(substr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity), 1, 30));
            msb.Append(mSeparator);
    
            //02    State or Province Code
            msb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr), 1, 2));
            msb.Append(mSeparator);
    
            //03    Postal Code
            msb.Append(subStr(this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr2), 1, 15));
            msb.Append(mSeparator);
    
            //04    Country Code
            msb.Append(this.getLogisticsAddressCountryISO(mSKS_EFT_VendorPaym.WIntBankCountryRegionId));
    
            msb.Append(mLineEnd);
            msb.Append(#SegmentEnd);
    
            mSegmentCount++;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_NTE</Name>
				<Source><![CDATA[
    //------------------------------------------------------------------------------------------------------
    //Nbr   Description                                         Max     Type    Comment
    //01    Note Reference Code                                 3       ID
    //02    Description                                        80      AN      Use For Bank To Bank Instructions
    //---------------------------------------------------------------------------------------------------------
    boolean rec_NTE()
    {
        if(mSKS_EFT_FileFormatPaymSpec.TransactionCode == #CHKCBC &&
           (mSKS_EFT_VendorPaym.WPmtInstText1 || mSKS_EFT_VendorPaym.WPmtInstText2))
        {
            mSegmentCount++;

            msb.Append('NTE');
            msb.Append(mSeparator);

            //01     Note Reference Code
            msb.Append('ADD');
            msb.Append(mSeparator);
            if(mSKS_EFT_VendorPaym.WPmtInstText1 && mSKS_EFT_VendorPaym.WPmtInstText2)
            {
                msb.Append(subStr(mSKS_EFT_VendorPaym.WPmtInstText1 + '-' + mSKS_EFT_VendorPaym.WPmtInstText2, 1, 50));
            }
            else if(mSKS_EFT_VendorPaym.WPmtInstText1)
            {
                msb.Append(mSKS_EFT_VendorPaym.WPmtInstText1);
            }
            else
            {
                msb.Append(mSKS_EFT_VendorPaym.WPmtInstText2);
            }

            msb.Append(mLineEnd);
            msb.Append(#SegmentEnd);
        }
        else if(mSKS_EFT_FileFormatPaymSpec.TransactionCode != #CHKCBC &&
                (mSKS_EFT_VendorPaym.WBankInst1 || mSKS_EFT_VendorPaym.WBankInst2 ||
                 mSKS_EFT_VendorPaym.WBankInst3 || mSKS_EFT_VendorPaym.WBankInst4 ||
                 mSKS_EFT_VendorPaym.WPmtInstText1 || mSKS_EFT_VendorPaym.WPmtInstText2 ||
                 mSKS_EFT_VendorPaym.WPmtInstText3 || mSKS_EFT_VendorPaym.WPmtInstText4))
        {
            if(mSKS_EFT_VendorPaym.WPmtInstText1 || mSKS_EFT_VendorPaym.WPmtInstText2)
            {
                mSegmentCount++;

                msb.Append('NTE');
                msb.Append(mSeparator);

                //01     Note Reference Code
                msb.Append('ADD');
                msb.Append(mSeparator);
                
                if(mSKS_EFT_VendorPaym.WPmtInstText1 && mSKS_EFT_VendorPaym.WPmtInstText2)
                {
                    msb.Append(subStr(mSKS_EFT_VendorPaym.WPmtInstText1 + '-' + mSKS_EFT_VendorPaym.WPmtInstText2, 1, 80));
                }
                else if(mSKS_EFT_VendorPaym.WPmtInstText1)
                {
                    msb.Append(mSKS_EFT_VendorPaym.WPmtInstText1);
                }
                else
                {
                    msb.Append(mSKS_EFT_VendorPaym.WPmtInstText2);
                }

                msb.Append(mLineEnd);
                msb.Append(#SegmentEnd);
            }

            if(mSKS_EFT_VendorPaym.WPmtInstText3 || mSKS_EFT_VendorPaym.WPmtInstText4)
            {
                mSegmentCount++;

                msb.Append('NTE');
                msb.Append(mSeparator);

                //01     Note Reference Code
                msb.Append('ADD');
                msb.Append(mSeparator);

                if(mSKS_EFT_VendorPaym.WPmtInstText3 && mSKS_EFT_VendorPaym.WPmtInstText4)
                {
                    msb.Append(subStr(mSKS_EFT_VendorPaym.WPmtInstText3 + '-' + mSKS_EFT_VendorPaym.WPmtInstText4, 1, 80));
                }
                else if(mSKS_EFT_VendorPaym.WPmtInstText3)
                {
                    msb.Append(mSKS_EFT_VendorPaym.WPmtInstText3);
                }
                else
                {
                    msb.Append(mSKS_EFT_VendorPaym.WPmtInstText4);
                }

                msb.Append(mLineEnd);
                msb.Append(#SegmentEnd);
            }

            if(mSKS_EFT_VendorPaym.WBankInst1 || mSKS_EFT_VendorPaym.WBankInst2)
            {
                mSegmentCount++;

                msb.Append('NTE');
                msb.Append(mSeparator);

                //01     Note Reference Code
                msb.Append('OTH');
                msb.Append(mSeparator);

                if(mSKS_EFT_VendorPaym.WBankInst1 && mSKS_EFT_VendorPaym.WBankInst2)
                {
                    msb.Append(subStr(mSKS_EFT_VendorPaym.WBankInst1 + '-' + mSKS_EFT_VendorPaym.WBankInst2, 1, 80));
                }
                else if(mSKS_EFT_VendorPaym.WBankInst1)
                {
                    msb.Append(mSKS_EFT_VendorPaym.WBankInst1);
                }
                else
                {
                    msb.Append(mSKS_EFT_VendorPaym.WBankInst2);
                }               

                msb.Append(mLineEnd);
                msb.Append(#SegmentEnd);
            }

            if(mSKS_EFT_VendorPaym.WBankInst3 || mSKS_EFT_VendorPaym.WBankInst4)
            {
                mSegmentCount++;

                msb.Append('NTE');
                msb.Append(mSeparator);

                //01     Note Reference Code
                msb.Append('OTH');
                msb.Append(mSeparator);

                if(mSKS_EFT_VendorPaym.WBankInst3 && mSKS_EFT_VendorPaym.WBankInst4)
                {
                    msb.Append(subStr(mSKS_EFT_VendorPaym.WBankInst3 + '-' + mSKS_EFT_VendorPaym.WBankInst4, 1, 80));
                }
                else if(mSKS_EFT_VendorPaym.WBankInst3)
                {
                    msb.Append(mSKS_EFT_VendorPaym.WBankInst3);
                }
                else
                {
                    msb.Append(mSKS_EFT_VendorPaym.WBankInst4);
                }
                
                msb.Append(mLineEnd);
                msb.Append(#SegmentEnd);
            }
        }
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_N4RB</Name>
				<Source><![CDATA[
    //Nbr   Description                                         Max     Type    Comment
    //01    City Name                                           30      AN
    //02    State or Province Code                              2       ID
    //03    Postal Code                                         15       ID
    //04    Country Code                                        3       ID
    boolean rec_N4RB()
    {
        LogisticsPostalAddress lLogisticsPostalAddress;
        VendBankAccount        mVendBankAccount;        

        if(mVendBankAccount.AccountID != mSKS_EFT_FileDetail.DepBankAccountId || mVendBankAccount.VendAccount != mSKS_EFT_FileDetail.AccountNum)
        {
            mVendBankAccount = VendBankAccount::findByCompany(mSKS_EFT_FileDetail.AccountCompany, mSKS_EFT_FileDetail.AccountNum, mSKS_EFT_FileDetail.DepBankAccountId);
        }
    
        select firstonly State, ZipCode, Location, City, CountryRegionId from lLogisticsPostalAddress where lLogisticsPostalAddress.Location == mVendBankAccount.Location;
        
    
        if(lLogisticsPostalAddress.City != '' || lLogisticsPostalAddress.State != '' ||
           lLogisticsPostalAddress.ZipCode != '' || lLogisticsPostalAddress.CountryRegionId != '')
        {
            mSegmentCount++;

            msb.Append('N4');
            msb.Append(mSeparator);

            //01    City Name
            msb.Append(substr(lLogisticsPostalAddress.City, 1, 30));
            msb.Append(mSeparator);

            //02    State or Province Code
            msb.Append(lLogisticsPostalAddress.State);
            msb.Append(mSeparator);

            //03    Postal Code
            msb.Append(lLogisticsPostalAddress.ZipCode);
            msb.Append(mSeparator);

            //04    Country Code
            msb.Append(this.getLogisticsAddressCountryISO(lLogisticsPostalAddress.CountryRegionId));

            msb.Append(mLineEnd);
            msb.Append(#SegmentEnd);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemittanceAddress</Name>
				<Source><![CDATA[
    void getRemittanceAddress(boolean UseCheckNum)
    {
        LedgerJournalTrans      lLedgerJournalTrans;
        LogisticsLocation       lLogisticsLocation;
        LogisticsPostalAddress  lRemittancePostalAddress;
        Array vendAddrArray = new Array(Types::String);

        select * from lRemittancePostalAddress join  RemittanceAddress from lLedgerJournalTrans
            where lRemittancePostalAddress.Location == lLedgerJournalTrans.RemittanceLocation
                && lLedgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;

        lLogisticsLocation = LogisticsLocation::find(lLedgerJournalTrans.RemittanceLocation);

        //Populate Remittance Information
        mRemittanceName = this.CharacterReplacement(lLogisticsLocation.Description);

        vendAddrArray = SKS_PP_50000Bas::StreetToAddressLineArray(lRemittancePostalAddress.Street,2);

        mRemittanceAdrLine1 = '';
        mRemittanceAdrLine2 = '';

        if(vendAddrArray.exists(1))
        {
            mRemittanceAdrLine1 = this.CharacterReplacement(vendAddrArray.value(1));
            if (vendAddrArray.exists(2))
            {
                mRemittanceAdrLine2 = this.CharacterReplacement(vendAddrArray.value(2));
            }
        }
        mRemittanceCity = this.CharacterReplacement(lRemittancePostalAddress.City);
        mRemittanceState = this.CharacterReplacement(lRemittancePostalAddress.State);
        mRemittanceZipCode = this.CharacterReplacement(lRemittancePostalAddress.ZipCode);
        mRemittanceCountryRegionId = this.getLogisticsAddressCountryISO(lRemittancePostalAddress.CountryRegionId);
        mRemitStreetNumber = this.CharacterReplacement(lRemittancePostalAddress.StreetNumber);
        mRemitBuildingCompliment = this.CharacterReplacement(lRemittancePostalAddress.BuildingCompliment);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>