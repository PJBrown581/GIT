<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_OutboundFormat_Barclays_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_DD_OutboundFormat_DeutscheBank_XML for Auddis DeutscheBank outbound format class
/// </summary>
class SKS_DD_OutboundFormat_Barclays_XML extends SKS_DD_OutboundFormat_ISO_20022
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>node_GrpHdr_InitgPty_Nm</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_GrpHdr_InitgPty_Nm
    /// </summary>
    /// <param name = "_nodeInitgPty">Parent buffer</param>
    protected void node_GrpHdr_InitgPty_Nm(XmlElement _nodeInitgPty)
    {
        //------------------------------------------------------------------------------------------------------
        //      1.8: InitgPty
        //          Nm
        //------------------------------------------------------------------------------------------------------
        Name companyName;
        LogisticsPostalAddress  postalAddress;
        BankAccountTable lBankAccountTable;

        lBankAccountTable = BankAccountTable::find(mSKS_PP_Bank.BankAccountID);

        postalAddress = LogisticsPostalAddress::findByLocation(lBankAccountTable.Location);
    
        //          Nm
        companyName = LogisticsLocation::find(postalAddress.Location).Description;
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, _nodeInitgPty, 'Nm', this.CharacterReplacement(companyName), 70, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAcct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Printing CdtrAcct section
    /// </summary>
    /// <param name = "_nodePmtInf">XmlElement</param>
    protected void node_PmtInf_CdtrAcct(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.20: CdtrAcct
        //          Id
        //              IBAN
        //              Othr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeCdtrAcct;
        XmlElement nodeCdtrAcctId;
        XmlElement nodeOthr;
    
        //      2.20: CdtrAcct
        nodeCdtrAcct = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAcct'));
    
        //          Id
        nodeCdtrAcctId = nodeCdtrAcct.appendChild(xmlDoc.createElement('Id'));
    
        if(BankAccountTable::find(mSKS_PP_Bank.BankAccountId).IBAN)
        {
            //              IBAN
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeCdtrAcctId, 'IBAN', BankAccountTable::find(mSKS_PP_Bank.BankAccountId).IBAN);
        }
        else
        {
            //              Othr
            nodeOthr = nodeCdtrAcctId.appendChild(xmlDoc.createElement('Othr'));
    
            //                  Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', BankAccountTable::find(mSKS_PP_Bank.BankAccountId).AccountNum, 8);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_DrctDbtTxInf_DrctDbtTx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Printing DrctDbtTx section
    /// </summary>
    /// <param name = "_nodeDrctDbtTxInf">XmlElement</param>
    protected void node_DrctDbtTxInf_DrctDbtTx(XmlElement _nodeDrctDbtTxInf)
    {
        //------------------------------------------------------------------------------------------------------
        //          DrctDbtTx
        //              MndtRltdInf
        //                  MndtId
        //                  DtOfSgntr
        //------------------------------------------------------------------------------------------------------
        XmlElement nodeDrctDbtTx;
        XmlElement nodeMndtRltdInf;

        //          DrctDbtTx
        nodeDrctDbtTx = _nodeDrctDbtTxInf.appendChild(xmlDoc.createElement('DrctDbtTx'));
    
        //              MndtRltdInf
        nodeMndtRltdInf = nodeDrctDbtTx.appendChild(xmlDoc.createElement('MndtRltdInf'));
    
        //                  MndtId
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMndtRltdInf, 'MndtId', mCustDirectDebitMandate.MandateReference);
    
        //                  DtOfSgntr
        SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeMndtRltdInf, 'DtOfSgntr', SKS_PP_StringFormats::strDateYYYYMMDD(mCustDirectDebitMandate.SignatureDate, DateSeparator::Hyphen));
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_CdtrAgt</Name>
				<Source><![CDATA[
    /// <summary>
    /// CdtrAgt section
    /// </summary>
    /// <param name = "_nodePmtInf">XmlElement</param>
    protected void node_PmtInf_CdtrAgt(XmlElement _nodePmtInf)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.17: CdtrAgt
        //               FinInstnId
        //                     CmbndId
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeCdtrAgt;
        XmlElement nodeFinInstnId;
        XmlElement nodeClrSysMmbId;
        LogisticsPostalAddress  postalAddress;
        BankAccountTable lBankAccountTable;

        lBankAccountTable = BankAccountTable::find(mSKS_PP_Bank.BankAccountID);

        postalAddress = LogisticsPostalAddress::findByLocation(lBankAccountTable.Location);

        //      2.21: CdtrAgt
        nodeCdtrAgt = nodePmtInf.appendChild(xmlDoc.createElement('CdtrAgt'));
    
        //          FinInstnId
        nodeFinInstnId = nodeCdtrAgt.appendChild(xmlDoc.createElement('FinInstnId'));

        if(BankAccountTable::find(mSKS_PP_Bank.BankAccountId).SWIFTNo)
        {
            //              BIC
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeFinInstnId, 'BIC', lBankAccountTable.SWIFTNo, 11);
        }
        else
        {
            //          ClrSysMmbId
            nodeClrSysMmbId = nodeFinInstnId.appendChild(xmlDoc.createElement('ClrSysMmbId'));

            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeClrSysMmbId, 'MmbId', lBankAccountTable.RegistrationNum, 0, false);
        }

        this.node_PstlAdr(nodeCdtrAgt, postalAddress.CountryRegionId, '', '', '', 0, '', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>node_PmtInf_Cdtr_Id</Name>
				<Source><![CDATA[
    /// <summary>
    /// node_PmtInf_Cdtr_Id
    /// </summary>
    /// <param name = "_nodeCdtr">_nodeCdtr</param>
    protected void node_PmtInf_Cdtr_Id(XmlElement _nodeCdtr)
    {
        //------------------------------------------------------------------------------------------------------
        //      2.19: Cdtr
        //          Id
        //              OrgId
        //                  Othr
        //                      Id
        //------------------------------------------------------------------------------------------------------
    
        XmlElement nodeId;
        XmlElement nodeOrgId;
        XmlElement nodeOthr;
    

        if(mSKS_EB_BankTable.CreditorNumber4 != '')
        {
            //          Id
            nodeId = _nodeCdtr.appendChild(xmlDoc.createElement('Id'));
    
            //              OrgId
            nodeOrgId = nodeId.appendChild(xmlDoc.createElement('OrgId'));
    
            //                  Othr
            nodeOthr = nodeOrgId.appendChild(xmlDoc.createElement('Othr'));
    
            //                      Id
            SKS_EFT_Format::xmlAppendChildNodeText(xmlDoc, nodeOthr, 'Id', this.CharacterReplacement(mSKS_EB_BankTable.CreditorNumber4), 35);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>