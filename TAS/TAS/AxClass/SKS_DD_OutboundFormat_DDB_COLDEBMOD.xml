<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_DD_OutboundFormat_DDB_COLDEBMOD</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_DD_OutboundFormat_DDB_COLDEBMOD extends SKS_DD_OutboundFormat
{
    #define.Separator(',')
    #define.DoubleQuote('"')
    #define.Semicolon(';')

    System.Text.StringBuilder   sb;

    str taxNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    public str formatStructure(CustDirectDebitMandate  _custDirectDebitMandate)
    {
        int counter = 0;

        mCustDirectDebitMandate = _custDirectDebitMandate;

        sb = new System.Text.StringBuilder();

        ttsbegin;
        while(mCustDirectDebitMandate)
        {
            if(this.CheckMandateSentStatus(mCustDirectDebitMandate.CustAccount)) // only one mandate record can be at sent status per customer
            {
                next mCustDirectDebitMandate;
                continue;
            }
            if(counter != 0)
            {
                sb.Append(System.Environment::NewLine);
            }
            mSKS_PP_Bank = SKS_PP_Bank::find(mCustDirectDebitMandate.CreditorBankAccount);
            mSKS_EB_BankTable = SKS_EB_BankTable::find(mSKS_PP_Bank.BankID);
            
            taxNum = SKS_EFT_Setup::getCustLegalIdNumber(mCustDirectDebitMandate.CustAccount);;

            this.rec_Detail();

            counter++;

            mCustDirectDebitMandate.selectForUpdate(true);
            mCustDirectDebitMandate.SKS_EB_BankRegisterStatus = SKS_EB_BankRegisterStatus::Sent;
            mCustDirectDebitMandate.SKS_EB_RegisterStatusSent = NoYesCombo::Yes;
            mCustDirectDebitMandate.SKS_EB_AutoStatusDate = DateTimeUtil::getSystemDateTime();
            mCustDirectDebitMandate.update();

            next mCustDirectDebitMandate;
        }
        ttscommit;

        if(counter == 0)
        {
            sb.Clear();
        }
        return sb.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail</Name>
				<Source><![CDATA[
    public boolean rec_Detail()
    {
        //FNo.  Name                         Max.Length
        //1     Function
        sb.Append(this.wrapField('COLDEBMOD', 10));

        //2     Version
        sb.Append(this.wrapField('01', 2, false));

        //3     Creditor Number
        sb.Append(this.wrapField(mSKS_EB_BankTable.CreditorNumber1, 2, false));

        //4     Test marking
        if(mSKS_EB_BankTable.RegistrationTestFile == NoYes::Yes) //Bug 11067 Issue 2
        {
            sb.Append(this.wrapField('1'));
        }
		else
        {
            sb.Append(this.wrapField(''));
        }        

        //5     Status message
        sb.Append(this.wrapField('1'));

        //6     Collection Type
        if(mCustDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Betalings)
        {
            sb.Append(this.wrapField('101'));
        }
        else if(mCustDirectDebitMandate.SKS_EB_MandateType == SKS_EB_MandateType::Leverander)
        {
            sb.Append(this.wrapField('103'));
        }

        //7     Technical Reference
        sb.Append(this.wrapField(mCustDirectDebitMandate.MandateReference, 35));

        //8     Transaction type
        if(mCustDirectDebitMandate.Status == CustMandateStatus::Canceled || mCustDirectDebitMandate.SKS_EB_MandateAutoStatus == SKS_EB_MandateAutoStatus::Canceled/*Bug 11030*/)
        {
            sb.Append(this.wrapField('01'));
        }
        else
        {
            sb.Append(this.wrapField('02'));
        }

        //9     Debtor ID
        sb.Append(this.wrapField(mCustDirectDebitMandate.CustAccount, 25));

        //10    New Debtor ID
        sb.Append(this.wrapField(''));

        //11    Debtor's account number
        sb.Append(this.wrapField(CustBankAccount::find(mCustDirectDebitMandate.CustAccount, mCustDirectDebitMandate.BankAccount).AccountNum, 17, false)); //Modified for bug 11027

        //12    ID Number
        sb.Append(this.wrapField(taxNum, 25, false));

        //13    Start Date
        sb.Append(this.wrapField(SKS_PP_StringFormats::strDateYYYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateSeparator::None), 8, false));

        //14    End date
        sb.Append(this.wrapField('', 0, false));

        //15    Name
        sb.Append(this.wrapField(''));

        //16    Address 1
        sb.Append(this.wrapField(''));

        //17    Address 2
        sb.Append(this.wrapField(''));

        //18    Postal code
        sb.Append(this.wrapField(''));

        //19    Postal district
        sb.Append(this.wrapField(''));

        //20    Country code
        sb.Append(this.wrapField(''));

        //21    Amount limit
        sb.Append(this.wrapField('', 0, false));

        //22    Period code
        sb.Append(this.wrapField('', 0, true, false, true));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrapField</Name>
				<Source><![CDATA[
    private str wrapField(str _field = '', int _fieldLength = 0, boolean quotes = true, boolean _addSeparator = true, boolean semicolon = false)
    {
        str text;
        ;

        if(_fieldLength > 0)
        {
            text = subStr(_field, 1, _fieldLength);
        }
        else
        {
            text = _field;
        }
        if(quotes)
        {
            text = #DoubleQuote + text + #DoubleQuote;
        }
        if(_addSeparator)
        {
            text += #Separator;
        }
        if(semicolon)
        {
            text += #Semicolon;
        }
        return text;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>