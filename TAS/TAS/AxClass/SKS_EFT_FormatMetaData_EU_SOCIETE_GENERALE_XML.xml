<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_FormatMetaData_EU_SOCIETE_GENERALE_XML</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_FormatMetaData_EU_SOCIETE_GENERALE_XML Extends SKS_EFT_Format_MetaData
/// </summary>
public class SKS_EFT_FormatMetaData_EU_SOCIETE_GENERALE_XML Extends SKS_EFT_Format_MetaData
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        productVersion = '';
        formatGroupVersion = '20230516';
        dataContractVersion = '1.0';
        conFormatID = ['EU-SOCIETE-GENERALE-XML'];
        formatfiletype = 'EFT';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatFileType</Name>
				<Source><![CDATA[
    protected str getFormatFileType()
    {
        return formatfiletype;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHeaderMetaData</Name>
				<Source><![CDATA[
    protected container getHeaderMetaData()
    {
        container   headerList;

        //Metadata column names of data elements
        //ProductVersion,FormatGroupVersion,UseWithCustomer,UseWithVenodrs,UseWithBanktoBank,UsewithCustReimbursements,
        //BeDesc01,BeDesc02,BeMask01,BeMask02,BlockFill,CompanyIdMask,CompanyIdTitle,CompanyNameTitle,CompanyNameMask,Crlf,Description,EffectiveDateOffset,EntryClassTitle,EntryClassMask,
        //FormatId,FormatType,IMMDestMask,IMMDestTitle,IMMDestNameTitle,IMMDestNameMask,IMMOriginTitle,IMMOriginMask,IMMOriginNameTitle,IMMOriginNameMask,IncludeCpnyCredit,
        //IncludeCpnyDebit,LastEffectiveDate,NextDailyReset,NextDailyResetDate,NextFileId,NextSequenceNumber,PreNote,RecordLength,Selected,TrimRecord,TwoFileNameAddition,
        //WBank01Description,WBank01Mask,WBank01Required,WBank02Required,WBank02Mask,WBank02Description,WBank03Required,WBank03Mask,WBank03Description,WBank04Required,WBank04Mask,
        //WBank04Description,PreNoteDays,EDI,PayDateIsEffDate,ARDateOffset,UseAddenda,MastAcctList,FormatGroup,MultiEffectiveDates,SupportsMultiCompany,ExternalFormat,FundTransferType

        headerList = ConIns(headerList,conLen(headerList)+1,[productVersion,formatGroupVersion,0,1,0,0,'','','','',0,'','','','',0,'EU - Societe Generale pain.001.001.03',0,'','','EU-SOCIETE-GENERALE-XML',1,'','','','','','','','',0,0,'1900-01-01 00:00:00.000',0,'1900-01-01 00:00:00.000',1,1,0,0,0,0,'','','',0,0,'','',0,'','',0,'','',0,0,0,0,0,0,'EU-SOCIETE-GENERALE-XML',1,0,0]);

        return headerList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecsMetaData(str _formatID)
    {
        container   paymSpecList;

        //Metadata column names of data elements
        //BARoutingReqd,VBAAccountReqd,VBASwiftReqd,VBAIBANReqd,ARPaymSpecName,BEBeneBankAcctReqd,BE01Reqd,BE02Reqd,BE01Use,BE02Use,PaymSpecFileDescr,RecordSummary,TransactionCode,
                //EmailNote,PaymSpec,PaymSpecName,FilterSeparateFile,FormatId,Selected,CpnyIDNameReq,EmailOff,VendorUse,WireTabs,SamePaymentDate,SelectByPaymentDate,PreNote,TxnNacha,UseCheckNumber,
                //UseWithCustomers,UseWithVendors,EDI,UseWithBanktoBank,FundTransferType,UseWithCustomerReimbursement,InvoiceDetail,RemitAvailability,RemitType,APNameType,APAddressType
                //DDNameType,DDAddressType,CRNameType,CRAddressType

        switch (_formatID)
        {
            case ('EU-SOCIETE-GENERALE-XML'):
                paymSpecList = this.getPaymSpecsMetaData_EU_SOCIETE_GENERALE_XML();
                break;

        }

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecsMetaData_EU_SOCIETE_GENERALE_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecsMetaData_EU_SOCIETE_GENERALE_XML()
    {
        container   paymSpecList;

        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'SEPA Credit transfer',1,'SEPA','','SEPA','TRADE PAY',0,'EU-SOCIETE-GENERALE-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Crossborder Funds Transfer-Urgent',1,'URGP','','CBFT-URGP','TRADE PAY',0,'EU-SOCIETE-GENERALE-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Crossborder Funds Transfer-Non Urgent',1,'NURG','','CBFT-NURG','TRADE PAY',0,'EU-SOCIETE-GENERALE-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Treasury Transfer',1,'TREA','','TREA','TRADE PAY',0,'EU-SOCIETE-GENERALE-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'Domestic Credit Transfer',1,'DOM','','DOM','TRADE PAY',0,'EU-SOCIETE-GENERALE-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'NON SEPA Credit transfer',1,'NON-SEPA','','NON-SEPA','TRADE PAY',0,'EU-SOCIETE-GENERALE-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);
        paymSpecList = ConIns(paymSpecList,conLen(paymSpecList)+1,[0,0,0,0,'',0,0,0,0,0,'QRR Payment',1,'QRR','','QRR','TRADE PAY',0,'EU-SOCIETE-GENERALE-XML',0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,1,0,0,0,0]);

        return paymSpecList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData</Name>
				<Source><![CDATA[
    protected container getNotesMetaData(str _formatID)
    {
        container   notesList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Note

        switch (_formatID)
        {
            case ('EU-SOCIETE-GENERALE-XML'):
                notesList = this.getNotesMetaData_EU_SOCIETE_GENERALE_XML();
                break;

        }

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotesMetaData_EU_SOCIETE_GENERALE_XML</Name>
				<Source><![CDATA[
    private container getNotesMetaData_EU_SOCIETE_GENERALE_XML()
    {
        container   notesList;

        notesList = ConIns(notesList,conLen(notesList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::Bank Account > AP EFT+ > Wire/IAT Ordering party fields.:-Name is required.::Cash and Bank management > Bank accounts fields.:-IBAN is required.:-SWIFT code is required.::Vendor bank account fields.:-SWIFT is is required unless the Country code in the IBAN is BE, DE, ES, IT or NL.:-IBAN is required.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab fields.:-Beneficiary Name is required.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['EU-SOCIETE-GENERALE-XML','TREA','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::Bank Account > AP EFT+ > Wire/IAT Ordering party fields.:-Name is required.::Cash and Bank management > Bank accounts fields.:-IBAN is required.:-SWIFT code is required.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab fields.:-Beneficiary Name is required.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::Bank Account > AP EFT+ > Wire/IAT Ordering party fields.:-Name is required.:-If address information is needed, Address 1 and Country are required.::Cash and Bank management > Bank accounts fields.:-IBAN is required.:-SWIFT code is required.::Vendor bank account fields.:-If SWIFT is not populated in the Vendor bank account, the Routing number is required.:-Either Account number or IBAN is required. If both are populated, IBAN takes precedence.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab fields.:-If the Business entity id field on the Account info tab is not populated, Beneficiary Name and Address information will be used.:-If the Routing number is used in Vendor bank account, then the Beneficiary bank Name, Address information and Country fields are required.:-Charge bearer is set in the Charges field on the Other notes section.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab fields.:-Intermediary Agent 1 information will be included if the SWIFT code field on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::Bank Account > AP EFT+ > Wire/IAT Ordering party fields.:-Name is required.:-If address information is needed, Address 1 and Country are required.::Cash and Bank management > Bank accounts fields.:-IBAN is required.:-SWIFT code is required.::Vendor bank account fields.:-If SWIFT is not populated in the Vendor bank account, the Routing number is required.:-Either Account number or IBAN is required. If both are populated, IBAN takes precedence.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab fields.:-If the Business entity id field on the Account info tab is not populated, Beneficiary Name and Address information will be used.:-If the Routing number is used in Vendor bank account, then the Beneficiary bank Name, Address information and Country fields are required.:-Charge bearer is set in the Charges field on the Other notes section.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab fields.:-Intermediary Agent 1 information will be included if the SWIFT code field on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['EU-SOCIETE-GENERALE-XML','DOM','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::Bank Account > AP EFT+ > Wire/IAT Ordering party fields.:-Name is required.:-If address information is needed, Address 1 and Country are required.::Cash and Bank management > Bank accounts fields.:-IBAN is required.:-SWIFT code is required.::Vendor bank account fields.:-If SWIFT is not populated in the Vendor bank account, the Routing number is required.:-Either Account number or IBAN is required. If both are populated, IBAN takes precedence.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab fields.:-If the Business entity id field on the Account info tab is not populated, Beneficiary Name and Address information will be used.:-If the Routing number is used in Vendor bank account, then the Beneficiary bank Name, Address information and Country fields are required.:-Charge bearer is set in the Charges field on the Other notes section.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab fields.:-Intermediary Agent 1 information will be included if the SWIFT code field on the Intermediary bank section is populated.']);
        notesList = ConIns(notesList,conLen(notesList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','-Group Header > Initiating Party > Name is stored in Organization administration > Setup > Organization > Legal entities > Name field.::Bank Account > AP EFT+ > Wire/IAT Ordering party fields.:-Name is required.:-If address information is needed, Address 1 and Country are required.::Cash and Bank management > Bank accounts fields.:-IBAN is required.:-SWIFT code is required.::Vendor bank account fields.:-If SWIFT is not populated in the Vendor bank account, the Routing number is required.:-Either Account number or IBAN is required. If both are populated, IBAN takes precedence.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-1 tab fields.:-If the Business entity id field on the Account info tab is not populated, Beneficiary Name and Address information will be used.:-If the Routing number is used in Vendor bank account, then the Beneficiary bank Name, Address information and Country fields are required.:-Charge bearer is set in the Charges field on the Other notes section.::Vendor eBanking details > Payment specifications > Wire transfer/IAT-2 tab fields.:-Intermediary Agent 1 information will be included if the SWIFT code field on the Intermediary bank section is populated.']);

        return notesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData</Name>
				<Source><![CDATA[
    protected container getValidationsMetaData(str _formatID)
    {
        container   validationsList;

        //Metadata column names of data elements
        //FormatId,PaymSpec,Id,SourceFieldDesc,SourceFieldLoc,TargetFieldLoc,Notes,SourceContext,SourceField,ISOCountrySpec,CountryContext,Required,LengthValidation,MinLength,MaxLength,UserUpdated,Module

        switch (_formatID)
        {
            case ('EU-SOCIETE-GENERALE-XML'):
                validationsList = this.getValidationsMetaData_EU_SOCIETE_GENERALE_XML();
                break;
        }

        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidationsMetaData_EU_SOCIETE_GENERALE_XML</Name>
				<Source><![CDATA[
    private container getValidationsMetaData_EU_SOCIETE_GENERALE_XML()
    {
        container   validationsList;
                
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','TREA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','Originator Name','Name related to bank','15','WOrdPartyName','','',0,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','TREA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank','0','IBAN','','',0,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','TREA','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank','0','SWIFTNo','','',0,2,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','TREA','','Vendor bank Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','Beneficiary Bank ID','Swift Code related to Vendor','9','SWIFTNo','','',0,2,'1','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','TREA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','Beneficiary Name','Name related to Vendor','16','WBeneName','','','1','2','1','70','0','0']);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','TREA','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > edit > Additional Identification (fast tab) > IBAN','Beneficiary Account Number or IBAN','IBAN related to vendor','9','BankIBAN','','',0,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','Originator Name','Name related to bank','15','WOrdPartyName','','',0,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank','0','IBAN','','','0',2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank','0','SWIFTNo','','',0,2,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Vendor bank Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','Beneficiary Bank ID','Swift Code related to Vendor','9','SWIFTNo','','',3,2,'1','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','Beneficiary Bank ID','Routing number related to Vendor','9','RegistrationNum','','',3,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Vendor Bank name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Name','Beneficiary Bank Name','Beneficiary Bank Name','16','WBenBankName','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Vendor Bank Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Country/Region','Beneficiary Bank Country Code','Beneficiary Bank Country','16','WBenBankCountryRegionId','','',0,1,'','0',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','Beneficiary Name','Name related to Vendor','16','WBeneName','','',1,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','Beneficiary Address Line 1','Address related to vendor','16','WBeneAddr','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','Beneficiary Address Line 2','Address related to vendor','16','WBeneAddr2','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','Beneficiary City','vendor City','16','WBeneCity','','',1,2,'1','10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','Beneficiary State/Province/Region','State related to vendor','16','WBeneState','','',1,2,'1','10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','ZIP/Postal Code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','Beneficiary Postal Code',' Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/Region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > edit > Additional Identification (fast tab) > IBAN','Beneficiary Account Number or IBAN','IBAN related to vendor','9','BankIBAN','','',3,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-URGP','','Vendor bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number','Beneficiary Account Number or IBAN','Account Number related to vendor','9','AccountNum','','',3,0,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','Originator Name','Name related to bank','15','WOrdPartyName','','',0,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank','0','IBAN','','',0,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank','0','SWIFTNo','','',0,2,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Charge bearer','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Other notes(group) > Charges','PmtInf > ChrgBr','Charge bearer ','16','WChargesIndic','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Vendor bank Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','Beneficiary Bank ID','Swift Code related to Vendor','9','SWIFTNo','','',3,2,'1','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','Beneficiary Bank ID','Routing number related to Vendor','9','RegistrationNum','','',3,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Vendor Bank name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Name','Beneficiary Bank Name','Beneficiary Bank Name','16','WBenBankName','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Vendor Bank Country','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary bank (group) > Country/Region','Beneficiary Bank Country Code','Beneficiary Bank Country','16','WBenBankCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','Beneficiary Name','Name related to Vendor','16','WBeneName','','',1,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','Beneficiary Address Line 1','Address related to vendor','16','WBeneAddr','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','Beneficiary Address Line 2','Address related to vendor','16','WBeneAddr2','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','Beneficiary City','vendor City','16','WBeneCity','','',1,2,'1','10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','Beneficiary State/Province/Region','State related to vendor','16','WBeneState','','',1,2,'1','10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','ZIP/Postal Code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','Beneficiary Postal Code',' Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/Region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > edit > Additional Identification (fast tab) > IBAN','Beneficiary Account Number or IBAN','IBAN related to vendor','9','BankIBAN','','',3,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','CBFT-NURG','','Vendor bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number','Beneficiary Account Number or IBAN','Account Number related to vendor','9','AccountNum','','',3,0,'1','34',0,0]);
        
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','Originator Name','Name related to bank','15','WOrdPartyName','','',0,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','ZIP/Postal Code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','TownName related to bank','15','WOrdPartyCity','','',1,2,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','State/province','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > State/province','PmtInf > Dbtr > PstlAdr > AdrLine','Bank Country Sub Division','15','WOrdPartyState','','',1,2,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Country/Region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,2,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr2','','',1,2,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank','0','IBAN','','',0,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank','0','SWIFTNo','','',3,2,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Vendor bank Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','Beneficiary Bank ID','Swift Code related to Vendor','9','SWIFTNo','','',0,2,'1','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','Beneficiary Name','Name related to Vendor','16','WBeneName','','',1,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > edit > Additional Identification (fast tab) > IBAN','Beneficiary Account Number or IBAN','IBAN related to vendor','9','BankIBAN','','',0,2,'1','34',0,0]);
        
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','Beneficiary Address Line 1','Address related to vendor','16','WBeneAddr','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','Beneficiary Address Line 2','Address related to vendor','16','WBeneAddr2','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','Beneficiary City','vendor City','16','WBeneCity','','',1,2,'1','10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','Beneficiary State/Province/Region','State related to vendor','16','WBeneState','','',1,2,'1','10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','ZIP/Postal Code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','Beneficiary Postal Code',' Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/Region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > edit > Additional Identification (fast tab) > IBAN','Beneficiary Account Number or IBAN','IBAN related to vendor','9','BankIBAN','','',0,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Charge bearer','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Other notes(group) > Charges','PmtInf > ChrgBr','Charge bearer' ,'16','WChargesIndic','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','Beneficiary Name','Name related to Vendor','16','WBeneName','','',1,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','SEPA','','Batch Booking','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab)> Batch Booking','PmtInf > BtchBookg','Sender ID','15','W01','','',1,2,'0','1',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','DOM','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','Originator Name','Name related to bank','15','WOrdPartyName','','',0,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','DOM','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank','0','IBAN','','',0,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','DOM','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank','0','SWIFTNo','','',0,2,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','DOM','','Vendor bank Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','Beneficiary Bank ID','Swift Code related to Vendor','9','SWIFTNo','','',3,2,'1','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','DOM','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','Beneficiary Bank ID','Routing number related to Vendor','9','RegistrationNum','','',3,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','DOM','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','Beneficiary Name','Name related to Vendor','16','WBeneName','','',1,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','DOM','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > edit > Additional Identification (fast tab) > IBAN','Beneficiary Account Number or IBAN','IBAN related to vendor','9','BankIBAN','','',3,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','DOM','','Vendor bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number','Beneficiary Account Number or IBAN','Account Number related to vendor','9','AccountNum','','',3,0,'1','34',0,0]);

        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','Originator Name','Name related to bank','15','WOrdPartyName','','',0,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','ZIP/Postal Code','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Zip/postal code','PmtInf > Dbtr > PstlAdr > PstCd','ZipCode related to bank','15','WOrdPartyZipCode','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','City','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > City','PmtInf > Dbtr > PstlAdr > AdrLine','TownName related to bank','15','WOrdPartyCity','','',1,2,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','State/province','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > State/province','PmtInf > Dbtr > PstlAdr > AdrLine','Bank Country Sub Division','15','WOrdPartyState','','',1,2,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Country/Region','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Country/region','PmtInf > Dbtr > PstlAdr > Ctry','Country related to bank','15','WOrdPartyCountryRegionId','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Address 1','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 1','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr','','',1,2,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Address 2','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Address 2','PmtInf > Dbtr > PstlAdr > AdrLine','Address related to bank','15','WOrdPartyAddr2','','',1,2,'','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank','0','IBAN','','',0,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank','0','SWIFTNo','','',0,2,'8','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Vendor bank Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','Beneficiary Bank ID','Swift Code related to Vendor','9','SWIFTNo','','',3,2,'1','11',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','Beneficiary Name','Name related to Vendor','16','WBeneName','','',1,2,'1','70',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > edit > Additional Identification (fast tab) > IBAN','Beneficiary Account Number or IBAN','IBAN related to vendor','9','BankIBAN','','',0,2,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number','0','AccountNum','','',3,0,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','Beneficiary Bank ID','Routing number related to Vendor','9','RegistrationNum','','',3,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Vendor bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts >General tab > Identification(group) > Bank Account Number','Beneficiary Account Number or IBAN','Account Number related to vendor','9','AccountNum','','',3,0,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Address 1','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 1','Beneficiary Address Line 1','Address related to vendor','16','WBeneAddr','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Address 2','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Address 2','Beneficiary Address Line 2','Address related to vendor','16','WBeneAddr2','','',1,2,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','City','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > City','Beneficiary City','vendor City','16','WBeneCity','','',1,2,'1','10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','State/province','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > State/province','Beneficiary State/Province/Region','State related to vendor','16','WBeneState','','',1,2,'1','10',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','ZIP/Postal Code','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > ZIP/Postal Code','Beneficiary Postal Code',' Vendor Zip/postal code','16','WBeneZipPostal','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Country/Region','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Country/Region','PmtInf > CdTrfTxInf > Cdtr > PstlAdr > Ctry','Country related to vendor','16','WBeneCountryRegionId','','',0,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','NON-SEPA','','Vendor bank IBAN','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > edit > Additional Identification (fast tab) > IBAN','Beneficiary Account Number or IBAN','IBAN related to vendor','9','BankIBAN','','',3,2,'1','34',0,0]);
        
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','Name','TAS > Set up > Bank account > Select AP EFT+ > Wire/IAT ordering party(Fast tab) > Name','PmtInf > Dbtr > Nm','Name related to bank','15','WOrdPartyName','','',1,0,'1','140',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','IBAN','Cash and bank management > Select bank account > edit > Additional identification (fast tab) IBAN','PmtInf > DbtrAcct > Id >IBAN ','IBAN related to Bank','0','IBAN','','',3,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','Bank Account Number','Cash and bank management > Select bank account > edit > General (fast tab) Bank Account Number','PmtInf > DbtrAcct > Id > Othr > Id','Bank account number','0','AccountNum','','',3,1,'1','34',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','Swift Code','Cash and bank management > Select bank account > edit > Additional identification (fast tab) > Swift No','PmtInf > DbtrAgt > FinInstnId > BIC','Swift code related to Bank','0','SWIFTNo','','',3,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','Routing Number','Cash and bank management > Select bank account > edit > General (fast tab) > Routing Number','PmtInf > DbtrAgt > FinInstnId > ClrSysMmbId > MmbId ','Routing Number related to Bank','0','RegistrationNum','','',3,0,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','Bank Account Number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Bank Account Number','PmtInf > CdtTrfTxInf > CdtrAcct > Id > Othr > Id','Account Number related to vendor','9','AccountNum','','',1,1,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','Routing number','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Routing number','PmtInf > CdTrfTxInf > CdtrAgt >  FinInstnId > ClrSysMmbId > MmbId','Routing number related to Vendor','9','RegistrationNum','','',1,1,'1','35',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','Swift Code','TAS > Common > Vendor eBanking details > Payment specifications > Vendor bank accounts > General tab > Identification(group) > Swift Code','PmtInf > CdTrfTxInf > CdtrAgt > FinInstnId > BIC','Swift Code related to Vendor','9','SWIFTNo','','',1,1,'','',0,0]);
        validationsList = ConIns(validationsList,conLen(validationsList)+1,['EU-SOCIETE-GENERALE-XML','QRR','','Name','TAS > Common > Vendor eBanking details > Payment specifications > Wire transfer/IAT - 1(Fast tab) > Beneficiary(group) > Name','PmtInf > CdTrfTxInf > Cdtr > Nm','Name related to Vendor','16','WBeneName','','',1,1,'1','35',0,0]);
        
        return validationsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupMetaData()
    {
        container   codeLookupList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Description

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['EU-SOCIETE-GENERALE-XML','Charges','Charges']);

        return codeLookupList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        //Metadata column names of data elements
        //FormatGroup,CodeID,Display Value,CodeValue

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['EU-SOCIETE-GENERALE-XML','Charges','Payer','DEBT']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['EU-SOCIETE-GENERALE-XML','Charges','Beneficiary','CRED']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['EU-SOCIETE-GENERALE-XML','Charges','Shared','SHAR']);

        return codeLookupValuesList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getPaymSpecFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        //Metadata column names of data elements
        //FormatGroup,FormatID,PaymentSpec,FormatFieldID,Description,FieldType,CodeID,DefaultValue,Required,FixedValue,FixedValueMask,TechNotes

        switch (_formatID)
        {
            case ('EU-SOCIETE-GENERALE-XML'):
                paymSpecFieldsList = this.getPaymSpecFieldsMetaData_EU_SOCIETE_GENERALE_XML();
                break;

        }

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymSpecFieldsMetaData_EU_SOCIETE_GENERALE_XML</Name>
				<Source><![CDATA[
    private container getPaymSpecFieldsMetaData_EU_SOCIETE_GENERALE_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['EU-SOCIETE-GENERALE-XML','EU-SOCIETE-GENERALE-XML','CBFT-NURG','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['EU-SOCIETE-GENERALE-XML','EU-SOCIETE-GENERALE-XML','CBFT-URGP','Charges','Charges',0,'Charges','',0,'','','CdtTrfTxInf > ChrgBr']);

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['EU-SOCIETE-GENERALE-XML','EU-SOCIETE-GENERALE-XML','CBFT-NURG','BusinessEntyId','Business Entity Id',1,'BusinessEntyId','',0,'','XXXXXXXXXXX','Business Entity Id']);
        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['EU-SOCIETE-GENERALE-XML','EU-SOCIETE-GENERALE-XML','CBFT-URGP','BusinessEntyId','Business Entity Id',1,'BusinessEntyId','',0,'','XXXXXXXXXXX','Business Entity Id']);

        return paymSpecFieldsList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getControlFormatMetaData</Name>
				<Source><![CDATA[
    protected container getControlFormatMetaData(str _formatID)
    {
        container   ControlFormatList;

        //Metadata column names of data elements
        //FileFormatID,ControlFileFormatID,ControlFileDescription

        switch (_formatID)
        {
        }

        return ControlFormatList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeleteMetaData</Name>
				<Source><![CDATA[
    protected container getDeleteMetaData()
    {
        container   deleteList;

        //FormatGroup, FormatId, DetailType, KeyID1, KeyId2, KeyId3

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['EU-SOCIETE-GENERALE-XML','EU-SOCIETE-GENERALE-XML','FormatValidations','DOM','15','W01']);

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['EU-SOCIETE-GENERALE-XML','*','FormatLookup','*','*','']);

        deleteList = ConIns(deleteList,conLen(deleteList)+1,['EU-SOCIETE-GENERALE-XML','*','FormatValidations','*','0','']);

        return deleteList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupMetaData()
    {
        container   codeLookupList;

        codeLookupList = ConIns(codeLookupList,conLen(codeLookupList)+1,['EU-SOCIETE-GENERALE-XML','BtchBookg','Batch Booking (Y/N)']);
        return codeLookupList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankCodeLookupValuesMetaData</Name>
				<Source><![CDATA[
    protected container getBankCodeLookupValuesMetaData()
    {
        container   codeLookupValuesList;

        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['EU-SOCIETE-GENERALE-XML','BtchBookg','Y','Y']);
        codeLookupValuesList = ConIns(codeLookupValuesList,conLen(codeLookupValuesList)+1,['EU-SOCIETE-GENERALE-XML','BtchBookg','N','N']);

        return codeLookupValuesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData</Name>
				<Source><![CDATA[
    protected container getFileFormatFieldsMetaData(str _formatID)
    {
        container   paymSpecFieldsList;

        switch (_formatID)
        {
            case ('EU-SOCIETE-GENERALE-XML'):
                paymSpecFieldsList = this.getFileFormatFieldsMetaData_EU_SOCIETE_GENERALE_XML();
                break;
        }

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFileFormatFieldsMetaData_EU_SOCIETE_GENERALE_XML</Name>
				<Source><![CDATA[
    private container getFileFormatFieldsMetaData_EU_SOCIETE_GENERALE_XML()
    {
        container   paymSpecFieldsList;

        paymSpecFieldsList = ConIns(paymSpecFieldsList,conLen(paymSpecFieldsList)+1,['EU-SOCIETE-GENERALE-XML','EU-SOCIETE-GENERALE-XML','BtchBookg','Batch Booking',1,'BtchBookg','',1,'','X','GrpHdr > PmtInf > BtchBookg']);

        return paymSpecFieldsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorCodelookupValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating vendor code lookpus from BE0X and Legacy code loookups
    /// </summary>
    protected void updateVendorCodelookupValues()
    {
        switch(gSKS_EFT_FileFormat.FormatId)
        {
            case ('EU-SOCIETE-GENERALE-XML'):
                if(gSKS_EFT_VendorPaym.WChargesIndic)
                {
                    this.updateVendorFields('Charges', gSKS_EFT_VendorPaym.WChargesIndic, true);
                }
                if(gSKS_EFT_VendorPaym.BE01)
                {
                    this.updateVendorFields('BusinessEntyId', gSKS_EFT_VendorPaym.BE01);
                }
                if(gSKS_EFT_Bank.W01)
                {
                    this.updateVendorFields('BtchBookg', gSKS_EFT_VendorPaym.BE01);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>