<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CCR_ReadParseTeller</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CCR_ReadParseTeller extends SKS_CCR_ReadParseBase
{
    const System.String gCarriageReturnPlaceholder = 'Ю牛귨';
    System.String[] gRecords;
    utcDateTime gFileUtcDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetInboundFile</Name>
				<Source><![CDATA[
    public SKS_CCR_InboundFile GetInboundFile(SKS_EB_FilePathName _FilePathAndName, SKS_BF_BankIntType _SKS_BF_BankIntType)
    {
        this.InitializeFileInfo(_FilePathAndName, _SKS_BF_BankIntType);
        if (!this.openFile())
        {
            return null;
        }

        return this.parseFile();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    boolean openFile()
    {
        System.Text.StringBuilder locStringBuilder;
        System.String locString;
        if (!gSKS_EB_FileHub.attrfileExists())
        {
            throw error((strfmt("@SYS62207",gSKS_EB_FileHub.fileName())));
        }
        gSKS_EB_FileHub.runFileLoad(gSKS_EB_FileHub.getSKS_BF_BankIntType() == SKS_BF_BankIntType::FileHubLocal ? gSKS_EB_FileHub.fileName() : strFmt(@'%1\%2', gSKS_EB_FileHub.getBFFilePath(),gSKS_EB_FileHub.fileName())
                                    ,gBRPreReadScript
                                    ,gBRPreReadScriptParams
                                    ,gBRPostReadScript
                                    ,gBRPostReadScriptParams);
        try
        {
            gSKS_EB_FileHub.streamInit();
        }
        catch
        {
            //file could not be opened
            throw error(strfmt("@SYS19312",gSKS_EB_FileHub.fileName()));
        }

        locStringBuilder = new System.Text.StringBuilder(gSKS_EB_FileHub.fileBody());
        gFileUtcDateTime = gSKS_EB_FileHub.attrFileCreated();
        gSKS_EB_FileHub.streamClose();
        //Normalize Carriage returns
        locStringBuilder = locStringBuilder.Replace('\r\n',gCarriageReturnPlaceholder);
        locStringBuilder = locStringBuilder.Replace('\n\r', gCarriageReturnPlaceholder);
        locStringBuilder = locStringBuilder.Replace('\r', gCarriageReturnPlaceholder);
        locStringBuilder = locStringBuilder.Replace('\n', gCarriageReturnPlaceholder);
        locStringBuilder = locStringBuilder.Replace(gCarriageReturnPlaceholder, '\r');
        locString = locStringBuilder.ToString();
        locStringBuilder = null;
        gRecords = locString.Split('\r');
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseFile</Name>
				<Source><![CDATA[
    public SKS_CCR_InboundFile parseFile()
    {
        System.String locRecordAsString;
        SKS_BR_FileTranType locSKS_BR_FileTranType;
        System.String[] locRecordAsArray;
        System.DateTime locDtemp = System.DateTime::Now;
        //int locCurrentHour = locDtemp.Hour;
        //int locCurrentMinute = locDtemp.Minute;
        int locCurrentSecond = locDtemp.Second;
        int locCurrentMillisecond = locDtemp.Millisecond;
        BankAccountStatementNum locBankAccountStatementNum;
        str locTempString;
        
        
        gSKS_CCR_InboundFile = new SKS_CCR_InboundFile();
        for(int64 forLineCounter = 1; forLineCounter <= gRecords.Length; forLineCounter++)
        {
            if(forLineCounter <= gSKS_BR_FileFormat.OmitHeaderRecs)
                continue;
            locRecordAsString = gRecords.GetValue(forLineCounter - 1);//you need to compensate for an off by one because the array is zero based.
            if(System.String::IsNullOrEmpty(locRecordAsString.Trim()))
                continue;
            if(locRecordAsString.TrimStart().ToUpper().StartsWith('SFTP'))//SFTP lines are interspersed throughtout file.  Omit SFTP lines.
                continue;
            locRecordAsArray = System.Text.RegularExpressions.Regex::Split(locRecordAsString, gFieldDelimiter + '(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)');
            locRecordAsArray = this.removeDoubleQuotes(locRecordAsArray);
            locSKS_BR_FileTranType = locRecordAsArray.GetValue(0);
            
            if((locSKS_BR_FileTranType == '100' || locSKS_BR_FileTranType == '110') && gSKS_CCR_InboundFile == null)
                gSKS_CCR_InboundFile = new SKS_CCR_InboundFile();
            if((locSKS_BR_FileTranType == '100' || locSKS_BR_FileTranType == '110') && gSKS_CCR_InboundStmt == null)
                gSKS_CCR_InboundStmt = new SKS_CCR_InboundStmt();
            if(locSKS_BR_FileTranType == '110' && gSKS_CCR_InboundStmt.GetNbr() == '')
            {
                locTempString = locRecordAsArray.GetValue(1).ToString();
                gSKS_CCR_InboundStmt.SetDate(locTempString, 123);
                locBankAccountStatementNum  = SKS_PP_StringFormats::strFill(4,int2str(year(gSKS_CCR_InboundStmt.GetDate())), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left) +
                    SKS_PP_StringFormats::strFill(2,int2str(mthOfYr(gSKS_CCR_InboundStmt.GetDate())), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left) +
                    SKS_PP_StringFormats::strFill(2,int2str(dayOfMth(gSKS_CCR_InboundStmt.GetDate())), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left) +
                    SKS_PP_StringFormats::strFill(2,int2str(DateTimeUtil::hour(gFileUtcDateTime)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left) +
                    SKS_PP_StringFormats::strFill(2,int2str(DateTimeUtil::minute(gFileUtcDateTime)), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left) +
                    SKS_PP_StringFormats::int642BaseSKG34(locCurrentSecond * 1000 + locCurrentMillisecond);
                gSKS_CCR_InboundStmt.SetNbr(locBankAccountStatementNum);
                gSKS_CCR_InboundStmt.SetAccount(locRecordAsArray.GetValue(16));
            }
            switch(locSKS_BR_FileTranType)
            {
                case '100':
                    this.process100RecordArray(locRecordAsArray);
                    break;
                case '110':
                    this.process110RecordArray(locRecordAsArray);
                    break;
                case '200':
                    this.process200RecordArray(locRecordAsArray);
                    break;
                case '300':
                    this.process300RecordArray(locRecordAsArray);
                    break;
                case '410':
                    if(gSKS_CCR_InboundStmt)
                    {
                        gSKS_CCR_InboundFile.PushStmt(gSKS_CCR_InboundStmt);
                        gSKS_CCR_InboundStmt = null;
                    }
                    break;
            }
        }
        if(gSKS_CCR_InboundStmt)
        {
            gSKS_CCR_InboundFile.PushStmt(gSKS_CCR_InboundStmt);
            gSKS_CCR_InboundStmt = null;
        }
        return gSKS_CCR_InboundFile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process100RecordArray</Name>
				<Source><![CDATA[
    //Trans type 100 will always be logged as a 100x where x is the Entry type(field 21(idx 20))
    protected void process100RecordArray(System.String[] _RecordAsArray)
    {
        //only process for "entry Type" 2, 4, 6
        if(_RecordAsArray.GetValue(20) != '3' && _RecordAsArray.GetValue(20) != '4' && _RecordAsArray.GetValue(20) != '6')
            return;
        gSKS_CCR_InboundTran = new SKS_CCR_InboundTran();
        gSKS_CCR_InboundTran.SetTranType(_RecordAsArray.GetValue(0).ToString() + _RecordAsArray.GetValue(20).ToString());
        gSKS_CCR_InboundTran.SetCurrency(_RecordAsArray.GetValue(9));
        gSKS_CCR_InboundTran.SetAmt(SKS_EB_Currency::formatStringToCurrency(strReplace(_RecordAsArray.GetValue(10), ',', '.') + '00', _RecordAsArray.GetValue(9), true));
        gSKS_CCR_InboundTran.setImportAsPositive(strUpr(_RecordAsArray.GetValue(11)) == 'D'); //1003, 1004, 1006:  D is POSITIVE //14348
        gSKS_CCR_InboundStmt.PushTrans(gSKS_CCR_InboundTran);
        gSKS_CCR_InboundTran = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process110RecordArray</Name>
				<Source><![CDATA[
    protected void process110RecordArray(System.String[] _RecordAsArray)
    {
        str locTempString;
        gSKS_CCR_InboundTran = new SKS_CCR_InboundTran();
        gSKS_CCR_InboundTran.SetTranType(_RecordAsArray.GetValue(0));
        locTempString = _RecordAsArray.GetValue(1);
        gSKS_CCR_InboundTran.SetDate(locTempString, 123);
        if(strLen(_RecordAsArray.GetValue(5)) > 0)
            gSKS_CCR_InboundTran.AppendDesc( 'PAN-VAR:' + _RecordAsArray.GetValue(5).ToString());
        gSKS_CCR_InboundTran.SetCurrency(_RecordAsArray.GetValue(6));
        gSKS_CCR_InboundTran.SetAmt(SKS_EB_Currency::formatStringToCurrency(strReplace(_RecordAsArray.GetValue(7), ',', '.') + '00', _RecordAsArray.GetValue(6), true));
        gSKS_CCR_InboundTran.setImportAsPositive('D' == strUpr(_RecordAsArray.GetValue(8))); //110's "D" is POSITIVE, K is negative //14348
        gSKS_CCR_InboundTran.SetBankRefNbr(_RecordAsArray.GetValue(9));
        if(strLen(_RecordAsArray.GetValue(21)) > 0)
            gSKS_CCR_InboundTran.AppendDesc('CARD:' + _RecordAsArray.GetValue(21).ToString());
        if(strLen(_RecordAsArray.GetValue(22)) > 0)
            gSKS_CCR_InboundTran.AppendDesc('CUSTREF:' + _RecordAsArray.GetValue(22).ToString());
        gSKS_CCR_InboundTran.SetCustRefNbr(_RecordAsArray.GetValue(22));
        if(strLen(_RecordAsArray.GetValue(23)) > 0)
            gSKS_CCR_InboundTran.AppendDesc('REQNBR:' + _RecordAsArray.GetValue(23).ToString());
        gSKS_CCR_InboundStmt.PushTrans(gSKS_CCR_InboundTran);
        gSKS_CCR_InboundTran = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process200RecordArray</Name>
				<Source><![CDATA[
    protected void process200RecordArray(System.String[] _RecordAsArray)
    {
        //only import fees.  Fees will always have 'K' in the 15th field(index 14)
        if(strUpr(_RecordAsArray.GetValue(14)) != 'K')
            return;
        gSKS_CCR_InboundTran = new SKS_CCR_InboundTran();
        gSKS_CCR_InboundTran.SetTranType(_RecordAsArray.GetValue(0));
        gSKS_CCR_InboundTran.AppendDesc('TEXT:' + _RecordAsArray.GetValue(3).ToString());
        gSKS_CCR_InboundTran.AppendDesc('ACCTNBR:' + _RecordAsArray.GetValue(4).ToString());
        gSKS_CCR_InboundTran.SetCurrency(_RecordAsArray.GetValue(9));
        gSKS_CCR_InboundTran.SetAmt(SKS_EB_Currency::formatStringToCurrency(strReplace(_RecordAsArray.GetValue(13), ',', '.') + '00',_RecordAsArray.GetValue(9), true));
        gSKS_CCR_InboundTran.setImportAsPositive(strUpr(_RecordAsArray.GetValue(14)) == 'D');//200's K is negitive, so D is positive //14348
        gSKS_CCR_InboundStmt.PushTrans(gSKS_CCR_InboundTran);
        gSKS_CCR_InboundTran = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process300RecordArray</Name>
				<Source><![CDATA[
    protected void process300RecordArray(System.String[] _RecordAsArray)
    {
        gSKS_CCR_InboundTran = new SKS_CCR_InboundTran();
        gSKS_CCR_InboundTran.SetTranType(_RecordAsArray.GetValue(0));
        gSKS_CCR_InboundTran.AppendDesc('TEXT:' + _RecordAsArray.GetValue(3).ToString());
        gSKS_CCR_InboundTran.AppendDesc('ACCTNBR:' + _RecordAsArray.GetValue(4).ToString());
        gSKS_CCR_InboundTran.SetCurrency(_RecordAsArray.GetValue(9));
        gSKS_CCR_InboundTran.SetAmt(SKS_EB_Currency::formatStringToCurrency(strReplace(_RecordAsArray.GetValue(13), ',', '.') + '00', _RecordAsArray.GetValue(9), true));
        gSKS_CCR_InboundTran.setImportAsPositive(strUpr(_RecordAsArray.GetValue(14)) == 'K');//"300's K is imported as positive, D is negative" //14348
        gSKS_CCR_InboundStmt.PushTrans(gSKS_CCR_InboundTran);
        gSKS_CCR_InboundTran = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDoubleQuotes</Name>
				<Source><![CDATA[
    protected System.String[] removeDoubleQuotes(System.String[] _RecordAsArray)
    {
        System.String[] rtnval = new System.String[_RecordAsArray.Length]();
        System.String test = '';
        for(int tempCounter = 0; tempCounter < _RecordAsArray.Length; tempCounter++)
        {
            rtnval.SetValue((strStartsWith(_RecordAsArray.GetValue(tempCounter), '"') && strEndsWith(_RecordAsArray.GetValue(tempCounter), '"')) ? _RecordAsArray.GetValue(tempCounter).ToString().Substring(1,_RecordAsArray.GetValue(tempCounter).ToString().Length - 2) : _RecordAsArray.GetValue(TempCounter), tempCounter);
        }

        return rtnval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>