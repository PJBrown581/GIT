<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CustVendPaymReconciliationSetStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SKS_CustVendPaymReconciliationSetStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>rejectNegInst</Name>
				<Source><![CDATA[
    //We are COPYING the CustVendPaymReconciliationSetStatus.RejectNegInst method, to remove dialogs for batch processing.
    //If problems arise in the RejectNegInst method, Compare this RejectNegInst method with
    //  CustVendPaymReconciliationSetStatus.RejectNegInst method.  It's likely AX will
    //  we just need to update our copy of the method.
    public boolean rejectNegInst(LedgerJournalTrans _ledgerJournalTrans)
    {
        //We are COPYING the CustVendPaymReconciliationSetStatus.RejectNegInst method, to remove dialogs for batch processing.
        //If problems arise in the RejectNegInst method, Compare this RejectNegInst method with
        //  CustVendPaymReconciliationSetStatus.RejectNegInst method.  It's likely AX will
        //  we just need to update our copy of the method
        BankAccountID       bankAccountID;
        BankChequeTable     bankChequeTable;
        BankChequeTable     bankChequeTableNotPrinted;
        BankChequeTable     bankChequeTableLastNotPrinted;
        BankChequeTable     bankChequeTableNextPrinted;
        ChequeNumMethod     chequeNumMethod;
        BankChequePaymTrans bankChequePaymTrans;
        ;
    
        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            bankAccountID = _ledgerJournalTrans.parmOffsetAccount();
        }
        else
        {
            bankAccountID = CustVendPaymModeTable::findCommon(_ledgerJournalTrans).parmPaymAccount();
        }
    
        // Is there a cheque attached to this record?
        if ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend   ||
            _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust    ||
            _ledgerJournalTrans.AccountType == LedgerJournalACType::Bank    ||
            _ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger) &&
            bankAccountID                                                                                                                   &&
            BankChequeTable::exist(bankAccountID, _ledgerJournalTrans.BankChequeNum))
        {
            // Is the cheque already rejected/voided?
            if (BankChequeTable::find(bankAccountID, _ledgerJournalTrans.BankChequeNum).ChequeStatus == ChequeStatus::Rejected)
            {
                return checkFailed(strfmt('%1 %2: %3',"@SYS12371", _ledgerJournalTrans.Voucher, "@SYS24512"));
            }
            //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            //if (reuseCheck)
            if(NoYes::Yes)//SKS-END -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            {
                chequeNumMethod = BankChequeLayout::find(bankAccountID).ChequeNumMethod;
    
                if (chequeNumMethod == ChequeNumMethod::Fixed)
                {
                    delete_from bankChequePaymTrans
                        where bankChequePaymTrans.AccountId  == bankAccountID
                           && bankChequePaymTrans.ChequeNum  == _ledgerJournalTrans.PaymReference;
                }
    
                // Reuse check attached to ledger journal trans record
                BankChequeReprints::insertCheque(bankAccountID,
                                                 _ledgerJournalTrans.BankChequeNum,
                                                 ChequeStatus::Void,
                                                 _ledgerJournalTrans.TransDate,
                                                 _ledgerJournalTrans.Voucher,
                                                 CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                                                 _ledgerJournalTrans.parmAccount(),
                                                 _ledgerJournalTrans.CurrencyCode,
                                                 _ledgerJournalTrans.amount(),
                                                 _ledgerJournalTrans.BankNegInstRecipientName);
    
    
                BankChequeTable::setChequeStatus(bankAccountID,
                                                 _ledgerJournalTrans.PaymReference,
                                                 ChequeStatus::Created,
                                                 dateNull(),
                                                 '',
                                                 CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                                                 '',
                                                 '',
                                                 '',
                                                 0,
                                                 '');
    
                // Fix NotPrinted status checks immediately following the reused check
                select firstonly ChequeNum from bankChequeTableNextPrinted where bankChequeTableNextPrinted.AccountID == bankAccountID &&
                    bankChequeTableNextPrinted.ChequeNum > _ledgerJournalTrans.BankChequeNum &&
                    bankChequeTableNextPrinted.ChequeStatus != ChequeStatus::NotPrinted;
    
                if (bankChequeTableNextPrinted.ChequeNum)
                {
                    while select ChequeNum from bankChequeTableNotPrinted
                        where bankChequeTableNotPrinted.AccountID == bankAccountID
                           && bankChequeTableNotPrinted.ChequeNum > _ledgerJournalTrans.BankChequeNum
                           && bankChequeTableNotPrinted.ChequeNum < bankChequeTableNextPrinted.ChequeNum
                           && bankChequeTableNotPrinted.ChequeStatus == ChequeStatus::NotPrinted
                    {
                        BankChequeTable::setChequeStatus(bankAccountID,
                                                         bankChequeTableNotPrinted.ChequeNum,
                                                         ChequeStatus::Created,
                                                         dateNull(),
                                                         '',
                                                         CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                                                         '',
                                                         '',
                                                         '',
                                                         0,
                                                         '');
                    }
    
                    if (chequeNumMethod == ChequeNumMethod::Free)
                    {
                        bankChequeTable.skipDataMethods(true); // TAS CAR
                        delete_from bankChequeTable where bankChequeTable.AccountID == bankAccountID &&
                            bankChequeTable.ChequeNum > _ledgerJournalTrans.BankChequeNum &&
                            bankChequeTable.ChequeNum < bankChequeTableNextPrinted.ChequeNum &&
                            bankChequeTable.ChequeStatus == ChequeStatus::Created;
                    }
                }
                else
                {
                    select firstonly ChequeNum from bankChequeTableLastNotPrinted order by ChequeNum desc
                        where bankChequeTableLastNotPrinted.AccountID == bankAccountID &&
                        bankChequeTableLastNotPrinted.ChequeNum > _ledgerJournalTrans.BankChequeNum &&
                        bankChequeTableLastNotPrinted.ChequeStatus == ChequeStatus::NotPrinted;
    
                    if (bankChequeTableLastNotPrinted.ChequeNum)
                    {
                        while select bankChequeTableNotPrinted where bankChequeTableNotPrinted.AccountID == bankAccountID &&
                            bankChequeTableNotPrinted.ChequeNum > _ledgerJournalTrans.BankChequeNum &&
                            bankChequeTableNotPrinted.ChequeNum <= bankChequeTableLastNotPrinted.ChequeNum &&
                            bankChequeTableNotPrinted.ChequeStatus == ChequeStatus::NotPrinted
                        {
                            BankChequeTable::setChequeStatus(bankAccountID,
                                                             bankChequeTableNotPrinted.ChequeNum,
                                                             ChequeStatus::Created,
                                                             dateNull(),
                                                             '',
                                                             CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                                                             '',
                                                             '',
                                                             '',
                                                             0,
                                                             '');
                        }
    
                        if (chequeNumMethod == ChequeNumMethod::Free)
                        {
                            bankChequeTable.skipDataMethods(true); // TAS CAR
                            delete_from bankChequeTable where bankChequeTable.AccountID == bankAccountID &&
                                bankChequeTable.ChequeNum > _ledgerJournalTrans.BankChequeNum &&
                                bankChequeTable.ChequeNum <= bankChequeTableLastNotPrinted.ChequeNum &&
                                bankChequeTable.ChequeStatus == ChequeStatus::Created;
                        }
                    }
                }
    
                if (chequeNumMethod == ChequeNumMethod::Free)
                {
                    bankChequeTable.skipDataMethods(true); // TAS CAR
                    delete_from bankChequeTable where bankChequeTable.AccountID == bankAccountID &&
                        bankChequeTable.ChequeNum == _ledgerJournalTrans.PaymReference;
                }
    
                _ledgerJournalTrans.PaymReference = '';
                _ledgerJournalTrans.BankChequeNum = '';
                _ledgerJournalTrans.NoEdit = NoYes::No;
                _ledgerJournalTrans.update();
                return true;
            }
            else
            {
                //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
                //We are COPYING the CustVendPaymReconciliationSetStatus.RejectNegInst method, to remove dialogs for batch processing.
                //If problems arise in the RejectNegInst method, Compare this RejectNegInst method with
                //  CustVendPaymReconciliationSetStatus.RejectNegInst method.  It's likely AX will
                //  we just need to update our copy of the method
                /*if (Box::yesNo(strfmt("@SYS24509", _ledgerJournalTrans.BankChequeNum),
                               DialogButton::Yes,
                               "@SYS24283",
                               "@SYS29058") == DialogButton::Yes)
                {*/
                //SKS-END -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
                    BankChequeTable::setChequeStatus(bankAccountID,
                                                     _ledgerJournalTrans.BankChequeNum,
                                                     ChequeStatus::Rejected,
                                                     _ledgerJournalTrans.TransDate,
                                                     _ledgerJournalTrans.Voucher,
                                                     CustVendCheque::ledgerJournalACType2RecipientType(_ledgerJournalTrans.AccountType),
                                                     _ledgerJournalTrans.Company,
                                                     _ledgerJournalTrans.parmAccount(),
                                                     _ledgerJournalTrans.CurrencyCode,
                                                     _ledgerJournalTrans.amount(),
                                                     _ledgerJournalTrans.BankNegInstRecipientName);
    
                    //_ledgerJournalTrans.paymReference = '';
                    _ledgerJournalTrans.BankChequeNum = '';
                    _ledgerJournalTrans.NoEdit = NoYes::No;
                    _ledgerJournalTrans.update();
                    return true;
                //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
                //}
                //SKS-END -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            }
        }
        // Is there a bill of exchange attached to this record?
        //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
        //if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend     &&
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend     &&
        //SKS-END -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            bankAccountID                                                   &&
            BankBillOfExchangeTable::exist(bankAccountID, _ledgerJournalTrans.PaymReference))
        {
            // Is the bill of exchange already rejected/voided?
            if (BankBillOfExchangeTable::find(bankAccountID, _ledgerJournalTrans.PaymReference).DocumentStatus == BankBillOfExchangeStatus::Cancelled)
            {
                return checkFailed(strfmt('%1 %2: %3',"@SYS12371", _ledgerJournalTrans.Voucher, "@SYS79724"));
            }
            //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            /*if (Box::yesNo(strfmt("@SYS79725", _ledgerJournalTrans.PaymReference),
                           DialogButton::Yes,
                           "@SYS79726",
                           "@SYS79727") == DialogButton::Yes)
            {*/
            //SKS-END -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
                BankBillOfExchangeTable::setBillOfExchangeDocStatus(bankAccountID,
                                                                    _ledgerJournalTrans.BankBillOfExchangeNum,
                                                                    BankBillOfExchangeStatus::Cancelled,
                                                                    _ledgerJournalTrans.TransDate,
                                                                    _ledgerJournalTrans.Voucher,
                                                                    _ledgerJournalTrans.parmAccount(),
                                                                    _ledgerJournalTrans.CurrencyCode,
                                                                    _ledgerJournalTrans.amount());
                _ledgerJournalTrans.PaymReference = '';
                _ledgerJournalTrans.BankBillOfExchangeNum = '';
                _ledgerJournalTrans.NoEdit = NoYes::No;
                _ledgerJournalTrans.update();
                return true;
            //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            //}
            //return false;
            //SKS-END; -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
        }
        // Is there a promissory note attached to this record?
        //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
        //if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend     &&
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend     &&
        //SKS-END -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            bankAccountID                                                   &&
            BankPromissoryNoteTable::exist(bankAccountID, _ledgerJournalTrans.PaymReference))
        {
            // Is the promissory note already rejected/voided?
            if (BankPromissoryNoteTable::find(bankAccountID, _ledgerJournalTrans.PaymReference).DocumentStatus == BankPromissoryNoteStatus::Cancelled)
            {
                return checkFailed(strfmt('%1 %2: %3',"@SYS12371", _ledgerJournalTrans.Voucher, "@SYS79728"));
            }
            //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            /*if (Box::yesNo(strfmt("@SYS79729", _ledgerJournalTrans.PaymReference),
                           DialogButton::Yes,
                           "@SYS79730",
                           "@SYS79731") == DialogButton::Yes)
            {
            */
            //SKS-END -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
                BankPromissoryNoteTable::setPromissoryNoteDocStatus(bankAccountID,
                                                                    _ledgerJournalTrans.BankPromissoryNoteNum,
                                                                    BankPromissoryNoteStatus::Cancelled,
                                                                    _ledgerJournalTrans.TransDate,
                                                                    _ledgerJournalTrans.Voucher,
                                                                    _ledgerJournalTrans.parmAccount(),
                                                                    _ledgerJournalTrans.CurrencyCode,
                                                                    _ledgerJournalTrans.amount());
                _ledgerJournalTrans.PaymReference = '';
                _ledgerJournalTrans.BankPromissoryNoteNum = '';
                _ledgerJournalTrans.NoEdit = NoYes::No;
                _ledgerJournalTrans.update();
                return true;
            //SKS-BEGIN -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
            //}
            //return false;
            //SKS-END -- KEEP THIS --because this is a copy of an AX class & method, we need to know what we are modifying.
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>