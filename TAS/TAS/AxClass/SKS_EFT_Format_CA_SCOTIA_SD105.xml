<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_CA_SCOTIA_SD105</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// SKS_EFT_Format_CA_SCOTIA_SD105 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_CA_SCOTIA_SD105 extends SKS_EFT_Format
{
    #define.FormatVersion('20220325')
    #define.LineEnd('\r\n')

    int mDRecordCount = 0;
    int mCRecordCount = 0;
    AmountMST mDPaymentAmount;
    AmountMST mCPaymentAmount;

    System.Text.StringBuilder   msb;
    SKS_EFT_SequenceNumber      mSequenceNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        BankAccountTable        mBankAccountTable;

        msb = new System.Text.StringBuilder();

        // Get sequence number
        this.getSequence();

        // Format header
        this.rec_Detail_A();

        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();

            // Get SKS_EFT_FileFormatPaymSpec
            this.getSKS_EFT_FileFormatPaymSpec();

            //Get Remittance Information
            this.getRemittanceAddress(mSKS_EFT_FileFormatPaymSpec.UseCheckNumber);

            if(mBankAccountTable.AccountID != mSKS_EFT_FileDetail.BankAccountId)
            {
                this.rec_Detail_Y();
                // Get Bank account
                mBankAccountTable = BankAccountTable::find(mSKS_EFT_FileDetail.BankAccountId);
            }

            if(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur > 0)
            {
                this.rec_Detail_D();
            }
            else
            {
                this.rec_Detail_C();
            }

            next mSKS_EFT_FileDetail;
        }

        // Format trailer
        this.rec_Detail_Z();

        // Write to file
        this.fileWrite(msb.ToString());

        // Increment sequence number
        this.incrementSequenceNumber();

        // Set sequence number
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        if(mSKS_EFT_FileFormat)
        {
            //Get Next Sequence Number
            mSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementSequenceNumber</Name>
				<Source><![CDATA[
    private void incrementSequenceNumber()
    {
        if(mSequenceNumber >= 9999 || mSequenceNumber == 0)
        {
            mSequenceNumber = 1;
        }
        else
        {
            mSequenceNumber++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;

        select firstOnly forUpdate sks_eft_fileformat
        where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;

        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = mSequenceNumber;
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_A</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_A
    /// </summary>
    /// <returns>true</returns>
    boolean rec_Detail_A()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Record Count                            (   2-  10)       9
        // 3    Customer Number                         (  11-  20)      10
        // 4    File Creation Number                    (  21-  24)       4
        // 5    File Creation Date                      (  25-  30)       6
        // 6    Scotiabank Data Centre                  (  31-  35)       5
        // 7    Service Identifier                      (       36)       1
        // 8    Filler                                  (  37-  42)       6
        // 9    SD Ver.                                 (  43-  53)      11
        //10    Filler                                  (  54- 105)      52        
        //------------------------------------------------------------------------------------------------------
        
        // 1    Record Type
        msb.Append('A');

        // 2    Record Count
        msb.Append(SKS_PP_StringFormats::strFill(9, '1', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        
        // 3    Customer Number
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    File Creation Number
        msb.Append(SKS_PP_StringFormats::strFill(4,num2str(mSequenceNumber, 0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    File Creation Date
        msb.Append('0' + subStr(date2julian(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())), 3, 5));

        // 6    Scotiabank Data Centre
        msb.Append('00220');

        // 7    Service Identifier
        msb.Append('D');

        // 8    Filler
        msb.Append(SKS_PP_StringFormats::strFill(6, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    SD Ver.
        msb.Append(SKS_PP_StringFormats::strFill(11, '', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        //10    Filler
        msb.Append(SKS_PP_StringFormats::strFill(52, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_Y</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_Y
    /// </summary>
    /// <returns>true</returns>
    boolean rec_Detail_Y()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Originator Short Name                   (   2-  16)      15
        // 3    Originator Long Name                    (  17-  46)      30
        // 4    Return Institution Code                 (  47-  49)       3
        // 5    Return Branch Transit Number            (  50-  54)       5
        // 6    Return Account Number                   (  55-  66)      12
        // 7    Filler                                  (  67- 105)      39
        //------------------------------------------------------------------------------------------------------

        // 1    Record Type
        msb.Append('Y');

        // 2    Originator Short Name
        str originShortName;

        originShortName = this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('OriginShortName', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank));
        msb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(originShortName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Originator Long Name
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mSKS_EFT_Bank.ACHCompanyName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 4    Return Institution Code
        msb.Append('002');

        // 5    Return Branch Transit Number
        msb.Append(SKS_PP_StringFormats::strFill(5, subStr(mSKS_EFT_FileDetail.BankBankTransit, strLen(mSKS_EFT_FileDetail.BankBankTransit), -5), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 6    Return Account Number
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.BankBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 7    Filler
        msb.Append(SKS_PP_StringFormats::strFill(39, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_C</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_C
    /// </summary>
    /// <returns>true</returns>
    boolean rec_Detail_C()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Transaction Type                        (   2-   4)       3
        // 3    Amount                                  (   5-  14)      10
        // 4    Due Date                                (  15-  20)       6
        // 5    Institution Code                        (  21-  23)       3
        // 6    Transit Number                          (  24-  28)       5
        // 7    Account Number                          (  29-  40)      12
        // 8    Recipient's Name                        (  41-  70)      30
        // 9    Originator's Cross-Reference Number     (  71-  89)      19
        //10    Customer Sundry Information             (  90- 104)      15
        //11    Filler                                  (      105)       1
        //------------------------------------------------------------------------------------------------------

        // 1    Record Type
        msb.Append('C');
        mCRecordCount++;       

        // 2    Transaction Type
        msb.Append('460');

        // 3    Amount
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 10));
        mCPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        // 4    Due Date
        msb.Append('0' + subStr(date2julian(mSKS_EFT_FileDetail.EffectiveDate), 3, 5));
        
        // 5    Institution Code
        msb.Append(subStr(mSKS_EFT_FileDetail.DepBankTransit, 1, 3));

        // 6    Transit Number
        msb.Append(SKS_PP_StringFormats::strFill(5, subStr(mSKS_EFT_FileDetail.DepBankTransit, strLen(mSKS_EFT_FileDetail.DepBankTransit), -5), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Account Number
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 8    Recipient's Name
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mRemittanceName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Originator's Cross-Reference Number
        msb.Append(SKS_PP_StringFormats::strFill(19, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //10    Customer Sundry Information
        msb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //11    Filler
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_D</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_D
    /// </summary>
    /// <returns>true</returns>
    boolean rec_Detail_D()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Transaction Type                        (   2-   4)       3
        // 3    Amount                                  (   5-  14)      10
        // 4    Due Date                                (  15-  20)       6
        // 5    Filler                                  (       21)       1
        // 5    Institution Code                        (  22-  24)       3
        // 6    Transit Number                          (  25-  29)       5
        // 7    Account Number                          (  30-  41)      12
        // 8    Recipient's Name                        (  42-  71)      30
        // 9    Originator's Cross-Reference Number     (  72-  90)      19
        //10    Customer Sundry Information             (  91- 105)      15
        //------------------------------------------------------------------------------------------------------

        // 1    Record Type
        msb.Append('D');
        mDRecordCount++;        

        // 2    Transaction Type
        msb.Append('460');

        // 3    Amount
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur), 10));
        mDPaymentAmount += mSKS_EFT_FileDetail.InvoiceSettleAmountPmtCur;

        // 4    Due Date
        msb.Append('0' + subStr(date2julian(mSKS_EFT_FileDetail.EffectiveDate), 3, 5));

        // 5    Filler
        msb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        // 6    Institution Code
        msb.Append(subStr(mSKS_EFT_FileDetail.DepBankTransit, 2, 3));

        // 7    Transit Number
        msb.Append(SKS_PP_StringFormats::strFill(5, mSKS_EFT_FileDetail.DepBankTransit, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 8    Account Number
        msb.Append(SKS_PP_StringFormats::strFill(12, mSKS_EFT_FileDetail.DepBankAcct, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 9    Recipient's Name 
        msb.Append(SKS_PP_StringFormats::strFill(30, this.CharacterReplacement(mRemittanceName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        //10    Originator's Cross-Reference Number
        msb.Append(SKS_PP_StringFormats::strFill(19, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        //11    Customer Sundry Information
        msb.Append(SKS_PP_StringFormats::strFill(15, this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        
        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Detail_Z</Name>
				<Source><![CDATA[
    /// <summary>
    /// rec_Detail_Z
    /// </summary>
    /// <returns>true</returns>
    boolean rec_Detail_Z()
    {
        //------------------------------------------------------------------------------------------------------
        //Nbr   Content                                    Position    Size
        // 1    Record Type                             (        1)       1
        // 2    Filler                                  (   2-  10)       9
        // 3    Customer Number                         (  11-  20)      10
        // 4    File Creation Number                    (  21-  24)       4
        // 5    Total Value of Debits                   (  25-  38)      14
        // 6    Total Number of Debits                  (  39-  46)       8
        // 7    Total Value of Credits                  (  47-  60)      14
        // 8    Total Number of Credits                 (  61-  68)       8
        // 9    Filler                                  (  69-  105)     37
        //------------------------------------------------------------------------------------------------------

        // 1    Record Type
        msb.Append('Z');

        // 2    Filler
        msb.Append(SKS_PP_StringFormats::strFill(9, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        // 3    Customer Number
        msb.Append(SKS_PP_StringFormats::strFill(10, mSKS_EFT_Bank.ACHCompanyID, SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 4    File Creation Number
        msb.Append(SKS_PP_StringFormats::strFill(4, num2str(mSequenceNumber ,0, 0, 0, 0), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 5    Total Value of Debits
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mDPaymentAmount), 14));

        // 6    Total Number of Debits
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mDRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 7    Total Value of Credits
        msb.Append(SKS_PP_StringFormats::strMoney(this.getPositiveAmount(mCPaymentAmount), 14));

        // 8    Total Number of Credits
        msb.Append(SKS_PP_StringFormats::strFill(8, int2str(mCRecordCount), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));

        // 9    Filler
        msb.Append(SKS_PP_StringFormats::strFill(37, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));

        msb.Append(#LineEnd);
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>