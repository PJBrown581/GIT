<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_CC_CreditCardProcessorsFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SKS_CC_CreditCardProcessorsFormEventHandler
{    


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>SKS_CC_PaymentGatewayNameCtrl_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a lookup to the <c>SKS_CC_PaymentGatewayNameCtrl</c> control on <c>CreditCardProcessors</c> form.
    /// </summary>
    /// <param name="_sender">The source of the event.</param>
    /// <param name="e">Arguments of the OnLookup event.</param>
    [FormControlEventHandler(formControlStr(CreditCardProcessors, SKS_CC_PaymentGatewayNameCtrl), FormControlEventType::Lookup)]
    public static void SKS_CC_PaymentGatewayNameCtrl_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tablenum(SKS_CC_ResponseCodeMapping), _sender);
        Query query = new Query();

        sysTableLookup.addLookupfield(fieldnum(SKS_CC_ResponseCodeMapping, PaymentGatewayName), true);

        QueryBuildDataSource qbds = query.addDataSource(tablenum(SKS_CC_ResponseCodeMapping));
        qbds.addSelectionField(fieldnum(SKS_CC_ResponseCodeMapping, PaymentGatewayName));
        qbds.orderMode(OrderMode::GroupBy);
        qbds.addGroupByField(fieldnum(SKS_CC_ResponseCodeMapping, PaymentGatewayName));

        FormStringControl ctrl = _sender;
        str curValue = ctrl.text();
        
        if (curValue)
        {
            qbds.firstOnly(true);
            QueryBuildRange queryBuildRange = qbds.addRange(fieldnum(SKS_CC_ResponseCodeMapping, PaymentGatewayName));
            queryBuildRange.value(queryValue(curValue));
        }       

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;

        //cancel super() to prevent error.
        ce.CancelSuperCall();
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_CC_PaymentGatewayNameCtrl_OnValidating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds validation to the <c>SKS_CC_PaymentGatewayNameCtrl</c> control on <c>CreditCardProcessors</c> form.
    /// </summary>
    /// <param name="sender">he SKS_CC_PaymentGatewayNameCtr control on the form.</param>
    /// <param name="e">Arguments of the OnValidating event of the form control.</param>
    [FormControlEventHandler(formControlStr(CreditCardProcessors, SKS_CC_PaymentGatewayNameCtrl), FormControlEventType::Validating)]
    public static void SKS_CC_PaymentGatewayNameCtrl_OnValidating(FormControl _sender, FormControlEventArgs _e)
    {
        FormStringControl ctrl = _sender;
        SKS_CC_PaymentGatewayName curValue = ctrl.text();
        boolean isValidValue = true;        

        if (curValue)
        {
            SKS_CC_ResponseCodeMapping respCodeMap = SKS_CC_ResponseCodeMapping::find(curValue);
            if (!respCodeMap.PaymentGatewayName)
            {
                isValidValue =  checkFailed(strFmt("@SKS6047", curValue, tableId2pname(tableNum(SKS_CC_ResponseCodeMapping))));
            }
        }

        if (!isValidValue)
        {
            FormControlCancelEventArgs cancelArgs = _e as FormControlCancelEventArgs;
            cancelArgs.cancel(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreditCardProcessors_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds enable/disable logic to some form controls.
    /// </summary>
    /// <param name="sender">The CreditCardProcessors datasource from the form.</param>
    /// <param name="e">Arguments of the OnActivated event of the datasource on the form.</param>
    [FormDataSourceEventHandler(formDataSourceStr(CreditCardProcessors, CreditCardProcessors), FormDataSourceEventType::Activated),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter _e required in signature')]
    public static void CreditCardProcessors_OnActivated(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        boolean isPayFabricProcessor;
        CreditCardProcessors creditCardProcessors = _sender.cursor();
        FormRun element = _sender.formRun();

        if (creditCardProcessors.RecId)
        {
            isPayFabricProcessor = SKS_CC_PayFabricWalletHandler::isPayFabricProcessor(CreditCardProcessors.RecId);
        }

        FormControl connectorNameCtrl = element.design().controlName(formControlStr(CreditCardProcessors, ConnectorName));
        connectorNameCtrl.allowEdit(!isPayFabricProcessor);

        FormControl paymGatewayPage = element.design().controlName(formControlStr(CreditCardProcessors, SKS_CC_PaymGatewayPage));                 
        paymGatewayPage.visible(isPayFabricProcessor);

        FormControl testPayFabricConnectionBtn = element.design().controlName(formControlStr(CreditCardProcessors, SKS_TestPayFabricConnectionBtn));
        testPayFabricConnectionBtn.visible(isPayFabricProcessor);

        FormControl disallowZeroChargeCtrl = element.design().controlName(formControlStr(CreditCardProcessors, DisallowZeroCharge));
        disallowZeroChargeCtrl.enabled(!isPayFabricProcessor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>SKS_TestPayFabricConnectionBtn_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles 'Clicked' event for the button.
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    [FormControlEventHandler(formControlStr(CreditCardProcessors, SKS_TestPayFabricConnectionBtn), FormControlEventType::Clicked),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter _e required in signature')]
    public static void SKS_TestPayFabricConnectionBtn_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        SKS_CC_PayFabricWalletHandler   pfWalletHandler;
        Counter                         infoLogCounter = infolog.num();
        FormRun                         formRun = _sender.formRun() as FormRun;
        CreditCardProcessors            CreditCardProcessors = formRun.dataSource(formdatasourcestr(CreditCardProcessors, CreditCardProcessors)).cursor() as CreditCardProcessors;
        CreditCardAccountSetup          CreditCardAccountSetup = formRun.dataSource(formdatasourcestr(CreditCardProcessors, CreditCardAccountSetup)).cursor() as CreditCardAccountSetup;

        if (!CreditCardProcessors.RecId)
        {
            throw error("@SKS6311");
        }

        if (!SKS_CC_PayFabricWalletHandler::isPayFabricProcessor(CreditCardProcessors.RecId))
        {
            throw error("@SKS6312");
        }

        if (!CreditCardProcessors.Active)
        {
            warning("@SKS6313");
            return;
        }

        try
        {
            pfWalletHandler = SKS_CC_PayFabricWalletHandler::construct();
            pfWalletHandler.getPayFabricSecurityToken();
            info("@SKS6174");
        }
        catch
        {
            infolog.clear(infoLogCounter);
            throw error("@SKS6175");
        }

        SKS_CC_PayFabricWalletHandler::validateGatewayProfileName(CreditCardProcessors.Name);

        if (!CreditCardAccountSetup.SKS_CC_PaymentGatewayName)
        {
            warning("@SKS6176");
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreditCardAccountSetup_OnWriting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set disallow zero amount to true as it is required by PayFabric processor
    /// </summary>
    /// <param name="_sender"></param>
    /// <param name="_e"></param>
    [FormDataSourceEventHandler(formDataSourceStr(CreditCardProcessors, CreditCardAccountSetup), FormDataSourceEventType::Writing),
    SuppressBPWarning('BPParameterNotUsed', 'Parameter _e required in signature')]
    public static void CreditCardAccountSetup_OnWriting(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        CreditCardAccountSetup creditCardAccountSetup = _sender.cursor();

        if (creditCardAccountSetup.CreditCardProcessors && SKS_CC_PayFabricWalletHandler::isPayFabricProcessor(creditCardAccountSetup.CreditCardProcessors))
        {
            creditCardAccountSetup.DisallowZeroAmount = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>