<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_Format_US_NORTHERN_TRUST_062014</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Deutsche Bank
// WebPayments File Upload Format
//
//
// Supports: Cash Payments & Cash Receipts
//
// Structure:
// FileHeader
// Detail lines(with Swift components)
//
/// <summary>
/// SKS_EFT_Format_US_NORTHERN_TRUST_062014 extends SKS_EFT_Format
/// </summary>
class SKS_EFT_Format_US_NORTHERN_TRUST_062014 extends SKS_EFT_Format
{
    #define.FormatVersion('20220908')
    #define.Wire_SWIFT('Wire-SWIFT')
    #define.Wire_FED('Wire-FED')

    AmountCur   gAmountTransmitted;
    int         gNumberOfWiresTransmitted;
    SKS_EFT_SequenceNumber gSequenceNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormatVersion</Name>
				<Source><![CDATA[
    protected str getFormatVersion()
    {
        return #FormatVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatHeader</Name>
				<Source><![CDATA[
    //Nbr   Length  Description
        //1     3       Record Type:  001
        //2     3       Batch Number:  900
        //3     6       Create Date: YYMMDD
        //4     6       Create Time: HHMMSS
        //5     6       Value Date:  (Effective Date)
        //6     10      Customer ID:  XXXXXXXXXX
        //7     914     SPACE FILL
        // Total length: 948
    
    boolean FormatHeader()
    {
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        ;
    
        gAmountTransmitted = 0;
        gNumberOfWiresTransmitted = 0;
        //1     Record Type:  001
        sb.Append(SKS_PP_StringFormats::strFill(3,'1',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
        //2     A daily unique numbe starting at 900
        sb.Append(SKS_PP_StringFormats::strFill(3,int2str(gSequenceNumber), SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
    
    
    
        //3     Create Date: YYMMDD
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    
        //4     Create Time: HHMMSS
        sb.Append(SKS_PP_StringFormats::strTimeHHMMSS());
    
        //5     Value Date:  (Effective Date)
        sb.Append(SKS_PP_StringFormats::strDateYYMMDD(mSKS_EFT_File.EffectiveDate));
    
        //6     Customer ID:  XXXXXXXXXX
        sb.Append(SKS_PP_StringFormats::strFill(10,mSKS_EFT_Bank.ACHCompanyID,SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //7     914     SPACE FILL
        sb.Append(SKS_PP_StringFormats::strFill(914,' ', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatStructure</Name>
				<Source><![CDATA[
    protected void formatStructure()
    {
        ;
    
        //Get sequence number and sequence control
        this.getSequence();
    
        //Format Trailer
        this.FormatHeader();
    
        while(mSKS_EFT_FileDetail)
        {
            // Get SKS_EFT_Bank
            this.getSKS_EFT_Bank();
    
            // Get SKS_EFT_VendorPaym
            this.getSKS_EFT_VendorPaym();
    
            // Detail lines
            this.rec_Payment();
    
            next mSKS_EFT_FileDetail;
        }
    
        // Format trailer
        this.FormatTrailer();
    
        this.setSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>FormatTrailer</Name>
				<Source><![CDATA[
    boolean FormatTrailer()
    {
        System.Text.StringBuilder sb;
        ;
    
        sb = new System.Text.StringBuilder();
        sb.Append(SKS_PP_StringFormats::strFill(3,'99',SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(3,int2str(gSequenceNumber), SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(5,int2str(gNumberOfWiresTransmitted), SKS_PP_FillCharacter::Zero,SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(2,'',SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(17,num2str(gAmountTransmitted,4,2,DecimalSeparator::Comma,ThousandSeparator::None),SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::Left));
        sb.Append(SKS_PP_StringFormats::strFill(918, '', SKS_PP_FillCharacter::Space,SKS_PP_FillSide::Right));
    
        this.fileWrite(sb.ToString());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournaltxt</Name>
				<Source><![CDATA[
    private str getJournaltxt()
    {
        LedgerJournalTrans ledgerJournalTrans;
    
        select crossCompany Txt from ledgerJournalTrans where
            ledgerJournalTrans.RecId == mSKS_EFT_FileDetail.PaymentLineRecId;
    
        return this.CharacterReplacement(ledgerJournalTrans.Txt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSequence</Name>
				<Source><![CDATA[
    private void getSequence()
    {
        ;
        if(mSKS_EFT_FileFormat)
        {
            // If found, check date
            if(mSKS_EFT_FileFormat.NextDailyResetDate == DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
            {
                //Get Next Sequence Number
                gSequenceNumber = mSKS_EFT_FileFormat.NextSequenceNumber;
            }
            else
            {
                gSequenceNumber = 900;
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSwift59</Name>
				<Source><![CDATA[
    private str getSwift59(str _BeneficiaryID,
                                    str _BeneficiaryName,
                                    str _BeneficiaryAddress1,
                                    str _BeneficiaryAddress2,
                                    str _BeneficiaryAddress3,
                                    boolean isIBAN)
    {
        System.Text.StringBuilder sb;
        str tag = '59';
        ;
    
        sb = new System.Text.StringBuilder();
    
        sb.Append(strUpr(':' + tag + ':'));
    
        if(isIBAN)
            sb.Append(@'+' + SKS_PP_StringFormats::strFill(34, _BeneficiaryID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        else
            sb.Append(@'/' + SKS_PP_StringFormats::strFill(21, _BeneficiaryID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(_BeneficiaryName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        if(strLen(_BeneficiaryAddress1) > 0)
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(_BeneficiaryAddress1), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        if(strLen(_BeneficiaryAddress2) > 0)
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(_BeneficiaryAddress2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        if(strLen(_BeneficiaryAddress3) > 0)
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(_BeneficiaryAddress3), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        return sb.ToString();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSwift70</Name>
				<Source><![CDATA[
    //OBI value = 140x
    private str getSwift70(str _CreditAcctName, str _CreditAcctNumber, str _Reference)
    {
        System.Text.StringBuilder rtnval;
        System.Text.StringBuilder obiVal;
        str obiStr;
    
        str tag = '70';
        ;
    
        rtnval = new System.Text.StringBuilder();
        obiVal = new System.Text.StringBuilder();
        if(_CreditAcctName != '' || _CreditAcctNumber != '' || _Reference != '')
        {
            rtnval.Append(':' + strUpr(tag) + ':');
            rtnval.Append('OBI=');
    
            if(_CreditAcctName != '')
            {
                obiVal.Append('Account Name:');
                obiVal.Append(_CreditAcctName);
            }
    
            if(_CreditAcctNumber != '')
            {
                if(_CreditAcctName != '')
                {
                    obiVal.Append('/');
                }
                obiVal.Append('Account Number:');
                obiVal.Append(_CreditAcctNumber);
            }
    
            if(_Reference != '')
            {
                if(_CreditAcctName != '' || _CreditAcctNumber != '')
                {
                    obiVal.Append('/');
                }
                obiVal.Append('Reference:');
                obiVal.Append(_Reference);
            }
            obiStr = obiVal.ToString();
            rtnval.Append(subStr(obiStr,1,140));
    
            rtnval.Append('CRLF:');
        }
        return rtnval.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSwiftBankDTag</Name>
				<Source><![CDATA[
    private str getSwiftBankDTag(str _AddressTagId,
                                    str _IntermediateBankID,
                                    str _IntermediateBankName,
                                    str _IntermediateBankAddress1,
                                    str _IntermeidateBankAddress2,
                                    boolean _InsertSemicolonAftername = false)
    {
    
        System.Text.StringBuilder sb;
        ;
        sb = new System.Text.StringBuilder();
    
        sb.Append(strUpr(':' + _AddressTagId + ':'));
        sb.Append(SKS_PP_StringFormats::strFill(24, _IntermediateBankID, SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(_IntermediateBankName), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        if(_InsertSemicolonAftername)
            if(strLen(_IntermediateBankAddress1) > 0 || strLen(_IntermeidateBankAddress2) > 0)
                sb.Append(';');
        //if _IntermediateBankAddress2 is populated, _IntermediateBankAddress1 is required
        if(strLen(_IntermediateBankAddress1) > 0 || strLen(_IntermeidateBankAddress2) > 0)
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(_IntermediateBankAddress1), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        if(strLen(_IntermeidateBankAddress2) > 0)
            sb.Append(SKS_PP_StringFormats::strFill(35, this.CharacterReplacement(_IntermeidateBankAddress2), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        return sb.ToString();
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Payment</Name>
				<Source><![CDATA[
    //Field Max Len.    Description
    //1     3           RECORD TYPE:  'SOH'
    //2     10          Valid Treaury Passport template group ID number
    //3     2           SPACE FILL
    //4     5           Input Sequence
    //5     5           CRLF:
    //6     3           Message Type '100' (Constant)
    //7     2           Message priority '00' (Constant)
    //8     5           CRLF:
    //9     8           CNORUS55 (Constant)
    //10    3           IMT/DOM/DDN payment spec specific
    //11    1           SPACE FILL
    //12    5           CRLF:
    //13    896         SWIFT
            //POSSIBLE SWIFT FIELDS
            //20
            //32A
            //56D
            //57D
            //59
    
    boolean rec_Payment()
    {
    
        //BP Deviation Documented
        System.Text.StringBuilder sb = new System.Text.StringBuilder();
        str locBankId;
        str locBeneAddy2;
        str locIntAddr;
        ;
    
        gAmountTransmitted+= -1 * mSKS_EFT_filedetail.InvoiceSettleAmountPmtCur;
        gNumberOfWiresTransmitted+=1;
        //1     3           RECORD TYPE:  'SOH'
        sb.Append('SOH');
    
        //2     10          Valid Treaury Passport template group ID number - Left justify & space fill
        sb.Append(SKS_PP_StringFormats::strFill(10, this.CharacterReplacement(SKS_EFT_Format::getCodelookupvalue('TemplateId', mSKS_EFT_FileDetail.RecId, SKS_EFT_CodeLookupType::CodeLookupBank)), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //3     2           SPACE FILL
        sb.Append(SKS_PP_StringFormats::strFill(2, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //4     5           Input Sequence
        sb.Append(SKS_PP_StringFormats::strFill(5, int2str(gNumberOfWiresTransmitted), SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::left));
    
        //5     5           CRLF:
        sb.Append('CRLF:');
    
        //6     3           Message Type '100' (Constant)
        sb.Append(SKS_PP_StringFormats::strFill(3, '100', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::left));
    
    
        //7     2           Message priority '00' (Constant)
        sb.Append(SKS_PP_StringFormats::strFill(2, '00', SKS_PP_FillCharacter::Zero, SKS_PP_FillSide::left));
    
        //8     5           CRLF:
        sb.Append('CRLF:');
    
        //9     8           CNORUS44 (Constant)
        sb.Append(SKS_PP_StringFormats::strFill(8, 'CNORUS44', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //10    3           IMT/DOM/DDN payment spec specific
        if(mSKS_EFT_FileDetail.PaymSpec == #Wire_SWIFT)
        {
            sb.Append('IMT');
        }
        else if(mSKS_EFT_FileDetail.PaymSpec == #Wire_FED)
        {
            sb.Append('DOM');
        }
    
        //11    1           SPACE FILL
        sb.Append(SKS_PP_StringFormats::strFill(1, '', SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
    
        //12    5           CRLF:
        sb.Append('CRLF:');
    
        //BEGIN SWIFT - All Swift tags are to be followed by "CRLF:"
        //MANDATORY :20: 10 digit transaction identifier.
        sb.Append(SKS_EFT_Swift_Tags::getSwift20(SKS_PP_StringFormats::strFill(10,
                        this.CharacterReplacement(mSKS_EFT_FileDetail.PaymentReference),
                        SKS_PP_FillCharacter::Zero,
                        SKS_PP_FillSide::Left)));
        sb.Append('CRLF:');
    
        //MANDATORY :32A:
        sb.Append(SKS_EFT_Swift_Tags::getSwift32A(mSKS_EFT_File.EffectiveDate,
                    mSKS_EFT_FileDetail.PaymentCurrencyCode,
                    mSKS_EFT_filedetail.InvoiceSettleAmountPmtCur));
        sb.Append('CRLF:');
    
        //OPTIONAL :56D:
        //The Bank Id(or Swift) is required if an intermeidary bank is used, so if  no BankId(or swift), then no intermediary bank.
        if(strLen(mSKS_EFT_VendorPaym.WIntBankId) > 0 || strLen(mSKS_EFT_VendorPaym.WIntBankSwift) > 0 )
        {
    
            if(strLen(mSKS_EFT_VendorPaym.WIntBankSwift) > 0)
                locBankId = @'//SW' + mSKS_EFT_VendorPaym.WIntBankSwift;
            else
                locBankId = @'//AB' + mSKS_EFT_VendorPaym.WIntBankId;
    
            locIntAddr = this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankCity);
            if(locIntAddr && mSKS_EFT_VendorPaym.WIntBankCountryRegionId)
            {
                locIntAddr += ', ';
                this.CharacterReplacement(locIntAddr);
            }
            locIntAddr += mSKS_EFT_VendorPaym.WIntBankCountryRegionId;
    
            sb.Append(this.getSwiftBankDTag('56D', locBankId,
                            this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankName),
                            this.CharacterReplacement(mSKS_EFT_VendorPaym.WIntBankAddr),
                            locIntAddr,
                            true));
            sb.Append('CRLF:');
        }
    
        //MANDITORY :57D:
    
        if(strLen(mSKS_EFT_FileDetail.DepSwiftNo) > 0 || strLen(mSKS_EFT_FileDetail.DepBankTransit) > 0 )
        {
            locBeneAddy2 = '';
            if(strLen(mSKS_EFT_FileDetail.DepSwiftNo) > 0)
                locBankId = @'//SW' + mSKS_EFT_FileDetail.DepSwiftNo;
            else
                locBankId = @'//AB' + mSKS_EFT_FileDetail.DepBankTransit;
            //Assemble the Address Line 2 information
            if(strLen(mSKS_EFT_VendorPaym.WBenBankCity) > 0)
                locBeneAddy2 = this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankCity);
            if(strLen(mSKS_EFT_VendorPaym.WBenBankCountryRegionId) > 0)
            {
                if(strLen(locBeneAddy2) > 0)
                    locBeneAddy2 = locBeneAddy2 + ', ';
                locBeneAddy2 = this.CharacterReplacement(locBeneAddy2) + mSKS_EFT_VendorPaym.WBenBankCountryRegionId;
            }
    
            sb.Append(this.getSwiftBankDTag('57D',
                                locBankId,
                                this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankName),
                                this.CharacterReplacement(mSKS_EFT_VendorPaym.WBenBankAddr),
                                locBeneAddy2,
                               true));
            sb.Append('CRLF:');
    
    
        }
    
        //MANDATORY :59:
        //Assemble the address line 2 information
        locBeneAddy2 = '';
        if(strLen(mSKS_EFT_VendorPaym.WBeneCity) > 0)
            locBeneAddy2 = mSKS_EFT_VendorPaym.WBeneCity;
        if(strLen(mSKS_EFT_VendorPaym.WBeneState) > 0)
        {
            if(strLen(locBeneAddy2) > 0)
                locBeneAddy2 = locBeneAddy2 + ', ';
            locBeneAddy2 = locBeneAddy2 + mSKS_EFT_VendorPaym.WBeneState;
        }
        if(strLen(mSKS_EFT_VendorPaym.WBeneZipPostal) > 0)
        {
            if(strLen(locBeneAddy2) > 0)
                locBeneAddy2 = locBeneAddy2 + ', ';
            locBeneAddy2 = locBeneAddy2 + mSKS_EFT_VendorPaym.WBeneZipPostal;
        }
        this.CharacterReplacement(locBeneAddy2);
        if(strLen(mSKS_EFT_VendorPaym.WBeneCountryRegionId) > 0)
        {
            if(strLen(locBeneAddy2) > 0)
                locBeneAddy2 = locBeneAddy2 + ', ';
            locBeneAddy2 = this.CharacterReplacement(locBeneAddy2) + mSKS_EFT_VendorPaym.WBeneCountryRegionId;
        }
    
        if(strLen(mSKS_EFT_FileDetail.DepBankIBAN) > 0)
            locBankId = mSKS_EFT_FileDetail.DepBankIBAN;
        else
            locBankId = mSKS_EFT_FileDetail.DepBankAcct;
        sb.Append(this.getSwift59(locBankId,
        this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneName),
        this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr),
        this.CharacterReplacement(mSKS_EFT_VendorPaym.WBeneAddr2),
        locBeneAddy2,
        strLen(mSKS_EFT_FileDetail.DepBankIBAN) > 0));
        sb.Append('CRLF:');
    
        //:70:
        sb.Append(this.getSwift70(this.CharacterReplacement(mSKS_EFT_VendorPaym.WCrePartyName),
                            mSKS_EFT_VendorPaym.WCrePartyAcct,
                            this.getJournaltxt()));
    
        this.fileWrite(SKS_PP_StringFormats::strFill(948, sb.ToString(), SKS_PP_FillCharacter::Space, SKS_PP_FillSide::Right));
        return true;
    
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSequence</Name>
				<Source><![CDATA[
    private void setSequence()
    {
        SKS_EFT_FileFormat sks_eft_fileformat;
        ;
    
        select firstOnly forUpdate sks_eft_fileformat
            where sks_eft_fileformat.FormatId == mSKS_EFT_FileFormat.FormatId;
    
        if(sks_eft_fileformat)
        {
            sks_eft_fileformat.NextSequenceNumber = gSequenceNumber + 1;
            sks_eft_fileformat.NextDailyResetDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            sks_eft_fileformat.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>