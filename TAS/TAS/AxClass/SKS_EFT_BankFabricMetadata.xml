<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SKS_EFT_BankFabricMetadata</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;

/// <summary>
/// Loads metata from BankFabric library dlls
/// </summary>
class SKS_EFT_BankFabricMetadata
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadMetaDataList</Name>
				<Source><![CDATA[
     /// <summary>
     /// Loads metadata for all BankFabric library dlls on FileHub
     /// </summary>
     /// <param name = "_formatGroupListFilter">Optional filter</param>
     public static void loadMetaDataList(str _formatGroupListFilter, SKS_EFT_APIFormatType _APIFormatType)
    {
        int       numrecords;
        int       counter;

        SKG_File.Models.SKGFormatMetadata locFormatMetadata = SKS_EFT_BankFabricMetadata::getBFLList(_formatGroupListFilter, _APIFormatType);

        SKG_File.Models.SKGFormatMetadataRequest locFormatMetadataRequest = new SKG_File.Models.SKGFormatMetadataRequest();
        Generic.List<SKG_File.Models.SKGFormatMetadataRequestFormatGroup> formatGroups = new Generic.List<SKG_File.Models.SKGFormatMetadataRequestFormatGroup>();
        
        SKG_File.Models.SKGFormatMetadataGroup formatGroup;
        SKG_File.Models.SKGFormatMetadataRequestFormatGroup requestFormatGroup;

        if(locFormatMetadata.SKGFormatMetadataGroups != null)
        {
            numrecords = locFormatMetadata.SKGFormatMetadataGroups.get_count();
            for(counter = 0; counter < numrecords; Counter++)
            {
                formatGroup = locFormatMetadata.SKGFormatMetadataGroups.get_item(Counter);
                requestFormatGroup = SKS_EFT_BankFabricMetadata::getFormatList(formatGroup.formatGroup, formatGroup.formatGroupVersion, formatGroup.dataContractVersion, _APIFormatType);
                if(requestFormatGroup != null)
                {
                    formatGroups.Add(requestFormatGroup);
                }
            }
            if(_APIFormatType == SKS_EFT_APIFormatType::API)
            {
                locFormatMetadataRequest.Action = SKG_File.Models.SKGFormatMetadataAction::APIFormatMetadata;
            }
            else
            {
                locFormatMetadataRequest.Action = SKG_File.Models.SKGFormatMetadataAction::FormatMetadata;
            }

            // Note: Explicit conversion to System.Object is required by the X++ compiler to return a System.Collections.Generic object in an X++ method.
            System.Object asObject = formatGroups;
            locFormatMetadataRequest.SKGFormatMetadataRequestFormatGroups = asObject;
            SKS_EFT_BankFabricMetadata::loadMetaData(locFormatMetadataRequest, _APIFormatType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMetaDataSingleFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads metadata for one format from BankFabric library dlls on FileHub
    /// </summary>
    /// <param name = "_formatGroup">Format group</param>
    /// <param name = "_formatGroupVersion">Format group version</param>
    /// <param name = "_dataContractVersion">Data contract version</param>
    /// <param name = "_formatId">Format id</param>
    public static void loadMetaDataSingleFormat(str _formatGroup, str _formatGroupVersion, str _dataContractVersion, str _formatId, SKS_EFT_APIFormatType _APIFormatType)
    {
        SKG_File.Models.SKGFormatMetadataRequestFormat locFormatMetadataFormat = new SKG_File.Models.SKGFormatMetadataRequestFormat();
        SKG_File.Models.SKGFormatMetadataRequestFormatGroup locFormatMetadataFormatGroup = new SKG_File.Models.SKGFormatMetadataRequestFormatGroup();
        Generic.List<SKG_File.Models.SKGFormatMetadataRequestFormat> formats = new Generic.List<SKG_File.Models.SKGFormatMetadataRequestFormat>();
        SKG_File.Models.SKGFormatMetadataRequest locFormatMetadataRequest = new SKG_File.Models.SKGFormatMetadataRequest();
        Generic.List<SKG_File.Models.SKGFormatMetadataRequestFormatGroup> formatGroups = new Generic.List<SKG_File.Models.SKGFormatMetadataRequestFormatGroup>();

        locFormatMetadataFormatGroup.dataContractVersion = _dataContractVersion;
        locFormatMetadataFormatGroup.formatGroup = _formatGroup;
        locFormatMetadataFormatGroup.formatGroupVersion = _formatGroupVersion;
        locFormatMetadataFormatGroup.metaDataLevel = SKG_File.Models.SKGFormatMetadataLevel::Details;

        locFormatMetadataFormat.formatId = _formatId;
        locFormatMetadataFormat.Selected = true;
        formats.Add(locFormatMetadataFormat);

        System.Object asObjectFormats = formats;
        locFormatMetadataFormatGroup.SKGFormatMetadataRequestFormats = asObjectFormats;

        formatGroups.Add(locFormatMetadataFormatGroup);

        if(_APIFormatType == SKS_EFT_APIFormatType::API)
        {
            locFormatMetadataRequest.Action = SKG_File.Models.SKGFormatMetadataAction::APIFormatMetadata;
        }
        else
        {
            locFormatMetadataRequest.Action = SKG_File.Models.SKGFormatMetadataAction::FormatMetadata;
        }
        System.Object asObject = formatGroups;
        locFormatMetadataRequest.SKGFormatMetadataRequestFormatGroups = asObject;
        SKS_EFT_BankFabricMetadata::loadMetaData(locFormatMetadataRequest, _APIFormatType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMetaData</Name>
				<Source><![CDATA[
    private static void loadMetaData(SKG_File.Models.SKGFormatMetadataRequest locFormatMetadataRequest, SKS_EFT_APIFormatType _APIFormatType)
    {
        Generic.List<SKG_File.Models.SKGFormatMetadataFormatHeader> formatList = new Generic.List<SKG_File.Models.SKGFormatMetadataFormatHeader>();
        int       numrecords, numFormatRecords;
        int       counter, formatCounter;

        SKS_EB_FileStorage locSKS_EB_FileStorage;
        select firstonly StorageOption_APEFTFXDD from locSKS_EB_FileStorage;
        SKS_BF_BankIntType locSKS_BF_BankIntType = locSKS_EB_FileStorage.StorageOption_APEFTFXDD == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal;
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(locSKS_BF_BankIntType);

        SKG_File.Models.SKGFormatMetadataRequest metaDataRequest =  fileHub.callPaymentMetadata(locFormatMetadataRequest);
        if(metaDataRequest.Response.HasException)
        {
            error("@SKS:SKGMetadataLoadError" + metaDataRequest.Response.Exception);
            return;
        }
        SKS_EFT_Format_MetaData loadMetadata = new SKS_EFT_Format_MetaData();

        Generic.List<SKG_File.Models.SKGFormatMetadataGroup> formatGroupListImport = new Generic.List<SKG_File.Models.SKGFormatMetadataGroup>();
        System.Object asObjectformatGroupListImport = metaDataRequest.Response.FormatMetadataOut.SKGFormatMetadataGroups;
        formatGroupListImport = asObjectformatGroupListImport;

        if(!CLRInterop::isNull(formatGroupListImport))
        {
            numrecords = formatGroupListImport.get_count();
            SKG_File.Models.SKGFormatMetadataGroup formatGroupImport;
            for(counter = 0; counter < numrecords; Counter++)
            {
                formatGroupImport = formatGroupListImport.get_item(Counter);

                System.Object asObject = formatGroupImport.SKGFormatMetadataFormatHeaders;
                formatList = asObject;
                if(!CLRInterop::isNull(formatList))
                {
                    CLRObject DeleteListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataDelete]()');
                    DeleteListImport = formatGroupImport.SKGFormatMetadataDeletes;
                    if(!CLRInterop::isNull(DeleteListImport))
                    {
                        SKS_EFT_FormatMetaData_Delete lSKS_EFT_FormatMetaData_Delete = new SKS_EFT_FormatMetaData_Delete();
                        lSKS_EFT_FormatMetaData_Delete.deleteMetadataContainer(DeleteListImport);
                    }

                    numFormatRecords = formatList.get_count();
                    SKG_File.Models.SKGFormatMetadataFormatHeader format;
                    for(formatCounter = 0; formatCounter < numFormatRecords; formatCounter++)
                    {
                        format = formatList.get_item(formatCounter);
loadMetadata.CreateFormatHeader(format, SKS_EB_CodeSource::BankFabric, _APIFormatType);  //H
                    }
                }

                CLRObject paymSpecListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataFormatPaymSpecs]()');
                paymSpecListImport = formatGroupImport.SKGFormatMetadataFormatPaymSpecs;
                if(!CLRInterop::isNull(paymSpecListImport))
                {
                    loadMetadata.CreateFormatPaySpecsDatabase(paymSpecListImport);
                }

                CLRObject paymSpecFieldsListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataPaymSpecFields]()');
                paymSpecFieldsListImport = formatGroupImport.SKGFormatMetadataPaymSpecFields;
                if(!CLRInterop::isNull(paymSpecFieldsListImport))
                {
                    loadMetadata.CreateFormatPaySpecsFieldsDatabase(paymSpecFieldsListImport);
                }

                CLRObject formatNoteListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataFormatNotes]()');
                formatNoteListImport = formatGroupImport.SKGFormatMetadataFormatNotes;
                if(!CLRInterop::isNull(formatNoteListImport))
                {
                    loadMetadata.CreateFormatNotesDatabase(formatNoteListImport);
                }

                CLRObject formatValidationListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataFormatValidations]()');
                formatValidationListImport = formatGroupImport.SKGFormatMetadataFormatValidations;
                if(!CLRInterop::isNull(formatValidationListImport))
                {
                    loadMetadata.CreateFormatValidationsDatabase(formatValidationListImport);
                }

                CLRObject formatCodeLookupListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataCodeLookup]()');
                formatCodeLookupListImport = formatGroupImport.SKGFormatMetadataCodeLookups;
                if(!CLRInterop::isNull(formatCodeLookupListImport))
                {
                    loadMetadata.CreateCodeLookupDatabase(formatCodeLookupListImport);
                }

                CLRObject formatCodeLookupValuesListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataCodeLookupValues]()');
                formatCodeLookupValuesListImport = formatGroupImport.SKGFormatMetadataCodeLookupValues;
                if(!CLRInterop::isNull(formatCodeLookupValuesListImport))
                {
                    loadMetadata.CreateCodeLookupValuesDatabase(formatCodeLookupValuesListImport);
                }

                CLRObject formatControlFormatListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataControlFormat]()');
                formatControlFormatListImport = formatGroupImport.SKGFormatMetadataControlFormats;
                if(!CLRInterop::isNull(formatControlFormatListImport))
                {
                    loadMetadata.CreateControlFormatDatabase(formatControlFormatListImport);
                }

                CLRObject formatDVRulesListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataDVRules]()');
                formatDVRulesListImport = formatGroupImport.SKGFormatMetadataDVRules;
                if(!CLRInterop::isNull(formatDVRulesListImport))
                {
                    loadMetadata.CreateDVRulesDatabase(formatDVRulesListImport);
                }

                CLRObject formatDVRuleDetailsListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataDVDetails]()');
                formatDVRuleDetailsListImport = formatGroupImport.SKGFormatMetadataDVDetails;
                if(!CLRInterop::isNull(formatDVRuleDetailsListImport))
                {
                    loadMetadata.CreateDVDetailsDatabase(formatDVRuleDetailsListImport);
                }

                CLRObject validationMappingsListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataValidationMapping]()');
                validationMappingsListImport = formatGroupImport.SKGFormatMetadataValidationMappings;
                if(!CLRInterop::isNull(validationMappingsListImport))
                {
                    loadMetadata.CreateValidationMappingDatabase(validationMappingsListImport);
                }

                CLRObject bankCodeLookupListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataBankCodeLookup]()');
                bankCodeLookupListImport = formatGroupImport.SKGFormatMetadataBankCodeLookups;
                if(!CLRInterop::isNull(bankCodeLookupListImport))
                {
                    loadMetadata.CreateBankCodeLookupDatabase(bankCodeLookupListImport);
                }

                CLRObject bankCodeLookupValuesListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataBankCodeLookupValues]()');
                bankCodeLookupValuesListImport = formatGroupImport.SKGFormatMetadataBankCodeLookupValues;
                if(!CLRInterop::isNull(bankCodeLookupValuesListImport))
                {
                    loadMetadata.CreateBankCodeLookupValuesDatabase(bankCodeLookupValuesListImport);
                }

                CLRObject FileFormatFieldsListImport = new CLRObject('System.Collections.Generic.List`1[SKG_File.Models.SKGFormatMetadataFileFormatFields]()');
                FileFormatFieldsListImport = formatGroupImport.SKGFormatMetadataFileFormatFields;
                if(!CLRInterop::isNull(FileFormatFieldsListImport))
                {
                    loadMetadata.CreateFileFormatFieldsDatabase(FileFormatFieldsListImport);
                }

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBFLList</Name>
				<Source><![CDATA[
    public static SKG_File.Models.SKGFormatMetadata getBFLList(str _formatGroupListFilter, SKS_EFT_APIFormatType _APIFormatType)
    { 
        SKG_File.Models.SKGFormatMetadataRequest locFormatMetadataRequest = new SKG_File.Models.SKGFormatMetadataRequest();

        SKS_EB_FileStorage locSKS_EB_FileStorage;
        select firstonly StorageOption_APEFTFXDD from locSKS_EB_FileStorage;
        SKS_BF_BankIntType locSKS_BF_BankIntType = locSKS_EB_FileStorage.StorageOption_APEFTFXDD == SKS_EB_BankIntegOptWithNoLicense::BankFabricEnumValue ? SKS_BF_BankIntType::BankFabric : SKS_BF_BankIntType::FileHubLocal;
        SKS_EB_FileHub fileHub = SKS_EB_FileHub::construct(locSKS_BF_BankIntType);

        if(_APIFormatType == SKS_EFT_APIFormatType::API)
        {
            locFormatMetadataRequest.Action = SKG_File.Models.SKGFormatMetadataAction::APIFormatGroupList;
        }
        else
        {
            locFormatMetadataRequest.Action = SKG_File.Models.SKGFormatMetadataAction::FormatGroupList;
        }

        locFormatMetadataRequest.FormatGroupListFilter = _formatGroupListFilter;
        SKG_File.Models.SKGFormatMetadataRequest metaDataRequest =  fileHub.callPaymentMetadata(locFormatMetadataRequest);

        SKG_File.Models.SKGFormatMetadata locFormatMetadata = metaDataRequest.Response.FormatMetadataOut;

        return locFormatMetadata;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatList</Name>
				<Source><![CDATA[
    private static SKG_File.Models.SKGFormatMetadataRequestFormatGroup getFormatList(str _formatGroup, str _formatGroupVersion, str _dataContractVersion, SKS_EFT_APIFormatType _APIFormatType)
    { 
        SKG_File.Models.SKGFormatMetadataRequestFormat locFormatMetadataFormat = new SKG_File.Models.SKGFormatMetadataRequestFormat();
        SKG_File.Models.SKGFormatMetadataRequestFormatGroup locFormatMetadataFormatGroup;

        str className = strReplace('SKS_EFT_BankFabricPayment_' + _dataContractVersion, '.', '_');
        str mReturnMsg = SKS_EFT_Processing::ValidateBFLClass(className);

        if(mReturnMsg != '') //errors were found
        {
            error(mReturnMsg + ';' + "@SKS:SKGFormatGroupNotLoaded" + ':' + _formatGroup);
        }

        Generic.List<SKG_File.Models.SKGFormatMetadataRequestFormat> formats = new Generic.List<SKG_File.Models.SKGFormatMetadataRequestFormat>();
        
        SKS_EFT_FileFormat lSKS_EFT_FileFormat;
        select firstonly FormatGroup, FormatGroupVersion, FormatGroupCodeSource from lSKS_EFT_FileFormat where lSKS_EFT_FileFormat.FormatGroup == _formatGroup;
        if(!lSKS_EFT_FileFormat) // If format group not found, need to load it
        {
            locFormatMetadataFormatGroup = new SKG_File.Models.SKGFormatMetadataRequestFormatGroup();
            locFormatMetadataFormatGroup.dataContractVersion = _dataContractVersion;
            locFormatMetadataFormatGroup.formatGroup = _formatGroup;
            locFormatMetadataFormatGroup.formatGroupVersion = _formatGroupVersion;
            locFormatMetadataFormatGroup.metaDataLevel = SKG_File.Models.SKGFormatMetadataLevel::Header;
        }
        else if(lSKS_EFT_FileFormat.FormatGroupCodeSource == SKS_EB_CodeSource::BankFabric && 
                lSKS_EFT_FileFormat.FormatGroupVersion != _formatGroupVersion) // Only load if format group version is different
        {
            locFormatMetadataFormatGroup = new SKG_File.Models.SKGFormatMetadataRequestFormatGroup();
            boolean firstRecord = true;
            while select FormatId, Selected, FormatGroup, FormatGroupVersion from lSKS_EFT_FileFormat where lSKS_EFT_FileFormat.FormatGroup == _formatGroup 
            {
                if(firstRecord)
                {
                    locFormatMetadataFormatGroup.dataContractVersion = _dataContractVersion;
                    locFormatMetadataFormatGroup.formatGroup = _formatGroup;
                    locFormatMetadataFormatGroup.formatGroupVersion = _formatGroupVersion;
                    locFormatMetadataFormatGroup.metaDataLevel = SKG_File.Models.SKGFormatMetadataLevel::HeaderAndDetails;
                    firstRecord = false;
                }
                if(lSKS_EFT_FileFormat.Selected)
                {
                    locFormatMetadataFormat.formatId = lSKS_EFT_FileFormat.FormatId;
                    locFormatMetadataFormat.Selected = lSKS_EFT_FileFormat.Selected;
                    formats.Add(locFormatMetadataFormat);
                }
                locFormatMetadataFormat = new SKG_File.Models.SKGFormatMetadataRequestFormat();
            }
            System.Object asObject = formats;
            locFormatMetadataFormatGroup.SKGFormatMetadataRequestFormats = asObject;
        }
        return locFormatMetadataFormatGroup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>